using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
#region Actualizacion SGOCOES grupo A
using COES.Servicios.Aplicacion.Evento;
using COES.Servicios.Aplicacion.Eventos;
using COES.Servicios.Aplicacion.Helper;
using COES.Dominio.DTO.Sic;
using System.IO;
using COES.MVC.Intranet.Helper;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.Eventos.Helper;
using COES.MVC.Intranet.Controllers;
using log4net;
using Novacode;
using System.Drawing;
using COES.MVC.Intranet.App_Start;
using System.Globalization;
using COES.MVC.Intranet.Areas.Eventos.Models;
using System.Reflection;
using COES.Servicios.Aplicacion.General;
using COES.Servicios.Aplicacion.IEOD;
using COES.MVC.Intranet.Areas.Eventos.Helper;
using COES.Servicios.Aplicacion.Recomendacion;
using System.Configuration;
#endregion
using COES.Servicios.Aplicacion.TiempoReal;
using COES.Dominio.DTO.Scada;
using COES.Framework.Base.Core;
using System.Web.UI.WebControls;
using Table = Novacode.Table;
using Paragraph = Novacode.Paragraph;
using System.Text.RegularExpressions;
using COES.MVC.Intranet.Areas.Evento.Helper;
using DevExpress.XtraRichEdit;
using DevExpress.XtraRichEdit.API.Native;
using DevExpress.Office.Utils;
using COES.Servicios.Aplicacion.CPPA.Helper;
using COES.Framework.Base.Tools;
using System.IO.Compression;
using Ionic.Zip;


namespace COES.MVC.Intranet.Areas.Eventos.Controllers

{
    [ValidarSesion]
    public class AnalisisFallasController : BaseController
    {
        AnalisisFallasAppServicio servAF = new AnalisisFallasAppServicio();
        EventosAppServicio servicioEvento = new EventosAppServicio();
        EventoAppServicio servicio = new EventoAppServicio();
        ScadaSp7AppServicio servScadaSp7 = new ScadaSp7AppServicio();
        private readonly CriteriosEventoAppServicio servCriteriosEvento = new CriteriosEventoAppServicio();
        #region Declaracion de variables de Sesión
        private static readonly ILog Log = log4net.LogManager.GetLogger(MethodBase.GetCurrentMethod().Name);
        private static string NameController = MethodBase.GetCurrentMethod().DeclaringType.Name;

        /// <summary>
        /// Excepciones ocurridas en el controlador
        /// </summary>
        /// <param name="filterContext"></param>
        protected override void OnException(ExceptionContext filterContext)
        {
            try
            {
                log4net.Config.XmlConfigurator.Configure();
                Exception objErr = filterContext.Exception;
                Log.Error(NameController, objErr);
            }
            catch (Exception ex)
            {
                Log.Fatal(NameController, ex);
                throw;
            }
        }

        #endregion

        public ActionResult Index()
        {
            return View();
        }

        public ActionResult Cubo()
        {
            return View();
        }

        public ActionResult FallaC100()
        {
            return View();
        }
        public AnalisisFallasController()
        {
            log4net.Config.XmlConfigurator.Configure();
        }



        #region Actualizacion SGOCOES grupo A



        public ActionResult Lista()
        {
            if (!base.IsValidSesionView()) return base.RedirectToLogin();
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            ViewBag.EmpresaInvolucrada = appAnalisisFallas.ObtenerEmpresasInvolucrada();
            ViewBag.EmpresaPropietaria = appAnalisisFallas.ObtenerEmpresaPropietaria();
            ViewBag.TipoEquipo = appAnalisisFallas.ObtenerTipoEquipo();

            ViewBag.FechaInicio = DateTime.Now.AddDays(-30).ToString(Constantes.FormatoFecha);
            ViewBag.FechaFin = DateTime.Now.AddDays(1).ToString(Constantes.FormatoFecha);

            return View();
        }

        public ActionResult ListaResponsables()
        {
            if (!base.IsValidSesionView()) return base.RedirectToLogin();
            ResponsableAppServicio responsableAppServicio = new ResponsableAppServicio();
            PantallaResponsables pantallaResponsables = new PantallaResponsables();
            pantallaResponsables.RutaArchivosFirma = ConfigurationManager.AppSettings["CarpetaDeFirmas"];
            pantallaResponsables.ListaDirectorio = responsableAppServicio.ObtenerListaDirectorio();
            return View(pantallaResponsables);
        }

        public JsonResult ConsultarResponsables(string Estado, string NombreApellidos)
        {
            ResponsableAppServicio responsableAppServicio = new ResponsableAppServicio();
            JsonResult jRespuesta = null;

            List<SiResponsableDTO> lstResponsables = new List<SiResponsableDTO>();
            lstResponsables = responsableAppServicio.ObtenerListaResponsables(Estado, NombreApellidos);
            jRespuesta = Json(lstResponsables, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public bool GrabarNuevoResponsable(SiResponsableDTO responsable, HttpPostedFileBase file)
        {
            bool respuesta = false;
            int tipo = 1;
            ResponsableAppServicio responsableAppServicio = new ResponsableAppServicio();

            FileInfo fileFirma = new FileInfo(file.FileName);
            string extensionArchivo = fileFirma.Extension;
            responsable.NombreArchivoFirma = file.FileName;

            SiDirectorioDTO director = responsableAppServicio.ObtenerDirectorio(responsable.CodigoDirector);
            responsable.Repfirma = director.Dircorreo.Split('@')[0].Trim() + Path.GetExtension(file.FileName); ;
            var resp = responsableAppServicio.GuardarNuevoResponsable(responsable);
            //string nombreArchivoFirma = "Firma" + resp.ToString("0000000000") + extensionArchivo;
            string nombreArchivoFirma = responsable.Repfirma;

            respuesta = true;
            if (file != null)
            {
                // Guardar Archivo
                GrabarArchivoEventos(nombreArchivoFirma, file, tipo);
            }
            return respuesta;
        }

        public bool GrabarEditarResponsable(SiResponsableDTO responsable, HttpPostedFileBase file)
        {
            bool respuesta = false;
            int tipo = 1;
            ResponsableAppServicio responsableAppServicio = new ResponsableAppServicio();
            SiResponsableDTO objresponsable = responsableAppServicio.ObtenerResponsable(responsable.CodigoResponsable);

            if (file != null)
            {
                SiDirectorioDTO director = responsableAppServicio.ObtenerDirectorio(objresponsable.CodigoDirector);
                responsable.Repfirma = director.Dircorreo.Split('@')[0].Trim() + Path.GetExtension(file.FileName);
                responsable.NombreArchivoFirma = file.FileName;
            }
            else
                responsable.Repfirma = objresponsable.Repfirma;
            var resp = responsableAppServicio.GuardarEditarResponsable(responsable);


            respuesta = true;
            if (file != null)
            {
                // Guardar Archivo
                GrabarArchivoEventos(responsable.Repfirma, file, tipo);
            }
            return respuesta;
        }

        public bool EliminarResponsable(int CodigoResponsable)
        {
            bool respuesta = false;
            ResponsableAppServicio responsableAppServicio = new ResponsableAppServicio();
            respuesta = responsableAppServicio.EliminarResponsable(CodigoResponsable, "", "");
            return respuesta;
        }

        public JsonResult ObtenerResponsable(int CodigoResponsable)
        {
            var foldername = ConfigurationManager.AppSettings["CarpetaDeFirmas"];
            ResponsableAppServicio responsableAppServicio = new ResponsableAppServicio();
            JsonResult jRespuesta = null;

            SiResponsableDTO objResponsables = new SiResponsableDTO();
            objResponsables = responsableAppServicio.ObtenerResponsable(CodigoResponsable);
            objResponsables.NombreArchivoFirma = objResponsables.NombreArchivoFirma;
            jRespuesta = Json(objResponsables, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public JsonResult EnviarCorreo(int codigoCTAF)
        {
            bool respuesta = false;
            string literalEmpresasInvolucradas = string.Empty;
            string NombreTipo = string.Empty;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(codigoCTAF);
            EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(oAnalisisFallaDTO.EVENCODI);
            List<EventoDTO> LstEvento = appAnalisisFallas.ObtenerEventoCitacion(codigoCTAF);
            List<EmpresaInvolucradaDTO> lsEmpresaInvolucradaReunion = appAnalisisFallas.ObtenerEmpresasInvolucradaReunion(codigoCTAF);

            int contador = 0;
            foreach (var item in lsEmpresaInvolucradaReunion)
            {
                contador++;

                if (item.EMPRCODI != 1)
                    literalEmpresasInvolucradas += item.EMPRNOMB + "</br></br>";
            }

            if (literalEmpresasInvolucradas != "")
                literalEmpresasInvolucradas += "COORDINADOR";


            foreach (var item in LstEvento)
            {
                item.EmpresaInvolucrada = literalEmpresasInvolucradas;
            }

            if (LstEvento[0].EVENTIPOFALLA == "P")
            {
                NombreTipo = "CITACION P ";
            }

            else if (LstEvento[0].EVENTIPOFALLA == "N")
            {
                NombreTipo = "CITACION NP ";
            }

            List<EventoDTO> ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
            string filePdf = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, ListaEventosSco, ConstantesEvento.SubCarpetaCtafPublica) + NombreTipo + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".pdf";

            //string filename = "EV-COC-" + oAnalisisFallaDTO.AFEANIO + "-" + oAnalisisFallaDTO.AFECODI.ToString() + ".pdf";
            //string foldername = "Post Operación/Analisis de Fallas/" + oAnalisisFallaDTO.AFEANIO + "/" + oAnalisisFallaDTO.AFECODI + "/";
            //string filePdf = string.Concat(Constantes.FileSystemPortal, foldername, filename);

            string mensaje = "No se encontró el archivo generado, por favor generar el pdf.";

            if (!System.IO.File.Exists(filePdf))
            {
                return Json(new { result = respuesta, responseText = mensaje }, JsonRequestBehavior.AllowGet);
            }

            respuesta = appAnalisisFallas.EnviarCorreoCTAF(oAnalisisFallaDTO, oEventoDTO, LstEvento, filePdf);
            mensaje = respuesta ? "Se envio el correo correctamente" : "Error en envío de correo.";

            return Json(new { result = respuesta, responseText = mensaje }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult EnviarCorreoActa(int codigoCTAF)
        {
            bool respuesta = false;
            string filename = string.Empty;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(codigoCTAF);
            EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(oAnalisisFallaDTO.EVENCODI);
            List<EventoDTO> LstEvento = appAnalisisFallas.ObtenerEventoCitacion(codigoCTAF);

            List<EventoDTO> ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
            List<EveRecomobservDTO> ListaObservaciones = new List<EveRecomobservDTO>();
            List<EveRecomobservDTO> ListaRecomendaciones = new List<EveRecomobservDTO>();
            foreach (EventoDTO itemEvento in ListaEventosSco)
            {
                List<EveRecomobservDTO> Obsrvaciones = servAF.ListEveRecomobserv((int)itemEvento.EVENCODI, 2);
                ListaObservaciones.AddRange(Obsrvaciones);
                List<EveRecomobservDTO> Recomendaciones = servAF.ListEveRecomobserv((int)itemEvento.EVENCODI, 1);
                ListaRecomendaciones.AddRange(Recomendaciones);
            }

            string fileActaPdfFull = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, ListaEventosSco, ConstantesEvento.SubCarpetaCtafPublica) + "ACTA EV-" + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".pdf";
            string fileInformePdfFull = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, ListaEventosSco, ConstantesEvento.SubCarpetaCtafPublica) + "CT-AF_EV-" + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".pdf";

            //string fileFolderName = "Post Operación/Analisis de Fallas/" + oAnalisisFallaDTO.AFEANIO + "/" + oAnalisisFallaDTO.AFECODI + "/";

            //string fileActaPdf = "EV-CTA-" + oAnalisisFallaDTO.AFEANIO + "-" + oAnalisisFallaDTO.AFECODI.ToString() + ".pdf";
            //string fileActaPdfFull = string.Concat(Constantes.FileSystemPortal, fileFolderName, fileActaPdf);

            //string fileInformePdf = "EV-CTI-" + oAnalisisFallaDTO.AFEANIO + "-" + oAnalisisFallaDTO.AFECODI.ToString() + ".pdf";
            //string fileInformePdfFull = string.Concat(Constantes.FileSystemPortal, fileFolderName, fileInformePdf);

            string mensaje;

            if (oAnalisisFallaDTO.AFELIMATENCOMEN != null)
            {
                if (System.IO.File.Exists(fileActaPdfFull))
                {
                    respuesta = appAnalisisFallas.EnviarCorreoActaCTAF(oAnalisisFallaDTO, oEventoDTO, fileActaPdfFull, fileInformePdfFull, ListaObservaciones, ListaRecomendaciones);
                    if (respuesta)
                        mensaje = "Se envió el correo correctamente";
                    else
                        mensaje = "Error en envío de correo.";
                }
                else
                {
                    mensaje = "No se encontró el archivo generado, por favor generar el pdf.";
                }
            }
            else
            {
                mensaje = "Debe ingresar Fecha Límite de atención a comentarios..";
            }


            return Json(new { result = respuesta, responseText = mensaje }, JsonRequestBehavior.AllowGet);
        }

        public JsonResult Buscar(Eventos.Models.AnalisisFallasModel oAnalisisFallasModel)//Dominio.DTO.Sic.EventoDTO oEventoDTO
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<Dominio.DTO.Sic.EventoDTO> ListaAF = new List<EventoDTO>();
            List<EventoDTO> lstEventosSco;
            EventoDTO oEventoDTO = new EventoDTO();
            oEventoDTO.EmpresaPropietaria = oAnalisisFallasModel.EmpresaPropietaria;
            oEventoDTO.EmpresaInvolucrada = oAnalisisFallasModel.EmpresaInvolucrada;
            oEventoDTO.TipoEquipo = oAnalisisFallasModel.TipoEquipo;
            oEventoDTO.Estado = oAnalisisFallasModel.Estado;
            oEventoDTO.Impugnacion = oAnalisisFallasModel.Impugnacion;
            oEventoDTO.TipoReunion = oAnalisisFallasModel.TipoReunion;
            oEventoDTO.RNC = oAnalisisFallasModel.RNC;
            oEventoDTO.ERACMF = oAnalisisFallasModel.ERACMF;
            oEventoDTO.ERACMT = oAnalisisFallasModel.ERACMT;
            oEventoDTO.EDAGSF = oAnalisisFallasModel.EDAGSF;
            oEventoDTO.DI = oAnalisisFallasModel.DI;
            oEventoDTO.DF = oAnalisisFallasModel.DF;
            oEventoDTO.Anulado = oAnalisisFallasModel.Anulado;
            oEventoDTO.FuerzaMayor = oAnalisisFallasModel.FuerzaMayor;
            List<Dominio.DTO.Sic.EventoDTO> ListaEvento = appAnalisisFallas.ConsultarAnalisisFallas(oEventoDTO);
            List<EveEventoDTO> lstEventosAsociados;
            List<EventoDTO> lstEvento = new List<EventoDTO>();

            lstEventosSco = ListaEvento.DistinctBy(x => x.CODIGO).ToList();
            if (oAnalisisFallasModel.ERACMF == "S" || oAnalisisFallasModel.RNC == "S" || oAnalisisFallasModel.ERACMT == "S" || oAnalisisFallasModel.EDAGSF == "S")
            {
                foreach (var x in lstEventosSco)
                {
                    lstEventosAsociados = appAnalisisFallas.ListadoEventosAsoCtaf(Convert.ToInt32(x.EVENCODI)).DistinctBy(y => y.Evencodi).ToList();
                    if (lstEventosAsociados.Count > 0)
                    {
                        foreach (var j in lstEventosAsociados)
                        {
                            EventoDTO Asociado = appAnalisisFallas.EventoDTOAsoCtaf(j.Evencodi);
                            if (Asociado.CODIGO != null)
                                lstEvento.Add(Asociado);
                        }
                    }
                    else
                        lstEvento.Add(x);
                }
                var codicosCtafAsociados = lstEvento.Select(x => new { x.CODIGO }).Distinct().ToList();
                foreach (var item in codicosCtafAsociados)
                {
                    EventoDTO primer_evento = (lstEvento.Where(y => y.CODIGO == item.CODIGO).OrderBy(c => DateTime.ParseExact(c.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture)).FirstOrDefault());
                    ListaAF.Add(primer_evento);
                }
            }
            else
            {
                foreach (var x in lstEventosSco)
                {
                    lstEventosAsociados = appAnalisisFallas.ListadoEventosAsoCtaf(Convert.ToInt32(x.EVENCODI)).DistinctBy(y => y.Evencodi).ToList();
                    if (lstEventosAsociados.Count > 0)
                    {
                        foreach (var j in lstEventosAsociados)
                        {
                            EventoDTO Asociado = appAnalisisFallas.EventoDTOAsoCtaf(j.Evencodi);
                            if (Asociado.CODIGO != null)
                                lstEvento.Add(Asociado);
                        }
                    }
                    else
                        lstEvento.Add(x);
                }
                var codicosCtafAsociados = lstEvento.Select(x => new { x.CODIGO }).Distinct().ToList();
                foreach (var item in codicosCtafAsociados)
                {
                    EventoDTO primer_evento = (lstEvento.Where(y => y.CODIGO == item.CODIGO).OrderBy(c => DateTime.ParseExact(c.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture)).FirstOrDefault());
                    ListaAF.Add(primer_evento);
                }
            }

            string ruta = Url.Content("~");

            jRespuesta = Json(ListaAF, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public JsonResult BuscarEmpresa(string nombreempresa)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<SiEmpresaDTO> ListaEmpresa = appAnalisisFallas.BuscarEmpresa(nombreempresa);
            jRespuesta = Json(ListaEmpresa, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public JsonResult ObtenerEmpresa()
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<SiEmpresaDTO> ListaEmpresa = appAnalisisFallas.ObtenerEmpresa();
            jRespuesta = Json(ListaEmpresa, JsonRequestBehavior.AllowGet);
            jRespuesta.MaxJsonLength = 500000000;
            return jRespuesta;
        }
        public JsonResult BuscarEmpresaPropietaria(string nombreempresa)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<SiEmpresaDTO> ListaEmpresa = appAnalisisFallas.BuscarEmpresaPropietaria(nombreempresa);
            jRespuesta = Json(ListaEmpresa, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public JsonResult ConsultarObservacion(EmpresaObservacionDTO obj)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaObservacionDTO> Lista = appAnalisisFallas.ConsultarObservacion(obj);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public JsonResult ConsultarRecomendacion(EmpresaRecomendacionDTO obj)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaRecomendacionDTO> Lista = appAnalisisFallas.ConsultarRecomendacion(obj);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public bool InsertarEmpresaInvolucradaEvento(EmpresaInvolucradaDTO obj, HttpPostedFileBase file)
        {


            obj.LASTUSER = base.UserName;
            obj.LASTDATE = DateTime.Now;

            if (file != null)
            {
                obj.AFIEXTENSION = System.IO.Path.GetExtension(file.FileName);
                obj.FileName = "EV-IEI-" + obj.ANIO + "-" + obj.AFECODI + "-" + obj.EMPRCODI + "-" + obj.AFIVERSION.Substring(0, 1) + obj.AFIEXTENSION;
                obj.AFIEXTENSION = obj.AFIEXTENSION.Substring(1, obj.AFIEXTENSION.Length - 1);

            }
            else
            {
                obj.AFIEXTENSION = "";
                obj.FileName = "";
            }

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            bool result = appAnalisisFallas.InsertarEmpresaInvolucrada(obj);
            if (result && file != null)
            {
                // Guardar Archivo
                grabarArchivo(obj.FileName, file.InputStream, obj.ANIO, obj.AFECODI.ToString());

            }
            return result;

        }

        public string InsertarEmpresaInvolucradaReunion(EmpresaInvolucradaDTO obj, HttpPostedFileBase file)
        {
            string result = "";

            EmpresaResponsableDTO entity = new EmpresaResponsableDTO();
            entity.AFECODI = obj.AFECODI;
            entity.EMPRCODI = obj.EMPRCODI;
            entity.AFIVERSION = obj.AFIVERSION;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            if (!appAnalisisFallas.ExisteEmpresaCompensadaCompensacion(entity))
            {

                obj.LASTUSER = base.UserName;
                obj.LASTDATE = DateTime.Now;

                if (file != null)
                {
                    obj.AFIEXTENSION = Path.GetExtension(file.FileName);
                    obj.FileName = "EV-IEI-" + obj.ANIO + "-" + obj.AFECODI + "-" + obj.EMPRCODI + "-" + obj.AFIVERSION.Substring(0, 1) + obj.AFIEXTENSION;
                    obj.AFIEXTENSION = obj.AFIEXTENSION.Substring(1, obj.AFIEXTENSION.Length - 1);

                }
                else
                {
                    obj.AFIEXTENSION = "";
                    obj.FileName = "";
                }


                bool res = appAnalisisFallas.InsertarEmpresaInvolucrada(obj);
                if (res && file != null)
                {
                    // Guardar Archivo
                    grabarArchivo(obj.FileName, file.InputStream, obj.ANIO, obj.AFECODI.ToString());

                }

                result = "";

            }
            else
            {
                result = "Error. Existe Empresa\r\nNo se puede continuar...";
            }
            return result;
        }

        public string InsertarReunionResponsable(ReunionResponsableDTO obj)
        {
            string result = "";

            ReunionResponsableDTO entity = new ReunionResponsableDTO();
            entity.RESPCOD = obj.RESPCOD;
            entity.EVENCODI = obj.EVENCODI;
            entity.EMPRCODI = 1;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            if (!appAnalisisFallas.ExisteResponsableReunion(entity))
            {

                bool res = appAnalisisFallas.InsertarReunionResponsable(entity);

                result = "";

            }
            else
            {
                result = "Error. Existe Responsable\r\nNo se puede continuar...";
            }
            return result;
        }

        public string InsertarAsistenteResponsable(ReunionResponsableDTO obj)
        {
            string result = "";

            ReunionResponsableDTO entity = new ReunionResponsableDTO();
            entity.EMPRCODI = obj.RESPCOD;
            entity.EVENCODI = obj.EVENCODI;
            entity.EVEPARTICIPANTE = obj.EVEPARTICIPANTE;
            entity.EVERESPONCODI = 0;


            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            if (!appAnalisisFallas.ExisteAsistenteResponsable(entity))
            {

                bool res = appAnalisisFallas.InsertarReunionResponsable(entity);

                result = "";

            }
            else
            {
                result = "Error. Existe Responsable\r\nNo se puede continuar...";
            }
            return result;
        }
        public JsonResult TraerEmpresaInvolucrada(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaInvolucradaDTO> Lista = appAnalisisFallas.ObtenerEmpresasInvolucrada(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }
        public JsonResult TraerEmpresaInvolucradaReunion(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaInvolucradaDTO> Lista = appAnalisisFallas.ObtenerEmpresasInvolucradaReunion(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public JsonResult TraerReunionResponsable(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<ReunionResponsableDTO> Lista = appAnalisisFallas.ObtenerListaReunionResponsable(id).Where(m => m.EMPRCODI == 1 && (m.EVEPARTICIPANTE == null || m.EVEPARTICIPANTE == "")).ToList();
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public JsonResult TraerResponsableAsistente(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<ReunionResponsableDTO> Lista = appAnalisisFallas.ObtenerListaReunionResponsable(id).Where(m => m.EMPRCODI != 1).ToList();
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }
        public bool EliminarEmpresaInvolucrada(EmpresaInvolucradaDTO obj)
        {

            var result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarEmpresaInvolucrada(obj);
            if (result)
            {
                obj.FileName = "EV-IEI-" + obj.ANIO + "-" + obj.AFECODI + "-" + obj.EMPRCODI + "-" + obj.AFIVERSION.Substring(0, 1) + ".pdf";
                eliminarArchivo(obj.FileName, obj.ANIO, obj.AFECODI.ToString());

            }
            return result;
        }
        public bool EliminarEmpresaInvolucradaReunion(EmpresaInvolucradaDTO obj)
        {

            var result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarEmpresaInvolucradaReunion(obj);
            return result;
        }

        public bool EliminarReunionResponsable(ReunionResponsableDTO obj)
        {
            var result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarReunionResponsable(obj);
            return result;
        }

        public bool EliminarAsistenteResponsable(ReunionResponsableDTO obj)
        {
            var result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarAsistenteResponsable(obj);
            return result;
        }

        public bool ActualizarFechaConvocatoriaCitacionReunion(int afecodi, string anio, HttpPostedFileBase file)
        {
            string filePdf = string.Empty;
            string NombreTipo = string.Empty;
            string NombreExtra = string.Empty;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            var valor = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";

            if (file == null)
            {
                return false;
            }

            var result = appAnalisisFallas.ActualizarFechaConvocatoriaCitacionReunion(afecodi, valor);
            var filename = "EV-COC-" + anio + "-" + afecodi.ToString() + ".pdf";
            if (result)
            {               
                grabarArchivoWithConfigKey(Constantes.FileSystemPortal, filename, file.InputStream, anio, afecodi.ToString());
            }
      
            AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(afecodi);
            List<EventoDTO> ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
            List<EventoDTO> LstEvento = appAnalisisFallas.ObtenerEventoCitacion(afecodi);

            if (LstEvento[0].EVENTIPOFALLA == "P")
                NombreTipo = "CITACION P ";
            else if (LstEvento[0].EVENTIPOFALLA == "N")
                NombreTipo = "CITACION NP ";

            var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + afecodi + "/";
            filePdf = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, ListaEventosSco, ConstantesEvento.SubCarpetaCtafPublica);
            NombreExtra = NombreTipo + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".pdf";
            FileServer.RenameBlobCopyFile2(Constantes.FileSystemPortal, foldername + filename, NombreExtra, filePdf);

            return result;
        }

        public bool EliminarFechaConvocatoriaCitacionReunion(int afecodi, string anio)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            var result = appAnalisisFallas.ActualizarFechaConvocatoriaCitacionReunion(afecodi, "NULL");

            if (result)
            {
                var filename = "EV-COC-" + anio + "-" + afecodi.ToString() + ".pdf";
                eliminarArchivoFileSystemPortal(filename, anio, afecodi.ToString());
            }

            return result;
        }

        public bool ActualizarFechaActaReunion(int afecodi, string anio, HttpPostedFileBase file)
        {
            string filePdf = string.Empty;
            string NombreTipo = string.Empty;
            string NombreExtra = string.Empty;

            var result = false;
            if (file != null)
            {
                var Valor = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                result = appAnalisisFallas.ActualizarFechaActaReunion(afecodi, Valor);
                var filename = "EV-CTA-" + anio + "-" + afecodi.ToString() + ".pdf";
                if (result)
                {
                    // Guardar Archivo
                    grabarArchivoWithConfigKey(Constantes.FileSystemPortal, filename, file.InputStream, anio, afecodi.ToString());
                }

                AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(afecodi);
                List<EventoDTO> ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
                List<EventoDTO> LstEvento = appAnalisisFallas.ObtenerEventoCitacion(afecodi);

                NombreTipo = "ACTA EV-";
                var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + afecodi + "/";
                filePdf = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, ListaEventosSco, ConstantesEvento.SubCarpetaCtafPublica);
                NombreExtra = NombreTipo + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".pdf";
                FileServer.RenameBlobCopyFile2(Constantes.FileSystemPortal, foldername + filename, NombreExtra, filePdf);

            }
            return result;
        }
        public bool EliminarFechaActaReunion(int afecodi, string anio)
        {
            var result = false;

            var Valor = "NULL";
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.ActualizarFechaActaReunion(afecodi, Valor);

            if (result)
            {
                var filename = "EV-CTA-" + anio + "-" + afecodi.ToString() + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());
            }

            return result;
        }

        public bool ActualizarFechaInformeCTAFReunion(int afecodi, string anio, HttpPostedFileBase file)
        {
            string filePdf = string.Empty;
            string NombreTipo = string.Empty;
            string NombreExtra = string.Empty;

            var result = false;
            if (file != null)
            {
                var Valor = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                result = appAnalisisFallas.ActualizarFechaInformeCTAFReunion(afecodi, Valor);
                var filename = "EV-CTI-" + anio + "-" + afecodi.ToString() + ".pdf";
                if (result)
                {
                    // Guardar Archivo               
                    grabarArchivoWithConfigKey(Constantes.FileSystemPortal, filename, file.InputStream, anio, afecodi.ToString());
                }
                AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(afecodi);
                List<EventoDTO> ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
                List<EventoDTO> LstEvento = appAnalisisFallas.ObtenerEventoCitacion(afecodi);

                NombreTipo = "CT-AF_EV-";
                var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + afecodi + "/";
                filePdf = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, ListaEventosSco, ConstantesEvento.SubCarpetaCtafPublica);
                NombreExtra = NombreTipo + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".pdf";
                FileServer.RenameBlobCopyFile2(Constantes.FileSystemPortal, foldername + filename, NombreExtra, filePdf);
            }
            return result;
        }

        public bool EliminarFechaInformeCTAFReunion(int afecodi, string anio)
        {
            var result = false;

            var Valor = "NULL";
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.ActualizarFechaInformeCTAFReunion(afecodi, Valor);

            if (result)
            {
                var filename = "EV-CTI-" + anio + "-" + afecodi.ToString() + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());
            }

            return result;
        }
        public string InsertarRecomendacionInformeTecnico(EmpresaRecomendacionDTO entity)
        {
            string result = "";
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            if (!appAnalisisFallas.ExisteRecomendacionInformeTecnico(entity))
            {
                entity.LASTUSER = base.UserName;
                entity.LASTDATE = DateTime.Now; ;
                bool res = appAnalisisFallas.InsertarRecomendacionInformeTecnico(entity);
                if (res)
                {
                    result = "Se registro Correctamente";
                }

            }
            else
            {
                result = "Error. Existe Empresa y Recomendación\r\nNo se puede continuar...";
            }
            return result;
        }

        public bool EliminarRecomendacionInformeTecnico(EmpresaRecomendacionDTO entity)
        {
            bool result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarRecomendacionInformeTecnico(entity);
            return result;
        }
        public JsonResult TraerEmpresaRecomendacionInformeTecnico(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaRecomendacionDTO> Lista = appAnalisisFallas.ObtenerEmpresaRecomendacionInformeTecnico(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }
        public bool InsertarObservacionInformeTecnico(EmpresaObservacionDTO entity)
        {
            bool result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();

            entity.LASTUSER = base.UserName;
            entity.LASTDATE = DateTime.Now; ;
            result = appAnalisisFallas.InsertarObservacionInformeTecnico(entity);
            return result;
        }

        public bool EliminarObservacionInformeTecnico(int AFOOBS)
        {
            bool result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarObservacionInformeTecnico(AFOOBS);
            return result;
        }
        public JsonResult TraerEmpresaObservacionInformeTecnico(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaObservacionDTO> Lista = appAnalisisFallas.ObtenerEmpresaObservacionInformeTecnico(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }
        public bool ActualizarPublicacionInformeTecnicoAnualInformeTecnico(int afecodi, string anio, string AFEITPITFFECHA, HttpPostedFileBase file)
        {
            var result = false;
            if (file != null)
            {
                var Valor = "TO_DATE('" + AFEITPITFFECHA + "','dd/mm/yyyy hh24:mi:ss')";

                string AFEITPITFFECHASIST = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                result = appAnalisisFallas.ActualizarPublicacionInformeTecnicoAnualInformeTecnico(afecodi, Valor, AFEITPITFFECHASIST);


                if (result)
                {
                    // Guardar Archivo
                    var filename = "EV-ITF-" + anio + "-" + afecodi.ToString() + ".pdf";
                    grabarArchivo(filename, file.InputStream, anio, afecodi.ToString());
                }

            }
            return result;
        }
        public bool EliminarPublicacionInformeTecnicoAnualInformeTecnico(int afecodi, string anio)
        {
            var result = false;

            var Valor = "NULL";
            var AFEITPITFFECHASIST = "NULL";
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.ActualizarPublicacionInformeTecnicoAnualInformeTecnico(afecodi, Valor, AFEITPITFFECHASIST);

            if (result)
            {
                var filename = "EV-ITF-" + anio + "-" + afecodi.ToString() + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());
            }

            return result;
        }
        public bool ActualizarPublicacionDesicionEventoInformeTecnico(int afecodi, string anio, HttpPostedFileBase file)
        {
            var result = false;
            if (file != null)
            {
                string AFEITPDECISFFECHASIST = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                result = appAnalisisFallas.ActualizarPublicacionDesicionEventoInformeTecnico(afecodi, AFEITPDECISFFECHASIST);

                if (result)
                {
                    // Guardar Archivo
                    var filename = "EV-DEC-" + anio + "-" + afecodi.ToString() + ".pdf";
                    grabarArchivo(filename, file.InputStream, anio, afecodi.ToString());

                }

            }
            return result;
        }
        public bool EliminarPublicacionDesicionEventoInformeTecnico(int afecodi, string anio)
        {
            var result = false;

            var AFEITPDECISFFECHASIST = "NULL";
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.ActualizarPublicacionDesicionEventoInformeTecnico(afecodi, AFEITPDECISFFECHASIST);

            if (result)
            {
                var filename = "EV-DEC-" + anio + "-" + afecodi.ToString() + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());
            }

            return result;
        }


        public bool InsertarFuerzaMayorInformeTecnico(EmpresaFuerzaMayorDTO entity, HttpPostedFileBase file)
        {
            bool result = false;
            if (file != null)
            {
                entity.TIPCODI = 23;
                entity.AFREMPPUBLICALASTUSER = base.UserName;
                entity.AFREMPPUBLICALASTDATE = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                int Id = appAnalisisFallas.InsertarFuerzaMayorInformeTecnico(entity);
                if (Id > 0)
                {
                    var filename = "EV-FMY-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + Id + ".pdf";
                    grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFECODI.ToString());

                    result = true;
                }
            }
            return result;
        }
        public bool ActualizarFuerzaMayorInformeTecnico(EmpresaFuerzaMayorDTO entity, HttpPostedFileBase file)
        {

            bool result = false;
            if (file != null)
            {

                entity.AFRCOESPUBLICALASTUSER = base.UserName;
                entity.AFRCOESPUBLICALASTDATE = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                entity.FECHA_COES = "TO_DATE('" + entity.FECHA_COES + "','dd/mm/yyyy hh24:mi:ss')";

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                int Id = appAnalisisFallas.ActualizarFuerzaMayorInformeTecnico(entity);
                if (Id > 0)
                {
                    var filename = "EV-FMC-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + Id + ".pdf";
                    grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFECODI.ToString());

                    result = true;
                }
            }
            return result;
        }
        public bool EliminarrFuerzaMayorCOESInformeTecnico(EmpresaFuerzaMayorDTO entity)
        {

            bool result = false;

            entity.AFRCOESPUBLICALASTUSER = "NULL";
            entity.AFRCOESPUBLICALASTDATE = "NULL";
            entity.FECHA_COES = "NULL";

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            int Id = appAnalisisFallas.ActualizarFuerzaMayorInformeTecnico(entity);
            if (Id < 0)
            {
                var filename = "EV-FMC-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + entity.RPTACODI + ".pdf";
                eliminarArchivo(filename, entity.ANIO, entity.AFECODI.ToString());
                result = true;
            }

            return result;
        }
        public bool EliminarFuerzaMayorInformeTecnico(int RECLAMOCODI, int anio, int afecodi, int emprcodi, int RPTACODI)
        {

            bool result = false;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarFuerzaMayorInformeTecnico(RECLAMOCODI);

            if (result)
            {
                var filename = "EV-FMY-" + anio + "-" + afecodi + "-" + emprcodi + "-" + RECLAMOCODI + ".pdf";
                eliminarArchivo(filename, anio.ToString(), afecodi.ToString());

                filename = "EV-FMC-" + anio + "-" + afecodi + "-" + emprcodi + "-" + RPTACODI + ".pdf";
                eliminarArchivo(filename, anio.ToString(), afecodi.ToString());
            }

            return result;
        }

        public JsonResult TraerFuerzaMayorInformeTecnico(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaFuerzaMayorDTO> Lista = appAnalisisFallas.ObtenerEmpresaFuerzaMayorInformeTecnico(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public JsonResult TraerEmpresaResponsableCompensacion(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaResponsableDTO> Lista = appAnalisisFallas.ObtenerEmpresaResponsableCompensacion(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }
        public JsonResult TraerEmpresaCompensadaCompensacion(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EmpresaResponsableDTO> Lista = appAnalisisFallas.ObtenerEmpresaCompensadaCompensacion(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }
        public string InsertarEmpresaResponsableCompensacion(EmpresaResponsableDTO entity)
        {
            string result = "";
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            if (!appAnalisisFallas.ExisteEmpresaResponsableCompensacion(entity))
            {
                entity.LASTUSER = base.UserName;
                entity.LASTDATE = DateTime.Now;
                entity.AFIFECHAINF = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                bool res = appAnalisisFallas.InsertarEmpresaResponsableCompensacion(entity);
                if (res)
                {
                    result = "Se registro Correctamente";
                }
            }
            else
            {
                result = "Error. Existe Empresa\r\nNo se puede continuar...";
            }



            return result;
        }

        public string InsertarEmpresaCompensadaCompensacion(EmpresaResponsableDTO entity)
        {
            string result = "";
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            if (!appAnalisisFallas.ExisteEmpresaCompensadaCompensacion(entity))
            {
                entity.LASTUSER = base.UserName;
                entity.LASTDATE = DateTime.Now;
                entity.AFIFECHAINF = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                bool res = appAnalisisFallas.InsertarEmpresaResponsableCompensacion(entity);
                if (res)
                {
                    result = "Se registro Correctamente";
                }
            }
            else
            {
                result = "Error. Existe Empresa\r\nNo se puede continuar...";
            }



            return result;
        }

        public bool EliminarEmpresaResponsableCompensacion(EmpresaResponsableDTO entity)
        {

            bool result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarEmpresaResponsableCompensacion(entity);
            return result;
        }
        public bool ActualizarInformeCompensaciones(int afecodi, string anio, string AFECOMPFECHA, HttpPostedFileBase file)
        {
            var result = false;
            if (file != null)
            {
                string AFECOMPFECHASIST = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                AFECOMPFECHA = "TO_DATE('" + AFECOMPFECHA + "','dd/mm/yyyy hh24:mi:ss')";
                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                result = appAnalisisFallas.ActualizarInformeCompensaciones(afecodi, AFECOMPFECHASIST, AFECOMPFECHA);

                if (result)
                {
                    // Guardar Archivo
                    var filename = "EV-CMP-" + anio + "-" + afecodi.ToString() + ".pdf";
                    grabarArchivo(filename, file.InputStream, anio, afecodi.ToString());

                }

            }
            return result;
        }
        public bool EliminarInformeCompensaciones(int afecodi, string anio)
        {
            var result = false;

            string AFECOMPFECHASIST = "NULL";
            string AFECOMPFECHA = "NULL";
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.ActualizarInformeCompensaciones(afecodi, AFECOMPFECHASIST, AFECOMPFECHA);

            if (result)
            {
                var filename = "EV-CMP-" + anio + "-" + afecodi.ToString() + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());
            }
            return result;
        }


        public JsonResult TraerReclamoReconsideracionReconsideracion(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<ReclamoDTO> Lista = appAnalisisFallas.ObtenerReclamoReconsideracionReconsideracion(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }
        public JsonResult TraerReclamoApelacionReconsideracion(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<ReclamoDTO> Lista = appAnalisisFallas.ObtenerReclamoApelacionReconsideracion(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }
        public JsonResult TraerReclamoArbitrajeReconsideracion(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<ReclamoDTO> Lista = appAnalisisFallas.ObtenerReclamoArbitrajeReconsideracion(id);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public bool InsertarReconsideracion(ReclamoDTO entity, HttpPostedFileBase file)
        {

            bool result = false;
            if (file != null)
            {
                entity.TIPCODI = 10;
                entity.AFREMPPUBLICALASTUSER = base.UserName;
                entity.AFREMPPUBLICALASTDATE = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                int Id = appAnalisisFallas.InsertarReclamoRecApe(entity);
                if (Id > 0)
                {
                    var filename = "EV-REE-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + Id + ".pdf";
                    grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFECODI.ToString());

                    result = true;
                }
            }
            return result;
        }
        public bool InsertarApelacion(ReclamoDTO entity, HttpPostedFileBase file)
        {

            bool result = false;
            if (file != null)
            {
                entity.TIPCODI = 11;
                entity.AFREMPPUBLICALASTUSER = base.UserName;
                entity.AFREMPPUBLICALASTDATE = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                int Id = appAnalisisFallas.InsertarReclamoRecApe(entity);
                if (Id > 0)
                {
                    var filename = "EV-APE-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + Id + ".pdf";
                    grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFECODI.ToString());

                    result = true;
                }
            }
            return result;
        }
        public bool InsertarArbitraje(ReclamoDTO entity, HttpPostedFileBase file)
        {

            bool result = false;
            if (file != null)
            {
                entity.TIPCODI = 17;
                entity.AFREMPPUBLICALASTUSER = base.UserName;
                entity.AFREMPPUBLICALASTDATE = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                int Id = appAnalisisFallas.InsertarReclamoRecApe(entity);
                if (Id > 0)
                {
                    var filename = "EV-ARE-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + Id + ".pdf";
                    grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFECODI.ToString());

                    result = true;
                }
            }
            return result;
        }

        public bool EliminarReconsideracion(int reclamocodi, string anio, int afecodi, int emprcodi, int rptacodi)
        {
            bool result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarReclamoRecApe(reclamocodi);
            if (result)
            {
                var filename = "EV-REE-" + anio + "-" + afecodi + "-" + emprcodi + "-" + reclamocodi + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());

                filename = "EV-REC-" + anio + "-" + afecodi + "-" + emprcodi + "-" + rptacodi + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());

                result = true;
            }

            return result;
        }
        public bool EliminarApelacion(int reclamocodi, string anio, int afecodi, int emprcodi, int rptacodi)
        {
            bool result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarReclamoRecApe(reclamocodi);
            if (result)
            {
                var filename = "EV-APE-" + anio + "-" + afecodi + "-" + emprcodi + "-" + reclamocodi + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());

                filename = "EV-APC-" + anio + "-" + afecodi + "-" + emprcodi + "-" + rptacodi + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());

                result = true;
            }

            return result;
        }
        public bool EliminarArbitraje(int reclamocodi, string anio, int afecodi, int emprcodi, int rptacodi)
        {
            bool result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarReclamoRecApe(reclamocodi);
            if (result)
            {
                var filename = "EV-ARE-" + anio + "-" + afecodi + "-" + emprcodi + "-" + reclamocodi + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());

                filename = "EV-ARC-" + anio + "-" + afecodi + "-" + emprcodi + "-" + rptacodi + ".pdf";
                eliminarArchivo(filename, anio, afecodi.ToString());

                result = true;
            }
            return result;
        }
        public JsonResult ActualizarReconsideracionCOES(ReclamoDTO entity, HttpPostedFileBase file)
        {
            try
            {
                int tipcodi = 10;
                int rptacodi = -1;
                int result = 0;
                string responseText = "";
                if (file != null)
                {
                    AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();

                    if (appAnalisisFallas.ValidaRespuestaCOES1(entity.AFECODI, tipcodi, rptacodi, entity.EMPRCODI) == 1)
                    {
                        entity.AFRCOESPUBLICALASTUSER = base.UserName;
                        entity.AFRCOESPUBLICALASTDATE = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                        entity.FECHA_COES = "TO_DATE('" + entity.FECHA_COES + "','dd/mm/yyyy hh24:mi:ss')";


                        int Id = appAnalisisFallas.ActualizarReclamoRecApe(entity);
                        if (Id > 0)
                        {
                            var filename = "EV-REC-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + Id + ".pdf";
                            grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFECODI.ToString());
                        }

                        result = 1;
                    }
                    else
                    {
                        result = 0;
                        responseText = "No es posible continuar, ya existe una respuesta COES.";
                    }

                }

                return Json(new { result = result, responseText = responseText }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                return Json(new { result = 0, responseText = ex.ToString() }, JsonRequestBehavior.AllowGet);
            }


        }

        public JsonResult ActualizarApelacionCOES(ReclamoDTO entity, HttpPostedFileBase file)
        {
            try
            {

                int tipcodi = 11;
                int rptacodi = -1;
                int result = 0;
                string responseText = "";
                if (file != null)
                {
                    AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();

                    if (appAnalisisFallas.ValidaRespuestaCOES(entity.AFECODI, tipcodi, rptacodi) == 1)
                    {


                        entity.AFRCOESPUBLICALASTUSER = base.UserName;
                        entity.AFRCOESPUBLICALASTDATE = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                        entity.FECHA_COES = "TO_DATE('" + entity.FECHA_COES + "','dd/mm/yyyy hh24:mi:ss')";

                        int Id = appAnalisisFallas.ActualizarReclamoRecApe(entity);
                        if (Id > 0)
                        {
                            var filename = "EV-APC-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + Id + ".pdf";
                            grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFECODI.ToString());

                            result = 1;
                        }

                    }
                    else
                    {
                        result = 0;
                        responseText = "No es posible continuar, ya existe una respuesta COES.";
                    }

                }

                return Json(new { result = result, responseText = responseText }, JsonRequestBehavior.AllowGet);

            }
            catch (Exception ex)
            {
                return Json(new { result = 0, responseText = ex.ToString() }, JsonRequestBehavior.AllowGet);
            }


        }
        public JsonResult ActualizarArbitrajeCOES(ReclamoDTO entity, HttpPostedFileBase file)
        {
            try
            {
                int tipcodi = 17;
                int rptacodi = -1;
                int result = 0;
                string responseText = "";
                if (file != null)
                {
                    AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();

                    if (appAnalisisFallas.ValidaRespuestaCOES(entity.AFECODI, tipcodi, rptacodi) == 1)
                    {
                        entity.AFRCOESPUBLICALASTUSER = base.UserName;
                        entity.AFRCOESPUBLICALASTDATE = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                        entity.FECHA_COES = "TO_DATE('" + entity.FECHA_COES + "','dd/mm/yyyy hh24:mi:ss')";


                        int Id = appAnalisisFallas.ActualizarReclamoRecApe(entity);
                        if (Id > 0)
                        {
                            var filename = "EV-ARC-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + Id + ".pdf";
                            grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFECODI.ToString());

                            result = 1;
                        }

                    }
                    else
                    {
                        result = 0;
                        responseText = "No es posible continuar, ya existe una respuesta COES.";
                    }
                }

                return Json(new { result = result, responseText = responseText }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                return Json(new { result = 0, responseText = ex.ToString() }, JsonRequestBehavior.AllowGet);
            }

        }

        public bool EliminarReconsideracionCOES(ReclamoDTO entity)
        {

            bool result = false;
            int rptacodiTemp = entity.RPTACODI;

            entity.AFRCOESPUBLICALASTUSER = "NULL";
            entity.AFRCOESPUBLICALASTDATE = "NULL";
            entity.FECHA_COES = "NULL";
            entity.RPTACODI = -1;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            int Id = appAnalisisFallas.ActualizarReclamoRecApe(entity);
            if (Id < 0)
            {
                var filename = "EV-REC-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + rptacodiTemp + ".pdf";
                eliminarArchivo(filename, entity.ANIO, entity.AFECODI.ToString());

                result = true;
            }

            return result;
        }
        public bool EliminarApelacionCOES(ReclamoDTO entity)
        {

            bool result = false;
            int rptacodiTemp = entity.RPTACODI;

            entity.AFRCOESPUBLICALASTUSER = "NULL";
            entity.AFRCOESPUBLICALASTDATE = "NULL";
            entity.FECHA_COES = "NULL";
            entity.RPTACODI = -1;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            int Id = appAnalisisFallas.ActualizarReclamoRecApe(entity);
            if (Id < 0)
            {
                var filename = "EV-APC-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + rptacodiTemp + ".pdf";
                eliminarArchivo(filename, entity.ANIO, entity.AFECODI.ToString());

                result = true;
            }

            return result;
        }
        public bool EliminarArbitrajeCOES(ReclamoDTO entity)
        {

            bool result = false;
            int rptacodiTemp = entity.RPTACODI;

            entity.AFRCOESPUBLICALASTUSER = "NULL";
            entity.AFRCOESPUBLICALASTDATE = "NULL";
            entity.FECHA_COES = "NULL";
            entity.RPTACODI = -1;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            int Id = appAnalisisFallas.ActualizarReclamoRecApe(entity);
            if (Id < 0)
            {
                var filename = "EV-ARC-" + entity.ANIO + "-" + entity.AFECODI + "-" + entity.EMPRCODI + "-" + rptacodiTemp + ".pdf";
                eliminarArchivo(filename, entity.ANIO, entity.AFECODI.ToString());

                result = true;
            }

            return result;
        }

        public bool ActualizarRecomendacionMA(AnalisisFallaDTO entity)
        {

            bool result = false;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.ActualizarRecomendacionMA(entity);

            return result;
        }

        public bool ActualizarRecomendacionMAG(AnalisisFallaDTO entity)
        {

            bool result = false;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            entity.LASTUSERRPTA = "";
            entity.AFRPUBLICAFECHA = DateTime.Now;

            result = appAnalisisFallas.ActualizarRecomendacionMAG(entity);

            return result;
        }


        public bool ActualizarCartaRecomendacionCOES(AnalisisFallaDTO entity, HttpPostedFileBase file)
        {

            bool result = false;
            if (file != null)
            {
                entity.LASTDATE = DateTime.Now;
                entity.LASTUSER = base.UserName;
                entity.AFRPUBLICAFECHAU = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss");

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                result = appAnalisisFallas.ActualizarCartaRecomendacionCOES(entity);
                if (result)
                {
                    var filename = "EV-REM-" + entity.ANIO + "-" + entity.AFRREC + ".pdf";
                    grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFRREC.ToString());

                    result = true;
                }
            }
            return result;
        }


        public bool ActualizarCartaRespuesta(AnalisisFallaDTO entity, HttpPostedFileBase file)
        {
            bool result = false;
            if (file != null)
            {

                entity.LASTDATEU = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
                entity.AFRMEDADOPFECHAU = "TO_DATE('" + entity.AFRMEDADOPFECHAU + "','dd/mm/yyyy')";
                entity.LASTUSER = base.UserName;

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                result = appAnalisisFallas.ActualizarCartaRespuesta(entity);
                if (result)
                {
                    var filename = "EV-RER-" + entity.ANIO + "-" + entity.AFRREC + ".pdf";
                    grabarArchivo(filename, file.InputStream, entity.ANIO, entity.AFRREC.ToString());

                    result = true;
                }
            }
            return result;
        }
        public bool EliminarCartaRespuesta(AnalisisFallaDTO entity)
        {
            bool result = false;
            entity.LASTDATEU = "NULL";
            entity.LASTDATEU = "NULL";
            entity.AFRMEDADOPFECHAU = "NULL";
            entity.LASTUSER = "NULL";
            entity.AFRMEDADOPNIVCUMP = "";
            entity.AFRMEDADOPMEDIDA = "NULL";


            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.ActualizarCartaRespuesta(entity);
            if (result)
            {
                var filename = "EV-RER-" + entity.ANIO + "-" + entity.AFRREC + ".pdf";
                eliminarArchivo(filename, entity.ANIO, entity.AFRREC.ToString());

                result = true;
            }

            return result;
        }
        public bool ActualizarEvento(AnalisisFallaDTO entity)
        {
            try
            {
                bool result = false;

                entity.LASTUSER = base.UserName;
                entity.LASTDATE = DateTime.Now;

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();

                List<int> lstEventos = servAF.ListadoEventosAsoCtaf(entity.EVENCODI).Select(x => x.Evencodi).Distinct().ToList();
                if (lstEventos != null)
                {
                    foreach (int item in lstEventos)
                    {
                        appAnalisisFallas.ActualizarCodEvento(item, entity.AFECORR);
                    }
                }
                appAnalisisFallas.ActualizarEventoxAfecodi(entity);
                //appAnalisisFallas.ActualizarDesEventoAF(entity.EVENCODI, entity.EVENDESCCTAF);

                result = appAnalisisFallas.ActualizarEventoAF(entity);

                return result;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return false;
            }

        }



        public ActionResult Descargar(string filename, string originalfilename)
        {

            if (filename != null)
            {
                string PathFileServer = "";
                string FilePath = PathFileServer + "erp/style/artwork/" + filename;

                FileStream stream = new FileStream(FilePath, FileMode.Open);
                FileStreamResult result = new FileStreamResult(stream, filename);
                result.FileDownloadName = originalfilename;
                return result;
            }
            else return RedirectToAction("index");
        }

        public JsonResult ObtenerMedidasAdoptadas(int id)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            AnalisisFallaDTO entity = appAnalisisFallas.ObtenerMedidasAdoptadas(id);
            jRespuesta = Json(entity, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        public ActionResult Update(int id)
        {
            if (!base.IsValidSesionView()) return base.RedirectToLogin();

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();

            Models.AnalisisFallasModel oAnalisisFallasModel = new Models.AnalisisFallasModel();

            oAnalisisFallasModel.grabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);

            AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(id);
            EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(oAnalisisFallaDTO.EVENCODI);

            EquipoDTO oEquipoDTO = appAnalisisFallas.ObtenerEquipoPorEvento(oAnalisisFallaDTO.EVENCODI);
            List<EmpresaInvolucradaDTO> lsEmpresaInvolucrada = appAnalisisFallas.ObtenerEmpresasInvolucrada(id);
            List<EmpresaInvolucradaDTO> lsEmpresaInvolucradaReunion = appAnalisisFallas.ObtenerEmpresasInvolucradaReunion(id);
            List<ReunionResponsableDTO> lsReunionResponsable = appAnalisisFallas.ObtenerListaReunionResponsable(oAnalisisFallaDTO.EVENCODI).Where(m => m.EMPRCODI == 1 && (m.EVEPARTICIPANTE == null || m.EVEPARTICIPANTE == "")).ToList();
            List<EmpresaRecomendacionDTO> lsEmpresaRecomendacionInformeTecnico = appAnalisisFallas.ObtenerEmpresaRecomendacionInformeTecnico(id);
            List<EmpresaObservacionDTO> lsEmpresaObservacionInformeTecnico = appAnalisisFallas.ObtenerEmpresaObservacionInformeTecnico(id);
            List<EmpresaFuerzaMayorDTO> lsEmpresaFuerzaMayorInformeTecnico = appAnalisisFallas.ObtenerEmpresaFuerzaMayorInformeTecnico(id);
            List<EmpresaResponsableDTO> lsEmpresaResponsableCompensacion = appAnalisisFallas.ObtenerEmpresaResponsableCompensacion(id);
            List<EmpresaResponsableDTO> lsEmpresaCompensadaCompensacion = appAnalisisFallas.ObtenerEmpresaCompensadaCompensacion(id);
            //List<EmpresaReporte> lsEmpresaConfigucion = appAnalisisFallas.ObtenerListadoConfiguracionEmpresaComboBox();
            List<ReclamoDTO> lsReclamoReconsideracion = appAnalisisFallas.ObtenerReclamoReconsideracionReconsideracion(id);
            List<ReclamoDTO> lsReclamoApelacion = appAnalisisFallas.ObtenerReclamoApelacionReconsideracion(id);
            List<ReclamoDTO> lsReclamoArbitraje = appAnalisisFallas.ObtenerReclamoArbitrajeReconsideracion(id);

            List<EventoDTO> lstEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());

            oAnalisisFallasModel.oAnalisisFallaDTO = oAnalisisFallaDTO;
            oAnalisisFallasModel.oEventoDTO = oEventoDTO;
            oAnalisisFallasModel.oEquipoDTO = oEquipoDTO;
            oAnalisisFallasModel.lsEmpresaInvolucrada = lsEmpresaInvolucrada;
            oAnalisisFallasModel.lsEmpresaInvolucradaReunion = lsEmpresaInvolucradaReunion;
            oAnalisisFallasModel.lsReunionResponsable = lsReunionResponsable;
            oAnalisisFallasModel.lsEmpresaRecomendacionInformeTecnico = lsEmpresaRecomendacionInformeTecnico;
            oAnalisisFallasModel.lsEmpresaObservacionInformeTecnico = lsEmpresaObservacionInformeTecnico;
            oAnalisisFallasModel.lsEmpresaFuerzaMayorInformeTecnico = lsEmpresaFuerzaMayorInformeTecnico;
            oAnalisisFallasModel.lsEmpresaResponsableCompensacion = lsEmpresaResponsableCompensacion;
            oAnalisisFallasModel.lsEmpresaCompensadaCompensacion = lsEmpresaCompensadaCompensacion;
            oAnalisisFallasModel.lsReclamoReconsideracion = lsReclamoReconsideracion;
            oAnalisisFallasModel.lsReclamoApelacion = lsReclamoApelacion;
            oAnalisisFallasModel.lsReclamoArbitraje = lsReclamoArbitraje;
            oAnalisisFallasModel.ListaEventosSco = lstEventosSco;
            oAnalisisFallasModel.url = Url.Content("~");
            List<string> ResponsableEvento = appAnalisisFallas.ObtenerResponsableEvento();
            var slResponsbleEvento = ResponsableEvento.Select(x => new SelectListItem() { Value = x, Text = x }).ToList();
            ViewBag.ResponsableEvento = slResponsbleEvento;

            //oAnalisisFallasModel.lsReunionResponsable = new List<ReunionResponsableDTO>();
            ViewBag.ResponsableReunion = appAnalisisFallas.ObtenerReunionResponsable();
            //model.ListaEmpresas = this.servicio.ListarEmpresas();
            List<EmpresaDTO> oListaEmpresas = new List<EmpresaDTO>();
            oListaEmpresas = this.servicio.ListarEmpresas().Where(x => x.EMPRCODI != 0 && x.EMPRCODI != -1).ToList();
            ViewBag.AsistenteResponsable = oListaEmpresas;
            //var slResponsbleReunion = lsReunionResponsable.Select(x => new SelectListItem() { Value = x, Text = x }).ToList();
            //ViewBag.ResponsableReunion = lsReunionResponsable;


            return View(oAnalisisFallasModel);
        }


        private bool grabarArchivo(string filename, Stream stream, string anio, string id)
        {
            try
            {
                var path = ConstantesAnalisisFallas.FolderUploadRutaCompleta;
                var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + id + "/";
                FileServer.CreateFolder(string.Empty, foldername, path);
                FileServer.UploadFromStream(stream, string.Empty, foldername + filename, path);

                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return false;
            }
        }

        private bool grabarArchivoWithConfigKey(string path, string filename, Stream stream, string anio, string id)
        {
            try
            {
                var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + id + "/";
                FileServer.CreateFolder(string.Empty, foldername, path);
                FileServer.UploadFromStream(stream, string.Empty, foldername + filename, path);
                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return false;
            }
        }

        private bool GrabarArchivoEventos(string filename, HttpPostedFileBase file, int tipo)
        {
            try
            {
                string foldername = string.Empty;
                if (tipo == 1)
                    foldername = ConfigurationManager.AppSettings["CarpetaDeFirmas"];
                else if (tipo == 2)
                    foldername = ConfigurationManager.AppSettings["AnalisiEvento"];

                FileServer.CreateFolder(string.Empty, string.Empty, foldername);
                FileServer.UploadFromStream(file.InputStream, string.Empty, filename, foldername);

                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return false;
            }
        }

        private bool GrabarArchivoEventos(string filename, Stream file, int tipo)
        {
            try
            {
                string foldername = string.Empty;
                if (tipo == 1)
                    foldername = ConfigurationManager.AppSettings["CarpetaDeFirmas"];
                else if (tipo == 2)
                    foldername = ConfigurationManager.AppSettings["AnalisiEvento"];

                FileServer.CreateFolder(string.Empty, string.Empty, foldername);
                FileServer.UploadFromStream(file, string.Empty, filename, foldername);

                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return false;
            }
        }

        private bool eliminarArchivo(string filename, string anio, string id)
        {
            try
            {
                var path = FileServer.GetDirectory();
                var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + id + "/";

                FileServer.DeleteBlob(foldername + filename, path);

                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return false;
            }
        }

        private bool eliminarArchivoFileSystemPortal(string filename, string anio, string id)
        {
            try
            {
                var path = Constantes.FileSystemPortal;
                var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + id + "/";

                FileServer.DeleteBlob(foldername + filename, path);

                return true;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return false;
            }
        }

        /// Permite visualizar el archivo generado
        /// </summary>
        /// <returns></returns>
        public FileStreamResult verArchivo(string filename, string anio, string id)
        {
            try
            {
                var path = Constantes.FileSystemPortal;
                var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + id + "/";

                Stream stream = FileServer.DownloadToStream(foldername + filename, path);
                FileStream fs = stream as FileStream;

                if (stream != null)
                    return File(fs, "application/pdf");
                else
                {
                    Log.Info("Ver - No se encontro el archivo para visualizar - análisis de fallas ");
                    return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return null;
            }
        }

        public ActionResult InformeCTAF(int id)
        {
            try
            {
                byte[] bytes = new byte[0];

                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                Models.AnalisisFallasModel oAnalisisFallasModel = new Models.AnalisisFallasModel();

                AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(id);
                EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(oAnalisisFallaDTO.EVENCODI);
                EquipoDTO oEquipoDTO = appAnalisisFallas.ObtenerEquipoPorEvento(oAnalisisFallaDTO.EVENCODI);

                //List<InformeCTAFDTO> CTAFINFORMEREPORTE = appAnalisisFallas.ObtenerCTAFINFORMEREPORTE(id);

                List<SenalizacionCTAFDTO> SenalizacionREPORTE = appAnalisisFallas.ObtenerSenalizacionREPORTE(id);
                List<SuministroCTAFDTO> SuministroREPORTE = appAnalisisFallas.ObtenerSuministroREPORTE(id);

                var reunionResponsable = appAnalisisFallas.ObtenerListaReunionResponsable(oAnalisisFallaDTO.EVENCODI).ToList();
                reunionResponsable = reunionResponsable.Where(x => x.EVERESPONCODI != 0).ToList();

                oAnalisisFallasModel.lsReunionResponsable = reunionResponsable;
                oAnalisisFallasModel.oAnalisisFallaDTO = oAnalisisFallaDTO;
                oAnalisisFallasModel.oEventoDTO = oEventoDTO;
                oAnalisisFallasModel.oEquipoDTO = oEquipoDTO;

                //oAnalisisFallasModel.CTAFINFORMEREPORTE = CTAFINFORMEREPORTE;
                // oAnalisisFallasModel.SecuenciaEventoREPORTE = SecuenciaEventoREPORTE;
                oAnalisisFallasModel.SenalizacionREPORTE = SenalizacionREPORTE;
                oAnalisisFallasModel.SuministroREPORTE = SuministroREPORTE;
                

                oAnalisisFallasModel.ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString()).OrderBy(m=>m.EVENINI).ToList();

                List<SiSenializacionDTO> SenializacionProteccionInforme = new List<SiSenializacionDTO>();

                foreach (var item in oAnalisisFallasModel.ListaEventosSco)
                {
                    if (item.EVENCODI.HasValue)
                    {
                        var itemSenializacion = appAnalisisFallas.ListarSenializacionesProteccionAgrupado(item.EVENCODI.Value);

                        itemSenializacion.ForEach(x =>
                        {
                            x.CodigoEvento = item.EVENCODI.Value;
                        });

                        SenializacionProteccionInforme.AddRange(itemSenializacion);
                    }
                }

                oAnalisisFallasModel.ListaSenializacionProteccionInforme = SenializacionProteccionInforme;

                List<EveInformesScoDTO> lstInfFinal = new List<EveInformesScoDTO>();
                List<EveintdescargaDTO> listIntDesc = new List<EveintdescargaDTO>();
                List<InformeCtafModel> ListaInformeCtaf = new List<InformeCtafModel>();
                AnalisisFallasModel model = new AnalisisFallasModel();
                List<EveRecomobservDTO> LstRec = new List<EveRecomobservDTO>();
                List<EveRecomobservDTO> LstObs = new List<EveRecomobservDTO>();
                List<EmpresaInvolucradaDTO> lsEmpresaInvolucradaFinal = new List<EmpresaInvolucradaDTO>();
                
                model.lsEmpresaConfigurable = appAnalisisFallas.ObtenerListadoConfiguracionEmpresaComboBox();

                foreach (var reg in oAnalisisFallasModel.ListaEventosSco)
                {
                    List<EmpresaInvolucradaDTO> lsEmpresaInvolucrada = appAnalisisFallas.ObtenerEmpresasInvolucradaxEvencodi((int)reg.EVENCODI);

                    foreach (var itemEmpresaInvolucrada in lsEmpresaInvolucrada)
                    {
                        var tieneEmpresaInvolucrada = lsEmpresaInvolucradaFinal.FirstOrDefault(x => x.EMPRCODI == itemEmpresaInvolucrada.EMPRCODI);

                        if (tieneEmpresaInvolucrada == null)
                        {
                            lsEmpresaInvolucradaFinal.Add(itemEmpresaInvolucrada);
                        }
                    }

                    List<EveInformesScoDTO> lstInformesFinales = servicioEvento.ListEveInformesScoxEvento((int)reg.EVENCODI, 2).ToList(); //Lista de informes finales

                    List<EveintdescargaDTO> listInt = appAnalisisFallas.ObtenerListaInterruptoresDescargadores((int)reg.EVENCODI, 1);
                    List<EveintdescargaDTO> listDesc = appAnalisisFallas.ObtenerListaInterruptoresDescargadores((int)reg.EVENCODI, 2);

                    List<EveCondPreviaDTO> listadoCondPrelinea = servAF.ObtenerListaCondicionesPrevias((int)reg.EVENCODI, "L");

                    foreach (var item in listadoCondPrelinea)
                    {
                        TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                        item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                    }

                    List<EveCondPreviaDTO> listadoCondPreCentral = servAF.ObtenerListaCondicionesPrevias((int)reg.EVENCODI, "C");

                    foreach (var item in listadoCondPreCentral)
                    {
                        TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                        item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                    }

                    List<EveCondPreviaDTO> listadoCondPreTransformadores = servAF.ObtenerListaCondicionesPrevias((int)reg.EVENCODI, "T");

                    foreach (var item in listadoCondPreTransformadores)
                    {
                        TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                        item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                    }

                    List<SecuenciaCTAFDTO> SecuenciaEventoREPORTE = appAnalisisFallas.ObtenerSecuenciaEventoREPORTEv3((int)reg.EVENCODI);
                    List<SecuenciaEventoEmpresaDTO> olstaSecuenciaEventoEmpresaDTO = new List<SecuenciaEventoEmpresaDTO>();

                    foreach (var item in SecuenciaEventoREPORTE)
                    {
                        if (model.lsEmpresaConfigurable.Where(m => m.CodigoOsinergmin == item.D1).ToList().Count != 0)
                        {
                            SecuenciaEventoEmpresaDTO oSecuenciaEventoEmpresaDTO = new SecuenciaEventoEmpresaDTO();
                            oSecuenciaEventoEmpresaDTO.CodigoSECC = item.D1;
                            oSecuenciaEventoEmpresaDTO.Descripcion = model.lsEmpresaConfigurable.FirstOrDefault(m => m.CodigoOsinergmin == item.D1).EmpresaERACMF;
                            olstaSecuenciaEventoEmpresaDTO.Add(oSecuenciaEventoEmpresaDTO);
                        }
                    }

                    List<EveAnalisisEventoDTO> listadoAnalisisEvento = servAF.ObtenerListaAnalisisEventos((int)reg.EVENCODI);

                    InformeCtafModel modelCtaf = new InformeCtafModel();

                    modelCtaf.CabNombreEvento = "Evento del " + reg.EVENINI.Value.ToString("dd.MM.yyyy") + " a las " + reg.EVENINI.Value.ToString("HH:mm:ss") + "h:";
                    modelCtaf.CabDescripcionEvento = reg.EVENDESCCTAF == null ? reg.EVENDESC : reg.EVENDESCCTAF;
                    modelCtaf.EVENINI = reg.EVENINI;
                    modelCtaf.listaCondPreviaLinea = listadoCondPrelinea;
                    modelCtaf.listaCondPreviaCentral = listadoCondPreCentral;
                    modelCtaf.listaCondPreviaTransformadores = listadoCondPreTransformadores;
                    modelCtaf.listaSecuenciaEvento = SecuenciaEventoREPORTE;
                    modelCtaf.listaSecuenciaEventoEmpresaFooter = olstaSecuenciaEventoEmpresaDTO;
                    modelCtaf.listaAnalisisEvento = listadoAnalisisEvento;

                    ListaInformeCtaf.Add(modelCtaf);

                    if (listInt.Count > 0)
                    {
                        listIntDesc.AddRange(listInt);
                    }

                    if (listDesc.Count > 0)
                    {
                        listIntDesc.AddRange(listDesc);
                    }

                    if (lstInformesFinales.Count == 0)
                    {
                        List<EveInformesScoDTO> lstInformesPreliminares = servicioEvento.ListEveInformesScoxEvento((int)reg.EVENCODI, 1).ToList();

                        if (lstInformesPreliminares.Count > 0)
                        {
                            lstInfFinal.AddRange(lstInformesPreliminares);
                        }
                    }
                    else
                    {
                        lstInfFinal.AddRange(lstInformesFinales);
                    }

                    if (lsEmpresaInvolucrada.Count > 0) //Validamos si el informe es antiguo
                    {
                        foreach (var x in lsEmpresaInvolucrada)
                        {
                            if (lstInfFinal.Count > 0)
                            {
                                int countInfo = lstInfFinal.Where(y => y.Afecodi == x.AFECODI && y.Portalweb == "S" && y.Emprcodi == x.EMPRCODI).Count();
                                if (countInfo == 0)
                                {
                                    EveInformesScoDTO InfoInvolucrada = new EveInformesScoDTO();
                                    InfoInvolucrada.Afecodi = x.AFECODI;
                                    InfoInvolucrada.Emprcodi = x.EMPRCODI;
                                    InfoInvolucrada.Emprnomb = x.EMPRNOMB;
                                    InfoInvolucrada.Version = x.VERSION;
                                    InfoInvolucrada.Cumplimiento = x.CUMPLIMIENTO;
                                    InfoInvolucrada.Portalweb = x.AFIPUBLICA;
                                    InfoInvolucrada.Afiversion = Convert.ToInt32(x.AFIVERSION);
                                    InfoInvolucrada.Tipodata = "A";
                                    lstInfFinal.Add(InfoInvolucrada);
                                }
                            }
                            else
                            {
                                EveInformesScoDTO InfoInvolucrada = new EveInformesScoDTO();
                                InfoInvolucrada.Afecodi = x.AFECODI;
                                InfoInvolucrada.Emprcodi = x.EMPRCODI;
                                InfoInvolucrada.Emprnomb = x.EMPRNOMB;
                                InfoInvolucrada.Version = x.VERSION;
                                InfoInvolucrada.Cumplimiento = x.CUMPLIMIENTO;
                                InfoInvolucrada.Portalweb = x.AFIPUBLICA;
                                InfoInvolucrada.Afiversion = Convert.ToInt32(x.AFIVERSION);
                                InfoInvolucrada.Tipodata = "A";
                                lstInfFinal.Add(InfoInvolucrada);
                            }

                        }
                    }

                    List<EveRecomobservDTO> ListaRecomendaciones = appAnalisisFallas.ListEveRecomobserv((int)reg.EVENCODI, 1);

                    if (ListaRecomendaciones.Count > 0)
                    {
                        LstRec.AddRange(ListaRecomendaciones);
                    }

                    List<EveRecomobservDTO> ListaObservaciones = appAnalisisFallas.ListEveRecomobserv((int)reg.EVENCODI, 2);

                    if (ListaObservaciones.Count > 0)
                    {
                        LstObs.AddRange(ListaObservaciones);
                    }
                }

                oAnalisisFallasModel.ListaInformeCtaf = ListaInformeCtaf.OrderBy(x => x.EVENINI).ToList();
                oAnalisisFallasModel.ListaEveRecomobserv = LstRec;
                oAnalisisFallasModel.ListaObservaciones = LstObs;
                oAnalisisFallasModel.LstInformes = lstInfFinal.Where(x => x.Portalweb == "S").OrderBy(y => y.Eveinfcodigo).ToList();

                string fechasEventosSco = string.Empty;

                List<int> idsEmpr = lstInfFinal.OrderBy(y => y.Lastdate).Select(x => x.Emprcodi).Distinct().ToList();

                List<InformeCTAFDTO> listaTabla = new List<InformeCTAFDTO>();

                int numeralEmpresaInvolucradaFinal = 1;

                foreach (var itemEmpresaInvolucradaFinal in lsEmpresaInvolucradaFinal)
                {
                    InformeCTAFDTO dtoinforme = new InformeCTAFDTO();
                    dtoinforme.INFORMEFINAL = string.Empty;
                    dtoinforme.FECHA = string.Empty;

                    foreach (var itemLstInformes in oAnalisisFallasModel.LstInformes)
                    {
                        if (itemEmpresaInvolucradaFinal.EMPRCODI == itemLstInformes.Emprcodi)
                        {
                            dtoinforme.RowNumber = numeralEmpresaInvolucradaFinal;
                            dtoinforme.EMPRABREV = itemLstInformes.Emprnomb;

                            if (itemLstInformes.Eveinfcodigo != null)
                            {
                                if (string.IsNullOrEmpty(dtoinforme.INFORMEFINAL))
                                {
                                    dtoinforme.INFORMEFINAL = itemLstInformes.Eveinfcodigo;
                                }
                                else
                                {
                                    dtoinforme.INFORMEFINAL = string.Concat(dtoinforme.INFORMEFINAL, "\n", itemLstInformes.Eveinfcodigo);
                                }

                                if (!string.IsNullOrEmpty(itemLstInformes.Lastdate.ToString("dd.MM.yyyy")))
                                {
                                    if (string.IsNullOrEmpty(dtoinforme.FECHA))
                                    {
                                        dtoinforme.FECHA = itemLstInformes.Lastdate.ToString("dd.MM.yyyy");
                                    }
                                    else
                                    {
                                        dtoinforme.FECHA = string.Concat(dtoinforme.FECHA, "\n", itemLstInformes.Lastdate.ToString("dd.MM.yyyy"));
                                    }
                                }
                            }
                        }
                    }

                    listaTabla.Add(dtoinforme);
                    numeralEmpresaInvolucradaFinal++;
                }

                oAnalisisFallasModel.CTAFINFORMEREPORTE = listaTabla;
                oAnalisisFallasModel.lstInterruptoresDescargadores = listIntDesc;

                string fileWord = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, oAnalisisFallasModel.ListaEventosSco, ConstantesEvento.SubCarpetaCtaf);

                int emprcodi = -1;
                SiEmpresaDTO objEmpresa = emprcodi > 0 ? servicioEvento.ObtenerEmpresa(emprcodi) : null;

                //SiFuentedatosDTO objFuenteDatos = FactorySic.GetSiFuentedatosRepository().GetById(fdatcodi);
                //EventoDTO regEvento = this.ObtenerInterrupcionByAfecodi(afecodi);

                bool esPorEracmf = false;
                TablaReporte tablaReporteTotales = new TablaReporte();
                TablaReporte tablaReporteTotalesEacmf = new TablaReporte();
                TablaReporte tablaReduccion = new TablaReporte();
                oAnalisisFallasModel.ListaTipoInformacion = servAF.ListSiFuentedatosByFdatpadre(ConstantesExtranetCTAF.FdatcodiCTAFExtranet);
                
                if (oAnalisisFallaDTO.AFEERACMF != "S")
                    oAnalisisFallasModel.ListaTipoInformacion = oAnalisisFallasModel.ListaTipoInformacion.Where(x => x.Fdatcodi != (int)ConstantesExtranetCTAF.Fuentedato.InterrupcionActivacionERACMF).ToList();
                else
                    esPorEracmf = true;

                foreach (SiFuentedatosDTO _fue in oAnalisisFallasModel.ListaTipoInformacion)
                {
                    #region REPORTE TOTAL
                    appAnalisisFallas.ListarInterrupcionSuministrosGral(oAnalisisFallaDTO.AFECODI, emprcodi, _fue.Fdatcodi, out List<AfInterrupSuministroDTO> listaData, out List<AfInterrupSuministroDTO> listDataReportCero, out List<string> listaMsjValidacion, out List<int> listaEmprcodiReportaron, oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
                    ////Lista horas de coordinacion de normalización
                    List<AfHoraCoordDTO> lstHandsonHorasCoordinacion = appAnalisisFallas.ObtenerListaCruceHoracoordInterrupcion(oAnalisisFallaDTO.AFECODI, _fue.Fdatcodi, listaData, oAnalisisFallaDTO.ANIO, oAnalisisFallaDTO.AFECORR.ToString());

                    ////TOTAL DE DATOS
                    appAnalisisFallas.ListarRptTotalDatos(oAnalisisFallaDTO.AFECODI, emprcodi, listaData, lstHandsonHorasCoordinacion, out List<ReporteInterrupcion> listaReporte1, out bool formatFechaCab1);
                    if (_fue.Fdatcodi == 13)
                        tablaReporteTotalesEacmf = appAnalisisFallas.ObtenerDataExcelDatosTotales(listaReporte1, esPorEracmf, formatFechaCab1);
                    else if(_fue.Fdatcodi == 14)
                        tablaReporteTotales = appAnalisisFallas.ObtenerDataExcelDatosTotales(listaReporte1, esPorEracmf, formatFechaCab1);
                    else if(_fue.Fdatcodi == 15)
                    {
                        appAnalisisFallas.ListarRpt7ReduccionDeSuministro(oAnalisisFallaDTO.AFECODI, emprcodi, listaData, out List<ReporteInterrupcion> listaReporte, out bool formatFechaCab1Reduccion);
                        tablaReduccion = appAnalisisFallas.ObtenerDataExcelReduccionSuministros(listaReporte, formatFechaCab1Reduccion);
                    }
                    
                    
                    #endregion
                }

                //bytes = GenerarReporteCTAF(oAnalisisFallasModel, fileWord, tablaReporteTotales, tablaReduccion, tablaReporteTotalesEacmf);
                bytes = GenerarReporteCTAF2(oAnalisisFallasModel, fileWord, tablaReporteTotales, tablaReduccion, tablaReporteTotalesEacmf);

                return File(bytes, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", "INFORME DEL CTAF.docx");

            }
            catch (Exception ex)
            {
                return new HttpStatusCodeResult(400, ex.Message);
            }

        }

        public FileResult ActaCTAF(int id)
        {
            byte[] bytes = new byte[0];
            string filename = string.Empty;
            try
            {
                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                Models.AnalisisFallasModel oAnalisisFallasModel = new Models.AnalisisFallasModel();

                AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(id);
                EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(oAnalisisFallaDTO.EVENCODI);

                oAnalisisFallasModel.LstEvento = appAnalisisFallas.ObtenerEventoCitacion(id);
                oAnalisisFallasModel.oEventoDTO = oEventoDTO;
                oAnalisisFallasModel.oAnalisisFallaDTO = oAnalisisFallaDTO;

                List<EmpresaInvolucradaDTO> lsEmpresaInvolucradaReunion = appAnalisisFallas.ObtenerEmpresasInvolucradaReunion(id);
                oAnalisisFallasModel.lsEmpresaInvolucradaReunion = lsEmpresaInvolucradaReunion;

                oAnalisisFallasModel.ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
                List<ReunionResponsableDTO> ListaResponsables = new List<ReunionResponsableDTO>();
                foreach (EventoDTO sco in oAnalisisFallasModel.ListaEventosSco)
                {
                    List<ReunionResponsableDTO> ListaR = appAnalisisFallas.ObtenerListaReunionResponsable((int)sco.EVENCODI);
                    ListaResponsables.AddRange(ListaR);

                    int penultimateIndex = oAnalisisFallasModel.ListaEventosSco.Count - 2;
                    int ultimoIndex = oAnalisisFallasModel.ListaEventosSco.Count - 1;

                    if (oAnalisisFallasModel.ListaEventosSco.IndexOf(sco) == ultimoIndex)
                    {
                        oAnalisisFallasModel.FechasEventos += string.Format("{0} h del {1}", sco.EVENINI.Value.ToString("HH:mm"), sco.EVENINI.Value.ToString("dd.MM.yyyy")) + ".";
                    }
                    else if (oAnalisisFallasModel.ListaEventosSco.IndexOf(sco) == penultimateIndex)
                    {
                        oAnalisisFallasModel.FechasEventos += string.Format("{0} h del {1}", sco.EVENINI.Value.ToString("HH:mm"), sco.EVENINI.Value.ToString("dd.MM.yyyy")) + " y ";
                    }
                    else
                    {
                        oAnalisisFallasModel.FechasEventos += string.Format("{0} h del {1}", sco.EVENINI.Value.ToString("HH:mm"), sco.EVENINI.Value.ToString("dd.MM.yyyy")) + ", ";
                    }

                }

                string literalEmpresasInvolucradas = "";

                int contador = 0;
                foreach (var item in oAnalisisFallasModel.lsEmpresaInvolucradaReunion)
                {
                    contador++;

                    if (item.EMPRCODI != 1)//COES
                        literalEmpresasInvolucradas += item.EMPRNOMB + "\n\r";
                }

                if (literalEmpresasInvolucradas != "")
                    literalEmpresasInvolucradas += "COORDINADOR";


                foreach (var item in oAnalisisFallasModel.LstEvento)
                {
                    item.EmpresaInvolucrada = literalEmpresasInvolucradas;
                }

                List<int> IdsEmpresa = ListaResponsables.Select(x => x.EMPRCODI).Distinct().ToList();
                List<ReunionResponsableDTO> Responsables = new List<ReunionResponsableDTO>();

                if (oAnalisisFallasModel.LstEvento[0].EVENTIPOFALLA == "N")
                {
                    foreach (int idEmpresa in IdsEmpresa)
                    {
                        ReunionResponsableDTO dtoResponsable = new ReunionResponsableDTO();

                        foreach (ReunionResponsableDTO item in ListaResponsables)
                        {
                            if (idEmpresa == item.EMPRCODI)
                            {
                                SiEmpresaDTO empresa = servicioEvento.ObtenerEmpresa(item.EMPRCODI);
                                dtoResponsable.EMPRCODI = item.EMPRCODI;
                                dtoResponsable.EMPRNOMB = empresa.Emprnomb;
                                int ultimoIndex = ListaResponsables.Count - 1;
                                if (ListaResponsables.IndexOf(item) == ultimoIndex)
                                {
                                    dtoResponsable.RESPNAME += item.EVEPARTICIPANTE != null ? "\n" + $"Ing. {item.EVEPARTICIPANTE}" + "\n\r" : "\n" + $"Ing. {item.RESPNAME}" + "\n";
                                }
                                else
                                {
                                    dtoResponsable.RESPNAME += item.EVEPARTICIPANTE != null ? "\n" + $"Ing. {item.EVEPARTICIPANTE}" + "\n\r" : "\n" + $"Ing. {item.RESPNAME}" + "\n";
                                }

                                dtoResponsable.REPRUTAFIRMA += item.REPRUTAFIRMA != null ? item.REPRUTAFIRMA + "|" : null;
                            }
                        }
                        Responsables.Add(dtoResponsable);
                    }
                }
                else
                {
                    foreach (int idEmpresa in IdsEmpresa)
                    {
                        ReunionResponsableDTO dtoResponsable = new ReunionResponsableDTO();

                        foreach (ReunionResponsableDTO item in ListaResponsables)
                        {
                            if (idEmpresa == item.EMPRCODI)
                            {
                                SiEmpresaDTO empresa = servicioEvento.ObtenerEmpresa(item.EMPRCODI);
                                dtoResponsable.EMPRCODI = item.EMPRCODI;
                                dtoResponsable.EMPRNOMB = empresa.Emprnomb;
                                int ultimoIndex = ListaResponsables.Count - 1;

                                if (ListaResponsables.IndexOf(item) == ultimoIndex)
                                {
                                    dtoResponsable.RESPNAME += item.EVEPARTICIPANTE != null ? "\n" + $"Ing. {item.EVEPARTICIPANTE}" + "\n\r" : "\n" + $"Ing. {item.RESPNAME}" + "\n";
                                }
                                else
                                {
                                    dtoResponsable.RESPNAME += item.EVEPARTICIPANTE != null ? "\n" + $"Ing. {item.EVEPARTICIPANTE}" + "\n\r" : "\n" + $"Ing. {item.RESPNAME}" + "\n";
                                }

                                dtoResponsable.REPRUTAFIRMA += item.REPRUTAFIRMA != null ? item.REPRUTAFIRMA + "|" : null;
                            }
                        }

                        Responsables.Add(dtoResponsable);

                    }
                }


                if (oAnalisisFallasModel.LstEvento[0].EVENTIPOFALLA == "N")
                    oAnalisisFallasModel.lsReunionResponsable = Responsables.Where(x => x.EMPRCODI == 1).ToList();
                else
                    oAnalisisFallasModel.lsReunionResponsable = Responsables;

                string fileserverSev = Constantes.FileSystemSev;
                string fileSev = string.Empty;

                EventoDTO primer_evento = oAnalisisFallasModel.ListaEventosSco.OrderBy(c => c.EVENINI).FirstOrDefault();
                if (primer_evento != null)
                    oAnalisisFallaDTO = servicioEvento.ObtenerAnalisisFalla(Convert.ToInt32(primer_evento.EVENCODI));

                string aaaa = primer_evento.EVENINI.Value.ToString("yyyy");
                //string asunto = (RemoveAccentsWithRegEx(Regex.Replace(oAnalisisFallaDTO.EVENASUNTO, "[\t@,\\\"/:*?<>|\\\\]", string.Empty)).TrimEnd()).TrimStart();
                //int maxcaracteres = Convert.ToInt32(ConfigurationManager.AppSettings["MaxCaractAF"]);
                //if (asunto.Length > maxcaracteres)
                //    asunto = asunto.Substring(0, maxcaracteres).Trim();

                //string NombreEvento = oAnalisisFallaDTO.CODIGO + "_" + asunto + "_" + oAnalisisFallaDTO.EVENINI.Value.ToString("dd.MM.yyyy");
                string NombreEvento = oAnalisisFallaDTO.CODIGO + "_" + oAnalisisFallaDTO.EVENINI.Value.ToString("dd.MM.yyyy");
                DateTime FechaFinSem1 = DateTime.ParseExact(ConstantesEvento.FechaFinSem1 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                DateTime FechaInicioSem2 = DateTime.ParseExact(ConstantesEvento.FechaInicioSem2 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                DateTime FechaFinSem2 = DateTime.ParseExact(ConstantesEvento.FechaFinSem2 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                DateTime FechaEvento = DateTime.ParseExact(oAnalisisFallaDTO.EVENINI.Value.ToString("dd/MM/yyyy"), Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                string semestre = string.Empty;

                if (FechaEvento <= FechaFinSem1)
                {
                    semestre = "Semestre I";
                }
                else if (FechaEvento >= FechaInicioSem2 && FechaEvento <= FechaFinSem2)
                {
                    semestre = "Semestre II";
                }

                fileSev = aaaa + "\\" + semestre + "\\" + NombreEvento + "\\" + ConstantesEvento.SubCarpetaCtaf;
                filename = "ACTA EV-" + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".docx";
                //bytes = GenerarActaCTAF(oAnalisisFallasModel, fileserverSev, fileSev, filename);
                bytes = GenerarActaCTAF2(oAnalisisFallasModel, fileserverSev, fileSev, filename);
            }
            catch (Exception ex)
            {
                bytes = null;
            }

            //TODO: Completar ruta de archivo y nombre
            //var FileName = "Acta.docx";

            return File(bytes, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", filename);
        }

        public FileResult Citacion(int id)
        {
            byte[] bytes = new byte[0];
            string filename = string.Empty;
            try
            {
                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                Models.AnalisisFallasModel oAnalisisFallasModel = new Models.AnalisisFallasModel();

                AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(id);
                EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(oAnalisisFallaDTO.EVENCODI);

                oAnalisisFallasModel.LstEvento = appAnalisisFallas.ObtenerEventoCitacion(id);
                oAnalisisFallasModel.oEventoDTO = oEventoDTO;
                oAnalisisFallasModel.oAnalisisFallaDTO = oAnalisisFallaDTO;

                List<EmpresaInvolucradaDTO> lsEmpresaInvolucradaReunion = appAnalisisFallas.ObtenerEmpresasInvolucradaReunion(id);
                oAnalisisFallasModel.lsEmpresaInvolucradaReunion = lsEmpresaInvolucradaReunion;

                oAnalisisFallasModel.ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());

                string literalEmpresasInvolucradas = "";

                int contador = 0;
                foreach (var item in oAnalisisFallasModel.lsEmpresaInvolucradaReunion)
                {
                    contador++;

                    if (item.EMPRCODI != 1)//COES
                        literalEmpresasInvolucradas += item.EMPRNOMB + "\n\r";
                }

                if (literalEmpresasInvolucradas != "")
                    literalEmpresasInvolucradas += "COORDINADOR";

                string fechasEventosSco = string.Empty;
                foreach (var sco in oAnalisisFallasModel.ListaEventosSco)
                {
                    if (sco.EVENINI != null)
                        fechasEventosSco += sco.EVENINI.Value.ToString(Constantes.FormatoFecha) + "\n\r" + sco.EVENINI.Value.ToString(Constantes.FormatoHoraMinuto) + "\n\r" + "\n\r";
                }

                foreach (var item in oAnalisisFallasModel.LstEvento)
                {
                    item.EmpresaInvolucrada = literalEmpresasInvolucradas;
                    item.FechasEventosSco = fechasEventosSco;
                }

                string fileserverSev = Constantes.FileSystemSev;
                string fileSev = string.Empty;

                EventoDTO primer_evento = oAnalisisFallasModel.ListaEventosSco.OrderBy(c => c.EVENINI).FirstOrDefault();
                if (primer_evento != null)
                    oAnalisisFallaDTO = servicioEvento.ObtenerAnalisisFalla(Convert.ToInt32(primer_evento.EVENCODI));

                string aaaa = primer_evento.EVENINI.Value.ToString("yyyy");
                //string asunto = (RemoveAccentsWithRegEx(Regex.Replace(oAnalisisFallaDTO.EVENASUNTO, "[\t@,\\\"/:*?<>|\\\\]", string.Empty)).TrimEnd()).TrimStart();
                //string asunto = (RemoveAccentsWithRegEx(oAnalisisFallaDTO.EVENASUNTO).TrimEnd()).TrimStart();

                //int maxcaracteres = Convert.ToInt32(ConfigurationManager.AppSettings["MaxCaractAF"]);
                //if (asunto.Length > maxcaracteres)
                //    asunto = asunto.Substring(0, maxcaracteres).Trim();

                //string NombreEvento = oAnalisisFallaDTO.CODIGO + "_" + asunto + "_" + oAnalisisFallaDTO.EVENINI.Value.ToString("dd.MM.yyyy");
                string NombreEvento = oAnalisisFallaDTO.CODIGO + "_" + oAnalisisFallaDTO.EVENINI.Value.ToString("dd.MM.yyyy");
                DateTime FechaFinSem1 = DateTime.ParseExact(ConstantesEvento.FechaFinSem1 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                DateTime FechaInicioSem2 = DateTime.ParseExact(ConstantesEvento.FechaInicioSem2 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                DateTime FechaFinSem2 = DateTime.ParseExact(ConstantesEvento.FechaFinSem2 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                DateTime FechaEvento = DateTime.ParseExact(oAnalisisFallaDTO.EVENINI.Value.ToString("dd/MM/yyyy"), Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                string semestre = string.Empty;

                if (FechaEvento <= FechaFinSem1)
                {
                    semestre = "Semestre I";
                }
                else if (FechaEvento >= FechaInicioSem2 && FechaEvento <= FechaFinSem2)
                {
                    semestre = "Semestre II";
                }

                fileSev = aaaa + "\\" + semestre + "\\" + NombreEvento + "\\" + ConstantesEvento.SubCarpetaCtaf;

                if (oAnalisisFallasModel.LstEvento.Count > 0)
                {
                    if (oAnalisisFallasModel.LstEvento[0].EVENTIPOFALLA == "P")
                    {
                        filename = "CITACION P " + oAnalisisFallasModel.oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallasModel.oAnalisisFallaDTO.AFEANIO + ".docx";
                    }
                    else
                    {
                        filename = "CITACION NP " + oAnalisisFallasModel.oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallasModel.oAnalisisFallaDTO.AFEANIO + ".docx";
                    }
                }

                //bytes = GenerarReporteCitacion(oAnalisisFallasModel, fileserverSev, fileSev, filename);
                bytes = GenerarReporteCitacion2(oAnalisisFallasModel, fileserverSev, fileSev, filename);
            }
            catch (Exception ex)
            {
                bytes = null;
            }

            //var FileName = "Citacion.docx";
            var archivoWord = File(bytes, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", filename);
            return archivoWord;
            //return File(bytes, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", FileName);
        }

        #region Generacion del Documento Word

        public byte[] GenerarReporteCTAF(Models.AnalisisFallasModel obj, string fileword, TablaReporte tablaReporteTotales, TablaReporte tablaReduccion, TablaReporte tablaReporteTotalesEacmf)
        {
            string fileReporte = "CT-AF_EV-" + obj.oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + obj.oAnalisisFallaDTO.AFEANIO + ".docx";
            byte[] bytes = new byte[0];
            int fdatcodiTotal = 0, fdatcodiEracmf = 0, fdatcodiReduccion = 0;

            foreach(var item in obj.ListaTipoInformacion)
            {
                if (item.Fdatcodi == 13)
                    fdatcodiEracmf = 13;
                else if (item.Fdatcodi == 14)
                    fdatcodiTotal = 14;
                else if(item.Fdatcodi == 15)
                    fdatcodiReduccion = 15;
            }

            using (DocX document = DocX.Create(fileReporte))
            {
                document.AddHeaders();
                document.AddFooters();

                document.DifferentFirstPage = true;
                document.DifferentOddAndEvenPages = false;

                int anchoPagina = (int)document.PageWidth;

                var Logo = Server.MapPath("~/Content/Images/logo2024.png");
                var CabeceraMain = Server.MapPath("~/Content/Images/image_head.png");

                List<Novacode.Image> firmas = new List<Novacode.Image>();

                foreach (var item in obj.lsReunionResponsable)
                {
                    string path = string.Concat(Constantes.CarpetaDeFirmas, item.REPRUTAFIRMA);
                    if (System.IO.File.Exists(path))
                        firmas.Add(document.AddImage(path));
                }

                #region CARATULA IMAGEN SUPERIOR
                var cabeceraMain = document.AddImage(CabeceraMain);
                var cabeceraMainPicture = cabeceraMain.CreatePicture();
                cabeceraMainPicture.Width = anchoPagina - 40;
                cabeceraMainPicture.Height = 114;

                Table cabeceraMainTable = document.InsertTable(1, 1);

                cabeceraMainTable.Design = TableDesign.TableNormal;
                cabeceraMainTable.AutoFit = AutoFit.ColumnWidth;
                cabeceraMainTable.Alignment = Alignment.center;

                cabeceraMainTable.Rows[0].Cells[0].Paragraphs.First().AppendPicture(cabeceraMainPicture).Alignment = Alignment.center;
                cabeceraMainTable.Rows[0].Cells[0].Width = 780;
                #endregion

                int cantidadSaltos = 13;
                string parrafo = string.Empty;
                int cantidadCaracteresAsunto = obj.oEventoDTO.EVENASUNTO.Length;

                if (cantidadCaracteresAsunto >= 132 && cantidadCaracteresAsunto < 154)
                {
                    cantidadSaltos = 12;
                }

                if (cantidadCaracteresAsunto >= 154 && cantidadCaracteresAsunto < 200)
                {
                    cantidadSaltos = 11;
                }

                if (cantidadCaracteresAsunto >= 200 && cantidadCaracteresAsunto < 242)
                {
                    cantidadSaltos = 9;
                }

                if (cantidadCaracteresAsunto >= 242)
                {
                    cantidadSaltos = 8;
                }

                for (int i = 0; i < cantidadSaltos; i++)
                {
                    parrafo = string.Concat(parrafo, "\n");
                }

                document.InsertParagraph(parrafo);

                #region TITULO Y ASUNTO
                var parrafoTitulo = document.InsertParagraph(string.Format("EVENTO-{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0'), obj.oAnalisisFallaDTO.AFEANIO)).FontSize(32).Font(new FontFamily("Calibri")).Color(Color.FromArgb(0, 119, 165));
                parrafoTitulo.Alignment = Alignment.center;

                var parrafoTituloAsunto = document.InsertParagraph("\n" + obj.oEventoDTO.EVENASUNTO).FontSize(18).Font(new FontFamily("Calibri"));
                parrafoTituloAsunto.Alignment = Alignment.center;
                #endregion

                document.InsertParagraph("\n\n");

                #region FECHAS
                string FechaHoraInicio = "";

                if (obj.ListaInformeCtaf != null)
                {
                    if (obj.ListaInformeCtaf.Count > 0)
                    {
                        var nuevaLista = obj.ListaInformeCtaf.OrderBy(m => m.EVENINI).ToList();

                        for (int i = 0; i < nuevaLista.Count; i++)
                        {
                            var tempEventoSCO = nuevaLista[i];

                            if (tempEventoSCO.EVENINI.HasValue)
                            {
                                var agregarAdicion = i == nuevaLista.Count - 1 ? " y el " : ", ";
                                agregarAdicion = i == 0 ? "Del " : agregarAdicion;
                                var hora = tempEventoSCO.EVENINI.Value.ToString("HH:mm");
                                var tempDiaEvento = tempEventoSCO.EVENINI.Value.ToString($"dd.MM.yyyy");
                                FechaHoraInicio = string.Concat(FechaHoraInicio, agregarAdicion, tempDiaEvento, " a las ", hora, " h");
                            }
                        }
                    }
                }

                var parrafoFechaHora = document.InsertParagraph(FechaHoraInicio).FontSize(18).Font(new FontFamily("Calibri"));
                parrafoFechaHora.Alignment = Alignment.center;
                #endregion

                document.InsertParagraph("\n\n\n\n\n\n\n\n\n\n");

                #region INFORMACION INFERIOR
                Table tableIndice = document.InsertTable(1, 2);

                tableIndice.Alignment = Alignment.center;
                tableIndice.Design = TableDesign.TableNormal;
                tableIndice.AutoFit = AutoFit.Contents;

                Novacode.Image logo = document.AddImage(Logo);
                var logoPictureCOES = logo.CreatePicture();
                logoPictureCOES.Width = 83;
                logoPictureCOES.Height = 87;

                tableIndice.Rows[0].Cells[0].Paragraphs.First().AppendPicture(logoPictureCOES);
                tableIndice.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                tableIndice.Rows[0].Cells[1].Paragraphs.First().Append(string.Format("Lima, {0} de {1} {2}", DateTime.Now.Day.ToString(), DateTime.Now.ToString(Constantes.FormatoMes, new CultureInfo("es-ES")).ToUpper(), DateTime.Now.Year.ToString())).FontSize(14).Font(new FontFamily("Calibri")).Alignment = Alignment.right;
                tableIndice.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                tableIndice.Rows[0].Cells[1].MarginRight = 10;
                tableIndice.Rows[0].Cells[1].Width = 420;
                #endregion

                document.InsertParagraph().InsertPageBreakAfterSelf();

                #region HEADER 2
                Header headerODD = document.Headers.odd;

                Table headerODDTable = headerODD.InsertTable(2, 3);

                headerODDTable.Design = TableDesign.TableNormal;
                headerODDTable.AutoFit = AutoFit.ColumnWidth;
                headerODDTable.Alignment = Alignment.center;

                Paragraph upperRightParagraph = headerODDTable.Rows[0].Cells[0].Paragraphs.First();
                var logoCabeceraDos = logo.CreatePicture();
                logoCabeceraDos.Width = 83;
                logoCabeceraDos.Height = 87;
                upperRightParagraph.AppendPicture(logoCabeceraDos);
                upperRightParagraph.Alignment = Alignment.center;

                for (int i = 0; i < 3; i++)
                {
                    VerticalAlignmentCenter(0, i, headerODDTable);
                }

                headerODDTable.Rows[0].Cells[0].Width = 200;
                headerODDTable.Rows[0].Cells[1].Width = 260;
                headerODDTable.Rows[0].Cells[2].Width = 185;

                headerODDTable.Rows[0].Cells[2].MarginBottom = 10;
                headerODDTable.Rows[0].Cells[2].MarginTop = 10;

                Paragraph titulo = headerODDTable.Rows[0].Cells[1].Paragraphs.First();
                titulo = headerODDTable.Rows[0].Cells[1].Paragraphs[0];
                titulo.Append(string.Format("INFORME DEL CT-AF DEL COES\n  (EV-{0}-{1})", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO)).FontSize(12).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;

                Paragraph cabecera = headerODDTable.Rows[0].Cells[2].Paragraphs[0];

                cabecera = headerODDTable.Rows[0].Cells[2].Paragraphs[0];
                cabecera.Append($"COMITÉ TÉCNICO\n DE ANÁLISIS DE FALLAS \n {DateTime.Now.ToString("dd.MM.yyyy")}").FontSize(10).Bold().Font(new FontFamily("Calibri")).Alignment = Alignment.center;

                headerODDTable.Rows[1].MergeCells(0, 2);
                headerODDTable.Rows[1].Cells[0].Paragraphs.First().Append("_____________________________________________________________________________________________________________________________________________________________________________________________").FontSize(5).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                #endregion

                #region FOOTER
                Footer footer = document.Footers.odd;

                Table footer_table = footer.InsertTable(1, 3);

                footer_table.Design = TableDesign.TableNormal;
                footer_table.AutoFit = AutoFit.Contents;
                footer_table.Alignment = Alignment.center;

                for (int i = 0; i < 3; i++)
                {
                    VerticalAlignmentCenter(0, i, footer_table);
                }

                footer_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                footer_table.Rows[0].Cells[0].Width = 225;

                footer_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                footer_table.Rows[0].Cells[1].Width = 225;

                footer_table.Rows[0].Cells[2].Paragraphs[0].Alignment = Alignment.right;
                footer_table.Rows[0].Cells[2].Width = 225;

                Paragraph codigo_acta = footer.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                codigo_acta.Append(string.Format("EV-{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO)).FontSize(11).Font(new FontFamily("Calibri")).Italic().Bold();

                var firma_footer = footer.Tables[0].Rows[0].Cells[1].Paragraphs.First();

                for (int i = 0; i < firmas.Count; i++)
                {
                    var pictureItem = firmas[i].CreatePicture();
                    pictureItem.Width = 50;
                    pictureItem.Height = 50;
                    firma_footer.AppendPicture(pictureItem);
                    firma_footer.Alignment = Alignment.center;
                }

                Paragraph numero_pagina = footer.Tables[0].Rows[0].Cells[2].Paragraphs[0];
                numero_pagina.Append("Página ").FontSize(10).Font(new FontFamily("Calibri"));
                numero_pagina.AppendPageNumber(PageNumberFormat.normal);
                numero_pagina.Append(" de ").FontSize(10).Font(new FontFamily("Calibri"));
                numero_pagina.AppendPageCount(PageNumberFormat.normal);

                #endregion

                document.InsertParagraph();

                double anchoSeccionDocumento = 35;
                double anchoSeccionTitulo = 70;
                double anchoSeccionTituloFin = 35;
                double anchoSeccionContenido = 470;

                #region 1. EVENTO
                Table tablaEvento = document.InsertTable(1, 4);

                tablaEvento.Design = TableDesign.TableNormal;
                tablaEvento.AutoFit = AutoFit.ColumnWidth;

                tablaEvento.Rows[0].Cells[0].Paragraphs.First().Append("1.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaEvento.Rows[0].Cells[0].Width = anchoSeccionDocumento;

                tablaEvento.Rows[0].Cells[1].Paragraphs.First().Append("EVENTO").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaEvento.Rows[0].Cells[1].Width = anchoSeccionTitulo;

                tablaEvento.Rows[0].Cells[2].Paragraphs.First().Append(":").FontSize(11).Font(new FontFamily("Calibri"));
                tablaEvento.Rows[0].Cells[2].Width = anchoSeccionTituloFin;

                tablaEvento.Rows[0].Cells[3].Paragraphs.First().Append(obj.oEventoDTO.EVENASUNTO).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                tablaEvento.Rows[0].Cells[3].Width = anchoSeccionContenido;
                #endregion

                document.InsertParagraph();

                #region 2. FECHA
                Table tablaFecha = document.InsertTable(1, 4);

                tablaFecha.Design = TableDesign.TableNormal;
                tablaFecha.AutoFit = AutoFit.ColumnWidth;

                tablaFecha.Rows[0].Cells[0].Paragraphs.First().Append("2.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaFecha.Rows[0].Cells[0].Width = anchoSeccionDocumento;

                tablaFecha.Rows[0].Cells[1].Paragraphs.First().Append("FECHA").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaFecha.Rows[0].Cells[1].Width = anchoSeccionTitulo;

                tablaFecha.Rows[0].Cells[2].Paragraphs.First().Append(":").FontSize(11).Font(new FontFamily("Calibri"));
                tablaFecha.Rows[0].Cells[2].Width = anchoSeccionTituloFin;

                if (obj.ListaInformeCtaf != null)
                {
                    if (obj.ListaInformeCtaf.Any())
                    {
                        var tempListaInformeCtaf = obj.ListaInformeCtaf.Where(x => x.EVENINI.HasValue).OrderBy(x => x.EVENINI).ToList();
                        var listaFechas = tempListaInformeCtaf.Select(x => x.EVENINI.Value).ToList();
                        var listaFechasString = listaFechas.Select(x => x.ToString("dd.MM.yyyy")).Distinct().ToList();

                        if (listaFechasString.Any())
                        {
                            string fechasEventos = string.Empty;

                            int ultimaIteracion = listaFechasString.Count - 1;

                            for (int i = 0; i < listaFechasString.Count; i++)
                            {
                                string separacion = string.Empty;

                                if (i > 0 && listaFechasString.Count > 2 && ultimaIteracion != i)
                                {
                                    separacion = ", ";
                                }

                                if (ultimaIteracion == i && listaFechasString.Count > 1)
                                {
                                    separacion = " y ";
                                }

                                fechasEventos = string.Concat(fechasEventos, separacion, listaFechasString[i]);
                            }

                            fechasEventos = string.Concat(fechasEventos, ".");

                            tablaFecha.Rows[0].Cells[3].Paragraphs.First().Append(fechasEventos).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                            tablaFecha.Rows[0].Cells[3].Width = anchoSeccionContenido;
                        }
                    }
                }
                #endregion

                document.InsertParagraph();

                #region 3. HORA
                Table tablaHora = document.InsertTable(1, 4);

                tablaHora.Design = TableDesign.TableNormal;
                tablaHora.AutoFit = AutoFit.ColumnWidth;

                tablaHora.Rows[0].Cells[0].Paragraphs.First().Append("3.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaHora.Rows[0].Cells[0].Width = anchoSeccionDocumento;

                tablaHora.Rows[0].Cells[1].Paragraphs.First().Append("HORA").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaHora.Rows[0].Cells[1].Width = anchoSeccionTitulo;

                tablaHora.Rows[0].Cells[2].Paragraphs.First().Append(":").FontSize(11).Font(new FontFamily("Calibri"));
                tablaHora.Rows[0].Cells[2].Width = anchoSeccionTituloFin;

                if (obj.ListaInformeCtaf != null)
                {
                    if (obj.ListaInformeCtaf.Any())
                    {
                        var tempListaInformeCtaf = obj.ListaInformeCtaf.Where(x => x.EVENINI.HasValue).OrderBy(x => x.EVENINI).ToList();
                        var listaFechas = tempListaInformeCtaf.Select(x => x.EVENINI.Value).ToList();
                        var listaHorasString = listaFechas.Select(x => x.ToString("HH:mm")).Distinct().ToList();

                        if (listaHorasString.Any())
                        {
                            string horasEventos = string.Empty;

                            int ultimaIteracion = listaHorasString.Count - 1;

                            for (int i = 0; i < listaHorasString.Count; i++)
                            {
                                string separacion = string.Empty;

                                if (i > 0 && listaHorasString.Count > 2 && ultimaIteracion != i)
                                {
                                    separacion = ", ";
                                }

                                if (ultimaIteracion == i && listaHorasString.Count > 1)
                                {
                                    separacion = " y ";
                                }

                                horasEventos = string.Concat(horasEventos, separacion, listaHorasString[i]);
                            }

                            horasEventos = string.Concat(horasEventos, ".");

                            tablaHora.Rows[0].Cells[3].Paragraphs.First().Append(horasEventos).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                            tablaHora.Rows[0].Cells[3].Width = anchoSeccionContenido;
                        }
                    }
                }
                #endregion

                document.InsertParagraph();

                double anchoOtrasSecciones = 35;

                #region 4. PROPIETARIO
                Table primeraTablaPropietario = document.InsertTable(1, 3);

                primeraTablaPropietario.Design = TableDesign.TableNormal;
                primeraTablaPropietario.AutoFit = AutoFit.ColumnWidth;

                primeraTablaPropietario.Rows[0].Cells[0].Paragraphs.First().Append("4.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                primeraTablaPropietario.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                primeraTablaPropietario.Rows[0].Cells[1].Paragraphs.First().Append("PROPIETARIO").FontSize(11).Font(new FontFamily("Calibri")).Bold().Append(":");
                primeraTablaPropietario.Rows[0].Cells[1].Width = 105;

                primeraTablaPropietario.Rows[0].Cells[2].Paragraphs.First().Append(obj.oEquipoDTO.EMPRENOMB).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                primeraTablaPropietario.Rows[0].Cells[2].Width = 400;
                #endregion

                document.InsertParagraph();

                double anchoOtrasSeccionesTitulo = 590;
                double anchoOtrasSeccionesGrandes = 43;

                #region SECCION 5
                Table tablaSeccion5 = document.InsertTable(1, 2);

                tablaSeccion5.Design = TableDesign.TableNormal;
                tablaSeccion5.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion5.Rows[0].Cells[0].Paragraphs.First().Append("5.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion5.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion5.Rows[0].Cells[1].Paragraphs.First().Append("INFORMES").FontSize(11).Font(new FontFamily("Calibri")).Bold().Append(":");
                tablaSeccion5.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.CTAFINFORMEREPORTE != null && obj.CTAFINFORMEREPORTE.Count > 0)
                {
                    var rows = obj.CTAFINFORMEREPORTE.Count + 1;

                    Table table = document.InsertTable(rows, 4);
                    table.Design = TableDesign.TableGrid;

                    //table.AutoFit = AutoFit.Window;

                    for (int i = 0; i < 4; i++)
                    {
                        VerticalAlignmentCenter(0, i, table);
                        TableFilColor(0, i, table);
                        TableMarginBottom(0, i, table, 10);

                        // table.Rows[0].Cells[0].MarginLeft = -30;
                    }

                    table.Rows[0].Cells[0].Width = 5;
                    table.Rows[0].Cells[1].Width = 500;
                    table.Rows[0].Cells[2].Width = 500;
                    table.Rows[0].Cells[3].Width = 8;

                    table.Rows[0].Cells[0].Paragraphs[0].Append("N°").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[1].Paragraphs[0].Append("EMPRESA").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[2].Paragraphs[0].Append("INFORME FINAL").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[3].Paragraphs[0].Append("FECHA DE ENTREGA").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;

                    for (int i = 0; i < obj.CTAFINFORMEREPORTE.Count; i++)
                    {
                        VerticalAlignmentCenter(i + 1, 0, table);
                        VerticalAlignmentCenter(i + 1, 1, table);
                        VerticalAlignmentCenter(i + 1, 2, table);
                        VerticalAlignmentCenter(i + 1, 3, table);

                        if(obj.CTAFINFORMEREPORTE[i].EMPRABREV != null)
                        {
                            table.Rows[i + 1].Cells[0].Paragraphs[0].Append(obj.CTAFINFORMEREPORTE[i].RowNumber.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                            table.Rows[i + 1].Cells[1].Paragraphs[0].Append(obj.CTAFINFORMEREPORTE[i].EMPRABREV).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                            table.Rows[i + 1].Cells[2].Paragraphs[0].Append(obj.CTAFINFORMEREPORTE[i].INFORMEFINAL).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                            table.Rows[i + 1].Cells[3].Paragraphs[0].Append(obj.CTAFINFORMEREPORTE[i].FECHA).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                        }              
                    }
                    
                    document.InsertParagraph();
                }
                else
                {
                    Table tablaSeccion5NoRegistrado = document.InsertTable(1, 2);

                    tablaSeccion5NoRegistrado.Design = TableDesign.TableNormal;
                    tablaSeccion5NoRegistrado.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion5NoRegistrado.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion5NoRegistrado.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion5NoRegistrado.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                    
                }
                #endregion

                #region SECCCION 6
                Table tablaSeccion6 = document.InsertTable(1, 2);

                tablaSeccion6.Design = TableDesign.TableNormal;
                tablaSeccion6.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion6.Rows[0].Cells[0].Paragraphs.First().Append("6.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion6.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion6.Rows[0].Cells[1].Paragraphs.First().Append("DESCRIPCIÓN DEL EVENTO").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion6.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    foreach (var itemEvento in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                    {
                        string valorEvento = itemEvento.CabNombreEvento;

                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            Table tablaSeccion6ItemTitulo = document.InsertTable(1, 2);

                            tablaSeccion6ItemTitulo.Design = TableDesign.TableNormal;
                            tablaSeccion6ItemTitulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion6ItemTitulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion6ItemTitulo.Rows[0].Cells[1].Paragraphs.First().Append(valorEvento).FontSize(11).Font(new FontFamily("Calibri")).UnderlineStyle(UnderlineStyle.singleLine).Bold();
                            tablaSeccion6ItemTitulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }

                        Table tablaSeccion6ItemContenido = document.InsertTable(1, 2);

                        tablaSeccion6ItemContenido.Design = TableDesign.TableNormal;
                        tablaSeccion6ItemContenido.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion6ItemContenido.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                        tablaSeccion6ItemContenido.Rows[0].Cells[1].Paragraphs.First().Append(itemEvento.CabDescripcionEvento).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                        tablaSeccion6ItemContenido.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;
                        
                        document.InsertParagraph();
                    }
                }
                #endregion

                #region SECCION 7
                Table tablaSeccion7 = document.InsertTable(1, 2);

                tablaSeccion7.Design = TableDesign.TableNormal;
                tablaSeccion7.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion7.Rows[0].Cells[0].Paragraphs.First().Append("7.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion7.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion7.Rows[0].Cells[1].Paragraphs.First().Append("CONDICIÓN PREVIA AL EVENTO EN EL SEIN").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion7.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion71 = document.InsertTable(1, 2);

                tablaSeccion71.Design = TableDesign.TableNormal;
                tablaSeccion71.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion71.Rows[0].Cells[0].Paragraphs.First().Append("7.1").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion71.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion71.Rows[0].Cells[1].Paragraphs.First().Append("Las condiciones operativas del SEIN previas al evento fueron las siguientes:").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion71.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    int numeracionCondicionesPrevias = 1;

                    for (int r = 0; r < obj.ListaInformeCtaf.Count; r++)
                    {
                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            Table tablaSeccion7ItemTitulo = document.InsertTable(1, 2);

                            tablaSeccion7ItemTitulo.Design = TableDesign.TableNormal;
                            tablaSeccion7ItemTitulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion7ItemTitulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion7ItemTitulo.Rows[0].Cells[1].Paragraphs.First().Append(obj.ListaInformeCtaf[r].CabNombreEvento).FontSize(11).Font(new FontFamily("Calibri")).UnderlineStyle(UnderlineStyle.singleLine);
                            tablaSeccion7ItemTitulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }

                        if ((obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaCentral == null)
                            && (obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaLinea == null)
                            && (obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaTransformadores == null))
                        {
                            Table tablaSeccion7ItemTitulo = document.InsertTable(1, 2);

                            tablaSeccion7ItemTitulo.Design = TableDesign.TableNormal;
                            tablaSeccion7ItemTitulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion7ItemTitulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion7ItemTitulo.Rows[0].Cells[1].Paragraphs.First().Append("No existen registros.").FontSize(11).Font(new FontFamily("Calibri"));
                            tablaSeccion7ItemTitulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }
                        else
                        {
                            if (obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaCentral != null)
                            {
                                Table tablaSeccion71Dinamico = document.InsertTable(1, 2);

                                tablaSeccion71Dinamico.Design = TableDesign.TableNormal;
                                tablaSeccion71Dinamico.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion71Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("7.1." + numeracionCondicionesPrevias).FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[0].Width = 60;

                                tablaSeccion71Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Centros de generación involucrados:").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                numeracionCondicionesPrevias++;

                                var rowsCentral = obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count + 2;

                                Table tableCentral = document.InsertTable(rowsCentral, 5);

                                tableCentral.Design = TableDesign.TableGrid;
                                tableCentral.AutoFit = AutoFit.ColumnWidth;

                                for (int i = 0; i < 5; i++)
                                {
                                    TableFilColor(0, i, tableCentral);
                                    TableFilColor(1, i, tableCentral);
                                }

                                tableCentral.MergeCellsInColumn(0, 0, 1);
                                tableCentral.MergeCellsInColumn(1, 0, 1);
                                tableCentral.MergeCellsInColumn(2, 0, 1);

                                tableCentral.Rows[0].MergeCells(3, 4);
                                tableCentral.Rows[0].Height = 23.15; // 0.6 cm

                                double anchoColumnaN = 35.905;
                                double anchoCentral = 115;
                                double anchoUnidad = 94.488;
                                double anchoUnidadGeneracion = 75.590;
                                double anchoGeneracion = 151.180;

                                tableCentral.Rows[0].Cells[0].Paragraphs.First().Append("N°").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[0].Cells[0].Width = anchoColumnaN;
                                tableCentral.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[0].Cells[1].Paragraphs.First().Append("Central").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[0].Cells[1].Width = anchoCentral;
                                tableCentral.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[0].Cells[2].Paragraphs.First().Append("Unidad").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[0].Cells[2].Width = anchoUnidad;
                                tableCentral.Rows[0].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[0].Cells[3].Paragraphs.First().Append("Generación").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[0].Cells[3].RemoveParagraphAt(1);
                                tableCentral.Rows[0].Cells[3].Width = anchoGeneracion;
                                tableCentral.Rows[0].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[1].Cells[3].Paragraphs.First().Append("MW").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[1].Cells[3].Width = anchoUnidadGeneracion;
                                tableCentral.Rows[1].Cells[3].MarginTop = 10;
                                tableCentral.Rows[1].Cells[3].MarginBottom = 10;
                                tableCentral.Rows[1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[1].Cells[4].Paragraphs.First().Append("MVAr").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[1].Cells[4].Width = anchoUnidadGeneracion;
                                tableCentral.Rows[1].Cells[4].MarginTop = 10;
                                tableCentral.Rows[1].Cells[4].MarginBottom = 10;
                                tableCentral.Rows[1].Cells[4].VerticalAlignment = VerticalAlignment.Center;

                                int contadorCentral = 2;
                                int contadorFilas = 1;

                                var listaCondPreviaCentral = obj.ListaInformeCtaf[r].listaCondPreviaCentral;

                                var gruposCentral = listaCondPreviaCentral.GroupBy(x => x.EVECONDPRCENTRALDE).ToList();

                                foreach (var grupoCentral in gruposCentral)
                                {
                                    if (grupoCentral.Count() > 1)
                                    {
                                        tableCentral.MergeCellsInColumn(0, contadorCentral, contadorCentral + (grupoCentral.Count() - 1));
                                        tableCentral.MergeCellsInColumn(1, contadorCentral, contadorCentral + (grupoCentral.Count() - 1));

                                        tableCentral.Rows[contadorCentral].Cells[0].Paragraphs.First().Append(contadorFilas.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[0].Width = anchoColumnaN;

                                        bool rowGroupPrimeraFila = true;

                                        foreach (var central in grupoCentral)
                                        {
                                            if (rowGroupPrimeraFila)
                                            {
                                                tableCentral.Rows[contadorCentral].Cells[1].Paragraphs.First().Append(central.EVECONDPRCENTRALDE == null ? "" :central.EVECONDPRCENTRALDE.TrimEnd()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                                tableCentral.Rows[contadorCentral].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                                tableCentral.Rows[contadorCentral].Cells[1].Width = anchoCentral;

                                                rowGroupPrimeraFila = false;
                                            }

                                            tableCentral.Rows[contadorCentral].Cells[2].Paragraphs.First().Append(central.EVECONDPRCODIGOUNIDAD == null ? "" : central.EVECONDPRCODIGOUNIDAD.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                            tableCentral.Rows[contadorCentral].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                            tableCentral.Rows[contadorCentral].Cells[2].Width = anchoUnidad;

                                            tableCentral.Rows[contadorCentral].Cells[3].Paragraphs.First().Append(central.EVECONDPRPOTENCIAMW == null ? "" : central.EVECONDPRPOTENCIAMW.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                            tableCentral.Rows[contadorCentral].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                            tableCentral.Rows[contadorCentral].Cells[3].Width = anchoUnidadGeneracion;

                                            tableCentral.Rows[contadorCentral].Cells[4].Paragraphs.First().Append(central.EVECONDPRPOTENCIAMVAR == null ? "" : central.EVECONDPRPOTENCIAMVAR.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                            tableCentral.Rows[contadorCentral].Cells[4].VerticalAlignment = VerticalAlignment.Center;
                                            tableCentral.Rows[contadorCentral].Cells[4].Width = anchoUnidadGeneracion;

                                            contadorCentral++;
                                        }

                                        contadorFilas++;
                                    }
                                    else
                                    {
                                        var central = grupoCentral.FirstOrDefault();

                                        tableCentral.Rows[contadorCentral].Cells[0].Paragraphs.First().Append(contadorFilas.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[0].Width = anchoColumnaN;

                                        tableCentral.Rows[contadorCentral].Cells[1].Paragraphs.First().Append(central.EVECONDPRCENTRALDE == null ? "" : central.EVECONDPRCENTRALDE.TrimEnd()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[1].Width = anchoCentral;

                                        tableCentral.Rows[contadorCentral].Cells[2].Paragraphs.First().Append(central.EVECONDPRCODIGOUNIDAD == null ? "" : central.EVECONDPRCODIGOUNIDAD.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[2].Width = anchoUnidad;

                                        tableCentral.Rows[contadorCentral].Cells[3].Paragraphs.First().Append(central.EVECONDPRPOTENCIAMW == null ? "" : central.EVECONDPRPOTENCIAMW.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[3].Width = anchoUnidadGeneracion;

                                        tableCentral.Rows[contadorCentral].Cells[4].Paragraphs.First().Append(central.EVECONDPRPOTENCIAMVAR == null ? "" : central.EVECONDPRPOTENCIAMVAR.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[4].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[4].Width = anchoUnidadGeneracion;

                                        contadorCentral++;
                                        contadorFilas++;
                                    }
                                }

                                document.InsertParagraph("F/S: Fuera de servicio por operación.\r\n").FontSize(9).Font(new FontFamily("Calibri")).Alignment = Alignment.left;

                            }

                            if (obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaLinea != null)
                            {
                                Table tablaSeccion71Dinamico = document.InsertTable(1, 2);

                                tablaSeccion71Dinamico.Design = TableDesign.TableNormal;
                                tablaSeccion71Dinamico.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion71Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("7.1." + numeracionCondicionesPrevias).FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[0].Width = 60;

                                tablaSeccion71Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Flujo de potencia por las principales líneas de la zona:").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                numeracionCondicionesPrevias++;

                                var rowsLinea = obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count + 2;

                                Table tableLinea = document.InsertTable(rowsLinea, 6);

                                tableLinea.Design = TableDesign.TableGrid;

                                for (int i = 0; i < 6; i++)
                                {
                                    VerticalAlignmentCenter(0, i, tableLinea);
                                    VerticalAlignmentCenter(1, i, tableLinea);
                                    TableFilColor(0, i, tableLinea);
                                    TableFilColor(1, i, tableLinea);
                                    TableMarginBottom(1, i, tableLinea, 10);
                                }

                                tableLinea.Rows[0].Height = 46.866; // 1.24 cm

                                tableLinea.Rows[0].Cells[2].MarginTop = 10;
                                tableLinea.Rows[0].Cells[3].MarginTop = 10;

                                tableLinea.MergeCellsInColumn(0, 0, 1);
                                tableLinea.MergeCellsInColumn(1, 0, 1);
                                tableLinea.MergeCellsInColumn(4, 0, 1);
                                tableLinea.MergeCellsInColumn(5, 0, 1);

                                tableLinea.Rows[0].MergeCells(2, 3);

                                tableLinea.Rows[0].Cells[0].Paragraphs[0].Append("N°").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[0].Width = 35.905;

                                tableLinea.Rows[0].Cells[1].Paragraphs[0].Append("Código").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[1].Width = 75.590;

                                tableLinea.Rows[0].Cells[2].Paragraphs[0].Append("Subestaciones").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[2].Width = 266;

                                tableLinea.Rows[1].Cells[2].Paragraphs[0].Append("De").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[1].Cells[2].Width = 133;
                                tableLinea.Rows[1].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                tableLinea.Rows[1].Cells[2].MarginTop = 10;

                                tableLinea.Rows[1].Cells[3].Paragraphs[0].Append("A").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[1].Cells[3].Width = 133;
                                tableLinea.Rows[1].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                tableLinea.Rows[1].Cells[3].MarginTop = 10;

                                tableLinea.Rows[0].Cells[3].Paragraphs[0].Append("Potencia Activa (MW)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[3].Width = 75.590;

                                tableLinea.Rows[0].Cells[4].Paragraphs[0].Append("Potencia Reactiva (MVAr)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[4].Width = 75.590;

                                int contadorLinea = 1;

                                for (int x = 0; x < obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count; x++)
                                {
                                    tableLinea.Rows[contadorLinea + 1].Cells[0].Paragraphs[0].Append((x + 1).ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[0].Width = 35.905;
                                    tableLinea.Rows[contadorLinea + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[1].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCODIGOUNIDAD == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCODIGOUNIDAD).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[1].Width = 75.590;
                                    tableLinea.Rows[contadorLinea + 1].Cells[1].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[2].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCENTRALDE == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCENTRALDE.TrimEnd()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[2].Width = 133;
                                    tableLinea.Rows[contadorLinea + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[3].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRSUBESTACIONA == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRSUBESTACIONA.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[3].Width = 133;
                                    tableLinea.Rows[contadorLinea + 1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[4].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMW == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMW.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[4].Width = 75.590;
                                    tableLinea.Rows[contadorLinea + 1].Cells[4].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[5].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMVAR == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMVAR.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[5].Width = 75.590;
                                    tableLinea.Rows[contadorLinea + 1].Cells[5].VerticalAlignment = VerticalAlignment.Center;

                                    contadorLinea++;
                                }

                                document.InsertParagraph("(*): Datos extraídas del SCADA COES.\r\n").Font(new FontFamily("Calibri")).FontSize(9);

                            }

                            if (obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaTransformadores != null)
                            {
                                Table tablaSeccion71Dinamico = document.InsertTable(1, 2);

                                tablaSeccion71Dinamico.Design = TableDesign.TableNormal;
                                tablaSeccion71Dinamico.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion71Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("7.1." + numeracionCondicionesPrevias).FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[0].Width = 60;

                                tablaSeccion71Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Flujo de potencia por los transformadores de potencia de la zona:").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                numeracionCondicionesPrevias++;

                                var rowsTransformador = obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count + 1;

                                Table tableTransformador = document.InsertTable(rowsTransformador, 6);

                                tableTransformador.Design = TableDesign.TableGrid;
                                tableTransformador.AutoFit = AutoFit.ColumnWidth;

                                for (int i = 0; i < 6; i++)
                                {
                                    TableFilColor(0, i, tableTransformador);
                                }

                                double anchoNumero = 35.905;
                                double anchoCodigo = 86.929;
                                double anchoSE = 115;
                                double anchoTension = 102.047;
                                double anchoPotencia = 83.149;

                                tableTransformador.Rows[0].Cells[0].Paragraphs[0].Append("N°").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[0].Width = anchoNumero;
                                tableTransformador.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[0].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[0].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[1].Paragraphs[0].Append("Código").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[1].Width = anchoCodigo;
                                tableTransformador.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[1].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[1].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[2].Paragraphs[0].Append("S.E.").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[2].Width = anchoSE;
                                tableTransformador.Rows[0].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[2].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[2].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[3].Paragraphs[0].Append("Nivel de\nTensión\n(kV)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[3].Width = anchoTension;
                                tableTransformador.Rows[0].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[3].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[3].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[4].Paragraphs[0].Append("Potencia Activa (MW)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[4].Width = anchoPotencia;
                                tableTransformador.Rows[0].Cells[4].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[4].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[4].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[5].Paragraphs[0].Append("Potencia Reactiva (MVAr)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[5].Width = anchoPotencia;
                                tableTransformador.Rows[0].Cells[5].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[5].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[5].MarginBottom = 10;

                                for (int x = 0; x < obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count; x++)
                                {
                                    tableTransformador.Rows[x + 1].Cells[0].Paragraphs[0].Append((x + 1).ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[0].Width = anchoNumero;
                                    tableTransformador.Rows[x + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[1].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCODIGOUNIDAD == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCODIGOUNIDAD).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[1].Width = anchoCodigo;
                                    tableTransformador.Rows[x + 1].Cells[1].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[2].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCENTRALDE == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCENTRALDE).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[2].Width = anchoSE;
                                    tableTransformador.Rows[x + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[3].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRTENSION == 0 ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRTENSION.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[3].Width = anchoTension;
                                    tableTransformador.Rows[x + 1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[4].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMW == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMW.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[4].Width = anchoPotencia;
                                    tableTransformador.Rows[x + 1].Cells[4].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[5].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMVAR == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMVAR.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[5].Width = anchoPotencia;
                                    tableTransformador.Rows[x + 1].Cells[5].VerticalAlignment = VerticalAlignment.Center;
                                }

                                document.InsertParagraph("(*): Datos extraídas del SCADA COES.\r\n").Font(new FontFamily("Calibri")).FontSize(9);

                            }
                        }

                    }
                }
                #endregion

                #region SECCION 8
                Table tablaSeccion8 = document.InsertTable(1, 2);

                tablaSeccion8.Design = TableDesign.TableNormal;
                tablaSeccion8.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion8.Rows[0].Cells[0].Paragraphs.First().Append("8.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion8.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion8.Rows[0].Cells[1].Paragraphs.First().Append("SECUENCIA DE EVENTOS").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion8.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion8Contenido = document.InsertTable(1, 2);

                tablaSeccion8Contenido.Design = TableDesign.TableNormal;
                tablaSeccion8Contenido.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion8Contenido.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                tablaSeccion8Contenido.Rows[0].Cells[1].Paragraphs.First().Append("Se muestran detalladamente en el Anexo 1.").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion8Contenido.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();
                #endregion

                #region SECCION 09. SEÑALIZACIÓN DE LAS PROTECCIONES
                Table tablaSeccion9 = document.InsertTable(1, 2);

                tablaSeccion9.Design = TableDesign.TableNormal;
                tablaSeccion9.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion9.Rows[0].Cells[0].Paragraphs.First().Append("9.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion9.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion9.Rows[0].Cells[1].Paragraphs.First().Append("SEÑALIZACIÓN DE LAS PROTECCIONES").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion9.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaEventosSco != null)
                {
                    foreach (var eventoSCO in obj.ListaEventosSco)
                    {                    
                        if (obj.ListaSenializacionProteccionInforme != null && obj.ListaSenializacionProteccionInforme.Any())
                        {
                            var listaSenializacionPorEvento = obj.ListaSenializacionProteccionInforme.Where(x => x.CodigoEvento == eventoSCO.EVENCODI.Value).ToList();
                            
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                Table tablaSeccion9Titulo = document.InsertTable(1, 2);

                                tablaSeccion9Titulo.Design = TableDesign.TableNormal;
                                tablaSeccion9Titulo.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion9Titulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccion9Titulo.Rows[0].Cells[1].Paragraphs.First().Append($"Evento del {eventoSCO.EVENINI.Value.ToString("dd.MM.yyyy")} a las {eventoSCO.EVENINI.Value.ToString("HH:mm:ss")} h:").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                                tablaSeccion9Titulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;
                                document.InsertParagraph();
                            }

                            if (listaSenializacionPorEvento.Count > 0)
                            { 
                                var rows = listaSenializacionPorEvento.Count + 1;

                                Table table = document.InsertTable(rows, 6);
                                table.Design = TableDesign.TableGrid;
                                table.AutoFit = AutoFit.ColumnWidth;

                                for (int i = 0; i < 6; i++)
                                {
                                    TableFilColor(0, i, table);
                                }

                                double anchoSubestacion = 105;
                                double anchoEquipo = 80;
                                double anchoCodigo = 85;
                                double anchoSenializacion = 155;
                                double anchoInterruptor = 94.50;
                                double anchoAC = 58;

                                table.Rows[0].Cells[0].Paragraphs.First().Append("Subestación").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[0].Width = anchoSubestacion;
                                table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[0].MarginBottom = 10;
                                table.Rows[0].Cells[0].MarginTop = 10;

                                table.Rows[0].Cells[1].Paragraphs.First().Append("Equipo").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[1].Width = anchoEquipo;
                                table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[1].MarginBottom = 10;
                                table.Rows[0].Cells[1].MarginTop = 10;

                                table.Rows[0].Cells[2].Paragraphs.First().Append("Código").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[2].Width = anchoCodigo;
                                table.Rows[0].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[2].MarginBottom = 10;
                                table.Rows[0].Cells[2].MarginTop = 10;

                                table.Rows[0].Cells[3].Paragraphs.First().Append("Señalizaciones").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[3].Width = anchoSenializacion;
                                table.Rows[0].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[3].MarginBottom = 10;
                                table.Rows[0].Cells[3].MarginTop = 10;

                                table.Rows[0].Cells[4].Paragraphs.First().Append("Interruptor").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[4].Width = anchoInterruptor;
                                table.Rows[0].Cells[4].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[4].MarginBottom = 10;
                                table.Rows[0].Cells[4].MarginTop = 10;

                                table.Rows[0].Cells[5].Paragraphs.First().Append("A/C").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[5].Width = anchoAC;
                                table.Rows[0].Cells[5].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[5].MarginBottom = 10;
                                table.Rows[0].Cells[5].MarginTop = 10;

                                for (int i = 0; i < listaSenializacionPorEvento.Count; i++)
                                {
                                    table.Rows[i + 1].Cells[0].Paragraphs.First().Append(listaSenializacionPorEvento[i].SubEstacion ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[0].Width = anchoSubestacion;
                                    table.Rows[i + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[1].Paragraphs.First().Append(listaSenializacionPorEvento[i].Equipo ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[1].Width = anchoEquipo;
                                    table.Rows[i + 1].Cells[1].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[2].Paragraphs.First().Append(listaSenializacionPorEvento[i].Codigo ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[2].Width = anchoCodigo;
                                    table.Rows[i + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[3].Paragraphs.First().Append(listaSenializacionPorEvento[i].Senializaciones ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[3].Width = anchoSenializacion;
                                    table.Rows[i + 1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[4].Paragraphs.First().Append(listaSenializacionPorEvento[i].Interruptor ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[4].Width = anchoInterruptor;
                                    table.Rows[i + 1].Cells[4].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[5].Paragraphs.First().Append(listaSenializacionPorEvento[i].CodigoAC ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[5].Width = anchoAC;
                                    table.Rows[i + 1].Cells[5].VerticalAlignment = VerticalAlignment.Center;
                                }

                                document.InsertParagraph(string.Empty);
                            }
                            else
                            {
                                Table tablaSeccion9Titulo = document.InsertTable(1, 2);

                                tablaSeccion9Titulo.Design = TableDesign.TableNormal;
                                tablaSeccion9Titulo.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion9Titulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccion9Titulo.Rows[0].Cells[1].Paragraphs.First().Append("No se reportaron.").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion9Titulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;
                                document.InsertParagraph(); 
                            }
                        }
                        else
                        {
                            Table tablaSeccion9Titulo = document.InsertTable(1, 2);

                            tablaSeccion9Titulo.Design = TableDesign.TableNormal;
                            tablaSeccion9Titulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion9Titulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion9Titulo.Rows[0].Cells[1].Paragraphs.First().Append("No se reportaron.").FontSize(11).Font(new FontFamily("Calibri"));
                            tablaSeccion9Titulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;
                            document.InsertParagraph();
                        }
                    }
                }
                #endregion

                #region SECCION 10. CONTADOR DE INTERRUPTORES Y DESCARGADORES DE SOBRETENSIÓN
                Table tablaSeccion10 = document.InsertTable(1, 2);

                tablaSeccion10.Design = TableDesign.TableNormal;
                tablaSeccion10.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion10.Rows[0].Cells[0].Paragraphs.First().Append("10.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion10.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion10.Rows[0].Cells[1].Paragraphs.First().Append("CONTADOR DE INTERRUPTORES Y DESCARGADORES DE SOBRETENSIÓN").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion10.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                List<EveintdescargaDTO> LstInterruptores = obj.lstInterruptoresDescargadores != null ? obj.lstInterruptoresDescargadores.Where(x => x.EVEINTDESTIPO == 1).ToList() : new List<EveintdescargaDTO>();
                List<EveintdescargaDTO> LstDescargadores = obj.lstInterruptoresDescargadores != null ? obj.lstInterruptoresDescargadores.Where(x => x.EVEINTDESTIPO == 2).ToList() : new List<EveintdescargaDTO>();

                if (LstInterruptores.Count == 0 && LstDescargadores.Count == 0)
                {
                    Table tablaSeccion10SinContenidoUno = document.InsertTable(1, 2);

                    tablaSeccion10SinContenidoUno.Design = TableDesign.TableNormal;
                    tablaSeccion10SinContenidoUno.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion10SinContenidoUno.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion10SinContenidoUno.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion10SinContenidoUno.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                }
                else
                {
                    Table tablaSeccion101 = document.InsertTable(1, 2);

                    tablaSeccion101.Design = TableDesign.TableNormal;
                    tablaSeccion101.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion101.Rows[0].Cells[0].Paragraphs.First().Append("10.1").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    tablaSeccion101.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                    tablaSeccion101.Rows[0].Cells[1].Paragraphs.First().Append("CONTADOR DE INTERRUPTORES").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    tablaSeccion101.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();

                    if (LstInterruptores.Count == 0)
                    {
                        Table tablaSeccion10SinContenidoDos = document.InsertTable(1, 2);

                        tablaSeccion10SinContenidoDos.Design = TableDesign.TableNormal;
                        tablaSeccion10SinContenidoDos.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion10SinContenidoDos.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                        tablaSeccion10SinContenidoDos.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                        tablaSeccion10SinContenidoDos.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();
                    }
                    else
                    {
                        foreach (var item in obj.ListaEventosSco)
                        {
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                Table tablaSeccion10TituloUno = document.InsertTable(1, 2);

                                tablaSeccion10TituloUno.Design = TableDesign.TableNormal;
                                tablaSeccion10TituloUno.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion10TituloUno.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                                tablaSeccion10TituloUno.Rows[0].Cells[1].Paragraphs.First().Append($"Evento del {item.EVENINI.Value.ToString("dd.MM.yyyy")} a las {item.EVENINI.Value.ToString("HH:mm:ss")} h:").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                                tablaSeccion10TituloUno.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }

                            var lstInterruptoresPorEvento = LstInterruptores.Where(x => x.EVENCODI == item.EVENCODI).ToList();

                            if (lstInterruptoresPorEvento.Count == 0)
                            {
                                Table tablaSeccion10SinContenidoTres = document.InsertTable(1, 2);

                                tablaSeccion10SinContenidoTres.Design = TableDesign.TableNormal;
                                tablaSeccion10SinContenidoTres.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion10SinContenidoTres.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                                tablaSeccion10SinContenidoTres.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion10SinContenidoTres.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }
                            else
                            {
                                var rows = lstInterruptoresPorEvento.Count + 2;

                                Table tableInterruptor = document.InsertTable(rows, 9);

                                tableInterruptor.Design = TableDesign.TableGrid;

                                for (int i = 0; i < 9; i++)
                                {
                                    VerticalAlignmentCenter(0, i, tableInterruptor);
                                    VerticalAlignmentCenter(1, i, tableInterruptor);
                                    TableFilColor(0, i, tableInterruptor);
                                    TableFilColor(1, i, tableInterruptor);
                                }

                                tableInterruptor.Rows[0].Height = 22;
                                tableInterruptor.Rows[1].Height = 22;

                                tableInterruptor.MergeCellsInColumn(0, 0, 1);
                                tableInterruptor.MergeCellsInColumn(1, 0, 1);
                                tableInterruptor.MergeCellsInColumn(2, 0, 1);

                                tableInterruptor.Rows[0].MergeCells(3, 5);
                                tableInterruptor.Rows[0].MergeCells(4, 6);

                                tableInterruptor.Rows[0].Cells[0].Paragraphs[0].Append("Subestación").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[0].Width = 113.385;

                                tableInterruptor.Rows[0].Cells[1].Paragraphs[0].Append("Celda").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[1].Width = 75.590;

                                tableInterruptor.Rows[0].Cells[2].Paragraphs[0].Append("Código Interruptor").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[2].Width = 90.708;

                                tableInterruptor.Rows[0].Cells[3].Paragraphs[0].Append("Antes").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[3].Width = 158.740;

                                tableInterruptor.Rows[0].Cells[4].Paragraphs[0].Append("Después").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[4].Width = 158.740;

                                tableInterruptor.Rows[1].Cells[3].Paragraphs[0].Append("R").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[3].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[4].Paragraphs[0].Append("S").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[4].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[5].Paragraphs[0].Append("T").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[5].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[6].Paragraphs[0].Append("R").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[6].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[7].Paragraphs[0].Append("S").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[7].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[8].Paragraphs[0].Append("T").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[8].Width = 52.91;

                                int contador = 1;

                                for (int i = 0; i < lstInterruptoresPorEvento.Count; i++)
                                {
                                    for (int k = 0; k <= 8; k++)
                                    {
                                        tableInterruptor.Rows[contador + 1].Cells[k].VerticalAlignment = VerticalAlignment.Center;
                                    }

                                    tableInterruptor.Rows[contador + 1].Cells[0].Width = 113.385;
                                    tableInterruptor.Rows[contador + 1].Cells[1].Width = 75.590;
                                    tableInterruptor.Rows[contador + 1].Cells[2].Width = 90.708;
                                    tableInterruptor.Rows[contador + 1].Cells[3].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[4].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[5].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[6].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[7].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[8].Width = 52.91;

                                    tableInterruptor.Rows[contador + 1].Cells[0].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESSUBESTACION).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[1].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESCELDA).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[2].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESCODIGO).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[3].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESR_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[4].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESS_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[5].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDEST_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[6].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESR_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[7].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESS_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[8].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDEST_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    contador++;
                                }

                                document.InsertParagraph();
                            }
                        }
                    }

                    Table tablaSeccion102 = document.InsertTable(1, 2);

                    tablaSeccion102.Design = TableDesign.TableNormal;
                    tablaSeccion102.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion102.Rows[0].Cells[0].Paragraphs.First().Append("10.2").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    tablaSeccion102.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                    tablaSeccion102.Rows[0].Cells[1].Paragraphs.First().Append("DESCARGADORES DE SOBRETENSIÓN").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    tablaSeccion102.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();

                    if (LstDescargadores.Count == 0)
                    {
                        Table tablaSeccion10SinContenidoCuatro = document.InsertTable(1, 2);

                        tablaSeccion10SinContenidoCuatro.Design = TableDesign.TableNormal;
                        tablaSeccion10SinContenidoCuatro.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion10SinContenidoCuatro.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                        tablaSeccion10SinContenidoCuatro.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                        tablaSeccion10SinContenidoCuatro.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();
                    }
                    else
                    {
                        foreach (var item in obj.ListaEventosSco)
                        {
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                Table tablaSeccion10TituloDos = document.InsertTable(1, 2);

                                tablaSeccion10TituloDos.Design = TableDesign.TableNormal;
                                tablaSeccion10TituloDos.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion10TituloDos.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                                tablaSeccion10TituloDos.Rows[0].Cells[1].Paragraphs.First().Append($"Evento del {item.EVENINI.Value.ToString("dd.MM.yyyy")} a las {item.EVENINI.Value.ToString("HH:mm:ss")} h:").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                                tablaSeccion10TituloDos.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }

                            var lstDescargadoresPorEvento = LstDescargadores.Where(x => x.EVENCODI == item.EVENCODI).ToList();

                            if (lstDescargadoresPorEvento.Count == 0)
                            {
                                Table tablaSeccion10SinContenidoCinco = document.InsertTable(1, 2);

                                tablaSeccion10SinContenidoCinco.Design = TableDesign.TableNormal;
                                tablaSeccion10SinContenidoCinco.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion10SinContenidoCinco.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                                tablaSeccion10SinContenidoCinco.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion10SinContenidoCinco.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }
                            else
                            {
                                var rows = lstDescargadoresPorEvento.Count + 2;

                                Table tableDescargador = document.InsertTable(rows, 9);

                                tableDescargador.Design = TableDesign.TableGrid;

                                for (int i = 0; i < 9; i++)
                                {
                                    VerticalAlignmentCenter(0, i, tableDescargador);
                                    VerticalAlignmentCenter(1, i, tableDescargador);
                                    TableFilColor(0, i, tableDescargador);
                                    TableFilColor(1, i, tableDescargador);
                                }

                                tableDescargador.Rows[0].Height = 22;
                                tableDescargador.Rows[1].Height = 22;

                                tableDescargador.MergeCellsInColumn(0, 0, 1);
                                tableDescargador.MergeCellsInColumn(1, 0, 1);
                                tableDescargador.MergeCellsInColumn(2, 0, 1);

                                tableDescargador.Rows[0].MergeCells(3, 5);
                                tableDescargador.Rows[0].MergeCells(4, 6);

                                tableDescargador.Rows[0].Cells[0].Paragraphs[0].Append("Subestación").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[0].Width = 113.385;

                                tableDescargador.Rows[0].Cells[1].Paragraphs[0].Append("Celda").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[1].Width = 75.590;

                                tableDescargador.Rows[0].Cells[2].Paragraphs[0].Append("Código Pararrayo").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[2].Width = 90.708;

                                tableDescargador.Rows[0].Cells[3].Paragraphs[0].Append("Antes").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[3].Width = 158.740;

                                tableDescargador.Rows[0].Cells[4].Paragraphs[0].Append("Después").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[4].Width = 158.740;

                                tableDescargador.Rows[1].Cells[3].Paragraphs[0].Append("R").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[3].Width = 52.91;

                                tableDescargador.Rows[1].Cells[4].Paragraphs[0].Append("S").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[4].Width = 52.91;

                                tableDescargador.Rows[1].Cells[5].Paragraphs[0].Append("T").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[5].Width = 52.91;

                                tableDescargador.Rows[1].Cells[6].Paragraphs[0].Append("R").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[6].Width = 52.91;

                                tableDescargador.Rows[1].Cells[7].Paragraphs[0].Append("S").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[7].Width = 52.91;

                                tableDescargador.Rows[1].Cells[8].Paragraphs[0].Append("T").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[8].Width = 52.91;

                                int contadorDescarga = 1;

                                for (int i = 0; i < lstDescargadoresPorEvento.Count; i++)
                                {
                                    for (int k = 0; k <= 8; k++)
                                    {
                                        tableDescargador.Rows[contadorDescarga + 1].Cells[k].VerticalAlignment = VerticalAlignment.Center;
                                    }

                                    tableDescargador.Rows[contadorDescarga + 1].Cells[0].Width = 113.385;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[1].Width = 75.590;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[2].Width = 90.708;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[3].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[4].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[5].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[6].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[7].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[8].Width = 52.91;

                                    tableDescargador.Rows[contadorDescarga + 1].Cells[0].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESSUBESTACION).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[1].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESCELDA).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[2].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESCODIGO).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[3].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESR_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[4].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESS_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[5].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDEST_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[6].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESR_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[7].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESS_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[8].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDEST_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    contadorDescarga++;
                                }

                                document.InsertParagraph();
                            }
                        }
                    }
                }

                #endregion

                Action<DocX, string, string> crearTitulos = (documentoX, seccion, descripcion) =>
                {
                    var tablaSeccion = document.InsertTable(1, 2);
                    tablaSeccion.Design = TableDesign.TableNormal;
                    tablaSeccion.AutoFit = AutoFit.ColumnWidth;
                    var tablaSeccionPrimeraFila = tablaSeccion.Rows[0];

                    tablaSeccionPrimeraFila.Cells[0].Paragraphs[0].Append(seccion).FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccionPrimeraFila.Cells[0].Width = 50;

                    tablaSeccionPrimeraFila.Cells[1].Paragraphs[0].Append(descripcion).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                    tablaSeccionPrimeraFila.Cells[1].Width = 570;
                };

                int anchoImagenes = 560;

                #region SECCION 11
                Table tablaSeccion11 = document.InsertTable(1, 2);

                tablaSeccion11.Design = TableDesign.TableNormal;
                tablaSeccion11.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion11.Rows[0].Cells[0].Paragraphs.First().Append("11.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion11.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion11.Rows[0].Cells[1].Paragraphs.First().Append("ANÁLISIS DEL EVENTO").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion11.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    int contadorFigurasAnalisisEvento = 1;
                    int contadorInteracionesEnLista = 0;

                    for (int r = 0; r < obj.ListaInformeCtaf.Count; r++)
                    {
                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            Table tablaSeccion11Titulo = document.InsertTable(1, 2);

                            tablaSeccion11Titulo.Design = TableDesign.TableNormal;
                            tablaSeccion11Titulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion11Titulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion11Titulo.Rows[0].Cells[1].Paragraphs.First().Append(obj.ListaInformeCtaf[r].CabNombreEvento).FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                            tablaSeccion11Titulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }

                        if (!obj.ListaInformeCtaf[r].listaAnalisisEvento.Any())
                        {
                            Table tablaSeccion11SinRegistrosUno = document.InsertTable(1, 2);

                            tablaSeccion11SinRegistrosUno.Design = TableDesign.TableNormal;
                            tablaSeccion11SinRegistrosUno.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion11SinRegistrosUno.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion11SinRegistrosUno.Rows[0].Cells[1].Paragraphs.First().Append("No existen registros.").FontSize(11).Font(new FontFamily("Calibri"));
                            tablaSeccion11SinRegistrosUno.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }
                        else
                        {
                            var listaSinTipoDOs = obj.ListaInformeCtaf[r].listaAnalisisEvento.Where(x => x.EVENUMCODI != 2).ToList();
                            var listaConTipoDos = obj.ListaInformeCtaf[r].listaAnalisisEvento.Where(x => x.EVENUMCODI == 2).ToList();

                            var grupoListasPorTipoNumera = listaSinTipoDOs.GroupBy(x => x.EVETIPNUMDESCRIPCION);

                            foreach (var grupo in grupoListasPorTipoNumera)
                            {
                                Table tablaSeccion11TituloDos = document.InsertTable(1, 2);

                                tablaSeccion11TituloDos.Design = TableDesign.TableNormal;
                                tablaSeccion11TituloDos.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion11TituloDos.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccion11TituloDos.Rows[0].Cells[1].Paragraphs.First().Append(grupo.Key).FontSize(11).Font(new FontFamily("Calibri")).Bold();
                                tablaSeccion11TituloDos.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                                    
                                foreach (var listasPorTipoNumera in grupo)
                                {
                                    crearTitulos(document, $"11.{(contadorInteracionesEnLista + 1)}", listasPorTipoNumera.EVEANAEVEDESCNUMERAL);

                                    document.InsertParagraph();

                                    contadorInteracionesEnLista++;

                                    if (listasPorTipoNumera.EVEANAEVERUTAFIGURA != null)
                                    {
                                        string RutaAnalisis = ConfigurationManager.AppSettings["AnalisiEvento"];
                                        var imgfirma = RutaAnalisis + listasPorTipoNumera.EVEANAEVERUTAFIGURA;

                                        if (System.IO.File.Exists(imgfirma))
                                        {
                                            Table table = document.InsertTable(1, 2);
                                            table.Design = TableDesign.TableNormal;
                                            table.AutoFit = AutoFit.ColumnWidth;

                                            table.Rows[0].Cells[0].Width = 50;

                                            Novacode.Image FirmaDigital = document.AddImage(imgfirma);

                                            var figuraPicture = FirmaDigital.CreatePicture();
                                            int figuraAnchoDefecto = figuraPicture.Width;
                                            int figuraAltoDefecto = figuraPicture.Height;

                                            if (figuraAnchoDefecto > anchoImagenes)
                                            {
                                                figuraPicture.Width = anchoImagenes;
                                                figuraPicture.Height = (figuraAltoDefecto * anchoImagenes) / figuraAnchoDefecto;
                                            }

                                            table.Rows[0].Cells[1].Width = 570;
                                            table.Rows[0].Cells[1].Paragraphs.First().AppendPicture(figuraPicture);
                                            table.Rows[0].Cells[1].Paragraphs.First().Alignment = Alignment.center;

                                            var paragraphFigura = table.Rows[0].Cells[1].InsertParagraph($"Figura {contadorFigurasAnalisisEvento}: ").FontSize(9).Font(new FontFamily("Calibri")).Bold();
                                            paragraphFigura.Append(listasPorTipoNumera.EVEANAEVEDESCFIGURA).FontSize(9).Font(new FontFamily("Calibri"));
                                            paragraphFigura.Alignment = Alignment.center;
                                            document.InsertParagraph();
                                            contadorFigurasAnalisisEvento++;
                                        }
                                    }
                                }
                            }

                            if (listaConTipoDos.Any())
                            {
                                Table tablaSeccion11TituloTres = document.InsertTable(1, 2);

                                tablaSeccion11TituloTres.Design = TableDesign.TableNormal;
                                tablaSeccion11TituloTres.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion11TituloTres.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                                tablaSeccion11TituloTres.Rows[0].Cells[1].Paragraphs.First().Append("Maniobras de restablecimiento").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                                tablaSeccion11TituloTres.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                foreach (var itemConTipoDos in listaConTipoDos)
                                {
                                    crearTitulos(document, $"11.{(contadorInteracionesEnLista + 1)}", itemConTipoDos.EVEANAEVEDESCNUMERAL);

                                    document.InsertParagraph();

                                    contadorInteracionesEnLista++;

                                    if (itemConTipoDos.EVEANAEVERUTAFIGURA != null)
                                    {
                                        string RutaAnalisis = ConfigurationManager.AppSettings["AnalisiEvento"];
                                        var imgfirma = RutaAnalisis + itemConTipoDos.EVEANAEVERUTAFIGURA;

                                        if (System.IO.File.Exists(imgfirma))
                                        {
                                            Table table = document.InsertTable(1, 2);
                                            table.Design = TableDesign.TableNormal;
                                            table.AutoFit = AutoFit.ColumnWidth;

                                            table.Rows[0].Cells[0].Width = 50;

                                            Novacode.Image FirmaDigital = document.AddImage(imgfirma);

                                            var figuraPicture = FirmaDigital.CreatePicture();
                                            int figuraAnchoDefecto = figuraPicture.Width;
                                            int figuraAltoDefecto = figuraPicture.Height;

                                            if (figuraAnchoDefecto > anchoImagenes)
                                            {
                                                figuraPicture.Width = anchoImagenes;
                                                figuraPicture.Height = (figuraAltoDefecto * anchoImagenes) / figuraAnchoDefecto;
                                            }

                                            table.Rows[0].Cells[1].Width = 570;
                                            table.Rows[0].Cells[1].Paragraphs.First().AppendPicture(figuraPicture);
                                            table.Rows[0].Cells[1].Paragraphs.First().Alignment = Alignment.center;

                                            var paragraphFigura = table.Rows[0].Cells[1].InsertParagraph($"Figura {contadorFigurasAnalisisEvento}: ").FontSize(9).Font(new FontFamily("Calibri")).Bold();
                                            paragraphFigura.Append(itemConTipoDos.EVEANAEVEDESCFIGURA).FontSize(9).Font(new FontFamily("Calibri"));
                                            paragraphFigura.Alignment = Alignment.center;
                                            contadorFigurasAnalisisEvento++;
                                            document.InsertParagraph();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                #endregion

                #region Seccion 12
                Table tablaSeccion12 = document.InsertTable(1, 2);

                tablaSeccion12.Design = TableDesign.TableNormal;
                tablaSeccion12.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion12.Rows[0].Cells[0].Paragraphs.First().Append("12.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion12.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion12.Rows[0].Cells[1].Paragraphs.First().Append("CONSECUENCIAS").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion12.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion121 = document.InsertTable(1, 2);

                tablaSeccion121.Design = TableDesign.TableNormal;
                tablaSeccion121.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion121.Rows[0].Cells[0].Paragraphs.First().Append("12.1").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion121.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                tablaSeccion121.Rows[0].Cells[1].Paragraphs.First().Append("En la calidad del Producto: ").FontSize(11).Font(new FontFamily("Calibri")).Bold().Append("No hubo trasgresiones a la calidad del producto.").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                tablaSeccion121.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion122 = document.InsertTable(1, 2);

                tablaSeccion122.Design = TableDesign.TableNormal;
                tablaSeccion122.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion122.Rows[0].Cells[0].Paragraphs.First().Append("12.2").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion122.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                tablaSeccion122.Rows[0].Cells[1].Paragraphs.First().Append("En la calidad del suministro: ").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                tablaSeccion122.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                int _nroReporte = 1;
                
                if(tablaReporteTotalesEacmf.ListaRegistros.Count == 0 && tablaReporteTotales.ListaRegistros.Count == 0)
                {
                    Table tablaSeccion122SinRegistro = document.InsertTable(1, 2);

                    tablaSeccion122SinRegistro.Design = TableDesign.TableNormal;
                    tablaSeccion122SinRegistro.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion122SinRegistro.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                    tablaSeccion122SinRegistro.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion122SinRegistro.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                }
                else
                {
                    if (tablaReporteTotalesEacmf.ListaRegistros.Count > 0)
                    {
                        Table tablaSeccion12Dinamico = document.InsertTable(1, 2);

                        tablaSeccion12Dinamico.Design = TableDesign.TableNormal;
                        tablaSeccion12Dinamico.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion12Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("12.2." + _nroReporte.ToString()).FontSize(11).Font(new FontFamily("Calibri"));
                        tablaSeccion12Dinamico.Rows[0].Cells[0].Width = 60;

                        tablaSeccion12Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Las interrupciones de suministro que se produjeron por activación del ERACMF fueron las siguientes:").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                        tablaSeccion12Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();

                        List<RegistroReporte> registrosparteEracmf = new List<RegistroReporte>();
                        TablaReporte TablaEracmf = new TablaReporte();

                        FontFamily fontDoc = new FontFamily(tablaReporteTotalesEacmf.TipoFuente);
                        List<RegistroReporte> registrosTotalesEracmf = tablaReporteTotalesEacmf.ListaRegistros;
                        int numFilas;
                        int numColumnas;
                        Table secuencia_0;

                        var codigosEventos = tablaReporteTotalesEacmf.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                        foreach (var item in codigosEventos)
                        {
                            registrosparteEracmf = registrosTotalesEracmf.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                            if(codigosEventos.Count > 1)
                            {
                                servAF.AddSubtituloReporte2(document.InsertParagraph(), registrosparteEracmf[0].Nombre, fontDoc);
                            }
                            else
                            {
                                document.InsertParagraph();
                            }

                            TablaEracmf = tablaReporteTotalesEacmf;
                            TablaEracmf.ListaRegistros = registrosparteEracmf;
                            numFilas = registrosparteEracmf.Count;
                            numColumnas = tablaReporteTotalesEacmf.CabeceraColumnas.Count;
                            secuencia_0 = document.InsertTable(numFilas + 1, numColumnas);

                            servAF.GenerarRptWord(ref secuencia_0, tablaReporteTotalesEacmf, 1, fdatcodiEracmf);
                            document.InsertParagraph();
                        }

                        _nroReporte++;
                    }

                    if (tablaReporteTotales.ListaRegistros.Count > 0)
                    {
                        Table tablaSeccion12Dinamico = document.InsertTable(1, 2);

                        tablaSeccion12Dinamico.Design = TableDesign.TableNormal;
                        tablaSeccion12Dinamico.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion12Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("12.2." + _nroReporte.ToString()).FontSize(11).Font(new FontFamily("Calibri"));
                        tablaSeccion12Dinamico.Rows[0].Cells[0].Width = 60;

                        tablaSeccion12Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Las Interrupciones de suministro que se produjeron fueron las siguientes:").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                        tablaSeccion12Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();

                        List<RegistroReporte> registros = new List<RegistroReporte>();
                        TablaReporte Tabla = new TablaReporte();

                        FontFamily fontDoc = new FontFamily(tablaReporteTotales.TipoFuente);
                        List<RegistroReporte> registrosTotales = tablaReporteTotales.ListaRegistros;
                        int numFilas;
                        int numColumnas;
                        Table secuencia_0;

                        var codigosEventos = tablaReporteTotales.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                        foreach (var item in codigosEventos)
                        {
                            registros = registrosTotales.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                            if(codigosEventos.Count > 1)
                            {
                                servAF.AddSubtituloReporte2(document.InsertParagraph(), registros[0].Nombre, fontDoc);
                            }

                            Tabla = tablaReporteTotales;
                            Tabla.ListaRegistros = registros;
                            numFilas = registros.Count;
                            numColumnas = tablaReporteTotales.CabeceraColumnas.Count;
                            secuencia_0 = document.InsertTable(numFilas + 1, numColumnas);

                            servAF.GenerarRptWord(ref secuencia_0, tablaReporteTotales, 12, fdatcodiTotal);
                            document.InsertParagraph();
                        }
                    }
                }

                if (tablaReduccion.ListaRegistros.Count > 0)
                {
                    Table tablaSeccion123 = document.InsertTable(1, 2);

                    tablaSeccion123.Design = TableDesign.TableNormal;
                    tablaSeccion123.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion123.Rows[0].Cells[0].Paragraphs.First().Append("12.3").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion123.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                    tablaSeccion123.Rows[0].Cells[1].Paragraphs.First().Append("Reducción de carga:").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                    tablaSeccion123.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();

                    var parrafoSeccionOpinionUno = document.InsertParagraph("En estos casos no se interrumpe el suministro eléctrico en el punto de entrega; por lo tanto, de acuerdo con lo establecido en el numeral 6.1.2  de la NTCSE, no representan transgresiones a la calidad de suministro.\r\n").FontSize(11).Font(new FontFamily("Calibri"));
                    parrafoSeccionOpinionUno.Alignment = Alignment.both;

                    Table tablaSeccion1231 = document.InsertTable(1, 2);

                    tablaSeccion1231.Design = TableDesign.TableNormal;
                    tablaSeccion1231.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion1231.Rows[0].Cells[0].Paragraphs.First().Append("12.3.1").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion1231.Rows[0].Cells[0].Width = 60;

                    tablaSeccion1231.Rows[0].Cells[1].Paragraphs.First().Append("Las Reducciones de carga que se produjeron fueron las siguientes:").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                    tablaSeccion1231.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    int numFilasReducciones;
                    int numColumnasReducciones;
                    FontFamily fontDocReducciones = new FontFamily(tablaReduccion.TipoFuente);

                    List<RegistroReporte> registrosReducciones = new List<RegistroReporte>();
                    List<RegistroReporte> registrosTotalesReducciones = new List<RegistroReporte>();
                    TablaReporte TablaReducciones = new TablaReporte();
                    var codigosEventosReducciones = tablaReduccion.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();
                    registrosTotalesReducciones = tablaReduccion.ListaRegistros;

                    foreach (var item in codigosEventosReducciones)
                    {
                        registrosReducciones = registrosTotalesReducciones.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();
                        
                        if (codigosEventosReducciones.Count > 1)
                        {
                            document.InsertParagraph();
                            servAF.AddSubtituloReporte2(document.InsertParagraph(), registrosReducciones[0].Nombre, fontDocReducciones);
                        }
                        else
                        {
                            document.InsertParagraph();
                        }

                        TablaReducciones = tablaReduccion;
                        TablaReducciones.ListaRegistros = registrosReducciones;
                        numFilasReducciones = registrosReducciones.Count;
                        numColumnasReducciones = tablaReduccion.CabeceraColumnas.Count;
                        Table secuencia_0Reduccion = document.InsertTable(numFilasReducciones + 1, numColumnasReducciones);
                        servAF.GenerarRptWord(ref secuencia_0Reduccion, tablaReduccion, 16, fdatcodiReduccion);
                        document.InsertParagraph();
                    }
                }
                #endregion

                #region Seccion 13
                Table tablaSeccion13 = document.InsertTable(1, 2);

                tablaSeccion13.Design = TableDesign.TableNormal;
                tablaSeccion13.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion13.Rows[0].Cells[0].Paragraphs.First().Append("13.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion13.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion13.Rows[0].Cells[1].Paragraphs.First().Append("OBSERVACIONES").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                tablaSeccion13.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaObservaciones != null && obj.ListaObservaciones.Count > 0)
                {
                    var idsEmpresas = obj.ListaObservaciones.Select(y => new { y.EMPRCODI }).Distinct().ToList();
                    int contador = 0;

                    foreach (var item in idsEmpresas)
                    {
                        bool band = false;

                        for (int x = 0; x < obj.ListaObservaciones.Count; x++)
                        {
                            if (item.EMPRCODI == obj.ListaObservaciones[x].EMPRCODI)
                            {
                                if (!band)
                                {
                                    int num_ = contador + 1;

                                    Table tablaSeccion13Dinamico = document.InsertTable(1, 2);

                                    tablaSeccion13Dinamico.Design = TableDesign.TableNormal;
                                    tablaSeccion13Dinamico.AutoFit = AutoFit.ColumnWidth;

                                    tablaSeccion13Dinamico.Rows[0].Cells[0].Paragraphs.First().Append($"13.{num_}").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                                    tablaSeccion13Dinamico.Rows[0].Cells[0].Width = 50;

                                    tablaSeccion13Dinamico.Rows[0].Cells[1].Paragraphs.First().Append(obj.ListaObservaciones[x].EMPRNOMB).FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                                    tablaSeccion13Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                    document.InsertParagraph();

                                    contador++;
                                    band = true;
                                }

                                var tablaSeccionObservacion = document.InsertTable(1, 3);

                                tablaSeccionObservacion.Design = TableDesign.TableNormal;
                                tablaSeccionObservacion.AutoFit = AutoFit.ColumnWidth;

                                var tablaSeccionObservacionPrimeraFila = tablaSeccionObservacion.Rows[0];

                                tablaSeccionObservacionPrimeraFila.Cells[0].Width = 50;

                                tablaSeccionObservacionPrimeraFila.Cells[1].Paragraphs[0].Append("•").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccionObservacionPrimeraFila.Cells[1].Width = 23;

                                tablaSeccionObservacionPrimeraFila.Cells[2].Paragraphs[0].Append(obj.ListaObservaciones[x].EVERECOMOBSERVDESC).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                                tablaSeccionObservacionPrimeraFila.Cells[2].Width = 570;

                                document.InsertParagraph();
                            }
                        }
                    }
                }
                else
                {
                    Table tablaSeccion13Ninguna = document.InsertTable(1, 2);

                    tablaSeccion13Ninguna.Design = TableDesign.TableNormal;
                    tablaSeccion13Ninguna.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion13Ninguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion13Ninguna.Rows[0].Cells[1].Paragraphs.First().Append("Ninguna.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion13Ninguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();                        
                }

                #endregion

                #region Seccion 14
                Table tablaSeccion14 = document.InsertTable(1, 2);

                tablaSeccion14.Design = TableDesign.TableNormal;
                tablaSeccion14.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion14.Rows[0].Cells[0].Paragraphs.First().Append("14.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion14.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion14.Rows[0].Cells[1].Paragraphs.First().Append("RECOMENDACIONES:").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                tablaSeccion14.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaEveRecomobserv == null)
                {
                    Table tablaSeccion14Ninguna = document.InsertTable(1, 2);

                    tablaSeccion14Ninguna.Design = TableDesign.TableNormal;
                    tablaSeccion14Ninguna.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion14Ninguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion14Ninguna.Rows[0].Cells[1].Paragraphs.First().Append("Ninguna.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion14Ninguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                        
                }
                else if (obj.ListaEveRecomobserv.Count == 0)
                {
                    Table tablaSeccion14Ninguna = document.InsertTable(1, 2);

                    tablaSeccion14Ninguna.Design = TableDesign.TableNormal;
                    tablaSeccion14Ninguna.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion14Ninguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion14Ninguna.Rows[0].Cells[1].Paragraphs.First().Append("Ninguna.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion14Ninguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                } 
                else if (obj.ListaEveRecomobserv.Count > 0)
                {
                    int contadorRec = 0;

                    var idsEmpresasRec = obj.ListaEveRecomobserv.Select(y => new { y.EMPRCODI }).Distinct().ToList();

                    foreach (var item in idsEmpresasRec)
                    {
                        bool band = false;

                        for (int x = 0; x < obj.ListaEveRecomobserv.Count; x++)
                        {
                            if (item.EMPRCODI == obj.ListaEveRecomobserv[x].EMPRCODI)
                            {
                                if (!band)
                                {
                                    int num = contadorRec + 1;

                                    Table tablaSeccion14Dinamico = document.InsertTable(1, 2);

                                    tablaSeccion14Dinamico.Design = TableDesign.TableNormal;
                                    tablaSeccion14Dinamico.AutoFit = AutoFit.ColumnWidth;

                                    tablaSeccion14Dinamico.Rows[0].Cells[0].Paragraphs.First().Append($"14.{num}").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                                    tablaSeccion14Dinamico.Rows[0].Cells[0].Width = 50;

                                    tablaSeccion14Dinamico.Rows[0].Cells[1].Paragraphs.First().Append($"CTAF A {obj.ListaEveRecomobserv[x].EMPRNOMB.TrimStart().TrimEnd()}").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                                    tablaSeccion14Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                    document.InsertParagraph();

                                    contadorRec++;
                                    band = true;
                                }

                                var tablaSeccionRecomendaciones = document.InsertTable(1, 3);

                                tablaSeccionRecomendaciones.Design = TableDesign.TableNormal;
                                tablaSeccionRecomendaciones.AutoFit = AutoFit.ColumnWidth;

                                var tablaSeccionRecomendacionesPrimeraFila = tablaSeccionRecomendaciones.Rows[0];

                                tablaSeccionRecomendacionesPrimeraFila.Cells[0].Width = 50;

                                tablaSeccionRecomendacionesPrimeraFila.Cells[1].Paragraphs[0].Append("•").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccionRecomendacionesPrimeraFila.Cells[1].Width = 23;

                                tablaSeccionRecomendacionesPrimeraFila.Cells[2].Paragraphs[0].Append($"{obj.ListaEveRecomobserv[x].EVERECOMOBSERVDESC}").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                                tablaSeccionRecomendacionesPrimeraFila.Cells[2].Width = 570;

                                document.InsertParagraph();
                            }
                        }
                    }

                }
                #endregion

                #region Seccion Anexo
                var parrafoSeccionAnexo = document.InsertParagraph("ANEXO 1\r\n").FontSize(16).Font(new FontFamily("Calibri")).Bold();
                parrafoSeccionAnexo.Alignment = Alignment.center;

                var parrafoSecuenciaCronologica = document.InsertParagraph("Secuencia Cronológica de Eventos\r\n").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                parrafoSecuenciaCronologica.Alignment = Alignment.center;

                if (obj.ListaInformeCtaf == null)
                {
                    Table tablaSeccionAnexoNinguna = document.InsertTable(1, 2);

                    tablaSeccionAnexoNinguna.Design = TableDesign.TableNormal;
                    tablaSeccionAnexoNinguna.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccionAnexoNinguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccionAnexoNinguna.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").Font(new FontFamily("Calibri")).FontSize(11);
                    tablaSeccionAnexoNinguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                }
                else
                {
                    if (obj.ListaInformeCtaf.Count == 0)
                    {
                        Table tablaSeccionAnexoNinguna = document.InsertTable(1, 2);

                        tablaSeccionAnexoNinguna.Design = TableDesign.TableNormal;
                        tablaSeccionAnexoNinguna.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccionAnexoNinguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                        tablaSeccionAnexoNinguna.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").Font(new FontFamily("Calibri")).FontSize(11);
                        tablaSeccionAnexoNinguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();
                    }
                    else
                    {
                        foreach (var itemSecuenciaEvento in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                        {
                            if (obj.ListaInformeCtaf.Count > 1)
                            {
                                var parrafoValorEvento = document.InsertParagraph(itemSecuenciaEvento.CabNombreEvento + "\r\n").FontSize(11).Font(new FontFamily("Calibri")).UnderlineStyle(UnderlineStyle.singleLine).Bold();
                                parrafoValorEvento.Alignment = Alignment.center;
                            }

                            if (itemSecuenciaEvento.listaSecuenciaEvento.Count == 0)
                            {
                                Table tablaSeccionAnexoNinguna = document.InsertTable(1, 2);

                                tablaSeccionAnexoNinguna.Design = TableDesign.TableNormal;
                                tablaSeccionAnexoNinguna.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccionAnexoNinguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccionAnexoNinguna.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").Font(new FontFamily("Calibri")).FontSize(11);
                                tablaSeccionAnexoNinguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }
                            else
                            {
                                List<DateTime> _fecha = null;
                                List<string> fechas = null;
                                if (itemSecuenciaEvento.listaSecuenciaEvento[0].EVESFECHA != "")
                                {
                                    _fecha = itemSecuenciaEvento.listaSecuenciaEvento.Select(x => DateTime.ParseExact(x.EVESFECHA, Constantes.FormatoFecha, CultureInfo.InvariantCulture)).Distinct().ToList();
                                }
                                if(_fecha != null)
                                    fechas = _fecha.OrderBy(m=>m).Select(y => y.ToString("dd/MM/yyyy")).ToList();
                                int _rows = 0;
                                if (fechas != null && fechas.Count > 1)
                                    _rows = fechas.Count;

                                var rows = itemSecuenciaEvento.listaSecuenciaEvento.Count + _rows + 1;

                                Table tablaSecuenciaEventos = document.AddTable(rows, 3);
                                tablaSecuenciaEventos.Design = TableDesign.TableGrid;
                                tablaSecuenciaEventos.Alignment = Alignment.center;
                                tablaSecuenciaEventos.AutoFit = AutoFit.ColumnWidth;

                                for (int i = 0; i < 3; i++)
                                {
                                    VerticalAlignmentCenter(0, i, tablaSecuenciaEventos);
                                    TableFilColor(0, i, tablaSecuenciaEventos);
                                }

                                tablaSecuenciaEventos.Rows[0].Cells[0].Paragraphs[0].Append("Hora").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tablaSecuenciaEventos.Rows[0].Cells[1].Paragraphs[0].Append("S.E. / C.C.").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tablaSecuenciaEventos.Rows[0].Cells[2].Paragraphs[0].Append("Descripción").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;

                                tablaSecuenciaEventos.Rows[0].Cells[0].Width = 94.488;
                                tablaSecuenciaEventos.Rows[0].Cells[1].Width = 102.047;
                                tablaSecuenciaEventos.Rows[0].Cells[2].Width = 362.834;

                                if (fechas != null && fechas.Count > 1)
                                {
                                    int row = 1;
                                    string fechaevalueada = string.Empty;
                                    foreach (string FechSec in fechas)
                                    {
                                        if(FechSec != fechaevalueada)
                                        {                                            
                                            for (int i = 0; i < 3; i++)
                                            {
                                                VerticalAlignmentCenter(row, i, tablaSecuenciaEventos);
                                                TableFilColor(row, i, tablaSecuenciaEventos);
                                            }
                                            fechaevalueada = FechSec;

                                            //row++;
                                            tablaSecuenciaEventos.Rows[row].MergeCells(0, 2);
                                            tablaSecuenciaEventos.Rows[row].Cells[0].Paragraphs[0].Append(FechSec.Replace("/", ".")).FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                            tablaSecuenciaEventos.Rows[row].Cells[0].Paragraphs.Last().Remove(false);
                                            tablaSecuenciaEventos.Rows[row].Cells[0].Paragraphs.Last().Remove(false);
                                        }
                                        int aux = 0;
                                        for (int i = 0; i < itemSecuenciaEvento.listaSecuenciaEvento.Count; i++)
                                        {
                                            if (FechSec == itemSecuenciaEvento.listaSecuenciaEvento[i].EVESFECHA)
                                            {
                                                if (aux > row)
                                                    row = aux;

                                                VerticalAlignmentCenter(row + 1, 0, tablaSecuenciaEventos);
                                                VerticalAlignmentCenter(row + 1, 1, tablaSecuenciaEventos);
                                                VerticalAlignmentCenter(row + 1, 2, tablaSecuenciaEventos);

                                                string fecha_ = string.Empty;
                                                int valorms = 0;
                                                if (itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Length > 8)
                                                {
                                                    valorms = Convert.ToInt32(itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(9, 3));
                                                    if (valorms > 0)
                                                        fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;
                                                    else
                                                        fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(0, 8);
                                                }
                                                else
                                                    fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;

                                                tablaSecuenciaEventos.Rows[row + 1].Cells[0].Paragraphs[0].Append(fecha_).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                                tablaSecuenciaEventos.Rows[row + 1].Cells[1].Paragraphs[0].Append(itemSecuenciaEvento.listaSecuenciaEvento[i].D1.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                                tablaSecuenciaEventos.Rows[row + 1].Cells[2].Paragraphs[0].Append(itemSecuenciaEvento.listaSecuenciaEvento[i].SEDESCRIP.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;

                                                tablaSecuenciaEventos.Rows[row + 1].Cells[0].Width = 94.488;
                                                tablaSecuenciaEventos.Rows[row + 1].Cells[1].Width = 102.047;
                                                tablaSecuenciaEventos.Rows[row + 1].Cells[2].Width = 362.834;
                                                
                                                aux = row + 1;
                                            }
                                        }
                                        row = aux + 1;
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < itemSecuenciaEvento.listaSecuenciaEvento.Count; i++)
                                    {
                                        VerticalAlignmentCenter(i + 1, 0, tablaSecuenciaEventos);
                                        VerticalAlignmentCenter(i + 1, 1, tablaSecuenciaEventos);
                                        VerticalAlignmentCenter(i + 1, 2, tablaSecuenciaEventos);

                                        string fecha_ = string.Empty;
                                        int valorms = 0;

                                        if(itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Length > 8)
                                        {
                                            valorms = Convert.ToInt32(itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(9, 3));
                                            if (valorms > 0)
                                                fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;
                                            else
                                                fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(0, 8);
                                        }
                                        else
                                            fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;

                                        tablaSecuenciaEventos.Rows[i + 1].Cells[0].Paragraphs[0].Append(fecha_).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tablaSecuenciaEventos.Rows[i + 1].Cells[1].Paragraphs[0].Append(itemSecuenciaEvento.listaSecuenciaEvento[i].D1.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tablaSecuenciaEventos.Rows[i + 1].Cells[2].Paragraphs[0].Append(itemSecuenciaEvento.listaSecuenciaEvento[i].SEDESCRIP.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;

                                        tablaSecuenciaEventos.Rows[i + 1].Cells[0].Width = 94.488;
                                        tablaSecuenciaEventos.Rows[i + 1].Cells[1].Width = 102.047;
                                        tablaSecuenciaEventos.Rows[i + 1].Cells[2].Width = 362.834;
                                    }
                                }

                                document.InsertTable(tablaSecuenciaEventos);
                                document.InsertParagraph();
                            }

                        }
                    }
                }
                #endregion

                MemoryStream ms = new MemoryStream();
                document.SaveAs(ms);
                bytes = ms.GetBuffer();
                ms.Dispose();
                ms.Close();

                FileServer.CreateFolder(null, null, fileword);
                document.SaveAs(fileword + fileReporte);
                document.Dispose();
            }

            return bytes;

        }

        private static void TableMarginBottom(int i, int j, Table table, int valor)
        {
            table.Rows[i].Cells[j].MarginBottom = valor;
        }

        private static void TableFilColor(int i, int j, Table table)
        {
            table.Rows[i].Cells[j].FillColor = Color.LightGray;
        }

        private static void VerticalAlignmentCenter(int i, int j, Table table)
        {
            table.Rows[i].Cells[j].VerticalAlignment = VerticalAlignment.Center;
        }

        public byte[] GenerarActaCTAF(Models.AnalisisFallasModel obj, string fileserver, string rutaSev, string filename)
        {
            bool presencial = false;
            
            if (obj.LstEvento.Count > 0)
            {
                if (obj.LstEvento[0].EVENTIPOFALLA == "P")
                {
                    presencial = true;
                }
                else
                {
                    presencial = false;
                }
            }

            byte[] bytes = new byte[0];

            using (DocX document = DocX.Create(filename))
            {
                document.AddHeaders();
                document.AddFooters();

                var logoServer = Server.MapPath("~/Content/Images/logo2024.png");
                Novacode.Image logo = document.AddImage(logoServer);
                var logoPictureCOES = logo.CreatePicture();
                logoPictureCOES.Width = 83;
                logoPictureCOES.Height = 87;

                document.MarginTop = 94.8818898F;
                document.MarginRight = 94.8818898F;
                document.MarginBottom = 94.8818898F;
                document.MarginLeft = 113.385F;

                document.DifferentFirstPage = false;
                document.DifferentOddAndEvenPages = false;

                #region HEADER
                Header header_first = document.Headers.odd;

                Table header_first_table = header_first.InsertTable(1, 2);
                header_first_table.Design = TableDesign.TableNormal;
                header_first_table.AutoFit = AutoFit.ColumnWidth;

                Paragraph upperRightParagraph = header_first.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                upperRightParagraph.AppendPicture(logoPictureCOES);
                upperRightParagraph.Alignment = Alignment.left;

                header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                header_first_table.Rows[0].Cells[0].Width = 380;

                header_first_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                header_first_table.Rows[0].Cells[1].Width = 200;

                Paragraph cabecera = header_first.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                cabecera = header_first.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                cabecera.Append(string.Format("COMITÉ TÉCNICO\n DE ANÁLISIS DE FALLAS \n AÑO {0} \n\n Fecha: {1} ", DateTime.Now.Year.ToString(), DateTime.Now.Date.ToString("dd/MM/yyyy"))).FontSize(10).Bold().Font(new FontFamily("Calibri"));
                cabecera.Alignment = Alignment.center;

                header_first.InsertParagraph("_____________________________________________________________________________________________________________________________________________________________________________").Font(new FontFamily("Bookman Old Style")).FontSize(5);
                header_first.InsertParagraph(" ").Font(new FontFamily("Bookman Old Style")).FontSize(10);
                #endregion

                #region FOOTER
                Footer footer = document.Footers.odd;

                Table footer_table = footer.InsertTable(1, 2);
                footer_table.Design = TableDesign.TableNormal;
                footer_table.AutoFit = AutoFit.ColumnWidth;

                footer_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                footer_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                footer_table.Rows[0].Cells[0].Width = 380;

                footer_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.right;
                footer_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                footer_table.Rows[0].Cells[1].Width = 200;

                Paragraph codigo_acta = footer.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                codigo_acta.Append(string.Format("ACTA N°{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO)).FontSize(10).Font(new FontFamily("Calibri")).Italic().Bold();

                Paragraph numero_pagina = footer.Tables[0].Rows[0].Cells[1].Paragraphs[0].Italic().Bold();
                numero_pagina.Append("Página ").FontSize(10).Font(new FontFamily("Calibri")).Italic().Bold();
                numero_pagina.AppendPageNumber(PageNumberFormat.normal);
                numero_pagina.Append(" de ").FontSize(10).Font(new FontFamily("Calibri")).Italic().Bold();
                numero_pagina.AppendPageCount(PageNumberFormat.normal);
                #endregion

                #region Título
                document.InsertParagraph("ACTA  COES - CTAF\n\n" + $"(N°  {obj.oAnalisisFallaDTO.AFECORR:D3}- {obj.oAnalisisFallaDTO.AFEANIO})").Font(new FontFamily("Calibri")).FontSize(14).Bold().Alignment = Alignment.center;
                document.InsertParagraph("_______________________________________________________________________________\n");
                #endregion

                document.InsertParagraph();

                #region ASUNTO
                Table tableAsunto = document.InsertTable(1, 3);

                tableAsunto.Design = TableDesign.TableNormal;
                tableAsunto.AutoFit = AutoFit.ColumnWidth;

                tableAsunto.Rows[0].Cells[0].InsertParagraph("ASUNTO").Font(new FontFamily("Calibri")).FontSize(11).Bold();
                tableAsunto.Rows[0].Cells[0].Width = 90;
                tableAsunto.Rows[0].Cells[1].InsertParagraph(":").Font(new FontFamily("Calibri")).FontSize(11).Bold();
                tableAsunto.Rows[0].Cells[1].Width = 30;
                tableAsunto.Rows[0].Cells[2].InsertParagraph(obj.oEventoDTO.EVENASUNTO).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                tableAsunto.Rows[0].Cells[2].Width = 470;
                #endregion

                document.InsertParagraph();

                document.InsertParagraph("PARTICIPANTES:").Font(new FontFamily("Calibri")).FontSize(11);

                document.InsertParagraph();
                document.InsertParagraph();

                if (obj.LstEvento.Any())
                {
                    int rows = obj.lsReunionResponsable.Count + 1;

                    #region PARTICIPANTES
                    Table table = document.InsertTable(rows, 3);
                    table.Design = TableDesign.TableGrid;
                    table.AutoFit = AutoFit.ColumnWidth;

                    table.Rows[0].Cells[0].Width = 151;
                    table.Rows[0].Cells[1].Width = 227;
                    table.Rows[0].Cells[2].Width = 215;

                    table.Rows[0].Cells[0].MarginBottom = 10;
                    table.Rows[0].Cells[1].MarginBottom = 10;
                    table.Rows[0].Cells[2].MarginBottom = 10;

                    table.Rows[0].Cells[0].FillColor = Color.LightGray;
                    table.Rows[0].Cells[1].FillColor = Color.LightGray;
                    table.Rows[0].Cells[2].FillColor = Color.LightGray;

                    table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.center;
                    table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                    table.Rows[0].Cells[2].Paragraphs[0].Alignment = Alignment.center;

                    table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    table.Rows[0].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                    table.Rows[0].Cells[0].Paragraphs[0].Append("EMPRESA").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    table.Rows[0].Cells[1].Paragraphs[0].Append("REPRESENTANTES").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    table.Rows[0].Cells[2].Paragraphs[0].Append("FIRMAS").FontSize(11).Font(new FontFamily("Calibri")).Bold();

                    for (int i = 0; i < obj.lsReunionResponsable.Count; i++)
                    {
                        table.Rows[i + 1].Cells[0].Paragraphs[0].Alignment = Alignment.center;
                        table.Rows[i + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                        table.Rows[i + 1].Cells[0].Paragraphs[0].Append(obj.lsReunionResponsable[i].EMPRNOMB.ToString()).FontSize(11).Font(new FontFamily("Calibri"));

                        table.Rows[i + 1].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                        table.Rows[i + 1].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                        table.Rows[i + 1].Cells[1].Paragraphs[0].Append(obj.lsReunionResponsable[i].RESPNAME.ToString()).FontSize(11).Font(new FontFamily("Calibri"));

                        table.Rows[i + 1].Cells[2].Paragraphs[0].Alignment = Alignment.center;
                        table.Rows[i + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                        var firmas = obj.lsReunionResponsable[i].REPRUTAFIRMA.Split('|');

                        string RutaArchivosFirma = ConfigurationManager.AppSettings["CarpetaDeFirmas"];

                        for (int x = 0; x < firmas.Length - 1; x++)
                        {
                            if (firmas[x] != "")
                            {
                                var imgfirma = RutaArchivosFirma + firmas[x];
                                if (System.IO.File.Exists(imgfirma))
                                {
                                    int alturaPt = (int)Math.Round(56.693);
                                    Novacode.Picture FirmaDigital = document.AddImage(imgfirma).CreatePicture();
                                    FirmaDigital.Height = alturaPt;
                                    FirmaDigital.Width = alturaPt;
                                    table.Rows[i + 1].Cells[2].Paragraphs[0].Append("\n");
                                    table.Rows[i + 1].Cells[2].Paragraphs[0].AppendPicture(FirmaDigital);
                                    table.Rows[i + 1].Cells[2].Paragraphs[0].Append("\n");
                                }
                            }
                        }

                    }

                    document.InsertParagraph();
                    #endregion

                    #region DESARROLLO DE LA REUNION
                    var tablaDesarrolloReunion = document.InsertTable(3, 2);

                    int anchoSecciones = 40;
                    double anchoSeccionesContenido = 565;
                
                    tablaDesarrolloReunion.Design = TableDesign.TableNormal;
                    tablaDesarrolloReunion.AutoFit = AutoFit.ColumnWidth;

                    var tablaDesarrolloReunionItemUno = tablaDesarrolloReunion.Rows[0].Cells[0].Paragraphs.First();
                    tablaDesarrolloReunionItemUno.Append("1.").Font(new FontFamily("Calibri")).FontSize(11).Bold();
                    tablaDesarrolloReunion.Rows[0].Cells[0].Width = anchoSecciones;

                    var tablaDesarrolloReunionItemUnoValue = tablaDesarrolloReunion.Rows[0].Cells[1].Paragraphs.First();
                    tablaDesarrolloReunionItemUnoValue.Append("DESARROLLO DE LA REUNIÓN").Font(new FontFamily("Calibri")).FontSize(11).Bold();
                    tablaDesarrolloReunion.Rows[0].Cells[1].InsertParagraph();
                    tablaDesarrolloReunion.Rows[0].Cells[1].Width = anchoSeccionesContenido;

                    var tablaDesarrolloReunionItemDos = tablaDesarrolloReunion.Rows[1].Cells[0].Paragraphs.First();
                    tablaDesarrolloReunion.Rows[1].Cells[0].Width = anchoSecciones;

                    var tablaDesarrolloReunionItemDosValue = tablaDesarrolloReunion.Rows[1].Cells[1].Paragraphs.First();
                    tablaDesarrolloReunion.Rows[1].Cells[1].InsertParagraph();
                    tablaDesarrolloReunion.Rows[1].Cells[1].Width = anchoSeccionesContenido;

                    var tablaDesarrolloReunionItemTres = tablaDesarrolloReunion.Rows[2].Cells[0].Paragraphs.First();
                    tablaDesarrolloReunion.Rows[2].Cells[0].Width = anchoSecciones;

                    var tablaDesarrolloReunionItemTresValue = tablaDesarrolloReunion.Rows[2].Cells[1].Paragraphs.First();
                    tablaDesarrolloReunion.Rows[2].Cells[1].InsertParagraph();
                    tablaDesarrolloReunion.Rows[2].Cells[1].Width = anchoSeccionesContenido;

                    if (presencial)
                    {
                        tablaDesarrolloReunionItemDos.Append("1.1").Font(new FontFamily("Calibri")).FontSize(11);    
                        tablaDesarrolloReunionItemDosValue.Append("La reunión empezó a las " + obj.oAnalisisFallaDTO.AFEREUHORINI + " h. ").Font(new FontFamily("Calibri")).FontSize(11).Alignment = Alignment.both;    
                        tablaDesarrolloReunionItemTres.Append("1.2").Font(new FontFamily("Calibri")).FontSize(11);    
                        tablaDesarrolloReunionItemTresValue.Append("El COES realizó una exposición del evento ocurrido a las " + obj.FechasEventos).Font(new FontFamily("Calibri")).FontSize(11).Alignment = Alignment.both;
                    }
                    else
                    {
                        tablaDesarrolloReunionItemDos.Append("1.1").Font(new FontFamily("Calibri")).FontSize(11);
                        tablaDesarrolloReunionItemDosValue.Append("El coordinador del CT-AF decidió no realizar en forma presencial la reunión del comité de trabajo, en reemplazo el análisis fue realizado vía telefónica y correo electrónico con las empresas involucradas. ").Font(new FontFamily("Calibri")).FontSize(11).Alignment = Alignment.both;
                        tablaDesarrolloReunionItemTres.Append("1.2").Font(new FontFamily("Calibri")).FontSize(11);
                        tablaDesarrolloReunionItemTresValue.Append("El COES elaboró el informe del CT-AF correspondiente al evento ocurrido a las " + obj.FechasEventos).Font(new FontFamily("Calibri")).FontSize(11).Alignment = Alignment.both;
                    }
                    #endregion

                    #region ACUERDO
                    var tablaAcuerdo = document.InsertTable(2, 2);

                    tablaAcuerdo.Design = TableDesign.TableNormal;
                    tablaAcuerdo.AutoFit = AutoFit.ColumnWidth;

                    var tablaAcuerdoItemUno = tablaAcuerdo.Rows[0].Cells[0].Paragraphs.First();
                    tablaAcuerdoItemUno.Append("2.").Font(new FontFamily("Calibri")).FontSize(11).Bold();
                    tablaAcuerdo.Rows[0].Cells[0].Width = anchoSecciones;

                    var tablaAcuerdoItemUnoValue = tablaAcuerdo.Rows[0].Cells[1].Paragraphs.First();
                    tablaAcuerdoItemUnoValue.Append("ACUERDO").Font(new FontFamily("Calibri")).FontSize(11).Bold();
                    tablaAcuerdo.Rows[0].Cells[1].InsertParagraph();
                    tablaAcuerdo.Rows[0].Cells[1].Width = anchoSeccionesContenido;

                    var tablaAcuerdoItemDos = tablaAcuerdo.Rows[1].Cells[0].Paragraphs.First();
                    tablaAcuerdoItemDos.Append("2.1").Font(new FontFamily("Calibri")).FontSize(11);
                    tablaAcuerdo.Rows[1].Cells[0].Width = anchoSecciones;

                    var tablaAcuerdoItemDosValue = tablaAcuerdo.Rows[1].Cells[1].Paragraphs.First();
                    tablaAcuerdoItemDosValue.Append($"A la DOCOES: tomar conocimiento del documento del informe del CT-AF/EV-{obj.oAnalisisFallaDTO.AFECORR.ToString("D3")}-{obj.oAnalisisFallaDTO.AFEANIO}, como base para la elaboración del Informe Técnico emitido por la DOCOES.").Font(new FontFamily("Calibri")).FontSize(11).Alignment = Alignment.both;
                    tablaAcuerdo.Rows[1].Cells[1].Width = anchoSeccionesContenido;

                    if (presencial)
                    {
                        document.InsertParagraph();
                        document.InsertParagraph($"Siendo las {obj.oAnalisisFallaDTO.AFEREUHORFIN} h del {obj.oAnalisisFallaDTO.AFEREUFECHAPROGstr.Replace("/", ".")} se levantó la sesión.").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                    }
                    #endregion

                }

                MemoryStream ms = new MemoryStream();
                document.SaveAs(ms);
                bytes = ms.GetBuffer();
                ms.Dispose();
                ms.Close();

                FileServer.CreateFolder(null, rutaSev, fileserver);
                document.SaveAs(fileserver + rutaSev + filename);
                document.Dispose();
            }

            return bytes;
        }

        public byte[] GenerarReporteCitacion(Models.AnalisisFallasModel obj, string fileserver, string rutaSev, string filename)
        {
            bool presencial = false;

            if (obj.LstEvento.Count > 0)
            {
                if (obj.LstEvento[0].EVENTIPOFALLA == "P")
                {
                    presencial = true;
                }
                else
                {
                    presencial = false;
                }

            }

            byte[] bytes = new byte[0];

            using (DocX document = DocX.Create(filename))
            {

                var Logo = Server.MapPath("~/Content/Images/logo2024.png");

                Novacode.Image logo = document.AddImage(Logo);
                var logoPictureCOES = logo.CreatePicture();
                logoPictureCOES.Width = 83;
                logoPictureCOES.Height = 87;
                

                document.AddHeaders();
                document.DifferentFirstPage = false;
                document.DifferentOddAndEvenPages = false;

                #region HEADER
                Header header_first = document.Headers.odd;

                Table header_first_table = header_first.InsertTable(1, 2);
                header_first_table.Design = TableDesign.TableNormal;
                header_first_table.AutoFit = AutoFit.ColumnWidth;

                Paragraph upperRightParagraph = header_first.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                upperRightParagraph.AppendPicture(logoPictureCOES);
                upperRightParagraph.Alignment = Alignment.left;

                header_first_table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                header_first_table.Rows[0].Cells[0].Width = 380;

                header_first_table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                header_first_table.Rows[0].Cells[1].Width = 200;

                Paragraph cabecera = header_first.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                cabecera = header_first.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                cabecera.Append($"COMITÉ TÉCNICO\n DE ANÁLISIS DE FALLAS \n AÑO {DateTime.Now.Year.ToString()} (CT-AF) ").FontSize(10).Bold().Font(new FontFamily("Calibri"));
                cabecera.Alignment = Alignment.center;
                #endregion

                document.InsertParagraph();

                #region FECHA
                Paragraph bTitulo = document.InsertParagraph($"San Isidro, {DateTime.Now.Day.ToString("00")} de {f_get_nombre_mes(DateTime.Now.Month)} de {DateTime.Now.Year.ToString()}").FontSize(11).Font(new FontFamily("Calibri"));
                bTitulo.Alignment = Alignment.left;
                #endregion

                document.InsertParagraph();

                #region TITULO
                Paragraph Titulo = document.InsertParagraph($"CITACIÓN N°{obj.oAnalisisFallaDTO.AFECORR}-{obj.oAnalisisFallaDTO.AFEANIO}").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                Titulo.Alignment = Alignment.center;
                #endregion

                document.InsertParagraph();

                Paragraph p1 = document.InsertParagraph($"Se hace de conocimiento a todos los representantes al Comité de Técnico de Análisis de Fallas - Año {DateTime.Now.Year.ToString()} (CT-AF), ").FontSize(11).Font(new FontFamily("Calibri")).Append(presencial ? "a la reunión que se llevará a cabo en la sede del COES-SINAC, para tratar la agenda que se indica a continuación:" : "sobre el análisis que se realizará, respecto al evento que se indica a continuación:").FontSize(11).Font(new FontFamily("Calibri"));
                p1.Alignment = Alignment.both;

                document.InsertParagraph();

                document.InsertParagraph("AGENDA:").FontSize(11).Font(new FontFamily("Calibri")).UnderlineStyle(UnderlineStyle.singleLine);

                document.InsertParagraph();

                if (obj.LstEvento.Count > 0)
                {
                    int rows = obj.LstEvento.Count + obj.ListaEventosSco.Count;

                    Table table = document.InsertTable(rows, 4);

                    table.Design = TableDesign.TableGrid;

                    table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                    table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                    table.Rows[0].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                    table.Rows[0].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                    table.Rows[0].Cells[0].Width = 102.04704;
                    table.Rows[0].Cells[1].Width = 105.82656;
                    table.Rows[0].Cells[2].Width = 226.7712;
                    table.Rows[0].Cells[3].Width = 188.976;

                    table.Rows[0].Cells[0].MarginBottom = 10;
                    table.Rows[0].Cells[1].MarginBottom = 10;
                    table.Rows[0].Cells[2].MarginBottom = 10;
                    table.Rows[0].Cells[3].MarginBottom = 10;

                    table.Rows[0].Cells[0].FillColor = Color.LightGray;
                    table.Rows[0].Cells[1].FillColor = Color.LightGray;
                    table.Rows[0].Cells[2].FillColor = Color.LightGray;
                    table.Rows[0].Cells[3].FillColor = Color.LightGray;

                    table.Rows[0].Cells[0].Paragraphs[0].Append("CÓDIGO").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[1].Paragraphs[0].Append("FECHA Y HORA").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[2].Paragraphs[0].Append("DESCRIPCIÓN DEL EVENTO").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[3].Paragraphs[0].Append("EMPRESAS INVOLUCRADAS*").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    
                    int contadorEvento = 0;

                    if (obj.ListaEventosSco.Count > 1)
                    {
                        table.MergeCellsInColumn(0, 1, obj.ListaEventosSco.Count);
                        table.MergeCellsInColumn(2, 1, obj.ListaEventosSco.Count);
                        table.MergeCellsInColumn(3, 1, obj.ListaEventosSco.Count);
                    }

                    foreach (var item in obj.ListaEventosSco.OrderBy(m => m.EVENINI))
                    {
                        for (int i = 0; i < obj.LstEvento.Count; i++)
                        {
                            string fecha_evento = obj.LstEvento[i].FECHA_EVENTO.Replace(".", "/");

                            if (fecha_evento == item.EVENINIstr)
                            {
                                var EVENINIstr = item.EVENINIstr.Replace("/", ".");
                                table.Rows[i + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                
                                table.Rows[i + 1].Cells[1].MarginTop = 20;
                                table.Rows[i + 1].Cells[1].MarginBottom = 20;

                                if (obj.LstEvento.Count == 1)
                                {
                                    table.Rows[i + 1].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                }

                                table.Rows[i + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[i + 1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                table.Rows[i + 1].Cells[0].Paragraphs[0].Alignment = Alignment.center;
                                table.Rows[i + 1].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                                table.Rows[i + 1].Cells[2].Paragraphs[0].Alignment = Alignment.center;
                                table.Rows[i + 1].Cells[3].Paragraphs[0].Alignment = Alignment.center;

                                table.Rows[i + 1].Cells[0].Width = 102.04704;
                                table.Rows[i + 1].Cells[1].Width = 105.82656;
                                table.Rows[i + 1].Cells[2].Width = 226.7712;
                                table.Rows[i + 1].Cells[3].Width = 188.976;

                                table.Rows[i + 1].Cells[0].Paragraphs[0].Append(obj.LstEvento[i].CODIGO.ToString()).FontSize(11).Font(new FontFamily("Calibri"));
                                table.Rows[i + 1].Cells[1].Paragraphs[0].Append(EVENINIstr.ToString().Replace(" ", "\n") + " h").FontSize(11).Font(new FontFamily("Calibri"));
                                table.Rows[i + 1].Cells[2].Paragraphs[0].Append(obj.LstEvento[i].EVENASUNTO.ToString()).FontSize(11).Font(new FontFamily("Calibri"));
                                table.Rows[i + 1].Cells[3].Paragraphs[0].Append(obj.LstEvento[i].EmpresaInvolucrada.ToString().Replace("\r", "\n")).FontSize(11).Font(new FontFamily("Calibri"));

                            }
                            else
                            {
                                var EVENINIstr = item.EVENINIstr.Replace("/", ".");

                                table.Rows[contadorEvento + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                table.Rows[contadorEvento + 1].Cells[1].MarginTop = 20;
                                table.Rows[contadorEvento + 1].Cells[1].MarginBottom = 20;

                                table.Rows[contadorEvento + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[contadorEvento + 1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                table.Rows[contadorEvento + 1].Cells[0].Paragraphs[0].Alignment = Alignment.center;
                                table.Rows[contadorEvento + 1].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                                table.Rows[contadorEvento + 1].Cells[2].Paragraphs[0].Alignment = Alignment.center;
                                table.Rows[contadorEvento + 1].Cells[3].Paragraphs[0].Alignment = Alignment.center;

                                table.Rows[contadorEvento + 1].Cells[0].Width = 102.04704;
                                table.Rows[contadorEvento + 1].Cells[1].Width = 105.82656;
                                table.Rows[contadorEvento + 1].Cells[2].Width = 226.7712;
                                table.Rows[contadorEvento + 1].Cells[3].Width = 188.976;

                                table.Rows[contadorEvento + 1].Cells[0].Paragraphs[0].Append("").FontSize(11).Font(new FontFamily("Calibri"));
                                table.Rows[contadorEvento + 1].Cells[1].Paragraphs[0].Append(EVENINIstr.ToString().Replace(" ", "\n") + " h").FontSize(11).Font(new FontFamily("Calibri"));
                                table.Rows[contadorEvento + 1].Cells[2].Paragraphs[0].Append("").FontSize(11).Font(new FontFamily("Calibri"));
                                table.Rows[contadorEvento + 1].Cells[3].Paragraphs[0].Append("").FontSize(11).Font(new FontFamily("Calibri"));

                            }

                            contadorEvento++;
                        }

                    }

                    document.InsertParagraph("");

                    if (presencial)
                    {
                        Paragraph p3 = document.InsertParagraph("\n* Las empresas involucradas derivan de un análisis preliminar realizado por el COES, por lo que su identificación es Referencial. Es responsabilidad de cada empresa evaluar el evento a fin de determinar su participación en el mismo como empresa involucrada y determinar su asistencia a la reunión del CT-AF.").FontSize(11).Font(new FontFamily("Calibri"));
                        p3.Alignment = Alignment.both;

                        Paragraph p3_1 = document.InsertParagraph("La asistencia a la reunión de las empresas mencionadas como involucradas en el evento es indispensable.").FontSize(11).Font(new FontFamily("Calibri"));
                        p3_1.Alignment = Alignment.both;
                        document.InsertParagraph("\n");

                        Paragraph p4 = document.InsertParagraph("FECHA DE LA REUNIÓN:\r\n").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                        p4.Alignment = Alignment.left;

                        var fecha = f_get_nombre_dia(Convert.ToDateTime(obj.oAnalisisFallaDTO.AFEREUFECHAPROG).DayOfWeek) + " " + obj.oAnalisisFallaDTO.AFEREUFECHAPROG.Value.ToString("dd.MM.yyyy") + ", a las " + obj.oAnalisisFallaDTO.AFEREUHORAPROG + " h.";

                        Paragraph p5 = document.InsertParagraph(fecha).FontSize(11).Font(new FontFamily("Calibri"));
                        p5.Alignment = Alignment.left;
                        document.InsertParagraph("\n");

                        Paragraph p6 = document.InsertParagraph("LUGAR:\r\n").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                        p6.Alignment = Alignment.left;

                        Paragraph p7 = document.InsertParagraph("Sala de reuniones: " + obj.oAnalisisFallaDTO.AFSALA.ToString()).FontSize(11).Font(new FontFamily("Calibri"));
                        p7.Alignment = Alignment.left;

                        Paragraph p8 = document.InsertParagraph("Sede del COES: Av. Los Conquistadores N° 1144, San Isidro - Lima.").FontSize(11).Font(new FontFamily("Calibri"));
                        p8.Alignment = Alignment.left;


                    }
                    else
                    {
                        Paragraph p3 = document.InsertParagraph("* Las empresas involucradas derivan de un análisis preliminar realizado por el COES, por lo que su identificación es Referencial. Es responsabilidad de cada empresa evaluar el evento a fin de determinar su participación en el mismo como empresa involucrada.").FontSize(12).Font(new FontFamily("Calibri"));
                        p3.Alignment = Alignment.both;

                        Paragraph p3_1 = document.InsertParagraph("Se considera por conveniente que el presente evento sea analizado en forma ").FontSize(12).Font(new FontFamily("Calibri")).Append("no presencial").FontSize(12).Font(new FontFamily("Calibri")).Bold().Append(", coordinando vía correo electrónico y/o vía telefónica con las empresas involucradas.\r\n").FontSize(12).Font(new FontFamily("Calibri"));
                        p3_1.Alignment = Alignment.both;

                        Paragraph p4 = document.InsertParagraph("Asimismo, la información correspondiente será publicada en el portal web del COES.\r\n").FontSize(12).Font(new FontFamily("Calibri"));
                        p4.Alignment = Alignment.left;

                        Paragraph p5 = document.InsertParagraph("FECHA DE ENVÍO DEL INFORME CTAF:\r\n").FontSize(12).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                        p5.Alignment = Alignment.left;

                        var fecha = f_get_nombre_dia(Convert.ToDateTime(obj.oAnalisisFallaDTO.AFEREUFECHAPROG).DayOfWeek) + " " + obj.oAnalisisFallaDTO.AFEREUFECHAPROG.Value.ToString("dd.MM.yyyy");

                        Paragraph p51 = document.InsertParagraph(fecha).FontSize(12).Font(new FontFamily("Calibri"));
                        p51.Alignment = Alignment.left;

                    }

                    #region FINAL DOCUMENTO
                    Paragraph p9 = document.InsertParagraph("\r\nAtentamente,").FontSize(12).Font(new FontFamily("Calibri"));
                    p9.Alignment = Alignment.left;

                    var imagenfirma = Server.MapPath("~/Content/Images/firma_sierra.png");
                    Novacode.Image ImagenFirma = document.AddImage(imagenfirma);

                    Paragraph firma = document.InsertParagraph("\t\t\t\t\t").AppendPicture(ImagenFirma.CreatePicture());

                    Paragraph p9_1 = document.InsertParagraph("\t\t\t\t\t\tIng. Eleazar Sierra").FontSize(12).Font(new FontFamily("Calibri")).Bold();
                    p9_1.Alignment = Alignment.left;

                    Paragraph p10 = document.InsertParagraph("\t\t\t\t\t\tCoordinador CT-AF").FontSize(12).Font(new FontFamily("Calibri"));
                    p10.Alignment = Alignment.left;

                    Paragraph p11 = document.InsertParagraph("\t\t\t\t\t\t    COES-SINAC").FontSize(12).Font(new FontFamily("Calibri"));
                    p11.Alignment = Alignment.left;

                    #endregion

                }

                MemoryStream ms = new MemoryStream();
                document.SaveAs(ms);
                bytes = ms.GetBuffer();
                ms.Dispose();
                ms.Close();

                FileServer.CreateFolder(null, rutaSev, fileserver);
                document.SaveAs(fileserver + rutaSev + filename);
                document.Dispose();
            }
            return bytes;

        }

        private string f_get_nombre_dia(DayOfWeek ps_dia)
        {

            switch (ps_dia)
            {
                case DayOfWeek.Sunday:
                    return "DOMINGO";
                case DayOfWeek.Monday:
                    return "LUNES";
                case DayOfWeek.Tuesday:
                    return "MARTES";
                case DayOfWeek.Wednesday:
                    return "MIÉRCOLES";
                case DayOfWeek.Thursday:
                    return "JUEVES";
                case DayOfWeek.Friday:
                    return "VIERNES";
                case DayOfWeek.Saturday:
                    return "SÁBADO";
                default:
                    return "";
            }


        }
        
        private string f_get_nombre_mes(int pi_mes)
        {

            switch (pi_mes)
            {
                case 1:
                    return "enero";
                case 2:
                    return "febrero";
                case 3:
                    return "marzo";
                case 4:
                    return "abril";
                case 5:
                    return "mayo";
                case 6:
                    return "junio";
                case 7:
                    return "julio";
                case 8:
                    return "agosto";
                case 9:
                    return "setiembre";
                case 10:
                    return "octubre";
                case 11:
                    return "noviembre";
                case 12:
                    return "diciembre";
                default:
                    return "";
            }
        }

        #endregion

        public bool ExisteIEI(EmpresaInvolucradaDTO obj)
        {

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            bool result = appAnalisisFallas.ExisteIEI(obj);
            return !result;
        }


        #region FIT SGOCOES func A - Soporte
        public int ValidaCorrelativo(AnalisisFallaDTO entity)
        {
            int anio = entity.AFEANIO;
            int correlativo = entity.AFECORR;

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            int resultado = appAnalisisFallas.ValidaCorrelativo(entity);
            return resultado;
        }


        public bool EliminarEmpresaCompensadaCompensacion(EmpresaResponsableDTO entity)
        {

            bool result = false;
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            result = appAnalisisFallas.EliminarEmpresaCompensadaCompensacion(entity);
            return result;
        }

        #endregion




        #endregion

        #region Aplicativo Extranet CTAF

        #region Listado de Eventos CTAF (Interrupciones)

        /// <summary>
        /// Interrupcion Suministros
        /// </summary>
        /// <returns></returns>
        public ActionResult InterrupcionSuministros()
        {
            if (!base.IsValidSesionView()) return base.RedirectToLogin();

            ViewBag.EmpresaInvolucrada = servAF.ObtenerEmpresasInvolucrada();
            ViewBag.EmpresaPropietaria = servAF.ObtenerEmpresaPropietaria();
            ViewBag.TipoEquipo = servAF.ObtenerTipoEquipo();

            ViewBag.FechaInicio = DateTime.Now.AddMonths(-2).ToString(Constantes.FormatoFecha);
            ViewBag.FechaFin = DateTime.Now.ToString(Constantes.FormatoFecha);

            return View();
        }

        /// <summary>
        /// Listar las interrupciones
        /// </summary>
        /// <param name="miDataM"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListadoInterrupciones(AnalisisFallasModel miDataM)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            List<EventoDTO> ListaAF = new List<EventoDTO>();
            EventoDTO oEventoDTO = new EventoDTO();
            try
            {
                base.ValidarSesionJsonResult();

                bool permisoGrabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);

                oEventoDTO.EmpresaPropietaria = miDataM.EmpresaPropietaria;
                oEventoDTO.EmpresaInvolucrada = miDataM.EmpresaInvolucrada;
                oEventoDTO.TipoEquipo = miDataM.TipoEquipo;
                oEventoDTO.Estado = miDataM.Estado;
                oEventoDTO.RNC = miDataM.RNC;
                oEventoDTO.ERACMF = miDataM.ERACMF;
                oEventoDTO.ERACMT = miDataM.ERACMT;
                oEventoDTO.EDAGSF = miDataM.EDAGSF;
                oEventoDTO.DI = miDataM.DI;
                oEventoDTO.DF = miDataM.DF;
                oEventoDTO.EveSinDatosReportados = miDataM.EveSinDatosReportados;
                oEventoDTO.ListaEmprcodi = ConstantesAppServicio.ParametroDefecto;
                List<EventoDTO> listaInterrupciones = servAF.ConsultarInterrupcionesSuministros(oEventoDTO);

                List<EveEventoDTO> lstEventosAsociados;
                List<EventoDTO> lstEvento = new List<EventoDTO>();
                List<EventoDTO> lstEventosSco = listaInterrupciones.DistinctBy(x => x.CODIGO).ToList();
                if (miDataM.ERACMF == "S" || miDataM.RNC == "S" || miDataM.ERACMT == "S" || miDataM.EDAGSF == "S")
                {
                    foreach (var x in lstEventosSco)
                    {
                        lstEventosAsociados = servAF.ListadoEventosAsoCtaf(Convert.ToInt32(x.EVENCODI)).DistinctBy(y => y.Evencodi).ToList();
                        if (lstEventosAsociados.Count > 0)
                        {
                            foreach (var j in lstEventosAsociados)
                            {
                                EventoDTO Asociado = servAF.InterrupcionAsoCtaf(j.Evencodi);
                                if (Asociado.CODIGO != null)
                                    lstEvento.Add(Asociado);
                            }
                        }
                        else
                            lstEvento.Add(x);
                    }
                    var codicosCtafAsociados = lstEvento.Select(x => new { x.CODIGO }).Distinct().ToList();
                    foreach (var item in codicosCtafAsociados)
                    {

                        EventoDTO primer_evento = (lstEvento.Where(y => y.CODIGO == item.CODIGO).OrderBy(c => c.EVENINI).FirstOrDefault());
                        var ERACMF = lstEvento.Where(x => x.CODIGO == item.CODIGO && x.ERACMF == "S").Distinct().ToList();
                        if (ERACMF.Count > 0)
                        {
                            primer_evento.ERACMF = "S";
                        }
                        ListaAF.Add(primer_evento);
                    }
                }
                else
                {
                    foreach (var x in lstEventosSco)
                    {
                        lstEventosAsociados = servAF.ListadoEventosAsoCtaf(Convert.ToInt32(x.EVENCODI)).DistinctBy(y => y.Evencodi).ToList();
                        if (lstEventosAsociados.Count > 0)
                        {
                            foreach (var j in lstEventosAsociados)
                            {
                                EventoDTO Asociado = servAF.InterrupcionAsoCtaf(j.Evencodi);
                                if (Asociado.CODIGO != null)
                                    lstEvento.Add(Asociado);
                            }
                        }
                        else
                            lstEvento.Add(x);
                    }
                    var codicosCtafAsociados = lstEvento.Select(x => new { x.CODIGO }).Distinct().ToList();
                    foreach (var item in codicosCtafAsociados)
                    {
                        EventoDTO primer_evento = (lstEvento.Where(y => y.CODIGO == item.CODIGO).OrderBy(c => c.EVENINI).FirstOrDefault());
                        var ERACMF = lstEvento.Where(x => x.CODIGO == item.CODIGO && x.ERACMF == "S").Distinct().ToList();
                        if (ERACMF.Count > 0)
                        {
                            primer_evento.ERACMF = "S";
                        }
                        ListaAF.Add(primer_evento);
                    }
                }

                string url = Url.Content("~/");
                string listaHtml = servAF.ObtenerListadoInterrupcionesHtml(url, permisoGrabar, ListaAF);

                model.Resultado = listaHtml;
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }

            return Json(model);
        }

        /// <summary>
        /// Vista de edición
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult Edicion(int id)
        {
            int afecodi = id;
            if (!base.IsValidSesionView()) return base.RedirectToLogin();

            AnalisisFallasModel oAnalisisFallasModel = new AnalisisFallasModel();

            oAnalisisFallasModel.grabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);

            ViewBag.Afecodi = afecodi;
            AnalisisFallaDTO oAnalisisFallaDTO = servAF.ObtenerAnalisisFalla(afecodi);
            EventoDTO oEventoDTO = servAF.ObtenerEvento(oAnalisisFallaDTO.EVENCODI);

            ViewBag.Afeanio = oAnalisisFallaDTO.AFEANIO;
            ViewBag.Afecorr = oAnalisisFallaDTO.AFECORR;
            //Obtener Interrupción
            EventoDTO eventoInterrup = servAF.ObtenerInterrupcionByAfecodi(afecodi);
            eventoInterrup.Afeplazofecha = eventoInterrup.Afeplazofechaampl != null ? eventoInterrup.Afeplazofechaampl : eventoInterrup.Afeplazofecha;

            //Completar fechas
            if (eventoInterrup.Afeplazofecha.HasValue)
            {
                oEventoDTO.FechaPlazoEnvio = eventoInterrup.Afeplazofecha.Value.ToString(Constantes.FormatoFechaFull);
            }
            else
            {
                oEventoDTO = servAF.CompletaFechasPlazo(oEventoDTO);
            }

            if (eventoInterrup.Afefechainterr.HasValue)
            {
                oEventoDTO.FechaInterrupcion = eventoInterrup.Afefechainterr.Value.ToString(Constantes.FormatoFechaFull);
            }
            else
            {
                oEventoDTO = servAF.CompletaFechasInterrupcion(oEventoDTO);
            }

            oEventoDTO = servAF.ValidarEvento(oEventoDTO, oAnalisisFallaDTO);
            oAnalisisFallasModel.oAnalisisFallaDTO = oAnalisisFallaDTO;
            oAnalisisFallasModel.oEventoDTO = oEventoDTO;

            return View(oAnalisisFallasModel);
        }

        /// <summary>
        /// método paa editar la Interrupción
        /// </summary>
        /// <param name="oEventoEdit"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult EditarEvento(AnalisisFallasModel oEventoEdit)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            EventoDTO oEventoDTO = new EventoDTO();
            foreach (var item in oEventoEdit.LstEventos)
            {
                try
                {
                    base.ValidarSesionJsonResult();
                    if (!base.VerificarAccesoAccion(Acciones.Grabar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                    //if (item.Afefechainterr.Contains("y") || item.Afefechainterr.Contains("d") || item.Afefechainterr.Contains("h") || item.Afefechainterr.Contains("m") || item.Afefechainterr.Contains("s"))
                    //    throw new Exception("La Hora Interrupción no tiene un formato de fecha correcto");

                    //if (item.Evenini.Contains("y") || item.Evenini.Contains("d") || item.Evenini.Contains("h") || item.Evenini.Contains("m") || item.Evenini.Contains("s"))
                    //    throw new Exception("La Hora Interrupción no tiene un formato de fecha correcto");

                    DateTime? fechaEventoIni = null;
                    if (item.Evenini != null)
                    {
                        fechaEventoIni = DateTime.ParseExact(item.Evenini, Constantes.FormatoFechaFull, CultureInfo.InvariantCulture);
                    }

                    DateTime? fechaInterrup = null;
                    if (item.Afefechainterr != null)
                    {
                        fechaInterrup = DateTime.ParseExact(item.Afefechainterr, Constantes.FormatoFechaFull, CultureInfo.InvariantCulture);
                    }

                    DateTime? fechaPlazo = null;
                    if (oEventoEdit.DF != null)
                    {
                        fechaPlazo = DateTime.ParseExact(oEventoEdit.DF, Constantes.FormatoFechaFull, CultureInfo.InvariantCulture);
                    }

                    string usuario = User.Identity.Name;

                    if (fechaInterrup < fechaEventoIni || fechaPlazo < fechaEventoIni)
                        throw new Exception("Las fechas de Interrupción y plazos deben ser mayores a la fecha del  Evento");

                    oEventoDTO.AFECODI = int.Parse(item.Afecodi);
                    oEventoDTO.Afefechainterr = fechaInterrup;
                    oEventoDTO.Afeplazofecha = fechaPlazo;
                    oEventoDTO.EVENINI = fechaEventoIni;
                    oEventoDTO.Afeplazousumodificacion = usuario;
                    oEventoDTO.Afeplazofecmodificacion = DateTime.Now;
                    oEventoDTO.EVENCODI = item.Evencodi;

                    model.Resultado = servAF.EditarEvento(oEventoDTO).ToString();

                    if (model.Resultado == "1")
                        model.StrMensaje = "¡La Información se actualizó correctamente!";
                }
                catch (Exception ex)
                {
                    model.StrMensaje = "Se produjo un error: " + ex.Message;
                    model.Resultado = "-1";
                    Log.Error(NameController, ex);
                    return Json(model);
                }
            }


            return Json(model);
        }

        #endregion

        #region Generación de Reportes

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult ReporteExtranetCTAF(string id)
        {
            var _parametros = id.Split(',');
            int afecodi = Convert.ToInt32(_parametros[0]);
            string afeanio = _parametros[1].ToString();
            string afecorr = _parametros[2].ToString();
            if (!base.IsValidSesionView()) return base.RedirectToLogin();

            AnalisisFallasModel model = new AnalisisFallasModel();
            model.oEventoDTO = servAF.ObtenerInterrupcionByAfecodi(afecodi);
            model.ListaEmpresa = servAF.ObtenerListaEmpresas();
            model.ListaTipoInformacion = servAF.ListSiFuentedatosByFdatpadre(ConstantesExtranetCTAF.FdatcodiCTAFExtranet);
            if (model.oEventoDTO.ERACMF != "S")
                model.ListaTipoInformacion = model.ListaTipoInformacion.Where(x => x.Fdatcodi != (int)ConstantesExtranetCTAF.Fuentedato.InterrupcionActivacionERACMF).ToList();

            List<EventoDTO> lstEventosSco = servAF.LstEventosSco(afeanio, afecorr);
            model.ListaEventosSco = lstEventosSco;

            return View(model);
        }

        /// <summary>
        /// Mostrar la lista de Eracmf y los campos de auditoria
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListarReporteHtmlByTipo(int tipoReporte, int afecodi, int emprcodi, string anio, string correlativo)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionJsonResult();

                //Si no tiene permisos que muestre reporte pero no permita editar el Excel web
                bool tienePermisoGrabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);
                switch (tipoReporte)
                {
                    case (int)ConstantesExtranetCTAF.Fuentedato.InterrupcionActivacionERACMF:
                        this.servAF.GenerarReporte1ByInterrupcionERACMF(afecodi, emprcodi, out List<string> listaReporte1Html, out List<AfHoraCoordDTO> lstHandson1HorasCoordinacion, out List<AfHoraCoordDTO> lstHandson3AgentesDemoras, anio, correlativo);
                        model.ListaReporte1Html = listaReporte1Html;
                        List<AfHoraCoordDTO> listHandsonHorasCoordinacion2Eracm = new List<AfHoraCoordDTO>();
                        var listHandsonHorasCoordinacion_2Eracm = lstHandson1HorasCoordinacion.GroupBy(x => new { x.Emprnombr, x.Intsumsubestacion }).ToList();

                        foreach (var item1 in listHandsonHorasCoordinacion_2Eracm)
                        {
                            foreach (AfHoraCoordDTO item in lstHandson1HorasCoordinacion)
                            {
                                if (item.Emprnombr == item1.Key.Emprnombr && item.Intsumsubestacion == item1.Key.Intsumsubestacion)
                                {
                                    listHandsonHorasCoordinacion2Eracm.Add(item);
                                    break;
                                }
                            }
                        }
                        model.ListaHandsonHorasCoord = listHandsonHorasCoordinacion2Eracm;

                        List<AfHoraCoordDTO> lstHandsonHorasCoordSumnistradora = new List<AfHoraCoordDTO>();
                        var ListaSuministradora = servAF.ListAfHoraCoordSuministradora(afecodi);
                        foreach (var horasCoordinacion in ListaSuministradora)
                        {
                            horasCoordinacion.Afhofechadescripcion = horasCoordinacion.Afhofecha?.ToString(Constantes.FormatoFechaFull);
                            lstHandsonHorasCoordSumnistradora.Add(horasCoordinacion);
                        }


                        model.ListaHandsonHorasSuministradora = lstHandsonHorasCoordSumnistradora;
                        model.ListaHandsonAgentesDemoras = lstHandson3AgentesDemoras;
                        model.ListaHandsonEtapasFunc = servAF.ListHandsonCondiciones(afecodi);
                        break;
                    case (int)ConstantesExtranetCTAF.Fuentedato.Interrupcion:
                        this.servAF.GenerarReporte2ByInterrupcion(afecodi, emprcodi, out List<string> listaReporte2Html, out List<AfHoraCoordDTO> lstHandson2HorasCoordinacion, anio, correlativo);
                        model.ListaReporte2Html = listaReporte2Html;
                        List<AfHoraCoordDTO> listHandsonHorasCoordinacion2 = new List<AfHoraCoordDTO>();
                        var listHandsonHorasCoordinacion_2 = lstHandson2HorasCoordinacion.GroupBy(x => new { x.Emprnombr, x.Intsumsubestacion }).ToList();

                        foreach (var item1 in listHandsonHorasCoordinacion_2)
                        {
                            foreach (AfHoraCoordDTO item in lstHandson2HorasCoordinacion)
                            {
                                if (item.Emprnombr == item1.Key.Emprnombr && item.Intsumsubestacion == item1.Key.Intsumsubestacion)
                                {
                                    listHandsonHorasCoordinacion2.Add(item);
                                    break;
                                }
                            }
                        }                            

                        model.ListaHandsonHorasCoord = listHandsonHorasCoordinacion2;
                        break;
                    case (int)ConstantesExtranetCTAF.Fuentedato.ReduccionSuministros:
                        this.servAF.GenerarReporte3ByReduccion(afecodi, emprcodi, out List<string> listaReporte3Html, anio, correlativo);
                        model.ListaReporte3Html = listaReporte3Html;
                        break;
                }

            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            var jsonResult = Json(model);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        /// <summary>
        /// Permite gestionar el guardado de las horas de coordinacion de normalización
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GuardarHorasCoordinacion(List<AfHoraCoordDTO> listaHansonHoraCoord, List<AfHoraCoordDTO> listaA, int afecodiSco)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionJsonResult();

                bool tienePermisoGrabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);
                bool resultado = servAF.GuardarHorasCoordinacion(User.Identity.Name, listaHansonHoraCoord, listaA, afecodiSco);

                model.Resultado = "La operación se realizó con éxito.";

            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            return Json(model);
        }
        /// <summary>
        /// Permite gestionar el guardado de las horas de coordinacion de normalización
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GuardarCondiciones(List<AfCondicionesDTO> listaHansonCondiciones)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionJsonResult();

                bool tienePermisoGrabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);

                bool resultado = servAF.SaveAfCondiciones(User.Identity.Name, listaHansonCondiciones);
                model.Resultado = resultado ? "La operación se realizó con éxito." : "Ocurrió un error en el guardado de la información.";

            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            return Json(model);
        }

        /// <summary>
        /// Permite gestionar el guardado de las observaciones Agentes con demoras
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GuardarAgenteDemoras(List<AfHoraCoordDTO> listaHansonHoraCoord)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionJsonResult();

                bool tienePermisoGrabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);

                bool resultado = servAF.GuardarHorasCoordinacion(User.Identity.Name, listaHansonHoraCoord, null, 0);
                model.Resultado = "La operación se realizó con éxito.";

            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            return Json(model);
        }

        /// <summary>
        /// Exportación de archivo Excel de reporte seleccionado
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="afecodi"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ExportarReporteExtranetCTAF(int tipoReporte, int afecodi, int emprcodi, string anio = "", string correlativo = "")

        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionUsuario();

                switch (tipoReporte)
                {
                    case (int)ConstantesExtranetCTAF.Fuentedato.InterrupcionActivacionERACMF:
                        model.NombreArchivo = servAF.GenerarReporte1ByInterrupcionERACMFExcel(tipoReporte, afecodi, emprcodi, anio, correlativo);
                        break;
                    case (int)ConstantesExtranetCTAF.Fuentedato.Interrupcion:
                        model.NombreArchivo = servAF.GenerarReporte2ByInterrupcionExcel(tipoReporte, afecodi, emprcodi, anio, correlativo);
                        break;
                    case (int)ConstantesExtranetCTAF.Fuentedato.ReduccionSuministros:
                        model.NombreArchivo = servAF.GenerarReporte3ByReduccionExcel(tipoReporte, afecodi, emprcodi, anio, correlativo);
                        break;
                }

                model.Resultado = "1";
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            return Json(model);
        }

        /// <summary>
        /// //Descarga el archivo excel exportado
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public virtual FileResult Exportar(string file1)
        {
            string ruta = AppDomain.CurrentDomain.BaseDirectory + ConstantesExtranetCTAF.RutaReportes;
            string fullPath = ruta + file1;

            byte[] buffer = null;

            if (System.IO.File.Exists(fullPath))
            {
                buffer = System.IO.File.ReadAllBytes(fullPath);

                System.IO.File.Delete(fullPath);
            }

            return File(buffer, System.Net.Mime.MediaTypeNames.Application.Octet, file1);
        }

        /// <summary>
        /// Exportación de archivo Word de reporte seleccionado
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="afecodi"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ExportarReporteWordCTAF(int tipoReporte, int afecodi, int emprcodi, string anio = "", string correlativo = "")
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionUsuario();
                switch (tipoReporte)
                {
                    case (int)ConstantesExtranetCTAF.Fuentedato.InterrupcionActivacionERACMF:
                        model.NombreArchivo = servAF.GenerarReporte1ByInterrupcionERACMFWord(tipoReporte, afecodi, emprcodi, anio, correlativo);
                        break;
                    case (int)ConstantesExtranetCTAF.Fuentedato.Interrupcion:
                        model.NombreArchivo = servAF.GenerarReporte2ByInterrupcionWord(tipoReporte, afecodi, emprcodi, anio, correlativo);
                        break;
                    case (int)ConstantesExtranetCTAF.Fuentedato.ReduccionSuministros:
                        model.NombreArchivo = servAF.GenerarReporte3ByReduccionWord(tipoReporte, afecodi, emprcodi, anio, correlativo);
                        break;
                }

                model.Resultado = "1";
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            return Json(model);
        }


        #endregion

        #region CARGAR ERACMF VIGENTE

        /// <summary>
        /// Cargar ERACMF
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult CargarERACMF(int id)
        {
            if (!base.IsValidSesionView()) return base.RedirectToLogin();

            AnalisisFallasModel model = new AnalisisFallasModel();
            model.oEventoDTO = servAF.ObtenerInterrupcionByAfecodi(id);
            model.grabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);

            return View(model);
        }

        /// <summary>
        /// Cargoel archivo excel ERACMF
        /// </summary>
        /// <param name="formCollection"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult CargarArchivoERACMF(FormCollection formCollection)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();

                var fileName = formCollection["name"];
                var evencodi = formCollection["codigoEvento"];

                Stream stremExcel = (Request.Files.Count >= 1) ? Request.Files[0].InputStream : null;

                if (stremExcel != null)
                {
                    List<AfEracmfEventoDTO> listaDataExcel = new List<AfEracmfEventoDTO>();
                    List<AfEracmfEventoDTO> listaDataExcelErrores = new List<AfEracmfEventoDTO>();
                    List<EveEventoDTO> lstEventosAsociados = new List<EveEventoDTO>();

                    try
                    {
                        this.servAF.ObtenerDataExcelERACMF(stremExcel, evencodi, User.Identity.Name, out listaDataExcel, out listaDataExcelErrores);
                    }
                    catch (Exception ex)
                    {
                        Log.Error(NameController, ex);
                        throw new Exception("El contenido del archivo Excel no es correcto.");
                    }

                    //Guardar en BD si el archivo está correcto
                    if (listaDataExcel.Any())
                    {
                        List<AfEracmfEventoDTO> miListaERACMF = listaDataExcel;

                        AfEracmfEventoDTO eracmfExistente = new AfEracmfEventoDTO();
                        string usuCreacion = "";
                        DateTime? fecCreacion = DateTime.Now;

                        //Verifico si ya existe un registro anterior paar el mismo evento
                        var evencodiEracmfCargado = miListaERACMF.First().Evencodi;

                        lstEventosAsociados = servAF.ListadoEventosAsoCtaf(Convert.ToInt32(evencodiEracmfCargado)).DistinctBy(y => y.Evencodi).ToList();
                        foreach (var evencodiAsoc in lstEventosAsociados)
                        {
                            EventoDTO Asociado = servAF.EventoDTOAsoCtaf(evencodiAsoc.Evencodi);

                            if (Asociado.Afeeracmf == "S")
                            {
                                var archivoExistente = servAF.BuscarAFEracmfEventoByEvencodi(evencodiAsoc.Evencodi);
                                if (archivoExistente.Any())
                                {
                                    eracmfExistente = archivoExistente.First();
                                    usuCreacion = eracmfExistente.Eracmfusucreacion;
                                    fecCreacion = eracmfExistente.Eracmffeccreacion;

                                    //Elimino todos los eracmf del evento
                                    servAF.EliminarAFEracmfEventoByEvencodi(evencodiAsoc.Evencodi);
                                }
                                //Guardo cada registro en la tabla AF_ERACMF_EVENTO
                                foreach (var regEracmf in miListaERACMF)
                                {
                                    if (archivoExistente.Any())
                                    {
                                        regEracmf.Eracmfusucreacion = usuCreacion;
                                        regEracmf.Eracmffeccreacion = fecCreacion;
                                    }
                                    regEracmf.Evencodi = evencodiAsoc.Evencodi;
                                    servAF.SaveAfEracmfEvento(regEracmf);
                                }
                            }

                        }



                        //var archivoExistente = servAF.BuscarAFEracmfEventoByEvencodi(evencodiEracmfCargado);
                        //if (archivoExistente.Any())
                        //{
                        //    eracmfExistente = archivoExistente.First();
                        //    usuCreacion = eracmfExistente.Eracmfusucreacion;
                        //    fecCreacion = eracmfExistente.Eracmffeccreacion;

                        //    //Elimino todos los eracmf del evento
                        //    servAF.EliminarAFEracmfEventoByEvencodi(evencodiEracmfCargado);
                        //}

                        //Guardo cada registro en la tabla AF_ERACMF_EVENTO
                        //foreach (var regEracmf in miListaERACMF)
                        //{
                        //    if (archivoExistente.Any())
                        //    {
                        //        regEracmf.Eracmfusucreacion = usuCreacion;
                        //        regEracmf.Eracmffeccreacion = fecCreacion;
                        //    }
                        //    servAF.SaveAfEracmfEvento(regEracmf);
                        //}

                        this.servAF.ListarERACMFVigenteByData(miListaERACMF, out string reporteHtml, out string usuarioActualizacion, out string fechaActualizacion);
                        model.Resultado = reporteHtml;
                        model.UltimaModificacionUsuarioDesc = usuarioActualizacion;
                        model.UltimaModificacionFechaDesc = fechaActualizacion;

                        if (listaDataExcelErrores.Any())
                            model.Resultado2 = this.servAF.ObtenerTablaERACMFErroresHtml(listaDataExcelErrores);
                    }
                }
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }

            var jsonResult = Json(model);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        /// <summary>
        /// Mostrar la lista de Eracmf y los campos de auditoria
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListarArchivoEracmf(int id)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            List<EveEventoDTO> lstEventosAsociados = new List<EveEventoDTO>();
            lstEventosAsociados = servAF.ListadoEventosAsoCtaf(Convert.ToInt32(id)).DistinctBy(y => y.Evencodi).ToList();
            foreach (var evencodiAsoc in lstEventosAsociados)
            {
                EventoDTO Asociado = servAF.EventoDTOAsoCtaf(evencodiAsoc.Evencodi);
                if (Asociado.Afeeracmf == "S")
                {
                    id = Convert.ToInt32(Asociado.EVENCODI);
                    break;
                }
            }
            try
            {
                base.ValidarSesionJsonResult();
                model.grabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);

                this.servAF.ListarERACMFVigente(id, out string reporteHtml, out string usuarioActualizacion, out string fechaActualizacion);
                model.Resultado = reporteHtml;
                model.UltimaModificacionUsuarioDesc = usuarioActualizacion;
                model.UltimaModificacionFechaDesc = fechaActualizacion;
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            var jsonResult = Json(model);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }

        #endregion

        #region CONFIGURACION EMPRESA

        /// <summary>
        /// Manda parte de las lista que usa la vista ListaConfiguracionEmpresa (el listado es aparte, por medio de json)
        /// </summary>
        /// <returns></returns>
        public ActionResult ListaConfiguracionEmpresa()
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                GeneralAppServicio appGeneral = new GeneralAppServicio();

                if (!base.IsValidSesionView()) return base.RedirectToLogin();

                var lstTipos = appGeneral.ListarTiposEmpresa().Where(t => t.Tipoemprcodi > 0).ToList();
                var lstEmpresas = servAF.ObtenerListaEmpresas();

                List<int> lstTiposEmpresa = lstEmpresas.Select(x => x.Tipoemprcodi).Distinct().ToList();
                var lstTiposAUsar = lstTipos.Where(x => lstTiposEmpresa.Contains(x.Tipoemprcodi)).OrderBy(x => x.Tipoemprdesc).ToList();

                model.ListaTipoEmpresa = lstTiposAUsar;
                model.Tipoemprcodi = "-1";//Al inicio selecciona TODOS
                model.grabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
            }

            return View(model);
        }

        /// <summary>
        /// Cargar Lista de Consumo Combustible Semanal
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public JsonResult ListarConfiguracionEmpresa(string idTipoEmpresa)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            string url = Url.Content("~/");
            model.Resultado = servAF.ListarConfiguracionEmpresasHtml(idTipoEmpresa, url);

            return Json(model);
        }

        /// <summary>
        /// Elimina un registro de la tabla Afempresa
        /// </summary>
        /// <param name="afemprcodi"></param>
        /// <returns></returns>
        public JsonResult EliminarConfiguracion(string afemprcodi)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Eliminar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                servAF.DeleteAfEmpresa(Int32.Parse(afemprcodi));
                model.Resultado = "1";
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }

            return Json(model);
        }

        /// <summary>
        /// Manda listas a la vista de Editar Configuracion empresas
        /// </summary>
        /// <param name="afemprcodi"></param>
        /// <returns></returns>
        public PartialViewResult EditarConfiguracionEmpresa(string afemprcodi)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Editar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                var codRegistro = Int32.Parse(afemprcodi);

                IEODAppServicio serE = new IEODAppServicio();
                GeneralAppServicio appGeneral = new GeneralAppServicio();

                var regAfEmpresa = servAF.GetByIdAfEmpresa(codRegistro);
                if (regAfEmpresa != null)
                {
                    var emprcodi = regAfEmpresa.Emprcodi;

                    var lstEmpresasEvento = servAF.ObtenerListaEmpresas();
                    var lstTipos = appGeneral.ListarTiposEmpresa().ToList();

                    SiEmpresaDTO empresa = lstEmpresasEvento.Find(x => x.Emprcodi == emprcodi);

                    model.TipoEmpresa = lstTipos.Find(x => x.Tipoemprcodi == empresa.Tipoemprcodi).Tipoemprdesc;
                    model.Emprnomb = empresa.Emprnomb;
                    model.CodEracmf = regAfEmpresa.Afemprnomb;
                    model.CodOsinergmin = regAfEmpresa.Afemprosinergmin;
                    model.Afalerta = regAfEmpresa.Afalerta;
                }
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }

            return PartialView(model);
        }

        /// <summary>
        /// Manda las listas a la vista de Nueba configuracion empresa
        /// </summary>
        /// <returns></returns>
        public PartialViewResult NuevaConfiguracionEmpresa()
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Grabar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                servAF.ObtenerListadoEmpresasYTipos(out List<SiTipoempresaDTO> lstTiposAUsar, out List<SiEmpresaDTO> lstEmpresasAUsar);

                model.ListaTipoEmpresa = lstTiposAUsar;
                model.ListaEmpresa = lstEmpresasAUsar;

                //valores Iniciales al cargar pagina (los primeros de cada combo)
                model.Tipoemprcodi = lstTiposAUsar.First().Tipoemprcodi.ToString();
                model.Emprcodi = lstEmpresasAUsar.First().Emprcodi.ToString();
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
            }

            return PartialView(model);
        }

        /// <summary>
        /// Genera la lista de empresas cada vez que cambiamos de tipoempresas
        /// </summary>
        /// <param name="idTipoEmpresa"></param>
        /// <returns></returns>
        /// 
        public JsonResult CargarEmpresasNuevaConfiguracion(int idTipoEmpresa)
        {
            //cada vez que cambia el  tipoempresa cambiará los items de empresas
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();
                List<SiEmpresaDTO> empresas = new List<SiEmpresaDTO>();

                empresas = servAF.ListarEmpresasPorTipoEmpresa(idTipoEmpresa).OrderBy(x => x.Emprnomb).ToList();

                List<EmpresasTipo> lstEmpresas = new List<EmpresasTipo>();
                foreach (var item in empresas)
                {
                    EmpresasTipo objE = new EmpresasTipo();
                    objE.Emprcodi = item.Emprcodi;
                    objE.Emprnomb = item.Emprnomb;

                    lstEmpresas.Add(objE);
                }

                model.LstEmpresasT = lstEmpresas;

            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }

            return Json(model);
        }

        /// <summary>
        /// Guarda las nuevas configuraciones de empresas
        /// </summary>
        /// <param name="codEracmf"></param>
        /// <param name="codOsinergmin"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GuardarNuevaConfiguracion(string emprcodi, string codEracmf, string codOsinergmin, string afalerta)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Grabar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);
                bool existeConfig;
                bool existeCodOsinergmin;

                codEracmf = codEracmf.Trim();
                codOsinergmin = codOsinergmin.Trim();

                servAF.VerificarExistenciaConfiguracion(codEracmf, codOsinergmin, out existeConfig, out existeCodOsinergmin);

                //Verificar existencia configuracion 
                if (existeConfig == false)
                {
                    //verificar si ya existe el codigo osinergmin
                    if (existeCodOsinergmin == false)
                    {
                        string usuario = User.Identity.Name;

                        servAF.GuardarNuevaConfiguracion(emprcodi, codEracmf, codOsinergmin, usuario, afalerta);

                        model.Resultado = "1";
                    }
                    else
                        model.Resultado = "3";
                }
                else
                    model.Resultado = "2";

            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";

                Log.Error(NameController, ex);
            }

            return Json(model);
        }

        /// <summary>
        /// Guarda en bd la edicion de la configuracion 
        /// </summary>
        /// <param name="afemprcodi"></param>
        /// <param name="codEracmf"></param>
        /// <param name="codOsinergmin"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GuardarEdicionConfiguracion(string afemprcodi, string codEracmf, string codOsinergmin, string afalerta)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Editar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                bool existeConfig;
                bool existeCodOsinergmin;

                codEracmf = codEracmf.Trim();
                codOsinergmin = codOsinergmin.Trim();

                servAF.VerificarExistenciaEdicionConfiguracion(Int32.Parse(afemprcodi), codEracmf, codOsinergmin, out existeConfig, out existeCodOsinergmin);

                //Verificar existencia configuracion 
                if (existeConfig == false)
                {
                    //verificar si ya existe el codigo osinergmin
                    if (existeCodOsinergmin == false)
                    {
                        string usuario = User.Identity.Name;

                        servAF.GuardarEdicionConfiguracion(Int32.Parse(afemprcodi), codEracmf, codOsinergmin, usuario, afalerta);

                        model.Resultado = "1";
                    }
                    else
                    {
                        model.Resultado = "3";
                    }
                }
                else
                {
                    model.Resultado = "2";
                }
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";

                Log.Error(NameController, ex);
            }

            return Json(model);
        }

        #endregion

        #region Solicitudes

        /// <summary>
        /// Index Solicitudes
        /// </summary>
        /// <returns></returns>
        public ActionResult IndexSolicitudes()
        {
            if (!base.IsValidSesionView()) return RedirectToLogin();

            var model = new AnalisisFallasModel()
            {
                ListaEmpresa = servAF.ObtenerListaEmpresas()
            };

            ViewBag.FechaInicio = DateTime.Now.AddMonths(-2).ToString(Constantes.FormatoFecha);
            ViewBag.FechaFin = DateTime.Now.ToString(Constantes.FormatoFecha);

            return View(model);
        }

        /// <summary>
        /// Listar las solicitudes
        /// </summary>
        /// <param name="miDataM"></param>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult ListadoSolicitudes(AnalisisFallasModel miDataM)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();

                AfSolicitudRespDTO SolicitudDTO = new AfSolicitudRespDTO();
                SolicitudDTO.Empresa = miDataM.Emprcodi;
                SolicitudDTO.Di = miDataM.DI;
                SolicitudDTO.Df = miDataM.DF;
                SolicitudDTO.Sorespestadosol = miDataM.EstadoSoli;

                model.ListSolicitudes = servAF.ConsultarSolicitudesAsignacion(SolicitudDTO);
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }

            return PartialView(model);
        }

        /// <summary>
        /// Visualizar Archivos adjuntados
        /// </summary>
        /// <param name="codSoli"></param>
        /// <returns></returns>
        public PartialViewResult VerArchivosAdjuntados(int codSoli)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Grabar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                var oSolicitud = servAF.GetByIdAfSolicitudResp(codSoli);

                if (oSolicitud.Soresparchivootros != null)
                {
                    string[] separadas = oSolicitud.Soresparchivootros.Split(',');
                    List<string> cadena = new List<string>();
                    foreach (var item in separadas)
                    {
                        cadena.Add(item);
                    }

                    model.ListaArchivos = cadena;
                }
                else
                    model.ListaArchivos = new List<string>();

                model.ArchivoFinal = oSolicitud.Soresparchivoinf;

                ViewBag.Sorespcodi = codSoli;
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
            }
            return PartialView(model);
        }

        /// <summary>
        /// Descarga de archivos
        /// </summary>
        /// <param name="nameArchivo"></param>
        /// <param name="idSoli"></param>
        /// <param name="tipoArchivo"></param>
        /// <returns></returns>
        public FileStreamResult DescargarInforme(string nameArchivo, int idSoli, int tipoArchivo)
        {
            try
            {
                string nombreCarpeta = tipoArchivo == 1 ? ConstantesExtranetCTAF.SNombreCarpetaInforFinal : ConstantesExtranetCTAF.SNombreCarpetaOtrosArchivos;

                string pathBaseEventos = ConstantesExtranetCTAF.EventosFile + idSoli + "\\" + nombreCarpeta + "\\" + nameArchivo;

                Stream stream = FileServer.DownloadToStream(pathBaseEventos, null);
                int indexOf = nameArchivo.LastIndexOf('.');
                string extension = nameArchivo.Substring(indexOf + 1, nameArchivo.Length - indexOf - 1);

                if (stream != null)
                    return File(stream, extension, nameArchivo);
                else
                {
                    Log.Info("Download - No se encontro el archivo: " + pathBaseEventos);
                    return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// Popup Edición Solicitudes
        /// </summary>
        /// <param name="codSoli"></param>
        /// <returns></returns>
        public PartialViewResult EditarSolicitud(int codSoli)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Grabar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                // Ruta base de Eventos          
                string pathBaseEventos = base.PathFiles + "\\" + ConstantesExtranetCTAF.EventosFile;
                // Obtener un identificador unico
                string currentUserSession = HttpContext.Session.SessionID;

                // Crear carpeta temporal SNombreCarpetaTemporal
                string nombreCarpetaTemporal = ConstantesExtranetCTAF.SNombreCarpetaTemporal + "_" + currentUserSession;
                FileServer.CreateFolder(pathBaseEventos, nombreCarpetaTemporal, null); // para asegurarnos de su existencia
                string pathTemporal = pathBaseEventos + nombreCarpetaTemporal;
                FileServer fs = new FileServer();
                fs.DeleteFolder(pathTemporal);// borramos la carpeta    
                //FileServer.CreateFolder(pathBaseEventos, nombreCarpetaTemporal, null); // creamos la nueva carpeta vacía

                model.oSolicitudDTO = servAF.GetByIdAfSolicitudResp(codSoli);

                ViewBag.ListaEstado = new List<string> { "Pendiente", "Atendido" };
                ViewBag.CodSolicitud = codSoli;

                model.Modulo = ConstantesExtranetCTAF.SModuloEventos;
                var nombArchiv = codSoli.ToString() + ConstantesExtranetCTAF.SNombreCarpetaObservArchivos;
                string nombreArchivo = BuscarNombreArchivoEventosdPorCaracter(nombArchiv,
                                                                    pathBaseEventos);
                // para asegurarnos de su existencia
                if (String.IsNullOrEmpty(nombreArchivo))
                {
                    FileServer.CreateFolder(pathBaseEventos, nombreCarpetaTemporal, null);
                }
                else
                {
                    fs.CopiarDirectory(pathBaseEventos + nombreArchivo, pathTemporal);
                }
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
            }
            return PartialView(model);
        }

        /// <summary>
        /// Busca nombre de archivo de Intervenciones x caracter
        /// </summary>
        /// <param name="caracter">Caracter del nombre del archivo</param>
        /// <param name="path">Ruta del archivo</param>
        /// <returns>Cadena</returns>
        public string BuscarNombreArchivoEventosdPorCaracter(string caracter, string path)
        {
            base.ValidarSesionUsuario();

            var nombre = "";

            ArchivosModel modelArchivos = new ArchivosModel();
            modelArchivos.ListaDocumentos = FileServer.ListarArhivos(path, null);
            foreach (var item in modelArchivos.ListaDocumentos)
            {
                string[] subString = item.FileName.Split('_');
                if (String.Equals(subString[0], caracter))
                {
                    nombre = item.FileName;
                    break;
                }
            }

            return nombre;
        }

        /// <summary>
        /// Cargar archivos solicitudes
        /// </summary>
        /// <param name="sFecha"></param>
        /// <param name="sModulo"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult UploadSolicitudes(string sFecha, string sModulo)
        {
            base.ValidarSesionUsuario();

            AnalisisFallasModel model = new AnalisisFallasModel();
            string sNombreArchivo = string.Empty;
            string path = "";
            string sNombreOriginal = "";
            string rootPath = FileServer.GetDirectory();
            string currentUserSession = HttpContext.Session.SessionID;

            if (String.Equals(sModulo, ConstantesExtranetCTAF.SModuloEventos))
            {
                // Obtener path temporal
                string nombreCarpetaTemporal = ConstantesExtranetCTAF.SNombreCarpetaTemporal + "_" + currentUserSession;
                path = base.PathFiles + "//" + ConstantesExtranetCTAF.EventosFile + nombreCarpetaTemporal + "\\";
            }
            else
            {
                path = base.PathFiles + "//";
            }
            try
            {
                if (Request.Files.Count == 1)
                {
                    var file = Request.Files[0];
                    sNombreOriginal = file.FileName;
                    sNombreArchivo = sFecha + "_" + file.FileName;

                    if (FileServer.VerificarExistenciaFile(null, path + "\\" + sNombreArchivo, null))
                    {
                        FileServer.DeleteBlob(path + "\\" + sNombreArchivo, null);
                    }

                    FileServer.UploadFromStream(file.InputStream, path, sNombreArchivo, null);
                }
                model.Resultado = "1";
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }
            return Json(model);
        }

        /// <summary>
        /// Metodo para eliminar los archivos en un registro nuevo
        /// </summary>
        /// <param name="nombreArchivo">Nombre de archivo</param>
        /// <returns>Entero</returns>
        [HttpPost]
        public int EliminarArchivosNuevo(string nombreArchivo)
        {
            base.ValidarSesionUsuario();

            //path temporal   
            string currentUserSession = HttpContext.Session.SessionID;
            string nombreCarpetaTemporal = ConstantesExtranetCTAF.SNombreCarpetaTemporal + "_" + currentUserSession;
            string pathTemporal = base.PathFiles + "//" + ConstantesExtranetCTAF.EventosFile + nombreCarpetaTemporal;

            string nombrePath = string.Empty;

            ArchivosModel modelArvhivos = new ArchivosModel();
            modelArvhivos.ListaDocumentos = FileServer.ListarArhivos(pathTemporal + "\\", null);
            foreach (var item in modelArvhivos.ListaDocumentos)
            {
                string subString = item.FileName;
                if (subString == nombreArchivo)
                {
                    nombrePath = item.FileName;
                    break;
                }
            }

            if (FileServer.VerificarExistenciaFile(pathTemporal, nombrePath, null))
            {
                FileServer.DeleteBlob(pathTemporal + "//" + nombrePath, null);
            }

            return -1;
        }

        /// <summary>
        /// Permite mostrar los archivos del directorio Files para los nuevos registros
        /// </summary>
        /// <param name="sModulo">Modulo</param>
        /// <returns>Json</returns>
        [HttpPost]
        public JsonResult ListaArchivosNuevo(string sModulo)
        {
            base.ValidarSesionUsuario();

            ArchivosModel model = new ArchivosModel();

            string path = "";
            string currentUserSession = HttpContext.Session.SessionID;

            if (String.Equals(sModulo, ConstantesExtranetCTAF.SModuloEventos))
            {
                //Crear path temporal    
                string nombreCarpetaTemporal = ConstantesExtranetCTAF.SNombreCarpetaTemporal + "_" + currentUserSession;
                path = base.PathFiles + "//" + ConstantesExtranetCTAF.EventosFile + nombreCarpetaTemporal + "\\";
            }
            else
            {
                path = base.PathFiles + "//";
            }

            model.ListaDocumentos = FileServer.ListarArhivos(path, null);
            model.ListaDocumentosFiltrado = new List<FileData>();
            foreach (var item in model.ListaDocumentos)
            {
                model.ListaDocumentosFiltrado.Add(item);
            }
            return Json(model);
        }

        /// <summary>
        /// Editar solicitud
        /// </summary>
        /// <param name="solicitud"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult SolicitudUpdate(AfSolicitudRespDTO solicitud)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Grabar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                // Obtener un identificador unico
                string currentUserSession = HttpContext.Session.SessionID;

                // Crear carpeta temporal          
                string nombreCarpetaTemporal = ConstantesExtranetCTAF.SNombreCarpetaTemporal + "_" + currentUserSession;

                // Ruta base a mover           
                string pathTemporalEventos = base.PathFiles + "\\" + ConstantesExtranetCTAF.EventosFile + nombreCarpetaTemporal + "\\";

                // Ruta base de Eventos            
                string pathBaseEventos = base.PathFiles + "\\" + ConstantesExtranetCTAF.EventosFile;
                string fechaId = DateTime.Today.ToString(ConstantesAppServicio.FormatoFecha) + "_" + DateTime.Today.ToString("hh:mm:ss") + DateTime.Today.ToString("tt");

                fechaId = fechaId.Replace('/', '_').Replace(".", string.Empty).Replace(":", string.Empty).ToString();
                fechaId = fechaId.Trim();

                //archivos
                //Crear path temporal
                string path = "";
                path = base.PathFiles + "//" + ConstantesExtranetCTAF.EventosFile + nombreCarpetaTemporal + "\\";
                ArchivosModel modelArchivos = new ArchivosModel();
                modelArchivos.ListaDocumentos = FileServer.ListarArhivos(path, null);
                var archivoInforme = modelArchivos;

                var regDoc = archivoInforme.ListaDocumentos.FirstOrDefault();
                solicitud.Sorespobsarchivo = regDoc != null ? regDoc.FileName : string.Empty;

                //
                var oSolicitud = servAF.GetByIdAfSolicitudResp(solicitud.Sorespcodi);
                oSolicitud.Sorespestadosol = solicitud.Sorespestadosol;
                oSolicitud.Sorespobs = solicitud.Sorespobs;
                oSolicitud.Sorespobsarchivo = solicitud.Sorespobsarchivo;
                oSolicitud.Sorespfecmodificacion = DateTime.Now;
                oSolicitud.Sorespusumodificacion = User.Identity.Name;
                int Idresult = servAF.UpdateAfSolicitudResp(oSolicitud);

                //Enviar notificacion del resultado de la solicitud 
                //servAF.EnviarCorreoNotificacionCargaInformacionAgentes(afEvento, username, fechaRegistro, emprcodi, enviocodi);
                oSolicitud = servAF.GetByIdAfSolicitudResp(solicitud.Sorespcodi);
                var archivosAdjuntados = modelArchivos.ListaDocumentos;
                servAF.EnviarCorreoNotificacionResultadoSolicitud(User.Identity.Name, oSolicitud, archivosAdjuntados, pathTemporalEventos);

                FileServer fs = new FileServer();
                fs.CortarDirectory(pathTemporalEventos, pathBaseEventos + solicitud.Sorespcodi + "\\" + ConstantesExtranetCTAF.SNombreCarpetaObservArchivos);
                fs.DeleteFolder(pathTemporalEventos);

                if (Idresult > 0)
                {
                    model.Resultado = "1";
                    model.StrMensaje = "¡La Información se actualizó correctamente!";
                }
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }
            return Json(model);
        }

        /// <summary>
        /// Exportación de archivo Excel de reporte seleccionado
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="afecodi"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ExportarReporteSolicitudes(AnalisisFallasModel miDataM)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionUsuario();

                AfSolicitudRespDTO solicitudDTO = new AfSolicitudRespDTO();
                solicitudDTO.Empresa = miDataM.Emprcodi;
                solicitudDTO.Di = miDataM.DI;
                solicitudDTO.Df = miDataM.DF;
                solicitudDTO.Sorespestadosol = miDataM.EstadoSoli;

                model.NombreArchivo = servAF.GenerarReporteSolicitudesExcel(solicitudDTO, true);
                model.Resultado = "1";
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            return Json(model);
        }

        #endregion

        #region Configuración de plazos de carga de interrupción

        /// <summary>
        /// Configuracion
        /// </summary>
        /// <returns></returns>
        public ActionResult Configuracion()
        {
            if (!base.IsValidSesionView()) return base.RedirectToLogin();

            this.servAF.GetConfiguracionPlazo(out string valorEnPlazo, out string valorFueraPlazo);
            string valorHoraEjecucion = this.servAF.ObtenerHoraEjecucion();
            AnalisisFallasModel model = new AnalisisFallasModel();
            model.ValorEnPlazo = valorEnPlazo;
            model.ValorFinPlazo = valorFueraPlazo;
            model.ValorEjecucion = valorHoraEjecucion;
            model.FechEvento = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaFull2);

            return View(model);
        }

        /// <summary>
        /// Guardar hora de ejecucion
        /// </summary>
        /// <param name="horaejecucion"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GuardarConfiguracionPlazoExtranetCTAF(string horasEnPlazo, string horasFueraPlazo)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Grabar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                if (string.IsNullOrEmpty(horasEnPlazo) || string.IsNullOrEmpty(horasEnPlazo))
                {
                    throw new Exception("Debe ingresar números de horas válidas.");
                }

                this.servAF.ActualizarConfiguracionPlazo(horasEnPlazo, horasFueraPlazo, User.Identity.Name);
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            return Json(model);
        }

        #endregion

        #region Configuracion Hora ejecucion

        /// <summary>
        /// Guardar hora de ejecucion
        /// </summary>
        /// <param name="horaejecucion"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GuardarHoraEjecucionAlertaCTAF(string horaEjecucion)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            try
            {
                base.ValidarSesionJsonResult();
                if (!base.VerificarAccesoAccion(Acciones.Editar, base.UserName)) throw new Exception(Constantes.MensajePermisoNoValido);

                if (string.IsNullOrEmpty(horaEjecucion))
                {
                    throw new Exception("Debe ingresar números de horas válidas.");
                }

                this.servAF.ActualizarConfiguracionProceso(horaEjecucion);
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
            }

            return Json(model);
        }

        #endregion

        #endregion

        #region Mejoras CTAF
        /// <summary>
        /// Permite eliminar evento CTAF
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ObtieneCantFileEnviadosSco(int evencodi)
        {
            try
            {
                List<int> lstEventos = servAF.ListadoEventosAsoCtaf(evencodi).Select(x => x.Evencodi).Distinct().ToList();
                int cont = 0;
                foreach (var x in lstEventos)
                {
                    cont += servAF.ObtieneCantFileEnviadosSco(x);
                }
                return Json(cont);
            }
            catch
            {
                return Json(-1);
            }
        }
        /// <summary>
        /// Permite eliminar evento CTAF
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult eliminarEventoCtaf(int evencodi)
        {
            try
            {
                List<int> lstEventos = servAF.ListadoEventosAsoCtaf(evencodi).Select(x => x.Evencodi).Distinct().ToList();
                if (lstEventos.Count > 0)
                {
                    foreach (var item in lstEventos)
                    {
                        EventoDTO eventoCtaf = servAF.EventoDTOAsoCtaf(item);
                        this.EliminarCriteriosEvento(eventoCtaf.AFECODI);
                        servAF.eliminarEventoCtaf(item);
                    }
                }
                else
                    servAF.eliminarEventoCtaf(evencodi);//Elimina antiguos

                return Json(1);
            }
            catch
            {
                return Json(-1);
            }
        }
        /// <summary>
        /// Listado de informes Sco por evencodi
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListadoInformesSco(int evencodi)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();

            List<EveInformesScoDTO> lstInfFinal = new List<EveInformesScoDTO>();

            try
            {
                List<EmpresaInvolucradaDTO> lsEmpresaInvolucrada = appAnalisisFallas.ObtenerEmpresasInvolucradaxEvencodi(evencodi);
                List<EveInformesScoDTO> lstInformesFinales = servicioEvento.ListEveInformesScoxEvento(evencodi, 2).ToList(); //Lista de informes finales

                if (lstInformesFinales.Count == 0)
                {
                    List<EveInformesScoDTO> lstInformesPreliminares = servicioEvento.ListEveInformesScoxEvento(evencodi, 1).ToList();
                    if (lstInformesPreliminares.Count > 0)
                        lstInfFinal.AddRange(lstInformesPreliminares);
                }
                else
                    lstInfFinal.AddRange(lstInformesFinales);

                //Validamos si el informe es antiguo
                if (lsEmpresaInvolucrada.Count > 0)
                {
                    foreach (var x in lsEmpresaInvolucrada)
                    {
                        if (lstInfFinal.Count > 0)
                        {
                            int countInfo = lstInfFinal.Where(y => y.Afecodi == x.AFECODI && y.Portalweb == "S" && y.Emprcodi == x.EMPRCODI).Count();
                            if (countInfo == 0)
                            {
                                EveInformesScoDTO InfoInvolucrada = new EveInformesScoDTO();
                                InfoInvolucrada.Afecodi = x.AFECODI;
                                InfoInvolucrada.Emprcodi = x.EMPRCODI;
                                InfoInvolucrada.Emprnomb = x.EMPRNOMB;
                                InfoInvolucrada.Version = x.VERSION;
                                InfoInvolucrada.Cumplimiento = x.CUMPLIMIENTO;
                                InfoInvolucrada.Portalweb = x.AFIPUBLICA;
                                InfoInvolucrada.Afiversion = Convert.ToInt32(x.AFIVERSION);
                                InfoInvolucrada.Tipodata = "A";
                                //InfoInvolucrada.Eveinfcodigo = x.
                                lstInfFinal.Add(InfoInvolucrada);
                            }
                        }
                        else
                        {
                            EveInformesScoDTO InfoInvolucrada = new EveInformesScoDTO();
                            InfoInvolucrada.Afecodi = x.AFECODI;
                            InfoInvolucrada.Emprcodi = x.EMPRCODI;
                            InfoInvolucrada.Emprnomb = x.EMPRNOMB;
                            InfoInvolucrada.Version = x.VERSION;
                            InfoInvolucrada.Cumplimiento = x.CUMPLIMIENTO;
                            InfoInvolucrada.Portalweb = x.AFIPUBLICA;
                            InfoInvolucrada.Afiversion = Convert.ToInt32(x.AFIVERSION);
                            InfoInvolucrada.Tipodata = "A";
                            lstInfFinal.Add(InfoInvolucrada);
                        }

                    }
                }

                model.LstInformes = lstInfFinal;

                EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(evencodi);
                EquipoDTO oEquipoDTO = appAnalisisFallas.ObtenerEquipoPorEvento(evencodi);

                model.oEventoDTO = oEventoDTO;
                model.oEquipoDTO = oEquipoDTO;
                model.url = Url.Content("~");

                model.Handson = new HandsonModel();
                model.Handson.ListaMerge = new List<CeldaMerge>();
                model.Handson.ListaColWidth = new List<int>();
                model.Handson.ColCabecera = 0;
                model.Handson.FilasCabecera = 1;
                model.Handson.MaxCols = 7;
                model.Handson.MaxRows = model.LstInformes.Count;
                model.Handson.ReadOnly = false;

                model.Handson.Width = HandsonConstantes.ColWidth * 20;
                model.Handson.ListaFilaReadOnly = new List<bool>();
                model.ListaCambios = new List<CeldaCambios>();

                model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(250);
                model.Handson.ListaColWidth.Add(150);
                model.Handson.ListaColWidth.Add(150);
                model.Handson.ListaColWidth.Add(400);
                model.Handson.ListaColWidth.Add(90);
                model.Handson.ListaColWidth.Add(150);

                model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);
                int aux = 0;
                for (int y = 0; y < model.LstInformes.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux;

                        if (x == 0)
                        {
                            model.Handson.ListaExcelData[x][0] = "Acción";
                            model.Handson.ListaExcelData[x][1] = "Empresa";
                            model.Handson.ListaExcelData[x][2] = "Versión de Evento";
                            model.Handson.ListaExcelData[x][3] = "Cumplimiento";
                            model.Handson.ListaExcelData[x][4] = "Extensión";
                            model.Handson.ListaExcelData[x][5] = "Portal Web";
                            model.Handson.ListaExcelData[x][6] = "Código Informe Final";
                        }
                        else
                        {
                            if (x == y + 1)
                            {
                                if (model.LstInformes[y].Tipodata == "A")
                                    model.Handson.ListaExcelData[x][0] = model.LstInformes[y].Tipodata + "|" + model.LstInformes[y].Emprcodi.ToString() + "|" + model.LstInformes[y].Afiversion.ToString();
                                else if (model.LstInformes[y].Tipodata == "N")
                                    model.Handson.ListaExcelData[x][0] = model.LstInformes[y].Tipodata + "|" + model.LstInformes[y].Evencodi.ToString() + "|" + model.LstInformes[y].Env_Evencodi.ToString() + "|" + model.LstInformes[y].Eveinfcodi.ToString();

                                model.Handson.ListaExcelData[x][1] = model.LstInformes[y].Emprnomb;
                                model.Handson.ListaExcelData[x][2] = model.LstInformes[y].Version;
                                model.Handson.ListaExcelData[x][3] = model.LstInformes[y].Cumplimiento;
                                model.Handson.ListaExcelData[x][4] = model.LstInformes[y].Eveinfrutaarchivo;
                                model.Handson.ListaExcelData[x][5] = model.LstInformes[y].Portalweb + "|" + model.LstInformes[y].Eveinfcodi.ToString() + "|" + model.LstInformes[y].Emprcodi.ToString() + "|" + model.LstInformes[y].Afiversion.ToString() + "|" + model.LstInformes[y].Afecodi.ToString();
                                model.Handson.ListaExcelData[x][6] = model.LstInformes[y].Eveinfcodigo;
                                aux = x;
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                Log.Error(NameController, ex);
                return Json(model);
            }
            return Json(model);
        }
        /// <summary>
        /// Muestra el detalle del Evento de acuerdo al check seleccionado del listado de eventos
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult DetalleEventoSel(int evencodi, int afecodi)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(afecodi);
                model.grabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);
                EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(evencodi);
                if (oEventoDTO.EVENDESCCTAF != null)
                    oEventoDTO.EVENDESC = oEventoDTO.EVENDESCCTAF;
                EquipoDTO oEquipoDTO = appAnalisisFallas.ObtenerEquipoPorEvento(evencodi);
                model.oAnalisisFallaDTO = oAnalisisFallaDTO;
                model.oEventoDTO = oEventoDTO;
                model.oEquipoDTO = oEquipoDTO;
                model.ListaTrZonaSp7 = servScadaSp7.ListTrZonaSp7s();

                model.FechaInicioAnalisis = oEventoDTO.EVENINI.Value.ToString(Constantes.FormatoFecha);
                model.FechaHastaAnalisis = oEventoDTO.EVENINI.Value.ToString(Constantes.FormatoFecha);
                model.HoraIniAnalisis = oEventoDTO.EVENINI.Value.AddMinutes(-5).ToString(Constantes.FormatoHora);
                model.HoraFinAnalisis = oEventoDTO.EVENINI.Value.AddMinutes(5).ToString(Constantes.FormatoHora);

                model.ListaEveRecomobserv = appAnalisisFallas.ListEveRecomobserv(evencodi, 1);
                model.ListaObservaciones = appAnalisisFallas.ListEveRecomobserv(evencodi, 2);
            }
            catch (Exception ex)
            {
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                Log.Error(NameController, ex);
            }
            return PartialView(model);
        }

        /// <summary>
        /// Listar las interrupciones
        /// </summary>
        /// <param name="miDataM"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListarInterrupcionPorEventoSCO(AnalisisFallasModel miDataM)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();

            EventoDTO oEventoDTO = new EventoDTO();
            try
            {
                oEventoDTO.Afeanio = miDataM.Afeanio;
                oEventoDTO.Afecorr = miDataM.Afecorr;

                List<EventoDTO> listaInterrupciones = servAF.ListarInterrupcionPorEventoSCO(oEventoDTO);

                string url = Url.Content("~/");
                string listaHtml = servAF.ListarInterrupcionPorEventoSCOHtml(listaInterrupciones);

                model.Resultado = listaHtml;
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                model.Resultado = "-1";
                Log.Error(NameController, ex);
            }

            return Json(model);
        }
        /// <summary>
        /// Permite actualizar los informes que se verán en Portal Web
        /// </summary>
        /// <param name="objEvento"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ActualizarInformePortalWeb(List<EveInformesScoModel> objEvento)
        {
            try
            {
                if (objEvento == null || objEvento.Count == 0)
                    return Json(1);

                var archivosPorGrupo = new Dictionary<string, List<string>>();
                var infoGrupo = new Dictionary<string, (string fileserverPortal, string nombreZip, string foldername)>();

                foreach (var item in objEvento.OrderBy(x => x.PortalWeb))
                {
                    var informe = servicioEvento.ObtenerInformeSco(item.Eveninfcodi);
                    servicioEvento.ActualizarInformePortalWeb(item.Eveninfcodi, item.PortalWeb, item.Eveinfcodigo);

                    var empresainvolucrada = new EmpresaInvolucradaDTO
                    {
                        AFECODI = informe.Afecodi,
                        EMPRCODI = informe.Emprcodi,
                        AFIVERSION = informe.Afiversion == 2 ? "F" : "P",
                        CUMPLIMIENTO = informe.Cumplimiento == "P" ? "" : "F",
                        AFIEXTENSION = informe.Eveinfrutaarchivo.Split('.').Last(),
                        AFIFECHAINFEVE = informe.Lastdate.ToString(Constantes.FormatoFecha),
                        LASTUSER = informe.Lastuser,
                        LASTDATE = DateTime.Now
                    };

                    string etapa = informe.Afiversion == 1 ? "IPI" : "IF";
                    string foldername = string.Empty;

                    if (informe.Eveninffalla == "S")
                    {
                        var InformeFalla = servicioEvento.MostrarEventoInformeFalla(informe.Evencodi);
                        foldername = ConstantesEnviarCorreo.CarpetaInformeFallaN1 + "\\" + informe.Anio + "\\" + informe.Semestre + "\\" + informe.Diames + "\\E" + InformeFalla.Evencorr + "\\" + etapa + "\\" + informe.Emprnomb + "\\" + informe.Env_Evencodi + "\\";
                    }
                    else if (informe.Eveninffallan2 == "S")
                    {
                        var InformeFallaN2 = servicioEvento.MostrarEventoInformeFallaN2(informe.Evencodi);
                        foldername = ConstantesEnviarCorreo.CarpetaInformeFallaN2 + "\\" + informe.Anio + "\\" + informe.Semestre + "\\" + informe.Diames + "\\E" + InformeFallaN2.Evenn2corr + "\\" + etapa + "\\" + informe.Emprnomb + "\\" + informe.Env_Evencodi + "\\";
                    }

                    string filename = informe.Eveinfrutaarchivo;
                    string fileserverSco = Constantes.FileSystemSco;
                    //string fullPath = (foldername + filename).Trim().TrimEnd('.', ' ').Replace(" .pdf", ".pdf");
                    string fullPath = (foldername + filename);

                    string grupoClave = $"{empresainvolucrada.AFECODI}-{empresainvolucrada.EMPRCODI}-{empresainvolucrada.AFIVERSION}";
                    string newBlobName = $"EV-IEI-{informe.Anio}-{empresainvolucrada.AFECODI}-{empresainvolucrada.EMPRCODI}-{empresainvolucrada.AFIVERSION}-{informe.Eveinfcodi}.{empresainvolucrada.AFIEXTENSION}";
                    string fileserverPortal = Constantes.FileSystemPortal + "Post Operación\\Analisis de Fallas\\" + informe.Anio + "\\" + empresainvolucrada.AFECODI + "\\";

                    int contador = servAF.ObtieneCantInformes(empresainvolucrada.AFECODI, empresainvolucrada.EMPRCODI, empresainvolucrada.AFIVERSION);

                    if (item.PortalWeb == "N" && contador > 0)
                    {
                        servAF.EliminarEmpresaInvolucrada(empresainvolucrada);
                    }
                    else if (item.PortalWeb == "S")
                    {
                        if (contador == 0)
                        {
                            empresainvolucrada.AFIPUBLICA = "S";
                            empresainvolucrada.AFIEXTENSION = "zip";
                            servAF.InsertarEmpresaInvolucrada(empresainvolucrada);
                        }
                        else
                        {
                            servAF.EliminarEmpresaInvolucrada(empresainvolucrada);
                            empresainvolucrada.AFIPUBLICA = "S";
                            empresainvolucrada.AFIEXTENSION = "zip";
                            servAF.InsertarEmpresaInvolucrada(empresainvolucrada);

                        }

                        if (FileServer.VerificarExistenciaFile(null, fullPath, fileserverSco))
                        {
                            if (!archivosPorGrupo.ContainsKey(grupoClave))
                                archivosPorGrupo[grupoClave] = new List<string>();

                            archivosPorGrupo[grupoClave].Add(fullPath);

                            if (!infoGrupo.ContainsKey(grupoClave))
                            {
                                string zipName = $"EV-IEI-{informe.Anio}-{empresainvolucrada.AFECODI}-{empresainvolucrada.EMPRCODI}-{empresainvolucrada.AFIVERSION}.zip";
                                infoGrupo[grupoClave] = (fileserverPortal, zipName,foldername);
                            }
                        }
                    }
                }

                // Segunda pasada: generar ZIPs solo para los grupos válidos
                string relativeTempPath = Path.Combine("Areas", "Eventos", "Temp");
                string absoluteTempPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, relativeTempPath);
                if (Directory.Exists(absoluteTempPath))
                {
                    try
                    {
                        Directory.Delete(absoluteTempPath, true);
                    }
                    catch { }
                }


                foreach (var grupo in infoGrupo)
                {
                    var clave = grupo.Key;
                    var (fileserverPortal, nombreZip, foldername) = grupo.Value;                                    

                    var archivos = archivosPorGrupo.ContainsKey(clave) ? archivosPorGrupo[clave] : new List<string>();                                   

                    if (archivos.Any())
                    {
                        using (Ionic.Zip.ZipFile zip = new Ionic.Zip.ZipFile())
                        {
                            foreach (string sourceBlobName in archivos)
                            {
                                string fileName = Path.GetFileName(sourceBlobName);
                                Stream stream = FileServer.DownloadToStream(sourceBlobName, Constantes.FileSystemSco);

                                if (stream != null)
                                {
                                    if (stream.CanSeek) stream.Position = 0;
                                    zip.AddEntry(fileName, stream);
                                }
                            }
                            // GUARDAR TEMPORLAMENTE EL ZIP EN TEMP ZIP
                            if (!Directory.Exists(absoluteTempPath))
                            {
                                Directory.CreateDirectory(absoluteTempPath);
                            }
                            // Construye la ruta completa al archivo ZIP
                            string tempZipPath = Path.Combine(absoluteTempPath, nombreZip);

                            zip.Save(tempZipPath);
                            FileServer.RenameBlobCopyFile(tempZipPath, "", nombreZip, fileserverPortal);
                            
                        }
                    }
                }

                return Json(1);
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return Json(-1);
            }
        }






        /// <summary>
        /// Permite actualizar los informes que se verán en Portal Web
        /// </summary>
        /// <param name="objEvento"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ActualizarSecuenciaEvento(List<SecuenciaEventoDTO> objEvento)
        {
            try
            {
                SecuenciaEventoDTO oSecuenciaEventoDTO = new SecuenciaEventoDTO();
                AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
                AnalisisFallasModel model = new AnalisisFallasModel();

                model.lsEmpresaConfigurable = appAnalisisFallas.ObtenerListadoConfiguracionEmpresaComboBox();

                if (objEvento == null)
                {
                    return Json(1);
                }

                if (!objEvento.Any())
                {
                    return Json(1);
                }

                bool resultEliminacion = servAF.EliminarSecuenciaEvento(objEvento.FirstOrDefault().EVENCODI);

                foreach (var item in objEvento.Where(x => x.EVESECHORA != null && x.EVESECDESCRIPCION != null))
                {
                    oSecuenciaEventoDTO.EVENCODI = item.EVENCODI;
                    oSecuenciaEventoDTO.EVESECHORA = item.EVESECHORA;
                    oSecuenciaEventoDTO.EVESECFECHA = item.EVESECFECHA;

                    if (item.EVESECSECC == "CCO-COES")
                    {
                        oSecuenciaEventoDTO.EVESECSECC = "CCO-COES";
                    }

                    if (item.EVESECSECC == null)
                    {
                        oSecuenciaEventoDTO.EVESECSECC = "";
                    }
                    else
                    {
                        foreach (var combotext in model.lsEmpresaConfigurable)
                        {
                            if (item.EVESECSECC.Trim() == combotext.EmpresaSICCOES.ToString().Trim())
                            {
                                oSecuenciaEventoDTO.EVESECSECC = combotext.CodigoOsinergmin;
                                break;
                            }
                        }
                    }
                    



                    oSecuenciaEventoDTO.EVESECDESCRIPCION = item.EVESECDESCRIPCION;
                    oSecuenciaEventoDTO.EVESECINCMANIOB = item.EVESECINCMANIOB;
                    oSecuenciaEventoDTO.LASTUSER = base.User.Identity.Name;
                    oSecuenciaEventoDTO.LASTDATE = DateTime.Now;
                    bool result = servAF.InsertarSecuenciaEvento(oSecuenciaEventoDTO);
                }

                return Json(1);
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return Json(-1);
            }
        }
        /// Permite descargar los archivos desde file server de extranet
        /// </summary>
        /// <returns></returns>
        public FileStreamResult verArchivoSco(string evencodi, string env_evencodi, string eveinfcodi)
        {
            try
            {
                EveInformesScoDTO informe = servicioEvento.ObtenerInformeSco(Convert.ToInt32(eveinfcodi));
                string etapa = informe.Afiversion == 1 ? "IPI" : "IF";
                string foldername = string.Empty;
                string filename = informe.Eveinfrutaarchivo;
                EveInformefallaDTO InformeFalla = new EveInformefallaDTO();
                EveInformefallaN2DTO InformeFallaN2 = new EveInformefallaN2DTO();
                if (informe.Eveninffalla == "S")
                {
                    InformeFalla = servicioEvento.MostrarEventoInformeFalla(informe.Evencodi);
                    foldername = ConstantesEnviarCorreo.CarpetaInformeFallaN1 + "\\" + informe.Anio + "\\" + informe.Semestre + "\\" + informe.Diames + "\\E" + InformeFalla.Evencorr.ToString() + "\\" + etapa + "\\" + informe.Emprnomb + "\\" + env_evencodi.ToString() + "\\";
                }
                else if (informe.Eveninffallan2 == "S")
                {
                    InformeFallaN2 = servicioEvento.MostrarEventoInformeFallaN2(informe.Evencodi);
                    foldername = ConstantesEnviarCorreo.CarpetaInformeFallaN2 + "\\" + informe.Anio + "\\" + informe.Semestre + "\\" + informe.Diames + "\\E" + InformeFallaN2.Evenn2corr.ToString() + "\\" + etapa + "\\" + informe.Emprnomb + "\\" + env_evencodi.ToString() + "\\";
                }


                var path = Constantes.FileSystemSco;
                //var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + filename + "/";

                Stream stream = FileServer.DownloadToStream(foldername + filename, path);
                FileStream fs = stream as FileStream;

                if (stream != null)
                    return File(fs, System.Net.Mime.MediaTypeNames.Application.Octet, filename);
                else
                {
                    Log.Info("Ver - No se encontro el archivo para visualizar - análisis de fallas ");
                    return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return null;
            }
        }
        /// <summary>
        /// Listar las Tipo de interrupciones
        /// </summary>
        /// <param name="afecodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListarTipoInterrupcion(int afecodi)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            model.oEventoDTO = servAF.ObtenerInterrupcionByAfecodi(afecodi);
            model.ListaTipoInformacion = servAF.ListSiFuentedatosByFdatpadre(ConstantesExtranetCTAF.FdatcodiCTAFExtranet);
            if (model.oEventoDTO.ERACMF != "S")
                model.ListaTipoInformacion = model.ListaTipoInformacion.Where(x => x.Fdatcodi != (int)ConstantesExtranetCTAF.Fuentedato.InterrupcionActivacionERACMF).ToList();

            var jsonResult = Json(model);
            jsonResult.MaxJsonLength = int.MaxValue;
            return jsonResult;
        }
        /// <summary>
        /// Permite actualizar las recomendaciones que se visualizarán en el módulo gestión de recomendaciones
        /// </summary>
        /// <param name="objEvento"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ActualizarEventoAO(List<EmpresaRecomendacionDTO> objEvento)
        {
            SeguimientoRecomendacionAppServicio servSegRecomendacion = new SeguimientoRecomendacionAppServicio();
            SrmRecomendacionDTO entity = new SrmRecomendacionDTO();
            EmpresaRecomendacionDTO Recomendacion = new EmpresaRecomendacionDTO();
            AnalisisFallasModel modelo = new AnalisisFallasModel();

            try
            {
                if (objEvento.Count > 0)
                {
                    foreach (EmpresaRecomendacionDTO item in objEvento.OrderBy(x => x.AFRREC))
                    {
                        if (item.EVENRCMCTAF == "S")
                        {
                            Recomendacion = servAF.GetByEmpresaRecomendacion(item.AFRREC);

                            if (!servSegRecomendacion.VerificarExisteRecomendacionCtaf(item.AFRREC))
                            {
                                if (!servSegRecomendacion.VerificarExisteRecomendacionxEvento(Recomendacion.EVENCODI, Recomendacion.IDEQUIPO, Constantes.CriticidadRec, Constantes.EstadoRec))
                                {
                                    servAF.ActualizarRecomendacionAO(item.AFRREC, item.EVENRCMCTAF);
                                    servAF.ActualizarEventoAO(Recomendacion.EVENCODI, item.EVENRCMCTAF);

                                    entity.Srmreccodi = 0;
                                    entity.Evencodi = Recomendacion.EVENCODI;
                                    entity.Srmcrtcodi = Constantes.CriticidadRec;
                                    entity.Srmstdcodi = Constantes.EstadoRec;
                                    entity.Usercode = Constantes.UserRecomendaciones;
                                    entity.Srmrecfecharecomend = DateTime.ParseExact(Recomendacion.LASTDATE.Value.ToString("dd/MM/yyyy"), Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                                    entity.Srmrecfechavencim = DateTime.ParseExact(Recomendacion.LASTDATE.Value.ToString("dd/MM/yyyy"), Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                                    entity.Srmrecdianotifplazo = Constantes.PlazoNotiRec;
                                    entity.Srmrectitulo = Recomendacion.EVENASUNTO;
                                    entity.Srmrecrecomendacion = Recomendacion.AFRRECOMEND;
                                    entity.Srmrecactivo = "S";
                                    entity.Srmrecusucreacion = User.Identity.Name;
                                    entity.Srmrecfeccreacion = DateTime.Now;
                                    entity.Evenrcmctaf = item.EVENRCMCTAF;
                                    entity.Afrrec = Recomendacion.AFRREC;
                                    entity.Equicodi = Recomendacion.IDEQUIPO;

                                    int id = servSegRecomendacion.SaveSrmRecomendacionId(entity);

                                    modelo.Resultado = "1";
                                    modelo.StrMensaje = "Se guardaron los datos correctamente.";
                                }
                                else
                                {
                                    modelo.Resultado = "-1";
                                    modelo.StrMensaje = "No se puede enviar la recomendación " + Recomendacion.AFRRECOMEND + " porque ya existe una recomendación para su equipo en el módulo de Gestión de Recomendaciones.";
                                    return Json(modelo);
                                }
                            }
                            else
                            {
                                SrmRecomendacionDTO recom_ = servSegRecomendacion.GetByIdSrmRecomendacioncxAfrrec(item.AFRREC);
                                if (recom_ != null && recom_.Evenrcmctaf == "S" && recom_.Srmrecactivo == "N")
                                {
                                    servAF.ActualizarRecomendacionAO(item.AFRREC, item.EVENRCMCTAF);
                                    entity.Srmreccodi = recom_.Srmreccodi;
                                    entity.Evencodi = recom_.Evencodi;
                                    entity.Srmcrtcodi = Constantes.CriticidadRec;
                                    entity.Srmstdcodi = Constantes.EstadoRec;
                                    entity.Usercode = Constantes.UserRecomendaciones;
                                    entity.Srmrecfecharecomend = DateTime.ParseExact(Recomendacion.LASTDATE.Value.ToString("dd/MM/yyyy"), Constantes.FormatoFecha, CultureInfo.InvariantCulture);
                                    entity.Srmrecfechavencim = DateTime.ParseExact(Recomendacion.LASTDATE.Value.ToString("dd/MM/yyyy"), Constantes.FormatoFecha, CultureInfo.InvariantCulture);

                                    //Log.InfoFormat("Ingreso a insertar: " + item.AFRREC.ToString(),null);
                                    entity.Srmrecdianotifplazo = Constantes.PlazoNotiRec;
                                    entity.Srmrectitulo = Recomendacion.EVENASUNTO;
                                    entity.Srmrecrecomendacion = Recomendacion.AFRRECOMEND;
                                    entity.Srmrecactivo = "S";
                                    entity.Srmrecusucreacion = recom_.Srmrecusucreacion;
                                    entity.Srmrecfeccreacion = recom_.Srmrecfeccreacion;
                                    entity.Srmrecusumodificacion = User.Identity.Name;
                                    entity.Srmrecfecmodificacion = DateTime.Now;
                                    entity.Evenrcmctaf = item.EVENRCMCTAF;
                                    entity.Afrrec = Recomendacion.AFRREC;
                                    entity.Equicodi = Recomendacion.IDEQUIPO;
                                    servSegRecomendacion.UpdateSrmRecomendacion(entity);

                                    modelo.Resultado = "1";
                                    modelo.StrMensaje = "Se actualizaron los datos correctamente.";
                                }
                            }
                        }
                    }
                }
                return Json(modelo);
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                modelo.Resultado = "-1";
                modelo.StrMensaje = "No se pudo actualizar";
                return Json(modelo);
            }
        }
        /// <summary>
        /// Actualiza evento
        /// </summary>
        /// <param name="afrrec"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult EliminarEventoCtafxRecomendacion(int afecodi, int afrrec)
        {
            SeguimientoRecomendacionAppServicio servSegRecomendacion = new SeguimientoRecomendacionAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();
            List<SrmRecomendacionDTO> LstRecomendaciones = new List<SrmRecomendacionDTO>();
            try
            {
                servAF.ActualizarRecomendacionAO(afrrec, "N");
                SrmRecomendacionDTO recom = servSegRecomendacion.GetByIdSrmRecomendacioncxAfrrec(afrrec);
                if (recom != null)
                {
                    recom.Srmrecactivo = "N";
                    recom.Srmrecfecmodificacion = DateTime.Now;
                    recom.Srmrecusumodificacion = User.Identity.Name;
                    servSegRecomendacion.SaveSrmRecomendacionId(recom);
                }

                EventoDTO _evento = servAF.ObtenerInterrupcionByAfecodi(afecodi);
                EveEventoDTO evento = servicioEvento.GetByIdEveEvento((int)_evento.EVENCODI);
                LstRecomendaciones = servSegRecomendacion.ListadoRecomendacionesEventosCtaf((int)_evento.EVENCODI);
                int CantRecmd = LstRecomendaciones.Where(x => x.Evenrcmctaf == "S" && x.Srmrecactivo == "S").Count();

                if (CantRecmd == 0)
                {
                    servAF.ActualizarEventoAO(Convert.ToInt32(_evento.EVENCODI), "N");
                }
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                model.Detalle = ex.StackTrace;
                return Json(-1);
            }

            return Json(1);
        }


        /// <summary>
        /// Permite gestionar el guardado de las horas de coordinacion de normalización
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public JsonResult CopiarHorasCoordinacion(List<AfHoraCoordDTO> listansonHoraCoord, List<AfHoraCoordDTO> suministrolistaHansonHoraCoord)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            List<AfHoraCoordDTO> lstEmpresasSum = new List<AfHoraCoordDTO>();

            foreach (var isum in suministrolistaHansonHoraCoord)
            {
                List<AfHoraCoordDTO> lstEmpresas = servAF.ListEmpClixSuministradora(isum.EmpresaSuministradora);
                foreach (var lt_emp in lstEmpresas)
                {
                    lt_emp.Afhofechadescripcion = isum.Afhofechadescripcion;
                    lstEmpresasSum.Add(lt_emp);
                }
            }

            foreach (var item in listansonHoraCoord)
            {
                var existe = lstEmpresasSum.Find(x => x.Emprnombr == item.AfEmprenomb);
                if (existe != null)
                {
                    item.Afhofechadescripcion = existe.Afhofechadescripcion;
                }

            }

            return Json(listansonHoraCoord);
            //try
            //{
            //    base.ValidarSesionJsonResult();

            //    bool tienePermisoGrabar = base.VerificarAccesoAccion(Acciones.Grabar, base.UserName);

            //    bool resultado = servAF.GuardarHorasCoordinacion(User.Identity.Name, alistaHansonHoraCoord);
            //    model.Resultado = "La operación se realizó con éxito.";

            //}
            //catch (Exception ex)
            //{
            //    Log.Error(NameController, ex);
            //    model.Resultado = "-1";
            //    model.StrMensaje = ex.Message;
            //    model.Detalle = ex.StackTrace;
            //}
        }

        /// <summary>
        /// //Descarga el archivo excel
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public virtual FileResult Exportar()
        {
            string nombreArchivo = Request["fi"];
            string ruta = AppDomain.CurrentDomain.BaseDirectory + RutaDirectorio.RutaCargaInformeEvento;
            string fullPath = ruta + nombreArchivo;
            return File(fullPath, ConstantesAppServicio.ExtensionExcel, nombreArchivo);
        }
        /// <summary>
        /// Descargar Formato Suministradoras
        /// </summary>
        /// <param name="listaInterrupcionSuministro"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult DescargarFormatoInterrupcionSuministradora(List<AfHoraCoordDTO> listaHorasCoordSuministradora)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                base.ValidarSesionJsonResult();

                string rutaBase = AppDomain.CurrentDomain.BaseDirectory + RutaDirectorio.RutaCargaInformeEvento;

                string nombreArchivoCompleto = servAF.ObtenerNombreArchivoCoorSuministradora(rutaBase, listaHorasCoordSuministradora);
                model.Resultado = nombreArchivoCompleto;
                //  model.NRegistros = 1;
            }
            catch (Exception ex)
            {
                model.StrMensaje = "Se produjo un error: " + ex.Message;
                // model.NRegistros = -1;
                Log.Error(NameController, ex);
            }
            return Json(model);
        }



        /// <summary>
        /// Upload Interrupcion Suministro
        /// </summary>
        /// <param name="formCollection"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult UploadInterrupcionSuministro()
        {

            List<AfHoraCoordDTO> lstHoraCoordSuministradora = new List<AfHoraCoordDTO>();
            try
            {
                base.ValidarSesionJsonResult();


                Stream stremExcel = (Request.Files.Count >= 1) ? Request.Files[0].InputStream : null;


                lstHoraCoordSuministradora = servAF.ObtenerDataFechaCoorSuministradora(stremExcel);

                //if (stremExcel != null)
                //    lstInterrSuminExcel = _analisisFallasAppServicio.ObtenerInterrupcionSuministroDeDataExcel(stremExcel, idtipoinformacion);

                //if (idtipoinformacion == (int)ConstantesExtranetCTAF.Fuentedato.InterrupcionActivacionERACMF)
                //{
                //    var lstEracmf = _analisisFallasAppServicio.ObtenerDataEracmfEvento(afecodi, emprcodi, 0);

                //    model.ListaInterrupSuministro = _analisisFallasAppServicio.ObtenerInterrupcionSuministroUnionDb(afecodi, emprcodi, lstInterrSuminExcel);
                //}
                //else if (idtipoinformacion == (int)ConstantesExtranetCTAF.Fuentedato.Interrupcion || idtipoinformacion == (int)ConstantesExtranetCTAF.Fuentedato.ReduccionSuministros)
                //{
                //    model.ListaInterrupSuministro = lstInterrSuminExcel;
                //}
            }
            catch (Exception ex)
            {
                //model.StrMensaje = "Se produjo un error: " + ex.Message;
                //model.NRegistros = -1;
                Log.Error(NameController, ex);
            }

            return Json(lstHoraCoordSuministradora);
        }

        /// <summary>
        /// Muestra la pagina inical de búsqueda de equpos
        /// </summary>
        /// <returns></returns>
        public PartialViewResult BusquedaEquipo(string famcodi)
        {
            BusquedaEquipoModel model = new BusquedaEquipoModel();
            model.ListaEmpresa = this.servicio.ListarEmpresas().Where(x => x.EMPRCODI != 0 && x.EMPRCODI != -1).ToList();

            if (string.IsNullOrEmpty(famcodi))
            {
                model.ListaFamilia = this.servicio.ListarFamilias().ToList();
            }
            else
            {
                string famcodicoma = Constantes.CaracterComa + famcodi + Constantes.CaracterComa;
                model.ListaFamilia = this.servicio.ListarFamilias().Where(x => famcodicoma.IndexOf(Constantes.CaracterComa.ToString()
                    + x.FAMCODI + Constantes.CaracterComa.ToString()) >= 0).ToList();
            }

            return PartialView(model);
        }
        /// <summary>
        /// Muestra las areas de una empresa
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult AreaEquipo(int idEmpresa, string idFamilia)
        {
            BusquedaEquipoModel model = new BusquedaEquipoModel();
            model.ListaArea = servicio.ObtenerAreaPorEmpresa(idEmpresa, idFamilia).ToList();
            return PartialView(model);
        }
        /// <summary>
        /// Muestra el resultado de la busqueda
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idFamilia"></param>
        /// <param name="idArea"></param>
        /// <param name="filtro"></param>
        /// <param name="nroPagina"></param>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult ResultadoEquipo(int idEmpresa, string idFamilia, int idArea, string filtro, int nroPagina)
        {
            BusquedaEquipoModel model = new BusquedaEquipoModel();
            model.ListaEquipo = servicio.BuscarEquipoEvento(idEmpresa, idArea, idFamilia, filtro, nroPagina, Constantes.PageSize).ToList();
            return PartialView(model);
        }
        /// <summary>
        /// Permite mostrar el paginado 
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idFamilia"></param>
        /// <param name="idArea"></param>
        /// <param name="filtro"></param>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult PaginadoEquipo(int idEmpresa, string idFamilia, int idArea, string filtro)
        {
            BusquedaEquipoModel model = new BusquedaEquipoModel();
            model.IndicadorPagina = false;
            int nroRegistros = servicio.ObtenerNroFilasBusquedaEquipo(idEmpresa, idArea, idFamilia, filtro);

            if (nroRegistros > Constantes.NroPageShow)
            {
                int pageSize = Constantes.PageSize;
                int nroPaginas = (nroRegistros % pageSize == 0) ? nroRegistros / pageSize : nroRegistros / pageSize + 1;
                model.NroPaginas = nroPaginas;
                model.NroMostrar = Constantes.NroPageShow;
                model.IndicadorPagina = true;
            }

            return PartialView(model);
        }
        #endregion

        /// <summary>
        /// Permite obtener una lista filtrada por Zona (Ubicación)
        /// </summary>
        /// <param name="zonaCodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListaCanalPorZona(int zonaCodi, int tipo)
        {
            List<TrCanalSp7DTO> listCanales = new List<TrCanalSp7DTO>();
            AnalisisFallasModel model = new AnalisisFallasModel();
            model.ListaTrCanalSp7 = servScadaSp7.GetByZonaTrCanalSp7(zonaCodi);

            foreach (TrCanalSp7DTO canal in model.ListaTrCanalSp7)
            {
                bool bExisteCanal = listCanales.Exists(x => x.Canalcodi == canal.Canalcodi);

                if (bExisteCanal == false && (canal.Canalnomb.Split('/')[4].Trim() == "P" || canal.Canalnomb.Split('/')[4].Trim() == "Q") && (tipo == 1 || tipo == 2 || tipo == 3))
                    listCanales.Add(canal);
                else if (bExisteCanal == false && canal.Canalnomb.Split('/')[4].Trim() == "INT" && tipo == 4)
                    listCanales.Add(canal);
            }
            return Json(listCanales);

        }

        /// <summary>
        /// Listado de informes Sco por evencodi
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ExcelCondicionesPreviasTransformadores(int evencodi, int afecodi)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            string tipo = "T";
            try
            {
                List<EveCondPreviaDTO> listado = servAF.ObtenerListaCondicionesPrevias(evencodi, tipo);
                foreach (var item in listado)
                {
                    TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);

                    item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                }
                model.Handson = new HandsonModel();
                model.Handson.ListaMerge = new List<CeldaMerge>();
                model.Handson.ListaColWidth = new List<int>();
                model.Handson.ColCabecera = 0;
                model.Handson.FilasCabecera = 1;
                model.Handson.MaxCols = 6;
                model.Handson.MaxRows = listado.Count == 0 ? 4 : listado.Count + 2;
                model.Handson.ReadOnly = false;

                model.Handson.Width = HandsonConstantes.ColWidth * 20;
                model.Handson.ListaFilaReadOnly = new List<bool>();
                model.ListaCambios = new List<CeldaCambios>();

                model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);

                model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);

                int aux = 0;
                if (listado.Count > 0)
                {
                    for (int y = 0; y < listado.Count; y++)
                    {
                        for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                        {
                            if (aux > x)
                                x = aux;

                            if (x == 0)
                            {
                                model.Handson.ListaExcelData[x][0] = "N°";
                                model.Handson.ListaExcelData[x][1] = "Código";
                                model.Handson.ListaExcelData[x][2] = "S.E.";
                                model.Handson.ListaExcelData[x][3] = "Nivel de Tensión (KV)";
                                model.Handson.ListaExcelData[x][4] = "Potencia Activa (MW)";
                                model.Handson.ListaExcelData[x][5] = "Potencia Reactiva (MVAr)";
                            }
                            else
                            {
                                if (x == y + 1)
                                {
                                    model.Handson.ListaExcelData[x][0] = x.ToString();
                                    model.Handson.ListaExcelData[x][1] = listado[y].EVECONDPRCODIGOUNIDAD;
                                    model.Handson.ListaExcelData[x][2] = listado[y].EVECONDPRSUBESTACIONDE;
                                    model.Handson.ListaExcelData[x][4] = listado[y].EVECONDPRTENSION == 0 ? "" : listado[y].EVECONDPRTENSION.ToString();
                                    model.Handson.ListaExcelData[x][5] = listado[y].EVECONDPRPOTENCIAMW == null ? "" : listado[y].EVECONDPRPOTENCIAMW.ToString();
                                    model.Handson.ListaExcelData[x][6] = listado[y].EVECONDPRPOTENCIAMVAR == null ? "" : listado[y].EVECONDPRPOTENCIAMVAR.ToString();
                                    aux = x;
                                    break;
                                }
                            }
                        }
                    }
                }
                else
                {
                    model.Handson.ListaExcelData[0][0] = "N°";
                    model.Handson.ListaExcelData[0][1] = "Código";
                    model.Handson.ListaExcelData[0][2] = "S.E.";
                    model.Handson.ListaExcelData[0][3] = "Nivel de Tensión (KV)";
                    model.Handson.ListaExcelData[0][4] = "Potencia Activa (MW)";
                    model.Handson.ListaExcelData[0][5] = "Potencia Reactiva (MVAr)";
                }
            }
            catch (Exception ex) { }
            return Json(model);
        }

        /// <summary>
        /// Listado de Senalizacion Protecciones Sco por evencodi
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ExcelSenalizacionProtecciones(int evencodi)
        {
            JsonResult respuesta;
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                model.Handson = new HandsonModel();
                model.Handson.ListaMerge = new List<CeldaMerge>();
                model.Handson.ListaColWidth = new List<int>();
                model.Handson.ColCabecera = 0;
                model.Handson.FilasCabecera = 1;
                model.Handson.MaxCols = 7;
                //model.Handson.MaxRows = 3;

                model.Handson.ReadOnly = false;

                model.Handson.Width = HandsonConstantes.ColWidth * 20;
                model.Handson.ListaFilaReadOnly = new List<bool>();
                model.ListaCambios = new List<CeldaCambios>();

                model.Handson.ListaColWidth.Add(10);
                model.Handson.ListaColWidth.Add(150);
                model.Handson.ListaColWidth.Add(150);
                model.Handson.ListaColWidth.Add(150);
                model.Handson.ListaColWidth.Add(200);
                model.Handson.ListaColWidth.Add(150);
                model.Handson.ListaColWidth.Add(50);

                AnalisisFallasAppServicio proteccionAppServicio = new AnalisisFallasAppServicio();
                List<SiSenializacionDTO> lstSenializacion = new List<SiSenializacionDTO>();
                lstSenializacion = proteccionAppServicio.ListarSenializacionesProteccion(evencodi);
                model.Handson.MaxRows = lstSenializacion.Count + 1;
                model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);

                model.Handson.ListaExcelData[0][0] = "N°";
                model.Handson.ListaExcelData[0][1] = "SubEstación";
                model.Handson.ListaExcelData[0][2] = "Equipo";
                model.Handson.ListaExcelData[0][3] = "Código";
                model.Handson.ListaExcelData[0][4] = "Señalizaciones";
                model.Handson.ListaExcelData[0][5] = "Interruptor";
                model.Handson.ListaExcelData[0][6] = "A/C";

                for (int x = 1; x <= lstSenializacion.Count; x++)
                {
                    model.Handson.ListaExcelData[x][0] = lstSenializacion[x - 1].CodigoSenializacion.ToString();
                    model.Handson.ListaExcelData[x][1] = lstSenializacion[x - 1].SubEstacion;
                    model.Handson.ListaExcelData[x][2] = lstSenializacion[x - 1].Equipo;
                    model.Handson.ListaExcelData[x][3] = lstSenializacion[x - 1].Codigo;
                    model.Handson.ListaExcelData[x][4] = lstSenializacion[x - 1].Senializaciones;
                    model.Handson.ListaExcelData[x][5] = lstSenializacion[x - 1].Interruptor;
                    model.Handson.ListaExcelData[x][6] = lstSenializacion[x - 1].CodigoAC != null ? lstSenializacion[x - 1].CodigoAC.ToString() : "";
                }
            }
            catch (Exception ex)
            {
            }
            respuesta = Json(model);
            return respuesta;
        }


        /// <summary>
        /// Grabación de Cuadro de Senalizacion Protecciones
        /// </summary>
        /// <param name="codigoEvento"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GrabarSenializacionProteccion(string[][] dataExcel, int codigoEvento)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            AnalisisFallasAppServicio proteccionAppServicio = new AnalisisFallasAppServicio();
            proteccionAppServicio.EliminarSenializacionProteccion(codigoEvento);

            try
            {
                for (int x = 1; x < dataExcel.Length; x++)
                {
                    var subEstacion = dataExcel[x][1];
                    var equipo = dataExcel[x][2];
                    var codigo = dataExcel[x][3];
                    var senializaciones = dataExcel[x][4];
                    var interruptor = dataExcel[x][5];
                    var codigoAC = dataExcel[x][6];

                    if (string.IsNullOrEmpty(subEstacion) && 
                        string.IsNullOrEmpty(equipo) &&
                        string.IsNullOrEmpty(codigo ) && 
                        string.IsNullOrEmpty(senializaciones) &&
                        string.IsNullOrEmpty(interruptor) &&
                        string.IsNullOrEmpty(codigoAC))
                    {
                        continue;
                    }

                    proteccionAppServicio.GrabarSenializacionProteccion(new SiSenializacionDTO
                    {
                        CodigoEvento = codigoEvento,
                        SubEstacion = subEstacion,
                        Equipo = equipo,
                        Codigo = codigo,
                        Senializaciones = senializaciones,
                        Interruptor = interruptor,
                        CodigoAC = codigoAC,
                        UsuarioCreacion = base.User.Identity.Name
                    });
                }
                model.Resultado = "1";
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.ToString();
            }

            return Json(model);
        }


        /// <summary>
        /// Permite generar el archivo del reporte
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult GenerarPDF(int id, int tipoDocumento)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            
            var valor = "TO_DATE('" + DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss") + "','dd/mm/yyyy hh24:mi:ss')";
            var respuesta = DateTime.Now.ToString("dd/MM/yyyy hh:mm:ss").ToString();

            try
            {
                //tipoDocumento 1=CITACION 2=ACTA
                string fileWord = string.Empty;
                string filePdf = string.Empty;
                string NombreTipo = string.Empty;
                string NombreExtra = string.Empty;

                AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(id);
                List<EventoDTO> ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
                List<EventoDTO> LstEvento = appAnalisisFallas.ObtenerEventoCitacion(id);

                if (tipoDocumento == 1 && LstEvento[0].EVENTIPOFALLA == "P")
                {
                    NombreTipo = "CITACION P ";
                }

                else if (tipoDocumento == 1 && LstEvento[0].EVENTIPOFALLA == "N")
                {
                    NombreTipo = "CITACION NP ";
                }

                var resultActualizarFechaConvocatoriaCitacionReunion = false;

                if (tipoDocumento == 1)
                {
                    resultActualizarFechaConvocatoriaCitacionReunion = appAnalisisFallas.ActualizarFechaConvocatoriaCitacionReunion(id, valor);
                    NombreExtra = "EV-COC-";
                }
                else if (tipoDocumento == 2)
                {
                    resultActualizarFechaConvocatoriaCitacionReunion = appAnalisisFallas.ActualizarFechaActaReunion(id, valor);
                    NombreTipo = "ACTA EV-";
                    NombreExtra = "EV-CTA-";
                }
                else if (tipoDocumento == 3)
                {
                    resultActualizarFechaConvocatoriaCitacionReunion = appAnalisisFallas.ActualizarFechaInformeCTAFReunion(id, valor);
                    NombreTipo = "CT-AF_EV-";
                    NombreExtra = "EV-CTI-";
                }

                //string filename = NombreTipo + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".pdf";
                fileWord = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, ListaEventosSco, ConstantesEvento.SubCarpetaCtaf) + NombreTipo + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".docx";
                filePdf = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, ListaEventosSco, ConstantesEvento.SubCarpetaCtafPublica) + NombreTipo + oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + oAnalisisFallaDTO.AFEANIO + ".pdf";

                if (!System.IO.File.Exists(fileWord))
                {
                    return Json(new { result = "-2", responseText = "No existe el documento en formato .docx. Genere el documento." }, JsonRequestBehavior.AllowGet);
                }

                /*var app = new word.Application();
                var doc = app.Documents.Open(fileWord);

                try
                {
                    if (System.IO.File.Exists(filePdf))
                    {
                        System.IO.File.Delete(filePdf);
                    }

                    doc.SaveAs2(filePdf, WdSaveFormat.wdFormatPDF);
                    doc.Close();
                    app.Quit();
                }
                catch (Exception ex)
                {
                    doc.Close();
                    app.Quit();

                    Log.Error(NameController, ex);
                    return Json(new { result = "-1", responseText = ex.ToString() }, JsonRequestBehavior.AllowGet);
                }*/

                using (RichEditDocumentServer wordProcessor = new RichEditDocumentServer())
                {
                    wordProcessor.LoadDocument(fileWord);
                    
                    if (System.IO.File.Exists(filePdf)) System.IO.File.Delete(filePdf);

                    wordProcessor.ExportToPdf(filePdf);
                }

                if (resultActualizarFechaConvocatoriaCitacionReunion)
                {
                    var fileStream = System.IO.File.OpenRead(filePdf);

                    try
                    {
                        var filename = NombreExtra + oAnalisisFallaDTO.AFEANIO.ToString() + "-" + oAnalisisFallaDTO.AFECODI.ToString() + ".pdf";
                        grabarArchivoWithConfigKey(Constantes.FileSystemPortal, filename, fileStream, oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECODI.ToString());
                    }
                    catch(Exception ex) 
                    {
                        Log.Error(NameController, ex);
                    }
                    finally
                    {
                        fileStream.Dispose();
                        fileStream.Close();
                    }
                }

                return Json(new { result = "1", responseText = respuesta }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex.ToString() }, JsonRequestBehavior.AllowGet);
            }
        }

        public string ObtenerCarpetaSEV(AnalisisFallaDTO oAnalisisFallaDTO, List<EventoDTO> ListaEventosSco, string SubCarpeta)
        {
            string fileserverSev = Constantes.FileSystemSev;
            string fileSev = string.Empty;

            EventoDTO primer_evento = ListaEventosSco.OrderBy(c => c.EVENINI).FirstOrDefault();
            if (primer_evento != null)
                oAnalisisFallaDTO = servicioEvento.ObtenerAnalisisFalla(Convert.ToInt32(primer_evento.EVENCODI));

            string aaaa = primer_evento.EVENINI.Value.ToString("yyyy");
            //string asunto = (RemoveAccentsWithRegEx(Regex.Replace(oAnalisisFallaDTO.EVENASUNTO, "[\t@,\\\"/:*?<>|\\\\]", string.Empty)).TrimEnd()).TrimStart();
            //string asunto = (RemoveAccentsWithRegEx(oAnalisisFallaDTO.EVENASUNTO).TrimEnd()).TrimStart();

            //int maxcaracteres = Convert.ToInt32(ConfigurationManager.AppSettings["MaxCaractAF"]);
            //if (asunto.Length > maxcaracteres)
            //    asunto = asunto.Substring(0, maxcaracteres).Trim();

            //string NombreEvento = oAnalisisFallaDTO.CODIGO + "_" + asunto + "_" + oAnalisisFallaDTO.EVENINI.Value.ToString("dd.MM.yyyy");
            string NombreEvento = oAnalisisFallaDTO.CODIGO + "_" + oAnalisisFallaDTO.EVENINI.Value.ToString("dd.MM.yyyy");
            DateTime FechaFinSem1 = DateTime.ParseExact(ConstantesEvento.FechaFinSem1 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
            DateTime FechaInicioSem2 = DateTime.ParseExact(ConstantesEvento.FechaInicioSem2 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
            DateTime FechaFinSem2 = DateTime.ParseExact(ConstantesEvento.FechaFinSem2 + aaaa, Constantes.FormatoFecha, CultureInfo.InvariantCulture);
            DateTime FechaEvento = DateTime.ParseExact(oAnalisisFallaDTO.EVENINI.Value.ToString("dd/MM/yyyy"), Constantes.FormatoFecha, CultureInfo.InvariantCulture);
            string semestre = string.Empty;

            if (FechaEvento <= FechaFinSem1)
            {
                semestre = "Semestre I";
            }
            else if (FechaEvento >= FechaInicioSem2 && FechaEvento <= FechaFinSem2)
            {
                semestre = "Semestre II";
            }

            fileSev = fileserverSev + aaaa + "\\" + semestre + "\\" + NombreEvento + "\\" + SubCarpeta;
            string file = aaaa + "\\" + semestre + "\\" + NombreEvento + "\\" + SubCarpeta;

            if (!System.IO.File.Exists(fileSev))
            {
                FileServer.CreateFolder(string.Empty, file, fileserverSev);
            }

            return fileSev;
        }

        /// <summary>
        /// Listado de Asistentes Responsables
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ExcelCondicionesPreviasAsistenteResponsable(int evencodi)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                model.Handson = new HandsonModel();
                model.Handson.ListaMerge = new List<CeldaMerge>();
                model.Handson.ListaColWidth = new List<int>();
                model.Handson.ColCabecera = 0;
                model.Handson.FilasCabecera = 1;
                model.Handson.MaxCols = 4;
                model.Handson.MaxRows = 3;
                model.Handson.ReadOnly = false;

                model.Handson.Width = HandsonConstantes.ColWidth * 20;
                model.Handson.ListaFilaReadOnly = new List<bool>();
                model.ListaCambios = new List<CeldaCambios>();

                model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                //model.Handson.ListaColWidth.Add(120);
                //model.Handson.ListaColWidth.Add(120);
                //model.Handson.ListaColWidth.Add(120);

                model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);

                for (int x = 0; x < model.Handson.MaxRows; x++)
                {
                    if (x == 0)
                    {
                        model.Handson.ListaExcelData[x][0] = "Eliminar";
                        model.Handson.ListaExcelData[x][1] = "Editar";
                        model.Handson.ListaExcelData[x][2] = "Empresa";
                        model.Handson.ListaExcelData[x][3] = "Asistente";
                    }

                }
            }
            catch (Exception ex) { }
            return Json(model);
        }

        /// <summary>
        /// Listado de informes Sco por evencodi
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListadoAsistenteResponsableSco(int evencodi)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();

            List<ReunionResponsableDTO> lstInfFinal = new List<ReunionResponsableDTO>();

            try
            {
                List<ReunionResponsableDTO> lstResponsableAsistente = appAnalisisFallas.ObtenerListaReunionResponsable(evencodi).Where(m => m.EMPRCODI != 1).ToList();

                List<EmpresaDTO> oListaEmpresas = new List<EmpresaDTO>();
                oListaEmpresas = this.servicio.ListarEmpresas().Where(x => x.EMPRCODI != 0 && x.EMPRCODI != -1).ToList();
                foreach (var item in lstResponsableAsistente)
                {
                    if (oListaEmpresas.Where(m => m.EMPRCODI == item.EMPRCODI).Count() != 0)
                    {
                        item.RESPNAME = oListaEmpresas.Where(m => m.EMPRCODI == item.EMPRCODI).FirstOrDefault().EMPRNOMB;
                    }
                }

                if (lstResponsableAsistente.Count != 0)
                {
                    lstInfFinal.AddRange(lstResponsableAsistente);
                }

                model.LstAsistenteResponsable = lstInfFinal;

                model.url = Url.Content("~");

                model.Handson = new HandsonModel();
                model.Handson.ListaMerge = new List<CeldaMerge>();
                model.Handson.ListaColWidth = new List<int>();
                model.Handson.ColCabecera = 0;
                model.Handson.FilasCabecera = 1;
                model.Handson.MaxCols = 3;
                model.Handson.MaxRows = model.LstAsistenteResponsable.Count;
                model.Handson.ReadOnly = false;

                model.Handson.Width = HandsonConstantes.ColWidth * 20;
                model.Handson.ListaFilaReadOnly = new List<bool>();
                model.ListaCambios = new List<CeldaCambios>();

                //model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(100);
                model.Handson.ListaColWidth.Add(400);
                model.Handson.ListaColWidth.Add(400);

                model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);
                int aux = 0;
                for (int y = 0; y < model.LstAsistenteResponsable.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux;

                        if (x == 0)
                        {
                            //model.Handson.ListaExcelData[x][0] = "Editar";
                            model.Handson.ListaExcelData[x][0] = "ELIMINAR";
                            model.Handson.ListaExcelData[x][1] = "EMPRESA";
                            model.Handson.ListaExcelData[x][2] = "ASISTENTE";
                        }
                        else
                        {
                            if (x == y + 1)
                            {

                                model.Handson.ListaExcelData[x][0] = model.LstAsistenteResponsable[y].EVENCODI + "|" + model.LstAsistenteResponsable[y].EMPRCODI;
                                //model.Handson.ListaExcelData[x][1] = model.LstAsistenteResponsable[y].EVERESPONCODI.ToString();
                                model.Handson.ListaExcelData[x][1] = model.LstAsistenteResponsable[y].RESPNAME;
                                model.Handson.ListaExcelData[x][2] = model.LstAsistenteResponsable[y].EVEPARTICIPANTE == null ? "" : model.LstAsistenteResponsable[y].EVEPARTICIPANTE;
                                aux = x;
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                Log.Error(NameController, ex);
                return Json(model);
            }
            return Json(model);
        }

        /// <summary>
        /// Listado de informes Sco por evencodi
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListadoSenializacionProteccion(int evencodi)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                List<SiSenializacionDTO> lstSenializacion = appAnalisisFallas.ListarSenializacionesProteccion(evencodi);

                model.ListaSenializacionProteccion = lstSenializacion;

                model.url = Url.Content("~");

                model.Handson = new HandsonModel();
                model.Handson.ListaMerge = new List<CeldaMerge>();
                model.Handson.ListaColWidth = new List<int>();
                model.Handson.ColCabecera = 0;
                model.Handson.FilasCabecera = 1;
                model.Handson.MaxCols = 3;
                model.Handson.MaxRows = model.LstAsistenteResponsable.Count;
                model.Handson.ReadOnly = false;

                model.Handson.Width = HandsonConstantes.ColWidth * 20;
                model.Handson.ListaFilaReadOnly = new List<bool>();

                //model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(100);
                model.Handson.ListaColWidth.Add(400);
                model.Handson.ListaColWidth.Add(400);

                model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);
                int aux = 0;
                for (int y = 0; y < model.ListaSenializacionProteccion.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux;

                        if (x == 0)
                        {
                            //model.Handson.ListaExcelData[x][0] = "Editar";
                            model.Handson.ListaExcelData[x][0] = "ELIMINAR";
                            model.Handson.ListaExcelData[x][1] = "EMPRESA";
                            model.Handson.ListaExcelData[x][2] = "ASISTENTE";
                        }
                        else
                        {
                            if (x == y + 1)
                            {

                                model.Handson.ListaExcelData[x][0] = model.ListaSenializacionProteccion[y].CodigoSenializacion.ToString();
                                model.Handson.ListaExcelData[x][1] = model.ListaSenializacionProteccion[y].CodigoEvento.ToString();
                                model.Handson.ListaExcelData[x][2] = model.ListaSenializacionProteccion[y].SubEstacion;
                                aux = x;
                                break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                Log.Error(NameController, ex);
                return Json(model);
            }
            return Json(model);
        }

        /// <summary>
        /// Listado de informes Sco por evencodi
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListadoSecuenciasEventoSco(int evencodi)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();

            List<SecuenciaEventoDTO> lstInfFinal = new List<SecuenciaEventoDTO>();

            try
            {
                List<SecuenciaEventoDTO> lstSecuenciaEvento = appAnalisisFallas.ObtenerListaSecuenciaEventos(evencodi);

                model.lsEmpresaConfigurable = appAnalisisFallas.ObtenerListadoConfiguracionEmpresaComboBox();

                if (lstSecuenciaEvento != null)
                {
                    foreach (var item in lstSecuenciaEvento)
                    {
                        if (item.EVESECSECC != "CCO-COES" && item.EVESECSECC != "" && item.EVESECSECC != null)
                        {
                            //item.EVECOEMP = 1;
                            item.EVESECSECC = model.lsEmpresaConfigurable.Where(m => m.CodigoOsinergmin == item.EVESECSECC).FirstOrDefault().EmpresaSICCOES.Trim();
                        }
                        //if (model.lsEmpresaConfigurable.Where(m => m.CodigoOsinergmin == item.EVESECSECC).Count() != 0)
                        //{
                        //    item.EVECOEMP = model.lsEmpresaConfigurable.Where(m => m.CodigoOsinergmin == item.EVESECSECC).FirstOrDefault().Emprcodi;
                        //}
                    }
                    if (lstSecuenciaEvento.Count != 0)
                    {
                        lstInfFinal.AddRange(lstSecuenciaEvento);
                    }
                }

                model.LstSecuenciaEvento = lstInfFinal.OrderBy(x => x.EVESECUENCIACODI).ToList();

                model.url = Url.Content("~");

                model.Handson = new HandsonModel();
                model.Handson.ListaMerge = new List<CeldaMerge>();
                model.Handson.ListaColWidth = new List<int>();
                model.Handson.ColCabecera = 0;
                model.Handson.FilasCabecera = 1;
                model.Handson.MaxCols = 5;
                model.Handson.MaxRows = model.LstSecuenciaEvento.Count + 1;
                model.Handson.ReadOnly = false;

                model.Handson.Width = HandsonConstantes.ColWidth * 20;
                model.Handson.ListaFilaReadOnly = new List<bool>();
                model.ListaCambios = new List<CeldaCambios>();

                model.Handson.ListaColWidth.Add(150);
                model.Handson.ListaColWidth.Add(150);
                model.Handson.ListaColWidth.Add(250);
                model.Handson.ListaColWidth.Add(600);
                model.Handson.ListaColWidth.Add(150);

                model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);

                int aux = 0;

                for (int y = 0; y < model.LstSecuenciaEvento.Count + 2; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                        {
                            x = aux;
                        }

                        if (x == 0)
                        {
                            model.Handson.ListaExcelData[x][0] = "Fecha";
                            model.Handson.ListaExcelData[x][1] = "Hora";
                            model.Handson.ListaExcelData[x][2] = "S.E./C.C.";
                            model.Handson.ListaExcelData[x][3] = "Descripción";
                            model.Handson.ListaExcelData[x][4] = "Incl. En Maniobras";
                        }
                        else
                        {
                            if (x == y + 1)
                            {
                                if (y < model.LstSecuenciaEvento.Count)
                                {
                                    model.Handson.ListaExcelData[x][0] = model.LstSecuenciaEvento[y].EVESECFECHA;
                                    model.Handson.ListaExcelData[x][1] = model.LstSecuenciaEvento[y].EVESECHORA;
                                    model.Handson.ListaExcelData[x][2] = model.LstSecuenciaEvento[y].EVESECSECC;
                                    model.Handson.ListaExcelData[x][3] = model.LstSecuenciaEvento[y].EVESECDESCRIPCION;
                                    model.Handson.ListaExcelData[x][4] = model.LstSecuenciaEvento[y].EVESECINCMANIOB ? "1" : "0";
                                    aux = x;
                                    break;
                                }
                                else
                                {
                                    model.Handson.ListaExcelData[x][0] = "";
                                    model.Handson.ListaExcelData[x][1] = "";
                                    model.Handson.ListaExcelData[x][2] = "";
                                    model.Handson.ListaExcelData[x][3] = "";
                                    model.Handson.ListaExcelData[x][4] = "0";
                                    aux = x;
                                    break;
                                }

                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                model.Resultado = "-1";
                model.StrMensaje = ex.Message;
                Log.Error(NameController, ex);
                return Json(model);
            }
            return Json(model);
        }

        /// <summary>
        /// Permite obtener una lista filtrada Empresa Configuracion
        /// </summary>
        /// <param name="zonaCodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListaEmpresaConfiguracion()
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            List<EmpresaReporte> listEmpresa = new List<EmpresaReporte>();
            AnalisisFallasModel model = new AnalisisFallasModel();
            model.lsEmpresaConfigurable = appAnalisisFallas.ObtenerListadoConfiguracionEmpresaComboBox().OrderBy(x=>x.EmpresaSICCOES).ToList();
            listEmpresa.AddRange(model.lsEmpresaConfigurable);
            List<string> SECC = new List<string>();
            SECC.Add("");
            SECC.Add("CCO-COES");
            foreach (var item in listEmpresa)
            {
                SECC.Add(item.EmpresaSICCOES);
            }
            return Json(SECC);
        }

        /// <summary>
        /// Listado de informes Sco por evencodi
        /// </summary>
        /// <param name="evencodi"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListadoInterruptoresDescargadores(int evencodi, int tipo)
        {
            AnalisisFallasModel model = this.ExcelInterruptoresDescargadores(evencodi, tipo);
            return Json(model);
        }

        public AnalisisFallasModel ExcelInterruptoresDescargadores(int evencodi, int tipo)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();

            List<EveintdescargaDTO> listado = appAnalisisFallas.ObtenerListaInterruptoresDescargadores(evencodi, tipo);

            model.Handson = new HandsonModel();
            model.Handson.ListaMerge = new List<CeldaMerge>();
            model.Handson.ListaColWidth = new List<int>();
            model.Handson.ColCabecera = 0;
            model.Handson.FilasCabecera = 1;
            model.Handson.MaxCols = 9;
            model.Handson.MaxRows = listado.Count == 0 ? 4 : listado.Count + 2;
            model.Handson.ReadOnly = false;

            model.Handson.Width = HandsonConstantes.ColWidth * 20;
            model.Handson.ListaFilaReadOnly = new List<bool>();
            model.ListaCambios = new List<CeldaCambios>();

            model.Handson.ListaColWidth.Add(300);
            model.Handson.ListaColWidth.Add(200);
            model.Handson.ListaColWidth.Add(200);
            model.Handson.ListaColWidth.Add(80);
            model.Handson.ListaColWidth.Add(80);
            model.Handson.ListaColWidth.Add(80);
            model.Handson.ListaColWidth.Add(80);
            model.Handson.ListaColWidth.Add(80);
            model.Handson.ListaColWidth.Add(80);

            string Vr = "R";
            string Vs = "S";
            string Vt = "T";

            model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);
            
            int aux = 0;

            if (listado.Count > 0)
            {
                for (int y = 0; y < listado.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                        {
                            x = aux;
                        }

                        if (x == 0)
                        {
                            model.Handson.ListaExcelData[x][0] = "Subestación";
                            model.Handson.ListaExcelData[x][1] = "Celda";

                            if (tipo == 1)
                            {
                                model.Handson.ListaExcelData[x][2] = "Código Interruptor";
                            }
                            else
                            {
                                model.Handson.ListaExcelData[x][2] = "Código Pararrayo";
                            }

                            model.Handson.ListaExcelData[x][3] = "Antes";
                            model.Handson.ListaExcelData[x][4] = string.Empty;
                            model.Handson.ListaExcelData[x][5] = string.Empty;
                            model.Handson.ListaExcelData[x][6] = "Después";
                            model.Handson.ListaExcelData[x][7] = string.Empty;
                            model.Handson.ListaExcelData[x][8] = string.Empty;
                        }
                        else if (x == 1)
                        {
                            model.Handson.ListaExcelData[x][0] = string.Empty;
                            model.Handson.ListaExcelData[x][1] = string.Empty;
                            model.Handson.ListaExcelData[x][2] = string.Empty;
                            model.Handson.ListaExcelData[x][3] = Vr;
                            model.Handson.ListaExcelData[x][4] = Vs;
                            model.Handson.ListaExcelData[x][5] = Vt;
                            model.Handson.ListaExcelData[x][6] = Vr;
                            model.Handson.ListaExcelData[x][7] = Vs;
                            model.Handson.ListaExcelData[x][8] = Vt;
                        }
                        else
                        {
                            if (x == y + 2)
                            {
                                model.Handson.ListaExcelData[x][0] = listado[y].EVEINTDESSUBESTACION;
                                model.Handson.ListaExcelData[x][1] = listado[y].EVEINTDESCELDA;
                                model.Handson.ListaExcelData[x][2] = listado[y].EVEINTDESCODIGO;
                                model.Handson.ListaExcelData[x][3] = listado[y].EVEINTDESR_ANTES.ToString();
                                model.Handson.ListaExcelData[x][4] = listado[y].EVEINTDESS_ANTES.ToString();
                                model.Handson.ListaExcelData[x][5] = listado[y].EVEINTDEST_ANTES.ToString();
                                model.Handson.ListaExcelData[x][6] = listado[y].EVEINTDESR_DESPUES.ToString();
                                model.Handson.ListaExcelData[x][7] = listado[y].EVEINTDESS_DESPUES.ToString();
                                model.Handson.ListaExcelData[x][8] = listado[y].EVEINTDEST_DESPUES.ToString();
                                aux = x;
                                break;
                            }
                        }
                    }
                }
            }
            else
            {
                model.Handson.ListaExcelData[0][0] = "Subestación";
                model.Handson.ListaExcelData[0][1] = "Celda";

                if (tipo == 1)
                {
                    model.Handson.ListaExcelData[0][2] = "Código Interruptor";
                }
                else
                {
                    model.Handson.ListaExcelData[0][2] = "Código Pararrayo";
                }

                model.Handson.ListaExcelData[0][3] = "Antes";
                model.Handson.ListaExcelData[0][4] = string.Empty;
                model.Handson.ListaExcelData[0][5] = string.Empty;
                model.Handson.ListaExcelData[0][6] = "Después";
                model.Handson.ListaExcelData[0][7] = string.Empty;
                model.Handson.ListaExcelData[0][8] = string.Empty;

                model.Handson.ListaExcelData[1][0] = string.Empty;
                model.Handson.ListaExcelData[1][1] = string.Empty;
                model.Handson.ListaExcelData[1][2] = string.Empty;
                model.Handson.ListaExcelData[1][3] = Vr;
                model.Handson.ListaExcelData[1][4] = Vs;
                model.Handson.ListaExcelData[1][5] = Vt;
                model.Handson.ListaExcelData[1][6] = Vr;
                model.Handson.ListaExcelData[1][7] = Vs;
                model.Handson.ListaExcelData[1][8] = Vt;
            }

            return model;
        }

        /// <summary>
        /// Registrar información en tabla eve_int_descarga
        /// </summary>
        /// <param name="dataExcelInterruptores"></param>
        /// <param name="dataExcelDescargadores"></param>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult InsertarInterruptoresDescargadores(string[][] dataExcelInterruptores, string[][] dataExcelDescargadores, int evencodi)
        {
            EveintdescargaDTO Entidad = new EveintdescargaDTO();
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            try
            {
                appAnalisisFallas.EliminarInterruptoresDescargadores(evencodi, 1);

                for (int x = 2; x < dataExcelInterruptores.Length; x++)
                {
                    if (!string.IsNullOrEmpty(dataExcelInterruptores[x][0]) &&
                        !string.IsNullOrEmpty(dataExcelInterruptores[x][1]) &&
                        !string.IsNullOrEmpty(dataExcelInterruptores[x][2]) &&
                        !string.IsNullOrEmpty(dataExcelInterruptores[x][3]) &&
                        !string.IsNullOrEmpty(dataExcelInterruptores[x][4]) &&
                        !string.IsNullOrEmpty(dataExcelInterruptores[x][5]) &&
                        !string.IsNullOrEmpty(dataExcelInterruptores[x][6]) &&
                        !string.IsNullOrEmpty(dataExcelInterruptores[x][7]) &&
                        !string.IsNullOrEmpty(dataExcelInterruptores[x][8]))
                    {
                        Entidad.EVENCODI = evencodi;
                        Entidad.EVEINTDESTIPO = 1;
                        Entidad.EVEINTDESCELDA = dataExcelInterruptores[x][1];
                        Entidad.EVEINTDESCODIGO = dataExcelInterruptores[x][2];
                        Entidad.EVEINTDESSUBESTACION = dataExcelInterruptores[x][0];
                        Entidad.EVEINTDESR_ANTES = Convert.ToInt32(dataExcelInterruptores[x][3]);
                        Entidad.EVEINTDESS_ANTES = Convert.ToInt32(dataExcelInterruptores[x][4]);
                        Entidad.EVEINTDEST_ANTES = Convert.ToInt32(dataExcelInterruptores[x][5]);
                        Entidad.EVEINTDESR_DESPUES = Convert.ToInt32(dataExcelInterruptores[x][6]);
                        Entidad.EVEINTDESS_DESPUES = Convert.ToInt32(dataExcelInterruptores[x][7]);
                        Entidad.EVEINTDEST_DESPUES = Convert.ToInt32(dataExcelInterruptores[x][8]);
                        Entidad.LASTUSER = base.User.Identity.Name;
                        Entidad.LASTDATE = DateTime.Now;
                        appAnalisisFallas.InsertarInterruptoresDescargadores(Entidad);
                    }
                }

                appAnalisisFallas.EliminarInterruptoresDescargadores(evencodi, 2);

                for (int j = 2; j < dataExcelDescargadores.Length; j++)
                {
                    if (!string.IsNullOrEmpty(dataExcelDescargadores[j][0]) &&
                        !string.IsNullOrEmpty(dataExcelDescargadores[j][1]) &&
                        !string.IsNullOrEmpty(dataExcelDescargadores[j][2]) &&
                        !string.IsNullOrEmpty(dataExcelDescargadores[j][3]) &&
                        !string.IsNullOrEmpty(dataExcelDescargadores[j][4]) &&
                        !string.IsNullOrEmpty(dataExcelDescargadores[j][5]) &&
                        !string.IsNullOrEmpty(dataExcelDescargadores[j][6]) &&
                        !string.IsNullOrEmpty(dataExcelDescargadores[j][7]) &&
                        !string.IsNullOrEmpty(dataExcelDescargadores[j][8]))
                    {
                        Entidad.EVENCODI = evencodi;
                        Entidad.EVEINTDESTIPO = 2;
                        Entidad.EVEINTDESCELDA = dataExcelDescargadores[j][1];
                        Entidad.EVEINTDESCODIGO = dataExcelDescargadores[j][2];
                        Entidad.EVEINTDESSUBESTACION = dataExcelDescargadores[j][0];
                        Entidad.EVEINTDESR_ANTES = Convert.ToInt32(dataExcelDescargadores[j][3]);
                        Entidad.EVEINTDESS_ANTES = Convert.ToInt32(dataExcelDescargadores[j][4]);
                        Entidad.EVEINTDEST_ANTES = Convert.ToInt32(dataExcelDescargadores[j][5]);
                        Entidad.EVEINTDESR_DESPUES = Convert.ToInt32(dataExcelDescargadores[j][6]);
                        Entidad.EVEINTDESS_DESPUES = Convert.ToInt32(dataExcelDescargadores[j][7]);
                        Entidad.EVEINTDEST_DESPUES = Convert.ToInt32(dataExcelDescargadores[j][8]);
                        Entidad.LASTUSER = base.User.Identity.Name;
                        Entidad.LASTDATE = DateTime.Now;
                        appAnalisisFallas.InsertarInterruptoresDescargadores(Entidad);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Registrar información en tabla eve_int_descarga
        /// </summary>
        /// <param name="dataExcelInterruptores"></param>
        /// <param name="dataExcelDescargadores"></param>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult ListadoScada(List<int> listCanalCodi, int evencodi)
        {
            TiempoRealAppServicio servTiempoReal = new TiempoRealAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();
            EventoDTO oEventoDTO = servAF.ObtenerEvento(evencodi);
            string finicio = Convert.ToDateTime(oEventoDTO.EVENINI).AddMinutes(-10).ToString(Constantes.FormatoFechaFull);
            string ffin = Convert.ToDateTime(oEventoDTO.EVENINI).ToString(Constantes.FormatoFechaFull);
            DateTime fechaIni = DateTime.ParseExact(finicio, Constantes.FormatoFechaFull, CultureInfo.InvariantCulture);
            DateTime fechaFin = DateTime.ParseExact(ffin, Constantes.FormatoFechaFull, CultureInfo.InvariantCulture);
            string canalNombre = string.Empty;
            string filtro = "T";
            List<DatosSP7DTO> listaTrCircularSp7GraficaFiltrada = new List<DatosSP7DTO>();
            List<TrCanalSp7DTO> listCanales = new List<TrCanalSp7DTO>();

            foreach (int canalCodi in listCanalCodi)
            {
                var objCanal = servScadaSp7.GetByIdTrCanalSp7(canalCodi);
                canalNombre = objCanal.Canalnomb;
                string tipoDato = canalNombre.Substring(canalNombre.Length - 1, 1);
                //List<TrCircularSp7DTO> listaCircularSp7 = new List<TrCircularSp7DTO>();
                List<TrCircularSp7DTO> listaCircularSp7 = servTiempoReal.BuscarOperacionesRangoCircularSp7(canalCodi.ToString(), fechaIni, fechaFin, -1, -1);
                List<DatosSP7DTO> ListaTrCircularSp7Grafica = new List<DatosSP7DTO>();
                if (listaCircularSp7 != null)
                    ListaTrCircularSp7Grafica  = ConvertirDto(listaCircularSp7, (int)objCanal.Zonacodi);

                //asignando calidad
                foreach (var item in ListaTrCircularSp7Grafica)
                {
                    item.CalidadTexto = "";
                    if ((item.Calidad >= 0 && item.Calidad <= 15) || (item.Calidad >= 64 && item.Calidad <= 79) ||
                        (item.Calidad >= 128 && item.Calidad <= 143) || (item.Calidad >= 192 && item.Calidad <= 207))
                    {
                        item.CalidadTexto = "VALIDO";
                        if (filtro == "T" || filtro == "V")
                            listaTrCircularSp7GraficaFiltrada.Add(item);
                        continue;
                    }
                    else
                    {
                        //CONGELADO
                        if ((item.Calidad >= 16 && item.Calidad <= 31) || (item.Calidad >= 80 && item.Calidad <= 95) ||
                            (item.Calidad >= 144 && item.Calidad <= 159) || (item.Calidad >= 208 && item.Calidad <= 223))
                        {
                            item.CalidadTexto = "CONGELADO";
                            if (filtro == "T" || filtro == "C")
                                listaTrCircularSp7GraficaFiltrada.Add(item);
                            continue;
                        }
                        else
                        {
                            //INDETERMINADO
                            if ((item.Calidad >= 32 && item.Calidad <= 47) || (item.Calidad >= 96 && item.Calidad <= 111) ||
                                (item.Calidad >= 160 && item.Calidad <= 175) || (item.Calidad >= 224 && item.Calidad <= 239))
                            {
                                item.CalidadTexto = "INDETERMINADO";
                                if (filtro == "T" || filtro == "I")
                                    listaTrCircularSp7GraficaFiltrada.Add(item);
                                continue;
                            }
                            else
                            {
                                //NO VALIDO
                                if ((item.Calidad >= 48 && item.Calidad <= 63) ||
                                    (item.Calidad >= 112 && item.Calidad <= 127) ||
                                    (item.Calidad >= 176 && item.Calidad <= 191) ||
                                    (item.Calidad >= 240 && item.Calidad <= 255))
                                {
                                    item.CalidadTexto = "NO VALIDO";
                                    if (filtro == "T" || filtro == "N")
                                        listaTrCircularSp7GraficaFiltrada.Add(item);
                                    continue;
                                }
                            }
                        }
                    }
                }
            }

            foreach (int pCanalCodi in listCanalCodi)
            {
                var objCanal = servScadaSp7.GetByIdTrCanalSp7(pCanalCodi);
                listCanales.Add(objCanal);
            }

            model.listaTrCircularSp7GraficaFiltrada = listaTrCircularSp7GraficaFiltrada;
            model.listCanalesSp7 = listCanales;

            return PartialView(model);
        }

        public List<DatosSP7DTO> ConvertirDto(List<TrCircularSp7DTO> listaIni, int zonacodi)
        {
            List<DatosSP7DTO> lista = new List<DatosSP7DTO>();
            try
            {
                foreach (TrCircularSp7DTO item in listaIni)
                {
                    DatosSP7DTO entity = new DatosSP7DTO();
                    entity.Canalcodi = item.Canalcodi;
                    entity.Fecha = item.Canalfechahora;
                    entity.FechaSistema = item.Canalfhsist;
                    entity.Valor = (decimal)item.Canalvalor;
                    entity.Zonacodi = zonacodi;

                    lista.Add(entity);
                }

            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
            }


            return lista;
        }

        public List<DatosSP7DTO> ConvertirDtoV2(List<TrCircularSp7DTO> listaIni, int zonaCodi, string zonaDescription, string canalNombre, string canalAbreviatura)
        {
            List<DatosSP7DTO> lista = new List<DatosSP7DTO>();
            try
            {
                foreach (TrCircularSp7DTO item in listaIni)
                {
                    DatosSP7DTO entity = new DatosSP7DTO
                    {
                        Canalcodi = item.Canalcodi,
                        Fecha = item.Canalfechahora,
                        FechaSistema = item.Canalfhsist,
                        Valor = (decimal)item.Canalvalor,
                        Zonacodi = zonaCodi,
                        ZonaDescription = zonaDescription,
                        CanalDescription = canalNombre,
                        CodigoEquipo = canalAbreviatura
                    };

                    lista.Add(entity);
                }

            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
            }


            return lista;
        }

        /// <summary>
        /// Inserta Condiciones Previas al Evento
        /// </summary>
        /// <param name="dataExcel"></param>
        /// <param name="tipo"></param>
        /// <param name="zona"></param>
        /// <param name="evencodi"></param>
        /// <param name="fecha"></param>
        /// <param name="canal"></param>
        /// <param name="valor"></param>
        /// <param name="tipoProceso"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult InsertarCondicionPrevia(string[][] dataExcel, string tipo, string zona, int evencodi, string fecha, string canal, string valor, int tipoProceso, string canalScada)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            
            List<EveCondPreviaDTO> listaCondivos = new List<EveCondPreviaDTO>();
            int iniContador = 1;

            try
            {
                if (tipo == "L" || tipo == "C")
                    iniContador = 2;

                if (tipoProceso == 1)
                {
                    var arrayScada = canalScada.Split('/');
                    EveCondPreviaDTO entidadDTO = servAF.GetByIdCanalZona(evencodi, tipo, Convert.ToInt32(zona), canal.Trim());
                    if (entidadDTO != null)
                    {
                        if (arrayScada[4].Trim() == "P")
                            entidadDTO.EVECONDPRPOTENCIAMW = valor;
                        else if (arrayScada[4].Trim() == "Q")
                            entidadDTO.EVECONDPRPOTENCIAMVAR = valor;
                        entidadDTO.LASTUSER = base.User.Identity.Name;
                        entidadDTO.LASTDATE = DateTime.Now;
                        servAF.ActualizarCondicionPrevia(entidadDTO);
                    }
                    else
                    {
                        EveCondPreviaDTO entity = new EveCondPreviaDTO();
                        entity.EVENCODI = evencodi;
                        entity.EVECONDPRTIPO = tipo;
                        entity.EVECONDPRSUBESTACIONCENT = Convert.ToInt32(zona);
                        entity.EVECONDPRCODIGOUNIDAD = canal.Trim();
                        if (arrayScada[4].Trim() == "P")
                            entity.EVECONDPRPOTENCIAMW = valor;
                        else if (arrayScada[4].Trim() == "Q")
                            entity.EVECONDPRPOTENCIAMVAR = valor;
                        entity.EVECONDPRTENSION = Convert.ToDecimal(arrayScada[2].Trim());
                        entity.LASTUSER = base.User.Identity.Name;
                        entity.LASTDATE = DateTime.Now;

                        TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(Convert.ToInt32(zona));
                        entity.EVECONDPRCENTRALDE = zonasp7.Zonaabrev.Trim();

                        listaCondivos.Add(entity);
                    }
                }
                else if (tipoProceso == 2)
                {
                    List<EveCondPreviaDTO> lstCondPrevias = servAF.ObtenerListaCondicionesPrevias(evencodi, tipo);
                    foreach (EveCondPreviaDTO itemCond in lstCondPrevias)
                    {
                        int contador = 0;
                        for (int x = iniContador; x < dataExcel.Length; x++)
                        {
                            if (dataExcel[x][0] != "" && itemCond.EVECONDPRCODI == Convert.ToInt32(dataExcel[x][0]))
                                contador++;
                        }
                        if (contador == 0)
                            servAF.EliminarCondicionPrevia(itemCond.EVECONDPRCODI);
                    }

                    for (int x = iniContador; x < dataExcel.Length; x++)
                    {
                        EveCondPreviaDTO entityCP = new EveCondPreviaDTO();
                        if (dataExcel[x][0] != "" && dataExcel[x][0] != null)
                        {
                            entityCP = servAF.GetByIdCondicionPrevia(Convert.ToInt32(dataExcel[x][0]));
                            if (tipo == "L")
                            {
                                entityCP.EVECONDPRCODIGOUNIDAD = dataExcel[x][2] == null ? "" : dataExcel[x][2].Trim();
                                entityCP.EVECONDPRCENTRALDE = dataExcel[x][3];
                                entityCP.EVECONDPRSUBESTACIONA = dataExcel[x][4];
                                entityCP.EVECONDPRPOTENCIAMW = dataExcel[x][5];
                                entityCP.EVECONDPRPOTENCIAMVAR = dataExcel[x][6];
                            }
                            else if (tipo == "C")
                            {
                                entityCP.EVECONDPRCODIGOUNIDAD = dataExcel[x][3] == null ? "" :dataExcel[x][3].Trim();
                                entityCP.EVECONDPRCENTRALDE = dataExcel[x][2];
                                entityCP.EVECONDPRPOTENCIAMW = dataExcel[x][4];
                                entityCP.EVECONDPRPOTENCIAMVAR = dataExcel[x][5];
                            }
                            else if (tipo == "T" && dataExcel[x][4] != "")
                            {
                                entityCP.EVECONDPRCODIGOUNIDAD = dataExcel[x][2] == null ? "" : dataExcel[x][2].Trim();
                                entityCP.EVECONDPRCENTRALDE = dataExcel[x][3];
                                entityCP.EVECONDPRTENSION = Convert.ToDecimal(dataExcel[x][4]);
                                entityCP.EVECONDPRPOTENCIAMW = dataExcel[x][5];
                                entityCP.EVECONDPRPOTENCIAMVAR = dataExcel[x][6];
                            }
                            servAF.ActualizarCondicionPrevia(entityCP);
                        }
                        else
                        {
                            if (dataExcel[x][2] != "" && dataExcel[x][2] != null)
                            {                        
                                if (tipo == "L")
                                {
                                    entityCP.EVENCODI = evencodi;
                                    entityCP.LASTUSER = base.User.Identity.Name;
                                    entityCP.LASTDATE = DateTime.Now;
                                    entityCP.EVECONDPRCODIGOUNIDAD = dataExcel[x][2] == null ? "" : dataExcel[x][2].Trim();
                                    entityCP.EVECONDPRCENTRALDE = dataExcel[x][3];
                                    entityCP.EVECONDPRSUBESTACIONA = dataExcel[x][4];
                                    entityCP.EVECONDPRPOTENCIAMW = dataExcel[x][5];
                                    entityCP.EVECONDPRPOTENCIAMVAR = dataExcel[x][6];
                                    entityCP.EVECONDPRTIPO = tipo;
                                }
                                else if (tipo == "C")
                                {
                                    entityCP.EVENCODI = evencodi;
                                    entityCP.LASTUSER = base.User.Identity.Name;
                                    entityCP.LASTDATE = DateTime.Now;
                                    entityCP.EVECONDPRCODIGOUNIDAD = dataExcel[x][3] == null ? "" : dataExcel[x][3].Trim();
                                    entityCP.EVECONDPRCENTRALDE = dataExcel[x][2];
                                    entityCP.EVECONDPRPOTENCIAMW = dataExcel[x][4];
                                    entityCP.EVECONDPRPOTENCIAMVAR = dataExcel[x][5];
                                    entityCP.EVECONDPRTIPO = tipo;
                                }
                                else if (tipo == "T" && dataExcel[x][4] != "")
                                {
                                    entityCP.EVENCODI = evencodi;
                                    entityCP.LASTUSER = base.User.Identity.Name;
                                    entityCP.LASTDATE = DateTime.Now;
                                    entityCP.EVECONDPRCODIGOUNIDAD = dataExcel[x][2] == null ? "" : dataExcel[x][2].Trim();
                                    entityCP.EVECONDPRCENTRALDE = dataExcel[x][3];
                                    entityCP.EVECONDPRTENSION = Convert.ToDecimal(dataExcel[x][4]);
                                    entityCP.EVECONDPRPOTENCIAMW = dataExcel[x][5];
                                    entityCP.EVECONDPRPOTENCIAMVAR = dataExcel[x][6];
                                    entityCP.EVECONDPRTIPO = tipo;
                                }
                                listaCondivos.Add(entityCP);
                            }
                        }
                    }
                }

                foreach (var item in listaCondivos)
                {
                    servAF.InsertarCondicionPrevia(item);
                }


                return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }

        }

        /// <summary>
        /// Muestra handsontable
        /// </summary>
        /// <param name="evencodi"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult MostrarHojaExcelWeb(int evencodi, int tipo)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            try
            {
                model = this.BuildHojaExcel(evencodi, tipo);
                model.Resultado = "1";
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                model.Resultado = "-1";
                model.StrMensaje = ex.ToString();
            }

            return Json(model);
        }

        public AnalisisFallasModel BuildHojaExcel(int evencodi, int tipo)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            AnalisisFallasModel model = new AnalisisFallasModel();
            List<EveCondPreviaDTO> listadoCondPrevia = new List<EveCondPreviaDTO>();
            List<EveHistoricoScadaDTO> listadoHistScada = new List<EveHistoricoScadaDTO>();
            List<EveAnalisisEventoDTO> listadoAnalisis = new List<EveAnalisisEventoDTO>();
            List<EveTiposNumeralDTO> listaNumeral = new List<EveTiposNumeralDTO>();
            model.Evencodi = evencodi;
            model.Handson = new HandsonModel();
            model.Handson.ListaMerge = new List<CeldaMerge>();
            model.Handson.ListaColWidth = new List<int>();
            model.Handson.ColCabecera = 0;
            model.Handson.FilasCabecera = 1;
            model.Handson.Width = HandsonConstantes.ColWidth * 20;
            model.Handson.ListaFilaReadOnly = new List<bool>();
            model.ListaCambios = new List<CeldaCambios>();
            string tipoCondPrevia = string.Empty;
            if (tipo == 1)
            {
                tipoCondPrevia = "L";
                listadoCondPrevia = servAF.ObtenerListaCondicionesPrevias(evencodi, tipoCondPrevia);
                foreach (var item in listadoCondPrevia)
                {
                    item.EVECONDPRSUBESTACIONDE = item.EVECONDPRCENTRALDE;
                    //TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                    //item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                }

                model.Handson.MaxCols = 7;
                model.Handson.MaxRows = listadoCondPrevia.Count == 0 ? 4 : listadoCondPrevia.Count + 2;
                model.Handson.ReadOnly = false;
                model.Handson.ListaColWidth.Add(50);
                model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
            }
            else if (tipo == 2)
            {
                tipoCondPrevia = "C";
                listadoCondPrevia = servAF.ObtenerListaCondicionesPrevias(evencodi, tipoCondPrevia);
                foreach (var item in listadoCondPrevia)
                {
                    item.EVECONDPRSUBESTACIONDE = item.EVECONDPRCENTRALDE;
                    //TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                    //item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                }
                model.Handson.MaxCols = 6;
                model.Handson.MaxRows = listadoCondPrevia.Count == 0 ? 4 : listadoCondPrevia.Count + 2;
                model.Handson.ReadOnly = false;
                model.Handson.ListaColWidth.Add(50);
                model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
            }
            else if (tipo == 3)
            {
                tipoCondPrevia = "T";
                listadoCondPrevia = servAF.ObtenerListaCondicionesPrevias(evencodi, tipoCondPrevia);
                foreach (var item in listadoCondPrevia)
                {
                    item.EVECONDPRSUBESTACIONDE = item.EVECONDPRCENTRALDE;
                    //TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                    //item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                }
                model.Handson.MaxCols = 7;
                model.Handson.MaxRows = listadoCondPrevia.Count == 0 ? 4 : listadoCondPrevia.Count + 2;
                model.Handson.ReadOnly = false;
                model.Handson.ListaColWidth.Add(50);
                model.Handson.ListaColWidth.Add(80);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
                model.Handson.ListaColWidth.Add(120);
            }
            else if (tipo == 4)
            {
                listadoHistScada = appAnalisisFallas.ObtenerListaHistoricoScada(evencodi);
                model.Handson.MaxCols = 5;
                model.Handson.MaxRows = listadoHistScada.Count == 0 ? 4 : listadoHistScada.Count + 2;
                model.Handson.ReadOnly = false;
                model.Handson.ListaColWidth.Add(50);
                model.Handson.ListaColWidth.Add(200);
                model.Handson.ListaColWidth.Add(200);
                model.Handson.ListaColWidth.Add(200);
                model.Handson.ListaColWidth.Add(200);
            }
            else if (tipo == 5)
            {
                listadoAnalisis = appAnalisisFallas.ObtenerListaAnalisisEventos(evencodi);
                model.Handson.MaxCols = 5;
                model.Handson.MaxRows = listadoAnalisis.Count == 0 ? 1 : listadoAnalisis.Count + 1;
                model.Handson.ReadOnly = false;
                //model.Handson.ListaColWidth.Add(50);
                model.Handson.ListaColWidth.Add(435);
                model.Handson.ListaColWidth.Add(225);
                model.Handson.ListaColWidth.Add(200);
                model.Handson.ListaColWidth.Add(250);
                model.Handson.ListaColWidth.Add(300);
            }
            else if (tipo == 6)
            {
                string estado = "A";
                listaNumeral = servAF.ListaTiposNumeral(estado);
                model.Handson.MaxCols = 2;
                model.Handson.MaxRows = listaNumeral.Count == 0 ? 1 : listaNumeral.Count;
                model.Handson.ReadOnly = false;
                model.Handson.ListaColWidth.Add(50);
                model.Handson.ListaColWidth.Add(310);
            }

            model.Handson.ListaExcelData = EventoHelper.InicializaMatrizExcel(model.Handson.FilasCabecera, model.Handson.MaxRows, model.Handson.ColCabecera, model.Handson.MaxCols);
            int aux = 0;

            if (listadoCondPrevia.Count > 0 && tipo == 1)
            {
                for (int y = 0; y < listadoCondPrevia.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux + 1;

                        if (x == 0)
                        {
                            model.Handson.ListaExcelData[x][0] = "Id";
                            model.Handson.ListaExcelData[x][1] = "N°";
                            model.Handson.ListaExcelData[x][2] = "Código";
                            model.Handson.ListaExcelData[x][3] = "Subestaciones";
                            model.Handson.ListaExcelData[x][4] = "";
                            model.Handson.ListaExcelData[x][5] = "Potencia Activa (MW)";
                            model.Handson.ListaExcelData[x][6] = "Potencia Reactiva (MVar)";
                        }
                        else if (x == 1)
                        {
                            model.Handson.ListaExcelData[x][0] = "";
                            model.Handson.ListaExcelData[x][1] = "";
                            model.Handson.ListaExcelData[x][2] = "";
                            model.Handson.ListaExcelData[x][3] = "De";
                            model.Handson.ListaExcelData[x][4] = "A";
                            model.Handson.ListaExcelData[x][5] = "";
                            model.Handson.ListaExcelData[x][6] = "";
                        }
                        else
                        {
                            model.Handson.ListaExcelData[x][0] = listadoCondPrevia[y].EVECONDPRCODI.ToString();
                            model.Handson.ListaExcelData[x][1] = (y + 1).ToString();
                            model.Handson.ListaExcelData[x][2] = listadoCondPrevia[y].EVECONDPRCODIGOUNIDAD;
                            model.Handson.ListaExcelData[x][3] = listadoCondPrevia[y].EVECONDPRSUBESTACIONDE;
                            model.Handson.ListaExcelData[x][4] = listadoCondPrevia[y].EVECONDPRSUBESTACIONA;
                            model.Handson.ListaExcelData[x][5] = listadoCondPrevia[y].EVECONDPRPOTENCIAMW == null ? "" : listadoCondPrevia[y].EVECONDPRPOTENCIAMW.ToString();
                            model.Handson.ListaExcelData[x][6] = listadoCondPrevia[y].EVECONDPRPOTENCIAMVAR == null ? "" : listadoCondPrevia[y].EVECONDPRPOTENCIAMVAR.ToString();
                            aux = x;
                            break;
                        }
                    }
                }
            }
            else if (tipo == 1)
            {
                model.Handson.ListaExcelData[0][0] = "Id";
                model.Handson.ListaExcelData[0][1] = "N°";
                model.Handson.ListaExcelData[0][2] = "Código";
                model.Handson.ListaExcelData[0][3] = "Subestaciones";
                model.Handson.ListaExcelData[0][4] = "";
                model.Handson.ListaExcelData[0][5] = "Potencia Activa (MW)";
                model.Handson.ListaExcelData[0][6] = "Potencia Reactiva (MVar)";

                model.Handson.ListaExcelData[1][0] = "";
                model.Handson.ListaExcelData[1][1] = "";
                model.Handson.ListaExcelData[1][2] = "";
                model.Handson.ListaExcelData[1][3] = "De";
                model.Handson.ListaExcelData[1][4] = "A";
                model.Handson.ListaExcelData[1][5] = "";
                model.Handson.ListaExcelData[1][6] = "";
            }

            if (listadoCondPrevia.Count > 0 && tipo == 2)
            {
                for (int y = 0; y < listadoCondPrevia.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux + 1;

                        if (x == 0)
                        {
                            model.Handson.ListaExcelData[x][0] = "Id";
                            model.Handson.ListaExcelData[x][1] = "N°";
                            model.Handson.ListaExcelData[x][2] = "Central";
                            model.Handson.ListaExcelData[x][3] = "Unidad";
                            model.Handson.ListaExcelData[x][4] = "Generación";
                            model.Handson.ListaExcelData[x][5] = "";
                        }
                        else if (x == 1)
                        {
                            model.Handson.ListaExcelData[x][0] = "";
                            model.Handson.ListaExcelData[x][1] = "";
                            model.Handson.ListaExcelData[x][2] = "";
                            model.Handson.ListaExcelData[x][3] = "";
                            model.Handson.ListaExcelData[x][4] = "MW";
                            model.Handson.ListaExcelData[x][5] = "MVAr";
                        }
                        else
                        {
                            model.Handson.ListaExcelData[x][0] = listadoCondPrevia[y].EVECONDPRCODI.ToString();
                            model.Handson.ListaExcelData[x][1] = (y + 1).ToString();
                            model.Handson.ListaExcelData[x][2] = listadoCondPrevia[y].EVECONDPRSUBESTACIONDE;
                            model.Handson.ListaExcelData[x][3] = listadoCondPrevia[y].EVECONDPRCODIGOUNIDAD;
                            model.Handson.ListaExcelData[x][4] = listadoCondPrevia[y].EVECONDPRPOTENCIAMW == null ? "" : listadoCondPrevia[y].EVECONDPRPOTENCIAMW.ToString();
                            model.Handson.ListaExcelData[x][5] = listadoCondPrevia[y].EVECONDPRPOTENCIAMVAR == null ? "" : listadoCondPrevia[y].EVECONDPRPOTENCIAMVAR.ToString();
                            aux = x;
                            break;
                        }
                    }
                }
            }
            else if (tipo == 2)
            {
                model.Handson.ListaExcelData[0][0] = "Id";
                model.Handson.ListaExcelData[0][1] = "N°";
                model.Handson.ListaExcelData[0][2] = "Central";
                model.Handson.ListaExcelData[0][3] = "Unidad";
                model.Handson.ListaExcelData[0][4] = "Generación";
                model.Handson.ListaExcelData[0][5] = "";
                model.Handson.ListaExcelData[1][0] = "";
                model.Handson.ListaExcelData[1][1] = "";
                model.Handson.ListaExcelData[1][2] = "";
                model.Handson.ListaExcelData[1][3] = "";
                model.Handson.ListaExcelData[1][4] = "MW";
                model.Handson.ListaExcelData[1][5] = "MVAr";
            }

            if (listadoCondPrevia.Count > 0 && tipo == 3)
            {
                for (int y = 0; y < listadoCondPrevia.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux;

                        if (x == 0)
                        {
                            model.Handson.ListaExcelData[x][0] = "Id";
                            model.Handson.ListaExcelData[x][1] = "N°";
                            model.Handson.ListaExcelData[x][2] = "Código";
                            model.Handson.ListaExcelData[x][3] = "S.E.";
                            model.Handson.ListaExcelData[x][4] = "Nivel de Tensión (KV)";
                            model.Handson.ListaExcelData[x][5] = "Potencia Activa (MW)";
                            model.Handson.ListaExcelData[x][6] = "Potencia Reactiva (MVAr)";
                        }
                        else
                        {
                            if (x == y + 1)
                            {
                                model.Handson.ListaExcelData[x][0] = listadoCondPrevia[y].EVECONDPRCODI.ToString();
                                model.Handson.ListaExcelData[x][1] = x.ToString();
                                model.Handson.ListaExcelData[x][2] = listadoCondPrevia[y].EVECONDPRCODIGOUNIDAD;
                                model.Handson.ListaExcelData[x][3] = listadoCondPrevia[y].EVECONDPRSUBESTACIONDE;
                                model.Handson.ListaExcelData[x][4] = listadoCondPrevia[y].EVECONDPRTENSION == 0 ? "" : listadoCondPrevia[y].EVECONDPRTENSION.ToString();
                                model.Handson.ListaExcelData[x][5] = listadoCondPrevia[y].EVECONDPRPOTENCIAMW == null ? "" : listadoCondPrevia[y].EVECONDPRPOTENCIAMW.ToString();
                                model.Handson.ListaExcelData[x][6] = listadoCondPrevia[y].EVECONDPRPOTENCIAMVAR == null ? "" : listadoCondPrevia[y].EVECONDPRPOTENCIAMVAR.ToString();
                                aux = x;
                                break;
                            }
                        }
                    }
                }
            }
            else if (tipo == 3)
            {
                model.Handson.ListaExcelData[0][0] = "Id";
                model.Handson.ListaExcelData[0][1] = "N°";
                model.Handson.ListaExcelData[0][2] = "Código";
                model.Handson.ListaExcelData[0][3] = "S.E.";
                model.Handson.ListaExcelData[0][4] = "Nivel de Tensión (KV)";
                model.Handson.ListaExcelData[0][5] = "Potencia Activa (MW)";
                model.Handson.ListaExcelData[0][6] = "Potencia Reactiva (MVAr)";
            }

            if (listadoHistScada.Count > 0 && tipo == 4)
            {
                for (int y = 0; y < listadoHistScada.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux;

                        if (x == 0)
                        {
                            model.Handson.ListaExcelData[x][0] = "Id";
                            model.Handson.ListaExcelData[x][1] = "Ubicación";
                            model.Handson.ListaExcelData[x][2] = "Código Señal";
                            model.Handson.ListaExcelData[x][3] = "Código Equipo";
                            model.Handson.ListaExcelData[x][4] = "Fecha y Hora de desconexión";

                        }
                        else
                        {
                            if (x == y + 1)
                            {
                                model.Handson.ListaExcelData[x][0] = listadoHistScada[y].EVEHISTSCDACODI.ToString();
                                model.Handson.ListaExcelData[x][1] = listadoHistScada[y].ZONAABREV;
                                model.Handson.ListaExcelData[x][2] = listadoHistScada[y].CANALNOMB;
                                model.Handson.ListaExcelData[x][3] = listadoHistScada[y].EVEHISTSCDACODIEQUIPO;
                                model.Handson.ListaExcelData[x][4] = listadoHistScada[y].strEVEHISTSCDAFECHDESCONEXION;

                                aux = x;
                                break;
                            }
                        }
                    }
                }
            }
            else if (tipo == 4)
            {
                model.Handson.ListaExcelData[0][0] = "Id";
                model.Handson.ListaExcelData[0][1] = "Ubicación";
                model.Handson.ListaExcelData[0][2] = "Código Señal";
                model.Handson.ListaExcelData[0][3] = "Código Equipo";
                model.Handson.ListaExcelData[0][4] = "Fecha y Hora de desconexión";
            }

            if (listadoAnalisis.Count > 0 && tipo == 5)
            {
                for (int y = 0; y < listadoAnalisis.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux;

                        if (x == 0)
                        {
                            //model.Handson.ListaExcelData[x][0] = "Id";
                            model.Handson.ListaExcelData[x][0] = "Descripción del Numeral";
                            model.Handson.ListaExcelData[x][1] = "Descripción de la Figura";
                            model.Handson.ListaExcelData[x][2] = "Archivo de Figura";
                            model.Handson.ListaExcelData[x][3] = "Acciones";
                            model.Handson.ListaExcelData[x][4] = "Tipo numeral";
                        }
                        else
                        {
                            if (x == y + 1)
                            {
                                //model.Handson.ListaExcelData[x][0] = listadoAnalisis[y].EVEANAEVECODI.ToString();
                                model.Handson.ListaExcelData[x][0] = listadoAnalisis[y].EVEANAEVEDESCNUMERAL;
                                model.Handson.ListaExcelData[x][1] = listadoAnalisis[y].EVEANAEVEDESCFIGURA;
                                model.Handson.ListaExcelData[x][2] = listadoAnalisis[y].EVEANAEVERUTAFIGURA;
                                model.Handson.ListaExcelData[x][3] = listadoAnalisis[y].EVEANAEVECODI.ToString();
                                model.Handson.ListaExcelData[x][4] = listadoAnalisis[y].EVENUMCODI.ToString() + "|" + listadoAnalisis[y].EVEANAEVECODI.ToString() + "|" + evencodi.ToString();

                                aux = x;
                                break;
                            }
                        }
                    }
                }
            }
            else if (tipo == 5)
            {
                //model.Handson.ListaExcelData[0][0] = "Id";
                model.Handson.ListaExcelData[0][0] = "Descripción del Numeral";
                model.Handson.ListaExcelData[0][1] = "Descripción de la Figura";
                model.Handson.ListaExcelData[0][2] = "Archivo de Figura";
                model.Handson.ListaExcelData[0][3] = "Acciones";
                model.Handson.ListaExcelData[0][4] = "Tipo numeral";
            }

            if (listaNumeral.Count > 0 && tipo == 6)
            {
                for (int y = 0; y < listaNumeral.Count; y++)
                {
                    for (int x = 0; x < model.Handson.ListaExcelData.Length; x++)
                    {
                        if (aux > x)
                            x = aux;

                        if (x == 0)
                        {
                            model.Handson.ListaExcelData[x][0] = "Id";
                            model.Handson.ListaExcelData[x][1] = "Descripción";

                        }
                        else
                        {
                            if (x == y + 1)
                            {
                                model.Handson.ListaExcelData[x][0] = listaNumeral[y].EVETIPNUMCODI.ToString();
                                model.Handson.ListaExcelData[x][1] = listaNumeral[y].EVETIPNUMDESCRIPCION == null ? "" : listaNumeral[y].EVETIPNUMDESCRIPCION;

                                aux = x;
                                break;
                            }
                        }
                    }
                }
            }
            else if (tipo == 6)
            {
                model.Handson.ListaExcelData[0][0] = "Id";
                model.Handson.ListaExcelData[0][1] = "Descripción";
            }

            return model;
        }

        /// <summary>
        /// Registro de historico scada
        /// </summary>
        /// <param name="codigoEvento"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult InsertarHistScadaAnalisisEvento(string[][] dataExcel, int evencodi, List<int> listCanalCodi, string fechaHoraIni, string fechaHoraFin, string filtro, int tipo)
        {
            AnalisisFallasModel model = new AnalisisFallasModel();
            TiempoRealAppServicio servTiempoReal = new TiempoRealAppServicio();
            List<DatosSP7DTO> listaTrCircularSp7GraficaFiltrada = new List<DatosSP7DTO>();
            string canalNombre = string.Empty;

            List<EveHistoricoScadaDTO> lstScadas = new List<EveHistoricoScadaDTO>();
            try
            {
                DateTime fechaIni = DateTime.ParseExact(fechaHoraIni, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture);
                DateTime fechaFin = DateTime.ParseExact(fechaHoraFin, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture);

                bool conValor = false;

                if (tipo == 1)
                {
                    foreach (int canalCodi in listCanalCodi)
                    {
                        var objCanal = servScadaSp7.GetByIdTrCanalSp7(canalCodi);
                        canalNombre = objCanal.Canalnomb;
                        string tipoDato = canalNombre.Substring(canalNombre.Length - 1, 1);
                        var zona = servScadaSp7.GetByIdTrZonaSp7(objCanal.Zonacodi.Value);

                        List<TrCircularSp7DTO> listaCircularSp7 = servTiempoReal.BuscarOperacionesRangoCircularSp7(canalCodi.ToString(), fechaIni, fechaFin, -1, -1).ToList();
                        List<DatosSP7DTO> ListaTrCircularSp7Grafica = ConvertirDtoV2(listaCircularSp7, (int)objCanal.Zonacodi, zona.Zonaabrev, canalNombre, objCanal.Canalabrev);

                        if (ListaTrCircularSp7Grafica.Count == 0)
                        {
                            return Json(new { result = "2", responseText = "Señal de medida del interruptor sin valor cero. Seleccione otra señal." }, JsonRequestBehavior.AllowGet);
                        }

                        //asignando calidad
                        foreach (var item in ListaTrCircularSp7Grafica)
                        {
                            item.CalidadTexto = "";

                            if ((item.Calidad >= 0 && item.Calidad <= 15) || (item.Calidad >= 64 && item.Calidad <= 79) || (item.Calidad >= 128 && item.Calidad <= 143) || (item.Calidad >= 192 && item.Calidad <= 207))
                            {
                                item.CalidadTexto = "VALIDO";
                                if (filtro == "T" || filtro == "V")
                                    listaTrCircularSp7GraficaFiltrada.Add(item);
                                continue;
                            }
                            else
                            {
                                //CONGELADO
                                if ((item.Calidad >= 16 && item.Calidad <= 31) || (item.Calidad >= 80 && item.Calidad <= 95) || (item.Calidad >= 144 && item.Calidad <= 159) || (item.Calidad >= 208 && item.Calidad <= 223))
                                {
                                    item.CalidadTexto = "CONGELADO";
                                    if (filtro == "T" || filtro == "C")
                                        listaTrCircularSp7GraficaFiltrada.Add(item);
                                    continue;
                                }
                                else
                                {
                                    //INDETERMINADO
                                    if ((item.Calidad >= 32 && item.Calidad <= 47) || (item.Calidad >= 96 && item.Calidad <= 111) || (item.Calidad >= 160 && item.Calidad <= 175) || (item.Calidad >= 224 && item.Calidad <= 239))
                                    {
                                        item.CalidadTexto = "INDETERMINADO";
                                        if (filtro == "T" || filtro == "I")
                                            listaTrCircularSp7GraficaFiltrada.Add(item);
                                        continue;
                                    }
                                    else
                                    {
                                        //NO VALIDO
                                        if ((item.Calidad >= 48 && item.Calidad <= 63) ||
                                            (item.Calidad >= 112 && item.Calidad <= 127) ||
                                            (item.Calidad >= 176 && item.Calidad <= 191) ||
                                            (item.Calidad >= 240 && item.Calidad <= 255))
                                        {
                                            item.CalidadTexto = "NO VALIDO";
                                            if (filtro == "T" || filtro == "N")
                                                listaTrCircularSp7GraficaFiltrada.Add(item);
                                            continue;
                                        }
                                    }
                                }
                            }
                        }

                    }

                    foreach (var lst in listaTrCircularSp7GraficaFiltrada)
                    {
                        if (lst.Valor == 0)
                        {
                            lstScadas.Add(new EveHistoricoScadaDTO
                            {
                                EVENCODI = evencodi,
                                EVEHISTSCDAZONACODI = lst.Zonacodi,
                                EVEHISTSCDACANALCODI = lst.Canalcodi,
                                EVEHISTSCDACODIEQUIPO = lst.CodigoEquipo,
                                EVEHISTSCDAFECHDESCONEXION = lst.Fecha,
                                strEVEHISTSCDAFECHDESCONEXION = lst.Fecha.ToString(Constantes.FormatoFechaFullMs),
                                LASTUSER = base.User.Identity.Name,
                                LASTDATE = DateTime.Now,
                                ZONAABREV = lst.ZonaDescription,
                                CANALNOMB = lst.CanalDescription
                            });

                            conValor = true;
                            break;
                        }
                    }

                    if (!conValor)
                        return Json(new { result = "2", responseText = "Señal de medida del interruptor sin valor cero. Seleccione otra señal." }, JsonRequestBehavior.AllowGet);

                }

                if (tipo == 2)
                {
                    for (int x = 1; x < dataExcel.Length; x++)
                    {
                        if (!string.IsNullOrEmpty(dataExcel[x][0]))
                        {
                            if (!string.IsNullOrEmpty(dataExcel[x][1]) && 
                                !string.IsNullOrEmpty(dataExcel[x][2]) && 
                                !string.IsNullOrEmpty(dataExcel[x][3]) &&
                                !string.IsNullOrEmpty(dataExcel[x][4]))
                            {
                                EveHistoricoScadaDTO ExcelHisScada = servAF.GetByIdHistoricoScada(Convert.ToInt32(dataExcel[x][0]));
                                lstScadas.Add(new EveHistoricoScadaDTO
                                {
                                    EVENCODI = evencodi,
                                    EVEHISTSCDAZONACODI = ExcelHisScada.EVEHISTSCDAZONACODI == null ? 0 : ExcelHisScada.EVEHISTSCDAZONACODI,
                                    EVEHISTSCDACANALCODI = ExcelHisScada.EVEHISTSCDACANALCODI == null ? 0 : ExcelHisScada.EVEHISTSCDACANALCODI,
                                    EVEHISTSCDACODIEQUIPO = dataExcel[x][3],
                                    EVEHISTSCDAFECHDESCONEXION = DateTime.ParseExact(dataExcel[x][4], Constantes.FormatoFechaFullMs, CultureInfo.InvariantCulture),
                                    strEVEHISTSCDAFECHDESCONEXION = dataExcel[x][4],
                                    LASTUSER = base.User.Identity.Name,
                                    LASTDATE = DateTime.Now,
                                    CANALNOMB = dataExcel[x][2],
                                    ZONAABREV = dataExcel[x][1]
                                });
                            }
                        }
                        else if (
                                !string.IsNullOrEmpty(dataExcel[x][1]) &&
                                !string.IsNullOrEmpty(dataExcel[x][2]) &&
                                !string.IsNullOrEmpty(dataExcel[x][3]) &&
                                !string.IsNullOrEmpty(dataExcel[x][4]))
                        {
                            lstScadas.Add(new EveHistoricoScadaDTO
                            {
                                EVENCODI = evencodi,
                                EVEHISTSCDAZONACODI = null,
                                EVEHISTSCDACANALCODI = null,
                                EVEHISTSCDACODIEQUIPO = dataExcel[x][3],
                                EVEHISTSCDAFECHDESCONEXION = DateTime.ParseExact(dataExcel[x][4], Constantes.FormatoFechaFullMs, CultureInfo.InvariantCulture),
                                strEVEHISTSCDAFECHDESCONEXION = dataExcel[x][4],
                                LASTUSER = base.User.Identity.Name,
                                LASTDATE = DateTime.Now,
                                CANALNOMB = dataExcel[x][2],
                                ZONAABREV = dataExcel[x][1]
                            });
                        }
                    }

                    servAF.EliminaHistoricoScada(evencodi);
                }

                foreach (EveHistoricoScadaDTO ScdaDTO in lstScadas)
                {
                    servAF.InsertarHistoricoScada(ScdaDTO);
                }
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Registro de análisis de evento
        /// </summary>
        /// <param name="dataExcel"></param>
        /// <param name="evencodi"></param>
        /// <param name="listCanalCodi"></param>
        /// <param name="fechaHoraIni"></param>
        /// <param name="fechaHoraFin"></param>
        /// <param name="filtro"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult InsertarAnalisisEvento(string[][] dataExcel, int evencodi, List<int> listCanalCodi, string fechaHoraIni, string fechaHoraFin, string filtro)
        {
            try
            {
                int maxPosicion = 0;
                List<EveAnalisisEventoDTO> listadoAnalisis = servAF.ObtenerListaAnalisisEventos(evencodi);

                if (listadoAnalisis.Count > 0)
                    maxPosicion = Convert.ToInt32(listadoAnalisis.OrderByDescending(x => x.EVEANAPOSICION).First().EVEANAPOSICION);

                List<EveAnalisisEventoDTO> lstOrdenada = new List<EveAnalisisEventoDTO>();
                List<SecuenciaEventoDTO> lstSecuenciaEvento = servAF.ObtenerListaSecuenciaEventos(evencodi);

                for (int x = 1; x < dataExcel.Length; x++)
                {
                    EveAnalisisEventoDTO entityH = new EveAnalisisEventoDTO();
                    if (!string.IsNullOrEmpty(dataExcel[x][0]))
                    {
                        string fecha_ = string.Empty;
                        int valorms = Convert.ToInt32(dataExcel[x][4].Substring(20, 3));
                        if (valorms > 0)
                            fecha_ = dataExcel[x][4].Substring(11, 12);
                        else
                            fecha_ = dataExcel[x][4].Substring(11, 8);
                        entityH.EVENCODI = evencodi;
                        entityH.EVEANAEVEDESCNUMERAL = "A las " + fecha_ + " h, en la " + dataExcel[x][1].Trim() + " desconectó la línea/transformador/generador " + (dataExcel[x][3] == null ? "" : dataExcel[x][3]) + ".";
                        entityH.EVENUMCODI = 1; //Código tipo numeral
                        entityH.LASTUSER = base.User.Identity.Name;
                        entityH.LASTDATE = DateTime.Now;
                        entityH.EVEANAHORA = fecha_;
                        entityH.EVEANATIPO = 1;
                        lstOrdenada.Add(entityH);
                    }
                }

                if (lstSecuenciaEvento != null)
                {
                    List<DateTime> _fecha = null;
                    List<string> fechas = null;
                    List<SecuenciaEventoDTO> ListaSecuencia = new List<SecuenciaEventoDTO>();
                    if (lstSecuenciaEvento[0].EVESECFECHA != "" && lstSecuenciaEvento[0].EVESECFECHA != null)
                        _fecha = lstSecuenciaEvento.Select(x => DateTime.ParseExact(x.EVESECFECHA, Constantes.FormatoFecha, CultureInfo.InvariantCulture)).Distinct().ToList();
                    else
                        ListaSecuencia = lstSecuenciaEvento.OrderBy(x => x.EVESECHORA).ToList();

                    if (_fecha != null)
                        fechas = _fecha.OrderBy(m => m).Select(y => y.ToString("dd/MM/yyyy")).ToList();

                    if(fechas != null)
                    {
                        foreach (string ff in fechas)
                        {
                            List<SecuenciaEventoDTO> lstPrevia = lstSecuenciaEvento.Where(x => x.EVESECFECHA == ff).ToList();
                            ListaSecuencia.AddRange(lstPrevia.OrderBy(x=>x.EVESECHORA));
                        }
                    }

                    foreach (SecuenciaEventoDTO item in ListaSecuencia.Where(x => x.EVESECINCMANIOB == true))
                    {
                        EveAnalisisEventoDTO entityS = new EveAnalisisEventoDTO();
                        entityS.EVENCODI = evencodi;
                        if (item.EVESECHORA.Length > 8)
                        {
                            int valorms = Convert.ToInt32(item.EVESECHORA.Substring(9, 3));
                            if (valorms == 0)
                                item.EVESECHORA = item.EVESECHORA.Substring(0, 8);
                        }

                        entityS.EVEANAEVEDESCNUMERAL = "A las " + item.EVESECHORA + " h, el " + item.EVESECSECC + ", " + item.EVESECDESCRIPCION + ".";
                        entityS.EVENUMCODI = 2; //Código tipo numeral
                        entityS.LASTUSER = base.User.Identity.Name;
                        entityS.LASTDATE = DateTime.Now;
                        entityS.EVEANAHORA = item.EVESECHORA.Trim();
                        entityS.EVEANATIPO = 2;
                        lstOrdenada.Add(entityS);
                    }
                }

                foreach (EveAnalisisEventoDTO item2 in lstOrdenada)
                {
                    item2.EVEANAPOSICION = maxPosicion + 1;
                    maxPosicion++;
                }

                listadoAnalisis.AddRange(lstOrdenada.OrderBy(x => x.EVEANAHORA));

                servAF.EliminaAnalisisEvento(evencodi);
                foreach (EveAnalisisEventoDTO item in listadoAnalisis)
                {
                    servAF.InsertarAnalisisEvento(item);
                }
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Permite actualizar los informes que se verán en Portal Web
        /// </summary>
        /// <param name="objEvento"></param>
        /// <returns></returns>
        //[HttpPost]
        public bool SubirFileAnalisis(int Eveanaevecodi, HttpPostedFileBase Archivo)
        {
            bool respuesta = false;
            int tipo = 2;
            try
            {
                EveAnalisisEventoDTO entity = new EveAnalisisEventoDTO();
                if (Archivo != null)
                {
                    FileInfo FileAnalisis = new FileInfo(Archivo.FileName);
                    string extensionArchivo = FileAnalisis.Extension;
                    string nombreArchivo = "Analisis" + Eveanaevecodi.ToString("0000000000") + extensionArchivo;
                    entity.EVEANAEVERUTAFIGURA = nombreArchivo;
                    entity.EVEANAEVECODI = Eveanaevecodi;
                    servAF.ActualizarAnalisisEvento(entity, 1);

                    GrabarArchivoEventos(nombreArchivo, Archivo, tipo);
                    respuesta = true;
                }

                return respuesta;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                respuesta = false;
                return respuesta;
            }
        }

        /// <summary>
        /// Registro de historico scada
        /// </summary>
        /// <param name="codigoEvento"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult InsertarRecomendacionObservacion(int evencodi, string descripcion, int codigoEmpresa, int tipo)
        {
            try
            {
                EveRecomobservDTO entity = new EveRecomobservDTO();
                entity.EVENCODI = evencodi;
                entity.EMPRCODI = codigoEmpresa;
                entity.EVERECOMOBSERVTIPO = tipo;
                entity.EVERECOMOBSERVDESC = descripcion;
                entity.EVERECOMOBSERVESTADO = "S";
                entity.LASTUSER = base.User.Identity.Name;
                entity.LASTDATE = DateTime.Now;
                servAF.InsertarEveRecomobserv(entity);
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Registro de historico scada
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult TraerRecomendacionObservacion(int evencodi, int tipo)
        {
            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            JsonResult jRespuesta;
            List<EveRecomobservDTO> Lista = appAnalisisFallas.ListEveRecomobserv(evencodi, tipo);
            jRespuesta = Json(Lista, JsonRequestBehavior.AllowGet);
            return jRespuesta;
        }

        /// <summary>
        /// Elminar Observaciones y/o Recomendaciones
        /// <summary>
        /// <param name="everecomobservcodi"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult EliminarObservacionRecomendacion(int everecomobservcodi)
        {
            try
            {
                servAF.EliminarObservacionRecomendacion(everecomobservcodi);
                return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }
        }

        /// <summary>
        /// Muestra la pagina inical de búsqueda de equpos
        /// </summary>
        /// <returns></returns>
        public PartialViewResult BusquedaEquipoRecomendacion(string famcodi)
        {
            BusquedaEquipoModel model = new BusquedaEquipoModel();
            model.ListaEmpresa = this.servicio.ListarEmpresas().Where(x => x.EMPRCODI != 0 && x.EMPRCODI != -1).ToList();

            if (string.IsNullOrEmpty(famcodi))
            {
                model.ListaFamilia = this.servicio.ListarFamilias().ToList();
            }
            else
            {
                string famcodicoma = Constantes.CaracterComa + famcodi + Constantes.CaracterComa;
                model.ListaFamilia = this.servicio.ListarFamilias().Where(x => famcodicoma.IndexOf(Constantes.CaracterComa.ToString()
                    + x.FAMCODI + Constantes.CaracterComa.ToString()) >= 0).ToList();
            }

            return PartialView(model);
        }

        /// <summary>
        /// Muestra el resultado de la busqueda
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idFamilia"></param>
        /// <param name="idArea"></param>
        /// <param name="filtro"></param>
        /// <param name="nroPagina"></param>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult ResultadoEquipoRecomendacion(int idEmpresa, string idFamilia, int idArea, string filtro, int nroPagina)
        {
            BusquedaEquipoModel model = new BusquedaEquipoModel();
            model.ListaEquipo = servicio.BuscarEquipoEvento(idEmpresa, idArea, idFamilia, filtro, nroPagina, Constantes.PageSize).ToList();
            return PartialView(model);
        }

        /// <summary>
        /// Registrar información en tabla eve_int_descarga
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult ListadoNumeral()
        {

            AnalisisFallasModel model = new AnalisisFallasModel();

            return PartialView(model);
        }

        /// <summary>
        /// Registro de tipos Numeral
        /// </summary>
        /// <param name="dataExcel"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult InsertarTipoNumeral(string[][] dataExcel)
        {
            try
            {
                EveTiposNumeralDTO entity = new EveTiposNumeralDTO();
                List<EveTiposNumeralDTO> lstNumeral = servAF.ListaTiposNumeral("A");

                foreach (EveTiposNumeralDTO item in lstNumeral)
                {
                    int contador = 0;
                    for (int y = 1; y < dataExcel.Length; y++)
                    {
                        if (dataExcel[y][0] != "" && item.EVETIPNUMCODI == Convert.ToInt32(dataExcel[y][0]))
                            contador++;
                    }
                    if(contador == 0)
                    {
                        if(!servAF.ValidarTipoNumeralxAnalisisEvento(item.EVETIPNUMCODI))
                            servAF.EliminarTiposNumeral(item.EVETIPNUMCODI);
                    }
                }

                for (int x = 1; x < dataExcel.Length; x++)
                {
                    EveTiposNumeralDTO entidad = new EveTiposNumeralDTO();

                    if (dataExcel[x][0] != null && dataExcel[x][0] != "" && Convert.ToInt32(dataExcel[x][0]) > 0)
                    {                        
                        entidad.EVETIPNUMCODI = Convert.ToInt32(dataExcel[x][0]);
                        entidad.EVETIPNUMDESCRIPCION = dataExcel[x][1].Trim();
                        entidad.EVETIPNUMESTADO = "A";
                        entidad.LASTUSER = base.User.Identity.Name;
                        entidad.LASTDATE = DateTime.Now;
                        servAF.ActualizarTiposNumeral(entidad);
                    }
                    else if (dataExcel[x][0] == "" || dataExcel[x][0] == null)
                    {
                        entidad.EVETIPNUMDESCRIPCION = dataExcel[x][1];
                        entidad.EVETIPNUMESTADO = "A";
                        entidad.LASTUSER = base.User.Identity.Name;
                        entidad.LASTDATE = DateTime.Now;
                        servAF.InsertarTiposNumeral(entidad);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
        }

        public FileStreamResult VerImagenAnalisis(string eveanaevecodi)
        {
            try
            {
                string foldername = ConfigurationManager.AppSettings["AnalisiEvento"];
                string filename = string.Empty;

                EveAnalisisEventoDTO entidad = servAF.GetByIdEveAnalisisEvento(Convert.ToInt32(eveanaevecodi));
                filename = entidad.EVEANAEVERUTAFIGURA;

                //var foldername = "Post Operación/Analisis de Fallas/" + anio + "/" + filename + "/";

                Stream stream = FileServer.DownloadToStream(filename, foldername);
                FileStream fs = stream as FileStream;

                if (stream != null)
                    return File(fs, System.Net.Mime.MediaTypeNames.Application.Octet, filename);
                else
                {
                    Log.Info("Ver - No se encontro el archivo para visualizar - análisis de fallas ");
                    return null;
                }
            }
            catch (Exception ex)
            {
                Log.Error(ex);
                return null;
            }
        }

        /// <summary>
        /// Permite obtener una lista filtrada Empresa Configuracion
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ListaTipoNumeral()
        {
            List<EveTiposNumeralDTO> listTipoNumeral = new List<EveTiposNumeralDTO>();
            List<EveTiposNumeralDTO> listFinal = new List<EveTiposNumeralDTO>();
            listTipoNumeral = servAF.ListaTiposNumeral("A");
            foreach (EveTiposNumeralDTO item in listTipoNumeral)
            {
                if (item.EVETIPNUMDESCRIPCION == null)
                    item.EVETIPNUMDESCRIPCION = "";
                listFinal.Add(item);
            }
            return Json(listTipoNumeral);
        }

        /// <summary>
        /// Actualizar análisis de evento
        /// </summary>
        /// <param name="dataExcel"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult UpdateAnalisisEvento(string[][] dataExcel)
        {
            try
            {
                for (int x = 1; x < dataExcel.Length; x++)
                {
                    if (!string.IsNullOrEmpty(dataExcel[x][0]))
                    {
                        if (dataExcel[x][0].Length > 4000)
                        {
                            return new HttpStatusCodeResult(400, $"Análisis del Evento: La fila {x} campo 'Descripción del Numeral' tiene mas de 4000 caracteres.");
                        }
                    }
                }

                List<EveAnalisisEventoDTO> lstEvento = new List<EveAnalisisEventoDTO>();
                int iniContador = 1;
                int evencodi = 0;
                if (dataExcel[1][4] != "")
                    evencodi = Convert.ToInt32(dataExcel[1][4].Split('|')[2]);
                List<EveAnalisisEventoDTO> lstAnalisis = servAF.ObtenerListaAnalisisEventos(evencodi);
                foreach (EveAnalisisEventoDTO itemAna in lstAnalisis)
                {
                    int contador = 0;
                    for (int x = iniContador; x < dataExcel.Length; x++)
                    {
                        if (dataExcel[x][4].Split('|')[1] != "undefined" && itemAna.EVEANAEVECODI == Convert.ToInt32(dataExcel[x][4].Split('|')[1]))
                        {
                            contador++;
                            break;
                        }
                    }
                    if (contador == 0)
                        servAF.EliminarAnalisisxEvento(itemAna.EVEANAEVECODI);
                }


                for (int x = 1; x < dataExcel.Length; x++)
                {
                    EveAnalisisEventoDTO entity = new EveAnalisisEventoDTO();

                    if (!string.IsNullOrEmpty(dataExcel[x][4]) && dataExcel[x][4].Split('|')[1] != "undefined")
                    {                    
                        entity.EVEANAEVECODI = Convert.ToInt32(dataExcel[x][4].Split('|')[1]);
                        entity.EVEANAEVEDESCNUMERAL = dataExcel[x][0];
                        entity.EVEANAEVEDESCFIGURA = dataExcel[x][1];
                        entity.EVENUMCODI = Convert.ToInt32(dataExcel[x][4].Split('|')[0]);
                        entity.EVEANAPOSICION = (int)x;
                        lstEvento.Add(entity);
                    }
                    else if(!string.IsNullOrEmpty(dataExcel[x][0]))
                    {
                        entity.EVENCODI = Convert.ToInt32(dataExcel[x][4].Split('|')[2]);
                        entity.EVEANAEVEDESCNUMERAL = dataExcel[x][0];
                        entity.EVEANAEVEDESCFIGURA = dataExcel[x][1];
                        entity.EVEANATIPO = 3;
                        entity.LASTUSER = base.User.Identity.Name;
                        entity.LASTDATE = DateTime.Now;
                        entity.EVEANAHORA = DateTime.Now.ToString("HH:mm:ss");
                        entity.EVENUMCODI = Convert.ToInt32(dataExcel[x][4].Split('|')[0]);
                        entity.EVEANAPOSICION = (int)x;
                        var nuevoId = servAF.InsertarAnalisisEvento(entity);

                        if (dataExcel[x][5] != "")
                        {
                            string source = dataExcel[x][5];
                            string extension = dataExcel[x][5].Substring(11, 3);
                            string base64 = source.Substring(source.IndexOf(',') + 1);
                            byte[] arrBytImage = Convert.FromBase64String(base64);

                            using (MemoryStream stream = new MemoryStream(arrBytImage, 0, arrBytImage.Length))
                            {
                                string nombreArchivo = "Analisis" + nuevoId.ToString("0000000000") + '.' + extension;
                                entity.EVEANAEVERUTAFIGURA = nombreArchivo;
                                entity.EVEANAEVECODI = nuevoId;

                                servAF.ActualizarAnalisisEvento(entity, 1);
                                GrabarArchivoEventos(nombreArchivo, stream, 2);
                            }

                        }
                    }
                }

                foreach (EveAnalisisEventoDTO item in lstEvento)
                {
                    servAF.ActualizarAnalisisEvento(item, 2);
                }
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Muestra la pantalla inicial del módulo de Indicadores de Falla
        /// </summary>
        /// <returns></returns>
        public ActionResult IndicadoresAnalisisFalla()
        {
            IndicadorCtafModel model = new IndicadorCtafModel();
            model.Anio = DateTime.Today.Year;

            return View(model);
        }

        [HttpGet]
        public FileResult DescargarInformeTecnico(int id)
        {
            byte[] bytes = new byte[0];

            AnalisisFallasAppServicio appAnalisisFallas = new AnalisisFallasAppServicio();
            Models.AnalisisFallasModel oAnalisisFallasModel = new Models.AnalisisFallasModel();

            AnalisisFallaDTO oAnalisisFallaDTO = appAnalisisFallas.ObtenerAnalisisFalla(id);
            EventoDTO oEventoDTO = appAnalisisFallas.ObtenerEvento(oAnalisisFallaDTO.EVENCODI);
            EquipoDTO oEquipoDTO = appAnalisisFallas.ObtenerEquipoPorEvento(oAnalisisFallaDTO.EVENCODI);

            //List<InformeCTAFDTO> CTAFINFORMEREPORTE = appAnalisisFallas.ObtenerCTAFINFORMEREPORTE(id);

            List<SenalizacionCTAFDTO> SenalizacionREPORTE = appAnalisisFallas.ObtenerSenalizacionREPORTE(id);
            List<SuministroCTAFDTO> SuministroREPORTE = appAnalisisFallas.ObtenerSuministroREPORTE(id);
            //List<SiSenializacionDTO> SenializacionProteccionInforme = appAnalisisFallas.ListarSenializacionesProteccionAgrupado(oAnalisisFallaDTO.EVENCODI);

            oAnalisisFallasModel.oAnalisisFallaDTO = oAnalisisFallaDTO;
            oAnalisisFallasModel.oEventoDTO = oEventoDTO;
            oAnalisisFallasModel.oEquipoDTO = oEquipoDTO;

            //oAnalisisFallasModel.CTAFINFORMEREPORTE = CTAFINFORMEREPORTE;
            // oAnalisisFallasModel.SecuenciaEventoREPORTE = SecuenciaEventoREPORTE;
            oAnalisisFallasModel.SenalizacionREPORTE = SenalizacionREPORTE;
            oAnalisisFallasModel.SuministroREPORTE = SuministroREPORTE;
            //oAnalisisFallasModel.ListaSenializacionProteccionInforme = SenializacionProteccionInforme;

            oAnalisisFallasModel.ListaEventosSco = appAnalisisFallas.LstEventosSco(oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString()).OrderBy(m => m.EVENINI).ToList();
            List<EveInformesScoDTO> lstInfFinal = new List<EveInformesScoDTO>();
            List<EveintdescargaDTO> listIntDesc = new List<EveintdescargaDTO>();
            List<InformeCtafModel> ListaInformeCtaf = new List<InformeCtafModel>();
            oAnalisisFallasModel.ListaInformeCtaf = new List<InformeCtafModel>();
            AnalisisFallasModel model = new AnalisisFallasModel();
            List<EveRecomobservDTO> LstRec = new List<EveRecomobservDTO>();
            List<EveRecomobservDTO> LstObs = new List<EveRecomobservDTO>();
            List<EmpresaInvolucradaDTO> lsEmpresaInvolucradaFinal = new List<EmpresaInvolucradaDTO>();

            List<SiSenializacionDTO> SenializacionProteccionInforme = new List<SiSenializacionDTO>();
            model.lsEmpresaConfigurable = appAnalisisFallas.ObtenerListadoConfiguracionEmpresaComboBox();
            

            foreach (var reg in oAnalisisFallasModel.ListaEventosSco)
            {
                if (reg.EVENCODI.HasValue)
                {
                    var itemSenializacion = appAnalisisFallas.ListarSenializacionesProteccionAgrupado(reg.EVENCODI.Value);

                    itemSenializacion.ForEach(x =>
                    {
                        x.CodigoEvento = reg.EVENCODI.Value;
                    });

                    SenializacionProteccionInforme.AddRange(itemSenializacion);
                }

                List<EmpresaInvolucradaDTO> lsEmpresaInvolucrada = appAnalisisFallas.ObtenerEmpresasInvolucradaxEvencodi((int)reg.EVENCODI);

                foreach (var itemEmpresaInvolucrada in lsEmpresaInvolucrada)
                {
                    var tieneEmpresaInvolucrada = lsEmpresaInvolucradaFinal.FirstOrDefault(x => x.EMPRCODI == itemEmpresaInvolucrada.EMPRCODI);

                    if (tieneEmpresaInvolucrada == null)
                    {
                        lsEmpresaInvolucradaFinal.Add(itemEmpresaInvolucrada);
                    }
                }

                List<EveInformesScoDTO> lstInformesFinales = servicioEvento.ListEveInformesScoxEvento((int)reg.EVENCODI, 2).ToList(); //Lista de informes finales

                List<EveintdescargaDTO> listInt = appAnalisisFallas.ObtenerListaInterruptoresDescargadores((int)reg.EVENCODI, 1);
                List<EveintdescargaDTO> listDesc = appAnalisisFallas.ObtenerListaInterruptoresDescargadores((int)reg.EVENCODI, 2);

                List<EveCondPreviaDTO> listadoCondPrelinea = servAF.ObtenerListaCondicionesPrevias((int)reg.EVENCODI, "L");
                foreach (var item in listadoCondPrelinea)
                {
                    TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                    item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                }

                List<EveCondPreviaDTO> listadoCondPreCentral = servAF.ObtenerListaCondicionesPrevias((int)reg.EVENCODI, "C");
                foreach (var item in listadoCondPreCentral)
                {
                    TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                    item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                }

                List<EveCondPreviaDTO> listadoCondPreTransformadores = servAF.ObtenerListaCondicionesPrevias((int)reg.EVENCODI, "T");
                foreach (var item in listadoCondPreTransformadores)
                {
                    TrZonaSp7DTO zonasp7 = servScadaSp7.GetByIdTrZonaSp7(item.EVECONDPRSUBESTACIONCENT);
                    item.EVECONDPRSUBESTACIONDE = zonasp7.Zonaabrev;
                }

                List<SecuenciaCTAFDTO> SecuenciaEventoREPORTE = appAnalisisFallas.ObtenerSecuenciaEventoREPORTEv3((int)reg.EVENCODI);
                List<SecuenciaEventoEmpresaDTO> olstaSecuenciaEventoEmpresaDTO = new List<SecuenciaEventoEmpresaDTO>();

                foreach (var item in SecuenciaEventoREPORTE)
                {
                    if (model.lsEmpresaConfigurable.Where(m => m.CodigoOsinergmin == item.D1).ToList().Count != 0)
                    {
                        SecuenciaEventoEmpresaDTO oSecuenciaEventoEmpresaDTO = new SecuenciaEventoEmpresaDTO();
                        oSecuenciaEventoEmpresaDTO.CodigoSECC = item.D1;
                        oSecuenciaEventoEmpresaDTO.Descripcion = model.lsEmpresaConfigurable.FirstOrDefault(m => m.CodigoOsinergmin == item.D1).EmpresaERACMF;
                        olstaSecuenciaEventoEmpresaDTO.Add(oSecuenciaEventoEmpresaDTO);
                    }
                }

                List<EveAnalisisEventoDTO> listadoAnalisisEvento = servAF.ObtenerListaAnalisisEventos((int)reg.EVENCODI);

                InformeCtafModel modelCtaf = new InformeCtafModel();
                modelCtaf.CabNombreEvento = "Evento del " + reg.EVENINI.Value.ToString("dd.MM.yyyy") + " a las " + reg.EVENINI.Value.ToString("HH:mm:ss") + "h:";
                modelCtaf.CabDescripcionEvento = reg.EVENDESCCTAF == null ? reg.EVENDESC : reg.EVENDESCCTAF;
                modelCtaf.EVENINI = reg.EVENINI;
                modelCtaf.listaCondPreviaLinea = listadoCondPrelinea;
                modelCtaf.listaCondPreviaCentral = listadoCondPreCentral;
                modelCtaf.listaCondPreviaTransformadores = listadoCondPreTransformadores;
                modelCtaf.listaSecuenciaEvento = SecuenciaEventoREPORTE;
                modelCtaf.listaSecuenciaEventoEmpresaFooter = olstaSecuenciaEventoEmpresaDTO;
                modelCtaf.listaAnalisisEvento = listadoAnalisisEvento;

                ListaInformeCtaf.Add(modelCtaf);
                oAnalisisFallasModel.ListaInformeCtaf = ListaInformeCtaf.OrderBy(x => x.EVENINI).ToList();

                if (listInt.Count > 0)
                    listIntDesc.AddRange(listInt);

                if (listDesc.Count > 0)
                    listIntDesc.AddRange(listDesc);

                if (lstInformesFinales.Count == 0)
                {
                    List<EveInformesScoDTO> lstInformesPreliminares = servicioEvento.ListEveInformesScoxEvento((int)reg.EVENCODI, 1).ToList();
                    if (lstInformesPreliminares.Count > 0)
                        lstInfFinal.AddRange(lstInformesPreliminares);
                }
                else
                    lstInfFinal.AddRange(lstInformesFinales);

                //Validamos si el informe es antiguo
                if (lsEmpresaInvolucrada.Count > 0)
                {
                    foreach (var x in lsEmpresaInvolucrada)
                    {
                        if (lstInfFinal.Count > 0)
                        {
                            int countInfo = lstInfFinal.Where(y => y.Afecodi == x.AFECODI && y.Portalweb == "S" && y.Emprcodi == x.EMPRCODI).Count();
                            if (countInfo == 0)
                            {
                                EveInformesScoDTO InfoInvolucrada = new EveInformesScoDTO();
                                InfoInvolucrada.Afecodi = x.AFECODI;
                                InfoInvolucrada.Emprcodi = x.EMPRCODI;
                                InfoInvolucrada.Emprnomb = x.EMPRNOMB;
                                InfoInvolucrada.Version = x.VERSION;
                                InfoInvolucrada.Cumplimiento = x.CUMPLIMIENTO;
                                InfoInvolucrada.Portalweb = x.AFIPUBLICA;
                                InfoInvolucrada.Afiversion = Convert.ToInt32(x.AFIVERSION);
                                InfoInvolucrada.Tipodata = "A";
                                lstInfFinal.Add(InfoInvolucrada);
                            }
                        }
                        else
                        {
                            EveInformesScoDTO InfoInvolucrada = new EveInformesScoDTO();
                            InfoInvolucrada.Afecodi = x.AFECODI;
                            InfoInvolucrada.Emprcodi = x.EMPRCODI;
                            InfoInvolucrada.Emprnomb = x.EMPRNOMB;
                            InfoInvolucrada.Version = x.VERSION;
                            InfoInvolucrada.Cumplimiento = x.CUMPLIMIENTO;
                            InfoInvolucrada.Portalweb = x.AFIPUBLICA;
                            InfoInvolucrada.Afiversion = Convert.ToInt32(x.AFIVERSION);
                            InfoInvolucrada.Tipodata = "A";
                            lstInfFinal.Add(InfoInvolucrada);
                        }

                    }
                }

                #region Recomendaciones y Observaciones

                List<EveRecomobservDTO> ListaRecomendaciones = appAnalisisFallas.ListEveRecomobserv((int)reg.EVENCODI, 1);

                if (ListaRecomendaciones.Count > 0)
                    LstRec.AddRange(ListaRecomendaciones);

                List<EveRecomobservDTO> ListaObservaciones = appAnalisisFallas.ListEveRecomobserv((int)reg.EVENCODI, 2);
                if (ListaObservaciones.Count > 0)
                    LstObs.AddRange(ListaObservaciones);


                #endregion
            }

            oAnalisisFallasModel.ListaSenializacionProteccionInforme = SenializacionProteccionInforme;
            oAnalisisFallasModel.ListaEveRecomobserv = LstRec;
            oAnalisisFallasModel.ListaObservaciones = LstObs;
            oAnalisisFallasModel.LstInformes = lstInfFinal.OrderBy(y => y.Lastdate).Where(x => x.Portalweb == "S").OrderBy(y => y.Eveinfcodigo).ToList();

            string fechasEventosSco = string.Empty;
            List<int> idsEmpr = lstInfFinal.OrderBy(y => y.Lastdate).Select(x => x.Emprcodi).Distinct().ToList();
            List<InformeCTAFDTO> listaTabla = new List<InformeCTAFDTO>();

            int numeralEmpresaInvolucradaFinal = 1;

            foreach (var itemEmpresaInvolucradaFinal in lsEmpresaInvolucradaFinal)
            {
                InformeCTAFDTO dtoinforme = new InformeCTAFDTO();
                dtoinforme.INFORMEFINAL = string.Empty;
                dtoinforme.FECHA = string.Empty;

                foreach (var itemLstInformes in oAnalisisFallasModel.LstInformes)
                {
                    if (itemEmpresaInvolucradaFinal.EMPRCODI == itemLstInformes.Emprcodi)
                    {
                        dtoinforme.RowNumber = numeralEmpresaInvolucradaFinal;
                        dtoinforme.EMPRABREV = itemLstInformes.Emprnomb;

                        if (itemLstInformes.Eveinfcodigo != null)
                        {
                            if (string.IsNullOrEmpty(dtoinforme.INFORMEFINAL))
                            {
                                dtoinforme.INFORMEFINAL = itemLstInformes.Eveinfcodigo;
                            }
                            else
                            {
                                dtoinforme.INFORMEFINAL = string.Concat(dtoinforme.INFORMEFINAL, "\n", itemLstInformes.Eveinfcodigo);
                            }

                            if (!string.IsNullOrEmpty(itemLstInformes.Lastdate.ToString("dd.MM.yyyy")))
                            {
                                if (string.IsNullOrEmpty(dtoinforme.FECHA))
                                {
                                    dtoinforme.FECHA = itemLstInformes.Lastdate.ToString("dd.MM.yyyy");
                                }
                                else
                                {
                                    dtoinforme.FECHA = string.Concat(dtoinforme.FECHA, "\n", itemLstInformes.Lastdate.ToString("dd.MM.yyyy"));
                                }
                            }
                        }
                    }
                }

                listaTabla.Add(dtoinforme);
                numeralEmpresaInvolucradaFinal++;
            }

            oAnalisisFallasModel.CTAFINFORMEREPORTE = listaTabla;
            oAnalisisFallasModel.lstInterruptoresDescargadores = listIntDesc;

            string fileWord = this.ObtenerCarpetaSEV(oAnalisisFallaDTO, oAnalisisFallasModel.ListaEventosSco, ConstantesEvento.SubCarpetaInformeTecnico);

            int emprcodi = -1;
            int fdatcodi = 0;
            SiEmpresaDTO objEmpresa = emprcodi > 0 ? servicioEvento.ObtenerEmpresa(emprcodi) : null;
            //SiFuentedatosDTO objFuenteDatos = FactorySic.GetSiFuentedatosRepository().GetById(fdatcodi);
            //EventoDTO regEvento = this.ObtenerInterrupcionByAfecodi(afecodi);

            bool esPorEracmf = false;
            TablaReporte tablaReporteTotales = new TablaReporte();
            TablaReporte tablaReporteTotalesEacmf = new TablaReporte();
            TablaReporte tablaReduccion = new TablaReporte();
            oAnalisisFallasModel.ListaTipoInformacion = servAF.ListSiFuentedatosByFdatpadre(ConstantesExtranetCTAF.FdatcodiCTAFExtranet);

            if (oAnalisisFallaDTO.AFEERACMF != "S")
                oAnalisisFallasModel.ListaTipoInformacion = oAnalisisFallasModel.ListaTipoInformacion.Where(x => x.Fdatcodi != (int)ConstantesExtranetCTAF.Fuentedato.InterrupcionActivacionERACMF).ToList();
            else
                esPorEracmf = true;

            foreach (SiFuentedatosDTO _fue in oAnalisisFallasModel.ListaTipoInformacion)
            {
                #region REPORTE TOTAL
                appAnalisisFallas.ListarInterrupcionSuministrosGral(oAnalisisFallaDTO.AFECODI, emprcodi, _fue.Fdatcodi, out List<AfInterrupSuministroDTO> listaData, out List<AfInterrupSuministroDTO> listDataReportCero, out List<string> listaMsjValidacion, out List<int> listaEmprcodiReportaron, oAnalisisFallaDTO.AFEANIO.ToString(), oAnalisisFallaDTO.AFECORR.ToString());
                ////Lista horas de coordinacion de normalización
                List<AfHoraCoordDTO> lstHandsonHorasCoordinacion = appAnalisisFallas.ObtenerListaCruceHoracoordInterrupcion(oAnalisisFallaDTO.AFECODI, _fue.Fdatcodi, listaData, oAnalisisFallaDTO.ANIO, oAnalisisFallaDTO.AFECORR.ToString());

                ////TOTAL DE DATOS
                appAnalisisFallas.ListarRptTotalDatos(oAnalisisFallaDTO.AFECODI, emprcodi, listaData, lstHandsonHorasCoordinacion, out List<ReporteInterrupcion> listaReporte1, out bool formatFechaCab1);
                if (_fue.Fdatcodi == 13)
                    tablaReporteTotalesEacmf = appAnalisisFallas.ObtenerDataExcelDatosTotales(listaReporte1, esPorEracmf, formatFechaCab1);
                else if (_fue.Fdatcodi == 14)
                    tablaReporteTotales = appAnalisisFallas.ObtenerDataExcelDatosTotales(listaReporte1, esPorEracmf, formatFechaCab1);
                else if (_fue.Fdatcodi == 15)
                {
                    appAnalisisFallas.ListarRpt7ReduccionDeSuministro(oAnalisisFallaDTO.AFECODI, emprcodi, listaData, out List<ReporteInterrupcion> listaReporte, out bool formatFechaCab1Reduccion);
                    tablaReduccion = appAnalisisFallas.ObtenerDataExcelReduccionSuministros(listaReporte, formatFechaCab1Reduccion);
                }


                #endregion
            }

            //bytes = GenerarReporteTecnico(fileWord, oAnalisisFallasModel, tablaReporteTotales, fdatcodi, tablaReduccion, tablaReporteTotalesEacmf);
            bytes = GenerarReporteTecnico2(fileWord, oAnalisisFallasModel, tablaReporteTotales, fdatcodi, tablaReduccion, tablaReporteTotalesEacmf);
            return File(bytes, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", $"Formato_IT_{oAnalisisFallasModel.oAnalisisFallaDTO.CodigoEvento}.docx");
        }

        private static string NumeroEnPalabras(int numero)
        {
            if (numero < 1 || numero > 100)
            {
                return "Fuera de rango";
            }

            if (numero <= 10)
            {
                switch (numero)
                {
                    case 1: return "Primero";
                    case 2: return "Segundo";
                    case 3: return "Tercero";
                    case 4: return "Cuarto";
                    case 5: return "Quinto";
                    case 6: return "Sexto";
                    case 7: return "Séptimo";
                    case 8: return "Octavo";
                    case 9: return "Noveno";
                    case 10: return "Décimo";
                }
            }
            else if (numero < 20)
            {
                string[] especiales = { "Undécimo", "Duodécimo", "Decimotercero", "Decimocuarto", "Decimoquinto", "Decimosexto", "Decimoséptimo", "Decimoctavo", "Decimonoveno" };
                return especiales[numero - 11];
            }
            else if (numero % 10 == 0)
            {
                string[] decenas = { "Décima", "Vigésima", "Trigésima", "Cuadragésima", "Quincuagésima", "Sexagésima", "Septuagésima", "Octogésima", "Nonagésima" };
                return decenas[numero / 10 - 1];
            }
            else
            {
                int decena = numero / 10;
                int unidad = numero % 10;

                string[] decenas = { "Décima", "Vigésima", "Trigésima", "Cuadragésima", "Quincuagésima", "Sexagésima", "Septuagésima", "Octogésima", "Nonagésima" };
                string[] unidades = { "primero", "segundo", "tercero", "cuarto", "quinto", "sexto", "séptimo", "octavo", "noveno" };

                return decenas[decena - 1] + " " + unidades[unidad - 1];
            }

            return string.Empty;
        }

        private byte[] GenerarReporteTecnico(string fileWord,AnalisisFallasModel obj, TablaReporte tablaReporteTotales, int fdatcodi, TablaReporte tablaReduccion, TablaReporte tablaReporteTotalesEacmf)
        {
            string fileReporte = $"IT-{obj.oAnalisisFallaDTO.CodigoEvento}.docx";
            byte[] bytes = new byte[0];

            int fdatcodiTotal = 0, fdatcodiEracmf = 0, fdatcodiReduccion = 0;

            foreach (var item in obj.ListaTipoInformacion)
            {
                if (item.Fdatcodi == 13)
                    fdatcodiEracmf = 13;
                else if (item.Fdatcodi == 14)
                    fdatcodiTotal = 14;
                else if (item.Fdatcodi == 15)
                    fdatcodiReduccion = 15;
            }

            using (DocX document = DocX.Create(fileReporte))
            {
                var Logo = Server.MapPath("~/Content/Images/logo2024.png");
                var Firma = Server.MapPath("~/Content/Images/FirmaInforme.png");
                var CabeceraMain = Server.MapPath("~/Content/Images/image_head.png");

                Novacode.Image firma = document.AddImage(Firma);
                Novacode.Image logo = document.AddImage(Logo);
                Novacode.Image cabeceraMain = document.AddImage(CabeceraMain);

                document.DifferentFirstPage = true;
                document.DifferentOddAndEvenPages = false;

                #region INICIO HEADER

                document.AddHeaders();

                Header header_first = document.Headers.first;

                header_first.Paragraphs.First().Remove(false);

                Table header_first_table = header_first.InsertTable(1, 3);
                header_first_table.Design = TableDesign.TableGrid;
                header_first_table.AutoFit = AutoFit.ColumnWidth;
                header_first_table.Alignment = Alignment.center;

                var tempLogo = logo.CreatePicture();
                tempLogo.Width = 83;
                tempLogo.Height = 87;

                Paragraph upperRightParagraph = header_first.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                upperRightParagraph.AppendPicture(tempLogo);
                upperRightParagraph.Alignment = Alignment.center;

                for (int i = 0; i < 3; i++)
                {
                    VerticalAlignmentCenter(0, i, header_first_table);
                }

                int marginHeader = 25;

                header_first_table.Rows[0].Cells[0].Width = 190;
                header_first_table.Rows[0].Cells[0].MarginBottom = marginHeader;
                header_first_table.Rows[0].Cells[0].MarginTop = marginHeader;

                header_first_table.Rows[0].Cells[1].Width = 340;
                header_first_table.Rows[0].Cells[1].MarginBottom = marginHeader;
                header_first_table.Rows[0].Cells[1].MarginTop = marginHeader;

                header_first_table.Rows[0].Cells[2].Width = 190;
                header_first_table.Rows[0].Cells[2].MarginBottom = marginHeader;
                header_first_table.Rows[0].Cells[2].MarginTop = marginHeader;

                header_first.Tables[0].Rows[0].Cells[1].Paragraphs.First().Append(string.Format("INFORME TÉCNICO\n\n COES/D/DO/SEV/IT-{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO)).FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                header_first.Tables[0].Rows[0].Cells[2].Paragraphs.First().Append(string.Format("SUBDIRECCIÓN DE EVALUACIÓN\n\n  {0} DE {1} DE {2}", DateTime.Now.Day.ToString(), COES.Base.Tools.Util.ObtenerNombreMes(DateTime.Now.Month), DateTime.Now.Year)).FontSize(11).Bold().Font(new FontFamily("Calibri")).Alignment = Alignment.center;

                header_first.InsertParagraph();

                Header header_odd = document.Headers.odd;

                header_odd.Paragraphs.First().Remove(false);

                Table header_odd_table = header_odd.InsertTable(1, 3);
                header_odd_table.Design = TableDesign.TableNormal;
                header_odd_table.AutoFit = AutoFit.ColumnWidth;
                header_odd_table.Alignment = Alignment.center;

                Paragraph upperRightParagraph2 = header_odd.Tables[0].Rows[0].Cells[0].Paragraphs[0];
                upperRightParagraph2.AppendPicture(tempLogo);
                upperRightParagraph2.Alignment = Alignment.left;

                for (int i = 0; i < 3; i++)
                {
                    VerticalAlignmentCenter(0, i, header_odd_table);
                }

                header_odd_table.Rows[0].Cells[0].Width = 340;
                header_odd_table.Rows[0].Cells[0].MarginBottom = marginHeader;
                header_odd_table.Rows[0].Cells[0].MarginTop = marginHeader;

                header_odd_table.Rows[0].Cells[1].Width = 40;
                header_odd_table.Rows[0].Cells[1].MarginBottom = marginHeader;
                header_odd_table.Rows[0].Cells[1].MarginTop = marginHeader;

                header_odd_table.Rows[0].Cells[2].Width = 300;
                header_odd_table.Rows[0].Cells[2].MarginBottom = marginHeader;
                header_odd_table.Rows[0].Cells[2].MarginTop = marginHeader;

                header_odd.Tables[0].Rows[0].Cells[2].Paragraphs.First()
                    .Append("SUBDIRECCIÓN DE EVALUACIÓN").FontSize(10).Font(new FontFamily("Calibri"))
                    .AppendLine($"COES/D/DO/SEV/IT-{obj.oAnalisisFallaDTO.AFECORR.ToString("D3")}-{obj.oAnalisisFallaDTO.AFEANIO}").FontSize(10).Font(new FontFamily("Calibri")).Bold()
                    .AppendLine($"{COES.Base.Tools.Util.ObtenerNombreMes(DateTime.Now.Month)}-{DateTime.Now.Year}").FontSize(10).Font(new FontFamily("Calibri")).Alignment = Alignment.right;

                #endregion Header

                #region INICIO FOOTER
                document.AddFooters();
                var footer = document.Footers.odd;

                Table footer_table = footer.InsertTable(1, 3);
                footer_table.Design = TableDesign.TableNormal;
                footer_table.AutoFit = AutoFit.Window;

                for (int i = 0; i < 3; i++)
                {
                    VerticalAlignmentCenter(0, i, footer_table);
                }

                footer_table.Rows[0].Cells[0].Paragraphs[0].Alignment = Alignment.left;
                footer_table.Rows[0].Cells[0].Width = 250;

                footer_table.Rows[0].Cells[1].Paragraphs[0].Alignment = Alignment.center;
                footer_table.Rows[0].Cells[1].Width = 250;

                footer_table.Rows[0].Cells[2].Paragraphs[0].Alignment = Alignment.right;
                footer_table.Rows[0].Cells[2].Width = 250;

                Paragraph numero_pagina = footer.Tables[0].Rows[0].Cells[1].Paragraphs[0];
                numero_pagina.Append("Página ").FontSize(10).Font(new FontFamily("Calibri"));
                numero_pagina.AppendPageNumber(PageNumberFormat.normal);
                numero_pagina.Append(" de ").FontSize(10).Font(new FontFamily("Calibri"));
                numero_pagina.AppendPageCount(PageNumberFormat.normal);
                #endregion

                #region INICIAL
                Table table1 = document.InsertTable(3, 3);
                table1.Design = TableDesign.TableNormal;
                table1.AutoFit = AutoFit.ColumnWidth;

                Action<Paragraph, string, bool> fontFamilyStyle = (paragraph, value, isTitle) =>
                 {
                     paragraph.Append(value).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                     if (isTitle)
                     {
                         paragraph.Bold();
                     }
                 };

                Novacode.Cell eventoTitle = table1.Rows[0].Cells[0];
                Novacode.Cell eventoSeparador = table1.Rows[0].Cells[1];
                Novacode.Cell eventoValue = table1.Rows[0].Cells[2];

                Action<Novacode.Cell, Novacode.Cell, Novacode.Cell> addStyleCells = (celda1, celda2, celda3) =>
                {
                    celda1.Width = 95;
                    celda2.Width = 55;
                    celda3.Width = 420;
                };

                addStyleCells(eventoTitle,eventoSeparador,eventoValue);

                Paragraph pR1C1 = eventoTitle.Paragraphs[0];
                Paragraph pR1C2 = eventoSeparador.Paragraphs[0];
                Paragraph pR1C3 = eventoValue.Paragraphs[0];
                eventoValue.InsertParagraph();

                fontFamilyStyle(pR1C1, "EVENTO", true);
                fontFamilyStyle(pR1C2, ":", true);
                fontFamilyStyle(pR1C3, obj.oEventoDTO.EVENASUNTO, false);

                addStyleCells(table1.Rows[1].Cells[0], table1.Rows[1].Cells[1], table1.Rows[1].Cells[2]);

                Paragraph pR2C1 = table1.Rows[1].Cells[0].Paragraphs[0];
                Paragraph pR2C2 = table1.Rows[1].Cells[1].Paragraphs[0];
                Paragraph pR2C3 = table1.Rows[1].Cells[2].Paragraphs[0];
                table1.Rows[1].Cells[2].InsertParagraph();

                string FechaInicio = "";

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    var tempFechas = obj.ListaInformeCtaf.OrderBy(m => m.EVENINI).ToList();
                    tempFechas.ForEach(itemFecha =>
                    {
                        FechaInicio = FechaInicio == "" ? itemFecha.EVENINI.Value.ToString("dd.MM.yyyy") : FechaInicio + " y " + itemFecha.EVENINI.Value.ToString("dd.MM.yyyy");
                    });
                }

                fontFamilyStyle(pR2C1, "FECHA", true);
                fontFamilyStyle(pR2C2, ":", true);
                fontFamilyStyle(pR2C3, FechaInicio, false);

                addStyleCells(table1.Rows[2].Cells[0], table1.Rows[2].Cells[1], table1.Rows[2].Cells[2]);

                Paragraph pR3C1 = table1.Rows[2].Cells[0].Paragraphs[0];
                Paragraph pR3C2 = table1.Rows[2].Cells[1].Paragraphs[0];
                Paragraph pR3C3 = table1.Rows[2].Cells[2].Paragraphs[0];

                string HoraInicio = "";

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    foreach (var itemHora in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                    {
                        if (HoraInicio == "")
                        {
                            HoraInicio = (itemHora.EVENINI.Value.ToString("HH:mm") + " h");
                        }
                        else
                        {
                            HoraInicio = HoraInicio + " y " + (itemHora.EVENINI.Value.ToString("HH:mm") + " h");
                        }
                    }
                }

                fontFamilyStyle(pR3C1, "HORA", true);
                fontFamilyStyle(pR3C2, ":", true);
                fontFamilyStyle(pR3C3, HoraInicio, false);
                #endregion INICIAL

                document.InsertParagraph();

                var anchoNumeros = 40;
                var anchoDescripcion = 560;
                var tableDesign = TableDesign.TableNormal;

                double anchoOtrasSeccionesTitulo = 590;
                double anchoOtrasSecciones = 35;
                double anchoOtrasSeccionesGrandes = 43;
                int anchoImagenes = 560;

                Action<DocX, string, string> crearTitulos = (documentoX, seccion, descripcion) =>
                {
                    var tablaSeccion = document.InsertTable(1, 2);
                    tablaSeccion.Design = TableDesign.TableNormal;
                    tablaSeccion.AutoFit = AutoFit.ColumnWidth;
                    var tablaSeccionPrimeraFila = tablaSeccion.Rows[0];

                    tablaSeccionPrimeraFila.Cells[0].Paragraphs[0].Append(seccion).FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccionPrimeraFila.Cells[0].Width = 43;

                    tablaSeccionPrimeraFila.Cells[1].Paragraphs[0].Append($"{descripcion}").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                    tablaSeccionPrimeraFila.Cells[1].Width = 570;
                };

                #region PASO 1

                Table tablaSeccion6 = document.InsertTable(1, 2);

                tablaSeccion6.Design = TableDesign.TableNormal;
                tablaSeccion6.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion6.Rows[0].Cells[0].Paragraphs.First().Append("1.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion6.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion6.Rows[0].Cells[1].Paragraphs.First().Append("DESCRIPCIÓN DEL EVENTO").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion6.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    foreach (var itemEvento in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                    {
                        string valorEvento = itemEvento.CabNombreEvento;

                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            Table tablaSeccion6ItemTitulo = document.InsertTable(1, 2);

                            tablaSeccion6ItemTitulo.Design = TableDesign.TableNormal;
                            tablaSeccion6ItemTitulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion6ItemTitulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion6ItemTitulo.Rows[0].Cells[1].Paragraphs.First().Append(valorEvento).FontSize(11).Font(new FontFamily("Calibri")).UnderlineStyle(UnderlineStyle.singleLine).Bold();
                            tablaSeccion6ItemTitulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }

                        Table tablaSeccion6ItemContenido = document.InsertTable(1, 2);

                        tablaSeccion6ItemContenido.Design = TableDesign.TableNormal;
                        tablaSeccion6ItemContenido.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion6ItemContenido.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                        tablaSeccion6ItemContenido.Rows[0].Cells[1].Paragraphs.First().Append(itemEvento.CabDescripcionEvento).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                        tablaSeccion6ItemContenido.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();
                    }
                }

                #endregion

                #region PASO 2
                Table tablaSeccion7 = document.InsertTable(1, 2);

                tablaSeccion7.Design = TableDesign.TableNormal;
                tablaSeccion7.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion7.Rows[0].Cells[0].Paragraphs.First().Append("2.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion7.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion7.Rows[0].Cells[1].Paragraphs.First().Append("CONDICIÓN PREVIA AL EVENTO EN EL SEIN").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion7.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion71 = document.InsertTable(1, 2);

                tablaSeccion71.Design = TableDesign.TableNormal;
                tablaSeccion71.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion71.Rows[0].Cells[0].Paragraphs.First().Append("2.1").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion71.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion71.Rows[0].Cells[1].Paragraphs.First().Append("Las condiciones operativas del SEIN previas al evento fueron las siguientes:").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion71.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    int numeracionCondicionesPrevias = 1;

                    for (int r = 0; r < obj.ListaInformeCtaf.Count; r++)
                    {
                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            Table tablaSeccion7ItemTitulo = document.InsertTable(1, 2);

                            tablaSeccion7ItemTitulo.Design = TableDesign.TableNormal;
                            tablaSeccion7ItemTitulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion7ItemTitulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion7ItemTitulo.Rows[0].Cells[1].Paragraphs.First().Append(obj.ListaInformeCtaf[r].CabNombreEvento).FontSize(11).Font(new FontFamily("Calibri")).UnderlineStyle(UnderlineStyle.singleLine);
                            tablaSeccion7ItemTitulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }

                        if ((obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaCentral == null)
                            && (obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaLinea == null)
                            && (obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaTransformadores == null))
                        {
                            Table tablaSeccion7ItemTitulo = document.InsertTable(1, 2);

                            tablaSeccion7ItemTitulo.Design = TableDesign.TableNormal;
                            tablaSeccion7ItemTitulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion7ItemTitulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion7ItemTitulo.Rows[0].Cells[1].Paragraphs.First().Append("No existen registros.").FontSize(11).Font(new FontFamily("Calibri"));
                            tablaSeccion7ItemTitulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }
                        else
                        {
                            if (obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaCentral != null)
                            {
                                Table tablaSeccion71Dinamico = document.InsertTable(1, 2);

                                tablaSeccion71Dinamico.Design = TableDesign.TableNormal;
                                tablaSeccion71Dinamico.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion71Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("2.1." + numeracionCondicionesPrevias).FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[0].Width = 60;

                                tablaSeccion71Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Centros de generación involucrados:").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                numeracionCondicionesPrevias++;

                                var rowsCentral = obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count + 2;

                                Table tableCentral = document.InsertTable(rowsCentral, 5);

                                tableCentral.Design = TableDesign.TableGrid;
                                tableCentral.AutoFit = AutoFit.ColumnWidth;

                                for (int i = 0; i < 5; i++)
                                {
                                    TableFilColor(0, i, tableCentral);
                                    TableFilColor(1, i, tableCentral);
                                }

                                tableCentral.MergeCellsInColumn(0, 0, 1);
                                tableCentral.MergeCellsInColumn(1, 0, 1);
                                tableCentral.MergeCellsInColumn(2, 0, 1);

                                tableCentral.Rows[0].MergeCells(3, 4);
                                tableCentral.Rows[0].Height = 23.15; // 0.6 cm

                                double anchoColumnaN = 35.905;
                                double anchoCentral = 115;
                                double anchoUnidad = 94.488;
                                double anchoUnidadGeneracion = 75.590;
                                double anchoGeneracion = 151.180;

                                tableCentral.Rows[0].Cells[0].Paragraphs.First().Append("N°").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[0].Cells[0].Width = anchoColumnaN;
                                tableCentral.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[0].Cells[1].Paragraphs.First().Append("Central").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[0].Cells[1].Width = anchoCentral;
                                tableCentral.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[0].Cells[2].Paragraphs.First().Append("Unidad").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[0].Cells[2].Width = anchoUnidad;
                                tableCentral.Rows[0].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[0].Cells[3].Paragraphs.First().Append("Generación").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[0].Cells[3].RemoveParagraphAt(1);
                                tableCentral.Rows[0].Cells[3].Width = anchoGeneracion;
                                tableCentral.Rows[0].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[1].Cells[3].Paragraphs.First().Append("MW").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[1].Cells[3].Width = anchoUnidadGeneracion;
                                tableCentral.Rows[1].Cells[3].MarginTop = 10;
                                tableCentral.Rows[1].Cells[3].MarginBottom = 10;
                                tableCentral.Rows[1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                tableCentral.Rows[1].Cells[4].Paragraphs.First().Append("MVAr").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableCentral.Rows[1].Cells[4].Width = anchoUnidadGeneracion;
                                tableCentral.Rows[1].Cells[4].MarginTop = 10;
                                tableCentral.Rows[1].Cells[4].MarginBottom = 10;
                                tableCentral.Rows[1].Cells[4].VerticalAlignment = VerticalAlignment.Center;

                                int contadorCentral = 2;
                                int contadorFilas = 1;

                                var listaCondPreviaCentral = obj.ListaInformeCtaf[r].listaCondPreviaCentral;

                                var gruposCentral = listaCondPreviaCentral.GroupBy(x => x.EVECONDPRCENTRALDE).ToList();

                                foreach (var grupoCentral in gruposCentral)
                                {
                                    if (grupoCentral.Count() > 1)
                                    {
                                        tableCentral.MergeCellsInColumn(0, contadorCentral, contadorCentral + (grupoCentral.Count() - 1));
                                        tableCentral.MergeCellsInColumn(1, contadorCentral, contadorCentral + (grupoCentral.Count() - 1));

                                        tableCentral.Rows[contadorCentral].Cells[0].Paragraphs.First().Append(contadorFilas.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[0].Width = anchoColumnaN;

                                        bool rowGroupPrimeraFila = true;

                                        foreach (var central in grupoCentral)
                                        {
                                            if (rowGroupPrimeraFila)
                                            {
                                                tableCentral.Rows[contadorCentral].Cells[1].Paragraphs.First().Append(central.EVECONDPRCENTRALDE == null ? "" : central .EVECONDPRCENTRALDE.TrimEnd()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                                tableCentral.Rows[contadorCentral].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                                tableCentral.Rows[contadorCentral].Cells[1].Width = anchoCentral;

                                                rowGroupPrimeraFila = false;
                                            }

                                            tableCentral.Rows[contadorCentral].Cells[2].Paragraphs.First().Append(central.EVECONDPRCODIGOUNIDAD == null ? "" : central.EVECONDPRCODIGOUNIDAD.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                            tableCentral.Rows[contadorCentral].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                            tableCentral.Rows[contadorCentral].Cells[2].Width = anchoUnidad;

                                            tableCentral.Rows[contadorCentral].Cells[3].Paragraphs.First().Append(central.EVECONDPRPOTENCIAMW == null ? "" : central.EVECONDPRPOTENCIAMW.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                            tableCentral.Rows[contadorCentral].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                            tableCentral.Rows[contadorCentral].Cells[3].Width = anchoUnidadGeneracion;

                                            tableCentral.Rows[contadorCentral].Cells[4].Paragraphs.First().Append(central.EVECONDPRPOTENCIAMVAR == null ? "" : central.EVECONDPRPOTENCIAMVAR.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                            tableCentral.Rows[contadorCentral].Cells[4].VerticalAlignment = VerticalAlignment.Center;
                                            tableCentral.Rows[contadorCentral].Cells[4].Width = anchoUnidadGeneracion;

                                            contadorCentral++;
                                        }

                                        contadorFilas++;
                                    }
                                    else
                                    {
                                        var central = grupoCentral.FirstOrDefault();

                                        tableCentral.Rows[contadorCentral].Cells[0].Paragraphs.First().Append(contadorFilas.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[0].Width = anchoColumnaN;

                                        tableCentral.Rows[contadorCentral].Cells[1].Paragraphs.First().Append(central.EVECONDPRCENTRALDE == null ? "" : central .EVECONDPRCENTRALDE.TrimEnd()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[1].Width = anchoCentral;

                                        tableCentral.Rows[contadorCentral].Cells[2].Paragraphs.First().Append(central.EVECONDPRCODIGOUNIDAD == null ? "" : central.EVECONDPRCODIGOUNIDAD.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[2].Width = anchoUnidad;

                                        tableCentral.Rows[contadorCentral].Cells[3].Paragraphs.First().Append(central.EVECONDPRPOTENCIAMW == null ? "" : central.EVECONDPRPOTENCIAMW.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[3].Width = anchoUnidadGeneracion;

                                        tableCentral.Rows[contadorCentral].Cells[4].Paragraphs.First().Append(central.EVECONDPRPOTENCIAMVAR == null ? "" : central.EVECONDPRPOTENCIAMVAR.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tableCentral.Rows[contadorCentral].Cells[4].VerticalAlignment = VerticalAlignment.Center;
                                        tableCentral.Rows[contadorCentral].Cells[4].Width = anchoUnidadGeneracion;

                                        contadorCentral++;
                                        contadorFilas++;
                                    }
                                }

                                document.InsertParagraph("F/S: Fuera de servicio por operación.\r\n").FontSize(9).Font(new FontFamily("Calibri")).Alignment = Alignment.left;

                            }

                            if (obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaLinea != null)
                            {
                                Table tablaSeccion71Dinamico = document.InsertTable(1, 2);

                                tablaSeccion71Dinamico.Design = TableDesign.TableNormal;
                                tablaSeccion71Dinamico.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion71Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("2.1." + numeracionCondicionesPrevias).FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[0].Width = 60;

                                tablaSeccion71Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Flujo de potencia por las principales líneas de la zona:").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                numeracionCondicionesPrevias++;

                                var rowsLinea = obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count + 2;

                                Table tableLinea = document.InsertTable(rowsLinea, 6);

                                tableLinea.Design = TableDesign.TableGrid;

                                for (int i = 0; i < 6; i++)
                                {
                                    VerticalAlignmentCenter(0, i, tableLinea);
                                    VerticalAlignmentCenter(1, i, tableLinea);
                                    TableFilColor(0, i, tableLinea);
                                    TableFilColor(1, i, tableLinea);
                                    TableMarginBottom(1, i, tableLinea, 10);
                                }

                                tableLinea.Rows[0].Height = 46.866; // 1.24 cm

                                tableLinea.Rows[0].Cells[2].MarginTop = 10;
                                tableLinea.Rows[0].Cells[3].MarginTop = 10;

                                tableLinea.MergeCellsInColumn(0, 0, 1);
                                tableLinea.MergeCellsInColumn(1, 0, 1);
                                tableLinea.MergeCellsInColumn(4, 0, 1);
                                tableLinea.MergeCellsInColumn(5, 0, 1);

                                tableLinea.Rows[0].MergeCells(2, 3);

                                tableLinea.Rows[0].Cells[0].Paragraphs[0].Append("N°").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[0].Width = 35.905;

                                tableLinea.Rows[0].Cells[1].Paragraphs[0].Append("Código").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[1].Width = 75.590;

                                tableLinea.Rows[0].Cells[2].Paragraphs[0].Append("Subestaciones").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[2].Width = 266;

                                tableLinea.Rows[1].Cells[2].Paragraphs[0].Append("De").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[1].Cells[2].Width = 133;
                                tableLinea.Rows[1].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                tableLinea.Rows[1].Cells[2].MarginTop = 10;

                                tableLinea.Rows[1].Cells[3].Paragraphs[0].Append("A").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[1].Cells[3].Width = 133;
                                tableLinea.Rows[1].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                tableLinea.Rows[1].Cells[3].MarginTop = 10;

                                tableLinea.Rows[0].Cells[3].Paragraphs[0].Append("Potencia Activa (MW)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[3].Width = 75.590;

                                tableLinea.Rows[0].Cells[4].Paragraphs[0].Append("Potencia Reactiva (MVAr)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableLinea.Rows[0].Cells[4].Width = 75.590;

                                int contadorLinea = 1;

                                for (int x = 0; x < obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count; x++)
                                {
                                    tableLinea.Rows[contadorLinea + 1].Cells[0].Paragraphs[0].Append((x + 1).ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[0].Width = 35.905;
                                    tableLinea.Rows[contadorLinea + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[1].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCODIGOUNIDAD == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCODIGOUNIDAD).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[1].Width = 75.590;
                                    tableLinea.Rows[contadorLinea + 1].Cells[1].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[2].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCENTRALDE == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCENTRALDE.TrimEnd()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[2].Width = 133;
                                    tableLinea.Rows[contadorLinea + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[3].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRSUBESTACIONA == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRSUBESTACIONA.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[3].Width = 133;
                                    tableLinea.Rows[contadorLinea + 1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[4].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMW == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMW.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[4].Width = 75.590;
                                    tableLinea.Rows[contadorLinea + 1].Cells[4].VerticalAlignment = VerticalAlignment.Center;

                                    tableLinea.Rows[contadorLinea + 1].Cells[5].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMVAR == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMVAR.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableLinea.Rows[contadorLinea + 1].Cells[5].Width = 75.590;
                                    tableLinea.Rows[contadorLinea + 1].Cells[5].VerticalAlignment = VerticalAlignment.Center;

                                    contadorLinea++;
                                }

                                document.InsertParagraph("(*): Datos extraídas del SCADA COES.\r\n").Font(new FontFamily("Calibri")).FontSize(9);

                            }

                            if (obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaTransformadores != null)
                            {
                                Table tablaSeccion71Dinamico = document.InsertTable(1, 2);

                                tablaSeccion71Dinamico.Design = TableDesign.TableNormal;
                                tablaSeccion71Dinamico.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion71Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("2.1." + numeracionCondicionesPrevias).FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[0].Width = 60;

                                tablaSeccion71Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Flujo de potencia por los transformadores de potencia de la zona:").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion71Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                numeracionCondicionesPrevias++;

                                var rowsTransformador = obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count + 1;

                                Table tableTransformador = document.InsertTable(rowsTransformador, 6);

                                tableTransformador.Design = TableDesign.TableGrid;
                                tableTransformador.AutoFit = AutoFit.ColumnWidth;

                                for (int i = 0; i < 6; i++)
                                {
                                    TableFilColor(0, i, tableTransformador);
                                }

                                double anchoNumero = 35.905;
                                double anchoCodigo = 86.929;
                                double anchoSE = 115;
                                double anchoTension = 102.047;
                                double anchoPotencia = 83.149;

                                tableTransformador.Rows[0].Cells[0].Paragraphs[0].Append("N°").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[0].Width = anchoNumero;
                                tableTransformador.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[0].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[0].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[1].Paragraphs[0].Append("Código").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[1].Width = anchoCodigo;
                                tableTransformador.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[1].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[1].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[2].Paragraphs[0].Append("S.E.").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[2].Width = anchoSE;
                                tableTransformador.Rows[0].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[2].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[2].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[3].Paragraphs[0].Append("Nivel de\nTensión\n(kV)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[3].Width = anchoTension;
                                tableTransformador.Rows[0].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[3].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[3].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[4].Paragraphs[0].Append("Potencia Activa (MW)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[4].Width = anchoPotencia;
                                tableTransformador.Rows[0].Cells[4].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[4].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[4].MarginBottom = 10;

                                tableTransformador.Rows[0].Cells[5].Paragraphs[0].Append("Potencia Reactiva (MVAr)").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableTransformador.Rows[0].Cells[5].Width = anchoPotencia;
                                tableTransformador.Rows[0].Cells[5].VerticalAlignment = VerticalAlignment.Center;
                                tableTransformador.Rows[0].Cells[5].MarginTop = 10;
                                tableTransformador.Rows[0].Cells[5].MarginBottom = 10;

                                for (int x = 0; x < obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count; x++)
                                {
                                    tableTransformador.Rows[x + 1].Cells[0].Paragraphs[0].Append((x + 1).ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[0].Width = anchoNumero;
                                    tableTransformador.Rows[x + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[1].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCODIGOUNIDAD == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCODIGOUNIDAD).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[1].Width = anchoCodigo;
                                    tableTransformador.Rows[x + 1].Cells[1].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[2].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCENTRALDE == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCENTRALDE).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[2].Width = anchoSE;
                                    tableTransformador.Rows[x + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[3].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRTENSION == 0 ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRTENSION.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[3].Width = anchoTension;
                                    tableTransformador.Rows[x + 1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[4].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMW == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMW.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[4].Width = anchoPotencia;
                                    tableTransformador.Rows[x + 1].Cells[4].VerticalAlignment = VerticalAlignment.Center;

                                    tableTransformador.Rows[x + 1].Cells[5].Paragraphs[0].Append(obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMVAR == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMVAR.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableTransformador.Rows[x + 1].Cells[5].Width = anchoPotencia;
                                    tableTransformador.Rows[x + 1].Cells[5].VerticalAlignment = VerticalAlignment.Center;
                                }

                                document.InsertParagraph("(*): Datos extraídas del SCADA COES.\r\n").Font(new FontFamily("Calibri")).FontSize(9);

                            }
                        }

                    }
                }
                #endregion

                #region PASO 3
                Table tablaSeccion3 = document.InsertTable(1, 2);

                tablaSeccion3.Design = TableDesign.TableNormal;
                tablaSeccion3.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion3.Rows[0].Cells[0].Paragraphs.First().Append("3.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion3.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion3.Rows[0].Cells[1].Paragraphs.First().Append("SECUENCIA DE EVENTOS").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion3.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion3Contenido = document.InsertTable(1, 2);

                tablaSeccion3Contenido.Design = TableDesign.TableNormal;
                tablaSeccion3Contenido.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion3Contenido.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                tablaSeccion3Contenido.Rows[0].Cells[1].Paragraphs.First().Append("Se muestran detalladamente en el Anexo 1.").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion3Contenido.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();
                #endregion

                #region PASO 4
                Table tablaSeccion9 = document.InsertTable(1, 2);

                tablaSeccion9.Design = TableDesign.TableNormal;
                tablaSeccion9.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion9.Rows[0].Cells[0].Paragraphs.First().Append("4.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion9.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion9.Rows[0].Cells[1].Paragraphs.First().Append("SEÑALIZACIÓN DE LAS PROTECCIONES").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion9.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaEventosSco != null)
                {
                    foreach (var eventoSCO in obj.ListaEventosSco)
                    {
                        if (obj.ListaSenializacionProteccionInforme != null && obj.ListaSenializacionProteccionInforme.Any())
                        {
                            var listaSenializacionPorEvento = obj.ListaSenializacionProteccionInforme.Where(x => x.CodigoEvento == eventoSCO.EVENCODI.Value).ToList();

                            if (obj.ListaEventosSco.Count > 1)
                            {
                                Table tablaSeccion9Titulo = document.InsertTable(1, 2);

                                tablaSeccion9Titulo.Design = TableDesign.TableNormal;
                                tablaSeccion9Titulo.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion9Titulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccion9Titulo.Rows[0].Cells[1].Paragraphs.First().Append($"Evento del {eventoSCO.EVENINI.Value.ToString("dd.MM.yyyy")} a las {eventoSCO.EVENINI.Value.ToString("HH:mm:ss")} h:").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                                tablaSeccion9Titulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;
                                document.InsertParagraph();
                            }

                            if (listaSenializacionPorEvento.Count > 0)
                            {
                                var rows = listaSenializacionPorEvento.Count + 1;

                                Table table = document.InsertTable(rows, 6);
                                table.Design = TableDesign.TableGrid;
                                table.AutoFit = AutoFit.ColumnWidth;

                                for (int i = 0; i < 6; i++)
                                {
                                    TableFilColor(0, i, table);
                                }

                                double anchoSubestacion = 105;
                                double anchoEquipo = 80;
                                double anchoCodigo = 85;
                                double anchoSenializacion = 155;
                                double anchoInterruptor = 94.50;
                                double anchoAC = 58;

                                table.Rows[0].Cells[0].Paragraphs.First().Append("Subestación").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[0].Width = anchoSubestacion;
                                table.Rows[0].Cells[0].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[0].MarginBottom = 10;
                                table.Rows[0].Cells[0].MarginTop = 10;

                                table.Rows[0].Cells[1].Paragraphs.First().Append("Equipo").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[1].Width = anchoEquipo;
                                table.Rows[0].Cells[1].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[1].MarginBottom = 10;
                                table.Rows[0].Cells[1].MarginTop = 10;

                                table.Rows[0].Cells[2].Paragraphs.First().Append("Código").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[2].Width = anchoCodigo;
                                table.Rows[0].Cells[2].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[2].MarginBottom = 10;
                                table.Rows[0].Cells[2].MarginTop = 10;

                                table.Rows[0].Cells[3].Paragraphs.First().Append("Señalizaciones").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[3].Width = anchoSenializacion;
                                table.Rows[0].Cells[3].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[3].MarginBottom = 10;
                                table.Rows[0].Cells[3].MarginTop = 10;

                                table.Rows[0].Cells[4].Paragraphs.First().Append("Interruptor").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[4].Width = anchoInterruptor;
                                table.Rows[0].Cells[4].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[4].MarginBottom = 10;
                                table.Rows[0].Cells[4].MarginTop = 10;

                                table.Rows[0].Cells[5].Paragraphs.First().Append("A/C").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                table.Rows[0].Cells[5].Width = anchoAC;
                                table.Rows[0].Cells[5].VerticalAlignment = VerticalAlignment.Center;
                                table.Rows[0].Cells[5].MarginBottom = 10;
                                table.Rows[0].Cells[5].MarginTop = 10;

                                for (int i = 0; i < listaSenializacionPorEvento.Count; i++)
                                {
                                    table.Rows[i + 1].Cells[0].Paragraphs.First().Append(listaSenializacionPorEvento[i].SubEstacion ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[0].Width = anchoSubestacion;
                                    table.Rows[i + 1].Cells[0].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[1].Paragraphs.First().Append(listaSenializacionPorEvento[i].Equipo ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[1].Width = anchoEquipo;
                                    table.Rows[i + 1].Cells[1].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[2].Paragraphs.First().Append(listaSenializacionPorEvento[i].Codigo ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[2].Width = anchoCodigo;
                                    table.Rows[i + 1].Cells[2].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[3].Paragraphs.First().Append(listaSenializacionPorEvento[i].Senializaciones ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[3].Width = anchoSenializacion;
                                    table.Rows[i + 1].Cells[3].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[4].Paragraphs.First().Append(listaSenializacionPorEvento[i].Interruptor ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[4].Width = anchoInterruptor;
                                    table.Rows[i + 1].Cells[4].VerticalAlignment = VerticalAlignment.Center;

                                    table.Rows[i + 1].Cells[5].Paragraphs.First().Append(listaSenializacionPorEvento[i].CodigoAC ?? string.Empty).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    table.Rows[i + 1].Cells[5].Width = anchoAC;
                                    table.Rows[i + 1].Cells[5].VerticalAlignment = VerticalAlignment.Center;
                                }

                                document.InsertParagraph(string.Empty);
                            }
                            else
                            {
                                Table tablaSeccion9Titulo = document.InsertTable(1, 2);

                                tablaSeccion9Titulo.Design = TableDesign.TableNormal;
                                tablaSeccion9Titulo.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion9Titulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccion9Titulo.Rows[0].Cells[1].Paragraphs.First().Append("No se reportaron.").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion9Titulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;
                                document.InsertParagraph();
                            }
                        }
                        else
                        {
                            Table tablaSeccion9Titulo = document.InsertTable(1, 2);

                            tablaSeccion9Titulo.Design = TableDesign.TableNormal;
                            tablaSeccion9Titulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion9Titulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion9Titulo.Rows[0].Cells[1].Paragraphs.First().Append("No se reportaron.").FontSize(11).Font(new FontFamily("Calibri"));
                            tablaSeccion9Titulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;
                            document.InsertParagraph();
                        }
                    }
                }
                #endregion

                #region PASO 5
                Table tablaSeccion10 = document.InsertTable(1, 2);

                tablaSeccion10.Design = TableDesign.TableNormal;
                tablaSeccion10.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion10.Rows[0].Cells[0].Paragraphs.First().Append("5.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion10.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion10.Rows[0].Cells[1].Paragraphs.First().Append("CONTADOR DE INTERRUPTORES Y DESCARGADORES DE SOBRETENSIÓN").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion10.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                List<EveintdescargaDTO> LstInterruptores = obj.lstInterruptoresDescargadores != null ? obj.lstInterruptoresDescargadores.Where(x => x.EVEINTDESTIPO == 1).ToList() : new List<EveintdescargaDTO>();
                List<EveintdescargaDTO> LstDescargadores = obj.lstInterruptoresDescargadores != null ? obj.lstInterruptoresDescargadores.Where(x => x.EVEINTDESTIPO == 2).ToList() : new List<EveintdescargaDTO>();

                if (LstInterruptores.Count == 0 && LstDescargadores.Count == 0)
                {
                    Table tablaSeccion10SinContenidoUno = document.InsertTable(1, 2);

                    tablaSeccion10SinContenidoUno.Design = TableDesign.TableNormal;
                    tablaSeccion10SinContenidoUno.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion10SinContenidoUno.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion10SinContenidoUno.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion10SinContenidoUno.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                }
                else
                {
                    Table tablaSeccion101 = document.InsertTable(1, 2);

                    tablaSeccion101.Design = TableDesign.TableNormal;
                    tablaSeccion101.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion101.Rows[0].Cells[0].Paragraphs.First().Append("5.1").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    tablaSeccion101.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                    tablaSeccion101.Rows[0].Cells[1].Paragraphs.First().Append("CONTADOR DE INTERRUPTORES").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    tablaSeccion101.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();

                    if (LstInterruptores.Count == 0)
                    {
                        Table tablaSeccion10SinContenidoDos = document.InsertTable(1, 2);

                        tablaSeccion10SinContenidoDos.Design = TableDesign.TableNormal;
                        tablaSeccion10SinContenidoDos.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion10SinContenidoDos.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                        tablaSeccion10SinContenidoDos.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                        tablaSeccion10SinContenidoDos.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();
                    }
                    else
                    {
                        foreach (var item in obj.ListaEventosSco)
                        {
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                Table tablaSeccion10TituloUno = document.InsertTable(1, 2);

                                tablaSeccion10TituloUno.Design = TableDesign.TableNormal;
                                tablaSeccion10TituloUno.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion10TituloUno.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                                tablaSeccion10TituloUno.Rows[0].Cells[1].Paragraphs.First().Append($"Evento del {item.EVENINI.Value.ToString("dd.MM.yyyy")} a las {item.EVENINI.Value.ToString("HH:mm:ss")} h:").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                                tablaSeccion10TituloUno.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }

                            var lstInterruptoresPorEvento = LstInterruptores.Where(x => x.EVENCODI == item.EVENCODI).ToList();

                            if (lstInterruptoresPorEvento.Count == 0)
                            {
                                Table tablaSeccion10SinContenidoTres = document.InsertTable(1, 2);

                                tablaSeccion10SinContenidoTres.Design = TableDesign.TableNormal;
                                tablaSeccion10SinContenidoTres.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion10SinContenidoTres.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                                tablaSeccion10SinContenidoTres.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion10SinContenidoTres.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }
                            else
                            {
                                var rows = lstInterruptoresPorEvento.Count + 2;

                                Table tableInterruptor = document.InsertTable(rows, 9);

                                tableInterruptor.Design = TableDesign.TableGrid;

                                for (int i = 0; i < 9; i++)
                                {
                                    VerticalAlignmentCenter(0, i, tableInterruptor);
                                    VerticalAlignmentCenter(1, i, tableInterruptor);
                                    TableFilColor(0, i, tableInterruptor);
                                    TableFilColor(1, i, tableInterruptor);
                                }

                                tableInterruptor.Rows[0].Height = 22;
                                tableInterruptor.Rows[1].Height = 22;

                                tableInterruptor.MergeCellsInColumn(0, 0, 1);
                                tableInterruptor.MergeCellsInColumn(1, 0, 1);
                                tableInterruptor.MergeCellsInColumn(2, 0, 1);

                                tableInterruptor.Rows[0].MergeCells(3, 5);
                                tableInterruptor.Rows[0].MergeCells(4, 6);

                                tableInterruptor.Rows[0].Cells[0].Paragraphs[0].Append("Subestación").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[0].Width = 113.385;

                                tableInterruptor.Rows[0].Cells[1].Paragraphs[0].Append("Celda").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[1].Width = 75.590;

                                tableInterruptor.Rows[0].Cells[2].Paragraphs[0].Append("Código Interruptor").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[2].Width = 90.708;

                                tableInterruptor.Rows[0].Cells[3].Paragraphs[0].Append("Antes").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[3].Width = 158.740;

                                tableInterruptor.Rows[0].Cells[4].Paragraphs[0].Append("Después").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableInterruptor.Rows[0].Cells[4].Width = 158.740;

                                tableInterruptor.Rows[1].Cells[3].Paragraphs[0].Append("R").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[3].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[4].Paragraphs[0].Append("S").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[4].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[5].Paragraphs[0].Append("T").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[5].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[6].Paragraphs[0].Append("R").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[6].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[7].Paragraphs[0].Append("S").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[7].Width = 52.91;

                                tableInterruptor.Rows[1].Cells[8].Paragraphs[0].Append("T").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center; ;
                                tableInterruptor.Rows[1].Cells[8].Width = 52.91;

                                int contador = 1;

                                for (int i = 0; i < lstInterruptoresPorEvento.Count; i++)
                                {
                                    for (int k = 0; k <= 8; k++)
                                    {
                                        tableInterruptor.Rows[contador + 1].Cells[k].VerticalAlignment = VerticalAlignment.Center;
                                    }

                                    tableInterruptor.Rows[contador + 1].Cells[0].Width = 113.385;
                                    tableInterruptor.Rows[contador + 1].Cells[1].Width = 75.590;
                                    tableInterruptor.Rows[contador + 1].Cells[2].Width = 90.708;
                                    tableInterruptor.Rows[contador + 1].Cells[3].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[4].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[5].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[6].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[7].Width = 52.91;
                                    tableInterruptor.Rows[contador + 1].Cells[8].Width = 52.91;

                                    tableInterruptor.Rows[contador + 1].Cells[0].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESSUBESTACION).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[1].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESCELDA).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[2].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESCODIGO).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[3].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESR_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[4].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESS_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[5].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDEST_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[6].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESR_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[7].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDESS_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableInterruptor.Rows[contador + 1].Cells[8].Paragraphs[0].Append(lstInterruptoresPorEvento[i].EVEINTDEST_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    contador++;
                                }

                                document.InsertParagraph();
                            }
                        }
                    }

                    Table tablaSeccion102 = document.InsertTable(1, 2);

                    tablaSeccion102.Design = TableDesign.TableNormal;
                    tablaSeccion102.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion102.Rows[0].Cells[0].Paragraphs.First().Append("5.2").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    tablaSeccion102.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                    tablaSeccion102.Rows[0].Cells[1].Paragraphs.First().Append("DESCARGADORES DE SOBRETENSIÓN").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                    tablaSeccion102.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();

                    if (LstDescargadores.Count == 0)
                    {
                        Table tablaSeccion10SinContenidoCuatro = document.InsertTable(1, 2);

                        tablaSeccion10SinContenidoCuatro.Design = TableDesign.TableNormal;
                        tablaSeccion10SinContenidoCuatro.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion10SinContenidoCuatro.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                        tablaSeccion10SinContenidoCuatro.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                        tablaSeccion10SinContenidoCuatro.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();
                    }
                    else
                    {
                        foreach (var item in obj.ListaEventosSco)
                        {
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                Table tablaSeccion10TituloDos = document.InsertTable(1, 2);

                                tablaSeccion10TituloDos.Design = TableDesign.TableNormal;
                                tablaSeccion10TituloDos.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion10TituloDos.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                                tablaSeccion10TituloDos.Rows[0].Cells[1].Paragraphs.First().Append($"Evento del {item.EVENINI.Value.ToString("dd.MM.yyyy")} a las {item.EVENINI.Value.ToString("HH:mm:ss")} h:").FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                                tablaSeccion10TituloDos.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }

                            var lstDescargadoresPorEvento = LstDescargadores.Where(x => x.EVENCODI == item.EVENCODI).ToList();

                            if (lstDescargadoresPorEvento.Count == 0)
                            {
                                Table tablaSeccion10SinContenidoCinco = document.InsertTable(1, 2);

                                tablaSeccion10SinContenidoCinco.Design = TableDesign.TableNormal;
                                tablaSeccion10SinContenidoCinco.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion10SinContenidoCinco.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                                tablaSeccion10SinContenidoCinco.Rows[0].Cells[1].Paragraphs.First().Append("No Informado.").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccion10SinContenidoCinco.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }
                            else
                            {
                                var rows = lstDescargadoresPorEvento.Count + 2;

                                Table tableDescargador = document.InsertTable(rows, 9);

                                tableDescargador.Design = TableDesign.TableGrid;

                                for (int i = 0; i < 9; i++)
                                {
                                    VerticalAlignmentCenter(0, i, tableDescargador);
                                    VerticalAlignmentCenter(1, i, tableDescargador);
                                    TableFilColor(0, i, tableDescargador);
                                    TableFilColor(1, i, tableDescargador);
                                }

                                tableDescargador.Rows[0].Height = 22;
                                tableDescargador.Rows[1].Height = 22;

                                tableDescargador.MergeCellsInColumn(0, 0, 1);
                                tableDescargador.MergeCellsInColumn(1, 0, 1);
                                tableDescargador.MergeCellsInColumn(2, 0, 1);

                                tableDescargador.Rows[0].MergeCells(3, 5);
                                tableDescargador.Rows[0].MergeCells(4, 6);

                                tableDescargador.Rows[0].Cells[0].Paragraphs[0].Append("Subestación").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[0].Width = 113.385;

                                tableDescargador.Rows[0].Cells[1].Paragraphs[0].Append("Celda").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[1].Width = 75.590;

                                tableDescargador.Rows[0].Cells[2].Paragraphs[0].Append("Código Pararrayo").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[2].Width = 90.708;

                                tableDescargador.Rows[0].Cells[3].Paragraphs[0].Append("Antes").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[3].Width = 158.740;

                                tableDescargador.Rows[0].Cells[4].Paragraphs[0].Append("Después").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[0].Cells[4].Width = 158.740;

                                tableDescargador.Rows[1].Cells[3].Paragraphs[0].Append("R").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[3].Width = 52.91;

                                tableDescargador.Rows[1].Cells[4].Paragraphs[0].Append("S").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[4].Width = 52.91;

                                tableDescargador.Rows[1].Cells[5].Paragraphs[0].Append("T").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[5].Width = 52.91;

                                tableDescargador.Rows[1].Cells[6].Paragraphs[0].Append("R").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[6].Width = 52.91;

                                tableDescargador.Rows[1].Cells[7].Paragraphs[0].Append("S").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[7].Width = 52.91;

                                tableDescargador.Rows[1].Cells[8].Paragraphs[0].Append("T").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tableDescargador.Rows[1].Cells[8].Width = 52.91;

                                int contadorDescarga = 1;

                                for (int i = 0; i < lstDescargadoresPorEvento.Count; i++)
                                {
                                    for (int k = 0; k <= 8; k++)
                                    {
                                        tableDescargador.Rows[contadorDescarga + 1].Cells[k].VerticalAlignment = VerticalAlignment.Center;
                                    }

                                    tableDescargador.Rows[contadorDescarga + 1].Cells[0].Width = 113.385;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[1].Width = 75.590;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[2].Width = 90.708;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[3].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[4].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[5].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[6].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[7].Width = 52.91;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[8].Width = 52.91;

                                    tableDescargador.Rows[contadorDescarga + 1].Cells[0].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESSUBESTACION).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[1].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESCELDA).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[2].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESCODIGO).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[3].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESR_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[4].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESS_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[5].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDEST_ANTES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[6].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESR_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[7].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDESS_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    tableDescargador.Rows[contadorDescarga + 1].Cells[8].Paragraphs[0].Append(lstDescargadoresPorEvento[i].EVEINTDEST_DESPUES.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                    contadorDescarga++;
                                }

                                document.InsertParagraph();
                            }
                        }
                    }
                }

                #endregion

                #region PASO 6
                Table tablaSeccion11 = document.InsertTable(1, 2);

                tablaSeccion11.Design = TableDesign.TableNormal;
                tablaSeccion11.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion11.Rows[0].Cells[0].Paragraphs.First().Append("6.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion11.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion11.Rows[0].Cells[1].Paragraphs.First().Append("ANÁLISIS DEL EVENTO").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion11.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    int contadorFigurasAnalisisEvento = 1;
                    int contadorInteracionesEnLista = 0;

                    for (int r = 0; r < obj.ListaInformeCtaf.Count; r++)
                    {
                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            Table tablaSeccion11Titulo = document.InsertTable(1, 2);

                            tablaSeccion11Titulo.Design = TableDesign.TableNormal;
                            tablaSeccion11Titulo.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion11Titulo.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion11Titulo.Rows[0].Cells[1].Paragraphs.First().Append(obj.ListaInformeCtaf[r].CabNombreEvento).FontSize(11).Font(new FontFamily("Calibri")).Bold().UnderlineStyle(UnderlineStyle.singleLine);
                            tablaSeccion11Titulo.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }

                        if (!obj.ListaInformeCtaf[r].listaAnalisisEvento.Any())
                        {
                            Table tablaSeccion11SinRegistrosUno = document.InsertTable(1, 2);

                            tablaSeccion11SinRegistrosUno.Design = TableDesign.TableNormal;
                            tablaSeccion11SinRegistrosUno.AutoFit = AutoFit.ColumnWidth;

                            tablaSeccion11SinRegistrosUno.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                            tablaSeccion11SinRegistrosUno.Rows[0].Cells[1].Paragraphs.First().Append("No existen registros.").FontSize(11).Font(new FontFamily("Calibri"));
                            tablaSeccion11SinRegistrosUno.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                            document.InsertParagraph();
                        }
                        else
                        {
                            var listaSinTipoDOs = obj.ListaInformeCtaf[r].listaAnalisisEvento.Where(x => x.EVENUMCODI != 2).ToList();
                            var listaConTipoDos = obj.ListaInformeCtaf[r].listaAnalisisEvento.Where(x => x.EVENUMCODI == 2).ToList();

                            var grupoListasPorTipoNumera = listaSinTipoDOs.GroupBy(x => x.EVETIPNUMDESCRIPCION);

                            foreach (var grupo in grupoListasPorTipoNumera)
                            {
                                Table tablaSeccion11TituloDos = document.InsertTable(1, 2);

                                tablaSeccion11TituloDos.Design = TableDesign.TableNormal;
                                tablaSeccion11TituloDos.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion11TituloDos.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccion11TituloDos.Rows[0].Cells[1].Paragraphs.First().Append(grupo.Key).FontSize(11).Font(new FontFamily("Calibri")).Bold();
                                tablaSeccion11TituloDos.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                foreach (var listasPorTipoNumera in grupo)
                                {
                                    crearTitulos(document, $"6.{(contadorInteracionesEnLista + 1)}", listasPorTipoNumera.EVEANAEVEDESCNUMERAL);

                                    document.InsertParagraph();

                                    contadorInteracionesEnLista++;

                                    if (listasPorTipoNumera.EVEANAEVERUTAFIGURA != null)
                                    {
                                        string RutaAnalisis = ConfigurationManager.AppSettings["AnalisiEvento"];
                                        var imgfirma = RutaAnalisis + listasPorTipoNumera.EVEANAEVERUTAFIGURA;

                                        if (System.IO.File.Exists(imgfirma))
                                        {
                                            Table table = document.InsertTable(1, 2);
                                            table.Design = TableDesign.TableNormal;
                                            table.AutoFit = AutoFit.ColumnWidth;

                                            table.Rows[0].Cells[0].Width = 43;

                                            Novacode.Image FirmaDigital = document.AddImage(imgfirma);

                                            var figuraPicture = FirmaDigital.CreatePicture();
                                            int figuraAnchoDefecto = figuraPicture.Width;
                                            int figuraAltoDefecto = figuraPicture.Height;

                                            if (figuraAnchoDefecto > anchoImagenes)
                                            {
                                                figuraPicture.Width = anchoImagenes;
                                                figuraPicture.Height = (figuraAltoDefecto * anchoImagenes) / figuraAnchoDefecto;
                                            }

                                            table.Rows[0].Cells[1].Width = 570;
                                            table.Rows[0].Cells[1].Paragraphs.First().AppendPicture(figuraPicture);
                                            table.Rows[0].Cells[1].Paragraphs.First().Alignment = Alignment.center;

                                            var paragraphFigura = table.Rows[0].Cells[1].InsertParagraph($"Figura {contadorFigurasAnalisisEvento}: ").FontSize(9).Font(new FontFamily("Calibri")).Bold();
                                            paragraphFigura.Append($"{listasPorTipoNumera.EVEANAEVEDESCFIGURA}\n").FontSize(9).Font(new FontFamily("Calibri"));
                                            paragraphFigura.Alignment = Alignment.center;
                                            document.InsertParagraph();
                                            contadorFigurasAnalisisEvento++;
                                        }
                                    }
                                }
                            }

                            if (listaConTipoDos.Any())
                            {
                                Table tablaSeccion11TituloTres = document.InsertTable(1, 2);

                                tablaSeccion11TituloTres.Design = TableDesign.TableNormal;
                                tablaSeccion11TituloTres.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccion11TituloTres.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccion11TituloTres.Rows[0].Cells[1].Paragraphs.First().Append("Maniobras de restablecimiento").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                                tablaSeccion11TituloTres.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();

                                foreach (var itemConTipoDos in listaConTipoDos)
                                {
                                    crearTitulos(document, $"6.{(contadorInteracionesEnLista + 1)}", itemConTipoDos.EVEANAEVEDESCNUMERAL);

                                    document.InsertParagraph();

                                    contadorInteracionesEnLista++;

                                    if (itemConTipoDos.EVEANAEVERUTAFIGURA != null)
                                    {
                                        string RutaAnalisis = ConfigurationManager.AppSettings["AnalisiEvento"];
                                        var imgfirma = RutaAnalisis + itemConTipoDos.EVEANAEVERUTAFIGURA;

                                        if (System.IO.File.Exists(imgfirma))
                                        {
                                            Table table = document.InsertTable(1, 2);
                                            table.Design = TableDesign.TableNormal;
                                            table.AutoFit = AutoFit.ColumnWidth;

                                            table.Rows[0].Cells[0].Width = 43;

                                            Novacode.Image FirmaDigital = document.AddImage(imgfirma);

                                            var figuraPicture = FirmaDigital.CreatePicture();
                                            int figuraAnchoDefecto = figuraPicture.Width;
                                            int figuraAltoDefecto = figuraPicture.Height;

                                            if (figuraAnchoDefecto > anchoImagenes)
                                            {
                                                figuraPicture.Width = anchoImagenes;
                                                figuraPicture.Height = (figuraAltoDefecto * anchoImagenes) / figuraAnchoDefecto;
                                            }

                                            table.Rows[0].Cells[1].Width = 570;
                                            table.Rows[0].Cells[1].Paragraphs.First().AppendPicture(figuraPicture);
                                            table.Rows[0].Cells[1].Paragraphs.First().Alignment = Alignment.center;

                                            var paragraphFigura = table.Rows[0].Cells[1].InsertParagraph($"Figura {contadorFigurasAnalisisEvento}: ").FontSize(9).Font(new FontFamily("Calibri")).Bold();
                                            paragraphFigura.Append($"{itemConTipoDos.EVEANAEVEDESCFIGURA}").FontSize(9).Font(new FontFamily("Calibri"));
                                            paragraphFigura.Alignment = Alignment.center;
                                            contadorFigurasAnalisisEvento++;
                                            document.InsertParagraph();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                #endregion

                #region PASO 7
                Table tablaSeccion12 = document.InsertTable(1, 2);

                tablaSeccion12.Design = TableDesign.TableNormal;
                tablaSeccion12.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion12.Rows[0].Cells[0].Paragraphs.First().Append("7.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion12.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion12.Rows[0].Cells[1].Paragraphs.First().Append("CONSECUENCIAS").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion12.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion121 = document.InsertTable(1, 2);

                tablaSeccion121.Design = TableDesign.TableNormal;
                tablaSeccion121.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion121.Rows[0].Cells[0].Paragraphs.First().Append("7.1").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion121.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                tablaSeccion121.Rows[0].Cells[1].Paragraphs.First().Append("En la calidad del Producto: ").FontSize(11).Font(new FontFamily("Calibri")).Bold().Append("No hubo trasgresiones a la calidad del producto.").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                tablaSeccion121.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion122 = document.InsertTable(1, 2);

                tablaSeccion122.Design = TableDesign.TableNormal;
                tablaSeccion122.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion122.Rows[0].Cells[0].Paragraphs.First().Append("7.2").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion122.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                tablaSeccion122.Rows[0].Cells[1].Paragraphs.First().Append("En la calidad del suministro: ").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                tablaSeccion122.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                int _nroReporte = 1;

                if (tablaReporteTotalesEacmf.ListaRegistros.Count == 0 && tablaReporteTotales.ListaRegistros.Count == 0)
                {
                    Table tablaSeccion122SinRegistro = document.InsertTable(1, 2);

                    tablaSeccion122SinRegistro.Design = TableDesign.TableNormal;
                    tablaSeccion122SinRegistro.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion122SinRegistro.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;
                    tablaSeccion122SinRegistro.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion122SinRegistro.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                }
                else
                {
                    if (tablaReporteTotalesEacmf.ListaRegistros.Count > 0)
                    {
                        Table tablaSeccion12Dinamico = document.InsertTable(1, 2);

                        tablaSeccion12Dinamico.Design = TableDesign.TableNormal;
                        tablaSeccion12Dinamico.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion12Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("7.2." + _nroReporte.ToString()).FontSize(11).Font(new FontFamily("Calibri"));
                        tablaSeccion12Dinamico.Rows[0].Cells[0].Width = 60;

                        tablaSeccion12Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Las interrupciones de suministro que se produjeron por activación del ERACMF fueron las siguientes:").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                        tablaSeccion12Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();

                        List<RegistroReporte> registrosparteEracmf = new List<RegistroReporte>();
                        TablaReporte TablaEracmf = new TablaReporte();

                        FontFamily fontDoc = new FontFamily(tablaReporteTotalesEacmf.TipoFuente);
                        List<RegistroReporte> registrosTotalesEracmf = tablaReporteTotalesEacmf.ListaRegistros;
                        int numFilas;
                        int numColumnas;
                        Table secuencia_0;

                        var codigosEventos = tablaReporteTotalesEacmf.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                        foreach (var item in codigosEventos)
                        {
                            registrosparteEracmf = registrosTotalesEracmf.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                            if (codigosEventos.Count > 1)
                            {
                                servAF.AddSubtituloReporte2(document.InsertParagraph(), registrosparteEracmf[0].Nombre, fontDoc);
                            }
                            else
                            {
                                document.InsertParagraph();
                            }

                            TablaEracmf = tablaReporteTotalesEacmf;
                            TablaEracmf.ListaRegistros = registrosparteEracmf;
                            numFilas = registrosparteEracmf.Count;
                            numColumnas = tablaReporteTotalesEacmf.CabeceraColumnas.Count;
                            secuencia_0 = document.InsertTable(numFilas + 1, numColumnas);

                            servAF.GenerarRptWord(ref secuencia_0, tablaReporteTotalesEacmf, 1, fdatcodiEracmf);
                            document.InsertParagraph();
                        }

                        _nroReporte++;
                    }

                    if (tablaReporteTotales.ListaRegistros.Count > 0)
                    {
                        Table tablaSeccion12Dinamico = document.InsertTable(1, 2);

                        tablaSeccion12Dinamico.Design = TableDesign.TableNormal;
                        tablaSeccion12Dinamico.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccion12Dinamico.Rows[0].Cells[0].Paragraphs.First().Append("7.2." + _nroReporte.ToString()).FontSize(11).Font(new FontFamily("Calibri"));
                        tablaSeccion12Dinamico.Rows[0].Cells[0].Width = 60;

                        tablaSeccion12Dinamico.Rows[0].Cells[1].Paragraphs.First().Append("Las Interrupciones de suministro que se produjeron fueron las siguientes:").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                        tablaSeccion12Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();

                        List<RegistroReporte> registros = new List<RegistroReporte>();
                        TablaReporte Tabla = new TablaReporte();

                        FontFamily fontDoc = new FontFamily(tablaReporteTotales.TipoFuente);
                        List<RegistroReporte> registrosTotales = tablaReporteTotales.ListaRegistros;
                        int numFilas;
                        int numColumnas;
                        Table secuencia_0;

                        var codigosEventos = tablaReporteTotales.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                        foreach (var item in codigosEventos)
                        {
                            registros = registrosTotales.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                            if (codigosEventos.Count > 1)
                            {
                                servAF.AddSubtituloReporte2(document.InsertParagraph(), registros[0].Nombre, fontDoc);
                            }

                            Tabla = tablaReporteTotales;
                            Tabla.ListaRegistros = registros;
                            numFilas = registros.Count;
                            numColumnas = tablaReporteTotales.CabeceraColumnas.Count;
                            secuencia_0 = document.InsertTable(numFilas + 1, numColumnas);

                            servAF.GenerarRptWord(ref secuencia_0, tablaReporteTotales, 12, fdatcodiTotal);
                            document.InsertParagraph();
                        }
                    }
                }

                if (tablaReduccion.ListaRegistros.Count > 0)
                {
                    Table tablaSeccion123 = document.InsertTable(1, 2);

                    tablaSeccion123.Design = TableDesign.TableNormal;
                    tablaSeccion123.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion123.Rows[0].Cells[0].Paragraphs.First().Append("7.3").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion123.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                    tablaSeccion123.Rows[0].Cells[1].Paragraphs.First().Append("Reducción de carga:").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                    tablaSeccion123.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();

                    var parrafoSeccionOpinionUno = document.InsertParagraph("En estos casos no se interrumpe el suministro eléctrico en el punto de entrega; por lo tanto, de acuerdo con lo establecido en el numeral 6.1.2  de la NTCSE, no representan transgresiones a la calidad de suministro.\r\n").FontSize(11).Font(new FontFamily("Calibri"));
                    parrafoSeccionOpinionUno.Alignment = Alignment.both;

                    Table tablaSeccion1231 = document.InsertTable(1, 2);

                    tablaSeccion1231.Design = TableDesign.TableNormal;
                    tablaSeccion1231.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion1231.Rows[0].Cells[0].Paragraphs.First().Append("7.3.1").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion1231.Rows[0].Cells[0].Width = 60;

                    tablaSeccion1231.Rows[0].Cells[1].Paragraphs.First().Append("Las Reducciones de carga que se produjeron fueron las siguientes:").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                    tablaSeccion1231.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    int numFilasReducciones;
                    int numColumnasReducciones;
                    FontFamily fontDocReducciones = new FontFamily(tablaReduccion.TipoFuente);

                    List<RegistroReporte> registrosReducciones = new List<RegistroReporte>();
                    List<RegistroReporte> registrosTotalesReducciones = new List<RegistroReporte>();
                    TablaReporte TablaReducciones = new TablaReporte();
                    var codigosEventosReducciones = tablaReduccion.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();
                    registrosTotalesReducciones = tablaReduccion.ListaRegistros;

                    foreach (var item in codigosEventosReducciones)
                    {
                        registrosReducciones = registrosTotalesReducciones.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                        if (codigosEventosReducciones.Count > 1)
                        {
                            document.InsertParagraph();
                            servAF.AddSubtituloReporte2(document.InsertParagraph(), registrosReducciones[0].Nombre, fontDocReducciones);
                        }
                        else
                        {
                            document.InsertParagraph();
                        }

                        TablaReducciones = tablaReduccion;
                        TablaReducciones.ListaRegistros = registrosReducciones;
                        numFilasReducciones = registrosReducciones.Count;
                        numColumnasReducciones = tablaReduccion.CabeceraColumnas.Count;
                        Table secuencia_0Reduccion = document.InsertTable(numFilasReducciones + 1, numColumnasReducciones);
                        servAF.GenerarRptWord(ref secuencia_0Reduccion, tablaReduccion, 16, fdatcodiReduccion);
                        document.InsertParagraph();
                    }
                }
                #endregion

                #region PASO 8
                Table tablaSeccion8 = document.InsertTable(1, 2);

                tablaSeccion8.Design = TableDesign.TableNormal;
                tablaSeccion8.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion8.Rows[0].Cells[0].Paragraphs.First().Append("8.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion8.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion8.Rows[0].Cells[1].Paragraphs.First().Append("CONCLUSIONES").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion8.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                Table tablaSeccion8Contenido = document.InsertTable(1, 2);

                tablaSeccion8Contenido.Design = TableDesign.TableNormal;
                tablaSeccion8Contenido.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion8Contenido.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                tablaSeccion8Contenido.Rows[0].Cells[1].Paragraphs.First().Append("SIN REGISTROS.").FontSize(11).Font(new FontFamily("Calibri"));
                tablaSeccion8Contenido.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();
                #endregion

                #region PASO 9
                Table tablaSeccion13 = document.InsertTable(1, 2);

                tablaSeccion13.Design = TableDesign.TableNormal;
                tablaSeccion13.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion13.Rows[0].Cells[0].Paragraphs.First().Append("9.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion13.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion13.Rows[0].Cells[1].Paragraphs.First().Append("OBSERVACIONES").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                tablaSeccion13.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaObservaciones != null && obj.ListaObservaciones.Count > 0)
                {
                    var idsEmpresas = obj.ListaObservaciones.Select(y => new { y.EMPRCODI }).Distinct().ToList();
                    int contador = 0;

                    foreach (var item in idsEmpresas)
                    {
                        bool band = false;

                        for (int x = 0; x < obj.ListaObservaciones.Count; x++)
                        {
                            if (item.EMPRCODI == obj.ListaObservaciones[x].EMPRCODI)
                            {
                                if (!band)
                                {
                                    int num_ = contador + 1;

                                    Table tablaSeccion13Dinamico = document.InsertTable(1, 2);

                                    tablaSeccion13Dinamico.Design = TableDesign.TableNormal;
                                    tablaSeccion13Dinamico.AutoFit = AutoFit.ColumnWidth;

                                    tablaSeccion13Dinamico.Rows[0].Cells[0].Paragraphs.First().Append($"9.{num_}").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                                    tablaSeccion13Dinamico.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                                    tablaSeccion13Dinamico.Rows[0].Cells[1].Paragraphs.First().Append(obj.ListaObservaciones[x].EMPRNOMB).FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                                    tablaSeccion13Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                    document.InsertParagraph();

                                    contador++;
                                    band = true;
                                }

                                var tablaSeccionObservacion = document.InsertTable(1, 3);

                                tablaSeccionObservacion.Design = TableDesign.TableNormal;
                                tablaSeccionObservacion.AutoFit = AutoFit.ColumnWidth;

                                var tablaSeccionObservacionPrimeraFila = tablaSeccionObservacion.Rows[0];

                                tablaSeccionObservacionPrimeraFila.Cells[0].Width = 43;

                                tablaSeccionObservacionPrimeraFila.Cells[1].Paragraphs[0].Append("•").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccionObservacionPrimeraFila.Cells[1].Width = 23;

                                tablaSeccionObservacionPrimeraFila.Cells[2].Paragraphs[0].Append(obj.ListaObservaciones[x].EVERECOMOBSERVDESC).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                                tablaSeccionObservacionPrimeraFila.Cells[2].Width = 570;

                                document.InsertParagraph();
                            }
                        }
                    }
                }
                else
                {
                    Table tablaSeccion13Ninguna = document.InsertTable(1, 2);

                    tablaSeccion13Ninguna.Design = TableDesign.TableNormal;
                    tablaSeccion13Ninguna.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion13Ninguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion13Ninguna.Rows[0].Cells[1].Paragraphs.First().Append("Ninguna.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion13Ninguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                }
                #endregion

                #region PASO 10
                Table tablaSeccion14 = document.InsertTable(1, 2);

                tablaSeccion14.Design = TableDesign.TableNormal;
                tablaSeccion14.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion14.Rows[0].Cells[0].Paragraphs.First().Append("10.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion14.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion14.Rows[0].Cells[1].Paragraphs.First().Append("RECOMENDACIONES:").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                tablaSeccion14.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.ListaEveRecomobserv == null)
                {
                    Table tablaSeccion14Ninguna = document.InsertTable(1, 2);

                    tablaSeccion14Ninguna.Design = TableDesign.TableNormal;
                    tablaSeccion14Ninguna.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion14Ninguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion14Ninguna.Rows[0].Cells[1].Paragraphs.First().Append("Ninguna.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion14Ninguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();

                }
                else if (obj.ListaEveRecomobserv.Count == 0)
                {
                    Table tablaSeccion14Ninguna = document.InsertTable(1, 2);

                    tablaSeccion14Ninguna.Design = TableDesign.TableNormal;
                    tablaSeccion14Ninguna.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion14Ninguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion14Ninguna.Rows[0].Cells[1].Paragraphs.First().Append("Ninguna.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion14Ninguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                }
                else if (obj.ListaEveRecomobserv.Count > 0)
                {
                    int contadorRec = 0;

                    var idsEmpresasRec = obj.ListaEveRecomobserv.Select(y => new { y.EMPRCODI }).Distinct().ToList();

                    foreach (var item in idsEmpresasRec)
                    {
                        bool band = false;

                        for (int x = 0; x < obj.ListaEveRecomobserv.Count; x++)
                        {
                            if (item.EMPRCODI == obj.ListaEveRecomobserv[x].EMPRCODI)
                            {
                                if (!band)
                                {
                                    int num = contadorRec + 1;

                                    Table tablaSeccion14Dinamico = document.InsertTable(1, 2);

                                    tablaSeccion14Dinamico.Design = TableDesign.TableNormal;
                                    tablaSeccion14Dinamico.AutoFit = AutoFit.ColumnWidth;

                                    tablaSeccion14Dinamico.Rows[0].Cells[0].Paragraphs.First().Append($"10.{num}").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                                    tablaSeccion14Dinamico.Rows[0].Cells[0].Width = anchoOtrasSeccionesGrandes;

                                    tablaSeccion14Dinamico.Rows[0].Cells[1].Paragraphs.First().Append($"CTAF A {obj.ListaEveRecomobserv[x].EMPRNOMB.TrimStart().TrimEnd()}").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.both;
                                    tablaSeccion14Dinamico.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                    document.InsertParagraph();

                                    contadorRec++;
                                    band = true;
                                }

                                var tablaSeccionRecomendaciones = document.InsertTable(1, 3);

                                tablaSeccionRecomendaciones.Design = TableDesign.TableNormal;
                                tablaSeccionRecomendaciones.AutoFit = AutoFit.ColumnWidth;

                                var tablaSeccionRecomendacionesPrimeraFila = tablaSeccionRecomendaciones.Rows[0];

                                tablaSeccionRecomendacionesPrimeraFila.Cells[0].Width = 43;

                                tablaSeccionRecomendacionesPrimeraFila.Cells[1].Paragraphs[0].Append("•").FontSize(11).Font(new FontFamily("Calibri"));
                                tablaSeccionRecomendacionesPrimeraFila.Cells[1].Width = 23;

                                tablaSeccionRecomendacionesPrimeraFila.Cells[2].Paragraphs[0].Append(obj.ListaEveRecomobserv[x].EVERECOMOBSERVDESC).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;
                                tablaSeccionRecomendacionesPrimeraFila.Cells[2].Width = 570;

                                document.InsertParagraph();
                            }
                        }
                    }
                }
                #endregion

                #region SECCION 11
                Table tablaSeccion5 = document.InsertTable(1, 2);

                tablaSeccion5.Design = TableDesign.TableNormal;
                tablaSeccion5.AutoFit = AutoFit.ColumnWidth;

                tablaSeccion5.Rows[0].Cells[0].Paragraphs.First().Append("11.").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                tablaSeccion5.Rows[0].Cells[0].Width = anchoOtrasSecciones;

                tablaSeccion5.Rows[0].Cells[1].Paragraphs.First().Append("DOCUMENTOS CONSIDERADOS EN EL INFORME").FontSize(11).Font(new FontFamily("Calibri")).Bold().Append(":");
                tablaSeccion5.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                document.InsertParagraph();

                if (obj.CTAFINFORMEREPORTE != null && obj.CTAFINFORMEREPORTE.Count > 0)
                {
                    var rows = obj.CTAFINFORMEREPORTE.Count + 1;

                    Table table = document.InsertTable(rows, 4);
                    table.Design = TableDesign.TableGrid;

                    for (int i = 0; i < 4; i++)
                    {
                        VerticalAlignmentCenter(0, i, table);
                        TableFilColor(0, i, table);
                        TableMarginBottom(0, i, table, 10);
                    }

                    table.Rows[0].Cells[0].Width = 5;
                    table.Rows[0].Cells[1].Width = 500;
                    table.Rows[0].Cells[2].Width = 500;
                    table.Rows[0].Cells[3].Width = 8;

                    table.Rows[0].Cells[0].Paragraphs[0].Append("N°").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[1].Paragraphs[0].Append("EMPRESA").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[2].Paragraphs[0].Append("INFORME FINAL").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                    table.Rows[0].Cells[3].Paragraphs[0].Append("FECHA DE ENTREGA").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;

                    for (int i = 0; i < obj.CTAFINFORMEREPORTE.Count; i++)
                    {
                        VerticalAlignmentCenter(i + 1, 0, table);
                        VerticalAlignmentCenter(i + 1, 1, table);
                        VerticalAlignmentCenter(i + 1, 2, table);
                        VerticalAlignmentCenter(i + 1, 3, table);

                        if (obj.CTAFINFORMEREPORTE[i].EMPRABREV != null)
                        {
                            table.Rows[i + 1].Cells[0].Paragraphs[0].Append(obj.CTAFINFORMEREPORTE[i].RowNumber.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                            table.Rows[i + 1].Cells[1].Paragraphs[0].Append(obj.CTAFINFORMEREPORTE[i].EMPRABREV).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                            table.Rows[i + 1].Cells[2].Paragraphs[0].Append(obj.CTAFINFORMEREPORTE[i].INFORMEFINAL).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                            table.Rows[i + 1].Cells[3].Paragraphs[0].Append(obj.CTAFINFORMEREPORTE[i].FECHA).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                        }
                    }

                    document.InsertParagraph();
                }
                else
                {
                    Table tablaSeccion5NoRegistrado = document.InsertTable(1, 2);

                    tablaSeccion5NoRegistrado.Design = TableDesign.TableNormal;
                    tablaSeccion5NoRegistrado.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccion5NoRegistrado.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccion5NoRegistrado.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").FontSize(11).Font(new FontFamily("Calibri"));
                    tablaSeccion5NoRegistrado.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();

                }
                #endregion

                if (obj.oAnalisisFallaDTO.AFEITDECFECHAELAB.HasValue)
                {
                    document.InsertParagraph($"San Isidro, {obj.oAnalisisFallaDTO.AFEITDECFECHAELAB.Value.Day} de {COES.Base.Tools.Util.ObtenerNombreMes(obj.oAnalisisFallaDTO.AFEITDECFECHAELAB.Value.Month).ToLower()} de 2023").FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.right;
                }

                document.InsertParagraph().InsertPageBreakAfterSelf();

                #region Seccion Anexo
                var parrafoSeccionAnexo = document.InsertParagraph("ANEXO 1\r\n").FontSize(16).Font(new FontFamily("Calibri")).Bold();
                parrafoSeccionAnexo.Alignment = Alignment.center;

                var parrafoSecuenciaCronologica = document.InsertParagraph("Secuencia Cronológica de Eventos\r\n").FontSize(11).Font(new FontFamily("Calibri")).Bold();
                parrafoSecuenciaCronologica.Alignment = Alignment.center;

                if (obj.ListaInformeCtaf == null)
                {
                    Table tablaSeccionAnexoNinguna = document.InsertTable(1, 2);

                    tablaSeccionAnexoNinguna.Design = TableDesign.TableNormal;
                    tablaSeccionAnexoNinguna.AutoFit = AutoFit.ColumnWidth;

                    tablaSeccionAnexoNinguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                    tablaSeccionAnexoNinguna.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").Font(new FontFamily("Calibri")).FontSize(11);
                    tablaSeccionAnexoNinguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                    document.InsertParagraph();
                }
                else
                {
                    if (obj.ListaInformeCtaf.Count == 0)
                    {
                        Table tablaSeccionAnexoNinguna = document.InsertTable(1, 2);

                        tablaSeccionAnexoNinguna.Design = TableDesign.TableNormal;
                        tablaSeccionAnexoNinguna.AutoFit = AutoFit.ColumnWidth;

                        tablaSeccionAnexoNinguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                        tablaSeccionAnexoNinguna.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").Font(new FontFamily("Calibri")).FontSize(11);
                        tablaSeccionAnexoNinguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                        document.InsertParagraph();
                    }
                    else
                    {
                        foreach (var itemSecuenciaEvento in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                        {
                            if (obj.ListaInformeCtaf.Count > 1)
                            {
                                var parrafoValorEvento = document.InsertParagraph(itemSecuenciaEvento.CabNombreEvento + "\r\n").FontSize(11).Font(new FontFamily("Calibri")).UnderlineStyle(UnderlineStyle.singleLine).Bold();
                                parrafoValorEvento.Alignment = Alignment.center;
                            }

                            if (itemSecuenciaEvento.listaSecuenciaEvento.Count == 0)
                            {
                                Table tablaSeccionAnexoNinguna = document.InsertTable(1, 2);

                                tablaSeccionAnexoNinguna.Design = TableDesign.TableNormal;
                                tablaSeccionAnexoNinguna.AutoFit = AutoFit.ColumnWidth;

                                tablaSeccionAnexoNinguna.Rows[0].Cells[0].Width = anchoOtrasSecciones;
                                tablaSeccionAnexoNinguna.Rows[0].Cells[1].Paragraphs.First().Append("No Registrado.").Font(new FontFamily("Calibri")).FontSize(11);
                                tablaSeccionAnexoNinguna.Rows[0].Cells[1].Width = anchoOtrasSeccionesTitulo;

                                document.InsertParagraph();
                            }
                            else
                            {
                                List<DateTime> _fecha = null;
                                List<string> fechas = null;
                                if (itemSecuenciaEvento.listaSecuenciaEvento[0].EVESFECHA != "")
                                {
                                    _fecha = itemSecuenciaEvento.listaSecuenciaEvento.Select(x => DateTime.ParseExact(x.EVESFECHA, Constantes.FormatoFecha, CultureInfo.InvariantCulture)).Distinct().ToList();
                                }
                                if (_fecha != null)
                                    fechas = _fecha.OrderBy(m => m).Select(y => y.ToString("dd/MM/yyyy")).ToList();
                                int _rows = 0;
                                if (fechas != null && fechas.Count > 1)
                                    _rows = fechas.Count;

                                var rows = itemSecuenciaEvento.listaSecuenciaEvento.Count + _rows + 1;

                                Table tablaSecuenciaEventos = document.AddTable(rows, 3);
                                tablaSecuenciaEventos.Design = TableDesign.TableGrid;
                                tablaSecuenciaEventos.Alignment = Alignment.center;
                                tablaSecuenciaEventos.AutoFit = AutoFit.ColumnWidth;

                                for (int i = 0; i < 3; i++)
                                {
                                    VerticalAlignmentCenter(0, i, tablaSecuenciaEventos);
                                    TableFilColor(0, i, tablaSecuenciaEventos);
                                }

                                tablaSecuenciaEventos.Rows[0].Cells[0].Paragraphs[0].Append("Hora").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tablaSecuenciaEventos.Rows[0].Cells[1].Paragraphs[0].Append("S.E. / C.C.").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                tablaSecuenciaEventos.Rows[0].Cells[2].Paragraphs[0].Append("Descripción").FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;

                                tablaSecuenciaEventos.Rows[0].Cells[0].Width = 94.488;
                                tablaSecuenciaEventos.Rows[0].Cells[1].Width = 102.047;
                                tablaSecuenciaEventos.Rows[0].Cells[2].Width = 362.834;

                                if (fechas != null && fechas.Count > 1)
                                {
                                    int row = 1;
                                    string fechaevalueada = string.Empty;
                                    foreach (string FechSec in fechas)
                                    {
                                        if (FechSec != fechaevalueada)
                                        {
                                            for (int i = 0; i < 3; i++)
                                            {
                                                VerticalAlignmentCenter(row, i, tablaSecuenciaEventos);
                                                TableFilColor(row, i, tablaSecuenciaEventos);
                                            }
                                            fechaevalueada = FechSec;

                                            //row++;
                                            tablaSecuenciaEventos.Rows[row].MergeCells(0, 2);
                                            tablaSecuenciaEventos.Rows[row].Cells[0].Paragraphs[0].Append(FechSec.Replace("/",".")).FontSize(11).Font(new FontFamily("Calibri")).Bold().Alignment = Alignment.center;
                                            tablaSecuenciaEventos.Rows[row].Cells[0].Paragraphs.Last().Remove(false);
                                            tablaSecuenciaEventos.Rows[row].Cells[0].Paragraphs.Last().Remove(false);
                                        }
                                        int aux = 0;
                                        for (int i = 0; i < itemSecuenciaEvento.listaSecuenciaEvento.Count; i++)
                                        {
                                            if (FechSec == itemSecuenciaEvento.listaSecuenciaEvento[i].EVESFECHA)
                                            {
                                                if (aux > row)
                                                    row = aux;

                                                VerticalAlignmentCenter(row + 1, 0, tablaSecuenciaEventos);
                                                VerticalAlignmentCenter(row + 1, 1, tablaSecuenciaEventos);
                                                VerticalAlignmentCenter(row + 1, 2, tablaSecuenciaEventos);

                                                string fecha_ = string.Empty;
                                                int valorms = 0;

                                                if (itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Length > 8)
                                                {
                                                    valorms = Convert.ToInt32(itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(9, 3));
                                                    if (valorms > 0)
                                                        fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;
                                                    else
                                                        fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(0, 8);
                                                }
                                                else
                                                    fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;


                                                tablaSecuenciaEventos.Rows[row + 1].Cells[0].Paragraphs[0].Append(fecha_).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                                tablaSecuenciaEventos.Rows[row + 1].Cells[1].Paragraphs[0].Append(itemSecuenciaEvento.listaSecuenciaEvento[i].D1.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                                tablaSecuenciaEventos.Rows[row + 1].Cells[2].Paragraphs[0].Append(itemSecuenciaEvento.listaSecuenciaEvento[i].SEDESCRIP.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;

                                                tablaSecuenciaEventos.Rows[row + 1].Cells[0].Width = 94.488;
                                                tablaSecuenciaEventos.Rows[row + 1].Cells[1].Width = 102.047;
                                                tablaSecuenciaEventos.Rows[row + 1].Cells[2].Width = 362.834;

                                                aux = row + 1;
                                            }
                                        }
                                        row = aux + 1;
                                    }
                                }
                                else
                                {
                                    for (int i = 0; i < itemSecuenciaEvento.listaSecuenciaEvento.Count; i++)
                                    {
                                        VerticalAlignmentCenter(i + 1, 0, tablaSecuenciaEventos);
                                        VerticalAlignmentCenter(i + 1, 1, tablaSecuenciaEventos);
                                        VerticalAlignmentCenter(i + 1, 2, tablaSecuenciaEventos);

                                        string fecha_ = string.Empty;
                                        int valorms = 0;
                                        if (itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Length > 8)
                                        {
                                            valorms = Convert.ToInt32(itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(9, 3));
                                            if (valorms > 0)
                                                fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;
                                            else
                                                fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(0, 8);
                                        }
                                        else
                                            fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;

                                        tablaSecuenciaEventos.Rows[i + 1].Cells[0].Paragraphs[0].Append(fecha_).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tablaSecuenciaEventos.Rows[i + 1].Cells[1].Paragraphs[0].Append(itemSecuenciaEvento.listaSecuenciaEvento[i].D1.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.center;
                                        tablaSecuenciaEventos.Rows[i + 1].Cells[2].Paragraphs[0].Append(itemSecuenciaEvento.listaSecuenciaEvento[i].SEDESCRIP.ToString()).FontSize(11).Font(new FontFamily("Calibri")).Alignment = Alignment.both;

                                        tablaSecuenciaEventos.Rows[i + 1].Cells[0].Width = 94.488;
                                        tablaSecuenciaEventos.Rows[i + 1].Cells[1].Width = 102.047;
                                        tablaSecuenciaEventos.Rows[i + 1].Cells[2].Width = 362.834;
                                    }
                                }

                                document.InsertTable(tablaSecuenciaEventos);
                                document.InsertParagraph();
                            }

                        }
                    }
                }
                #endregion

                MemoryStream ms = new MemoryStream();
                document.SaveAs(ms);
                bytes = ms.GetBuffer();

                FileServer.CreateFolder(null, null, fileWord);
                document.SaveAs(fileWord + fileReporte);

            }

            return bytes;

        }
        /// <summary>
        /// Permite mostrar la lista de indicadores de análisis de falla
        /// </summary>
        /// <param name="anio"></param>
        /// <returns></returns>
        public List<AfIndicadoresDTO> ListaIndicadoresAF(int anio)
        {
         
            List<EventoDTO> ListaEvento = servAF.ConsultarAnalisisFallasAnio(anio);
            List<EventoDTO> ListaAF = new List<EventoDTO>();
            var lista = ListaEvento;
            List<AfIndicadoresDTO> listaindicadores = new List<AfIndicadoresDTO>();

            foreach (var item in ListaEvento)
            {
                Log.Error(lista);

                EventoDTO primer_evento = (lista.Where(y => y.CODIGO == item.CODIGO).OrderBy(c => DateTime.ParseExact(c.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture)).FirstOrDefault());
                    if (ListaAF.Where(j => j.CODIGO == primer_evento.CODIGO).Count() == 0)
                        ListaAF.Add(primer_evento);
            }

            foreach (EventoDTO item in ListaAF)
            {
                DateTime FechaInicioCtaf = DateTime.ParseExact(item.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture) >= item.AFEREUFECHAPROG ? item.AFEREUFECHAPROG : DateTime.ParseExact(item.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture);
                DateTime FechaFinCtaf = DateTime.ParseExact(item.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture) >= item.AFEREUFECHAPROG ? DateTime.ParseExact(item.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture) : item.AFEREUFECHAPROG;
                item.DIASINFCTAF = servAF.CantDiasHabiles(FechaInicioCtaf, FechaFinCtaf);

                DateTime FechaInicioTec = item.AFEITDECFECHAELAB >= DateTime.ParseExact(item.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture) ? DateTime.ParseExact(item.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture) : item.AFEITDECFECHAELAB;
                DateTime FechaFinTec = item.AFEITDECFECHAELAB >= DateTime.ParseExact(item.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture) ? item.AFEITDECFECHAELAB : DateTime.ParseExact(item.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture);
                item.DIASINFTEC = servAF.CantDiasHabiles(FechaInicioTec, FechaFinTec);
            }
            for (int x = 1; x <= 12; x++)
            {       
                AfIndicadoresDTO Indicador = new AfIndicadoresDTO();
                Indicador.MesNombre = f_get_nombre_mes_corto(x);
                Indicador.TotalEventosMes = ListaAF.Where(r => DateTime.ParseExact(r.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture).Month == x).Count();
                Indicador.Diasinfctaf = ListaAF.Where(r => DateTime.ParseExact(r.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture).Month == x).Select(r => r.DIASINFCTAF).Sum();
                Indicador.Diasinftec = ListaAF.Where(r => DateTime.ParseExact(r.FECHA_EVENTO, Constantes.FormatoFechaHora, CultureInfo.InvariantCulture).Month == x).Select(r => r.DIASINFTEC).Sum();
                Indicador.Limctaf = Constantes.Limctaf;
                Indicador.Limit = Constantes.Limit;
                Indicador.Indctaf = Indicador.TotalEventosMes != 0 ? Convert.ToDecimal((Indicador.Diasinfctaf / Indicador.TotalEventosMes).ToString("0.00")) : Convert.ToDecimal("0.00");
                Indicador.Indit = Indicador.TotalEventosMes != 0 ? Convert.ToDecimal((Indicador.Diasinftec / Indicador.TotalEventosMes).ToString("0.00")) : Convert.ToDecimal("0.00");
                Indicador.Anio = anio;
                listaindicadores.Add(Indicador);
            }

                    

            return listaindicadores;
        }
        /// <summary>
        /// Permite mostrar la lista de indicadores de análisis de falla
        /// </summary>
        /// <param name="anio"></param>
        /// <returns></returns>
        [HttpPost]
        public PartialViewResult ListaIndicadores(int anio)
        {
            IndicadorCtafModel model = new IndicadorCtafModel();
            List<AfIndicadoresDTO> listaindicadores = new List<AfIndicadoresDTO>();
            try
            {
                listaindicadores = this.ListaIndicadoresAF(anio);

                model.listaAfIndicadores = listaindicadores;
            }
            catch (Exception ex)
            {
                Log.Error(ex);
            }
             return PartialView(model);


        }
        /// <summary>
        /// Permite obtener los registros de para los 3 gráficos de indicadores
        /// </summary>
        /// <param name="anio"></param>
        /// <returns></returns>        
        public JsonResult ListaGraficoIndicadores(int anio)
        {
            IndicadorCtafModel model = new IndicadorCtafModel();
            List<AfIndicadoresDTO> listaindicadores = new List<AfIndicadoresDTO>();
            listaindicadores = this.ListaIndicadoresAF(anio);
            model.listaAfIndicadores = listaindicadores;
            return Json(model);
        }

        /// <summary>
        /// Permite generar el reporte eventos
        /// </summary>
        /// <param name="modelo">modelo tipo BusquedaReporte</param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ReporteIndicadores(int anio)
        {
            List<AfIndicadoresDTO> listaindicadores = new List<AfIndicadoresDTO>();
            try 
            {
                listaindicadores = this.ListaIndicadoresAF(anio);               
                ExcelDocument.GenerarReporteIndicadoresCTAF(listaindicadores, anio);
            }
            catch (Exception ex) 
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }

            return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
        }

        public static string RemoveAccentsWithRegEx(string inputString)
        {
            Regex replace_a_Accents = new Regex("[á|à|ä|â]", RegexOptions.Compiled);
            Regex replace_A_Accents = new Regex("[Á|À|Ä|Â]", RegexOptions.Compiled);
            Regex replace_e_Accents = new Regex("[é|è|ë|ê]", RegexOptions.Compiled);
            Regex replace_E_Accents = new Regex("[É|È|Ë|Ê]", RegexOptions.Compiled);
            Regex replace_i_Accents = new Regex("[í|ì|ï|î]", RegexOptions.Compiled);
            Regex replace_I_Accents = new Regex("[Í|Ì|Ï|Î]", RegexOptions.Compiled);
            Regex replace_o_Accents = new Regex("[ó|ò|ö|ô]", RegexOptions.Compiled);
            Regex replace_O_Accents = new Regex("[Ó|Ò|Ö|Ô]", RegexOptions.Compiled);
            Regex replace_u_Accents = new Regex("[ú|ù|ü|û]", RegexOptions.Compiled);
            Regex replace_U_Accents = new Regex("[Ú|Ù|Ü|Û]", RegexOptions.Compiled);

            inputString = replace_a_Accents.Replace(inputString, "a");
            inputString = replace_A_Accents.Replace(inputString, "A");
            inputString = replace_e_Accents.Replace(inputString, "e");
            inputString = replace_E_Accents.Replace(inputString, "E");
            inputString = replace_i_Accents.Replace(inputString, "i");
            inputString = replace_I_Accents.Replace(inputString, "I");
            inputString = replace_o_Accents.Replace(inputString, "o");
            inputString = replace_O_Accents.Replace(inputString, "O");
            inputString = replace_u_Accents.Replace(inputString, "u");
            inputString = replace_U_Accents.Replace(inputString, "U");
            return inputString;
        }

        /// <summary>
        /// Actualiza descripcion de evento AF
        /// </summary>
        /// <param name="evencodi"></param>
        /// <param name="evendescctaf"></param>
        /// <returns></returns>
        [HttpPost]
        public JsonResult ActualizarDesEventoAF(int evencodi, string evendescctaf)
        {
            try
            {
                servAF.ActualizarDesEventoAF(evencodi, evendescctaf);
            }
            catch (Exception ex)
            {
                Log.Error(NameController, ex);
                return Json(new { result = "-1", responseText = ex }, JsonRequestBehavior.AllowGet);
            }
            return Json(new { result = "1", responseText = "" }, JsonRequestBehavior.AllowGet);
        }

        /// <summary>
        /// Permite exportar los datos del reporte de indicadores de CTAF.
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public virtual ActionResult DescargarReporteIndicadores()
        {
            //string fullPath = ConfigurationManager.AppSettings[RutaDirectorio.ReporteEvento] + NombreArchivo.ReporteIndicadoresCTAF;
            string fullPath = AppDomain.CurrentDomain.BaseDirectory + RutaDirectorio.RutaCargaInformeEvento + NombreArchivo.ReporteIndicadoresCTAF;
            return File(fullPath, Constantes.AppExcel, NombreArchivo.ReporteIndicadoresCTAF);
        }

        [HttpGet]
        public virtual ActionResult DescargarDecisionCTAF(int id)
        {
            var logo = Server.MapPath("~/Content/Images/logoCoes30.png");
            var lineaImagen = Server.MapPath("~/Content/Images/linea-horizontal.png");
            //var response = servAF.GenerarDecisionCTAF(id, servicioEvento, logo, ConstantesEvento.SubCarpetaInformeTecnico, Constantes.FileSystemSev, Constantes.FormatoFecha, lineaImagen);
            var response = GenerarDecisionCTAF(id, servicioEvento, logo, ConstantesEvento.SubCarpetaInformeTecnico, Constantes.FileSystemSev, Constantes.FormatoFecha, lineaImagen);
            return File(response.WordContent, "application/vnd.openxmlformats-officedocument.wordprocessingml.document", response.FileName);
        }

        private string f_get_nombre_mes_corto(int pi_mes)
        {

            switch (pi_mes)
            {
                case 1:
                    return "Ene";
                case 2:
                    return "Feb";
                case 3:
                    return "Mar";
                case 4:
                    return "Abr";
                case 5:
                    return "May";
                case 6:
                    return "Jun";
                case 7:
                    return "Jul";
                case 8:
                    return "Ago";
                case 9:
                    return "Sep";
                case 10:
                    return "Oct";
                case 11:
                    return "Nov";
                case 12:
                    return "Dic";
                default:
                    return "";
            }
        }
        public void EliminarCriteriosEvento(int afecodi)
        {
            CrEventoDTO evento = servCriteriosEvento.ObtenerCrEventoxAF(afecodi);
            List<CrEtapaEventoDTO> etapas = servCriteriosEvento.ListarCrEtapaEvento(evento.CREVENCODI);
            foreach(CrEtapaEventoDTO item in etapas)
            {
                servCriteriosEvento.EliminarCrEmpresaSolicitantexEtapa(item.CRETAPACODI);
                servCriteriosEvento.EliminarCrEmpresaResponsableEtapa(item.CRETAPACODI);
                servCriteriosEvento.DeleteCrEtapaCriterio(item.CRETAPACODI);
                servCriteriosEvento.DeleteCrEtapaEvento(item.CRETAPACODI);
            }
            servCriteriosEvento.DeleteCrEvento(evento.CREVENCODI);
        }

        /// <summary>
        /// Permite obtener una lista de Responsables
        /// </summary>
        /// <returns></returns>
        [HttpPost]
        public JsonResult listaResponsables()
        {
            ResponsableAppServicio responsableAppServicio = new ResponsableAppServicio();
            List<SiDirectorioDTO> ListaDirectorio = responsableAppServicio.ObtenerListaDirectorio();
            return Json(ListaDirectorio);
        }

        public byte[] GenerarReporteCitacion2(Models.AnalisisFallasModel obj, string fileserver, string rutaSev, string filename)
        {
            bool presencial = false;

            if (obj.LstEvento.Count > 0)
            {
                if (obj.LstEvento[0].EVENTIPOFALLA == "P")
                {
                    presencial = true;
                }
                else
                {
                    presencial = false;
                }

            }

            byte[] bytes = new byte[0];

            using (var wordProcessor = new RichEditDocumentServer())
            {
                var Logo = Server.MapPath("~/Content/Images/logo2024.png");

                Document document = wordProcessor.Document;

                document.BeginUpdate();

                //document.AppendSection();

                DevExpress.XtraRichEdit.API.Native.Section firstSection = document.Sections[0];
                //firstSection.StartType = SectionStartType.Continuous;
                firstSection.Margins.Top = Units.CentimetersToDocumentsF((float)2.76);
                firstSection.Margins.Bottom = Units.CentimetersToDocumentsF((float)2.54);
                firstSection.Margins.Right = Units.CentimetersToDocumentsF((float)3.1);
                firstSection.Margins.Left = Units.CentimetersToDocumentsF((float)2.54);

                #region Header
                SubDocument myHeader = firstSection.BeginUpdateHeader(HeaderFooterType.Primary);

                DevExpress.XtraRichEdit.API.Native.Table tablaHeader = myHeader.Tables.Create(myHeader.Range.End, 1, 2);
                myHeader.Images.Insert(tablaHeader[0, 0].Range.Start, DocumentImageSource.FromFile(Logo));
                myHeader.InsertText(tablaHeader[0, 1].Range.Start, $"COMITÉ TÉCNICO\n DE ANÁLISIS DE FALLAS \n AÑO {DateTime.Now.Year.ToString()} (CT-AF) ");

                CharacterProperties headerRowProperties = myHeader.BeginUpdateCharacters(tablaHeader[0, 1].Range);
                headerRowProperties.FontName = "Calibri";
                headerRowProperties.FontSize = 10;
                headerRowProperties.ForeColor = Color.Black;
                headerRowProperties.Bold = true;
                document.EndUpdateCharacters(headerRowProperties);

                ParagraphProperties headerRowParagraphProperties = myHeader.BeginUpdateParagraphs(tablaHeader[0, 1].Range);
                headerRowParagraphProperties.Alignment = ParagraphAlignment.Center;
                document.EndUpdateParagraphs(headerRowParagraphProperties);
                tablaHeader[0, 1].VerticalAlignment = TableCellVerticalAlignment.Center;

                DevExpress.XtraRichEdit.API.Native.TableCell firstCell = tablaHeader[0, 0];
                firstCell.PreferredWidthType = WidthType.Fixed;
                firstCell.PreferredWidth = Units.CentimetersToDocumentsF((float)10.05);
                firstCell.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Left.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Right.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Top.LineStyle = TableBorderLineStyle.None;
                firstCell.LeftPadding = Units.CentimetersToDocumentsF((float)0.12);

                DevExpress.XtraRichEdit.API.Native.TableCell SecondCell = tablaHeader[0, 1];
                SecondCell.PreferredWidthType = WidthType.Fixed;
                SecondCell.PreferredWidth = Units.CentimetersToDocumentsF((float)5.29);
                SecondCell.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Left.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Right.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Top.LineStyle = TableBorderLineStyle.None;
                firstSection.EndUpdateHeader(myHeader);
                //firstSection.DifferentFirstPage = true;

                #endregion

                #region Estilos
                ParagraphStyle Estilo1 = document.ParagraphStyles["Estilo1"];
                if (Estilo1 == null)
                {
                    Estilo1 = document.ParagraphStyles.CreateNew();
                    Estilo1.Name = "Estilo1";
                    Estilo1.Alignment = ParagraphAlignment.Left;
                    Estilo1.FontName = "Calibri";
                    document.ParagraphStyles.Add(Estilo1);
                }

                ParagraphStyle Estilo2 = document.ParagraphStyles["Estilo2"];
                if (Estilo2 == null)
                {
                    Estilo2 = document.ParagraphStyles.CreateNew();
                    Estilo2.Name = "Estilo2";
                    Estilo2.Alignment = ParagraphAlignment.Center;
                    Estilo2.Bold = true;
                    Estilo2.FontName = "Calibri";
                    Estilo2.Underline = UnderlineType.Single;
                    document.ParagraphStyles.Add(Estilo2);
                }

                ParagraphStyle Estilo3 = document.ParagraphStyles["Estilo3"];
                if (Estilo3 == null)
                {
                    Estilo3 = document.ParagraphStyles.CreateNew();
                    Estilo3.Name = "Estilo3";
                    Estilo3.Alignment = ParagraphAlignment.Left;
                    Estilo3.FontName = "Calibri";
                    Estilo3.Underline = UnderlineType.Single;
                    document.ParagraphStyles.Add(Estilo3);
                }

                ParagraphStyle Estilo4 = document.ParagraphStyles["Estilo4"];
                if (Estilo4 == null)
                {
                    Estilo4 = document.ParagraphStyles.CreateNew();
                    Estilo4.Name = "Estilo4";
                    Estilo4.Alignment = ParagraphAlignment.Justify;
                    Estilo4.FontName = "Calibri";
                    document.ParagraphStyles.Add(Estilo4);
                }

                DevExpress.XtraRichEdit.API.Native.TableStyle Estilo5 = document.TableStyles["Estilo5"];
                if (Estilo5 == null)
                {
                    Estilo5 = document.TableStyles.CreateNew();
                    Estilo5.LeftPadding = Units.CentimetersToDocumentsF((float)0.19);
                    Estilo5.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    document.TableStyles.Add(Estilo5);
                }

                ParagraphStyle Estilo6 = document.ParagraphStyles["Estilo6"];
                if (Estilo6 == null)
                {
                    Estilo6 = document.ParagraphStyles.CreateNew();
                    Estilo6.Name = "Estilo2";
                    Estilo6.Alignment = ParagraphAlignment.Left;
                    Estilo6.Bold = true;
                    Estilo6.FontName = "Calibri";
                    Estilo6.Underline = UnderlineType.Single;
                    document.ParagraphStyles.Add(Estilo6);
                }

                ParagraphStyle Estilo7 = document.ParagraphStyles["Estilo7"];
                if (Estilo7 == null)
                {
                    Estilo7 = document.ParagraphStyles.CreateNew();
                    Estilo7.Name = "Estilo7";
                    Estilo7.Alignment = ParagraphAlignment.Center;
                    document.ParagraphStyles.Add(Estilo7);
                }

                ParagraphStyle Estilo8 = document.ParagraphStyles["Estilo8"];
                if (Estilo8 == null)
                {
                    Estilo8 = document.ParagraphStyles.CreateNew();
                    Estilo8.Name = "Estilo8";
                    Estilo8.Bold = true;
                    Estilo8.Alignment = ParagraphAlignment.Center;
                    document.ParagraphStyles.Add(Estilo8);
                }

                #endregion

                #region Fecha - Paragraphs[1]
                DocumentPosition PosFecha = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParFecha = document.Paragraphs.Insert(PosFecha);
                document.InsertText(PosFecha, $"San Isidro, {DateTime.Now.Day.ToString("00")} de {f_get_nombre_mes(DateTime.Now.Month)} de {DateTime.Now.Year.ToString()}\n");
                #endregion

                #region Titulo - Paragraphs[3]
                DocumentPosition PosTitulo = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParTitulo = document.Paragraphs.Insert(PosTitulo);
                document.InsertText(PosTitulo, $"CITACIÓN N°{obj.oAnalisisFallaDTO.AFECORR}-{obj.oAnalisisFallaDTO.AFEANIO}\r\n");
                #endregion

                #region Parrafo1 - Paragraphs[5]
                string textP1 = string.Empty;
                if (presencial)
                    textP1 = "a la reunión que se llevará a cabo en la sede del COES-SINAC, para tratar la agenda que se indica a continuación:\n";
                else
                    textP1 = "sobre el análisis que se realizará, respecto al evento que se indica a continuación:\n";

                DocumentPosition PosPar2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph Par2 = document.Paragraphs.Insert(PosPar2);
                document.InsertText(PosPar2, $"Se hace de conocimiento a todos los representantes al Comité de Técnico de Análisis de Fallas - Año {DateTime.Now.Year.ToString()} (CT-AF), " + textP1);
                #endregion

                #region Parrafo2 - Paragraphs[7]
                DocumentPosition PosPar3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph Par3 = document.Paragraphs.Insert(PosPar3);
                document.InsertText(PosPar3, "AGENDA:");
                #endregion

                #region Salto1 - Paragraphs[9]
                DocumentPosition PosSal1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph Salt1 = document.Paragraphs.Insert(PosSal1);
                document.InsertText(PosSal1, " \n");
                #endregion

                document.Paragraphs[1].Style = Estilo1;
                document.Paragraphs[3].Style = Estilo2;
                document.Paragraphs[5].Style = Estilo4;
                document.Paragraphs[7].Style = Estilo3;

                #region Tabla
                if (obj.LstEvento.Count > 0)
                {
                    int rows = obj.LstEvento.Count + obj.ListaEventosSco.Count;
                    DocumentPosition PosTable = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Table tableCitacion = document.Tables.Create(PosTable, rows, 4);
                    tableCitacion.BeginUpdate();

                    tableCitacion.Style = Estilo5;

                    DevExpress.XtraRichEdit.API.Native.TableCell CelCodigo = tableCitacion[0, 0];
                    CelCodigo.PreferredWidthType = WidthType.Fixed;
                    CelCodigo.PreferredWidth = Units.CentimetersToDocumentsF((float)2.7);
                    CelCodigo.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    CelCodigo.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    CelCodigo.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    CelCodigo.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    CelCodigo.VerticalAlignment = TableCellVerticalAlignment.Center;
                    CelCodigo.BackgroundColor = Color.LightGray;

                    ParagraphProperties CodigoParagraphProperties = document.BeginUpdateParagraphs(tableCitacion[0, 0].Range);
                    CodigoParagraphProperties.Alignment = ParagraphAlignment.Center;
                    document.EndUpdateParagraphs(CodigoParagraphProperties);

                    DevExpress.XtraRichEdit.API.Native.TableCell CelFecha = tableCitacion[0, 1];
                    CelFecha.PreferredWidthType = WidthType.Fixed;
                    CelFecha.PreferredWidth = Units.CentimetersToDocumentsF((float)2.8);
                    CelFecha.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    CelFecha.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    CelFecha.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    CelFecha.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    CelFecha.VerticalAlignment = TableCellVerticalAlignment.Center;
                    CelFecha.BackgroundColor = Color.LightGray;
                    CelFecha.BottomPadding = Units.CentimetersToDocumentsF((float)0.23);

                    ParagraphProperties FechaParagraphProperties = document.BeginUpdateParagraphs(tableCitacion[0, 1].Range);
                    FechaParagraphProperties.Alignment = ParagraphAlignment.Center;
                    document.EndUpdateParagraphs(FechaParagraphProperties);

                    DevExpress.XtraRichEdit.API.Native.TableCell CelDescripcion = tableCitacion[0, 2];
                    CelDescripcion.PreferredWidthType = WidthType.Fixed;
                    CelDescripcion.PreferredWidth = Units.CentimetersToDocumentsF((float)6);
                    CelDescripcion.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    CelDescripcion.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    CelDescripcion.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    CelDescripcion.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    CelDescripcion.VerticalAlignment = TableCellVerticalAlignment.Center;
                    CelDescripcion.BackgroundColor = Color.LightGray;

                    ParagraphProperties DescripcionParagraphProperties = document.BeginUpdateParagraphs(tableCitacion[0, 2].Range);
                    DescripcionParagraphProperties.Alignment = ParagraphAlignment.Center;
                    document.EndUpdateParagraphs(DescripcionParagraphProperties);

                    DevExpress.XtraRichEdit.API.Native.TableCell CelEmpresas = tableCitacion[0, 3];
                    CelEmpresas.PreferredWidthType = WidthType.Fixed;
                    CelEmpresas.PreferredWidth = Units.CentimetersToDocumentsF((float)5);
                    CelEmpresas.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    CelEmpresas.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    CelEmpresas.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    CelEmpresas.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    CelEmpresas.VerticalAlignment = TableCellVerticalAlignment.Center;
                    CelEmpresas.BackgroundColor = Color.LightGray;

                    ParagraphProperties EmpresasParagraphProperties = document.BeginUpdateParagraphs(tableCitacion[0, 3].Range);
                    EmpresasParagraphProperties.Alignment = ParagraphAlignment.Center;
                    document.EndUpdateParagraphs(EmpresasParagraphProperties);

                    document.InsertText(tableCitacion[0, 0].Range.Start, "CÓDIGO");
                    document.InsertText(tableCitacion[0, 1].Range.Start, "FECHA Y \nHORA");
                    document.InsertText(tableCitacion[0, 2].Range.Start, "DESCRIPCIÓN DEL EVENTO");
                    document.InsertText(tableCitacion[0, 3].Range.Start, "EMPRESAS \nINVOLUCRADAS*");

                    DevExpress.XtraRichEdit.API.Native.TableCell CellCodigo = tableCitacion[0, 0];
                    CellCodigo.BottomPadding = Units.CentimetersToDocumentsF((float)0.26);
                    //CellCodigo.LeftPadding = Units.CentimetersToDocumentsF((float)0.19);
                    //CellCodigo.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    DocumentRange RangeCellCodigo = CellCodigo.Range;
                    CharacterProperties propertiesRangeCellCodigo = document.BeginUpdateCharacters(RangeCellCodigo);
                    propertiesRangeCellCodigo.FontName = "Calibri";
                    propertiesRangeCellCodigo.FontSize = 11;
                    propertiesRangeCellCodigo.Bold = true;
                    document.EndUpdateCharacters(propertiesRangeCellCodigo);

                    DevExpress.XtraRichEdit.API.Native.TableCell CellCodigo1 = tableCitacion[0, 1];
                    CellCodigo1.BottomPadding = Units.CentimetersToDocumentsF((float)0.26);
                    //CellCodigo1.LeftPadding = Units.CentimetersToDocumentsF((float)0.19);
                    //CellCodigo1.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    DocumentRange RangeCellCodigo1 = CellCodigo1.Range;
                    CharacterProperties propertiesRangeCellCodigo1 = document.BeginUpdateCharacters(RangeCellCodigo1);
                    propertiesRangeCellCodigo1.FontName = "Calibri";
                    propertiesRangeCellCodigo1.FontSize = 11;
                    propertiesRangeCellCodigo1.Bold = true;
                    document.EndUpdateCharacters(propertiesRangeCellCodigo1);

                    DevExpress.XtraRichEdit.API.Native.TableCell CellCodigo2 = tableCitacion[0, 2];
                    CellCodigo2.BottomPadding = Units.CentimetersToDocumentsF((float)0.26);
                    //CellCodigo2.LeftPadding = Units.CentimetersToDocumentsF((float)0.19);
                    //CellCodigo2.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    DocumentRange RangeCellCodigo2 = CellCodigo2.Range;
                    CharacterProperties propertiesRangeCellCodigo2 = document.BeginUpdateCharacters(RangeCellCodigo2);
                    propertiesRangeCellCodigo2.FontName = "Calibri";
                    propertiesRangeCellCodigo2.FontSize = 11;
                    propertiesRangeCellCodigo2.Bold = true;
                    document.EndUpdateCharacters(propertiesRangeCellCodigo2);

                    DevExpress.XtraRichEdit.API.Native.TableCell CellCodigo3 = tableCitacion[0, 3];
                    CellCodigo3.BottomPadding = Units.CentimetersToDocumentsF((float)0.26);
                    //CellCodigo3.LeftPadding = Units.CentimetersToDocumentsF((float)0.19);
                    //CellCodigo3.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    DocumentRange RangeCellCodigo3 = CellCodigo3.Range;
                    CharacterProperties propertiesRangeCellCodigo3 = document.BeginUpdateCharacters(RangeCellCodigo3);
                    propertiesRangeCellCodigo3.FontName = "Calibri";
                    propertiesRangeCellCodigo3.FontSize = 11;
                    propertiesRangeCellCodigo3.Bold = true;
                    document.EndUpdateCharacters(propertiesRangeCellCodigo3);

                    int contadorEvento = 0;
                    tableCitacion.EndUpdate();

                    if (obj.ListaEventosSco.Count > 1)
                    {
                        tableCitacion.MergeCells(tableCitacion[1, 0], tableCitacion[obj.ListaEventosSco.Count, 0]);
                        tableCitacion.MergeCells(tableCitacion[1, 2], tableCitacion[obj.ListaEventosSco.Count, 2]);
                        tableCitacion.MergeCells(tableCitacion[1, 3], tableCitacion[obj.ListaEventosSco.Count, 3]);
                    }
                    
                    foreach (var item in obj.ListaEventosSco.OrderBy(m => m.EVENINI))
                    {                        
                        for (int i = 0; i < obj.LstEvento.Count; i++)
                        {
                            int cantSaltos = 0;
                            string fecha_evento = obj.LstEvento[i].FECHA_EVENTO.Replace(".", "/");
                            //lstEmpresas = obj.LstEvento[i].EmpresaInvolucrada.Split('\r').Count();

                            foreach (var empInv in obj.LstEvento[i].EmpresaInvolucrada.Split('\r'))
                            {
                                if (empInv.ToString().Length <= 27)
                                    cantSaltos += 2;
                                else if(empInv.ToString().Length <= 54)
                                    cantSaltos += 3;
                                else if (empInv.ToString().Length <= 81)
                                    cantSaltos += 4;
                                else if (empInv.ToString().Length <= 108)
                                    cantSaltos += 5;
                            }

                            if (fecha_evento == item.EVENINIstr)
                            {
                                var EVENINIstr = item.EVENINIstr.Replace("/", ".");
                                tableCitacion.Rows[i + 1].Cells[0].VerticalAlignment = TableCellVerticalAlignment.Center;

                                if (cantSaltos <= 6)
                                {
                                    tableCitacion.Rows[i + 1].Cells[1].TopPadding = Units.CentimetersToDocumentsF((float)0.5);
                                    tableCitacion.Rows[i + 1].Cells[1].BottomPadding = Units.CentimetersToDocumentsF((float)0.5);
                                }
                                else if (cantSaltos <= 12)
                                {
                                    tableCitacion.Rows[i + 1].Cells[1].TopPadding = Units.CentimetersToDocumentsF((float)1.3);
                                    tableCitacion.Rows[i + 1].Cells[1].BottomPadding = Units.CentimetersToDocumentsF((float)1.3);
                                }
                                else if (cantSaltos <= 18)
                                {
                                    tableCitacion.Rows[i + 1].Cells[1].TopPadding = Units.CentimetersToDocumentsF((float)2.1);
                                    tableCitacion.Rows[i + 1].Cells[1].BottomPadding = Units.CentimetersToDocumentsF((float)2.1);
                                }

                                if (obj.LstEvento.Count == 1)
                                {
                                    tableCitacion.Rows[i + 1].Cells[1].VerticalAlignment = TableCellVerticalAlignment.Center;
                                }

                                tableCitacion.Rows[i + 1].Cells[2].VerticalAlignment = TableCellVerticalAlignment.Center;
                                tableCitacion.Rows[i + 1].Cells[3].VerticalAlignment = TableCellVerticalAlignment.Center;

                                #region Celli10
                                DevExpress.XtraRichEdit.API.Native.TableCell Celli10 = tableCitacion[i + 1, 0];
                                Celli10.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celli10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celli10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celli10.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celli10.VerticalAlignment = TableCellVerticalAlignment.Center;

                                DocumentRange RangeCelli10 = Celli10.Range;
                                CharacterProperties propertiesRangeCelli10 = document.BeginUpdateCharacters(RangeCelli10);
                                propertiesRangeCelli10.FontName = "Calibri";
                                propertiesRangeCelli10.FontSize = 11;
                                document.EndUpdateCharacters(propertiesRangeCelli10);

                                ParagraphProperties ParagraphPropertiesCelli10 = document.BeginUpdateParagraphs(tableCitacion[i + 1, 0].Range);
                                ParagraphPropertiesCelli10.Alignment = ParagraphAlignment.Center;
                                document.EndUpdateParagraphs(ParagraphPropertiesCelli10);
                                #endregion
                                #region Celli11
                                DevExpress.XtraRichEdit.API.Native.TableCell Celli11 = tableCitacion[i + 1, 1];
                                Celli11.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celli11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celli11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celli11.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celli11.VerticalAlignment = TableCellVerticalAlignment.Center;

                                DocumentRange RangeCelli11 = Celli11.Range;
                                CharacterProperties propertiesRangeCelli11 = document.BeginUpdateCharacters(RangeCelli11);
                                propertiesRangeCelli11.FontName = "Calibri";
                                propertiesRangeCelli11.FontSize = 11;
                                document.EndUpdateCharacters(propertiesRangeCelli11);

                                ParagraphProperties ParagraphPropertiesCelli11 = document.BeginUpdateParagraphs(tableCitacion[i + 1, 1].Range);
                                ParagraphPropertiesCelli11.Alignment = ParagraphAlignment.Center;
                                document.EndUpdateParagraphs(ParagraphPropertiesCelli11);
                                #endregion
                                #region Celli12
                                DevExpress.XtraRichEdit.API.Native.TableCell Celli12 = tableCitacion[i + 1, 2];
                                Celli12.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celli12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celli12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celli12.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celli12.VerticalAlignment = TableCellVerticalAlignment.Center;

                                DocumentRange RangeCelli12 = Celli12.Range;
                                CharacterProperties propertiesRangeCelli12 = document.BeginUpdateCharacters(RangeCelli12);
                                propertiesRangeCelli12.FontName = "Calibri";
                                propertiesRangeCelli12.FontSize = 11;
                                document.EndUpdateCharacters(propertiesRangeCelli12);

                                ParagraphProperties ParagraphPropertiesCelli12 = document.BeginUpdateParagraphs(tableCitacion[i + 1, 2].Range);
                                ParagraphPropertiesCelli12.Alignment = ParagraphAlignment.Center;
                                document.EndUpdateParagraphs(ParagraphPropertiesCelli12);
                                #endregion
                                #region Celli13
                                DevExpress.XtraRichEdit.API.Native.TableCell Celli13 = tableCitacion[i + 1, 3];
                                Celli13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celli13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celli13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celli13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celli13.VerticalAlignment = TableCellVerticalAlignment.Center;

                                DocumentRange RangeCelli13 = Celli13.Range;
                                CharacterProperties propertiesRangeCelli13 = document.BeginUpdateCharacters(RangeCelli13);
                                propertiesRangeCelli13.FontName = "Calibri";
                                propertiesRangeCelli13.FontSize = 11;
                                document.EndUpdateCharacters(propertiesRangeCelli13);

                                ParagraphProperties ParagraphPropertiesCelli13 = document.BeginUpdateParagraphs(tableCitacion[i + 1, 3].Range);
                                ParagraphPropertiesCelli13.Alignment = ParagraphAlignment.Center;
                                document.EndUpdateParagraphs(ParagraphPropertiesCelli13);
                                #endregion

                                tableCitacion.Rows[i + 1].Cells[0].PreferredWidth = Units.CentimetersToDocumentsF((float)2.7);
                                tableCitacion.Rows[i + 1].Cells[1].PreferredWidth = Units.CentimetersToDocumentsF((float)2.8);
                                tableCitacion.Rows[i + 1].Cells[2].PreferredWidth = Units.CentimetersToDocumentsF((float)6);
                                tableCitacion.Rows[i + 1].Cells[3].PreferredWidth = Units.CentimetersToDocumentsF((float)5);

                                document.InsertText(tableCitacion[i + 1, 0].Range.Start, obj.LstEvento[i].CODIGO.ToString());
                                document.InsertText(tableCitacion[i + 1, 1].Range.Start, EVENINIstr.ToString().Replace(" ", "\n") + " h");
                                document.InsertText(tableCitacion[i + 1, 2].Range.Start, obj.LstEvento[i].EVENASUNTO.ToString());
                                document.InsertText(tableCitacion[i + 1, 3].Range.Start, obj.LstEvento[i].EmpresaInvolucrada.ToString().Replace("\r", "\n"));

                            }
                            else
                            {
                                var EVENINIstr = item.EVENINIstr.Replace("/", ".");

                                tableCitacion.Rows[contadorEvento + 1].Cells[0].VerticalAlignment = TableCellVerticalAlignment.Center;

                                if (cantSaltos <= 6)
                                {
                                    tableCitacion.Rows[contadorEvento + 1].Cells[1].TopPadding = Units.CentimetersToDocumentsF((float)0.5);
                                    tableCitacion.Rows[contadorEvento + 1].Cells[1].BottomPadding = Units.CentimetersToDocumentsF((float)0.5);
                                }
                                else if (cantSaltos <= 12)
                                {
                                    tableCitacion.Rows[contadorEvento + 1].Cells[1].TopPadding = Units.CentimetersToDocumentsF((float)1.3);
                                    tableCitacion.Rows[contadorEvento + 1].Cells[1].BottomPadding = Units.CentimetersToDocumentsF((float)1.3);
                                }
                                else if(cantSaltos <= 18)
                                {
                                    tableCitacion.Rows[contadorEvento + 1].Cells[1].TopPadding = Units.CentimetersToDocumentsF((float)2.1);
                                    tableCitacion.Rows[contadorEvento + 1].Cells[1].BottomPadding = Units.CentimetersToDocumentsF((float)2.1);
                                }

                                tableCitacion.Rows[contadorEvento + 1].Cells[2].VerticalAlignment = TableCellVerticalAlignment.Center;
                                tableCitacion.Rows[contadorEvento + 1].Cells[3].VerticalAlignment = TableCellVerticalAlignment.Center;

                                #region CellCont10
                                DevExpress.XtraRichEdit.API.Native.TableCell CellCont10 = tableCitacion[contadorEvento + 1, 0];
                                CellCont10.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                CellCont10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                CellCont10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                CellCont10.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                CellCont10.VerticalAlignment = TableCellVerticalAlignment.Center;

                                DocumentRange RangeCellCont10 = CellCont10.Range;
                                CharacterProperties propertiesRangeCellCont10 = document.BeginUpdateCharacters(RangeCellCont10);
                                propertiesRangeCellCont10.FontName = "Calibri";
                                propertiesRangeCellCont10.FontSize = 11;
                                document.EndUpdateCharacters(propertiesRangeCellCont10);

                                ParagraphProperties ParagraphPropertiesCellCont10 = document.BeginUpdateParagraphs(tableCitacion[contadorEvento + 1, 0].Range);
                                ParagraphPropertiesCellCont10.Alignment = ParagraphAlignment.Center;
                                document.EndUpdateParagraphs(ParagraphPropertiesCellCont10);
                                #endregion
                                #region CellCont11
                                DevExpress.XtraRichEdit.API.Native.TableCell CellCont11 = tableCitacion[contadorEvento + 1, 1];
                                CellCont11.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                CellCont11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                CellCont11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                CellCont11.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                CellCont11.VerticalAlignment = TableCellVerticalAlignment.Center;

                                DocumentRange RangeCellCont11 = CellCont11.Range;
                                CharacterProperties propertiesRangeCellCont11 = document.BeginUpdateCharacters(RangeCellCont11);
                                propertiesRangeCellCont11.FontName = "Calibri";
                                propertiesRangeCellCont11.FontSize = 11;
                                document.EndUpdateCharacters(propertiesRangeCellCont11);

                                ParagraphProperties ParagraphPropertiesCellCont11 = document.BeginUpdateParagraphs(tableCitacion[contadorEvento + 1, 1].Range);
                                ParagraphPropertiesCellCont11.Alignment = ParagraphAlignment.Center;
                                document.EndUpdateParagraphs(ParagraphPropertiesCellCont11);
                                #endregion
                                #region CellCont12
                                DevExpress.XtraRichEdit.API.Native.TableCell CellCont12 = tableCitacion[contadorEvento + 1, 2];
                                CellCont12.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                CellCont12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                CellCont12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                CellCont12.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                CellCont12.VerticalAlignment = TableCellVerticalAlignment.Center;

                                DocumentRange RangeCellCont12 = CellCont12.Range;
                                CharacterProperties propertiesRangeCellCont12 = document.BeginUpdateCharacters(RangeCellCont12);
                                propertiesRangeCellCont12.FontName = "Calibri";
                                propertiesRangeCellCont12.FontSize = 11;
                                document.EndUpdateCharacters(propertiesRangeCellCont12);

                                ParagraphProperties ParagraphPropertiesCellCont12 = document.BeginUpdateParagraphs(tableCitacion[contadorEvento + 1, 2].Range);
                                ParagraphPropertiesCellCont12.Alignment = ParagraphAlignment.Center;
                                document.EndUpdateParagraphs(ParagraphPropertiesCellCont12);
                                #endregion
                                #region CellCont13
                                DevExpress.XtraRichEdit.API.Native.TableCell CellCont13 = tableCitacion[contadorEvento + 1, 3];
                                CellCont13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                CellCont13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                CellCont13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                CellCont13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                CellCont13.VerticalAlignment = TableCellVerticalAlignment.Center;

                                DocumentRange RangeCellCont13 = CellCont13.Range;
                                CharacterProperties propertiesRangeCellCont13 = document.BeginUpdateCharacters(RangeCellCont13);
                                propertiesRangeCellCont13.FontName = "Calibri";
                                propertiesRangeCellCont13.FontSize = 11;
                                document.EndUpdateCharacters(propertiesRangeCellCont13);

                                ParagraphProperties ParagraphPropertiesCellCont13 = document.BeginUpdateParagraphs(tableCitacion[contadorEvento + 1, 3].Range);
                                ParagraphPropertiesCellCont13.Alignment = ParagraphAlignment.Center;
                                document.EndUpdateParagraphs(ParagraphPropertiesCellCont13);
                                #endregion

                                tableCitacion.Rows[contadorEvento + 1].Cells[0].PreferredWidth = Units.CentimetersToDocumentsF((float)2.7);
                                tableCitacion.Rows[contadorEvento + 1].Cells[1].PreferredWidth = Units.CentimetersToDocumentsF((float)2.8);
                                tableCitacion.Rows[contadorEvento + 1].Cells[2].PreferredWidth = Units.CentimetersToDocumentsF((float)6);
                                tableCitacion.Rows[contadorEvento + 1].Cells[3].PreferredWidth = Units.CentimetersToDocumentsF((float)5);

                                document.InsertText(tableCitacion[contadorEvento + 1, 0].Range.Start, "");
                                document.InsertText(tableCitacion[contadorEvento + 1, 1].Range.Start, EVENINIstr.ToString().Replace(" ", "\n") + " h");
                                document.InsertText(tableCitacion[contadorEvento + 1, 2].Range.Start, "");
                                document.InsertText(tableCitacion[contadorEvento + 1, 3].Range.Start, "");

                            }

                            contadorEvento++;
                        }

                    }


                }
                #endregion

                #region Parrafo4
                int posParpostTabla = document.Sections[0].Paragraphs.ToList().Count();
                if (presencial)
                {
                    DocumentPosition PosPar4 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4 = document.Paragraphs.Insert(PosPar4);
                    document.InsertText(PosPar4, "* Las empresas involucradas derivan de un análisis preliminar realizado por el COES, por lo que su identificación es Referencial. Es responsabilidad de cada empresa evaluar el evento a fin de determinar su participación en el mismo como empresa involucrada y determinar su asistencia a la reunión del CT-AF.");

                    DocumentPosition PosPar4_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_1 = document.Paragraphs.Insert(PosPar4_1);
                    document.InsertText(PosPar4_1, "La asistencia a la reunión de las empresas mencionadas como involucradas en el evento es indispensable.\n");

                    DocumentPosition PosPar4_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_2 = document.Paragraphs.Insert(PosPar4_2);
                    document.InsertText(PosPar4_2, "FECHA DE LA REUNIÓN:\n");

                    var fecha = f_get_nombre_dia(Convert.ToDateTime(obj.oAnalisisFallaDTO.AFEREUFECHAPROG).DayOfWeek) + " " + obj.oAnalisisFallaDTO.AFEREUFECHAPROG.Value.ToString("dd.MM.yyyy") + ", a las " + obj.oAnalisisFallaDTO.AFEREUHORAPROG + " h.";

                    DocumentPosition PosPar4_3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_3 = document.Paragraphs.Insert(PosPar4_3);
                    document.InsertText(PosPar4_3, fecha + "\n");

                    DocumentPosition PosPar4_4 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_4 = document.Paragraphs.Insert(PosPar4_4);
                    document.InsertText(PosPar4_4, "LUGAR:\n");

                    DocumentPosition PosPar4_5 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_5 = document.Paragraphs.Insert(PosPar4_5);
                    document.InsertText(PosPar4_5, "Sala de reuniones: " + obj.oAnalisisFallaDTO.AFSALA.ToString());

                    DocumentPosition PosPar4_6 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_6 = document.Paragraphs.Insert(PosPar4_6);
                    document.InsertText(PosPar4_6, "Sede del COES: Av. Los Conquistadores N° 1144, San Isidro - Lima.");

                    document.Paragraphs[posParpostTabla].Style = Estilo4;
                    document.Paragraphs[posParpostTabla + 1].Style = Estilo4;
                    document.Paragraphs[posParpostTabla + 3].Style = Estilo6;
                    document.Paragraphs[posParpostTabla + 5].Style = Estilo1;
                    document.Paragraphs[posParpostTabla + 7].Style = Estilo6;
                    document.Paragraphs[posParpostTabla + 9].Style = Estilo1;
                    document.Paragraphs[posParpostTabla + 10].Style = Estilo1;
                }
                else
                {                    
                    DocumentPosition PosPar4 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4 = document.Paragraphs.Insert(PosPar4);
                    document.InsertText(PosPar4, "* Las empresas involucradas derivan de un análisis preliminar realizado por el COES, por lo que su identificación es Referencial. Es responsabilidad de cada empresa evaluar el evento a fin de determinar su participación en el mismo como empresa involucrada.");

                    DocumentPosition PosPar4_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_1 = document.Paragraphs.Insert(PosPar4_1);
                    document.InsertText(PosPar4_1, "Se considera por conveniente que el presente evento sea analizado en forma no presencial, coordinando vía correo electrónico y/o vía telefónica con las empresas involucradas.\n");

                    DocumentPosition PosPar4_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_2 = document.Paragraphs.Insert(PosPar4_2);
                    document.InsertText(PosPar4_2, "Asimismo, la información correspondiente será publicada en el portal web del COES.\n");

                    DocumentPosition PosPar4_3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_3 = document.Paragraphs.Insert(PosPar4_3);
                    document.InsertText(PosPar4_3, "FECHA DE ENVÍO DEL INFORME CTAF:\n");

                    var fecha = f_get_nombre_dia(Convert.ToDateTime(obj.oAnalisisFallaDTO.AFEREUFECHAPROG).DayOfWeek) + " " + obj.oAnalisisFallaDTO.AFEREUFECHAPROG.Value.ToString("dd.MM.yyyy");

                    DocumentPosition PosPar4_4 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph Par4_4 = document.Paragraphs.Insert(PosPar4_4);
                    document.InsertText(PosPar4_4, fecha);

                    document.Paragraphs[posParpostTabla].Style = Estilo4;
                    document.Paragraphs[posParpostTabla + 1].Style = Estilo4;
                    document.Paragraphs[posParpostTabla + 3].Style = Estilo1;
                    document.Paragraphs[posParpostTabla + 5].Style = Estilo6;
                    document.Paragraphs[posParpostTabla + 7].Style = Estilo1;

                    int rangeStart = document.Paragraphs[posParpostTabla + 1].Range.Start.ToInt() + 75;
                    int rangeEnd = 13;

                    DocumentRange formattedRange = document.CreateRange(rangeStart, rangeEnd);
                    CharacterProperties characterProperties = document.BeginUpdateCharacters(formattedRange);
                    characterProperties.Bold = true;
                    document.EndUpdateCharacters(characterProperties);
                }
                #endregion

                #region Firmas
                int posParFirma = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosFir1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph Fir1 = document.Paragraphs.Insert(PosFir1);
                document.InsertText(PosFir1, "\nAtentamente,\n");

                var pathfirma = Server.MapPath("~/Content/Images/firma_sierra.png");
                DocumentPosition PosFir2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                //document.Images.Insert(PosFir2, DocumentImageSource.FromFile(pathfirma));

                Shape ImagenFirma = document.Shapes.InsertPicture(PosFir2, DocumentImageSource.FromFile(pathfirma));
                ImagenFirma.RelativeVerticalPosition = ShapeRelativeVerticalPosition.Paragraph;
                ImagenFirma.HorizontalAlignment = ShapeHorizontalAlignment.Center;
                ImagenFirma.Size = new SizeF(Units.CentimetersToDocumentsF((float)4.55), Units.CentimetersToDocumentsF((float)2.81));

                DocumentPosition PosFir3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph Fir3 = document.Paragraphs.Insert(PosFir3);
                document.InsertText(PosFir3, "\n\n\n\n\nIng. Eleazar Sierra");

                DocumentPosition PosFir4 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph Fir4 = document.Paragraphs.Insert(PosFir4);
                document.InsertText(PosFir4, "Coordinador CT-AF");

                DocumentPosition PosFir5 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph Fir5 = document.Paragraphs.Insert(PosFir5);
                document.InsertText(PosFir5, "COES-SINAC");

                document.Paragraphs[posParFirma + 8].Style = Estilo8;
                document.Paragraphs[posParFirma + 9].Style = Estilo7;
                document.Paragraphs[posParFirma + 10].Style = Estilo7;

                #endregion
                // Finalize the document update
                document.EndUpdate();

                MemoryStream ms = new MemoryStream();
                wordProcessor.SaveDocument(ms, DocumentFormat.OpenXml);
                bytes = ms.ToArray();
                ms.Dispose();
                ms.Close();

                FileServer.CreateFolder(null, rutaSev, fileserver);
                wordProcessor.SaveDocument(fileserver + rutaSev + filename, DocumentFormat.OpenXml);
                wordProcessor.Dispose();

            }


            return bytes;

        }

        public byte[] GenerarReporteCTAF2(Models.AnalisisFallasModel obj, string fileword, TablaReporte tablaReporteTotales, TablaReporte tablaReduccion, TablaReporte tablaReporteTotalesEacmf)
        {
            string fileReporte = "CT-AF_EV-" + obj.oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0') + "-" + obj.oAnalisisFallaDTO.AFEANIO + ".docx";
            byte[] bytes = new byte[0];
            
            using (var wordProcessor = new RichEditDocumentServer())
            {
                Document document = wordProcessor.Document;
                document.AppendSection();
                document.BeginUpdate();

                DevExpress.XtraRichEdit.API.Native.Section firstSection = document.Sections[0];
                DevExpress.XtraRichEdit.API.Native.Section secondSection = document.Sections[1];

                List<ParrafoDTO> ListaParrafos = new List<ParrafoDTO>();
                List<ParrafoDTO> ListaParBullets = new List<ParrafoDTO>();
                List<int> ListaIndexShapes = new List<int>();

                #region Configuracion Pagina - Seccion1
                firstSection.Margins.Top = Units.CentimetersToDocumentsF((float)1);
                firstSection.Margins.Bottom = Units.CentimetersToDocumentsF((float)1.27);
                firstSection.Margins.Right = Units.CentimetersToDocumentsF((float)2.5);
                firstSection.Margins.Left = Units.CentimetersToDocumentsF((float)1.25);
                firstSection.Page.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;
                #endregion

                #region Configuracion Pagina - Seccion2
                secondSection.Margins.Top = Units.CentimetersToDocumentsF((float)2.4);
                secondSection.Margins.Bottom = Units.CentimetersToDocumentsF((float)2.4);
                secondSection.Margins.Right = Units.CentimetersToDocumentsF((float)2.4);
                secondSection.Margins.Left = Units.CentimetersToDocumentsF((float)3);
                secondSection.Page.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;
                #endregion

                #region Estilos

                ParagraphStyle Estilo0 = document.ParagraphStyles["Estilo0"];
                if (Estilo0 == null)
                {
                    Estilo0 = document.ParagraphStyles.CreateNew();
                    Estilo0.Name = "Estilo0";
                    Estilo0.Alignment = ParagraphAlignment.Justify;
                    Estilo0.FontName = "Calibri";
                    Estilo0.FontSize = 11;
                    Estilo0.Bold = false;
                    Estilo0.Underline = UnderlineType.None;
                    Estilo0.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    Estilo0.FirstLineIndent = Units.CentimetersToDocumentsF((float)3.25);
                    Estilo0.LeftIndent = 384;
                    Estilo0.SpacingBefore = 50;
                    Estilo0.SpacingAfter = 25;
                    document.ParagraphStyles.Add(Estilo0);
                }

                ParagraphStyle Estilo1 = document.ParagraphStyles["Estilo1"];
                if (Estilo1 == null)
                {
                    Estilo1 = document.ParagraphStyles.CreateNew();
                    Estilo1.Name = "Estilo1";
                    Estilo1.Alignment = ParagraphAlignment.Center;
                    Estilo1.FontName = "Calibri";
                    Estilo1.FontSize = 32;
                    Estilo1.ForeColor = Color.FromArgb(0, 119, 165);
                    Estilo1.SpacingBefore = 0;
                    Estilo1.SpacingAfter = Units.InchesToDocumentsF(0.1388f);
                    Estilo1.LineSpacingType = ParagraphLineSpacing.Multiple;
                    Estilo1.LineSpacingMultiplier = Units.InchesToDocumentsF(0.00383f);
                    Estilo1.LeftIndent = 177;
                    document.ParagraphStyles.Add(Estilo1);
                }

                ParagraphStyle Estilo2 = document.ParagraphStyles["Estilo2"];
                if (Estilo2 == null)
                {
                    Estilo2 = document.ParagraphStyles.CreateNew();
                    Estilo2.Name = "Estilo2";
                    Estilo2.Alignment = ParagraphAlignment.Center;
                    Estilo2.FontName = "Calibri";
                    Estilo2.FontSize = 18;
                    Estilo2.SpacingBefore = 0;
                    Estilo2.SpacingAfter = Units.InchesToDocumentsF(0.0556f);
                    Estilo2.LeftIndent = 236;
                    document.ParagraphStyles.Add(Estilo2);
                }

                ParagraphStyle Estilo3 = document.ParagraphStyles["Estilo3"];
                if (Estilo3 == null)
                {
                    Estilo3 = document.ParagraphStyles.CreateNew();
                    Estilo3.Name = "Estilo3";
                    Estilo3.Alignment = ParagraphAlignment.Right;
                    Estilo3.FontName = "Calibri";
                    Estilo3.ForeColor = Color.FromArgb(31, 37, 50);
                    Estilo3.FontSize = 14;
                    document.ParagraphStyles.Add(Estilo3);
                }

                ParagraphStyle Estilo4 = document.ParagraphStyles["Estilo4"];
                if (Estilo4 == null)
                {
                    Estilo4 = document.ParagraphStyles.CreateNew();
                    Estilo4.Name = "Estilo4";
                    Estilo4.Alignment = ParagraphAlignment.Justify;
                    Estilo4.FontName = "Calibri";
                    Estilo4.FontSize = 11;
                    Estilo4.Bold = true;
                    Estilo4.Underline = UnderlineType.Single;
                    Estilo4.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo4.SpacingBefore = 50;
                    Estilo4.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo4);
                }

                ParagraphStyle Estilo5 = document.ParagraphStyles["Estilo5"];
                if (Estilo5 == null)
                {
                    Estilo5 = document.ParagraphStyles.CreateNew();
                    Estilo5.Name = "Estilo5";
                    Estilo5.Alignment = ParagraphAlignment.Justify;
                    Estilo5.FontName = "Calibri";
                    Estilo5.FontSize = 11;
                    Estilo5.Bold = false;
                    Estilo5.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo5.SpacingBefore = 50;
                    Estilo5.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo5);
                }

                CharacterStyle Estilo6 = document.CharacterStyles["Estilo6"];
                if (Estilo6 == null)
                {
                    Estilo6 = document.CharacterStyles.CreateNew();
                    Estilo6.Name = "Estilo6";
                    Estilo6.Bold = false;
                    Estilo6.FontName = "Calibri";
                    Estilo6.FontSize = 11;
                    document.CharacterStyles.Add(Estilo6);
                }

                CharacterStyle Estilo7 = document.CharacterStyles["Estilo7"];
                if (Estilo7 == null)
                {
                    Estilo7 = document.CharacterStyles.CreateNew();
                    Estilo7.Name = "Estilo7";                  
                    Estilo7.FontName = "Calibri";
                    Estilo7.FontSize = 9;
                    Estilo7.Bold = false;
                    document.CharacterStyles.Add(Estilo7);
                }

                ParagraphStyle Estilo8 = document.ParagraphStyles["Estilo8"];
                if (Estilo8 == null)
                {
                    Estilo8 = document.ParagraphStyles.CreateNew();
                    Estilo8.Name = "Estilo8";
                    Estilo8.Alignment = ParagraphAlignment.Justify;
                    Estilo8.FontName = "Calibri";
                    Estilo8.FontSize = 11;
                    Estilo8.Bold = false;
                    Estilo8.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo8.SpacingBefore = 0;
                    Estilo8.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo8);
                }

                ParagraphStyle Estilo9 = document.ParagraphStyles["Estilo9"];
                if (Estilo9 == null)
                {
                    Estilo9 = document.ParagraphStyles.CreateNew();
                    Estilo9.Name = "Estilo9";
                    Estilo9.Alignment = ParagraphAlignment.Justify;
                    Estilo9.FontName = "Calibri";
                    Estilo9.FontSize = 11;
                    Estilo9.Bold = false;
                    Estilo9.SpacingBefore = 0;
                    Estilo9.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo9);
                }

                ParagraphStyle Estilo10 = document.ParagraphStyles["Estilo10"];
                if (Estilo10 == null)
                {
                    Estilo10 = document.ParagraphStyles.CreateNew();
                    Estilo10.Name = "Estilo10";
                    Estilo10.Alignment = ParagraphAlignment.Justify;
                    Estilo10.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo10.FontName = "Calibri";
                    Estilo10.FontSize = 9;
                    Estilo5.Bold = false;
                    Estilo10.SpacingBefore = 0;
                    Estilo10.SpacingAfter = 25;
                    document.ParagraphStyles.Add(Estilo10);
                }

                CharacterStyle Estilo11 = document.CharacterStyles["Estilo11"];
                if (Estilo11 == null)
                {
                    Estilo11 = document.CharacterStyles.CreateNew();
                    Estilo11.Name = "Estilo11";
                    Estilo11.Bold = true;
                    Estilo11.FontName = "Calibri";
                    Estilo11.FontSize = 11;
                    document.CharacterStyles.Add(Estilo11);
                }

                ParagraphStyle Estilo12 = document.ParagraphStyles["Estilo12"];
                if (Estilo12 == null)
                {
                    Estilo12 = document.ParagraphStyles.CreateNew();
                    Estilo12.Name = "Estilo12";
                    Estilo12.Alignment = ParagraphAlignment.Justify;
                    Estilo12.FontName = "Calibri";
                    Estilo12.FontSize = 11;
                    Estilo12.Bold = false;
                    Estilo12.Underline = UnderlineType.Single;
                    Estilo12.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo12.SpacingBefore = 25;
                    Estilo12.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo12);
                }

                ParagraphStyle Estilo13 = document.ParagraphStyles["Estilo13"];
                if (Estilo13 == null)
                {
                    Estilo13 = document.ParagraphStyles.CreateNew();
                    Estilo13.Name = "Estilo13";
                    Estilo13.Alignment = ParagraphAlignment.Justify;
                    Estilo13.FontName = "Calibri";
                    Estilo13.FontSize = 11;
                    Estilo13.Bold = false;
                    Estilo13.Underline = UnderlineType.Single;
                    Estilo13.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo13.SpacingBefore = 25;
                    Estilo13.SpacingAfter = 50;
                    document.ParagraphStyles.Add(Estilo13);
                }

                CharacterStyle Estilo14 = document.CharacterStyles["Estilo14"];
                if (Estilo14 == null)
                {
                    Estilo14 = document.CharacterStyles.CreateNew();
                    Estilo14.Name = "Estilo14";
                    Estilo14.Bold = false;
                    Estilo14.FontName = "Calibri";
                    Estilo14.FontSize = 11;
                    Estilo14.Underline = UnderlineType.None;
                    document.CharacterStyles.Add(Estilo14);
                }

                CharacterStyle Estilo15 = document.CharacterStyles["Estilo15"];
                if (Estilo15 == null)
                {
                    Estilo15 = document.CharacterStyles.CreateNew();
                    Estilo15.Name = "Estilo15";
                    Estilo15.Bold = true;
                    Estilo15.FontName = "Calibri";
                    Estilo15.FontSize = 11;
                    Estilo15.Underline = UnderlineType.Single;
                    document.CharacterStyles.Add(Estilo15);
                }

                CharacterStyle Estilo16 = document.CharacterStyles["Estilo16"];
                if (Estilo16 == null)
                {
                    Estilo16 = document.CharacterStyles.CreateNew();
                    Estilo16.Name = "Estilo16";
                    Estilo16.Bold = true;
                    Estilo16.FontName = "Calibri";
                    Estilo16.FontSize = 11;
                    Estilo16.Underline = UnderlineType.None;
                    document.CharacterStyles.Add(Estilo16);
                }

                ParagraphStyle Estilo17 = document.ParagraphStyles["Estilo17"];
                if (Estilo17 == null)
                {
                    Estilo17 = document.ParagraphStyles.CreateNew();
                    Estilo17.Name = "Estilo17";
                    Estilo17.Alignment = ParagraphAlignment.Center;
                    Estilo17.FontName = "Calibri";
                    Estilo17.FontSize = 11;
                    Estilo17.Bold = false;
                    Estilo17.Underline = UnderlineType.None;
                    Estilo17.SpacingBefore = 50;
                    Estilo17.SpacingAfter = 25;
                    document.ParagraphStyles.Add(Estilo17);
                }

                ParagraphStyle Estilo18 = document.ParagraphStyles["Estilo18"];
                if (Estilo18 == null)
                {
                    Estilo18 = document.ParagraphStyles.CreateNew();
                    Estilo18.Name = "Estilo18";
                    Estilo18.Alignment = ParagraphAlignment.Justify;
                    Estilo18.FontName = "Calibri";
                    Estilo18.FontSize = 11;
                    Estilo18.Underline = UnderlineType.None;
                    Estilo18.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo18.SpacingBefore = 25;
                    Estilo18.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo18);
                }

                ParagraphStyle Estilo19 = document.ParagraphStyles["Estilo19"];
                if (Estilo19 == null)
                {
                    Estilo19 = document.ParagraphStyles.CreateNew();
                    Estilo19.Name = "Estilo19";
                    Estilo19.Alignment = ParagraphAlignment.Center;
                    Estilo19.FontName = "Calibri";
                    Estilo19.FontSize = 9;
                    Estilo19.Bold = false;
                    Estilo19.Underline = UnderlineType.None;
                    Estilo19.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo19.SpacingBefore = 12;
                    Estilo19.SpacingAfter = 25;
                    document.ParagraphStyles.Add(Estilo19);
                }

                ParagraphStyle Estilo20 = document.ParagraphStyles["Estilo20"];
                if (Estilo20 == null)
                {
                    Estilo20 = document.ParagraphStyles.CreateNew();
                    Estilo20.Name = "Estilo20";
                    Estilo20.Alignment = ParagraphAlignment.Center;
                    Estilo20.FontName = "Calibri";
                    Estilo20.FontSize = 11;
                    Estilo20.Bold = true;
                    Estilo20.Underline = UnderlineType.Single;
                    Estilo20.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo20.SpacingBefore = 25;
                    Estilo20.SpacingAfter = 50;
                    document.ParagraphStyles.Add(Estilo20);
                }

                ParagraphStyle Estilo21 = document.ParagraphStyles["Estilo21"];
                if (Estilo21 == null)
                {
                    Estilo21 = document.ParagraphStyles.CreateNew();
                    Estilo21.Name = "Estilo21";
                    Estilo21.Alignment = ParagraphAlignment.Center;
                    Estilo21.FontName = "Calibri";
                    Estilo21.FontSize = 11;
                    Estilo21.Bold = false;
                    Estilo21.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo21.SpacingBefore = 25;
                    Estilo21.SpacingAfter = 50;
                    document.ParagraphStyles.Add(Estilo21);
                }

                ParagraphStyle Estilo22 = document.ParagraphStyles["Estilo22"];
                if (Estilo22 == null)
                {
                    Estilo22 = document.ParagraphStyles.CreateNew();
                    Estilo22.Name = "Estilo22";
                    Estilo22.Alignment = ParagraphAlignment.Justify;
                    Estilo22.FontName = "Calibri";
                    Estilo22.FontSize = 11;
                    Estilo22.Bold = false;
                    //Estilo22.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    //Estilo22.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                    //Estilo22.LeftIndent = Units.CentimetersToDocumentsF((float)1);
                    Estilo22.SpacingBefore = 50;
                    Estilo22.SpacingAfter =25;
                    document.ParagraphStyles.Add(Estilo22);
                }

                ParagraphStyle Estilo23 = document.ParagraphStyles["Estilo23"];
                if (Estilo23 == null)
                {
                    Estilo23 = document.ParagraphStyles.CreateNew();
                    Estilo23.Name = "Estilo23";
                    Estilo23.Alignment = ParagraphAlignment.Justify;
                    Estilo23.FontName = "Calibri";
                    Estilo23.FontSize = 11;
                    Estilo23.Bold = false;
                    Estilo23.LeftIndent = 118;
                    Estilo23.SpacingBefore = 25;
                    Estilo23.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo23);
                }

                ParagraphStyle Estilo24 = document.ParagraphStyles["Estilo24"];
                if (Estilo24 == null)
                {
                    Estilo24 = document.ParagraphStyles.CreateNew();
                    Estilo24.Name = "Estilo24";
                    Estilo24.Alignment = ParagraphAlignment.Justify;
                    Estilo24.FontName = "Calibri";
                    Estilo24.FontSize = 11;
                    Estilo24.Bold = false;
                    Estilo24.LeftIndent = 118;
                    //Estilo24.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    //Estilo24.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);                
                    document.ParagraphStyles.Add(Estilo24);
                }

                ParagraphStyle Estilo25 = document.ParagraphStyles["Estilo25"];
                if (Estilo25 == null)
                {
                    Estilo25 = document.ParagraphStyles.CreateNew();
                    Estilo25.Name = "Estilo25";
                    Estilo25.Alignment = ParagraphAlignment.Justify;
                    Estilo25.FontName = "Calibri";
                    Estilo25.FontSize = 11;
                    Estilo25.Bold = false;
                    Estilo25.FirstLineIndentType = ParagraphFirstLineIndent.None;
                    Estilo25.SpacingBefore = 50;
                    Estilo25.SpacingAfter = 0;
                    Estilo25.LeftIndent = 118;
                    document.ParagraphStyles.Add(Estilo25);
                }

                ParagraphStyle Estilo26 = document.ParagraphStyles["Estilo26"];
                if (Estilo26 == null)
                {
                    Estilo26 = document.ParagraphStyles.CreateNew();
                    Estilo26.Name = "Estilo26";
                    Estilo26.Alignment = ParagraphAlignment.Justify;
                    Estilo26.FontName = "Calibri";
                    Estilo26.FontSize = 11;
                    Estilo26.Bold = false;
                    Estilo26.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    Estilo26.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                    Estilo26.LeftIndent = 118;
                    document.ParagraphStyles.Add(Estilo26);
                }

                ParagraphStyle Estilo27 = document.ParagraphStyles["Estilo27"];
                if (Estilo27 == null)
                {
                    Estilo27 = document.ParagraphStyles.CreateNew();
                    Estilo27.Name = "Estilo26";
                    Estilo27.Alignment = ParagraphAlignment.Justify;
                    Estilo27.FontName = "Calibri";
                    Estilo27.FontSize = 11;
                    Estilo27.Bold = false;
                    Estilo27.LeftIndent = 300;
                    document.ParagraphStyles.Add(Estilo27);
                }

                DevExpress.XtraRichEdit.API.Native.TableStyle EstiloTabla1 = document.TableStyles["EstiloTabla1"];
                if (EstiloTabla1 == null)
                {
                    EstiloTabla1 = document.TableStyles.CreateNew();
                    EstiloTabla1.LeftPadding = Units.CentimetersToDocumentsF((float)0.19);
                    EstiloTabla1.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    EstiloTabla1.SpacingBefore = 0;
                    EstiloTabla1.SpacingAfter = 0;
                    document.TableStyles.Add(EstiloTabla1);
                }


                #endregion

                #region Lista Numeración

                AbstractNumberingList ListNumeracion = document.AbstractNumberingLists.Add();
                ListNumeracion.NumberingType = NumberingType.MultiLevel;

                #region Nivel0
                ListLevel level = ListNumeracion.Levels[0];
                level.ParagraphProperties.SpacingBefore = 50;
                level.ParagraphProperties.SpacingAfter = 25;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)3.25);
                level.ParagraphProperties.LeftIndent = 384;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = true;
                level.Start = 1;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "{0}.";

                #endregion

                #region Nivel1
                level = ListNumeracion.Levels[1];
                level.ParagraphProperties.SpacingBefore = 25;
                level.ParagraphProperties.SpacingAfter = 0;
                //level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                //level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)3.25);
                level.ParagraphProperties.LeftIndent = 0;
                level.Start = 1;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "{0}.{1}";
                #endregion

                #region Nivel2
                level = ListNumeracion.Levels[2];
                level.ParagraphProperties.SpacingBefore = 25;
                level.ParagraphProperties.SpacingAfter = 25;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                level.ParagraphProperties.LeftIndent = 118;
                level.Start = 1;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "{0}.{1}.{2}";
                #endregion

                NumberingList ListaNumeros0 = document.NumberingLists.Add(0);

                AbstractNumberingList ListBullet = document.AbstractNumberingLists.Add();
                ListBullet.NumberingType = NumberingType.Bullet;

                ListLevel levelBullet = ListBullet.Levels[0];
                levelBullet.ParagraphProperties.SpacingBefore = 25;
                levelBullet.ParagraphProperties.SpacingAfter = 0;
                levelBullet.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                levelBullet.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.5);
                levelBullet.DisplayFormatString = "\u00B7";
                levelBullet.CharacterProperties.FontName = "Symbol";
                levelBullet.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                levelBullet.CharacterProperties.Bold = true;

                NumberingList ListBullet1 = document.NumberingLists.Add(1);

                #endregion

                #region Cabecera
                var Logo = Server.MapPath("~/Content/Images/logo2024.png");
                SubDocument myHeader2 = secondSection.BeginUpdateHeader(HeaderFooterType.Odd);

                DevExpress.XtraRichEdit.API.Native.Table tablaHeader = myHeader2.Tables.Create(myHeader2.Range.End, 2, 3);
                tablaHeader.MergeCells(tablaHeader[1, 0], tablaHeader[1, 2]);
                myHeader2.Images.Insert(tablaHeader[0, 0].Range.Start, DocumentImageSource.FromFile(Logo));
                myHeader2.InsertText(tablaHeader[0, 1].Range.Start, string.Format("INFORME DEL CT-AF DEL COES\n  (EV-{0}-{1})", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO));
                myHeader2.InsertText(tablaHeader[0, 2].Range.Start, $"COMITÉ TÉCNICO\n DE ANÁLISIS DE FALLAS \n {DateTime.Now.ToString("dd.MM.yyyy")}");
                myHeader2.InsertText(tablaHeader[1, 0].Range.Start, "________________________________________________________________________________\n");

                CharacterProperties headerRowProperties = myHeader2.BeginUpdateCharacters(tablaHeader[0, 1].Range);
                headerRowProperties.FontName = "Calibri";
                headerRowProperties.FontSize = 12;
                headerRowProperties.ForeColor = Color.Black;
                headerRowProperties.Bold = true;
                document.EndUpdateCharacters(headerRowProperties);

                CharacterProperties headerRowProperties2 = myHeader2.BeginUpdateCharacters(tablaHeader[0, 2].Range);
                headerRowProperties2.FontName = "Calibri";
                headerRowProperties2.FontSize = 10;
                headerRowProperties2.ForeColor = Color.Black;
                headerRowProperties2.Bold = true;
                document.EndUpdateCharacters(headerRowProperties2);

                ParagraphProperties headerRowParagraphProperties0 = myHeader2.BeginUpdateParagraphs(tablaHeader[0, 0].Range);
                headerRowParagraphProperties0.Alignment = ParagraphAlignment.Center;
                document.EndUpdateParagraphs(headerRowParagraphProperties0);
                tablaHeader[0, 0].VerticalAlignment = TableCellVerticalAlignment.Center;

                ParagraphProperties headerRowParagraphProperties = myHeader2.BeginUpdateParagraphs(tablaHeader[0, 1].Range);
                headerRowParagraphProperties.Alignment = ParagraphAlignment.Center;
                document.EndUpdateParagraphs(headerRowParagraphProperties);
                tablaHeader[0, 1].VerticalAlignment = TableCellVerticalAlignment.Center;

                ParagraphProperties headerRowParagraphProperties2 = myHeader2.BeginUpdateParagraphs(tablaHeader[0, 2].Range);
                headerRowParagraphProperties2.Alignment = ParagraphAlignment.Center;
                document.EndUpdateParagraphs(headerRowParagraphProperties2);
                tablaHeader[0, 2].VerticalAlignment = TableCellVerticalAlignment.Center;

                DevExpress.XtraRichEdit.API.Native.TableCell firstCell = tablaHeader[0, 0];
                firstCell.PreferredWidthType = WidthType.Fixed;
                firstCell.PreferredWidth = Units.CentimetersToDocumentsF((float)5.29);
                firstCell.HeightType = HeightType.Exact;
                firstCell.Height = Units.CentimetersToDocumentsF((float)2.31);
                firstCell.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Left.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Right.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Top.LineStyle = TableBorderLineStyle.None;

                DevExpress.XtraRichEdit.API.Native.TableCell SecondCell = tablaHeader[0, 1];
                SecondCell.PreferredWidthType = WidthType.Fixed;
                SecondCell.PreferredWidth = Units.CentimetersToDocumentsF((float)6.88);
                SecondCell.HeightType = HeightType.Exact;
                SecondCell.Height = Units.CentimetersToDocumentsF((float)2.31);
                SecondCell.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Left.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Right.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Top.LineStyle = TableBorderLineStyle.None;

                DevExpress.XtraRichEdit.API.Native.TableCell thirdCell = tablaHeader[0, 2];
                thirdCell.PreferredWidthType = WidthType.Fixed;
                thirdCell.PreferredWidth = Units.CentimetersToDocumentsF((float)4.89);
                thirdCell.HeightType = HeightType.Exact;
                thirdCell.Height = Units.CentimetersToDocumentsF((float)2.31);
                thirdCell.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                thirdCell.Borders.Left.LineStyle = TableBorderLineStyle.None;
                thirdCell.Borders.Right.LineStyle = TableBorderLineStyle.None;
                thirdCell.Borders.Top.LineStyle = TableBorderLineStyle.None;
                secondSection.EndUpdateHeader(myHeader2);

                DevExpress.XtraRichEdit.API.Native.TableCell Celheader10 = tablaHeader[1, 0];
                Celheader10.HeightType = HeightType.Exact;
                Celheader10.PreferredWidth = Units.CentimetersToDocumentsF((float)4.07);
                Celheader10.Height = Units.CentimetersToDocumentsF((float)0.61);
                Celheader10.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                Celheader10.Borders.Left.LineStyle = TableBorderLineStyle.None;
                Celheader10.Borders.Right.LineStyle = TableBorderLineStyle.None;
                Celheader10.Borders.Top.LineStyle = TableBorderLineStyle.None;
                Celheader10.VerticalAlignment = TableCellVerticalAlignment.Center;
                Celheader10.TopPadding = 0;
                Celheader10.BottomPadding = 0;

                #endregion

                #region Foother
                var pathFoother = Server.MapPath("~/Content/Images/gcasalindo.png");

                SubDocument myFoother = secondSection.BeginUpdateFooter(HeaderFooterType.Odd);
                DevExpress.XtraRichEdit.API.Native.Table tablaFoother = myFoother.Tables.Create(myFoother.Range.End, 1, 7);
                tablaFoother.PreferredWidthType = WidthType.Fixed;
                tablaFoother.PreferredWidth = Units.CentimetersToDocumentsF((float)15.7);
                tablaFoother.LeftPadding = Units.CentimetersToDocumentsF((float)0);
                tablaFoother.RightPadding = Units.CentimetersToDocumentsF((float)0);

                myFoother.InsertText(tablaFoother[0, 0].Range.Start, string.Format("EV-{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO));

                for (int i=0; i < obj.lsReunionResponsable.Count; i++)
                {
                    if(i < 3)
                    {
                        string firma = obj.lsReunionResponsable[i].REPRUTAFIRMA;
                        string RutaArchivosFirma = ConfigurationManager.AppSettings["CarpetaDeFirmas"];
                        var imgfirma = RutaArchivosFirma + firma;
                        if (System.IO.File.Exists(imgfirma))
                        {
                            //myFoother.Images.Insert(tablaFoother[0, i + 1].Range.Start, DocumentImageSource.FromFile(imgfirma));


                            Shape shImagen = myFoother.Shapes.InsertPicture(tablaFoother[0, i + 1].Range.Start, DocumentImageSource.FromFile(imgfirma));
                            shImagen.Size = new SizeF(Units.CentimetersToDocumentsF((float)2.46), Units.CentimetersToDocumentsF((float)1.04));
                            shImagen.TextWrapping = TextWrappingType.InLineWithText;
                        }
                    }
                    
                }
                
                DocumentRange rangePage = myFoother.InsertText(tablaFoother[0, 4].Range.Start, "Página ");
                Field fld1 = myFoother.Fields.Create(rangePage.End, "PAGE");
                myFoother.InsertText(tablaFoother[0, 5].Range.Start, " de ");

                DocumentRange rangePage2 = myFoother.InsertText(tablaFoother[0, 6].Range.Start, "");
                Field fld2 = myFoother.Fields.Create(rangePage2.End, "NUMPAGES");

                myFoother.Fields.Update();

                DevExpress.XtraRichEdit.API.Native.TableCell FootherCel00 = tablaFoother[0, 0];
                FootherCel00.PreferredWidthType = WidthType.Fixed;
                FootherCel00.PreferredWidth = Units.CentimetersToDocumentsF((float)3);
                FootherCel00.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                FootherCel00.Borders.Left.LineStyle = TableBorderLineStyle.None;
                FootherCel00.Borders.Right.LineStyle = TableBorderLineStyle.None;
                FootherCel00.Borders.Top.LineStyle = TableBorderLineStyle.None;
                FootherCel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                CharacterProperties CharacterPropertiesFootherCel00 = myFoother.BeginUpdateCharacters(tablaFoother[0, 0].Range);
                CharacterPropertiesFootherCel00.Bold = true;
                CharacterPropertiesFootherCel00.Italic = true;
                myFoother.EndUpdateCharacters(CharacterPropertiesFootherCel00);

                DevExpress.XtraRichEdit.API.Native.TableCell FootherCel01 = tablaFoother[0, 1];
                FootherCel01.PreferredWidthType = WidthType.Fixed;
                FootherCel01.PreferredWidth = Units.CentimetersToDocumentsF((float)3.1);
                FootherCel01.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                FootherCel01.Borders.Left.LineStyle = TableBorderLineStyle.None;
                FootherCel01.Borders.Right.LineStyle = TableBorderLineStyle.None;
                FootherCel01.Borders.Top.LineStyle = TableBorderLineStyle.None;
                FootherCel01.VerticalAlignment = TableCellVerticalAlignment.Center;

                DevExpress.XtraRichEdit.API.Native.TableCell FootherCel02 = tablaFoother[0, 2];
                FootherCel02.PreferredWidthType = WidthType.Fixed;
                FootherCel02.PreferredWidth = Units.CentimetersToDocumentsF((float)3.1);
                FootherCel02.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                FootherCel02.Borders.Left.LineStyle = TableBorderLineStyle.None;
                FootherCel02.Borders.Right.LineStyle = TableBorderLineStyle.None;
                FootherCel02.Borders.Top.LineStyle = TableBorderLineStyle.None;
                FootherCel02.VerticalAlignment = TableCellVerticalAlignment.Center;

                DevExpress.XtraRichEdit.API.Native.TableCell FootherCel03 = tablaFoother[0, 3];
                FootherCel03.PreferredWidthType = WidthType.Fixed;
                FootherCel03.PreferredWidth = Units.CentimetersToDocumentsF((float)3.1);
                FootherCel03.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                FootherCel03.Borders.Left.LineStyle = TableBorderLineStyle.None;
                FootherCel03.Borders.Right.LineStyle = TableBorderLineStyle.None;
                FootherCel03.Borders.Top.LineStyle = TableBorderLineStyle.None;
                FootherCel03.VerticalAlignment = TableCellVerticalAlignment.Center;

                DevExpress.XtraRichEdit.API.Native.TableCell FootherCel04 = tablaFoother[0, 4];
                FootherCel04.PreferredWidthType = WidthType.Fixed;
                FootherCel04.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                FootherCel04.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                FootherCel04.Borders.Left.LineStyle = TableBorderLineStyle.None;
                FootherCel04.Borders.Right.LineStyle = TableBorderLineStyle.None;
                FootherCel04.Borders.Top.LineStyle = TableBorderLineStyle.None;
                FootherCel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                ParagraphProperties ParagraphPropertiesFootherCel04 = myFoother.BeginUpdateParagraphs(tablaFoother[0, 4].Range);
                ParagraphPropertiesFootherCel04.Alignment = ParagraphAlignment.Right;
                ParagraphPropertiesFootherCel04.SpacingAfter = 0;
                ParagraphPropertiesFootherCel04.SpacingBefore = 0;
                myFoother.EndUpdateParagraphs(ParagraphPropertiesFootherCel04);
                CharacterProperties CharacterPropertiesFootherCel04 = myFoother.BeginUpdateCharacters(tablaFoother[0, 4].Range);
                CharacterPropertiesFootherCel04.Bold = false;
                CharacterPropertiesFootherCel04.FontName = "Calibri";
                CharacterPropertiesFootherCel04.FontSize = 10;
                myFoother.EndUpdateCharacters(CharacterPropertiesFootherCel04);

                DevExpress.XtraRichEdit.API.Native.TableCell FootherCel05 = tablaFoother[0, 5];
                FootherCel05.PreferredWidthType = WidthType.Fixed;
                FootherCel05.PreferredWidth = Units.CentimetersToDocumentsF((float)0.6);
                FootherCel05.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                FootherCel05.Borders.Left.LineStyle = TableBorderLineStyle.None;
                FootherCel05.Borders.Right.LineStyle = TableBorderLineStyle.None;
                FootherCel05.Borders.Top.LineStyle = TableBorderLineStyle.None;
                FootherCel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                CharacterProperties CharacterPropertiesFootherCel05 = myFoother.BeginUpdateCharacters(tablaFoother[0, 5].Range);
                CharacterPropertiesFootherCel05.Bold = false;
                CharacterPropertiesFootherCel05.FontName = "Calibri";
                CharacterPropertiesFootherCel05.FontSize = 10;
                myFoother.EndUpdateCharacters(CharacterPropertiesFootherCel05);

                DevExpress.XtraRichEdit.API.Native.TableCell FootherCel06 = tablaFoother[0, 6];
                FootherCel06.PreferredWidthType = WidthType.Fixed;
                FootherCel06.PreferredWidth = Units.CentimetersToDocumentsF((float)0.6);
                FootherCel06.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                FootherCel06.Borders.Left.LineStyle = TableBorderLineStyle.None;
                FootherCel06.Borders.Right.LineStyle = TableBorderLineStyle.None;
                FootherCel06.Borders.Top.LineStyle = TableBorderLineStyle.None;
                FootherCel06.VerticalAlignment = TableCellVerticalAlignment.Center;
                CharacterProperties CharacterPropertiesFootherCel06 = myFoother.BeginUpdateCharacters(tablaFoother[0, 6].Range);
                CharacterPropertiesFootherCel06.Bold = false;
                CharacterPropertiesFootherCel06.FontName = "Calibri";
                CharacterPropertiesFootherCel06.FontSize = 10;
                myFoother.EndUpdateCharacters(CharacterPropertiesFootherCel06);

                secondSection.EndUpdateFooter(myFoother);

                #endregion

                #region Carátula
                var pathCuerpo = Server.MapPath("~/Content/Images/CuerpoInformeCtaf.png");
                DocumentPosition PosFir2 = document.CreatePosition(document.Sections[0].Range.Start.ToInt());
                Shape ImagenCuerpo = document.Shapes.InsertPicture(PosFir2, DocumentImageSource.FromFile(pathCuerpo));
                ImagenCuerpo.HorizontalAlignment = ShapeHorizontalAlignment.Center;
                ImagenCuerpo.TextWrapping = TextWrappingType.BehindText;
                ImagenCuerpo.Size = new SizeF(Units.CentimetersToDocumentsF((float)19.75), Units.CentimetersToDocumentsF((float)27.91));
                ImagenCuerpo.RelativeVerticalPosition = ShapeRelativeVerticalPosition.Page;
                ImagenCuerpo.OffsetY = 80;

                int cantidadSaltos = 13;
                string parrafo = string.Empty;
                int cantidadCaracteresAsunto = obj.oEventoDTO.EVENASUNTO.Length;

                if (cantidadCaracteresAsunto >= 132 && cantidadCaracteresAsunto < 154)
                    cantidadSaltos = 12;
                else if (cantidadCaracteresAsunto >= 154 && cantidadCaracteresAsunto < 200)
                    cantidadSaltos = 11;
                else if (cantidadCaracteresAsunto >= 200 && cantidadCaracteresAsunto < 242)
                    cantidadSaltos = 9;
                else if (cantidadCaracteresAsunto >= 242)
                    cantidadSaltos = 8;

                for (int i = 0; i < cantidadSaltos; i++)
                {
                    parrafo = string.Concat(parrafo, "\n");
                }

                #region Título y Asunto
                DocumentPosition PosParTitulo = document.CreatePosition(document.Sections[0].Range.Start.ToInt());
                DevExpress.XtraRichEdit.API.Native.Paragraph ParTitulo = document.Paragraphs.Insert(PosParTitulo);
                document.InsertText(PosParTitulo, parrafo + string.Format("EVENTO-{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString().PadLeft(3, '0'), obj.oAnalisisFallaDTO.AFEANIO));

                DocumentPosition PosParAsunto = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParAsunto = document.Paragraphs.Insert(PosParAsunto);
                document.InsertText(PosParAsunto, obj.oEventoDTO.EVENASUNTO);

                #endregion

                #region Fechas
                string FechaHoraInicio = "";

                if (obj.ListaInformeCtaf != null)
                {
                    if (obj.ListaInformeCtaf.Count > 0)
                    {
                        var nuevaLista = obj.ListaInformeCtaf.OrderBy(m => m.EVENINI).ToList();

                        for (int i = 0; i < nuevaLista.Count; i++)
                        {
                            var tempEventoSCO = nuevaLista[i];

                            if (tempEventoSCO.EVENINI.HasValue)
                            {
                                var agregarAdicion = i == nuevaLista.Count - 1 ? " y " : ", ";
                                agregarAdicion = i == 0 ? "Del " : agregarAdicion;
                                var hora = tempEventoSCO.EVENINI.Value.ToString("HH:mm");
                                var tempDiaEvento = tempEventoSCO.EVENINI.Value.ToString($"dd.MM.yyyy");
                                FechaHoraInicio = string.Concat(FechaHoraInicio, agregarAdicion, tempDiaEvento, " a las ", hora, " h");
                            }
                        }
                    }
                }


                DocumentPosition PosParSalto = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSalto = document.Paragraphs.Insert(PosParSalto);
                document.InsertText(PosParSalto, "\n");

                DocumentPosition PosParFecha = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParFecha = document.Paragraphs.Insert(PosParFecha);
                document.InsertText(PosParFecha, FechaHoraInicio);

                DocumentPosition PosParFecha2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParFecha2 = document.Paragraphs.Insert(PosParFecha2);
                document.InsertText(PosParFecha2, "\n\n\n\n\n\n\n\n\n\n"+ string.Format("Lima, {0} de {1} {2}", DateTime.Now.Day.ToString(), DateTime.Now.ToString(Constantes.FormatoMes, new CultureInfo("es-ES")).ToUpper(), DateTime.Now.Year.ToString()));

                #endregion

                #region Aplicando Estilos Caratula
                document.Paragraphs[cantidadSaltos + 1].Style = Estilo1;
                document.Paragraphs[cantidadSaltos + 2].Style = Estilo2;
                document.Paragraphs[cantidadSaltos + 5].Style = Estilo2;
                document.Paragraphs[cantidadSaltos + 16].Style = Estilo3;

                DocumentRange formattedRangePar15 = document.Paragraphs[cantidadSaltos + 2].Range;
                CharacterProperties characterPropertiesPar15 = document.BeginUpdateCharacters(formattedRangePar15);
                characterPropertiesPar15.FontSize = 18;
                document.EndUpdateCharacters(characterPropertiesPar15);

                DocumentRange formattedRangePar16 = document.Paragraphs[cantidadSaltos + 3].Range;
                CharacterProperties characterPropertiesPar16 = document.BeginUpdateCharacters(formattedRangePar16);
                characterPropertiesPar16.FontSize = 18;
                document.EndUpdateCharacters(characterPropertiesPar16);

                DocumentRange formattedRangePar17 = document.Paragraphs[cantidadSaltos + 4].Range;
                CharacterProperties characterPropertiesPar17 = document.BeginUpdateCharacters(formattedRangePar17);
                characterPropertiesPar17.FontSize = 12;
                document.EndUpdateCharacters(characterPropertiesPar17);

                DocumentRange formattedRangePar18 = document.Paragraphs[cantidadSaltos + 5].Range;
                CharacterProperties characterPropertiesPar18 = document.BeginUpdateCharacters(formattedRangePar18);
                characterPropertiesPar18.FontSize = 18;
                document.EndUpdateCharacters(characterPropertiesPar18);

                DocumentRange formattedRangeParFechaCar = document.Paragraphs[cantidadSaltos + 16].Range;
                CharacterProperties characterPropertiesParFechaCar = document.BeginUpdateCharacters(formattedRangeParFechaCar);
                characterPropertiesParFechaCar.FontSize = 14;
                document.EndUpdateCharacters(characterPropertiesParFechaCar);

                #endregion

                #endregion

                #region Sección1: Evento
                int posRangoSec1 = document.Paragraphs.ToList().Count();
                document.AppendText("EVENTO\t:\t" + obj.oEventoDTO.EVENASUNTO);

                int RangoIniSec1 = document.Sections[1].Paragraphs[0].Range.Start.ToInt();
                int RangoFinSec1 = 9;
                DocumentRange FormatoRangoSec1 = document.CreateRange(RangoIniSec1, RangoFinSec1);
                CharacterProperties CarPropRangoSec1 = document.BeginUpdateCharacters(FormatoRangoSec1);
                CarPropRangoSec1.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec1);

                TabInfoCollection tabsEvento = document.Paragraphs[posRangoSec1 - 1].BeginUpdateTabs(true);

                TabInfo tabEvento1 = new TabInfo();
                tabEvento1.Position = Units.CentimetersToDocumentsF((float)0.75);
                tabEvento1.Alignment = TabAlignmentType.Left;
                tabsEvento.Add(tabEvento1);

                TabInfo tabEvento2 = new TabInfo();
                tabEvento2.Position = Units.CentimetersToDocumentsF((float)3);
                tabEvento2.Alignment = TabAlignmentType.Left;
                tabsEvento.Add(tabEvento2);

                TabInfo tabEvento3 = new TabInfo();
                tabEvento3.Position = Units.CentimetersToDocumentsF((float)3.25);
                tabEvento3.Alignment = TabAlignmentType.Left;
                tabsEvento.Add(tabEvento3);

                document.Paragraphs[posRangoSec1 - 1].EndUpdateTabs(tabsEvento);
                #endregion

                #region Sección2: Fecha
                string fechasEventos = string.Empty;
                if (obj.ListaInformeCtaf != null)
                {
                    if (obj.ListaInformeCtaf.Any())
                    {
                        var tempListaInformeCtaf = obj.ListaInformeCtaf.Where(x => x.EVENINI.HasValue).OrderBy(x => x.EVENINI).ToList();
                        var listaFechas = tempListaInformeCtaf.Select(x => x.EVENINI.Value).ToList();
                        var listaFechasString = listaFechas.Select(x => x.ToString("dd.MM.yyyy")).Distinct().ToList();

                        if (listaFechasString.Any())
                        {
                            int ultimaIteracion = listaFechasString.Count - 1;

                            for (int i = 0; i < listaFechasString.Count; i++)
                            {
                                string separacion = string.Empty;

                                if (i > 0 && listaFechasString.Count > 2 && ultimaIteracion != i)
                                {
                                    separacion = ", ";
                                }

                                if (ultimaIteracion == i && listaFechasString.Count > 1)
                                {
                                    separacion = " y ";
                                }

                                fechasEventos = string.Concat(fechasEventos, separacion, listaFechasString[i]);
                            }

                            fechasEventos = string.Concat(fechasEventos, ".");
                        }
                    }
                }

                int posRangoSec2 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec2Fecha = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2Fecha = document.Paragraphs.Insert(PosSec2Fecha);
                document.InsertText(PosSec2Fecha, "FECHA\t:\t" + fechasEventos);

                int RangoIniSec2 = document.Paragraphs[posRangoSec2].Range.Start.ToInt();
                int RangoFinSec2 = 8;
                DocumentRange FormatoRangoSec2 = document.CreateRange(RangoIniSec2, RangoFinSec2);
                CharacterProperties CarPropRangoSec2 = document.BeginUpdateCharacters(FormatoRangoSec2);
                CarPropRangoSec2.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec2);

                TabInfoCollection tabsFecha = document.Paragraphs[posRangoSec2].BeginUpdateTabs(true);
                TabInfo tabFecha1 = new TabInfo();
                tabFecha1.Position = Units.CentimetersToDocumentsF((float)0.75);
                tabFecha1.Alignment = TabAlignmentType.Left;
                tabsFecha.Add(tabFecha1);

                TabInfo tabFecha2 = new TabInfo();
                tabFecha2.Position = Units.CentimetersToDocumentsF((float)3);
                tabFecha2.Alignment = TabAlignmentType.Left;
                tabsFecha.Add(tabFecha2);

                TabInfo tabFecha3 = new TabInfo();
                tabFecha3.Position = Units.CentimetersToDocumentsF((float)3.25);
                tabFecha3.Alignment = TabAlignmentType.Left;
                tabsFecha.Add(tabFecha3);

                document.Paragraphs[posRangoSec2].EndUpdateTabs(tabsFecha);

                #endregion

                #region Sección3: Hora
                string horasEventos = string.Empty;
                if (obj.ListaInformeCtaf != null)
                {
                    if (obj.ListaInformeCtaf.Any())
                    {
                        var tempListaInformeCtaf = obj.ListaInformeCtaf.Where(x => x.EVENINI.HasValue).OrderBy(x => x.EVENINI).ToList();
                        var listaFechas = tempListaInformeCtaf.Select(x => x.EVENINI.Value).ToList();
                        var listaHorasString = listaFechas.Select(x => x.ToString("HH:mm")).Distinct().ToList();

                        if (listaHorasString.Any())
                        {
                            int ultimaIteracion = listaHorasString.Count - 1;
                            for (int i = 0; i < listaHorasString.Count; i++)
                            {
                                string separacion = string.Empty;

                                if (i > 0 && listaHorasString.Count > 2 && ultimaIteracion != i)
                                {
                                    separacion = ", ";
                                }

                                if (ultimaIteracion == i && listaHorasString.Count > 1)
                                {
                                    separacion = " y ";
                                }

                                horasEventos = string.Concat(horasEventos, separacion, listaHorasString[i]);
                            }
                            horasEventos = string.Concat(horasEventos, ".");
                        }
                    }
                }

                int posRangoSec3 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec3Hora = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec3Hora = document.Paragraphs.Insert(PosSec3Hora);
                document.InsertText(PosSec3Hora, "HORA\t:\t" + horasEventos);

                int RangoIniSec3 = document.Paragraphs[posRangoSec3].Range.Start.ToInt();
                int RangoFinSec3 = 7;
                DocumentRange FormatoRangoSec3 = document.CreateRange(RangoIniSec3, RangoFinSec3);
                CharacterProperties CarPropRangoSec3 = document.BeginUpdateCharacters(FormatoRangoSec3);
                CarPropRangoSec3.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec3);

                TabInfoCollection tabsHora = document.Paragraphs[posRangoSec3].BeginUpdateTabs(true);
                TabInfo tabHora1 = new TabInfo();
                tabFecha1.Position = Units.CentimetersToDocumentsF((float)0.75);
                tabFecha1.Alignment = TabAlignmentType.Left;
                tabsHora.Add(tabFecha1);

                TabInfo tabHora2 = new TabInfo();
                tabFecha2.Position = Units.CentimetersToDocumentsF((float)3);
                tabFecha2.Alignment = TabAlignmentType.Left;
                tabsHora.Add(tabFecha2);

                TabInfo tabHora3 = new TabInfo();
                tabFecha3.Position = Units.CentimetersToDocumentsF((float)3.25);
                tabFecha3.Alignment = TabAlignmentType.Left;
                tabsHora.Add(tabFecha3);

                document.Paragraphs[posRangoSec3].EndUpdateTabs(tabsHora);
                #endregion

                #region Sección4: Propietario

                int posRangoSec4 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec4Propietario = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec4Propietario = document.Paragraphs.Insert(PosSec4Propietario);
                document.InsertText(PosSec4Propietario, "PROPIETARIO\t:\t" + obj.oEquipoDTO.EMPRENOMB);

                int RangoIniSec4 = document.Paragraphs[posRangoSec4].Range.Start.ToInt();
                int RangoFinSec4 = 13;
                DocumentRange FormatoRangoSec4 = document.CreateRange(RangoIniSec4, RangoFinSec4);
                CharacterProperties CarPropRangoSec4 = document.BeginUpdateCharacters(FormatoRangoSec4);
                CarPropRangoSec4.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec4);

                TabInfoCollection tabsPripietario = document.Paragraphs[posRangoSec4].BeginUpdateTabs(true);
                TabInfo tabPP1 = new TabInfo();
                tabPP1.Position = Units.CentimetersToDocumentsF((float)0.75);
                tabPP1.Alignment = TabAlignmentType.Left;
                tabsPripietario.Add(tabPP1);

                TabInfo tabPP2 = new TabInfo();
                tabPP2.Position = Units.CentimetersToDocumentsF((float)3);
                tabPP2.Alignment = TabAlignmentType.Left;
                tabsPripietario.Add(tabPP2);

                TabInfo tabPP3 = new TabInfo();
                tabPP3.Position = Units.CentimetersToDocumentsF((float)3.25);
                tabPP3.Alignment = TabAlignmentType.Left;
                tabsPripietario.Add(tabPP3);

                document.Paragraphs[posRangoSec4].EndUpdateTabs(tabsPripietario);

                #endregion

                #region Sección5: Informes

                int posRangoSec5 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec5Informes = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec5Informes = document.Paragraphs.Insert(PosSec5Informes);
                document.InsertText(PosSec5Informes, "INFORMES:");

                int RangoIniSec5 = document.Paragraphs[posRangoSec5].Range.Start.ToInt();
                int RangoFinSec5 = 10;
                DocumentRange FormatoRangoSec5 = document.CreateRange(RangoIniSec5, RangoFinSec5);
                CharacterProperties CarPropRangoSec5 = document.BeginUpdateCharacters(FormatoRangoSec5);
                CarPropRangoSec5.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec5);

                int posParPreTablaSeccion5 = document.Paragraphs.ToList().Count();

                #region Tabla Sección5
                if (obj.CTAFINFORMEREPORTE != null && obj.CTAFINFORMEREPORTE.Count > 0)
                {
                    int rows = obj.CTAFINFORMEREPORTE.Count + 1;
                                    
                    DocumentPosition PostablaInformes = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Table tablaInformes = document.Tables.Create(PostablaInformes, rows, 4);
                    tablaInformes.BeginUpdate();

                    #region Configuracion Tabla

                    tablaInformes.Style = EstiloTabla1;
                    tablaInformes.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                    tablaInformes.VerticalAlignment = TableVerticalAlignment.None;
                    tablaInformes.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                    tablaInformes.TextWrappingType = TableTextWrappingType.Around;
                    tablaInformes.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                    tablaInformes.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.85);
                    tablaInformes.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                    tablaInformes.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                    tablaInformes.MarginTop = Units.CentimetersToDocumentsF((float)0);
                    tablaInformes.MarginRight = Units.CentimetersToDocumentsF((float)0.25);
                    tablaInformes.PreferredWidthType = WidthType.Fixed;
                    tablaInformes.PreferredWidth = Units.CentimetersToDocumentsF((float)14.45);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaInformes[0, 0];
                    Cel00.PreferredWidthType = WidthType.Fixed;
                    Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)0.9);
                    Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel00.BackgroundColor = Color.LightGray;
                    Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel00.TopPadding = 0;
                    Cel00.BottomPadding = 0;
                    ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaInformes[0, 0].Range);
                    ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel00.SpacingAfter = 0;
                    ParagraphPropertiesCel00.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                    CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaInformes[0, 0].Range);
                    CharacterPropertiesCel00.Bold = true;
                    document.EndUpdateCharacters(CharacterPropertiesCel00);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaInformes[0, 1];
                    Cel01.PreferredWidthType = WidthType.Fixed;
                    Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)4.86);
                    Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel01.BackgroundColor = Color.LightGray;
                    Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel01.TopPadding = 0;
                    Cel01.BottomPadding = 0;
                    ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaInformes[0, 1].Range);
                    ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel01.SpacingAfter = 0;
                    ParagraphPropertiesCel01.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                    CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaInformes[0, 1].Range);
                    CharacterPropertiesCel01.Bold = true;
                    document.EndUpdateCharacters(CharacterPropertiesCel01);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaInformes[0, 2];
                    Cel02.PreferredWidthType = WidthType.Fixed;
                    Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)7);
                    Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel02.BackgroundColor = Color.LightGray;
                    Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel02.TopPadding = 0;
                    Cel02.BottomPadding = 0;
                    ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaInformes[0, 2].Range);
                    ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel02.SpacingAfter = 0;
                    ParagraphPropertiesCel02.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                    CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaInformes[0, 2].Range);
                    CharacterPropertiesCel02.Bold = true;
                    document.EndUpdateCharacters(CharacterPropertiesCel02);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaInformes[0, 3];
                    Cel03.PreferredWidthType = WidthType.Fixed;
                    Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                    Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel03.BackgroundColor = Color.LightGray;
                    Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel03.TopPadding = 0;
                    Cel03.BottomPadding = 0;
                    ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaInformes[0, 3].Range);
                    ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel03.SpacingAfter = 0;
                    ParagraphPropertiesCel03.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                    CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaInformes[0, 3].Range);
                    CharacterPropertiesCel03.Bold = true;
                    document.EndUpdateCharacters(CharacterPropertiesCel03);

                    tablaInformes.Rows[0].RepeatAsHeaderRow = true;

                    #endregion

                    #region Datos Tabla

                    document.InsertText(tablaInformes[0, 0].Range.Start, "N°");
                    document.InsertText(tablaInformes[0, 1].Range.Start, "EMPRESA");
                    document.InsertText(tablaInformes[0, 2].Range.Start, "INFORME FINAL");
                    document.InsertText(tablaInformes[0, 3].Range.Start, "FECHA DE ENTREGA");


                    for (int x = 0; x < obj.CTAFINFORMEREPORTE.Count; x++)
                    {
                        if (obj.CTAFINFORMEREPORTE[x].EMPRABREV != null)
                        {
                            document.InsertText(tablaInformes[x + 1, 0].Range.Start, obj.CTAFINFORMEREPORTE[x].RowNumber.ToString());
                            document.InsertText(tablaInformes[x + 1, 1].Range.Start, obj.CTAFINFORMEREPORTE[x].EMPRABREV);
                            document.InsertText(tablaInformes[x + 1, 2].Range.Start, obj.CTAFINFORMEREPORTE[x].INFORMEFINAL);
                            document.InsertText(tablaInformes[x + 1, 3].Range.Start, obj.CTAFINFORMEREPORTE[x].FECHA);
                        }
                            

                        for (int y = 0; y <= 3; y++)
                        {
                            DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaInformes[x + 1, y];
                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                            DocumentRange RangeCeli0 = Celi0.Range;
                            CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                            CharacterPropertiesRangeCeli0.FontName = "Calibri";
                            CharacterPropertiesRangeCeli0.FontSize = 11;
                            CharacterPropertiesRangeCeli0.Bold = false;
                            document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                            ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaInformes[x + 1, y].Range);
                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCeli0.SpacingAfter = 0;
                            ParagraphPropertiesCeli0.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                        }

                    }
                    #endregion

                    tablaInformes.EndUpdate();

                }
                else
                {
                    DocumentPosition PostablaSeccion5 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Table tablaInformes = document.Tables.Create(PostablaSeccion5, 2, 4);
                    tablaInformes.BeginUpdate();

                    #region Configuracion Tabla

                    tablaInformes.Style = EstiloTabla1;
                    tablaInformes.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                    tablaInformes.VerticalAlignment = TableVerticalAlignment.None;
                    tablaInformes.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                    tablaInformes.TextWrappingType = TableTextWrappingType.Around;
                    tablaInformes.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                    tablaInformes.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.85);
                    tablaInformes.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                    tablaInformes.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                    tablaInformes.MarginTop = Units.CentimetersToDocumentsF((float)0);
                    tablaInformes.MarginRight = Units.CentimetersToDocumentsF((float)0.25);
                    tablaInformes.PreferredWidthType = WidthType.Fixed;
                    tablaInformes.PreferredWidth = Units.CentimetersToDocumentsF((float)14.45);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaInformes[0, 0];
                    Cel00.PreferredWidthType = WidthType.Fixed;
                    Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)0.9);
                    Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel00.BackgroundColor = Color.LightGray;
                    Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel00.TopPadding = 0;
                    Cel00.BottomPadding = 0;
                    ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaInformes[0, 0].Range);
                    ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel00.SpacingAfter = 0;
                    ParagraphPropertiesCel00.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                    CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaInformes[0, 0].Range);
                    CharacterPropertiesCel00.Bold = true;
                    document.EndUpdateCharacters(CharacterPropertiesCel00);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaInformes[0, 1];
                    Cel01.PreferredWidthType = WidthType.Fixed;
                    Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)4.86);
                    Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel01.BackgroundColor = Color.LightGray;
                    Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel01.TopPadding = 0;
                    Cel01.BottomPadding = 0;
                    ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaInformes[0, 1].Range);
                    ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel01.SpacingAfter = 0;
                    ParagraphPropertiesCel01.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                    CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaInformes[0, 1].Range);
                    CharacterPropertiesCel01.Bold = true;
                    document.EndUpdateCharacters(CharacterPropertiesCel01);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaInformes[0, 2];
                    Cel02.PreferredWidthType = WidthType.Fixed;
                    Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)7);
                    Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel02.BackgroundColor = Color.LightGray;
                    Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel02.TopPadding = 0;
                    Cel02.BottomPadding = 0;
                    ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaInformes[0, 2].Range);
                    ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel02.SpacingAfter = 0;
                    ParagraphPropertiesCel02.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                    CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaInformes[0, 2].Range);
                    CharacterPropertiesCel02.Bold = true;
                    document.EndUpdateCharacters(CharacterPropertiesCel02);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaInformes[0, 3];
                    Cel03.PreferredWidthType = WidthType.Fixed;
                    Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                    Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel03.BackgroundColor = Color.LightGray;
                    Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel03.TopPadding = 0;
                    Cel03.BottomPadding = 0;
                    ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaInformes[0, 3].Range);
                    ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel03.SpacingAfter = 0;
                    ParagraphPropertiesCel03.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                    CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaInformes[0, 3].Range);
                    CharacterPropertiesCel03.Bold = true;
                    document.EndUpdateCharacters(CharacterPropertiesCel03);

                    tablaInformes.Rows[0].RepeatAsHeaderRow = true;

                    #endregion

                    document.InsertText(tablaInformes[0, 0].Range.Start, "N°");
                    document.InsertText(tablaInformes[0, 1].Range.Start, "EMPRESA");
                    document.InsertText(tablaInformes[0, 2].Range.Start, "INFORME FINAL");
                    document.InsertText(tablaInformes[0, 3].Range.Start, "FECHA DE ENTREGA");

                    for (int y = 0; y <= 3; y++)
                    {
                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaInformes[1, y];
                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                        DocumentRange RangeCeli0 = Celi0.Range;
                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                        CharacterPropertiesRangeCeli0.FontSize = 11;
                        CharacterPropertiesRangeCeli0.Bold = false;
                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaInformes[1, y].Range);
                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                    }
                        

                    tablaInformes.EndUpdate();
                }

                #endregion

                int posParPostTablaSeccion5 = document.Paragraphs.ToList().Count();
                ParrafoDTO saltoInf = new ParrafoDTO();
                saltoInf.RangeIniParrafo = posParPostTablaSeccion5;
                saltoInf.NroParrafo = posParPostTablaSeccion5;

                #endregion

                #region Sección6: Descripción del Evento

                int posRangoSec6 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec6DescripcionEvento = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6DescripcionEvento = document.Paragraphs.Insert(PosSec6DescripcionEvento);
                document.InsertText(PosSec6DescripcionEvento, "DESCRIPCIÓN DEL EVENTO");

                int RangoIniSec6 = document.Paragraphs[posRangoSec6].Range.Start.ToInt();
                int RangoFinSec6 = 23;
                DocumentRange FormatoRangoSec6 = document.CreateRange(RangoIniSec6, RangoFinSec6);
                CharacterProperties CarPropRangoSec6 = document.BeginUpdateCharacters(FormatoRangoSec6);
                CarPropRangoSec6.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec6);

                int posParInicioEventosSeccion6 = document.Paragraphs.ToList().Count();

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    foreach (var itemEvento in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                    {
                        string valorEvento = itemEvento.CabNombreEvento;

                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            int posCabSeccion6 = document.Paragraphs.ToList().Count();
                            DocumentPosition PosSec6Evento = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Evento = document.Paragraphs.Insert(PosSec6Evento);
                            document.InsertText(PosSec6Evento, valorEvento);
                            document.Paragraphs[posCabSeccion6].Style = Estilo4;

                        }

                        int posDetSeccion6 = document.Paragraphs.ToList().Count();
                        DocumentPosition PosSec6Descripcion = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosSec6Descripcion);
                        document.InsertText(PosSec6Descripcion, itemEvento.CabDescripcionEvento);

                        int posFinRgDetSeccion6 = document.Paragraphs.ToList().Count();
                        DocumentRange rangePPDesc = document.CreateRange(document.Paragraphs[posDetSeccion6].Range.Start, document.Paragraphs[posFinRgDetSeccion6 - 1].Range.End.ToInt() - document.Paragraphs[posDetSeccion6].Range.Start.ToInt());
                        ParagraphProperties ppDesc = document.BeginUpdateParagraphs(rangePPDesc);
                        ppDesc.Style = Estilo5;
                        document.EndUpdateParagraphs(ppDesc);
                        CharacterProperties CarPropRangoDetSec6_salto = document.BeginUpdateCharacters(rangePPDesc);
                        CarPropRangoDetSec6_salto.Style = Estilo6;
                        document.EndUpdateCharacters(CarPropRangoDetSec6_salto);
                    }
                }

                int posParFinalEventosSeccion6 = document.Paragraphs.ToList().Count();

                #endregion

                #region Sección7: Condiciones Previas

                int posRangoSec7 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec7CondPrevias = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec7CondPrevias = document.Paragraphs.Insert(PosSec7CondPrevias);
                document.InsertText(PosSec7CondPrevias, "CONDICIÓN PREVIA AL EVENTO EN EL SEIN");

                int RangoIniSec7 = document.Paragraphs[posRangoSec7].Range.Start.ToInt();
                int RangoFinSec7 = 38;
                DocumentRange FormatoRangoSec7 = document.CreateRange(RangoIniSec7, RangoFinSec7);
                CharacterProperties CarPropRangoSec7 = document.BeginUpdateCharacters(FormatoRangoSec7);
                CarPropRangoSec7.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec7);

                int posParLevel1Sec7 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec7_1CondPrevias = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec7_1CondPrevias = document.Paragraphs.Insert(PosSec7_1CondPrevias);
                document.InsertText(PosSec7_1CondPrevias, "Las condiciones operativas del SEIN previas al evento fueron las siguientes:");
                CharacterProperties CarPropRangoConPreSec7 = document.BeginUpdateCharacters(document.Paragraphs[posParLevel1Sec7].Range);
                CarPropRangoConPreSec7.Style = Estilo6;
                document.EndUpdateCharacters(CarPropRangoConPreSec7);

                int posIniParLevel1Sec7_1_1 = document.Paragraphs.ToList().Count();
                int posDetIniCentralSeccion7 = 0;
                
                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {                    
                    for (int r = 0; r < obj.ListaInformeCtaf.Count; r++)
                    {
                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            int posCabSeccion7 = document.Paragraphs.ToList().Count();
                            ParrafoDTO _Parrafo = new ParrafoDTO();
                            _Parrafo.NroParrafo = posCabSeccion7;
                            _Parrafo.RangeIniParrafo = posCabSeccion7;
                            _Parrafo.RangeFinParrafo = posCabSeccion7;
                            ListaParrafos.Add(_Parrafo);

                            DocumentPosition PosCabSec7Evento = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab7Evento = document.Paragraphs.Insert(PosCabSec7Evento);
                            document.InsertText(PosCabSec7Evento, obj.ListaInformeCtaf[r].CabNombreEvento);
                            document.Paragraphs[posCabSeccion7].Style = Estilo12;
                            CharacterProperties CharacterPropertiesCabSeccion7 = document.BeginUpdateCharacters(document.Paragraphs[posCabSeccion7].Range);
                            CharacterPropertiesCabSeccion7.Style = Estilo11;
                            document.EndUpdateCharacters(CharacterPropertiesCabSeccion7);
                        }

                        if ((obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaCentral == null)
                            && (obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaLinea == null)
                            && (obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaTransformadores == null))
                        {
                            int posDetSeccion7 = document.Paragraphs.ToList().Count();
                            ParrafoDTO _Parrafo1 = new ParrafoDTO();
                            _Parrafo1.NroParrafo = posDetSeccion7;
                            _Parrafo1.RangeIniParrafo = posDetSeccion7;
                            _Parrafo1.RangeFinParrafo = posDetSeccion7;
                            ListaParrafos.Add(_Parrafo1);

                            DocumentPosition PosDetSec7Evento = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet7Evento = document.Paragraphs.Insert(PosDetSec7Evento);
                            document.InsertText(PosDetSec7Evento, "No existen registros.");
                            document.Paragraphs[posDetSeccion7].Style = Estilo5;
                            CharacterProperties CharacterPropertiesDetSec7Evento = document.BeginUpdateCharacters(document.Paragraphs[posDetSeccion7].Range);
                            CharacterPropertiesDetSec7Evento.Style = Estilo6;
                            document.EndUpdateCharacters(CharacterPropertiesDetSec7Evento);
                        }
                        else
                        {
                            if (obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaCentral != null)
                            {
                                posDetIniCentralSeccion7 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetSec7Central = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet7Central = document.Paragraphs.Insert(PosDetSec7Central);
                                document.InsertText(PosDetSec7Central, "Flujo por potencia por los principales centros de generación de la zona:");
                                document.Paragraphs[posDetIniCentralSeccion7].Style = Estilo5;
                                CharacterProperties CharacterPropertiesDetIniCentralSeccion7 = document.BeginUpdateCharacters(document.Paragraphs[posDetIniCentralSeccion7].Range);
                                CharacterPropertiesDetIniCentralSeccion7.Style = Estilo6;
                                document.EndUpdateCharacters(CharacterPropertiesDetIniCentralSeccion7);

                                int posDetIniTablaCentralSeccion7 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo2 = new ParrafoDTO();
                                _Parrafo2.NroParrafo = posDetIniTablaCentralSeccion7;
                                _Parrafo2.RangeIniParrafo = posDetIniTablaCentralSeccion7;                                

                                int rowsCentral = obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count + 2;
                                DocumentPosition PostablaCondCentral = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaCondCentral = document.Tables.Create(PostablaCondCentral, rowsCentral, 5);
                                tablaCondCentral.BeginUpdate();

                                #region Configuracion Tabla
                                tablaCondCentral.Style = EstiloTabla1;
                                tablaCondCentral.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaCondCentral.VerticalAlignment = TableVerticalAlignment.None;
                                tablaCondCentral.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaCondCentral.TextWrappingType = TableTextWrappingType.Around;
                                tablaCondCentral.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaCondCentral.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaCondCentral.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaCondCentral.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaCondCentral.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaCondCentral.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaCondCentral.MergeCells(tablaCondCentral[0, 0], tablaCondCentral[1, 0]);
                                tablaCondCentral.MergeCells(tablaCondCentral[0, 1], tablaCondCentral[1, 1]);
                                tablaCondCentral.MergeCells(tablaCondCentral[0, 2], tablaCondCentral[1, 2]);
                                tablaCondCentral.MergeCells(tablaCondCentral[0, 3], tablaCondCentral[0, 4]);
                               
                                tablaCondCentral.PreferredWidthType = WidthType.Fixed;
                                tablaCondCentral.PreferredWidth = Units.CentimetersToDocumentsF((float)14);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaCondCentral[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)0.93);
                                Cel00.HeightType = HeightType.Exact;
                                Cel00.Height = Units.CentimetersToDocumentsF((float)0.6);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaCondCentral[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaCondCentral[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaCondCentral[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)3.12);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaCondCentral[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaCondCentral[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaCondCentral[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.58);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaCondCentral[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaCondCentral[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaCondCentral[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)4.25);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaCondCentral[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaCondCentral[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel10 = tablaCondCentral[1, 0];
                                Cel10.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel11 = tablaCondCentral[1, 1];
                                Cel11.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel12 = tablaCondCentral[1, 2];
                                Cel12.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel13 = tablaCondCentral[1, 3];
                                Cel13.PreferredWidthType = WidthType.Fixed;
                                Cel13.PreferredWidth = Units.CentimetersToDocumentsF((float)2.125);
                                Cel13.HeightType = HeightType.Exact;
                                Cel13.Height = Units.CentimetersToDocumentsF((float)0.6);
                                Cel13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.BackgroundColor = Color.LightGray;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.TopPadding = 0;
                                Cel13.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel13 = document.BeginUpdateParagraphs(tablaCondCentral[1, 3].Range);
                                ParagraphPropertiesCel13.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel13.SpacingAfter = 0;
                                ParagraphPropertiesCel13.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel13);
                                CharacterProperties CharacterPropertiesCel13 = document.BeginUpdateCharacters(tablaCondCentral[1, 3].Range);
                                CharacterPropertiesCel13.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel13);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel14 = tablaCondCentral[1, 4];
                                Cel14.PreferredWidthType = WidthType.Fixed;
                                Cel14.PreferredWidth = Units.CentimetersToDocumentsF((float)2.125);
                                Cel14.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.BackgroundColor = Color.LightGray;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.TopPadding = 0;
                                Cel14.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel14 = document.BeginUpdateParagraphs(tablaCondCentral[1, 4].Range);
                                ParagraphPropertiesCel14.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel14.SpacingAfter = 0;
                                ParagraphPropertiesCel14.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel14);
                                CharacterProperties CharacterPropertiesCel14 = document.BeginUpdateCharacters(tablaCondCentral[1, 4].Range);
                                CharacterPropertiesCel14.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel14);

                                tablaCondCentral.Rows[0].RepeatAsHeaderRow = true;
                                tablaCondCentral.Rows[1].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos de tabla

                                document.InsertText(tablaCondCentral[0, 0].Range.Start, "N°");
                                document.InsertText(tablaCondCentral[0, 1].Range.Start, "Central");
                                document.InsertText(tablaCondCentral[0, 2].Range.Start, "Unidad");
                                document.InsertText(tablaCondCentral[0, 3].Range.Start, "Generación");
                                document.InsertText(tablaCondCentral[1, 3].Range.Start, "MW");
                                document.InsertText(tablaCondCentral[1, 4].Range.Start, "MVAr");

                                int contadorCentral = 2;
                                int contadorFilas = 1;

                                var listaCondPreviaCentral = obj.ListaInformeCtaf[r].listaCondPreviaCentral;
                                var gruposCentral = listaCondPreviaCentral.GroupBy(x => x.EVECONDPRCENTRALDE).ToList();

                                foreach (var grupoCentral in gruposCentral)
                                {
                                    if (grupoCentral.Count() > 1)
                                    {
                                        tablaCondCentral.MergeCells(tablaCondCentral[contadorCentral, 0], tablaCondCentral[contadorCentral + grupoCentral.Count() - 1, 0]);
                                        tablaCondCentral.MergeCells(tablaCondCentral[contadorCentral, 1], tablaCondCentral[contadorCentral + grupoCentral.Count() - 1, 1]);

                                        foreach (var central in grupoCentral)
                                        {
                                            document.InsertText(tablaCondCentral[contadorCentral, 0].Range.Start, contadorFilas.ToString());
                                            document.InsertText(tablaCondCentral[contadorCentral, 1].Range.Start, central.EVECONDPRCENTRALDE == null ? "" : central.EVECONDPRCENTRALDE.TrimEnd());
                                            document.InsertText(tablaCondCentral[contadorCentral, 2].Range.Start, central.EVECONDPRCODIGOUNIDAD == null ? "" : central.EVECONDPRCODIGOUNIDAD.ToString());
                                            document.InsertText(tablaCondCentral[contadorCentral, 3].Range.Start, central.EVECONDPRPOTENCIAMW == null ? "" : central.EVECONDPRPOTENCIAMW.ToString());
                                            document.InsertText(tablaCondCentral[contadorCentral, 4].Range.Start, central.EVECONDPRPOTENCIAMVAR == null ? "" : central.EVECONDPRPOTENCIAMVAR.ToString());

                                            for (int x = 0; x <= 4; x++)
                                            {
                                                DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaCondCentral[contadorCentral, x];
                                                Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                                Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                                Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                                Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                                Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                                Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                                DocumentRange RangeCeli0 = Celi0.Range;
                                                CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                                CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                                CharacterPropertiesRangeCeli0.FontSize = 11;
                                                CharacterPropertiesRangeCeli0.Bold = false;
                                                document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                                ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaCondCentral[contadorCentral, x].Range);
                                                ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                                ParagraphPropertiesCeli0.SpacingAfter = 0;
                                                ParagraphPropertiesCeli0.SpacingBefore = 0;
                                                document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                            }
                                            contadorCentral++;
                                        }
                                        contadorFilas++;
                                    }
                                    else
                                    {
                                        var central = grupoCentral.FirstOrDefault();
                                        document.InsertText(tablaCondCentral[contadorCentral, 0].Range.Start, contadorFilas.ToString());
                                        document.InsertText(tablaCondCentral[contadorCentral, 1].Range.Start, central.EVECONDPRCENTRALDE == null ? "" : central.EVECONDPRCENTRALDE.TrimEnd());
                                        document.InsertText(tablaCondCentral[contadorCentral, 2].Range.Start, central.EVECONDPRCODIGOUNIDAD == null ? "" : central.EVECONDPRCODIGOUNIDAD.ToString());
                                        document.InsertText(tablaCondCentral[contadorCentral, 3].Range.Start, central.EVECONDPRPOTENCIAMW == null ? "" : central.EVECONDPRPOTENCIAMW.ToString());
                                        document.InsertText(tablaCondCentral[contadorCentral, 4].Range.Start, central.EVECONDPRPOTENCIAMVAR == null ? "" : central.EVECONDPRPOTENCIAMVAR.ToString());

                                        for (int x = 0; x <= 4; x++)
                                        {
                                            DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaCondCentral[contadorCentral, x];
                                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                            DocumentRange RangeCeli0 = Celi0.Range;
                                            CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                            CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                            CharacterPropertiesRangeCeli0.FontSize = 11;
                                            CharacterPropertiesRangeCeli0.Bold = false;
                                            document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                            ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaCondCentral[contadorCentral, x].Range);
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                            ParagraphPropertiesCeli0.SpacingAfter = 0;
                                            ParagraphPropertiesCeli0.SpacingBefore = 0;
                                            document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                        }

                                        contadorCentral++;
                                        contadorFilas++;
                                    }
                                }

                                #endregion

                                int PosSubtitCentral = document.Paragraphs.ToList().Count();

                                document.AppendText("F/S: Fuera de servicio por operación.");
                                ParagraphProperties ParagraphPropertiesSubtitCentral7 = document.BeginUpdateParagraphs(document.Paragraphs[PosSubtitCentral - 1].Range);
                                ParagraphPropertiesSubtitCentral7.Style = Estilo10;
                                document.EndUpdateParagraphs(ParagraphPropertiesSubtitCentral7);
                                CharacterProperties CharacterPropertiesSubtitCentral7 = document.BeginUpdateCharacters(document.Paragraphs[PosSubtitCentral - 1].Range);
                                CharacterPropertiesSubtitCentral7.Style = Estilo7;

                                int posDetFinTablaCentralSeccion7 = document.Paragraphs.ToList().Count();
                                _Parrafo2.RangeFinParrafo = posDetFinTablaCentralSeccion7;
                                ListaParrafos.Add(_Parrafo2);
                            }

                            if (obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaLinea != null)
                            {
                                int posDetIniLineaSeccion7 = document.Paragraphs.ToList().Count();

                                DocumentPosition PosDetSec7Linea = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet7Linea = document.Paragraphs.Insert(PosDetSec7Linea);
                                document.InsertText(PosDetSec7Linea, "Flujo de potencia por las principales líneas de la zona:");
                                document.Paragraphs[posDetIniLineaSeccion7].Style = Estilo5;
                                CharacterProperties CharacterPropertiesDetIniLineaSeccion7 = document.BeginUpdateCharacters(document.Paragraphs[posDetIniLineaSeccion7].Range);
                                CharacterPropertiesDetIniLineaSeccion7.Style = Estilo6;
                                document.EndUpdateCharacters(CharacterPropertiesDetIniLineaSeccion7);

                                int posDetIniTablaLineaSeccion7 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo3 = new ParrafoDTO();
                                _Parrafo3.NroParrafo = posDetIniTablaLineaSeccion7;
                                _Parrafo3.RangeIniParrafo = posDetIniTablaLineaSeccion7;

                                int rowsLinea = obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count + 1;
                                DocumentPosition PostablaLinea = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaLinea = document.Tables.Create(PostablaLinea, rowsLinea, 5);
                                tablaLinea.BeginUpdate();

                                #region Configuracion Tabla

                                tablaLinea.Style = EstiloTabla1;
                                tablaLinea.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaLinea.VerticalAlignment = TableVerticalAlignment.None;
                                tablaLinea.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaLinea.TextWrappingType = TableTextWrappingType.Around;
                                tablaLinea.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaLinea.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaLinea.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaLinea.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaLinea.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaLinea.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaLinea[0, 2].Split(2, 2);
                                tablaLinea[0, 4].Split(1, 2);

                                tablaLinea.MergeCells(tablaLinea[0, 0], tablaLinea[1, 0]);
                                tablaLinea.MergeCells(tablaLinea[0, 1], tablaLinea[1, 1]);
                                tablaLinea.MergeCells(tablaLinea[0, 2], tablaLinea[0, 3]);
                                tablaLinea.MergeCells(tablaLinea[0, 4], tablaLinea[1, 4]);

                                tablaLinea.PreferredWidthType = WidthType.Fixed;
                                tablaLinea.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaLinea[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)1);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaLinea[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaLinea[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaLinea[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaLinea[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaLinea[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaLinea[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)7);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaLinea[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaLinea[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaLinea[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaLinea[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaLinea[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaLinea[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaLinea[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaLinea[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel10 = tablaLinea[1, 0];
                                Cel10.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel11 = tablaLinea[1, 1];
                                Cel11.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel12 = tablaLinea[1, 2];
                                Cel12.PreferredWidthType = WidthType.Fixed;
                                Cel12.PreferredWidth = Units.CentimetersToDocumentsF((float)3.5);
                                Cel12.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel12.BackgroundColor = Color.LightGray;
                                Cel12.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel12.TopPadding = 0;
                                Cel12.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel12 = document.BeginUpdateParagraphs(tablaLinea[1, 2].Range);
                                ParagraphPropertiesCel12.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel12.SpacingAfter = 0;
                                ParagraphPropertiesCel12.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel12);
                                CharacterProperties CharacterPropertiesCel12 = document.BeginUpdateCharacters(tablaLinea[1, 2].Range);
                                CharacterPropertiesCel12.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel12);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel13 = tablaLinea[1, 3];
                                Cel13.PreferredWidthType = WidthType.Fixed;
                                Cel13.PreferredWidth = Units.CentimetersToDocumentsF((float)3.5);
                                Cel13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.BackgroundColor = Color.LightGray;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.TopPadding = 0;
                                Cel13.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel13 = document.BeginUpdateParagraphs(tablaLinea[1, 3].Range);
                                ParagraphPropertiesCel13.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel13.SpacingAfter = 0;
                                ParagraphPropertiesCel13.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel13);
                                CharacterProperties CharacterPropertiesCel13 = document.BeginUpdateCharacters(tablaLinea[1, 3].Range);
                                CharacterPropertiesCel13.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel13);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel14 = tablaLinea[1, 4];
                                Cel14.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel15 = tablaLinea[1, 5];
                                Cel15.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                tablaLinea.Rows[0].RepeatAsHeaderRow = true;
                                tablaLinea.Rows[1].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaLinea[0, 0].Range.Start, "N°");
                                document.InsertText(tablaLinea[0, 1].Range.Start, "Código");
                                document.InsertText(tablaLinea[0, 2].Range.Start, "Subestaciones");
                                document.InsertText(tablaLinea[1, 2].Range.Start, "De");
                                document.InsertText(tablaLinea[1, 3].Range.Start, "A");
                                document.InsertText(tablaLinea[0, 3].Range.Start, "Potencia Activa (MW)");
                                document.InsertText(tablaLinea[0, 4].Range.Start, "Potencia Reactiva (MVAr)");


                                int contadorLinea = 2;

                                for (int x = 0; x < obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count; x++)
                                {
                                    tablaLinea[contadorLinea, 2].Split(1, 2);
                                    document.InsertText(tablaLinea[contadorLinea, 0].Range.Start, (x + 1).ToString());
                                    document.InsertText(tablaLinea[contadorLinea, 1].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCODIGOUNIDAD == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCODIGOUNIDAD);
                                    document.InsertText(tablaLinea[contadorLinea, 2].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCENTRALDE == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCENTRALDE.TrimEnd());
                                    document.InsertText(tablaLinea[contadorLinea, 3].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRSUBESTACIONA == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRSUBESTACIONA.ToString());
                                    document.InsertText(tablaLinea[contadorLinea, 4].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMW == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMW.ToString());
                                    document.InsertText(tablaLinea[contadorLinea, 5].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMVAR == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMVAR.ToString());

                                    for (int y = 0; y <= 5; y++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaLinea[contadorLinea, y];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaLinea[contadorLinea, y].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                    contadorLinea++;
                                }

                                #endregion

                                int PosSubtitLinea = document.Paragraphs.ToList().Count();
                                document.AppendText("(*): Datos extraídas del SCADA COES.");
                                ParagraphProperties ParagraphPropertiesSubTitLinea7 = document.BeginUpdateParagraphs(document.Paragraphs[PosSubtitLinea - 1].Range);
                                ParagraphPropertiesSubTitLinea7.Style = Estilo10;
                                document.EndUpdateParagraphs(ParagraphPropertiesSubTitLinea7);
                                CharacterProperties CharacterPropertiesSubTitLinea7 = document.BeginUpdateCharacters(document.Paragraphs[PosSubtitLinea - 1].Range);
                                CharacterPropertiesSubTitLinea7.Style = Estilo7;

                                int posDetFinTablaLineaSeccion7 = document.Paragraphs.ToList().Count();
                                _Parrafo3.RangeFinParrafo = posDetFinTablaLineaSeccion7;
                                ListaParrafos.Add(_Parrafo3);
                            }

                            if (obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaTransformadores != null)
                            {
                                int posDetIniTransformadorSeccion7 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetSec7Transformador = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet7Transformador = document.Paragraphs.Insert(PosDetSec7Transformador);
                                document.InsertText(PosDetSec7Transformador, "Flujo de potencia por los transformadores de potencia de la zona:");
                                document.Paragraphs[posDetIniTransformadorSeccion7].Style = Estilo5;
                                CharacterProperties CharacterPropertiesDetSec7Transformador = document.BeginUpdateCharacters(document.Paragraphs[posDetIniTransformadorSeccion7].Range);
                                CharacterPropertiesDetSec7Transformador.Style = Estilo6;
                                document.EndUpdateCharacters(CharacterPropertiesDetSec7Transformador);

                                int posDetIniTablaTransformadorSeccion7 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo4 = new ParrafoDTO();
                                _Parrafo4.NroParrafo = posDetIniTablaTransformadorSeccion7;
                                _Parrafo4.RangeIniParrafo = posDetIniTablaTransformadorSeccion7;

                                var rowsTransformador = obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count + 1;
                                DocumentPosition PostablaTransformador = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaTransformador = document.Tables.Create(PostablaTransformador, rowsTransformador, 6);
                                tablaTransformador.BeginUpdate();

                                #region Configuracion Tabla

                                tablaTransformador.Style = EstiloTabla1;
                                tablaTransformador.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaTransformador.VerticalAlignment = TableVerticalAlignment.None;
                                tablaTransformador.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaTransformador.TextWrappingType = TableTextWrappingType.Around;
                                tablaTransformador.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaTransformador.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaTransformador.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaTransformador.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaTransformador.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaTransformador.MarginRight = Units.CentimetersToDocumentsF((float)0.25);
                                tablaTransformador.PreferredWidthType = WidthType.Fixed;
                                tablaTransformador.PreferredWidth = Units.CentimetersToDocumentsF((float)14.45);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaTransformador[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)0.9);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaTransformador[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaTransformador[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaTransformador[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2.29);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaTransformador[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaTransformador[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaTransformador[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)3.06);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaTransformador[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaTransformador[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaTransformador[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)3.06);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaTransformador[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaTransformador[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaTransformador[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)2.69);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaTransformador[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaTransformador[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaTransformador[0, 5];
                                Cel05.PreferredWidthType = WidthType.Fixed;
                                Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)2.21);
                                Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel05.BackgroundColor = Color.LightGray;
                                Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel05.TopPadding = 0;
                                Cel05.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaTransformador[0, 5].Range);
                                ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel05.SpacingAfter = 0;
                                ParagraphPropertiesCel05.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                                CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaTransformador[0, 5].Range);
                                CharacterPropertiesCel05.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel05);

                                tablaTransformador.Rows[0].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaTransformador[0, 0].Range.Start, "N°");
                                document.InsertText(tablaTransformador[0, 1].Range.Start, "Código");
                                document.InsertText(tablaTransformador[0, 2].Range.Start, "S.E.");
                                document.InsertText(tablaTransformador[0, 3].Range.Start, "Nivel de\nTensión\n(kV)");
                                document.InsertText(tablaTransformador[0, 4].Range.Start, "Potencia Activa (MW)");
                                document.InsertText(tablaTransformador[0, 5].Range.Start, "Potencia Reactiva (MVAr)");

                                for (int x = 0; x < obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count; x++)
                                {
                                    document.InsertText(tablaTransformador[x + 1, 0].Range.Start, (x + 1).ToString());
                                    document.InsertText(tablaTransformador[x + 1, 1].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCODIGOUNIDAD == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCODIGOUNIDAD);
                                    document.InsertText(tablaTransformador[x + 1, 2].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCENTRALDE == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCENTRALDE);
                                    document.InsertText(tablaTransformador[x + 1, 3].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRTENSION == 0 ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRTENSION.ToString());
                                    document.InsertText(tablaTransformador[x + 1, 4].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMW == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMW.ToString());
                                    document.InsertText(tablaTransformador[x + 1, 5].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMVAR == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMVAR.ToString());

                                    for (int y = 0; y <= 5; y++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaTransformador[x + 1, y];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaTransformador[x + 1, y].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                }
                                #endregion

                                int PosSubtitTransformador = document.Paragraphs.ToList().Count();
                                document.AppendText("(*): Datos extraídas del SCADA COES.");
                                ParagraphProperties ParagraphPropertiesSubtitTransformador = document.BeginUpdateParagraphs(document.Paragraphs[PosSubtitTransformador - 1].Range);
                                ParagraphPropertiesSubtitTransformador.Style = Estilo10;
                                document.EndUpdateParagraphs(ParagraphPropertiesSubtitTransformador);
                                CharacterProperties CharacterPropertiesSubtitTransformador = document.BeginUpdateCharacters(document.Paragraphs[PosSubtitTransformador - 1].Range);
                                CharacterPropertiesSubtitTransformador.Style = Estilo7;

                                int posDetFinTablaTransformadorSeccion7 = document.Paragraphs.ToList().Count();
                                _Parrafo4.RangeFinParrafo = posDetFinTablaTransformadorSeccion7;
                                ListaParrafos.Add(_Parrafo4);
                                

                            }
                        }
                    }
                }

                int posDetFinSeccion7 = document.Paragraphs.ToList().Count();

                #endregion

                #region Sección8: Secuencia de Eventos

                int posRangoSec8 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec8 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec8 = document.Paragraphs.Insert(PosSec8);
                document.InsertText(PosSec8, "SECUENCIA DE EVENTOS");

                int RangoIniSec8 = document.Paragraphs[posRangoSec8].Range.Start.ToInt();
                int RangoFinSec8 = 20;
                DocumentRange FormatoRangoSec8 = document.CreateRange(RangoIniSec8, RangoFinSec8);
                CharacterProperties CarPropRangoSec8 = document.BeginUpdateCharacters(FormatoRangoSec8);
                CarPropRangoSec8.Style = Estilo11;
                document.EndUpdateCharacters(CarPropRangoSec8);

                int posDetSeccion8 = document.Paragraphs.ToList().Count();
                DocumentPosition PosDetSec8 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet8 = document.Paragraphs.Insert(PosDetSec8);
                document.InsertText(PosDetSec8, "Se muestran detalladamente en el Anexo 1.");
                document.Paragraphs[posDetSeccion8].Style = Estilo5;
                CharacterProperties CarPropRangoDetSeccion8 = document.BeginUpdateCharacters(document.Paragraphs[posDetSeccion8].Range);
                CarPropRangoDetSeccion8.Style = Estilo6;
                document.EndUpdateCharacters(CarPropRangoDetSeccion8);

                ParrafoDTO _Parrafo5 = new ParrafoDTO();
                _Parrafo5.NroParrafo = posDetSeccion8;
                _Parrafo5.RangeIniParrafo = posDetSeccion8;
                _Parrafo5.RangeFinParrafo = posDetSeccion8;
                ListaParrafos.Add(_Parrafo5);

                #endregion

                #region Sección9: Señalización de Protecciones

                int posRangoSec9 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec9 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec9 = document.Paragraphs.Insert(PosSec9);
                document.InsertText(PosSec9, "SEÑALIZACIÓN DE LAS PROTECCIONES");

                int RangoIniSec9 = document.Paragraphs[posRangoSec9].Range.Start.ToInt();
                int RangoFinSec9 = 32;
                DocumentRange FormatoRangoSec9 = document.CreateRange(RangoIniSec9, RangoFinSec9);
                CharacterProperties CarPropRangoSec9 = document.BeginUpdateCharacters(FormatoRangoSec9);
                CarPropRangoSec9.Style = Estilo11;
                document.EndUpdateCharacters(CarPropRangoSec9);

                if (obj.ListaEventosSco != null)
                {
                    int posIniParSeccion9 = document.Paragraphs.ToList().Count();
                    ParrafoDTO _Parrafo6 = new ParrafoDTO();
                    _Parrafo6.NroParrafo = posIniParSeccion9;
                    _Parrafo6.RangeIniParrafo = posIniParSeccion9;

                    if (obj.ListaSenializacionProteccionInforme != null && obj.ListaSenializacionProteccionInforme.Any())
                    {
                        foreach (var eventoSCO in obj.ListaEventosSco)
                        {
                            var listaSenializacionPorEvento = obj.ListaSenializacionProteccionInforme.Where(x => x.CodigoEvento == eventoSCO.EVENCODI.Value).ToList();

                            if (obj.ListaEventosSco.Count > 1)
                            {
                                int posCabSeccion9 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosCabSec9Evento = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab9Evento = document.Paragraphs.Insert(PosCabSec9Evento);
                                document.InsertText(PosCabSec9Evento, $"Evento del {eventoSCO.EVENINI.Value.ToString("dd.MM.yyyy")} a las {eventoSCO.EVENINI.Value.ToString("HH:mm:ss")} h:");
                                document.Paragraphs[posCabSeccion9].Style = Estilo13;
                                CharacterProperties CharacterPropertiesCabSec9Evento = document.BeginUpdateCharacters(document.Paragraphs[posCabSeccion9].Range);
                                CharacterPropertiesCabSec9Evento.Style = Estilo11;
                                document.EndUpdateCharacters(CharacterPropertiesCabSec9Evento);
                            }

                            if (listaSenializacionPorEvento.Count > 0)
                            {
                                int rowsSenializacion = listaSenializacionPorEvento.Count + 1;
                                DocumentPosition PostablaSenializacion = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaSenializacion = document.Tables.Create(PostablaSenializacion, rowsSenializacion, 6);
                                tablaSenializacion.BeginUpdate();

                                #region Configurar Tabla

                                tablaSenializacion.Style = EstiloTabla1;
                                tablaSenializacion.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaSenializacion.VerticalAlignment = TableVerticalAlignment.None;
                                tablaSenializacion.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaSenializacion.TextWrappingType = TableTextWrappingType.Around;
                                tablaSenializacion.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaSenializacion.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaSenializacion.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaSenializacion.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaSenializacion.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaSenializacion.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaSenializacion.PreferredWidthType = WidthType.Fixed;
                                tablaSenializacion.PreferredWidth = Units.CentimetersToDocumentsF((float)14.75);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSenializacion[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)3.25);
                                Cel00.HeightType = HeightType.Exact;
                                Cel00.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSenializacion[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaSenializacion[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                CharacterPropertiesCel00.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSenializacion[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                                Cel01.HeightType = HeightType.Exact;
                                Cel01.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSenializacion[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaSenializacion[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                CharacterPropertiesCel01.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSenializacion[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.25);
                                Cel02.HeightType = HeightType.Exact;
                                Cel02.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSenializacion[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaSenializacion[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                CharacterPropertiesCel02.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSenializacion[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)3.5);
                                Cel03.HeightType = HeightType.Exact;
                                Cel03.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSenializacion[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaSenializacion[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                CharacterPropertiesCel03.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaSenializacion[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                                Cel04.HeightType = HeightType.Exact;
                                Cel04.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaSenializacion[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaSenializacion[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                CharacterPropertiesCel04.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaSenializacion[0, 5];
                                Cel05.PreferredWidthType = WidthType.Fixed;
                                Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                                Cel05.HeightType = HeightType.Exact;
                                Cel05.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel05.BackgroundColor = Color.LightGray;
                                Cel05.TopPadding = 0;
                                Cel05.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaSenializacion[0, 5].Range);
                                ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel05.SpacingAfter = 0;
                                ParagraphPropertiesCel05.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                                CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaSenializacion[0, 5].Range);
                                CharacterPropertiesCel05.Bold = true;
                                CharacterPropertiesCel05.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel05);

                                tablaSenializacion.Rows[0].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaSenializacion[0, 0].Range.Start, "Subestación");
                                document.InsertText(tablaSenializacion[0, 1].Range.Start, "Equipo");
                                document.InsertText(tablaSenializacion[0, 2].Range.Start, "Código");
                                document.InsertText(tablaSenializacion[0, 3].Range.Start, "Señalizaciones");
                                document.InsertText(tablaSenializacion[0, 4].Range.Start, "Interruptor");
                                document.InsertText(tablaSenializacion[0, 5].Range.Start, "A/C");

                                for (int i = 0; i < listaSenializacionPorEvento.Count; i++)
                                {
                                    document.InsertText(tablaSenializacion[i + 1, 0].Range.Start, listaSenializacionPorEvento[i].SubEstacion ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 1].Range.Start, listaSenializacionPorEvento[i].Equipo ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 2].Range.Start, listaSenializacionPorEvento[i].Codigo ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 3].Range.Start, listaSenializacionPorEvento[i].Senializaciones ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 4].Range.Start, listaSenializacionPorEvento[i].Interruptor ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 5].Range.Start, listaSenializacionPorEvento[i].CodigoAC ?? string.Empty);

                                    for (int x = 0; x <= 5; x++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSenializacion[i + 1, x];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSenializacion[i + 1, x].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }
                                }

                                #endregion

                                int PosSubtitSenializacion = document.Paragraphs.ToList().Count();
                                document.AppendText("A/C: Abierto o cerrado");
                                ParagraphProperties ParagraphPropertiesSubtitSenializacion = document.BeginUpdateParagraphs(document.Paragraphs[PosSubtitSenializacion - 1].Range);
                                ParagraphPropertiesSubtitSenializacion.Style = Estilo10;
                                document.EndUpdateParagraphs(ParagraphPropertiesSubtitSenializacion);
                                CharacterProperties CarPropRangoSubTitSenializacion = document.BeginUpdateCharacters(document.Paragraphs[PosSubtitSenializacion - 1].Range);
                                CarPropRangoSubTitSenializacion.Style = Estilo7;
                                document.EndUpdateCharacters(CarPropRangoSubTitSenializacion);
                            }
                            else
                            {
                                int DetSenializacion1 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetSenializacion1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosDetSenializacion1);
                                document.InsertText(PosDetSenializacion1, "No se reportaron.");
                                CharacterProperties CarDetSenializacion1 = document.BeginUpdateCharacters(document.Paragraphs[DetSenializacion1].Range);
                                CarDetSenializacion1.Style = Estilo14;
                                document.EndUpdateCharacters(CarDetSenializacion1);
                            }                                                  
                        }
                    }
                    else
                    {
                        int DetSenializacion2 = document.Paragraphs.ToList().Count();
                        DocumentPosition PosDetSenializacion2 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosDetSenializacion2);
                        document.InsertText(PosDetSenializacion2, "No se reportaron.");
                        CharacterProperties CarDetSenializacion2 = document.BeginUpdateCharacters(document.Paragraphs[DetSenializacion2].Range);
                        CarDetSenializacion2.Style = Estilo6;
                        document.EndUpdateCharacters(CarDetSenializacion2);
                    }

                    int posFinParSeccion9 = document.Paragraphs.ToList().Count();
                    _Parrafo6.RangeFinParrafo = posFinParSeccion9;
                    ListaParrafos.Add(_Parrafo6);
                }

                #endregion

                #region Sección10: Contador de Interruptores

                int posRangoSec10 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec10 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec10 = document.Paragraphs.Insert(PosSec10);
                document.InsertText(PosSec10, "CONTADOR DE INTERRUPTORES Y DESCARGADORES DE SOBRETENSIÓN");

                CharacterProperties CarPropRangoSec10 = document.BeginUpdateCharacters(document.Paragraphs[posRangoSec10].Range);
                CarPropRangoSec10.Style = Estilo11;
                document.EndUpdateCharacters(CarPropRangoSec10);

                List<EveintdescargaDTO> LstInterruptores = obj.lstInterruptoresDescargadores != null ? obj.lstInterruptoresDescargadores.Where(x => x.EVEINTDESTIPO == 1).ToList() : new List<EveintdescargaDTO>();
                List<EveintdescargaDTO> LstDescargadores = obj.lstInterruptoresDescargadores != null ? obj.lstInterruptoresDescargadores.Where(x => x.EVEINTDESTIPO == 2).ToList() : new List<EveintdescargaDTO>();
                int posIniParLevel4Sec10_1 = 0, posFinParLevel4Sec10_1 = 0, posIniParLevel4Sec10Desc_1 = 0;
                if (LstInterruptores.Count == 0 && LstDescargadores.Count == 0)
                {
                    int posParNoreportanSeccion10 = document.Paragraphs.ToList().Count();
                    ParrafoDTO _Parrafo7 = new ParrafoDTO();
                    _Parrafo7.NroParrafo = posParNoreportanSeccion10;
                    _Parrafo7.RangeIniParrafo = posParNoreportanSeccion10;
                    _Parrafo7.RangeFinParrafo = posParNoreportanSeccion10;
                    ListaParrafos.Add(_Parrafo7);

                    DocumentPosition PosDetSenializacion1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosDetSenializacion1);
                    document.InsertText(PosDetSenializacion1, "No se reportaron.");
                    CharacterProperties CarDetSenializacion1 = document.BeginUpdateCharacters(document.Paragraphs[posParNoreportanSeccion10].Range);
                    CarDetSenializacion1.Style = Estilo14;
                    document.EndUpdateCharacters(CarDetSenializacion1);
                }
                else
                {
                    posIniParLevel4Sec10_1 = document.Paragraphs.ToList().Count();
                    DocumentPosition PosSec10_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec10_1 = document.Paragraphs.Insert(PosSec10_1);
                    document.InsertText(PosSec10_1, "CONTADOR DE INTERRUPTORES\n");
                    CharacterProperties CarPropRangoSec10_1 = document.BeginUpdateCharacters(document.Paragraphs[posIniParLevel4Sec10_1].Range);
                    CarPropRangoSec10_1.Style = Estilo16;
                    document.EndUpdateCharacters(CarPropRangoSec10);

                    if (LstInterruptores.Count == 0)
                    {
                        int posParNoreportanSeccion10_1 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo8 = new ParrafoDTO();
                        _Parrafo8.NroParrafo = posParNoreportanSeccion10_1;
                        _Parrafo8.RangeIniParrafo = posParNoreportanSeccion10_1;
                        _Parrafo8.RangeFinParrafo = posParNoreportanSeccion10_1;
                        ListaParrafos.Add(_Parrafo8);

                        DocumentPosition PosNoReportanSeccion10_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParNoReportanSeccion10_1 = document.Paragraphs.Insert(PosNoReportanSeccion10_1);
                        document.InsertText(PosNoReportanSeccion10_1, "No informado.");
                        CharacterProperties CarNoReportanSeccion10_1 = document.BeginUpdateCharacters(document.Paragraphs[posParNoreportanSeccion10_1].Range);
                        CarNoReportanSeccion10_1.Style = Estilo14;
                        document.EndUpdateCharacters(CarNoReportanSeccion10_1);

                        ParrafoDTO _Parrafo8Ninf = new ParrafoDTO();
                        _Parrafo8Ninf.NroParrafo = posParNoreportanSeccion10_1 + 1;
                        _Parrafo8Ninf.RangeIniParrafo = posParNoreportanSeccion10_1 + 1;
                        _Parrafo8Ninf.RangeFinParrafo = posParNoreportanSeccion10_1 + 1;
                        ListaParrafos.Add(_Parrafo8Ninf);
                    }
                    else
                    {
                        int posParIniSeccion10_1 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo9 = new ParrafoDTO();
                        _Parrafo9.NroParrafo = posParIniSeccion10_1;
                        _Parrafo9.RangeIniParrafo = posParIniSeccion10_1;

                        foreach (var item in obj.ListaEventosSco)
                        {
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                int posCabSeccion10_1 = document.Paragraphs.ToList().Count();
                                document.AppendText($"Evento del {item.EVENINI.Value.ToString("dd.MM.yyyy")} a las {item.EVENINI.Value.ToString("HH:mm:ss")} h:");
                                document.Paragraphs[posCabSeccion10_1 - 1].Style = Estilo13;
                                CharacterProperties CharacterPropertiesCabSeccion10 = document.BeginUpdateCharacters(document.Paragraphs[posCabSeccion10_1 - 1].Range);
                                CharacterPropertiesCabSeccion10.Style = Estilo11;
                                document.EndUpdateCharacters(CharacterPropertiesCabSeccion10);

                                ParrafoDTO _Parrafo9xx = new ParrafoDTO();
                                _Parrafo9xx.NroParrafo = posCabSeccion10_1 - 1;
                                _Parrafo9xx.RangeIniParrafo = posCabSeccion10_1 - 1;
                                _Parrafo9xx.RangeFinParrafo = posCabSeccion10_1 - 1;
                                ListaParrafos.Add(_Parrafo9xx);
                            }

                            var lstInterruptoresPorEvento = LstInterruptores.Where(x => x.EVENCODI == item.EVENCODI).ToList();

                            if (lstInterruptoresPorEvento.Count == 0)
                            {
                                int IndexDetNoInformanSeccion10_1 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetNoInformanSeccion10_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParDetNoInformanSeccion10_1 = document.Paragraphs.Insert(PosDetNoInformanSeccion10_1);
                                document.InsertText(PosDetNoInformanSeccion10_1, "No Informado.");
                                CharacterProperties CarNoInformanSeccion10_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexDetNoInformanSeccion10_1].Range);
                                CarNoInformanSeccion10_1.Style = Estilo14;
                                document.EndUpdateCharacters(CarNoInformanSeccion10_1);

                                ParrafoDTO _Parrafo10_2Evento = new ParrafoDTO();
                                _Parrafo10_2Evento.NroParrafo = IndexDetNoInformanSeccion10_1;
                                _Parrafo10_2Evento.RangeIniParrafo = IndexDetNoInformanSeccion10_1;
                                _Parrafo10_2Evento.RangeFinParrafo = IndexDetNoInformanSeccion10_1;
                                ListaParrafos.Add(_Parrafo10_2Evento);
                            }
                            else
                            {
                                var rowsContador = lstInterruptoresPorEvento.Count + 1;
                                DocumentPosition PostablaContador = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaContador = document.Tables.Create(PostablaContador, rowsContador, 4);
                                tablaContador.BeginUpdate();

                                #region Configurar Tabla

                                tablaContador.Style = EstiloTabla1;
                                tablaContador.PreferredWidthType = WidthType.Fixed;
                                tablaContador.PreferredWidth = Units.CentimetersToDocumentsF((float)14.75);
                                tablaContador.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaContador.VerticalAlignment = TableVerticalAlignment.None;
                                tablaContador.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaContador.TextWrappingType = TableTextWrappingType.Around;
                                tablaContador.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaContador.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaContador.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaContador.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaContador.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaContador.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaContador[0, 3].Split(2, 6);

                                tablaContador.MergeCells(tablaContador[0, 0], tablaContador[1, 0]);
                                tablaContador.MergeCells(tablaContador[0, 1], tablaContador[1, 1]);
                                tablaContador.MergeCells(tablaContador[0, 2], tablaContador[1, 2]);
                                tablaContador.MergeCells(tablaContador[0, 3], tablaContador[0, 5]);
                                tablaContador.MergeCells(tablaContador[0, 4], tablaContador[0, 6]);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaContador[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)2.97);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaContador[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaContador[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                CharacterPropertiesCel00.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaContador[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)1.58);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaContador[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaContador[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                CharacterPropertiesCel01.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaContador[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.18);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaContador[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaContador[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                CharacterPropertiesCel02.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaContador[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)4.01);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaContador[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaContador[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                CharacterPropertiesCel03.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaContador[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)4.01);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaContador[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaContador[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                CharacterPropertiesCel04.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel10 = tablaContador[1, 0];
                                Cel10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel11 = tablaContador[1, 1];
                                Cel11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel12 = tablaContador[1, 2];
                                Cel12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel13 = tablaContador[1, 3];
                                Cel13.PreferredWidthType = WidthType.Fixed;
                                Cel13.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.BackgroundColor = Color.LightGray;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.TopPadding = 0;
                                Cel13.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel13 = document.BeginUpdateParagraphs(tablaContador[1, 3].Range);
                                ParagraphPropertiesCel13.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel13.SpacingAfter = 0;
                                ParagraphPropertiesCel13.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel13);
                                CharacterProperties CharacterPropertiesCel13 = document.BeginUpdateCharacters(tablaContador[1, 3].Range);
                                CharacterPropertiesCel13.Bold = true;
                                CharacterPropertiesCel13.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel13);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel14 = tablaContador[1, 4];
                                Cel14.PreferredWidthType = WidthType.Fixed;
                                Cel14.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel14.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.BackgroundColor = Color.LightGray;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.TopPadding = 0;
                                Cel14.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel14 = document.BeginUpdateParagraphs(tablaContador[1, 4].Range);
                                ParagraphPropertiesCel14.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel14.SpacingAfter = 0;
                                ParagraphPropertiesCel14.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel14);
                                CharacterProperties CharacterPropertiesCel14 = document.BeginUpdateCharacters(tablaContador[1, 4].Range);
                                CharacterPropertiesCel14.Bold = true;
                                CharacterPropertiesCel14.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel14);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel15 = tablaContador[1, 5];
                                Cel15.PreferredWidthType = WidthType.Fixed;
                                Cel15.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel15.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel15.BackgroundColor = Color.LightGray;
                                Cel15.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel15.TopPadding = 0;
                                Cel15.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel15 = document.BeginUpdateParagraphs(tablaContador[1, 5].Range);
                                ParagraphPropertiesCel15.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel15.SpacingAfter = 0;
                                ParagraphPropertiesCel15.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel15);
                                CharacterProperties CharacterPropertiesCel15 = document.BeginUpdateCharacters(tablaContador[1, 5].Range);
                                CharacterPropertiesCel15.Bold = true;
                                CharacterPropertiesCel15.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel15);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel16 = tablaContador[1, 6];
                                Cel16.PreferredWidthType = WidthType.Fixed;
                                Cel16.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel16.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel16.BackgroundColor = Color.LightGray;
                                Cel16.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel16.TopPadding = 0;
                                Cel16.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel16 = document.BeginUpdateParagraphs(tablaContador[1, 6].Range);
                                ParagraphPropertiesCel16.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel16.SpacingAfter = 0;
                                ParagraphPropertiesCel16.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel16);
                                CharacterProperties CharacterPropertiesCel16 = document.BeginUpdateCharacters(tablaContador[1, 6].Range);
                                CharacterPropertiesCel16.Bold = true;
                                CharacterPropertiesCel16.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel16);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel17 = tablaContador[1, 7];
                                Cel17.PreferredWidthType = WidthType.Fixed;
                                Cel17.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel17.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel17.BackgroundColor = Color.LightGray;
                                Cel17.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel17.TopPadding = 0;
                                Cel17.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel17 = document.BeginUpdateParagraphs(tablaContador[1, 7].Range);
                                ParagraphPropertiesCel17.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel17.SpacingAfter = 0;
                                ParagraphPropertiesCel17.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel17);
                                CharacterProperties CharacterPropertiesCel17 = document.BeginUpdateCharacters(tablaContador[1, 7].Range);
                                CharacterPropertiesCel17.Bold = true;
                                CharacterPropertiesCel17.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel17);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel18 = tablaContador[1, 8];
                                Cel18.PreferredWidthType = WidthType.Fixed;
                                Cel18.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel18.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel18.BackgroundColor = Color.LightGray;
                                Cel18.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel18.TopPadding = 0;
                                Cel18.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel18 = document.BeginUpdateParagraphs(tablaContador[1, 8].Range);
                                ParagraphPropertiesCel18.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel18.SpacingAfter = 0;
                                ParagraphPropertiesCel18.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel18);
                                CharacterProperties CharacterPropertiesCel18 = document.BeginUpdateCharacters(tablaContador[1, 8].Range);
                                CharacterPropertiesCel18.Bold = true;
                                CharacterPropertiesCel18.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel18);

                                tablaContador.Rows[0].RepeatAsHeaderRow = true;
                                tablaContador.Rows[1].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaContador[0, 0].Range.Start, "Subestación");
                                document.InsertText(tablaContador[0, 1].Range.Start, "Celda");
                                document.InsertText(tablaContador[0, 2].Range.Start, "Código Interruptor");
                                document.InsertText(tablaContador[0, 3].Range.Start, "Antes");
                                document.InsertText(tablaContador[0, 4].Range.Start, "Después");
                                document.InsertText(tablaContador[1, 3].Range.Start, "R");
                                document.InsertText(tablaContador[1, 4].Range.Start, "S");
                                document.InsertText(tablaContador[1, 5].Range.Start, "T");
                                document.InsertText(tablaContador[1, 6].Range.Start, "R");
                                document.InsertText(tablaContador[1, 7].Range.Start, "S");
                                document.InsertText(tablaContador[1, 8].Range.Start, "T");

                                int contador = 1;

                                for (int i = 0; i < lstInterruptoresPorEvento.Count; i++)
                                {
                                    tablaContador[contador + 1, 3].Split(1, 6);
                                    document.InsertText(tablaContador[contador + 1, 0].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESSUBESTACION);
                                    document.InsertText(tablaContador[contador + 1, 1].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESCELDA);
                                    document.InsertText(tablaContador[contador + 1, 2].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESCODIGO);
                                    document.InsertText(tablaContador[contador + 1, 3].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESR_ANTES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 4].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESS_ANTES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 5].Range.Start, lstInterruptoresPorEvento[i].EVEINTDEST_ANTES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 6].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESR_DESPUES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 7].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESS_DESPUES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 8].Range.Start, lstInterruptoresPorEvento[i].EVEINTDEST_DESPUES.ToString());

                                    for (int x = 0; x <= 8; x++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaContador[contador + 1, x];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                        Celi0.PreferredWidthType = WidthType.Fixed;
                                        Celi0.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaContador[contador + 1, x].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                    contador++;
                                }
                                #endregion
                            }
                        }

                        int posParFinSeccion10_1 = document.Paragraphs.ToList().Count();
                        _Parrafo9.RangeFinParrafo = posParFinSeccion10_1 - 1;
                        ListaParrafos.Add(_Parrafo9);
                    }

                    posIniParLevel4Sec10Desc_1 = document.Paragraphs.ToList().Count();
                    DocumentPosition PosSec10_2 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec10_2 = document.Paragraphs.Insert(PosSec10_2);
                    document.InsertText(PosSec10_2, "DESCARGADORES DE SOBRETENSIÓN\n");
                    CharacterProperties CarPropRangoSecDesc10_1 = document.BeginUpdateCharacters(document.Paragraphs[posIniParLevel4Sec10Desc_1].Range);
                    CarPropRangoSecDesc10_1.Style = Estilo16;
                    document.EndUpdateCharacters(CarPropRangoSecDesc10_1);

                    if (LstDescargadores.Count == 0)
                    {
                        int posParNoreportanSeccion10_2 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo10 = new ParrafoDTO();
                        _Parrafo10.NroParrafo = posParNoreportanSeccion10_2;
                        _Parrafo10.RangeIniParrafo = posParNoreportanSeccion10_2;
                        _Parrafo10.RangeFinParrafo = posParNoreportanSeccion10_2;
                        ListaParrafos.Add(_Parrafo10);

                        DocumentPosition PosNoReportanSeccion10_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParNoReportanSeccion10_1 = document.Paragraphs.Insert(PosNoReportanSeccion10_1);
                        document.InsertText(PosNoReportanSeccion10_1, "No Informado.");
                        CharacterProperties CarNoReportanSeccion10_1 = document.BeginUpdateCharacters(document.Paragraphs[posParNoreportanSeccion10_2].Range);
                        CarNoReportanSeccion10_1.Style = Estilo14;
                        document.EndUpdateCharacters(CarNoReportanSeccion10_1);

                        ParrafoDTO _Parrafo8Ninf = new ParrafoDTO();
                        _Parrafo8Ninf.NroParrafo = posParNoreportanSeccion10_2 + 1;
                        _Parrafo8Ninf.RangeIniParrafo = posParNoreportanSeccion10_2 + 1;
                        _Parrafo8Ninf.RangeFinParrafo = posParNoreportanSeccion10_2 + 1;
                        ListaParrafos.Add(_Parrafo8Ninf);

                    }
                    else
                    {
                        int posParIniSeccion10_2 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo11 = new ParrafoDTO();
                        _Parrafo11.NroParrafo = posParIniSeccion10_2;
                        _Parrafo11.RangeIniParrafo = posParIniSeccion10_2;

                        foreach (var item in obj.ListaEventosSco)
                        {
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                int posCabSeccion10_2 = document.Paragraphs.ToList().Count();
                                document.AppendText($"Evento del {item.EVENINI.Value.ToString("dd.MM.yyyy")} a las {item.EVENINI.Value.ToString("HH:mm:ss")} h:");
                                document.Paragraphs[posCabSeccion10_2 - 1].Style = Estilo13;
                                CharacterProperties CharacterPropertiesCabSeccion10_2 = document.BeginUpdateCharacters(document.Paragraphs[posCabSeccion10_2 - 1].Range);
                                CharacterPropertiesCabSeccion10_2.Style = Estilo11;
                                document.EndUpdateCharacters(CharacterPropertiesCabSeccion10_2);

                                ParrafoDTO _Parrafo10_2Evento = new ParrafoDTO();
                                _Parrafo10_2Evento.NroParrafo = posCabSeccion10_2 - 1;
                                _Parrafo10_2Evento.RangeIniParrafo = posCabSeccion10_2 - 1;
                                _Parrafo10_2Evento.RangeFinParrafo = posCabSeccion10_2 - 1;
                                ListaParrafos.Add(_Parrafo10_2Evento);
                            }

                            var lstDescargadoresPorEvento = LstDescargadores.Where(x => x.EVENCODI == item.EVENCODI).ToList();

                            if (lstDescargadoresPorEvento.Count == 0)
                            {
                                int IndexDetNoInformanSeccion10_2 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetNoInformanSeccion10_2 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParDetNoInformanSeccion10_2 = document.Paragraphs.Insert(PosDetNoInformanSeccion10_2);
                                document.InsertText(PosDetNoInformanSeccion10_2, "No Informado.");
                                CharacterProperties CarNoInformanSeccion10_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexDetNoInformanSeccion10_2].Range);
                                CarNoInformanSeccion10_2.Style = Estilo14;
                                document.EndUpdateCharacters(CarNoInformanSeccion10_2);

                                ParrafoDTO _Parrafo10_2Evento = new ParrafoDTO();
                                _Parrafo10_2Evento.NroParrafo = IndexDetNoInformanSeccion10_2;
                                _Parrafo10_2Evento.RangeIniParrafo = IndexDetNoInformanSeccion10_2;
                                _Parrafo10_2Evento.RangeFinParrafo = IndexDetNoInformanSeccion10_2;
                                ListaParrafos.Add(_Parrafo10_2Evento);
                            }
                            else
                            {
                                var rowsDescargador = lstDescargadoresPorEvento.Count + 1;
                                DocumentPosition PostablaDescargador = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaDescargador = document.Tables.Create(PostablaDescargador, rowsDescargador, 4);
                                tablaDescargador.BeginUpdate();

                                #region Configurar Tabla

                                tablaDescargador.Style = EstiloTabla1;
                                tablaDescargador.PreferredWidthType = WidthType.Fixed;
                                tablaDescargador.PreferredWidth = Units.CentimetersToDocumentsF((float)14.75);
                                tablaDescargador.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaDescargador.VerticalAlignment = TableVerticalAlignment.None;
                                tablaDescargador.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaDescargador.TextWrappingType = TableTextWrappingType.Around;
                                tablaDescargador.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaDescargador.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaDescargador.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaDescargador.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaDescargador.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaDescargador.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaDescargador[0, 3].Split(2, 6);

                                tablaDescargador.MergeCells(tablaDescargador[0, 0], tablaDescargador[1, 0]);
                                tablaDescargador.MergeCells(tablaDescargador[0, 1], tablaDescargador[1, 1]);
                                tablaDescargador.MergeCells(tablaDescargador[0, 2], tablaDescargador[1, 2]);
                                tablaDescargador.MergeCells(tablaDescargador[0, 3], tablaDescargador[0, 5]);
                                tablaDescargador.MergeCells(tablaDescargador[0, 4], tablaDescargador[0, 6]);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaDescargador[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)2.97);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaDescargador[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaDescargador[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                CharacterPropertiesCel00.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaDescargador[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)1.58);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaDescargador[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaDescargador[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                CharacterPropertiesCel01.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaDescargador[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.18);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaDescargador[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaDescargador[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                CharacterPropertiesCel02.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaDescargador[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)4.01);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaDescargador[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaDescargador[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                CharacterPropertiesCel03.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaDescargador[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)4.01);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaDescargador[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaDescargador[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                CharacterPropertiesCel04.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel10 = tablaDescargador[1, 0];
                                Cel10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel11 = tablaDescargador[1, 1];
                                Cel11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel12 = tablaDescargador[1, 2];
                                Cel12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel13 = tablaDescargador[1, 3];
                                Cel13.PreferredWidthType = WidthType.Fixed;
                                Cel13.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.BackgroundColor = Color.LightGray;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.TopPadding = 0;
                                Cel13.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel13 = document.BeginUpdateParagraphs(tablaDescargador[1, 3].Range);
                                ParagraphPropertiesCel13.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel13.SpacingAfter = 0;
                                ParagraphPropertiesCel13.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel13);
                                CharacterProperties CharacterPropertiesCel13 = document.BeginUpdateCharacters(tablaDescargador[1, 3].Range);
                                CharacterPropertiesCel13.Bold = true;
                                CharacterPropertiesCel13.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel13);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel14 = tablaDescargador[1, 4];
                                Cel14.PreferredWidthType = WidthType.Fixed;
                                Cel14.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel14.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.BackgroundColor = Color.LightGray;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.TopPadding = 0;
                                Cel14.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel14 = document.BeginUpdateParagraphs(tablaDescargador[1, 4].Range);
                                ParagraphPropertiesCel14.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel14.SpacingAfter = 0;
                                ParagraphPropertiesCel14.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel14);
                                CharacterProperties CharacterPropertiesCel14 = document.BeginUpdateCharacters(tablaDescargador[1, 4].Range);
                                CharacterPropertiesCel14.Bold = true;
                                CharacterPropertiesCel14.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel14);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel15 = tablaDescargador[1, 5];
                                Cel15.PreferredWidthType = WidthType.Fixed;
                                Cel15.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel15.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel15.BackgroundColor = Color.LightGray;
                                Cel15.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel15.TopPadding = 0;
                                Cel15.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel15 = document.BeginUpdateParagraphs(tablaDescargador[1, 5].Range);
                                ParagraphPropertiesCel15.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel15.SpacingAfter = 0;
                                ParagraphPropertiesCel15.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel15);
                                CharacterProperties CharacterPropertiesCel15 = document.BeginUpdateCharacters(tablaDescargador[1, 5].Range);
                                CharacterPropertiesCel15.Bold = true;
                                CharacterPropertiesCel15.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel15);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel16 = tablaDescargador[1, 6];
                                Cel16.PreferredWidthType = WidthType.Fixed;
                                Cel16.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel16.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel16.BackgroundColor = Color.LightGray;
                                Cel16.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel16.TopPadding = 0;
                                Cel16.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel16 = document.BeginUpdateParagraphs(tablaDescargador[1, 6].Range);
                                ParagraphPropertiesCel16.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel16.SpacingAfter = 0;
                                ParagraphPropertiesCel16.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel16);
                                CharacterProperties CharacterPropertiesCel16 = document.BeginUpdateCharacters(tablaDescargador[1, 6].Range);
                                CharacterPropertiesCel16.Bold = true;
                                CharacterPropertiesCel16.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel16);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel17 = tablaDescargador[1, 7];
                                Cel17.PreferredWidthType = WidthType.Fixed;
                                Cel17.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel17.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel17.BackgroundColor = Color.LightGray;
                                Cel17.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel17.TopPadding = 0;
                                Cel17.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel17 = document.BeginUpdateParagraphs(tablaDescargador[1, 7].Range);
                                ParagraphPropertiesCel17.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel17.SpacingAfter = 0;
                                ParagraphPropertiesCel17.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel17);
                                CharacterProperties CharacterPropertiesCel17 = document.BeginUpdateCharacters(tablaDescargador[1, 7].Range);
                                CharacterPropertiesCel17.Bold = true;
                                CharacterPropertiesCel17.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel17);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel18 = tablaDescargador[1, 8];
                                Cel18.PreferredWidthType = WidthType.Fixed;
                                Cel18.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel18.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel18.BackgroundColor = Color.LightGray;
                                Cel18.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel18.TopPadding = 0;
                                Cel18.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel18 = document.BeginUpdateParagraphs(tablaDescargador[1, 8].Range);
                                ParagraphPropertiesCel18.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel18.SpacingAfter = 0;
                                ParagraphPropertiesCel18.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel18);
                                CharacterProperties CharacterPropertiesCel18 = document.BeginUpdateCharacters(tablaDescargador[1, 8].Range);
                                CharacterPropertiesCel18.Bold = true;
                                CharacterPropertiesCel18.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel18);

                                tablaDescargador.Rows[0].RepeatAsHeaderRow = true;
                                tablaDescargador.Rows[1].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaDescargador[0, 0].Range.Start, "Subestación");
                                document.InsertText(tablaDescargador[0, 1].Range.Start, "Celda");
                                document.InsertText(tablaDescargador[0, 2].Range.Start, "Código Pararrayo");
                                document.InsertText(tablaDescargador[0, 3].Range.Start, "Antes");
                                document.InsertText(tablaDescargador[0, 4].Range.Start, "Después");
                                document.InsertText(tablaDescargador[1, 3].Range.Start, "R");
                                document.InsertText(tablaDescargador[1, 4].Range.Start, "S");
                                document.InsertText(tablaDescargador[1, 5].Range.Start, "T");
                                document.InsertText(tablaDescargador[1, 6].Range.Start, "R");
                                document.InsertText(tablaDescargador[1, 7].Range.Start, "S");
                                document.InsertText(tablaDescargador[1, 8].Range.Start, "T");

                                int contadorDescarga = 1;
                                for (int i = 0; i < lstDescargadoresPorEvento.Count; i++)
                                {
                                    tablaDescargador[contadorDescarga + 1, 3].Split(1, 6);
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 0].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESSUBESTACION);
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 1].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESCELDA);
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 2].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESCODIGO);
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 3].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESR_ANTES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 4].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESS_ANTES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 5].Range.Start, lstDescargadoresPorEvento[i].EVEINTDEST_ANTES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 6].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESR_DESPUES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 7].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESS_DESPUES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 8].Range.Start, lstDescargadoresPorEvento[i].EVEINTDEST_DESPUES.ToString());

                                    for (int x = 0; x <= 8; x++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaDescargador[contadorDescarga + 1, x];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaDescargador[contadorDescarga + 1, x].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                    contadorDescarga++;
                                }

                                #endregion
                            }
                        }

                        int posParFinSeccion10_2 = document.Paragraphs.ToList().Count();
                        _Parrafo11.RangeFinParrafo = posParFinSeccion10_2 - 1;
                        ListaParrafos.Add(_Parrafo11);
                    }

                    posFinParLevel4Sec10_1 = document.Paragraphs.ToList().Count();
                }



                #endregion

                #region Sección11: Análisis de Eventos

                int posRangoSec11 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec11 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec11 = document.Paragraphs.Insert(PosSec11);
                document.InsertText(PosSec11, "ANÁLISIS DEL EVENTO");
                CharacterProperties CarPropRangoSec11 = document.BeginUpdateCharacters(document.Paragraphs[posRangoSec11].Range);
                CarPropRangoSec11.Style = Estilo16;
                document.EndUpdateCharacters(CarPropRangoSec11);

                int IndexIniSeccion11_1 = document.Paragraphs.ToList().Count();
                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    int contadorFigurasAnalisisEvento = 1;
                    
                    for (int r = 0; r < obj.ListaInformeCtaf.Count; r++)
                    {
                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            int IndexCabSeccion11 = document.Paragraphs.ToList().Count();
                            ParrafoDTO _Parrafo11 = new ParrafoDTO();
                            _Parrafo11.NroParrafo = IndexCabSeccion11;
                            _Parrafo11.RangeIniParrafo = IndexCabSeccion11;

                            DocumentPosition PosCabSeccion11 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParCabSeccion11 = document.Paragraphs.Insert(PosCabSeccion11);
                            document.InsertText(PosCabSeccion11, obj.ListaInformeCtaf[r].CabNombreEvento);
                            document.Paragraphs[IndexCabSeccion11].Style = Estilo25;

                            CharacterProperties CarCabSeccion11 = document.BeginUpdateCharacters(document.Paragraphs[IndexCabSeccion11].Range);
                            CarCabSeccion11.Style = Estilo15;
                            document.EndUpdateCharacters(CarCabSeccion11);

                            int IndexCab2Seccion11 = document.Paragraphs.ToList().Count();
                            _Parrafo11.RangeFinParrafo = IndexCab2Seccion11;
                            ListaParrafos.Add(_Parrafo11);
                        }

                        if (!obj.ListaInformeCtaf[r].listaAnalisisEvento.Any())
                        {
                            int IndexNoRepSeccion11 = document.Paragraphs.ToList().Count();
                            ParrafoDTO _Parrafo11_1 = new ParrafoDTO();
                            _Parrafo11_1.NroParrafo = IndexNoRepSeccion11;
                            _Parrafo11_1.RangeIniParrafo = IndexNoRepSeccion11;

                            DocumentPosition PosNoRepSeccion11 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosNoRepSeccion11);
                            document.InsertText(PosNoRepSeccion11, "No existen registros.");
                            CharacterProperties CarNoRepSeccion11 = document.BeginUpdateCharacters(document.Paragraphs[IndexNoRepSeccion11].Range);
                            CarNoRepSeccion11.Style = Estilo14;
                            document.EndUpdateCharacters(CarNoRepSeccion11);

                            int IndexCab2Seccion11_1 = document.Paragraphs.ToList().Count();
                            _Parrafo11_1.RangeFinParrafo = IndexCab2Seccion11_1;
                            ListaParrafos.Add(_Parrafo11_1);

                        }
                        else
                        {
                            var listaSinTipoDOs = obj.ListaInformeCtaf[r].listaAnalisisEvento.Where(x => x.EVENUMCODI != 2).ToList();
                            var listaConTipoDos = obj.ListaInformeCtaf[r].listaAnalisisEvento.Where(x => x.EVENUMCODI == 2).ToList();
                            var grupoListasPorTipoNumera = listaSinTipoDOs.GroupBy(x => x.EVETIPNUMDESCRIPCION);

                            foreach (var grupo in grupoListasPorTipoNumera)
                            {
                                int IndexIniCabSeccion11_1 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo11_1 = new ParrafoDTO();
                                _Parrafo11_1.NroParrafo = IndexIniCabSeccion11_1;
                                _Parrafo11_1.RangeIniParrafo = IndexIniCabSeccion11_1;

                                DocumentPosition PosCabSeccion11_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosCabSeccion11_1);
                                document.InsertText(PosCabSeccion11_1, grupo.Key);
                                document.Paragraphs[IndexIniCabSeccion11_1].Style = Estilo23;
                                CharacterProperties CarCabSeccion11_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniCabSeccion11_1].Range);
                                CarCabSeccion11_1.Style = Estilo16;
                                document.EndUpdateCharacters(CarCabSeccion11_1);

                                int IndexFinCabSeccion11_1 = document.Paragraphs.ToList().Count();
                                _Parrafo11_1.RangeFinParrafo = IndexFinCabSeccion11_1;
                                ListaParrafos.Add(_Parrafo11_1);

                                foreach (var listasPorTipoNumera in grupo)
                                {
                                    if (listasPorTipoNumera.EVEANAEVERUTAFIGURA != null)
                                    {
                                        int IndexDetSeccion11 = document.Paragraphs.ToList().Count();
                                        DocumentPosition PosDetSeccion11 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosDetSeccion11);
                                        document.InsertText(PosDetSeccion11, listasPorTipoNumera.EVEANAEVEDESCNUMERAL + "\n");
                                        document.Paragraphs[IndexDetSeccion11].Style = Estilo26;
                                        ParagraphProperties paragraphPropertiesEveDes = document.BeginUpdateParagraphs(document.Paragraphs[IndexDetSeccion11].Range);
                                        paragraphPropertiesEveDes.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                        paragraphPropertiesEveDes.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                                        paragraphPropertiesEveDes.LeftIndent = 118;
                                        document.EndUpdateParagraphs(paragraphPropertiesEveDes);

                                        CharacterProperties CharacterPropertiesDetSeccion11 = document.BeginUpdateCharacters(document.Paragraphs[IndexDetSeccion11].Range);
                                        CharacterPropertiesDetSeccion11.Style = Estilo6;
                                        document.EndUpdateCharacters(CharacterPropertiesDetSeccion11);

                                        ParagraphProperties paragraphPropertiesEveImg = document.BeginUpdateParagraphs(document.Paragraphs[IndexDetSeccion11 + 1].Range);
                                        paragraphPropertiesEveImg.LeftIndent = 118;
                                        document.EndUpdateParagraphs(paragraphPropertiesEveImg);

                                        ParrafoDTO _parDesAnaEve = new ParrafoDTO();
                                        _parDesAnaEve.NroParrafo = IndexDetSeccion11 + 1;
                                        _parDesAnaEve.RangeIniParrafo = IndexDetSeccion11 + 1;
                                        _parDesAnaEve.RangeFinParrafo = IndexDetSeccion11 + 1;
                                        ListaParrafos.Add(_parDesAnaEve);

                                        TabInfoCollection tabs1 = document.Paragraphs[IndexDetSeccion11].BeginUpdateTabs(true);
                                        tabs1.Clear();
                                        TabInfo tab1_1 = new TabInfo();
                                        tab1_1.Position = Units.CentimetersToDocumentsF((float)1);
                                        tab1_1.Alignment = TabAlignmentType.Left;
                                        tabs1.Add(tab1_1);
                                        document.Paragraphs[IndexDetSeccion11].EndUpdateTabs(tabs1);

                                        string RutaAnalisis = ConfigurationManager.AppSettings["AnalisiEvento"];
                                        var imgfirma = RutaAnalisis + listasPorTipoNumera.EVEANAEVERUTAFIGURA;
                                        if (System.IO.File.Exists(imgfirma))
                                        {
                                            int IndexShapeEvento = document.Shapes.ToList().Count();
                                            ListaIndexShapes.Add(IndexShapeEvento);
                                            DocumentPosition PosImagenEvento = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);

                                            Shape ImagenEvento = document.Shapes.InsertPicture(PosImagenEvento, DocumentImageSource.FromFile(imgfirma));
                                            ImagenEvento.PictureFormat.Preset = ShapeGeometryPreset.Rectangle;
                                            ImagenEvento.Line.Color = Color.Black;
                                            ImagenEvento.Line.Thickness = 1;

                                            ImagenEvento.RelativeVerticalPosition = ShapeRelativeVerticalPosition.Paragraph;
                                            ImagenEvento.HorizontalAlignment = ShapeHorizontalAlignment.Center;
                                            ImagenEvento.TextWrapping = TextWrappingType.InLineWithText;
                                            ImagenEvento.Size = new SizeF(Units.CentimetersToDocumentsF((float)14.67), Units.CentimetersToDocumentsF((float)9.08));
                                            ImagenEvento.MarginLeft = Units.CentimetersToDocumentsF((float)1);

                                            ShapeLine borderImagen = ImagenEvento.Line;
                                            borderImagen.Color = Color.Black;
                                            borderImagen.Thickness = (float)0.25;
                                            borderImagen.JoinType = LineJoinType.Miter;

                                            int IndexSubTitFiguraEven = document.Paragraphs.ToList().Count();
                                            document.AppendText($"Figura {contadorFigurasAnalisisEvento}: " + $"{listasPorTipoNumera.EVEANAEVEDESCFIGURA}");
                                            ParagraphProperties ParagraphPropertiesSubTitFiguraEven = document.BeginUpdateParagraphs(document.Paragraphs[IndexSubTitFiguraEven - 1].Range);
                                            ParagraphPropertiesSubTitFiguraEven.Style = Estilo19;
                                            document.EndUpdateParagraphs(ParagraphPropertiesSubTitFiguraEven);
                                            CharacterProperties CharacterPropertiesSubTitFiguraEven = document.BeginUpdateCharacters(document.Paragraphs[IndexSubTitFiguraEven - 1].Range);
                                            CharacterPropertiesSubTitFiguraEven.Style = Estilo7;

                                            int lengtContador = contadorFigurasAnalisisEvento.ToString().Length;
                                            int RangoIniSec11_Fig = document.Paragraphs[IndexSubTitFiguraEven - 1].Range.Start.ToInt();
                                            int RangoFinSec11_fig = 9 + lengtContador;
                                            DocumentRange FormatoRangoSec11_Fig = document.CreateRange(RangoIniSec11_Fig, RangoFinSec11_fig);
                                            CharacterProperties CarPropRangoSec11_Fig = document.BeginUpdateCharacters(FormatoRangoSec11_Fig);
                                            CarPropRangoSec11_Fig.Bold = true;
                                            document.EndUpdateCharacters(CarPropRangoSec11_Fig);

                                            contadorFigurasAnalisisEvento++;

                                        }
                                    }
                                    else
                                    {
                                        int IndexDetSeccion11 = document.Paragraphs.ToList().Count();
                                        DocumentPosition PosDetSeccion11 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosDetSeccion11);
                                        document.InsertText(PosDetSeccion11, listasPorTipoNumera.EVEANAEVEDESCNUMERAL);
                                        document.Paragraphs[IndexDetSeccion11].Style = Estilo26;

                                        CharacterProperties CharacterPropertiesDetSeccion11 = document.BeginUpdateCharacters(document.Paragraphs[IndexDetSeccion11].Range);
                                        CharacterPropertiesDetSeccion11.Style = Estilo6;
                                        document.EndUpdateCharacters(CharacterPropertiesDetSeccion11);

                                        TabInfoCollection tabs1 = document.Paragraphs[IndexDetSeccion11].BeginUpdateTabs(true);
                                        tabs1.Clear();
                                        TabInfo tab1_1 = new TabInfo();
                                        tab1_1.Position = Units.CentimetersToDocumentsF((float)1);
                                        tab1_1.Alignment = TabAlignmentType.Left;
                                        tabs1.Add(tab1_1);
                                        document.Paragraphs[IndexDetSeccion11].EndUpdateTabs(tabs1);
                                    }
                                }
                            }

                            if (listaConTipoDos.Any())
                            {
                                int IndexDetSeccion11_Maniobras = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo_Maniobra = new ParrafoDTO();
                                _Parrafo_Maniobra.NroParrafo = IndexDetSeccion11_Maniobras;
                                _Parrafo_Maniobra.RangeIniParrafo = IndexDetSeccion11_Maniobras;
                                _Parrafo_Maniobra.RangeFinParrafo = IndexDetSeccion11_Maniobras;
                                ListaParrafos.Add(_Parrafo_Maniobra);

                                DocumentPosition PosCabSeccion11_1_Maniobras = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosCabSeccion11_1_Maniobras);
                                document.InsertText(PosCabSeccion11_1_Maniobras, "Maniobras de restablecimiento");
                                document.Paragraphs[IndexDetSeccion11_Maniobras].Style = Estilo23;
                                CharacterProperties CarCabSeccion11_1_Maniobras = document.BeginUpdateCharacters(document.Paragraphs[IndexDetSeccion11_Maniobras].Range);
                                CarCabSeccion11_1_Maniobras.Style = Estilo16;
                                document.EndUpdateCharacters(CarCabSeccion11_1_Maniobras);

                                foreach (var itemConTipoDos in listaConTipoDos)
                                {
                                    if (itemConTipoDos.EVEANAEVERUTAFIGURA != null)
                                    {
                                        int IndexDet_Maniobras = document.Paragraphs.ToList().Count();
                                        DocumentPosition PosDetSeccion11_Maniobras = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosDetSeccion11_Maniobras);
                                        document.InsertText(PosDetSeccion11_Maniobras, itemConTipoDos.EVEANAEVEDESCNUMERAL + "\n");

                                        document.Paragraphs[IndexDet_Maniobras].Style = Estilo26;

                                        //ParagraphProperties paragraphPropertiesMan = document.BeginUpdateParagraphs(document.Paragraphs[IndexDet_Maniobras].Range);
                                        //paragraphPropertiesMan.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                        //paragraphPropertiesMan.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                                        //paragraphPropertiesMan.LeftIndent = 118;
                                        //document.EndUpdateParagraphs(paragraphPropertiesMan);

                                        CharacterProperties CharacterPropertiesDetSeccion11_Maniobra = document.BeginUpdateCharacters(document.Paragraphs[IndexDet_Maniobras].Range);
                                        CharacterPropertiesDetSeccion11_Maniobra.Style = Estilo6;
                                        document.EndUpdateCharacters(CharacterPropertiesDetSeccion11_Maniobra);

                                        ParagraphProperties paragraphPropertiesEveImg = document.BeginUpdateParagraphs(document.Paragraphs[IndexDet_Maniobras + 1].Range);
                                        paragraphPropertiesEveImg.LeftIndent = 118;
                                        document.EndUpdateParagraphs(paragraphPropertiesEveImg);

                                        ParrafoDTO _parDesAnaEveManiob = new ParrafoDTO();
                                        _parDesAnaEveManiob.NroParrafo = IndexDet_Maniobras + 1;
                                        _parDesAnaEveManiob.RangeIniParrafo = IndexDet_Maniobras + 1;
                                        _parDesAnaEveManiob.RangeFinParrafo = IndexDet_Maniobras + 1;
                                        ListaParrafos.Add(_parDesAnaEveManiob);

                                        TabInfoCollection tabs2 = document.Paragraphs[IndexDet_Maniobras].BeginUpdateTabs(true);
                                        tabs2.Clear();
                                        TabInfo tab1_m = new TabInfo();
                                        tab1_m.Position = Units.CentimetersToDocumentsF((float)1);
                                        tab1_m.Alignment = TabAlignmentType.Left;
                                        tabs2.Add(tab1_m);
                                        document.Paragraphs[IndexDet_Maniobras].EndUpdateTabs(tabs2);

                                        string RutaAnalisis = ConfigurationManager.AppSettings["AnalisiEvento"];
                                        var imgfirma = RutaAnalisis + itemConTipoDos.EVEANAEVERUTAFIGURA;
                                        if (System.IO.File.Exists(imgfirma))
                                        {
                                            int IndexShapeManiobra = document.Shapes.ToList().Count();
                                            ListaIndexShapes.Add(IndexShapeManiobra);
                                            DocumentPosition PosImagenManiobra = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);

                                            Shape ImagenManiobra = document.Shapes.InsertPicture(PosImagenManiobra, DocumentImageSource.FromFile(imgfirma));
                                            ImagenManiobra.PictureFormat.Preset = ShapeGeometryPreset.Rectangle;
                                            ImagenManiobra.Line.Color = Color.Black;
                                            ImagenManiobra.Line.Thickness = 1;

                                            ImagenManiobra.RelativeVerticalPosition = ShapeRelativeVerticalPosition.Paragraph;
                                            ImagenManiobra.HorizontalAlignment = ShapeHorizontalAlignment.Center;
                                            ImagenManiobra.TextWrapping = TextWrappingType.InLineWithText;
                                            ImagenManiobra.Size = new SizeF(Units.CentimetersToDocumentsF((float)14.67), Units.CentimetersToDocumentsF((float)9.08));

                                            int IndexSubTitFiguraManiobra = document.Paragraphs.ToList().Count();
                                            document.AppendText($"Figura {contadorFigurasAnalisisEvento}: " + itemConTipoDos.EVEANAEVEDESCFIGURA);
                                            ParagraphProperties ParagraphPropertiesSubTitFiguraManiobra = document.BeginUpdateParagraphs(document.Paragraphs[IndexSubTitFiguraManiobra - 1].Range);
                                            ParagraphPropertiesSubTitFiguraManiobra.Style = Estilo19;
                                            document.EndUpdateParagraphs(ParagraphPropertiesSubTitFiguraManiobra);
                                            CharacterProperties CharacterPropertiesSubTitFiguraManiobra = document.BeginUpdateCharacters(document.Paragraphs[IndexSubTitFiguraManiobra - 1].Range);
                                            CharacterPropertiesSubTitFiguraManiobra.Style = Estilo7;
                                            document.EndUpdateCharacters(CharacterPropertiesSubTitFiguraManiobra);

                                            int lengtContador = contadorFigurasAnalisisEvento.ToString().Length;
                                            int RangoIniSec11_Fig = document.Paragraphs[IndexSubTitFiguraManiobra - 1].Range.Start.ToInt();
                                            int RangoFinSec11_fig = 9 + lengtContador;
                                            DocumentRange FormatoRangoSec11_Fig = document.CreateRange(RangoIniSec11_Fig, RangoFinSec11_fig);
                                            CharacterProperties CarPropRangoSec11_Fig = document.BeginUpdateCharacters(FormatoRangoSec11_Fig);
                                            CarPropRangoSec11_Fig.Bold = true;
                                            document.EndUpdateCharacters(CarPropRangoSec11_Fig);

                                            contadorFigurasAnalisisEvento++;
                                        }
                                    }
                                    else
                                    {
                                        int IndexDet_Maniobras = document.Paragraphs.ToList().Count();
                                        DocumentPosition PosDetSeccion11_Maniobras = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosDetSeccion11_Maniobras);
                                        document.InsertText(PosDetSeccion11_Maniobras, itemConTipoDos.EVEANAEVEDESCNUMERAL);

                                        document.Paragraphs[IndexDet_Maniobras].Style = Estilo26;

                                        //ParagraphProperties paragraphPropertiesMan = document.BeginUpdateParagraphs(document.Paragraphs[IndexDet_Maniobras].Range);
                                        //paragraphPropertiesMan.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                        //paragraphPropertiesMan.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                                        //paragraphPropertiesMan.LeftIndent = 118;
                                        //document.EndUpdateParagraphs(paragraphPropertiesMan);

                                        CharacterProperties CharacterPropertiesDetSeccion11_Maniobra = document.BeginUpdateCharacters(document.Paragraphs[IndexDet_Maniobras].Range);
                                        CharacterPropertiesDetSeccion11_Maniobra.Style = Estilo6;
                                        document.EndUpdateCharacters(CharacterPropertiesDetSeccion11_Maniobra);

                                        TabInfoCollection tabs2 = document.Paragraphs[IndexDet_Maniobras].BeginUpdateTabs(true);
                                        tabs2.Clear();
                                        TabInfo tab1_m = new TabInfo();
                                        tab1_m.Position = Units.CentimetersToDocumentsF((float)1);
                                        tab1_m.Alignment = TabAlignmentType.Left;
                                        tabs2.Add(tab1_m);
                                        document.Paragraphs[IndexDet_Maniobras].EndUpdateTabs(tabs2);
                                    }  
                                }
                            }
                        }
                    }
                }

                int IndexFinSeccion11_1 = document.Paragraphs.ToList().Count();

                #endregion

                #region Seccion12: Consecuencias

                List<ParrafoDTO> listaPar12_x = new List<ParrafoDTO>();
                List<ParrafoDTO> listaPar12_x_x = new List<ParrafoDTO>();

                int IndexIniSec12 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec12 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12 = document.Paragraphs.Insert(PosSec12);
                document.InsertText(PosSec12, "CONSECUENCIAS");

                ParagraphProperties paragraphPropertiesConsc = document.BeginUpdateParagraphs(document.Paragraphs[IndexIniSec12].Range);
                paragraphPropertiesConsc.LeftIndent = 384;
                document.EndUpdateParagraphs(paragraphPropertiesConsc);

                CharacterProperties CharacterPropertiesTitSec10 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12].Range);
                CharacterPropertiesTitSec10.Style = Estilo11;
                document.EndUpdateCharacters(CharacterPropertiesTitSec10);

                int IndexIniSec12_1 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec12_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_1 = document.Paragraphs.Insert(PosSec12_1);
                document.InsertText(PosSec12_1, "En la calidad del Producto: No hubo trasgresiones a la calidad del producto.");

                ParagraphProperties paragraphPropertiesConsc1 = document.BeginUpdateParagraphs(document.Paragraphs[IndexIniSec12_1].Range);
                paragraphPropertiesConsc1.LeftIndent = 118;
                paragraphPropertiesConsc1.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                paragraphPropertiesConsc1.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                document.EndUpdateParagraphs(paragraphPropertiesConsc1);


                CharacterProperties CharacterPropertiesTitSec12_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12_1].Range);
                CharacterPropertiesTitSec12_1.Style = Estilo11;
                document.EndUpdateCharacters(CharacterPropertiesTitSec12_1);

                DocumentRange FormatoRangoSec12_1_ = document.CreateRange(document.Paragraphs[IndexIniSec12_1].Range.Start.ToInt() + 28, 49);
                CharacterProperties CharacterPropertiesTitSec12_1_ = document.BeginUpdateCharacters(FormatoRangoSec12_1_);
                CharacterPropertiesTitSec12_1_.Bold = false;
                document.EndUpdateCharacters(CharacterPropertiesTitSec12_1_);

                int IndexIniSec12_2 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec12_2 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_2 = document.Paragraphs.Insert(PosSec12_2);
                document.InsertText(PosSec12_2, "En la calidad del suministro:");
                CharacterProperties CharacterPropertiesTitSec12_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12_2].Range);
                CharacterPropertiesTitSec12_2.Style = Estilo11;
                document.EndUpdateCharacters(CharacterPropertiesTitSec12_2);


                int IndexIni12_2_1 = 0, IndexFin12_2_1 = 0;

                if (tablaReporteTotalesEacmf.ListaRegistros.Count == 0 && tablaReporteTotales.ListaRegistros.Count == 0)
                {
                    int IndexSecNoReg12_2_1 = document.Paragraphs.ToList().Count();
                    ParrafoDTO parNoRef12_x_y = new ParrafoDTO();
                    parNoRef12_x_y.NroParrafo = IndexSecNoReg12_2_1;
                    parNoRef12_x_y.RangeIniParrafo = IndexSecNoReg12_2_1;
                    parNoRef12_x_y.RangeFinParrafo = IndexSecNoReg12_2_1;
                    ListaParrafos.Add(parNoRef12_x_y);

                    DocumentPosition PosSecNoReg12_2_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSecNoReg12_2_1 = document.Paragraphs.Insert(PosSecNoReg12_2_1);
                    document.InsertText(PosSecNoReg12_2_1, "No Registrado.");
                    CharacterProperties CharacterPropertiesSecNoReg12_2_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecNoReg12_2_1].Range);
                    CharacterPropertiesSecNoReg12_2_1.Style = Estilo14;
                    document.EndUpdateCharacters(CharacterPropertiesSecNoReg12_2_1);
                }
                else
                {
                    IndexIni12_2_1 = document.Paragraphs.ToList().Count();
                    if (tablaReporteTotalesEacmf.ListaRegistros.Count > 0)
                    {
                        int IndexIniSec12_2_1_ERACMF = document.Paragraphs.ToList().Count();
                        DocumentPosition PosSec12_2_1_ERACMF = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_2_1_ERACMF = document.Paragraphs.Insert(PosSec12_2_1_ERACMF);
                        document.InsertText(PosSec12_2_1_ERACMF, "Las interrupciones de suministro que se produjeron por activación del ERACMF fueron las siguientes:");

                        ParagraphProperties paragraphPropertiesERACMF = document.BeginUpdateParagraphs(document.Paragraphs[IndexIniSec12_2_1_ERACMF].Range);
                        paragraphPropertiesERACMF.LeftIndent = 118;
                        document.EndUpdateParagraphs(paragraphPropertiesERACMF);

                        CharacterProperties CPropertiesTitSec12_2_1_ERACMF = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12_2_1_ERACMF].Range);
                        CPropertiesTitSec12_2_1_ERACMF.Style = Estilo14;
                        document.EndUpdateCharacters(CPropertiesTitSec12_2_1_ERACMF);

                        List<RegistroReporte> registrosparteEracmf = new List<RegistroReporte>();
                        List<RegistroReporte> registrosTotalesEracmf = tablaReporteTotalesEacmf.ListaRegistros;
                        var codigosEventos = tablaReporteTotalesEacmf.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                        int IndexIniTablasSec12 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo12 = new ParrafoDTO();
                        _Parrafo12.NroParrafo = IndexIniTablasSec12;
                        _Parrafo12.RangeIniParrafo = IndexIniTablasSec12;

                        foreach (var item in codigosEventos)
                        {
                            registrosparteEracmf = registrosTotalesEracmf.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                            if (codigosEventos.Count > 1)
                            {
                                int IndexIniTablaSec12 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosCabSec12Evento = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab7Evento = document.Paragraphs.Insert(PosCabSec12Evento);
                                document.InsertText(PosCabSec12Evento, registrosparteEracmf[0].Nombre);
                                document.Paragraphs[IndexIniTablaSec12].Style = Estilo20;
                            }

                            int numFilas = registrosparteEracmf.Count + 1;
                            int numColumnas = tablaReporteTotalesEacmf.CabeceraColumnas.Count;

                            DocumentPosition PostablaSuministro = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Table tablaSuministro = document.Tables.Create(PostablaSuministro, numFilas, numColumnas);
                            tablaSuministro.BeginUpdate();

                            #region Configuración Tabla
                            tablaSuministro.Style = EstiloTabla1;
                            tablaSuministro.PreferredWidthType = WidthType.Fixed;
                            tablaSuministro.PreferredWidth = Units.CentimetersToDocumentsF((float)18.5);
                            tablaSuministro.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                            tablaSuministro.VerticalAlignment = TableVerticalAlignment.None;
                            tablaSuministro.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.TextWrappingType = TableTextWrappingType.Around;
                            tablaSuministro.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                            tablaSuministro.OffsetXRelative = Units.CentimetersToDocumentsF((float)-1.2);
                            tablaSuministro.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                            tablaSuministro.MarginTop = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSuministro[0, 0];
                            Cel00.PreferredWidthType = WidthType.Fixed;
                            Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)1.5);
                            Cel00.HeightType = HeightType.AtLeast;
                            Cel00.Height = Units.CentimetersToDocumentsF((float)0.5);
                            Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel00.BackgroundColor = Color.LightGray;
                            Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel00.TopPadding = 0;
                            Cel00.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSuministro[0, 0].Range);
                            ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel00.SpacingAfter = 0;
                            ParagraphPropertiesCel00.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                            CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaSuministro[0, 0].Range);
                            CharacterPropertiesCel00.Bold = true;
                            CharacterPropertiesCel00.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel00);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSuministro[0, 1];
                            Cel01.PreferredWidthType = WidthType.Auto;
                            //Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)4.09);
                            Cel01.HeightType = HeightType.AtLeast;
                            Cel01.Height = Units.CentimetersToDocumentsF((float)0.5);
                            Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel01.BackgroundColor = Color.LightGray;
                            Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel01.TopPadding = 0;
                            Cel01.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSuministro[0, 1].Range);
                            ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel01.SpacingAfter = 0;
                            ParagraphPropertiesCel01.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                            CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaSuministro[0, 1].Range);
                            CharacterPropertiesCel01.Bold = true;
                            CharacterPropertiesCel01.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel01);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSuministro[0, 2];
                            Cel02.PreferredWidthType = WidthType.Auto;
                            //Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.9);
                            Cel02.HeightType = HeightType.AtLeast;
                            Cel02.Height = Units.CentimetersToDocumentsF((float)0.5);
                            Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel02.BackgroundColor = Color.LightGray;
                            Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel02.TopPadding = 0;
                            Cel02.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSuministro[0, 2].Range);
                            ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel02.SpacingAfter = 0;
                            ParagraphPropertiesCel02.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                            CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaSuministro[0, 2].Range);
                            CharacterPropertiesCel02.Bold = true;
                            CharacterPropertiesCel02.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel02);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSuministro[0, 3];
                            Cel03.PreferredWidthType = WidthType.Auto;
                            //Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)1.57);
                            Cel03.HeightType = HeightType.AtLeast;
                            Cel03.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel03.BackgroundColor = Color.LightGray;
                            Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel03.TopPadding = 0;
                            Cel03.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSuministro[0, 3].Range);
                            ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel03.SpacingAfter = 0;
                            ParagraphPropertiesCel03.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                            CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaSuministro[0, 3].Range);
                            CharacterPropertiesCel03.Bold = true;
                            CharacterPropertiesCel03.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel03);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaSuministro[0, 4];
                            Cel04.PreferredWidthType = WidthType.Auto;
                            //Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)1.64);
                            Cel04.HeightType = HeightType.AtLeast;
                            Cel04.Height = Units.CentimetersToDocumentsF((float)0.5);
                            Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel04.BackgroundColor = Color.LightGray;
                            Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel04.TopPadding = 0;
                            Cel04.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaSuministro[0, 4].Range);
                            ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel04.SpacingAfter = 0;
                            ParagraphPropertiesCel04.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                            CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaSuministro[0, 4].Range);
                            CharacterPropertiesCel04.Bold = true;
                            CharacterPropertiesCel04.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel04);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaSuministro[0, 5];
                            Cel05.PreferredWidthType = WidthType.Auto;
                            //Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)1.64);
                            Cel05.HeightType = HeightType.AtLeast;
                            Cel05.Height = Units.CentimetersToDocumentsF((float)0.5);
                            Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel05.BackgroundColor = Color.LightGray;
                            Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel05.TopPadding = 0;
                            Cel05.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaSuministro[0, 5].Range);
                            ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel05.SpacingAfter = 0;
                            ParagraphPropertiesCel05.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                            CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaSuministro[0, 5].Range);
                            CharacterPropertiesCel05.Bold = true;
                            CharacterPropertiesCel05.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel05);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel06 = tablaSuministro[0, 6];
                            Cel06.PreferredWidthType = WidthType.Auto;
                            //Cel06.PreferredWidth = Units.CentimetersToDocumentsF((float)1.5);
                            Cel06.HeightType = HeightType.AtLeast;
                            Cel06.Height = Units.CentimetersToDocumentsF((float)0.5);
                            Cel06.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel06.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel06.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel06.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel06.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel06.BackgroundColor = Color.LightGray;
                            Cel06.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel06.TopPadding = 0;
                            Cel06.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel06 = document.BeginUpdateParagraphs(tablaSuministro[0, 6].Range);
                            ParagraphPropertiesCel06.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel06.SpacingAfter = 0;
                            ParagraphPropertiesCel06.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel06);
                            CharacterProperties CharacterPropertiesCel06 = document.BeginUpdateCharacters(tablaSuministro[0, 6].Range);
                            CharacterPropertiesCel06.Bold = true;
                            CharacterPropertiesCel06.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel06);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel07 = tablaSuministro[0, 7];
                            Cel07.PreferredWidthType = WidthType.Auto;
                            //Cel07.PreferredWidth = Units.CentimetersToDocumentsF((float)1.29);
                            Cel07.HeightType = HeightType.AtLeast;
                            Cel07.Height = Units.CentimetersToDocumentsF((float)0.5);
                            Cel07.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel07.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel07.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel07.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel07.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel07.BackgroundColor = Color.LightGray;
                            Cel07.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel07.TopPadding = 0;
                            Cel07.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel07 = document.BeginUpdateParagraphs(tablaSuministro[0, 7].Range);
                            ParagraphPropertiesCel07.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel07.SpacingAfter = 0;
                            ParagraphPropertiesCel07.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel07);
                            CharacterProperties CharacterPropertiesCel07 = document.BeginUpdateCharacters(tablaSuministro[0, 7].Range);
                            CharacterPropertiesCel07.Bold = true;
                            CharacterPropertiesCel07.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel07);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel08 = tablaSuministro[0, 8];
                            Cel08.PreferredWidthType = WidthType.Auto;
                            //Cel08.PreferredWidth = Units.CentimetersToDocumentsF((float)1.37);
                            Cel08.HeightType = HeightType.AtLeast;
                            Cel08.Height = Units.CentimetersToDocumentsF((float)0.5);
                            Cel08.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel08.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel08.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel08.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel08.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel08.BackgroundColor = Color.LightGray;
                            Cel08.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel08.TopPadding = 0;
                            Cel08.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel08 = document.BeginUpdateParagraphs(tablaSuministro[0, 8].Range);
                            ParagraphPropertiesCel08.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel08.SpacingAfter = 0;
                            ParagraphPropertiesCel08.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel08);
                            CharacterProperties CharacterPropertiesCel08 = document.BeginUpdateCharacters(tablaSuministro[0, 8].Range);
                            CharacterPropertiesCel08.Bold = true;
                            CharacterPropertiesCel08.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel08);

                            tablaSuministro.Rows[0].RepeatAsHeaderRow = true;

                            #endregion

                            #region Datos Tabla

                            document.InsertText(tablaSuministro[0, 0].Range.Start, "ZONA");
                            document.InsertText(tablaSuministro[0, 1].Range.Start, "SUMINISTRO");
                            document.InsertText(tablaSuministro[0, 2].Range.Start, "SUBESTACIÓN");
                            document.InsertText(tablaSuministro[0, 3].Range.Start, "POTENCIA (MW)");
                            document.InsertText(tablaSuministro[0, 4].Range.Start, "INICIO (HH:MM:SS)");
                            document.InsertText(tablaSuministro[0, 5].Range.Start, "FINAL (HH:MM:SS)");
                            document.InsertText(tablaSuministro[0, 6].Range.Start, "DURACIÓN (MIN)");
                            document.InsertText(tablaSuministro[0, 7].Range.Start, "FUNCIÓN");
                            document.InsertText(tablaSuministro[0, 8].Range.Start, "ETAPA");

                            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                            nfi.NumberGroupSeparator = " ";
                            nfi.NumberDecimalDigits = 3;
                            nfi.NumberDecimalSeparator = ",";

                            for (int x = 0; x < registrosparteEracmf.Count; x++)
                            {
                                if (x == registrosparteEracmf.Count - 1)
                                {
                                    tablaSuministro.MergeCells(tablaSuministro[x + 1, 0], tablaSuministro[x + 1, 2]);

                                    for (int y = 0; y < registrosparteEracmf[x].ListaCelda.Count - 3; y++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                        if (y == 0)
                                        {
                                            document.InsertText(tablaSuministro[x + 1, y].Range.Start, registrosparteEracmf[x].ListaCelda[y].Texto == null ? "" : registrosparteEracmf[x].ListaCelda[y].Texto);
                                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.5);
                                        }


                                        if (registrosparteEracmf[x].ListaCelda[y].EsNumero)
                                        {
                                            if (registrosparteEracmf[x].ListaCelda[y].Valor != null)
                                            {
                                                if (registrosparteEracmf[x].ListaCelda[y].DigitosParteDecimal > 0)
                                                {
                                                    int numDigitos = registrosparteEracmf[x].ListaCelda[y].DigitosParteDecimal;
                                                    if (registrosparteEracmf[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                                    {
                                                        numDigitos = MathHelper.GetDecimalPlaces(registrosparteEracmf[x].ListaCelda[y].Valor.Value);
                                                        numDigitos = (numDigitos > registrosparteEracmf[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registrosparteEracmf[x].ListaCelda[y].DigitosParteDecimal;
                                                    }

                                                    if (registrosparteEracmf[x].ListaCelda[y].EsNumeroTruncado)
                                                    {
                                                        registrosparteEracmf[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registrosparteEracmf[x].ListaCelda[y].Valor.Value, numDigitos);
                                                    }
                                                    if (registrosparteEracmf[x].ListaCelda[y].EsNumeroRedondeado)
                                                    {
                                                        registrosparteEracmf[x].ListaCelda[y].Valor = MathHelper.Round(registrosparteEracmf[x].ListaCelda[y].Valor.Value, numDigitos);
                                                    }

                                                    string strParteDecimal = string.Empty;
                                                    for (int i = 1; i <= numDigitos; i++) strParteDecimal += "0";
                                                    string strFormat = "#,##0." + strParteDecimal;

                                                    nfi.NumberDecimalDigits = numDigitos;
                                                }
                                                else
                                                {
                                                    string strFormat = "#,##0";

                                                    nfi.NumberDecimalDigits = 0;
                                                }
                                            }
                                            if (y == 3)
                                                document.InsertText(tablaSuministro[x + 1, y - 2].Range.Start, registrosparteEracmf[x].ListaCelda[y].Valor == null ? "" : registrosparteEracmf[x].ListaCelda[y].Valor.Value.ToString("N", nfi));
                                        }
                                        else

                                            //DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                            Celi0.PreferredWidthType = WidthType.Auto;
                                        if (y > 1)
                                        {
                                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.None;
                                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.None;
                                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.5);
                                        }
                                        else
                                        {
                                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.5);
                                        }
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 8;
                                        //if (y > 1)
                                        //    CharacterPropertiesRangeCeli0.Bold = false;
                                        //else
                                        CharacterPropertiesRangeCeli0.Bold = true;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSuministro[x + 1, y].Range);
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;

                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);

                                    }
                                }
                                else
                                {
                                    for (int y = 0; y < registrosparteEracmf[x].ListaCelda.Count; y++)
                                    {
                                        if (registrosparteEracmf[x].ListaCelda[y].EsNumero)
                                        {
                                            if (registrosparteEracmf[x].ListaCelda[y].Valor != null)
                                            {
                                                if (registrosparteEracmf[x].ListaCelda[y].DigitosParteDecimal > 0)
                                                {
                                                    int numDigitos = registrosparteEracmf[x].ListaCelda[y].DigitosParteDecimal;
                                                    if (registrosparteEracmf[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                                    {
                                                        numDigitos = MathHelper.GetDecimalPlaces(registrosparteEracmf[x].ListaCelda[y].Valor.Value);
                                                        numDigitos = (numDigitos > registrosparteEracmf[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registrosparteEracmf[x].ListaCelda[y].DigitosParteDecimal;
                                                    }

                                                    if (registrosparteEracmf[x].ListaCelda[y].EsNumeroTruncado)
                                                    {
                                                        registrosparteEracmf[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registrosparteEracmf[x].ListaCelda[y].Valor.Value, numDigitos);
                                                    }
                                                    if (registrosparteEracmf[x].ListaCelda[y].EsNumeroRedondeado)
                                                    {
                                                        registrosparteEracmf[x].ListaCelda[y].Valor = MathHelper.Round(registrosparteEracmf[x].ListaCelda[y].Valor.Value, numDigitos);
                                                    }

                                                    string strParteDecimal = string.Empty;
                                                    for (int i = 1; i <= numDigitos; i++) strParteDecimal += "0";
                                                    string strFormat = "#,##0." + strParteDecimal;

                                                    nfi.NumberDecimalDigits = numDigitos;
                                                }
                                                else
                                                {
                                                    string strFormat = "#,##0";

                                                    nfi.NumberDecimalDigits = 0;
                                                }
                                            }
                                            document.InsertText(tablaSuministro[x + 1, y].Range.Start, registrosparteEracmf[x].ListaCelda[y].Valor == null ? "" : registrosparteEracmf[x].ListaCelda[y].Valor.Value.ToString("N", nfi));
                                        }
                                        else
                                        {
                                            if (y == 3 || y == 4)
                                                document.InsertText(tablaSuministro[x + 1, y].Range.Start, registrosparteEracmf[x].ListaCelda[y].Texto != null && registrosparteEracmf[x].ListaCelda[y].Texto.Length > 8 ? registrosparteEracmf[x].ListaCelda[y].Texto.Substring(registrosparteEracmf[x].ListaCelda[y].Texto.Length - 8, 8) : "");
                                            else
                                                document.InsertText(tablaSuministro[x + 1, y].Range.Start, registrosparteEracmf[x].ListaCelda[y].Texto == null ? "" : registrosparteEracmf[x].ListaCelda[y].Texto);
                                        }

                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.6);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 8;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSuministro[x + 1, y].Range);
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        if (y > 0)
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        else
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Left;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);

                                    }
                                }
                            }

                            #endregion

                            tablaSuministro.EndUpdate();
                            //    if (codigosEventos.Count > 1)
                            //    {
                            //        servAF.AddSubtituloReporte2(document.InsertParagraph(), registrosparteEracmf[0].Nombre, fontDoc);
                            //    }
                            //    else
                            //    {
                            //        document.InsertParagraph();
                            //    }

                            //    TablaEracmf = tablaReporteTotalesEacmf;
                            //    TablaEracmf.ListaRegistros = registrosparteEracmf;
                            //    numFilas = registrosparteEracmf.Count;
                            //    numColumnas = tablaReporteTotalesEacmf.CabeceraColumnas.Count;
                            //    secuencia_0 = document.InsertTable(numFilas + 1, numColumnas);

                            //    servAF.GenerarRptWord(ref secuencia_0, tablaReporteTotalesEacmf, 1, fdatcodiEracmf);
                            //    document.InsertParagraph();
                        }

                        int IndexFinTablasSec12 = document.Paragraphs.ToList().Count();
                        _Parrafo12.RangeFinParrafo = IndexFinTablasSec12 - 1;
                        ListaParrafos.Add(_Parrafo12);
                    }

                    if (tablaReporteTotales.ListaRegistros.Count > 0)
                    {
                        int IndexIniSec12_2_1 = document.Paragraphs.ToList().Count();
                        DocumentPosition PosSec12_2_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_2_1 = document.Paragraphs.Insert(PosSec12_2_1);
                        document.InsertText(PosSec12_2_1, "Las Interrupciones de suministro que se produjeron fueron las siguientes:");
                        ParagraphProperties paragraphProperties12_2_1 = document.BeginUpdateParagraphs(document.Paragraphs[IndexIniSec12_2_1].Range);
                        paragraphProperties12_2_1.LeftIndent = 118;
                        document.EndUpdateParagraphs(paragraphProperties12_2_1);
                        CharacterProperties CPropertiesTitSec12_2_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12_2_1].Range);
                        CPropertiesTitSec12_2_1.Style = Estilo14;
                        document.EndUpdateCharacters(CPropertiesTitSec12_2_1);

                        List<RegistroReporte> registros = new List<RegistroReporte>();
                        List<RegistroReporte> registrosTotales = tablaReporteTotales.ListaRegistros;
                        var codigosEventos = tablaReporteTotales.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                        int IndexIniTablasSec12 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo12 = new ParrafoDTO();
                        _Parrafo12.NroParrafo = IndexIniTablasSec12;
                        _Parrafo12.RangeIniParrafo = IndexIniTablasSec12;

                        foreach (var item in codigosEventos)
                        {
                            registros = registrosTotales.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                            if (codigosEventos.Count > 1)
                            {
                                int IndexIniTablaSec12 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosCabSec12Evento = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab7Evento = document.Paragraphs.Insert(PosCabSec12Evento);
                                document.InsertText(PosCabSec12Evento, registros[0].Nombre);
                                document.Paragraphs[IndexIniTablaSec12].Style = Estilo20;
                            }

                            int numFilas = registros.Count + 1;
                            int numColumnas = tablaReporteTotales.CabeceraColumnas.Count;

                            DocumentPosition PostablaSuministro = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Table tablaSuministro = document.Tables.Create(PostablaSuministro, numFilas, numColumnas);
                            tablaSuministro.BeginUpdate();

                            #region Configuración Tabla
                            tablaSuministro.Style = EstiloTabla1;
                            tablaSuministro.PreferredWidthType = WidthType.Fixed;
                            tablaSuministro.PreferredWidth = Units.CentimetersToDocumentsF((float)14.75);
                            tablaSuministro.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                            tablaSuministro.VerticalAlignment = TableVerticalAlignment.None;
                            tablaSuministro.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.TextWrappingType = TableTextWrappingType.Around;
                            tablaSuministro.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                            tablaSuministro.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                            tablaSuministro.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                            tablaSuministro.MarginTop = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSuministro[0, 0];
                            Cel00.PreferredWidthType = WidthType.Fixed;
                            Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)5.12);
                            Cel00.HeightType = HeightType.Exact;
                            Cel00.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel00.BackgroundColor = Color.LightGray;
                            Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel00.TopPadding = 0;
                            Cel00.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSuministro[0, 0].Range);
                            ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel00.SpacingAfter = 0;
                            ParagraphPropertiesCel00.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                            CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaSuministro[0, 0].Range);
                            CharacterPropertiesCel00.Bold = true;
                            CharacterPropertiesCel00.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel00);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSuministro[0, 1];
                            Cel01.PreferredWidthType = WidthType.Fixed;
                            Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2.92);
                            Cel01.HeightType = HeightType.Exact;
                            Cel01.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel01.BackgroundColor = Color.LightGray;
                            Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel01.TopPadding = 0;
                            Cel01.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSuministro[0, 1].Range);
                            ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel01.SpacingAfter = 0;
                            ParagraphPropertiesCel01.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                            CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaSuministro[0, 1].Range);
                            CharacterPropertiesCel01.Bold = true;
                            CharacterPropertiesCel01.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel01);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSuministro[0, 2];
                            Cel02.PreferredWidthType = WidthType.Fixed;
                            Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)1.57);
                            Cel02.HeightType = HeightType.Exact;
                            Cel02.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel02.BackgroundColor = Color.LightGray;
                            Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel02.TopPadding = 0;
                            Cel02.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSuministro[0, 2].Range);
                            ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel02.SpacingAfter = 0;
                            ParagraphPropertiesCel02.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                            CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaSuministro[0, 2].Range);
                            CharacterPropertiesCel02.Bold = true;
                            CharacterPropertiesCel02.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel02);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSuministro[0, 3];
                            Cel03.PreferredWidthType = WidthType.Fixed;
                            Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)1.63);
                            Cel03.HeightType = HeightType.Exact;
                            Cel03.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel03.BackgroundColor = Color.LightGray;
                            Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel03.TopPadding = 0;
                            Cel03.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSuministro[0, 3].Range);
                            ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel03.SpacingAfter = 0;
                            ParagraphPropertiesCel03.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                            CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaSuministro[0, 3].Range);
                            CharacterPropertiesCel03.Bold = true;
                            CharacterPropertiesCel03.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel03);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaSuministro[0, 4];
                            Cel04.PreferredWidthType = WidthType.Fixed;
                            Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)1.63);
                            Cel04.HeightType = HeightType.Exact;
                            Cel04.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel04.BackgroundColor = Color.LightGray;
                            Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel04.TopPadding = 0;
                            Cel04.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaSuministro[0, 4].Range);
                            ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel04.SpacingAfter = 0;
                            ParagraphPropertiesCel04.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                            CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaSuministro[0, 4].Range);
                            CharacterPropertiesCel04.Bold = true;
                            CharacterPropertiesCel04.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel04);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaSuministro[0, 5];
                            Cel05.PreferredWidthType = WidthType.Fixed;
                            Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)1.75);
                            Cel05.HeightType = HeightType.Exact;
                            Cel05.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel05.BackgroundColor = Color.LightGray;
                            Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel05.TopPadding = 0;
                            Cel05.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaSuministro[0, 5].Range);
                            ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel05.SpacingAfter = 0;
                            ParagraphPropertiesCel05.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                            CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaSuministro[0, 5].Range);
                            CharacterPropertiesCel05.Bold = true;
                            CharacterPropertiesCel05.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel05);

                            tablaSuministro.Rows[0].RepeatAsHeaderRow = true;

                            #endregion

                            #region Datos Tabla

                            document.InsertText(tablaSuministro[0, 0].Range.Start, "SUMINISTRO");
                            document.InsertText(tablaSuministro[0, 1].Range.Start, "SUBESTACIÓN");
                            document.InsertText(tablaSuministro[0, 2].Range.Start, "POTENCIA (MW)");
                            document.InsertText(tablaSuministro[0, 3].Range.Start, "INICIO (HH:MM:SS)");
                            document.InsertText(tablaSuministro[0, 4].Range.Start, "FINAL (HH:MM:SS)");
                            document.InsertText(tablaSuministro[0, 5].Range.Start, "DURACIÓN (MIN)");

                            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                            nfi.NumberGroupSeparator = " ";
                            nfi.NumberDecimalDigits = 3;
                            nfi.NumberDecimalSeparator = ",";

                            for (int x = 0; x < registros.Count; x++)
                            {
                                if (x == registros.Count - 1)
                                {
                                    tablaSuministro.MergeCells(tablaSuministro[x + 1, 0], tablaSuministro[x + 1, 1]);

                                    for (int y = 0; y < registros[x].ListaCelda.Count - 1; y++)
                                    {
                                        if (registros[x].ListaCelda[y].EsNumero)
                                        {
                                            if (registros[x].ListaCelda[y].Valor != null)
                                            {
                                                if (registros[x].ListaCelda[y].DigitosParteDecimal > 0)
                                                {
                                                    int numDigitos = registros[x].ListaCelda[y].DigitosParteDecimal;
                                                    if (registros[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                                    {
                                                        numDigitos = MathHelper.GetDecimalPlaces(registros[x].ListaCelda[y].Valor.Value);
                                                        numDigitos = (numDigitos > registros[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registros[x].ListaCelda[y].DigitosParteDecimal;
                                                    }

                                                    if (registros[x].ListaCelda[y].EsNumeroTruncado)
                                                    {
                                                        registros[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                    }
                                                    if (registros[x].ListaCelda[y].EsNumeroRedondeado)
                                                    {
                                                        registros[x].ListaCelda[y].Valor = MathHelper.Round(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                    }

                                                    string strParteDecimal = string.Empty;
                                                    for (int i = 1; i <= numDigitos; i++) strParteDecimal += "0";
                                                    string strFormat = "#,##0." + strParteDecimal;

                                                    nfi.NumberDecimalDigits = numDigitos;
                                                }
                                                else
                                                {
                                                    string strFormat = "#,##0";

                                                    nfi.NumberDecimalDigits = 0;
                                                }
                                            }
                                            document.InsertText(tablaSuministro[x + 1, y - 1].Range.Start, registros[x].ListaCelda[y].Valor == null ? "" : registros[x].ListaCelda[y].Valor.Value.ToString("N", nfi));
                                        }
                                        else if (y == 0)
                                            document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Texto == null ? "" : registros[x].ListaCelda[y].Texto);

                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                        if (y > 1)
                                        {
                                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.None;
                                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.None;
                                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.6);
                                        }
                                        else
                                        {
                                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.6);
                                        }
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 8;
                                        if (y > 1)
                                            CharacterPropertiesRangeCeli0.Bold = false;
                                        else
                                            CharacterPropertiesRangeCeli0.Bold = true;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSuministro[x + 1, y].Range);
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;

                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);

                                    }
                                }
                                else
                                {
                                    for (int y = 0; y < registros[x].ListaCelda.Count; y++)
                                    {
                                        if (registros[x].ListaCelda[y].EsNumero)
                                        {
                                            if (registros[x].ListaCelda[y].Valor != null)
                                            {
                                                if (registros[x].ListaCelda[y].DigitosParteDecimal > 0)
                                                {
                                                    int numDigitos = registros[x].ListaCelda[y].DigitosParteDecimal;
                                                    if (registros[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                                    {
                                                        numDigitos = MathHelper.GetDecimalPlaces(registros[x].ListaCelda[y].Valor.Value);
                                                        numDigitos = (numDigitos > registros[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registros[x].ListaCelda[y].DigitosParteDecimal;
                                                    }

                                                    if (registros[x].ListaCelda[y].EsNumeroTruncado)
                                                    {
                                                        registros[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                    }
                                                    if (registros[x].ListaCelda[y].EsNumeroRedondeado)
                                                    {
                                                        registros[x].ListaCelda[y].Valor = MathHelper.Round(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                    }

                                                    string strParteDecimal = string.Empty;
                                                    for (int i = 1; i <= numDigitos; i++) strParteDecimal += "0";
                                                    string strFormat = "#,##0." + strParteDecimal;

                                                    nfi.NumberDecimalDigits = numDigitos;
                                                }
                                                else
                                                {
                                                    string strFormat = "#,##0";

                                                    nfi.NumberDecimalDigits = 0;
                                                }
                                            }
                                            document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Valor == null ? "" : registros[x].ListaCelda[y].Valor.Value.ToString("N", nfi));
                                        }
                                        else
                                        {
                                            if (y == 3 || y == 4)
                                                document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Texto != null && registros[x].ListaCelda[y].Texto.Length > 8 ? registros[x].ListaCelda[y].Texto.Substring(registros[x].ListaCelda[y].Texto.Length - 8, 8) : "");
                                            else if(y == 0 || y == 1)
                                                document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Texto == null ? "" : registros[x].ListaCelda[y].Texto.ToUpper());
                                            else
                                                document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Texto == null ? "" : registros[x].ListaCelda[y].Texto);
                                        }

                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.6);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 8;
                                        CharacterPropertiesRangeCeli0.Bold = false;                                        
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSuministro[x + 1, y].Range);
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        
                                        if (y > 0)
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        else
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Left;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);

                                    }
                                }
                            }

                            #endregion

                        }

                        int IndexFinTablasSec12 = document.Paragraphs.ToList().Count();
                        _Parrafo12.RangeFinParrafo = IndexFinTablasSec12 - 1;
                        ListaParrafos.Add(_Parrafo12);
                    }

                    IndexFin12_2_1 = document.Paragraphs.ToList().Count() - 1;
                }

                int IndexIniReduccion12_3 = 0, IndexIniReduccion12_3_1 = 0;
                if (tablaReduccion.ListaRegistros.Count > 0)
                {
                    IndexIniReduccion12_3 = document.Paragraphs.ToList().Count();
                    ParrafoDTO _Parrafo12_3_b = new ParrafoDTO();
                    _Parrafo12_3_b.NroParrafo = IndexIniReduccion12_3 - 1;
                    _Parrafo12_3_b.RangeIniParrafo = IndexIniReduccion12_3 - 1;
                    _Parrafo12_3_b.RangeFinParrafo = IndexIniReduccion12_3 - 1;
                    ListaParrafos.Add(_Parrafo12_3_b);

                    int IndexIniReduccion12_2 = document.Paragraphs.ToList().Count();
                    DocumentPosition PosSecReduccion12_2 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSecReduccion12_2 = document.Paragraphs.Insert(PosSecReduccion12_2);
                    document.InsertText(PosSecReduccion12_2, "Reducción de carga:");
                    CharacterProperties CharacterPropertiesReduccion12_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniReduccion12_2].Range);
                    CharacterPropertiesReduccion12_2.Style = Estilo11;
                    document.EndUpdateCharacters(CharacterPropertiesReduccion12_2);

                    int IndexCabSeccion12_x = document.Paragraphs.ToList().Count();
                    ParrafoDTO _Parrafo12_x = new ParrafoDTO();
                    _Parrafo12_x.NroParrafo = IndexCabSeccion12_x;
                    _Parrafo12_x.RangeIniParrafo = IndexCabSeccion12_x;
                    _Parrafo12_x.RangeFinParrafo = IndexCabSeccion12_x;
                    ListaParrafos.Add(_Parrafo12_x);

                    int IndexIniReduccion12_2_1 = document.Paragraphs.ToList().Count();
                    DocumentPosition PosSecReduccion12_2_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSecReduccion12_2_1 = document.Paragraphs.Insert(PosSecReduccion12_2_1);
                    document.InsertText(PosSecReduccion12_2_1, "En estos casos no se interrumpe el suministro eléctrico en el punto de entrega; por lo tanto, de acuerdo con lo establecido en el numeral 6.1.2 de la NTCSE, no representan transgresiones a la calidad de suministro.");
                    CharacterProperties CharacterPropertiesReduccion12_2_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniReduccion12_2_1].Range);
                    CharacterPropertiesReduccion12_2_1.Style = Estilo14;
                    document.EndUpdateCharacters(CharacterPropertiesReduccion12_2_1);

                    IndexIniReduccion12_3_1 = document.Paragraphs.ToList().Count();
                    DocumentPosition PosSecReduccion12_3_1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSecReduccion12_3_1 = document.Paragraphs.Insert(PosSecReduccion12_3_1);
                    document.InsertText(PosSecReduccion12_3_1, "Las Reducciones de carga que se produjeron fueron las siguientes:");
                    CharacterProperties CharacterPropertiesReduccion12_3_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniReduccion12_3_1].Range);
                    CharacterPropertiesReduccion12_3_1.Style = Estilo14;
                    document.EndUpdateCharacters(CharacterPropertiesReduccion12_3_1);


                    List<RegistroReporte> registros = new List<RegistroReporte>();
                    List<RegistroReporte> registrosTotalesReducciones = new List<RegistroReporte>();
                    var codigosEventosReducciones = tablaReduccion.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();
                    registrosTotalesReducciones = tablaReduccion.ListaRegistros;

                    int IndexIniTablasSec12 = document.Paragraphs.ToList().Count();
                    ParrafoDTO _Parrafo12 = new ParrafoDTO();
                    _Parrafo12.NroParrafo = IndexIniTablasSec12;
                    _Parrafo12.RangeIniParrafo = IndexIniTablasSec12;

                    foreach (var item in codigosEventosReducciones)
                    {
                        registros = registrosTotalesReducciones.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                        if (codigosEventosReducciones.Count > 1)
                        {
                            int IndexCabEventoTabla = document.Paragraphs.ToList().Count();
                            DocumentPosition PosCabEventoTabRed = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParCabEventoRed = document.Paragraphs.Insert(PosCabEventoTabRed);
                            document.InsertText(PosCabEventoTabRed, registros[0].Nombre);
                            document.Paragraphs[IndexCabEventoTabla].Style = Estilo20;
                        }

                        int numFilas = registrosTotalesReducciones.Count + 1;
                        int numColumnas = tablaReduccion.CabeceraColumnas.Count;

                        DocumentPosition PostablaSuministro = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Table tablaSuministro = document.Tables.Create(PostablaSuministro, numFilas, numColumnas);
                        tablaSuministro.BeginUpdate();

                        #region Configuración Tabla
                        tablaSuministro.Style = EstiloTabla1;
                        tablaSuministro.PreferredWidthType = WidthType.Fixed;
                        tablaSuministro.PreferredWidth = Units.CentimetersToDocumentsF((float)18.5);
                        tablaSuministro.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                        tablaSuministro.VerticalAlignment = TableVerticalAlignment.None;
                        tablaSuministro.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                        tablaSuministro.TextWrappingType = TableTextWrappingType.Around;
                        tablaSuministro.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                        tablaSuministro.OffsetXRelative = Units.CentimetersToDocumentsF((float)-1.2);
                        tablaSuministro.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                        tablaSuministro.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                        tablaSuministro.MarginTop = Units.CentimetersToDocumentsF((float)0);
                        tablaSuministro.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSuministro[0, 0];
                        Cel00.PreferredWidthType = WidthType.Fixed;
                        Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)1.5);
                        Cel00.HeightType = HeightType.AtLeast;
                        Cel00.Height = Units.CentimetersToDocumentsF((float)0.5);
                        Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel00.BackgroundColor = Color.LightGray;
                        Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel00.TopPadding = 0;
                        Cel00.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSuministro[0, 0].Range);
                        ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel00.SpacingAfter = 0;
                        ParagraphPropertiesCel00.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                        CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaSuministro[0, 0].Range);
                        CharacterPropertiesCel00.Bold = true;
                        CharacterPropertiesCel00.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel00);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSuministro[0, 1];
                        Cel01.PreferredWidthType = WidthType.Auto;
                        Cel01.HeightType = HeightType.AtLeast;
                        Cel01.Height = Units.CentimetersToDocumentsF((float)0.5);
                        Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel01.BackgroundColor = Color.LightGray;
                        Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel01.TopPadding = 0;
                        Cel01.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSuministro[0, 1].Range);
                        ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel01.SpacingAfter = 0;
                        ParagraphPropertiesCel01.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                        CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaSuministro[0, 1].Range);
                        CharacterPropertiesCel01.Bold = true;
                        CharacterPropertiesCel01.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel01);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSuministro[0, 2];
                        Cel02.PreferredWidthType = WidthType.Auto;
                        Cel02.HeightType = HeightType.AtLeast;
                        Cel02.Height = Units.CentimetersToDocumentsF((float)0.5);
                        Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel02.BackgroundColor = Color.LightGray;
                        Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel02.TopPadding = 0;
                        Cel02.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSuministro[0, 2].Range);
                        ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel02.SpacingAfter = 0;
                        ParagraphPropertiesCel02.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                        CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaSuministro[0, 2].Range);
                        CharacterPropertiesCel02.Bold = true;
                        CharacterPropertiesCel02.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel02);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSuministro[0, 3];
                        Cel03.PreferredWidthType = WidthType.Auto;
                        Cel03.HeightType = HeightType.AtLeast;
                        Cel03.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel03.BackgroundColor = Color.LightGray;
                        Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel03.TopPadding = 0;
                        Cel03.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSuministro[0, 3].Range);
                        ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel03.SpacingAfter = 0;
                        ParagraphPropertiesCel03.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                        CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaSuministro[0, 3].Range);
                        CharacterPropertiesCel03.Bold = true;
                        CharacterPropertiesCel03.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel03);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaSuministro[0, 4];
                        Cel04.PreferredWidthType = WidthType.Auto;
                        Cel04.HeightType = HeightType.AtLeast;
                        Cel04.Height = Units.CentimetersToDocumentsF((float)0.5);
                        Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel04.BackgroundColor = Color.LightGray;
                        Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel04.TopPadding = 0;
                        Cel04.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaSuministro[0, 4].Range);
                        ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel04.SpacingAfter = 0;
                        ParagraphPropertiesCel04.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                        CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaSuministro[0, 4].Range);
                        CharacterPropertiesCel04.Bold = true;
                        CharacterPropertiesCel04.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel04);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaSuministro[0, 5];
                        Cel05.PreferredWidthType = WidthType.Auto;
                        Cel05.HeightType = HeightType.AtLeast;
                        Cel05.Height = Units.CentimetersToDocumentsF((float)0.5);
                        Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel05.BackgroundColor = Color.LightGray;
                        Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel05.TopPadding = 0;
                        Cel05.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaSuministro[0, 5].Range);
                        ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel05.SpacingAfter = 0;
                        ParagraphPropertiesCel05.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                        CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaSuministro[0, 5].Range);
                        CharacterPropertiesCel05.Bold = true;
                        CharacterPropertiesCel05.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel05);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel06 = tablaSuministro[0, 6];
                        Cel06.PreferredWidthType = WidthType.Auto;
                        Cel06.HeightType = HeightType.AtLeast;
                        Cel06.Height = Units.CentimetersToDocumentsF((float)0.5);
                        Cel06.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel06.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel06.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel06.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel06.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel06.BackgroundColor = Color.LightGray;
                        Cel06.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel06.TopPadding = 0;
                        Cel06.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel06 = document.BeginUpdateParagraphs(tablaSuministro[0, 6].Range);
                        ParagraphPropertiesCel06.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel06.SpacingAfter = 0;
                        ParagraphPropertiesCel06.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel06);
                        CharacterProperties CharacterPropertiesCel06 = document.BeginUpdateCharacters(tablaSuministro[0, 6].Range);
                        CharacterPropertiesCel06.Bold = true;
                        CharacterPropertiesCel06.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel06);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel07 = tablaSuministro[0, 7];
                        Cel07.PreferredWidthType = WidthType.Auto;
                        Cel07.HeightType = HeightType.AtLeast;
                        Cel07.Height = Units.CentimetersToDocumentsF((float)0.5);
                        Cel07.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel07.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel07.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel07.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel07.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel07.BackgroundColor = Color.LightGray;
                        Cel07.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel07.TopPadding = 0;
                        Cel07.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel07 = document.BeginUpdateParagraphs(tablaSuministro[0, 7].Range);
                        ParagraphPropertiesCel07.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel07.SpacingAfter = 0;
                        ParagraphPropertiesCel07.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel07);
                        CharacterProperties CharacterPropertiesCel07 = document.BeginUpdateCharacters(tablaSuministro[0, 7].Range);
                        CharacterPropertiesCel07.Bold = true;
                        CharacterPropertiesCel07.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel07);

                        tablaSuministro.Rows[0].RepeatAsHeaderRow = true;

                        #endregion

                        document.InsertText(tablaSuministro[0, 0].Range.Start, "SUMINISTRO");
                        document.InsertText(tablaSuministro[0, 1].Range.Start, "SUBESTACIÓN");
                        document.InsertText(tablaSuministro[0, 2].Range.Start, "DE (MW)");
                        document.InsertText(tablaSuministro[0, 3].Range.Start, "A (MW)");
                        document.InsertText(tablaSuministro[0, 4].Range.Start, "REDUCCIÓN (MW)");
                        document.InsertText(tablaSuministro[0, 5].Range.Start, "INICIO (HH:MM:SS)");
                        document.InsertText(tablaSuministro[0, 6].Range.Start, "FINAL (HH:MM:SS)");
                        document.InsertText(tablaSuministro[0, 7].Range.Start, "DURACIÓN (MIN)");

                        NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                        nfi.NumberGroupSeparator = " ";
                        nfi.NumberDecimalDigits = 3;
                        nfi.NumberDecimalSeparator = ",";

                        for (int x = 0; x < registros.Count; x++)
                        {
                            if (x == registros.Count - 1)
                            {
                                tablaSuministro.MergeCells(tablaSuministro[x + 1, 0], tablaSuministro[x + 1, 3]);

                                for (int y = 0; y < registros[x].ListaCelda.Count - 3; y++)
                                {
                                    if (registros[x].ListaCelda[y].EsNumero)
                                    {
                                        if (registros[x].ListaCelda[y].Valor != null)
                                        {
                                            if (registros[x].ListaCelda[y].DigitosParteDecimal > 0)
                                            {
                                                int numDigitos = registros[x].ListaCelda[y].DigitosParteDecimal;
                                                if (registros[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                                {
                                                    numDigitos = MathHelper.GetDecimalPlaces(registros[x].ListaCelda[y].Valor.Value);
                                                    numDigitos = (numDigitos > registros[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registros[x].ListaCelda[y].DigitosParteDecimal;
                                                }

                                                if (registros[x].ListaCelda[y].EsNumeroTruncado)
                                                {
                                                    registros[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                }
                                                if (registros[x].ListaCelda[y].EsNumeroRedondeado)
                                                {
                                                    registros[x].ListaCelda[y].Valor = MathHelper.Round(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                }

                                                string strParteDecimal = string.Empty;
                                                for (int i = 1; i <= numDigitos; i++) strParteDecimal += "0";
                                                string strFormat = "#,##0." + strParteDecimal;

                                                nfi.NumberDecimalDigits = numDigitos;
                                            }
                                            else
                                            {
                                                string strFormat = "#,##0";

                                                nfi.NumberDecimalDigits = 0;
                                            }
                                        }
                                        if(y == 4)
                                            document.InsertText(tablaSuministro[x + 1, y - 3].Range.Start, registros[x].ListaCelda[y].Valor == null ? "" : registros[x].ListaCelda[y].Valor.Value.ToString("N", nfi));
                                    }
                                    else if (y == 0)
                                        document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Texto == null ? "" : registros[x].ListaCelda[y].Texto);

                                    
                                    DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                    if (y > 1)
                                    {
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.None;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.None;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.5);
                                    }
                                    else
                                    {
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.5);

                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 8;
                                        CharacterPropertiesRangeCeli0.Bold = true;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSuministro[x + 1, y].Range);
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }


                                }
                            }
                            else
                            {
                                for (int y = 0; y < registros[x].ListaCelda.Count; y++)
                                {
                                    if (registros[x].ListaCelda[y].EsNumero)
                                    {
                                        if (registros[x].ListaCelda[y].Valor != null)
                                        {
                                            if (registros[x].ListaCelda[y].DigitosParteDecimal > 0)
                                            {
                                                int numDigitos = registros[x].ListaCelda[y].DigitosParteDecimal;
                                                if (registros[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                                {
                                                    numDigitos = MathHelper.GetDecimalPlaces(registros[x].ListaCelda[y].Valor.Value);
                                                    numDigitos = (numDigitos > registros[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registros[x].ListaCelda[y].DigitosParteDecimal;
                                                }

                                                if (registros[x].ListaCelda[y].EsNumeroTruncado)
                                                {
                                                    registros[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                }
                                                if (registros[x].ListaCelda[y].EsNumeroRedondeado)
                                                {
                                                    registros[x].ListaCelda[y].Valor = MathHelper.Round(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                }

                                                string strParteDecimal = string.Empty;
                                                for (int i = 1; i <= numDigitos; i++) strParteDecimal += "0";
                                                string strFormat = "#,##0." + strParteDecimal;

                                                nfi.NumberDecimalDigits = numDigitos;
                                            }
                                            else
                                            {
                                                string strFormat = "#,##0";

                                                nfi.NumberDecimalDigits = 0;
                                            }
                                        }
                                        document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Valor == null ? "" : registros[x].ListaCelda[y].Valor.Value.ToString("N", nfi));
                                    }
                                    else
                                        document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Texto == null ? "" : registros[x].ListaCelda[y].Texto);

                                    DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                    Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                    Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                    Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                    Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                    Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                    Celi0.Height = Units.CentimetersToDocumentsF((float)0.6);
                                    DocumentRange RangeCeli0 = Celi0.Range;
                                    CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                    CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                    CharacterPropertiesRangeCeli0.FontSize = 8;
                                    CharacterPropertiesRangeCeli0.Bold = false;
                                    document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                    ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSuministro[x + 1, y].Range);
                                    ParagraphPropertiesCeli0.SpacingAfter = 0;
                                    ParagraphPropertiesCeli0.SpacingBefore = 0;
                                    if (y > 0)
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                    else
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Left;
                                    document.EndUpdateParagraphs(ParagraphPropertiesCeli0);

                                }
                            }
                        }
                    }

                    int IndexFinTablasSec12 = document.Paragraphs.ToList().Count();
                    _Parrafo12.RangeFinParrafo = IndexFinTablasSec12;
                    ListaParrafos.Add(_Parrafo12);

                    IndexFin12_2_1 = document.Paragraphs.ToList().Count() - 1;

                }

                int IndexFinSec12_1 = document.Paragraphs.ToList().Count();

                #endregion

                #region Sección13: Observaciones

                int IndexSec12_Salto = document.Paragraphs.ToList().Count() - 1;
                ParrafoDTO _ParrSec12Salto = new ParrafoDTO();
                _ParrSec12Salto.NroParrafo = IndexSec12_Salto;
                _ParrSec12Salto.RangeIniParrafo = IndexSec12_Salto;
                _ParrSec12Salto.RangeFinParrafo = IndexSec12_Salto;
                ListaParrafos.Add(_ParrSec12Salto);

                int IndexSec12_Obsv = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec12Obsv = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12Obsv = document.Paragraphs.Insert(PosSec12Obsv);
                document.InsertText(PosSec12Obsv, "OBSERVACIONES:");
                document.Paragraphs[IndexSec12_Obsv].Style = Estilo24;
                //ParagraphProperties paragraphPropertiesObs = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec12_Obsv].Range);
                //paragraphPropertiesObs.LeftIndent = 384;
                //document.EndUpdateParagraphs(paragraphPropertiesObs);

                CharacterProperties CharacterProperties12Obs = document.BeginUpdateCharacters(document.Paragraphs[IndexSec12_Obsv].Range);
                CharacterProperties12Obs.Style = Estilo16;
                document.EndUpdateCharacters(CharacterProperties12Obs);

                int IndexFinSec12_1_Obs = 0, IndexSec12_1_ObsvDet = 0;
                int IndexSec12_1_Obsv = document.Paragraphs.ToList().Count();
                if (obj.ListaObservaciones != null && obj.ListaObservaciones.Count > 0)
                {
                    var idsEmpresas = obj.ListaObservaciones.Select(y => new { y.EMPRCODI }).Distinct().ToList();
                    int contador = 0;

                    foreach (var item in idsEmpresas)
                    {
                        bool band = false;

                        for (int x = 0; x < obj.ListaObservaciones.Count; x++)
                        {
                            if (item.EMPRCODI == obj.ListaObservaciones[x].EMPRCODI)
                            {
                                if (!band)
                                {
                                    int num_ = contador + 1;

                                    int IndexBoldSec12 = document.Paragraphs.ToList().Count();
                                    DocumentPosition PosSec12_1Obsv = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_1Obsv = document.Paragraphs.Insert(PosSec12_1Obsv);
                                    document.InsertText(PosSec12_1Obsv, obj.ListaObservaciones[x].EMPRNOMB);
                                    document.Paragraphs[IndexBoldSec12].Style = Estilo24;
                                    ParagraphProperties paragraphPropertiesObs_ = document.BeginUpdateParagraphs(document.Paragraphs[IndexBoldSec12].Range);
                                    paragraphPropertiesObs_.LeftIndent = 118;
                                    document.EndUpdateParagraphs(paragraphPropertiesObs_);
                                    CharacterProperties CharacterProperties12_1Obs = document.BeginUpdateCharacters(document.Paragraphs[IndexBoldSec12].Range);
                                    CharacterProperties12_1Obs.Bold = true;
                                    document.EndUpdateCharacters(CharacterProperties12_1Obs);

                                    contador++;
                                    band = true;
                                }

                                
                                IndexSec12_1_ObsvDet = document.Paragraphs.ToList().Count();
                                ParrafoDTO _ParrSec12Det = new ParrafoDTO();
                                _ParrSec12Det.NroParrafo = IndexSec12_1_ObsvDet;
                                _ParrSec12Det.RangeIniParrafo = IndexSec12_1_ObsvDet;
                                _ParrSec12Det.RangeFinParrafo = IndexSec12_1_ObsvDet;
                                ListaParBullets.Add(_ParrSec12Det);

                                DocumentPosition PosSec12_1ObsvDet = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_1ObsvDet = document.Paragraphs.Insert(PosSec12_1ObsvDet);
                                document.InsertText(PosSec12_1ObsvDet, obj.ListaObservaciones[x].EVERECOMOBSERVDESC);

                                document.Paragraphs[IndexSec12_1_ObsvDet].Style = Estilo27;

                                ParagraphProperties paragraphPropertiesBultObs = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec12_1_ObsvDet].Range);
                                paragraphPropertiesBultObs.LeftIndent = 300;
                                document.EndUpdateParagraphs(paragraphPropertiesBultObs);

                                CharacterProperties CarPropObsx = document.BeginUpdateCharacters(document.Paragraphs[IndexSec12_1_ObsvDet].Range);
                                CarPropObsx.Style = Estilo6;
                                document.EndUpdateCharacters(CarPropObsx);

                                //document.Paragraphs[IndexSec12_1_ObsvDet].Style = Estilo22;
                                //CharacterProperties CarPropRangoObsv = document.BeginUpdateCharacters(document.Paragraphs[IndexSec12_1_ObsvDet].Range);
                                //CarPropRangoObsv.Style = Estilo6;
                                //document.EndUpdateCharacters(CarPropRangoObsv);
                            }
                        }
                    }

                    IndexFinSec12_1_Obs = document.Paragraphs.ToList().Count();
                }
                else
                {
                    int IndexSec12_1_Ning = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParrSec12Ning = new ParrafoDTO();
                    _ParrSec12Ning.NroParrafo = IndexSec12_1_Ning;
                    _ParrSec12Ning.RangeIniParrafo = IndexSec12_1_Ning;
                    _ParrSec12Ning.RangeFinParrafo = IndexSec12_1_Ning;
                    ListaParrafos.Add(_ParrSec12Ning);

                    DocumentPosition PosSec12_ObsNing = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_1_Ning = document.Paragraphs.Insert(PosSec12_ObsNing);
                    document.InsertText(PosSec12_ObsNing, "Ninguna.");
                    //document.Paragraphs[IndexSec12_1_Ning].Style = Estilo24;
                    ParagraphProperties paragraphPropertiesObs_Ning = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec12_1_Ning].Range);
                    paragraphPropertiesObs_Ning.LeftIndent = 118;
                    document.EndUpdateParagraphs(paragraphPropertiesObs_Ning);

                    CharacterProperties CharacterProperties12_1_Ning = document.BeginUpdateCharacters(document.Paragraphs[IndexSec12_1_Ning].Range);
                    CharacterProperties12_1_Ning.Style = Estilo14;
                    document.EndUpdateCharacters(CharacterProperties12_1_Ning);
                }

                #endregion

                #region Sección14: Recomendaciones

                int IndexSec13 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec13 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec13 = document.Paragraphs.Insert(PosSec13);
                document.InsertText(PosSec13, "RECOMENDACIONES:");
                document.Paragraphs[IndexSec13].Style = Estilo24;
                ParagraphProperties paragraphPropertiesRec = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec13].Range);
                paragraphPropertiesRec.LeftIndent = 118;
                document.EndUpdateParagraphs(paragraphPropertiesRec);

                CharacterProperties CharacterProperties13 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec13].Range);
                CharacterProperties13.Bold = true;
                document.EndUpdateCharacters(CharacterProperties13);

                int IndexIniRec = 0, IndexFinRec = 0, IndexSecRec_x = 0;
                if (obj.ListaEveRecomobserv == null)
                {
                    int IndexSec13_Ning = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParrSec13Ning = new ParrafoDTO();
                    _ParrSec13Ning.NroParrafo = IndexSec13_Ning;
                    _ParrSec13Ning.RangeIniParrafo = IndexSec13_Ning;
                    _ParrSec13Ning.RangeFinParrafo = IndexSec13_Ning;
                    ListaParrafos.Add(_ParrSec13Ning);

                    DocumentPosition PosSec13_Ning = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec13_Ning = document.Paragraphs.Insert(PosSec13_Ning);
                    document.InsertText(PosSec13_Ning, "Ninguna.");
                    document.Paragraphs[IndexSec13_Ning].Style = Estilo24;
                    //ParagraphProperties paragraphPropertiesRec_Ning = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec13_Ning].Range);
                    //paragraphPropertiesRec_Ning.LeftIndent = 118;
                    //document.EndUpdateParagraphs(paragraphPropertiesRec_Ning);

                    CharacterProperties CharacterProperties13_Ning = document.BeginUpdateCharacters(document.Paragraphs[IndexSec13_Ning].Range);
                    CharacterProperties13_Ning.Style = Estilo14;
                    document.EndUpdateCharacters(CharacterProperties13_Ning);
                }
                else if (obj.ListaEveRecomobserv.Count == 0)
                {
                    int IndexSec13_Ning = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParrSec13Ning = new ParrafoDTO();
                    _ParrSec13Ning.NroParrafo = IndexSec13_Ning;
                    _ParrSec13Ning.RangeIniParrafo = IndexSec13_Ning;
                    _ParrSec13Ning.RangeFinParrafo = IndexSec13_Ning;
                    ListaParrafos.Add(_ParrSec13Ning);

                    DocumentPosition PosSec13_Ning = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec13_Ning = document.Paragraphs.Insert(PosSec13_Ning);
                    document.InsertText(PosSec13_Ning, "Ninguna.");
                    document.Paragraphs[IndexSec13_Ning].Style = Estilo24;
                    //ParagraphProperties paragraphPropertiesRec_Ning = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec13_Ning].Range);
                    //paragraphPropertiesRec_Ning.LeftIndent = 118;
                    //document.EndUpdateParagraphs(paragraphPropertiesRec_Ning);
                    CharacterProperties CharacterProperties13_Ning = document.BeginUpdateCharacters(document.Paragraphs[IndexSec13_Ning].Range);
                    CharacterProperties13_Ning.Style = Estilo14;
                    document.EndUpdateCharacters(CharacterProperties13_Ning);
                }
                else if (obj.ListaEveRecomobserv.Count > 0)
                {
                    int contadorRec = 0;

                    var idsEmpresasRec = obj.ListaEveRecomobserv.Select(y => new { y.EMPRCODI }).Distinct().ToList();

                    IndexIniRec = document.Paragraphs.ToList().Count();
                    foreach (var item in idsEmpresasRec)
                    {
                        bool band = false;

                        for (int x = 0; x < obj.ListaEveRecomobserv.Count; x++)
                        {
                            if (item.EMPRCODI == obj.ListaEveRecomobserv[x].EMPRCODI)
                            {
                                if (!band)
                                {
                                    int num = contadorRec + 1;

                                    int IndexBoldSecRec = document.Paragraphs.ToList().Count();
                                    DocumentPosition PosSecRec = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSecRec = document.Paragraphs.Insert(PosSecRec);
                                    document.InsertText(PosSecRec, $"CTAF A {obj.ListaEveRecomobserv[x].EMPRNOMB.TrimStart().TrimEnd()}");

                                    ParagraphProperties paragraphPropertiesRec_ = document.BeginUpdateParagraphs(document.Paragraphs[IndexBoldSecRec].Range);
                                    paragraphPropertiesRec_.LeftIndent = 118;
                                    document.EndUpdateParagraphs(paragraphPropertiesRec_);

                                    CharacterProperties CharacterPropertiesRec = document.BeginUpdateCharacters(document.Paragraphs[IndexBoldSecRec].Range);
                                    CharacterPropertiesRec.Bold = true;
                                    document.EndUpdateCharacters(CharacterPropertiesRec);

                                    contadorRec++;
                                    band = true;
                                }

                                IndexSecRec_x = document.Paragraphs.ToList().Count();
                                ParrafoDTO _ParrSecRec_x = new ParrafoDTO();
                                _ParrSecRec_x.NroParrafo = IndexSecRec_x;
                                _ParrSecRec_x.RangeIniParrafo = IndexSecRec_x;
                                _ParrSecRec_x.RangeFinParrafo = IndexSecRec_x;
                                ListaParBullets.Add(_ParrSecRec_x);

                                DocumentPosition PosSecRec_x = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecRec_x = document.Paragraphs.Insert(PosSecRec_x);
                                document.InsertText(PosSecRec_x, obj.ListaEveRecomobserv[x].EVERECOMOBSERVDESC);

                                ParagraphProperties paragraphPropertiesBultRec = document.BeginUpdateParagraphs(document.Paragraphs[IndexSecRec_x].Range);
                                paragraphPropertiesBultRec.LeftIndent = 300;
                                document.EndUpdateParagraphs(paragraphPropertiesBultRec);

                                CharacterProperties CarPropRecX = document.BeginUpdateCharacters(document.Paragraphs[IndexSecRec_x].Range);
                                CarPropRecX.Style = Estilo6;
                                document.EndUpdateCharacters(CarPropRecX);

                            }
                        }
                    }

                    IndexFinRec = document.Paragraphs.ToList().Count();
                }

                #endregion

                #region Anexo

                int contFootnes = 0;
                int IndexSecAnexo = document.Paragraphs.ToList().Count();
                ParrafoDTO _ParrSec13Anexo = new ParrafoDTO();
                _ParrSec13Anexo.NroParrafo = IndexSecAnexo;
                _ParrSec13Anexo.RangeIniParrafo = IndexSecAnexo;
                
                DocumentPosition PosSecAnexo = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecAnexo = document.Paragraphs.Insert(PosSecAnexo);
                document.InsertText(PosSecAnexo, "ANEXO");
                document.Paragraphs[IndexSecAnexo].Style = Estilo21;
                ParagraphProperties paragraphPropertiesAnex = document.BeginUpdateParagraphs(document.Paragraphs[IndexSecAnexo].Range);
                paragraphPropertiesAnex.LeftIndent = 0;
                document.EndUpdateParagraphs(paragraphPropertiesAnex);
                CharacterProperties CharacterPropertiesAnexo = document.BeginUpdateCharacters(document.Paragraphs[IndexSecAnexo].Range);
                CharacterPropertiesAnexo.Style = Estilo15;
                document.EndUpdateCharacters(CharacterPropertiesAnexo);

                int IndexSecAnexo1 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSecAnexo1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecAnexo1 = document.Paragraphs.Insert(PosSecAnexo1);
                document.InsertText(PosSecAnexo1, "Secuencia Cronológica");
                document.Paragraphs[IndexSecAnexo1].Style = Estilo21;
                CharacterProperties CharacterPropertiesAnexo1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecAnexo1].Range);
                CharacterPropertiesAnexo1.Style = Estilo16;
                document.EndUpdateCharacters(CharacterPropertiesAnexo1);

                if (obj.ListaInformeCtaf == null)
                {
                    int IndexAnexoNing = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParrAnexoNing = new ParrafoDTO();
                    _ParrAnexoNing.NroParrafo = IndexAnexoNing;
                    _ParrAnexoNing.RangeIniParrafo = IndexAnexoNing;
                    _ParrAnexoNing.RangeFinParrafo = IndexAnexoNing;
                    ListaParrafos.Add(_ParrAnexoNing);

                    DocumentPosition PosAnexoNing = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParAnexoNing = document.Paragraphs.Insert(PosAnexoNing);
                    document.InsertText(PosAnexoNing, "No Registrado.");
                    document.Paragraphs[IndexAnexoNing].Style = Estilo18;
                    CharacterProperties CharacterPropertiesAnexoNing = document.BeginUpdateCharacters(document.Paragraphs[IndexAnexoNing].Range);
                    CharacterPropertiesAnexoNing.Style = Estilo14;
                    document.EndUpdateCharacters(CharacterPropertiesAnexoNing);
                }
                else
                {
                    if (obj.ListaInformeCtaf.Count == 0)
                    {
                        int IndexAnexoNing = document.Paragraphs.ToList().Count();
                        ParrafoDTO _ParrAnexoNing = new ParrafoDTO();
                        _ParrAnexoNing.NroParrafo = IndexAnexoNing;
                        _ParrAnexoNing.RangeIniParrafo = IndexAnexoNing;
                        _ParrAnexoNing.RangeFinParrafo = IndexAnexoNing;
                        ListaParrafos.Add(_ParrAnexoNing);

                        DocumentPosition PosAnexoNing = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParAnexoNing = document.Paragraphs.Insert(PosAnexoNing);
                        document.InsertText(PosAnexoNing, "No Registrado.");
                        document.Paragraphs[IndexAnexoNing].Style = Estilo18;
                        CharacterProperties CharacterPropertiesAnexoNing = document.BeginUpdateCharacters(document.Paragraphs[IndexAnexoNing].Range);
                        CharacterPropertiesAnexoNing.Style = Estilo14;
                        document.EndUpdateCharacters(CharacterPropertiesAnexoNing);
                    }
                    else
                    {
                        int contFilas = 0;
                        foreach (var itemSec in obj.ListaInformeCtaf)
                        {
                            int nro = itemSec.listaSecuenciaEvento.Count() == 0 ? 1 : itemSec.listaSecuenciaEvento.Count();
                            contFilas += nro + 1;
                        }

                        int rowsAnexo = contFilas + 1;
                        DocumentPosition PostablaAnexo = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Table tablaAnexo = document.Tables.Create(PostablaAnexo, rowsAnexo, 3);
                        tablaAnexo.BeginUpdate();

                        #region Configuración tabla

                        tablaAnexo.Style = EstiloTabla1;
                        tablaAnexo.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                        tablaAnexo.VerticalAlignment = TableVerticalAlignment.None;
                        tablaAnexo.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                        tablaAnexo.TextWrappingType = TableTextWrappingType.Around;
                        tablaAnexo.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                        tablaAnexo.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                        tablaAnexo.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                        tablaAnexo.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                        tablaAnexo.MarginTop = Units.CentimetersToDocumentsF((float)0);
                        tablaAnexo.MarginRight = Units.CentimetersToDocumentsF((float)0.25);
                        tablaAnexo.PreferredWidthType = WidthType.Fixed;
                        tablaAnexo.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                        DevExpress.XtraRichEdit.API.Native.TableCell CelAnexo00 = tablaAnexo[0, 0];
                        CelAnexo00.PreferredWidthType = WidthType.Fixed;
                        CelAnexo00.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                        CelAnexo00.HeightType = HeightType.Exact;
                        CelAnexo00.Height = Units.CentimetersToDocumentsF((float)0.8);
                        CelAnexo00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo00.VerticalAlignment = TableCellVerticalAlignment.Center;
                        CelAnexo00.BackgroundColor = Color.LightGray;
                        CelAnexo00.TopPadding = 0;
                        CelAnexo00.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCelAnex00 = document.BeginUpdateParagraphs(tablaAnexo[0, 0].Range);
                        ParagraphPropertiesCelAnex00.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCelAnex00.SpacingAfter = 0;
                        ParagraphPropertiesCelAnex00.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCelAnex00);
                        CharacterProperties CharacterPropertiesCelAnex00 = document.BeginUpdateCharacters(tablaAnexo[0, 0].Range);
                        CharacterPropertiesCelAnex00.Bold = true;
                        CharacterPropertiesCelAnex00.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCelAnex00);

                        DevExpress.XtraRichEdit.API.Native.TableCell CelAnexo01 = tablaAnexo[0, 1];
                        CelAnexo01.PreferredWidthType = WidthType.Fixed;
                        CelAnexo01.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                        CelAnexo01.HeightType = HeightType.Exact;
                        CelAnexo01.Height = Units.CentimetersToDocumentsF((float)0.8);
                        CelAnexo01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo01.VerticalAlignment = TableCellVerticalAlignment.Center;
                        CelAnexo01.BackgroundColor = Color.LightGray;
                        CelAnexo01.TopPadding = 0;
                        CelAnexo01.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCelAnex01 = document.BeginUpdateParagraphs(tablaAnexo[0, 1].Range);
                        ParagraphPropertiesCelAnex01.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCelAnex01.SpacingAfter = 0;
                        ParagraphPropertiesCelAnex01.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCelAnex01);
                        CharacterProperties CharacterPropertiesCelAnex01 = document.BeginUpdateCharacters(tablaAnexo[0, 1].Range);
                        CharacterPropertiesCelAnex01.Bold = true;
                        CharacterPropertiesCelAnex01.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCelAnex01);

                        DevExpress.XtraRichEdit.API.Native.TableCell CelAnexo02 = tablaAnexo[0, 2];
                        CelAnexo02.PreferredWidthType = WidthType.Fixed;
                        CelAnexo02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                        CelAnexo02.HeightType = HeightType.Exact;
                        CelAnexo02.Height = Units.CentimetersToDocumentsF((float)0.8);
                        CelAnexo02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo02.VerticalAlignment = TableCellVerticalAlignment.Center;
                        CelAnexo02.BackgroundColor = Color.LightGray;
                        CelAnexo02.TopPadding = 0;
                        CelAnexo02.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCelAnex02 = document.BeginUpdateParagraphs(tablaAnexo[0, 2].Range);
                        ParagraphPropertiesCelAnex02.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCelAnex02.SpacingAfter = 0;
                        ParagraphPropertiesCelAnex02.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCelAnex02);
                        CharacterProperties CharacterPropertiesCelAnex02 = document.BeginUpdateCharacters(tablaAnexo[0, 2].Range);
                        CharacterPropertiesCelAnex02.Bold = true;
                        CharacterPropertiesCelAnex02.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCelAnex02);

                        tablaAnexo.Rows[0].RepeatAsHeaderRow = true;

                        #endregion

                        document.InsertText(tablaAnexo[0, 0].Range.Start, "Hora");
                        document.InsertText(tablaAnexo[0, 1].Range.Start, "S.E. / C.C.");
                        document.InsertText(tablaAnexo[0, 2].Range.Start, "Descripción");

                        int fila = 1;
                        List<EmpresaReporte> lstEmpresasCC =  servAF.ObtenerListadoConfiguracionEmpresaComboBox();
                        foreach (var itemSecuenciaEvento in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                        {
                            tablaAnexo.MergeCells(tablaAnexo[fila, 0], tablaAnexo[fila, 2]);
                            DevExpress.XtraRichEdit.API.Native.TableCell CelAnexofila2 = tablaAnexo[fila, 0];
                            CelAnexofila2.PreferredWidthType = WidthType.Fixed;
                            CelAnexofila2.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                            CelAnexofila2.HeightType = HeightType.Exact;
                            CelAnexofila2.Height = Units.CentimetersToDocumentsF((float)0.5);
                            CelAnexofila2.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            CelAnexofila2.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            CelAnexofila2.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            CelAnexofila2.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            CelAnexofila2.VerticalAlignment = TableCellVerticalAlignment.Center;
                            CelAnexofila2.BackgroundColor = Color.FromArgb(176, 198, 246);
                            CelAnexofila2.TopPadding = 0;
                            CelAnexofila2.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCelAnexFila2 = document.BeginUpdateParagraphs(tablaAnexo[fila, 0].Range);
                            ParagraphPropertiesCelAnexFila2.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCelAnexFila2.SpacingAfter = 0;
                            ParagraphPropertiesCelAnexFila2.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCelAnexFila2);
                            CharacterProperties CharacterPropertiesCelFila2 = document.BeginUpdateCharacters(tablaAnexo[fila, 0].Range);
                            CharacterPropertiesCelFila2.Bold = true;
                            CharacterPropertiesCelFila2.Underline = UnderlineType.None;
                            document.EndUpdateCharacters(CharacterPropertiesCelFila2);

                            document.InsertText(tablaAnexo[fila, 0].Range.Start, itemSecuenciaEvento.CabNombreEvento);
                            fila++;

                            
                            if (itemSecuenciaEvento.listaSecuenciaEvento.Count == 0)
                            {                                   
                                tablaAnexo.MergeCells(tablaAnexo[fila, 0], tablaAnexo[fila, 2]);
                                document.InsertText(tablaAnexo[fila, 0].Range.Start, "No Registrado.");
                                DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaAnexo[fila, 0];
                                Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                DocumentRange RangeCeli0 = Celi0.Range;
                                CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                CharacterPropertiesRangeCeli0.FontSize = 11;
                                CharacterPropertiesRangeCeli0.Bold = false;
                                CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaAnexo[fila, 0].Range);
                                ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCeli0.SpacingAfter = 0;
                                ParagraphPropertiesCeli0.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                fila++;
                            }
                            else
                            {
                                
                                for (int i = 0; i < itemSecuenciaEvento.listaSecuenciaEvento.Count; i++)
                                {
                                    string fecha_ = string.Empty;
                                    int valorms = 0;
                                    if (itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Length > 8)
                                    {
                                        valorms = Convert.ToInt32(itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(9, 3));
                                        if (valorms > 0)
                                            fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;
                                        else
                                            fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(0, 8);
                                    }
                                    else
                                        fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;


                                    document.InsertText(tablaAnexo[fila, 0].Range.Start, fecha_);
                                    document.InsertText(tablaAnexo[fila, 1].Range.Start, itemSecuenciaEvento.listaSecuenciaEvento[i].D1.ToString());
                                    document.InsertText(tablaAnexo[fila, 2].Range.Start, itemSecuenciaEvento.listaSecuenciaEvento[i].SEDESCRIP.ToString());

                                    for (int x = 0; x <= 2; x++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaAnexo[fila, x];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaAnexo[fila, x].Range);
                                        if(x == 2)
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Justify;
                                        else
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;

                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                    #region Nota al pie1
                                    EmpresaReporte _empresa = new EmpresaReporte();                               
                                    if (itemSecuenciaEvento.listaSecuenciaEvento[i].D1 == "CCO-COES")
                                        _empresa.EmpresaSICCOES = "CENTRO DE CONTROL COES";
                                    else
                                        _empresa = lstEmpresasCC.Where(x => x.CodigoOsinergmin == itemSecuenciaEvento.listaSecuenciaEvento[i].D1).FirstOrDefault();

                                    if (_empresa != null)
                                    {
                                        DocumentPosition posNotaPie = document.CreatePosition(tablaAnexo[fila, 1].Range.End.ToInt() - 1);
                                        document.Footnotes.Insert(posNotaPie);
                                        SubDocument footnote = document.Footnotes[contFootnes].BeginUpdate();

                                        footnote.AppendText(itemSecuenciaEvento.listaSecuenciaEvento[i].D1 + " : " + _empresa.EmpresaSICCOES);

                                        ParagraphProperties paragraphPropertiesfootnote1 = footnote.BeginUpdateParagraphs(footnote.Range);
                                        paragraphPropertiesfootnote1.Alignment = ParagraphAlignment.Justify;
                                        footnote.EndUpdateParagraphs(paragraphPropertiesfootnote1);
                                        CharacterProperties characterPropertiesfootnote1 = footnote.BeginUpdateCharacters(footnote.Range);
                                        characterPropertiesfootnote1.FontName = "Calibri";
                                        characterPropertiesfootnote1.FontSize = 9;
                                        footnote.EndUpdateCharacters(characterPropertiesfootnote1);

                                        document.Footnotes[contFootnes].EndUpdate(footnote);
                                        contFootnes++;
                                    }
                                        

                                    #endregion

                                    fila++;
                                }

                                //for (int j = 0; j < contFootnes; j++)
                                //{
                                //    SubDocument footnote = document.Footnotes[j].BeginUpdate();

                                //    footnote.AppendText("CC-CCN : CONCESIONARIA LINEA DE TRANSMISION CCNCM S.A.C.");
                                //    document.Footnotes[j].EndUpdate(footnote);
                                //}
                            }
                                           
                        }

                    }
                }

                



                int IndexFinSecAnexo = document.Paragraphs.ToList().Count();
                _ParrSec13Anexo.RangeFinParrafo = IndexFinSecAnexo;
                ListaParrafos.Add(_ParrSec13Anexo);

                #endregion

                document.EndUpdate();

                document.BeginUpdate();

                #region Insertar Numeración

                DocumentRange rangeLevel0 = document.CreateRange(document.Sections[1].Paragraphs[0].Range.Start, document.Sections[1].Range.End.ToInt() - document.Sections[1].Paragraphs[0].Range.Start.ToInt());
                document.Paragraphs.AddParagraphsToList(rangeLevel0, ListaNumeros0, 0);

                DocumentRange rangeLevel1 = document.CreateRange(document.Paragraphs[posParLevel1Sec7].Range.Start, document.Paragraphs[posParLevel1Sec7].Range.End.ToInt() - document.Paragraphs[posParLevel1Sec7].Range.Start.ToInt());
                document.Paragraphs.AddParagraphsToList(rangeLevel1, ListaNumeros0, 1);

                DocumentRange rangeLevel2 = document.CreateRange(document.Paragraphs[posIniParLevel1Sec7_1_1].Range.Start, document.Paragraphs[posDetFinSeccion7 - 1].Range.End.ToInt() - document.Paragraphs[posIniParLevel1Sec7_1_1].Range.Start.ToInt());
                document.Paragraphs.AddParagraphsToList(rangeLevel2, ListaNumeros0, 2);

                if (posIniParLevel4Sec10_1 > 0 && posFinParLevel4Sec10_1 > 0)
                {
                    DocumentRange rangeLevel3 = document.CreateRange(document.Paragraphs[posIniParLevel4Sec10_1].Range.Start, document.Paragraphs[posFinParLevel4Sec10_1 - 1].Range.End.ToInt() - document.Paragraphs[posIniParLevel4Sec10_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel3, ListaNumeros0, 1);
                }

                if (IndexIniSeccion11_1 > 0 && IndexFinSeccion11_1 > 0)
                {
                    DocumentRange rangeLevel4 = document.CreateRange(document.Paragraphs[IndexIniSeccion11_1].Range.Start, document.Paragraphs[IndexFinSeccion11_1 - 1].Range.End.ToInt() - document.Paragraphs[IndexIniSeccion11_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel4, ListaNumeros0, 1);
                }

                if (IndexIniSec12_1 > 0 && IndexFinSec12_1 > 0)
                {
                    DocumentRange rangeLevel5 = document.CreateRange(document.Paragraphs[IndexIniSec12_1].Range.Start, document.Paragraphs[IndexFinSec12_1 - 1].Range.End.ToInt() - document.Paragraphs[IndexIniSec12_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel5, ListaNumeros0, 1);
                }

                if (IndexIni12_2_1 > 0 && IndexFin12_2_1 > 0)
                {
                    DocumentRange rangeLevel6 = document.CreateRange(document.Paragraphs[IndexIni12_2_1].Range.Start, document.Paragraphs[IndexFin12_2_1 - 1].Range.End.ToInt() - document.Paragraphs[IndexIni12_2_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel6, ListaNumeros0, 2);
                }

                if (IndexIniReduccion12_3 > 0)
                    document.Paragraphs.AddParagraphsToList(document.Paragraphs[IndexIniReduccion12_3].Range, ListaNumeros0, 1);

                if (IndexIniReduccion12_3_1 > 0)
                    document.Paragraphs.AddParagraphsToList(document.Paragraphs[IndexIniReduccion12_3_1].Range, ListaNumeros0, 2);

                if (IndexSec12_1_Obsv > 0 && IndexFinSec12_1_Obs > 0)
                {
                    DocumentRange rangeLevel7 = document.CreateRange(document.Paragraphs[IndexSec12_1_Obsv].Range.Start, document.Paragraphs[IndexFinSec12_1_Obs - 1].Range.End.ToInt() - document.Paragraphs[IndexSec12_1_Obsv].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel7, ListaNumeros0, 1);
                }

                if (IndexIniRec > 0 && IndexFinRec > 0)
                {
                    DocumentRange rangeLevel7 = document.CreateRange(document.Paragraphs[IndexIniRec].Range.Start, document.Paragraphs[IndexFinRec - 1].Range.End.ToInt() - document.Paragraphs[IndexIniRec].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel7, ListaNumeros0, 1);
                }

                foreach (ParrafoDTO item in ListaParBullets)
                {
                    DocumentRange rangeParSeccionBul = document.CreateRange(document.Paragraphs[item.RangeIniParrafo].Range.Start, document.Paragraphs[item.RangeFinParrafo - 1].Range.End.ToInt() - document.Paragraphs[item.RangeIniParrafo].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeParSeccionBul, ListBullet1, 0);
                }

                #endregion

                #region Remover numeración

                int CantSeccion5 = 0, CantSeccion6 = 0, CantSeccion7 = 0; 
                ParagraphCollection paragraphs = document.Paragraphs;
                foreach (DevExpress.XtraRichEdit.API.Native.Paragraph pgf in paragraphs)
                {
                    if (pgf.Index >= posParPreTablaSeccion5 && pgf.Index < posParPostTablaSeccion5)
                        CantSeccion5 += pgf.Range.Length;

                    if (pgf.Index >= posParInicioEventosSeccion6 && pgf.Index < posParFinalEventosSeccion6)
                        CantSeccion6 += pgf.Range.Length;

                }
                DocumentRange rangeTablaSeccion5 = document.CreateRange(document.Paragraphs[posParPreTablaSeccion5].Range.Start, CantSeccion5);
                document.Paragraphs.RemoveNumberingFromParagraphs(rangeTablaSeccion5);

                DocumentRange rangeSeccion6 = document.CreateRange(document.Paragraphs[posParInicioEventosSeccion6].Range.Start, CantSeccion6);
                document.Paragraphs.RemoveNumberingFromParagraphs(rangeSeccion6);

                DocumentRange rangeSeccion7 = document.CreateRange(document.Paragraphs[posIniParLevel1Sec7_1_1].Range.Start, CantSeccion7);
                document.Paragraphs.RemoveNumberingFromParagraphs(document.Paragraphs[posIniParLevel1Sec7_1_1].Range);

                foreach (ParrafoDTO item in ListaParrafos)
                {
                    DocumentRange rangeParSeccion7 = document.CreateRange(document.Paragraphs[item.RangeIniParrafo].Range.Start, document.Paragraphs[item.RangeFinParrafo - 1].Range.End.ToInt() - document.Paragraphs[item.RangeIniParrafo].Range.Start.ToInt());
                    document.Paragraphs.RemoveNumberingFromParagraphs(rangeParSeccion7);
                }

                foreach (int itemShape in ListaIndexShapes)
                {
                    document.Paragraphs.RemoveNumberingFromParagraphs(document.Shapes[itemShape].Range);
                }

                #endregion

                
                document.EndUpdate();

                MemoryStream ms = new MemoryStream();
                wordProcessor.SaveDocument(ms, DocumentFormat.OpenXml);
                bytes = ms.ToArray();
                ms.Dispose();
                ms.Close();

                FileServer.CreateFolder(null, null, fileword);
                wordProcessor.SaveDocument(fileword + fileReporte, DocumentFormat.OpenXml);
                wordProcessor.Dispose();

            }
            return bytes;
        }

        public byte[] GenerarActaCTAF2(Models.AnalisisFallasModel obj, string fileserver, string rutaSev, string filename)
        {
            bool presencial = false;

            if (obj.LstEvento.Count > 0)
            {
                if (obj.LstEvento[0].EVENTIPOFALLA == "P")
                {
                    presencial = true;
                }
                else
                {
                    presencial = false;
                }
            }

            byte[] bytes = new byte[0];

            using (var wordProcessor = new RichEditDocumentServer())
            {
                var Logo = Server.MapPath("~/Content/Images/logo2024.png");
                List<ParrafoDTO> ListaParrafos = new List<ParrafoDTO>();
                Document document = wordProcessor.Document;

                document.BeginUpdate();
                DevExpress.XtraRichEdit.API.Native.Section firstSection = document.Sections[0];

                #region Configuración Página

                firstSection.Margins.Top = Units.CentimetersToDocumentsF((float)2.51);
                firstSection.Margins.Bottom = Units.CentimetersToDocumentsF((float)2.51);
                firstSection.Margins.Right = Units.CentimetersToDocumentsF((float)2.51);
                firstSection.Margins.Left = Units.CentimetersToDocumentsF((float)3);
                firstSection.Page.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;

                #endregion

                #region Lista Numeración

                AbstractNumberingList ListNumeracion = document.AbstractNumberingLists.Add();
                ListNumeracion.NumberingType = NumberingType.MultiLevel;

                #region Nivel0
                ListLevel level = ListNumeracion.Levels[0];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                level.ParagraphProperties.LeftIndent = 118;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = true;
                level.Start = 1;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "{0}.";

                #endregion

                #region Nivel1
                level = ListNumeracion.Levels[1];
                level.ParagraphProperties.SpacingBefore = 27;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                level.ParagraphProperties.LeftIndent = 118;
                level.Start = 1;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "1.{1}";
                #endregion

                #region Nivel1
                level = ListNumeracion.Levels[2];
                level.ParagraphProperties.SpacingBefore = 27;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                level.ParagraphProperties.LeftIndent = 118;
                level.Start = 1;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "2.{2}";
                #endregion

                NumberingList ListaNumeros0 = document.NumberingLists.Add(0);

                #endregion

                #region Estilos

                #region Caracteres

                CharacterStyle Estilo1 = document.CharacterStyles["Estilo1"];
                if (Estilo1 == null)
                {
                    Estilo1 = document.CharacterStyles.CreateNew();
                    Estilo1.Name = "Estilo1";
                    Estilo1.Bold = true;
                    Estilo1.FontName = "Calibri";
                    Estilo1.FontSize = 10;
                    document.CharacterStyles.Add(Estilo1);
                }

                CharacterStyle EstiloC2 = document.CharacterStyles["EstiloC2"];
                if (EstiloC2 == null)
                {
                    EstiloC2 = document.CharacterStyles.CreateNew();
                    EstiloC2.Name = "EstiloC2";
                    EstiloC2.Bold = true;
                    EstiloC2.FontName = "Calibri";
                    EstiloC2.FontSize = 14;
                    document.CharacterStyles.Add(EstiloC2);
                }

                CharacterStyle EstiloC3 = document.CharacterStyles["EstiloC3"];
                if (EstiloC3 == null)
                {
                    EstiloC3 = document.CharacterStyles.CreateNew();
                    EstiloC3.Name = "EstiloC3";
                    EstiloC3.Bold = false;
                    EstiloC3.FontName = "Calibri";
                    EstiloC3.FontSize = 11;
                    document.CharacterStyles.Add(EstiloC3);
                }

                #endregion

                #region Párrafos

                ParagraphStyle EstiloP1 = document.ParagraphStyles["EstiloP1"];
                if (EstiloP1 == null)
                {
                    EstiloP1 = document.ParagraphStyles.CreateNew();
                    EstiloP1.Name = "EstiloP1";
                    EstiloP1.FontName = "Calibri";
                    EstiloP1.Bold = true;
                    EstiloP1.FontSize = 10;
                    EstiloP1.Alignment = ParagraphAlignment.Center;
                    EstiloP1.SpacingBefore = 0;
                    EstiloP1.SpacingAfter = 0;
                    document.ParagraphStyles.Add(EstiloP1);
                }

                ParagraphStyle EstiloP2 = document.ParagraphStyles["EstiloP2"];
                if (EstiloP2 == null)
                {
                    EstiloP2 = document.ParagraphStyles.CreateNew();
                    EstiloP2.Name = "EstiloP2";
                    EstiloP2.FontName = "Calibri";
                    EstiloP2.Bold = true;
                    EstiloP2.FontSize = 14;
                    EstiloP2.Alignment = ParagraphAlignment.Center;
                    EstiloP2.SpacingBefore = 0;
                    EstiloP2.SpacingAfter = 0;
                    document.ParagraphStyles.Add(EstiloP2);
                }

                ParagraphStyle EstiloP3 = document.ParagraphStyles["EstiloP3"];
                if (EstiloP3 == null)
                {
                    EstiloP3 = document.ParagraphStyles.CreateNew();
                    EstiloP3.Name = "EstiloP3";
                    EstiloP3.FontName = "Calibri";
                    EstiloP3.FontSize = 11;
                    EstiloP3.Alignment = ParagraphAlignment.Justify;
                    EstiloP3.SpacingBefore = 0;
                    EstiloP3.SpacingAfter = 0;
                    document.ParagraphStyles.Add(EstiloP3);
                }

                ParagraphStyle EstiloP4 = document.ParagraphStyles["EstiloP4"];
                if (EstiloP4 == null)
                {
                    EstiloP4 = document.ParagraphStyles.CreateNew();
                    EstiloP4.Name = "EstiloP4";
                    EstiloP4.FontName = "Calibri";
                    EstiloP4.FontSize = 11;
                    EstiloP4.Alignment = ParagraphAlignment.Justify;
                    EstiloP4.SpacingBefore =50;
                    EstiloP4.SpacingAfter = 0;
                    EstiloP4.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    EstiloP4.FirstLineIndent = Units.CentimetersToDocumentsF((float)3);
                    EstiloP4.LeftIndent = 354;
                    document.ParagraphStyles.Add(EstiloP4);
                }

                ParagraphStyle EstiloP5 = document.ParagraphStyles["EstiloP5"];
                if (EstiloP5 == null)
                {
                    EstiloP5 = document.ParagraphStyles.CreateNew();
                    EstiloP5.Name = "EstiloP5";
                    EstiloP5.FontName = "Calibri";
                    EstiloP5.Bold = true;
                    EstiloP5.FontSize = 11;
                    EstiloP5.Alignment = ParagraphAlignment.Justify;
                    EstiloP5.SpacingBefore = 0;
                    EstiloP5.SpacingAfter = 0;
                    document.ParagraphStyles.Add(EstiloP5);
                }

                ParagraphStyle EstiloP6 = document.ParagraphStyles["EstiloP6"];
                if (EstiloP6 == null)
                {
                    EstiloP6 = document.ParagraphStyles.CreateNew();
                    EstiloP6.Name = "EstiloP6";
                    EstiloP6.FontName = "Calibri";
                    EstiloP6.Bold = false;
                    EstiloP6.FontSize = 11;
                    EstiloP6.Alignment = ParagraphAlignment.Justify;
                    EstiloP6.SpacingBefore = 25;
                    EstiloP6.SpacingAfter = 0;
                    document.ParagraphStyles.Add(EstiloP6);
                }

                #endregion

                #region Tablas

                DevExpress.XtraRichEdit.API.Native.TableStyle EstiloTabla1 = document.TableStyles["EstiloTabla1"];
                if (EstiloTabla1 == null)
                {
                    EstiloTabla1 = document.TableStyles.CreateNew();
                    EstiloTabla1.LeftPadding = Units.CentimetersToDocumentsF((float)0);
                    //EstiloTabla1.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    EstiloTabla1.SpacingBefore = 0;
                    EstiloTabla1.SpacingAfter = 0;
                    EstiloTabla1.VerticalAlignment = TableCellVerticalAlignment.Center;
                    document.TableStyles.Add(EstiloTabla1);
                }

                    #endregion

                #endregion

                #region Cabecera

                SubDocument myHeader = firstSection.BeginUpdateHeader(HeaderFooterType.Primary);
                myHeader.AppendText("\n");

                DevExpress.XtraRichEdit.API.Native.Table tablaHeader = myHeader.Tables.Create(myHeader.Range.End, 1, 2);
                tablaHeader.Style = EstiloTabla1;
                myHeader.Images.Insert(tablaHeader[0, 0].Range.Start, DocumentImageSource.FromFile(Logo));
                myHeader.InsertText(tablaHeader[0, 1].Range.Start, string.Format("COMITÉ TÉCNICO\n DE ANÁLISIS DE FALLAS \n AÑO {0} \n\n Fecha: {1} ", DateTime.Now.Year.ToString(), DateTime.Now.Date.ToString("dd/MM/yyyy")));
                myHeader.AppendText("______________________________________________________________________________\n");
                
                DevExpress.XtraRichEdit.API.Native.TableCell firstCell = tablaHeader[0, 0];
                firstCell.PreferredWidthType = WidthType.Fixed;
                firstCell.PreferredWidth = Units.CentimetersToDocumentsF((float)10.05);
                firstCell.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Left.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Right.LineStyle = TableBorderLineStyle.None;
                firstCell.Borders.Top.LineStyle = TableBorderLineStyle.None;
                firstCell.LeftPadding = Units.CentimetersToDocumentsF((float)0.12);

                DevExpress.XtraRichEdit.API.Native.TableCell SecondCell = tablaHeader[0, 1];
                SecondCell.PreferredWidthType = WidthType.Fixed;
                SecondCell.PreferredWidth = Units.CentimetersToDocumentsF((float)5.29);
                SecondCell.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Left.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Right.LineStyle = TableBorderLineStyle.None;
                SecondCell.Borders.Top.LineStyle = TableBorderLineStyle.None;

                ParagraphProperties ParagraphProperties01 = myHeader.BeginUpdateParagraphs(tablaHeader[0, 1].Range);
                ParagraphProperties01.Style = EstiloP1;
                document.EndUpdateParagraphs(ParagraphProperties01);

                CharacterProperties CharacterProperties01 = myHeader.BeginUpdateCharacters(tablaHeader[0, 1].Range);
                CharacterProperties01.Bold = true;
                document.EndUpdateCharacters(CharacterProperties01);

                firstSection.EndUpdateHeader(myHeader);

                #endregion

                #region Foother

                SubDocument myFoother = firstSection.BeginUpdateFooter(HeaderFooterType.Primary);

                myFoother.AppendText(string.Format("ACTA N°{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO) + "                                                                                                                       Página ");
                myFoother.Fields.Create(myFoother.AppendText("Page"));
                myFoother.AppendText(" de ");
                myFoother.Fields.Create(myFoother.AppendText("NumPages"));
                myFoother.Fields.Update();
                firstSection.EndUpdateFooter(myFoother);

                #endregion

                #region Titulo
                int IndexTitulo = document.Paragraphs.ToList().Count();
                document.AppendText("ACTA COES - CTAF\n");
                ParagraphProperties ppTitulo1 = document.BeginUpdateParagraphs(document.Sections[0].Paragraphs[0].Range);
                ppTitulo1.Style = EstiloP2;
                document.EndUpdateParagraphs(ppTitulo1);

                DevExpress.XtraRichEdit.API.Native.Paragraph ParagraphTitulo2 = document.Paragraphs.Append();
                document.InsertText(ParagraphTitulo2.Range.Start,string.Format("N°{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO));
                ParagraphProperties ppTitulo2 = document.BeginUpdateParagraphs(ParagraphTitulo2.Range);
                ppTitulo2.Style = EstiloP2;
                document.EndUpdateParagraphs(ppTitulo2);

                int IndexTitulo1 = document.Paragraphs.ToList().Count();
                DevExpress.XtraRichEdit.API.Native.Paragraph ParagraphTitulo3 = document.Paragraphs.Append();
                document.InsertText(ParagraphTitulo3.Range.Start, "______________________________________________________________________________\n");
                ParagraphProperties ppTitulo3 = document.BeginUpdateParagraphs(document.Paragraphs[IndexTitulo1].Range);
                ppTitulo3.Style = EstiloP3;
                document.EndUpdateParagraphs(ppTitulo3);
                CharacterProperties CharacterPropertiesT03 = document.BeginUpdateCharacters(document.Paragraphs[IndexTitulo1].Range);
                CharacterPropertiesT03.Style = EstiloC3;
                document.EndUpdateCharacters(CharacterPropertiesT03);

                #endregion

                #region Tabla: Asunto y Participante

                DocumentPosition PostablaAsunPart = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Table tablaAsunPart = document.Tables.Create(PostablaAsunPart, 2, 2);
                tablaAsunPart.BeginUpdate();

                //tablaAsunPart.Style = EstiloTabla1;
                tablaAsunPart.PreferredWidthType = WidthType.Fixed;
                tablaAsunPart.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                DevExpress.XtraRichEdit.API.Native.TableCell CelAsunPart00 = tablaAsunPart[0, 0];
                CelAsunPart00.PreferredWidthType = WidthType.Fixed;
                CelAsunPart00.PreferredWidth = Units.CentimetersToDocumentsF((float)3.5);
                CelAsunPart00.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                CelAsunPart00.Borders.Left.LineStyle = TableBorderLineStyle.None;
                CelAsunPart00.Borders.Right.LineStyle = TableBorderLineStyle.None;
                CelAsunPart00.Borders.Top.LineStyle = TableBorderLineStyle.None;
                CelAsunPart00.TopPadding = 0;
                CelAsunPart00.BottomPadding = 0;

                DevExpress.XtraRichEdit.API.Native.TableCell CelAsunPart01 = tablaAsunPart[0, 1];
                CelAsunPart01.PreferredWidthType = WidthType.Fixed;
                CelAsunPart01.PreferredWidth = Units.CentimetersToDocumentsF((float)11.5);
                CelAsunPart01.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                CelAsunPart01.Borders.Left.LineStyle = TableBorderLineStyle.None;
                CelAsunPart01.Borders.Right.LineStyle = TableBorderLineStyle.None;
                CelAsunPart01.Borders.Top.LineStyle = TableBorderLineStyle.None;
                CelAsunPart01.TopPadding = 0;
                CelAsunPart01.BottomPadding = 0;

                DevExpress.XtraRichEdit.API.Native.TableCell CelAsunPart10 = tablaAsunPart[1, 0];
                CelAsunPart10.PreferredWidthType = WidthType.Fixed;
                CelAsunPart10.PreferredWidth = Units.CentimetersToDocumentsF((float)3);
                CelAsunPart10.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                CelAsunPart10.Borders.Left.LineStyle = TableBorderLineStyle.None;
                CelAsunPart10.Borders.Right.LineStyle = TableBorderLineStyle.None;
                CelAsunPart10.Borders.Top.LineStyle = TableBorderLineStyle.None;
                CelAsunPart10.TopPadding = 0;
                CelAsunPart10.BottomPadding = 0;

                DevExpress.XtraRichEdit.API.Native.TableCell CelAsunPart11 = tablaAsunPart[1, 1];
                CelAsunPart11.PreferredWidthType = WidthType.Fixed;
                CelAsunPart11.PreferredWidth = Units.CentimetersToDocumentsF((float)12);
                CelAsunPart11.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                CelAsunPart11.Borders.Left.LineStyle = TableBorderLineStyle.None;
                CelAsunPart11.Borders.Right.LineStyle = TableBorderLineStyle.None;
                CelAsunPart11.Borders.Top.LineStyle = TableBorderLineStyle.None;
                CelAsunPart11.TopPadding = 0;
                CelAsunPart11.BottomPadding = 0;

                ParagraphProperties ParagraphPropertiesCelAsunPart00 = document.BeginUpdateParagraphs(tablaAsunPart[0, 0].Range);
                ParagraphPropertiesCelAsunPart00.SpacingAfter = 25;
                ParagraphPropertiesCelAsunPart00.SpacingBefore = 75;
                ParagraphPropertiesCelAsunPart00.Alignment = ParagraphAlignment.Left;
                document.EndUpdateParagraphs(ParagraphPropertiesCelAsunPart00);
                CharacterProperties CharacterPropertiesCelAsunPart00 = document.BeginUpdateCharacters(tablaAsunPart[0, 0].Range);
                CharacterPropertiesCelAsunPart00.Bold = false;
                CharacterPropertiesCelAsunPart00.FontSize = 11;
                CharacterPropertiesCelAsunPart00.Underline = UnderlineType.None;
                document.EndUpdateCharacters(CharacterPropertiesCelAsunPart00);

                ParagraphProperties ParagraphPropertiesCelAsunPart01 = document.BeginUpdateParagraphs(tablaAsunPart[0, 1].Range);
                ParagraphPropertiesCelAsunPart01.SpacingAfter = 25;
                ParagraphPropertiesCelAsunPart01.SpacingBefore = 75;
                ParagraphPropertiesCelAsunPart01.Alignment = ParagraphAlignment.Justify;
                document.EndUpdateParagraphs(ParagraphPropertiesCelAsunPart01);
                CharacterProperties CharacterPropertiesCelAsunPart01 = document.BeginUpdateCharacters(tablaAsunPart[0, 1].Range);
                CharacterPropertiesCelAsunPart01.Bold = false;
                CharacterPropertiesCelAsunPart01.FontSize = 11;
                CharacterPropertiesCelAsunPart01.Underline = UnderlineType.None;
                document.EndUpdateCharacters(CharacterPropertiesCelAsunPart01);

                ParagraphProperties ParagraphPropertiesCelAsunPart10 = document.BeginUpdateParagraphs(tablaAsunPart[1, 0].Range);
                ParagraphPropertiesCelAsunPart10.SpacingAfter = 0;
                ParagraphPropertiesCelAsunPart10.SpacingBefore = 25;
                ParagraphPropertiesCelAsunPart10.Alignment = ParagraphAlignment.Left;
                document.EndUpdateParagraphs(ParagraphPropertiesCelAsunPart10);
                CharacterProperties CharacterPropertiesCelAsunPart10 = document.BeginUpdateCharacters(tablaAsunPart[1, 0].Range);
                CharacterPropertiesCelAsunPart10.Bold = false;
                CharacterPropertiesCelAsunPart10.FontSize = 11;
                CharacterPropertiesCelAsunPart10.Underline = UnderlineType.None;
                document.EndUpdateCharacters(CharacterPropertiesCelAsunPart10);

                ParagraphProperties ParagraphPropertiesCelAsunPart11 = document.BeginUpdateParagraphs(tablaAsunPart[1, 1].Range);
                ParagraphPropertiesCelAsunPart11.SpacingAfter = 0;
                ParagraphPropertiesCelAsunPart11.SpacingBefore = 25;
                ParagraphPropertiesCelAsunPart11.Alignment = ParagraphAlignment.Justify;
                document.EndUpdateParagraphs(ParagraphPropertiesCelAsunPart11);
                CharacterProperties CharacterPropertiesCelAsunPart11 = document.BeginUpdateCharacters(tablaAsunPart[1, 1].Range);
                CharacterPropertiesCelAsunPart11.Bold = false;
                CharacterPropertiesCelAsunPart11.FontSize = 11;
                CharacterPropertiesCelAsunPart11.Underline = UnderlineType.None;
                document.EndUpdateCharacters(CharacterPropertiesCelAsunPart11);


                document.InsertText(tablaAsunPart[0, 0].Range.Start, "ASUNTO              :");
                document.InsertText(tablaAsunPart[0, 1].Range.Start, obj.oEventoDTO.EVENASUNTO);
                document.InsertText(tablaAsunPart[1, 0].Range.Start, "PARTICIPANTES :");


                #endregion

                #region Asunto

                //int IndexAsunto = document.Paragraphs.ToList().Count();
                //DocumentPosition PosAsunto = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                //DevExpress.XtraRichEdit.API.Native.Paragraph ParAsunto = document.Paragraphs.Insert(PosAsunto);
                //document.InsertText(PosAsunto, "ASUNTO             :    " + obj.oEventoDTO.EVENASUNTO);
                //document.Paragraphs[IndexAsunto].Style = EstiloP4;

                //TabInfoCollection tabs = document.Paragraphs[IndexAsunto].BeginUpdateTabs(true);
                //TabInfo tab1 = new TabInfo();
                //tab1.Position = Units.CentimetersToDocumentsF((float)2.5);
                //tab1.Alignment = TabAlignmentType.Left;
                //tabs.Add(tab1);
                //document.Paragraphs[IndexAsunto].EndUpdateTabs(tabs);

                #endregion

                #region Participante

                //int IndexParticipante = document.Paragraphs.ToList().Count();
                //DocumentPosition PosParticipante = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                //DevExpress.XtraRichEdit.API.Native.Paragraph ParParticipante = document.Paragraphs.Insert(PosParticipante);
                //document.InsertText(PosParticipante, "PARTICIPANTE  :\n");
                //document.Paragraphs[IndexAsunto].Style = EstiloP4;

                #endregion


                document.AppendText("\n");
                int rows = 0;
                if(obj.lsReunionResponsable.Count > 0)
                    rows = obj.lsReunionResponsable.Count + 1;
                else
                    rows = obj.lsReunionResponsable.Count + 2;
                DocumentPosition PostablaActa = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Table tablaActa = document.Tables.Create(PostablaActa, rows, 3);
                tablaActa.BeginUpdate();

                #region Configurar Tabla

                tablaActa.Style = EstiloTabla1;
                tablaActa.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                tablaActa.VerticalAlignment = TableVerticalAlignment.None;
                tablaActa.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                tablaActa.TextWrappingType = TableTextWrappingType.Around;
                tablaActa.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                tablaActa.OffsetXRelative = Units.CentimetersToDocumentsF((float)0);
                tablaActa.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                tablaActa.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                tablaActa.MarginTop = Units.CentimetersToDocumentsF((float)0);
                tablaActa.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                tablaActa.PreferredWidthType = WidthType.Fixed;
                //tablaActa.PreferredWidth = Units.CentimetersToDocumentsF((float)14);

                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaActa[0, 0];
                Cel00.PreferredWidthType = WidthType.Fixed;
                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)3.89);
                Cel00.HeightType = HeightType.Exact;
                Cel00.Height = Units.CentimetersToDocumentsF((float)0.97);
                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                Cel00.BackgroundColor = Color.LightGray;
                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                Cel00.TopPadding = 0;
                Cel00.BottomPadding = 0;
                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaActa[0, 0].Range);
                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                ParagraphPropertiesCel00.SpacingAfter = 0;
                ParagraphPropertiesCel00.SpacingBefore = 0;
                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaActa[0, 0].Range);
                CharacterPropertiesCel00.Bold = true;
                document.EndUpdateCharacters(CharacterPropertiesCel00);

                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaActa[0, 1];
                Cel01.PreferredWidthType = WidthType.Fixed;
                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)6);
                Cel01.HeightType = HeightType.Exact;
                Cel01.Height = Units.CentimetersToDocumentsF((float)0.97);
                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                Cel01.BackgroundColor = Color.LightGray;
                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                Cel01.TopPadding = 0;
                Cel01.BottomPadding = 0;
                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaActa[0, 1].Range);
                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                ParagraphPropertiesCel01.SpacingAfter = 0;
                ParagraphPropertiesCel01.SpacingBefore = 0;
                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaActa[0, 1].Range);
                CharacterPropertiesCel01.Bold = true;
                document.EndUpdateCharacters(CharacterPropertiesCel01);

                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaActa[0, 2];
                Cel02.PreferredWidthType = WidthType.Fixed;
                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)5.65);
                Cel02.HeightType = HeightType.Exact;
                Cel02.Height = Units.CentimetersToDocumentsF((float)0.97);
                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                Cel02.BackgroundColor = Color.LightGray;
                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                Cel02.TopPadding = 0;
                Cel02.BottomPadding = 0;
                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaActa[0, 2].Range);
                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                ParagraphPropertiesCel02.SpacingAfter = 0;
                ParagraphPropertiesCel02.SpacingBefore = 0;
                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaActa[0, 2].Range);
                CharacterPropertiesCel02.Bold = true;
                document.EndUpdateCharacters(CharacterPropertiesCel02);



                #endregion

                #region Datos Tabla

                document.InsertText(tablaActa[0, 0].Range.Start, "EMPRESA");
                document.InsertText(tablaActa[0, 1].Range.Start, "REPRESENTANTES");
                document.InsertText(tablaActa[0, 2].Range.Start, "FIRMAS");

                int contadorLinea = 2;
                if(obj.lsReunionResponsable.Count > 0)
                {
                    for (int i = 0; i < obj.lsReunionResponsable.Count; i++)
                    {
                        document.InsertText(tablaActa[i + 1, 0].Range.Start, obj.lsReunionResponsable[i].EMPRNOMB.ToString());
                        document.InsertText(tablaActa[i + 1, 1].Range.Start, obj.lsReunionResponsable[i].RESPNAME.ToString());

                        for (int y = 0; y <= 2; y++)
                        {
                            DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaActa[i + 1, y];
                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                            DocumentRange RangeCeli0 = Celi0.Range;
                            CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                            CharacterPropertiesRangeCeli0.FontName = "Calibri";
                            CharacterPropertiesRangeCeli0.FontSize = 11;
                            CharacterPropertiesRangeCeli0.Bold = false;
                            document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                            ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaActa[i + 1, y].Range);
                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCeli0.SpacingAfter = 0;
                            ParagraphPropertiesCeli0.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                        }
                    }
                    for (int j = 0; j < obj.lsReunionResponsable.Count; j++)
                    {
                        if (obj.lsReunionResponsable[j].EMPRCODI == 1)
                        {
                            var firmas = obj.lsReunionResponsable[j].REPRUTAFIRMA.Split('|');
                            string RutaArchivosFirma = ConfigurationManager.AppSettings["CarpetaDeFirmas"];
                            int rowsN = 0;
                            if (firmas.Length > 1)
                            {
                                for (int y = 0; y < firmas.Length - 1; y++)
                                {
                                    var imgf = RutaArchivosFirma + firmas[y];
                                    if (firmas[y].ToString() != "" && System.IO.File.Exists(imgf))
                                        rowsN++;
                                }
                                tablaActa[j + 1, 2].Split(rowsN, 1);
                            }
                            for (int x = 0; x < firmas.Length - 1; x++)
                            {
                                if (firmas[x] != "")
                                {
                                    var imgfirma = RutaArchivosFirma + firmas[x];
                                    if (System.IO.File.Exists(imgfirma))
                                    {
                                        Shape shImagen = document.Shapes.InsertPicture(tablaActa[j + 1 + x, 2].Range.Start, DocumentImageSource.FromFile(imgfirma));
                                        shImagen.Size = new SizeF(Units.CentimetersToDocumentsF((float)2.42), Units.CentimetersToDocumentsF((float)1));
                                        shImagen.TextWrapping = TextWrappingType.InLineWithText;

                                        DevExpress.XtraRichEdit.API.Native.TableCell CelFirma = tablaActa[j + 1 + x, 2];
                                        CelFirma.HeightType = HeightType.Exact;
                                        CelFirma.Height = Units.CentimetersToDocumentsF((float)1.3);
                                        CelFirma.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        CelFirma.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        CelFirma.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        
                                        if (x == 0)
                                        {
                                            CelFirma.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                            CelFirma.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                                        }
                                            
                                        else if(x > 0 && x != firmas.Length - 2)
                                        {
                                            CelFirma.Borders.Top.LineStyle = TableBorderLineStyle.None;
                                            CelFirma.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                                        }
                                        else
                                        {
                                            CelFirma.Borders.Top.LineStyle = TableBorderLineStyle.None;
                                            CelFirma.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        }
                                        

                                    }
                                }
                            }
                        }
                    }

                        
                }
                else
                {
                    tablaActa.MergeCells(tablaActa[1, 0], tablaActa[1, 2]);
                    document.InsertText(tablaActa[1, 0].Range.Start, "No existen registros.");
                    DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaActa[1, 0];
                    Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                    DocumentRange RangeCeli0 = Celi0.Range;
                    CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                    CharacterPropertiesRangeCeli0.FontName = "Calibri";
                    CharacterPropertiesRangeCeli0.FontSize = 11;
                    CharacterPropertiesRangeCeli0.Bold = false;
                    document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                    ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaActa[1, 0].Range);
                    ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCeli0.SpacingAfter = 0;
                    ParagraphPropertiesCeli0.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                }


                #endregion

                #region Desarrollo de la Reunión

                int IndexDesarrollo = document.Paragraphs.ToList().Count();
                DocumentPosition PosDesarrollo = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParDesarrollo = document.Paragraphs.Insert(PosDesarrollo);
                document.InsertText(PosDesarrollo, "DESARROLLO DE LA REUNIÓN");
                document.Paragraphs[IndexDesarrollo].Style = EstiloP5;

                int IndexIniPresencial_1_1 = document.Paragraphs.ToList().Count();
                if (presencial)
                {                 
                    DocumentPosition PosPresencial_1_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParPresencial_1_1 = document.Paragraphs.Insert(PosPresencial_1_1);
                    document.InsertText(PosPresencial_1_1, "La reunión empezó a las " + obj.oAnalisisFallaDTO.AFEREUHORINI + " h. ");
                    document.Paragraphs[IndexIniPresencial_1_1].Style = EstiloP6;

                    DocumentPosition PosPresencial_1_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParPresencial_1_2 = document.Paragraphs.Insert(PosPresencial_1_2);
                    document.InsertText(PosPresencial_1_2, "El COES realizó una exposición del evento ocurrido a las " + obj.FechasEventos + "\n");
                    document.Paragraphs[IndexIniPresencial_1_1 + 1].Style = EstiloP6;
                }
                else
                {
                    DocumentPosition PosNoPresencial_1_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParPresencial_1_1 = document.Paragraphs.Insert(PosNoPresencial_1_1);
                    document.InsertText(PosNoPresencial_1_1, "El coordinador del CT-AF decidió no realizar en forma presencial la reunión del comité de trabajo, en reemplazo el análisis fue realizado vía telefónica y correo electrónico con las empresas involucradas. ");
                    document.Paragraphs[IndexIniPresencial_1_1].Style = EstiloP6;

                    DocumentPosition PosNoPresencial_1_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParPresencial_1_2 = document.Paragraphs.Insert(PosNoPresencial_1_2);
                    document.InsertText(PosNoPresencial_1_2, "El COES elaboró el informe del CT-AF correspondiente al evento ocurrido a las " + obj.FechasEventos + "\n");
                    document.Paragraphs[IndexIniPresencial_1_1 + 1].Style = EstiloP6;
                }

                int IndexFin_1_1 = document.Paragraphs.ToList().Count();

                #endregion

                #region Acuerdo
                int IndexAcuerdo = document.Paragraphs.ToList().Count();
                ParrafoDTO _parAcuerdo = new ParrafoDTO();
                _parAcuerdo.NroParrafo = IndexAcuerdo - 1;
                _parAcuerdo.RangeIniParrafo = IndexAcuerdo - 1;
                _parAcuerdo.RangeFinParrafo = IndexAcuerdo - 1;
                ListaParrafos.Add(_parAcuerdo);

                DocumentPosition PosAcuerdo = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParAcuerdo = document.Paragraphs.Insert(PosAcuerdo);
                document.InsertText(PosAcuerdo, "ACUERDO");
                document.Paragraphs[IndexAcuerdo].Style = EstiloP5;
                CharacterProperties chpacuerdo = document.BeginUpdateCharacters(document.Paragraphs[IndexAcuerdo].Range);
                chpacuerdo.Bold = true;
                document.EndUpdateCharacters(chpacuerdo);

                int IndexAcuerdo2_1 = document.Paragraphs.ToList().Count();
                DocumentPosition PosAcuerdo2_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParAcuerdo2_1 = document.Paragraphs.Insert(PosAcuerdo2_1);
                document.InsertText(PosAcuerdo2_1, $"A la DOCOES: tomar conocimiento del documento del informe del CT-AF/EV-{obj.oAnalisisFallaDTO.AFECORR.ToString("D3")}-{obj.oAnalisisFallaDTO.AFEANIO}, como base para la elaboración del Informe Técnico emitido por la DOCOES.");
                document.Paragraphs[IndexAcuerdo2_1].Style = EstiloP6;
                CharacterProperties chpacuerdo1 = document.BeginUpdateCharacters(document.Paragraphs[IndexAcuerdo2_1].Range);
                chpacuerdo1.Bold = false;
                document.EndUpdateCharacters(chpacuerdo1);

                if (presencial)
                {
                    int IndexAcuerdo2_1_ = document.Paragraphs.ToList().Count();
                    ParrafoDTO parPresencial = new ParrafoDTO();
                    parPresencial.NroParrafo = IndexAcuerdo2_1_;
                    parPresencial.RangeIniParrafo = IndexAcuerdo2_1_;
                    parPresencial.RangeFinParrafo = IndexAcuerdo2_1_ + 2;
                    ListaParrafos.Add(parPresencial);

                    DocumentPosition PosAcuerdo2_1_ = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParAcuerdo2_1_ = document.Paragraphs.Insert(PosAcuerdo2_1_);
                    document.InsertText(PosAcuerdo2_1_, $"\nSiendo las {obj.oAnalisisFallaDTO.AFEREUHORFIN} h del {obj.oAnalisisFallaDTO.AFEREUFECHAPROGstr.Replace("/", ".")} se levantó la sesión.");
                    document.Paragraphs[IndexAcuerdo2_1_ + 1].Style = EstiloP6;
                    CharacterProperties chpacuerdo2 = document.BeginUpdateCharacters(document.Paragraphs[IndexAcuerdo2_1_ + 1].Range);
                    chpacuerdo2.Bold = false;
                    document.EndUpdateCharacters(chpacuerdo2);
                }
                #endregion

                DocumentRange rangeLevel0 = document.CreateRange(document.Paragraphs[IndexDesarrollo].Range.Start, document.Sections[0].Range.End.ToInt() - document.Paragraphs[IndexDesarrollo].Range.Start.ToInt());
                document.Paragraphs.AddParagraphsToList(rangeLevel0, ListaNumeros0, 0);

                DocumentRange rangeLevel1 = document.CreateRange(document.Paragraphs[IndexIniPresencial_1_1].Range.Start, document.Paragraphs[IndexFin_1_1 - 1].Range.End.ToInt() - document.Paragraphs[IndexIniPresencial_1_1].Range.Start.ToInt());
                document.Paragraphs.AddParagraphsToList(rangeLevel1, ListaNumeros0, 1);

                document.Paragraphs.AddParagraphsToList(document.Paragraphs[IndexAcuerdo2_1].Range, ListaNumeros0, 2);

                foreach (ParrafoDTO item in ListaParrafos)
                {
                    DocumentRange rangeParSeccion7 = document.CreateRange(document.Paragraphs[item.RangeIniParrafo].Range.Start, document.Paragraphs[item.RangeFinParrafo - 1].Range.End.ToInt() - document.Paragraphs[item.RangeIniParrafo].Range.Start.ToInt());
                    document.Paragraphs.RemoveNumberingFromParagraphs(rangeParSeccion7);
                }

                document.EndUpdate();

                MemoryStream ms = new MemoryStream();
                wordProcessor.SaveDocument(ms, DocumentFormat.OpenXml);
                bytes = ms.ToArray();
                ms.Dispose();
                ms.Close();

                FileServer.CreateFolder(null, rutaSev, fileserver);
                wordProcessor.SaveDocument(fileserver + rutaSev + filename, DocumentFormat.OpenXml);
                wordProcessor.Dispose();

            }

            return bytes;
        }

        private byte[] GenerarReporteTecnico2(string fileWord, AnalisisFallasModel obj, TablaReporte tablaReporteTotales, int fdatcodi, TablaReporte tablaReduccion, TablaReporte tablaReporteTotalesEacmf)
        {
            string fileReporte = $"IT-{obj.oAnalisisFallaDTO.CodigoEvento}.docx";
            byte[] bytes = new byte[0];

            using (var wordProcessor = new RichEditDocumentServer())
            {
                Document document = wordProcessor.Document;
                document.BeginUpdate();

                DevExpress.XtraRichEdit.API.Native.Section firstSection = document.Sections[0];

                List<ParrafoDTO> ListaParrafos = new List<ParrafoDTO>();
                List<int> ListaIndexShapes = new List<int>();
                List<ParrafoDTO> ListaParBullets = new List<ParrafoDTO>();

                #region Configuracion Pagina - Seccion1
                firstSection.Margins.Top = Units.CentimetersToDocumentsF((float)3.25);
                firstSection.Margins.Bottom = Units.CentimetersToDocumentsF((float)2.29);
                firstSection.Margins.Right = Units.CentimetersToDocumentsF((float)2.5);
                firstSection.Margins.Left = Units.CentimetersToDocumentsF((float)2.79);
                firstSection.Page.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;
                #endregion

                #region Configuracion Pagina - Seccion2
                //secondSection.Margins.Top = Units.CentimetersToDocumentsF((float)3.25);
                //secondSection.Margins.Bottom = Units.CentimetersToDocumentsF((float)2.29);
                //secondSection.Margins.Right = Units.CentimetersToDocumentsF((float)2.5);
                //secondSection.Margins.Left = Units.CentimetersToDocumentsF((float)2.79);
                //secondSection.Page.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;
                #endregion

                #region Lista Numeración

                AbstractNumberingList ListNumeracion = document.AbstractNumberingLists.Add();
                ListNumeracion.NumberingType = NumberingType.MultiLevel;

                #region Nivel0
                ListLevel level = ListNumeracion.Levels[0];
                level.ParagraphProperties.SpacingBefore = 50;
                level.ParagraphProperties.SpacingAfter = 25;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                level.ParagraphProperties.LeftIndent = 89;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = true;
                level.Start = 1;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "{0}.";

                #endregion

                #region Nivel1
                level = ListNumeracion.Levels[1];
                level.ParagraphProperties.SpacingBefore = 25;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                level.ParagraphProperties.LeftIndent = 89;
                level.Start = 1;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "{0}.{1}";
                #endregion

                #region Nivel2
                level = ListNumeracion.Levels[2];
                level.ParagraphProperties.SpacingBefore = 25;
                level.ParagraphProperties.SpacingAfter = 25;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                level.ParagraphProperties.LeftIndent = 118;
                level.Start = 1;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "{0}.{1}.{2}";
                #endregion

                NumberingList ListaNumeros0 = document.NumberingLists.Add(0);

                AbstractNumberingList ListBullet = document.AbstractNumberingLists.Add();
                ListBullet.NumberingType = NumberingType.Bullet;

                ListLevel levelBullet = ListBullet.Levels[0];
                levelBullet.ParagraphProperties.SpacingBefore = 25;
                levelBullet.ParagraphProperties.SpacingAfter = 0;
                levelBullet.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                levelBullet.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.5);
                levelBullet.ParagraphProperties.LeftIndent = 300;
                levelBullet.DisplayFormatString = "\u00B7";
                levelBullet.CharacterProperties.FontName = "Symbol";
                levelBullet.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                levelBullet.CharacterProperties.Bold = true;

                NumberingList ListBullet1 = document.NumberingLists.Add(1);

                #endregion

                #region Estilos

                ParagraphStyle Estilo1 = document.ParagraphStyles["Estilo1"];
                if (Estilo1 == null)
                {
                    Estilo1 = document.ParagraphStyles.CreateNew();
                    Estilo1.Name = "Estilo1";
                    Estilo1.Alignment = ParagraphAlignment.Center;
                    Estilo1.FontName = "Calibri";
                    Estilo1.FontSize = 14;
                    Estilo1.Bold = true;
                    document.ParagraphStyles.Add(Estilo1);
                }

                ParagraphStyle Estilo2 = document.ParagraphStyles["Estilo2"];
                if (Estilo2 == null)
                {
                    Estilo2 = document.ParagraphStyles.CreateNew();
                    Estilo2.Name = "Estilo2";
                    Estilo2.Alignment = ParagraphAlignment.Center;
                    Estilo2.FontName = "Calibri";
                    Estilo2.FontSize = 10;
                    Estilo2.Bold = true;
                    document.ParagraphStyles.Add(Estilo2);
                }

                ParagraphStyle Estilo3 = document.ParagraphStyles["Estilo3"];
                if (Estilo3 == null)
                {
                    Estilo3 = document.ParagraphStyles.CreateNew();
                    Estilo3.Name = "Estilo3";
                    Estilo3.Alignment = ParagraphAlignment.Right;
                    Estilo3.FontName = "Calibri";
                    Estilo3.FontSize = 10;
                    Estilo3.Bold = true;
                    document.ParagraphStyles.Add(Estilo3);
                }

                ParagraphStyle Estilo4 = document.ParagraphStyles["Estilo4"];
                if (Estilo4 == null)
                {
                    Estilo4 = document.ParagraphStyles.CreateNew();
                    Estilo4.Name = "Estilo4";
                    Estilo4.Alignment = ParagraphAlignment.Left;
                    Estilo4.FontName = "Calibri";
                    Estilo4.FontSize = 10;
                    Estilo4.Bold = true;
                    document.ParagraphStyles.Add(Estilo4);
                }

                ParagraphStyle Estilo5 = document.ParagraphStyles["Estilo5"];
                if (Estilo5 == null)
                {
                    Estilo5 = document.ParagraphStyles.CreateNew();
                    Estilo5.Name = "Estilo5";
                    Estilo5.Alignment = ParagraphAlignment.Justify;
                    Estilo5.FontName = "Calibri";
                    Estilo5.FontSize = 11;
                    Estilo5.Bold = true;
                    Estilo5.Underline = UnderlineType.Single;
                    Estilo5.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo5.SpacingBefore = 50;
                    Estilo5.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo5);
                }

                ParagraphStyle Estilo6 = document.ParagraphStyles["Estilo6"];
                if (Estilo6 == null)
                {
                    Estilo6 = document.ParagraphStyles.CreateNew();
                    Estilo6.Name = "Estilo6";
                    Estilo6.Alignment = ParagraphAlignment.Justify;
                    Estilo6.FontName = "Calibri";
                    Estilo6.FontSize = 11;
                    Estilo6.Bold = false;
                    Estilo6.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo6.SpacingBefore = 50;
                    Estilo6.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo6);
                }

                CharacterStyle Estilo7 = document.CharacterStyles["Estilo7"];
                if (Estilo7 == null)
                {
                    Estilo7 = document.CharacterStyles.CreateNew();
                    Estilo7.Name = "Estilo7";
                    Estilo7.Bold = false;
                    Estilo7.FontName = "Calibri";
                    Estilo7.FontSize = 11;
                    document.CharacterStyles.Add(Estilo7);
                }

                ParagraphStyle Estilo8 = document.ParagraphStyles["Estilo8"];
                if (Estilo8 == null)
                {
                    Estilo8 = document.ParagraphStyles.CreateNew();
                    Estilo8.Name = "Estilo8";
                    Estilo8.Alignment = ParagraphAlignment.Justify;
                    Estilo8.FontName = "Calibri";
                    Estilo8.FontSize = 11;
                    Estilo8.SpacingBefore = 50;
                    Estilo8.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo8);
                }

                ParagraphStyle Estilo9 = document.ParagraphStyles["Estilo9"];
                if (Estilo9 == null)
                {
                    Estilo9 = document.ParagraphStyles.CreateNew();
                    Estilo9.Name = "Estilo9";
                    Estilo9.Alignment = ParagraphAlignment.Justify;
                    Estilo9.FontName = "Calibri";
                    Estilo9.FontSize = 11;
                    Estilo9.SpacingBefore = 0;
                    Estilo9.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo9);
                }

                ParagraphStyle Estilo10 = document.ParagraphStyles["Estilo10"];
                if (Estilo10 == null)
                {
                    Estilo10 = document.ParagraphStyles.CreateNew();
                    Estilo10.Name = "Estilo10";
                    Estilo10.Alignment = ParagraphAlignment.Justify;
                    Estilo10.FontName = "Calibri";
                    Estilo10.FontSize = 11;
                    Estilo10.Bold = false;
                    Estilo10.Underline = UnderlineType.Single;
                    Estilo10.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo10.SpacingBefore = 25;
                    Estilo10.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo10);
                }

                ParagraphStyle Estilo11 = document.ParagraphStyles["Estilo11"];
                if (Estilo11 == null)
                {
                    Estilo11 = document.ParagraphStyles.CreateNew();
                    Estilo11.Name = "Estilo11";
                    Estilo11.Alignment = ParagraphAlignment.Justify;
                    Estilo11.FontName = "Calibri";
                    Estilo11.FontSize = 11;
                    Estilo11.Bold = false;
                    Estilo11.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo11.SpacingBefore = 50;
                    Estilo11.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo11);
                }

                ParagraphStyle Estilo12 = document.ParagraphStyles["Estilo12"];
                if (Estilo12 == null)
                {
                    Estilo12 = document.ParagraphStyles.CreateNew();
                    Estilo12.Name = "Estilo12";
                    Estilo12.Alignment = ParagraphAlignment.Justify;
                    Estilo12.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo12.FontName = "Calibri";
                    Estilo12.FontSize = 9;
                    Estilo12.Bold = false;
                    Estilo12.SpacingBefore = 0;
                    Estilo12.SpacingAfter = 25;
                    document.ParagraphStyles.Add(Estilo12);
                }

                CharacterStyle Estilo13 = document.CharacterStyles["Estilo13"];
                if (Estilo13 == null)
                {
                    Estilo13 = document.CharacterStyles.CreateNew();
                    Estilo13.Name = "Estilo7";
                    Estilo13.FontName = "Calibri";
                    Estilo13.FontSize = 9;
                    Estilo13.Bold = false;
                    document.CharacterStyles.Add(Estilo13);
                }

                CharacterStyle Estilo14 = document.CharacterStyles["Estilo14"];
                if (Estilo14 == null)
                {
                    Estilo14 = document.CharacterStyles.CreateNew();
                    Estilo14.Name = "Estilo14";
                    Estilo14.Bold = true;
                    Estilo14.FontName = "Calibri";
                    Estilo14.FontSize = 11;
                    document.CharacterStyles.Add(Estilo14);
                }

                ParagraphStyle Estilo15 = document.ParagraphStyles["Estilo15"];
                if (Estilo15 == null)
                {
                    Estilo15 = document.ParagraphStyles.CreateNew();
                    Estilo15.Name = "Estilo15";
                    Estilo15.Alignment = ParagraphAlignment.Justify;
                    Estilo15.FontName = "Calibri";
                    Estilo15.FontSize = 11;
                    Estilo15.Bold = false;
                    Estilo15.Underline = UnderlineType.Single;
                    Estilo15.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo15.SpacingBefore = 25;
                    Estilo15.SpacingAfter = 50;
                    document.ParagraphStyles.Add(Estilo15);
                }

                CharacterStyle Estilo16 = document.CharacterStyles["Estilo16"];
                if (Estilo16 == null)
                {
                    Estilo16 = document.CharacterStyles.CreateNew();
                    Estilo16.Name = "Estilo16";
                    Estilo16.Bold = true;
                    Estilo16.FontName = "Calibri";
                    Estilo16.FontSize = 11;
                    Estilo16.Underline = UnderlineType.None;
                    document.CharacterStyles.Add(Estilo16);
                }

                CharacterStyle Estilo17 = document.CharacterStyles["Estilo17"];
                if (Estilo17 == null)
                {
                    Estilo17 = document.CharacterStyles.CreateNew();
                    Estilo17.Name = "Estilo17";
                    Estilo17.Bold = false;
                    Estilo17.FontName = "Calibri";
                    Estilo17.FontSize = 11;
                    Estilo17.Underline = UnderlineType.None;
                    document.CharacterStyles.Add(Estilo17);
                }

                ParagraphStyle Estilo18 = document.ParagraphStyles["Estilo18"];
                if (Estilo18 == null)
                {
                    Estilo18 = document.ParagraphStyles.CreateNew();
                    Estilo18.Name = "Estilo18";
                    Estilo18.Alignment = ParagraphAlignment.Center;
                    Estilo18.FontName = "Calibri";
                    Estilo18.FontSize = 9;
                    Estilo18.Bold = false;
                    Estilo18.Underline = UnderlineType.None;
                    Estilo18.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo18.SpacingBefore = 12;
                    Estilo18.SpacingAfter = 25;
                    document.ParagraphStyles.Add(Estilo18);
                }

                ParagraphStyle Estilo19 = document.ParagraphStyles["Estilo19"];
                if (Estilo19 == null)
                {
                    Estilo19 = document.ParagraphStyles.CreateNew();
                    Estilo19.Name = "Estilo19";
                    Estilo19.Alignment = ParagraphAlignment.Justify;
                    Estilo19.FontName = "Calibri";
                    Estilo19.FontSize = 11;
                    Estilo19.SpacingBefore = 25;
                    Estilo19.SpacingAfter = 0;
                    Estilo19.Underline = UnderlineType.Single;
                    Estilo19.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    document.ParagraphStyles.Add(Estilo19);
                }

                ParagraphStyle Estilo20 = document.ParagraphStyles["Estilo20"];
                if (Estilo20 == null)
                {
                    Estilo20 = document.ParagraphStyles.CreateNew();
                    Estilo20.Name = "Estilo20";
                    Estilo20.Alignment = ParagraphAlignment.Justify;
                    Estilo20.FontName = "Calibri";
                    Estilo20.FontSize = 11;
                    Estilo20.Underline = UnderlineType.None;
                    Estilo20.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo20.SpacingBefore = 25;
                    Estilo20.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo20);
                }

                ParagraphStyle Estilo21 = document.ParagraphStyles["Estilo21"];
                if (Estilo21 == null)
                {
                    Estilo21 = document.ParagraphStyles.CreateNew();
                    Estilo21.Name = "Estilo21";
                    Estilo21.Alignment = ParagraphAlignment.Center;
                    Estilo21.FontName = "Calibri";
                    Estilo21.FontSize = 11;
                    Estilo21.Bold = true;
                    Estilo21.Underline = UnderlineType.Single;
                    Estilo21.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo21.SpacingBefore = 25;
                    Estilo21.SpacingAfter = 50;
                    document.ParagraphStyles.Add(Estilo21);
                }

                CharacterStyle Estilo22 = document.CharacterStyles["Estilo22"];
                if (Estilo22 == null)
                {
                    Estilo22 = document.CharacterStyles.CreateNew();
                    Estilo22.Name = "Estilo22";
                    Estilo22.Bold = true;
                    Estilo22.FontName = "Calibri";
                    Estilo22.FontSize = 11;
                    Estilo22.Underline = UnderlineType.Single;
                    document.CharacterStyles.Add(Estilo22);
                }

                ParagraphStyle Estilo23 = document.ParagraphStyles["Estilo23"];
                if (Estilo23 == null)
                {
                    Estilo23 = document.ParagraphStyles.CreateNew();
                    Estilo23.Name = "Estilo23";
                    Estilo23.Alignment = ParagraphAlignment.Center;
                    Estilo23.FontName = "Calibri";
                    Estilo23.FontSize = 11;
                    Estilo23.Underline = UnderlineType.None;
                    Estilo23.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo23.SpacingBefore = 25;
                    Estilo23.SpacingAfter = 50;
                    document.ParagraphStyles.Add(Estilo23);
                }

                ParagraphStyle Estilo24 = document.ParagraphStyles["Estilo24"];
                if (Estilo24 == null)
                {
                    Estilo24 = document.ParagraphStyles.CreateNew();
                    Estilo24.Name = "Estilo24";
                    Estilo24.FontName = "Calibri";
                    Estilo24.FontSize = 11;
                    Estilo24.Alignment = ParagraphAlignment.Justify;
                    Estilo24.SpacingBefore = 0;
                    Estilo24.SpacingAfter = 0;
                    Estilo24.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    Estilo24.FirstLineIndent = Units.CentimetersToDocumentsF((float)2);
                    Estilo24.LeftIndent = 236;
                    document.ParagraphStyles.Add(Estilo24);
                }

                ParagraphStyle Estilo25 = document.ParagraphStyles["Estilo25"];
                if (Estilo25 == null)
                {
                    Estilo25 = document.ParagraphStyles.CreateNew();
                    Estilo25.Name = "Estilo25";
                    Estilo25.FontName = "Calibri";
                    Estilo25.FontSize = 11;
                    Estilo25.Alignment = ParagraphAlignment.Justify;
                    Estilo25.SpacingBefore = 50;
                    Estilo25.SpacingAfter = 0;
                    Estilo25.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    Estilo25.FirstLineIndent = Units.CentimetersToDocumentsF((float)2.8);
                    Estilo25.LeftIndent = 331;
                    document.ParagraphStyles.Add(Estilo25);
                }

                ParagraphStyle Estilo26 = document.ParagraphStyles["Estilo26"];
                if (Estilo26 == null)
                {
                    Estilo26 = document.ParagraphStyles.CreateNew();
                    Estilo26.Name = "Estilo26";
                    Estilo26.Alignment = ParagraphAlignment.Justify;
                    Estilo26.FontName = "Calibri";
                    Estilo26.FontSize = 11;
                    Estilo26.SpacingBefore = 25;
                    Estilo26.SpacingAfter = 0;
                    Estilo26.Underline = UnderlineType.Single;
                    Estilo26.LeftIndent = 118;
                    document.ParagraphStyles.Add(Estilo26);
                }

                ParagraphStyle Estilo27 = document.ParagraphStyles["Estilo27"];
                if (Estilo27 == null)
                {
                    Estilo27 = document.ParagraphStyles.CreateNew();
                    Estilo27.Name = "Estilo23";
                    Estilo27.Alignment = ParagraphAlignment.Right;
                    Estilo27.FontName = "Calibri";
                    Estilo27.FontSize = 11;
                    document.ParagraphStyles.Add(Estilo27);
                }

                ParagraphStyle Estilo28 = document.ParagraphStyles["Estilo28"];
                if (Estilo28 == null)
                {
                    Estilo28 = document.ParagraphStyles.CreateNew();
                    Estilo28.Name = "Estilo28";
                    Estilo28.FontName = "Calibri";
                    Estilo28.FontSize = 11;
                    Estilo28.Alignment = ParagraphAlignment.Justify;
                    Estilo28.SpacingBefore = 50;
                    Estilo28.SpacingAfter = 0;
                    Estilo28.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    Estilo28.FirstLineIndent = Units.CentimetersToDocumentsF((float)2);
                    Estilo28.LeftIndent = 236;
                    document.ParagraphStyles.Add(Estilo28);
                }

                ParagraphStyle Estilo29 = document.ParagraphStyles["Estilo29"];
                if (Estilo29 == null)
                {
                    Estilo29 = document.ParagraphStyles.CreateNew();
                    Estilo29.Name = "Estilo29";
                    Estilo29.Alignment = ParagraphAlignment.Justify;
                    Estilo29.FontName = "Calibri";
                    Estilo29.FontSize = 11;
                    Estilo29.LeftIndent = 0;
                    document.ParagraphStyles.Add(Estilo29);
                }

                ParagraphStyle Estilo30 = document.ParagraphStyles["Estilo30"];
                if (Estilo30 == null)
                {
                    Estilo30 = document.ParagraphStyles.CreateNew();
                    Estilo30.Name = "Estilo28";
                    Estilo30.FontName = "Calibri";
                    Estilo30.FontSize = 11;
                    Estilo30.Alignment = ParagraphAlignment.Justify;
                    Estilo30.SpacingBefore = 50;
                    Estilo30.SpacingAfter = 25;
                    Estilo30.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    Estilo30.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                    Estilo30.LeftIndent = 118;
                    document.ParagraphStyles.Add(Estilo30);
                }

                ParagraphStyle Estilo31 = document.ParagraphStyles["Estilo31"];
                if (Estilo31 == null)
                {
                    Estilo31 = document.ParagraphStyles.CreateNew();
                    Estilo31.Name = "Estilo31";
                    Estilo31.Alignment = ParagraphAlignment.Justify;
                    Estilo31.FontName = "Calibri";
                    Estilo31.FontSize = 11;
                    Estilo31.Bold = false;
                    Estilo31.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    Estilo31.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                    Estilo31.LeftIndent = 118;
                    document.ParagraphStyles.Add(Estilo31);
                }

                ParagraphStyle Estilo32 = document.ParagraphStyles["Estilo32"];
                if (Estilo32 == null)
                {
                    Estilo32 = document.ParagraphStyles.CreateNew();
                    Estilo32.Name = "Estilo32";
                    Estilo32.Alignment = ParagraphAlignment.Justify;
                    Estilo32.FontName = "Calibri";
                    Estilo32.FontSize = 11;
                    Estilo32.SpacingBefore = 25;
                    Estilo32.SpacingAfter = 0;
                    Estilo32.Underline = UnderlineType.Single;
                    Estilo32.FirstLineIndentType = ParagraphFirstLineIndent.None;
                    Estilo32.LeftIndent = 118;
                    document.ParagraphStyles.Add(Estilo32);
                }

                DevExpress.XtraRichEdit.API.Native.TableStyle EstiloTabla1 = document.TableStyles["EstiloTabla1"];
                if (EstiloTabla1 == null)
                {
                    EstiloTabla1 = document.TableStyles.CreateNew();
                    EstiloTabla1.LeftPadding = Units.CentimetersToDocumentsF((float)0.19);
                    EstiloTabla1.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    EstiloTabla1.SpacingBefore = 0;
                    EstiloTabla1.SpacingAfter = 0;
                    document.TableStyles.Add(EstiloTabla1);
                }

                #endregion

                #region Cabecera Sección0
                var Logo = Server.MapPath("~/Content/Images/logo2024.png");
                SubDocument myHeader1 = firstSection.BeginUpdateHeader(HeaderFooterType.Odd);

                DevExpress.XtraRichEdit.API.Native.Table tablaHeader = myHeader1.Tables.Create(myHeader1.Range.End, 1, 3);
                myHeader1.Images.Insert(tablaHeader[0, 0].Range.Start, DocumentImageSource.FromFile(Logo));
                myHeader1.InsertText(tablaHeader[0, 1].Range.Start, string.Format("INFORME TÉCNICO\n\n COES/D/DO/SEV/IT-{0}-{1}", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO));
                myHeader1.InsertText(tablaHeader[0, 2].Range.Start, string.Format("SUBDIRECCIÓN DE EVALUACIÓN\n\n  {0} DE {1} DE {2}", DateTime.Now.Day.ToString(), COES.Base.Tools.Util.ObtenerNombreMes(DateTime.Now.Month), DateTime.Now.Year));
                
                DevExpress.XtraRichEdit.API.Native.TableCell firstCell = tablaHeader[0, 0];
                firstCell.PreferredWidthType = WidthType.Fixed;
                firstCell.PreferredWidth = Units.CentimetersToDocumentsF((float)4.76);
                firstCell.HeightType = HeightType.Exact;
                firstCell.Height = Units.CentimetersToDocumentsF((float)2.5);
                firstCell.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                firstCell.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                firstCell.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                firstCell.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                ParagraphProperties ParagraphPropertieshd00 = myHeader1.BeginUpdateParagraphs(tablaHeader[0, 0].Range);
                ParagraphPropertieshd00.Style = Estilo1;
                document.EndUpdateParagraphs(ParagraphPropertieshd00);
                tablaHeader[0, 0].VerticalAlignment = TableCellVerticalAlignment.Center;

                DevExpress.XtraRichEdit.API.Native.TableCell SecondCell = tablaHeader[0, 1];
                SecondCell.PreferredWidthType = WidthType.Fixed;
                SecondCell.PreferredWidth = Units.CentimetersToDocumentsF((float)9.02);
                SecondCell.HeightType = HeightType.Exact;
                SecondCell.Height = Units.CentimetersToDocumentsF((float)2.5);
                SecondCell.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                SecondCell.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                SecondCell.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                SecondCell.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                ParagraphProperties ParagraphPropertieshd01 = myHeader1.BeginUpdateParagraphs(tablaHeader[0, 1].Range);
                ParagraphPropertieshd01.Style = Estilo1;
                document.EndUpdateParagraphs(ParagraphPropertieshd01);
                tablaHeader[0, 1].VerticalAlignment = TableCellVerticalAlignment.Center;

                DevExpress.XtraRichEdit.API.Native.TableCell thirdCell = tablaHeader[0, 2];
                thirdCell.PreferredWidthType = WidthType.Fixed;
                thirdCell.PreferredWidth = Units.CentimetersToDocumentsF((float)5.26);
                thirdCell.HeightType = HeightType.Exact;
                thirdCell.Height = Units.CentimetersToDocumentsF((float)2.5);
                thirdCell.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                thirdCell.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                thirdCell.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                thirdCell.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                ParagraphProperties ParagraphPropertieshd02 = myHeader1.BeginUpdateParagraphs(tablaHeader[0, 2].Range);
                ParagraphPropertieshd02.Style = Estilo2;
                document.EndUpdateParagraphs(ParagraphPropertieshd02);
                tablaHeader[0, 2].VerticalAlignment = TableCellVerticalAlignment.Center;

                firstSection.EndUpdateHeader(myHeader1);
                //firstSection.DifferentFirstPage = true;
                //firstSection.LinkHeaderToPrevious();
                #endregion

                #region Cabecera Sección1
                //var Logo2 = Server.MapPath("~/Content/Images/logo2024.png");
                //SubDocument myHeader2 = secondSection.BeginUpdateHeader(HeaderFooterType.Even);

                //DevExpress.XtraRichEdit.API.Native.Table tablaHeader2 = myHeader2.Tables.Create(myHeader2.Range.End, 1, 2);
                //myHeader2.Images.Insert(tablaHeader2[0, 0].Range.Start, DocumentImageSource.FromFile(Logo));
                //myHeader2.InsertText(tablaHeader2[0, 1].Range.Start, string.Format("SUBDIRECCIÓN DE EVALUACIÓN\nCOES/D/DO/SEV/IT-{0}-{1}\n{2}-{3}", obj.oAnalisisFallaDTO.AFECORR.ToString("D3"), obj.oAnalisisFallaDTO.AFEANIO, COES.Base.Tools.Util.ObtenerNombreMes(DateTime.Now.Month), DateTime.Now.Year));

                //DevExpress.XtraRichEdit.API.Native.TableCell Cellhd2_00 = tablaHeader2[0, 0];
                //Cellhd2_00.PreferredWidthType = WidthType.Fixed;
                //Cellhd2_00.PreferredWidth = Units.CentimetersToDocumentsF((float)4.76);
                //Cellhd2_00.HeightType = HeightType.Exact;
                //Cellhd2_00.Height = Units.CentimetersToDocumentsF((float)2.5);
                //Cellhd2_00.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                //Cellhd2_00.Borders.Left.LineStyle = TableBorderLineStyle.None;
                //Cellhd2_00.Borders.Right.LineStyle = TableBorderLineStyle.None;
                //Cellhd2_00.Borders.Top.LineStyle = TableBorderLineStyle.None;
                //ParagraphProperties ParagraphPropertieshd2_00 = myHeader2.BeginUpdateParagraphs(tablaHeader2[0, 0].Range);
                //ParagraphPropertieshd2_00.Style = Estilo4;
                //document.EndUpdateParagraphs(ParagraphPropertieshd2_00);
                //tablaHeader2[0, 0].VerticalAlignment = TableCellVerticalAlignment.Center;

                //DevExpress.XtraRichEdit.API.Native.TableCell Cellhd2_01 = tablaHeader2[0, 1];
                //Cellhd2_01.PreferredWidthType = WidthType.Fixed;
                //Cellhd2_01.PreferredWidth = Units.CentimetersToDocumentsF((float)11.02);
                //Cellhd2_01.HeightType = HeightType.Exact;
                //Cellhd2_01.Height = Units.CentimetersToDocumentsF((float)2.5);
                //Cellhd2_01.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                //Cellhd2_01.Borders.Left.LineStyle = TableBorderLineStyle.None;
                //Cellhd2_01.Borders.Right.LineStyle = TableBorderLineStyle.None;
                //Cellhd2_01.Borders.Top.LineStyle = TableBorderLineStyle.None;
                //ParagraphProperties ParagraphPropertieshd2_01 = myHeader2.BeginUpdateParagraphs(tablaHeader2[0, 1].Range);
                //ParagraphPropertieshd2_01.Style = Estilo3;
                //document.EndUpdateParagraphs(ParagraphPropertieshd2_01);
                //tablaHeader2[0, 1].VerticalAlignment = TableCellVerticalAlignment.Center;

                //secondSection.EndUpdateHeader(myHeader2);

                #endregion

                #region Foother

                SubDocument myFoother = firstSection.BeginUpdateFooter(HeaderFooterType.Primary);
                myFoother.AppendText("Página ");
                myFoother.Fields.Create(myFoother.AppendText("Page"));
                myFoother.AppendText(" de ");
                myFoother.Fields.Create(myFoother.AppendText("NumPages"));
                myFoother.Fields.Update();
                firstSection.EndUpdateFooter(myFoother);

                #endregion

                #region Sección1: Evento

                int IndexSec1Evento = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec1Evento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1Evento = document.Paragraphs.Insert(PosSec1Evento);
                document.InsertText(PosSec1Evento, "EVENTO\t:\t" + obj.oEventoDTO.EVENASUNTO);
                document.Paragraphs[IndexSec1Evento].Style = Estilo24;

                int RangoIniSec1 = document.Paragraphs[IndexSec1Evento].Range.Start.ToInt();
                int RangoFinSec1 = 9;
                DocumentRange FormatoRangoSec1 = document.CreateRange(document.Paragraphs[IndexSec1Evento].Range.Start, RangoFinSec1);
                CharacterProperties CarPropRangoSec1 = document.BeginUpdateCharacters(FormatoRangoSec1);
                CarPropRangoSec1.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec1);


                TabInfoCollection tabsEvento = document.Paragraphs[IndexSec1Evento].BeginUpdateTabs(true);
                TabInfo tab1Evento = new TabInfo();
                tab1Evento.Position = Units.CentimetersToDocumentsF((float)1.5);
                tab1Evento.Alignment = TabAlignmentType.Left;
                tabsEvento.Add(tab1Evento);

                TabInfo tab2Evento = new TabInfo();
                tab2Evento.Position = Units.CentimetersToDocumentsF((float)2);
                tab2Evento.Alignment = TabAlignmentType.Left;
                tabsEvento.Add(tab2Evento);

                document.Paragraphs[IndexSec1Evento].EndUpdateTabs(tabsEvento);

                #endregion

                #region Sección2: Fecha
                string fechasEventos = string.Empty;
                if (obj.ListaInformeCtaf != null)
                {
                    if (obj.ListaInformeCtaf.Any())
                    {
                        var tempListaInformeCtaf = obj.ListaInformeCtaf.Where(x => x.EVENINI.HasValue).OrderBy(x => x.EVENINI).ToList();
                        var listaFechas = tempListaInformeCtaf.Select(x => x.EVENINI.Value).ToList();
                        var listaFechasString = listaFechas.Select(x => x.ToString("dd.MM.yyyy")).Distinct().ToList();

                        if (listaFechasString.Any())
                        {
                            int ultimaIteracion = listaFechasString.Count - 1;

                            for (int i = 0; i < listaFechasString.Count; i++)
                            {
                                string separacion = string.Empty;

                                if (i > 0 && listaFechasString.Count > 2 && ultimaIteracion != i)
                                {
                                    separacion = ", ";
                                }

                                if (ultimaIteracion == i && listaFechasString.Count > 1)
                                {
                                    separacion = " y ";
                                }

                                fechasEventos = string.Concat(fechasEventos, separacion, listaFechasString[i]);
                            }

                            fechasEventos = string.Concat(fechasEventos, ".");
                        }
                    }
                }

                int posRangoSec2 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec2Fecha = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2Fecha = document.Paragraphs.Insert(PosSec2Fecha);
                document.InsertText(PosSec2Fecha, "FECHA\t:\t" + fechasEventos);
                document.Paragraphs[posRangoSec2].Style = Estilo28;

                int RangoIniSec2 = document.Paragraphs[posRangoSec2].Range.Start.ToInt();
                int RangoFinSec2 = 8;
                DocumentRange FormatoRangoSec2 = document.CreateRange(RangoIniSec2, RangoFinSec2);
                CharacterProperties CarPropRangoSec2 = document.BeginUpdateCharacters(FormatoRangoSec2);
                CarPropRangoSec2.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec2);

                TabInfoCollection tabsFecha = document.Paragraphs[posRangoSec2].BeginUpdateTabs(true);
                TabInfo tab1Fecha = new TabInfo();
                tab1Fecha.Position = Units.CentimetersToDocumentsF((float)1.5);
                tab1Fecha.Alignment = TabAlignmentType.Left;
                tabsFecha.Add(tab1Fecha);

                TabInfo tab2Fecha = new TabInfo();
                tab2Fecha.Position = Units.CentimetersToDocumentsF((float)2);
                tab2Fecha.Alignment = TabAlignmentType.Left;
                tabsFecha.Add(tab2Fecha);

                document.Paragraphs[posRangoSec2].EndUpdateTabs(tabsFecha);

                #endregion

                #region Sección3: Hora
                string horasEventos = string.Empty;
                if (obj.ListaInformeCtaf != null)
                {
                    if (obj.ListaInformeCtaf.Any())
                    {
                        var tempListaInformeCtaf = obj.ListaInformeCtaf.Where(x => x.EVENINI.HasValue).OrderBy(x => x.EVENINI).ToList();
                        var listaFechas = tempListaInformeCtaf.Select(x => x.EVENINI.Value).ToList();
                        var listaHorasString = listaFechas.Select(x => x.ToString("HH:mm")).Distinct().ToList();

                        if (listaHorasString.Any())
                        {
                            int ultimaIteracion = listaHorasString.Count - 1;
                            for (int i = 0; i < listaHorasString.Count; i++)
                            {
                                string separacion = string.Empty;

                                if (i > 0 && listaHorasString.Count > 2 && ultimaIteracion != i)
                                {
                                    separacion = ", ";
                                }

                                if (ultimaIteracion == i && listaHorasString.Count > 1)
                                {
                                    separacion = " y ";
                                }

                                horasEventos = string.Concat(horasEventos, separacion, listaHorasString[i]);
                            }
                            horasEventos = string.Concat(horasEventos, ".");
                        }
                    }
                }

                int posRangoSec3 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec3Hora = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec3Hora = document.Paragraphs.Insert(PosSec3Hora);
                document.InsertText(PosSec3Hora, "HORA\t:\t" + horasEventos);
                document.Paragraphs[posRangoSec3].Style = Estilo28;

                int RangoIniSec3 = document.Paragraphs[posRangoSec3].Range.Start.ToInt();
                int RangoFinSec3 = 7;
                DocumentRange FormatoRangoSec3 = document.CreateRange(RangoIniSec3, RangoFinSec3);
                CharacterProperties CarPropRangoSec3 = document.BeginUpdateCharacters(FormatoRangoSec3);
                CarPropRangoSec3.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec3);

                TabInfoCollection tabsHora = document.Paragraphs[posRangoSec3].BeginUpdateTabs(true);
                TabInfo tab1Hora = new TabInfo();
                tab1Hora.Position = Units.CentimetersToDocumentsF((float)1.5);
                tab1Hora.Alignment = TabAlignmentType.Left;
                tabsHora.Add(tab1Hora);

                TabInfo tab2Hora = new TabInfo();
                tab2Hora.Position = Units.CentimetersToDocumentsF((float)2);
                tab2Hora.Alignment = TabAlignmentType.Left;
                tabsHora.Add(tab2Hora);

                document.Paragraphs[posRangoSec3].EndUpdateTabs(tabsHora);

                #endregion

                #region Sección4: Descripción del Evento

                int posRangoSec4 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec4DescripcionEvento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6DescripcionEvento = document.Paragraphs.Insert(PosSec4DescripcionEvento);
                document.InsertText(PosSec4DescripcionEvento, "DESCRIPCIÓN DEL EVENTO");
                document.Paragraphs[posRangoSec4].Style = Estilo8;

                int RangoIniSec4 = document.Paragraphs[posRangoSec4].Range.Start.ToInt();
                int RangoFinSec4 = 23;
                DocumentRange FormatoRangoSec4 = document.CreateRange(RangoIniSec4, RangoFinSec4);
                CharacterProperties CarPropRangoSec4 = document.BeginUpdateCharacters(FormatoRangoSec4);
                CarPropRangoSec4.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec4);

                int posParInicioEventosSeccion4 = document.Sections[0].Paragraphs.ToList().Count();
                ParrafoDTO _parrafoSec4 = new ParrafoDTO();
                _parrafoSec4.NroParrafo = posParInicioEventosSeccion4;
                _parrafoSec4.RangeIniParrafo = posParInicioEventosSeccion4;
                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    foreach (var itemEvento in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                    {
                        string valorEvento = itemEvento.CabNombreEvento;

                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            int posCabSeccion4 = document.Sections[0].Paragraphs.ToList().Count();
                            DocumentPosition PosSec4Evento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParSec4Evento = document.Paragraphs.Insert(PosSec4Evento);
                            document.InsertText(PosSec4Evento, valorEvento);
                            document.Paragraphs[posCabSeccion4].Style = Estilo5;

                        }

                        int posDetSeccion4 = document.Sections[0].Paragraphs.ToList().Count();
                        DocumentPosition PosSec4Descripcion = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec4Descripcion = document.Paragraphs.Insert(PosSec4Descripcion);
                        document.InsertText(PosSec4Descripcion, itemEvento.CabDescripcionEvento);
                        int posFinRgDetSeccion4 = document.Paragraphs.ToList().Count();

                        DocumentRange rangePPDesc = document.CreateRange(document.Paragraphs[posDetSeccion4].Range.Start, document.Paragraphs[posFinRgDetSeccion4 - 1].Range.End.ToInt() - document.Paragraphs[posDetSeccion4].Range.Start.ToInt());
                        ParagraphProperties ppDesc = document.BeginUpdateParagraphs(rangePPDesc);
                        ppDesc.Style = Estilo6;
                        document.EndUpdateParagraphs(ppDesc);
                        CharacterProperties CarPropRangoDetSec6_salto = document.BeginUpdateCharacters(rangePPDesc);
                        CarPropRangoDetSec6_salto.Style = Estilo7;
                        document.EndUpdateCharacters(CarPropRangoDetSec6_salto);
                    }
                }

                int posParFinalEventosSeccion4 = document.Sections[0].Paragraphs.ToList().Count();
                _parrafoSec4.RangeFinParrafo = posParFinalEventosSeccion4;
                ListaParrafos.Add(_parrafoSec4);
                #endregion

                #region Sección5: Condiciones Previas

                int posRangoSec5 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec5CondPrevias = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec7CondPrevias = document.Paragraphs.Insert(PosSec5CondPrevias);
                document.InsertText(PosSec5CondPrevias, "CONDICIONES DEL SISTEMA PREVIO AL EVENTO");

                CharacterProperties CarPropRangoSec5 = document.BeginUpdateCharacters(document.Paragraphs[posRangoSec5].Range);
                CarPropRangoSec5.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec5);

                int posParLevel1Sec5 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec5_1CondPrevias = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec5_1CondPrevias = document.Paragraphs.Insert(PosSec5_1CondPrevias);
                document.InsertText(PosSec5_1CondPrevias, "Las condiciones operativas del SEIN previas al evento fueron las siguientes:");
                CharacterProperties CarPropRangoConPreSec5 = document.BeginUpdateCharacters(document.Paragraphs[posParLevel1Sec5].Range);
                CarPropRangoConPreSec5.Style = Estilo7;
                document.EndUpdateCharacters(CarPropRangoConPreSec5);

                int posIniParLevel1Sec5_1_1 = document.Sections[0].Paragraphs.ToList().Count();
                int posDetIniCentralSeccion5 = 0, IndexFinCondiciones = 0;
                 
                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    for (int r = 0; r < obj.ListaInformeCtaf.Count; r++)
                    {
                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            int posCabSeccion5 = document.Sections[0].Paragraphs.ToList().Count();
                            ParrafoDTO _Parrafo = new ParrafoDTO();
                            _Parrafo.NroParrafo = posCabSeccion5;
                            _Parrafo.RangeIniParrafo = posCabSeccion5;
                            _Parrafo.RangeFinParrafo = posCabSeccion5;
                            ListaParrafos.Add(_Parrafo);

                            DocumentPosition PosCabSec5Evento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab5Evento = document.Paragraphs.Insert(PosCabSec5Evento);
                            document.InsertText(PosCabSec5Evento, obj.ListaInformeCtaf[r].CabNombreEvento);
                            document.Paragraphs[posCabSeccion5].Style = Estilo10;
                            CharacterProperties CharacterPropertiesCabSeccion5 = document.BeginUpdateCharacters(document.Paragraphs[posCabSeccion5].Range);
                            CharacterPropertiesCabSeccion5.Style = Estilo14;
                            document.EndUpdateCharacters(CharacterPropertiesCabSeccion5);
                        }

                        if ((obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaCentral == null)
                            && (obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaLinea == null)
                            && (obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count == 0 || obj.ListaInformeCtaf[r].listaCondPreviaTransformadores == null))
                        {
                            int posDetSeccion5 = document.Sections[0].Paragraphs.ToList().Count();
                            ParrafoDTO _Parrafo1 = new ParrafoDTO();
                            _Parrafo1.NroParrafo = posDetSeccion5;
                            _Parrafo1.RangeIniParrafo = posDetSeccion5;
                            _Parrafo1.RangeFinParrafo = posDetSeccion5;
                            ListaParrafos.Add(_Parrafo1);

                            DocumentPosition PosDetSec5Evento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet5Evento = document.Paragraphs.Insert(PosDetSec5Evento);
                            document.InsertText(PosDetSec5Evento, "No existen registros.");
                            document.Paragraphs[posDetSeccion5].Style = Estilo11;
                            CharacterProperties CharacterPropertiesDetSec5Evento = document.BeginUpdateCharacters(document.Paragraphs[posDetSeccion5].Range);
                            CharacterPropertiesDetSec5Evento.Style = Estilo7;
                            document.EndUpdateCharacters(CharacterPropertiesDetSec5Evento);
                        }
                        else
                        {
                            if (obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaCentral != null)
                            {
                                posDetIniCentralSeccion5 = document.Sections[0].Paragraphs.ToList().Count();
                                DocumentPosition PosDetSec5Central = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet5Central = document.Paragraphs.Insert(PosDetSec5Central);
                                document.InsertText(PosDetSec5Central, "Flujo por potencia por los principales centros de generación de la zona:");
                                document.Paragraphs[posDetIniCentralSeccion5].Style = Estilo11;
                                CharacterProperties CharacterPropertiesDetIniCentralSeccion5 = document.BeginUpdateCharacters(document.Paragraphs[posDetIniCentralSeccion5].Range);
                                CharacterPropertiesDetIniCentralSeccion5.Style = Estilo7;
                                document.EndUpdateCharacters(CharacterPropertiesDetIniCentralSeccion5);

                                int posDetIniTablaCentralSeccion5 = document.Sections[0].Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo2 = new ParrafoDTO();
                                _Parrafo2.NroParrafo = posDetIniTablaCentralSeccion5;
                                _Parrafo2.RangeIniParrafo = posDetIniTablaCentralSeccion5;

                                int rowsCentral = obj.ListaInformeCtaf[r].listaCondPreviaCentral.Count + 2;
                                DocumentPosition PostablaCondCentral = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaCondCentral = document.Tables.Create(PostablaCondCentral, rowsCentral, 5);
                                tablaCondCentral.BeginUpdate();

                                #region Configuracion Tabla
                                tablaCondCentral.Style = EstiloTabla1;
                                tablaCondCentral.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaCondCentral.VerticalAlignment = TableVerticalAlignment.None;
                                tablaCondCentral.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaCondCentral.TextWrappingType = TableTextWrappingType.Around;
                                tablaCondCentral.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaCondCentral.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaCondCentral.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaCondCentral.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaCondCentral.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaCondCentral.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaCondCentral.MergeCells(tablaCondCentral[0, 0], tablaCondCentral[1, 0]);
                                tablaCondCentral.MergeCells(tablaCondCentral[0, 1], tablaCondCentral[1, 1]);
                                tablaCondCentral.MergeCells(tablaCondCentral[0, 2], tablaCondCentral[1, 2]);
                                tablaCondCentral.MergeCells(tablaCondCentral[0, 3], tablaCondCentral[0, 4]);

                                tablaCondCentral.PreferredWidthType = WidthType.Fixed;
                                tablaCondCentral.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaCondCentral[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)0.93);
                                Cel00.HeightType = HeightType.Exact;
                                Cel00.Height = Units.CentimetersToDocumentsF((float)0.6);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaCondCentral[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaCondCentral[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaCondCentral[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)3.12);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaCondCentral[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaCondCentral[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaCondCentral[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.58);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaCondCentral[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaCondCentral[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaCondCentral[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)4.25);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaCondCentral[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaCondCentral[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel10 = tablaCondCentral[1, 0];
                                Cel10.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel11 = tablaCondCentral[1, 1];
                                Cel11.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel12 = tablaCondCentral[1, 2];
                                Cel12.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel13 = tablaCondCentral[1, 3];
                                Cel13.PreferredWidthType = WidthType.Fixed;
                                Cel13.PreferredWidth = Units.CentimetersToDocumentsF((float)2.125);
                                Cel13.HeightType = HeightType.Exact;
                                Cel13.Height = Units.CentimetersToDocumentsF((float)0.6);
                                Cel13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.BackgroundColor = Color.LightGray;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.TopPadding = 0;
                                Cel13.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel13 = document.BeginUpdateParagraphs(tablaCondCentral[1, 3].Range);
                                ParagraphPropertiesCel13.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel13.SpacingAfter = 0;
                                ParagraphPropertiesCel13.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel13);
                                CharacterProperties CharacterPropertiesCel13 = document.BeginUpdateCharacters(tablaCondCentral[1, 3].Range);
                                CharacterPropertiesCel13.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel13);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel14 = tablaCondCentral[1, 4];
                                Cel14.PreferredWidthType = WidthType.Fixed;
                                Cel14.PreferredWidth = Units.CentimetersToDocumentsF((float)2.125);
                                Cel14.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.BackgroundColor = Color.LightGray;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.TopPadding = 0;
                                Cel14.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel14 = document.BeginUpdateParagraphs(tablaCondCentral[1, 4].Range);
                                ParagraphPropertiesCel14.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel14.SpacingAfter = 0;
                                ParagraphPropertiesCel14.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel14);
                                CharacterProperties CharacterPropertiesCel14 = document.BeginUpdateCharacters(tablaCondCentral[1, 4].Range);
                                CharacterPropertiesCel14.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel14);

                                tablaCondCentral.Rows[0].RepeatAsHeaderRow = true;
                                tablaCondCentral.Rows[1].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos de tabla

                                document.InsertText(tablaCondCentral[0, 0].Range.Start, "N°");
                                document.InsertText(tablaCondCentral[0, 1].Range.Start, "Central");
                                document.InsertText(tablaCondCentral[0, 2].Range.Start, "Unidad");
                                document.InsertText(tablaCondCentral[0, 3].Range.Start, "Generación");
                                document.InsertText(tablaCondCentral[1, 3].Range.Start, "MW");
                                document.InsertText(tablaCondCentral[1, 4].Range.Start, "MVAr");

                                int contadorCentral = 2;
                                int contadorFilas = 1;

                                var listaCondPreviaCentral = obj.ListaInformeCtaf[r].listaCondPreviaCentral;
                                var gruposCentral = listaCondPreviaCentral.GroupBy(x => x.EVECONDPRCENTRALDE).ToList();

                                foreach (var grupoCentral in gruposCentral)
                                {
                                    if (grupoCentral.Count() > 1)
                                    {
                                        tablaCondCentral.MergeCells(tablaCondCentral[contadorCentral, 0], tablaCondCentral[contadorCentral + grupoCentral.Count() - 1, 0]);
                                        tablaCondCentral.MergeCells(tablaCondCentral[contadorCentral, 1], tablaCondCentral[contadorCentral + grupoCentral.Count() - 1, 1]);

                                        foreach (var central in grupoCentral)
                                        {
                                            document.InsertText(tablaCondCentral[contadorCentral, 0].Range.Start, contadorFilas.ToString());
                                            document.InsertText(tablaCondCentral[contadorCentral, 1].Range.Start, central.EVECONDPRCENTRALDE == null ? "" : central.EVECONDPRCENTRALDE.TrimEnd());
                                            document.InsertText(tablaCondCentral[contadorCentral, 2].Range.Start, central.EVECONDPRCODIGOUNIDAD == null ? "" : central.EVECONDPRCODIGOUNIDAD.ToString());
                                            document.InsertText(tablaCondCentral[contadorCentral, 3].Range.Start, central.EVECONDPRPOTENCIAMW == null ? "" : central.EVECONDPRPOTENCIAMW.ToString());
                                            document.InsertText(tablaCondCentral[contadorCentral, 4].Range.Start, central.EVECONDPRPOTENCIAMVAR == null ? "" : central.EVECONDPRPOTENCIAMVAR.ToString());

                                            for (int x = 0; x <= 4; x++)
                                            {
                                                DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaCondCentral[contadorCentral, x];
                                                Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                                Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                                Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                                Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                                Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                                Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                                DocumentRange RangeCeli0 = Celi0.Range;
                                                CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                                CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                                CharacterPropertiesRangeCeli0.FontSize = 11;
                                                CharacterPropertiesRangeCeli0.Bold = false;
                                                document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                                ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaCondCentral[contadorCentral, x].Range);
                                                ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                                ParagraphPropertiesCeli0.SpacingAfter = 0;
                                                ParagraphPropertiesCeli0.SpacingBefore = 0;
                                                document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                            }
                                            contadorCentral++;
                                        }
                                        contadorFilas++;
                                    }
                                    else
                                    {
                                        var central = grupoCentral.FirstOrDefault();
                                        document.InsertText(tablaCondCentral[contadorCentral, 0].Range.Start, contadorFilas.ToString());
                                        document.InsertText(tablaCondCentral[contadorCentral, 1].Range.Start, central.EVECONDPRCENTRALDE == null ? "" : central.EVECONDPRCENTRALDE.TrimEnd());
                                        document.InsertText(tablaCondCentral[contadorCentral, 2].Range.Start, central.EVECONDPRCODIGOUNIDAD == null ? "" : central.EVECONDPRCODIGOUNIDAD.ToString());
                                        document.InsertText(tablaCondCentral[contadorCentral, 3].Range.Start, central.EVECONDPRPOTENCIAMW == null ? "" : central.EVECONDPRPOTENCIAMW.ToString());
                                        document.InsertText(tablaCondCentral[contadorCentral, 4].Range.Start, central.EVECONDPRPOTENCIAMVAR == null ? "" : central.EVECONDPRPOTENCIAMVAR.ToString());

                                        for (int x = 0; x <= 4; x++)
                                        {
                                            DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaCondCentral[contadorCentral, x];
                                            Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                            Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                            Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                            DocumentRange RangeCeli0 = Celi0.Range;
                                            CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                            CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                            CharacterPropertiesRangeCeli0.FontSize = 11;
                                            CharacterPropertiesRangeCeli0.Bold = false;
                                            document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                            ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaCondCentral[contadorCentral, x].Range);
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                            ParagraphPropertiesCeli0.SpacingAfter = 0;
                                            ParagraphPropertiesCeli0.SpacingBefore = 0;
                                            document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                        }

                                        contadorCentral++;
                                        contadorFilas++;
                                    }
                                }

                                #endregion

                                int PosSubtitCentral = document.Paragraphs.ToList().Count();

                                document.AppendText("F/S: Fuera de servicio por operación.");
                                ParagraphProperties ParagraphPropertiesSubtitCentral7 = document.BeginUpdateParagraphs(document.Paragraphs[PosSubtitCentral - 1].Range);
                                ParagraphPropertiesSubtitCentral7.Style = Estilo12;
                                document.EndUpdateParagraphs(ParagraphPropertiesSubtitCentral7);
                                CharacterProperties CharacterPropertiesSubtitCentral7 = document.BeginUpdateCharacters(document.Paragraphs[PosSubtitCentral - 1].Range);
                                CharacterPropertiesSubtitCentral7.Style = Estilo13;

                                int posDetFinTablaCentralSeccion7 = document.Paragraphs.ToList().Count();
                                _Parrafo2.RangeFinParrafo = posDetFinTablaCentralSeccion7;
                                ListaParrafos.Add(_Parrafo2);
                            }

                            if (obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaLinea != null)
                            {
                                int posDetIniLineaSeccion7 = document.Paragraphs.ToList().Count();

                                DocumentPosition PosDetSec7Linea = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet7Linea = document.Paragraphs.Insert(PosDetSec7Linea);
                                document.InsertText(PosDetSec7Linea, "Flujo de potencia por las principales líneas de la zona:");
                                document.Paragraphs[posDetIniLineaSeccion7].Style = Estilo11;
                                CharacterProperties CharacterPropertiesDetIniLineaSeccion7 = document.BeginUpdateCharacters(document.Paragraphs[posDetIniLineaSeccion7].Range);
                                CharacterPropertiesDetIniLineaSeccion7.Style = Estilo7;
                                document.EndUpdateCharacters(CharacterPropertiesDetIniLineaSeccion7);

                                int posDetIniTablaLineaSeccion7 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo3 = new ParrafoDTO();
                                _Parrafo3.NroParrafo = posDetIniTablaLineaSeccion7;
                                _Parrafo3.RangeIniParrafo = posDetIniTablaLineaSeccion7;

                                int rowsLinea = obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count + 1;
                                DocumentPosition PostablaLinea = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaLinea = document.Tables.Create(PostablaLinea, rowsLinea, 5);
                                tablaLinea.BeginUpdate();

                                #region Configuracion Tabla

                                tablaLinea.Style = EstiloTabla1;
                                tablaLinea.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaLinea.VerticalAlignment = TableVerticalAlignment.None;
                                tablaLinea.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaLinea.TextWrappingType = TableTextWrappingType.Around;
                                tablaLinea.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaLinea.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaLinea.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaLinea.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaLinea.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaLinea.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaLinea[0, 2].Split(2, 2);
                                tablaLinea[0, 4].Split(1, 2);

                                tablaLinea.MergeCells(tablaLinea[0, 0], tablaLinea[1, 0]);
                                tablaLinea.MergeCells(tablaLinea[0, 1], tablaLinea[1, 1]);
                                tablaLinea.MergeCells(tablaLinea[0, 2], tablaLinea[0, 3]);
                                tablaLinea.MergeCells(tablaLinea[0, 4], tablaLinea[1, 4]);

                                tablaLinea.PreferredWidthType = WidthType.Fixed;
                                tablaLinea.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaLinea[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)1);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaLinea[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaLinea[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaLinea[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaLinea[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaLinea[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaLinea[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)7);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaLinea[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaLinea[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaLinea[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaLinea[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaLinea[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaLinea[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaLinea[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaLinea[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel10 = tablaLinea[1, 0];
                                Cel10.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel11 = tablaLinea[1, 1];
                                Cel11.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel12 = tablaLinea[1, 2];
                                Cel12.PreferredWidthType = WidthType.Fixed;
                                Cel12.PreferredWidth = Units.CentimetersToDocumentsF((float)3.5);
                                Cel12.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel12.BackgroundColor = Color.LightGray;
                                Cel12.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel12.TopPadding = 0;
                                Cel12.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel12 = document.BeginUpdateParagraphs(tablaLinea[1, 2].Range);
                                ParagraphPropertiesCel12.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel12.SpacingAfter = 0;
                                ParagraphPropertiesCel12.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel12);
                                CharacterProperties CharacterPropertiesCel12 = document.BeginUpdateCharacters(tablaLinea[1, 2].Range);
                                CharacterPropertiesCel12.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel12);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel13 = tablaLinea[1, 3];
                                Cel13.PreferredWidthType = WidthType.Fixed;
                                Cel13.PreferredWidth = Units.CentimetersToDocumentsF((float)3.5);
                                Cel13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.BackgroundColor = Color.LightGray;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.TopPadding = 0;
                                Cel13.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel13 = document.BeginUpdateParagraphs(tablaLinea[1, 3].Range);
                                ParagraphPropertiesCel13.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel13.SpacingAfter = 0;
                                ParagraphPropertiesCel13.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel13);
                                CharacterProperties CharacterPropertiesCel13 = document.BeginUpdateCharacters(tablaLinea[1, 3].Range);
                                CharacterPropertiesCel13.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel13);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel14 = tablaLinea[1, 4];
                                Cel14.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel15 = tablaLinea[1, 5];
                                Cel15.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                tablaLinea.Rows[0].RepeatAsHeaderRow = true;
                                tablaLinea.Rows[1].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaLinea[0, 0].Range.Start, "N°");
                                document.InsertText(tablaLinea[0, 1].Range.Start, "Código");
                                document.InsertText(tablaLinea[0, 2].Range.Start, "Subestaciones");
                                document.InsertText(tablaLinea[1, 2].Range.Start, "De");
                                document.InsertText(tablaLinea[1, 3].Range.Start, "A");
                                document.InsertText(tablaLinea[0, 3].Range.Start, "Potencia Activa (MW)");
                                document.InsertText(tablaLinea[0, 4].Range.Start, "Potencia Reactiva (MVAr)");


                                int contadorLinea = 2;

                                for (int x = 0; x < obj.ListaInformeCtaf[r].listaCondPreviaLinea.Count; x++)
                                {
                                    tablaLinea[contadorLinea, 2].Split(1, 2);
                                    document.InsertText(tablaLinea[contadorLinea, 0].Range.Start, (x + 1).ToString());
                                    document.InsertText(tablaLinea[contadorLinea, 1].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCODIGOUNIDAD == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCODIGOUNIDAD);
                                    document.InsertText(tablaLinea[contadorLinea, 2].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCENTRALDE == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRCENTRALDE.TrimEnd());
                                    document.InsertText(tablaLinea[contadorLinea, 3].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRSUBESTACIONA == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRSUBESTACIONA.ToString());
                                    document.InsertText(tablaLinea[contadorLinea, 4].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMW == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMW.ToString());
                                    document.InsertText(tablaLinea[contadorLinea, 5].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMVAR == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaLinea[x].EVECONDPRPOTENCIAMVAR.ToString());

                                    for (int y = 0; y <= 5; y++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaLinea[contadorLinea, y];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaLinea[contadorLinea, y].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                    contadorLinea++;
                                }

                                #endregion

                                int PosSubtitLinea = document.Paragraphs.ToList().Count();
                                document.AppendText("(*): Datos extraídas del SCADA COES.");
                                ParagraphProperties ParagraphPropertiesSubTitLinea7 = document.BeginUpdateParagraphs(document.Paragraphs[PosSubtitLinea - 1].Range);
                                ParagraphPropertiesSubTitLinea7.Style = Estilo12;
                                document.EndUpdateParagraphs(ParagraphPropertiesSubTitLinea7);
                                CharacterProperties CharacterPropertiesSubTitLinea7 = document.BeginUpdateCharacters(document.Paragraphs[PosSubtitLinea - 1].Range);
                                CharacterPropertiesSubTitLinea7.Style = Estilo13;

                                int posDetFinTablaLineaSeccion7 = document.Paragraphs.ToList().Count();
                                _Parrafo3.RangeFinParrafo = posDetFinTablaLineaSeccion7;
                                ListaParrafos.Add(_Parrafo3);
                            }

                            if (obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count > 0 && obj.ListaInformeCtaf[r].listaCondPreviaTransformadores != null)
                            {
                                int posDetIniTransformadorSeccion7 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetSec7Transformador = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet7Transformador = document.Paragraphs.Insert(PosDetSec7Transformador);
                                document.InsertText(PosDetSec7Transformador, "Flujo de potencia por los transformadores de potencia de la zona:");
                                document.Paragraphs[posDetIniTransformadorSeccion7].Style = Estilo11;
                                CharacterProperties CharacterPropertiesDetSec7Transformador = document.BeginUpdateCharacters(document.Paragraphs[posDetIniTransformadorSeccion7].Range);
                                CharacterPropertiesDetSec7Transformador.Style = Estilo7;
                                document.EndUpdateCharacters(CharacterPropertiesDetSec7Transformador);

                                int posDetIniTablaTransformadorSeccion7 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo4 = new ParrafoDTO();
                                _Parrafo4.NroParrafo = posDetIniTablaTransformadorSeccion7;
                                _Parrafo4.RangeIniParrafo = posDetIniTablaTransformadorSeccion7;

                                var rowsTransformador = obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count + 1;
                                DocumentPosition PostablaTransformador = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaTransformador = document.Tables.Create(PostablaTransformador, rowsTransformador, 7);
                                tablaTransformador.BeginUpdate();

                                #region Configuracion Tabla

                                tablaTransformador.Style = EstiloTabla1;
                                tablaTransformador.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaTransformador.VerticalAlignment = TableVerticalAlignment.None;
                                tablaTransformador.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaTransformador.TextWrappingType = TableTextWrappingType.Around;
                                tablaTransformador.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaTransformador.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaTransformador.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaTransformador.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaTransformador.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaTransformador.MarginRight = Units.CentimetersToDocumentsF((float)0.25);
                                tablaTransformador.PreferredWidthType = WidthType.Fixed;
                                tablaTransformador.PreferredWidth = Units.CentimetersToDocumentsF((float)14.45);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaTransformador[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)0.9);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaTransformador[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaTransformador[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaTransformador[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2.29);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaTransformador[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaTransformador[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaTransformador[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)3.06);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaTransformador[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaTransformador[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaTransformador[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)3.06);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaTransformador[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaTransformador[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaTransformador[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)2.69);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaTransformador[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaTransformador[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaTransformador[0, 5];
                                Cel05.PreferredWidthType = WidthType.Fixed;
                                Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)2.21);
                                Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel05.BackgroundColor = Color.LightGray;
                                Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel05.TopPadding = 0;
                                Cel05.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaTransformador[0, 5].Range);
                                ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel05.SpacingAfter = 0;
                                ParagraphPropertiesCel05.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                                CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaTransformador[0, 5].Range);
                                CharacterPropertiesCel05.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesCel05);

                                tablaTransformador.Rows[0].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaTransformador[0, 0].Range.Start, "N°");
                                document.InsertText(tablaTransformador[0, 1].Range.Start, "Código");
                                document.InsertText(tablaTransformador[0, 2].Range.Start, "S.E.");
                                document.InsertText(tablaTransformador[0, 3].Range.Start, "Nivel de\nTensión\n(kV)");
                                document.InsertText(tablaTransformador[0, 4].Range.Start, "Potencia Activa (MW)");
                                document.InsertText(tablaTransformador[0, 5].Range.Start, "Potencia Reactiva (MVAr)");

                                for (int x = 0; x < obj.ListaInformeCtaf[r].listaCondPreviaTransformadores.Count; x++)
                                {
                                    document.InsertText(tablaTransformador[x + 1, 0].Range.Start, (x + 1).ToString());
                                    document.InsertText(tablaTransformador[x + 1, 1].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCODIGOUNIDAD == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCODIGOUNIDAD);
                                    document.InsertText(tablaTransformador[x + 1, 2].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCENTRALDE == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRCENTRALDE);
                                    document.InsertText(tablaTransformador[x + 1, 3].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRTENSION == 0 ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRTENSION.ToString());
                                    document.InsertText(tablaTransformador[x + 1, 4].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMW == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMW.ToString());
                                    document.InsertText(tablaTransformador[x + 1, 5].Range.Start, obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMVAR == null ? "" : obj.ListaInformeCtaf[r].listaCondPreviaTransformadores[x].EVECONDPRPOTENCIAMVAR.ToString());

                                    for (int y = 0; y <= 5; y++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaTransformador[x + 1, y];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaTransformador[x + 1, y].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                }
                                #endregion

                                int PosSubtitTransformador = document.Paragraphs.ToList().Count();
                                document.AppendText("(*): Datos extraídas del SCADA COES.");
                                ParagraphProperties ParagraphPropertiesSubtitTransformador = document.BeginUpdateParagraphs(document.Paragraphs[PosSubtitTransformador - 1].Range);
                                ParagraphPropertiesSubtitTransformador.Style = Estilo12;
                                document.EndUpdateParagraphs(ParagraphPropertiesSubtitTransformador);
                                CharacterProperties CharacterPropertiesSubtitTransformador = document.BeginUpdateCharacters(document.Paragraphs[PosSubtitTransformador - 1].Range);
                                CharacterPropertiesSubtitTransformador.Style = Estilo13;

                                int posDetFinTablaTransformadorSeccion7 = document.Paragraphs.ToList().Count();
                                _Parrafo4.RangeFinParrafo = posDetFinTablaTransformadorSeccion7;
                                ListaParrafos.Add(_Parrafo4);


                            }

                        }
                        IndexFinCondiciones = document.Sections[0].Paragraphs.ToList().Count();
                    }
                }

                int posDetFinSeccion7 = document.Paragraphs.ToList().Count();

                #endregion

                #region Sección6: Secuencia de Eventos

                int posRangoSec8 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec8 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec8 = document.Paragraphs.Insert(PosSec8);
                document.InsertText(PosSec8, "SECUENCIA CRONOLÓGICA DE EVENTOS");

                CharacterProperties CarPropRangoSec8 = document.BeginUpdateCharacters(document.Paragraphs[posRangoSec8].Range);
                CarPropRangoSec8.Style = Estilo14;
                document.EndUpdateCharacters(CarPropRangoSec8);

                int posDetSeccion8 = document.Paragraphs.ToList().Count();
                DocumentPosition PosDetSec8 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecDet8 = document.Paragraphs.Insert(PosDetSec8);
                document.InsertText(PosDetSec8, "Se muestran detalladamente en el Anexo 1.");
                document.Paragraphs[posDetSeccion8].Style = Estilo6;
                CharacterProperties CarPropRangoDetSeccion8 = document.BeginUpdateCharacters(document.Paragraphs[posDetSeccion8].Range);
                CarPropRangoDetSeccion8.Style = Estilo7;
                document.EndUpdateCharacters(CarPropRangoDetSeccion8);

                ParrafoDTO _Parrafo5 = new ParrafoDTO();
                _Parrafo5.NroParrafo = posDetSeccion8;
                _Parrafo5.RangeIniParrafo = posDetSeccion8;
                _Parrafo5.RangeFinParrafo = posDetSeccion8;
                ListaParrafos.Add(_Parrafo5);

                #endregion

                #region Sección7: Señalización de Protecciones

                int posRangoSec9 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec9 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec9 = document.Paragraphs.Insert(PosSec9);
                document.InsertText(PosSec9, "SEÑALIZACIÓN DE LAS PROTECCIONES");

                CharacterProperties CarPropRangoSec9 = document.BeginUpdateCharacters(document.Paragraphs[posRangoSec9].Range);
                CarPropRangoSec9.Style = Estilo14;
                document.EndUpdateCharacters(CarPropRangoSec9);

                if (obj.ListaEventosSco != null)
                {
                    int posIniParSeccion9 = document.Paragraphs.ToList().Count();
                    ParrafoDTO _Parrafo6 = new ParrafoDTO();
                    _Parrafo6.NroParrafo = posIniParSeccion9;
                    _Parrafo6.RangeIniParrafo = posIniParSeccion9;

                    if (obj.ListaSenializacionProteccionInforme != null && obj.ListaSenializacionProteccionInforme.Any())
                    {
                        foreach (var eventoSCO in obj.ListaEventosSco)
                        {
                            var listaSenializacionPorEvento = obj.ListaSenializacionProteccionInforme.Where(x => x.CodigoEvento == eventoSCO.EVENCODI.Value).ToList();

                            if (obj.ListaEventosSco.Count > 1)
                            {
                                int posCabSeccion9 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosCabSec9Evento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab9Evento = document.Paragraphs.Insert(PosCabSec9Evento);
                                document.InsertText(PosCabSec9Evento, $"Evento del {eventoSCO.EVENINI.Value.ToString("dd.MM.yyyy")} a las {eventoSCO.EVENINI.Value.ToString("HH:mm:ss")} h:");
                                document.Paragraphs[posCabSeccion9].Style = Estilo15;
                                CharacterProperties CharacterPropertiesCabSec9Evento = document.BeginUpdateCharacters(document.Paragraphs[posCabSeccion9].Range);
                                CharacterPropertiesCabSec9Evento.Style = Estilo14;
                                document.EndUpdateCharacters(CharacterPropertiesCabSec9Evento);
                            }

                            if (listaSenializacionPorEvento.Count > 0)
                            {
                                int rowsSenializacion = listaSenializacionPorEvento.Count + 1;
                                DocumentPosition PostablaSenializacion = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaSenializacion = document.Tables.Create(PostablaSenializacion, rowsSenializacion, 6);
                                tablaSenializacion.BeginUpdate();

                                #region Configurar Tabla

                                tablaSenializacion.Style = EstiloTabla1;
                                tablaSenializacion.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaSenializacion.VerticalAlignment = TableVerticalAlignment.None;
                                tablaSenializacion.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaSenializacion.TextWrappingType = TableTextWrappingType.Around;
                                tablaSenializacion.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaSenializacion.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaSenializacion.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaSenializacion.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaSenializacion.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaSenializacion.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaSenializacion.PreferredWidthType = WidthType.Fixed;
                                tablaSenializacion.PreferredWidth = Units.CentimetersToDocumentsF((float)14.75);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSenializacion[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)3.25);
                                Cel00.HeightType = HeightType.Exact;
                                Cel00.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSenializacion[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaSenializacion[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                CharacterPropertiesCel00.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSenializacion[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2);
                                Cel01.HeightType = HeightType.Exact;
                                Cel01.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSenializacion[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaSenializacion[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                CharacterPropertiesCel01.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSenializacion[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.25);
                                Cel02.HeightType = HeightType.Exact;
                                Cel02.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSenializacion[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaSenializacion[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                CharacterPropertiesCel02.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSenializacion[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)3.5);
                                Cel03.HeightType = HeightType.Exact;
                                Cel03.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSenializacion[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaSenializacion[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                CharacterPropertiesCel03.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaSenializacion[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                                Cel04.HeightType = HeightType.Exact;
                                Cel04.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaSenializacion[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaSenializacion[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                CharacterPropertiesCel04.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaSenializacion[0, 5];
                                Cel05.PreferredWidthType = WidthType.Fixed;
                                Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                                Cel05.HeightType = HeightType.Exact;
                                Cel05.Height = Units.CentimetersToDocumentsF((float)0.73);
                                Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel05.BackgroundColor = Color.LightGray;
                                Cel05.TopPadding = 0;
                                Cel05.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaSenializacion[0, 5].Range);
                                ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel05.SpacingAfter = 0;
                                ParagraphPropertiesCel05.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                                CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaSenializacion[0, 5].Range);
                                CharacterPropertiesCel05.Bold = true;
                                CharacterPropertiesCel05.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel05);

                                tablaSenializacion.Rows[0].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaSenializacion[0, 0].Range.Start, "Subestación");
                                document.InsertText(tablaSenializacion[0, 1].Range.Start, "Equipo");
                                document.InsertText(tablaSenializacion[0, 2].Range.Start, "Código");
                                document.InsertText(tablaSenializacion[0, 3].Range.Start, "Señalizaciones");
                                document.InsertText(tablaSenializacion[0, 4].Range.Start, "Interruptor");
                                document.InsertText(tablaSenializacion[0, 5].Range.Start, "A/C");

                                for (int i = 0; i < listaSenializacionPorEvento.Count; i++)
                                {
                                    document.InsertText(tablaSenializacion[i + 1, 0].Range.Start, listaSenializacionPorEvento[i].SubEstacion ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 1].Range.Start, listaSenializacionPorEvento[i].Equipo ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 2].Range.Start, listaSenializacionPorEvento[i].Codigo ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 3].Range.Start, listaSenializacionPorEvento[i].Senializaciones ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 4].Range.Start, listaSenializacionPorEvento[i].Interruptor ?? string.Empty);
                                    document.InsertText(tablaSenializacion[i + 1, 5].Range.Start, listaSenializacionPorEvento[i].CodigoAC ?? string.Empty);

                                    for (int x = 0; x <= 5; x++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSenializacion[i + 1, x];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSenializacion[i + 1, x].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }
                                }

                                #endregion

                                int PosSubtitSenializacion = document.Paragraphs.ToList().Count();
                                document.AppendText("A/C: Abierto o cerrado");
                                ParagraphProperties ParagraphPropertiesSubtitSenializacion = document.BeginUpdateParagraphs(document.Paragraphs[PosSubtitSenializacion - 1].Range);
                                ParagraphPropertiesSubtitSenializacion.Style = Estilo12;
                                document.EndUpdateParagraphs(ParagraphPropertiesSubtitSenializacion);
                                CharacterProperties CarPropRangoSubTitSenializacion = document.BeginUpdateCharacters(document.Paragraphs[PosSubtitSenializacion - 1].Range);
                                CarPropRangoSubTitSenializacion.Style = Estilo13;
                                document.EndUpdateCharacters(CarPropRangoSubTitSenializacion);
                            }
                            else
                            {
                                int DetSenializacion1 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetSenializacion1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosDetSenializacion1);
                                document.InsertText(PosDetSenializacion1, "No se reportaron.");
                                CharacterProperties CarDetSenializacion1 = document.BeginUpdateCharacters(document.Paragraphs[DetSenializacion1].Range);
                                CarDetSenializacion1.Style = Estilo17;
                                document.EndUpdateCharacters(CarDetSenializacion1);
                            }

                        }
                    }
                    else
                    {
                        int DetSenializacion2 = document.Paragraphs.ToList().Count();
                        DocumentPosition PosDetSenializacion2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosDetSenializacion2);
                        document.InsertText(PosDetSenializacion2, "No se reportaron.");
                        CharacterProperties CarDetSenializacion2 = document.BeginUpdateCharacters(document.Paragraphs[DetSenializacion2].Range);
                        CarDetSenializacion2.Style = Estilo17;
                        document.EndUpdateCharacters(CarDetSenializacion2);
                    }

                    int posFinParSeccion9 = document.Paragraphs.ToList().Count();
                    _Parrafo6.RangeFinParrafo = posFinParSeccion9;
                    ListaParrafos.Add(_Parrafo6);
                }

                #endregion

                #region Sección8: Contador de Interruptores

                int posRangoSec10 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec10 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec10 = document.Paragraphs.Insert(PosSec10);
                document.InsertText(PosSec10, "CONTADOR DE INTERRUPTORES Y DESCARGADORES DE SOBRETENSIÓN");

                CharacterProperties CarPropRangoSec10 = document.BeginUpdateCharacters(document.Paragraphs[posRangoSec10].Range);
                CarPropRangoSec10.Style = Estilo16;
                document.EndUpdateCharacters(CarPropRangoSec10);

                List<EveintdescargaDTO> LstInterruptores = obj.lstInterruptoresDescargadores != null ? obj.lstInterruptoresDescargadores.Where(x => x.EVEINTDESTIPO == 1).ToList() : new List<EveintdescargaDTO>();
                List<EveintdescargaDTO> LstDescargadores = obj.lstInterruptoresDescargadores != null ? obj.lstInterruptoresDescargadores.Where(x => x.EVEINTDESTIPO == 2).ToList() : new List<EveintdescargaDTO>();
                int posIniParLevel4Sec10_1 = 0, posFinParLevel4Sec10_1 = 0, posIniParLevel4Sec10Desc_1 = 0;
                if (LstInterruptores.Count == 0 && LstDescargadores.Count == 0)
                {
                    int posParNoreportanSeccion10 = document.Paragraphs.ToList().Count();
                    ParrafoDTO _Parrafo7 = new ParrafoDTO();
                    _Parrafo7.NroParrafo = posParNoreportanSeccion10;
                    _Parrafo7.RangeIniParrafo = posParNoreportanSeccion10;

                    DocumentPosition PosDetSenializacion1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosDetSenializacion1);
                    document.InsertText(PosDetSenializacion1, "No se reportaron.");
                    CharacterProperties CarDetSenializacion1 = document.BeginUpdateCharacters(document.Paragraphs[posParNoreportanSeccion10].Range);
                    CarDetSenializacion1.Style = Estilo17;
                    document.EndUpdateCharacters(CarDetSenializacion1);

                    int posParFinNoreportanSeccion10 = document.Paragraphs.ToList().Count();

                    _Parrafo7.RangeFinParrafo = posParFinNoreportanSeccion10;
                    ListaParrafos.Add(_Parrafo7);
                }
                else
                {
                    posIniParLevel4Sec10_1 = document.Paragraphs.ToList().Count();
                    DocumentPosition PosSec10_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec10_1 = document.Paragraphs.Insert(PosSec10_1);
                    document.InsertText(PosSec10_1, "CONTADOR DE INTERRUPTORES");
                    CharacterProperties CarPropRangoSec10_1 = document.BeginUpdateCharacters(document.Paragraphs[posIniParLevel4Sec10_1].Range);
                    CarPropRangoSec10_1.Style = Estilo16;
                    document.EndUpdateCharacters(CarPropRangoSec10);

                    if (LstInterruptores.Count == 0)
                    {
                        int posParNoreportanSeccion10_1 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo8 = new ParrafoDTO();
                        _Parrafo8.NroParrafo = posParNoreportanSeccion10_1;
                        _Parrafo8.RangeIniParrafo = posParNoreportanSeccion10_1;
                        
                        DocumentPosition PosNoReportanSeccion10_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParNoReportanSeccion10_1 = document.Paragraphs.Insert(PosNoReportanSeccion10_1);
                        document.InsertText(PosNoReportanSeccion10_1, "No informado.");
                        CharacterProperties CarNoReportanSeccion10_1 = document.BeginUpdateCharacters(document.Paragraphs[posParNoreportanSeccion10_1].Range);
                        CarNoReportanSeccion10_1.Style = Estilo17;
                        document.EndUpdateCharacters(CarNoReportanSeccion10_1);

                        int posParFinNoreportanSeccion10_1 = document.Paragraphs.ToList().Count();
                        _Parrafo8.RangeFinParrafo = posParFinNoreportanSeccion10_1;
                        ListaParrafos.Add(_Parrafo8);
                    }
                    else
                    {
                        int posParIniSeccion10_1 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo9 = new ParrafoDTO();
                        _Parrafo9.NroParrafo = posParIniSeccion10_1;
                        _Parrafo9.RangeIniParrafo = posParIniSeccion10_1;

                        foreach (var item in obj.ListaEventosSco)
                        {
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                int posCabSeccion10_1 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosCabSec10Evento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab10Evento = document.Paragraphs.Insert(PosCabSec10Evento);
                                document.InsertText(PosCabSec10Evento, $"Evento del {item.EVENINI.Value.ToString("dd.MM.yyyy")} a las {item.EVENINI.Value.ToString("HH:mm:ss")} h:");
                                document.Paragraphs[posCabSeccion10_1].Style = Estilo15;
                                CharacterProperties CharacterPropertiesCabSec10Evento = document.BeginUpdateCharacters(document.Paragraphs[posCabSeccion10_1].Range);
                                CharacterPropertiesCabSec10Evento.Style = Estilo14;
                                document.EndUpdateCharacters(CharacterPropertiesCabSec10Evento);
                            }

                            var lstInterruptoresPorEvento = LstInterruptores.Where(x => x.EVENCODI == item.EVENCODI).ToList();

                            if (lstInterruptoresPorEvento.Count == 0)
                            {
                                int IndexDetNoInformanSeccion10_1 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetNoInformanSeccion10_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParDetNoInformanSeccion10_1 = document.Paragraphs.Insert(PosDetNoInformanSeccion10_1);
                                document.InsertText(PosDetNoInformanSeccion10_1, "No Informado.");
                                CharacterProperties CarNoInformanSeccion10_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexDetNoInformanSeccion10_1].Range);
                                CarNoInformanSeccion10_1.Style = Estilo17;
                                document.EndUpdateCharacters(CarNoInformanSeccion10_1);
                            }
                            else
                            {
                                var rowsContador = lstInterruptoresPorEvento.Count + 1;
                                DocumentPosition PostablaContador = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaContador = document.Tables.Create(PostablaContador, rowsContador, 4);
                                tablaContador.BeginUpdate();

                                #region Configurar Tabla

                                tablaContador.Style = EstiloTabla1;
                                tablaContador.PreferredWidthType = WidthType.Fixed;
                                tablaContador.PreferredWidth = Units.CentimetersToDocumentsF((float)14.75);
                                tablaContador.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaContador.VerticalAlignment = TableVerticalAlignment.None;
                                tablaContador.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaContador.TextWrappingType = TableTextWrappingType.Around;
                                tablaContador.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaContador.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaContador.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaContador.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaContador.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaContador.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaContador[0, 3].Split(2, 6);
 
                                tablaContador.MergeCells(tablaContador[0, 0], tablaContador[1, 0]);
                                tablaContador.MergeCells(tablaContador[0, 1], tablaContador[1, 1]);
                                tablaContador.MergeCells(tablaContador[0, 2], tablaContador[1, 2]);
                                tablaContador.MergeCells(tablaContador[0, 3], tablaContador[0, 5]);
                                tablaContador.MergeCells(tablaContador[0, 4], tablaContador[0, 6]);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaContador[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)2.97);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaContador[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaContador[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                CharacterPropertiesCel00.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);


                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaContador[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)1.58);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaContador[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaContador[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                CharacterPropertiesCel01.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaContador[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.18);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaContador[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaContador[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                CharacterPropertiesCel02.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaContador[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)4.01);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaContador[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaContador[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                CharacterPropertiesCel03.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaContador[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)4.01);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaContador[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaContador[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                CharacterPropertiesCel04.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel10 = tablaContador[1, 0];
                                Cel10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel11 = tablaContador[1, 1];
                                Cel11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel12 = tablaContador[1, 2];
                                Cel12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel13 = tablaContador[1, 3];
                                Cel13.PreferredWidthType = WidthType.Fixed;
                                Cel13.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.BackgroundColor = Color.LightGray;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.TopPadding = 0;
                                Cel13.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel13 = document.BeginUpdateParagraphs(tablaContador[1, 3].Range);
                                ParagraphPropertiesCel13.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel13.SpacingAfter = 0;
                                ParagraphPropertiesCel13.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel13);
                                CharacterProperties CharacterPropertiesCel13 = document.BeginUpdateCharacters(tablaContador[1, 3].Range);
                                CharacterPropertiesCel13.Bold = true;
                                CharacterPropertiesCel13.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel13);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel14 = tablaContador[1, 4];
                                Cel14.PreferredWidthType = WidthType.Fixed;
                                Cel14.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel14.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.BackgroundColor = Color.LightGray;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.TopPadding = 0;
                                Cel14.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel14 = document.BeginUpdateParagraphs(tablaContador[1, 4].Range);
                                ParagraphPropertiesCel14.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel14.SpacingAfter = 0;
                                ParagraphPropertiesCel14.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel14);
                                CharacterProperties CharacterPropertiesCel14 = document.BeginUpdateCharacters(tablaContador[1, 4].Range);
                                CharacterPropertiesCel14.Bold = true;
                                CharacterPropertiesCel14.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel14);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel15 = tablaContador[1, 5];
                                Cel15.PreferredWidthType = WidthType.Fixed;
                                Cel15.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel15.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel15.BackgroundColor = Color.LightGray;
                                Cel15.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel15.TopPadding = 0;
                                Cel15.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel15 = document.BeginUpdateParagraphs(tablaContador[1, 5].Range);
                                ParagraphPropertiesCel15.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel15.SpacingAfter = 0;
                                ParagraphPropertiesCel15.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel15);
                                CharacterProperties CharacterPropertiesCel15 = document.BeginUpdateCharacters(tablaContador[1, 5].Range);
                                CharacterPropertiesCel15.Bold = true;
                                CharacterPropertiesCel15.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel15);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel16 = tablaContador[1, 6];
                                Cel16.PreferredWidthType = WidthType.Fixed;
                                Cel16.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel16.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel16.BackgroundColor = Color.LightGray;
                                Cel16.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel16.TopPadding = 0;
                                Cel16.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel16 = document.BeginUpdateParagraphs(tablaContador[1, 6].Range);
                                ParagraphPropertiesCel16.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel16.SpacingAfter = 0;
                                ParagraphPropertiesCel16.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel16);
                                CharacterProperties CharacterPropertiesCel16 = document.BeginUpdateCharacters(tablaContador[1, 6].Range);
                                CharacterPropertiesCel16.Bold = true;
                                CharacterPropertiesCel16.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel16);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel17 = tablaContador[1, 7];
                                Cel17.PreferredWidthType = WidthType.Fixed;
                                Cel17.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel17.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel17.BackgroundColor = Color.LightGray;
                                Cel17.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel17.TopPadding = 0;
                                Cel17.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel17 = document.BeginUpdateParagraphs(tablaContador[1, 7].Range);
                                ParagraphPropertiesCel17.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel17.SpacingAfter = 0;
                                ParagraphPropertiesCel17.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel17);
                                CharacterProperties CharacterPropertiesCel17 = document.BeginUpdateCharacters(tablaContador[1, 7].Range);
                                CharacterPropertiesCel17.Bold = true;
                                CharacterPropertiesCel17.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel17);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel18 = tablaContador[1, 8];
                                Cel18.PreferredWidthType = WidthType.Fixed;
                                Cel18.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel18.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel18.BackgroundColor = Color.LightGray;
                                Cel18.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel18.TopPadding = 0;
                                Cel18.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel18 = document.BeginUpdateParagraphs(tablaContador[1, 8].Range);
                                ParagraphPropertiesCel18.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel18.SpacingAfter = 0;
                                ParagraphPropertiesCel18.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel18);
                                CharacterProperties CharacterPropertiesCel18 = document.BeginUpdateCharacters(tablaContador[1, 8].Range);
                                CharacterPropertiesCel18.Bold = true;
                                CharacterPropertiesCel18.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel18);

                                tablaContador.Rows[0].RepeatAsHeaderRow = true;
                                tablaContador.Rows[1].RepeatAsHeaderRow = true;

                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaContador[0, 0].Range.Start, "Subestación");
                                document.InsertText(tablaContador[0, 1].Range.Start, "Celda");
                                document.InsertText(tablaContador[0, 2].Range.Start, "Código Interruptor");
                                document.InsertText(tablaContador[0, 3].Range.Start, "Antes");
                                document.InsertText(tablaContador[0, 4].Range.Start, "Después");
                                document.InsertText(tablaContador[1, 3].Range.Start, "R");
                                document.InsertText(tablaContador[1, 4].Range.Start, "S");
                                document.InsertText(tablaContador[1, 5].Range.Start, "T");
                                document.InsertText(tablaContador[1, 6].Range.Start, "R");
                                document.InsertText(tablaContador[1, 7].Range.Start, "S");
                                document.InsertText(tablaContador[1, 8].Range.Start, "T");

                                int contador = 1;

                                for (int i = 0; i < lstInterruptoresPorEvento.Count; i++)
                                {
                                    tablaContador[contador + 1, 3].Split(1, 6);
                                    document.InsertText(tablaContador[contador + 1, 0].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESSUBESTACION);
                                    document.InsertText(tablaContador[contador + 1, 1].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESCELDA);
                                    document.InsertText(tablaContador[contador + 1, 2].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESCODIGO);
                                    document.InsertText(tablaContador[contador + 1, 3].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESR_ANTES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 4].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESS_ANTES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 5].Range.Start, lstInterruptoresPorEvento[i].EVEINTDEST_ANTES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 6].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESR_DESPUES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 7].Range.Start, lstInterruptoresPorEvento[i].EVEINTDESS_DESPUES.ToString());
                                    document.InsertText(tablaContador[contador + 1, 8].Range.Start, lstInterruptoresPorEvento[i].EVEINTDEST_DESPUES.ToString());

                                    for (int x = 0; x <= 8; x++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaContador[contador + 1, x];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaContador[contador + 1, x].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                    contador++;
                                }
                                #endregion
                            }
                        }

                        int posParFinSeccion10_1 = document.Paragraphs.ToList().Count();
                        _Parrafo9.RangeFinParrafo = posParFinSeccion10_1;
                        ListaParrafos.Add(_Parrafo9);
                    }

                    posIniParLevel4Sec10Desc_1 = document.Paragraphs.ToList().Count();
                    DocumentPosition PosSec10_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec10_2 = document.Paragraphs.Insert(PosSec10_2);
                    document.InsertText(PosSec10_2, "DESCARGADORES DE SOBRETENSIÓN");
                    CharacterProperties CarPropRangoSecDesc10_1 = document.BeginUpdateCharacters(document.Paragraphs[posIniParLevel4Sec10Desc_1].Range);
                    CarPropRangoSecDesc10_1.Style = Estilo16;
                    document.EndUpdateCharacters(CarPropRangoSecDesc10_1);

                    if (LstDescargadores.Count == 0)
                    {
                        int posParNoreportanSeccion10_2 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo10 = new ParrafoDTO();
                        _Parrafo10.NroParrafo = posParNoreportanSeccion10_2;
                        _Parrafo10.RangeIniParrafo = posParNoreportanSeccion10_2;
                        

                        DocumentPosition PosNoReportanSeccion10_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParNoReportanSeccion10_1 = document.Paragraphs.Insert(PosNoReportanSeccion10_1);
                        document.InsertText(PosNoReportanSeccion10_1, "No Informado.");
                        CharacterProperties CarNoReportanSeccion10_1 = document.BeginUpdateCharacters(document.Paragraphs[posParNoreportanSeccion10_2].Range);
                        CarNoReportanSeccion10_1.Style = Estilo17;
                        document.EndUpdateCharacters(CarNoReportanSeccion10_1);

                        int posFinParNoreportanSeccion10_2 = document.Paragraphs.ToList().Count();
                        _Parrafo10.RangeFinParrafo = posFinParNoreportanSeccion10_2;
                        ListaParrafos.Add(_Parrafo10);
                    }
                    else
                    {
                        int posParIniSeccion10_2 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo11 = new ParrafoDTO();
                        _Parrafo11.NroParrafo = posParIniSeccion10_2;
                        _Parrafo11.RangeIniParrafo = posParIniSeccion10_2;

                        foreach (var item in obj.ListaEventosSco)
                        {
                            if (obj.ListaEventosSco.Count > 1)
                            {
                                int posCabSeccion10_2 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo10_2Evento = new ParrafoDTO();
                                _Parrafo10_2Evento.NroParrafo = posCabSeccion10_2;
                                _Parrafo10_2Evento.RangeIniParrafo = posCabSeccion10_2;
                                _Parrafo10_2Evento.RangeFinParrafo = posCabSeccion10_2;
                                ListaParrafos.Add(_Parrafo10_2Evento);

                                DocumentPosition PosCabSec10Evento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab10Evento = document.Paragraphs.Insert(PosCabSec10Evento);
                                document.InsertText(PosCabSec10Evento, $"Evento del {item.EVENINI.Value.ToString("dd.MM.yyyy")} a las {item.EVENINI.Value.ToString("HH:mm:ss")} h:");
                                document.Paragraphs[posCabSeccion10_2].Style = Estilo15;
                                CharacterProperties CharacterPropertiesCabSec10Evento = document.BeginUpdateCharacters(document.Paragraphs[posCabSeccion10_2].Range);
                                CharacterPropertiesCabSec10Evento.Style = Estilo14;
                                document.EndUpdateCharacters(CharacterPropertiesCabSec10Evento);
                            }

                            var lstDescargadoresPorEvento = LstDescargadores.Where(x => x.EVENCODI == item.EVENCODI).ToList();

                            if (lstDescargadoresPorEvento.Count == 0)
                            {
                                int posParNoreportanSeccion10_2 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo10 = new ParrafoDTO();
                                _Parrafo10.NroParrafo = posParNoreportanSeccion10_2;
                                _Parrafo10.RangeIniParrafo = posParNoreportanSeccion10_2;

                                int IndexDetNoInformanSeccion10_2 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosDetNoInformanSeccion10_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParDetNoInformanSeccion10_2 = document.Paragraphs.Insert(PosDetNoInformanSeccion10_2);
                                document.InsertText(PosDetNoInformanSeccion10_2, "No Informado.");
                                CharacterProperties CarNoInformanSeccion10_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexDetNoInformanSeccion10_2].Range);
                                CarNoInformanSeccion10_2.Style = Estilo17;
                                document.EndUpdateCharacters(CarNoInformanSeccion10_2);

                                int IndexFinDetNoInformanSeccion10_2 = document.Paragraphs.ToList().Count();
                                _Parrafo10.RangeFinParrafo = IndexFinDetNoInformanSeccion10_2;
                                ListaParrafos.Add(_Parrafo10);
                            }
                            else
                            {
                                var rowsDescargador = lstDescargadoresPorEvento.Count + 1;
                                DocumentPosition PostablaDescargador = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Table tablaDescargador = document.Tables.Create(PostablaDescargador, rowsDescargador, 4);
                                tablaDescargador.BeginUpdate();

                                #region Configurar Tabla

                                tablaDescargador.Style = EstiloTabla1;
                                tablaDescargador.PreferredWidthType = WidthType.Fixed;
                                tablaDescargador.PreferredWidth = Units.CentimetersToDocumentsF((float)14.75);
                                tablaDescargador.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                                tablaDescargador.VerticalAlignment = TableVerticalAlignment.None;
                                tablaDescargador.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                                tablaDescargador.TextWrappingType = TableTextWrappingType.Around;
                                tablaDescargador.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                                tablaDescargador.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                                tablaDescargador.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                                tablaDescargador.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                                tablaDescargador.MarginTop = Units.CentimetersToDocumentsF((float)0);
                                tablaDescargador.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                                tablaDescargador[0, 3].Split(2, 6);

                                tablaDescargador.MergeCells(tablaDescargador[0, 0], tablaDescargador[1, 0]);
                                tablaDescargador.MergeCells(tablaDescargador[0, 1], tablaDescargador[1, 1]);
                                tablaDescargador.MergeCells(tablaDescargador[0, 2], tablaDescargador[1, 2]);
                                tablaDescargador.MergeCells(tablaDescargador[0, 3], tablaDescargador[0, 5]);
                                tablaDescargador.MergeCells(tablaDescargador[0, 4], tablaDescargador[0, 6]);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaDescargador[0, 0];
                                Cel00.PreferredWidthType = WidthType.Fixed;
                                Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)2.97);
                                Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.BackgroundColor = Color.LightGray;
                                Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel00.TopPadding = 0;
                                Cel00.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaDescargador[0, 0].Range);
                                ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel00.SpacingAfter = 0;
                                ParagraphPropertiesCel00.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                                CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaDescargador[0, 0].Range);
                                CharacterPropertiesCel00.Bold = true;
                                CharacterPropertiesCel00.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel00);


                                DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaDescargador[0, 1];
                                Cel01.PreferredWidthType = WidthType.Fixed;
                                Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)1.58);
                                Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.BackgroundColor = Color.LightGray;
                                Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel01.TopPadding = 0;
                                Cel01.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaDescargador[0, 1].Range);
                                ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel01.SpacingAfter = 0;
                                ParagraphPropertiesCel01.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                                CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaDescargador[0, 1].Range);
                                CharacterPropertiesCel01.Bold = true;
                                CharacterPropertiesCel01.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel01);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaDescargador[0, 2];
                                Cel02.PreferredWidthType = WidthType.Fixed;
                                Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.18);
                                Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.BackgroundColor = Color.LightGray;
                                Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel02.TopPadding = 0;
                                Cel02.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaDescargador[0, 2].Range);
                                ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel02.SpacingAfter = 0;
                                ParagraphPropertiesCel02.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                                CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaDescargador[0, 2].Range);
                                CharacterPropertiesCel02.Bold = true;
                                CharacterPropertiesCel02.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel02);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaDescargador[0, 3];
                                Cel03.PreferredWidthType = WidthType.Fixed;
                                Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)4.01);
                                Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.BackgroundColor = Color.LightGray;
                                Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel03.TopPadding = 0;
                                Cel03.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaDescargador[0, 3].Range);
                                ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel03.SpacingAfter = 0;
                                ParagraphPropertiesCel03.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                                CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaDescargador[0, 3].Range);
                                CharacterPropertiesCel03.Bold = true;
                                CharacterPropertiesCel03.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel03);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaDescargador[0, 4];
                                Cel04.PreferredWidthType = WidthType.Fixed;
                                Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)4.01);
                                Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.BackgroundColor = Color.LightGray;
                                Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel04.TopPadding = 0;
                                Cel04.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaDescargador[0, 4].Range);
                                ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel04.SpacingAfter = 0;
                                ParagraphPropertiesCel04.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                                CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaDescargador[0, 4].Range);
                                CharacterPropertiesCel04.Bold = true;
                                CharacterPropertiesCel04.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel04);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel10 = tablaDescargador[1, 0];
                                Cel10.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel10.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel11 = tablaDescargador[1, 1];
                                Cel11.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel11.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel12 = tablaDescargador[1, 2];
                                Cel12.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel12.Borders.Right.LineStyle = TableBorderLineStyle.Thick;

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel13 = tablaDescargador[1, 3];
                                Cel13.PreferredWidthType = WidthType.Fixed;
                                Cel13.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel13.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.BackgroundColor = Color.LightGray;
                                Cel13.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel13.TopPadding = 0;
                                Cel13.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel13 = document.BeginUpdateParagraphs(tablaDescargador[1, 3].Range);
                                ParagraphPropertiesCel13.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel13.SpacingAfter = 0;
                                ParagraphPropertiesCel13.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel13);
                                CharacterProperties CharacterPropertiesCel13 = document.BeginUpdateCharacters(tablaDescargador[1, 3].Range);
                                CharacterPropertiesCel13.Bold = true;
                                CharacterPropertiesCel13.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel13);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel14 = tablaDescargador[1, 4];
                                Cel14.PreferredWidthType = WidthType.Fixed;
                                Cel14.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel14.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.BackgroundColor = Color.LightGray;
                                Cel14.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel14.TopPadding = 0;
                                Cel14.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel14 = document.BeginUpdateParagraphs(tablaDescargador[1, 4].Range);
                                ParagraphPropertiesCel14.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel14.SpacingAfter = 0;
                                ParagraphPropertiesCel14.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel14);
                                CharacterProperties CharacterPropertiesCel14 = document.BeginUpdateCharacters(tablaDescargador[1, 4].Range);
                                CharacterPropertiesCel14.Bold = true;
                                CharacterPropertiesCel14.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel14);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel15 = tablaDescargador[1, 5];
                                Cel15.PreferredWidthType = WidthType.Fixed;
                                Cel15.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel15.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel15.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel15.BackgroundColor = Color.LightGray;
                                Cel15.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel15.TopPadding = 0;
                                Cel15.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel15 = document.BeginUpdateParagraphs(tablaDescargador[1, 5].Range);
                                ParagraphPropertiesCel15.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel15.SpacingAfter = 0;
                                ParagraphPropertiesCel15.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel15);
                                CharacterProperties CharacterPropertiesCel15 = document.BeginUpdateCharacters(tablaDescargador[1, 5].Range);
                                CharacterPropertiesCel15.Bold = true;
                                CharacterPropertiesCel15.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel15);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel16 = tablaDescargador[1, 6];
                                Cel16.PreferredWidthType = WidthType.Fixed;
                                Cel16.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel16.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel16.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel16.BackgroundColor = Color.LightGray;
                                Cel16.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel16.TopPadding = 0;
                                Cel16.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel16 = document.BeginUpdateParagraphs(tablaDescargador[1, 6].Range);
                                ParagraphPropertiesCel16.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel16.SpacingAfter = 0;
                                ParagraphPropertiesCel16.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel16);
                                CharacterProperties CharacterPropertiesCel16 = document.BeginUpdateCharacters(tablaDescargador[1, 6].Range);
                                CharacterPropertiesCel16.Bold = true;
                                CharacterPropertiesCel16.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel16);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel17 = tablaDescargador[1, 7];
                                Cel17.PreferredWidthType = WidthType.Fixed;
                                Cel17.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel17.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel17.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel17.BackgroundColor = Color.LightGray;
                                Cel17.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel17.TopPadding = 0;
                                Cel17.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel17 = document.BeginUpdateParagraphs(tablaDescargador[1, 7].Range);
                                ParagraphPropertiesCel17.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel17.SpacingAfter = 0;
                                ParagraphPropertiesCel17.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel17);
                                CharacterProperties CharacterPropertiesCel17 = document.BeginUpdateCharacters(tablaDescargador[1, 7].Range);
                                CharacterPropertiesCel17.Bold = true;
                                CharacterPropertiesCel17.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel17);

                                DevExpress.XtraRichEdit.API.Native.TableCell Cel18 = tablaDescargador[1, 8];
                                Cel18.PreferredWidthType = WidthType.Fixed;
                                Cel18.PreferredWidth = Units.CentimetersToDocumentsF((float)1.336);
                                Cel18.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Cel18.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel18.BackgroundColor = Color.LightGray;
                                Cel18.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Cel18.TopPadding = 0;
                                Cel18.BottomPadding = 0;
                                ParagraphProperties ParagraphPropertiesCel18 = document.BeginUpdateParagraphs(tablaDescargador[1, 8].Range);
                                ParagraphPropertiesCel18.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCel18.SpacingAfter = 0;
                                ParagraphPropertiesCel18.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCel18);
                                CharacterProperties CharacterPropertiesCel18 = document.BeginUpdateCharacters(tablaDescargador[1, 8].Range);
                                CharacterPropertiesCel18.Bold = true;
                                CharacterPropertiesCel18.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesCel18);

                                tablaDescargador.Rows[0].RepeatAsHeaderRow = true;
                                tablaDescargador.Rows[1].RepeatAsHeaderRow = true;
                                #endregion

                                #region Datos Tabla

                                document.InsertText(tablaDescargador[0, 0].Range.Start, "Subestación");
                                document.InsertText(tablaDescargador[0, 1].Range.Start, "Celda");
                                document.InsertText(tablaDescargador[0, 2].Range.Start, "Código Pararrayo");
                                document.InsertText(tablaDescargador[0, 3].Range.Start, "Antes");
                                document.InsertText(tablaDescargador[0, 4].Range.Start, "Después");
                                document.InsertText(tablaDescargador[1, 3].Range.Start, "R");
                                document.InsertText(tablaDescargador[1, 4].Range.Start, "S");
                                document.InsertText(tablaDescargador[1, 5].Range.Start, "T");
                                document.InsertText(tablaDescargador[1, 6].Range.Start, "R");
                                document.InsertText(tablaDescargador[1, 7].Range.Start, "S");
                                document.InsertText(tablaDescargador[1, 8].Range.Start, "T");

                                int contadorDescarga = 1;
                                for (int i = 0; i < lstDescargadoresPorEvento.Count; i++)
                                {
                                    tablaDescargador[contadorDescarga + 1, 3].Split(1, 6);
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 0].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESSUBESTACION);
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 1].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESCELDA);
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 2].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESCODIGO);
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 3].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESR_ANTES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 4].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESS_ANTES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 5].Range.Start, lstDescargadoresPorEvento[i].EVEINTDEST_ANTES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 6].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESR_DESPUES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 7].Range.Start, lstDescargadoresPorEvento[i].EVEINTDESS_DESPUES.ToString());
                                    document.InsertText(tablaDescargador[contadorDescarga + 1, 8].Range.Start, lstDescargadoresPorEvento[i].EVEINTDEST_DESPUES.ToString());

                                    for (int x = 0; x <= 8; x++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaDescargador[contadorDescarga + 1, x];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaDescargador[contadorDescarga + 1, x].Range);
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                    contadorDescarga++;
                                }

                                #endregion
                            }
                        }

                        int posParFinSeccion10_2 = document.Paragraphs.ToList().Count();
                        _Parrafo11.RangeFinParrafo = posParFinSeccion10_2;
                        ListaParrafos.Add(_Parrafo11);
                    }

                    posFinParLevel4Sec10_1 = document.Paragraphs.ToList().Count();
                }



                #endregion

                #region Sección9: Análisis de Eventos

                int posRangoSec11 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec11 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec11 = document.Paragraphs.Insert(PosSec11);
                document.InsertText(PosSec11, "ANÁLISIS DEL EVENTO");

                CharacterProperties CarPropRangoSec11 = document.BeginUpdateCharacters(document.Paragraphs[posRangoSec11].Range);
                CarPropRangoSec11.Style = Estilo16;
                document.EndUpdateCharacters(CarPropRangoSec11);
                int IndexIniSeccion11_1 = document.Paragraphs.ToList().Count();

                if (obj.ListaInformeCtaf != null && obj.ListaInformeCtaf.Count > 0)
                {
                    int contadorFigurasAnalisisEvento = 1;
                    int contadorInteracionesEnLista = 0;

                    for (int r = 0; r < obj.ListaInformeCtaf.Count; r++)
                    {
                        if (obj.ListaInformeCtaf.Count > 1)
                        {
                            int IndexCabSeccion11 = document.Paragraphs.ToList().Count();
                            ParrafoDTO _Parrafo11 = new ParrafoDTO();
                            _Parrafo11.NroParrafo = IndexCabSeccion11;
                            _Parrafo11.RangeIniParrafo = IndexCabSeccion11;

                            DocumentPosition PosCabSeccion11 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParCabSeccion11 = document.Paragraphs.Insert(PosCabSeccion11);
                            document.InsertText(PosCabSeccion11, obj.ListaInformeCtaf[r].CabNombreEvento);
                            document.Paragraphs[IndexCabSeccion11].Style = Estilo32;

                            ParagraphProperties ppSec11EventoNombre = document.BeginUpdateParagraphs(document.Paragraphs[IndexCabSeccion11].Range);
                            ppSec11EventoNombre.FirstLineIndentType = ParagraphFirstLineIndent.None;
                            ppSec11EventoNombre.LeftIndent = 118;
                            document.EndUpdateParagraphs(ppSec11EventoNombre);

                            CharacterProperties CharacterPropertiesCabSeccion11 = document.BeginUpdateCharacters(document.Paragraphs[IndexCabSeccion11].Range);
                            CharacterPropertiesCabSeccion11.Style = Estilo14;
                            document.EndUpdateCharacters(CharacterPropertiesCabSeccion11);

                            int IndexCab2Seccion11 = document.Paragraphs.ToList().Count();
                            _Parrafo11.RangeFinParrafo = IndexCab2Seccion11;
                            ListaParrafos.Add(_Parrafo11);
                        }

                        if (!obj.ListaInformeCtaf[r].listaAnalisisEvento.Any())
                        {
                            int IndexNoRepSeccion11 = document.Paragraphs.ToList().Count();
                            ParrafoDTO _Parrafo11_1 = new ParrafoDTO();
                            _Parrafo11_1.NroParrafo = IndexNoRepSeccion11;
                            _Parrafo11_1.RangeIniParrafo = IndexNoRepSeccion11;

                            DocumentPosition PosNoRepSeccion11 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosNoRepSeccion11);
                            document.InsertText(PosNoRepSeccion11, "No existen registros.");
                            document.Paragraphs[IndexNoRepSeccion11].Style = Estilo26;
                            CharacterProperties CarNoRepSeccion11 = document.BeginUpdateCharacters(document.Paragraphs[IndexNoRepSeccion11].Range);
                            CarNoRepSeccion11.Style = Estilo17;
                            document.EndUpdateCharacters(CarNoRepSeccion11);

                            int IndexCab2Seccion11_1 = document.Paragraphs.ToList().Count();
                            _Parrafo11_1.RangeFinParrafo = IndexCab2Seccion11_1;
                            ListaParrafos.Add(_Parrafo11_1);
                        }
                        else
                        {
                            var listaSinTipoDOs = obj.ListaInformeCtaf[r].listaAnalisisEvento.Where(x => x.EVENUMCODI != 2).ToList();
                            var listaConTipoDos = obj.ListaInformeCtaf[r].listaAnalisisEvento.Where(x => x.EVENUMCODI == 2).ToList();

                            var grupoListasPorTipoNumera = listaSinTipoDOs.GroupBy(x => x.EVETIPNUMDESCRIPCION);

                            foreach (var grupo in grupoListasPorTipoNumera)
                            {
                                int IndexIniCabSeccion11_1 = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo11_1 = new ParrafoDTO();
                                _Parrafo11_1.NroParrafo = IndexIniCabSeccion11_1;
                                _Parrafo11_1.RangeIniParrafo = IndexIniCabSeccion11_1;

                                DocumentPosition PosCabSeccion11_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosCabSeccion11_1);
                                document.InsertText(PosCabSeccion11_1, grupo.Key);
                                document.Paragraphs[IndexIniCabSeccion11_1].Style = Estilo26;
                                
                                CharacterProperties CarCabSeccion11_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniCabSeccion11_1].Range);
                                CarCabSeccion11_1.Style = Estilo16;
                                document.EndUpdateCharacters(CarCabSeccion11_1);

                                int IndexFinCabSeccion11_1 = document.Paragraphs.ToList().Count();
                                _Parrafo11_1.RangeFinParrafo = IndexFinCabSeccion11_1;
                                ListaParrafos.Add(_Parrafo11_1);

                                foreach (var listasPorTipoNumera in grupo)
                                {
                                    if (listasPorTipoNumera.EVEANAEVERUTAFIGURA != null)
                                    {
                                        int IndexDetSeccion11 = document.Paragraphs.ToList().Count();
                                        DocumentPosition PosDetSeccion11 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosDetSeccion11);
                                        document.InsertText(PosDetSeccion11, listasPorTipoNumera.EVEANAEVEDESCNUMERAL + "\n");
                                        document.Paragraphs[IndexDetSeccion11].Style = Estilo31;
                                        ParagraphProperties paragraphPropertiesEveDes = document.BeginUpdateParagraphs(document.Paragraphs[IndexDetSeccion11].Range);
                                        paragraphPropertiesEveDes.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                        paragraphPropertiesEveDes.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                                        paragraphPropertiesEveDes.LeftIndent = 118;
                                        document.EndUpdateParagraphs(paragraphPropertiesEveDes);

                                        CharacterProperties CharacterPropertiesDetSeccion11 = document.BeginUpdateCharacters(document.Paragraphs[IndexDetSeccion11].Range);
                                        CharacterPropertiesDetSeccion11.Style = Estilo17;
                                        document.EndUpdateCharacters(CharacterPropertiesDetSeccion11);

                                        ParagraphProperties paragraphPropertiesEveImg = document.BeginUpdateParagraphs(document.Paragraphs[IndexDetSeccion11 + 1].Range);
                                        //paragraphPropertiesEveImg.FirstLineIndentType = ParagraphFirstLineIndent.None;
                                        paragraphPropertiesEveImg.LeftIndent = 118;
                                        document.EndUpdateParagraphs(paragraphPropertiesEveImg);

                                        ParrafoDTO _parDesAnaEve = new ParrafoDTO();
                                        _parDesAnaEve.NroParrafo = IndexDetSeccion11 + 1;
                                        _parDesAnaEve.RangeIniParrafo = IndexDetSeccion11 + 1;
                                        _parDesAnaEve.RangeFinParrafo = IndexDetSeccion11 + 1;
                                        ListaParrafos.Add(_parDesAnaEve);

                                        TabInfoCollection tabs1 = document.Paragraphs[IndexDetSeccion11].BeginUpdateTabs(true);
                                        tabs1.Clear();
                                        TabInfo tab1_1 = new TabInfo();
                                        tab1_1.Position = Units.CentimetersToDocumentsF((float)1);
                                        tab1_1.Alignment = TabAlignmentType.Left;
                                        tabs1.Add(tab1_1);
                                        document.Paragraphs[IndexDetSeccion11].EndUpdateTabs(tabs1);

                                        contadorInteracionesEnLista++;

                                        string RutaAnalisis = ConfigurationManager.AppSettings["AnalisiEvento"];
                                        var imgfirma = RutaAnalisis + listasPorTipoNumera.EVEANAEVERUTAFIGURA;

                                        if (System.IO.File.Exists(imgfirma))
                                        {
                                            ShapeCollection ListaChapes = document.Shapes;

                                            int IndexShapeEvento = document.Shapes.ToList().Count();
                                            ListaIndexShapes.Add(IndexShapeEvento);
                                            DocumentPosition PosImagenEvento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);

                                            Shape ImagenEvento = document.Shapes.InsertPicture(PosImagenEvento, DocumentImageSource.FromFile(imgfirma));
                                            ImagenEvento.PictureFormat.Preset = ShapeGeometryPreset.Rectangle;
                                            ImagenEvento.Line.Color = Color.Black;
                                            ImagenEvento.Line.Thickness = 1;

                                            ImagenEvento.RelativeVerticalPosition = ShapeRelativeVerticalPosition.Paragraph;
                                            ImagenEvento.HorizontalAlignment = ShapeHorizontalAlignment.Center;
                                            ImagenEvento.TextWrapping = TextWrappingType.InLineWithText;
                                            ImagenEvento.Size = new SizeF(Units.CentimetersToDocumentsF((float)14.67), Units.CentimetersToDocumentsF((float)9.08));
                                            

                                            int IndexSubTitFiguraEven = document.Paragraphs.ToList().Count();
                                            document.AppendText($"Figura {contadorFigurasAnalisisEvento}: " + $"{listasPorTipoNumera.EVEANAEVEDESCFIGURA}");
                                            ParagraphProperties ParagraphPropertiesSubTitFiguraEven = document.BeginUpdateParagraphs(document.Paragraphs[IndexSubTitFiguraEven - 1].Range);
                                            ParagraphPropertiesSubTitFiguraEven.Style = Estilo18;
                                            document.EndUpdateParagraphs(ParagraphPropertiesSubTitFiguraEven);
                                            CharacterProperties CharacterPropertiesSubTitFiguraEven = document.BeginUpdateCharacters(document.Paragraphs[IndexSubTitFiguraEven - 1].Range);
                                            CharacterPropertiesSubTitFiguraEven.Style = Estilo13;

                                            int lengtContador = contadorFigurasAnalisisEvento.ToString().Length;
                                            int RangoIniSec11_Fig = document.Paragraphs[IndexSubTitFiguraEven - 1].Range.Start.ToInt();
                                            int RangoFinSec11_fig = 9 + lengtContador;
                                            DocumentRange FormatoRangoSec11_Fig = document.CreateRange(RangoIniSec11_Fig, RangoFinSec11_fig);
                                            CharacterProperties CarPropRangoSec11_Fig = document.BeginUpdateCharacters(FormatoRangoSec11_Fig);
                                            CarPropRangoSec11_Fig.Bold = true;
                                            document.EndUpdateCharacters(CarPropRangoSec11_Fig);

                                            contadorFigurasAnalisisEvento++;
                                        }
                                        
                                    }
                                    else
                                    {
                                        int IndexDetSeccion11 = document.Paragraphs.ToList().Count();
                                        DocumentPosition PosDetSeccion11 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosDetSeccion11);
                                        document.InsertText(PosDetSeccion11, listasPorTipoNumera.EVEANAEVEDESCNUMERAL);
                                        //document.Paragraphs[IndexDetSeccion11].Style = Estilo6;
                                        ParagraphProperties paragraphPropertiesEveDes = document.BeginUpdateParagraphs(document.Paragraphs[IndexDetSeccion11].Range);
                                        paragraphPropertiesEveDes.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                        paragraphPropertiesEveDes.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                                        paragraphPropertiesEveDes.LeftIndent = 118;
                                        document.EndUpdateParagraphs(paragraphPropertiesEveDes);

                                        CharacterProperties CharacterPropertiesDetSeccion11 = document.BeginUpdateCharacters(document.Paragraphs[IndexDetSeccion11].Range);
                                        CharacterPropertiesDetSeccion11.Style = Estilo17;
                                        document.EndUpdateCharacters(CharacterPropertiesDetSeccion11);

                                        TabInfoCollection tabs1 = document.Paragraphs[IndexDetSeccion11].BeginUpdateTabs(true);
                                        tabs1.Clear();
                                        TabInfo tab1_1 = new TabInfo();
                                        tab1_1.Position = Units.CentimetersToDocumentsF((float)1);
                                        tab1_1.Alignment = TabAlignmentType.Left;
                                        tabs1.Add(tab1_1);
                                        document.Paragraphs[IndexDetSeccion11].EndUpdateTabs(tabs1);
                                    }
                                }
                            }

                            if (listaConTipoDos.Any())
                            {
                                int IndexDetSeccion11_Maniobras = document.Paragraphs.ToList().Count();
                                ParrafoDTO _Parrafo_Maniobra = new ParrafoDTO();
                                _Parrafo_Maniobra.NroParrafo = IndexDetSeccion11_Maniobras;
                                _Parrafo_Maniobra.RangeIniParrafo = IndexDetSeccion11_Maniobras;
                                _Parrafo_Maniobra.RangeFinParrafo = IndexDetSeccion11_Maniobras;
                                ListaParrafos.Add(_Parrafo_Maniobra);

                                DocumentPosition PosCabSeccion11_1_Maniobras = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSubtitSenializacion = document.Paragraphs.Insert(PosCabSeccion11_1_Maniobras);
                                document.InsertText(PosCabSeccion11_1_Maniobras, "Maniobras de restablecimiento");
                                document.Paragraphs[IndexDetSeccion11_Maniobras].Style = Estilo32;
                                CharacterProperties CarCabSeccion11_1_Maniobras = document.BeginUpdateCharacters(document.Paragraphs[IndexDetSeccion11_Maniobras].Range);
                                CarCabSeccion11_1_Maniobras.Style = Estilo16;
                                document.EndUpdateCharacters(CarCabSeccion11_1_Maniobras);

                                foreach (var itemConTipoDos in listaConTipoDos)
                                {
                                    if (itemConTipoDos.EVEANAEVERUTAFIGURA != null)
                                    {
                                        int IndexDet_Maniobras = document.Paragraphs.ToList().Count();
                                        DocumentPosition PosDetSeccion11_Maniobras = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosDetSeccion11_Maniobras);
                                        document.InsertText(PosDetSeccion11_Maniobras, itemConTipoDos.EVEANAEVEDESCNUMERAL + "\n");
                                        ParagraphProperties paragraphPropertiesMan = document.BeginUpdateParagraphs(document.Paragraphs[IndexDet_Maniobras].Range);
                                        paragraphPropertiesMan.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                        paragraphPropertiesMan.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                                        paragraphPropertiesMan.LeftIndent = 118;
                                        document.EndUpdateParagraphs(paragraphPropertiesMan);
                                        CharacterProperties CharacterPropertiesDetSeccion11_Maniobra = document.BeginUpdateCharacters(document.Paragraphs[IndexDet_Maniobras].Range);
                                        CharacterPropertiesDetSeccion11_Maniobra.Style = Estilo17;
                                        document.EndUpdateCharacters(CharacterPropertiesDetSeccion11_Maniobra);

                                        ParrafoDTO _parDesAnaEveManiob = new ParrafoDTO();
                                        _parDesAnaEveManiob.NroParrafo = IndexDet_Maniobras + 1;
                                        _parDesAnaEveManiob.RangeIniParrafo = IndexDet_Maniobras + 1;
                                        _parDesAnaEveManiob.RangeFinParrafo = IndexDet_Maniobras + 1;
                                        ListaParrafos.Add(_parDesAnaEveManiob);

                                        TabInfoCollection tabs2 = document.Paragraphs[IndexDet_Maniobras].BeginUpdateTabs(true);
                                        tabs2.Clear();
                                        TabInfo tab1_22 = new TabInfo();
                                        tab1_22.Position = Units.CentimetersToDocumentsF((float)1);
                                        tab1_22.Alignment = TabAlignmentType.Left;
                                        tabs2.Add(tab1_22);
                                        document.Paragraphs[IndexDet_Maniobras].EndUpdateTabs(tabs2);

                                        string RutaAnalisis = ConfigurationManager.AppSettings["AnalisiEvento"];
                                        var imgfirma = RutaAnalisis + itemConTipoDos.EVEANAEVERUTAFIGURA;

                                        if (System.IO.File.Exists(imgfirma))
                                        {
                                            int IndexShapeManiobra = document.Shapes.ToList().Count();
                                            ListaIndexShapes.Add(IndexShapeManiobra);
                                            DocumentPosition PosImagenManiobra = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);

                                            Shape ImagenManiobra = document.Shapes.InsertPicture(PosImagenManiobra, DocumentImageSource.FromFile(imgfirma));
                                            ImagenManiobra.PictureFormat.Preset = ShapeGeometryPreset.Rectangle;
                                            ImagenManiobra.Line.Color = Color.Black;
                                            ImagenManiobra.Line.Thickness = 1;

                                            ImagenManiobra.RelativeVerticalPosition = ShapeRelativeVerticalPosition.Paragraph;
                                            ImagenManiobra.HorizontalAlignment = ShapeHorizontalAlignment.Center;
                                            ImagenManiobra.TextWrapping = TextWrappingType.InLineWithText;
                                            ImagenManiobra.Size = new SizeF(Units.CentimetersToDocumentsF((float)14.67), Units.CentimetersToDocumentsF((float)9.08));

                                            int IndexSubTitFiguraManiobra = document.Paragraphs.ToList().Count();
                                            document.AppendText($"Figura {contadorFigurasAnalisisEvento}: " + itemConTipoDos.EVEANAEVEDESCFIGURA);
                                            ParagraphProperties ParagraphPropertiesSubTitFiguraManiobra = document.BeginUpdateParagraphs(document.Paragraphs[IndexSubTitFiguraManiobra - 1].Range);
                                            ParagraphPropertiesSubTitFiguraManiobra.Style = Estilo18;
                                            document.EndUpdateParagraphs(ParagraphPropertiesSubTitFiguraManiobra);
                                            CharacterProperties CharacterPropertiesSubTitFiguraManiobra = document.BeginUpdateCharacters(document.Paragraphs[IndexSubTitFiguraManiobra - 1].Range);
                                            CharacterPropertiesSubTitFiguraManiobra.Style = Estilo13;
                                            document.EndUpdateCharacters(CharacterPropertiesSubTitFiguraManiobra);

                                            int lengtContador = contadorFigurasAnalisisEvento.ToString().Length;
                                            int RangoIniSec11_Fig = document.Paragraphs[IndexSubTitFiguraManiobra - 1].Range.Start.ToInt();
                                            int RangoFinSec11_fig = 9 + lengtContador;
                                            DocumentRange FormatoRangoSec11_Fig = document.CreateRange(RangoIniSec11_Fig, RangoFinSec11_fig);
                                            CharacterProperties CarPropRangoSec11_Fig = document.BeginUpdateCharacters(FormatoRangoSec11_Fig);
                                            CarPropRangoSec11_Fig.Bold = true;
                                            document.EndUpdateCharacters(CarPropRangoSec11_Fig);

                                            contadorFigurasAnalisisEvento++;

                                        }
                                    }
                                    else
                                    {
                                        int IndexDet_Maniobras = document.Paragraphs.ToList().Count();
                                        DocumentPosition PosDetSeccion11_Maniobras = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec6Descripcion = document.Paragraphs.Insert(PosDetSeccion11_Maniobras);
                                        document.InsertText(PosDetSeccion11_Maniobras, itemConTipoDos.EVEANAEVEDESCNUMERAL);
                                        ParagraphProperties paragraphPropertiesMan = document.BeginUpdateParagraphs(document.Paragraphs[IndexDet_Maniobras].Range);
                                        paragraphPropertiesMan.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                        paragraphPropertiesMan.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                                        paragraphPropertiesMan.LeftIndent = 118;
                                        document.EndUpdateParagraphs(paragraphPropertiesMan);
                                        CharacterProperties CharacterPropertiesDetSeccion11_Maniobra = document.BeginUpdateCharacters(document.Paragraphs[IndexDet_Maniobras].Range);
                                        CharacterPropertiesDetSeccion11_Maniobra.Style = Estilo17;
                                        document.EndUpdateCharacters(CharacterPropertiesDetSeccion11_Maniobra);

                                        TabInfoCollection tabs2 = document.Paragraphs[IndexDet_Maniobras].BeginUpdateTabs(true);
                                        tabs2.Clear();
                                        TabInfo tab1_22 = new TabInfo();
                                        tab1_22.Position = Units.CentimetersToDocumentsF((float)1);
                                        tab1_22.Alignment = TabAlignmentType.Left;
                                        tabs2.Add(tab1_22);
                                        document.Paragraphs[IndexDet_Maniobras].EndUpdateTabs(tabs2);
                                    }
                                }
                            }
                        }
                    }
                }

                int IndexFinSeccion11_1 = document.Paragraphs.ToList().Count();

                #endregion

                #region Seccion10: Consecuencias

                int IndexIniSec12 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec12 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12 = document.Paragraphs.Insert(PosSec12);
                document.InsertText(PosSec12, "CONSECUENCIAS");
                ParagraphProperties ppConsecuencias = document.BeginUpdateParagraphs(document.Paragraphs[IndexIniSec12].Range);
                ppConsecuencias.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                ppConsecuencias.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                ppConsecuencias.LeftIndent = 89;
                document.EndUpdateParagraphs(ppConsecuencias);
                CharacterProperties CarPropRangoSec10_Cons = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12].Range);
                CarPropRangoSec10_Cons.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec10_Cons);

                int IndexIniSec12_1 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec12_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_1 = document.Paragraphs.Insert(PosSec12_1);
                document.InsertText(PosSec12_1, "En la calidad del Producto: No se presentaron.");
                document.Paragraphs[IndexIniSec12_1].Style = Estilo20;
                DocumentRange FormatoRangoSec12_1_ = document.CreateRange(document.Paragraphs[IndexIniSec12_1].Range.Start.ToInt() + 28, 19);
                CharacterProperties CharacterPropertiesTitSec12_1_ = document.BeginUpdateCharacters(FormatoRangoSec12_1_);
                CharacterPropertiesTitSec12_1_.Bold = false;
                document.EndUpdateCharacters(CharacterPropertiesTitSec12_1_);

                int IndexIniSec12_2 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec12_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_2 = document.Paragraphs.Insert(PosSec12_2);
                document.InsertText(PosSec12_2, "En la calidad del suministro:");
                CharacterProperties CharacterPropertiesTitSec12_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12_2].Range);
                CharacterPropertiesTitSec12_2.Style = Estilo14;
                document.EndUpdateCharacters(CharacterPropertiesTitSec12_2);

                int IndexFinSec12_1 = document.Paragraphs.ToList().Count();
                int _nroReporte = 1, IndexIni12_2_1 = 0, IndexFin12_2_1 = 0;

                if (tablaReporteTotalesEacmf.ListaRegistros.Count == 0 && tablaReporteTotales.ListaRegistros.Count == 0)
                {
                    int IndexSecNoReg12_2_1 = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParNoReg12_2_1 = new ParrafoDTO();
                    _ParNoReg12_2_1.NroParrafo = IndexSecNoReg12_2_1;
                    _ParNoReg12_2_1.RangeIniParrafo = IndexSecNoReg12_2_1;
                    
                    DocumentPosition PosSecNoReg12_2_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSecNoReg12_2_1 = document.Paragraphs.Insert(PosSecNoReg12_2_1);
                    document.InsertText(PosSecNoReg12_2_1, "No Registrado.\n");
                    CharacterProperties CharacterPropertiesSecNoReg12_2_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecNoReg12_2_1].Range);
                    CharacterPropertiesSecNoReg12_2_1.Style = Estilo17;
                    document.EndUpdateCharacters(CharacterPropertiesSecNoReg12_2_1);

                    int IndexFinSecNoReg12_2_1 = document.Paragraphs.ToList().Count();
                    _ParNoReg12_2_1.RangeFinParrafo = IndexFinSecNoReg12_2_1;
                    ListaParrafos.Add(_ParNoReg12_2_1);
                }
                else
                {
                    IndexIni12_2_1 = document.Paragraphs.ToList().Count();
                    if (tablaReporteTotalesEacmf.ListaRegistros.Count > 0)
                    {
                        int IndexIniSec12_2_1_ERACMF = document.Paragraphs.ToList().Count();
                        DocumentPosition PosSec12_2_1_ERACMF = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_2_1_ERACMF = document.Paragraphs.Insert(PosSec12_2_1_ERACMF);
                        document.InsertText(PosSec12_2_1_ERACMF, "Las interrupciones de suministro que se produjeron por activación del ERACMF fueron las siguientes:");


                        CharacterProperties CPropertiesTitSec12_2_1_ERACMF = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12_2_1_ERACMF].Range);
                        CPropertiesTitSec12_2_1_ERACMF.Style = Estilo17;
                        document.EndUpdateCharacters(CPropertiesTitSec12_2_1_ERACMF);

                        List<RegistroReporte> registrosparteEracmf = new List<RegistroReporte>();
                        TablaReporte TablaEracmf = new TablaReporte();

                        FontFamily fontDoc = new FontFamily(tablaReporteTotalesEacmf.TipoFuente);
                        List<RegistroReporte> registrosTotalesEracmf = tablaReporteTotalesEacmf.ListaRegistros;
                        int numFilas;
                        int numColumnas;
                        Table secuencia_0;

                        var codigosEventos = tablaReporteTotalesEacmf.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                        _nroReporte++;
                    }

                    if (tablaReporteTotales.ListaRegistros.Count > 0)
                    {
                        int IndexIniSec12_2_1 = document.Paragraphs.ToList().Count();
                        DocumentPosition PosSec12_2_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_2_1 = document.Paragraphs.Insert(PosSec12_2_1);
                        document.InsertText(PosSec12_2_1, "Las Interrupciones de suministro que se produjeron fueron las siguientes:");
                        CharacterProperties CPropertiesTitSec12_2_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniSec12_2_1].Range);
                        CPropertiesTitSec12_2_1.Style = Estilo17;
                        document.EndUpdateCharacters(CPropertiesTitSec12_2_1);

                        List<RegistroReporte> registros = new List<RegistroReporte>();
                        List<RegistroReporte> registrosTotales = tablaReporteTotales.ListaRegistros;
                        var codigosEventos = tablaReporteTotales.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                        int IndexIniTablasSec12 = document.Paragraphs.ToList().Count();
                        ParrafoDTO _Parrafo12 = new ParrafoDTO();
                        _Parrafo12.NroParrafo = IndexIniTablasSec12;
                        _Parrafo12.RangeIniParrafo = IndexIniTablasSec12;

                        foreach (var item in codigosEventos)
                        {
                            registros = registrosTotales.Where(x => x.codigo == item.codigo || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                            if (codigosEventos.Count > 1)
                            {
                                int IndexIniTablaSec12 = document.Paragraphs.ToList().Count();
                                DocumentPosition PosCabSec12Evento = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab7Evento = document.Paragraphs.Insert(PosCabSec12Evento);
                                document.InsertText(PosCabSec12Evento, registros[0].Nombre);
                                document.Paragraphs[IndexIniTablaSec12].Style = Estilo21;
                            }

                            int numFilas = registros.Count + 1;
                            int numColumnas = tablaReporteTotales.CabeceraColumnas.Count;

                            DocumentPosition PostablaSuministro = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                            DevExpress.XtraRichEdit.API.Native.Table tablaSuministro = document.Tables.Create(PostablaSuministro, numFilas, numColumnas);
                            tablaSuministro.BeginUpdate();

                            #region Configuración Tabla
                            tablaSuministro.Style = EstiloTabla1;
                            tablaSuministro.PreferredWidthType = WidthType.Fixed;
                            tablaSuministro.PreferredWidth = Units.CentimetersToDocumentsF((float)16.25);
                            tablaSuministro.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                            tablaSuministro.VerticalAlignment = TableVerticalAlignment.None;
                            tablaSuministro.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.TextWrappingType = TableTextWrappingType.Around;
                            tablaSuministro.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                            tablaSuministro.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                            tablaSuministro.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                            tablaSuministro.MarginTop = Units.CentimetersToDocumentsF((float)0);
                            tablaSuministro.MarginRight = Units.CentimetersToDocumentsF((float)0.25);
                            
                            DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSuministro[0, 0];
                            Cel00.PreferredWidthType = WidthType.Fixed;
                            Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)4.66);
                            Cel00.HeightType = HeightType.Exact;
                            Cel00.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel00.BackgroundColor = Color.LightGray;
                            Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel00.TopPadding = 0;
                            Cel00.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSuministro[0, 0].Range);
                            ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel00.SpacingAfter = 0;
                            ParagraphPropertiesCel00.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                            CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaSuministro[0, 0].Range);
                            CharacterPropertiesCel00.Bold = true;
                            CharacterPropertiesCel00.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel00);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSuministro[0, 1];
                            Cel01.PreferredWidthType = WidthType.Fixed;
                            Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2.66);
                            Cel01.HeightType = HeightType.Exact;
                            Cel01.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel01.BackgroundColor = Color.LightGray;
                            Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel01.TopPadding = 0;
                            Cel01.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSuministro[0, 1].Range);
                            ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel01.SpacingAfter = 0;
                            ParagraphPropertiesCel01.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                            CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaSuministro[0, 1].Range);
                            CharacterPropertiesCel01.Bold = true;
                            CharacterPropertiesCel01.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel01);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSuministro[0, 2];
                            Cel02.PreferredWidthType = WidthType.Fixed;
                            Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.03);
                            Cel02.HeightType = HeightType.Exact;
                            Cel02.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel02.BackgroundColor = Color.LightGray;
                            Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel02.TopPadding = 0;
                            Cel02.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSuministro[0, 2].Range);
                            ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel02.SpacingAfter = 0;
                            ParagraphPropertiesCel02.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                            CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaSuministro[0, 2].Range);
                            CharacterPropertiesCel02.Bold = true;
                            CharacterPropertiesCel02.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel02);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSuministro[0, 3];
                            Cel03.PreferredWidthType = WidthType.Fixed;
                            Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)2.37);
                            Cel03.HeightType = HeightType.Exact;
                            Cel03.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel03.BackgroundColor = Color.LightGray;
                            Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel03.TopPadding = 0;
                            Cel03.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSuministro[0, 3].Range);
                            ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel03.SpacingAfter = 0;
                            ParagraphPropertiesCel03.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                            CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaSuministro[0, 3].Range);
                            CharacterPropertiesCel03.Bold = true;
                            CharacterPropertiesCel03.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel03);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaSuministro[0, 4];
                            Cel04.PreferredWidthType = WidthType.Fixed;
                            Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)2.37);
                            Cel04.HeightType = HeightType.Exact;
                            Cel04.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel04.BackgroundColor = Color.LightGray;
                            Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel04.TopPadding = 0;
                            Cel04.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaSuministro[0, 4].Range);
                            ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel04.SpacingAfter = 0;
                            ParagraphPropertiesCel04.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                            CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaSuministro[0, 4].Range);
                            CharacterPropertiesCel04.Bold = true;
                            CharacterPropertiesCel04.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel04);

                            DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaSuministro[0, 5];
                            Cel05.PreferredWidthType = WidthType.Fixed;
                            Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)2.16);
                            Cel05.HeightType = HeightType.Exact;
                            Cel05.Height = Units.CentimetersToDocumentsF((float)1);
                            Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel05.BackgroundColor = Color.LightGray;
                            Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                            Cel05.TopPadding = 0;
                            Cel05.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaSuministro[0, 5].Range);
                            ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCel05.SpacingAfter = 0;
                            ParagraphPropertiesCel05.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                            CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaSuministro[0, 5].Range);
                            CharacterPropertiesCel05.Bold = true;
                            CharacterPropertiesCel05.FontSize = 8;
                            document.EndUpdateCharacters(CharacterPropertiesCel05);

                            tablaSuministro.Rows[0].RepeatAsHeaderRow = true;

                            #endregion

                            #region Datos Tabla

                            document.InsertText(tablaSuministro[0, 0].Range.Start, "SUMINISTRO");
                            document.InsertText(tablaSuministro[0, 1].Range.Start, "SUBESTACIÓN");
                            document.InsertText(tablaSuministro[0, 2].Range.Start, "POTENCIA (MW)");
                            document.InsertText(tablaSuministro[0, 3].Range.Start, "INICIO (HH:MM:SS)");
                            document.InsertText(tablaSuministro[0, 4].Range.Start, "FINAL (HH:MM:SS)");
                            document.InsertText(tablaSuministro[0, 5].Range.Start, "DURACIÓN (MIN)");

                            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                            nfi.NumberGroupSeparator = " ";
                            nfi.NumberDecimalDigits = 3;
                            nfi.NumberDecimalSeparator = ",";

                            for (int x = 0; x < registros.Count; x++)
                            {
                                for (int y = 0; y < registros[x].ListaCelda.Count; y++)
                                {
                                    if (registros[x].ListaCelda[y].EsNumero)
                                    {
                                        if (registros[x].ListaCelda[y].Valor != null)
                                        {
                                            if (registros[x].ListaCelda[y].DigitosParteDecimal > 0)
                                            {
                                                int numDigitos = registros[x].ListaCelda[y].DigitosParteDecimal;
                                                if (registros[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                                {
                                                    numDigitos = MathHelper.GetDecimalPlaces(registros[x].ListaCelda[y].Valor.Value);
                                                    numDigitos = (numDigitos > registros[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registros[x].ListaCelda[y].DigitosParteDecimal;
                                                }

                                                if (registros[x].ListaCelda[y].EsNumeroTruncado)
                                                {
                                                    registros[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                }
                                                if (registros[x].ListaCelda[y].EsNumeroRedondeado)
                                                {
                                                    registros[x].ListaCelda[y].Valor = MathHelper.Round(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                }

                                                string strParteDecimal = string.Empty;
                                                for (int i = 1; i <= numDigitos; i++) strParteDecimal += "0";
                                                string strFormat = "#,##0." + strParteDecimal;

                                                nfi.NumberDecimalDigits = numDigitos;
                                            }
                                            else
                                            {
                                                string strFormat = "#,##0";

                                                nfi.NumberDecimalDigits = 0;
                                            }
                                        }
                                    }
                                }

                                document.InsertText(tablaSuministro[x + 1, 0].Range.Start, registros[x].ListaCelda[0].Texto == null ? "" : registros[x].ListaCelda[0].Texto.ToUpper());
                                document.InsertText(tablaSuministro[x + 1, 1].Range.Start, registros[x].ListaCelda[1].Texto == null ? "" : registros[x].ListaCelda[1].Texto.ToUpper());
                                document.InsertText(tablaSuministro[x + 1, 2].Range.Start, registros[x].ListaCelda[2].Valor == null ? "" : registros[x].ListaCelda[2].Valor.Value.ToString("N", nfi));
                                document.InsertText(tablaSuministro[x + 1, 3].Range.Start, registros[x].ListaCelda[3].Texto != null && registros[x].ListaCelda[3].Texto.Length > 8 ? registros[x].ListaCelda[3].Texto.Substring(registros[x].ListaCelda[3].Texto.Length - 8, 8) : "");
                                document.InsertText(tablaSuministro[x + 1, 4].Range.Start, registros[x].ListaCelda[4].Texto != null && registros[x].ListaCelda[4].Texto.Length > 8 ? registros[x].ListaCelda[4].Texto.Substring(registros[x].ListaCelda[4].Texto.Length - 8, 8) : "");
                                document.InsertText(tablaSuministro[x + 1, 5].Range.Start, registros[x].ListaCelda[5].Valor == null ? "" : registros[x].ListaCelda[5].Valor.Value.ToString("N", nfi));

                                for (int y = 0; y <= 5; y++)
                                {
                                    DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                    Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                    Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                    Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                    Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                    Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                    //Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                    DocumentRange RangeCeli0 = Celi0.Range;
                                    CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                    CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                    CharacterPropertiesRangeCeli0.FontSize = 8;
                                    CharacterPropertiesRangeCeli0.Bold = false;
                                    document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                    ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSuministro[x + 1, y].Range);
                                    if(y > 0)
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                    else
                                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Left;
                                    ParagraphPropertiesCeli0.SpacingAfter = 0;
                                    ParagraphPropertiesCeli0.SpacingBefore = 0;
                                    document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                }

                                //contadorLinea++;
                            }

                            #endregion

                        }

                        int IndexFinTablasSec12 = document.Paragraphs.ToList().Count();
                        _Parrafo12.RangeFinParrafo = IndexFinTablasSec12 - 1;
                        ListaParrafos.Add(_Parrafo12);
                    }

                    if (tablaReduccion.ListaRegistros.Count > 0)
                    {
                        int IndexIniReduccion12_2 = document.Paragraphs.ToList().Count();
                        DocumentPosition PosSecReduccion12_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSecReduccion12_2 = document.Paragraphs.Insert(PosSecReduccion12_2);
                        document.InsertText(PosSecReduccion12_2, "Reducción de carga:");
                        CharacterProperties CharacterPropertiesReduccion12_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniReduccion12_2].Range);
                        CharacterPropertiesReduccion12_2.Style = Estilo14;
                        document.EndUpdateCharacters(CharacterPropertiesReduccion12_2);

                        int IndexIniReduccion12_2_1 = document.Paragraphs.ToList().Count();
                        DocumentPosition PosSecReduccion12_2_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSecReduccion12_2_1 = document.Paragraphs.Insert(PosSecReduccion12_2_1);
                        document.InsertText(PosSecReduccion12_2_1, "En estos casos no se interrumpe el suministro eléctrico en el punto de entrega; por lo tanto, de acuerdo con lo establecido en el numeral 6.1.2  de la NTCSE, no representan transgresiones a la calidad de suministro.\n");
                        CharacterProperties CharacterPropertiesReduccion12_2_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexIniReduccion12_2_1].Range);
                        CharacterPropertiesReduccion12_2_1.Style = Estilo16;
                        document.EndUpdateCharacters(CharacterPropertiesReduccion12_2_1);

                       
                    }

                    IndexFin12_2_1 = document.Paragraphs.ToList().Count() - 1;
                }

                #endregion

                #region Sección11: Conclusiones

                int IndexSec11Conclu = document.Paragraphs.ToList().Count();
                document.AppendText("CONCLUSIONES");
                document.Paragraphs[IndexSec11Conclu - 1].Style = Estilo11;
                CharacterProperties CarPropRangoSec11_Concl = document.BeginUpdateCharacters(document.Paragraphs[IndexSec11Conclu - 1].Range);
                CarPropRangoSec11_Concl.Bold = true;
                document.EndUpdateCharacters(CarPropRangoSec11_Concl);

                int IndexSec11ConcluNor = document.Paragraphs.ToList().Count();
                ParrafoDTO ParConclusiones = new ParrafoDTO();
                ParConclusiones.NroParrafo = IndexSec11ConcluNor;
                ParConclusiones.RangeIniParrafo = IndexSec11ConcluNor;
                ParConclusiones.RangeFinParrafo = IndexSec11ConcluNor;
                ListaParrafos.Add(ParConclusiones);

                DocumentPosition PosSec11Conclu = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecNoR11Conclu = document.Paragraphs.Insert(PosSec11Conclu);
                document.InsertText(PosSec11Conclu, "Sin registros.");

                ParagraphProperties ppConc = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec11ConcluNor].Range);
                ppConc.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                ppConc.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                ppConc.LeftIndent = 188;
                document.EndUpdateParagraphs(ppConc);

                CharacterProperties CharacterProperties11Conclu = document.BeginUpdateCharacters(document.Paragraphs[IndexSec11ConcluNor].Range);
                CharacterProperties11Conclu.Style = Estilo17;
                document.EndUpdateCharacters(CharacterProperties11Conclu);

                #endregion

                #region Sección12: Observaciones

                int IndexSec12_Obsv = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec12Obsv = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12Obsv = document.Paragraphs.Insert(PosSec12Obsv);
                document.InsertText(PosSec12Obsv, "OBSERVACIONES:");

                ParagraphProperties ppObs = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec12_Obsv].Range);
                ppObs.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                ppObs.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                ppObs.LeftIndent = 89;
                document.EndUpdateParagraphs(ppObs);

                CharacterProperties CharacterProperties12Obs = document.BeginUpdateCharacters(document.Paragraphs[IndexSec12_Obsv].Range);
                CharacterProperties12Obs.Bold = true;
                document.EndUpdateCharacters(CharacterProperties12Obs);

                int IndexFinSec12_1_Obs = 0, IndexSec12_1_ObsvDet = 0;
                int IndexSec12_1_Obsv = document.Paragraphs.ToList().Count();
                if (obj.ListaObservaciones != null && obj.ListaObservaciones.Count > 0)
                {
                    var idsEmpresas = obj.ListaObservaciones.Select(y => new { y.EMPRCODI }).Distinct().ToList();
                    int contador = 0;

                    foreach (var item in idsEmpresas)
                    {
                        bool band = false;

                        for (int x = 0; x < obj.ListaObservaciones.Count; x++)
                        {
                            if (item.EMPRCODI == obj.ListaObservaciones[x].EMPRCODI)
                            {
                                if (!band)
                                {
                                    int num_ = contador + 1;

                                    int IndexBoldSec12 = document.Paragraphs.ToList().Count();
                                    DocumentPosition PosSec12_1Obsv = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_1Obsv = document.Paragraphs.Insert(PosSec12_1Obsv);
                                    document.InsertText(PosSec12_1Obsv, obj.ListaObservaciones[x].EMPRNOMB);
                                    document.Paragraphs[IndexBoldSec12].Style = Estilo29;
                                    ParagraphProperties ppObs12_1 = document.BeginUpdateParagraphs(document.Paragraphs[IndexBoldSec12].Range);
                                    ppObs12_1.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                    ppObs12_1.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                                    ppObs12_1.LeftIndent = 89;
                                    document.EndUpdateParagraphs(ppObs12_1);
                                    CharacterProperties CharacterProperties12_1Obs = document.BeginUpdateCharacters(document.Paragraphs[IndexBoldSec12].Range);
                                    CharacterProperties12_1Obs.Style = Estilo14;
                                    document.EndUpdateCharacters(CharacterProperties12_1Obs);

                                    contador++;
                                    band = true;
                                }

                                IndexSec12_1_ObsvDet = document.Paragraphs.ToList().Count();
                                ParrafoDTO _ParrSec12Det = new ParrafoDTO();
                                _ParrSec12Det.NroParrafo = IndexSec12_1_ObsvDet;
                                _ParrSec12Det.RangeIniParrafo = IndexSec12_1_ObsvDet;
                                _ParrSec12Det.RangeFinParrafo = IndexSec12_1_ObsvDet;
                                ListaParBullets.Add(_ParrSec12Det);

                                DocumentPosition PosSec12_1ObsvDet = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_1ObsvDet = document.Paragraphs.Insert(PosSec12_1ObsvDet);
                                document.InsertText(PosSec12_1ObsvDet, obj.ListaObservaciones[x].EVERECOMOBSERVDESC);

                                ParagraphProperties paragraphPropertiesBulObs = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec12_1_ObsvDet].Range);
                                paragraphPropertiesBulObs.LeftIndent = 300;
                                document.EndUpdateParagraphs(paragraphPropertiesBulObs);

                                CharacterProperties CarPropRangoDetObsv = document.BeginUpdateCharacters(document.Paragraphs[IndexSec12_1_ObsvDet].Range);
                                CarPropRangoDetObsv.Style = Estilo7;
                                document.EndUpdateCharacters(CarPropRangoDetObsv);

                                TabInfoCollection tabs1 = document.Paragraphs[IndexSec12_1_ObsvDet].BeginUpdateTabs(true);
                                tabs1.Clear();
                                document.Paragraphs[IndexSec12_1_ObsvDet].EndUpdateTabs(tabs1);
                            }
                        }
                    }
                }
                else
                {
                    int IndexSec12_1_Ning = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParrSec12Ning = new ParrafoDTO();
                    _ParrSec12Ning.NroParrafo = IndexSec12_1_Ning;
                    _ParrSec12Ning.RangeIniParrafo = IndexSec12_1_Ning;
                    _ParrSec12Ning.RangeFinParrafo = IndexSec12_1_Ning;
                    ListaParrafos.Add(_ParrSec12Ning);

                    DocumentPosition PosSec12_ObsNing = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec12_1_Ning = document.Paragraphs.Insert(PosSec12_ObsNing);
                    document.InsertText(PosSec12_ObsNing, "Ninguna.");
                    ParagraphProperties ppSec12 = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec12_1_Ning].Range);
                    ppSec12.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    ppSec12.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                    ppSec12.LeftIndent = 188;
                    document.EndUpdateParagraphs(ppSec12);

                    CharacterProperties CharacterProperties12_1_Ning = document.BeginUpdateCharacters(document.Paragraphs[IndexSec12_1_Ning].Range);
                    CharacterProperties12_1_Ning.Style = Estilo17;
                    document.EndUpdateCharacters(CharacterProperties12_1_Ning);                
                }

                IndexFinSec12_1_Obs = document.Paragraphs.ToList().Count();

                #endregion

                #region Sección13: Recomendaciones

                int IndexSec13 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec13 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec13 = document.Paragraphs.Insert(PosSec13);
                document.InsertText(PosSec13, "RECOMENDACIONES:");
                CharacterProperties CharacterProperties13 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec13].Range);
                CharacterProperties13.Bold = true;
                document.EndUpdateCharacters(CharacterProperties13);

                ParagraphProperties ppRec = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec13].Range);
                ppRec.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                ppRec.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                ppRec.LeftIndent = 89;
                document.EndUpdateParagraphs(ppRec);

                int IndexIniRec = 0, IndexFinRec = 0, IndexSecRec_x = 0;
                if (obj.ListaEveRecomobserv == null)
                {
                    int IndexSec13_Ning = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParrSec13Ning = new ParrafoDTO();
                    _ParrSec13Ning.NroParrafo = IndexSec13_Ning;
                    _ParrSec13Ning.RangeIniParrafo = IndexSec13_Ning;
                    _ParrSec13Ning.RangeFinParrafo = IndexSec13_Ning;
                    ListaParrafos.Add(_ParrSec13Ning);

                    DocumentPosition PosSec13_Ning = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec13_Ning = document.Paragraphs.Insert(PosSec13_Ning);
                    document.InsertText(PosSec13_Ning, "Ninguna.");
                    document.Paragraphs[IndexSec13_Ning].Style = Estilo11;
                    ParagraphProperties ppObs13_Ning = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec13_Ning].Range);
                    ppObs13_Ning.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    ppObs13_Ning.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                    ppObs13_Ning.LeftIndent = 188;
                    document.EndUpdateParagraphs(ppObs13_Ning);
                    CharacterProperties CharacterProperties13_Ning = document.BeginUpdateCharacters(document.Paragraphs[IndexSec13_Ning].Range);
                    CharacterProperties13_Ning.Style = Estilo17;
                    document.EndUpdateCharacters(CharacterProperties13_Ning);
                }
                else if (obj.ListaEveRecomobserv.Count == 0)
                {
                    int IndexSec13_Ning = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParrSec13Ning = new ParrafoDTO();
                    _ParrSec13Ning.NroParrafo = IndexSec13_Ning;
                    _ParrSec13Ning.RangeIniParrafo = IndexSec13_Ning;
                    _ParrSec13Ning.RangeFinParrafo = IndexSec13_Ning;
                    ListaParrafos.Add(_ParrSec13Ning);

                    DocumentPosition PosSec13_Ning = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec13_Ning = document.Paragraphs.Insert(PosSec13_Ning);
                    document.InsertText(PosSec13_Ning, "Ninguna.");
                    document.Paragraphs[IndexSec13_Ning].Style = Estilo11;
                    ParagraphProperties ppObs13_Ning = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec13_Ning].Range);
                    ppObs13_Ning.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    ppObs13_Ning.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                    ppObs13_Ning.LeftIndent = 188;
                    document.EndUpdateParagraphs(ppObs13_Ning);
                    CharacterProperties CharacterProperties13_Ning = document.BeginUpdateCharacters(document.Paragraphs[IndexSec13_Ning].Range);
                    CharacterProperties13_Ning.Style = Estilo17;
                    document.EndUpdateCharacters(CharacterProperties13_Ning);
                }
                else if (obj.ListaEveRecomobserv.Count > 0)
                {
                    int contadorRec = 0;

                    var idsEmpresasRec = obj.ListaEveRecomobserv.Select(y => new { y.EMPRCODI }).Distinct().ToList();

                    IndexIniRec = document.Paragraphs.ToList().Count();
                    foreach (var item in idsEmpresasRec)
                    {
                        bool band = false;

                        for (int x = 0; x < obj.ListaEveRecomobserv.Count; x++)
                        {
                            if (item.EMPRCODI == obj.ListaEveRecomobserv[x].EMPRCODI)
                            {
                                if (!band)
                                {
                                    int num = contadorRec + 1;

                                    int IndexBoldSecRec = document.Paragraphs.ToList().Count();
                                    DocumentPosition PosSecRec = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSecRec = document.Paragraphs.Insert(PosSecRec);
                                    document.InsertText(PosSecRec, $"A {obj.ListaEveRecomobserv[x].EMPRNOMB.TrimStart().TrimEnd()}");
                                    CharacterProperties CharacterPropertiesRec = document.BeginUpdateCharacters(document.Paragraphs[IndexBoldSecRec].Range);
                                    CharacterPropertiesRec.Style = Estilo14;
                                    document.EndUpdateCharacters(CharacterPropertiesRec);

                                    ParagraphProperties ppObs13_Rec = document.BeginUpdateParagraphs(document.Paragraphs[IndexBoldSecRec].Range);
                                    ppObs13_Rec.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                                    ppObs13_Rec.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                                    ppObs13_Rec.LeftIndent = 89;
                                    document.EndUpdateParagraphs(ppObs13_Rec);

                                    contadorRec++;
                                    band = true;
                                }

                                IndexSecRec_x = document.Paragraphs.ToList().Count();
                                ParrafoDTO _ParrSecRec_x = new ParrafoDTO();
                                _ParrSecRec_x.NroParrafo = IndexSecRec_x;
                                _ParrSecRec_x.RangeIniParrafo = IndexSecRec_x;
                                _ParrSecRec_x.RangeFinParrafo = IndexSecRec_x;
                                ListaParBullets.Add(_ParrSecRec_x);

                                DocumentPosition PosSecRec_x = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecRec_x = document.Paragraphs.Insert(PosSecRec_x);
                                document.InsertText(PosSecRec_x, obj.ListaEveRecomobserv[x].EVERECOMOBSERVDESC);
                                ParagraphProperties paragraphPropertiesBulObs = document.BeginUpdateParagraphs(document.Paragraphs[IndexSecRec_x].Range);
                                paragraphPropertiesBulObs.LeftIndent = 300;
                                document.EndUpdateParagraphs(paragraphPropertiesBulObs);
                                CharacterProperties CarPropRecX = document.BeginUpdateCharacters(document.Paragraphs[IndexSecRec_x].Range);
                                CarPropRecX.Style = Estilo7;
                                document.EndUpdateCharacters(CarPropRecX);

                                TabInfoCollection tabs1 = document.Paragraphs[IndexSecRec_x].BeginUpdateTabs(true);
                                tabs1.Clear();                               
                                document.Paragraphs[IndexSecRec_x].EndUpdateTabs(tabs1);

                            }
                        }
                    }

                    IndexFinRec = document.Paragraphs.ToList().Count();
                }

                #endregion

                #region Sección14: Documentos Generados

                int IndexSec14 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSec14 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec14 = document.Paragraphs.Insert(PosSec14);
                document.InsertText(PosSec14, "DOCUMENTOS CONSIDERADOS EN EL INFORME");
                CharacterProperties CharacterProperties14 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec14].Range);
                CharacterProperties14.Bold = true;
                document.EndUpdateCharacters(CharacterProperties14);

                ParagraphProperties ppSec14 = document.BeginUpdateParagraphs(document.Paragraphs[IndexSec14].Range);
                ppSec14.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                ppSec14.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                ppSec14.LeftIndent = 89;
                document.EndUpdateParagraphs(ppSec14);

                int IndexIniTablaSec14 = document.Paragraphs.ToList().Count();
                ParrafoDTO _ParTablaSec14 = new ParrafoDTO();
                _ParTablaSec14.NroParrafo = IndexIniTablaSec14;
                _ParTablaSec14.RangeIniParrafo = IndexIniTablaSec14;
               
                #region Tabla Sección5
                if (obj.CTAFINFORMEREPORTE != null && obj.CTAFINFORMEREPORTE.Count > 0)
                {
                    int rows = obj.CTAFINFORMEREPORTE.Count + 1;
                    DocumentPosition PostablaSeccion5 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Table tablaSeccion5 = document.Tables.Create(PostablaSeccion5, rows, 4);
                    tablaSeccion5.BeginUpdate();

                    #region Configuracion Tabla

                    tablaSeccion5.Style = EstiloTabla1;
                    tablaSeccion5.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                    tablaSeccion5.VerticalAlignment = TableVerticalAlignment.None;
                    tablaSeccion5.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                    tablaSeccion5.TextWrappingType = TableTextWrappingType.Around;
                    tablaSeccion5.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                    tablaSeccion5.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                    tablaSeccion5.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                    tablaSeccion5.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                    tablaSeccion5.MarginTop = Units.CentimetersToDocumentsF((float)0);
                    tablaSeccion5.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                    tablaSeccion5.PreferredWidthType = WidthType.Fixed;
                    tablaSeccion5.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSeccion5[0, 0];
                    Cel00.PreferredWidthType = WidthType.Fixed;
                    Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)0.89);
                    Cel00.HeightType = HeightType.Exact;
                    Cel00.Height = Units.CentimetersToDocumentsF((float)1.01);
                    Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel00.BackgroundColor = Color.LightGray;
                    ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSeccion5[0, 0].Range);
                    ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel00.SpacingAfter = 0;
                    ParagraphPropertiesCel00.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel00);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSeccion5[0, 1];
                    Cel01.PreferredWidthType = WidthType.Fixed;
                    Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)4.86);
                    Cel01.HeightType = HeightType.Exact;
                    Cel01.Height = Units.CentimetersToDocumentsF((float)1.01);
                    Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel01.BackgroundColor = Color.LightGray;
                    ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSeccion5[0, 1].Range);
                    ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel01.SpacingAfter = 0;
                    ParagraphPropertiesCel01.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel01);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSeccion5[0, 2];
                    Cel02.PreferredWidthType = WidthType.Fixed;
                    Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)6);
                    Cel02.HeightType = HeightType.Exact;
                    Cel02.Height = Units.CentimetersToDocumentsF((float)1.01);
                    Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel02.BackgroundColor = Color.LightGray;
                    ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSeccion5[0, 2].Range);
                    ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel02.SpacingAfter = 0;
                    ParagraphPropertiesCel02.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel02);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSeccion5[0, 3];
                    Cel03.PreferredWidthType = WidthType.Fixed;
                    Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)3.25);
                    Cel03.HeightType = HeightType.Exact;
                    Cel03.Height = Units.CentimetersToDocumentsF((float)1.01);
                    Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel03.BackgroundColor = Color.LightGray;
                    ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSeccion5[0, 3].Range);
                    ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel03.SpacingAfter = 0;
                    ParagraphPropertiesCel03.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel03);

                    tablaSeccion5.Rows[0].RepeatAsHeaderRow = true;

                    #endregion

                    #region Datos Tabla
                    document.InsertText(tablaSeccion5[0, 0].Range.Start, "N°");
                    document.InsertText(tablaSeccion5[0, 1].Range.Start, "EMPRESA");
                    document.InsertText(tablaSeccion5[0, 2].Range.Start, "INFORME FINAL");
                    document.InsertText(tablaSeccion5[0, 3].Range.Start, "FECHA DE ENTREGA");

                    for (int i = 0; i < obj.CTAFINFORMEREPORTE.Count; i++)
                    {
                        if (obj.CTAFINFORMEREPORTE[i].EMPRABREV != null)
                        {
                            document.InsertText(tablaSeccion5[i + 1, 0].Range.Start, obj.CTAFINFORMEREPORTE[i].RowNumber.ToString());
                            document.InsertText(tablaSeccion5[i + 1, 1].Range.Start, obj.CTAFINFORMEREPORTE[i].EMPRABREV);
                            document.InsertText(tablaSeccion5[i + 1, 2].Range.Start, obj.CTAFINFORMEREPORTE[i].INFORMEFINAL);
                            document.InsertText(tablaSeccion5[i + 1, 3].Range.Start, obj.CTAFINFORMEREPORTE[i].FECHA);

                            for (int x = 0; x <= 3; x++)
                            {
                                DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSeccion5[i + 1, x];
                                Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                DocumentRange RangeCeli0 = Celi0.Range;
                                CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                CharacterPropertiesRangeCeli0.FontSize = 11;
                                CharacterPropertiesRangeCeli0.Bold = false;
                                document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSeccion5[i + 1, x].Range);
                                ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCeli0.SpacingAfter = 0;
                                ParagraphPropertiesCeli0.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                            }                            
                        }
                    }

                    #endregion
                }
                else
                {
                    DocumentPosition PostablaSeccion5 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Table tablaSeccion5 = document.Tables.Create(PostablaSeccion5, 2, 4);
                    tablaSeccion5.BeginUpdate();

                    #region Configuracion Tabla

                    tablaSeccion5.Style = EstiloTabla1;
                    tablaSeccion5.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                    tablaSeccion5.VerticalAlignment = TableVerticalAlignment.None;
                    tablaSeccion5.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                    tablaSeccion5.TextWrappingType = TableTextWrappingType.Around;
                    tablaSeccion5.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                    tablaSeccion5.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                    tablaSeccion5.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                    tablaSeccion5.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                    tablaSeccion5.MarginTop = Units.CentimetersToDocumentsF((float)0);
                    tablaSeccion5.MarginRight = Units.CentimetersToDocumentsF((float)0.25);

                    tablaSeccion5.PreferredWidthType = WidthType.Fixed;
                    tablaSeccion5.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSeccion5[0, 0];
                    Cel00.PreferredWidthType = WidthType.Fixed;
                    Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)0.89);
                    Cel00.HeightType = HeightType.Exact;
                    Cel00.Height = Units.CentimetersToDocumentsF((float)1.01);
                    Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel00.BackgroundColor = Color.LightGray;
                    ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSeccion5[0, 0].Range);
                    ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel00.SpacingAfter = 0;
                    ParagraphPropertiesCel00.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel00);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSeccion5[0, 1];
                    Cel01.PreferredWidthType = WidthType.Fixed;
                    Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)4.86);
                    Cel01.HeightType = HeightType.Exact;
                    Cel01.Height = Units.CentimetersToDocumentsF((float)1.01);
                    Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel01.BackgroundColor = Color.LightGray;
                    ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSeccion5[0, 1].Range);
                    ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel01.SpacingAfter = 0;
                    ParagraphPropertiesCel01.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel01);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSeccion5[0, 2];
                    Cel02.PreferredWidthType = WidthType.Fixed;
                    Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)6);
                    Cel02.HeightType = HeightType.Exact;
                    Cel02.Height = Units.CentimetersToDocumentsF((float)1.01);
                    Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel02.BackgroundColor = Color.LightGray;
                    ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSeccion5[0, 2].Range);
                    ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel02.SpacingAfter = 0;
                    ParagraphPropertiesCel02.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel02);

                    DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSeccion5[0, 3];
                    Cel03.PreferredWidthType = WidthType.Fixed;
                    Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)3.25);
                    Cel03.HeightType = HeightType.Exact;
                    Cel03.Height = Units.CentimetersToDocumentsF((float)1.01);
                    Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                    Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                    Cel03.BackgroundColor = Color.LightGray;
                    ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSeccion5[0, 3].Range);
                    ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                    ParagraphPropertiesCel03.SpacingAfter = 0;
                    ParagraphPropertiesCel03.SpacingBefore = 0;
                    document.EndUpdateParagraphs(ParagraphPropertiesCel03);

                    tablaSeccion5.Rows[0].RepeatAsHeaderRow = true;

                    #endregion

                    document.InsertText(tablaSeccion5[0, 0].Range.Start, "N°");
                    document.InsertText(tablaSeccion5[0, 1].Range.Start, "EMPRESA");
                    document.InsertText(tablaSeccion5[0, 2].Range.Start, "INFORME FINAL");
                    document.InsertText(tablaSeccion5[0, 3].Range.Start, "FECHA DE ENTREGA");

                    for (int x = 0; x <= 3; x++)
                    {
                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSeccion5[1, x];
                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                        DocumentRange RangeCeli0 = Celi0.Range;
                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                        CharacterPropertiesRangeCeli0.FontSize = 11;
                        CharacterPropertiesRangeCeli0.Bold = false;
                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSeccion5[1, x].Range);
                        ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                    }
                }

                #endregion

                int IndexFinTablaSec14 = document.Paragraphs.ToList().Count();
                _ParTablaSec14.RangeFinParrafo = IndexFinTablaSec14;
                ListaParrafos.Add(_ParTablaSec14);

                #endregion

                #region Sección15: Fecha de Elaboración

                if (obj.oAnalisisFallaDTO.AFEITDECFECHAELAB.HasValue)
                {
                    int IndexSec15 = document.Paragraphs.ToList().Count();
                    DocumentPosition PosSec15 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec15 = document.Paragraphs.Insert(PosSec15);
                    document.InsertText(PosSec15, $"San Isidro, {obj.oAnalisisFallaDTO.AFEITDECFECHAELAB.Value.Day} de {COES.Base.Tools.Util.ObtenerNombreMes(obj.oAnalisisFallaDTO.AFEITDECFECHAELAB.Value.Month).ToLower()} de {obj.oAnalisisFallaDTO.AFEITDECFECHAELAB.Value.Year}");
                    document.Paragraphs[IndexSec15].Style = Estilo27;
                    CharacterProperties CharacterProperties15 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec15].Range);
                    CharacterProperties15.Bold = false;
                    document.EndUpdateCharacters(CharacterProperties15);

                    ParrafoDTO _ParTablaSec15 = new ParrafoDTO();
                    _ParTablaSec15.NroParrafo = IndexSec15;
                    _ParTablaSec15.RangeIniParrafo = IndexSec15;
                    _ParTablaSec15.RangeFinParrafo = IndexSec15;
                    ListaParrafos.Add(_ParTablaSec15);
                }

                #endregion

                #region Anexo

                int contFootnes = 0;

                int IndexSecAnexo = document.Paragraphs.ToList().Count();
                ParrafoDTO _ParrSec13Anexo = new ParrafoDTO();
                _ParrSec13Anexo.NroParrafo = IndexSecAnexo;
                _ParrSec13Anexo.RangeIniParrafo = IndexSecAnexo;


                DocumentPosition PosSecAnexo = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecAnexo = document.Paragraphs.Insert(PosSecAnexo);
                document.InsertText(PosSecAnexo, "ANEXO");
                document.Paragraphs[IndexSecAnexo].Style = Estilo23;
                CharacterProperties CharacterPropertiesAnexo = document.BeginUpdateCharacters(document.Paragraphs[IndexSecAnexo].Range);
                CharacterPropertiesAnexo.Style = Estilo22;
                document.EndUpdateCharacters(CharacterPropertiesAnexo);

                int IndexSecAnexo1 = document.Paragraphs.ToList().Count();
                DocumentPosition PosSecAnexo1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecAnexo1 = document.Paragraphs.Insert(PosSecAnexo1);
                document.InsertText(PosSecAnexo1, "Secuencia Cronológica");
                document.Paragraphs[IndexSecAnexo1].Style = Estilo23;
                CharacterProperties CharacterPropertiesAnexo1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecAnexo1].Range);
                CharacterPropertiesAnexo1.Style = Estilo16;
                document.EndUpdateCharacters(CharacterPropertiesAnexo1);

                if (obj.ListaInformeCtaf == null)
                {
                    int IndexAnexoNing = document.Paragraphs.ToList().Count();
                    ParrafoDTO _ParrAnexoNing = new ParrafoDTO();
                    _ParrAnexoNing.NroParrafo = IndexAnexoNing;
                    _ParrAnexoNing.RangeIniParrafo = IndexAnexoNing;
                    _ParrAnexoNing.RangeFinParrafo = IndexAnexoNing;
                    ListaParrafos.Add(_ParrAnexoNing);

                    DocumentPosition PosAnexoNing = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParAnexoNing = document.Paragraphs.Insert(PosAnexoNing);
                    document.InsertText(PosAnexoNing, "No Registrado.");
                    document.Paragraphs[IndexAnexoNing].Style = Estilo18;
                    CharacterProperties CharacterPropertiesAnexoNing = document.BeginUpdateCharacters(document.Paragraphs[IndexAnexoNing].Range);
                    CharacterPropertiesAnexoNing.Style = Estilo17;
                    document.EndUpdateCharacters(CharacterPropertiesAnexoNing);
                }
                else
                {
                    if (obj.ListaInformeCtaf.Count == 0)
                    {
                        int IndexAnexoNing = document.Paragraphs.ToList().Count();
                        ParrafoDTO _ParrAnexoNing = new ParrafoDTO();
                        _ParrAnexoNing.NroParrafo = IndexAnexoNing;
                        _ParrAnexoNing.RangeIniParrafo = IndexAnexoNing;
                        _ParrAnexoNing.RangeFinParrafo = IndexAnexoNing;
                        ListaParrafos.Add(_ParrAnexoNing);

                        DocumentPosition PosAnexoNing = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParAnexoNing = document.Paragraphs.Insert(PosAnexoNing);
                        document.InsertText(PosAnexoNing, "No Registrado.");
                        document.Paragraphs[IndexAnexoNing].Style = Estilo18;
                        CharacterProperties CharacterPropertiesAnexoNing = document.BeginUpdateCharacters(document.Paragraphs[IndexAnexoNing].Range);
                        CharacterPropertiesAnexoNing.Style = Estilo17;
                        document.EndUpdateCharacters(CharacterPropertiesAnexoNing);
                    }
                    else
                    {
                        int contFilas = 0;
                        foreach (var itemSec in obj.ListaInformeCtaf)
                        {
                            int nro = itemSec.listaSecuenciaEvento.Count() == 0 ? 1 : itemSec.listaSecuenciaEvento.Count();
                            contFilas += nro + 1;
                        }

                        int rowsAnexo = contFilas + 1;
                        DocumentPosition PostablaAnexo = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Table tablaAnexo = document.Tables.Create(PostablaAnexo, rowsAnexo, 3);
                        tablaAnexo.BeginUpdate();

                        #region Configuración tabla

                        tablaAnexo.Style = EstiloTabla1;
                        tablaAnexo.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                        tablaAnexo.VerticalAlignment = TableVerticalAlignment.None;
                        tablaAnexo.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                        tablaAnexo.TextWrappingType = TableTextWrappingType.Around;
                        tablaAnexo.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                        tablaAnexo.OffsetXRelative = Units.CentimetersToDocumentsF((float)0.94);
                        tablaAnexo.MarginBottom = Units.CentimetersToDocumentsF((float)0);
                        tablaAnexo.MarginLeft = Units.CentimetersToDocumentsF((float)0.25);
                        tablaAnexo.MarginTop = Units.CentimetersToDocumentsF((float)0);
                        tablaAnexo.MarginRight = Units.CentimetersToDocumentsF((float)0.25);
                        tablaAnexo.PreferredWidthType = WidthType.Fixed;
                        tablaAnexo.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                        DevExpress.XtraRichEdit.API.Native.TableCell CelAnexo00 = tablaAnexo[0, 0];
                        CelAnexo00.PreferredWidthType = WidthType.Fixed;
                        CelAnexo00.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                        CelAnexo00.HeightType = HeightType.Exact;
                        CelAnexo00.Height = Units.CentimetersToDocumentsF((float)0.8);
                        CelAnexo00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo00.VerticalAlignment = TableCellVerticalAlignment.Center;
                        CelAnexo00.BackgroundColor = Color.LightGray;
                        CelAnexo00.TopPadding = 0;
                        CelAnexo00.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCelAnex00 = document.BeginUpdateParagraphs(tablaAnexo[0, 0].Range);
                        ParagraphPropertiesCelAnex00.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCelAnex00.SpacingAfter = 0;
                        ParagraphPropertiesCelAnex00.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCelAnex00);
                        CharacterProperties CharacterPropertiesCelAnex00 = document.BeginUpdateCharacters(tablaAnexo[0, 0].Range);
                        CharacterPropertiesCelAnex00.Bold = true;
                        CharacterPropertiesCelAnex00.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCelAnex00);

                        DevExpress.XtraRichEdit.API.Native.TableCell CelAnexo01 = tablaAnexo[0, 1];
                        CelAnexo01.PreferredWidthType = WidthType.Fixed;
                        CelAnexo01.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                        CelAnexo01.HeightType = HeightType.Exact;
                        CelAnexo01.Height = Units.CentimetersToDocumentsF((float)0.8);
                        CelAnexo01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo01.VerticalAlignment = TableCellVerticalAlignment.Center;
                        CelAnexo01.BackgroundColor = Color.LightGray;
                        CelAnexo01.TopPadding = 0;
                        CelAnexo01.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCelAnex01 = document.BeginUpdateParagraphs(tablaAnexo[0, 1].Range);
                        ParagraphPropertiesCelAnex01.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCelAnex01.SpacingAfter = 0;
                        ParagraphPropertiesCelAnex01.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCelAnex01);
                        CharacterProperties CharacterPropertiesCelAnex01 = document.BeginUpdateCharacters(tablaAnexo[0, 1].Range);
                        CharacterPropertiesCelAnex01.Bold = true;
                        CharacterPropertiesCelAnex01.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCelAnex01);

                        DevExpress.XtraRichEdit.API.Native.TableCell CelAnexo02 = tablaAnexo[0, 2];
                        CelAnexo02.PreferredWidthType = WidthType.Fixed;
                        CelAnexo02.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                        CelAnexo02.HeightType = HeightType.Exact;
                        CelAnexo02.Height = Units.CentimetersToDocumentsF((float)0.8);
                        CelAnexo02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        CelAnexo02.VerticalAlignment = TableCellVerticalAlignment.Center;
                        CelAnexo02.BackgroundColor = Color.LightGray;
                        CelAnexo02.TopPadding = 0;
                        CelAnexo02.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCelAnex02 = document.BeginUpdateParagraphs(tablaAnexo[0, 2].Range);
                        ParagraphPropertiesCelAnex02.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCelAnex02.SpacingAfter = 0;
                        ParagraphPropertiesCelAnex02.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCelAnex02);
                        CharacterProperties CharacterPropertiesCelAnex02 = document.BeginUpdateCharacters(tablaAnexo[0, 2].Range);
                        CharacterPropertiesCelAnex02.Bold = true;
                        CharacterPropertiesCelAnex02.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCelAnex02);

                        tablaAnexo.Rows[0].RepeatAsHeaderRow = true;

                        #endregion

                        document.InsertText(tablaAnexo[0, 0].Range.Start, "Hora");
                        document.InsertText(tablaAnexo[0, 1].Range.Start, "S.E. / C.C.");
                        document.InsertText(tablaAnexo[0, 2].Range.Start, "Descripción");

                        int fila = 1;
                        List<EmpresaReporte> lstEmpresasCC = servAF.ObtenerListadoConfiguracionEmpresaComboBox();
                        foreach (var itemSecuenciaEvento in obj.ListaInformeCtaf.OrderBy(m => m.EVENINI))
                        {
                            tablaAnexo.MergeCells(tablaAnexo[fila, 0], tablaAnexo[fila, 2]);
                            DevExpress.XtraRichEdit.API.Native.TableCell CelAnexofila2 = tablaAnexo[fila, 0];
                            CelAnexofila2.PreferredWidthType = WidthType.Fixed;
                            CelAnexofila2.PreferredWidth = Units.CentimetersToDocumentsF((float)2.5);
                            CelAnexofila2.HeightType = HeightType.Exact;
                            CelAnexofila2.Height = Units.CentimetersToDocumentsF((float)0.5);
                            CelAnexofila2.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                            CelAnexofila2.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                            CelAnexofila2.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                            CelAnexofila2.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                            CelAnexofila2.VerticalAlignment = TableCellVerticalAlignment.Center;
                            CelAnexofila2.BackgroundColor = Color.FromArgb(176, 198, 246);
                            CelAnexofila2.TopPadding = 0;
                            CelAnexofila2.BottomPadding = 0;
                            ParagraphProperties ParagraphPropertiesCelAnexFila2 = document.BeginUpdateParagraphs(tablaAnexo[fila, 0].Range);
                            ParagraphPropertiesCelAnexFila2.Alignment = ParagraphAlignment.Center;
                            ParagraphPropertiesCelAnexFila2.SpacingAfter = 0;
                            ParagraphPropertiesCelAnexFila2.SpacingBefore = 0;
                            document.EndUpdateParagraphs(ParagraphPropertiesCelAnexFila2);
                            CharacterProperties CharacterPropertiesCelFila2 = document.BeginUpdateCharacters(tablaAnexo[fila, 0].Range);
                            CharacterPropertiesCelFila2.Bold = true;
                            CharacterPropertiesCelFila2.Underline = UnderlineType.None;
                            document.EndUpdateCharacters(CharacterPropertiesCelFila2);

                            document.InsertText(tablaAnexo[fila, 0].Range.Start, itemSecuenciaEvento.CabNombreEvento);
                            fila++;

                            if (itemSecuenciaEvento.listaSecuenciaEvento.Count == 0)
                            {
                                tablaAnexo.MergeCells(tablaAnexo[fila, 0], tablaAnexo[fila, 2]);
                                document.InsertText(tablaAnexo[fila, 0].Range.Start, "No Registrado.");
                                DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaAnexo[fila, 0];
                                Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                DocumentRange RangeCeli0 = Celi0.Range;
                                CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                CharacterPropertiesRangeCeli0.FontSize = 11;
                                CharacterPropertiesRangeCeli0.Bold = false;
                                CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaAnexo[fila, 0].Range);
                                ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                ParagraphPropertiesCeli0.SpacingAfter = 0;
                                ParagraphPropertiesCeli0.SpacingBefore = 0;
                                document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                fila++;
                            }
                            else
                            {
                                for (int i = 0; i < itemSecuenciaEvento.listaSecuenciaEvento.Count; i++)
                                {
                                    string fecha_ = string.Empty;
                                    int valorms = 0;
                                    if (itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Length > 8)
                                    {
                                        valorms = Convert.ToInt32(itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(9, 3));
                                        if (valorms > 0)
                                            fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;
                                        else
                                            fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1.Substring(0, 8);
                                    }
                                    else
                                        fecha_ = itemSecuenciaEvento.listaSecuenciaEvento[i].SEFHORA1;


                                    document.InsertText(tablaAnexo[fila, 0].Range.Start, fecha_);
                                    document.InsertText(tablaAnexo[fila, 1].Range.Start, itemSecuenciaEvento.listaSecuenciaEvento[i].D1.ToString());
                                    document.InsertText(tablaAnexo[fila, 2].Range.Start, itemSecuenciaEvento.listaSecuenciaEvento[i].SEDESCRIP.ToString());

                                    for (int x = 0; x <= 2; x++)
                                    {
                                        DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaAnexo[fila, x];
                                        Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                        Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                        Celi0.Height = Units.CentimetersToDocumentsF((float)0.25);
                                        DocumentRange RangeCeli0 = Celi0.Range;
                                        CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                        CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                        CharacterPropertiesRangeCeli0.FontSize = 11;
                                        CharacterPropertiesRangeCeli0.Bold = false;
                                        CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                        document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                        ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaAnexo[fila, x].Range);
                                        if (x == 2)
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Justify;
                                        else
                                            ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                        ParagraphPropertiesCeli0.SpacingAfter = 0;
                                        ParagraphPropertiesCeli0.SpacingBefore = 0;
                                        document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                                    }

                                    #region Nota al pie1

                                    EmpresaReporte _empresa = new EmpresaReporte();
                                    if (itemSecuenciaEvento.listaSecuenciaEvento[i].D1 == "CCO-COES")
                                        _empresa.EmpresaSICCOES = "CENTRO DE CONTROL COES";
                                    else
                                        _empresa = lstEmpresasCC.Where(x => x.CodigoOsinergmin == itemSecuenciaEvento.listaSecuenciaEvento[i].D1).FirstOrDefault();

                                    if(_empresa != null)
                                    {
                                        DocumentPosition posNotaPie = document.CreatePosition(tablaAnexo[fila, 1].Range.End.ToInt() - 1);
                                        document.Footnotes.Insert(posNotaPie);
                                        SubDocument footnote = document.Footnotes[contFootnes].BeginUpdate();
                                        footnote.AppendText(itemSecuenciaEvento.listaSecuenciaEvento[i].D1 + " : " + _empresa.EmpresaSICCOES);
                                        ParagraphProperties paragraphPropertiesfootnote1 = footnote.BeginUpdateParagraphs(footnote.Range);
                                        paragraphPropertiesfootnote1.Alignment = ParagraphAlignment.Justify;
                                        footnote.EndUpdateParagraphs(paragraphPropertiesfootnote1);
                                        CharacterProperties characterPropertiesfootnote1 = footnote.BeginUpdateCharacters(footnote.Range);
                                        characterPropertiesfootnote1.FontName = "Calibri";
                                        characterPropertiesfootnote1.FontSize = 9;
                                        footnote.EndUpdateCharacters(characterPropertiesfootnote1);
                                        document.Footnotes[contFootnes].EndUpdate(footnote);
                                        contFootnes++;
                                    }

                                        

                                    #endregion

                                    fila++;
                                }
                            }
                        }

                    }
                }





                int IndexFinSecAnexo = document.Paragraphs.ToList().Count();
                _ParrSec13Anexo.RangeFinParrafo = IndexFinSecAnexo;
                ListaParrafos.Add(_ParrSec13Anexo);

                #endregion

                document.BeginUpdate();

                #region Insertar Numeración
                DocumentRange rangeLevel0 = document.CreateRange(document.Paragraphs[posRangoSec4].Range.Start, document.Sections[0].Range.End.ToInt() - document.Paragraphs[posRangoSec4].Range.Start.ToInt());
                document.Paragraphs.AddParagraphsToList(rangeLevel0, ListaNumeros0, 0);
                document.Paragraphs.AddParagraphsToList(document.Paragraphs[posParLevel1Sec5].Range, ListaNumeros0, 1);               

                if (posDetIniCentralSeccion5 > 0 && IndexFinCondiciones > 0)
                {
                    DocumentRange rangeLevel2 = document.CreateRange(document.Paragraphs[posDetIniCentralSeccion5].Range.Start, document.Paragraphs[IndexFinCondiciones - 1].Range.End.ToInt() - document.Paragraphs[posDetIniCentralSeccion5].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel2, ListaNumeros0, 2);
                }

                if (posIniParLevel4Sec10_1 > 0 && posFinParLevel4Sec10_1 > 0)
                {
                    DocumentRange rangeLevel3 = document.CreateRange(document.Paragraphs[posIniParLevel4Sec10_1].Range.Start, document.Paragraphs[posFinParLevel4Sec10_1 - 1].Range.End.ToInt() - document.Paragraphs[posIniParLevel4Sec10_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel3, ListaNumeros0, 1);
                }

                if (IndexIniSeccion11_1 > 0 && IndexFinSeccion11_1 > 0)
                {
                    DocumentRange rangeLevel4 = document.CreateRange(document.Paragraphs[IndexIniSeccion11_1].Range.Start, document.Paragraphs[IndexFinSeccion11_1 - 1].Range.End.ToInt() - document.Paragraphs[IndexIniSeccion11_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel4, ListaNumeros0, 1);
                }

                if (IndexIniSec12_1 > 0 && IndexFinSec12_1 > 0)
                {
                    DocumentRange rangeLevel5 = document.CreateRange(document.Paragraphs[IndexIniSec12_1].Range.Start, document.Paragraphs[IndexFinSec12_1 - 1].Range.End.ToInt() - document.Paragraphs[IndexIniSec12_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel5, ListaNumeros0, 1);
                }

                if (IndexIni12_2_1 > 0 && IndexFin12_2_1 > 0)
                {
                    DocumentRange rangeLevel6 = document.CreateRange(document.Paragraphs[IndexIni12_2_1].Range.Start, document.Paragraphs[IndexFin12_2_1 - 1].Range.End.ToInt() - document.Paragraphs[IndexIni12_2_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel6, ListaNumeros0, 2);
                }

                if (IndexSec12_1_Obsv > 0 && IndexFinSec12_1_Obs > 0)
                {
                    DocumentRange rangeLevel7 = document.CreateRange(document.Paragraphs[IndexSec12_1_Obsv].Range.Start, document.Paragraphs[IndexFinSec12_1_Obs - 1].Range.End.ToInt() - document.Paragraphs[IndexSec12_1_Obsv].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel7, ListaNumeros0, 1);
                }

                if (IndexIniRec > 0 && IndexFinRec > 0)
                {
                    DocumentRange rangeLevel7 = document.CreateRange(document.Paragraphs[IndexIniRec].Range.Start, document.Paragraphs[IndexFinRec - 1].Range.End.ToInt() - document.Paragraphs[IndexIniRec].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel7, ListaNumeros0, 1);
                }

                foreach (ParrafoDTO item in ListaParBullets)
                {
                    DocumentRange rangeParSeccionBul = document.CreateRange(document.Paragraphs[item.RangeIniParrafo].Range.Start, document.Paragraphs[item.RangeFinParrafo - 1].Range.End.ToInt() - document.Paragraphs[item.RangeIniParrafo].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeParSeccionBul, ListBullet1, 0);
                }

                #endregion

                #region Remover numeración

                foreach (ParrafoDTO item in ListaParrafos)
                {
                    DocumentRange rangeParSeccion7 = document.CreateRange(document.Paragraphs[item.RangeIniParrafo].Range.Start, document.Paragraphs[item.RangeFinParrafo - 1].Range.End.ToInt() - document.Paragraphs[item.RangeIniParrafo].Range.Start.ToInt());
                    document.Paragraphs.RemoveNumberingFromParagraphs(rangeParSeccion7);
                }

                foreach (int itemShape in ListaIndexShapes)
                {
                    document.Paragraphs.RemoveNumberingFromParagraphs(document.Shapes[itemShape].Range);
                }

                #endregion


                document.EndUpdate();

                MemoryStream ms = new MemoryStream();
                wordProcessor.SaveDocument(ms, DocumentFormat.OpenXml);
                bytes = ms.ToArray();
                ms.Dispose();
                ms.Close();

                FileServer.CreateFolder(null, null, fileWord);
                wordProcessor.SaveDocument(fileWord + fileReporte, DocumentFormat.OpenXml);
                wordProcessor.Dispose();                
            }

            return bytes;

        }

        public GenerarDecisionCtafFDTO GenerarDecisionCTAF(int analisisFallaId, EventosAppServicio eventoAppServicio, string logo, string subcarpeta, string fileserverSev, string formatoFecha, string imagenLinea)
        {
            var infoDecisionCtaf = servAF.ObtenerInformaciónDecisionCTAF(analisisFallaId, eventoAppServicio);
            var fileName = servAF.ObtenerCarpetaSEV(infoDecisionCtaf.AnalisisFalla, eventoAppServicio, infoDecisionCtaf.EventosSCO, subcarpeta, fileserverSev, formatoFecha);
            return DecisionCTAF(infoDecisionCtaf, logo, fileName, imagenLinea);
        }

        public GenerarDecisionCtafFDTO DecisionCTAF(InfoDecisionCTAF infoDecision, string logoPath, string fileName, string imagenLinea)
        {
            var response = new byte[0];

            string reporteName = $"D_{infoDecision.AnalisisFalla.CodigoEvento}";
            int fdatcodi = (int)ConstantesExtranetCTAF.Fuentedato.Interrupcion;

            using (var wordProcessor = new RichEditDocumentServer())
            {
                Document document = wordProcessor.Document;
                document.AppendSection();
                document.BeginUpdate();

                DevExpress.XtraRichEdit.API.Native.Section firstSection = document.Sections[0];
                DevExpress.XtraRichEdit.API.Native.Section secondSection = document.Sections[1];

                List<ParrafoDTO> ListaParrafos = new List<ParrafoDTO>();
                List<int> ListaIndexShapes = new List<int>();

                #region Configuracion Pagina - Seccion1
                firstSection.Margins.Top = Units.CentimetersToDocumentsF((float)2.29);
                firstSection.Margins.Bottom = Units.CentimetersToDocumentsF((float)2);
                firstSection.Margins.Right = Units.CentimetersToDocumentsF((float)2.49);
                firstSection.Margins.Left = Units.CentimetersToDocumentsF((float)3);
                firstSection.Page.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;
                #endregion

                #region Configuracion Pagina - Seccion2
                secondSection.Margins.Top = Units.CentimetersToDocumentsF((float)2.29);
                secondSection.Margins.Bottom = Units.CentimetersToDocumentsF((float)2);
                secondSection.Margins.Right = Units.CentimetersToDocumentsF((float)2.49);
                secondSection.Margins.Left = Units.CentimetersToDocumentsF((float)3);
                secondSection.Page.PaperKind = DevExpress.Drawing.Printing.DXPaperKind.A4;
                #endregion

                #region Estilos

                ParagraphStyle Estilo1 = document.ParagraphStyles["Estilo1"];
                if (Estilo1 == null)
                {
                    Estilo1 = document.ParagraphStyles.CreateNew();
                    Estilo1.Name = "Estilo1";
                    Estilo1.Alignment = ParagraphAlignment.Right;
                    Estilo1.FontName = "Calibri";
                    Estilo1.FontSize = 9;
                    document.ParagraphStyles.Add(Estilo1);
                }

                ParagraphStyle Estilo2 = document.ParagraphStyles["Estilo2"];
                if (Estilo2 == null)
                {
                    Estilo2 = document.ParagraphStyles.CreateNew();
                    Estilo2.Name = "Estilo2";
                    Estilo2.Alignment = ParagraphAlignment.Center;
                    Estilo2.FontName = "Calibri";
                    Estilo2.FontSize = 11;
                    //Estilo2.Bold = true;
                    document.ParagraphStyles.Add(Estilo2);
                }

                CharacterStyle Estilo3 = document.CharacterStyles["Estilo3"];
                if (Estilo3 == null)
                {
                    Estilo3 = document.CharacterStyles.CreateNew();
                    Estilo3.Name = "Estilo3";
                    Estilo3.Bold = true;
                    Estilo3.FontName = "Calibri";
                    Estilo3.FontSize = 11;
                    document.CharacterStyles.Add(Estilo3);
                }

                ParagraphStyle Estilo4 = document.ParagraphStyles["Estilo4"];
                if (Estilo4 == null)
                {
                    Estilo4 = document.ParagraphStyles.CreateNew();
                    Estilo4.Name = "Estilo5";
                    Estilo4.Alignment = ParagraphAlignment.Justify;
                    Estilo4.FontName = "Calibri";
                    Estilo4.FontSize = 11;
                    Estilo4.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                    Estilo4.FirstLineIndent = Units.CentimetersToDocumentsF((float)2);
                    Estilo4.LeftIndent = 236;
                    Estilo4.SpacingBefore = 0;
                    Estilo4.SpacingAfter = 0;
                    document.ParagraphStyles.Add(Estilo4);
                }

                ParagraphStyle Estilo5 = document.ParagraphStyles["Estilo5"];
                if (Estilo5 == null)
                {
                    Estilo5 = document.ParagraphStyles.CreateNew();
                    Estilo5.Name = "Estilo5";
                    Estilo5.Alignment = ParagraphAlignment.Justify;
                    Estilo5.FontName = "Calibri";
                    Estilo5.FontSize = 11;
                    Estilo5.Bold = false;
                    document.ParagraphStyles.Add(Estilo5);
                }

                CharacterStyle Estilo6 = document.CharacterStyles["Estilo6"];
                if (Estilo6 == null)
                {
                    Estilo6 = document.CharacterStyles.CreateNew();
                    Estilo6.Name = "Estilo3";
                    Estilo6.Bold = false;
                    Estilo6.FontName = "Calibri";
                    Estilo6.FontSize = 11;
                    document.CharacterStyles.Add(Estilo6);
                }

                CharacterStyle Estilo7 = document.CharacterStyles["Estilo7"];
                if (Estilo7 == null)
                {
                    Estilo7 = document.CharacterStyles.CreateNew();
                    Estilo7.Name = "Estilo7";
                    Estilo7.Bold = true;
                    Estilo7.FontName = "Calibri";
                    Estilo7.FontSize = 11;
                    Estilo7.Underline = UnderlineType.Single;
                    document.CharacterStyles.Add(Estilo7);
                }

                CharacterStyle Estilo8 = document.CharacterStyles["Estilo8"];
                if (Estilo8 == null)
                {
                    Estilo8 = document.CharacterStyles.CreateNew();
                    Estilo8.Name = "Estilo8";
                    Estilo8.Bold = false;
                    Estilo8.FontName = "Calibri";
                    Estilo8.FontSize = 11;
                    Estilo8.Italic = true;
                    document.CharacterStyles.Add(Estilo8);
                }

                ParagraphStyle Estilo9 = document.ParagraphStyles["Estilo9"];
                if (Estilo9 == null)
                {
                    Estilo9 = document.ParagraphStyles.CreateNew();
                    Estilo9.Name = "Estilo21";
                    Estilo9.Alignment = ParagraphAlignment.Center;
                    Estilo9.FontName = "Calibri";
                    Estilo9.FontSize = 11;
                    Estilo9.Bold = true;
                    Estilo9.Underline = UnderlineType.Single;
                    Estilo9.LeftIndent = Units.CentimetersToDocumentsF((float)0.8);
                    Estilo9.SpacingBefore = 50;
                    Estilo9.SpacingAfter = 25;
                    document.ParagraphStyles.Add(Estilo9);
                }

                ParagraphStyle Estilo10 = document.ParagraphStyles["Estilo10"];
                if (Estilo10 == null)
                {
                    Estilo10 = document.ParagraphStyles.CreateNew();
                    Estilo10.Name = "Estilo10";
                    Estilo10.Alignment = ParagraphAlignment.Justify;
                    Estilo10.FontName = "Calibri";
                    Estilo10.FontSize = 11;
                    Estilo10.Bold = false;
                    Estilo10.LeftIndent = 147;
                    document.ParagraphStyles.Add(Estilo10);
                }

                ParagraphStyle Estilo11 = document.ParagraphStyles["Estilo11"];
                if (Estilo11 == null)
                {
                    Estilo11 = document.ParagraphStyles.CreateNew();
                    Estilo11.Name = "Estilo5";
                    Estilo11.Alignment = ParagraphAlignment.Justify;
                    Estilo11.FontName = "Calibri";
                    Estilo11.FontSize = 11;
                    Estilo11.Bold = false;
                    Estilo11.LeftIndent = 292;
                    document.ParagraphStyles.Add(Estilo11);
                }

                ParagraphStyle Estilo12 = document.ParagraphStyles["Estilo12"];
                if (Estilo12 == null)
                {
                    Estilo12 = document.ParagraphStyles.CreateNew();
                    Estilo12.Name = "Estilo5";
                    Estilo12.Alignment = ParagraphAlignment.Justify;
                    Estilo12.FontName = "Calibri";
                    Estilo12.FontSize = 11;
                    Estilo12.Bold = false;
                    Estilo12.FirstLineIndentType = ParagraphFirstLineIndent.None;
                    document.ParagraphStyles.Add(Estilo12);
                }

                ParagraphStyle Estilo13 = document.ParagraphStyles["Estilo13"];
                if (Estilo13 == null)
                {
                    Estilo13 = document.ParagraphStyles.CreateNew();
                    Estilo13.Name = "Estilo13";
                    Estilo13.Alignment = ParagraphAlignment.Center;
                    Estilo13.FontName = "Calibri";
                    Estilo13.FontSize = 14;
                    Estilo13.Bold = false;
                    document.ParagraphStyles.Add(Estilo13);
                }

                CharacterStyle Estilo14 = document.CharacterStyles["Estilo14"];
                if (Estilo14 == null)
                {
                    Estilo14 = document.CharacterStyles.CreateNew();
                    Estilo14.Name = "Estilo14";
                    Estilo14.Bold = true;
                    Estilo14.FontName = "Calibri";
                    Estilo14.FontSize = 14;
                    document.CharacterStyles.Add(Estilo14);
                }

                ParagraphStyle Estilo15 = document.ParagraphStyles["Estilo15"];
                if (Estilo15 == null)
                {
                    Estilo15 = document.ParagraphStyles.CreateNew();
                    Estilo15.Name = "Estilo15";
                    Estilo15.Alignment = ParagraphAlignment.Justify;
                    Estilo15.FontName = "Calibri";
                    Estilo15.FontSize = 11;
                    Estilo15.Bold = false;
                    Estilo15.LeftIndent = Units.CentimetersToDocumentsF((float)0);
                    document.ParagraphStyles.Add(Estilo15);
                }

                ParagraphStyle Estilo16 = document.ParagraphStyles["Estilo16"];
                if (Estilo16 == null)
                {
                    Estilo16 = document.ParagraphStyles.CreateNew();
                    Estilo16.Name = "Estilo15";
                    Estilo16.Alignment = ParagraphAlignment.Center;
                    Estilo16.FontName = "Calibri";
                    Estilo16.FontSize = 11;
                    Estilo16.Bold = false;
                    Estilo16.LeftIndent = Units.CentimetersToDocumentsF((float)0);
                    document.ParagraphStyles.Add(Estilo16);
                }


                DevExpress.XtraRichEdit.API.Native.TableStyle EstiloTabla1 = document.TableStyles["EstiloTabla1"];
                if (EstiloTabla1 == null)
                {
                    EstiloTabla1 = document.TableStyles.CreateNew();
                    EstiloTabla1.LeftPadding = Units.CentimetersToDocumentsF((float)0.19);
                    EstiloTabla1.RightPadding = Units.CentimetersToDocumentsF((float)0.19);
                    EstiloTabla1.SpacingBefore = 0;
                    EstiloTabla1.SpacingAfter = 0;
                    document.TableStyles.Add(EstiloTabla1);
                }

                DevExpress.XtraRichEdit.API.Native.TableStyle EstiloTabla2 = document.TableStyles["EstiloTabla2"];
                if (EstiloTabla2 == null)
                {
                    EstiloTabla2 = document.TableStyles.CreateNew();
                    EstiloTabla2.LeftPadding = Units.CentimetersToDocumentsF((float)0);
                    EstiloTabla2.RightPadding = Units.CentimetersToDocumentsF((float)0);
                    EstiloTabla2.SpacingBefore = 0;
                    EstiloTabla2.SpacingAfter = 0;
                    document.TableStyles.Add(EstiloTabla2);
                }

                #endregion

                #region Lista Numeración

                AbstractNumberingList ListNumeracion = document.AbstractNumberingLists.Add();
                ListNumeracion.NumberingType = NumberingType.MultiLevel;

                #region Nivel0
                ListLevel level = ListNumeracion.Levels[0];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1.27);
                level.ParagraphProperties.LeftIndent = 150;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = true;
                level.Start = 1;
                level.NumberingFormat = NumberingFormat.UpperRoman;
                level.DisplayFormatString = "{0}.";

                #endregion

                #region Nivel1
                level = ListNumeracion.Levels[1];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1.27);
                level.ParagraphProperties.LeftIndent = 150;
                level.Start = 1;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "1.{1}";
                #endregion

                #region Nivel2
                level = ListNumeracion.Levels[2];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)0.75);
                level.ParagraphProperties.LeftIndent = 236;
                level.Start = 1;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = true;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "2.{2}";
                #endregion

                #region Nivel3
                level = ListNumeracion.Levels[3];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1.25);
                level.ParagraphProperties.LeftIndent = 295;
                level.Start = 6;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.CharacterProperties.Italic = true;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "“5.1.{3}";
                #endregion

                #region Nivel4
                level = ListNumeracion.Levels[4];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1.25);
                level.ParagraphProperties.LeftIndent = 295;
                level.Start = 2;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.CharacterProperties.Italic = true;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "“11.{4}";
                #endregion

                #region Nivel5
                level = ListNumeracion.Levels[5];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1.25);
                level.ParagraphProperties.LeftIndent = 295;
                level.Start = 2;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.CharacterProperties.Italic = true;
                level.NumberingFormat = NumberingFormat.LowerLetter;
                level.DisplayFormatString = "“{5})";
                #endregion

                #region Nivel6
                level = ListNumeracion.Levels[6];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                level.ParagraphProperties.LeftIndent = 266;
                level.Start = 1;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.CharacterProperties.Italic = false;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "2.2.{6}";
                #endregion

                #region Nivel7
                level = ListNumeracion.Levels[7];
                level.ParagraphProperties.SpacingBefore = 0;
                level.ParagraphProperties.SpacingAfter = 0;
                level.ParagraphProperties.FirstLineIndentType = ParagraphFirstLineIndent.Hanging;
                level.ParagraphProperties.FirstLineIndent = Units.CentimetersToDocumentsF((float)1);
                level.ParagraphProperties.LeftIndent = 266;
                level.Start = 1;
                level.ParagraphProperties.Alignment = ParagraphAlignment.Justify;
                level.CharacterProperties.Bold = false;
                level.CharacterProperties.Italic = false;
                level.NumberingFormat = NumberingFormat.Decimal;
                level.DisplayFormatString = "2.3.{7}";
                #endregion

                NumberingList ListaNumeros0 = document.NumberingLists.Add(0);

                #endregion

                #region Cabecera 1

                var Logo = Server.MapPath("~/Content/Images/logo2024.png");
                SubDocument myHeader1 = firstSection.BeginUpdateHeader(HeaderFooterType.First);
                myHeader1.Images.Insert(myHeader1.Range.Start, DocumentImageSource.FromFile(Logo));        
                firstSection.EndUpdateHeader(myHeader1);
                
                #endregion

                #region Cabecera 2
                var Logo2 = Server.MapPath("~/Content/Images/logo2024.png");
                SubDocument myHeader2 = firstSection.BeginUpdateHeader(HeaderFooterType.Odd);

                DevExpress.XtraRichEdit.API.Native.Table tablaHeader2 = myHeader2.Tables.Create(myHeader2.Range.End, 1, 2);
                myHeader2.Images.Insert(tablaHeader2[0, 0].Range.Start, DocumentImageSource.FromFile(Logo));
                myHeader2.InsertText(tablaHeader2[0, 1].Range.Start, $"Decisión de la Dirección Ejecutiva del COES\nrespecto de Transgresiones a la NTCSE\npor el {infoDecision.AnalisisFalla.CodigoEvento}");

                tablaHeader2.PreferredWidthType = WidthType.Fixed;
                tablaHeader2.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                DevExpress.XtraRichEdit.API.Native.TableCell Cellhd2_00 = tablaHeader2[0, 0];
                Cellhd2_00.PreferredWidthType = WidthType.Fixed;
                Cellhd2_00.PreferredWidth = Units.CentimetersToDocumentsF((float)4.76);
                Cellhd2_00.HeightType = HeightType.Exact;
                Cellhd2_00.Height = Units.CentimetersToDocumentsF((float)2.5);
                Cellhd2_00.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                Cellhd2_00.Borders.Left.LineStyle = TableBorderLineStyle.None;
                Cellhd2_00.Borders.Right.LineStyle = TableBorderLineStyle.None;
                Cellhd2_00.Borders.Top.LineStyle = TableBorderLineStyle.None;
                tablaHeader2[0, 0].VerticalAlignment = TableCellVerticalAlignment.Center;

                DevExpress.XtraRichEdit.API.Native.TableCell Cellhd2_01 = tablaHeader2[0, 1];
                Cellhd2_01.PreferredWidthType = WidthType.Fixed;
                Cellhd2_01.PreferredWidth = Units.CentimetersToDocumentsF((float)10.24);
                Cellhd2_01.HeightType = HeightType.Exact;
                Cellhd2_01.Height = Units.CentimetersToDocumentsF((float)2.5);
                Cellhd2_01.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                Cellhd2_01.Borders.Left.LineStyle = TableBorderLineStyle.None;
                Cellhd2_01.Borders.Right.LineStyle = TableBorderLineStyle.None;
                Cellhd2_01.Borders.Top.LineStyle = TableBorderLineStyle.None;
                ParagraphProperties ParagraphPropertieshd2_01 = myHeader2.BeginUpdateParagraphs(tablaHeader2[0, 1].Range);
                ParagraphPropertieshd2_01.Style = Estilo1;
                document.EndUpdateParagraphs(ParagraphPropertieshd2_01);
                tablaHeader2[0, 1].VerticalAlignment = TableCellVerticalAlignment.Center;

                //secondSection.EndUpdateHeader(myHeader2);
                firstSection.EndUpdateHeader(myHeader2);
                #endregion

                #region Foother

                SubDocument myFoother = firstSection.BeginUpdateFooter(HeaderFooterType.Primary);
                myFoother.AppendText("______________________________________________________________________________________________________________\n");
                myFoother.AppendText(infoDecision.AnalisisFalla.AFEITFECHAELAB.Value.ToString("dd/MM/yyyy") + "\tPágina ");
                myFoother.Fields.Create(myFoother.AppendText("Page"));
                myFoother.AppendText(" de ");
                myFoother.Fields.Create(myFoother.AppendText("NumPages"));
                myFoother.Fields.Update();

                ParagraphProperties paragraphPropertiesFoother = myFoother.BeginUpdateParagraphs(myFoother.Range);
                paragraphPropertiesFoother.Alignment = ParagraphAlignment.Center;
                myFoother.EndUpdateParagraphs(paragraphPropertiesFoother);

                CharacterProperties characterPropertiesFoother = myFoother.BeginUpdateCharacters(myFoother.Range);
                characterPropertiesFoother.FontSize = 8;
                myFoother.EndUpdateCharacters(characterPropertiesFoother);

                TabInfoCollection tabsEvento = myFoother.Paragraphs[1].BeginUpdateTabs(true);
                TabInfo tabEvento1 = new TabInfo();
                tabEvento1.Position = Units.CentimetersToDocumentsF((float)13.4);
                tabEvento1.Alignment = TabAlignmentType.Left;
                tabsEvento.Add(tabEvento1);

                myFoother.Paragraphs[1].EndUpdateTabs(tabsEvento);


                SubDocument myFoother2 = secondSection.BeginUpdateFooter(HeaderFooterType.Primary);
                myFoother2.AppendText("______________________________________________________________________________________________________________\n");
                myFoother2.AppendText(infoDecision.AnalisisFalla.AFEITFECHAELAB.Value.ToString("dd/MM/yyyy") + "\tPágina ");
                myFoother2.Fields.Create(myFoother2.AppendText("Page"));
                myFoother2.AppendText(" de ");
                myFoother2.Fields.Create(myFoother2.AppendText("NumPages"));
                myFoother2.Fields.Update();

                ParagraphProperties paragraphPropertiesFoother2 = myFoother2.BeginUpdateParagraphs(myFoother2.Range);
                paragraphPropertiesFoother2.Alignment = ParagraphAlignment.Center;
                myFoother2.EndUpdateParagraphs(paragraphPropertiesFoother2);

                CharacterProperties characterPropertiesFoother2 = myFoother2.BeginUpdateCharacters(myFoother2.Range);
                characterPropertiesFoother2.FontSize = 8;
                myFoother2.EndUpdateCharacters(characterPropertiesFoother2);

                TabInfoCollection tabsFoother2 = myFoother2.Paragraphs[1].BeginUpdateTabs(true);
                TabInfo tab2 = new TabInfo();
                tab2.Position = Units.CentimetersToDocumentsF((float)13.4);
                tab2.Alignment = TabAlignmentType.Left;
                tabsFoother2.Add(tab2);
                myFoother2.Paragraphs[1].EndUpdateTabs(tabsFoother2);

                secondSection.EndUpdateFooter(myFoother2);

                
                #endregion

                firstSection.DifferentFirstPage = true;

                #region Título

                int IndexTitulo = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosTitulo = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1Evento = document.Paragraphs.Insert(PosTitulo);
                DocumentRange RangeTitulo = document.InsertText(PosTitulo, $"\nDECISIÓN DE LA DIRECCIÓN EJECUTIVA DEL COES\n\nRESPECTO DE LAS TRANSGRESIONES A LA NTCSE\n\nPOR EL EVENTO {infoDecision.AnalisisFalla.CodigoEvento}\n\n");
                document.Paragraphs[IndexTitulo + 1].Style = Estilo2;
                document.Paragraphs[IndexTitulo + 3].Style = Estilo2;
                document.Paragraphs[IndexTitulo + 5].Style = Estilo2;
                CharacterProperties CharacterPropertiesTitulo = document.BeginUpdateCharacters(RangeTitulo);
                CharacterPropertiesTitulo.Style = Estilo3;
                document.EndUpdateCharacters(CharacterPropertiesTitulo);

                #endregion

                #region Sumilla

                string fechasEventosSCO = string.Empty;
                var tempEventosOrdenados = infoDecision.EventosSCO.OrderBy(x => x.EVENINI).ToList();

                for (int i = 0; i < tempEventosOrdenados.Count; i++)
                {
                    var tempEventoSCO = tempEventosOrdenados[i];

                    if (tempEventoSCO.EVENINI.HasValue)
                    {
                        var agregarAdicion = i == tempEventosOrdenados.Count - 1 ? " y " : ", ";
                        agregarAdicion = i == 0 ? "" : agregarAdicion;
                        var hora = tempEventoSCO.EVENINI.Value.ToString("HH:mm:ss ");
                        var tempDiaEvento = tempEventoSCO.EVENINI.Value.ToString($" dd.MM.yyyy");
                        fechasEventosSCO = string.Concat(fechasEventosSCO, agregarAdicion, hora, "h del", tempDiaEvento);
                    }
                }
                int IndexSumilla = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSumilla = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSumilla = document.Paragraphs.Insert(PosSumilla);
                document.InsertText(PosSumilla, "Sumilla:       " + $"Asignación de responsabilidad por interrupción de suministros en el SEIN, ocurrida a las {fechasEventosSCO}.\n");
                document.Paragraphs[IndexSumilla].Style = Estilo4;

                int LenghtSumilla = 9;
                DocumentRange FormatoRangoSumilla = document.CreateRange(document.Paragraphs[IndexSumilla].Range.Start, LenghtSumilla);
                CharacterProperties CarPropRangoSumilla = document.BeginUpdateCharacters(FormatoRangoSumilla);
                CarPropRangoSumilla.Underline = UnderlineType.Single;
                document.EndUpdateCharacters(CarPropRangoSumilla);


                TabInfoCollection tabs = document.Paragraphs[IndexSumilla].BeginUpdateTabs(true);
                TabInfo tab1 = new TabInfo();
                tab1.Position = Units.CentimetersToDocumentsF((float)0.5);
                tab1.Alignment = TabAlignmentType.Left;
                tabs.Add(tab1);
                document.Paragraphs[IndexSumilla].EndUpdateTabs(tabs);


                #endregion

                #region Fecha de Emisión Desición

                var tempDiaFechaEmisionDecision = infoDecision.AnalisisFalla.AFEITFECHAELAB.Value.ToString("dd");
                var mes = COES.Base.Tools.Util.ObtenerNombreMes(infoDecision.AnalisisFalla.AFEITFECHAELAB.Value.Month).ToLower();
                var parrafoFechaEmisionDecisionText = $"Lima, {tempDiaFechaEmisionDecision} de {mes} de {infoDecision.AnalisisFalla.AFEITFECHAELAB.Value.ToString("yyyy")}\n";

                int IndexFecha = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosFecha = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParFecha = document.Paragraphs.Insert(PosFecha);
                document.InsertText(PosFecha, parrafoFechaEmisionDecisionText);

                #endregion

                #region Dirección

                int IndexDireccion = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosDireccion = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParDireccion = document.Paragraphs.Insert(PosDireccion);
                document.InsertText(PosDireccion, "LA DIRECCIÓN EJECUTIVA DEL COES:\n");
                CharacterProperties CarPropDireccion = document.BeginUpdateCharacters(document.Paragraphs[IndexDireccion].Range);
                CarPropDireccion.Style = Estilo3;
                document.EndUpdateCharacters(CarPropDireccion);

                #endregion

                #region Antecedentes

                var antecedentesFechasEventosSCO = string.Empty;
                var antecedentesHorasEventosSCO = string.Empty;

                var tempEventosOrdenadosAntecedentes = infoDecision.EventosSCO.OrderBy(x => x.EVENINI).ToList();

                for (int i = 0; i < tempEventosOrdenadosAntecedentes.Count; i++)
                {
                    var tempEventoSCO = tempEventosOrdenadosAntecedentes[i];

                    if (tempEventoSCO.EVENINI.HasValue)
                    {
                        var agregarAdicion = i == tempEventosOrdenadosAntecedentes.Count - 1 ? " y " : ", ";
                        agregarAdicion = i == 0 ? "" : agregarAdicion;
                        var tempDiaEvento = tempEventoSCO.EVENINI.Value.ToString($"dd.MM.yyyy");
                        var tempHoraEvento = tempEventoSCO.EVENINI.Value.ToString("HH:mm:ss");
                        antecedentesFechasEventosSCO = string.Concat(antecedentesFechasEventosSCO, agregarAdicion, tempDiaEvento);
                        antecedentesHorasEventosSCO = string.Concat(antecedentesHorasEventosSCO, agregarAdicion, tempHoraEvento, " h");
                    }
                }

                var antecedentesDateTimeEventosSCO = $"{antecedentesFechasEventosSCO}, a las {antecedentesHorasEventosSCO}";

                var antecedentesEmpresasInformeFinal = string.Empty;
                var tempListaEmpresas = infoDecision.InformesFinales.Select(x => x.Emprnomb).Distinct().ToList();

                for (int i = 0; i < tempListaEmpresas.Count; i++)
                {
                    var tempNombreEmpresa = tempListaEmpresas[i];
                    var tempAgregarAdicionInformeFinal = i == tempListaEmpresas.Count - 1 ? " y " : ", ";
                    tempAgregarAdicionInformeFinal = i == 0 ? "" : tempAgregarAdicionInformeFinal;
                    antecedentesEmpresasInformeFinal = string.Concat(antecedentesEmpresasInformeFinal, tempAgregarAdicionInformeFinal, tempNombreEmpresa);
                }

                var tempDiaFechaEmisionInformeCTAF = infoDecision.AnalisisFalla.AFEREUFECHAPROG.Value.ToString("dd");
                var tempMesFechaEmisionInformeCTAF = COES.Base.Tools.Util.ObtenerNombreMes(infoDecision.AnalisisFalla.AFEREUFECHAPROG.Value.Month).ToLower();
                var fechaEmisionInformeCTAF = $"{tempDiaFechaEmisionInformeCTAF} de {tempMesFechaEmisionInformeCTAF} de {infoDecision.AnalisisFalla.AFEREUFECHAPROG.Value.ToString("yyyy")}";

                var codigoInformeTecnico = infoDecision.AnalisisFalla.CodigoEvento.Replace("EV", "IT");
                var tempFechaInformTecnicoAntecedente = infoDecision.AnalisisFalla.AFEITFECHAELAB.Value.ToString("dd.MM.yyyy");

                var tipoReunion = "presencial";

                if (infoDecision.AnalisisFalla.AFECONVTIPOREUNION == "N")
                    tipoReunion = "no presencial";

                string tempAntecedentesFechasEventosSCO = string.Empty;

                for (int i = 0; i < tempEventosOrdenadosAntecedentes.Count; i++)
                {
                    var tempEventoSCO = tempEventosOrdenadosAntecedentes[i];

                    if (tempEventoSCO.EVENINI.HasValue)
                    {
                        var agregarAdicion = i == tempEventosOrdenadosAntecedentes.Count - 1 ? " y " : ", ";
                        agregarAdicion = i == 0 ? "" : agregarAdicion;
                        var tempAntecedenteHora = tempEventoSCO.EVENINI.Value.ToString(" HH:mm:ss");
                        var tempAntecedenteDiaEvento = tempEventoSCO.EVENINI.Value.ToString($"dd.MM.yyyy ");
                        tempAntecedentesFechasEventosSCO = string.Concat(tempAntecedentesFechasEventosSCO, agregarAdicion, tempAntecedenteDiaEvento, "a las", tempAntecedenteHora, " h");
                    }
                }

                int IndexAntecedentes = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosAntecedentes = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosAntecedentes = document.Paragraphs.Insert(PosAntecedentes);
                document.InsertText(PosAntecedentes, "ANTECEDENTES\n");
                CharacterProperties CarPropAntecedentes = document.BeginUpdateCharacters(document.Paragraphs[IndexAntecedentes].Range);
                CarPropAntecedentes.Style = Estilo3;
                document.EndUpdateCharacters(CarPropAntecedentes);
                ParrafoDTO _Parrafo1 = new ParrafoDTO();
                _Parrafo1.NroParrafo = IndexAntecedentes + 1;
                _Parrafo1.RangeIniParrafo = IndexAntecedentes + 1;
                _Parrafo1.RangeFinParrafo = IndexAntecedentes + 1;
                ListaParrafos.Add(_Parrafo1);

                int IndexAntecedentes1_1 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosAntecedentes1_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosAntecedentes1_1 = document.Paragraphs.Insert(PosAntecedentes1_1);
                document.InsertText(PosAntecedentes1_1, $"Con fechas {antecedentesDateTimeEventosSCO} respectivamente, se produjeron las interrupciones de suministros por un total de XX,XX MW y XX,XX MW, debido a la {infoDecision.EventoCTAF.EVENASUNTO}, equipo de titularidad de la empresa {infoDecision.Equipo.EMPRENOMB}, en adelante “Evento”.\n");
                document.Paragraphs[IndexAntecedentes1_1].Style = Estilo5;
                CharacterProperties CarPropAntecedentes1_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexAntecedentes1_1].Range);
                CarPropAntecedentes1_1.Style = Estilo6;
                document.EndUpdateCharacters(CarPropAntecedentes1_1);
                ParrafoDTO _Parrafo2 = new ParrafoDTO();
                _Parrafo2.NroParrafo = IndexAntecedentes1_1 + 1;
                _Parrafo2.RangeIniParrafo = IndexAntecedentes1_1 + 1;
                _Parrafo2.RangeFinParrafo = IndexAntecedentes1_1 + 1;
                ListaParrafos.Add(_Parrafo2);

                int IndexAntecedentes1_2 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosAntecedentes1_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosAntecedentes1_2 = document.Paragraphs.Insert(PosAntecedentes1_2);
                document.InsertText(PosAntecedentes1_2, "Con relación a los hechos antes descritos, el COES procedió a efectuar el análisis de asignación de responsabilidad, de acuerdo con el Procedimiento Técnico N° 40 “Procedimiento para la Aplicación del Numeral 3.5 de la NTCSE” (en adelante, “PR-40”).\n");
                document.Paragraphs[IndexAntecedentes1_2].Style = Estilo5;
                CharacterProperties CarPropAntecedentes1_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexAntecedentes1_2].Range);
                CarPropAntecedentes1_2.Style = Estilo6;
                document.EndUpdateCharacters(CarPropAntecedentes1_2);
                ParrafoDTO _Parrafo3 = new ParrafoDTO();
                _Parrafo3.NroParrafo = IndexAntecedentes1_2 + 1;
                _Parrafo3.RangeIniParrafo = IndexAntecedentes1_2 + 1;
                _Parrafo3.RangeFinParrafo = IndexAntecedentes1_2 + 1;
                ListaParrafos.Add(_Parrafo3);

                int IndexAntecedentes1_3 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosAntecedentes1_3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosAntecedentes1_3 = document.Paragraphs.Insert(PosAntecedentes1_3);
                document.InsertText(PosAntecedentes1_3, $"Conforme al numeral 8.2.7 de la Norma Técnica para la Coordinación de la Operación en Tiempo Real de los Sistemas Interconectados, aprobado por Resolución Directoral N° 014-2005-EM-DGE (en adelante, “NTCOTRSI”), las Empresas Involucradas {antecedentesEmpresasInformeFinal} remitieron al COES sus Informes Finales de Perturbaciones (“IFP/A”) así como sus cuadros de interrupción de suministros. Asimismo, sobre la base de tales Informes, el Coordinador del COES emitió el Informe Final de Perturbaciones del COES (“IFP/C”).\n");
                document.Paragraphs[IndexAntecedentes1_3].Style = Estilo5;
                CharacterProperties CarPropAntecedentes1_3 = document.BeginUpdateCharacters(document.Paragraphs[IndexAntecedentes1_3].Range);
                CarPropAntecedentes1_3.Style = Estilo6;
                document.EndUpdateCharacters(CarPropAntecedentes1_3);
                ParrafoDTO _Parrafo4 = new ParrafoDTO();
                _Parrafo4.NroParrafo = IndexAntecedentes1_3 + 1;
                _Parrafo4.RangeIniParrafo = IndexAntecedentes1_3 + 1;
                _Parrafo4.RangeFinParrafo = IndexAntecedentes1_3 + 1;
                ListaParrafos.Add(_Parrafo4);

                int IndexAntecedentes1_4 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosAntecedentes1_4 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosAntecedentes1_4 = document.Paragraphs.Insert(PosAntecedentes1_4);
                document.InsertText(PosAntecedentes1_4, $"En fecha {fechaEmisionInformeCTAF}, dentro del proceso de análisis de los eventos que ocasionan transgresiones a la Norma Técnica de Calidad de los Servicios Eléctricos, aprobada por Decreto Supremo N° 020-97-EM (en adelante, “NTCSE”), el Comité Técnico de Análisis de Fallas (en adelante, “CT-AF”) se reunió en forma {tipoReunion}  a fin de analizar los hechos ocurridos en el referido evento, teniendo como producto el Informe Técnico del CT-AF, elaborado dentro del plazo de 20 días hábiles otorgado por el Numeral 9.2.c del PR-40.\n");
                document.Paragraphs[IndexAntecedentes1_4].Style = Estilo5;
                CharacterProperties CarPropAntecedentes1_4 = document.BeginUpdateCharacters(document.Paragraphs[IndexAntecedentes1_4].Range);
                CarPropAntecedentes1_4.Style = Estilo6;
                document.EndUpdateCharacters(CarPropAntecedentes1_4);
                ParrafoDTO _Parrafo5 = new ParrafoDTO();
                _Parrafo5.NroParrafo = IndexAntecedentes1_4 + 1;
                _Parrafo5.RangeIniParrafo = IndexAntecedentes1_4 + 1;
                _Parrafo5.RangeFinParrafo = IndexAntecedentes1_4 + 1;
                ListaParrafos.Add(_Parrafo5);

                #region Nota al pie1
                DocumentPosition footnotePosition = document.CreatePosition(document.Paragraphs[IndexAntecedentes1_4].Range.End.ToInt() - 204);
                document.Footnotes.Insert(footnotePosition);
                SubDocument footnote = document.Footnotes[0].BeginUpdate();
                footnote.AppendText("De conformidad a lo establecido en el Numeral 9.2.b del PR-40, la reunión del CT-AF, en el presente caso, fue no presencial, dado que la interrupción de suministros fue de 55,692 MW y 52,429 MW, la cual no fue mayor a 152,650 MW (que representa el 2,0 % de la máxima demanda anual del SEIN registrada hasta el mes anterior del evento y es igual a 7632,531 MW registrada en enero 2024).");
                ParagraphProperties paragraphPropertiesfootnote1 = footnote.BeginUpdateParagraphs(footnote.Range);
                paragraphPropertiesfootnote1.Alignment = ParagraphAlignment.Justify;
                footnote.EndUpdateParagraphs(paragraphPropertiesfootnote1);
                CharacterProperties characterPropertiesfootnote1 = footnote.BeginUpdateCharacters(footnote.Range);
                characterPropertiesfootnote1.FontName = "Calibri Ligth";
                characterPropertiesfootnote1.FontSize = 9;
                footnote.EndUpdateCharacters(characterPropertiesfootnote1);
                document.Footnotes[0].EndUpdate(footnote);

                #endregion


                int IndexAntecedentes1_5 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosAntecedentes1_5 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosAntecedentes1_5 = document.Paragraphs.Insert(PosAntecedentes1_5);
                document.InsertText(PosAntecedentes1_5, $"La Subdirección de Evaluación de la Dirección de Operaciones del COES (“SEV”), con toda la información recibida, realizó un análisis detallado del origen de la falla y las implicancias derivadas de ella, así como los hechos vinculados a los eventos posteriores. Como parte del proceso, la SEV elaboró el Informe Técnico COES/D/DO/SEV/{codigoInformeTecnico} (“Informe Técnico”), de fecha {tempFechaInformTecnicoAntecedente}, con el análisis detallado sobre el Evento ocurrido el {tempAntecedentesFechasEventosSCO}, de conformidad a lo establecido en el Numeral 9.3.a del PR-40.\n");
                document.Paragraphs[IndexAntecedentes1_5].Style = Estilo5;
                CharacterProperties CarPropAntecedentes1_5 = document.BeginUpdateCharacters(document.Paragraphs[IndexAntecedentes1_5].Range);
                CarPropAntecedentes1_5.Style = Estilo6;
                document.EndUpdateCharacters(CarPropAntecedentes1_5);
                ParrafoDTO _Parrafo6 = new ParrafoDTO();
                _Parrafo6.NroParrafo = IndexAntecedentes1_5 + 1;
                _Parrafo6.RangeIniParrafo = IndexAntecedentes1_5 + 1;
                _Parrafo6.RangeFinParrafo = IndexAntecedentes1_5 + 1;
                ListaParrafos.Add(_Parrafo6);

                int IndexAntecedentes1_6 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosAntecedentes1_6 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosAntecedentes1_6 = document.Paragraphs.Insert(PosAntecedentes1_6);
                document.InsertText(PosAntecedentes1_6, "El Informe Técnico, que forma parte de la presente Decisión, desarrolla a detalle el análisis técnico de los hechos ocurridos en el Evento, sobre la base de las evidencias y pruebas recopiladas, así como la mejor información disponible, por lo que constituye el documento base para la identificación de las Empresas Involucradas en las transgresiones a los indicadores de calidad de la NTCSE.\n");
                document.Paragraphs[IndexAntecedentes1_6].Style = Estilo5;
                CharacterProperties CarPropAntecedentes1_6 = document.BeginUpdateCharacters(document.Paragraphs[IndexAntecedentes1_6].Range);
                CarPropAntecedentes1_6.Style = Estilo6;
                document.EndUpdateCharacters(CarPropAntecedentes1_6);
                ParrafoDTO _Parrafo7 = new ParrafoDTO();
                _Parrafo7.NroParrafo = IndexAntecedentes1_6 + 1;
                _Parrafo7.RangeIniParrafo = IndexAntecedentes1_6 + 1;
                _Parrafo7.RangeFinParrafo = IndexAntecedentes1_6 + 1;
                ListaParrafos.Add(_Parrafo7);

                int IndexFinAntecedentes1_6 = document.Sections[0].Paragraphs.ToList().Count();
                #endregion

                #region Análisis

                int IndexAnalisis = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosAnalisis = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosAnalisis = document.Paragraphs.Insert(PosAnalisis);
                document.InsertText(PosAnalisis, "ANÁLISIS\n");
                CharacterProperties CarPropAnalisis = document.BeginUpdateCharacters(document.Paragraphs[IndexAnalisis].Range);
                CarPropAnalisis.Style = Estilo3;
                document.EndUpdateCharacters(CarPropAnalisis);
                ParrafoDTO _Parrafo8 = new ParrafoDTO();
                _Parrafo8.NroParrafo = IndexAnalisis + 1;
                _Parrafo8.RangeIniParrafo = IndexAnalisis + 1;
                _Parrafo8.RangeFinParrafo = IndexAnalisis + 1;
                ListaParrafos.Add(_Parrafo8);

                int IndexFinNumAnalisis = document.Sections[0].Paragraphs.ToList().Count();

                int IndexIniSec2_x = document.Sections[0].Paragraphs.ToList().Count();

                #region Sección 2.1 : Competencia para pronunciamiento

                int IndexSecTitulo2_1 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecTitulo2_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecTitulo2_1 = document.Paragraphs.Insert(PosSecTitulo2_1);
                document.InsertText(PosSecTitulo2_1, "Competencia para emitir pronunciamiento\n");
                document.Paragraphs[IndexSecTitulo2_1].Style = Estilo5;
                CharacterProperties CarPropSecTitulo2_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecTitulo2_1].Range);
                CarPropSecTitulo2_1.Style = Estilo3;
                document.EndUpdateCharacters(CarPropSecTitulo2_1);
                ParrafoDTO _ParrafoCompetencia = new ParrafoDTO();
                _ParrafoCompetencia.NroParrafo = IndexSecTitulo2_1 + 1;
                _ParrafoCompetencia.RangeIniParrafo = IndexSecTitulo2_1 + 1;
                _ParrafoCompetencia.RangeFinParrafo = IndexSecTitulo2_1 + 1;
                ListaParrafos.Add(_ParrafoCompetencia);


                int IndexIniRange2_x = document.Sections[0].Paragraphs.ToList().Count();
                ParrafoDTO _ParrafoIniRange2_x = new ParrafoDTO();
                _ParrafoIniRange2_x.NroParrafo = IndexIniRange2_x;
                _ParrafoIniRange2_x.RangeIniParrafo = IndexIniRange2_x;

                int IndexSecTitulo2_1_Par1 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecTitulo2_1_Par1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecTitulo2_1_Par1 = document.Paragraphs.Insert(PosSecTitulo2_1_Par1);
                document.InsertText(PosSecTitulo2_1_Par1, "De acuerdo con el literal i) del Artículo 14º de la Ley para Asegurar el Desarrollo Eficiente de la Generación Eléctrica, aprobada por Ley N° 28832 y el numeral 3.5 de la NTCSE, en casos de transgresiones a la calidad del producto y/o suministro, el COES está obligado a asignar las responsabilidades que correspondan, así como a calcular las compensaciones derivadas de las mismas.\n");
                document.Paragraphs[IndexSecTitulo2_1_Par1].Style = Estilo10;
                CharacterProperties CarPropSecTitulo2_1_Par1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecTitulo2_1_Par1].Range);
                CarPropSecTitulo2_1_Par1.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSecTitulo2_1_Par1);

                int IndexSecTitulo2_1_Par2 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecTitulo2_1_Par2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecTitulo2_1_Par2 = document.Paragraphs.Insert(PosSecTitulo2_1_Par2);
                document.InsertText(PosSecTitulo2_1_Par2, "Asimismo, los numerales 5.1.6 y 11.2 del PR - 40 indican que el COES emitirá la Decisión de Asignación de Responsabilidad por Transgresión a la NTCSE y el cálculo preliminar de los Resarcimientos correspondientes, conforme a lo establecido en el inciso b) del numeral 3.5 de la NTCSE como se detalla a continuación:\n");
                document.Paragraphs[IndexSecTitulo2_1_Par2].Style = Estilo10;
                CharacterProperties CarPropSecTitulo2_1_Par2 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecTitulo2_1_Par2].Range);
                CarPropSecTitulo2_1_Par2.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSecTitulo2_1_Par2);

                #region Sección PR40

                int IndexSecTitulo2_1_ParPr40 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecTitulo2_1_ParPr40 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecTitulo2_1_ParPr40 = document.Paragraphs.Insert(PosSecTitulo2_1_ParPr40);
                document.InsertText(PosSecTitulo2_1_ParPr40, "PR-40\n");
                document.Paragraphs[IndexSecTitulo2_1_ParPr40].Style = Estilo10;
                CharacterProperties CarPropSecTitulo2_1_ParPr40 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecTitulo2_1_ParPr40].Range);
                CarPropSecTitulo2_1_ParPr40.Style = Estilo7;
                document.EndUpdateCharacters(CarPropSecTitulo2_1_ParPr40);

                int IndexFinRange2_x = document.Sections[0].Paragraphs.ToList().Count();
                _ParrafoIniRange2_x.RangeFinParrafo = IndexFinRange2_x;
                ListaParrafos.Add(_ParrafoIniRange2_x);

                int IndexSecPr40_1 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecPr40_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecPr40_1 = document.Paragraphs.Insert(PosSecPr40_1);
                document.InsertText(PosSecPr40_1, "Efectuar los cálculos de Resarcimientos correspondientes con la información que los Agentes alcancen y la mejor información disponible.”\n");
                document.Paragraphs[IndexSecPr40_1].Style = Estilo5;
                CharacterProperties CarPropSecPr40_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecPr40_1].Range);
                CarPropSecPr40_1.Style = Estilo8;
                document.EndUpdateCharacters(CarPropSecPr40_1);
                ParrafoDTO _ParrafoPr40 = new ParrafoDTO();
                _ParrafoPr40.NroParrafo = IndexSecPr40_1 + 1;
                _ParrafoPr40.RangeIniParrafo = IndexSecPr40_1 + 1;
                _ParrafoPr40.RangeFinParrafo = IndexSecPr40_1 + 1;
                ListaParrafos.Add(_ParrafoPr40);

                int IndexSecPr40_2 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecPr40_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecPr40_2 = document.Paragraphs.Insert(PosSecPr40_2);
                document.InsertText(PosSecPr40_2, "Calidad del Suministro”");
                document.Paragraphs[IndexSecPr40_2].Style = Estilo5;
                CharacterProperties CarPropSecPr40_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecPr40_2].Range);
                CarPropSecPr40_2.Style = Estilo8;
                document.EndUpdateCharacters(CarPropSecPr40_2);

                int IndexSecPr40_3 = document.Sections[0].Paragraphs.ToList().Count();
                ParrafoDTO ParrafoPr40_3 = new ParrafoDTO();
                ParrafoPr40_3.NroParrafo = IndexSecPr40_3;
                ParrafoPr40_3.RangeIniParrafo = IndexSecPr40_3;
                ParrafoPr40_3.RangeFinParrafo = IndexSecPr40_3;
                ListaParrafos.Add(ParrafoPr40_3);
                DocumentPosition PosSecPr40_3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecPr40_3 = document.Paragraphs.Insert(PosSecPr40_3);
                document.InsertText(PosSecPr40_3, "(…) Reporte 1 del COES: El COES emitirá la Decisión de Asignación de Responsabilidad por Transgresiones a la NTCSE y el cálculo preliminar de Resarcimientos, conforme a lo establecido en el inciso b) del Numeral 3.5 de la NTCSE. (…)”\n");
                document.Paragraphs[IndexSecPr40_3].Style = Estilo11;
                CharacterProperties CarPropSecPr40_3 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecPr40_3].Range);
                CarPropSecPr40_3.Style = Estilo8;
                document.EndUpdateCharacters(CarPropSecPr40_3);
                ParrafoDTO _ParrafoPr40_3 = new ParrafoDTO();
                _ParrafoPr40_3.NroParrafo = IndexSecPr40_3 + 1;
                _ParrafoPr40_3.RangeIniParrafo = IndexSecPr40_3 + 1;
                _ParrafoPr40_3.RangeFinParrafo = IndexSecPr40_3 + 1;
                ListaParrafos.Add(_ParrafoPr40_3);

                #endregion

                #region Sección NTSCE

                int IndexSecTitulo2_1_ParNtsce = document.Sections[0].Paragraphs.ToList().Count();
                ParrafoDTO _ParrafoNtsc1 = new ParrafoDTO();
                _ParrafoNtsc1.NroParrafo = IndexSecTitulo2_1_ParNtsce;
                _ParrafoNtsc1.RangeIniParrafo = IndexSecTitulo2_1_ParNtsce;
                _ParrafoNtsc1.RangeFinParrafo = IndexSecTitulo2_1_ParNtsce;
                ListaParrafos.Add(_ParrafoNtsc1);
                DocumentPosition PosSecTitulo2_1_ParNtsce = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecTitulo2_1_ParNtsce = document.Paragraphs.Insert(PosSecTitulo2_1_ParNtsce);
                document.InsertText(PosSecTitulo2_1_ParNtsce, "NTCSE\n");
                document.Paragraphs[IndexSecTitulo2_1_ParNtsce].Style = Estilo10;
                CharacterProperties CarPropSecTitulo2_1_ParNtsce = document.BeginUpdateCharacters(document.Paragraphs[IndexSecTitulo2_1_ParNtsce].Range);
                CarPropSecTitulo2_1_ParNtsce.Style = Estilo7;
                document.EndUpdateCharacters(CarPropSecTitulo2_1_ParNtsce);
                ParrafoDTO _ParrafoNtsc2 = new ParrafoDTO();
                _ParrafoNtsc2.NroParrafo = IndexSecTitulo2_1_ParNtsce + 1;
                _ParrafoNtsc2.RangeIniParrafo = IndexSecTitulo2_1_ParNtsce + 1;
                _ParrafoNtsc2.RangeFinParrafo = IndexSecTitulo2_1_ParNtsce + 1;
                ListaParrafos.Add(_ParrafoNtsc2);

                int IndexSecNtsce = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecNtsce = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecNtsce = document.Paragraphs.Insert(PosSecNtsce);
                document.InsertText(PosSecNtsce, "Dentro de los diez (10) días hábiles de recibido el Informe del Comité Técnico, el COES deberá emitir la decisión debidamente sustentada con un Informe Técnico y los fundamentos legales correspondientes. De ser el caso, la decisión contendrá la asignación de responsabilidades y el cálculo preliminar de las compensaciones correspondientes. El COES remitirá copia de su decisión a la Autoridad y a los Agentes involucrados.”\n");
                document.Paragraphs[IndexSecNtsce].Style = Estilo5;
                CharacterProperties CarPropSecNtsce = document.BeginUpdateCharacters(document.Paragraphs[IndexSecNtsce].Range);
                CarPropSecNtsce.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSecNtsce);
                ParrafoDTO _ParrafoNtsce = new ParrafoDTO();
                _ParrafoNtsce.NroParrafo = IndexSecNtsce + 1;
                _ParrafoNtsce.RangeIniParrafo = IndexSecNtsce + 1;
                _ParrafoNtsce.RangeFinParrafo = IndexSecNtsce + 1;
                ListaParrafos.Add(_ParrafoNtsce);


                #endregion

                #endregion

                #region Sección 2.2 : Asignación de responsabilidad

                int IndexSecTitulo2_2 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecTitulo2_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecTitulo2_2 = document.Paragraphs.Insert(PosSecTitulo2_2);
                document.InsertText(PosSecTitulo2_2, "Asignación de Responsabilidad\n");
                document.Paragraphs[IndexSecTitulo2_2].Style = Estilo5;
                CharacterProperties CarPropSecTitulo2_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecTitulo2_2].Range);
                CarPropSecTitulo2_2.Style = Estilo3;
                document.EndUpdateCharacters(CarPropSecTitulo2_2);
                ParrafoDTO _ParrafoAsignacionResp = new ParrafoDTO();
                _ParrafoAsignacionResp.NroParrafo = IndexSecTitulo2_2 + 1;
                _ParrafoAsignacionResp.RangeIniParrafo = IndexSecTitulo2_2 + 1;
                _ParrafoAsignacionResp.RangeFinParrafo = IndexSecTitulo2_2 + 1;
                ListaParrafos.Add(_ParrafoAsignacionResp);

                int IndexSec2_2_1 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec2_2_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2_2_1 = document.Paragraphs.Insert(PosSec2_2_1);
                document.InsertText(PosSec2_2_1, "De conformidad con lo dispuesto en el literal b) del Artículo 31º de la LCE , los concesionarios de generación, transmisión y distribución están obligados a conservar y mantener sus instalaciones en condiciones adecuadas para su operación eficiente. En concordancia con ello, el numeral 1.4.3 de la NTCOTRSI establece que son los propios Agentes los responsables de la seguridad de las personas y de sus instalaciones.\n");
                document.Paragraphs[IndexSec2_2_1].Style = Estilo5;
                CharacterProperties CarPropSec2_2_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec2_2_1].Range);
                CarPropSec2_2_1.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSec2_2_1);
                ParrafoDTO _ParrafoCarPropSec2_2_1 = new ParrafoDTO();
                _ParrafoCarPropSec2_2_1.NroParrafo = IndexSec2_2_1 + 1;
                _ParrafoCarPropSec2_2_1.RangeIniParrafo = IndexSec2_2_1 + 1;
                _ParrafoCarPropSec2_2_1.RangeFinParrafo = IndexSec2_2_1 + 1;
                ListaParrafos.Add(_ParrafoCarPropSec2_2_1);

                #region Nota al pie1
                DocumentPosition footnotePosition2 = document.CreatePosition(document.Paragraphs[IndexSec2_2_1].Range.Start.ToInt() + 76);
                document.Footnotes.Insert(footnotePosition2);

                SubDocument footnote2 = document.Footnotes[1].BeginUpdate();
                footnote2.AppendText("Decreto Ley N° 25844, Ley de Concesiones Eléctricas.");
                CharacterProperties characterPropertiesfootnote2 = footnote2.BeginUpdateCharacters(footnote2.Range);
                characterPropertiesfootnote2.FontName = "Calibri Ligth";
                characterPropertiesfootnote2.FontSize = 9;
                characterPropertiesfootnote2.Italic = true;
                footnote2.EndUpdateCharacters(characterPropertiesfootnote2);
                document.Footnotes[1].EndUpdate(footnote2);

                #endregion

                int IndexSec2_2_2 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec2_2_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2_2_2 = document.Paragraphs.Insert(PosSec2_2_2);
                document.InsertText(PosSec2_2_2, "Conforme a lo establecido en el numeral 6.1.2 de la NTCSE, se considera interrupción a toda falta de suministro eléctrico en un punto de entrega, cuya duración sea igual o mayor a tres (03) minutos.\n");
                document.Paragraphs[IndexSec2_2_2].Style = Estilo5;
                CharacterProperties CarPropSec2_2_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec2_2_2].Range);
                CarPropSec2_2_2.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSec2_2_2);
                ParrafoDTO _ParrafoCarPropSec2_2_2 = new ParrafoDTO();
                _ParrafoCarPropSec2_2_2.NroParrafo = IndexSec2_2_2 + 1;
                _ParrafoCarPropSec2_2_2.RangeIniParrafo = IndexSec2_2_2 + 1;
                _ParrafoCarPropSec2_2_2.RangeFinParrafo = IndexSec2_2_2 + 1;
                ListaParrafos.Add(_ParrafoCarPropSec2_2_2);

                var tempEventosSCO = infoDecision.EventosSCO.OrderBy(x => x.EVENINI).ToList();

                for (int i = 0; i < tempEventosSCO.Count; i++)
                {
                    var tempEventoSCO = tempEventosSCO[i];
                    int IndexSec2_2_x = document.Sections[0].Paragraphs.ToList().Count();
                    DocumentPosition PosSec2_2_x = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2_2_x = document.Paragraphs.Insert(PosSec2_2_x);
                    document.InsertText(PosSec2_2_x, $"En el evento del {tempEventoSCO.EVENINI.Value.ToString($"dd.MM.yyyy")} a las {tempEventoSCO.EVENINI.Value.ToString($"HH:mm:ss")} h, debido a la {infoDecision.EventoCTAF.EVENASUNTO}, de titularidad de la empresa {infoDecision.Equipo.EMPRENOMB}, por falla monofásica en la fase “R” debido a descargas atmosféricas, se originó la interrupción de suministro de las SS.EE. Aguaytía, Parque Industrial, Yarinacocha y Pucallpa EUC con un total de XX,XX MW.\n");
                    document.Paragraphs[IndexSec2_2_x].Style = Estilo5;
                    CharacterProperties CarPropSec2_2_x = document.BeginUpdateCharacters(document.Paragraphs[IndexSec2_2_x].Range);
                    CarPropSec2_2_x.Style = Estilo6;
                    document.EndUpdateCharacters(CarPropSec2_2_x);
                    ParrafoDTO _ParrafoCarPropSec2_2_x = new ParrafoDTO();
                    _ParrafoCarPropSec2_2_x.NroParrafo = IndexSec2_2_x + 1;
                    _ParrafoCarPropSec2_2_x.RangeIniParrafo = IndexSec2_2_x + 1;
                    _ParrafoCarPropSec2_2_x.RangeFinParrafo = IndexSec2_2_x + 1;
                    ListaParrafos.Add(_ParrafoCarPropSec2_2_x);
                }

                int IndexSec2_2_x_x = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec2_2_x_x = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2_2_x_x = document.Paragraphs.Insert(PosSec2_2_x_x);
                document.InsertText(PosSec2_2_x_x, "En ese sentido, al amparo de la normativa descrita en la presente Decisión y de acuerdo con el análisis del Informe Técnico, resulta responsable la empresa XXXXX por las referidas interrupciones de suministro.\n");
                document.Paragraphs[IndexSec2_2_x_x].Style = Estilo5;
                CharacterProperties CarPropSec2_2_x_x = document.BeginUpdateCharacters(document.Paragraphs[IndexSec2_2_x_x].Range);
                CarPropSec2_2_x_x.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSec2_2_x_x);
                ParrafoDTO _ParrafoCarPropSec2_2_x_x = new ParrafoDTO();
                _ParrafoCarPropSec2_2_x_x.NroParrafo = IndexSec2_2_x_x + 1;
                _ParrafoCarPropSec2_2_x_x.RangeIniParrafo = IndexSec2_2_x_x + 1;
                _ParrafoCarPropSec2_2_x_x.RangeFinParrafo = IndexSec2_2_x_x + 1;
                ListaParrafos.Add(_ParrafoCarPropSec2_2_x_x);

                int IndexFinSec2_2_x_x = document.Sections[0].Paragraphs.ToList().Count();


                #endregion

                #region Sección 2.3: Resarcimientos

                int IndexSecTitulo2_3 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSecTitulo2_3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecTitulo2_3 = document.Paragraphs.Insert(PosSecTitulo2_3);
                document.InsertText(PosSecTitulo2_3, "Resarcimientos\n");
                document.Paragraphs[IndexSecTitulo2_3].Style = Estilo5;
                CharacterProperties CarPropSecTitulo2_3 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecTitulo2_3].Range);
                CarPropSecTitulo2_3.Style = Estilo3;
                document.EndUpdateCharacters(CarPropSecTitulo2_3);
                ParrafoDTO _ParrafoResarcimiento = new ParrafoDTO();
                _ParrafoResarcimiento.NroParrafo = IndexSecTitulo2_3 + 1;
                _ParrafoResarcimiento.RangeIniParrafo = IndexSecTitulo2_3 + 1;
                _ParrafoResarcimiento.RangeFinParrafo = IndexSecTitulo2_3 + 1;
                ListaParrafos.Add(_ParrafoResarcimiento);

                int IndexSec2_3_1 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec2_3_1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2_3_1 = document.Paragraphs.Insert(PosSec2_3_1);
                document.InsertText(PosSec2_3_1, "El literal b) del Numeral 3.5 de la NTCSE indica que la decisión contendrá, de ser el caso, la asignación de responsabilidades y el cálculo preliminar de compensaciones correspondientes.\n");
                document.Paragraphs[IndexSec2_3_1].Style = Estilo5;
                CharacterProperties CarPropSec2_3_1 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec2_3_1].Range);
                CarPropSec2_3_1.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSec2_3_1);
                ParrafoDTO _ParrafoSec2_3_1 = new ParrafoDTO();
                _ParrafoSec2_3_1.NroParrafo = IndexSec2_3_1 + 1;
                _ParrafoSec2_3_1.RangeIniParrafo = IndexSec2_3_1 + 1;
                _ParrafoSec2_3_1.RangeFinParrafo = IndexSec2_3_1 + 1;
                ListaParrafos.Add(_ParrafoSec2_3_1);

                int IndexSec2_3_2 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec2_3_2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2_3_2 = document.Paragraphs.Insert(PosSec2_3_2);
                document.InsertText(PosSec2_3_2, "Asimismo, el Numeral 4.18 del PR-40 establece que los Resarcimientos son el “Monto a pagar por el (los) responsable (s) a los Suministradores como consecuencia de la asignación de responsabilidad efectuada por el COES, correspondiente a las Compensaciones pagadas conforme a lo señalado en la NTCSE y su Base Metodológica.”\n");
                document.Paragraphs[IndexSec2_3_2].Style = Estilo5;
                CharacterProperties CarPropSec2_3_2 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec2_3_2].Range);
                CarPropSec2_3_2.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSec2_3_2);
                ParrafoDTO _ParrafoSec2_3_2 = new ParrafoDTO();
                _ParrafoSec2_3_2.NroParrafo = IndexSec2_3_2 + 1;
                _ParrafoSec2_3_2.RangeIniParrafo = IndexSec2_3_2 + 1;
                _ParrafoSec2_3_2.RangeFinParrafo = IndexSec2_3_2 + 1;
                ListaParrafos.Add(_ParrafoSec2_3_2);

                int IndexSec2_3_3 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec2_3_3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2_3_3 = document.Paragraphs.Insert(PosSec2_3_3);
                document.InsertText(PosSec2_3_3, "Por su parte, los numerales 5.1.6 y 11.2 del PR-40 indican que el COES emitirá la Decisión de Asignación de Responsabilidad por Transgresión a la NTCSE y el cálculo preliminar de los Resarcimientos correspondientes, conforme a lo establecido en el inciso b) del Numeral 3.5 de la NTCSE.\n");
                document.Paragraphs[IndexSec2_3_3].Style = Estilo5;
                CharacterProperties CarPropSec2_3_3 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec2_3_3].Range);
                CarPropSec2_3_3.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSec2_3_3);
                ParrafoDTO _ParrafoSec2_3_3 = new ParrafoDTO();
                _ParrafoSec2_3_3.NroParrafo = IndexSec2_3_3 + 1;
                _ParrafoSec2_3_3.RangeIniParrafo = IndexSec2_3_3 + 1;
                _ParrafoSec2_3_3.RangeFinParrafo = IndexSec2_3_3 + 1;
                ListaParrafos.Add(_ParrafoSec2_3_3);

                int IndexSec2_3_4 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosSec2_3_4 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec2_3_4 = document.Paragraphs.Insert(PosSec2_3_4);
                document.InsertText(PosSec2_3_4, "En cumplimiento de lo establecido en la normativa precedente, se incluye el cálculo preliminar de resarcimientos, el que se muestra en el Anexo de esta Decisión.\n");
                document.Paragraphs[IndexSec2_3_4].Style = Estilo5;
                CharacterProperties CarPropSec2_3_4 = document.BeginUpdateCharacters(document.Paragraphs[IndexSec2_3_4].Range);
                CarPropSec2_3_4.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSec2_3_4);
                ParrafoDTO _ParrafoSec2_3_4 = new ParrafoDTO();
                _ParrafoSec2_3_4.NroParrafo = IndexSec2_3_4 + 1;
                _ParrafoSec2_3_4.RangeIniParrafo = IndexSec2_3_4 + 1;
                _ParrafoSec2_3_4.RangeFinParrafo = IndexSec2_3_4 + 1;
                ListaParrafos.Add(_ParrafoSec2_3_4);

                int IndexFinSec2_3_x = document.Sections[0].Paragraphs.ToList().Count();

                #endregion

                int IndexSecNext_2_3 = document.Sections[0].Paragraphs.ToList().Count();
                ParrafoDTO ParrafoSecNext_2_3 = new ParrafoDTO();
                ParrafoSecNext_2_3.NroParrafo = IndexSecNext_2_3;
                ParrafoSecNext_2_3.RangeIniParrafo = IndexSecNext_2_3;
                ParrafoSecNext_2_3.RangeFinParrafo = IndexSecNext_2_3;
                ListaParrafos.Add(ParrafoSecNext_2_3);

                DocumentPosition PosSecNext_2_3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSecNext_2_3 = document.Paragraphs.Insert(PosSecNext_2_3);
                document.InsertText(PosSecNext_2_3, "Sobre la base del análisis efectuado en los numerales precedentes y de conformidad al Informe Técnico que forma parte integrante de la presente Decisión, la Dirección Ejecutiva del COES decide lo siguiente:\n");
                document.Paragraphs[IndexSecNext_2_3].Style = Estilo12;
                CharacterProperties CarPropSecNext_2_3 = document.BeginUpdateCharacters(document.Paragraphs[IndexSecNext_2_3].Range);
                CarPropSecNext_2_3.Style = Estilo6;
                document.EndUpdateCharacters(CarPropSecNext_2_3);
                ParrafoDTO _ParrafoSecNext_2_3 = new ParrafoDTO();
                _ParrafoSecNext_2_3.NroParrafo = IndexSecNext_2_3 + 1;
                _ParrafoSecNext_2_3.RangeIniParrafo = IndexSecNext_2_3 + 1;
                _ParrafoSecNext_2_3.RangeFinParrafo = IndexSecNext_2_3 + 1;
                ListaParrafos.Add(_ParrafoSecNext_2_3);

               
                int IndexFinSec2_x = document.Sections[0].Paragraphs.ToList().Count();


                #endregion

                #region Decide

                int IndexDecide = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosDecide = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParPosDecide = document.Paragraphs.Insert(PosDecide);
                document.InsertText(PosDecide, "DECIDE:\n");
                CharacterProperties CarPropDecide = document.BeginUpdateCharacters(document.Paragraphs[IndexDecide].Range);
                CarPropDecide.Style = Estilo3;
                document.EndUpdateCharacters(CarPropDecide);
                ParrafoDTO _ParrafoDecide = new ParrafoDTO();
                _ParrafoDecide.NroParrafo = IndexDecide + 1;
                _ParrafoDecide.RangeIniParrafo = IndexDecide + 1;
                _ParrafoDecide.RangeFinParrafo = IndexDecide + 1;
                ListaParrafos.Add(_ParrafoDecide);

                int IndexDecide1 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosDecide1 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParDecide1 = document.Paragraphs.Insert(PosDecide1);
                document.InsertText(PosDecide1, "PRIMERO: Asignar responsabilidad a la empresa XXXXX por las transgresiones a la NTCSE, en lo referente a interrupción de suministros, que se muestran a continuación.\n");
                document.Paragraphs[IndexDecide1].Style = Estilo12;
                CharacterProperties CarPropDecide1 = document.BeginUpdateCharacters(document.Paragraphs[IndexDecide1].Range);
                CarPropDecide1.Style = Estilo6;
                document.EndUpdateCharacters(CarPropDecide1);
                DocumentRange FormatoRangoDecide = document.CreateRange(document.Paragraphs[IndexDecide1].Range.Start, 9);
                CharacterProperties CarPropRangoDecide = document.BeginUpdateCharacters(FormatoRangoDecide);
                CarPropRangoDecide.Bold = true;
                document.EndUpdateCharacters(CarPropRangoDecide);

                ParrafoDTO _ParrafoDecide1 = new ParrafoDTO();
                _ParrafoDecide1.NroParrafo = IndexDecide1 + 1;
                _ParrafoDecide1.RangeIniParrafo = IndexDecide1 + 1;
                _ParrafoDecide1.RangeFinParrafo = IndexDecide1 + 1;
                ListaParrafos.Add(_ParrafoDecide1);

                var codigosEventosDecision = infoDecision.TablaDecision.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();
                List<EventoDTO> tempEventosDecisionSCOOrdenados = new List<EventoDTO>();

                foreach (var item in codigosEventosDecision)
                {
                    var tempEventoSCO = infoDecision.EventosSCO.FirstOrDefault(x => x.EVENCODI.ToString() == item.codigo);

                    if (tempEventoSCO != null)
                    {
                        tempEventosDecisionSCOOrdenados.Add(tempEventoSCO);
                    }
                }

                tempEventosDecisionSCOOrdenados = tempEventosDecisionSCOOrdenados.OrderBy(x => x.EVENINI).ToList();

                if (codigosEventosDecision.Any())
                {
                    Table secuencia_4;
                    var registrosTotales = infoDecision.TablaDecision.ListaRegistros;

                    for (int i = 0; i < tempEventosDecisionSCOOrdenados.Count; i++)
                    {
                        var item = tempEventosDecisionSCOOrdenados[i];

                        var registros = registrosTotales.Where(x => x.codigo == item.EVENCODI.ToString() || x.codigo == null).OrderByDescending(c => c.codigo).ToList();

                        string eventFecha = string.Empty;

                        if (item.EVENINI.HasValue)
                        {
                            eventFecha = item.EVENINI.Value.ToString("dd.MM.yyyy");
                        }

                        int IndexTitTablaSum = document.Paragraphs.ToList().Count();

                        DocumentPosition PosTitTablaSum = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSecCab7Evento = document.Paragraphs.Insert(PosTitTablaSum);
                        document.InsertText(PosTitTablaSum, $"Evento del {eventFecha}");
                        document.Paragraphs[IndexTitTablaSum - 1].Style = Estilo9;
                        CharacterProperties CarPropTitTablaSum = document.BeginUpdateCharacters(document.Paragraphs[IndexTitTablaSum - 1].Range);
                        CarPropTitTablaSum.Style = Estilo7;
                        document.EndUpdateCharacters(CarPropTitTablaSum);

                        var numFilas = registros.Count + 1;
                        var numColumnas = infoDecision.TablaDecision.CabeceraColumnas.Count;

                        DocumentPosition PostablaSuministro = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Table tablaSuministro = document.Tables.Create(PostablaSuministro, numFilas, numColumnas);
                        tablaSuministro.BeginUpdate();

                        #region Configuración Tabla
                        tablaSuministro.Style = EstiloTabla1;
                        tablaSuministro.PreferredWidthType = WidthType.Fixed;
                        tablaSuministro.PreferredWidth = Units.CentimetersToDocumentsF((float)16.4);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSuministro[0, 0];
                        Cel00.PreferredWidthType = WidthType.Fixed;
                        Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)1.21);
                        Cel00.HeightType = HeightType.Exact;
                        Cel00.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel00.BackgroundColor = Color.LightGray;
                        Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel00.TopPadding = 0;
                        Cel00.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSuministro[0, 0].Range);
                        ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel00.SpacingAfter = 0;
                        ParagraphPropertiesCel00.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                        CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaSuministro[0, 0].Range);
                        CharacterPropertiesCel00.Bold = true;
                        CharacterPropertiesCel00.Underline = UnderlineType.None;
                        CharacterPropertiesCel00.FontSize = 8;
                        document.EndUpdateCharacters(CharacterPropertiesCel00);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSuministro[0, 1];
                        Cel01.PreferredWidthType = WidthType.Fixed;
                        Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)8.24);
                        Cel01.HeightType = HeightType.Exact;
                        Cel01.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel01.BackgroundColor = Color.LightGray;
                        Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel01.TopPadding = 0;
                        Cel01.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSuministro[0, 1].Range);
                        ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel01.SpacingAfter = 0;
                        ParagraphPropertiesCel01.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                        CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaSuministro[0, 1].Range);
                        CharacterPropertiesCel01.Bold = true;
                        CharacterPropertiesCel01.FontSize = 8;
                        CharacterPropertiesCel01.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel01);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSuministro[0, 2];
                        Cel02.PreferredWidthType = WidthType.Fixed;
                        Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)1.59);
                        Cel02.HeightType = HeightType.Exact;
                        Cel02.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel02.BackgroundColor = Color.LightGray;
                        Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel02.TopPadding = 0;
                        Cel02.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSuministro[0, 2].Range);
                        ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel02.SpacingAfter = 0;
                        ParagraphPropertiesCel02.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                        CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaSuministro[0, 2].Range);
                        CharacterPropertiesCel02.Bold = true;
                        CharacterPropertiesCel02.FontSize = 8;
                        CharacterPropertiesCel02.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel02);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSuministro[0, 3];
                        Cel03.PreferredWidthType = WidthType.Fixed;
                        Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)1.64);
                        Cel03.HeightType = HeightType.Exact;
                        Cel03.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel03.BackgroundColor = Color.LightGray;
                        Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel03.TopPadding = 0;
                        Cel03.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSuministro[0, 3].Range);
                        ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel03.SpacingAfter = 0;
                        ParagraphPropertiesCel03.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                        CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaSuministro[0, 3].Range);
                        CharacterPropertiesCel03.Bold = true;
                        CharacterPropertiesCel03.FontSize = 8;
                        CharacterPropertiesCel03.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel03);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaSuministro[0, 4];
                        Cel04.PreferredWidthType = WidthType.Fixed;
                        Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)1.64);
                        Cel04.HeightType = HeightType.Exact;
                        Cel04.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel04.BackgroundColor = Color.LightGray;
                        Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel04.TopPadding = 0;
                        Cel04.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaSuministro[0, 4].Range);
                        ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel04.SpacingAfter = 0;
                        ParagraphPropertiesCel04.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                        CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaSuministro[0, 4].Range);
                        CharacterPropertiesCel04.Bold = true;
                        CharacterPropertiesCel04.FontSize = 8;
                        CharacterPropertiesCel04.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel04);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaSuministro[0, 5];
                        Cel05.PreferredWidthType = WidthType.Fixed;
                        Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)1.79);
                        Cel05.HeightType = HeightType.Exact;
                        Cel05.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel05.BackgroundColor = Color.LightGray;
                        Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel05.TopPadding = 0;
                        Cel05.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaSuministro[0, 5].Range);
                        ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel05.SpacingAfter = 0;
                        ParagraphPropertiesCel05.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                        CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaSuministro[0, 5].Range);
                        CharacterPropertiesCel05.Bold = true;
                        CharacterPropertiesCel05.FontSize = 8;
                        CharacterPropertiesCel05.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel05);

                        tablaSuministro.Rows[0].RepeatAsHeaderRow = true;

                        #endregion

                        #region Datos Tabla

                        document.InsertText(tablaSuministro[0, 0].Range.Start, "N°");
                        document.InsertText(tablaSuministro[0, 1].Range.Start, "SUMINISTRO");
                        document.InsertText(tablaSuministro[0, 2].Range.Start, "POTENCIA (MW)");
                        //document.InsertText(tablaSuministro[0, 3].Range.Start, "INICIO (HH:MM:SS)");
                        //document.InsertText(tablaSuministro[0, 4].Range.Start, "FINAL (HH:MM:SS)");
                        document.InsertText(tablaSuministro[0, 5].Range.Start, "DURACIÓN (MIN)");

                        NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                        nfi.NumberGroupSeparator = " ";
                        nfi.NumberDecimalDigits = 3;
                        nfi.NumberDecimalSeparator = ",";
                        int contadorfilas = 1;
                        bool esFecha3 = false, esFecha4 = false;

                        for (int x = 0; x < registros.Count; x++)
                        {
                            document.InsertText(tablaSuministro[x + 1, 0].Range.Start, contadorfilas.ToString());
                            for (int y = 0; y < registros[x].ListaCelda.Count; y++)
                            {
                                if(y > 0)
                                {
                                    if (registros[x].ListaCelda[y].EsNumero)
                                    {
                                        if (registros[x].ListaCelda[y].Valor != null)
                                        {
                                            if (registros[x].ListaCelda[y].DigitosParteDecimal > 0)
                                            {
                                                int numDigitos = registros[x].ListaCelda[y].DigitosParteDecimal;
                                                if (registros[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                                {
                                                    numDigitos = MathHelper.GetDecimalPlaces(registros[x].ListaCelda[y].Valor.Value);
                                                    numDigitos = (numDigitos > registros[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registros[x].ListaCelda[y].DigitosParteDecimal;
                                                }

                                                if (registros[x].ListaCelda[y].EsNumeroTruncado)
                                                {
                                                    registros[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                }
                                                if (registros[x].ListaCelda[y].EsNumeroRedondeado)
                                                {
                                                    registros[x].ListaCelda[y].Valor = MathHelper.Round(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                }

                                                string strParteDecimal = string.Empty;
                                                for (int j = 1; j <= numDigitos; j++) strParteDecimal += "0";
                                                string strFormat = "#,##0." + strParteDecimal;

                                                nfi.NumberDecimalDigits = numDigitos;
                                            }
                                            else
                                            {
                                                string strFormat = "#,##0";

                                                nfi.NumberDecimalDigits = 0;
                                            }
                                        }
                                        document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Valor == null ? "" : registros[x].ListaCelda[y].Valor.Value.ToString("N", nfi));
                                    }
                                    else
                                    {
                                        registros[x].ListaCelda[y].Texto = (registros[x].ListaCelda[y].Texto != null && infoDecision.TablaDecision.EsMayuscula) ? registros[x].ListaCelda[y].Texto.ToUpper() : registros[x].ListaCelda[y].Texto;

                                        if (registros[x].ListaCelda[y].EsTextoFecha)
                                        {
                                            if (y == 3 && registros[x].ListaCelda[y].TieneFormatoFechaExcel)
                                                esFecha3 = true;
                                            else if (y == 4 && registros[x].ListaCelda[y].TieneFormatoFechaExcel)
                                                esFecha4 = true;

                                            string hhmmss = registros[x].ListaCelda[y].Texto != null && registros[x].ListaCelda[y].Texto.Length > 8 ? registros[x].ListaCelda[y].Texto.Substring(registros[x].ListaCelda[y].Texto.Length - 8, 8) : string.Empty;
                                            string ddmmyyy = registros[x].ListaCelda[y].Texto != null && registros[x].ListaCelda[y].Texto.Length > 8 ? registros[x].ListaCelda[y].Texto.Substring(0, 10).Replace("/", ".") : string.Empty;
                                            document.InsertText(tablaSuministro[x + 1, y].Range.Start, hhmmss + (registros[x].ListaCelda[y].TieneFormatoFechaExcel ? "\n" + ddmmyyy : string.Empty));
                                        }
                                        else
                                            document.InsertText(tablaSuministro[x + 1, y].Range.Start, registros[x].ListaCelda[y].Texto == null ? "" : registros[x].ListaCelda[y].Texto);
                                    }
                                        
                                }
                                DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSuministro[x + 1, y];
                                Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                //Celi0.Height = Units.CentimetersToDocumentsF((float)0.71);
                                DocumentRange RangeCeli0 = Celi0.Range;
                                CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                CharacterPropertiesRangeCeli0.FontSize = 8;
                                CharacterPropertiesRangeCeli0.Bold = false;
                                CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSuministro[x + 1, y].Range);
                                ParagraphPropertiesCeli0.SpacingAfter = 0;
                                ParagraphPropertiesCeli0.SpacingBefore = 0;
                                if (y != 1)
                                    ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                else
                                    ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Left;
                                document.EndUpdateParagraphs(ParagraphPropertiesCeli0);
                            }

                            contadorfilas++;
                        }
                        if(esFecha3)
                            document.InsertText(tablaSuministro[0, 3].Range.Start, "INICIO (HH:MM:SS) DD.MM.YYYY");
                        else
                            document.InsertText(tablaSuministro[0, 3].Range.Start, "INICIO (HH:MM:SS)");

                        if(esFecha4)
                            document.InsertText(tablaSuministro[0, 4].Range.Start, "FINAL (HH:MM:SS) DD.MM.YYYY");
                        else
                            document.InsertText(tablaSuministro[0, 4].Range.Start, "FINAL (HH:MM:SS)");

                        #endregion
                    }
                }
                else
                {
                    int IndexSinDecide = document.Sections[0].Paragraphs.ToList().Count();
                    DocumentPosition PosSinDecide = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParSinDecide = document.Paragraphs.Insert(PosSinDecide);
                    document.InsertText(PosSinDecide, "No registrado.\n");
                    document.Paragraphs[IndexSinDecide].Style = Estilo12;
                    CharacterProperties CarPropSinDecide = document.BeginUpdateCharacters(document.Paragraphs[IndexSinDecide].Range);
                    CarPropSinDecide.Style = Estilo6;
                    document.EndUpdateCharacters(CarPropSinDecide);
                }

                int IndexDecide2 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosDecide2 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParDecide2 = document.Paragraphs.Insert(PosDecide2);
                document.InsertText(PosDecide2, "SEGUNDO:" + $" Incorporar el Informe Técnico COES/D/DO/SEV/{codigoInformeTecnico}, como parte integrante de la presente Decisión.");
                document.Paragraphs[IndexDecide2].Style = Estilo12;
                CharacterProperties CarPropDecide2 = document.BeginUpdateCharacters(document.Paragraphs[IndexDecide2].Range);
                CarPropDecide2.Style = Estilo6;
                document.EndUpdateCharacters(CarPropDecide2);
                DocumentRange FormatoRangoDecide2 = document.CreateRange(document.Paragraphs[IndexDecide2].Range.Start, 9);
                CharacterProperties CarPropRangoDecide2 = document.BeginUpdateCharacters(FormatoRangoDecide2);
                CarPropRangoDecide2.Bold = true;
                document.EndUpdateCharacters(CarPropRangoDecide2);

                int IndexDecide3 = document.Sections[0].Paragraphs.ToList().Count();
                DocumentPosition PosDecide3 = document.CreatePosition(document.Sections[0].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParDecide3 = document.Paragraphs.Insert(PosDecide3);
                document.InsertText(PosDecide3, "\nNotifíquese.");
                document.Paragraphs[IndexDecide3 + 1].Style = Estilo12;
                CharacterProperties CarPropDecide3 = document.BeginUpdateCharacters(document.Paragraphs[IndexDecide3 + 1].Range);
                CarPropDecide3.Style = Estilo6;
                document.EndUpdateCharacters(CarPropDecide3);

                #endregion

                #region Anexo

                int IndexTituloAnexo = document.Sections[1].Paragraphs.ToList().Count();
                DocumentPosition PosTituloAnexo = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo = document.Paragraphs.Insert(PosTituloAnexo);
                document.InsertText(PosTituloAnexo, "Anexo\n");
                document.Sections[1].Paragraphs[IndexTituloAnexo].Style = Estilo13;
                CharacterProperties CharacterPropertiesAnexo = document.BeginUpdateCharacters(document.Sections[1].Paragraphs[IndexTituloAnexo].Range);
                CharacterPropertiesAnexo.Style = Estilo14;
                document.EndUpdateCharacters(CharacterPropertiesAnexo);
                document.Sections[1].Paragraphs[IndexTituloAnexo + 1].Style = Estilo5;

                int IndexTituloAnexo2 = document.Sections[1].Paragraphs.ToList().Count();
                DocumentPosition PosTituloAnexo2 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo2 = document.Paragraphs.Insert(PosTituloAnexo2);
                document.InsertText(PosTituloAnexo2, "CÁLCULO PRELIMINAR DE RESARCIMIENTO\n");
                document.Sections[1].Paragraphs[IndexTituloAnexo2].Style = Estilo2;
                CharacterProperties CharacterPropertiesAnexo2 = document.BeginUpdateCharacters(document.Sections[1].Paragraphs[IndexTituloAnexo2].Range);
                CharacterPropertiesAnexo2.Style = Estilo14;
                document.EndUpdateCharacters(CharacterPropertiesAnexo2);

                document.Sections[1].Paragraphs[IndexTituloAnexo2 + 1].Style = Estilo5;

                int IndexTituloAnexo3 = document.Sections[1].Paragraphs.ToList().Count();
                DocumentPosition PosTituloAnexo3 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo3 = document.Paragraphs.Insert(PosTituloAnexo3);
                document.InsertText(PosTituloAnexo3, "De acuerdo con el numeral 11.2 del PR-40, se adjunta el cálculo de Resarcimiento, el cual es de carácter preliminar y que debe ser validado por las empresas afectadas y sus respectivos suministradores.\n");
                document.Sections[1].Paragraphs[IndexTituloAnexo3].Style = Estilo15;

                int IndexTituloAnexo4 = document.Sections[1].Paragraphs.ToList().Count();
                DocumentPosition PosTituloAnexo4 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo4 = document.Paragraphs.Insert(PosTituloAnexo4);
                document.InsertText(PosTituloAnexo4, "La fórmula aplicada en este caso es la N°14 de la NTCSE:\n");
                document.Sections[1].Paragraphs[IndexTituloAnexo4].Style = Estilo5;

                int IndexTituloAnexo5 = document.Sections[1].Paragraphs.ToList().Count();
                DocumentPosition PosTituloAnexo5 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo5 = document.Paragraphs.Insert(PosTituloAnexo5);
                document.InsertText(PosTituloAnexo5, "Compensaciones por Interrupciones = e. E. ENS\n");
                document.Sections[1].Paragraphs[IndexTituloAnexo5].Style = Estilo16;
                CharacterProperties CharacterPropertiesAnexo5 = document.BeginUpdateCharacters(document.Sections[1].Paragraphs[IndexTituloAnexo5].Range);
                CharacterPropertiesAnexo5.Bold = true;
                CharacterPropertiesAnexo5.Italic = true;
                document.EndUpdateCharacters(CharacterPropertiesAnexo5);

                int IndexTituloAnexo6 = document.Sections[1].Paragraphs.ToList().Count();
                DocumentPosition PosTituloAnexo6 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo6 = document.Paragraphs.Insert(PosTituloAnexo6);
                document.InsertText(PosTituloAnexo6, "Dónde:\n");
                document.Sections[1].Paragraphs[IndexTituloAnexo6].Style = Estilo5;

                #region Tabla: Donde
                DocumentPosition PostablaAnexo = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Table tablaAnexo = document.Tables.Create(PostablaAnexo, 3, 2);
                tablaAnexo.BeginUpdate();

                tablaAnexo.Style = EstiloTabla1;
                tablaAnexo.PreferredWidthType = WidthType.Fixed;
                tablaAnexo.PreferredWidth = Units.CentimetersToDocumentsF((float)15);

                DevExpress.XtraRichEdit.API.Native.TableCell CelAnexo00 = tablaAnexo[0, 0];
                CelAnexo00.PreferredWidthType = WidthType.Fixed;
                CelAnexo00.PreferredWidth = Units.CentimetersToDocumentsF((float)1);
                CelAnexo00.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                CelAnexo00.Borders.Left.LineStyle = TableBorderLineStyle.None;
                CelAnexo00.Borders.Right.LineStyle = TableBorderLineStyle.None;
                CelAnexo00.Borders.Top.LineStyle = TableBorderLineStyle.None;
                CelAnexo00.TopPadding = 0;
                CelAnexo00.BottomPadding = 0;
                ParagraphProperties ParagraphPropertiesCelAnexo00 = document.BeginUpdateParagraphs(tablaAnexo[0, 0].Range);
                ParagraphPropertiesCelAnexo00.SpacingAfter = 0;
                ParagraphPropertiesCelAnexo00.SpacingBefore = 25;
                document.EndUpdateParagraphs(ParagraphPropertiesCelAnexo00);
                CharacterProperties CharacterPropertiesCelAnexo00 = document.BeginUpdateCharacters(tablaAnexo[0, 0].Range);
                CharacterPropertiesCelAnexo00.Bold = false;
                CharacterPropertiesCelAnexo00.Underline = UnderlineType.None;
                document.EndUpdateCharacters(CharacterPropertiesCelAnexo00);

                ParagraphProperties ParagraphPropertiesCelAnexo01 = document.BeginUpdateParagraphs(tablaAnexo[0, 1].Range);
                ParagraphPropertiesCelAnexo01.SpacingAfter = 25;
                ParagraphPropertiesCelAnexo01.SpacingBefore = 25;
                CharacterProperties CharacterPropertiesCelAnexo01 = document.BeginUpdateCharacters(tablaAnexo[0, 1].Range);
                CharacterPropertiesCelAnexo01.Bold = true;
                CharacterPropertiesCelAnexo01.Underline = UnderlineType.None;
                document.EndUpdateCharacters(CharacterPropertiesCelAnexo01);

                ParagraphProperties ParagraphPropertiesCelAnexo11 = document.BeginUpdateParagraphs(tablaAnexo[1, 1].Range);
                ParagraphPropertiesCelAnexo11.SpacingAfter = 0;
                ParagraphPropertiesCelAnexo11.SpacingBefore = 25;
                CharacterProperties CharacterPropertiesCelAnexo11 = document.BeginUpdateCharacters(tablaAnexo[1, 1].Range);
                CharacterPropertiesCelAnexo11.Bold = true;
                CharacterPropertiesCelAnexo11.Underline = UnderlineType.None;
                document.EndUpdateCharacters(CharacterPropertiesCelAnexo11);

                ParagraphProperties ParagraphPropertiesCelAnexo10 = document.BeginUpdateParagraphs(tablaAnexo[1, 0].Range);
                ParagraphPropertiesCelAnexo10.SpacingAfter = 0;
                ParagraphPropertiesCelAnexo10.SpacingBefore = 25;

                ParagraphProperties ParagraphPropertiesCelAnexo20 = document.BeginUpdateParagraphs(tablaAnexo[2, 0].Range);
                ParagraphPropertiesCelAnexo20.SpacingAfter = 0;
                ParagraphPropertiesCelAnexo20.SpacingBefore = 25;

                ParagraphProperties ParagraphPropertiesCelAnexo21 = document.BeginUpdateParagraphs(tablaAnexo[2, 1].Range);
                ParagraphPropertiesCelAnexo21.SpacingAfter = 0;
                ParagraphPropertiesCelAnexo21.SpacingBefore = 25;
                CharacterProperties CharacterPropertiesCelAnexo21 = document.BeginUpdateCharacters(tablaAnexo[2, 1].Range);
                CharacterPropertiesCelAnexo21.Bold = true;
                CharacterPropertiesCelAnexo21.Underline = UnderlineType.None;
                document.EndUpdateCharacters(CharacterPropertiesCelAnexo21);


                document.InsertText(tablaAnexo[0, 0].Range.Start, "e:");
                document.InsertText(tablaAnexo[0, 1].Range.Start, "Es la compensación unitaria por incumplimiento en la Calidad de Suministro, cuyo valor en la actualidad es 350 U$/MWh.");
                document.InsertText(tablaAnexo[1, 0].Range.Start, "E:");
                document.InsertText(tablaAnexo[1, 1].Range.Start, "Es el factor que toma en consideración la magnitud de los indicadores de calidad de suministro y está definido en función del Número de Interrupciones por Cliente por Semestre (N) y la Duración Total Acumulada de Interrupciones (D). Para este cálculo preliminar se considerará un valor igual a 1.");
                document.InsertText(tablaAnexo[2, 0].Range.Start, "ENS:");
                document.InsertText(tablaAnexo[2, 1].Range.Start, "Es la energía teóricamente no suministrada a un cliente. Para este cálculo preliminar se considerará como la multiplicación de la potencia suministrada en el momento en que se produjo la interrupción (MW) por la duración (tiempo en horas) individual de la interrupción.");



                DocumentRange FormatoRangoSec1 = document.CreateRange(tablaAnexo[0 , 1].Range.Start, 106);
                CharacterProperties CarPropRangoSec1 = document.BeginUpdateCharacters(FormatoRangoSec1);
                CarPropRangoSec1.Bold = false;
                document.EndUpdateCharacters(CarPropRangoSec1);

                DocumentRange FormatoRangoSec111 = document.CreateRange(tablaAnexo[1, 1].Range.Start, 233);
                CharacterProperties CarPropRangoSec11 = document.BeginUpdateCharacters(FormatoRangoSec111);
                CarPropRangoSec11.Bold = false;
                document.EndUpdateCharacters(CarPropRangoSec11);

                DocumentRange FormatoRangoSec21 = document.CreateRange(tablaAnexo[2, 1].Range.Start, 57);
                CharacterProperties CarPropRangoSec21 = document.BeginUpdateCharacters(FormatoRangoSec21);
                CarPropRangoSec21.Bold = false;
                document.EndUpdateCharacters(CarPropRangoSec21);


                #endregion

                #region Fórmulas

                int IndexTituloAnexo7 = document.Sections[1].Paragraphs.ToList().Count();
                DocumentPosition PosTituloAnexo7 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo7 = document.Paragraphs.Insert(PosTituloAnexo7);
                document.InsertText(PosTituloAnexo7, "Luego aplicando la formula N°14, anteriormente mostrada, se obtiene:\n");
                document.Sections[1].Paragraphs[IndexTituloAnexo7].Style = Estilo5;

                var codigosResarcimientoEventos = infoDecision.TablaResarcimiento.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                List<EventoDTO> tempEventosSCOOrdenados = new List<EventoDTO>();

                foreach (var item in codigosResarcimientoEventos)
                {
                    var tempEventoSCO = infoDecision.EventosSCO.FirstOrDefault(x => x.EVENCODI.ToString() == item.codigo);

                    if (tempEventoSCO != null)
                    {
                        tempEventosSCOOrdenados.Add(tempEventoSCO);
                    }
                }

                tempEventosSCOOrdenados = tempEventosSCOOrdenados.OrderBy(x => x.EVENINI).ToList();

                if (tempEventosSCOOrdenados.Count > 0)
                {
                    for (int i = 0; i < tempEventosSCOOrdenados.Count; i++)
                    {
                        var item = tempEventosSCOOrdenados[i];

                        var registros = infoDecision.TablaResarcimiento.ListaRegistros.Where(x => x.codigo == item.EVENCODI.ToString() || x.codigo == null).OrderByDescending(c => c.codigo).ToList();
                        var tempRegistroTotal = registros[registros.Count - 1];
                        var tempTotal = tempRegistroTotal.ListaCelda[6].Valor?.ToString("0.000");

                        var tempAnexoEventFecha = infoDecision.EventosSCO.Find(x => x.EVENCODI.ToString() == item.EVENCODI.ToString()).EVENINI;

                        int IndexTituloAnexo9_ = document.Sections[1].Paragraphs.ToList().Count();
                        DocumentPosition PosTituloAnexo9_ = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo9_ = document.Paragraphs.Insert(PosTituloAnexo9_);
                        document.InsertText(PosTituloAnexo9_, $"Para el evento del {tempAnexoEventFecha.Value.ToString("dd.MM.yyyy")} a las {tempAnexoEventFecha.Value.ToString("HH:mm:ss")} h:\n");
                        document.Sections[1].Paragraphs[IndexTituloAnexo9_].Style = Estilo5;
                        CharacterProperties Anex9_ = document.BeginUpdateCharacters(document.Sections[1].Paragraphs[IndexTituloAnexo9_].Range);
                        Anex9_.Bold = true;
                        document.EndUpdateCharacters(Anex9_);

                        int IndexTituloAnexo8 = document.Sections[1].Paragraphs.ToList().Count();
                        DocumentPosition PosTituloAnexo8 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo8 = document.Paragraphs.Insert(PosTituloAnexo8);
                        document.InsertText(PosTituloAnexo8, $"Compensaciones por interrupción de suministro XXXXX = (350 x 1 x {tempTotal}) + (350 x 1 x 46,116)\n");
                        document.Sections[1].Paragraphs[IndexTituloAnexo8].Style = Estilo5;


                        int IndexTituloAnexo11_ = document.Sections[1].Paragraphs.ToList().Count();
                        DocumentPosition PosTituloAnexo11_ = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParSec1EventoAnexo11_ = document.Paragraphs.Insert(PosTituloAnexo11_);
                        document.InsertText(PosTituloAnexo11_, "Compensaciones por interrupción de suministro XXXXXX = XXXXX,XX U$\n");
                        document.Sections[1].Paragraphs[IndexTituloAnexo11_].Style = Estilo5;
                        CharacterProperties Anex11_ = document.BeginUpdateCharacters(document.Sections[1].Paragraphs[IndexTituloAnexo11_].Range);
                        Anex11_.Bold = true;
                        Anex11_.Italic = true;
                        document.EndUpdateCharacters(Anex11_);

                    }
                }

                #endregion

                #region Tablas Suministros

                if (tempEventosSCOOrdenados.Count > 0)
                {
                    var registrosTotales = infoDecision.TablaResarcimiento.ListaRegistros;

                    var codigosEventosRearcimiento = infoDecision.TablaResarcimiento.ListaRegistros.Select(y => new { y.codigo }).Distinct().ToList();

                    for (int i = 0; i < tempEventosSCOOrdenados.Count; i++)
                    {
                        var item = tempEventosSCOOrdenados[i];

                        var tempCuadroEventFecha = infoDecision.EventosSCO.Find(x => x.EVENCODI.ToString() == item.EVENCODI.ToString()).EVENINI;

                        int IndexTituloCuadro = document.Sections[1].Paragraphs.ToList().Count();
                        DocumentPosition PosTituloCuadro = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParTituloCuadro = document.Paragraphs.Insert(PosTituloCuadro);
                        document.InsertText(PosTituloCuadro, $"Cuadro N° { i + 1}" + $": Interrupciones de Suministro Producidas por el evento del {tempCuadroEventFecha.Value.ToString("dd.MM.yyyy")}");
                        document.Sections[1].Paragraphs[IndexTituloCuadro].Style = Estilo2;
                        CharacterProperties characterPropertiesRangeTitulo_ = document.BeginUpdateCharacters(document.Sections[1].Paragraphs[IndexTituloCuadro].Range);
                        characterPropertiesRangeTitulo_.Bold = false;
                        characterPropertiesRangeTitulo_.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(characterPropertiesRangeTitulo_);

                        DocumentRange rangeTituloCuadro = document.CreateRange(document.Sections[1].Paragraphs[IndexTituloCuadro].Range.Start, 12);
                        CharacterProperties characterPropertiesRangeTitulo = document.BeginUpdateCharacters(rangeTituloCuadro);
                        characterPropertiesRangeTitulo.Bold = true;
                        characterPropertiesRangeTitulo.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(characterPropertiesRangeTitulo);

                        int IndexTituloCuadro1 = document.Sections[1].Paragraphs.ToList().Count();
                        DocumentPosition PosTituloCuadro1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParTituloCuadro1 = document.Paragraphs.Insert(PosTituloCuadro1);
                        document.InsertText(PosTituloCuadro1, "XXXXXX");
                        document.Sections[1].Paragraphs[IndexTituloCuadro1].Style = Estilo2;
                        CharacterProperties characterPropertiesRangeTitulo2 = document.BeginUpdateCharacters(document.Sections[1].Paragraphs[IndexTituloCuadro1].Range);
                        characterPropertiesRangeTitulo2.Bold = true;
                        characterPropertiesRangeTitulo2.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(characterPropertiesRangeTitulo2);

                        string eventFecha = string.Empty;
                        if (tempEventosSCOOrdenados[i].EVENINI.HasValue)
                        {
                            eventFecha = tempEventosSCOOrdenados[i].EVENINI.Value.ToString("dd.MM.yyyy");
                        }

                        int IndexFechaCuadro1 = document.Sections[1].Paragraphs.ToList().Count();
                        DocumentPosition PosFechaCuadro1 = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Paragraph ParFechaCuadro1 = document.Paragraphs.Insert(PosFechaCuadro1);
                        document.InsertText(PosFechaCuadro1, $"Evento del {eventFecha}");
                        document.Sections[1].Paragraphs[IndexFechaCuadro1].Style = Estilo9;
                        CharacterProperties CarPropFechaCuadro1 = document.BeginUpdateCharacters(document.Sections[1].Paragraphs[IndexFechaCuadro1].Range);
                        CarPropFechaCuadro1.Bold = true;
                        CarPropFechaCuadro1.Underline = UnderlineType.Single;
                        document.EndUpdateCharacters(CarPropFechaCuadro1);

                        var registrosN = registrosTotales.Where(x => x.codigo == item.EVENCODI.ToString() || x.codigo == null).OrderByDescending(c => c.codigo).ToList();
                        List<RegistroReporte> registros = registrosN;
                        int numFilas = registros.Count() + 1;
                        int numColumnas = 8;
                        DocumentPosition PostablaSumAnexo = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                        DevExpress.XtraRichEdit.API.Native.Table tablaSumAnexo = document.Tables.Create(PostablaSumAnexo, numFilas, numColumnas);
                        tablaSumAnexo.BeginUpdate();

                        tablaSumAnexo.Style = EstiloTabla1;

                        tablaSumAnexo.RelativeVerticalPosition = TableRelativeVerticalPosition.Paragraph;
                        tablaSumAnexo.VerticalAlignment = TableVerticalAlignment.None;
                        tablaSumAnexo.OffsetYRelative = Units.CentimetersToDocumentsF((float)0);
                        tablaSumAnexo.TextWrappingType = TableTextWrappingType.Around;
                        tablaSumAnexo.RelativeHorizontalPosition = TableRelativeHorizontalPosition.Margin;
                        tablaSumAnexo.OffsetXRelative =-100;
                        tablaSumAnexo.PreferredWidthType = WidthType.Fixed;
                        tablaSumAnexo.PreferredWidth = Units.CentimetersToDocumentsF((float)18.32);

                        #region Configurar Tabla

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel00 = tablaSumAnexo[0, 0];
                        Cel00.PreferredWidthType = WidthType.Fixed;
                        Cel00.PreferredWidth = Units.CentimetersToDocumentsF((float)5.44);
                        //Cel00.HeightType = HeightType.Exact;
                        //Cel00.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel00.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel00.BackgroundColor = Color.LightGray;
                        Cel00.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel00.TopPadding = 0;
                        Cel00.BottomPadding = 0;
                        
                        ParagraphProperties ParagraphPropertiesCel00 = document.BeginUpdateParagraphs(tablaSumAnexo[0, 0].Range);
                        ParagraphPropertiesCel00.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel00.SpacingAfter = 0;
                        ParagraphPropertiesCel00.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel00);
                        CharacterProperties CharacterPropertiesCel00 = document.BeginUpdateCharacters(tablaSumAnexo[0, 0].Range);
                        CharacterPropertiesCel00.Bold = true;
                        CharacterPropertiesCel00.FontSize = 8;
                        CharacterPropertiesCel00.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel00);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel01 = tablaSumAnexo[0, 1];
                        Cel01.PreferredWidthType = WidthType.Fixed;
                        Cel01.PreferredWidth = Units.CentimetersToDocumentsF((float)2.24);
                        //Cel00.HeightType = HeightType.Exact;
                        //Cel00.Height = Units.CentimetersToDocumentsF((float)1);
                        Cel01.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel01.BackgroundColor = Color.LightGray;
                        Cel01.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel01.TopPadding = 0;
                        Cel01.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel01 = document.BeginUpdateParagraphs(tablaSumAnexo[0, 1].Range);
                        ParagraphPropertiesCel01.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel01.SpacingAfter = 0;
                        ParagraphPropertiesCel01.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel01);
                        CharacterProperties CharacterPropertiesCel01 = document.BeginUpdateCharacters(tablaSumAnexo[0, 1].Range);
                        CharacterPropertiesCel01.Bold = true;
                        CharacterPropertiesCel01.FontSize = 8;
                        CharacterPropertiesCel01.ForeColor = Color.Red;
                        CharacterPropertiesCel01.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel01);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel02 = tablaSumAnexo[0, 2];
                        Cel02.PreferredWidthType = WidthType.Fixed;
                        Cel02.PreferredWidth = Units.CentimetersToDocumentsF((float)1.97);
                        Cel02.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel02.BackgroundColor = Color.LightGray;
                        Cel02.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel02.TopPadding = 0;
                        Cel02.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel02 = document.BeginUpdateParagraphs(tablaSumAnexo[0, 2].Range);
                        ParagraphPropertiesCel02.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel02.SpacingAfter = 0;
                        ParagraphPropertiesCel02.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel02);
                        CharacterProperties CharacterPropertiesCel02 = document.BeginUpdateCharacters(tablaSumAnexo[0, 2].Range);
                        CharacterPropertiesCel02.Bold = true;
                        CharacterPropertiesCel02.FontSize = 8;
                        CharacterPropertiesCel02.ForeColor = Color.Black;
                        CharacterPropertiesCel02.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel02);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel03 = tablaSumAnexo[0, 3];
                        Cel03.PreferredWidthType = WidthType.Fixed;
                        Cel03.PreferredWidth = Units.CentimetersToDocumentsF((float)1.97);
                        Cel03.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel03.BackgroundColor = Color.LightGray;
                        Cel03.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel03.TopPadding = 0;
                        Cel03.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel03 = document.BeginUpdateParagraphs(tablaSumAnexo[0, 3].Range);
                        ParagraphPropertiesCel03.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel03.SpacingAfter = 0;
                        ParagraphPropertiesCel03.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel03);
                        CharacterProperties CharacterPropertiesCel03 = document.BeginUpdateCharacters(tablaSumAnexo[0, 3].Range);
                        CharacterPropertiesCel03.Bold = true;
                        CharacterPropertiesCel03.FontSize = 8;
                        CharacterPropertiesCel03.ForeColor = Color.Black;
                        CharacterPropertiesCel03.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel03);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel04 = tablaSumAnexo[0, 4];
                        Cel04.PreferredWidthType = WidthType.Fixed;
                        Cel04.PreferredWidth = Units.CentimetersToDocumentsF((float)1.72);
                        Cel04.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel04.BackgroundColor = Color.LightGray;
                        Cel04.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel04.TopPadding = 0;
                        Cel04.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel04 = document.BeginUpdateParagraphs(tablaSumAnexo[0, 4].Range);
                        ParagraphPropertiesCel04.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel04.SpacingAfter = 0;
                        ParagraphPropertiesCel04.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel04);
                        CharacterProperties CharacterPropertiesCel04 = document.BeginUpdateCharacters(tablaSumAnexo[0, 4].Range);
                        CharacterPropertiesCel04.Bold = true;
                        CharacterPropertiesCel04.FontSize = 8;
                        CharacterPropertiesCel04.ForeColor = Color.Black;
                        CharacterPropertiesCel04.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel04);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel05 = tablaSumAnexo[0, 5];
                        Cel05.PreferredWidthType = WidthType.Fixed;
                        Cel05.PreferredWidth = Units.CentimetersToDocumentsF((float)1.68);
                        Cel05.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel05.BackgroundColor = Color.LightGray;
                        Cel05.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel05.TopPadding = 0;
                        Cel05.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel05 = document.BeginUpdateParagraphs(tablaSumAnexo[0, 5].Range);
                        ParagraphPropertiesCel05.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel05.SpacingAfter = 0;
                        ParagraphPropertiesCel05.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel05);
                        CharacterProperties CharacterPropertiesCel05 = document.BeginUpdateCharacters(tablaSumAnexo[0, 5].Range);
                        CharacterPropertiesCel05.Bold = true;
                        CharacterPropertiesCel05.FontSize = 8;
                        CharacterPropertiesCel05.ForeColor = Color.Red;
                        CharacterPropertiesCel05.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel05);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel06 = tablaSumAnexo[0, 6];
                        Cel06.PreferredWidthType = WidthType.Fixed;
                        Cel06.PreferredWidth = Units.CentimetersToDocumentsF((float)2.24);
                        Cel06.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                        Cel06.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                        Cel06.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                        Cel06.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                        Cel06.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel06.BackgroundColor = Color.LightGray;
                        Cel06.VerticalAlignment = TableCellVerticalAlignment.Center;
                        Cel06.TopPadding = 0;
                        Cel06.BottomPadding = 0;
                        ParagraphProperties ParagraphPropertiesCel06 = document.BeginUpdateParagraphs(tablaSumAnexo[0, 6].Range);
                        ParagraphPropertiesCel06.Alignment = ParagraphAlignment.Center;
                        ParagraphPropertiesCel06.SpacingAfter = 0;
                        ParagraphPropertiesCel06.SpacingBefore = 0;
                        document.EndUpdateParagraphs(ParagraphPropertiesCel06);
                        CharacterProperties CharacterPropertiesCel06 = document.BeginUpdateCharacters(tablaSumAnexo[0, 6].Range);
                        CharacterPropertiesCel06.Bold = true;
                        CharacterPropertiesCel06.FontSize = 8;
                        CharacterPropertiesCel06.ForeColor = Color.Red;
                        CharacterPropertiesCel06.Underline = UnderlineType.None;
                        document.EndUpdateCharacters(CharacterPropertiesCel06);

                        DevExpress.XtraRichEdit.API.Native.TableCell Cel07 = tablaSumAnexo[0, 7];
                        Cel07.PreferredWidthType = WidthType.Fixed;
                        Cel07.PreferredWidth = Units.CentimetersToDocumentsF((float)1);
                        Cel07.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                        Cel07.Borders.Left.LineStyle = TableBorderLineStyle.None;
                        Cel07.Borders.Right.LineStyle = TableBorderLineStyle.None;
                        Cel07.Borders.Top.LineStyle = TableBorderLineStyle.None;

                        tablaSumAnexo.Rows[0].RepeatAsHeaderRow = true;
                        #endregion

                        document.InsertText(tablaSumAnexo[0, 0].Range.Start, "SUMINISTROS AFECTADOS");
                        document.InsertText(tablaSumAnexo[0, 1].Range.Start, "POTENCIA\nINTERRUMPIDA\n(MW)\n(A)");
                        //document.InsertText(tablaSumAnexo[0, 2].Range.Start, "HORA\nINICIO\n(HH:MM:SS)");
                        //document.InsertText(tablaSumAnexo[0, 3].Range.Start, "HORA\nFINAL\n(HH:MM:SS)");
                        document.InsertText(tablaSumAnexo[0, 4].Range.Start, "TIEMPO\nDURACIÓN\n(MINUTOS)");
                        document.InsertText(tablaSumAnexo[0, 5].Range.Start, "TIEMPO\nDURACIÓN\n(HORAS)\n(B)");
                        document.InsertText(tablaSumAnexo[0, 6].Range.Start, "ENERGÍA NO\nSUMINISTRADA\n(MWH)\n(AXB)");


                        DocumentRange rangeCel01 = document.CreateRange(tablaSumAnexo[0, 1].Range.Start, 27);
                        CharacterProperties CharacterPropertiesCel01_ = document.BeginUpdateCharacters(rangeCel01);
                        CharacterPropertiesCel01_.ForeColor = Color.Black;
                        document.EndUpdateCharacters(CharacterPropertiesCel01_);

                        DocumentRange rangeCel04 = document.CreateRange(tablaSumAnexo[0, 5].Range.Start, 23);
                        CharacterProperties CharacterPropertiesCel04_ = document.BeginUpdateCharacters(rangeCel04);
                        CharacterPropertiesCel04_.ForeColor = Color.Black;
                        document.EndUpdateCharacters(CharacterPropertiesCel04_);

                        DocumentRange rangeCel05 = document.CreateRange(tablaSumAnexo[0, 6].Range.Start, 29);
                        CharacterProperties CharacterPropertiesCel05_ = document.BeginUpdateCharacters(rangeCel05);
                        CharacterPropertiesCel05_.ForeColor = Color.Black;
                        document.EndUpdateCharacters(CharacterPropertiesCel05_);

                        NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                        nfi.NumberGroupSeparator = " ";
                        nfi.NumberDecimalDigits = 3;
                        nfi.NumberDecimalSeparator = ",";
                        bool esFecha3 = false, esFecha4 = false;

                        for (int x = 0; x < registros.Count(); x++)
                        {
                            for (int y = 0; y < registros[x].ListaCelda.Count; y++)
                            {
                                if (registros[x].ListaCelda[y].EsNumero)
                                {
                                    if (registros[x].ListaCelda[y].Valor != null)
                                    {
                                        if (registros[x].ListaCelda[y].DigitosParteDecimal > 0)
                                        {
                                            int numDigitos = registros[x].ListaCelda[y].DigitosParteDecimal;
                                            if (registros[x].ListaCelda[y].TieneFormatoNumeroEspecial)
                                            {
                                                numDigitos = MathHelper.GetDecimalPlaces(registros[x].ListaCelda[y].Valor.Value);
                                                numDigitos = (numDigitos > registros[x].ListaCelda[y].DigitosParteDecimal) ? (numDigitos <= ConstantesExtranetCTAF.MaxNumDigitos ? numDigitos : ConstantesExtranetCTAF.MaxNumDigitos) : registros[x].ListaCelda[y].DigitosParteDecimal;
                                            }

                                            if (registros[x].ListaCelda[y].EsNumeroTruncado)
                                            {
                                                registros[x].ListaCelda[y].Valor = MathHelper.TruncateDecimal(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                                decimal a = MathHelper.TruncateDecimal(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                            }
                                            if (registros[x].ListaCelda[y].EsNumeroRedondeado)
                                            {
                                                registros[x].ListaCelda[y].Valor = MathHelper.Round(registros[x].ListaCelda[y].Valor.Value, numDigitos);
                                            }

                                            string strParteDecimal = string.Empty;
                                            for (int z = 1; z <= numDigitos; z++) strParteDecimal += "0";
                                            string strFormat = "#,##0." + strParteDecimal;

                                            nfi.NumberDecimalDigits = numDigitos;
                                        }
                                        else
                                        {
                                            string strFormat = "#,##0";

                                            nfi.NumberDecimalDigits = 0;
                                        }
                                    }
                                    document.InsertText(tablaSumAnexo[x + 1, y].Range.Start, registros[x].ListaCelda[y].Valor == null ? "" : registros[x].ListaCelda[y].Valor.Value.ToString("N", nfi));
                                }
                                else
                                {
                                    registros[x].ListaCelda[y].Texto = (registros[x].ListaCelda[y].Texto != null && infoDecision.TablaReporte.EsMayuscula) ? registros[x].ListaCelda[y].Texto.ToUpper() : registros[x].ListaCelda[y].Texto;
                                    if (registros[x].ListaCelda[y].EsTextoFecha)
                                    {
                                        if (y == 2 && registros[x].ListaCelda[y].TieneFormatoFechaExcel)
                                            esFecha3 = true;
                                        else if (y == 3 && registros[x].ListaCelda[y].TieneFormatoFechaExcel)
                                            esFecha4 = true;

                                        string hhmmss = registros[x].ListaCelda[y].Texto != null && registros[x].ListaCelda[y].Texto.Length > 8 ? registros[x].ListaCelda[y].Texto.Substring(registros[x].ListaCelda[y].Texto.Length - 8, 8) : string.Empty;
                                        string ddmmyyy = registros[x].ListaCelda[y].Texto != null && registros[x].ListaCelda[y].Texto.Length > 8 ? registros[x].ListaCelda[y].Texto.Substring(0, 10).Replace("/", ".") : string.Empty;
                                        document.InsertText(tablaSumAnexo[x + 1, y].Range.Start, hhmmss + (registros[x].ListaCelda[y].TieneFormatoFechaExcel ? "\n" + ddmmyyy : string.Empty));
                                    }
                                    else
                                        document.InsertText(tablaSumAnexo[x + 1, y].Range.Start, registros[x].ListaCelda[y].Texto == null ? "" : registros[x].ListaCelda[y].Texto);
                                    
                                }

                                DevExpress.XtraRichEdit.API.Native.TableCell Celi0 = tablaSumAnexo[x + 1, y];
                                Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Left.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Right.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.Borders.Top.LineStyle = TableBorderLineStyle.Thick;
                                Celi0.VerticalAlignment = TableCellVerticalAlignment.Center;
                                Celi0.Height = Units.CentimetersToDocumentsF((float)0.6);
                                if((x < registros.Count() - 1)  &&  (y == registros[x].ListaCelda.Count - 1))
                                {
                                    Celi0.Borders.Right.LineStyle = TableBorderLineStyle.None;
                                    Celi0.Borders.Bottom.LineStyle = TableBorderLineStyle.None;
                                    Celi0.Borders.Top.LineStyle = TableBorderLineStyle.None;
                                }
                                    
                                DocumentRange RangeCeli0 = Celi0.Range;
                                CharacterProperties CharacterPropertiesRangeCeli0 = document.BeginUpdateCharacters(RangeCeli0);
                                CharacterPropertiesRangeCeli0.FontName = "Calibri";
                                CharacterPropertiesRangeCeli0.FontSize = 8;
                                CharacterPropertiesRangeCeli0.Bold = false;
                                CharacterPropertiesRangeCeli0.Underline = UnderlineType.None;
                                if(x == registros.Count() - 1)
                                    CharacterPropertiesRangeCeli0.Bold = true;
                                document.EndUpdateCharacters(CharacterPropertiesRangeCeli0);
                                ParagraphProperties ParagraphPropertiesCeli0 = document.BeginUpdateParagraphs(tablaSumAnexo[x + 1, y].Range);
                                ParagraphPropertiesCeli0.SpacingAfter = 0;
                                ParagraphPropertiesCeli0.SpacingBefore = 0;
                                if (y > 0)
                                    ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Center;
                                else
                                    ParagraphPropertiesCeli0.Alignment = ParagraphAlignment.Left;
                                document.EndUpdateParagraphs(ParagraphPropertiesCeli0);

                            }
                        }

                        if (esFecha3)
                            document.InsertText(tablaSumAnexo[0, 2].Range.Start, "INICIO (HH:MM:SS) DD.MM.YYYY");
                        else
                            document.InsertText(tablaSumAnexo[0, 2].Range.Start, "INICIO (HH:MM:SS)");

                        if (esFecha4)
                            document.InsertText(tablaSumAnexo[0, 3].Range.Start, "FINAL (HH:MM:SS) DD.MM.YYYY");
                        else
                            document.InsertText(tablaSumAnexo[0, 3].Range.Start, "FINAL (HH:MM:SS)");
                        //var Tabla = infoDecision.TablaResarcimiento;
                        //Tabla.ListaRegistros = registrosN;
                        //var numFilas = registrosN.Count;
                        //var numColumnas = infoDecision.TablaResarcimiento.CabeceraColumnas.Count;
                        //secuencia_5 = documentoWord.InsertTable(numFilas + 1, numColumnas);

                        //infoDecision.AnalisisFallasAppServicio.GenerarRptWord(ref secuencia_5, infoDecision.TablaResarcimiento, 16, fdatcodi);
                    }
                }
                else
                {
                    int IndexTablaSinReg = document.Sections[1].Paragraphs.ToList().Count();
                    DocumentPosition PosTablaSinReg = document.CreatePosition(document.Sections[1].Range.End.ToInt() - 1);
                    DevExpress.XtraRichEdit.API.Native.Paragraph ParTablaSinReg = document.Paragraphs.Insert(PosTablaSinReg);
                    document.InsertText(PosTablaSinReg, "No registrado.");
                    document.Sections[1].Paragraphs[IndexTablaSinReg].Style = Estilo5;
                }

                #endregion

                #endregion

                document.EndUpdate();

                document.BeginUpdate();

                #region Insertar Numeración
                if (IndexAntecedentes > 0 && IndexFinNumAnalisis > 0)
                {
                    DocumentRange rangeLevel0 = document.CreateRange(document.Paragraphs[IndexAntecedentes].Range.Start, document.Paragraphs[IndexFinNumAnalisis - 1].Range.End.ToInt() - document.Paragraphs[IndexAntecedentes].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel0, ListaNumeros0, 0);
                }

                if (IndexAntecedentes1_1 > 0 && IndexFinAntecedentes1_6 > 0)
                {
                    DocumentRange rangeLevel1 = document.CreateRange(document.Paragraphs[IndexAntecedentes1_1].Range.Start, document.Paragraphs[IndexFinAntecedentes1_6 - 1].Range.End.ToInt() - document.Paragraphs[IndexAntecedentes1_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel1, ListaNumeros0, 1);
                }

                if (IndexIniSec2_x > 0 && IndexFinSec2_x > 0)
                {
                    DocumentRange rangeLevel2 = document.CreateRange(document.Paragraphs[IndexIniSec2_x].Range.Start, document.Paragraphs[IndexFinSec2_x - 1].Range.End.ToInt() - document.Paragraphs[IndexIniSec2_x].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel2, ListaNumeros0, 2);
                }

                if (IndexSecPr40_1 > 0)
                {
                    document.Paragraphs.AddParagraphsToList(document.Paragraphs[IndexSecPr40_1].Range, ListaNumeros0, 3);              
                }

                if (IndexSecPr40_2 > 0)
                {
                    document.Paragraphs.AddParagraphsToList(document.Paragraphs[IndexSecPr40_2].Range, ListaNumeros0,4);
                }

                if (IndexSecNtsce > 0)
                {
                    document.Paragraphs.AddParagraphsToList(document.Paragraphs[IndexSecNtsce].Range, ListaNumeros0, 5);
                }

                if (IndexSec2_2_1 > 0 && IndexFinSec2_2_x_x > 0)
                {
                    DocumentRange rangeLevel6 = document.CreateRange(document.Paragraphs[IndexSec2_2_1].Range.Start, document.Paragraphs[IndexFinSec2_2_x_x - 1].Range.End.ToInt() - document.Paragraphs[IndexSec2_2_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel6, ListaNumeros0, 6);
                }

                if (IndexSec2_3_1 > 0 && IndexFinSec2_3_x > 0)
                {
                    DocumentRange rangeLevel7 = document.CreateRange(document.Paragraphs[IndexSec2_3_1].Range.Start, document.Paragraphs[IndexFinSec2_3_x - 1].Range.End.ToInt() - document.Paragraphs[IndexSec2_3_1].Range.Start.ToInt());
                    document.Paragraphs.AddParagraphsToList(rangeLevel7, ListaNumeros0, 7);
                }


                #endregion

                #region Remover numeración

                foreach (ParrafoDTO item in ListaParrafos)
                {
                    DocumentRange rangeParRemover = document.CreateRange(document.Paragraphs[item.RangeIniParrafo].Range.Start, document.Paragraphs[item.RangeFinParrafo - 1].Range.End.ToInt() - document.Paragraphs[item.RangeIniParrafo].Range.Start.ToInt());
                    document.Paragraphs.RemoveNumberingFromParagraphs(rangeParRemover);
                }

                foreach (int itemShape in ListaIndexShapes)
                {
                    document.Paragraphs.RemoveNumberingFromParagraphs(document.Shapes[itemShape].Range);
                }

                #endregion


                document.EndUpdate();

                MemoryStream ms = new MemoryStream();
                wordProcessor.SaveDocument(ms, DocumentFormat.OpenXml);
                response = ms.ToArray();
                ms.Dispose();
                ms.Close();

                FileServer.CreateFolder(null, null, fileName);
                wordProcessor.SaveDocument(fileName + reporteName + ".docx", DocumentFormat.OpenXml);
                wordProcessor.Dispose();

            }

            return new GenerarDecisionCtafFDTO()
            {
                WordContent = response,
                FileName = $"Formato_D_{infoDecision.AnalisisFalla.CodigoEvento}.docx"
            };
        } 

        /// <summary>
        /// //Descargar manual usuario
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        public virtual FileResult DescargarManualUsuario()
        {
            string modulo = ConstantesAnalisisFallas.ModuloManualUsuario;
            string nombreArchivo = ConstantesAnalisisFallas.ArchivoManualUsuarioIntranet;
            string pathDestino = modulo + ConstantesAnalisisFallas.FolderRaizCTAFModuloManual;
            string pathAlternativo = ConfigurationManager.AppSettings["FileSystemPortal"];

            try
            {
                if (FileServer.VerificarExistenciaFile(pathDestino, nombreArchivo, pathAlternativo))
                {
                    byte[] buffer = FileServer.DownloadToArrayByte(pathDestino + "\\" + nombreArchivo, pathAlternativo);

                    return File(buffer, Constantes.AppPdf, nombreArchivo);
                }
                else
                    throw new ArgumentException("No se pudo descargar el archivo del servidor.");

            }
            catch (Exception ex)
            {
                throw new ArgumentException("ERROR: ", ex);
            }
        }
    }
}




