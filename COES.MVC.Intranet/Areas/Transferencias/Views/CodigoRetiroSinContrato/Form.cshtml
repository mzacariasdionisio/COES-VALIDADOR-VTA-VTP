@model COES.MVC.Intranet.Areas.Transferencias.Models.CodigoRetiroSinContratoModel
@{
    string sAccion = ViewData["sAccion"].ToString();
    string sTitulo = ViewData["sTitulo"].ToString();
    var EMPRCODI2 = (COES.MVC.Intranet.Areas.Transferencias.Models.EmpresaModel)TempData["EMPRCODI2"];
    var BARRCODI2 = (COES.MVC.Intranet.Areas.Transferencias.Models.BarraModel)TempData["BARRCODI2"];
     
}
<link href="~/Areas/Transferencias/Content/Css/Transferencia.css" rel="stylesheet" />
<link href="~/Content/Css/multiselect.css" rel="stylesheet" />
<link href="~/Areas/Transferencias/Content/Css/Validate.css" rel="stylesheet" />
<script src="~/Areas/Transferencias/Content/Scripts/codigoretirosincontrato.js"></script>
<script src="~/Content/Scripts/multiselect.js"></script>

@using (Html.BeginForm("Save", "codigoretirosincontrato", FormMethod.Post, new { id = "frmCodigoRetiroSinContrato", @class = "cmxform" }))
{
    @Html.AntiForgeryToken()
    <input type="hidden" id="hfNroPagina" name="NroPagina" value="1" />
    <div class="ast">
        <div class="form-title">
            <div class="content-titulo">@sTitulo</div>
            <div class="content-botonera">
                @if (Model.bGrabar)
                {
                    <input type="submit" value="@sAccion" alt="@sAccion" title="@sAccion" />
                }
                <input type="button" value="Retornar" onclick="location.href='@Url.Action("Index","codigoretirosincontrato")'" alt="Retornar" title="Retornar" />
            </div>
        </div>

        <div style="padding:20px; width:500px;">
            @Html.HiddenFor(model => model.Entidad.CodRetiSinConCodi)
            @Html.HiddenFor(model => model.Entidad.GenEmprCodi)
            <table cellspacing="2" cellpadding="5">
                @if (Model.sError != "")
                {
                    <tr>
                        <td colspan="2">
                            <div class="editor-label" style="color:red;">
                                @Model.sError
                            </div>
                        </td>
                    </tr>
                }
                <tr>
                    <td>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Entidad.BarrCodi, "Barra de Transferencia")
                            (*)

                        </div>
                    </td>
                    <td>
                        <div class="editor-label">
                            <select id="BARRCODI2" name="Entidad.BARRCODI" multiple="multiple">
                                @foreach (var item in @BARRCODI2.ListaBarras)
                                {
                                    <option value="@item.BarrCodi">@item.BarrNombre </option>
                                }
                            </select>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Entidad.CliCodi, "Cliente")
                            (*)
                        </div>
                    </td>
                    <td>
                        <div class="editor-label">
                            <select id="CLICODI2" name="Entidad.CLICODI" multiple="multiple">
                                @foreach (var item in @EMPRCODI2.ListaEmpresas)
                                {
                                    <option value="@item.EmprCodi">@item.EmprNombre </option>
                                }
                            </select>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Codretisinconfechainicio, "Fecha Inicio de Operación")
                            (*)
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Codretisinconfechainicio, "{0:dd/MM/yyyy}", new { @class = "txtFecha" })
                            @Html.ValidationMessageFor(model => model.Codretisinconfechainicio)
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Codretisinconfechafin, "Fecha Fin de Operación")
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @Html.TextBoxFor(model => model.Codretisinconfechafin, "{0:dd/MM/yyyy}", new { @class = "txtFecha" })
                            @Html.ValidationMessageFor(model => model.Codretisinconfechafin)
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Entidad.CodRetiSinConCodigo, "Código")
                            (*)
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Entidad.CodRetiSinConCodigo)
                            @Html.ValidationMessageFor(model => model.Entidad.CodRetiSinConCodigo)
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Entidad.CodRetiSinConEstado, "Estado")
                        </div>
                    </td>
                    <td>
                        <div class="editor-field">
                            <label>@Html.RadioButtonFor(model => model.Entidad.CodRetiSinConEstado, "ACT")Activo</label>
                            <label>@Html.RadioButtonFor(model => model.Entidad.CodRetiSinConEstado, "INA")Inactivo</label>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>
                        <div class="editor-label">
                            @Html.LabelFor(model => model.Entidad.TipUsuCodi, "Tipo de Usuario")
                            (*)
                        </div>
                    </td>
                    <td>
                        <div class="editor-label">
                            <select id="TIPUSUCODI2" name="Entidad.TIPUSUCODI">
                                    
                                <option value="0" @(Model.Entidad.TipUsuCodi == 0 ? " selected " : "") ></option>
                                <option value="1" @(Model.Entidad.TipUsuCodi == 1 ? " selected " : "")>LIBRE </option>
                                <option value="2" @(Model.Entidad.TipUsuCodi == 2 ? " selected " : "")>REGULADO </option>
                            </select>
                        </div>
                    </td>
                </tr>
                <tr>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr><td colspan="2">Nota(*): Información obligatoria</td></tr>
            </table>
        </div>
    
    </div>
}
<script src="~/Areas/Transferencias/Content/Scripts/jquery.validate.js"></script>
<script>
    function FormatFecha(sFecha) {   //DD/MM/AAAA
        if (sFecha == "") return false;
        var sDia = sFecha.substring(0, 2);
        var sMes = sFecha.substring(3, 5);
        var sAnio = sFecha.substring(6, 10);
        return new Date(sAnio, sMes, sDia);
    }

    jQuery.validator.addMethod("MasGrandeQue", function (value, element, params) {
        //value: (val)fechafinal / params: (tag)fechainicial
        if (FormatFecha(value)) {
            //Si la fechafinal no es nulo compara
            return FormatFecha(value) >= FormatFecha($(params).val());
        }
        //caso contrario si la fechafinal es vacia, devuelve true
        return !isNaN(value);
    }, '<br>Debe ser mayor que la fecha de Inicio de Operación.');

    $("#frmCodigoRetiroSinContrato").validate({
        rules: {
            "Entidad.CodRetiSinConCodigo": {
                required: true
            },
            "Entidad.Barrtension": {
                required: true,
                number: true
            },
            "Entidad.BARRCODI": {
                required: true
            },
            "Entidad.CLICODI": {
                required: true,
            },
            Codretisinconfechainicio: {
                required: true,
            },
            Codretisinconfechafin: {
                MasGrandeQue: "#Codretisinconfechainicio"
            }
        }
    });

</script>
<script>
    var sAccion = '@ViewData["sAccion"].ToString()';
    if (sAccion == "Insertar") {
        document.forms[0].Codretisinconfechafin.value = '';
        document.forms[0].Entidad_Codretisinconestado[0].checked = true;
    }

    if (sAccion == "Actualizar") {
        $("#BARRCODI2").val(["@BARRCODI2.Entidad.BarrCodi"]).prop("selected", true);
        $("#CLICODI2").val(["@EMPRCODI2.Entidad.EmprCodi"]).prop("selected", true);
    }
    function mostrarPaginado()
    { }
</script>
