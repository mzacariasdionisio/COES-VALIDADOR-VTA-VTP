using COES.Base.Core;
using COES.Base.Tools;
using COES.Dominio.DTO.Sic;
using COES.Framework.Base.Core;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.Correo;
using COES.Servicios.Aplicacion.Despacho.Helper;
using COES.Servicios.Aplicacion.Equipamiento;
using COES.Servicios.Aplicacion.Factory;
using COES.Servicios.Aplicacion.FormatoMedicion;
using COES.Servicios.Aplicacion.General;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.IEOD;
using COES.Servicios.Aplicacion.Indisponibilidades;
using COES.Servicios.Aplicacion.Mediciones;
using COES.Servicios.Aplicacion.Mediciones.Helper;
using COES.Servicios.Aplicacion.Migraciones;
using COES.Servicios.Aplicacion.StockCombustibles;
using log4net;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;

namespace COES.Servicios.Aplicacion.Combustibles
{
    /// <summary>
    /// Clase del aplicativo PR31 Costos de combustible líquido y sólido
    /// </summary>
    public class CombustibleAppServicio : AppServicioBase
    {
        readonly CorreoAppServicio servCorreo = new CorreoAppServicio();
        readonly GeneralAppServicio servGeneral = new GeneralAppServicio();
        readonly DespachoAppServicio _appDespacho = new DespachoAppServicio();
        readonly MigracionesAppServicio _appMigracion = new MigracionesAppServicio();

        private static readonly ILog Logger = LogManager.GetLogger(typeof(CombustibleAppServicio));

        #region Tablas maestras CB_*

        #region Métodos Tabla CB_ARCHIVOENVIO

        /// <summary>
        /// Inserta un registro de la tabla CB_ARCHIVOENVIO
        /// </summary>
        public int SaveCbArchivoenvio(CbArchivoenvioDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbArchivoenvioRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_ARCHIVOENVIO
        /// </summary>
        public void UpdateCbArchivoenvio(CbArchivoenvioDTO entity)
        {
            try
            {
                FactorySic.GetCbArchivoenvioRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_ARCHIVOENVIO
        /// </summary>
        public void DeleteCbArchivoenvio(int cbarchcodi)
        {
            try
            {
                FactorySic.GetCbArchivoenvioRepository().Delete(cbarchcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_ARCHIVOENVIO
        /// </summary>
        public CbArchivoenvioDTO GetByIdCbArchivoenvio(int cbarchcodi)
        {
            return FactorySic.GetCbArchivoenvioRepository().GetById(cbarchcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_ARCHIVOENVIO
        /// </summary>
        public List<CbArchivoenvioDTO> ListCbArchivoenvios()
        {
            return FactorySic.GetCbArchivoenvioRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbArchivoenvio
        /// </summary>
        public List<CbArchivoenvioDTO> GetByCriteriaCbArchivoenvios(int cbvercodi)
        {
            return FactorySic.GetCbArchivoenvioRepository().GetByCriteria(cbvercodi);
        }

        #endregion

        #region Métodos Tabla CB_CONCEPTOCOMB

        /// <summary>
        /// Inserta un registro de la tabla CB_CONCEPTOCOMB
        /// </summary>
        public void SaveCbConceptocomb(CbConceptocombDTO entity)
        {
            try
            {
                FactorySic.GetCbConceptocombRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_CONCEPTOCOMB
        /// </summary>
        public void UpdateCbConceptocomb(CbConceptocombDTO entity)
        {
            try
            {
                FactorySic.GetCbConceptocombRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_CONCEPTOCOMB
        /// </summary>
        public void DeleteCbConceptocomb(int ccombcodi)
        {
            try
            {
                FactorySic.GetCbConceptocombRepository().Delete(ccombcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_CONCEPTOCOMB
        /// </summary>
        public CbConceptocombDTO GetByIdCbConceptocomb(int ccombcodi)
        {
            return FactorySic.GetCbConceptocombRepository().GetById(ccombcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_CONCEPTOCOMB
        /// </summary>
        public List<CbConceptocombDTO> ListCbConceptocombs()
        {
            return FactorySic.GetCbConceptocombRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbConceptocomb
        /// </summary>
        public List<CbConceptocombDTO> GetByCriteriaCbConceptocombs(int estcomcodi)
        {
            var lista = FactorySic.GetCbConceptocombRepository().GetByCriteria(estcomcodi).OrderBy(x => x.Ccombnumeral).ToList();

            foreach (var reg in lista)
            {
                FormatearCbConceptocomb(reg);
            }

            return lista;
        }

        private void FormatearCbConceptocomb(CbConceptocombDTO entity)
        {
            int p = (int)entity.Ccombnumeral / 100;
            int resto = (int)entity.Ccombnumeral % 100;
            entity.Numeral = p.ToString() + "." + ((resto > 9 || resto == 0) ? resto.ToString() : "0" + resto.ToString());
            entity.NumeralPadre = p;
            entity.CcombestadoDesc = entity.Ccombestado == 1 ? "ACTIVO" : "BAJA";
            entity.Ccombunidad = entity.Ccombunidad ?? "";
        }

        #endregion

        #region Métodos Tabla CB_DATOS

        /// <summary>
        /// Inserta un registro de la tabla CB_DATOS
        /// </summary>
        public int SaveCbDatos(CbDatosDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbDatosRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_DATOS
        /// </summary>
        public void UpdateCbDatos(CbDatosDTO entity)
        {
            try
            {
                FactorySic.GetCbDatosRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_DATOS
        /// </summary>
        public void DeleteCbDatos(int cbevdacodi)
        {
            try
            {
                FactorySic.GetCbDatosRepository().Delete(cbevdacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_DATOS
        /// </summary>
        public CbDatosDTO GetByIdCbDatos(int cbevdacodi)
        {
            return FactorySic.GetCbDatosRepository().GetById(cbevdacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_DATOS
        /// </summary>
        public List<CbDatosDTO> ListCbDatossByCbCentcodi(string cbcentcodis)
        {
            var lista = FactorySic.GetCbDatosRepository().List(cbcentcodis);

            foreach (var obj in lista)
            {
                if (!string.IsNullOrEmpty(obj.Cbevdavalor)) // && (obj.Cbevdatipo == "NUMERO" || obj.Cbevdatipo == "FORMULA")
                {
                    Int32.TryParse(obj.Cbevdavalor, out int valorEntero);
                    obj.ValorEntero = valorEntero;

                    decimal.TryParse(obj.Cbevdavalor, out decimal valorDecimal);
                    obj.Valor = valorDecimal;
                }
            }

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbDatos
        /// </summary>
        public List<CbDatosDTO> GetByCriteriaCbDatoss(string cbvercodis, string ccombcodis)
        {
            if (string.IsNullOrEmpty(cbvercodis))
                return new List<CbDatosDTO>();

            return FactorySic.GetCbDatosRepository().GetByCriteria(cbvercodis, ccombcodis);
        }

        #endregion

        #region Métodos Tabla CB_DATOS_DETALLE

        /// <summary>
        /// Inserta un registro de la tabla CB_DATOS_DETALLE
        /// </summary>
        public int SaveCbDatosDetalle(CbDatosDetalleDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbDatosDetalleRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_DATOS_DETALLE
        /// </summary>
        public void UpdateCbDatosDetalle(CbDatosDetalleDTO entity)
        {
            try
            {
                FactorySic.GetCbDatosDetalleRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_DATOS_DETALLE
        /// </summary>
        public void DeleteCbDatosDetalle(int cbdetcodi)
        {
            try
            {
                FactorySic.GetCbDatosDetalleRepository().Delete(cbdetcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_DATOS_DETALLE
        /// </summary>
        public CbDatosDetalleDTO GetByIdCbDatosDetalle(int cbdetcodi)
        {
            return FactorySic.GetCbDatosDetalleRepository().GetById(cbdetcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_DATOS_DETALLE
        /// </summary>
        public List<CbDatosDetalleDTO> ListCbDatosDetalles()
        {
            return FactorySic.GetCbDatosDetalleRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbDatosDetalle
        /// </summary>
        public List<CbDatosDetalleDTO> GetByCriteriaCbDatosDetalles(int cbvercodi)
        {
            var lista = FactorySic.GetCbDatosDetalleRepository().GetByCriteria(cbvercodi);

            foreach (var reg in lista)
                FormatearCbDatosDetalleDTO(reg);

            return lista;
        }


        private void FormatearCbDatosDetalleDTO(CbDatosDetalleDTO reg)
        {
            if (reg.Cbdetfechaemision != null)
                reg.CbdetfechaemisionDesc = reg.Cbdetfechaemision.Value.ToString(ConstantesAppServicio.FormatoFecha);
        }

        #endregion

        #region Métodos Tabla CB_ENVIO

        /// <summary>
        /// Inserta un registro de la tabla CB_ENVIO
        /// </summary>
        public int SaveCbEnvio(CbEnvioDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                entity.Cbenvtipoenvio = entity.Cbenvtipoenvio ?? ConstantesCombustibles.GuardadoOficial;
                return FactorySic.GetCbEnvioRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_ENVIO
        /// </summary>
        public void UpdateCbEnvio(CbEnvioDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                entity.Cbenvtipoenvio = entity.Cbenvtipoenvio ?? ConstantesCombustibles.GuardadoOficial;
                FactorySic.GetCbEnvioRepository().Update(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_ENVIO
        /// </summary>
        public CbEnvioDTO GetByIdCbEnvio(int cbenvcodi)
        {
            CbEnvioDTO reg = FactorySic.GetCbEnvioRepository().GetById(cbenvcodi);
            List<CbVersionDTO> listaVersion = GetByCriteriaCbVersions(cbenvcodi.ToString());
            List<CbLogenvioDTO> listaLog = GetByCriteriaCbLogenvios(cbenvcodi);

            FormatearCbEnvio(reg, listaVersion, listaLog);

            return reg;
        }

        /// <summary>
        /// verifica si existe envio para una fecha de vigencia
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="estcomcodi"></param>
        /// <param name="fechaVigencia"></param>
        /// <param name="tipoCentral"></param>
        /// <returns></returns>
        public bool ExisteSolicitudXTipoCombustibleYVigenciaYTipocentralCbEnvio(int idEnvio, int emprcodi, int estcomcodi, DateTime fechaVigencia, string tipoCentral, int estenvcodi
                                                                            , out int idEnvioExistente)
        {
            idEnvioExistente = 0;

            CbEnvioDTO reg = FactorySic.GetCbEnvioRepository().GetByTipoCombustibleYVigenciaYTipocentral(emprcodi, estcomcodi, fechaVigencia, tipoCentral, estenvcodi);
            if (reg == null)
                return false;
            else
            {
                idEnvioExistente = reg.Cbenvcodi;

                //si el envio existente ya esta en bd entonces no considerarlo
                if (idEnvio > 0 && reg.Cbenvcodi == idEnvio)
                    return false;

                return true;
            }
        }

        /// <summary>
        /// Lista los envios de acuerdo al numero de pagina
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="equicodis"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="nroPaginas"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        public List<CbEnvioDTO> ListaCbEnviosxFiltroPaginado(string emprcodi, string equicodis, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, int nroPaginas, int pageSize)
        {
            var lista = FactorySic.GetCbEnvioRepository().ListXFiltroPaginado(emprcodi, equicodis, estenvcodi, fechaInicio, fechaFin, nroPaginas, pageSize);
            foreach (var reg in lista)
            {
                FormatearCbEnvio(reg, new List<CbVersionDTO>(), new List<CbLogenvioDTO>());
            }

            return lista;
        }

        /// <summary>
        /// Obtiene el total de envios en un periodo
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="equicodis"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public int GetTotalEnvio(string emprcodi, string equicodis, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, string tipoCombustible, string omitirTipoCarga)
        {
            return FactorySic.GetCbEnvioRepository().ObtenerTotalXFiltro(emprcodi, equicodis, estenvcodi, fechaInicio, fechaFin, tipoCombustible, omitirTipoCarga);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbEnvio
        /// </summary>
        public List<CbEnvioDTO> GetByCriteriaCbEnvios(string emprcodi, string equicodis, DateTime fechaInicio, DateTime fechaFin)
        {
            var lista = FactorySic.GetCbEnvioRepository().GetByCriteria(emprcodi, equicodis, fechaInicio, fechaFin).OrderByDescending(x => x.Cbenvfecsolicitud).ToList();
            foreach (var reg in lista)
                FormatearCbEnvio(reg, new List<CbVersionDTO>(), new List<CbLogenvioDTO>());

            return lista;
        }

        /// <summary>
        /// Listar envios por estado y fuente de energia
        /// </summary>
        /// <param name="estenvcodis"></param>
        /// <param name="equicodis"></param>
        /// <param name="fenergcodi"></param>
        /// <returns></returns>
        public List<CbEnvioDTO> ListXEstado(string estenvcodis, string equicodis, int fenergcodi = -1)
        {
            var lista = FactorySic.GetCbEnvioRepository().ListXEstado(estenvcodis, equicodis, fenergcodi);
            foreach (var reg in lista)
                FormatearCbEnvio(reg, new List<CbVersionDTO>(), new List<CbLogenvioDTO>());

            return lista;
        }

        private void FormatearCbEnvio(CbEnvioDTO item, List<CbVersionDTO> listaVersion, List<CbLogenvioDTO> listaLog)
        {
            var plazo = "En Plazo";
            var colorPlazo = "blue";

            if (item.Envioplazo == "F")
            {
                plazo = "Fuera de Plazo";
                colorPlazo = "red";
            }

            item.Envioplazo = plazo;
            item.ColorEnvioplazo = colorPlazo;
            item.Estenvcolor = GetColorExtEstado(item.Estenvcodi);
            item.Estenvnomb = GetDescripcionExtEstado(item.Estenvcodi);
            item.CbenvfecsolicitudDesc = item.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull);
            item.CbenvfecmodificacionDesc = item.Cbenvfecmodificacion != null ? item.Cbenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;
            item.FechaAprobacionDesc = item.Cbenvfecaprobacion != null ? item.Cbenvfecaprobacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;
            item.FechaVigenciaDesc = item.Cbenvfecpreciovigente != null ? item.Cbenvfecpreciovigente.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;

            item.CbenvfecfinrptasolicitudDesc = item.Cbenvfecfinrptasolicitud.ToString(ConstantesAppServicio.FormatoFechaFull2);
            item.CbenvfecfinsubsanarobsDesc = item.Cbenvfecfinsubsanarobs != null ? item.Cbenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.CbenvfecamplDesc = item.Cbenvfecampl != null ? item.Cbenvfecampl.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;
            item.FechaDesaprobacionDesc = item.Estenvcodi == ConstantesCombustibles.EstadoDesaprobado ? item.CbenvfecmodificacionDesc : string.Empty;

            //
            item.EsEnvioAprobado = item.Estenvcodi == ConstantesCombustibles.EstadoAprobado;

            ////////////////////////////////////////////////////////////////////////////////////////////////////
            if (item.Estcomcodi != ConstantesCombustibles.EstcomcodiGas)
            {
                //es editable mientras no termine la fecha fin para subsanar
                if ((item.Estenvcodi == ConstantesCombustibles.EstadoObservado))
                {
                    DateTime? fechaMaxPermitida = null;

                    //si venció la ampliación cambiar de estado
                    if (item.Cbenvfecampl != null)
                    {
                        //ampliacion excepcional por parte del administrador COES
                        if (DateTime.Now < item.Cbenvfecampl)
                            fechaMaxPermitida = item.Cbenvfecampl;
                    }
                    else
                    {
                        //plazo segun el PR31
                        if (DateTime.Now < item.Cbenvfecfinsubsanarobs)
                        {
                            fechaMaxPermitida = item.Cbenvfecfinsubsanarobs;
                        }
                    }

                    if (DateTime.Now < fechaMaxPermitida)
                        item.EsEditableExtranet = true;
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////
                if (item.Estenvcodi == ConstantesCombustibles.EstadoSolicitud)
                    item.EsEditableIntranet = true;
                if (item.Estenvcodi == ConstantesCombustibles.EstadoObservado || item.Estenvcodi == ConstantesCombustibles.EstadoSubsanacionObs)
                {
                    item.EsEditableIntranet = true;
                }
            }

            #region CCGAS.PR31

            if (item.Estcomcodi == ConstantesCombustibles.EstcomcodiGas)
            {
                DateTime fechaActual = ObtenerFechaSistemaPR31(item.Cbenvcodi);

                //EXTRANET es editable el mismo dia solo para centrales existentes, las nuevas  no seran editables desde extranet para el mismo dia
                if (item.Cbenvtipocentral == ConstantesCombustibles.CentralExistente)
                {
                    if (item.Estenvcodi == ConstantesCombustibles.EstadoSolicitud && fechaActual.Date == item.Cbenvfecsolicitud.Date)
                    {
                        item.EsEditableExtranet = true;
                    }
                    else
                    {
                        item.EsEditableExtranet = false;
                    }
                }
                else
                {
                    if (item.Cbenvtipocentral == ConstantesCombustibles.CentralNueva)
                    {
                        if (item.Cbenvtipoenvio == ConstantesCombustibles.GuardadoTemporal)
                            item.EsEditableExtranet = true;
                        else
                            item.EsEditableExtranet = false;
                    }
                }

                //es editable mientras no termine la fecha fin para subsanar
                if ((item.Estenvcodi == ConstantesCombustibles.EstadoObservado))
                {
                    DateTime? fechaMaxPermitida = null;

                    //si venció la ampliación cambiar de estado
                    if (item.Cbenvfecampl != null)
                    {
                        //ampliacion excepcional por parte del administrador COES
                        if (fechaActual < item.Cbenvfecampl)
                            fechaMaxPermitida = item.Cbenvfecampl;
                    }
                    else
                    {
                        //plazo segun el PR31
                        if (fechaActual < item.Cbenvfecfinsubsanarobs)
                        {
                            fechaMaxPermitida = item.Cbenvfecfinsubsanarobs;
                        }
                    }

                    if (fechaActual < fechaMaxPermitida)
                        item.EsEditableExtranet = true;
                }

                //INTRANET, si son nuevas siempre sera editable. si es existente debera pasar hasta que termine el dia
                if (item.Cbenvtipocentral == ConstantesCombustibles.CentralExistente)
                {
                    if (item.Estenvcodi == ConstantesCombustibles.EstadoSolicitud && item.Cbenvfecsolicitud.Date < fechaActual.Date)
                        item.EsEditableIntranet = true;
                    else
                        item.EsEditableIntranet = false;
                }
                else
                {
                    //central nueva
                    if (item.Estenvcodi == ConstantesCombustibles.EstadoSolicitud)
                    {
                        item.EsEditableIntranet = true;
                    }
                }

                if (item.Estenvcodi == ConstantesCombustibles.EstadoObservado || item.Estenvcodi == ConstantesCombustibles.EstadoSubsanacionObs)
                {
                    item.EsEditableIntranet = true;
                }

                //descripcion de tipo de central
                item.CbenvtipocentralDesc = item.Cbenvtipocentral == ConstantesCombustibles.CentralExistente ? "Existente" : "Nueva";

                //Cuando solicita asignacion es editable
                if (item.Estenvcodi == ConstantesCombustibles.EstadoSolicitudAsignacion)
                {
                    item.EsEditableIntranet = true;
                }

                if (item.Estcomcodi == ConstantesCombustibles.EstcomcodiGas)
                    item.Fenergnomb = "GASEOSO";

                item.MesVigenciaDesc = item.Cbenvfechaperiodo != null ? item.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoMesAnio) : string.Empty;
                item.FechaAsignacionDesc = item.Estenvcodi == ConstantesCombustibles.EstadoAsignado ? item.CbenvfecmodificacionDesc : string.Empty;
                item.CostoVigenteDesdeDesc = item.FechaAsignacionDesc != "" ? (new DateTime(item.Cbenvfecmodificacion.Value.Year, item.Cbenvfecmodificacion.Value.Month, 1)).ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
                item.EstadoDesc = item.Estenvnomb;
                item.CbenvfecsolicitudDateDesc = item.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFecha);
                item.CbenvfecsistemaDesc = item.Cbenvfecsistema != null ? item.Cbenvfecsistema.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";

                //Cancelacion de envio: Para CExistentes desde el 21 00:00 ya no se podrá cancelar, para CNuevas si podran cancelarse cualquier dia
                item.EsCancelable = false;
                if (item.Cbenvtipocentral == ConstantesCombustibles.CentralExistente)
                {
                    if (item.Estenvcodi == ConstantesCombustibles.EstadoSolicitud)
                    {
                        item.EsCancelable = item.EsEditableExtranet;

                        var keyConfig = ConfigurationManager.AppSettings[ConstantesCombustibles.KeyFlagPR31ValidarCentralExistente];
                        if (keyConfig == "S")
                        {
                            if (fechaActual.Date.Day >= 21)
                            {
                                item.EsCancelable = false;
                                if (item.Estenvcodi == ConstantesCombustibles.EstadoSolicitud
                                    && item.Cbenvtipoenvio == ConstantesCombustibles.GuardadoTemporal) //si es envio temporal que todavia no tiene solicitud enviada por agente
                                {
                                    item.EsEditableExtranet = false;
                                }
                            }
                        }
                    }
                }

                //obtener código de la última versión
                var listaHist = listaVersion.Where(x => x.Cbenvcodi == item.Cbenvcodi).OrderByDescending(x => x.Cbvernumversion).ToList();
                var objUltimaVersion = listaHist.FirstOrDefault();
                if (objUltimaVersion != null)
                {
                    item.Cbvercodi = objUltimaVersion.Cbvercodi;
                    item.Cbverusucreacion = objUltimaVersion.Cbverusucreacion;
                }

                item.TipoOpcionAsignado = string.Empty;
                if (item.Estenvcodi == ConstantesCombustibles.EstadoSolicitudAsignacion || item.Estenvcodi == ConstantesCombustibles.EstadoAsignado
                    || listaLog.Any(x => x.Estenvcodi == ConstantesCombustibles.EstadoSolicitudAsignacion))
                    item.TipoOpcionAsignado = ConstantesCombustibles.OpcionNuevaSolicitoAsignacion;

                if (item.Estenvcodi == ConstantesCombustibles.EstadoObservado || item.Estenvcodi == ConstantesCombustibles.EstadoCancelado) item.EsEditableIntranet = false;
                if (item.Estenvcodi == ConstantesCombustibles.EstadoSubsanacionObs) item.EsEditableIntranet = true;
                if (item.Estenvcodi == ConstantesCombustibles.EstadoAprobado || item.Estenvcodi == ConstantesCombustibles.EstadoAprobadoParcialmente) item.EsEditableIntranet = false;
            }
            #endregion
        }

        #endregion

        #region Métodos Tabla CB_LOGENVIO

        /// <summary>
        /// Inserta un registro de la tabla CB_LOGENVIO
        /// </summary>
        public int SaveCbLogenvio(CbLogenvioDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbLogenvioRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_LOGENVIO
        /// </summary>
        public void UpdateCbLogenvio(CbLogenvioDTO entity)
        {
            try
            {
                FactorySic.GetCbLogenvioRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_LOGENVIO
        /// </summary>
        public void DeleteCbLogenvio(int logenvcodi)
        {
            try
            {
                FactorySic.GetCbLogenvioRepository().Delete(logenvcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_LOGENVIO
        /// </summary>
        public CbLogenvioDTO GetByIdCbLogenvio(int logenvcodi)
        {
            return FactorySic.GetCbLogenvioRepository().GetById(logenvcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_LOGENVIO
        /// </summary>
        public List<CbLogenvioDTO> ListCbLogenvios()
        {
            return FactorySic.GetCbLogenvioRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbLogenvio
        /// </summary>
        public List<CbLogenvioDTO> GetByCriteriaCbLogenvios(int cbenvcodi)
        {
            var lista = FactorySic.GetCbLogenvioRepository().GetByCriteria(cbenvcodi).OrderByDescending(x => x.Logenvfeccreacion).ToList();

            foreach (var reg in lista)
                FormatearCbLogenvio(reg);

            return lista;
        }

        /// <summary>
        /// obtener ultimo log del envio
        /// </summary>
        /// <param name="cbenvcodi"></param>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        public CbLogenvioDTO GetUltimoCbLogEnvio(int cbenvcodi, int estenvcodi)
        {
            var listaHist = GetByCriteriaCbLogenvios(cbenvcodi).OrderByDescending(x => x.Logenvfeccreacion).ToList();
            if (estenvcodi > 0)
                listaHist = listaHist.Where(x => x.Estenvcodi == estenvcodi).ToList();

            return listaHist.FirstOrDefault();
        }

        /// <summary>
        /// formatear CbLogenvioDTO
        /// </summary>
        /// <param name="item"></param>
        private void FormatearCbLogenvio(CbLogenvioDTO item)
        {
            item.LogenvfeccreacionDesc = item.Logenvfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
            item.Estenvnomb = GetDescripcionExtEstado(item.Estenvcodi);
            item.LogenvfecrecepcionDesc = item.Logenvfecrecepcion != null ? item.Logenvfecrecepcion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            item.LogenvfeclecturaDesc = item.Logenvfeclectura != null ? item.Logenvfeclectura.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            item.Logenvusurecepcion = item.Logenvusurecepcion != null ? item.Logenvusurecepcion : "";
            item.Logenvusulectura = item.Logenvusulectura != null ? item.Logenvusulectura : "";
            item.Logenvobservacion = item.Logenvobservacion ?? "";
        }

        #endregion

        #region Métodos Tabla CB_VERSION

        /// <summary>
        /// Inserta un registro de la tabla CB_VERSION
        /// </summary>
        public int SaveCbVersion(CbVersionDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbVersionRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_VERSION
        /// </summary>
        public void UpdateCbVersion(CbVersionDTO entity)
        {
            try
            {
                FactorySic.GetCbVersionRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_VERSION
        /// </summary>
        public void DeleteCbVersion(int cbvercodi)
        {
            try
            {
                FactorySic.GetCbVersionRepository().Delete(cbvercodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_VERSION
        /// </summary>
        public CbVersionDTO GetByIdCbVersion(int cbvercodi)
        {
            return FactorySic.GetCbVersionRepository().GetById(cbvercodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_VERSION
        /// </summary>
        public List<CbVersionDTO> ListCbVersions()
        {
            return FactorySic.GetCbVersionRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbVersion
        /// </summary>
        public List<CbVersionDTO> GetByCriteriaCbVersions(string cbenvcodi)
        {
            if (string.IsNullOrEmpty(cbenvcodi))
                return new List<CbVersionDTO>();

            List<CbVersionDTO> lstTemp = FactorySic.GetCbVersionRepository().GetByCriteria(cbenvcodi);
            List<CbVersionDTO> lstSalida = DarFormatoCbVersion(lstTemp);

            return lstSalida;
        }

        /// <summary>
        /// Da formato a variables del listado
        /// </summary>
        /// <param name="cbenvcodi"></param>
        /// <returns></returns>
        public List<CbVersionDTO> DarFormatoCbVersion(List<CbVersionDTO> lstTemp)
        {
            List<CbVersionDTO> lstSalida = new List<CbVersionDTO>();
            foreach (var item in lstTemp)
            {
                item.CbverfeccreacionDesc = item.Cbverfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull);
                item.CbveroperacionDesc = item.Cbveroperacion != null ? (item.Cbveroperacion == 1 ? "Exitosa" : (item.Cbveroperacion == 2 ? "Con Error" : "")) : "";
                item.CbverconexionDesc = item.Cbverconexion != null ? (item.Cbveroperacion == 1 ? "Con conexión" : (item.Cbveroperacion == 2 ? "Sin conexión" : "")) : "";
                lstSalida.Add(item);
            }

            return lstSalida;
        }

        private CbVersionDTO GetUltimoCbVersion(int cbenvcodi)
        {
            var listaHist = GetByCriteriaCbVersions(cbenvcodi.ToString()).OrderByDescending(x => x.Cbvernumversion).ToList();

            return listaHist.FirstOrDefault();
        }

        private int GetNumeroVersionSiguiente(int cbenvcodi)
        {
            if (cbenvcodi <= 0)
                return 1;

            var listaHist = GetByCriteriaCbVersions(cbenvcodi.ToString());

            var numversion = listaHist.Any() ? listaHist.Max(x => x.Cbvernumversion) + 1 : 1;

            return numversion;
        }

        public List<CbVersionDTO> GetListaVersionesXEnvio(int cbenvcodi, bool ambienteIntranet)
        {
            var listaHist = GetByCriteriaCbVersions(cbenvcodi.ToString()).OrderByDescending(x => x.Cbvernumversion).ToList();

            foreach (var obj in listaHist) obj.CbverfeccreacionDesc = obj.Cbverfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);

            //caso extranet
            if (!ambienteIntranet)
            {
                listaHist = listaHist.Where(x => x.Cbverusucreacion.Contains("@")).ToList();

                int num = listaHist.Count;
                foreach (var objVer in listaHist)
                {
                    objVer.Cbvernumversion = num;
                    num--;
                }
            }

            return listaHist;
        }

        #endregion

        #region Métodos Tabla CB_CENTRALXFENERG

        /// <summary>
        /// Inserta un registro de la tabla CB_CENTRALXFENERG
        /// </summary>
        public void SaveCbCentralxfenerg(CbCentralxfenergDTO entity)
        {
            try
            {
                FactorySic.GetCbCentralxfenergRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_CENTRALXFENERG
        /// </summary>
        public void UpdateCbCentralxfenerg(CbCentralxfenergDTO entity)
        {
            try
            {
                FactorySic.GetCbCentralxfenergRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_CENTRALXFENERG
        /// </summary>
        public void DeleteCbCentralxfenerg(int cbcxfecodi)
        {
            try
            {
                FactorySic.GetCbCentralxfenergRepository().Delete(cbcxfecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_CENTRALXFENERG
        /// </summary>
        public CbCentralxfenergDTO GetByIdCbCentralxfenerg(int cbcxfecodi)
        {
            return FactorySic.GetCbCentralxfenergRepository().GetById(cbcxfecodi);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_CENTRALXFENERG
        /// </summary>
        public CbCentralxfenergDTO GetByFenergYGrupocodi(int fenergcodi, int grupocodi)
        {
            return FactorySic.GetCbCentralxfenergRepository().GetByFenergYGrupocodi(fenergcodi, grupocodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_CENTRALXFENERG
        /// </summary>
        public List<CbCentralxfenergDTO> ListCbCentralxfenergs()
        {
            return FactorySic.GetCbCentralxfenergRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbCentralxfenerg
        /// </summary>
        public List<CbCentralxfenergDTO> GetByCriteriaCbCentralxfenergs(string estcomcodis)
        {
            var lista = FactorySic.GetCbCentralxfenergRepository().GetByCriteria(estcomcodis);

            foreach (var reg in lista)
                reg.Agrupcodi = GetAgrupcodiByFenergcodi(reg.Fenergcodi);

            return lista;
        }

        #endregion

        #region Métodos Tabla CB_DATOSXCENTRALXFENERG

        /// <summary>
        /// Inserta un registro de la tabla CB_DATOSXCENTRALXFENERG
        /// </summary>
        public void SaveCbDatosxcentralxfenerg(CbDatosxcentralxfenergDTO entity)
        {
            try
            {
                FactorySic.GetCbDatosxcentralxfenergRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_DATOSXCENTRALXFENERG
        /// </summary>
        public void UpdateCbDatosxcentralxfenerg(CbDatosxcentralxfenergDTO entity)
        {
            try
            {
                FactorySic.GetCbDatosxcentralxfenergRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_DATOSXCENTRALXFENERG
        /// </summary>
        public void DeleteCbDatosxcentralxfenerg(int cbdatcodi)
        {
            try
            {
                FactorySic.GetCbDatosxcentralxfenergRepository().Delete(cbdatcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_DATOSXCENTRALXFENERG
        /// </summary>
        public CbDatosxcentralxfenergDTO GetByIdCbDatosxcentralxfenerg(int cbdatcodi)
        {
            return FactorySic.GetCbDatosxcentralxfenergRepository().GetById(cbdatcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_DATOSXCENTRALXFENERG
        /// </summary>
        public List<CbDatosxcentralxfenergDTO> ListCbDatosxcentralxfenergs()
        {
            return FactorySic.GetCbDatosxcentralxfenergRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbDatosxcentralxfenerg
        /// </summary>
        public List<CbDatosxcentralxfenergDTO> GetByCriteriaCbDatosxcentralxfenergs(int cbcxfecodi, string ccombcodis)
        {
            return FactorySic.GetCbDatosxcentralxfenergRepository().GetByCriteria(cbcxfecodi, ccombcodis);
        }

        #endregion

        #region Métodos Tabla CB_ENVIORELCV

        /// <summary>
        /// Inserta un registro de la tabla CB_ENVIORELCV
        /// </summary>
        public void SaveCbEnviorelcv(CbEnviorelcvDTO entity)
        {
            try
            {
                FactorySic.GetCbEnviorelcvRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla CB_ENVIORELCV
        /// </summary>
        public void SaveCbEnviorelcvTransaccional(CbEnviorelcvDTO entity, IDbConnection connection, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetCbEnviorelcvRepository().SaveTransaccional(entity, connection, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_ENVIORELCV
        /// </summary>
        public void UpdateCbEnviorelcv(CbEnviorelcvDTO entity)
        {
            try
            {
                FactorySic.GetCbEnviorelcvRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_ENVIORELCV
        /// </summary>
        public void DeleteCbEnviorelcv(int cbcvcodi)
        {
            try
            {
                FactorySic.GetCbEnviorelcvRepository().Delete(cbcvcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_ENVIORELCV
        /// </summary>
        public CbEnviorelcvDTO GetByIdCbEnviorelcv(int cbcvcodi)
        {
            return FactorySic.GetCbEnviorelcvRepository().GetById(cbcvcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_ENVIORELCV
        /// </summary>
        public List<CbEnviorelcvDTO> ListCbEnviorelcvs()
        {
            return FactorySic.GetCbEnviorelcvRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbEnviorelcv
        /// </summary>
        public List<CbEnviorelcvDTO> GetByCriteriaCbEnviorelcvs()
        {
            return FactorySic.GetCbEnviorelcvRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla CB_FICHA

        /// <summary>
        /// Inserta un registro de la tabla CB_FICHA
        /// </summary>
        public int SaveCbFicha(CbFichaDTO entity)
        {
            try
            {
                return FactorySic.GetCbFichaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_FICHA
        /// </summary>
        public void UpdateCbFicha(CbFichaDTO entity)
        {
            try
            {
                FactorySic.GetCbFichaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_FICHA
        /// </summary>
        public CbFichaDTO GetByIdCbFicha(int cbftcodi)
        {
            var reg = FactorySic.GetCbFichaRepository().GetById(cbftcodi);
            FormatearCbFicha(reg);
            ListarSeccionEItemsXPlantilla(reg, cbftcodi);
            reg.ItemCostoOsinergmin = new CbFichaItemDTO() { Ccombcodi = ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso };

            return reg;
        }

        private void ListarSeccionEItemsXPlantilla(CbFichaDTO obj, int cbftcodi)
        {
            var listaBD = GetByCriteriaCbFichaItems(cbftcodi);
            var listaConceptoBD = GetByCriteriaCbConceptocombs(ConstantesCombustibles.EstcomcodiGas);

            List<CbFichaItemDTO> listaItem = listaBD.Where(x => x.Cbftitesseccion == ConstantesAppServicio.SI).OrderBy(x => x.Cbftitnumeral).ToList();

            foreach (var regSeccion in listaItem)
            {
                regSeccion.EsSeccion = true;
                var parteEntero = regSeccion.Cbftitnumeral.Split('.')[0];

                regSeccion.ListaItemXSeccion = listaBD.Where(x => x.Cbftitesseccion != ConstantesAppServicio.SI && x.Cbftitnumeral.StartsWith(parteEntero + "."))
                                                .OrderBy(x => x.Cbftitnumeral).ToList();

                regSeccion.ListaOpcionDesplegable = new List<string>();
                regSeccion.ListaOpcionNumcolDesplegableMesActual = new int[4];
                regSeccion.ListaOpcionNumcolDesplegableMesAnterior = new int[4];

                //por cada item 
                foreach (var objItem in regSeccion.ListaItemXSeccion)
                {
                    if (objItem.Cbftittipodato == "DESPLEGABLE")
                    {
                        if (!string.IsNullOrEmpty(objItem.Cbftitceldatipo1)) regSeccion.ListaOpcionDesplegable.Add(objItem.Cbftitceldatipo1);
                        if (!string.IsNullOrEmpty(objItem.Cbftitceldatipo2)) regSeccion.ListaOpcionDesplegable.Add(objItem.Cbftitceldatipo2);
                        if (!string.IsNullOrEmpty(objItem.Cbftitceldatipo3)) regSeccion.ListaOpcionDesplegable.Add(objItem.Cbftitceldatipo3);
                        if (!string.IsNullOrEmpty(objItem.Cbftitceldatipo4)) regSeccion.ListaOpcionDesplegable.Add(objItem.Cbftitceldatipo4);

                        regSeccion.ConcepcodiDesplegable = objItem.Ccombcodi ?? 0;
                    }

                    objItem.TieneCheckConf = objItem.Cbftitconfidencial == "S";
                }
                //foreach (var objn in regSeccion.ListaOpcionDesplegable)
                //{
                //    regSeccion.ListaOpcionNumcolDesplegableMesActual.Add(0); //inicializar
                //    regSeccion.ListaOpcionNumcolDesplegableMesAnterior.Add(0); //inicializar
                //}
                regSeccion.TieneListaDesplegable = regSeccion.ListaOpcionDesplegable.Any();

                //verificar quienes stienen opción de check
                var tieneCeheckConf = regSeccion.ListaItemXSeccion.Where(x => x.Cbftitconfidencial == "S").ToList().Any();
                regSeccion.TieneCheckConf = tieneCeheckConf;

                var listaItemCabecera = new List<CbFichaItemDTO>();
                if (regSeccion.Cbftitcnp0 != null) listaItemCabecera.Add(new CbFichaItemDTO() { Ccombcodi = regSeccion.Cbftitcnp0.Value });
                if (regSeccion.Cbftitcnp1 != null) listaItemCabecera.Add(new CbFichaItemDTO() { Ccombcodi = regSeccion.Cbftitcnp1.Value });
                if (regSeccion.Cbftitcnp2 != null) listaItemCabecera.Add(new CbFichaItemDTO() { Ccombcodi = regSeccion.Cbftitcnp2.Value });
                if (regSeccion.Cbftitcnp3 != null) listaItemCabecera.Add(new CbFichaItemDTO() { Ccombcodi = regSeccion.Cbftitcnp3.Value });
                if (regSeccion.Cbftitcnp4 != null) listaItemCabecera.Add(new CbFichaItemDTO() { Ccombcodi = regSeccion.Cbftitcnp4.Value });
                if (regSeccion.Cbftitcnp5 != null) listaItemCabecera.Add(new CbFichaItemDTO() { Ccombcodi = regSeccion.Cbftitcnp5.Value });
                if (regSeccion.Cbftitcnp6 != null) listaItemCabecera.Add(new CbFichaItemDTO() { Ccombcodi = regSeccion.Cbftitcnp6.Value });

                foreach (var regTmp in listaItemCabecera)
                {
                    if (regTmp.Ccombcodi != null)
                    {
                        var objItemTmp = listaConceptoBD.Find(x => x.Ccombcodi == regTmp.Ccombcodi);
                        regTmp.Ccombnombre = (objItemTmp?.Ccombnombre) ?? "";
                    }
                }

                regSeccion.ListaItemCabXSeccion = listaItemCabecera;
            }

            obj.ListaSeccion = listaItem;
            obj.TotalItem = listaBD.Count();
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_FICHA
        /// </summary>
        public List<CbFichaDTO> ListCbFichas()
        {
            return FactorySic.GetCbFichaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbFicha
        /// </summary>
        public List<CbFichaDTO> GetByCriteriaCbFichas()
        {
            var lista = FactorySic.GetCbFichaRepository().GetByCriteria().OrderByDescending(x => x.Cbftfechavigencia).ToList();

            var objVigente = lista.FirstOrDefault(x => x.Cbftfechavigencia <= DateTime.Today);
            if (objVigente != null) objVigente.EsVigente = true;

            foreach (var obj in lista)
                FormatearCbFicha(obj);

            return lista;
        }

        private void FormatearCbFicha(CbFichaDTO reg)
        {
            reg.CbftfechavigenciaDesc = reg.Cbftfechavigencia.ToString(ConstantesAppServicio.FormatoFecha);
            reg.UltimaModificacionUsuarioDesc = reg.Cbftfecmodificacion != null ? reg.Cbftusumodificacion : reg.Cbftusucreacion;
            reg.UltimaModificacionFechaDesc = reg.Cbftfecmodificacion != null ? reg.Cbftfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Cbftfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);

            reg.EstadoActual = "Vigente";
            if (!reg.EsVigente)
            {
                reg.EstadoActual = reg.Cbftfechavigencia < DateTime.Today ? "Caduco" : "Entrará en Vigencia";
            }
        }

        #endregion

        #region Métodos Tabla CB_FICHA_ITEM

        /// <summary>
        /// Inserta un registro de la tabla CB_FICHA_ITEM
        /// </summary>
        public void SaveCbFichaItem(CbFichaItemDTO entity)
        {
            try
            {
                FactorySic.GetCbFichaItemRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_FICHA_ITEM
        /// </summary>
        public void UpdateCbFichaItem(CbFichaItemDTO entity)
        {
            try
            {
                FactorySic.GetCbFichaItemRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_FICHA_ITEM
        /// </summary>
        public void DeleteCbFichaItem(int cbftitcodi)
        {
            try
            {
                FactorySic.GetCbFichaItemRepository().Delete(cbftitcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_FICHA_ITEM
        /// </summary>
        public CbFichaItemDTO GetByIdCbFichaItem(int cbftitcodi)
        {
            return FactorySic.GetCbFichaItemRepository().GetById(cbftitcodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbFichaItem
        /// </summary>
        public List<CbFichaItemDTO> GetByCriteriaCbFichaItems(int cbftcodi)
        {
            var lista = FactorySic.GetCbFichaItemRepository().GetByCriteria(cbftcodi);

            foreach (var reg in lista)
                FormatearCbFichaItem(reg);

            return lista;
        }

        private void FormatearCbFichaItem(CbFichaItemDTO reg)
        {
            reg.Cbftitnombre = reg.Cbftitnombre ?? "";
            reg.Cbftitnumeral = reg.Cbftitnumeral ?? "";
            reg.Cbftitformula = reg.Cbftitformula ?? "";
            reg.Cbftitinstructivo = reg.Cbftitinstructivo ?? "";
            reg.Cbftitabrev = reg.Cbftitabrev ?? "";
            reg.Cbftitceldatipo1 = reg.Cbftitceldatipo1 ?? "";
            reg.Cbftitceldatipo2 = reg.Cbftitceldatipo2 ?? "";
            reg.Cbftitceldatipo3 = reg.Cbftitceldatipo3 ?? "";
            reg.Cbftitceldatipo4 = reg.Cbftitceldatipo4 ?? "";

            if (string.IsNullOrEmpty(reg.Cbftitnombre)) reg.Cbftitnombre = reg.Ccombnombre;
        }

        #endregion

        #region Métodos Tabla CB_ENVIO_CENTRAL

        /// <summary>
        /// Inserta un registro de la tabla CB_ENVIO_CENTRAL
        /// </summary>
        public int SaveCbEnvioCentral(CbEnvioCentralDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbEnvioCentralRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_ENVIO_CENTRAL
        /// </summary>
        public void UpdateCbEnvioCentral(CbEnvioCentralDTO entity)
        {
            try
            {
                FactorySic.GetCbEnvioCentralRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_ENVIO_CENTRAL
        /// </summary>
        public void DeleteCbEnvioCentral(int cbcentcodi)
        {
            try
            {
                FactorySic.GetCbEnvioCentralRepository().Delete(cbcentcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_ENVIO_CENTRAL
        /// </summary>
        public CbEnvioCentralDTO GetByIdCbEnvioCentral(int cbcentcodi)
        {
            return FactorySic.GetCbEnvioCentralRepository().GetById(cbcentcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_ENVIO_CENTRAL
        /// </summary>
        public List<CbEnvioCentralDTO> ListCbEnvioCentrals()
        {
            return FactorySic.GetCbEnvioCentralRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbEnvioCentral
        /// </summary>
        public List<CbEnvioCentralDTO> GetByCriteriaCbEnvioCentrals(int cbvercodi)
        {
            return FactorySic.GetCbEnvioCentralRepository().GetByCriteria(cbvercodi);
        }

        public List<CbEnvioCentralDTO> ListCbEnvioCentralsByEnvio(int idEnvio)
        {
            return FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(idEnvio);
        }

        public List<CbEnvioCentralDTO> ListCbEnvioCentralesConInfoEnviada(int mes, int anio)
        {
            return FactorySic.GetCbEnvioCentralRepository().GetCentralesConInfoEnviada(mes, anio);
        }

        public List<CbEnvioCentralDTO> ListarCbEnvioCentralUltimoEnvioXMes(int mes, int anio)
        {
            return FactorySic.GetCbEnvioCentralRepository().ListarCentralUltimoEnvioXMes(mes, anio);
        }

        public List<CbEnvioCentralDTO> ListarCbEnvioCentralUltimoEnvioXDato(string equicodis, DateTime fechaPeriodo, int ccombcodi, string valor)
        {
            return FactorySic.GetCbEnvioCentralRepository().ListarCentralUltimoEnvioXDato(equicodis, fechaPeriodo, ccombcodi, valor);
        }

        public List<CbEnvioCentralDTO> ListarCbEnvioCentralNuevaUltimoEnvioXDato(string equicodis, DateTime fechaPeriodo, int ccombcodi)
        {
            return FactorySic.GetCbEnvioCentralRepository().ListarCentralNuevaUltimoEnvioXDato(equicodis, fechaPeriodo, ccombcodi);
        }

        #endregion

        #region Métodos Tabla CB_OBS

        /// <summary>
        /// Inserta un registro de la tabla CB_OBS
        /// </summary>
        public int SaveCbObs(CbObsDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbObsRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_OBS
        /// </summary>
        public void UpdateCbObs(CbObsDTO entity)
        {
            try
            {
                FactorySic.GetCbObsRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_OBS
        /// </summary>
        public void DeleteCbObs(int cbobscodi)
        {
            try
            {
                FactorySic.GetCbObsRepository().Delete(cbobscodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_OBS
        /// </summary>
        public CbObsDTO GetByIdCbObs(int cbobscodi)
        {
            return FactorySic.GetCbObsRepository().GetById(cbobscodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_OBS
        /// </summary>
        public List<CbObsDTO> ListCbObssByCbCentcodi(string cbcentcodis)
        {
            return FactorySic.GetCbObsRepository().List(cbcentcodis);
        }

        public List<CbObsDTO> ListCbObssByCbvercodi(int cbvercodi)
        {
            return FactorySic.GetCbObsRepository().ListByCbvercodi(cbvercodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbObs
        /// </summary>
        public List<CbObsDTO> GetByCriteriaCbObss()
        {
            return FactorySic.GetCbObsRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla CB_OBSXARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla CB_OBSXARCHIVO
        /// </summary>
        public int SaveCbObsxarchivo(CbObsxarchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbObsxarchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_OBSXARCHIVO
        /// </summary>
        public void UpdateCbObsxarchivo(CbObsxarchivoDTO entity)
        {
            try
            {
                FactorySic.GetCbObsxarchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_OBSXARCHIVO
        /// </summary>
        public void DeleteCbObsxarchivo(int cbobsacodi)
        {
            try
            {
                FactorySic.GetCbObsxarchivoRepository().Delete(cbobsacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_OBSXARCHIVO
        /// </summary>
        public CbObsxarchivoDTO GetByIdCbObsxarchivo(int cbobsacodi)
        {
            return FactorySic.GetCbObsxarchivoRepository().GetById(cbobsacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_OBSXARCHIVO
        /// </summary>
        public List<CbObsxarchivoDTO> ListCbObsxarchivosByCbCentcodi(string cbcentcodis)
        {
            return FactorySic.GetCbObsxarchivoRepository().List(cbcentcodis);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_OBSXARCHIVO
        /// </summary>
        public List<CbObsxarchivoDTO> ListCbObsxarchivosByCbvercodi(int cbvercodi)
        {
            return FactorySic.GetCbObsxarchivoRepository().ListByCbvercodi(cbvercodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbObsxarchivo
        /// </summary>
        public List<CbObsxarchivoDTO> GetByCriteriaCbObsxarchivos()
        {
            return FactorySic.GetCbObsxarchivoRepository().GetByCriteria();
        }

        #endregion


        #region Métodos Tabla CB_REPORTE_CENTRAL

        /// <summary>
        /// Devuelve el id disponible en la BD
        /// </summary>
        /// <returns></returns>
        public int getIdReporteCentralDisponible()
        {
            try
            {
                return FactorySic.GetCbReporteCentralRepository().getIdDisponible();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla CB_REPORTE_CENTRAL
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="tran"></param>
        /// <returns></returns>
        public void SaveCbReporteCentralTransaccional(CbReporteCentralDTO entity, IDbConnection conn, IDbTransaction tran)
        {
            try
            {
                FactorySic.GetCbReporteCentralRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Inserta un registro de la tabla CB_REPORTE_CENTRAL
        /// </summary>
        public void SaveCbReporteCentral(CbReporteCentralDTO entity)
        {
            try
            {
                FactorySic.GetCbReporteCentralRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_REPORTE_CENTRAL
        /// </summary>
        public void UpdateCbReporteCentral(CbReporteCentralDTO entity)
        {
            try
            {
                FactorySic.GetCbReporteCentralRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_REPORTE_CENTRAL
        /// </summary>
        public void DeleteCbReporteCentral(int cbrcencodi)
        {
            try
            {
                FactorySic.GetCbReporteCentralRepository().Delete(cbrcencodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_REPORTE_CENTRAL
        /// </summary>
        public CbReporteCentralDTO GetByIdCbReporteCentral(int cbrcencodi)
        {
            return FactorySic.GetCbReporteCentralRepository().GetById(cbrcencodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_REPORTE_CENTRAL
        /// </summary>
        public List<CbReporteCentralDTO> ListCbReporteCentrals()
        {
            return FactorySic.GetCbReporteCentralRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbReporteCentral
        /// </summary>
        public List<CbReporteCentralDTO> GetByCriteriaCbReporteCentrals()
        {
            return FactorySic.GetCbReporteCentralRepository().GetByCriteria();
        }

        /// <summary>
        /// Devuelve las centrales de cierto reporte
        /// </summary>
        /// <param name="cbrepcodi"></param>
        /// <returns></returns>
        public List<CbReporteCentralDTO> ObtenerCentralesDelReporte(int cbrepcodi)
        {
            List<CbReporteCentralDTO> lstSalida = FactorySic.GetCbReporteCentralRepository().GetByIdReporte(cbrepcodi);

            //ordeno las centrales
            lstSalida = lstSalida.OrderBy(x => x.Cbrcenorigen).ThenBy(x => x.Equicodi).ToList(); //ordeno el listado de las centrales segun su equicodi
            return lstSalida;
        }
        #endregion

        #region Métodos Tabla CB_REPORTE_DETALLE

        /// <summary>
        /// Devuelve el id disponible en la BD
        /// </summary>
        /// <returns></returns>
        public int getIdReporteDetalleDisponible()
        {
            try
            {
                return FactorySic.GetCbReporteDetalleRepository().getIdDisponible();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla CB_REPORTE_DETALLE
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void SaveCbReporteDetalleTransaccional(CbReporteDetalleDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetCbReporteDetalleRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }



        /// <summary>
        /// Inserta un registro de la tabla CB_REPORTE_DETALLE
        /// </summary>
        public void SaveCbReporteDetalle(CbReporteDetalleDTO entity)
        {
            try
            {
                FactorySic.GetCbReporteDetalleRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_REPORTE_DETALLE
        /// </summary>
        public void UpdateCbReporteDetalle(CbReporteDetalleDTO entity)
        {
            try
            {
                FactorySic.GetCbReporteDetalleRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_REPORTE_DETALLE
        /// </summary>
        public void DeleteCbReporteDetalle(int cbrepdcodi)
        {
            try
            {
                FactorySic.GetCbReporteDetalleRepository().Delete(cbrepdcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_REPORTE_DETALLE
        /// </summary>
        public CbReporteDetalleDTO GetByIdCbReporteDetalle(int cbrepdcodi)
        {
            return FactorySic.GetCbReporteDetalleRepository().GetById(cbrepdcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_REPORTE_DETALLE
        /// </summary>
        public List<CbReporteDetalleDTO> ListCbReporteDetalles()
        {
            return FactorySic.GetCbReporteDetalleRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbReporteDetalle
        /// </summary>
        public List<CbReporteDetalleDTO> GetByCriteriaCbReporteDetalles()
        {
            return FactorySic.GetCbReporteDetalleRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla CB_REPORTE

        /// <summary>
        /// Inserta un registro de la tabla CB_ENVIO
        /// </summary>
        public int SaveCbReporteTransaccional(CbReporteDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetCbReporteRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla CB_REPORTE
        /// </summary>
        public void SaveCbReporte(CbReporteDTO entity)
        {
            try
            {
                FactorySic.GetCbReporteRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_REPORTE
        /// </summary>
        public void UpdateCbReporte(CbReporteDTO entity)
        {
            try
            {
                FactorySic.GetCbReporteRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_REPORTE
        /// </summary>
        public void DeleteCbReporte(int cbrepcodi)
        {
            try
            {
                FactorySic.GetCbReporteRepository().Delete(cbrepcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_REPORTE
        /// </summary>
        public CbReporteDTO GetByIdCbReporte(int cbrepcodi)
        {
            return FactorySic.GetCbReporteRepository().GetById(cbrepcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_REPORTE
        /// </summary>
        public List<CbReporteDTO> ListCbReportes()
        {
            return FactorySic.GetCbReporteRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbReporte
        /// </summary>
        public List<CbReporteDTO> GetByCriteriaCbReportes()
        {
            return FactorySic.GetCbReporteRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla CB_NOTA

        /// <summary>
        /// Devuelve el id disponible en la BD
        /// </summary>
        /// <returns></returns>
        public int getIdNotaDisponible()
        {
            try
            {
                return FactorySic.GetCbNotaRepository().getIdDisponible();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Inserta un registro de la tabla CB_NOTA
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="tran"></param>
        /// <returns></returns>
        public void SaveCbNotaTransaccional(CbNotaDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetCbNotaRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Inserta un registro de la tabla CB_NOTA
        /// </summary>
        public void SaveCbNota(CbNotaDTO entity)
        {
            try
            {
                FactorySic.GetCbNotaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_NOTA
        /// </summary>
        public void UpdateCbNota(CbNotaDTO entity)
        {
            try
            {
                FactorySic.GetCbNotaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_NOTA
        /// </summary>
        public void DeleteCbNota(int cbnotacodi)
        {
            try
            {
                FactorySic.GetCbNotaRepository().Delete(cbnotacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_NOTA
        /// </summary>
        public CbNotaDTO GetByIdCbNota(int cbnotacodi)
        {
            return FactorySic.GetCbNotaRepository().GetById(cbnotacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_NOTA
        /// </summary>
        public List<CbNotaDTO> ListCbNotas()
        {
            return FactorySic.GetCbNotaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbNota
        /// </summary>
        public List<CbNotaDTO> GetByCriteriaCbNotas()
        {
            return FactorySic.GetCbNotaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla CB_REP_CABECERA

        /// <summary>
        /// Devuelve el id disponible en la BD
        /// </summary>
        /// <returns></returns>
        public int getIdRepCabeceraDisponible()
        {
            try
            {
                return FactorySic.GetCbRepCabeceraRepository().getIdDisponible();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Inserta un registro de la tabla CB_REP_CABECERA
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="tran"></param>
        /// <returns></returns>
        public void SaveCbRepCabeceraTransaccional(CbRepCabeceraDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetCbRepCabeceraRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Inserta un registro de la tabla CB_REP_CABECERA
        /// </summary>
        public void SaveCbRepCabecera(CbRepCabeceraDTO entity)
        {
            try
            {
                FactorySic.GetCbRepCabeceraRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_REP_CABECERA
        /// </summary>
        public void UpdateCbRepCabecera(CbRepCabeceraDTO entity)
        {
            try
            {
                FactorySic.GetCbRepCabeceraRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_REP_CABECERA
        /// </summary>
        public void DeleteCbRepCabecera(int cbrcabcodi)
        {
            try
            {
                FactorySic.GetCbRepCabeceraRepository().Delete(cbrcabcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_REP_CABECERA
        /// </summary>
        public CbRepCabeceraDTO GetByIdCbRepCabecera(int cbrcabcodi)
        {
            return FactorySic.GetCbRepCabeceraRepository().GetById(cbrcabcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_REP_CABECERA
        /// </summary>
        public List<CbRepCabeceraDTO> ListCbRepCabeceras()
        {
            return FactorySic.GetCbRepCabeceraRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbRepCabecera
        /// </summary>
        public List<CbRepCabeceraDTO> GetByCriteriaCbRepCabeceras()
        {
            return FactorySic.GetCbRepCabeceraRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla CB_REP_PROPIEDAD

        /// <summary>
        /// Inserta un registro de la tabla CB_REP_PROPIEDAD
        /// </summary>
        public void SaveCbRepPropiedad(CbRepPropiedadDTO entity)
        {
            try
            {
                FactorySic.GetCbRepPropiedadRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla CB_REP_PROPIEDAD
        /// </summary>
        public void UpdateCbRepPropiedad(CbRepPropiedadDTO entity)
        {
            try
            {
                FactorySic.GetCbRepPropiedadRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla CB_REP_PROPIEDAD
        /// </summary>
        public void DeleteCbRepPropiedad(int cbrprocodi)
        {
            try
            {
                FactorySic.GetCbRepPropiedadRepository().Delete(cbrprocodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla CB_REP_PROPIEDAD
        /// </summary>
        public CbRepPropiedadDTO GetByIdCbRepPropiedad(int cbrprocodi)
        {
            return FactorySic.GetCbRepPropiedadRepository().GetById(cbrprocodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla CB_REP_PROPIEDAD
        /// </summary>
        public List<CbRepPropiedadDTO> ListCbRepPropiedads()
        {
            return FactorySic.GetCbRepPropiedadRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla CbRepPropiedad
        /// </summary>
        public List<CbRepPropiedadDTO> GetByCriteriaCbRepPropiedads()
        {
            return FactorySic.GetCbRepPropiedadRepository().GetByCriteria();
        }

        #endregion

        #endregion

        #region Métodos Tabla SI_EMPRESA

        /// <summary>
        /// Permite realizar búsquedas en la tabla SI_EMPRESA
        /// </summary>
        public SiEmpresaDTO GetByIdSiEmpresa(int key)
        {
            return FactorySic.GetSiEmpresaRepository().GetById(key);
        }

        #endregion

        #region Métodos Tabla EQ_EQUIPO

        /// <summary>
        /// Lista el detalle de un equipo por su equicodi
        /// </summary>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public EqEquipoDTO GetByIdEqEquipo(int equicodi)
        {
            return FactorySic.GetEqEquipoRepository().GetById(equicodi);
        }

        #endregion

        #region Métodos Tabla PR_GRUPO

        /// <summary>
        /// Permite obtener un registro de la tabla PR_GRUPO
        /// </summary>
        public PrGrupoDTO GetByIdPrGrupo(int grupocodi)
        {
            return FactorySic.GetPrGrupoRepository().GetById(grupocodi);
        }

        #endregion

        #region Métodos Tabla SI_FUENTEENERGIA

        /// <summary>
        /// Permite obtener un registro de la tabla SI_FUENTEENERGIA
        /// </summary>
        public SiFuenteenergiaDTO GetByIdSiFuenteenergia(int fenergcodi)
        {
            return FactorySic.GetSiFuenteenergiaRepository().GetById(fenergcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_FUENTEENERGIA
        /// </summary>
        public List<SiFuenteenergiaDTO> ListSiFuenteenergias()
        {
            return FactorySic.GetSiFuenteenergiaRepository().List();
        }

        #endregion

        #region Métodos Tabla EXT_ESTADO_ENVIO

        /// <summary>
        /// Lista de estados
        /// </summary>
        /// <returns></returns>
        public List<ExtEstadoEnvioDTO> ListExtEstadoEnvio(string tipoCombustible)
        {
            List<int> listaEnvcodi = new List<int>();
            if (tipoCombustible == ConstantesCombustibles.CombustiblesLiquidosYSolidos)
            {
                listaEnvcodi = new List<int>() { 1, 3, 4, 6, 7, 8 };
            }
            if (tipoCombustible == ConstantesCombustibles.CombustiblesGaseosos)
            {
                listaEnvcodi = new List<int>() { 1, 3, 4, 6, 7, 8, 10, 12 };
            }

            var lista = FactorySic.GetExtEstadoEnvioRepository().List().Where(x => listaEnvcodi.Contains(x.Estenvcodi)).ToList();

            foreach (var reg in lista)
                FormatearExtEstadoEnvio(reg);

            return lista.OrderBy(x => x.Orden).ToList();
        }

        private void FormatearExtEstadoEnvio(ExtEstadoEnvioDTO reg)
        {
            reg.Estenvnomb = GetDescripcionExtEstado(reg.Estenvcodi);
            reg.Estenvcolor = GetColorExtEstado(reg.Estenvcodi);
            reg.Orden = GetOrdenExtEstado(reg.Estenvcodi);
        }

        private string GetColorExtEstado(int estenvcodi)
        {
            string colorEstado = "SeaGreen";

            switch (estenvcodi)
            {
                case ConstantesCombustibles.EstadoSolicitud: //1
                    colorEstado = "blue";
                    break;
                case ConstantesCombustibles.EstadoObservado: //6
                    colorEstado = "red";
                    break;
                case ConstantesCombustibles.EstadoAprobado: //3
                    colorEstado = "green";
                    break;
                case ConstantesCombustibles.EstadoDesaprobado: //4
                    colorEstado = "red";
                    break;
            }

            return colorEstado;
        }

        private int GetOrdenExtEstado(int estenvcodi)
        {
            int orden = 0;

            switch (estenvcodi)
            {
                case ConstantesCombustibles.EstadoSolicitud: //1
                    orden = 1;
                    break;
                case ConstantesCombustibles.EstadoObservado: //6
                    orden = 2;
                    break;
                case ConstantesCombustibles.EstadoSubsanacionObs: //7
                    orden = 3;
                    break;
                case ConstantesCombustibles.EstadoAprobado: //3
                    orden = 4;
                    break;
                case ConstantesCombustibles.EstadoDesaprobado: //4
                    orden = 6;
                    //orden = 5;
                    break;
                case ConstantesCombustibles.EstadoCancelado: //8
                    orden = 8;
                    //orden = 6;
                    break;
                case ConstantesCombustibles.EstadoAprobadoParcialmente: //10
                    orden = 5;
                    break;
                case ConstantesCombustibles.EstadoAsignado: //12
                    orden = 7;
                    break;
            }

            return orden;
        }

        public string GetDescripcionExtEstado(int estenvcodi)
        {
            string desc = string.Empty;

            switch (estenvcodi)
            {
                case ConstantesCombustibles.EstadoSolicitud: //1
                case ConstantesCombustibles.EstadoSolicitudAsignacion: //11
                    desc = "Solicitud";
                    break;
                case ConstantesCombustibles.EstadoObservado: //6
                    desc = "Observado";
                    break;
                case ConstantesCombustibles.EstadoSubsanacionObs: //7
                    desc = "Subsanación de observaciones";
                    break;
                case ConstantesCombustibles.EstadoAprobado: //3
                    desc = "Aprobado";
                    break;
                case ConstantesCombustibles.EstadoDesaprobado: //4
                    desc = "Desaprobado";
                    break;
                case ConstantesCombustibles.EstadoCancelado: //8
                    desc = "Cancelado";
                    break;
                case ConstantesCombustibles.EstadoNotificado: //9
                    desc = "Notificado";
                    break;
                case ConstantesCombustibles.EstadoAprobadoParcialmente: //10
                    desc = "Aprobado Parcialmente";
                    break;
                case ConstantesCombustibles.EstadoAsignado: //12
                    desc = "Asignado";
                    break;
            }

            return desc;
        }

        private string GetAbrevxEstado(int estenvcodi)
        {
            string abrevEstado = string.Empty;

            switch (estenvcodi)
            {
                case ConstantesCombustibles.EstadoSolicitud: //1
                case ConstantesCombustibles.EstadoSolicitudAsignacion: //11
                    abrevEstado = "S";
                    break;
                case ConstantesCombustibles.EstadoObservado: //6
                    abrevEstado = "O";
                    break;
                case ConstantesCombustibles.EstadoSubsanacionObs: //7
                    abrevEstado = "SO";
                    break;
                case ConstantesCombustibles.EstadoAprobado: //3
                    abrevEstado = "A";
                    break;
                case ConstantesCombustibles.EstadoDesaprobado: //4
                    abrevEstado = "D";
                    break;
                case ConstantesCombustibles.EstadoCancelado: //8
                    abrevEstado = "C";
                    break;
                case ConstantesCombustibles.EstadoNotificado: //9
                    abrevEstado = "N";
                    break;
                case ConstantesCombustibles.EstadoAprobadoParcialmente: //10
                    abrevEstado = "AP";
                    break;
                case ConstantesCombustibles.EstadoAsignado: //12
                    abrevEstado = "AS";
                    break;
            }

            return abrevEstado;
        }

        #endregion

        #region Reporte de envios (web y excel)

        /// <summary>
        /// Listado de carpetas y envios Extranet e Intranet
        /// </summary>
        /// <param name="url"></param>
        /// <param name="emprcodi"></param>
        /// <param name="equicodis"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="nroPaginas"></param>
        /// <param name="pageSize"></param>
        /// <param name="htmlCarpeta"></param>
        /// <param name="htmlListado"></param>
        /// <param name="interfaz"></param>
        public void GenerarHtmlEnvio(string url, string emprcodi, string equicodis, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, int nroPaginas, int pageSize
                                    , out string htmlCarpeta, out string htmlListado, int interfaz)
        {
            List<ExtEstadoEnvioDTO> listaEstado = ListarTotalXEstadoEnvioXFiltro(emprcodi, equicodis, fechaInicio, fechaFin.AddDays(1), ConstantesCombustibles.CombustiblesLiquidosYSolidos, "-1");
            htmlCarpeta = GenerarHtmlCarpetasEnvio(estenvcodi, listaEstado);

            List<CbEnvioDTO> listaAll = ListaCbEnviosxFiltroPaginado(emprcodi, equicodis, estenvcodi, fechaInicio, fechaFin.AddDays(1), nroPaginas, pageSize);

            //ordenamiento: mas recientes primero            
            listaAll = listaAll.OrderByDescending(x => x.Cbenvfecsolicitud).ToList();

            htmlListado = GenerarHtmlReporteEnvio(url, estenvcodi, listaAll, interfaz);
        }

        private string GenerarHtmlCarpetasEnvio(int idEstado, List<ExtEstadoEnvioDTO> listaAll)
        {
            StringBuilder strHtml = new StringBuilder();
            strHtml.Append("<table width='100%'>");

            foreach (var reg in listaAll)
            {
                var totalRegistros = listaAll.Find(x => x.Estenvcodi == reg.Estenvcodi).Total;

                string estiloCeldaSelect = reg.Estenvcodi == idEstado ? "item_carpeta_selected" : "";
                if (totalRegistros > 0) estiloCeldaSelect += " item_tiene_dato";
                string textoCelda = totalRegistros > 0 ? string.Format("{0} ({1})", reg.Estenvnomb, totalRegistros) : reg.Estenvnomb;

                strHtml.AppendFormat(@"
                                <tr onclick='buscarEnvio({0});'>
                                    <td class='item_carpeta {2}'>{1}</td>
                                </tr>
                    ", reg.Estenvcodi, textoCelda, estiloCeldaSelect);
            }
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        private string GenerarHtmlReporteEnvio(string url, int idEstado, List<CbEnvioDTO> lista, int interfaz)
        {
            StringBuilder strHtml = new StringBuilder();
            strHtml.Append("<table border='0' class='pretty tabla-icono' cellspacing='0' width='100%' id='tabla'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:80px;'>Acciones</th>");
            if (idEstado == ConstantesCombustibles.EstadoSolicitud && interfaz == (int)ConstantesCombustibles.Interfaz.Extranet)
            {
                strHtml.Append("<th style='width:30px;'>Cancelar<br>Envío</th>");
            }
            strHtml.Append("<th>Código<br>Envío</th>");
            strHtml.Append("<th>Empresa</th>");
            strHtml.Append("<th>Central</th>");
            strHtml.Append("<th>Tipo de<br>Combustible</th>");
            if (idEstado == ConstantesCombustibles.EstadoObservado)
            {
                strHtml.Append("<th>Observaciones</th>");
            }
            strHtml.Append("<th>Usuario</th>");
            strHtml.Append("<th>Fecha de solicitud</th>");
            if (idEstado == ConstantesCombustibles.EstadoAprobado)
            {
                strHtml.Append("<th>Fecha de<br>Aprobación</th>");
            }
            if (idEstado == ConstantesCombustibles.EstadoDesaprobado)
            {
                strHtml.Append("<th>Fecha de<br>Desaprobación</th>");
            }
            strHtml.Append("<th>Actualización</th>");
            if (interfaz == (int)ConstantesCombustibles.Interfaz.Intranet)
            {
                strHtml.Append("<th>Exportar <br>a Excel</th>");
            }
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            strHtml.Append("<tbody>");

            foreach (var item in lista)
            {
                string observacion = item.Cbenvobs;
                if (item.Cbenvobs != null)
                {
                    if (item.Cbenvobs.Length > 25)
                        observacion = item.Cbenvobs.Substring(0, 24) + " ...";
                }

                strHtml.Append("<tr>");

                if (interfaz == (int)ConstantesCombustibles.Interfaz.Extranet)
                {
                    if (item.EsEditableExtranet)
                        strHtml.AppendFormat("<td onclick='mostrarDetalle({0});' style='cursor:pointer;width:30px;'><img src='{1}Content/Images/btn-edit.png' title='Editar Envío' alt='Editar Envío' style='height: 20px;'/></td>", item.Cbenvcodi, url);
                    else
                        strHtml.AppendFormat("<td onclick='mostrarDetalle({0});' style='cursor:pointer;width:30px;'><img src='{1}Content/Images/btn-open.png' title='Detalle de Envío' alt='Detalle Envío' style='height: 20px;'/></td>", item.Cbenvcodi, url);


                    if (idEstado == ConstantesCombustibles.EstadoSolicitud)
                    {
                        strHtml.AppendFormat("	<td onclick='cancelarEnvio({0});' style='cursor:pointer;width:30px;'><img src='{1}Content/Images/btn-cancel.png' title='Cancelar Envío' alt='Cancelar Envío' style='height: 20px;'/></td>", item.Cbenvcodi, url);
                    }
                }
                else
                {

                    if (item.EsEditableIntranet)
                    {
                        if (idEstado == ConstantesCombustibles.EstadoObservado || idEstado == ConstantesCombustibles.EstadoSubsanacionObs)
                        {
                            if (idEstado == ConstantesCombustibles.EstadoSubsanacionObs)
                                strHtml.AppendFormat(@"<td>
                                                <img onclick='mostrarDetalle({0});' src='{1}Content/Images/btn-edit.png' title='Detalle Envío' alt='Detalle de Envío' style='cursor:pointer;height: 20px;'>", item.Cbenvcodi, url);
                            else
                                strHtml.AppendFormat("<td style='cursor:pointer;width:30px;'><img onclick='mostrarDetalle({0});' src='{1}Content/Images/btn-open.png' title='Detalle Envío' alt='Detalle Envío' style='height: 20px;'/>", item.Cbenvcodi, url);

                            if (idEstado == ConstantesCombustibles.EstadoSubsanacionObs)
                                strHtml.AppendFormat(@"<img onclick='mostrarAmpliarPlazo({0});' src='{1}Content/Images/btn-add.png' title='Habilitar plazo del módulo' alt='Ampliar Plazo' style='cursor:pointer;height: 20px;'>", item.Cbenvcodi, url);
                            if (item.Cbenvitem106 != ConstantesAppServicio.SI && idEstado == ConstantesCombustibles.EstadoObservado)
                                strHtml.AppendFormat(@"<img onclick='habilitarItem106({0});'  src='{1}Content/Images/btn-ok.png' title='Habilitar ítem 1.06 Volumen de combustible en almacén' alt='Habilitar ítem 1.06 Volumen de combustible en almacén' style='cursor:pointer;height: 20px;'/>", item.Cbenvcodi, url);

                            strHtml.AppendFormat(@"</td>");
                        }
                        else
                        {
                            strHtml.AppendFormat("<td onclick='mostrarDetalle({0});' style='cursor:pointer;width:30px;'><img src='{1}Content/Images/btn-edit.png' title='Editar Envío' alt='Editar Envío' style='height: 20px;'/></td>", item.Cbenvcodi, url);
                        }
                    }
                    else { strHtml.AppendFormat("<td onclick='mostrarDetalle({0});' style='cursor:pointer;width:30px;'><img src='{1}Content/Images/btn-open.png' title='Detalle de Envío' alt='Detalle Envío' style='height: 20px;'/></td>", item.Cbenvcodi, url); }
                }

                strHtml.AppendFormat("<td>{0}</td>", item.Cbenvcodi);
                strHtml.AppendFormat("<td style='text-align: left;padding-left:10px;'>{0}</td>", item.Emprnomb);
                strHtml.AppendFormat("<td style='text-align: left;padding-left:10px;'>{0}</td>", item.Gruponomb);
                strHtml.AppendFormat("<td >{0}</td>", item.Fenergnomb);
                if (idEstado == ConstantesCombustibles.EstadoObservado)
                {
                    strHtml.AppendFormat("<td style='text-align: left;padding-left:10px;'>{0}</td>", observacion);
                }
                strHtml.AppendFormat("<td>{0}</td>", item.Cbenvususolicitud);
                strHtml.AppendFormat("<td>{0}</td>", item.CbenvfecsolicitudDesc);
                if (idEstado == ConstantesCombustibles.EstadoAprobado)
                {
                    strHtml.AppendFormat("<td>{0}</td>", item.FechaAprobacionDesc);
                }
                if (idEstado == ConstantesCombustibles.EstadoDesaprobado)
                {
                    strHtml.AppendFormat("<td>{0}</td>", item.FechaDesaprobacionDesc);
                }
                strHtml.AppendFormat("<td>{0}</td>", item.CbenvfecmodificacionDesc);
                if (interfaz == (int)ConstantesCombustibles.Interfaz.Intranet)
                {
                    strHtml.AppendFormat("	<td onclick='exportarFormularioEnvio({0});' style='cursor:pointer;width:30px;'><img src='{1}Content/Images/downloadExcel.png' title='Exportar Envío' alt='Exportar Envío' style='height: 20px;'/></td>", item.Cbenvcodi, url);
                }
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Gestiona la data (envíos enviados) a exportar 
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="emprcodi"></param>
        /// <param name="equicodis"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="estenvcodi"></param>
        public void GenerarArchivoExcelEnvios(string ruta, string emprcodi, string equicodis, DateTime fechaInicio, DateTime fechaFin, int estenvcodi, string pathLogo)
        {
            List<CbEnvioDTO> listaEnviosTotales = GetByCriteriaCbEnvios(emprcodi, equicodis, fechaInicio, fechaFin).Where(x => x.Estenvcodi == estenvcodi).ToList();

            ////Descargo archivo segun requieran
            string rutaFile = ruta + ConstantesCombustibles.NombreReporteEnvios;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelXPestania(xlPackage, listaEnviosTotales, pathLogo);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera reporte excel para los envíos de un tipo de combustible
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="listaEnviosTotales"></param>
        private void GenerarArchivoExcelXPestania(ExcelPackage xlPackage, List<CbEnvioDTO> listaEnviosTotales, string pathLogo)
        {

            string nameWS = "REPORTE";
            string titulo = "REPORTE DE ENVÍOS DE COSTOS DE COMBUSTIBLE LÍQUIDOS Y/O SÓLIDOS";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            //Logo
            UtilExcel.AddImageLocalAlto4Filas(ws, 1, 0, pathLogo);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniFecha = colIniTitulo;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo;
            int rowIniTabla = rowIniTitulo + 4;

            int colCodigo = colIniTable;
            int colEmpresa = colIniTable + 1;
            int colCentral = colIniTable + 2;
            int colEstado = colIniTable + 3;
            int colTipoComb = colIniTable + 4;
            int colFechaSol = colIniTable + 5;
            int colFechaAprobacion = colIniTable + 6;
            int colFechaDesaprobacion = colIniTable + 7;
            int colUsuario = colIniTable + 8;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
            ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

            ws.Row(rowIniTabla).Height = 20;
            ws.Cells[rowIniTabla, colCodigo].Value = "Código";
            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colCentral].Value = "Central";
            ws.Cells[rowIniTabla, colEstado].Value = "Estado";
            ws.Cells[rowIniTabla, colTipoComb].Value = "Tipo de Combustible";
            ws.Cells[rowIniTabla, colFechaSol].Value = "Fecha de solicitud";
            ws.Cells[rowIniTabla, colFechaAprobacion].Value = "Fecha de Aprobación";
            ws.Cells[rowIniTabla, colFechaDesaprobacion].Value = "Fecha de Desaprobación";
            ws.Cells[rowIniTabla, colUsuario].Value = "Usuario";

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colCodigo, rowIniTitulo, colUsuario);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colCodigo, rowIniTitulo, colUsuario, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colCodigo, rowIniTabla, colUsuario, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colUsuario, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colUsuario, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colCodigo, rowIniTabla, colUsuario, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colCodigo, rowIniTabla, colUsuario, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colCodigo, rowIniTabla, colUsuario, "#000000");

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaEnviosTotales)
            {
                ws.Cells[rowData, colCodigo].Value = item.Cbenvcodi;
                ws.Cells[rowData, colEmpresa].Value = item.Emprnomb.ToString().Trim();
                ws.Cells[rowData, colCentral].Value = item.Gruponomb.ToString().Trim();
                ws.Cells[rowData, colEstado].Value = item.Estenvnomb.ToString().Trim();
                ws.Cells[rowData, colTipoComb].Value = item.Fenergnomb.ToString().Trim();
                ws.Cells[rowData, colFechaSol].Value = item.CbenvfecsolicitudDesc;
                ws.Cells[rowData, colFechaAprobacion].Value = item.FechaAprobacionDesc;
                ws.Cells[rowData, colFechaDesaprobacion].Value = item.FechaDesaprobacionDesc;
                ws.Cells[rowData, colUsuario].Value = item.Cbenvususolicitud.Trim();

                rowData++;
            }
            if (!listaEnviosTotales.Any()) rowData++;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUsuario, "Calibri", 8);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUsuario, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUsuario, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colCodigo, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEstado, rowData - 1, colUsuario, "Centro");

            #endregion

            //filter
            ws.Cells[rowIniTabla, colCodigo, rowIniTabla, colUsuario].AutoFilter = true;
            ws.Cells[rowIniTabla, colIniTable, rowData, colUsuario].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        /// <summary>
        /// Devuelve los envios agrupados por su estado
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="equicodis"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoCombustible"></param>
        /// <returns></returns>
        private List<ExtEstadoEnvioDTO> ListarTotalXEstadoEnvioXFiltro(string emprcodi, string equicodis, DateTime fechaInicio, DateTime fechaFin, string tipoCombustible, string omitirTipoCarga)
        {
            var lista = ListExtEstadoEnvio(tipoCombustible);

            foreach (var reg in lista)
            {
                reg.Total = GetTotalEnvio(emprcodi, equicodis, reg.Estenvcodi, fechaInicio, fechaFin, tipoCombustible, omitirTipoCarga);

                //Para el estado Solicitado (Estenvcodi = 1) se debe sumar las solicitudes de asignacion (Estenvcodi = 11)
                if (reg.Estenvcodi == ConstantesCombustibles.EstadoSolicitud)
                {
                    int numSolicitudesAsignacion = GetTotalEnvio(emprcodi, equicodis, ConstantesCombustibles.EstadoSolicitudAsignacion, fechaInicio, fechaFin, tipoCombustible, omitirTipoCarga);
                    reg.Total = reg.Total + numSolicitudesAsignacion;
                }
            }

            return lista;
        }

        #endregion

        #region Exportación Individual

        /// <summary>
        /// Genera el reporte excel para el envio 
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="cbenvcodi"></param>
        public void GenerarArchivoExcelFormularioEnvio(string ruta, int cbenvcodi)
        {
            var envio = GetByIdCbEnvio(cbenvcodi);

            HandsonCombustible modeloWeb = GetHandsonCombustible((int)ConstantesCombustibles.Interfaz.Intranet, cbenvcodi, envio.Estcomcodi, envio.Emprcodi
                                                        , envio.Grupocodi, envio.Equicodi, envio.Fenergcodi);

            string rutaFile = ruta + ConstantesCombustibles.NombreReporteFormularioEnvios;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {

                GenerarArchivoExcelXFormulario(xlPackage, modeloWeb);

                xlPackage.Save();

            }
        }

        /// <summary>
        /// Genera el archivo excel del formulario para un envío
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="modeloWeb"></param>
        private void GenerarArchivoExcelXFormulario(ExcelPackage xlPackage, HandsonCombustible modeloWeb)
        {
            HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConstantesAppServicio.EnlaceLogoCoes);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());



            ExcelWorksheet ws = null;
            string nameWS = "Formulario";
            string titulo = "INFORMACIÓN INGRESADA POR EL GENERADOR INTEGRANTE";

            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            UtilExcel.AddImageXY(ws, 1, 0, img);

            int colIniTitulo = ConstantesCombustibles.PosColIni;
            int rowIniTitulo = ConstantesCombustibles.PosRowIni;

            int colIniTable = colIniTitulo;
            int rowIniTabla = rowIniTitulo + 3;
            int rowData = rowIniTabla;

            int colNumeralSeccion = colIniTable;
            int colNumeralItem = colIniTable + 1;
            int colNombreItem = colIniTable + 2;
            int colValor1ItemDato = colIniTable + 3;
            int colTipo1ItemDato = colIniTable + 4;
            int colValor2ItemDato = colIniTable + 5;
            int colTipo2ItemDato = colIniTable + 6;

            int colIniDynamic = colIniTable;


            foreach (var columnWidth in new List<double>() { 6, 6, 60, 18, 8.5, 18, 8.5 })
            {
                ws.Column(colIniDynamic++).SetTrueColumnWidth(columnWidth);
            }
            //ws.Row(3).Height = 48;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colTipo2ItemDato);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colTipo2ItemDato, "Centro");

            var seccionesFormulario = modeloWeb.ListaSeccion;


            foreach (var seccion in seccionesFormulario)
            {
                //Fila de las secciones 1.0, 2.0, 3.0, etc
                ws.Cells[rowData, colNumeralSeccion].Value = Decimal.Parse(seccion.Seccion.Numeral);
                ws.Cells[rowData, colNumeralSeccion].Style.Numberformat.Format = "#,#0.0";
                ws.Cells[rowData, colNumeralItem].Value = seccion.Seccion.Ccombnombre;

                //Estilos titulo
                if (seccion.Seccion.EsFilaResultado)
                {
                    UtilExcel.CeldasExcelAgrupar(ws, rowData, colNumeralItem, rowData, colNombreItem);
                    ws.Cells[rowData, colValor1ItemDato].Value = seccion.Seccion.NombreTotalSoles;
                    ws.Cells[rowData, colValor2ItemDato].Value = seccion.Seccion.NombreTotalDolares;
                    UtilExcel.CeldasExcelAgrupar(ws, rowData, colValor1ItemDato, rowData, colTipo1ItemDato);
                    UtilExcel.CeldasExcelAgrupar(ws, rowData, colValor2ItemDato, rowData, colTipo2ItemDato);
                }
                else
                {
                    UtilExcel.CeldasExcelAgrupar(ws, rowData, colNumeralItem, rowData, colValor2ItemDato);
                }

                //Estilos para cabeceras de secciones
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowData, colNumeralSeccion, rowData, colTipo2ItemDato, "Calibri", 12);
                UtilExcel.CeldasExcelEnNegrita(ws, rowData, colNumeralSeccion, rowData, colTipo2ItemDato);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowData, colNumeralSeccion, rowData, colTipo2ItemDato, "Centro");
                UtilExcel.CeldasExcelColorFondo(ws, rowData, colNumeralSeccion, rowData, colTipo2ItemDato, "#2980B9");
                UtilExcel.CeldasExcelColorTexto(ws, rowData, colNumeralSeccion, rowData, colTipo2ItemDato, "#FFFFFF");
                UtilExcel.BorderCeldasThin(ws, rowData, colNumeralSeccion, rowData, colTipo2ItemDato, "#CCCCCC");

                rowData++;

                var listaItem = seccion.ListaItem;

                //Subsecciones
                foreach (var item in listaItem)
                {
                    //Exportación de las secciones internas, tales como 1.01, 1.02, 2.01, etc
                    ws.Cells[rowData, colNumeralItem].Value = Decimal.Parse(item.Numeral);
                    ws.Cells[rowData, colNumeralItem].Style.Numberformat.Format = "#,##0.00";
                    UtilExcel.CeldasExcelColorFondo(ws, rowData, colNumeralItem, rowData, colNumeralItem, "#EDF5FC");
                    ws.Cells[rowData, colNombreItem].Value = item.Ccombnombre;
                    UtilExcel.CeldasExcelColorFondo(ws, rowData, colNombreItem, rowData, colNombreItem, "#DDDDDD");

                    var itemDato = item.ItemDato;
                    if (!item.EsFilaResultado)
                    {
                        FormatoYValorCeldaSubItem(ws, item, rowData, colValor1ItemDato, -1); //mostrar valor numérico
                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colTipo2ItemDato, rowData, colTipo2ItemDato, "#DDDDDD");
                        UtilExcel.CeldasExcelAgrupar(ws, rowData, colValor1ItemDato, rowData, colValor2ItemDato);

                        ws.Cells[rowData, colTipo2ItemDato].Value = itemDato.Cbevdatipo;
                        UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowData, colTipo2ItemDato, rowData, colTipo2ItemDato, "Centro");
                    }
                    else
                    {
                        FormatoYValorCeldaSubItem(ws, item, rowData, colValor1ItemDato, 1);
                        ws.Cells[rowData, colTipo1ItemDato].Value = itemDato.Cbevdatipo;
                        FormatoYValorCeldaSubItem(ws, item, rowData, colTipo1ItemDato, 3);

                        FormatoYValorCeldaSubItem(ws, item, rowData, colValor2ItemDato, 2);
                        ws.Cells[rowData, colTipo2ItemDato].Value = itemDato.Cbevdatipo2;
                        FormatoYValorCeldaSubItem(ws, item, rowData, colTipo2ItemDato, 4);
                    }

                    UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowData, colNumeralItem, rowData, colNumeralItem, "Centro");
                    UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowData, colNumeralItem, rowData, colTipo2ItemDato, "Calibri", 10);
                    UtilExcel.BorderCeldasThin(ws, rowData, colNumeralSeccion, rowData, colTipo2ItemDato, "#CCCCCC");

                    rowData++;
                }
            }

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            //ws.View.FreezePanes(rowIniTitulo + 2, 1);

            ws.Calculate();
        }

        /// <summary>
        /// Formatea la celda de ItemDato (num decimales, posicion y color)
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="item"></param>
        /// <param name="fila"></param>
        /// <param name="columna"></param>
        /// <param name="tipoValor"></param>
        private void FormatoYValorCeldaSubItem(ExcelWorksheet ws, CbConceptocombDTO item, int fila, int columna, int tipoValor)
        {
            CbDatosDTO itemDato = item.ItemDato;

            //valor numerico
            string tipoDato = (item.Ccombtipo ?? "").Trim().ToUpper();
            if (tipoDato == "N")
            {
                List<string> listaDolar = ListarUnidadesDolar();
                bool itemTieneDolar = listaDolar.Contains(item.ItemDato.Cbevdatipo);

                int numDecimales = item.Ccombnumdecimal;
                ws.Cells[fila, columna].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                //celdas de numeros
                if (tipoValor == -1)
                {
                    if (!string.IsNullOrEmpty(itemDato.Cbevdavalornumerico))
                    {
                        //mostrar valor de formula
                        if (!string.IsNullOrEmpty(itemDato.FormulaValor) || !string.IsNullOrEmpty(itemDato.FormulaValor2))
                        {
                            ws.Cells[fila, columna].Formula = "=" + ((itemTieneDolar ? itemDato.FormulaValor2 : itemDato.FormulaValor) ?? "0");
                        }
                        else
                        {
                            //mostrar valor numero
                            ws.Cells[fila, columna].Value = itemTieneDolar ? itemDato.Valor2 : itemDato.Valor;
                        }
                    }
                }

                //celda de resultados
                switch (tipoValor)
                {
                    case 1: //soles
                        if (!string.IsNullOrEmpty(itemDato.FormulaValor))
                        {
                            ws.Cells[fila, columna].Formula = "=" + itemDato.FormulaValor;
                            //ws.Cells[fila, columna].Calculate();
                            //ws.Cells[fila, columna].Value = ws.Cells[fila, columna].Value;
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(itemDato.Cbevdavalor))
                                ws.Cells[fila, columna].Value = itemDato.Valor;
                        }
                        break;
                    case 2: //dolares
                        if (!string.IsNullOrEmpty(itemDato.FormulaValor2))
                        {
                            ws.Cells[fila, columna].Formula = "=" + itemDato.FormulaValor2;
                            //ws.Cells[fila, columna].Calculate();
                            //ws.Cells[fila, columna].Value = ws.Cells[fila, columna].Value;
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(itemDato.Cbevdavalor2))
                                ws.Cells[fila, columna].Value = itemDato.Valor2;
                        }
                        break;
                }

            }
            else
            {
                ws.Cells[fila, columna].Value = itemDato.Cbevdavalor;

                //texto
                switch (tipoValor)
                {
                    case 1:
                        ws.Cells[fila, columna].Value = itemDato.Cbevdavalor;
                        break;
                    case 2:
                        ws.Cells[fila, columna].Value = itemDato.Cbevdavalor2;
                        break;
                }
            }

            if (item.Ccombreadonly == "y")
            {
                UtilExcel.CeldasExcelColorFondo(ws, fila, columna, fila, columna, "#C0C0C0");
            }

            if (item.EsFilaResultado && (itemDato.Cbevdatipo != "" || itemDato.Cbevdatipo2 != ""))
            {
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, fila, columna, fila, columna, "Centro");
            }
        }

        /// <summary>
        /// Devuelve formato numerico en celdas ItemDato
        /// </summary>
        /// <param name="numDecimales"></param>
        /// <returns></returns>
        private string FormatoNumDecimales(int numDecimales)
        {
            string salida = "";
            switch (numDecimales)
            {
                case 1: salida = "#,#0.0"; break;
                case 2: salida = "#,##0.00"; break;
                case 3: salida = "#,###0.000"; break;
                case 4: salida = "#,####0.0000"; break;
                case 5: salida = "#,#####0.00000"; break;
                case 6: salida = "#,######0.000000"; break;
                case 7: salida = "#,#######0.0000000"; break;
                case 8: salida = "#,########0.00000000"; break;
                default:
                    break;
            }
            return salida;
        }

        #endregion

        #region 1.0 INFORMACIÓN EN BASE DE DATOS COES

        /// <summary>
        /// Obtiene valores de combustibles de grupodat
        /// </summary>
        /// <param name="fenergcodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="fechaVigencia"></param>
        /// <returns></returns>
        public List<PrGrupodatDTO> ListarValoresPorGrupoMasGenerales(int fenergcodi, int grupocodi, DateTime fechaVigencia)
        {
            string idsConcepto = GetParametrosCostosCentralByFenergcodi(fenergcodi);
            string idsConcepGeneral = ConstantesCombustibles.ParametrosGenerales;

            List<PrGrupodatDTO> listaDat = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fechaVigencia, grupocodi + ",0", idsConcepto + "," + idsConcepGeneral)
                                            .OrderBy(x => x.Concepcodi).ToList();

            //formatear dat
            foreach (var reg in listaDat)
                FormatearGrupodat(reg);

            //asignar tipo de cambio igual a 1 para los combustibles que tienen costos en dolares
            var regTC = listaDat.Find(x => x.Concepcodi == ConstantesCombustibles.ConcepcodiTcambio);
            if (regTC != null)
            {
                regTC.Formuladat = "1.0";
                regTC.Valor = 1;
            }

            n_parameter l_param = new n_parameter();
            foreach (var reg in listaDat)
            {
                l_param.SetData(reg.Concepabrev, reg.Formuladat);
            }

            foreach (var reg in listaDat)
            {
                var precio = l_param.GetEvaluate(reg.Concepabrev);
                reg.Valor = (decimal)precio;
            }
            return listaDat;
        }

        private List<PrGrupodatDTO> ListarFormulaPrecio(string sConcepcodi, int grupocodi, DateTime fechaVigencia)
        {
            List<PrGrupodatDTO> listaDat = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fechaVigencia, grupocodi.ToString(), sConcepcodi);
            List<PrConceptoDTO> listaCnp = FactorySic.GetPrConceptoRepository().GetByCriteria(sConcepcodi);

            List<int> lCncp = sConcepcodi.Split(',').Select(x => Convert.ToInt32(x)).ToList();
            foreach (var concepcodi in lCncp)
            {
                PrConceptoDTO regCnp = listaCnp.Find(x => x.Concepcodi == concepcodi);
                if (listaDat.Find(x => x.Concepcodi == concepcodi) == null)
                {
                    listaDat.Add(new PrGrupodatDTO() { Concepcodi = concepcodi, Formuladat = "0", Grupocodi = grupocodi, Concepabrev = regCnp.Concepabrev });
                }
            }

            //formatear dat
            foreach (var reg in listaDat)
                FormatearGrupodat(reg);

            return listaDat;
        }

        private void FormatearGrupodat(PrGrupodatDTO reg)
        {
            if (reg != null)
            {
                reg.Formuladat = (reg.Formuladat ?? "").Trim();
                reg.Concepabrev = (reg.Concepabrev ?? "").Trim();
                reg.ConcepUni = (reg.ConcepUni ?? "").Trim();
            }
        }

        /// <summary>
        /// Listar empresas PR31
        /// </summary>
        /// <param name="ambienteWeb"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        public void ListarEmpresasYCentralFormatoPr31(int ambienteWeb, out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral)
        {
            List<CbCentralxfenergDTO> listadoCentralXFenerg = GetByCriteriaCbCentralxfenergs(ConstantesCombustibles.EstcomcodiLiquido + "," + ConstantesCombustibles.EstcomcodiSolido);

            //en extranet solo mostrar los que tiene operacion comercial
            if ((int)ConstantesCombustibles.Interfaz.Extranet == ambienteWeb)
                listadoCentralXFenerg = listadoCentralXFenerg.Where(x => x.Cbcxfeactivo == 1).ToList();

            //empresa
            listaEmpresa = listadoCentralXFenerg.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO()
            {
                Emprcodi = x.Key,
                Emprnomb = x.First().Emprnomb
            }).OrderBy(x => x.Emprnomb).ToList();

            //central
            listaCentral = listadoCentralXFenerg.GroupBy(x => x.Equicodi).Select(x => new EqEquipoDTO()
            {
                Equicodi = x.Key,
                Grupocodi = x.First().Grupocodi,
                Equinomb = x.First().Equinomb,
                Emprcodi = x.First().Emprcodi,
                Codigogrupo = x.Key + "|" + x.First().Grupocodi
            }).OrderBy(x => x.Equinomb).ToList();
        }

        /// <summary>
        /// Lista de tipo de combustible por central
        /// </summary>
        /// <param name="ambienteWeb"></param>
        /// <param name="equipadre"></param>
        /// <returns></returns>
        public List<SiFuenteenergiaDTO> ListarFenergXCentral(int ambienteWeb, int equipadre)
        {
            List<CbCentralxfenergDTO> listadoCentralXFenerg = GetByCriteriaCbCentralxfenergs(ConstantesCombustibles.EstcomcodiLiquido + "," + ConstantesCombustibles.EstcomcodiSolido).Where(x => x.Equicodi == equipadre).ToList();

            //en extranet solo mostrar los que tiene operacion comercial
            if ((int)ConstantesCombustibles.Interfaz.Extranet == ambienteWeb)
                listadoCentralXFenerg = listadoCentralXFenerg.Where(x => x.Cbcxfeactivo == 1).ToList();

            //empresa
            List<SiFuenteenergiaDTO> listaFenerg = listadoCentralXFenerg.GroupBy(x => x.Fenergcodi).Select(x => new SiFuenteenergiaDTO()
            {
                Fenergcodi = x.Key,
                Fenergnomb = x.First().Fenergnomb
            }).OrderBy(x => x.Fenergnomb).ToList();

            return listaFenerg;
        }

        /// <summary>
        /// Listar empresas, central y modos 
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaModo"></param>
        private void ListarEmpresasYCentralPr31(DateTime fechaIni, DateTime fechaFin, out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<PrGrupoDTO> listaModo)
        {
            (new INDAppServicio()).ListarUnidadTermicoPR31(fechaIni, fechaFin, out List<EqEquipoDTO> listaEquiposTermicos
                                                , out List<PrGrupoDTO> listaAllGrupoModo, out List<PrGrupoDTO> listaAllGrupo);

            List<int> lFenerTmp = new List<int>() { ConstantesPR5ReportesServicio.FenergcodiCarbon,ConstantesPR5ReportesServicio.FenergcodiDiesel
                                                    , ConstantesPR5ReportesServicio.FenergcodiR500, ConstantesPR5ReportesServicio.FenergcodiR6, ConstantesPR5ReportesServicio.FenergcodiResidual };

            //modos liquidos y solidos
            var listaModoTmp = listaAllGrupoModo.Where(x => lFenerTmp.Contains(x.Fenergcodi.Value)).ToList();
            listaModo = listaModoTmp;

            //centrales
            listaCentral = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            listaCentral = listaCentral.Where(x => listaModoTmp.Select(y => y.Equipadre).Contains(x.Equicodi)).OrderBy(x => x.Equinomb).ToList();

            //asignar grupocentral
            foreach (var reg in listaCentral)
            {
                reg.Grupocodicentral = INDAppServicio.GrupocodiCentralFromListaGrupo(reg.Grupocodi ?? 0, listaAllGrupo);
                reg.Codigogrupo = reg.Equicodi + "|" + reg.Grupocodicentral;
            }

            //empresa
            listaEmpresa = listaCentral.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Value, Emprnomb = x.First().Emprnomb }).OrderBy(x => x.Emprnomb).ToList();
        }

        /// <summary>
        /// Obtener el valor de combustible
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="grupocodi"></param>
        /// <param name="fenergcodi"></param>
        /// <param name="tpto"></param>
        /// <returns></returns>
        public decimal GetStockCombustibleXDia(DateTime fecha, int grupocodi, int fenergcodi, string tpto)
        {
            decimal dato = 0;

            MeMedicionxintervaloDTO resultado = GetCombustibleXCentral(fecha, fecha, fenergcodi, grupocodi, tpto).FirstOrDefault();

            if (resultado != null && resultado.Medinth1 != null)
            {
                dato = resultado.Medinth1.GetValueOrDefault(0);

                //si es liquido convertir los metros cubicos a litros
                int idTipoCombustible = GetEstcomcodiByFenergcodi(fenergcodi);
                if (ConstantesCombustibles.EstcomcodiLiquido == idTipoCombustible)
                    dato = dato * 1000;
            }

            return dato;
        }

        private List<MeMedicionxintervaloDTO> GetCombustibleXCentral(DateTime fechaIni, DateTime fechaFin, int fenergcodi, int grupocodi, string tptomedicion)
        {
            return FactorySic.GetMeMedicionxintervaloRepository().GetCombustibleXCentral(fechaIni, fechaFin, tptomedicion, fenergcodi, grupocodi);
        }

        /// <summary>
        /// Lista los valores de parametros generales de PrGrupoDat
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public decimal GetTipoCambio(DateTime fecha)
        {
            decimal resultado = 0;

            var lista = (new MigracionesAppServicio()).ListarGrupodatHistoricoValores(ConstantesCombustibles.ConcepcodiTcambio, 0)
                                                        .Where(x => x.Deleted == 0 && x.Fechadat <= fecha).OrderByDescending(x => x.Fechadat).ToList();

            var find = lista.FirstOrDefault();
            if (find != null)
            {
                decimal.TryParse(find.Formuladat, out resultado);
            }

            return resultado;
        }

        /// <summary>
        /// Validación de fecha de recepción de central y fuente de energía
        /// </summary>
        /// <param name="cbenvcodi"></param>
        /// <param name="fechaRecepcion"></param>
        /// <param name="equicodiCentral"></param>
        /// <param name="fenergcodi"></param>
        /// <returns></returns>
        public string ValidacionFechaRecepcionExistenteBD(int cbenvcodi, DateTime fechaRecepcion, int equicodiCentral, int fenergcodi)
        {
            List<int> lcodis = new List<int>() { ConstantesCombustibles.EstadoSolicitud, ConstantesCombustibles.EstadoSubsanacionObs, ConstantesCombustibles.EstadoObservado, ConstantesCombustibles.EstadoAprobado, ConstantesCombustibles.EstadoDesaprobado };
            List<CbEnvioDTO> listaEnvXCentral = ListXEstado(string.Join(",", lcodis), equicodiCentral.ToString(), fenergcodi).Where(x => x.Cbenvtipoenvio == ConstantesCombustibles.GuardadoOficial).ToList();
            listaEnvXCentral = listaEnvXCentral.Where(x => x.Cbenvcodi != cbenvcodi).ToList(); //omitir en la validacion el envio que esta siendo revisado

            //Obtener la ultima version de cada envio
            List<CbVersionDTO> listaVersion = GetByCriteriaCbVersions(string.Join(",", listaEnvXCentral.Select(x => x.Cbenvcodi.ToString()).ToList()));
            foreach (var regEnv in listaEnvXCentral)
            {
                var listaHist = listaVersion.Where(x => x.Cbenvcodi == regEnv.Cbenvcodi).OrderByDescending(x => x.Cbvernumversion).ToList();
                regEnv.Cbvercodi = listaHist.FirstOrDefault().Cbvercodi;
            }

            //obtener el item 1.05 de cada envio
            List<int> ccombcodiItem105 = new List<int>() { 5, 36 };
            List<CbDatosDTO> listaDatos = GetByCriteriaCbDatoss(string.Join(",", listaEnvXCentral.Select(x => x.Cbvercodi)), string.Join(",", ccombcodiItem105));

            //Validacion
            List<string> listaMjs = new List<string>();

            string sFechaR = fechaRecepcion.ToString(ConstantesAppServicio.FormatoFecha);
            foreach (var regEnv in listaEnvXCentral)
            {
                var datoCelda = (listaDatos.FirstOrDefault(x => x.Cbvercodi == regEnv.Cbvercodi)?.Cbevdavalor) ?? "";
                var lFechas = datoCelda.Split(';').ToList();
                if (lFechas.Contains(sFechaR))
                    listaMjs.Add(string.Format("La fecha de recepción {0} ya está siendo utilizada en la solicitud N° {1}. No se permite el uso en este envío.", sFechaR, regEnv.Cbenvcodi));
            }

            return string.Join("<br/>", listaMjs);
        }

        #endregion

        #region 1.0 a 9.0 Excel web (Información Formulario y Documentos)

        /// <summary>
        /// Modelo web para generar el Formulario de costos de combustibles
        /// </summary>
        /// <param name="ambienteWeb"></param>
        /// <param name="idEnvio"></param>
        /// <param name="estcomcodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="grupocodiCentral"></param>
        /// <param name="equicodiCentral"></param>
        /// <param name="fenergcodi"></param>
        /// <returns></returns>
        public HandsonCombustible GetHandsonCombustible(int ambienteWeb, int idEnvio, int estcomcodi, int emprcodi, int grupocodiCentral, int equicodiCentral, int fenergcodi)
        {
            //
            HandsonCombustible regHandson = new HandsonCombustible();
            regHandson.EsExtranet = ambienteWeb == (int)ConstantesCombustibles.Interfaz.Extranet;
            regHandson.Grupocodi = grupocodiCentral;
            regHandson.Equicodi = equicodiCentral;
            regHandson.Fenergcodi = fenergcodi;
            regHandson.Cbenvcodi = idEnvio;
            regHandson.Estcomcodi = estcomcodi;
            regHandson.ListaSeccion = new List<SeccionCombustible>();
            regHandson.PosColIni = ConstantesCombustibles.PosColIni + 3;
            regHandson.PosRowIni = ConstantesCombustibles.PosRowIni + 2;
            regHandson.RangoIniValidoRecepcion = DateTime.Today.AddMonths(-6).ToString(ConstantesAppServicio.FormatoFecha);
            regHandson.RangoFinValidoRecepcion = DateTime.Today.AddDays(-1).ToString(ConstantesAppServicio.FormatoFecha);

            bool esVolverCalcularValores = false;

            List<CbDatosDTO> listaDatoXVersion = new List<CbDatosDTO>();
            List<CbArchivoenvioDTO> listaArchivoXVersion = new List<CbArchivoenvioDTO>();

            #region Información de base de datos

            List<CbConceptocombDTO> listaCnpAll = GetByCriteriaCbConceptocombs(estcomcodi);    //update tablas

            string emprnomb = string.Empty;
            string central = string.Empty;
            string fenergnomb = string.Empty;
            string unidadGlobal = string.Empty;
            decimal tc = 0;
            decimal stockFinalDeclarado = 0;
            List<PrGrupodatDTO> listaParam = new List<PrGrupodatDTO>();

            if (idEnvio > 0)
            {
                //log
                CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);
                regHandson.Observacion = regEnvio.Cbenvobs;
                regHandson.Estenvcodi = regEnvio.Estenvcodi;

                if ((int)ConstantesCombustibles.Interfaz.Intranet == ambienteWeb)
                    regHandson.Editable = regEnvio.EsEditableIntranet;
                else
                    regHandson.Editable = regEnvio.EsEditableExtranet;

                esVolverCalcularValores = regEnvio.EsEditableIntranet || regEnvio.EsEditableExtranet;

                CbVersionDTO regVersionActual = GetUltimoCbVersion(idEnvio);
                if (regVersionActual != null)
                {
                    int cbvercodi = regVersionActual.Cbvercodi;
                    listaDatoXVersion = GetByCriteriaCbDatoss(cbvercodi.ToString(), ConstantesAppServicio.ParametroDefecto);
                    List<CbDatosDetalleDTO> listaDetalleXVersion = GetByCriteriaCbDatosDetalles(cbvercodi);
                    listaArchivoXVersion = GetByCriteriaCbArchivoenvios(cbvercodi);

                    foreach (var regDato in listaDatoXVersion)
                    {
                        regDato.ListaDetalle = listaDetalleXVersion.Where(x => x.Cbevdacodi == regDato.Cbevdacodi).ToList();
                    }

                    if (regHandson.Editable)
                    {
                        listaCnpAll = listaCnpAll.Where(x => x.Ccombestado == ConstantesCombustibles.EstadoArchivoActivo).ToList();
                    }
                    else
                    {
                        List<int> listaCnpXVersion = listaDatoXVersion.Select(x => x.Ccombcodi).ToList();
                        listaCnpAll = listaCnpAll.Where(x => listaCnpXVersion.Contains(x.Ccombcodi)).ToList();
                    }
                }

                //mensajes para la vista
                regHandson.Fecfinrptasolicitud = regEnvio.CbenvfecfinrptasolicitudDesc;

                if (regEnvio.EsEditableExtranet)
                {
                    if (regEnvio.Cbenvfecfinsubsanarobs != null && DateTime.Now < regEnvio.Cbenvfecfinsubsanarobs) //plazo segun el PR31
                        regHandson.Fecfinsubsanarobs = regEnvio.CbenvfecfinsubsanarobsDesc;

                    if (regEnvio.Cbenvfecampl != null && DateTime.Now < regEnvio.Cbenvfecampl) //ampliacion excepcional por parte del administrador COES
                        regHandson.Fecfinampliacion = regEnvio.CbenvfecamplDesc;
                }
                regHandson.FecCostoVigenteDesde = regEnvio.FechaVigenciaDesc;

                regHandson.EsEditableItem106 = regEnvio.Cbenvitem106 == ConstantesAppServicio.SI;

                //si el envio esta desaprobado por la notificacion, el usuario Intranet debe ingresar el mensaje con los nuevos costos (lineas que empiezan con guión (-))
                regHandson.HabilitarDesaprobar = regEnvio.Estenvcodi == ConstantesCombustibles.EstadoDesaprobado && GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoDesaprobado) == null;

                unidadGlobal = regEnvio.Cbenvunidad;
            }
            else
            {
                regHandson.Editable = true;
                esVolverCalcularValores = true;

                regHandson.Estenvcodi = ConstantesCombustibles.EstadoSolicitud;
                listaCnpAll = listaCnpAll.Where(x => x.Ccombestado == ConstantesCombustibles.EstadoArchivoActivo).ToList();
            }

            //información de bd
            regHandson.Readonly = !regHandson.Editable;
            if ((int)ConstantesCombustibles.Interfaz.Intranet == ambienteWeb)
                regHandson.Readonly = true;

            if (esVolverCalcularValores)
            {
                SiEmpresaDTO regEmp = GetByIdSiEmpresa(emprcodi);
                PrGrupoDTO regGrupocentral = GetByIdPrGrupo(grupocodiCentral);
                EqEquipoDTO regEqcentral = GetByIdEqEquipo(equicodiCentral);
                SiFuenteenergiaDTO regFenerg = GetByIdSiFuenteenergia(fenergcodi);
                emprnomb = (regEmp.Emprnomb ?? "").Trim();
                central = (regEqcentral.Equinomb ?? "").Trim();
                fenergnomb = (regFenerg.Fenergnomb ?? "").Trim();

                DateTime fechaVigente = DateTime.Today;
                tc = GetTipoCambio(fechaVigente);
                stockFinalDeclarado = GetStockCombustibleXDia(fechaVigente.AddDays(-1), grupocodiCentral, fenergcodi, ConstantesStockCombustibles.StrTptoStock);

                //sección 1
                listaParam = ListarValoresPorGrupoMasGenerales(fenergcodi, grupocodiCentral, fechaVigente);

                unidadGlobal = ConstantesCombustibles.EstcomcodiLiquido == estcomcodi ? ConstantesCombustibles.Litro : ConstantesCombustibles.Tonelada;

                //volver a cargar la información de bd de los items de la sección 1.0
                List<int> lcnp = (ConstantesCombustibles.EstcomcodiLiquido == estcomcodi) ? new List<int>() { 1, 2, 3, 4, 7, 8, 9, 10, 11 } : new List<int>() { 32, 33, 34, 35, 38, 39, 40, 41, 42 };
                listaDatoXVersion = listaDatoXVersion.Where(x => !lcnp.Contains(x.Ccombcodi)).ToList();
            }

            #endregion

            //moneda y unidad defecto del envio
            regHandson.Unidad = unidadGlobal;
            regHandson.UnidadDesc = GetUnidadDesc(unidadGlobal);
            regHandson.StockFinalDeclarado = stockFinalDeclarado;
            //regHandson.Tipocambio = tc; //debe de salir de la grilla web

            #region Información Formulario

            //Obtener secciones
            int cont = 1;
            List<CbConceptocombDTO> listaCnpSeccion = listaCnpAll.Where(x => x.Ccombnumeral % 100 == 0).ToList();
            foreach (var reg in listaCnpSeccion)
            {
                //reg.PosRow = cont + regHandson.PosRowIni;
                cont++;

                SeccionCombustible regSec = new SeccionCombustible();
                regSec.Seccion = GetItemYFormatear(reg, null, new CbDatosDTO() { Cbevdavalor = string.Empty, Cbevdatipo = string.Empty });

                //items de cada sección
                List<CbConceptocombDTO> listaCnpItem = listaCnpAll.Where(x => x.Ccombnumeral > reg.Ccombnumeral && x.Ccombnumeral < reg.Ccombnumeral + 100).ToList();

                #region Líquidos

                if (ConstantesCombustibles.EstcomcodiLiquido == estcomcodi)
                {
                    if (reg.Ccombnumeral == 100)
                        regSec.Seccion.ConcepcodiCombAlmacenado = 5; //1.05

                    if (reg.Ccombnumeral == 200)
                    {
                        regSec.Seccion.ConcepcodiFactura = 13; //2.01

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 7); //1.07
                        string monedaImpuesto = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 11); //1.11 Costo unitario por impuestos para la central vigente
                        regSec.Seccion.EsObligatorioTC = regSec.Seccion.Moneda != monedaImpuesto; //si la moneda de la seccion es distinto al del impuesto, el agente debe ingresar el TC obligatoriamente en la factura
                    }

                    if (reg.Ccombnumeral == 300)
                    {
                        regSec.Seccion.ConcepcodiFactura = 21; //3.01
                        //regSec.Seccion.ConcepcodiDemurrage = 29; //3.09
                        regSec.Seccion.OpcionalDemurrage = true;
                        regSec.Seccion.OpcionalFactura = true;

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 8); //1.08
                        string monedaImpuesto = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 11); //1.11 Costo unitario por impuestos para la central vigente
                        regSec.Seccion.EsObligatorioTC = regSec.Seccion.Moneda != monedaImpuesto; //si la moneda de la seccion es distinto al del impuesto, el agente debe ingresar el TC obligatoriamente en la factura
                    }

                    if (reg.Ccombnumeral == 400)
                    {
                        regSec.Seccion.ConcepcodiFactura = 93; //4.01
                        //regSec.Seccion.ConcepcodiMerma = 31; //4.04
                        regSec.Seccion.OpcionalFactura = true;
                        regSec.Seccion.OpcionalMerma = true;

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 7); //1.07
                    }

                    if (reg.Ccombnumeral == 500)
                    {
                        reg.EsFilaResultado = true;
                        reg.NombreTotalSoles = "Soles";
                        reg.NombreTotalDolares = "Dólares";
                        regSec.Seccion = GetItemYFormatear(reg, null, new CbDatosDTO() { Cbevdavalor = string.Empty, Cbevdatipo = string.Empty }, reg.EsFilaResultado);
                    }

                    List<CbConceptocombDTO> listaItem = new List<CbConceptocombDTO>();
                    foreach (var regCnpItem in listaCnpItem)
                    {
                        regCnpItem.PosRow = cont + regHandson.PosRowIni;
                        regCnpItem.PosCol1 = regHandson.PosColIni;
                        regCnpItem.PosCol2 = regHandson.PosColIni + 2;
                        cont++;

                        switch (regCnpItem.Ccombcodi)
                        {
                            case 1: //1.01 Nombre de la empresa generadora
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = emprnomb }));
                                break;
                            case 2://1.02 Nombre de la central
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = central }));
                                break;
                            case 3: //1.03 Tipo de combustible
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = fenergnomb }));
                                break;
                            case 4: //1.04 Tipo de Cambio vigente en BD COES
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = tc.ToString(), Cbevdatipo = ConstantesCombustibles.SolesXDolar }));
                                break;
                            case 5: //1.05 Fecha de ingreso de combustible comprado en almacén
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = string.Empty, }));
                                break;
                            case 6: //1.06 Cantidad de carbón en almacén
                                if (regHandson.EsEditableItem106)
                                    regCnpItem.Ccombreadonly = "n";

                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = string.Empty, Cbevdatipo = regHandson.Unidad }));
                                break;
                            case 7: //1.07 Costo unitario de combustible vigente
                            case 8: //1.08 Costo unitario de transporte vigente
                            case 9: //1.09 Costo unitario de tratamiento mecánico vigente
                            case 10: //1.10 Costo unitario de tratamiento químico vigente
                            case 11: //1.11 Costo unitario por impuestos para la central vigente
                                ObtenerDatosCosto(regCnpItem.Ccombcodi, fenergcodi, listaParam, out decimal valorCosto, out string monedaBdTmp);

                                //ver la moneda y unidad del costo, esto ayuda a identificar posibles inconsistencias con otros costos
                                string monedaXUnidadTmp = GetMonedaXUnidad(monedaBdTmp, regHandson.Unidad);
                                regCnpItem.Moneda = monedaBdTmp;
                                string valorCostoSol = ConstantesCombustibles.Soles == monedaBdTmp ? valorCosto.ToString() : "";
                                string valorCostoDolar = ConstantesCombustibles.Dolar == monedaBdTmp ? valorCosto.ToString() : "";
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = valorCostoSol, Cbevdavalor2 = valorCostoDolar, Cbevdatipo = monedaXUnidadTmp }));
                                break;
                            case 17: //2.05
                            case 26: //3.06
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = regHandson.Unidad }));
                                break;
                            case 18: //2.06
                            case 27: //3.07
                            case 29: //3.09 Pago por demurrage
                            case 30: //4.03
                                regCnpItem.Moneda = regSec.Seccion.Moneda;
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = GetMonedaDesc(regSec.Seccion.Moneda) }));
                                break;
                            case 19: //2.07 Pago por impuestos por compra de combustible
                            case 28: //3.08 Impuestos por transporte de combustible

                                regCnpItem.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 11); //1.11 Costo unitario por impuestos para la central vigente
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = GetMonedaDesc(regCnpItem.Moneda) }));
                                break;

                            case 31: //4.04 Costos por Mermas
                                regCnpItem.Moneda = regSec.Seccion.Moneda;
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = GetMonedaXUnidad(regSec.Seccion.Moneda, unidadGlobal) }));
                                break;

                            case 98: //5.01 
                            case 99: //5.02 
                            case 100: //5.03 
                            case 101: //5.04 
                            case 102: //5.05 
                            case 103: //5.06 
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = ConstantesCombustibles.SolesXLitro, Cbevdatipo2 = ConstantesCombustibles.DolaresXLitro }, true));
                                break;
                            case 104: //5.07 
                            case 105: //5.08 
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = ConstantesCombustibles.SolesXLitro }, true));
                                break;

                            default:
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { }));
                                break;
                        }
                    }
                    regSec.ListaItem = listaItem;
                }

                #endregion

                #region Sólidos

                if (ConstantesCombustibles.EstcomcodiSolido == estcomcodi)
                {
                    if (reg.Ccombnumeral == 100)
                        regSec.Seccion.ConcepcodiCombAlmacenado = 36; //1.05

                    if (reg.Ccombnumeral == 200)
                    {
                        regSec.Seccion.ConcepcodiFactura = 45; //2.01

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 38); //1.07
                    }
                    if (reg.Ccombnumeral == 300)
                    {
                        regSec.Seccion.ConcepcodiFactura = 55; //3.01
                        regSec.Seccion.OpcionalFactura = true;

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 39); //1.08
                    }

                    if (reg.Ccombnumeral == 400)
                    {
                        regSec.Seccion.ConcepcodiFactura = 63; //4.01
                        regSec.Seccion.OpcionalFactura = true;

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 39); //1.08
                    }

                    if (reg.Ccombnumeral == 500)
                    {
                        regSec.Seccion.ConcepcodiFactura = 67; //5.01
                        regSec.Seccion.OpcionalFactura = true;

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 40); //1.09
                        string monedaImpuesto = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 42); //1.11 Costo unitario por impuestos para la central vigente
                        regSec.Seccion.EsObligatorioTC = regSec.Seccion.Moneda != monedaImpuesto; //si la moneda de la seccion es distinto al del impuesto, el agente debe ingresar el TC obligatoriamente en la factura
                    }

                    if (reg.Ccombnumeral == 600)
                    {
                        regSec.Seccion.ConcepcodiFactura = 72; //6.01
                        regSec.Seccion.ConcepcodiDemurrage = 76; //6.05
                        regSec.Seccion.OpcionalDemurrage = true;
                        regSec.Seccion.OpcionalFactura = true;

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 41); //1.10
                    }

                    if (reg.Ccombnumeral == 700)
                    {
                        regSec.Seccion.ConcepcodiFactura = 78; //7.01
                        regSec.Seccion.OpcionalFactura = true;

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 41); //1.10
                        string monedaImpuesto = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 42); //1.11 Costo unitario por impuestos para la central vigente
                        regSec.Seccion.EsObligatorioTC = regSec.Seccion.Moneda != monedaImpuesto; //si la moneda de la seccion es distinto al del impuesto, el agente debe ingresar el TC obligatoriamente en la factura
                    }

                    if (reg.Ccombnumeral == 800)
                    {
                        regSec.Seccion.ConcepcodiFactura = 95; //8.01
                        regSec.Seccion.ConcepcodiMerma = 88; //8.04
                        regSec.Seccion.OpcionalFactura = true;
                        regSec.Seccion.OpcionalMerma = true;

                        //cuando llegue a esta sección ya se habrá recorrido los itemas de la sección 1
                        regSec.Seccion.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 38); //1.07
                    }

                    if (reg.Ccombnumeral == 900)
                    {
                        reg.EsFilaResultado = true;
                        reg.NombreTotalSoles = "A 6000 kcal/kg en Soles";
                        reg.NombreTotalDolares = "A 6000 kcal/kg en Dólares";
                        regSec.Seccion = GetItemYFormatear(reg, null, new CbDatosDTO() { Cbevdavalor = string.Empty, Cbevdatipo = string.Empty }, reg.EsFilaResultado);
                    }

                    List<CbConceptocombDTO> listaItem = new List<CbConceptocombDTO>();
                    foreach (var regCnpItem in listaCnpItem)
                    {
                        regCnpItem.PosRow = cont + regHandson.PosRowIni;
                        regCnpItem.PosCol1 = regHandson.PosColIni;
                        regCnpItem.PosCol2 = regHandson.PosColIni + 2;
                        cont++;

                        switch (regCnpItem.Ccombcodi)
                        {
                            case 32: //1.01 Nombre de la empresa generadora
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = emprnomb }));
                                break;
                            case 33://1.02 Nombre de la central
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = central }));
                                break;
                            case 34: //1.03 Tipo de combustible
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = fenergnomb }));
                                break;
                            case 35: //1.04 Tipo de Cambio vigente en BD COES
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = tc.ToString(), Cbevdatipo = ConstantesCombustibles.SolesXDolar }));
                                break;
                            case 36: //1.05 Fecha de ingreso de combustible comprado en almacén
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = string.Empty }));
                                break;
                            case 37: //1.06 Cantidad de carbón en almacén
                                if (regHandson.EsEditableItem106)
                                    regCnpItem.Ccombreadonly = "n";

                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = string.Empty, Cbevdatipo = regHandson.Unidad }));
                                break;
                            case 38: //1.07
                            case 39: //1.08
                            case 40: //1.09
                            case 41: //1.10
                            case 42: //1.11
                                ObtenerDatosCosto(regCnpItem.Ccombcodi, fenergcodi, listaParam, out decimal valorCosto, out string monedaBdTmp);

                                //ver la moneda y unidad del costo, esto ayuda a identificar posibles inconsistencias con otros costos
                                string monedaXUnidadTmp = GetMonedaXUnidad(monedaBdTmp, regHandson.Unidad);
                                regCnpItem.Moneda = monedaBdTmp;
                                string valorCostoSol = ConstantesCombustibles.Soles == monedaBdTmp ? valorCosto.ToString() : "";
                                string valorCostoDolar = ConstantesCombustibles.Dolar == monedaBdTmp ? valorCosto.ToString() : "";
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdavalor = valorCostoSol, Cbevdavalor2 = valorCostoDolar, Cbevdatipo = monedaXUnidadTmp }));
                                break;
                            case 50: //2.06	Cantidad comprada
                            case 60: //3.06	Cantidad transportada
                            case 83: //7.06	Cantidad transportada
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = regHandson.Unidad })); //t
                                break;
                            case 51: //2.07	Pago realizado por la compra del carbón
                            case 61: //3.07	Pago realizado por el flete marítimo
                            case 65: //4.03	Pago realizado por el seguro marítimo
                            case 69: //5.03	Pagos por servicios aduaneros y otros costos de desaduanaje
                            case 74: //6.03	Costos de embarque de carbón
                            case 75: //6.04	Costos de desembarque de carbón
                            case 76: //6.05	Pago por demurrage
                            case 84: //7.07	Pagos realizados por flete terrestre
                            case 87: //8.03	Costos por pruebas de calidad de combustible
                                regCnpItem.Moneda = regSec.Seccion.Moneda;
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = GetMonedaDesc(regSec.Seccion.Moneda) })); //USD
                                break;

                            case 52: //2.08	Poder Calorífico Superior del carbón
                            case 53: //2.09	Poder Calorífico Inferior del carbón
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = ConstantesCombustibles.KjXKilo })); //kJ/kg
                                break;

                            case 70: //5.04	Impuestos que no generan crédito fiscal por compra de combustible
                            case 85: //7.08	Impuestos por flete terrestre del combustible
                                regCnpItem.Moneda = GetMonedaSeccion(regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100).ListaItem, 42); //1.11 Costo unitario por impuestos para la central vigente
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = GetMonedaDesc(regCnpItem.Moneda) }));
                                break;

                            case 88: //8.04	Costos por mermas de carbón
                                regCnpItem.Moneda = regSec.Seccion.Moneda;
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = GetMonedaXUnidad(regSec.Seccion.Moneda, unidadGlobal) })); //USD/kg
                                break;

                            case 107: //9.01 Precio unitario del carbón (pc)
                            case 108: //
                            case 109: //
                            case 110: //
                            case 111: //
                            case 112: //
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = ConstantesCombustibles.SolesXKilo, Cbevdatipo2 = ConstantesCombustibles.DolaresXKilo }, true));
                                break;
                            case 113: //
                            case 114: //
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { Cbevdatipo = ConstantesCombustibles.SolesXKilo, }, true));
                                break;

                            default:
                                listaItem.Add(GetItemYFormatear(regCnpItem, listaDatoXVersion, new CbDatosDTO() { }));
                                break;
                        }
                    }
                    regSec.ListaItem = listaItem;
                }

                #endregion

                regHandson.ListaSeccion.Add(regSec);
            }

            #endregion

            #region Documentos

            //obtener lista de archivos
            regHandson.ListaSeccionDocumento = new List<SeccionCombustible>();

            if (ConstantesCombustibles.EstcomcodiLiquido == estcomcodi)
            {
                SeccionCombustible s1 = new SeccionCombustible();
                s1.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 13);
                s1.Seccion.Titulo = "2.- Comprobantes de pago por compra de combustibles líquidos.";
                s1.Seccion.Descripcion = "Comprobantes de pago que sustentan la compra de combustibles líquidos.";
                s1.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 13).ToList();
                regHandson.ListaSeccionDocumento.Add(s1);

                SeccionCombustible s2 = new SeccionCombustible();
                s2.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 10);
                s2.Seccion.Titulo = "3.- Comprobantes de pago por transporte de combustibles líquidos.";
                s2.Seccion.Descripcion = "Comprobantes de pago que sustentan el transporte de combustibles líquidos.";
                s2.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 10).ToList();
                regHandson.ListaSeccionDocumento.Add(s2);

                SeccionCombustible s3 = new SeccionCombustible();
                s3.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 30);
                s3.Seccion.Titulo = "4.- Comprobantes de pago por otros costos.";
                s3.Seccion.Descripcion = "Comprobante de pago a terceros por las pruebas de calidad del combustible.";
                s3.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 30).ToList();
                regHandson.ListaSeccionDocumento.Add(s3);
            }

            if (ConstantesCombustibles.EstcomcodiSolido == estcomcodi)
            {
                SeccionCombustible s1 = new SeccionCombustible();
                s1.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 45);
                s1.Seccion.Titulo = "2. Comprobantes de pago por compra de combustible";
                s1.Seccion.Descripcion = "Comprobante de pago con los correspondientes anexos. Resultados de pruebas de control de calidad de recepción del carbón en el sitio de entrega del proveedor, que contenga los valores del poder calorífico";
                s1.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 45).ToList();
                regHandson.ListaSeccionDocumento.Add(s1);

                SeccionCombustible s2 = new SeccionCombustible();
                s2.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 55);
                s2.Seccion.Titulo = "3 y 4.- Comprobantes de pago de fletes y de seguros marítimos";
                s2.Seccion.Descripcion = "";
                s2.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 55).ToList();
                regHandson.ListaSeccionDocumento.Add(s2);

                SeccionCombustible s3 = new SeccionCombustible();
                s3.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 67);
                s3.Seccion.Titulo = "5.- Comprobantes de pago por servicios aduaneros y otros servicios de desaduanaje";
                s3.Seccion.Descripcion = "";
                s3.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 67).ToList();
                regHandson.ListaSeccionDocumento.Add(s3);

                SeccionCombustible s4 = new SeccionCombustible();
                s4.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 70);
                s4.Seccion.Titulo = "6.- Comprobantes de pago por embarque y desembarque";
                s4.Seccion.Descripcion = "";
                s4.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 70).ToList();
                regHandson.ListaSeccionDocumento.Add(s4);

                SeccionCombustible s5 = new SeccionCombustible();
                s5.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 74);
                s5.Seccion.Titulo = "7.- Comprobantes de pago por fletes terrestres";
                s5.Seccion.Descripcion = "";
                s5.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 74).ToList();
                regHandson.ListaSeccionDocumento.Add(s5);

                SeccionCombustible s6 = new SeccionCombustible();
                s6.Seccion = listaCnpAll.Find(x => x.Ccombcodi == 84);
                s6.Seccion.Titulo = "8.- Comprobantes de pago por pruebas de calidad de combustible. Documentos y hojas de cálculo por mermas.";
                s6.Seccion.Descripcion = "";
                s6.ListaArchivo = listaArchivoXVersion.Where(x => x.Ccombcodi == 84).ToList();
                regHandson.ListaSeccionDocumento.Add(s6);
            }

            #endregion

            //convertir string a decimal
            SetearValorDecimalToGrilla(regHandson);

            if (esVolverCalcularValores)
            {
                ArmarPopupFactura(regHandson);

                //actualizar la grilla con las facturas
                //setear totales y valores temporales de cada sección
                regHandson = ActualizarHandsonFormateoYResultado(regHandson, false);
            }

            return regHandson;
        }

        private string GetMonedaSeccion(List<CbConceptocombDTO> listaItemSeccion1, int concepcodiItemBD)
        {
            var regItemBD = listaItemSeccion1.Find(x => x.Ccombcodi == concepcodiItemBD);
            if (regItemBD != null) return regItemBD.Moneda;

            return ConstantesCombustibles.Soles;
        }

        /// <summary>
        /// Actualizar los items que se llenan a partir de las facturas y también la fila de totales
        /// </summary>
        /// <param name="regHandson"></param>
        /// <param name="usarDateTimeFactura"></param>
        /// <returns></returns>
        public HandsonCombustible ActualizarHandsonFormateoYResultado(HandsonCombustible regHandson, bool usarDateTimeFactura)
        {
            //convertir string a decimal
            SetearValorDecimalToGrilla(regHandson);

            //formateo
            ListaFacturaToGrilla(regHandson, usarDateTimeFactura, out List<CeldaErrorCombustible> listaErrorFactura);

            //convertir string a decimal
            SetearValorDecimalToGrilla(regHandson);

            //resultados
            CeldaErrorCombustible regErrorResl = null;
            try
            {
                ArmarSeccionResultadoGrilla(regHandson);
            }
            catch (Exception ex)
            {
                regErrorResl = new CeldaErrorCombustible() { Celda = string.Empty, Valor = string.Empty, Mensaje = "Existen celdas con datos inválidos o incompletos. No permite obtener el valor de la sección RESULTADS." };
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }

            int cbcxfecodi = GetByFenergYGrupocodi(regHandson.Fenergcodi, regHandson.Grupocodi).Cbcxfecodi;
            var listaItemsResultado = ObtenerConceptocombsResultados(cbcxfecodi, regHandson.Estcomcodi, regHandson.Fenergcodi, regHandson.Grupocodi);
            List<CeldaErrorCombustible> listaErrorResultado = ListarErrorSeccionResultado(regHandson, listaItemsResultado);

            //obtener lista de errores
            regHandson.ListaErrores = ListarErroresGrilla(regHandson);
            regHandson.ListaErrores.AddRange(listaErrorFactura);
            regHandson.ListaErrores.AddRange(listaErrorResultado);

            if (regErrorResl != null)
                regHandson.ListaErrores.Add(regErrorResl);

            return regHandson;
        }

        /// <summary>
        /// Inicializar campos para el popup
        /// </summary>
        /// <param name="regHandson"></param>
        private void ArmarPopupFactura(HandsonCombustible regHandson)
        {
            foreach (var regSec in regHandson.ListaSeccion)
            {
                if (ConstantesCombustibles.EstcomcodiLiquido == regHandson.Estcomcodi)
                {
                    //asignar valor a seccion para abrir popup
                    foreach (var regItem in regSec.ListaItem)
                    {
                        switch (regItem.Ccombcodi)
                        {
                            case 5: //1.05	Fecha de ingreso de combustible comprado en almacén
                                regSec.Seccion.FechaIngreso = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 6: //1.06	Volumen de combustible en almacén
                                decimal.TryParse(regItem.ItemDato.Cbevdavalor ?? "", out decimal val3);
                                regSec.Seccion.CombustibleAlmacenado = val3;
                                break;
                            case 15: //2.03 Proveedor del combustible
                                regSec.Seccion.Proveedor = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 16: //2.04	Sitio de entrega del proveedor
                                regSec.Seccion.Sitio = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 23: //3.03	Proveedor del transporte
                                regSec.Seccion.Proveedor = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 24: //3.04	Sitio de carga del combustible
                                regSec.Seccion.Sitio = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 25: //3.05	Sitio de descarga del combustible
                                regSec.Seccion.Sitio2 = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                        }
                    }
                }

                if (ConstantesCombustibles.EstcomcodiSolido == regHandson.Estcomcodi)
                {
                    //inicializar valores seccion para abrir popup
                    foreach (var regItem in regSec.ListaItem)
                    {
                        switch (regItem.Ccombcodi)
                        {
                            case 36: //1.05	Fecha de ingreso de carbón comprado en almacén
                                regSec.Seccion.FechaIngreso = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 37: //1.06	Cantidad de carbón en almacén
                                decimal.TryParse(regItem.ItemDato.Cbevdavalor ?? "", out decimal val3);
                                regSec.Seccion.CombustibleAlmacenado = val3;
                                break;
                            case 47: //2.03	Procedencia del carbón
                                regSec.Seccion.Procedencia = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 48: //2.04	Proveedor del carbón
                                regSec.Seccion.Proveedor = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 49: //2.05	Sitio de entrega del proveedor
                                regSec.Seccion.Sitio = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 52: //2.08	Poder Calorífico Superior del carbón
                                decimal.TryParse(regItem.ItemDato.Cbevdavalor ?? "", out decimal val1);
                                regSec.Seccion.PcSup = val1;
                                break;
                            case 53: //2.09	Poder Calorífico Inferior del carbón
                                decimal.TryParse(regItem.ItemDato.Cbevdavalor ?? "", out decimal val2);
                                regSec.Seccion.PcInf = val2;
                                break;
                            case 57: //3.03	Proveedor del transporte
                                regSec.Seccion.Proveedor = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 58: //3.04	Puerto de embarque del combustible
                                regSec.Seccion.Puerto = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 59: //3.05	Puerto de desembarque en el Perú
                                regSec.Seccion.Puerto2 = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 80: //7.03	Proveedor del transporte
                                regSec.Seccion.Proveedor = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 81: //7.04	Sitio de cargue del carbón
                                regSec.Seccion.Sitio = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                            case 82: //7.05	Sitio de descargue del combustible
                                regSec.Seccion.Sitio2 = regItem.ItemDato.Cbevdavalor ?? "";
                                break;
                        }
                    }
                }
            }

        }

        private List<string> ListarUnidadesDolar()
        {
            List<string> listaDolar = new List<string>() { ConstantesCombustibles.Dolar, ConstantesCombustibles.DolarDesc, ConstantesCombustibles.DolaresXLitro, ConstantesCombustibles.DolaresXKilo };

            return listaDolar;
        }

        private void SetearValorDecimalToGrilla(HandsonCombustible regHandson)
        {
            List<string> listaDolar = ListarUnidadesDolar();

            //convertir string a decimal
            foreach (var seccion in regHandson.ListaSeccion)
            {
                foreach (var regItem in seccion.ListaItem)
                {
                    if (regItem.Ccombcodi == 7)
                    { }

                    if ((regItem.Ccombtipo ?? "").Trim().ToUpper() == "N") //si la celda es numerica
                    {
                        decimal.TryParse(regItem.ItemDato.Cbevdavalor ?? "", out decimal val1);
                        decimal.TryParse(regItem.ItemDato.Cbevdavalor2 ?? "", out decimal val2);

                        regItem.ItemDato.Valor = val1;
                        regItem.ItemDato.Valor2 = val2;

                        //seleccionar valor numerico a mostrar 
                        regItem.ItemDato.Cbevdavalornumerico = regItem.ItemDato.Cbevdavalor ?? "";
                        if (listaDolar.Contains(regItem.ItemDato.Cbevdatipo)) //setear valor de sol o dolar , excepto para la seccion BD
                            regItem.ItemDato.Cbevdavalornumerico = regItem.ItemDato.Cbevdavalor2 ?? "";
                    }
                }
            }
        }

        private void ListaFacturaToGrilla(HandsonCombustible regHandson, bool usarDateTimeFactura, out List<CeldaErrorCombustible> listaError)
        {
            listaError = new List<CeldaErrorCombustible>();
            //el flag guardarBD es para no crear objetos datetime que no permiten JavaScriptSerializer

            foreach (var seccion in regHandson.ListaSeccion)
            {
                List<int> lcDetalle = new List<int>() { seccion.Seccion.ConcepcodiCombAlmacenado, seccion.Seccion.ConcepcodiFactura, seccion.Seccion.ConcepcodiDemurrage, seccion.Seccion.ConcepcodiMerma };
                foreach (var cnpF in lcDetalle)
                {
                    var regBtn = seccion.ListaItem.Find(x => x.Ccombcodi == cnpF);
                    if (regBtn != null)
                    {
                        if (regBtn.ItemDato.ListaDetalle != null)
                        {
                            //primero ordenar (para visualizacion en handson)
                            foreach (var regF in regBtn.ItemDato.ListaDetalle)
                            {
                                if (!string.IsNullOrEmpty(regF.CbdetfechaemisionDesc))
                                    regF.Cbdetfechaemision = DateTime.ParseExact(regF.CbdetfechaemisionDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                            }
                            regBtn.ItemDato.ListaDetalle = regBtn.ItemDato.ListaDetalle.OrderBy(x => x.Cbdetfechaemision).ThenBy(x => x.Cbdetcompago).ToList();

                            //si se actualiza la grilla, el objeto no debe tener datetimes sino saldria error al tratar de guardar el objeto
                            foreach (var regF in regBtn.ItemDato.ListaDetalle)
                            {
                                if (usarDateTimeFactura && !string.IsNullOrEmpty(regF.CbdetfechaemisionDesc))
                                    regF.Cbdetfechaemision = DateTime.ParseExact(regF.CbdetfechaemisionDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                                else
                                    regF.Cbdetfechaemision = null;
                            }
                        }
                        else
                        {
                            //por defecto debe ser lista vacía
                            regBtn.ItemDato.ListaDetalle = new List<CbDatosDetalleDTO>();
                        }
                    }
                }
            }

            if (regHandson.Estcomcodi == ConstantesCombustibles.EstcomcodiLiquido)
            {
                //Tipo de cambio
                var seccion100 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100);
                var reg104Tcambio = seccion100.ListaItem.Find(x => x.Ccombcodi == 4).ItemDato;

                foreach (var seccion in regHandson.ListaSeccion)
                {
                    //iterar por cada item que guarda lista de detalle (facturas, demurrage, merma)
                    List<int> lcDetalle = new List<int>() { seccion.Seccion.ConcepcodiCombAlmacenado, seccion.Seccion.ConcepcodiFactura, seccion.Seccion.ConcepcodiDemurrage, seccion.Seccion.ConcepcodiMerma };
                    foreach (var cnpF in lcDetalle)
                    {
                        var regBtn = seccion.ListaItem.Find(x => x.Ccombcodi == cnpF);
                        if (regBtn != null)
                        {
                            decimal pagoSol = 0, pagoDolar = 0, impuestoSol = 0, impuestoDolar = 0;
                            string pagoFormulaSol = string.Empty, pagoFormulaDolar = string.Empty, impuestoFormulaSol = string.Empty, impuestoFormulaDolar = string.Empty;

                            //las facturas se guardan en los item 2.01, 3.01, 4.01
                            var listaF = regBtn.ItemDato.ListaDetalle;
                            bool tieneTcFactura = seccion.Seccion.ConcepcodiFactura == regBtn.Ccombcodi; //no incluye formularios de mermas o demurrage

                            string monedaCosto = seccion.Seccion.Moneda;
                            if (seccion.Seccion.ConcepcodiDemurrage == cnpF || seccion.Seccion.ConcepcodiMerma == cnpF)
                            {
                                if (listaF.Any()) monedaCosto = listaF.First().Cbdetmoneda;
                            }

                            string compago = string.Join(ConstantesCombustibles.SeparadorHandson, listaF.Select(x => x.Cbdetcompago));
                            string fechas = string.Join(ConstantesCombustibles.SeparadorHandson, listaF.Select(x => x.CbdetfechaemisionDesc).Distinct());
                            decimal volumen = listaF.Sum(x => x.Cbdetvolumen);
                            string volumenFormula = string.Join("+", listaF.Select(x => x.Cbdetvolumen));
                            GetEvaluacionCosto("Cbdetcosto", listaF, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel, tieneTcFactura, out pagoSol, out pagoDolar, out pagoFormulaSol, out pagoFormulaDolar);
                            GetEvaluacionCosto("Cbdetimpuesto", listaF, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel, tieneTcFactura, out impuestoSol, out impuestoDolar, out impuestoFormulaSol, out impuestoFormulaDolar);

                            foreach (var regItem in seccion.ListaItem)
                            {
                                switch (regItem.Ccombcodi)
                                {
                                    case 5: //1.05	Fecha de ingreso de combustible comprado en almacén
                                        regItem.ItemDato.Cbevdavalor = fechas ?? "";

                                        listaError = ListarErrorItem105(regItem.ItemDato.Cbevdavalor, regHandson.Cbenvcodi, regHandson.Equicodi, regHandson.Fenergcodi);
                                        break;
                                    case 6: //1.06	Volumen de combustible en almacén

                                        //NO se calculará cuando su estado es OBSERVADO y esté habilitado el item 1.06 para ingreso manual
                                        if (!regHandson.EsEditableItem106)
                                        {
                                            decimal? resultado = 0;
                                            if (listaF.Any()) resultado = CalcularVolumenCombustibleAlmacen(regHandson, listaF);

                                            regItem.ItemDato.Cbevdavalor = resultado.GetValueOrDefault(0).ToString();
                                        }
                                        else
                                        {
                                            regItem.ItemDato.Cbevdavalor = seccion.Seccion.CombustibleAlmacenado.ToString();
                                        }
                                        break;
                                    case 15: //2.03 Proveedor del combustible
                                    case 23: //3.03	Proveedor del transporte
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Proveedor ?? "";
                                        break;
                                    case 16: //2.04	Sitio de entrega del proveedor
                                    case 24: //3.04	Sitio de carga del combustible
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Sitio ?? "";
                                        break;
                                    case 25: //3.05	Sitio de descarga del combustible
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Sitio2 ?? "";
                                        break;
                                }

                                if (seccion.Seccion.ConcepcodiFactura == regBtn.Ccombcodi)
                                {
                                    switch (regItem.Ccombcodi)
                                    {
                                        case 13: //2.01	Identificación del comprobante de pago
                                        case 21: //3.01	Identificación del comprobante de pago
                                        case 93: //4.01	Identificacion del comprobante de pago
                                            regItem.ItemDato.Cbevdavalor = compago ?? "";
                                            break;
                                        case 14: //2.02	Fecha de emisión del comprobante de pago 
                                        case 22: //3.02	Fecha de emisión del comprobante de pago 
                                        case 94: //4.02	Fecha de emision del comprobante de pago 
                                            regItem.ItemDato.Cbevdavalor = fechas ?? "";
                                            break;
                                        case 17: //2.05	Volumen comprado
                                            regItem.ItemDato.Cbevdavalor = volumen.ToString();
                                            regItem.ItemDato.FormulaValor = volumenFormula;
                                            break;
                                        case 26: //3.06	Volumen transportado
                                            if (volumen > 0)
                                            {
                                                regItem.ItemDato.Cbevdavalor = volumen.ToString();
                                                regItem.ItemDato.FormulaValor = volumenFormula;
                                            }
                                            else
                                            {
                                                //si no hay factura de la seccion 3.0 entonces setear el valor 2.05 al 3.06
                                                var seccion200 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 200);
                                                var reg205VolComprado = seccion200.ListaItem.Find(x => x.Ccombcodi == 17).ItemDato;

                                                regItem.ItemDato.Cbevdavalor = reg205VolComprado.Cbevdavalor;
                                                regItem.ItemDato.FormulaValor = reg205VolComprado.Cbevdavalor;

                                            }
                                            break;
                                        case 18: //2.06	Pago realizado por la compra del combustible
                                        case 27: //3.07	Pago realizado por el transporte del combustible
                                        case 30: //4.03	Costo por pruebas de calidad de combustible
                                            if (regItem.Ccombcodi == 30)
                                            { }
                                            regItem.ItemDato.Cbevdavalor = pagoSol.ToString();
                                            regItem.ItemDato.Cbevdavalor2 = pagoDolar.ToString();
                                            regItem.ItemDato.FormulaValor = pagoFormulaSol;
                                            regItem.ItemDato.FormulaValor2 = pagoFormulaDolar;
                                            break;
                                        case 19: //2.07	Pago por impuestos por compra de combustible
                                        case 28: //3.08	Impuestos por transporte de combustible
                                            regItem.ItemDato.Cbevdavalor = impuestoSol.ToString();
                                            regItem.ItemDato.Cbevdavalor2 = impuestoDolar.ToString();
                                            regItem.ItemDato.FormulaValor = impuestoFormulaSol;
                                            regItem.ItemDato.FormulaValor2 = impuestoFormulaDolar;
                                            break;
                                    }
                                }

                                if (seccion.Seccion.ConcepcodiDemurrage == regBtn.Ccombcodi)
                                {
                                    if (regItem.Ccombcodi == 29)
                                    {
                                        //3.09	Pago por demurrage
                                        regItem.Moneda = monedaCosto;
                                        regItem.MonedaDesc = GetMonedaDesc(monedaCosto);
                                        regItem.ItemDato.Cbevdavalor = pagoSol.ToString();
                                        regItem.ItemDato.Cbevdavalor2 = pagoDolar.ToString();
                                        regItem.ItemDato.FormulaValor = pagoFormulaSol;
                                        regItem.ItemDato.FormulaValor2 = pagoFormulaDolar;
                                        regItem.ItemDato.Cbevdatipo = GetMonedaDesc(monedaCosto);
                                    }
                                }

                                if (seccion.Seccion.ConcepcodiMerma == regBtn.Ccombcodi)
                                {
                                    if (regItem.Ccombcodi == 31)
                                    {
                                        //4.04	Costos por Mermas
                                        regItem.Moneda = monedaCosto;
                                        regItem.MonedaDesc = GetMonedaDesc(monedaCosto);
                                        regItem.ItemDato.Cbevdavalor = pagoSol.ToString();
                                        regItem.ItemDato.Cbevdavalor2 = pagoDolar.ToString();
                                        regItem.ItemDato.FormulaValor = pagoFormulaSol;
                                        regItem.ItemDato.FormulaValor2 = pagoFormulaDolar;
                                        regItem.ItemDato.Cbevdatipo = GetMonedaXUnidad(monedaCosto, regHandson.Unidad);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            if (regHandson.Estcomcodi == ConstantesCombustibles.EstcomcodiSolido)
            {
                //Tipo de cambio
                var seccion100 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100);
                var reg104Tcambio = seccion100.ListaItem.Find(x => x.Ccombcodi == 35).ItemDato;

                foreach (var seccion in regHandson.ListaSeccion)
                {
                    //iterar por cada item que guarda lista de detalle (facturas, demurrage, merma)
                    List<int> lcDetalle = new List<int>() { seccion.Seccion.ConcepcodiCombAlmacenado, seccion.Seccion.ConcepcodiFactura, seccion.Seccion.ConcepcodiDemurrage, seccion.Seccion.ConcepcodiMerma };
                    foreach (var cnpF in lcDetalle)
                    {
                        var regBtn = seccion.ListaItem.Find(x => x.Ccombcodi == cnpF);
                        if (regBtn != null)
                        {
                            decimal pagoSol = 0, pagoDolar = 0, pagoSol2 = 0, pagoDolar2 = 0, impuestoSol = 0, impuestoDolar = 0;
                            string pagoFormulaSol = string.Empty, pagoFormulaDolar = string.Empty, impuestoFormulaSol = string.Empty, impuestoFormulaDolar = string.Empty;

                            //las facturas se guardan en los item 2.01, 3.01, 4.01 ...
                            var listaF = regBtn.ItemDato.ListaDetalle;
                            bool tieneTcFactura = seccion.Seccion.ConcepcodiFactura == regBtn.Ccombcodi; //no incluye formularios de mermas o demurrage

                            string monedaCosto = seccion.Seccion.Moneda;
                            if (seccion.Seccion.ConcepcodiDemurrage == cnpF || seccion.Seccion.ConcepcodiMerma == cnpF)
                            {
                                if (listaF.Any()) monedaCosto = listaF.First().Cbdetmoneda;
                            }

                            string compago = string.Join(ConstantesCombustibles.SeparadorHandson, listaF.Select(x => x.Cbdetcompago));
                            string fechas = string.Join(ConstantesCombustibles.SeparadorHandson, listaF.Select(x => x.CbdetfechaemisionDesc).Distinct());
                            decimal volumen = listaF.Sum(x => x.Cbdetvolumen);
                            string volumenFormula = string.Join("+", listaF.Select(x => x.Cbdetvolumen));
                            GetEvaluacionCosto("Cbdetcosto", listaF, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel, tieneTcFactura, out pagoSol, out pagoDolar, out pagoFormulaSol, out pagoFormulaDolar);
                            GetEvaluacionCosto("Cbdetcosto2", listaF, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel, tieneTcFactura, out pagoSol2, out pagoDolar2, out string pagoFormulaSol2, out string pagoFormulaDolar2);
                            GetEvaluacionCosto("Cbdetimpuesto", listaF, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel, tieneTcFactura, out impuestoSol, out impuestoDolar, out impuestoFormulaSol, out impuestoFormulaDolar);

                            foreach (var regItem in seccion.ListaItem)
                            {
                                switch (regItem.Ccombcodi)
                                {
                                    case 36: //1.05	Fecha de ingreso de carbón comprado en almacén
                                        regItem.ItemDato.Cbevdavalor = fechas ?? "";

                                        listaError = ListarErrorItem105(regItem.ItemDato.Cbevdavalor, regHandson.Cbenvcodi, regHandson.Equicodi, regHandson.Fenergcodi);
                                        break;
                                    case 37: //1.06	Cantidad de carbón en almacén
                                        //NO se calculará cuando su estado es OBSERVADO y esté habilitado el item 1.06 para ingreso manual
                                        if (!regHandson.EsEditableItem106)
                                        {
                                            decimal? resultado = 0;
                                            if (listaF.Any()) resultado = CalcularVolumenCombustibleAlmacen(regHandson, listaF);

                                            regItem.ItemDato.Cbevdavalor = resultado.GetValueOrDefault(0).ToString();
                                        }
                                        else
                                        {
                                            regItem.ItemDato.Cbevdavalor = seccion.Seccion.CombustibleAlmacenado.ToString();
                                        }
                                        break;
                                    case 47: //2.03	Procedencia del carbón
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Procedencia ?? "";
                                        break;
                                    case 48: //2.04	Proveedor del carbón
                                    case 57: //3.03	Proveedor del transporte
                                    case 80: //7.03	Proveedor del transporte
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Proveedor ?? "";
                                        break;
                                    case 49: //2.05	Sitio de entrega del proveedor
                                    case 81: //7.04	Sitio de cargue del carbón
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Sitio ?? "";
                                        break;
                                    case 82: //7.05	Sitio de descargue del combustible
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Sitio2 ?? "";
                                        break;
                                    case 58: //3.04	Puerto de embarque del combustible
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Puerto ?? "";
                                        break;
                                    case 59: //3.05	Puerto de desembarque en el Perú
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.Puerto2 ?? "";
                                        break;
                                    case 52: //2.08	Poder Calorífico Superior del carbón
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.PcSup.ToString();
                                        break;
                                    case 53: //2.09	Poder Calorífico Inferior del carbón
                                        regItem.ItemDato.Cbevdavalor = seccion.Seccion.PcInf.ToString();
                                        break;
                                }

                                if (seccion.Seccion.ConcepcodiFactura == regBtn.Ccombcodi)
                                {
                                    switch (regItem.Ccombcodi)
                                    {
                                        case 45: //2.01	Identificación del comprobante de pago
                                        case 55: //3.01	Identificación del comprobante de pago
                                        case 63: //4.01	Identificacion del comprobante de pago
                                        case 67: //5.01	Identificacion del comprobante de pago
                                        case 72: //6.01	Identificacion del comprobante de pago
                                        case 78: //7.01	Identificacion del comprobante de pago
                                        case 95: //8.01	Identificacion del comprobante de pago
                                            regItem.ItemDato.Cbevdavalor = compago ?? "";
                                            break;
                                        case 46: //2.02	Fecha de emisión del comprobante de pago 
                                        case 56: //3.02	Fecha de emisión del comprobante de pago 
                                        case 64: //4.02	Fecha de emision del comprobante de pago 
                                        case 68: //5.02	Fecha de emision del comprobante de pago 
                                        case 73: //6.02	Fecha de emision del comprobante de pago 
                                        case 79: //7.02	Fecha de emision del comprobante de pago 
                                        case 96: //8.02	Fecha de emision del comprobante de pago 
                                            regItem.ItemDato.Cbevdavalor = fechas ?? "";
                                            break;
                                        case 50: //2.06	Cantidad comprada
                                            regItem.ItemDato.Cbevdavalor = volumen.ToString();
                                            regItem.ItemDato.FormulaValor = volumenFormula;
                                            break;
                                        case 60: //3.06	Cantidad transportada
                                        case 83: //7.06	Cantidad transportada
                                            if (volumen > 0)
                                            {
                                                regItem.ItemDato.Cbevdavalor = volumen.ToString();
                                                regItem.ItemDato.FormulaValor = volumenFormula;
                                            }
                                            else
                                            {
                                                //si no hay factura de la seccion 3.0 o en 7.0 entonces setear el valor 2.06 al 3.06 y al 7.06 respectivamente
                                                var seccion200 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 200);
                                                var reg206VolComprado = seccion200.ListaItem.Find(x => x.Ccombcodi == 50).ItemDato;

                                                regItem.ItemDato.Cbevdavalor = reg206VolComprado.Cbevdavalor;
                                                regItem.ItemDato.FormulaValor = reg206VolComprado.Cbevdavalor;

                                            }
                                            break;
                                        case 51: //2.07	Pago realizado por la compra del carbón
                                        case 61: //3.07	Pago realizado por el flete marítimo
                                        case 65: //4.03	Pago realizado por el seguro marítimo
                                        case 69: //5.03	Pagos por servicios aduaneros y otros costos de desaduanaje
                                        case 74: //6.03	Costos de embarque de carbón
                                        case 84: //7.07	Pagos realizados por flete terrestre
                                        case 87: //8.03	Costos por pruebas de calidad de combustible
                                            if (regItem.Ccombcodi == 74)
                                            { }
                                            regItem.ItemDato.Cbevdavalor = pagoSol.ToString();
                                            regItem.ItemDato.Cbevdavalor2 = pagoDolar.ToString();
                                            regItem.ItemDato.FormulaValor = pagoFormulaSol;
                                            regItem.ItemDato.FormulaValor2 = pagoFormulaDolar;
                                            break;
                                        case 75: //6.04	Costos de desembarque de carbón
                                            regItem.ItemDato.Cbevdavalor = pagoSol2.ToString();
                                            regItem.ItemDato.Cbevdavalor2 = pagoDolar2.ToString();
                                            regItem.ItemDato.FormulaValor = pagoFormulaSol2;
                                            regItem.ItemDato.FormulaValor2 = pagoFormulaDolar2;
                                            break;

                                        case 70: //5.04	Impuestos que no generan crédito fiscal por compra de combustible
                                        case 85: //7.08	Impuestos por flete terrestre del combustible
                                            regItem.ItemDato.Cbevdavalor = impuestoSol.ToString();
                                            regItem.ItemDato.Cbevdavalor2 = impuestoDolar.ToString();
                                            regItem.ItemDato.FormulaValor = impuestoFormulaSol;
                                            regItem.ItemDato.FormulaValor2 = impuestoFormulaDolar;
                                            break;
                                    }
                                }

                                if (seccion.Seccion.ConcepcodiDemurrage == regBtn.Ccombcodi)
                                {
                                    if (regItem.Ccombcodi == 76)
                                    {
                                        //6.05	Pago por demurrage
                                        regItem.Moneda = monedaCosto;
                                        regItem.MonedaDesc = GetMonedaDesc(monedaCosto);
                                        regItem.ItemDato.Cbevdavalor = pagoSol.ToString();
                                        regItem.ItemDato.Cbevdavalor2 = pagoDolar.ToString();
                                        regItem.ItemDato.FormulaValor = pagoFormulaSol;
                                        regItem.ItemDato.FormulaValor2 = pagoFormulaDolar;
                                        regItem.ItemDato.Cbevdatipo = GetMonedaDesc(monedaCosto);
                                    }
                                }

                                if (seccion.Seccion.ConcepcodiMerma == regBtn.Ccombcodi)
                                {
                                    if (regItem.Ccombcodi == 88)
                                    {
                                        //8.04	Costos por mermas de carbón
                                        regItem.Moneda = monedaCosto;
                                        regItem.MonedaDesc = GetMonedaDesc(monedaCosto);
                                        regItem.ItemDato.Cbevdavalor = pagoSol.ToString();
                                        regItem.ItemDato.Cbevdavalor2 = pagoDolar.ToString();
                                        regItem.ItemDato.FormulaValor = pagoFormulaSol;
                                        regItem.ItemDato.FormulaValor2 = pagoFormulaDolar;
                                        regItem.ItemDato.Cbevdatipo = GetMonedaXUnidad(monedaCosto, regHandson.Unidad);
                                    }
                                }
                            }
                        }
                    }
                }
            }

        }

        /// <summary>
        /// Calcula Volumen de combustible en almacén
        /// </summary>
        /// <param name="regHandson"></param>
        /// <param name="listaF"></param>
        /// <returns></returns>
        private decimal? CalcularVolumenCombustibleAlmacen(HandsonCombustible regHandson, List<CbDatosDetalleDTO> listaF)
        {
            List<DateTime> lstfechas = listaF
                .Select(x => DateTime.ParseExact(x.CbdetfechaemisionDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture)).ToList();

            DateTime fechaMin = lstfechas.Min();
            DateTime fechaAyer = DateTime.Today.AddDays(-1);

            List<MeMedicionxintervaloDTO> listaDeclaradoFinal = GetCombustibleXCentral(fechaAyer, fechaAyer, regHandson.Fenergcodi, regHandson.Grupocodi, ConstantesStockCombustibles.StrTptoStock);
            List<MeMedicionxintervaloDTO> listaRecepcion = GetCombustibleXCentral(fechaMin, fechaAyer, regHandson.Fenergcodi, regHandson.Grupocodi, ConstantesStockCombustibles.StrTptoRecepcion);

            var sumDeclaradoFinal = listaDeclaradoFinal.Sum(x => x.Medinth1.GetValueOrDefault(0));
            var sumRecepcion = listaRecepcion.Sum(x => x.Medinth1.GetValueOrDefault(0));

            decimal resultado = sumDeclaradoFinal - sumRecepcion;

            //si es liquido convertir los metros cubicos a litros
            int idTipoCombustible = GetEstcomcodiByFenergcodi(regHandson.Fenergcodi);
            if (ConstantesCombustibles.EstcomcodiLiquido == idTipoCombustible)
                resultado = resultado * 1000;

            if (resultado < 0) resultado = 0;

            return resultado;
        }

        private void ArmarSeccionResultadoGrilla(HandsonCombustible regHandson)
        {
            DateTime fechaVigencia = DateTime.Today; //consultar con usuario

            if (regHandson.Estcomcodi == ConstantesCombustibles.EstcomcodiLiquido)
            {
                var seccion100 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100);
                var seccion200 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 200);
                var seccion300 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 300);
                var seccion400 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 400);
                var seccion500 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 500);

                //
                var reg104Tcambio = seccion100.ListaItem.Find(x => x.Ccombcodi == 4).ItemDato;

                var reg106VolAlmacen = seccion100.ListaItem.Find(x => x.Ccombcodi == 6).ItemDato;
                var reg107CostoCombBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 7).ItemDato;
                var reg108CostoTranspBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 8).ItemDato;
                var reg109CostoTratMecBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 9).ItemDato;
                var reg110CostoTratQuiBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 10).ItemDato;
                var reg111CostoImpBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 11).ItemDato;

                var reg205VolComprado = seccion200.ListaItem.Find(x => x.Ccombcodi == 17).ItemDato;
                var reg206CostoCompra = seccion200.ListaItem.Find(x => x.Ccombcodi == 18).ItemDato;
                var reg207ImpCompra = seccion200.ListaItem.Find(x => x.Ccombcodi == 19).ItemDato;

                var reg306VolTransp = seccion300.ListaItem.Find(x => x.Ccombcodi == 26).ItemDato;
                var reg307PagoTransp = seccion300.ListaItem.Find(x => x.Ccombcodi == 27).ItemDato;
                var reg308ImpTransp = seccion300.ListaItem.Find(x => x.Ccombcodi == 28).ItemDato;
                //var reg309PagoDemurrage = seccion300.ListaItem.Find(x => x.Ccombcodi == 29).ItemDato;

                var reg403CostoPrueba = seccion400.ListaItem.Find(x => x.Ccombcodi == 30).ItemDato;
                //var reg404CostoMerma = seccion400.ListaItem.Find(x => x.Ccombcodi == 31).ItemDato;

                //inicializar
                foreach (var regItem in seccion500.ListaItem)
                {
                    if (regItem.Ccombcodi == 104 || regItem.Ccombcodi == 105) //104	Costo financiero. 105	Costo total del combustible
                        SetCbConceptocombFilaResultado(regItem, 0, string.Empty, ConstantesCombustibles.Soles, 0, "0");
                    else
                    {
                        string monedaItemResultado = string.Empty;
                        switch (regItem.Ccombcodi)
                        {
                            case 98://5.01	Costo unitario del combustible (pc)
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 7); //1.07
                                break;
                            case 99://5.02	Costo Unitario de Transporte (ctc)
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 8); //1.08
                                break;
                            case 100://5.03	Costo unitario de tratamiento mecánico (ctmc)
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 9); //1.09
                                break;
                            case 101://5.04	Costo unitario de tratamiento químico (ctqc)
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 10); //1.10
                                break;
                            case 102://5.05	Costos por Mermas
                                monedaItemResultado = GetMonedaSeccion(seccion400.ListaItem, 31); //4.04 Costos por mermas
                                break;
                            case 103://5.06	Costo unitario por impuestos para la central
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 11); //1.11
                                break;
                        }

                        //generar objeto default
                        regItem.Moneda = monedaItemResultado;
                        SetCbConceptocombFilaResultado(regItem, 0, string.Empty, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);
                    }
                }

                //bd
                string concepcodisTotal = GetParametrosTotalCentralByFenergcodi(regHandson.Fenergcodi);
                List<PrGrupodatDTO> listaBDTot = ListarFormulaPrecio(concepcodisTotal, regHandson.Grupocodi, fechaVigencia);
                PrGrupodatDTO regPcomb = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoPcomb, regHandson.Fenergcodi));
                PrGrupodatDTO regCTransp = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoCTransp, regHandson.Fenergcodi));
                PrGrupodatDTO regTMecan = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoTMecan, regHandson.Fenergcodi));
                PrGrupodatDTO regTQuim = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoTQuim, regHandson.Fenergcodi));
                PrGrupodatDTO regMerma = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoMerm, regHandson.Fenergcodi));
                PrGrupodatDTO regImp = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoImp, regHandson.Fenergcodi));

                //
                foreach (var regItem in seccion500.ListaItem)
                {
                    decimal valor = 0;
                    string formulaExcel = string.Empty;

                    switch (regItem.Ccombcodi)
                    {
                        case 98:
                            //5.01	Costo unitario del combustible (pc)

                            //Proviene de ponderación de 1,07 y (2,06 + 4,01) por sus respectivos volúmenes 1,06 y 2,05. 
                            //Si la moneda de compra difiere de la vigente en BD se utilizan los TC que corresponden (al lado derecho). 
                            //Este resultado se guarda en la BD. 
                            //Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                            //Si el valor vigente está S/ se guarda el resultado en S/.

                            if (reg106VolAlmacen.Valor + reg205VolComprado.Valor != 0)
                            {
                                valor = ((GetValorCelda(reg107CostoCombBD, regItem.Moneda) * reg106VolAlmacen.Valor) + GetValorCelda(reg206CostoCompra, regItem.Moneda) + GetValorCelda(reg403CostoPrueba, regItem.Moneda))
                                           / (reg106VolAlmacen.Valor + reg205VolComprado.Valor);
                                formulaExcel = string.Format(@"(({0} * {1}) + {2} + {3})
                                                                / ({4} + {5})"
                                                            , reg107CostoCombBD.CeldaExcel, reg106VolAlmacen.CeldaExcel, reg206CostoCompra.CeldaExcel, reg403CostoPrueba.CeldaExcel
                                                            , reg106VolAlmacen.CeldaExcel, reg205VolComprado.CeldaExcel);
                            }

                            SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);

                            regPcomb.Formuladat = regItem.ItemDato.Cbevdavalor.ToString(); //
                            regPcomb.CeldaExcel = regItem.ItemDato.CeldaExcel; //

                            break;
                        case 99:
                            //5.02	Costo Unitario de Transporte (ctc)

                            //Proviene de ponderación de 1,08 y (3,07 + 3,08 + 3,09) por sus respectivos volúmenes 1,06 y 3,06. 
                            //Si la moneda de alguno difiere de la vigente en BD se utilizan los TC que corresponden (al lado derecho). 
                            //Este resultado se guarda en la BD. 
                            //Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                            //Si el valor vigente está S/ se guarda el resultado en S/.

                            if (reg106VolAlmacen.Valor + reg306VolTransp.Valor != 0)
                            {
                                valor = ((GetValorCelda(reg108CostoTranspBD, regItem.Moneda) * reg106VolAlmacen.Valor) + (GetValorCelda(reg307PagoTransp, regItem.Moneda)))
                                            / (reg106VolAlmacen.Valor + reg306VolTransp.Valor);
                                formulaExcel = string.Format(@"(({0} * {1}) + {2})
                                                                / ({3} + {4})"
                                                            , reg108CostoTranspBD.CeldaExcel, reg106VolAlmacen.CeldaExcel, reg307PagoTransp.CeldaExcel
                                                            , reg106VolAlmacen.CeldaExcel, reg306VolTransp.CeldaExcel);
                            }

                            SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);

                            regCTransp.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                            regCTransp.CeldaExcel = regItem.ItemDato.CeldaExcel;

                            break;
                        case 100:
                            //5.03	Costo unitario de tratamiento mecánico (ctmc)

                            //Reflejo de los valores vígentes en la BD. No se guarda en BD.
                            valor = GetValorCelda(reg109CostoTratMecBD, regItem.Moneda);
                            formulaExcel = reg109CostoTratMecBD.CeldaExcel;

                            SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);

                            regTMecan.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                            regTMecan.CeldaExcel = regItem.ItemDato.CeldaExcel;

                            break;
                        case 101:
                            //5.04	Costo unitario de tratamiento químico (ctqc)

                            //Reflejo de los valores vígentes en la BD. No se guarda en BD.
                            valor = GetValorCelda(reg110CostoTratQuiBD, regItem.Moneda);
                            formulaExcel = reg110CostoTratQuiBD.CeldaExcel;

                            SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);

                            regTQuim.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                            regTQuim.CeldaExcel = regItem.ItemDato.CeldaExcel;

                            break;
                        case 102:
                            //5.05	Costos por Mermas

                            //Obtenido de 4,02. Este resultado se guarda en la BD. 
                            //Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                            //Si el valor vigente está S/ se guarda el resultado en S/.
                            
                            /*valor = GetValorCelda(reg404CostoMerma, regItem.Moneda);
                            formulaExcel = reg404CostoMerma.CeldaExcel;

                            SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);

                            regMerma.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                            regMerma.CeldaExcel = regItem.ItemDato.CeldaExcel;*/

                            break;
                        case 103:
                            //5.06	Costo unitario por impuestos para la central

                            //Proviene de ponderación de 1,11 y 2,07 por sus respectivos volúmenes 1,06 y 2,05. 
                            //Si la moneda de compra difiere de la vigente en BD se utilizan los TC que corresponden (al lado derecho). 
                            //Este resultado se guarda en la BD. 
                            //Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                            //Si el valor vigente está S/ se guarda el resultado en S/.
                            if (reg106VolAlmacen.Valor + reg205VolComprado.Valor != 0)
                            {
                                valor = ((GetValorCelda(reg111CostoImpBD, regItem.Moneda) * reg106VolAlmacen.Valor) + GetValorCelda(reg207ImpCompra, regItem.Moneda) + GetValorCelda(reg308ImpTransp, regItem.Moneda))
                                            / (reg106VolAlmacen.Valor + reg205VolComprado.Valor);
                                formulaExcel = string.Format(@"(({0} * {1}) + {2} + {3})
                                                                / ({4} + {5})"
                                                            , reg111CostoImpBD.CeldaExcel, reg106VolAlmacen.CeldaExcel, reg207ImpCompra.CeldaExcel, reg308ImpTransp.CeldaExcel
                                                            , reg106VolAlmacen.CeldaExcel, reg205VolComprado.CeldaExcel);
                            }

                            SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);

                            regImp.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                            regImp.CeldaExcel = regItem.ItemDato.CeldaExcel;

                            break;
                    }

                }

                PrGrupodatDTO regCFinanc = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoCFinanc, regHandson.Fenergcodi));
                PrGrupodatDTO regCTotal = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoCTotal, regHandson.Fenergcodi));

                n_parameter l_param = new n_parameter();
                foreach (var reg in listaBDTot)
                {
                    l_param.SetData(reg.Concepabrev, reg.Formuladat);
                }

                foreach (var regItem in seccion500.ListaItem)
                {
                    decimal valor = 0;
                    string formulaExcel = string.Empty;

                    switch (regItem.Ccombcodi)
                    {
                        case 104:
                            //5.07	Costo Financiero

                            //Fórmula ya existe en BD.
                            regCFinanc.CeldaExcel = regItem.ItemDato.CeldaExcel;
                            valor = (decimal)l_param.GetEvaluate(regCFinanc.Concepabrev);

                            formulaExcel = regCFinanc.Formuladat;
                            foreach (var reg in listaBDTot)
                            {
                                formulaExcel = formulaExcel.Replace(reg.Concepabrev, reg.CeldaExcel);
                            }
                            SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, ConstantesCombustibles.Soles, 0, "0");

                            break;
                        case 105:
                            //5.08	Costo Total del combustible

                            //Fórmula ya existe en BD. En el aplicativo solo se muestra para S/. 
                            //Si algunos de los componentes está en USD, se debe indicar que el valor en S/ es únicamente referencial, calculada con el TC del momento indicada en 1.04.

                            regCTotal.CeldaExcel = regItem.ItemDato.CeldaExcel;
                            valor = (decimal)l_param.GetEvaluate(regCTotal.Concepabrev);

                            formulaExcel = regCTotal.Formuladat;
                            foreach (var reg in listaBDTot)
                            {
                                formulaExcel = formulaExcel.Replace(reg.Concepabrev, reg.CeldaExcel);
                            }
                            SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, ConstantesCombustibles.Soles, 0, "0");

                            break;
                    }

                }
            }

            if (regHandson.Estcomcodi == ConstantesCombustibles.EstcomcodiSolido)
            {
                var seccion100 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 100);
                var seccion200 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 200);
                var seccion300 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 300);
                var seccion400 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 400);
                var seccion500 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 500);
                var seccion600 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 600);
                var seccion700 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 700);
                var seccion800 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 800);
                var seccion900 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 900);

                //
                var reg104Tcambio = seccion100.ListaItem.Find(x => x.Ccombcodi == 35).ItemDato;

                var reg106CantAlmacen = seccion100.ListaItem.Find(x => x.Ccombcodi == 37).ItemDato;
                var reg107CostoCombBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 38).ItemDato;
                var reg108CostoFleteBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 39).ItemDato;
                var reg109CostoAduana = seccion100.ListaItem.Find(x => x.Ccombcodi == 40).ItemDato;
                var reg110CostoTransBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 41).ItemDato;
                var reg111CostoImpBD = seccion100.ListaItem.Find(x => x.Ccombcodi == 42).ItemDato;

                var reg206CantComprado = seccion200.ListaItem.Find(x => x.Ccombcodi == 50).ItemDato;
                var reg207CostoCompra = seccion200.ListaItem.Find(x => x.Ccombcodi == 51).ItemDato;
                //decimal poderCalSup = seccion200.ListaItem.Find(x => x.Ccombcodi == 52).ItemDato.Valor;
                var reg209PoderCalInf = seccion200.ListaItem.Find(x => x.Ccombcodi == 53).ItemDato;
                //decimal poderCalInf = seccion200.ListaItem.Find(x => x.Ccombcodi == 53).ItemDato.Valor;

                var reg306CantTransp = seccion300.ListaItem.Find(x => x.Ccombcodi == 60).ItemDato;
                var reg307PagoFlete = seccion300.ListaItem.Find(x => x.Ccombcodi == 61).ItemDato;

                var reg403PagoSeguro = seccion400.ListaItem.Find(x => x.Ccombcodi == 65).ItemDato;

                var reg503PagoAduana = seccion500.ListaItem.Find(x => x.Ccombcodi == 69).ItemDato;
                var reg504ImpCompra = seccion500.ListaItem.Find(x => x.Ccombcodi == 70).ItemDato;

                var reg603CostoEmb = seccion600.ListaItem.Find(x => x.Ccombcodi == 74).ItemDato;
                var reg604CostoDesemb = seccion600.ListaItem.Find(x => x.Ccombcodi == 75).ItemDato;
                var reg605CostoDemurrage = seccion600.ListaItem.Find(x => x.Ccombcodi == 76).ItemDato;

                var reg707PagoFlete = seccion700.ListaItem.Find(x => x.Ccombcodi == 84).ItemDato;
                var reg708ImpFlete = seccion700.ListaItem.Find(x => x.Ccombcodi == 85).ItemDato;

                var reg803CostoPrueba = seccion800.ListaItem.Find(x => x.Ccombcodi == 87).ItemDato;
                var reg804CostoMerma = seccion800.ListaItem.Find(x => x.Ccombcodi == 88).ItemDato;

                //inicializar
                foreach (var regItem in seccion900.ListaItem)
                {
                    if (regItem.Ccombcodi == 113 || regItem.Ccombcodi == 114) //113	Costo financiero. 114	Costo total
                        SetCbConceptocombFilaResultado(regItem, 0, string.Empty, ConstantesCombustibles.Soles, 0, "0");
                    else
                    {
                        string monedaItemResultado = string.Empty;
                        switch (regItem.Ccombcodi)
                        {
                            case 107: //9.01	Precio unitario del carbón (pc)
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 38); //1.07
                                break;
                            case 108: //9.02	Costo Unitario de Fletes marítimos y Seguros (cts)
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 39); //1.08
                                break;
                            case 109: //9.03	Costo unitario de aduana y otros costos de desaduanaje (cad)
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 40); //1.09
                                break;
                            case 110: //9.04	Costo unitario de embarque, desembarque y transporte terrestre (cemb)
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 41); //1.10
                                break;
                            case 111: //9.05	Costos por mermas
                                monedaItemResultado = GetMonedaSeccion(seccion800.ListaItem, 88); //8.04 Costos por mermas de carbón
                                break;
                            case 112: //9.06	Costo Unitario por Impuestos para la Central
                                monedaItemResultado = GetMonedaSeccion(seccion100.ListaItem, 42); //1.11
                                break;
                        }

                        //generar objeto default
                        regItem.Moneda = monedaItemResultado;
                        SetCbConceptocombFilaResultado(regItem, 0, string.Empty, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);
                    }
                }

                //solo calcular resultados si son validos el poder calorífico
                if (reg209PoderCalInf.Valor > 0)
                {
                    //bd
                    string concepcodisTotal = GetParametrosTotalCentralByFenergcodi(regHandson.Fenergcodi);
                    List<PrGrupodatDTO> listaBDTot = ListarFormulaPrecio(concepcodisTotal, regHandson.Grupocodi, fechaVigencia);
                    PrGrupodatDTO regPcomb = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoPcomb, regHandson.Fenergcodi));
                    PrGrupodatDTO regCSegFleM = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoCSegFleM, regHandson.Fenergcodi));
                    PrGrupodatDTO regCAduana = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoCAduana, regHandson.Fenergcodi));
                    PrGrupodatDTO regCEmbFleT = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoCEmbFleT, regHandson.Fenergcodi));
                    PrGrupodatDTO regMerma = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoMerm, regHandson.Fenergcodi));
                    PrGrupodatDTO regImp = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoImp, regHandson.Fenergcodi));

                    //
                    foreach (var regItem in seccion900.ListaItem)
                    {
                        decimal valor = 0;
                        string formulaExcel = string.Empty;

                        switch (regItem.Ccombcodi)
                        {
                            case 107:
                                //9.01	Precio unitario del carbón (pc)

                                //Proviene de ponderación de 1,07 y (2,07+8,01) por sus respectivos volúmenes 1,06 y 2,06. 
                                //Si la moneda de compra de alguno de ellos difiere de la vigente en BD se utiliza el TC que corresponde (indicado al lado derecho). 
                                //Este resultado se guarda en la BD. 
                                //Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                                //Si el valor vigente está S/ se guarda el resultado en S/.

                                if (reg106CantAlmacen.Valor + reg206CantComprado.Valor != 0)
                                {
                                    valor = ((GetValorCelda(reg107CostoCombBD, regItem.Moneda) * reg106CantAlmacen.Valor * 1000) + GetValorCelda(reg207CostoCompra, regItem.Moneda) + GetValorCelda(reg803CostoPrueba, regItem.Moneda))
                                               / ((reg106CantAlmacen.Valor + reg206CantComprado.Valor) * 1000);
                                    valor = (valor / reg209PoderCalInf.Valor) * (6000 * 4.1868m);

                                    formulaExcel = string.Format(@"(({0} * {1} * 1000) + {2} + {3})
                                                                / (({4} + {5}) * 1000)"
                                                                , reg107CostoCombBD.CeldaExcel, reg106CantAlmacen.CeldaExcel, reg207CostoCompra.CeldaExcel, reg803CostoPrueba.CeldaExcel
                                                                , reg106CantAlmacen.CeldaExcel, reg206CantComprado.CeldaExcel);
                                    formulaExcel = string.Format("({0} / {1}) * (6000 * 4.1868)", formulaExcel, reg209PoderCalInf.CeldaExcel);
                                }

                                SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);
                                regPcomb.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                                regPcomb.CeldaExcel = regItem.ItemDato.CeldaExcel;

                                break;
                            case 108:
                                //9.02	Costo Unitario de Fletes marítimos y Seguros (cts)

                                //Proviene de ponderación de 1,08 y (3,07+4,03) por sus respectivos volúmenes 1,06 y 3,06. 
                                //Si la moneda de compra de alguno de ellos difiere de la vigente en BD se utilizan el TC que corresponde (indicado al lado derecho). 
                                //Este resultado se guarda en la BD. Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                                //Si el valor vigente está S/ se guarda el resultado en S/.

                                if (reg106CantAlmacen.Valor + reg306CantTransp.Valor != 0)
                                {
                                    valor = ((GetValorCelda(reg108CostoFleteBD, regItem.Moneda) * reg106CantAlmacen.Valor * 1000) + GetValorCelda(reg307PagoFlete, regItem.Moneda) + GetValorCelda(reg403PagoSeguro, regItem.Moneda))
                                               / ((reg106CantAlmacen.Valor + reg306CantTransp.Valor) * 1000);
                                    valor = (valor / reg209PoderCalInf.Valor) * (6000 * 4.1868m);

                                    formulaExcel = string.Format(@"(({0} * {1} * 1000) + {2} + {3})
                                                                    / (({4} + {5}) * 1000)"
                                                                    , reg108CostoFleteBD.CeldaExcel, reg106CantAlmacen.CeldaExcel, reg307PagoFlete.CeldaExcel, reg403PagoSeguro.CeldaExcel
                                                                    , reg106CantAlmacen.CeldaExcel, reg306CantTransp.CeldaExcel);
                                    formulaExcel = string.Format("({0} / {1}) * (6000 * 4.1868)", formulaExcel, reg209PoderCalInf.CeldaExcel);
                                }

                                SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);
                                regCSegFleM.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                                regCSegFleM.CeldaExcel = regItem.ItemDato.CeldaExcel;

                                break;
                            case 109:
                                //9.03	Costo unitario de aduana y otros costos de desaduanaje (cad)

                                //Proviene de ponderación de 1,09 y 5.03 por sus respectivos volúmenes 1,06 y 3,06. 
                                //Si la moneda de compra difiere de la vigente en BD se utilizan el TC que corresponde (indicado al lado derecho). 
                                //Este resultado se guarda en la BD. Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                                //Si el valor vigente está S/ se guarda el resultado en S/.

                                if (reg106CantAlmacen.Valor + reg306CantTransp.Valor != 0)
                                {
                                    valor = ((GetValorCelda(reg109CostoAduana, regItem.Moneda) * reg106CantAlmacen.Valor * 1000) + GetValorCelda(reg503PagoAduana, regItem.Moneda))
                                               / ((reg106CantAlmacen.Valor + reg306CantTransp.Valor) * 1000);
                                    valor = (valor / reg209PoderCalInf.Valor) * (6000 * 4.1868m);

                                    formulaExcel = string.Format(@"(({0} * {1} * 1000) + {2})
                                                                    / (({3} + {4}) * 1000)"
                                                                    , reg109CostoAduana.CeldaExcel, reg106CantAlmacen.CeldaExcel, reg503PagoAduana.CeldaExcel
                                                                    , reg106CantAlmacen.CeldaExcel, reg306CantTransp.CeldaExcel);
                                    formulaExcel = string.Format("({0} / {1}) * (6000 * 4.1868)", formulaExcel, reg209PoderCalInf.CeldaExcel);
                                }

                                SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);
                                regCAduana.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                                regCAduana.CeldaExcel = regItem.ItemDato.CeldaExcel;

                                break;
                            case 110:
                                //9.04	Costo unitario de embarque, desembarque y transporte terrestre (cemb)

                                //Proviene de ponderación de 1,10 y (6.03+6.04+6.05+7.07+7.08) por sus respectivos volúmenes 1,06 y 3,06. 
                                //Si la moneda de compra de alguno de ellos difiere de la vigente en BD se utilizan el TC que corresponde (indicado al lado derecho). 
                                //Este resultado se guarda en la BD. Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                                //Si el valor vigente está S/ se guarda el resultado en S/.

                                if (reg106CantAlmacen.Valor + reg306CantTransp.Valor != 0)
                                {
                                    valor = ((GetValorCelda(reg110CostoTransBD, regItem.Moneda) * reg106CantAlmacen.Valor * 1000) + GetValorCelda(reg603CostoEmb, regItem.Moneda) + GetValorCelda(reg604CostoDesemb, regItem.Moneda) + GetValorCelda(reg605CostoDemurrage, regItem.Moneda) + GetValorCelda(reg707PagoFlete, regItem.Moneda))
                                               / ((reg106CantAlmacen.Valor + reg306CantTransp.Valor) * 1000);
                                    valor = (valor / reg209PoderCalInf.Valor) * (6000 * 4.1868m);

                                    formulaExcel = string.Format(@"(({0} * {1} * 1000) + {2} + {3} + {4} + {5})
                                                                    / (({6} + {7}) * 1000)"
                                                                    , reg110CostoTransBD.CeldaExcel, reg106CantAlmacen.CeldaExcel, reg603CostoEmb.CeldaExcel, reg604CostoDesemb.CeldaExcel, reg605CostoDemurrage.CeldaExcel, reg707PagoFlete.CeldaExcel
                                                                    , reg106CantAlmacen.CeldaExcel, reg306CantTransp.CeldaExcel);
                                    formulaExcel = string.Format("({0} / {1}) * (6000 * 4.1868)", formulaExcel, reg209PoderCalInf.CeldaExcel);
                                }

                                SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);
                                regCEmbFleT.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                                regCEmbFleT.CeldaExcel = regItem.ItemDato.CeldaExcel;

                                break;
                            case 111:
                                //9.05	Costos por mermas

                                //Obtenido de 8,02. Este resultado se guarda en la BD. 
                                //Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                                //Si el valor vigente está S/ se guarda el resultado en S/.

                                valor = GetValorCelda(reg804CostoMerma, regItem.Moneda);
                                valor = (valor / reg209PoderCalInf.Valor) * (6000 * 4.1868m);

                                formulaExcel = reg804CostoMerma.CeldaExcel;
                                formulaExcel = string.Format("({0} / {1}) * (6000 * 4.1868)", formulaExcel, reg209PoderCalInf.CeldaExcel);

                                SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);
                                regMerma.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                                regMerma.CeldaExcel = regItem.ItemDato.CeldaExcel;

                                break;
                            case 112:
                                //9.06	Costo Unitario por Impuestos para la Central

                                //Proviene de ponderación de 1,11 y 5,04 por sus respectivos volúmenes 1,06 y 2,06. 
                                //Si la moneda de compra de alguno de ellos difiere de la vigente en BD se utiliza el TC que corresponde (indicado al lado derecho). 
                                //Este resultado se guarda en la BD. Si el valor vigente está en USD, se guarda este resultado en USD multiplicado por "TCambio". 
                                //Si el valor vigente está S/ se guarda el resultado en S/.

                                if (reg106CantAlmacen.Valor + reg206CantComprado.Valor != 0)
                                {
                                    valor = ((reg106CantAlmacen.Valor * GetValorCelda(reg111CostoImpBD, regItem.Moneda) * 1000) + GetValorCelda(reg504ImpCompra, regItem.Moneda) + GetValorCelda(reg708ImpFlete, regItem.Moneda))
                                               / ((reg106CantAlmacen.Valor + reg206CantComprado.Valor) * 1000);
                                    valor = (valor / reg209PoderCalInf.Valor) * (6000 * 4.1868m);

                                    formulaExcel = string.Format(@"(({0} * {1} * 1000) + {2} + {3})
                                                                    / (({4} + {5}) * 1000)"
                                                                    , reg106CantAlmacen.CeldaExcel, reg111CostoImpBD.CeldaExcel, reg504ImpCompra.CeldaExcel, reg708ImpFlete.CeldaExcel
                                                                    , reg106CantAlmacen.CeldaExcel, reg206CantComprado.CeldaExcel);
                                    formulaExcel = string.Format("({0} / {1}) * (6000 * 4.1868)", formulaExcel, reg209PoderCalInf.CeldaExcel);
                                }

                                SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, regItem.Moneda, reg104Tcambio.Valor, reg104Tcambio.CeldaExcel);
                                regImp.Formuladat = regItem.ItemDato.Cbevdavalor.ToString();
                                regImp.CeldaExcel = regItem.ItemDato.CeldaExcel;

                                break;
                        }

                    }

                    PrGrupodatDTO regCFinanc = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoCFinanc, regHandson.Fenergcodi));
                    PrGrupodatDTO regCTotal = listaBDTot.Find(x => x.Concepcodi == GetConcepcodiFormulaXFenergcodiSeccionResultado(ConstantesCombustibles.TipoCTotal, regHandson.Fenergcodi));

                    n_parameter l_param = new n_parameter();
                    foreach (var reg in listaBDTot)
                    {
                        l_param.SetData(reg.Concepabrev, reg.Formuladat);
                    }

                    foreach (var regItem in seccion900.ListaItem)
                    {
                        decimal valor = 0;
                        string formulaExcel = string.Empty;

                        switch (regItem.Ccombcodi)
                        {
                            case 113:
                                //9.07	Costo Financiero

                                //Fórmula ya existe en BD.
                                regCFinanc.CeldaExcel = regItem.ItemDato.CeldaExcel;
                                valor = (decimal)l_param.GetEvaluate(regCFinanc.Concepabrev);

                                formulaExcel = regCFinanc.Formuladat;
                                foreach (var reg in listaBDTot)
                                {
                                    formulaExcel = formulaExcel.Replace(reg.Concepabrev, reg.CeldaExcel);
                                }
                                SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, ConstantesCombustibles.Soles, 0, "0");

                                break;
                            case 114:
                                //9.08	Costo Total del combustible

                                //Fórmula ya existe en BD. En el aplicativo solo se muestra para S/. 
                                //Si algunos de los componentes está en USD, se debe indicar que el valor en S/ es únicamente referencial, calculada con el TC del momento indicada en 1.04.

                                regCTotal.CeldaExcel = regItem.ItemDato.CeldaExcel;
                                valor = (decimal)l_param.GetEvaluate(regCTotal.Concepabrev);

                                formulaExcel = regCTotal.Formuladat;
                                foreach (var reg in listaBDTot)
                                {
                                    formulaExcel = formulaExcel.Replace(reg.Concepabrev, reg.CeldaExcel);
                                }
                                SetCbConceptocombFilaResultado(regItem, valor, formulaExcel, ConstantesCombustibles.Soles, 0, "0");

                                break;
                        }

                    }
                }
            }

        }

        private decimal GetValorCelda(CbDatosDTO itemData, string moneda)
        {
            return ConstantesCombustibles.Dolar == moneda ? itemData.Valor2 : itemData.Valor;
        }

        private List<CeldaErrorCombustible> ListarErroresGrilla(HandsonCombustible regHandson)
        {
            List<CeldaErrorCombustible> l = new List<CeldaErrorCombustible>(); //

            foreach (var regSec in regHandson.ListaSeccion)
            {
                foreach (var regItem in regSec.ListaItem)
                {
                    regItem.ItemDato.TieneError = false;

                    if (regItem.Ccombobligatorio == ConstantesAppServicio.SI)
                    {
                        string valor = (regItem.ItemDato.Cbevdavalor ?? "").Trim();

                        if ((regItem.Ccombtipo ?? "").Trim().ToUpper() == "N")
                        {
                            decimal.TryParse(regItem.ItemDato.Cbevdavalornumerico, out decimal val1);
                            if (val1 <= 0)
                            {
                                regItem.ItemDato.TieneError = true;
                                l.Add(new CeldaErrorCombustible() { Celda = regItem.Numeral, Valor = regItem.ItemDato.Cbevdavalornumerico, Mensaje = "El valor numérico debe ser mayor a cero." });
                            }
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(valor))
                            {
                                regItem.ItemDato.TieneError = true;
                                l.Add(new CeldaErrorCombustible() { Celda = regItem.Numeral, Valor = valor, Mensaje = "Debe ingresar valor" });
                            }
                        }
                    }
                }
            }

            return l;
        }

        private List<CeldaErrorCombustible> ListarErrorItem105(string valorItem, int cbenvcodi, int equicodi, int fenergcodi)
        {
            List<CeldaErrorCombustible> l = new List<CeldaErrorCombustible>(); //

            var datoCelda = valorItem ?? "";
            var lFechas = datoCelda.Split(';').ToList();

            foreach (var strFecha in lFechas)
            {
                if (!string.IsNullOrEmpty(strFecha))
                {
                    DateTime objFecha = DateTime.ParseExact(strFecha, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);

                    var sMsj = ValidacionFechaRecepcionExistenteBD(cbenvcodi, objFecha, equicodi, fenergcodi);
                    if (!string.IsNullOrEmpty(sMsj))
                        l.Add(new CeldaErrorCombustible() { Celda = "1.05", Valor = strFecha, Mensaje = sMsj });
                }
            }

            return l;
        }

        private List<CeldaErrorCombustible> ListarErrorSeccionResultado(HandsonCombustible regHandson, List<CbConceptocombDTO> listaLimite)
        {
            List<CeldaErrorCombustible> l = new List<CeldaErrorCombustible>(); //

            List<CbConceptocombDTO> listaItem = new List<CbConceptocombDTO>();
            if (regHandson.Estcomcodi == ConstantesCombustibles.EstcomcodiLiquido)
            {
                var seccion500 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 500);
                listaItem = seccion500.ListaItem;
            }
            if (regHandson.Estcomcodi == ConstantesCombustibles.EstcomcodiSolido)
            {
                var seccion900 = regHandson.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 900);
                listaItem = seccion900.ListaItem;
            }

            foreach (var regItem in listaItem)
            {
                var regLimite = listaLimite.Find(x => x.Ccombcodi == regItem.Ccombcodi).CbDatosxcentralxfenerg;

                if (regLimite != null)
                {
                    string msj = string.Empty;
                    if (regItem.ItemDato.Valor < regLimite.Cbdatvalor1)
                        msj += string.Format("El valor es menor al límite inferior");
                    if (regItem.ItemDato.Valor > regLimite.Cbdatvalor2)
                        msj += string.Format("El valor es mayor al límite superior");

                    if (!string.IsNullOrEmpty(msj))
                        l.Add(new CeldaErrorCombustible() { Celda = regItem.Numeral, Valor = Math.Round(regItem.ItemDato.Valor, 6).ToString(), Mensaje = msj });
                }
            }

            return l;
        }

        private CbConceptocombDTO GetItemYFormatear(CbConceptocombDTO cnp, List<CbDatosDTO> listaDatoXVersion, CbDatosDTO datoDefault, bool esFilaResultado = false)
        {
            List<string> listaDolar = ListarUnidadesDolar();

            CbConceptocombDTO reg = cnp;
            reg.CeldaExcel = UtilExcel.GetCellAddress(cnp.PosRow, cnp.PosCol1);
            reg.ItemDato = datoDefault;
            reg.EsFilaResultado = esFilaResultado;

            if (listaDatoXVersion != null)
            {
                var regBD = listaDatoXVersion.Find(x => x.Ccombcodi == cnp.Ccombcodi);
                if (regBD != null)
                {
                    reg.ItemDato = regBD;

                    //ajuste Ticket 5112 - Horas de soporte - Proyecto Combustible Liquido y solido
                    //si el Cbevdavalor es dolar entonces va en la variable Cbevdavalor2
                    if ((cnp.Ccombtipo ?? "").Trim().ToUpper() == "N") //si la celda es numerica
                    {
                        //Sección distintas a 1.0 guardan en columna CBEVDAVALOR el valor en soles, en la columna CBEVDAVALOR2 el valor en dolares 
                        if (!string.IsNullOrEmpty(reg.ItemDato.Cbevdavalor) && !string.IsNullOrEmpty(reg.ItemDato.Cbevdavalor2))
                        {
                            //mantener datos de regBD
                        }
                        else
                        {
                            //la sección 1.0 (solo se guardan datos en la columna CBEVDAVALOR
                            if (listaDolar.Contains(reg.ItemDato.Cbevdatipo) && !string.IsNullOrEmpty(reg.ItemDato.Cbevdavalor)) //setear valor de sol o dolar , excepto para la seccion BD
                            {
                                reg.ItemDato.Cbevdavalor2 = reg.ItemDato.Cbevdavalor;
                                reg.ItemDato.Cbevdavalor = "";
                            }
                        }
                    }
                }
            }

            //formatear
            reg.ItemDato.Cbevdavalor = (reg.ItemDato.Cbevdavalor ?? "").Trim();
            reg.ItemDato.Cbevdatipo = (reg.ItemDato.Cbevdatipo ?? "").Trim();
            reg.ItemDato.Cbevdavalor2 = (reg.ItemDato.Cbevdavalor2 ?? "").Trim();
            reg.ItemDato.Cbevdatipo2 = (reg.ItemDato.Cbevdatipo2 ?? "").Trim();

            reg.ItemDato.CeldaExcel = reg.CeldaExcel;

            reg.Procedencia = (reg.Procedencia ?? "").Trim();
            reg.Proveedor = (reg.Proveedor ?? "").Trim();
            reg.Sitio = (reg.Sitio ?? "").Trim();
            reg.Sitio2 = (reg.Sitio2 ?? "").Trim();
            reg.Puerto = (reg.Puerto ?? "").Trim();
            reg.Puerto2 = (reg.Puerto2 ?? "").Trim();

            return reg;
        }

        private void SetCbConceptocombFilaResultado(CbConceptocombDTO regItem, decimal valor, string formulaExcel, string moneda, decimal tcambio, string formulaTipoCambio)
        {
            decimal valorSoles = 0, valorDolar = 0;
            string formulaSoles = string.Empty, formulaDolar = string.Empty;

            if (ConstantesCombustibles.Soles == moneda)
            {
                valorSoles = valor;
                formulaSoles = formulaExcel;
            }
            if (ConstantesCombustibles.Dolar == moneda)
            {
                //todos ya estan convertidos en dolares previamente (la conversion se hizo con las facturas), no es necesarios ifs de soles
                valorDolar = valor;
                formulaDolar = formulaExcel;

                valorSoles = valorDolar * tcambio;
                formulaSoles = string.Format("{0}*{1}", formulaDolar, formulaTipoCambio);
            }

            regItem.ItemDato.Valor = valorSoles;
            regItem.ItemDato.Valor2 = valorDolar;
            regItem.ItemDato.Cbevdavalor = valorSoles.ToString();
            regItem.ItemDato.Cbevdavalor2 = valorDolar.ToString();
            regItem.ItemDato.FormulaValor = formulaSoles;
            regItem.ItemDato.FormulaValor2 = formulaDolar;

            if (ConstantesCombustibles.Dolar != moneda)
            {
                regItem.ItemDato.Valor2 = 0;
                regItem.ItemDato.Cbevdavalor2 = string.Empty;
                regItem.ItemDato.FormulaValor2 = string.Empty;
            }
        }

        private void GetEvaluacionCosto(string tipoCosto, List<CbDatosDetalleDTO> lista, decimal tipoCambioGlobal, string formulaTipoCambioGlobal, bool facturaTieneTc
                                        , out decimal pagoSol, out decimal pagoDolar, out string formulaPagoSol, out string formulaPagoDolar)
        {
            pagoSol = 0;
            pagoDolar = 0;
            formulaPagoSol = string.Empty;
            formulaPagoDolar = string.Empty;

            List<string> listaFormulaSol = new List<string>();
            List<string> listaFormulaDolar = new List<string>();

            foreach (var reg in lista)
            {
                decimal valor = 0;
                if (tipoCosto.ToUpper() == "CBDETCOSTO") valor = reg.Cbdetcosto;
                if (tipoCosto.ToUpper() == "CBDETCOSTO2") valor = reg.Cbdetcosto2;
                if (tipoCosto.ToUpper() == "CBDETIMPUESTO") valor = reg.Cbdetimpuesto;

                decimal tc = facturaTieneTc ? reg.Cbdettipocambio : tipoCambioGlobal;
                string fomulaTc = facturaTieneTc ? reg.Cbdettipocambio.ToString() : formulaTipoCambioGlobal;

                string formulaCeldaSol = "0";
                string formulaCeldaDolar = "0";

                //moneda de la fila factura
                if (reg.Cbdetmoneda == ConstantesCombustibles.Soles)
                {
                    pagoSol += valor;
                    if (tc != 0) pagoDolar += (valor / tc);

                    formulaCeldaSol = valor.ToString();
                    if (tc != 0) formulaCeldaDolar = string.Format("({0}/{1})", valor, fomulaTc); //moneda global es el dolar y la factura es soles

                }
                if (reg.Cbdetmoneda == ConstantesCombustibles.Dolar)
                {
                    pagoSol += (valor * tc);
                    pagoDolar += valor;

                    formulaCeldaDolar = valor.ToString();
                    formulaCeldaSol = string.Format("({0}*{1})", valor, fomulaTc);  //moneda global es el sol y la factura es dolares
                }

                listaFormulaSol.Add(formulaCeldaSol);
                listaFormulaDolar.Add(formulaCeldaDolar);
            }

            formulaPagoSol = string.Join("+", listaFormulaSol);
            formulaPagoDolar = string.Join("+", listaFormulaDolar);
        }

        private void ObtenerDatosCosto(int ccombcodi, int fenergcodi, List<PrGrupodatDTO> listaParam, out decimal valorCosto, out string monedaCosto)
        {
            valorCosto = 0;
            monedaCosto = ConstantesCombustibles.Soles; //por defecto es el SOL. Si existes TCambio en la fórmula entonces será dólar

            int concepcodi = GetConcepcodiCostoXFenergcodiSeccionBD(ccombcodi, fenergcodi);
            PrGrupodatDTO regDat = listaParam.Find(x => x.Concepcodi == concepcodi);
            if (regDat != null)
            {
                //
                valorCosto = regDat.Valor;

                ////si la data está en galones convertirlo a litros
                //if (regDat.ConcepUni != null && regDat.ConcepUni.Trim().ToUpper().Contains("GAL"))
                //    valorCosto = valorCosto / ConstantesCombustibles.FactorGalonToLitro;

                //
                if (regDat.Formuladat != "0" && valorCosto >= 0) //si la evaluacion de la formula es diferente de "0" y tiene valor 0 o mayor entonces se puede determinar que moneda es
                {
                    //si contiene TCambio en la formula cambia el tipo de Moneda a DOLAR, sino se queda en SOL
                    monedaCosto = (regDat.Formuladat ?? "").ToUpper().Contains(ConstantesCombustibles.FormuladatTcambio.ToUpper())
                              ? ConstantesCombustibles.Dolar : ConstantesCombustibles.Soles;
                }
            }
        }

        private string GetMonedaDesc(string moneda)
        {
            if (moneda == ConstantesCombustibles.Soles)
                return ConstantesCombustibles.SolesDesc;

            if (moneda == ConstantesCombustibles.Dolar)
                return ConstantesCombustibles.DolarDesc;

            return string.Empty;
        }

        private string GetUnidadDesc(string unidad)
        {
            if (unidad == ConstantesCombustibles.Litro)
                return ConstantesCombustibles.LitroDesc;

            if (unidad == ConstantesCombustibles.Tonelada)
                return ConstantesCombustibles.ToneladaDesc;

            return string.Empty;
        }

        private string GetMonedaXUnidad(string moneda, string unidad)
        {
            string resultado = string.Empty;
            if (moneda == ConstantesCombustibles.Dolar) resultado += "USD/";
            if (moneda == ConstantesCombustibles.Soles) resultado += "S//";

            if (unidad == ConstantesCombustibles.Tonelada) resultado += "kg";
            if (unidad == ConstantesCombustibles.Litro) resultado += "l";

            return resultado;
        }

        #region Concepcodi y Ccomcodi por fuente de energía 

        /// <summary>
        /// Estado de combustible segun Tipo de combustible
        /// </summary>
        /// <param name="fenergcodi"></param>
        /// <returns></returns>
        public static int GetEstcomcodiByFenergcodi(int fenergcodi)
        {
            if (ConstantesPR5ReportesServicio.FenergcodiCarbon == fenergcodi)
                return ConstantesCombustibles.EstcomcodiSolido;

            return ConstantesCombustibles.EstcomcodiLiquido;
        }

        /// <summary>
        /// Obtener id agrupacion segun tipo de combustible
        /// </summary>
        /// <param name="fenergcodi"></param>
        /// <returns></returns>
        public static int GetAgrupcodiByFenergcodi(int fenergcodi)
        {
            switch (fenergcodi)
            {
                case ConstantesPR5ReportesServicio.FenergcodiDiesel: return 6;
                case ConstantesPR5ReportesServicio.FenergcodiR6: return 7;
                case ConstantesPR5ReportesServicio.FenergcodiR500: return 8;
                case ConstantesPR5ReportesServicio.FenergcodiCarbon: return 9;
            }

            return 0;
        }

        private int GetConcepcodiCostoXFenergcodiSeccionBD(int ccombcodi, int fenergcodi)
        {
            int concepcodi = 0;

            switch (fenergcodi)
            {
                case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                    if (ccombcodi == 7) concepcodi = ConstantesCombustibles.CostoUnitD2;
                    if (ccombcodi == 8) concepcodi = ConstantesCombustibles.CTranspD2;
                    if (ccombcodi == 9) concepcodi = ConstantesCombustibles.TMecanD2;
                    if (ccombcodi == 10) concepcodi = ConstantesCombustibles.TQuimD2;
                    if (ccombcodi == 11) concepcodi = ConstantesCombustibles.ImpD2;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR6:
                    if (ccombcodi == 7) concepcodi = ConstantesCombustibles.CostoUnitR6;
                    if (ccombcodi == 8) concepcodi = ConstantesCombustibles.CTranspR6;
                    if (ccombcodi == 9) concepcodi = ConstantesCombustibles.TMecanR6;
                    if (ccombcodi == 10) concepcodi = ConstantesCombustibles.TQuimR6;
                    if (ccombcodi == 11) concepcodi = ConstantesCombustibles.ImpR6;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR500:
                    if (ccombcodi == 7) concepcodi = ConstantesCombustibles.CostoUnitR500;
                    if (ccombcodi == 8) concepcodi = ConstantesCombustibles.CTranspR500;
                    if (ccombcodi == 9) concepcodi = ConstantesCombustibles.TMecanR500;
                    if (ccombcodi == 10) concepcodi = ConstantesCombustibles.TQuimR500;
                    if (ccombcodi == 11) concepcodi = ConstantesCombustibles.ImpR500;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                    if (ccombcodi == 38) concepcodi = ConstantesCombustibles.CostoUnitCarbon;
                    if (ccombcodi == 39) concepcodi = ConstantesCombustibles.CSegurFletesCarb;
                    if (ccombcodi == 40) concepcodi = ConstantesCombustibles.CAduaDesCarb;
                    if (ccombcodi == 41) concepcodi = ConstantesCombustibles.CTranspTCarb;
                    if (ccombcodi == 42) concepcodi = ConstantesCombustibles.ImpCarbon;
                    break;
            }

            return concepcodi;
        }

        private int GetConcepcodiCostoXFenergcodiSeccionResultado(int ccombcodi, int fenergcodi)
        {
            int concepcodi = 0;

            switch (fenergcodi)
            {
                case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                    if (ccombcodi == 98) concepcodi = ConstantesCombustibles.CostoUnitD2;
                    if (ccombcodi == 99) concepcodi = ConstantesCombustibles.CTranspD2;
                    if (ccombcodi == 100) concepcodi = ConstantesCombustibles.TMecanD2;
                    if (ccombcodi == 101) concepcodi = ConstantesCombustibles.TQuimD2;
                    if (ccombcodi == 102) concepcodi = ConstantesCombustibles.MermaD2;
                    if (ccombcodi == 103) concepcodi = ConstantesCombustibles.ImpD2;
                    if (ccombcodi == 104) concepcodi = ConstantesCombustibles.CFinancD2;
                    if (ccombcodi == 105) concepcodi = ConstantesCombustibles.CTotalD2;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR6:
                    if (ccombcodi == 98) concepcodi = ConstantesCombustibles.CostoUnitR6;
                    if (ccombcodi == 99) concepcodi = ConstantesCombustibles.CTranspR6;
                    if (ccombcodi == 100) concepcodi = ConstantesCombustibles.TMecanR6;
                    if (ccombcodi == 101) concepcodi = ConstantesCombustibles.TQuimR6;
                    if (ccombcodi == 102) concepcodi = ConstantesCombustibles.MermaR6;
                    if (ccombcodi == 103) concepcodi = ConstantesCombustibles.ImpR6;
                    if (ccombcodi == 104) concepcodi = ConstantesCombustibles.CFinancR6;
                    if (ccombcodi == 105) concepcodi = ConstantesCombustibles.CTotalR6;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR500:
                    if (ccombcodi == 98) concepcodi = ConstantesCombustibles.CostoUnitR500;
                    if (ccombcodi == 99) concepcodi = ConstantesCombustibles.CTranspR500;
                    if (ccombcodi == 100) concepcodi = ConstantesCombustibles.TMecanR500;
                    if (ccombcodi == 101) concepcodi = ConstantesCombustibles.TQuimR500;
                    if (ccombcodi == 102) concepcodi = ConstantesCombustibles.MermaR500;
                    if (ccombcodi == 103) concepcodi = ConstantesCombustibles.ImpR500;
                    if (ccombcodi == 104) concepcodi = ConstantesCombustibles.CFinancR500;
                    if (ccombcodi == 105) concepcodi = ConstantesCombustibles.CTotalR500;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                    if (ccombcodi == 107) concepcodi = ConstantesCombustibles.CostoUnitCarbon;
                    if (ccombcodi == 108) concepcodi = ConstantesCombustibles.CSegurFletesCarb;
                    if (ccombcodi == 109) concepcodi = ConstantesCombustibles.CAduaDesCarb;
                    if (ccombcodi == 110) concepcodi = ConstantesCombustibles.CTranspTCarb;
                    if (ccombcodi == 111) concepcodi = ConstantesCombustibles.MermaCarbon;
                    if (ccombcodi == 112) concepcodi = ConstantesCombustibles.ImpCarbon;
                    if (ccombcodi == 113) concepcodi = ConstantesCombustibles.CFinancCarbon;
                    if (ccombcodi == 114) concepcodi = ConstantesCombustibles.CTotalCarbon;
                    break;
            }

            return concepcodi;
        }

        private int GetConcepcodiFormulaXFenergcodiSeccionResultado(string tipo, int fenergcodi)
        {
            int concepcodi = 0;

            switch (fenergcodi)
            {
                case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                    if (tipo == ConstantesCombustibles.TipoPcomb) concepcodi = ConstantesCombustibles.CostoUnitD2;
                    if (tipo == ConstantesCombustibles.TipoImp) concepcodi = ConstantesCombustibles.ImpD2;
                    if (tipo == ConstantesCombustibles.TipoCTransp) concepcodi = ConstantesCombustibles.CTranspD2;
                    if (tipo == ConstantesCombustibles.TipoTMecan) concepcodi = ConstantesCombustibles.TMecanD2;
                    if (tipo == ConstantesCombustibles.TipoTQuim) concepcodi = ConstantesCombustibles.TQuimD2;
                    if (tipo == ConstantesCombustibles.TipoMerm) concepcodi = ConstantesCombustibles.MermaD2;

                    if (tipo == ConstantesCombustibles.TipoCFinanc) concepcodi = ConstantesCombustibles.CFinancD2;
                    if (tipo == ConstantesCombustibles.TipoCTotal) concepcodi = ConstantesCombustibles.CTotalD2;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR6:
                    if (tipo == ConstantesCombustibles.TipoPcomb) concepcodi = ConstantesCombustibles.CostoUnitR6;
                    if (tipo == ConstantesCombustibles.TipoImp) concepcodi = ConstantesCombustibles.ImpR6;
                    if (tipo == ConstantesCombustibles.TipoCTransp) concepcodi = ConstantesCombustibles.CTranspR6;
                    if (tipo == ConstantesCombustibles.TipoTMecan) concepcodi = ConstantesCombustibles.TMecanR6;
                    if (tipo == ConstantesCombustibles.TipoTQuim) concepcodi = ConstantesCombustibles.TQuimR6;
                    if (tipo == ConstantesCombustibles.TipoMerm) concepcodi = ConstantesCombustibles.MermaR6;

                    if (tipo == ConstantesCombustibles.TipoCFinanc) concepcodi = ConstantesCombustibles.CFinancR6;
                    if (tipo == ConstantesCombustibles.TipoCTotal) concepcodi = ConstantesCombustibles.CTotalR6;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR500:
                    if (tipo == ConstantesCombustibles.TipoPcomb) concepcodi = ConstantesCombustibles.CostoUnitR500;
                    if (tipo == ConstantesCombustibles.TipoImp) concepcodi = ConstantesCombustibles.ImpR500;
                    if (tipo == ConstantesCombustibles.TipoCTransp) concepcodi = ConstantesCombustibles.CTranspR500;
                    if (tipo == ConstantesCombustibles.TipoTMecan) concepcodi = ConstantesCombustibles.TMecanR500;
                    if (tipo == ConstantesCombustibles.TipoTQuim) concepcodi = ConstantesCombustibles.TQuimR500;
                    if (tipo == ConstantesCombustibles.TipoMerm) concepcodi = ConstantesCombustibles.MermaR500;

                    if (tipo == ConstantesCombustibles.TipoCFinanc) concepcodi = ConstantesCombustibles.CFinancR500;
                    if (tipo == ConstantesCombustibles.TipoCTotal) concepcodi = ConstantesCombustibles.CTotalR500;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                    if (tipo == ConstantesCombustibles.TipoPcomb) concepcodi = ConstantesCombustibles.CostoUnitCarbon;
                    if (tipo == ConstantesCombustibles.TipoMerm) concepcodi = ConstantesCombustibles.MermaCarbon;
                    if (tipo == ConstantesCombustibles.TipoCSegFleM) concepcodi = ConstantesCombustibles.CSegurFletesCarb;
                    if (tipo == ConstantesCombustibles.TipoCAduana) concepcodi = ConstantesCombustibles.CAduaDesCarb;
                    if (tipo == ConstantesCombustibles.TipoImp) concepcodi = ConstantesCombustibles.ImpCarbon;
                    if (tipo == ConstantesCombustibles.TipoCEmbFleT) concepcodi = ConstantesCombustibles.CTranspTCarb;

                    if (tipo == ConstantesCombustibles.TipoCFinanc) concepcodi = ConstantesCombustibles.CFinancCarbon;
                    if (tipo == ConstantesCombustibles.TipoCTotal) concepcodi = ConstantesCombustibles.CTotalCarbon;
                    break;
            }


            return concepcodi;
        }

        /// <summary>
        /// Lista de carpetas segun Tipo de combustible
        /// </summary>
        /// <param name="estcomcodi"></param>
        /// <returns></returns>
        public static List<int> ListarCarpetaXTipocombustible(int estcomcodi)
        {
            if (ConstantesCombustibles.EstcomcodiSolido == estcomcodi)
                return new List<int>() { 45, 55, 67, 70, 74, 84 };
            else
                return new List<int>() { 13, 10, 30 };
        }

        /// <summary>
        /// Devuelve los parametros de central dependiendo del tipo de combustible
        /// </summary>
        /// <param name="fenergcodi"></param>
        /// <returns></returns>
        private string GetParametrosCostosCentralByFenergcodi(int fenergcodi)
        {
            string parametrosCentral = string.Empty;
            switch (fenergcodi)
            {
                case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                    parametrosCentral = ConstantesCombustibles.BDCostoD2;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR6:
                    parametrosCentral = ConstantesCombustibles.BDCostoR6;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR500:
                    parametrosCentral = ConstantesCombustibles.BDCostoR500;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                    parametrosCentral = ConstantesCombustibles.BDCostoCarbon;
                    break;
            }
            return parametrosCentral;
        }

        /// <summary>
        /// Devuelve los parametros de central dependiendo del tipo de combustible
        /// </summary>
        /// <param name="fenergcodi"></param>
        /// <returns></returns>
        private string GetParametrosTotalCentralByFenergcodi(int fenergcodi)
        {
            string parametrosCentral = string.Empty;
            switch (fenergcodi)
            {
                case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                    parametrosCentral = ConstantesCombustibles.TotalCostoD2;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR6:
                    parametrosCentral = ConstantesCombustibles.TotalCostoR6;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiR500:
                    parametrosCentral = ConstantesCombustibles.TotalCostoR500;
                    break;
                case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                    parametrosCentral = ConstantesCombustibles.TotalCostoCarbon;
                    break;
            }
            return parametrosCentral;
        }

        #endregion

        #endregion

        #region Plazo de envio

        /// <summary>
        /// Fecha defecto de fin de respuesta a solicitud
        /// </summary>
        /// <param name="estcomcodi"></param>
        /// <param name="fechaSolicitud"></param>
        /// <returns></returns>
        public DateTime FechaFinRespuestaSolicitud(int estcomcodi, DateTime fechaSolicitud)
        {
            int numDiaHabil = 0;
            if (ConstantesCombustibles.EstcomcodiLiquido == estcomcodi) numDiaHabil = ConstantesCombustibles.DiasLiquidoRptaSolicitud;
            if (ConstantesCombustibles.EstcomcodiSolido == estcomcodi) numDiaHabil = ConstantesCombustibles.DiasSolidoRptaSolicitud;

            var fechaFin = servGeneral.FechaEnDiasHabiles(fechaSolicitud.Date, numDiaHabil);
            fechaFin = fechaFin.AddDays(1).AddSeconds(-1);

            return fechaFin;
        }

        /// <summary>
        /// Fecha defecto de fin de subsanacion de observacion
        /// </summary>
        /// <param name="estcomcodi"></param>
        /// <param name="fechaObsCoes"></param>
        /// <returns></returns>
        public DateTime FechaFinSubsanacionObservacion(int estcomcodi, DateTime fechaObsCoes)
        {
            int numDiaHabil = 0;
            if (ConstantesCombustibles.EstcomcodiLiquido == estcomcodi) numDiaHabil = ConstantesCombustibles.DiasLiquidoSubsanarObs;
            if (ConstantesCombustibles.EstcomcodiSolido == estcomcodi) numDiaHabil = ConstantesCombustibles.DiasSolidoSubsanarObs;

            var fechaFin = servGeneral.FechaEnDiasHabiles(fechaObsCoes.Date, numDiaHabil);
            fechaFin = fechaFin.AddDays(1).AddSeconds(-1);

            return fechaFin;
        }

        /// <summary>
        /// Dias habiles
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public int DiffDiaHabil(DateTime fechaIni, DateTime fechaFin)
        {
            for (int i = 1; i < 50; i++)
            {
                var fechaTmp = servGeneral.FechaEnDiasHabiles(fechaIni.Date, i);
                if (fechaTmp > fechaFin)
                    return i - 1;
            }

            return 0;
        }

        #endregion

        #region Eventos Extranet (Agente)

        #region Solicitud envío y Subsanación de observaciones

        /// <summary>
        /// Guardar Solicitud PR31 en bd
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="idFenergcodi"></param>
        /// <param name="usuarioExtranet"></param>
        /// <param name="estado"></param>
        /// <param name="plazo"></param>
        /// <param name="modeloWeb"></param>
        /// <param name="path"></param>
        /// <param name="pathTemporal"></param>
        /// <returns></returns>
        public int RealizarSolicitudCostoCombustible(int idEnvio, int idEmpresa, int equicodi, int grupocodi, int idFenergcodi, string usuarioExtranet, string estado, string plazo
                                        , HandsonCombustible modeloWeb, string path, string pathTemporal)
        {
            DateTime fechaRegistro = DateTime.Now;
            int estadoEnvio;
            bool esNuevoRegistro = idEnvio <= 0;
            bool enviarCorreoSubs = false;

            //envio
            CbEnvioDTO regEnvio = new CbEnvioDTO();
            if (!esNuevoRegistro)
            {
                regEnvio = GetByIdCbEnvio(idEnvio);
                estadoEnvio = regEnvio.Estenvcodi;
                regEnvio.Cbenvfecmodificacion = fechaRegistro;

                if (!regEnvio.EsEditableExtranet)
                    throw new ArgumentException("No tiene permisos para realizar esta acción o el plazo para el envío ha vencido.");

                if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoObservado)
                {
                    estadoEnvio = ConstantesCombustibles.EstadoSubsanacionObs;
                    enviarCorreoSubs = regEnvio.Cbenvfecampl == null;
                    ////se actualiza el plazo del coes
                    //regEnvio.Cbenvfecfinrptasolicitud = FechaFinRespuestaSolicitud(regEnvio.Estcomcodi, DateTime.Now);
                    //regEnvio.Cbenvfecampl = null;
                    //regEnvio.Cbenvitem106 = null;

                    CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(idEnvio, ConstantesCombustibles.EstadoObservado);
                    regEnvio.FechaRevisionCoes = logEnvioUltimoObs.Logenvfeccreacion;
                }

            }
            else
            {
                regEnvio.Estcomcodi = GetEstcomcodiByFenergcodi(idFenergcodi);
                regEnvio.Fenergcodi = idFenergcodi;
                regEnvio.Emprcodi = idEmpresa;
                regEnvio.Equicodi = equicodi;
                regEnvio.Grupocodi = grupocodi;
                regEnvio.Cbenvususolicitud = usuarioExtranet;
                regEnvio.Cbenvfecsolicitud = fechaRegistro;
                regEnvio.Cbenvestado = estado;
                regEnvio.Cbenvplazo = plazo;
                regEnvio.Cbenvunidad = modeloWeb.Unidad;
                regEnvio.Cbenvfecfinrptasolicitud = FechaFinRespuestaSolicitud(regEnvio.Estcomcodi, regEnvio.Cbenvfecsolicitud);

                estadoEnvio = ConstantesCombustibles.EstadoSolicitud;
            }
            regEnvio.Estenvcodi = estadoEnvio;

            //log
            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
            logEnvio.Estenvcodi = estadoEnvio;
            logEnvio.Logenvusucreacion = usuarioExtranet;
            logEnvio.Logenvfeccreacion = fechaRegistro;
            regEnvio.LogEnvioActual = logEnvio;

            //modelo web
            //setear totales y valores temporales de cada sección
            ActualizarHandsonFormateoYResultado(modeloWeb, true);

            //estructura de tablas para guardar grilla y archivos
            CbVersionDTO version = GetVersionFromModeloWeb(modeloWeb, regEnvio.Cbenvcodi);
            version.Cbverusucreacion = usuarioExtranet;
            version.Cbverfeccreacion = fechaRegistro;
            regEnvio.VersionActual = version;

            int cbenvcodi = 0;
            bool tieneModificacion = true;

            //guardar informacion y archivos
            if (esNuevoRegistro || tieneModificacion)
            {
                cbenvcodi = GuardarEnvioTransaccional(regEnvio, path, pathTemporal);

                //enviar notificacion
                if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud)
                {
                    //obtener datos de empresa, central, etc
                    regEnvio = GetByIdCbEnvio(cbenvcodi);

                    if (esNuevoRegistro)
                        EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoNuevo, regEnvio);
                }
                else
                {
                    if (enviarCorreoSubs)
                        EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoSubsanacionObs, regEnvio);
                }
            }

            return cbenvcodi;
        }

        private CbVersionDTO GetVersionFromModeloWeb(HandsonCombustible modeloWeb, int cbenvcodi)
        {
            //version
            CbVersionDTO version = new CbVersionDTO();
            version.Cbvernumversion = GetNumeroVersionSiguiente(cbenvcodi);
            version.Cbverestado = ConstantesCombustibles.EstadoRegActivo;

            if (modeloWeb.ListaErrores.Any())
            {
                new ArgumentException("Existen errores en el formulario web. No se permite el envío.");
            }

            //archivos
            List<CbArchivoenvioDTO> listaArchivo = new List<CbArchivoenvioDTO>();
            foreach (var regSeccion in modeloWeb.ListaSeccionDocumento)
            {
                int orden = 1;
                if (regSeccion.ListaArchivo != null)
                {
                    foreach (var regArchTmp in regSeccion.ListaArchivo)
                    {
                        CbArchivoenvioDTO regArchivo = new CbArchivoenvioDTO();
                        regArchivo.Ccombcodi = regSeccion.Seccion.Ccombcodi;
                        regArchivo.Cbarchnombreenvio = regArchTmp.Cbarchnombreenvio;
                        regArchivo.Cbarchnombrefisico = regArchTmp.Cbarchnombrefisico;
                        regArchivo.EsNuevo = regArchTmp.EsNuevo;
                        regArchivo.Cbarchorden = orden;
                        regArchivo.Cbarchestado = ConstantesCombustibles.EstadoArchivoActivo;

                        listaArchivo.Add(regArchivo);
                        orden++;
                    }
                }
            }
            version.ListaArchivo = listaArchivo;

            //grilla
            List<CbDatosDTO> listaDato = new List<CbDatosDTO>();
            foreach (var regSeccion in modeloWeb.ListaSeccion)
            {
                if (regSeccion.ListaItem != null)
                {
                    var listaCnpXSeccion = new List<CbConceptocombDTO>();
                    listaCnpXSeccion.Add(regSeccion.Seccion);
                    listaCnpXSeccion.AddRange(regSeccion.ListaItem);

                    foreach (var regItemTmp in listaCnpXSeccion)
                    {
                        CbDatosDTO regDato = new CbDatosDTO();
                        regDato.Ccombcodi = regItemTmp.Ccombcodi;
                        regDato.Cbevdavalor = regItemTmp.ItemDato.Cbevdavalor;
                        regDato.Cbevdatipo = regItemTmp.ItemDato.Cbevdatipo;
                        regDato.Cbevdavalor2 = regItemTmp.ItemDato.Cbevdavalor2;
                        regDato.Cbevdatipo2 = regItemTmp.ItemDato.Cbevdatipo2;

                        //agregar detalle de facturas
                        List<CbDatosDetalleDTO> listaDetXItem = new List<CbDatosDetalleDTO>();
                        if (regItemTmp.ItemDato.ListaDetalle != null)
                        {
                            foreach (var regDetmp in regItemTmp.ItemDato.ListaDetalle)
                            {
                                CbDatosDetalleDTO regDet = new CbDatosDetalleDTO();
                                regDet.Cbdettipo = regDetmp.Cbdettipo;
                                regDet.Cbdetcompago = regDetmp.Cbdetcompago;
                                regDet.Cbdetfechaemision = regDetmp.Cbdetfechaemision;
                                regDet.Cbdettipocambio = regDetmp.Cbdettipocambio;
                                regDet.Cbdetmoneda = regDetmp.Cbdetmoneda;
                                regDet.Cbdetvolumen = regDetmp.Cbdetvolumen;
                                regDet.Cbdetcosto = regDetmp.Cbdetcosto;
                                regDet.Cbdetcosto2 = regDetmp.Cbdetcosto2;
                                regDet.Cbdetimpuesto = regDetmp.Cbdetimpuesto;

                                listaDetXItem.Add(regDet);
                            }
                        }

                        regDato.ListaDetalle = listaDetXItem;
                        listaDato.Add(regDato);
                    }
                }
            }
            version.ListaDato = listaDato;

            return version;
        }

        private int GuardarEnvioTransaccional(CbEnvioDTO regEnvio, string path, string pathTemporal)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            int cbenvcodi = 0;

            try
            {
                #region Guardar en bd

                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                //
                string pathCarpeta = GetPathEmpresa(path, regEnvio.Emprcodi);

                if (regEnvio.Cbenvcodi > 0)
                {
                    this.UpdateCbEnvio(regEnvio, conn, tran);
                    cbenvcodi = regEnvio.Cbenvcodi;
                }
                else
                {
                    cbenvcodi = this.SaveCbEnvio(regEnvio, conn, tran);

                    // borramos la carpeta (se borra la carpeta cuando se estaba tratando de guardar por primera vez el envio pero salió un error en el proceso)
                    FileServer fs = new FileServer();
                    fs.DeleteFolder(pathCarpeta + "//" + cbenvcodi);
                }

                FileServer.CreateFolder(pathCarpeta, cbenvcodi.ToString(), null);
                string pathEnvio = GetPathEmpresaEnvio(path, regEnvio.Emprcodi, cbenvcodi);
                List<int> lcnpLiq = CombustibleAppServicio.ListarCarpetaXTipocombustible(regEnvio.Estcomcodi);
                foreach (var cnp in lcnpLiq)
                    FileServer.CreateFolder(pathEnvio, cnp.ToString(), null);

                //log
                regEnvio.LogEnvioActual.Cbenvcodi = cbenvcodi;
                this.SaveCbLogenvio(regEnvio.LogEnvioActual, conn, tran);

                //version
                regEnvio.VersionActual.Cbenvcodi = cbenvcodi;
                int cbvercodi = this.SaveCbVersion(regEnvio.VersionActual, conn, tran);

                //archivos
                int cbarchcodiCorr = FactorySic.GetCbArchivoenvioRepository().GetMaxId();
                foreach (var regArchivo in regEnvio.VersionActual.ListaArchivo)
                {
                    regArchivo.Cbvercodi = cbvercodi;
                    regArchivo.Cbarchcodi = cbarchcodiCorr;
                    this.SaveCbArchivoenvio(regArchivo, conn, tran);
                    cbarchcodiCorr++;
                }

                //datos
                int cbvercodiCorr = FactorySic.GetCbDatosRepository().GetMaxId();
                int cbdetcodiCorr = FactorySic.GetCbDatosDetalleRepository().GetMaxId();
                foreach (var regDato in regEnvio.VersionActual.ListaDato)
                {
                    regDato.Cbvercodi = cbvercodi;
                    regDato.Cbevdacodi = cbvercodiCorr++;
                    this.SaveCbDatos(regDato, conn, tran);
                    cbvercodiCorr++;

                    //detalle (facturas, demurrage)
                    foreach (var regDetalle in regDato.ListaDetalle)
                    {
                        regDetalle.Cbevdacodi = regDato.Cbevdacodi;
                        regDetalle.Cbdetcodi = cbdetcodiCorr;
                        this.SaveCbDatosDetalle(regDetalle, conn, tran);
                        cbdetcodiCorr++;
                    }
                }

                #endregion

                #region Guardar archivos en FileServer

                foreach (var regArchivo in regEnvio.VersionActual.ListaArchivo)
                {
                    if (regArchivo.EsNuevo && !string.IsNullOrEmpty(regArchivo.Cbarchnombrefisico))
                    {
                        var pathOrigen = pathTemporal + "//" + regArchivo.Ccombcodi.ToString() + "//";
                        var pathDestino = pathEnvio + regArchivo.Ccombcodi.ToString() + "//";
                        var resultado = FileServer.CopiarFile(pathOrigen, pathDestino, regArchivo.Cbarchnombrefisico, null);
                        if (resultado != 1)
                        {
                            throw new ArgumentException(string.Format("Ocurrió un error cuando se copia el archivo {0} de {1} a {2}.", regArchivo.Cbarchnombrefisico, pathOrigen, pathDestino));
                        }
                    }
                }

                #endregion

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                cbenvcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos de la solicitud.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

            return cbenvcodi;
        }

        private static string GetPathEmpresa(string path, int emprcodi)
        {
            return path + ConstantesCombustibles.FolderPR31 + "//" + "empresa_" + emprcodi + "//";
        }

        /// <summary>
        /// Ubicacion de los archivos de un envio
        /// </summary>
        /// <param name="path"></param>
        /// <param name="emprcodi"></param>
        /// <param name="idenvio"></param>
        /// <returns></returns>
        public static string GetPathEmpresaEnvio(string path, int emprcodi, int idenvio)
        {
            return GetPathEmpresa(path, emprcodi) + idenvio + "//";
        }

        #endregion

        #region Cancelar envío

        /// <summary>
        /// Cancelar envio
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="motivo"></param>
        /// <param name="usuarioExtranet"></param>
        public void CancelarEnvioExtranetPr31(int idEnvio, string motivo, string usuarioExtranet)
        {
            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);

            //solo se permite la cancelacion a los envios con estado SOLICITUD
            if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud)
            {
                DateTime fechaRegistro = DateTime.Now;
                int estadoEnvio = ConstantesCombustibles.EstadoCancelado;
                regEnvio.Estenvcodi = estadoEnvio;
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvobs = motivo;

                //log
                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = estadoEnvio;
                logEnvio.Logenvobservacion = motivo;
                logEnvio.Logenvusucreacion = usuarioExtranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                regEnvio.LogEnvioActual = logEnvio;

                //guardar informacion y archivos
                ActualizarEstadoEnvioTransaccional(regEnvio);

                //enviar notificacion
                regEnvio = GetByIdCbEnvio(idEnvio);
                EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoCancelar, regEnvio);
            }
            else
            {
                throw new ArgumentException("El envio ha sido procesado, no se puede cancelar.");
            }
        }

        #endregion

        #region Correos Extranet

        /// <summary>
        /// Genera el cuerpo del mensaje de correo para un nuevo envío se combustibles líquidos.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailNuevoEnvio(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            //int numDiaHabil = ConstantesCombustibles.EstcomcodiLiquido == estcomcodi ? ConstantesCombustibles.DiasLiquidoRptaSolicitud : ConstantesCombustibles.DiasSolidoRptaSolicitud;
            string combDesc = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Solicitud N° {0}_Actualización del costo de combustible {2} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimado(a):<br />
                    {3}</p>

                    <p>Por medio del presente, se comunica el REGISTRO de la solicitud N° {2} con la entrega de la información para la actualización del costo del combustible {8}, remitida al COES en cumplimiento de lo establecido en el numeral 4.1  del Procedimiento Técnico del COES N° 31 &quot;Cálculo de los Costos Variables de las Unidades de Generación&quot;.</p>

                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{7}</td>
		                    </tr>
	                    </tbody>
                    </table>
                    
                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Cbenvususolicitud //3
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull)
            , combDesc);

        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo para un edicion en el envío se combustibles líquidos.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailSubsanacionObsEnvio(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";
            string numAnexo = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    numAnexo = "1";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    numAnexo = "2";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    numAnexo = "3";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Subsanación de observaciones a la solicitud de actualización del costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimado(a):<br />
                    {3}</p>

                    <p>Por medio del presente, les hacemos presente que se ha registrado el envío de la SUBSANACIÓN de las observaciones formuladas por COES a la información presentada mediante solicitud N° {2}.</p>
                    
                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{7}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Revisión:</td>
			                    <td class='registro-control'>{8}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Subsanación de Observaciones:</td>
			                    <td class='registro-control'>{9}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Cbenvususolicitud
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb //6
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull) //7
            , regEnvio.FechaRevisionCoes.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Cbenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull)
            , numAnexo //10
            );
        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo cuando el administrador cancela el envío de combustibles.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailCancelarEnvio(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Cancelación de Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>                    
                    <p>Estimado(a):<br />
                    {10}</p>
                    <p>Por medio del presente, le comunicamos la CANCELACIÓN del pedido de actualización del costo de combustible {9} realizado a través de la solicitud N° {2}.</p>

                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{3}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Cancelación:</td>
			                    <td class='registro-control'>{7}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Estado:</td>
			                    <td class='registro-control' style='background-color: #C9C9C9;'>{8}</td>
		                    </tr>
	                    </tbody>
                    </table>
                    
                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull) //6
            , regEnvio.Cbenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Estenvnomb.ToUpper()
            , combDesc
            , regEnvio.Cbenvususolicitud);
        }

        #endregion

        #endregion

        #region Eventos Intranet (Administrador COES)

        #region Observar envío (COES)

        /// <summary>
        /// Observar envio
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="txtobs"></param>
        /// <param name="fechaObs"></param>
        public void ObservarEnvioPr31(int idEnvio, string usuarioIntranet, string txtobs, DateTime fechaObs)
        {
            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);

            if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud || regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSubsanacionObs)
            {
                DateTime fechaRegistro = DateTime.Now;
                regEnvio.Estenvcodi = ConstantesCombustibles.EstadoObservado;
                regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvobs = txtobs;

                //desde la primera observación comienza a contarse los días habiles. Si existe una nueva observacion del Coes, se mantiene la fecha de fin de obs
                regEnvio.Cbenvfecfinsubsanarobs = fechaObs.Date.AddDays(1).AddSeconds(-1);
                regEnvio.Cbenvfecampl = null;

                int numDiaHabil = 0;
                if (ConstantesCombustibles.EstcomcodiLiquido == regEnvio.Estcomcodi) numDiaHabil = ConstantesCombustibles.DiasLiquidoSubsanarObs;
                if (ConstantesCombustibles.EstcomcodiSolido == regEnvio.Estcomcodi) numDiaHabil = ConstantesCombustibles.DiasSolidoSubsanarObs;
                regEnvio.DiffDiaHabil = numDiaHabil;


                //log
                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                logEnvio.Logenvusucreacion = usuarioIntranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                logEnvio.Logenvobservacion = "Fecha máxima de respuesta: " + regEnvio.Cbenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull) + ". " + txtobs;
                regEnvio.LogEnvioActual = logEnvio;

                //guardar informacion y archivos
                ActualizarEstadoEnvioTransaccional(regEnvio);

                //enviar notificacion
                EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoObservacion, regEnvio);
            }
            else
            {
                throw new ArgumentException("El envío no se encuentra en estado enviado o en Subsanación de observación. No se puede observar.");
            }
        }

        #endregion

        #region Habilitación del plazo del módulo para corrección de la solicitud

        /// <summary>
        /// Ampliación de plazo
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="fechaAmpl"></param>
        public void HabilitarPlazoEnvioPr31(int idEnvio, string usuarioIntranet, DateTime fechaAmpl)
        {
            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);

            if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSubsanacionObs)
            {
                DateTime fechaRegistro = DateTime.Now;
                regEnvio.Estenvcodi = ConstantesCombustibles.EstadoObservado;
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvfecampl = fechaAmpl;

                CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(idEnvio, ConstantesCombustibles.EstadoObservado);
                regEnvio.FechaRevisionCoes = logEnvioUltimoObs.Logenvfeccreacion;

                //log
                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                logEnvio.Logenvusucreacion = usuarioIntranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                logEnvio.Logenvobservacion = "Se habilitó el plazo de envío de levantamiento de observaciones hasta " + fechaAmpl.ToString(ConstantesAppServicio.FormatoFechaFull);
                regEnvio.LogEnvioActual = logEnvio;

                //guardar informacion y archivos
                ActualizarEstadoEnvioTransaccional(regEnvio);

                //enviar notificacion
                EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoAmplSubsanarObs, regEnvio);
            }
            else
            {
                throw new ArgumentException("El envío no se encuentra en estado de Subsanación de observaciones. No se puede ampliar plazo.");
            }
        }

        #endregion

        #region Habilitar item 1.06

        /// <summary>
        /// Habilitar item 1.06
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        public void HabilitarItem106(int idEnvio, string usuarioIntranet)
        {
            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);

            if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoObservado)
            {
                //si el estado Observado venció entonces lanzar mensaje
                if (!regEnvio.EsEditableExtranet)
                {
                    throw new ArgumentException("Ha culminado el plazo para la subsanación de observaciones por parte del Generador. No se permite la habilitación del ítem 1.06.");
                }

                DateTime fechaRegistro = DateTime.Now;
                regEnvio.Estenvcodi = ConstantesCombustibles.EstadoObservado;
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvitem106 = ConstantesAppServicio.SI;

                //log
                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                logEnvio.Logenvusucreacion = usuarioIntranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                logEnvio.Logenvobservacion = "Se habilitó item 1.06";
                regEnvio.LogEnvioActual = logEnvio;

                //guardar informacion y archivos
                ActualizarEstadoEnvioTransaccional(regEnvio);

                //enviar notificacion
                EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoHabilitar106, regEnvio);
            }
            else
            {
                throw new ArgumentException("El envío no se encuentra en estado observado o en Subsanación de observación. No se puede habilitar item 1.06");
            }
        }

        #endregion

        #region Aprobación de Costo

        /// <summary>
        /// Aprobar Envio y Actualizar parametros Grupos/mop de la central
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="fechaVigencia"></param>
        /// <param name="listaRepcodi"></param>
        /// <param name="listaCorreoCCagente"></param>
        public void AprobarEnvioPr31(int idEnvio, string usuarioIntranet, DateTime fechaVigencia, List<int> listaRepcodi, List<string> listaCorreoCCagente)
        {
            DateTime fechaRegistro = DateTime.Now;
            int estadoEnvio = ConstantesCombustibles.EstadoAprobado;

            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);
            regEnvio.Estenvcodi = estadoEnvio;
            regEnvio.Cbenvfecpreciovigente = fechaVigencia;
            regEnvio.Cbenvusuaprobacion = usuarioIntranet;
            regEnvio.Cbenvfecaprobacion = fechaRegistro;
            regEnvio.Cbenvfecmodificacion = fechaRegistro;

            //log
            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
            logEnvio.Estenvcodi = estadoEnvio;
            logEnvio.Logenvusucreacion = usuarioIntranet;
            logEnvio.Logenvfeccreacion = fechaRegistro;
            regEnvio.LogEnvioActual = logEnvio;

            //modelo web
            HandsonCombustible modeloWeb = GetHandsonCombustible((int)ConstantesCombustibles.Interfaz.Intranet, idEnvio, regEnvio.Estcomcodi, regEnvio.Emprcodi, regEnvio.Grupocodi, regEnvio.Equicodi, regEnvio.Fenergcodi);

            //lista dat por combustible y moneda
            List<PrGrupodatDTO> listaDat = ListarGrupodatXEstado(regEnvio, modeloWeb, fechaVigencia, usuarioIntranet, fechaRegistro);
            regEnvio.ListaGrupodat = listaDat;

            //estructura de tablas para guardar grilla y archivos
            CbVersionDTO version = GetVersionFromModeloWeb(modeloWeb, regEnvio.Cbenvcodi);
            version.Cbverusucreacion = regEnvio.Cbenvususolicitud;
            version.Cbverfeccreacion = fechaRegistro;
            regEnvio.VersionActual = version;

            //Lista Repcodi cv
            regEnvio.ListaRepcodiCv = listaRepcodi;

            //guardar informacion
            ActualizarEstadoEnvioTransaccional(regEnvio);

            foreach (var item in listaRepcodi)
            {
                var oRepCv = _appDespacho.GetByIdPrRepcv(item);
                var lsCostosVariables = new List<PrCvariablesDTO>();
                _appDespacho.GenerarCostosVariables(oRepCv, ref lsCostosVariables, true);
            }

            //enviar notificacion
            regEnvio = GetByIdCbEnvio(idEnvio);
            regEnvio.ListaCorreoCCagente = listaCorreoCCagente;
            EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoAprobado, regEnvio);
        }

        private List<PrGrupodatDTO> ListarGrupodatXEstado(CbEnvioDTO regEnvio, HandsonCombustible modeloWeb, DateTime fechaVigencia, string usuarioIntranet, DateTime fechaRegistro)
        {
            List<PrGrupodatDTO> listaDat = new List<PrGrupodatDTO>();

            if (modeloWeb.ListaErrores.Any())
            {
                new ArgumentException("Existen errores en el formulario web. No se permite la aprobación del envío.");
            }

            List<PrConceptoDTO> listaCnp = FactorySic.GetPrConceptoRepository().GetByCriteria(GetParametrosTotalCentralByFenergcodi(regEnvio.Fenergcodi));

            List<int> lccomcodis = (ConstantesCombustibles.EstcomcodiLiquido == regEnvio.Estcomcodi) ? new List<int>() { 98, 99, 103 } : new List<int>() { 107, 108, 109, 110, 111, 112 };
            int numDecimal = (ConstantesCombustibles.EstcomcodiLiquido == regEnvio.Estcomcodi) ? 4 : 6;
            string formatoNumero = (ConstantesCombustibles.EstcomcodiLiquido == regEnvio.Estcomcodi) ? "{0:0.0000}" : "{0:0.000000}";

            //obtener los resultados de los formularios
            List<CbConceptocombDTO> listaItem = ConstantesCombustibles.EstcomcodiLiquido == regEnvio.Estcomcodi
                                                    ? modeloWeb.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 500).ListaItem
                                                    : modeloWeb.ListaSeccion.Find(x => x.Seccion.Ccombnumeral == 900).ListaItem;

            foreach (var ccomcodi in lccomcodis)
            {
                int concepcodi = GetConcepcodiCostoXFenergcodiSeccionResultado(ccomcodi, regEnvio.Fenergcodi);
                PrConceptoDTO regCnp = listaCnp.Find(x => x.Concepcodi == concepcodi);
                CbConceptocombDTO regCcomb = listaItem.Find(x => x.Ccombcodi == ccomcodi);

                //redondear a 4 o 6 decimales para guardarlos en Parametros Grupos/mop
                decimal valorResultado = regCcomb.Moneda == ConstantesCombustibles.Dolar ? regCcomb.ItemDato.Valor2 : regCcomb.ItemDato.Valor;
                string formulaDat = string.Format(formatoNumero, Math.Round(valorResultado, numDecimal));
                if (regCcomb.Moneda == ConstantesCombustibles.Dolar) formulaDat += "*" + ConstantesCombustibles.FormuladatTcambio;

                listaDat.Add(new PrGrupodatDTO()
                {
                    Formuladat = formulaDat,
                    Fechadat = fechaVigencia,
                    Grupocodi = regEnvio.Grupocodi,
                    Concepcodi = concepcodi,
                    Lastuser = usuarioIntranet,
                    Fechaact = fechaRegistro,
                    Deleted = 0
                });
            }

            return listaDat;
        }

        #region Listado de Costos Variables

        /// <summary>
        /// Genera lista de Reporte CV
        /// </summary>
        /// <returns></returns>
        public string GenerarHtmlListaCostosVariable()
        {
            List<PrRepcvDTO> lstCVariables = ObtenerCostosVariablesParaPR31();

            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<table border='0' class='pretty tabla-icono' cellspacing='0' width='100%' id='tabla'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th></th>");
            strHtml.Append("<th>Código</th>");
            strHtml.Append("<th>Fecha-Hora</th>");
            strHtml.Append("<th>Tipo</th>");
            strHtml.Append("<th>Nombre</th>");
            strHtml.Append("<th>Detalle</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");

            foreach (var item in lstCVariables)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td><input type='radio' name='chkCvariable' value='{0}' /> <input type='hidden' id='fechaVigRepcodi_{0}' value='{1}' /> </td>", item.Repcodi, item.Repfecha.ToString(ConstantesAppServicio.FormatoFecha));
                strHtml.AppendFormat("<td>{0}</td>", item.Repcodi);
                strHtml.AppendFormat("<td>{0}</td>", item.RepfechaDesc);
                strHtml.AppendFormat("<td>{0}</td>", item.ReptipoDesc);
                strHtml.AppendFormat("<td>{0}</td>", item.Repnomb);
                strHtml.AppendFormat("<td style='text-align:left;padding-left:20px'>{0}</td>", item.Repdetalle);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        private List<PrRepcvDTO> ObtenerCostosVariablesParaPR31()
        {
            var fechaInicio = DateTime.Today;
            var fechaFin = DateTime.Today.AddDays(30);

            var lstCVariables = _appDespacho.GetByCriteriaPrRepcvs(ConstantesDespacho.TipoProgramaTodos, fechaInicio, fechaFin).OrderByDescending(x => x.Repfecha).ToList();
            return lstCVariables;
        }

        /// <summary>
        /// Genera Lista de CV relación envio
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        public string GenerarHtmlListaEnvioRelacionCV(int idEnvio, string url)
        {
            List<PrRepcvDTO> listado = FactorySic.GetPrRepcvRepository().GetRepcvByEnvcodi(idEnvio);
            if (!listado.Any()) return string.Empty;

            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<table border='0' class='pretty tabla-icono' cellspacing='0' style='width: auto;' id='tabla_envio_cv'>");

            strHtml.Append("<caption>Costos variables actualizados</caption>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>Código</th>");
            strHtml.Append("<th>Fecha-Hora</th>");
            strHtml.Append("<th>Tipo</th>");
            strHtml.Append("<th>Nombre</th>");
            strHtml.Append("<th>Detalle</th>");
            strHtml.Append("<th>Acción</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");

            foreach (var item in listado)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", item.Repcodi);
                strHtml.AppendFormat("<td>{0}</td>", item.Repfecha.ToString(ConstantesAppServicio.FormatoFechaHoraAMPM));
                strHtml.AppendFormat("<td>{0}</td>", item.Reptipo == ConstantesDespacho.TipoProgramaSemanal ? ConstantesDespacho.TipoProgramaSemanalDesc : ConstantesDespacho.TipoProgramaDiarioDesc);
                strHtml.AppendFormat("<td>{0}</td>", item.Repnomb);
                strHtml.AppendFormat("<td style='text-align:left;padding-left:10px'>{0}</td>", item.Repdetalle);
                strHtml.AppendFormat("<td onclick='mostrarDetalleCV({0});' style='cursor:pointer;width:30px;'><img src='{1}Content/Images/btn-open.png' title='Ver Detalle Costos Variables' alt='Ver Detalle Costos Variables' style='height: 20px;'/></td>", item.Repcodi, url);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region Desaprobación de Envío

        /// <summary>
        /// Desaprobar envio
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="mensaje"></param>
        /// <param name="listaCorreoCCagente"></param>
        public void DesaprobarEnvioPr31(int idEnvio, string usuarioIntranet, string mensaje, List<string> listaCorreoCCagente)
        {
            DateTime fechaRegistro = DateTime.Now;
            int estadoEnvio = ConstantesCombustibles.EstadoDesaprobado;

            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);
            regEnvio.Estenvcodi = estadoEnvio;
            regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
            regEnvio.Cbenvfecmodificacion = fechaRegistro;
            regEnvio.Cbenvobs = mensaje;
            //regEnvio.ListaNuevaPrecios = ListarNuevosPreciosFromTexto(regEnvio.Cbenvobs);

            //log
            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
            logEnvio.Estenvcodi = estadoEnvio;
            logEnvio.Logenvusucreacion = usuarioIntranet;
            logEnvio.Logenvfeccreacion = fechaRegistro;
            logEnvio.Logenvobservacion = mensaje;
            regEnvio.LogEnvioActual = logEnvio;

            //guardar informacion
            ActualizarEstadoEnvioTransaccional(regEnvio);

            //enviar notificacion
            regEnvio.ListaCorreoCCagente = listaCorreoCCagente;
            EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoDesaprobado, regEnvio);
        }

        ///// <summary>
        ///// Listar precios
        ///// </summary>
        ///// <param name="mensajeAlGenerador"></param>
        ///// <returns></returns>
        //public List<string> ListarNuevosPreciosFromTexto(string mensajeAlGenerador)
        //{
        //    var listaLineas = mensajeAlGenerador.Split('\n').Select(x => x.Trim()).ToList();

        //    //solo considerar las lineas que comienzan con guion
        //    List<string> listaPrecio = listaLineas.Where(x => x.StartsWith("-")).ToList();

        //    return listaPrecio;
        //}

        #endregion

        private void ActualizarEstadoEnvioTransaccional(CbEnvioDTO regEnvio)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                this.UpdateCbEnvio(regEnvio, conn, tran);

                //log
                regEnvio.LogEnvioActual.Cbenvcodi = regEnvio.Cbenvcodi;
                this.SaveCbLogenvio(regEnvio.LogEnvioActual, conn, tran);

                if (regEnvio.VersionActual != null)
                {
                    //version
                    regEnvio.VersionActual.Cbenvcodi = regEnvio.Cbenvcodi;
                    int cbvercodi = this.SaveCbVersion(regEnvio.VersionActual, conn, tran);

                    //archivos
                    int cbarchcodiCorr = FactorySic.GetCbArchivoenvioRepository().GetMaxId();
                    foreach (var regArchivo in regEnvio.VersionActual.ListaArchivo)
                    {
                        regArchivo.Cbvercodi = cbvercodi;
                        regArchivo.Cbarchcodi = cbarchcodiCorr;
                        this.SaveCbArchivoenvio(regArchivo, conn, tran);
                        cbarchcodiCorr++;
                    }

                    //datos
                    int cbvercodiCorr = FactorySic.GetCbDatosRepository().GetMaxId();
                    int cbdetcodiCorr = FactorySic.GetCbDatosDetalleRepository().GetMaxId();
                    foreach (var regDato in regEnvio.VersionActual.ListaDato)
                    {
                        regDato.Cbvercodi = cbvercodi;
                        regDato.Cbevdacodi = cbvercodiCorr++;
                        this.SaveCbDatos(regDato, conn, tran);
                        cbvercodiCorr++;

                        //detalle (facturas, demurrage)
                        foreach (var regDetalle in regDato.ListaDetalle)
                        {
                            regDetalle.Cbevdacodi = regDato.Cbevdacodi;
                            regDetalle.Cbdetcodi = cbdetcodiCorr;
                            this.SaveCbDatosDetalle(regDetalle, conn, tran);
                            cbdetcodiCorr++;
                        }
                    }
                }

                if (regEnvio.ListaGrupodat != null)
                {
                    foreach (var regDat in regEnvio.ListaGrupodat)
                    {
                        FactorySic.GetPrGrupodatRepository().SaveTransaccional(regDat, conn, tran);
                    }
                }

                if (regEnvio.ListaRepcodiCv != null)
                {
                    foreach (var repcodi in regEnvio.ListaRepcodiCv)
                    {
                        var enviorelcv = new CbEnviorelcvDTO()
                        {
                            Repcodi = repcodi,
                            Cbenvcodi = regEnvio.Cbenvcodi
                        };

                        SaveCbEnviorelcvTransaccional(enviorelcv, conn, tran);
                    }
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private void RegistrarLogEstadoEnvioTransaccional(CbLogenvioDTO logEnvio)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                //log
                this.SaveCbLogenvio(logEnvio, conn, tran);

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private void EnvioCorreoExtranet(int tipoCorreo, CbEnvioDTO regEnvio)
        {
            int plantcodi = ConstantesCombustibles.PlantcodiNotificacionPr31;
            SiPlantillacorreoDTO plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);

            string correoExtranet = regEnvio.Cbenvususolicitud;

            if (!correoExtranet.Contains("@"))
                correoExtranet = TipoPlantillaCorreo.MailFrom;

            List<string> toEmails = new List<string>() { correoExtranet };
            List<string> ccEmails = (plantilla.PlanticorreosCc ?? "").Split(';').ToList();

            string asunto = string.Empty;
            string contenido = string.Empty;

            switch (tipoCorreo)
            {
                //Extranet
                case ConstantesCombustibles.TipoCorreoNuevo:
                    BodyMailNuevoEnvio(regEnvio, out asunto, out contenido);
                    break;
                case ConstantesCombustibles.TipoCorreoSubsanacionObs:
                    BodyMailSubsanacionObsEnvio(regEnvio, out asunto, out contenido);
                    break;
                case ConstantesCombustibles.TipoCorreoCancelar:
                    BodyMailCancelarEnvio(regEnvio, out asunto, out contenido);
                    break;

                //Intranet
                case ConstantesCombustibles.TipoCorreoObservacion:
                    BodyMailObservacion(regEnvio, out asunto, out contenido);
                    break;
                case ConstantesCombustibles.TipoCorreoAmplSubsanarObs:
                    BodyMailAmpliacionPlazoSubsanacionObs(regEnvio, out asunto, out contenido);
                    toEmails = (plantilla.PlanticorreosCc ?? "").Split(';').ToList();
                    ccEmails = new List<string>() { };
                    break;
                case ConstantesCombustibles.TipoCorreoHabilitar106:
                    BodyMailHabilitarItem106(regEnvio, out asunto, out contenido);
                    toEmails = (plantilla.PlanticorreosCc ?? "").Split(';').ToList();
                    ccEmails = new List<string>() { };
                    break;
                case ConstantesCombustibles.TipoCorreoAprobado:
                    BodyMailAprobarEnvio(regEnvio, out asunto, out contenido);
                    ccEmails.AddRange(regEnvio.ListaCorreoCCagente);
                    break;
                case ConstantesCombustibles.TipoCorreoDesaprobado:
                    BodyMailDesaprobarEnvio(regEnvio, out asunto, out contenido);
                    ccEmails.AddRange(regEnvio.ListaCorreoCCagente);
                    break;

                //Automático
                case ConstantesCombustibles.TipoCorreorRecordatorioSolicitudCoes:
                    BodyMailRecordatorioSolicitudACoes(regEnvio, out asunto, out contenido);
                    toEmails = (plantilla.PlanticorreosCc ?? "").Split(';').ToList();
                    ccEmails = new List<string>() { };
                    break;
                case ConstantesCombustibles.TipoCorreorRecordatorioSubsanacionObsCoes:
                    BodyMailRecordatorioSubsanarObsACoes(regEnvio, out asunto, out contenido);
                    toEmails = (plantilla.PlanticorreosCc ?? "").Split(';').ToList();
                    ccEmails = new List<string>() { };
                    break;
                case ConstantesCombustibles.TipoCorreorRecordatorioSubsanacionObsAgente:
                    BodyMailRecordatorioSubsanarObsAAgente(regEnvio, out asunto, out contenido);
                    break;
                case ConstantesCombustibles.TipoCorreoCulminacionPlazo:
                    BodyMailCulminacionPlazo(regEnvio, out asunto, out contenido);
                    break;

            }

            try
            {
                string fromEmail = plantilla.PlanticorreoFrom ?? "";

                toEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(string.Join(";", toEmails), false);
                ccEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(string.Join(";", ccEmails), false);
                List<string> bccEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(plantilla.PlanticorreosBcc, true, true);

                string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                COES.Base.Tools.Util.SendEmail(toEmails, ccEmails, bccEmails, asuntoSendEmail, contenido, "");

                var correo = new SiCorreoDTO();
                correo.Corrasunto = asunto;
                correo.Corrcontenido = contenido;
                correo.Corrfechaenvio = DateTime.Now;
                correo.Corrfechaperiodo = regEnvio.Cbenvfecsolicitud;
                correo.Corrfrom = TipoPlantillaCorreo.MailFrom;
                correo.Corrto = string.Join(";", toEmails);
                correo.Corrcc = string.Join(";", ccEmails);
                correo.Emprcodi = regEnvio.Emprcodi;
                correo.Enviocodi = regEnvio.Cbenvcodi;
                correo.Plantcodi = plantcodi;
                servCorreo.SaveSiCorreo(correo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }

        }

        #region Correos Intranet

        /// <summary>
        /// Envia correo cuando se ingresa una observacion al envio.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailObservacion(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";
            string numAnexo = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    numAnexo = "1";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    numAnexo = "2";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    numAnexo = "3";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Observaciones a la solicitud de actualización del costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimado(a):<br />
                    {3}</p>

                    <p>Por medio del presente, se le comunica las OBSERVACIONES encontradas a la información presentada mediante solicitud N° {2} y detalladas en el sistema extranet de COES.</p>

                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{7}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Revisión:</td>
			                    <td class='registro-control'>{8}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha máxima de respuesta:</td>
			                    <td class='registro-control'>{10}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Estado:</td>
			                    <td class='registro-control' style='background-color: #FFD966'>{9}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Cbenvususolicitud
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb //6
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull) //
            , regEnvio.Cbenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Estenvnomb.ToUpper()
            , regEnvio.Cbenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull2)//10
            , UtilExcel.NumeroATexto(regEnvio.DiffDiaHabil).ToLower()
            , regEnvio.DiffDiaHabil
            , numAnexo);
        }

        /// <summary>
        /// Envio de correo para ampliacion
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailAmpliacionPlazoSubsanacionObs(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Habilitación del plazo del módulo para corrección de la solicitud de actualización del costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Señores COES:<br /></p>

                    <p>Por medio del presente se informa que se habilitado el plazo del módulo para la corrección de la información presentada mediante la solicitud N° {2}.</p>
                    
                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{3}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Revisión:</td>
			                    <td class='registro-control'>{7}</td>
		                    </tr>

		                    <tr>
			                    <td class='registro-label'>Inicio de plazo otorgado:</td>
			                    <td class='registro-control'>{8}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fin de plazo otorgado:</td>
			                    <td class='registro-control'>{9}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb //5
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull) //6
            , regEnvio.FechaRevisionCoes.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Cbenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Cbenvfecampl.Value.ToString(ConstantesAppServicio.FormatoFechaFull)
            );
        }

        /// <summary>
        /// Habilitar item 1.06
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailHabilitarItem106(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";
            string numAnexo = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    numAnexo = "1";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    numAnexo = "2";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    numAnexo = "3";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Habilitación de la casilla \"1.06 Volumen de combustible en almacén\"");

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Señores COES:<br /></p>

                    <p>Por medio del presente, comunicamos que se ha habilitado la 1.06 del Formato {6}, para el ingreso manual del volumen de combustible en almacén para la actualización del costo de combustible {5}.</p>
                    
                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{3}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{4}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Emprnomb //2
            , centralesParticipantes
            , regEnvio.Fenergnomb
            , combDesc //5
            , numAnexo
            );
        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo cuando el administrador aprueba el envío de combustibles.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailAprobarEnvio(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Aprobación del costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimado(a):<br />
                    {3}</p>

                    <p>Por medio del presente, se le comunica que ha sido APROBADO un nuevo costo del combustible {8}, sustentado en la información presentada mediante la solicitud N° {2} conforme se detalla en el sistema extranet de COES, en consideración a lo dispuesto en el Anexo 1 del Procedimiento Técnico del COES N° 31 &quot;Cálculo de los Costos Variables de las Unidades de Generación&quot;.</p>
                    
                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{7}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Aprobación:</td>
			                    <td class='registro-control'>{9}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Estado:</td>
			                    <td class='registro-control' style='background-color: #C6E0B4;'>{10}</td>
		                    </tr>
	                    </tbody>
                    </table>
                    
                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Cbenvususolicitud //3
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull)
            , combDesc //8
            , regEnvio.Cbenvfecaprobacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Estenvnomb.ToUpper());
        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo cuando el sistema desaprueba el envío de combustibles.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailDesaprobarEnvio(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            var listaLineas = (regEnvio.Cbenvobs ?? "").Split('\n').Select(x => x.Trim()).ToList();
            string sNuevosPrecios = string.Join("<br/>", listaLineas);

            asunto = string.Format("Desaprobación del costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimado(a):<br />
                    {3}</p>

                    <p>Por medio del presente, se le comunica que se ha DESAPROBADO la información presentada, mediante solicitud N° {2}, para la actualización del costo de combustible {10}, conforme se detalla en el sistema extranet de COES:</p>

                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{7}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Desaprobación:</td>
			                    <td class='registro-control'>{8}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Estado:</td>
			                    <td class='registro-control' style='background-color: #FF7979'>{9}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    <p>
		                {11}
                    </p>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Cbenvususolicitud
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb //6
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull) //
            , regEnvio.Cbenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Estenvnomb.ToUpper()
            , combDesc //10
            , sNuevosPrecios);
        }

        #endregion

        #endregion

        #region Log de envio

        /// <summary>
        /// Reporte html del log de envio
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <returns></returns>
        public string GenerarHtmlLogEnvio(int idEnvio)
        {
            List<CbLogenvioDTO> listaLog = GetByCriteriaCbLogenvios(idEnvio);

            StringBuilder strHtml = new StringBuilder();
            strHtml.Append(@"
                <table id='tabla_log_envio' border='1' class='pretty tabla-adicional' cellspacing='0' style='width: auto;'>
                    <caption>Historial de la solicitud</caption>
                    <thead>
                        <tr>
                            <th>Acción</th>
                            <th>Descripción</th>
                            <th>Usuario</th>
                            <th>Fecha</th>
                        </tr>
                    </thead>
                    <tbody>
            ");

            foreach (var reg in listaLog)
            {
                strHtml.AppendFormat(@"
                        <tr>
                            <td style=''>{0}</td>
                            <td style='white-space: break-spaces; text-align: left;'>{1}</td>
                            <td style='text-align: center'>{2}</td>
                            <td style=''>{3}</td>
                        </tr>
                    ", reg.Estenvnomb, reg.Logenvobservacion, reg.Logenvusucreacion, reg.LogenvfeccreacionDesc);
            }
            strHtml.Append(@"
                    <tbody>
                </table>"
            );

            return strHtml.ToString();
        }

        #endregion

        #region Configuración de Parametros

        /// <summary>
        /// Actualiza los registro de la tabla CB_CENTRALXFENERG con las centrales obtenidos con fecha actual
        /// </summary>
        public void ActualizarCentralesPorFuenteEnergia()
        {
            //Centrales para aplicativo Líquidos y Sólidos
            List<CbCentralxfenergDTO> lstCentralesXFenerg = ObtenerCentralesFenerg(); //logica para obtener de centrales
            List<CbCentralxfenergDTO> lstCentralesXFenergDB = ListCbCentralxfenergs().Where(x => x.Estcomcodi != ConstantesCombustibles.EstcomcodiGas).ToList();

            List<CbCentralxfenergDTO> lstCentralesXFenergBaja = ObtenerCentralesFenergBaja(lstCentralesXFenerg, lstCentralesXFenergDB);
            ObtenerCentralesFenergNuevos(lstCentralesXFenerg, lstCentralesXFenergDB, out List<CbCentralxfenergDTO> listaCentralesNuevos, out List<CbCentralxfenergDTO> listaCentralesExistesInactivos);

            DarDeBajaCentralesXFenerg(lstCentralesXFenergBaja);
            InsertarCentralesFuenteEnergia(listaCentralesNuevos);
            ActualizarCentralesXFenerg(listaCentralesExistesInactivos);

            //Centrales para aplicativo Gaseoso
            List<CbCentralxfenergDTO> lstCentralesXFenergGaseoso = ListarCentralFenergModuloGaseoso();
            List<CbCentralxfenergDTO> lstCentralesXFenergDBGaseoso = ListCbCentralxfenergs().Where(x => x.Estcomcodi == ConstantesCombustibles.EstcomcodiGas).ToList();
            ObtenerCentralesFenergNuevos(lstCentralesXFenergGaseoso, lstCentralesXFenergDBGaseoso, out List<CbCentralxfenergDTO> listaCentralesNuevosGas, out List<CbCentralxfenergDTO> listaCentralesExistesInactivosGas);

            InsertarCentralesFuenteEnergia(listaCentralesNuevosGas);
        }

        private void ActualizarCentralesXFenerg(List<CbCentralxfenergDTO> listaCentralesExistesInactivos)
        {
            foreach (var centrales in listaCentralesExistesInactivos)
            {
                centrales.Cbcxfeactivo = (int)ConstantesCombustibles.EstadoParametro.Activo;
                UpdateCbCentralxfenerg(centrales);
            }
        }

        private void InsertarCentralesFuenteEnergia(List<CbCentralxfenergDTO> listaCentralesNuevos)
        {
            foreach (var centralesNuevos in listaCentralesNuevos)
            {
                SaveCbCentralxfenerg(centralesNuevos);
            }
        }

        private void ObtenerCentralesFenergNuevos(List<CbCentralxfenergDTO> lstCentralesXFenerg, List<CbCentralxfenergDTO> lstCentralesXFenergDB,
            out List<CbCentralxfenergDTO> listaCentralesNuevos,
            out List<CbCentralxfenergDTO> listaCentralesExistesInactivos)
        {
            listaCentralesNuevos = new List<CbCentralxfenergDTO>();
            listaCentralesExistesInactivos = new List<CbCentralxfenergDTO>();

            foreach (var centralesFenerg in lstCentralesXFenerg)
            {
                var centralXFenerg = lstCentralesXFenergDB.Find(x => x.Equicodi == centralesFenerg.Equicodi && x.Fenergcodi == centralesFenerg.Fenergcodi);

                if (centralXFenerg == null)
                {
                    listaCentralesNuevos.Add(centralesFenerg);
                }
                else if (centralXFenerg.Cbcxfeactivo == (int)ConstantesCombustibles.EstadoParametro.Inactivo)
                {
                    listaCentralesExistesInactivos.Add(centralXFenerg);
                }
            }
        }

        private void DarDeBajaCentralesXFenerg(List<CbCentralxfenergDTO> lstCentralesXFenergBaja)
        {
            foreach (var centralxfenergBaja in lstCentralesXFenergBaja)
            {
                centralxfenergBaja.Cbcxfeactivo = (int)ConstantesCombustibles.EstadoParametro.Inactivo;
                UpdateCbCentralxfenerg(centralxfenergBaja);
            }
        }

        private List<CbCentralxfenergDTO> ObtenerCentralesFenergBaja(List<CbCentralxfenergDTO> lstCentralesXFenerg, List<CbCentralxfenergDTO> lstCentralesXFenergDB)
        {
            var listaCentralesBaja = new List<CbCentralxfenergDTO>();

            foreach (var centralesFenergDB in lstCentralesXFenergDB)
            {
                var existeCentralEnNuevaLista = lstCentralesXFenerg.Any(x => x.Equicodi == centralesFenergDB.Equicodi && x.Fenergcodi == centralesFenergDB.Fenergcodi);
                if (!existeCentralEnNuevaLista)
                {
                    listaCentralesBaja.Add(centralesFenergDB);
                }
            }

            return listaCentralesBaja;
        }

        /// <summary>
        /// Lista de centrales de módulo Líquidos y sólidos
        /// </summary>
        /// <returns></returns>
        private List<CbCentralxfenergDTO> ObtenerCentralesFenerg()
        {
            var fechaActual = DateTime.Today;
            var fechaFin = fechaActual.AddDays(15);

            List<int> lFenerTmp = new List<int>() {
                ConstantesPR5ReportesServicio.FenergcodiCarbon,
                ConstantesPR5ReportesServicio.FenergcodiDiesel,
                ConstantesPR5ReportesServicio.FenergcodiR500,
                ConstantesPR5ReportesServicio.FenergcodiR6,
                ConstantesPR5ReportesServicio.FenergcodiResidual
            };

            ListarEmpresasYCentralPr31(fechaActual, fechaFin, out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<PrGrupoDTO> listaModo);

            var lstCentralxfenerg = new List<CbCentralxfenergDTO>();

            List<SiFuenteenergiaDTO> listaFenerg = ListSiFuenteenergias();

            foreach (var central in listaCentral)
            {
                List<PrGrupoDTO> listaGr = listaModo.Where(x => x.Equipadre == central.Equicodi).ToList();

                List<int> lfenergcodi = listaGr.Select(x => x.Fenergcodi.Value).Distinct().ToList();
                if (lfenergcodi.Any(x => lFenerTmp.Contains(x)))
                    lfenergcodi.Add(ConstantesPR5ReportesServicio.FenergcodiDiesel);

                var lstFuenteEnergia = listaFenerg.Where(x => lfenergcodi.Contains(x.Fenergcodi)).ToList();

                foreach (var fuenteEnergia in lstFuenteEnergia)
                {
                    lstCentralxfenerg.Add(
                        new CbCentralxfenergDTO()
                        {
                            Equicodi = central.Equicodi,
                            Grupocodi = central.Grupocodi.Value,
                            Fenergcodi = fuenteEnergia.Fenergcodi,
                            Cbcxfeactivo = (int)ConstantesCombustibles.EstadoParametro.Activo,
                            Estcomcodi = GetEstcomcodiByFenergcodi(fuenteEnergia.Fenergcodi)
                        });
                }
            }
            return lstCentralxfenerg;
        }

        /// <summary>
        /// Lista de centrales para módulo Gaseoso: Todas las centrales activas, bajas, fuera de COES y proyecto dle
        /// </summary>
        /// <returns></returns>
        public List<CbCentralxfenergDTO> ListarCentralFenergModuloGaseoso()
        {
            //Modulo Parametros Grupos / Modos de operacion
            List<PrGrupoeqDTO> listaFromAppFT = FactorySic.GetPrGrupoeqRepository().List().Where(x => x.Geqactivo == 1).ToList();

            //Lista grupos
            List<PrGrupoDTO> listaGrupo = (new INDAppServicio()).ListarGrupoValido();

            //obtener grupocentral
            var lstCentralxfenerg = new List<CbCentralxfenergDTO>();
            foreach (var objCfg in listaFromAppFT.GroupBy(x => new { x.Fenergcodi, x.Equipadre }))
            {
                lstCentralxfenerg.Add(
                    new CbCentralxfenergDTO()
                    {
                        Equicodi = objCfg.Key.Equipadre,
                        Grupocodi = INDAppServicio.GrupocodiCentralFromListaGrupo(objCfg.First().Grupocodi, listaGrupo),
                        Fenergcodi = objCfg.Key.Fenergcodi,
                        Estcomcodi = ConstantesCombustibles.EstcomcodiGas,
                        Cbcxfeactivo = (int)ConstantesCombustibles.EstadoParametro.Activo,
                    });
            }

            return lstCentralxfenerg;
        }

        /// <summary>
        /// Reporte HTML Configuración Parametros
        /// </summary>
        /// <param name="url"></param>
        /// <returns></returns>
        public string GenerarHtmlListaConfiguracionParametros(string url)
        {
            var listadoCentralXFenerg = GetByCriteriaCbCentralxfenergs(ConstantesCombustibles.EstcomcodiLiquido + "," + ConstantesCombustibles.EstcomcodiSolido)
                .OrderBy(x => x.Emprnomb)
                .ThenBy(x => x.Equinomb)
                .ThenBy(x => x.Fenergnomb).ToList();

            string fechaConsulta = DateTime.Today.ToString(ConstantesAppServicio.FormatoFecha);

            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<table border='0' class='pretty tabla-icono' cellspacing='0' width='100%' id='tabla'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:40px;'>Actualizar<br/>Límite</th>");
            strHtml.Append("<th style='width:40px;'>Ver Parámetros<br/>Grupos/Mop</th>");
            strHtml.Append("<th>EMPRESA</th>");
            strHtml.Append("<th>CENTRAL</th>");
            strHtml.Append("<th>TIPO DE COMBUSTIBLE</th>");
            strHtml.Append("<th style='width:80px;'>ESTADO</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");

            foreach (var item in listadoCentralXFenerg)
            {
                var estado = item.Cbcxfeactivo == (int)ConstantesCombustibles.EstadoParametro.Inactivo ? "Inactivo" : "Activo";
                var color = item.Cbcxfeactivo == (int)ConstantesCombustibles.EstadoParametro.Inactivo ? "#FFDDDD !important" : "";

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td onclick='verDetalle({0});' style='background-color:{2}'><img src='{1}Content/Images/btn-edit.png' style='height: 20px;'/></td>", item.Cbcxfecodi, url, color);
                strHtml.AppendFormat("<td onclick=\"verParametrosGruposMop({0}, {3}, '{4}');\" style='background-color:{2}'><img src='{1}Content/Images/btn-open.png' style='height: 20px;'/></td>", item.Grupocodi, url, color, item.Agrupcodi, fechaConsulta);
                strHtml.AppendFormat("<td  style='background-color:{1}'>{0}</td>", item.Emprnomb, color);
                strHtml.AppendFormat("<td  style='background-color:{1}'>{0}</td>", item.Equinomb, color);
                strHtml.AppendFormat("<td  style='background-color:{1}'>{0}</td>", item.Fenergnomb, color);
                strHtml.AppendFormat("<td  style='background-color:{1}'>{0}</td>", estado, color);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Obtiene Conceptos de combustible para el item de resultados de Sólidos/Líquidod
        /// </summary>
        /// <param name="cbcxfecodi"></param>
        /// <param name="estcomcodi"></param>
        /// <param name="fenergcodi"></param>
        /// <param name="grupocodi"></param>
        /// <returns></returns>
        public List<CbConceptocombDTO> ObtenerConceptocombsResultados(int cbcxfecodi, int estcomcodi, int fenergcodi, int grupocodi)
        {
            //items
            var itemcombs = ObtenerItemResultadoCbConceptocombsxEstcomcodi(estcomcodi);

            List<CbConceptocombDTO> listaItemsResultado = GetByCriteriaCbConceptocombs(estcomcodi)
                .Where(x => x.Ccombestado == ConstantesCombustibles.EstadoArchivoActivo && x.NumeralPadre == itemcombs && x.Ccombnumdecimal != 0).ToList();

            var ccombcodis = string.Join(",", listaItemsResultado.Select(x => x.Ccombcodi));

            //bd
            var lstDatosxcentralxfenerg = GetByCriteriaCbDatosxcentralxfenergs(cbcxfecodi, ccombcodis);

            //dat
            string concepcodisTotal = GetParametrosTotalCentralByFenergcodi(fenergcodi);
            List<PrGrupodatDTO> listaBDTot = ListarFormulaPrecio(concepcodisTotal, grupocodi, DateTime.Today);

            //
            foreach (var itemResultado in listaItemsResultado)
            {
                itemResultado.CbDatosxcentralxfenerg = lstDatosxcentralxfenerg.Find(x => x.Ccombcodi == itemResultado.Ccombcodi);

                //dat
                itemResultado.FechadatDesc = string.Empty;
                itemResultado.Formuladat = string.Empty;

                int concepcodi = GetConcepcodiCostoXFenergcodiSeccionResultado(itemResultado.Ccombcodi, fenergcodi);
                PrGrupodatDTO regDat = listaBDTot.Find(x => x.Concepcodi == concepcodi);
                if (regDat != null && regDat.Formuladat != null) itemResultado.Formuladat = regDat.Formuladat;
                if (regDat != null && regDat.Fechadat != null) itemResultado.FechadatDesc = regDat.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha);
            }

            return listaItemsResultado;
        }

        /// <summary>
        /// Genera reporte Html para el registro de Configuracion Parametros -PR31
        /// </summary>
        /// <param name="listaItemsResultado"></param>
        /// <returns></returns>
        public string GenerarHtmlRegistroConfiguracionParametros(List<CbConceptocombDTO> listaItemsResultado)
        {
            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<table border='0' class='pretty tabla-icono' cellspacing='0' width='100%' id='tabla'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");

            strHtml.Append("<th style=''>Item</th>");
            strHtml.Append("<th style=''>Mínimo</th>");
            strHtml.Append("<th style=''>Máximo</th>");
            strHtml.Append("<th style=''>Fórmula Vigente en BD</th>");
            strHtml.Append("<th style=''>F. Registro</th>");
            strHtml.Append("<th style=''>Usuario</th>");

            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");

            var index = 0;
            foreach (var item in listaItemsResultado)
            {
                index++;
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<input type='hidden' name='txtCcombcodi' value='{0}'/>", item.Ccombcodi);
                strHtml.AppendFormat("<td class='resultado'>{0} {1}</td>", item.Numeral, item.Ccombnombre);
                strHtml.Append($"<td><input id='valor1_{index}' onkeypress='return validaNum(event,this.id);' type='text' name='txtValor1' value='{item.CbDatosxcentralxfenerg?.Cbdatvalor1}' style='width:70px;'/></td>");
                strHtml.Append($"<td><input id='valor2_{index}' onkeypress='return validaNum(event,this.id);' type='text' name='txtValor2' value='{item.CbDatosxcentralxfenerg?.Cbdatvalor2}' style='width:70px;'/></td>");
                strHtml.AppendFormat("<td class='resultado' style='text-align: center !important;'>{0}</td>", item.Formuladat);
                strHtml.AppendFormat("<td>{0}</td>", item.CbDatosxcentralxfenerg?.Cbdatfecregistro?.ToString("dd/MM/yyyy HH:mm"));
                strHtml.AppendFormat("<td>{0}</td>", item.CbDatosxcentralxfenerg?.Cbdatusuregistro);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        private int ObtenerItemResultadoCbConceptocombsxEstcomcodi(int estcomcodi)
        {
            if (ConstantesCombustibles.EstcomcodiSolido == estcomcodi)
                return ConstantesCombustibles.ResultadosItemSolido;

            if (ConstantesCombustibles.EstcomcodiLiquido == estcomcodi)
                return ConstantesCombustibles.ResultadosItemLiquido;

            throw new ArgumentException();
        }

        /// <summary>
        /// Guarda datos en la tabla CbDatosxcentralxfenerg
        /// </summary>
        /// <param name="listaDatos"></param>
        /// <param name="usuario"></param>
        public void GuardarDatosxcentralxfenerg(List<CbDatosxcentralxfenergDTO> listaDatos, string usuario)
        {
            var cbcxfecodi = listaDatos.First().Cbcxfecodi;
            var ccombcodis = string.Join(",", listaDatos.Select(x => x.Ccombcodi));

            var lstDatosxcentralxfenerg = GetByCriteriaCbDatosxcentralxfenergs(cbcxfecodi, ccombcodis);

            foreach (var item in listaDatos)
            {
                var datoDb = lstDatosxcentralxfenerg.FirstOrDefault(x => x.Ccombcodi == item.Ccombcodi);

                if (datoDb == null)
                {
                    item.Cbdatfecregistro = DateTime.Now;
                    item.Cbdatusuregistro = usuario;
                    SaveCbDatosxcentralxfenerg(item);
                }
                else
                {

                    if (datoDb.Cbdatvalor1 != item.Cbdatvalor1 || datoDb.Cbdatvalor2 != item.Cbdatvalor2)
                    {
                        datoDb.Cbdatvalor1 = item.Cbdatvalor1;
                        datoDb.Cbdatvalor2 = item.Cbdatvalor2;
                        datoDb.Cbdatfecregistro = DateTime.Now;
                        datoDb.Cbdatusuregistro = usuario;
                        UpdateCbDatosxcentralxfenerg(datoDb);
                    }
                }
            }
        }

        #endregion

        #region Proceso Automático (desaprobación y notificación)

        /// <summary>
        /// Ejecución de proceso automatico (nuevas centrales y notificaciones)
        /// </summary>
        public void EjecutarProcesoAutomaticoPR31(int tipo)
        {
            switch (tipo)
            {
                case 1:
                    try
                    {
                        NotificacionCulminacionPlazo();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                    }
                    break;
                case 2:
                    try
                    {
                        NotificacionRecordatorioCOES();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                    }
                    break;
                case 3:
                    try
                    {
                        NotificacionRecordatorioAgente();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                    }
                    break;
                case 4:
                    try
                    {
                        ActualizarCentralesPorFuenteEnergia();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                    }
                    break;
            }
        }

        /// <summary>
        /// Validación automática cuando los envios “observado” no han sido atendidos por el Agente.
        /// este proceso automatico se realiza a las 00:00
        /// </summary>
        public void NotificacionCulminacionPlazo()
        {
            DateTime fechaAct = DateTime.Now;

            List<int> lcodis = new List<int>() { ConstantesCombustibles.EstadoObservado };
            List<CbEnvioDTO> listaEstado = ListXEstado(string.Join(",", lcodis), ConstantesAppServicio.ParametroDefecto).Where(x => x.Cbenvtipoenvio == ConstantesCombustibles.GuardadoOficial).ToList();

            foreach (var regEnvio in listaEstado)
            {
                if (ConstantesCombustibles.EstadoObservado == regEnvio.Estenvcodi)
                {
                    bool enviarCorreoYCambiarEstado = false;
                    bool noEnviarCorreoYCambiarEstado = false;

                    //si venció la ampliación cambiar de estado
                    if (regEnvio.Cbenvfecampl != null)
                    {
                        if (regEnvio.Cbenvfecampl < fechaAct)
                            noEnviarCorreoYCambiarEstado = true;
                    }
                    else
                    {
                        //si no existe ampliacion
                        //vencio fecha maxima respuesta
                        if (regEnvio.Cbenvfecfinsubsanarobs < fechaAct)
                        {
                            enviarCorreoYCambiarEstado = true;
                        }
                    }

                    if (noEnviarCorreoYCambiarEstado)
                    {
                        regEnvio.Estenvcodi = ConstantesCombustibles.EstadoSubsanacionObs;
                        regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                        regEnvio.Cbenvfecmodificacion = fechaAct;

                        //log cambio de estado
                        CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                        logEnvio.Estenvcodi = ConstantesCombustibles.EstadoSubsanacionObs;
                        logEnvio.Logenvusucreacion = "SISTEMA";
                        logEnvio.Logenvfeccreacion = fechaAct;
                        logEnvio.Logenvobservacion = string.Empty;
                        regEnvio.LogEnvioActual = logEnvio;

                        //guardar informacion y archivos
                        ActualizarEstadoEnvioTransaccional(regEnvio);
                    }

                    if (enviarCorreoYCambiarEstado)
                    {
                        regEnvio.Estenvcodi = ConstantesCombustibles.EstadoSubsanacionObs;
                        regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                        regEnvio.Cbenvfecmodificacion = fechaAct;
                        regEnvio.Cbenvobs = "Culminó el plazo para levantamiento de observaciones al costo de combustible";

                        //log cambio de estado
                        CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                        logEnvio.Estenvcodi = ConstantesCombustibles.EstadoSubsanacionObs;
                        logEnvio.Logenvusucreacion = "SISTEMA";
                        logEnvio.Logenvfeccreacion = fechaAct;
                        logEnvio.Logenvobservacion = string.Empty;
                        regEnvio.LogEnvioActual = logEnvio;

                        //guardar informacion y archivos
                        ActualizarEstadoEnvioTransaccional(regEnvio);

                        //log notificacion
                        logEnvio = new CbLogenvioDTO();
                        logEnvio.Estenvcodi = ConstantesCombustibles.EstadoNotificado;
                        logEnvio.Logenvusucreacion = "SISTEMA";
                        logEnvio.Logenvfeccreacion = fechaAct.AddSeconds(1);
                        logEnvio.Logenvobservacion = regEnvio.Cbenvobs;
                        regEnvio.LogEnvioActual = logEnvio;

                        //guardar informacion y archivos
                        ActualizarEstadoEnvioTransaccional(regEnvio);

                        //enviar notificacion
                        regEnvio.Estenvnomb = "DESAPROBADO";
                        EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoCulminacionPlazo, regEnvio);
                    }

                }
            }
        }

        /// <summary>
        /// Notificaciones de recordatorio de vencimiento plazo al COES
        /// </summary>
        public void NotificacionRecordatorioCOES()
        {
            DateTime fechaAct = DateTime.Now;

            List<int> lcodis = new List<int>() { ConstantesCombustibles.EstadoSolicitud, ConstantesCombustibles.EstadoSubsanacionObs, ConstantesCombustibles.EstadoObservado };
            List<CbEnvioDTO> listaEstado = ListXEstado(string.Join(",", lcodis), ConstantesAppServicio.ParametroDefecto).Where(x => x.Cbenvtipoenvio == ConstantesCombustibles.GuardadoOficial).ToList();

            foreach (var regEnvio in listaEstado)
            {
                int dias = 3;
                if (regEnvio.Estcomcodi == ConstantesCombustibles.EstcomcodiSolido) dias = 2;
                dias += 1;

                //Recordatorio al COES
                if (ConstantesCombustibles.EstadoSolicitud == regEnvio.Estenvcodi)
                {
                    //terminado el tercer dia (23:59) debe enviarse la notificacion el cuarto día a las 08:00
                    if (regEnvio.Cbenvfecsolicitud.Date.AddDays(dias).AddMinutes(-1) < fechaAct)
                    {
                        regEnvio.Estenvnomb = "REVISIÓN PENDIENTE";
                        regEnvio.DiffDiaCalendario = (DateTime.Today - regEnvio.Cbenvfecsolicitud.Date).Days - 1;

                        //log
                        CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                        logEnvio.Cbenvcodi = regEnvio.Cbenvcodi;
                        logEnvio.Estenvcodi = ConstantesCombustibles.EstadoNotificado;
                        logEnvio.Logenvusucreacion = "SISTEMA";
                        logEnvio.Logenvfeccreacion = fechaAct;
                        logEnvio.Logenvobservacion = "Recordatorio vencimiento de plazo para atender la solicitud";
                        RegistrarLogEstadoEnvioTransaccional(logEnvio);

                        //correo
                        EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreorRecordatorioSolicitudCoes, regEnvio);
                    }
                }

                //Recordatorio al COES
                if (ConstantesCombustibles.EstadoSubsanacionObs == regEnvio.Estenvcodi)
                {
                    CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoObservado);
                    CbLogenvioDTO logEnvioUltimoSubObs = GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoSubsanacionObs);

                    //terminado el tercer dia (23:59) debe enviarse la notificacion el cuarto día a las 08:00
                    if (logEnvioUltimoSubObs.Logenvfeccreacion.Date.AddDays(dias).AddMinutes(-1) < fechaAct)
                    {
                        regEnvio.Estenvnomb = "REVISIÓN PENDIENTE";
                        regEnvio.DiffDiaCalendario = (DateTime.Today - logEnvioUltimoSubObs.Logenvfeccreacion.Date).Days - 1;

                        regEnvio.FechaRevisionCoes = logEnvioUltimoObs.Logenvfeccreacion;
                        regEnvio.FechaSubsanacionObs = logEnvioUltimoSubObs.Logenvfeccreacion;

                        //log
                        CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                        logEnvio.Cbenvcodi = regEnvio.Cbenvcodi;
                        logEnvio.Estenvcodi = ConstantesCombustibles.EstadoNotificado;
                        logEnvio.Logenvusucreacion = "SISTEMA";
                        logEnvio.Logenvfeccreacion = fechaAct;
                        logEnvio.Logenvobservacion = "Recordatorio vencimiento de plazo para atender la subsanación de las observaciones";
                        RegistrarLogEstadoEnvioTransaccional(logEnvio);

                        //correo
                        EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreorRecordatorioSubsanacionObsCoes, regEnvio);
                    }
                }
            }
        }

        /// <summary>
        /// Notificaciones de recordatorio de vencimiento plazo al agente
        /// </summary>
        public void NotificacionRecordatorioAgente()
        {
            DateTime fechaAct = DateTime.Now;

            List<int> lcodis = new List<int>() { ConstantesCombustibles.EstadoSolicitud, ConstantesCombustibles.EstadoSubsanacionObs, ConstantesCombustibles.EstadoObservado };
            List<CbEnvioDTO> listaEstado = ListXEstado(string.Join(",", lcodis), ConstantesAppServicio.ParametroDefecto).Where(x => x.Cbenvtipoenvio == ConstantesCombustibles.GuardadoOficial).ToList();

            foreach (var regEnvio in listaEstado)
            {
                if (ConstantesCombustibles.EstadoObservado == regEnvio.Estenvcodi)
                {
                    if (regEnvio.Cbenvfecfinsubsanarobs.Value.Date.AddDays(-1) == fechaAct.Date)
                    {
                        regEnvio.Estenvnomb = "OBSERVADO";
                        regEnvio.DiffHoras = (int)((regEnvio.Cbenvfecfinsubsanarobs.Value - DateTime.Now).TotalHours);

                        CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoObservado);
                        regEnvio.FechaRevisionCoes = logEnvioUltimoObs.Logenvfeccreacion;

                        //log
                        CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                        logEnvio.Cbenvcodi = regEnvio.Cbenvcodi;
                        logEnvio.Estenvcodi = ConstantesCombustibles.EstadoNotificado;
                        logEnvio.Logenvusucreacion = "SISTEMA";
                        logEnvio.Logenvfeccreacion = fechaAct;
                        logEnvio.Logenvobservacion = "Recordatorio de vencimiento de plazo para la subsanación de las observaciones";
                        RegistrarLogEstadoEnvioTransaccional(logEnvio);

                        //correo
                        EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreorRecordatorioSubsanacionObsAgente, regEnvio);
                    }
                }
            }
        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo cuando el administrador cancela el envío de combustibles.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailCulminacionPlazo(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";
            string numAnexo = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    numAnexo = "1";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    numAnexo = "2";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    numAnexo = "3";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Culminación de plazo para levantamiento de observaciones al costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimado(a):<br />
                    {3}</p>

                    <p>Por medio del presente, se le comunica la culminación del plazo otorgado por el Anexo {11} del Procedimiento Técnico del COES N° 31  &quot;Cálculo de los Costos Variables de las Unidades de Generación&quot; para la subsanación de las observaciones formuladas por COES a la actualización del costo del combustible {10} presentado mediante la solicitud N° {2}.</p>

                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{7}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Culminación de Plazo:</td>
			                    <td class='registro-control'>{8}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Estado:</td>
			                    <td class='registro-control' style='background-color: #FF7979'>{9}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    <p>En ese sentido, al no haber realizado el envió con la subsanación de las observaciones, en los proximos días se le estará informando mediante el extranet  la actualización del costo del combustible {10} siguiendo la metodología establecida en el Anexo {11} del  Procedimiento  Técnico antes referido.</p>
                    
                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Cbenvususolicitud
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb //6
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Cbenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull2)
            , regEnvio.Estenvnomb.ToUpper()
            , combDesc //10
            , numAnexo);
        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo cuando el administrador cancela el envío de combustibles.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailRecordatorioSolicitudACoes(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }


            asunto = string.Format("Recordatorio vencimiento de plazo para atender la solicitud a la actualización del costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Señores COES:<br/></p>

                    <p>Recordatorio de que está pendiente la revisión a la información presentada mediante solicitud N° {2}, recibida hace {8} días calendario.</p>

                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{3}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Estado:</td>
			                    <td class='registro-control' style='background-color: #FFD966'>{7}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb //5
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Estenvnomb.ToUpper() //7
            , regEnvio.DiffDiaCalendario);
        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo cuando el administrador cancela el envío de combustibles.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailRecordatorioSubsanarObsACoes(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Recordatorio vencimiento de plazo para atender la subsanación de las observaciones a la actualización del costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Señores COES:<br/></p>

                    <p>Recordatorio de que está pendiente la revisión de la subsanación de las observaciones formuladas a la información presentada mediante solicitud N° {2}, recibida hace {8} días calendario.</p>

                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{3}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Revisión:</td>
			                    <td class='registro-control'>{9}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Subsanación de Observaciones:</td>
			                    <td class='registro-control'>{10}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Estado:</td>
			                    <td class='registro-control' style='background-color: #FFD966'>{7}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb //5
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Estenvnomb.ToUpper() //7
            , regEnvio.DiffDiaCalendario
            , regEnvio.FechaRevisionCoes.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.FechaSubsanacionObs.ToString(ConstantesAppServicio.FormatoFechaFull)
            );
        }

        /// <summary>
        /// Genera el cuerpo del mensaje de correo cuando el administrador cancela el envío de combustibles.
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="asunto"></param>
        /// <param name="contenido"></param>
        public static void BodyMailRecordatorioSubsanarObsAAgente(CbEnvioDTO regEnvio, out string asunto, out string contenido)
        {
            string combDesc = "";

            switch (regEnvio.Estcomcodi)
            {
                case ConstantesCombustibles.EstcomcodiLiquido:
                    combDesc = "líquido";
                    break;
                case ConstantesCombustibles.EstcomcodiSolido:
                    combDesc = "sólido";
                    break;
                case ConstantesCombustibles.EstcomcodiGas:
                    combDesc = "gaseoso";
                    break;
            }

            string centralesParticipantes = "";
            if (regEnvio.Equicodi > 0)
            {
                centralesParticipantes = regEnvio.Equinomb;
            }
            else
            {
                List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
                lstCentralesParticipantes = FactorySic.GetCbEnvioCentralRepository().ObtenerCentrales(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();

                List<string> lstStrCentrales = new List<string>();
                foreach (var centralX in lstCentralesParticipantes)
                {
                    lstStrCentrales.Add(centralX.Equinomb.Trim());
                }
                centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";
            }

            asunto = string.Format("Recordatorio de vencimiento de plazo para la subsanación de las observaciones a la solicitud de actualización del costo de combustible {2}_Solicitud N° {0} - {1}", regEnvio.Cbenvcodi, centralesParticipantes, combDesc);

            contenido = string.Format(@"

            <html>
               <head><STYLE TYPE='text/css'>
                {0}
               </style></head>
               <body>
                    <p>Estimado(a):<br/>
                    {11}</p>

                    <p>Por medio del presente, se le comunica que en {8} horas culmina el plazo para la subsanación de las observaciones formuladas a la información presentada, mediante solicitud N° {2}.</p>

                    <table style='width:auto;border-collapse: collapse;'>
	                    <tbody>
		                    <tr>
			                    <td class='registro-label'>Empresa:</td>
			                    <td class='registro-control' >{3}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Central:</td>
			                    <td class='registro-control'>{4}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Combustible:</td>
			                    <td class='registro-control'>{5}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Código de Envío:</td>
			                    <td class='registro-control'>{2}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Solicitud:</td>
			                    <td class='registro-control'>{6}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha de Revisión:</td>
			                    <td class='registro-control'>{9}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Fecha máxima de respuesta:</td>
			                    <td class='registro-control'>{10}</td>
		                    </tr>
		                    <tr>
			                    <td class='registro-label'>Estado:</td>
			                    <td class='registro-control' style='background-color: #FFD966'>{7}</td>
		                    </tr>
	                    </tbody>
                    </table>

                    {1}
               </body>
           </html>"
            , @" body {font-size: .80em;font-family: 'Helvetica Neue', 'Lucida Grande', 'Segoe UI', Arial, Helvetica, Verdana, sans-serif;} 
                .registro-label {
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        padding: 4px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        background-color: #417AA7;
                        color: white;
                        padding-right: 50px;
                } 
                .registro-control{
                        padding: 4px;
                        line-height: 14px;
                        border-width: 1px;
                        border-style: solid;
                        border-color: rgb(221, 221, 221);
                        padding-right: 100px;
                }"
            , CorreoAppServicio.GetFooterCorreoRemitente(ConstantesCombustibles.RemitenteSgi, ConstantesCombustibles.AnexoSgi)
            , regEnvio.Cbenvcodi //2
            , regEnvio.Emprnomb
            , centralesParticipantes
            , regEnvio.Fenergnomb //5
            , regEnvio.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Estenvnomb.ToUpper() //7
            , regEnvio.DiffHoras
            , regEnvio.FechaRevisionCoes.ToString(ConstantesAppServicio.FormatoFechaFull)
            , regEnvio.Cbenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull2)
            , regEnvio.Cbenvususolicitud);
        }

        #endregion

        #region Combustible_Gaseoso

        #region Intranet

        #region Configuracion_Centrales

        /// <summary>
        /// Devuelve el listado de centrales termicas
        /// </summary>
        /// <returns></returns>
        public List<CbCentralxfenergDTO> ObtenerListadoCentralesTermicas(bool soloVisibleApp)
        {
            List<CbCentralxfenergDTO> lstCentralesTermicas = GetByCriteriaCbCentralxfenergs(ConstantesCombustibles.EstcomcodiGas.ToString())
                .OrderBy(x => x.Emprnomb)
                .ThenBy(x => x.Equinomb)
                .ThenBy(x => x.Fenergnomb).ToList();

            if (soloVisibleApp) lstCentralesTermicas = lstCentralesTermicas.Where(x => x.Cbcxfevisibleapp == 1).ToList();//solo los que son gas


            List<CbCentralxfenergDTO> lstSalida = FormatearCentralesTermicas(lstCentralesTermicas);
            return lstSalida;
        }

        /// <summary>
        /// Devuelve listado de centrales con informacion para la tabla web
        /// </summary>
        /// <param name="lstCentralesTermicas"></param>
        /// <returns></returns>
        private List<CbCentralxfenergDTO> FormatearCentralesTermicas(List<CbCentralxfenergDTO> lstCentralesTermicas)
        {
            foreach (var central in lstCentralesTermicas)
            {
                var estado = central.Cbcxfeactivo == (int)ConstantesCombustibles.EstadoParametro.Inactivo ? "Inactivo" : "Activo";
                var color = central.Cbcxfeactivo == (int)ConstantesCombustibles.EstadoParametro.Inactivo ? "#FFDDDD !important" : "";

                central.EstadoDesc = estado;
                central.Color = color;
            }
            return lstCentralesTermicas;
        }

        /// <summary>
        /// Devuelve los datos principales de cierta central termica
        /// </summary>
        /// <param name="cbcxfecodi"></param>
        /// <returns></returns>
        public CbCentralxfenergDTO ObtenerDatosCentralTermica(int cbcxfecodi)
        {
            List<CbCentralxfenergDTO> lstTotal = ObtenerListadoCentralesTermicas(false);
            List<CbDatosxcentralxfenergDTO> lstValores = GetByCriteriaCbDatosxcentralxfenergs(cbcxfecodi, ConstantesCombustibles.CCombcodisGaseosos);
            CbCentralxfenergDTO central = lstTotal.Find(x => x.Cbcxfecodi == cbcxfecodi);
            if (central != null)
            {
                CbDatosxcentralxfenergDTO datosPUSuministro = lstValores.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiPrecioUSuministro);
                CbDatosxcentralxfenergDTO datosPUTransporte = lstValores.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiPrecioUTransporte);
                CbDatosxcentralxfenergDTO datosPUDistribucion = lstValores.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiPrecioUDistribucion);
                CbDatosxcentralxfenergDTO datosCostoGN = lstValores.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiCostoGasNatural);

                central.MinPrecioUnitSuministro = datosPUSuministro != null ? datosPUSuministro.Cbdatvalor1 : null;
                central.MaxPrecioUnitSuministro = datosPUSuministro != null ? datosPUSuministro.Cbdatvalor2 : null;
                central.MinPrecioUnitTransporte = datosPUTransporte != null ? datosPUTransporte.Cbdatvalor1 : null;
                central.MaxPrecioUnitTransporte = datosPUTransporte != null ? datosPUTransporte.Cbdatvalor2 : null;
                central.MinPrecioUnitDistribucion = datosPUDistribucion != null ? datosPUDistribucion.Cbdatvalor1 : null;
                central.MaxPrecioUnitDistribucion = datosPUDistribucion != null ? datosPUDistribucion.Cbdatvalor2 : null;
                central.MinCostoGasNatural = datosCostoGN != null ? datosCostoGN.Cbdatvalor1 : null;
                central.MaxCostoGasNatural = datosCostoGN != null ? datosCostoGN.Cbdatvalor2 : null;
            }
            else
            {
                central = new CbCentralxfenergDTO();
            }
            return central;
        }

        /// <summary>
        /// Guarda la informacion de la configuracion de una central
        /// </summary>
        /// <param name="central"></param>
        /// <param name="usuario"></param>        
        public void GuardarDatosCentralTermica(CbCentralxfenergDTO central, string usuario)
        {
            //valido si el orden ingresado se usa en otra central
            List<CbCentralxfenergDTO> lstCentrales = ListCbCentralxfenergs();
            CbCentralxfenergDTO centralMismoOrden = lstCentrales.Find(x => x.Cbcxfeorden == central.Cbcxfeorden);
            if (centralMismoOrden != null)
            {
                int idCentral1 = centralMismoOrden.Cbcxfecodi;
                int idCentral2 = central.Cbcxfecodi;

                if (idCentral1 != idCentral2)
                {
                    throw new Exception("El orden ingresado ya esta siendo usado en otra central");
                }
            }

            //Actualizar la central
            CbCentralxfenergDTO c = GetByIdCbCentralxfenerg(central.Cbcxfecodi);
            c.Cbcxfeexistente = central.Cbcxfeexistente;
            c.Cbcxfenuevo = central.Cbcxfenuevo;
            c.Cbcxfevisibleapp = central.Cbcxfevisibleapp;
            c.Cbcxfeorden = central.Cbcxfeorden;

            UpdateCbCentralxfenerg(c);

            //Agregar valores 
            List<CbDatosxcentralxfenergDTO> lstDatosValores = GetByCriteriaCbDatosxcentralxfenergs(central.Cbcxfecodi, ConstantesCombustibles.CCombcodisGaseosos);
            IngresarValorCentral(ConstantesCombustibles.CCombcodiPrecioUSuministro, central.Cbcxfecodi, central.MinPrecioUnitSuministro, central.MaxPrecioUnitSuministro, lstDatosValores, usuario);
            IngresarValorCentral(ConstantesCombustibles.CCombcodiPrecioUTransporte, central.Cbcxfecodi, central.MinPrecioUnitTransporte, central.MaxPrecioUnitTransporte, lstDatosValores, usuario);
            IngresarValorCentral(ConstantesCombustibles.CCombcodiPrecioUDistribucion, central.Cbcxfecodi, central.MinPrecioUnitDistribucion, central.MaxPrecioUnitDistribucion, lstDatosValores, usuario);
            IngresarValorCentral(ConstantesCombustibles.CCombcodiCostoGasNatural, central.Cbcxfecodi, central.MinCostoGasNatural, central.MaxCostoGasNatural, lstDatosValores, usuario);
        }

        /// <summary>
        /// Guarda los valores minimos y maximos para los precios unitarios y costos de gas natural
        /// </summary>
        /// <param name="ccombcodi"></param>
        /// <param name="cbcxfecodi"></param>
        /// <param name="valorMin"></param>
        /// <param name="valorMax"></param>
        /// <param name="lstValores"></param>
        /// <param name="usuario"></param>
        public void IngresarValorCentral(int ccombcodi, int cbcxfecodi, decimal? valorMin, decimal? valorMax, List<CbDatosxcentralxfenergDTO> lstValores, string usuario)
        {
            CbDatosxcentralxfenergDTO regValor = lstValores.Find(x => x.Ccombcodi == ccombcodi);
            CbDatosxcentralxfenergDTO registroIngresar = new CbDatosxcentralxfenergDTO();

            if (regValor == null)
            {
                registroIngresar.Cbcxfecodi = cbcxfecodi;
                registroIngresar.Ccombcodi = ccombcodi;
                registroIngresar.Cbdatvalor1 = valorMin;
                registroIngresar.Cbdatvalor2 = valorMax;
                registroIngresar.Cbdatfecregistro = DateTime.Now;
                registroIngresar.Cbdatusuregistro = usuario;

                SaveCbDatosxcentralxfenerg(registroIngresar);
            }
            else
            {
                if (regValor.Cbdatvalor1 != valorMin || regValor.Cbdatvalor2 != valorMax)
                {
                    regValor.Cbdatvalor1 = valorMin;
                    regValor.Cbdatvalor2 = valorMax;
                    regValor.Cbdatfecregistro = DateTime.Now;
                    regValor.Cbdatusuregistro = usuario;
                    UpdateCbDatosxcentralxfenerg(regValor);
                }
            }
        }


        #endregion

        #region Configuración Plantilla - Formato 3

        /// <summary>
        /// REgistrar / editar plantilla 
        /// </summary>
        /// <param name="objWeb"></param>
        /// <param name="username"></param>
        public void GuardarPlantillaFormato3(CbFichaDTO objWeb, string username)
        {
            //Validar que cuenta como mínimo con una sección y un item por sección
            if (objWeb.ListaSeccion.Any())
            {
                foreach (var reg in objWeb.ListaSeccion)
                {
                    if (!reg.ListaItemXSeccion.Any())
                    {
                        throw new Exception("La plantilla debe tener como mínimo un item para la sección: " + reg.Cbftitnumeral);
                    }
                }
            }
            else
                throw new Exception("La plantilla debe tener como mínimo una sección ");

            //validar duplicidad de numeral de las secciones
            List<string> listNumeralSecciones = objWeb.ListaSeccion.Select(x => x.Cbftitnumeral).ToList();
            var conjunto = new HashSet<string>();
            var duplicados = listNumeralSecciones.Where(x => !conjunto.Add(x)).ToList();
            if (duplicados.Any())
                throw new Exception("No se puede crear secciones duplicadas, corregir sección: " + String.Join(", ", duplicados));

            //validar duplicidad de numeral de los ítems
            foreach (var reg in objWeb.ListaSeccion)
            {
                List<string> listNumeralItems = reg.ListaItemXSeccion.Select(x => x.Cbftitnumeral).ToList();
                var conjuntoItem = new HashSet<string>();
                var duplicadosItems = listNumeralItems.Where(x => !conjuntoItem.Add(x)).ToList();
                if (duplicadosItems.Any())
                    throw new Exception("Los numerales " + String.Join(", ", duplicadosItems) + " de la sección " + reg.Cbftitnumeral + " se repiten");
            }

            //cabecera
            int codigo = objWeb.Cbftcodi;
            if (objWeb.Cbftcodi > 0)
            {
                CbFichaDTO objBD = GetByIdCbFicha(objWeb.Cbftcodi);
                objBD.Cbftusumodificacion = username;
                objBD.Cbftfecmodificacion = DateTime.Now;
                objBD.Cbftfechavigencia = objWeb.Cbftfechavigencia;
                objBD.Cbftnombre = objWeb.Cbftnombre;

                UpdateCbFicha(objBD);
            }
            else
            {
                objWeb.Cbftusucreacion = username;
                objWeb.Cbftfeccreacion = DateTime.Now;
                objWeb.Cbftactivo = 1;

                codigo = SaveCbFicha(objWeb);
            }
            var listaBD = GetByCriteriaCbFichaItems(codigo);

            //detalle
            List<CbFichaItemDTO> listaItem = new List<CbFichaItemDTO>();
            listaItem.AddRange(objWeb.ListaSeccion);
            foreach (var reg in objWeb.ListaSeccion)
            {
                var listaItemXSec = new List<CbFichaItemDTO>();
                if (reg.ListaItemXSeccion != null)
                    listaItemXSec.AddRange(reg.ListaItemXSeccion);
                foreach (var obj in listaItemXSec)
                {
                    if (obj.Ccombcodi < 0) obj.Ccombcodi = null;
                }

                listaItem.AddRange(listaItemXSec);
            }


            //detalle nuevos
            List<CbFichaItemDTO> listaNuevo = listaItem.Where(x => x.Cbftitcodi == 0).ToList();
            foreach (var regItem in listaNuevo)
            {
                regItem.Cbftcodi = codigo;
                regItem.Cbftitactivo = 1;
                regItem.Cbftitfeccreacion = DateTime.Now;
                regItem.Cbftitusucreacion = username;
                SaveCbFichaItem(regItem);
            }

            //detalle modificados
            List<CbFichaItemDTO> listaModificado = listaItem.Where(x => x.Cbftitcodi > 0).ToList();
            foreach (var regItem in listaModificado)
            {
                var objBD = listaBD.Find(x => x.Cbftitcodi == regItem.Cbftitcodi);
                if (objBD != null)
                {
                    regItem.Cbftitfeccreacion = objBD.Cbftitfeccreacion;
                    regItem.Cbftitusucreacion = objBD.Cbftitusucreacion;
                }

                regItem.Cbftcodi = codigo;
                regItem.Cbftitactivo = 1;
                regItem.Cbftitfecmodificacion = DateTime.Now;
                regItem.Cbftitusumodificacion = username;
                UpdateCbFichaItem(regItem);
            }

            //detalle eliminados
            var listaCodigoBD = listaBD.Where(x => x.Cbftitcodi > 0).Select(x => x.Cbftitcodi).ToList();
            var listaCodigoWeb = listaItem.Where(x => x.Cbftitcodi > 0).Select(x => x.Cbftitcodi).ToList();

            var listaCodigoEliminado = listaCodigoBD.Where(x => !listaCodigoWeb.Contains(x)).ToList();

            List<CbFichaItemDTO> listaEliminado = listaBD.Where(x => listaCodigoEliminado.Contains(x.Cbftitcodi)).ToList();
            foreach (var regItem in listaEliminado)
            {
                regItem.Cbftitactivo = 0;
                regItem.Cbftitfecmodificacion = DateTime.Now;
                regItem.Cbftitusumodificacion = username;
                UpdateCbFichaItem(regItem);
            }
        }

        public void CopiarPlantillaFormato3(int cbftcodi, string username)
        {
            CbFichaDTO objACopiar = GetByIdCbFicha(cbftcodi);
            objACopiar.Cbftcodi = 0;
            objACopiar.Cbftnombre = "Copia " + objACopiar.Cbftnombre;
            objACopiar.Cbftusucreacion = username;
            objACopiar.Cbftfeccreacion = DateTime.Now;
            objACopiar.Cbftusumodificacion = null;
            objACopiar.Cbftfecmodificacion = null;
            objACopiar.Cbftactivo = 1;
            objACopiar.Cbftfechavigencia = DateTime.Today.AddMonths(2);

            int codigo = SaveCbFicha(objACopiar);

            //detalle
            List<CbFichaItemDTO> listaItem = new List<CbFichaItemDTO>();
            listaItem.AddRange(objACopiar.ListaSeccion);
            foreach (var regSeccion in objACopiar.ListaSeccion)
            {
                listaItem.AddRange(regSeccion.ListaItemXSeccion);
            }

            //Guardar
            foreach (var regItem in listaItem)
            {
                regItem.Cbftcodi = codigo;
                regItem.Cbftitactivo = 1;
                regItem.Cbftitfeccreacion = DateTime.Now;
                regItem.Cbftitusucreacion = username;
                regItem.Cbftitfecmodificacion = null;
                regItem.Cbftitusumodificacion = null;

                SaveCbFichaItem(regItem);
            }

        }

        public void EliminarPlantillaFormato3(int cbftcodi, string username)
        {
            CbFichaDTO objBD = GetByIdCbFicha(cbftcodi);
            objBD.Cbftusumodificacion = username;
            objBD.Cbftfecmodificacion = DateTime.Now;
            objBD.Cbftactivo = 0;
            UpdateCbFicha(objBD);
        }

        public void GuardarPropiedad(CbConceptocombDTO objWeb, string username)
        {
            //cabecera
            if (objWeb.Ccombcodi > 0)
            {
                CbConceptocombDTO objBD = GetByIdCbConceptocomb(objWeb.Ccombcodi);
                objBD.Ccombnombre = objWeb.Ccombnombre;
                objBD.Ccombnombreficha = objWeb.Ccombnombreficha;
                objBD.Ccombunidad = objWeb.Ccombunidad;

                UpdateCbConceptocomb(objBD);
            }
            else
            {
                objWeb.Ccombestado = 1;
                objWeb.Estcomcodi = ConstantesCombustibles.EstcomcodiGas;

                SaveCbConceptocomb(objWeb);
            }
        }

        #endregion

        #region Configuracion Plantilla Correos

        /// <summary>
        /// Lista las plantillas por tipo de plantilla (notificacion o recordatorio) y tipo de central (nueva o existente)
        /// </summary>
        /// <param name="tipoPlantilla"></param>
        /// <param name="tipoCentral"></param>
        /// <returns></returns>
        public List<SiPlantillacorreoDTO> ListarPlantillasCorreo(int tipoPlantilla, string tipoCentral)
        {
            List<SiPlantillacorreoDTO> lstTemp = new List<SiPlantillacorreoDTO>();

            //obtenemos los codigos de las plantillas a mostrar
            string codigoPlantillas = "";
            switch (tipoPlantilla)
            {
                case ConstantesCombustibles.TipoPlantillaNotificacion:
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        codigoPlantillas = ConstantesCombustibles.CodigosPlantillaNotificacionExistentes;
                    else
                        codigoPlantillas = ConstantesCombustibles.CodigosPlantillaNotificacionNuevas;
                    break;

                case ConstantesCombustibles.TipoPlantillaRecordatorio:
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        codigoPlantillas = ConstantesCombustibles.CodigosPlantillaRecordatorioExistentes;
                    else
                        codigoPlantillas = ConstantesCombustibles.CodigosPlantillaRecordatorioNuevas;
                    break;
            }

            lstTemp = FactorySic.GetSiPlantillacorreoRepository().ListarPlantillas(codigoPlantillas).OrderBy(x => x.Plantnomb).ToList();
            List<SiPlantillacorreoDTO> lstSalida = DarFormatoListaPlantillasCorreo(lstTemp);

            return lstSalida;
        }

        /// <summary>
        /// Formatea el campo de fechas
        /// </summary>
        /// <param name="lstTemp"></param>
        /// <returns></returns>
        private List<SiPlantillacorreoDTO> DarFormatoListaPlantillasCorreo(List<SiPlantillacorreoDTO> lstTemp)
        {
            foreach (var plantilla in lstTemp)
            {
                plantilla.Plantusucreacion = plantilla.Plantusucreacion != null ? plantilla.Plantusucreacion : "";
                plantilla.Plantusumodificacion = plantilla.Plantusumodificacion != null ? plantilla.Plantusumodificacion : "";
                plantilla.PlantfeccreacionDesc = plantilla.Plantfeccreacion != null ? plantilla.Plantfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
                plantilla.PlantfecmodificacionDesc = plantilla.Plantfecmodificacion != null ? plantilla.Plantfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
            }

            return lstTemp;
        }

        /// <summary>
        /// Agrega campos hora y estado de recordatorio a la plantilla
        /// </summary>
        /// <param name="plantilla"></param>
        /// <returns></returns>
        public SiPlantillacorreoDTO AgregarHoraEstadoRecordatorio(SiPlantillacorreoDTO plantilla)
        {
            SiPlantillacorreoDTO plantillaSalida = new SiPlantillacorreoDTO();

            int procesoCodi = -1;
            procesoCodi = ObtenerProcesoSegunPlantillaCorreo(plantilla.Plantcodi);

            SiProcesoDTO entidad = FactorySic.GetSiProcesoRepository().GetById(procesoCodi);

            if (entidad != null)
            {
                plantilla.Hora = entidad.Prschorainicio.ToString().PadLeft(2, '0') + ":" + entidad.Prscminutoinicio.ToString().PadLeft(2, '0');
                plantilla.EstadoRecordatorio = entidad.Prcsestado;
            }
            plantillaSalida = plantilla;

            return plantillaSalida;
        }

        /// <summary>
        /// Agrega los parametros de las variables (dia y hora) del contenido para los recordatorios
        /// </summary>
        /// <param name="plantilla"></param>
        /// <returns></returns>
        public SiPlantillacorreoDTO AgregarParametrosDiaHora(SiPlantillacorreoDTO plantilla)
        {
            SiPlantillacorreoDTO plantillaSalida = new SiPlantillacorreoDTO();

            string valor = ObtenerDiasHorasParametro(plantilla.Plantcodi);

            plantilla.ParametroDiaHora = valor;
            plantillaSalida = plantilla;

            return plantillaSalida;
        }

        /// <summary>
        /// Ingresa el valor de a los que se enviará el correo segun plantilla
        /// </summary>
        /// <param name="plantilla"></param>
        /// <returns></returns>
        public SiPlantillacorreoDTO GetCampoPara(SiPlantillacorreoDTO plantilla)
        {
            string respondeAlAgenteQueInteractuo = "N";

            if (plantilla.Plantcodi == ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionRegistroSolicitud_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionRegistroSolicitud_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionCancelarEnvio_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionCancelarEnvio_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionObservacionEnvío_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionObservacionEnvío_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionSubsanacionEnvío_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionSubsanacionEnvío_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionAprobacionEnvío_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionAprobacionEnvío_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionDesaprobacionEnvío_CE || plantilla.Plantcodi == ConstantesCombustibles.NotificacionDesaprobacionEnvío_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.NotificacionAsignacionEnvío_CN ||
               plantilla.Plantcodi == ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE || plantilla.Plantcodi == ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN)
            {
                respondeAlAgenteQueInteractuo = "S";
            }
            plantilla.RespondeAAgente = respondeAlAgenteQueInteractuo;

            return plantilla;
        }

        /// <summary>
        /// Devuelve el listado de variables que se muestran en asunto y contenido
        /// </summary>
        /// <param name="idPlantilla"></param>
        /// <param name="campo"></param>
        /// <returns></returns>
        public List<VariableCorreo> ObtenerListadoVariables(int idPlantilla, int campo)
        {
            List<VariableCorreo> lstSalida = new List<VariableCorreo>();

            VariableCorreo obj = new VariableCorreo();

            //Al crear o eliminar  variables se debe editar tambien en configuracionplantillaCorreo.js y
            //Al agregar variables a un correo se debe agregar tambien en la funcion ReemplazarVariablesDeCorreo (dentro del switch)
            if (campo == ConstantesCombustibles.VariablePara)
            {
                obj = new VariableCorreo();
                obj.Valor = ConstantesCombustibles.ValTodosAgentes;
                obj.Nombre = ConstantesCombustibles.DscTodosAgentes;
                lstSalida.Add(obj);

                //Para algunos casos no muestra usuario_ultimoEvento
                if (idPlantilla != ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE && idPlantilla != ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CN)
                {
                    obj = new VariableCorreo();
                    obj.Valor = ConstantesCombustibles.ValAgenteUltimo;
                    obj.Nombre = ConstantesCombustibles.DscAgenteUltimo;
                    lstSalida.Add(obj);
                }

            }
            else
            {
                if (campo == ConstantesCombustibles.VariableCC)
                {
                    obj = new VariableCorreo();
                    obj.Valor = ConstantesCombustibles.ValTodosAgentes;
                    obj.Nombre = ConstantesCombustibles.DscTodosAgentes;
                    lstSalida.Add(obj);

                    //Para algunos casos no muestra OTROS_AGENTES, no muestra para Incumplimiento de entrega de info (EyN)
                    if (idPlantilla != ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE && idPlantilla != ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CN)
                    {
                        obj = new VariableCorreo();
                        obj.Valor = ConstantesCombustibles.ValOtrosAgentes;
                        obj.Nombre = ConstantesCombustibles.DscOtrosAgentes;
                        lstSalida.Add(obj);
                    }

                    //Para algunos casos no muestra usuario_ultimoEvento, no muestra para Incumplimiento de entrega de info (EyN)
                    if (idPlantilla != ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE && idPlantilla != ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CN)
                    {
                        obj = new VariableCorreo();
                        obj.Valor = ConstantesCombustibles.ValAgenteUltimo;
                        obj.Nombre = ConstantesCombustibles.DscAgenteUltimo;
                        lstSalida.Add(obj);
                    }
                }
                else
                {
                    switch (idPlantilla)
                    {

                        #region NotificacionIncumplimientoEntregaInformacionFormato3 - plantcodi : 123/124

                        case ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActual;
                            obj.Nombre = ConstantesCombustibles.DscMesActual;
                            lstSalida.Add(obj);


                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesVigencia;
                            obj.Nombre = ConstantesCombustibles.DscMesVigencia;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValCostoCombAsignado;
                            obj.Nombre = ConstantesCombustibles.DscCostoCombAsignado;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region NotificacionRegistroSolicitud - plantcodi : 125/126

                        case ConstantesCombustibles.NotificacionRegistroSolicitud_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);
                            break;

                        case ConstantesCombustibles.NotificacionRegistroSolicitud_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region NotificacionCancelarEnvio - plantcodi : 127/128

                        case ConstantesCombustibles.NotificacionCancelarEnvio_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaCancelacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaCancelacion;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.NotificacionCancelarEnvio_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaCancelacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaCancelacion;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region NotificacionObservacionEnvío - plantcodi : 129/130

                        case ConstantesCombustibles.NotificacionObservacionEnvío_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaMaxRpta;
                            obj.Nombre = ConstantesCombustibles.DscFechaMaxRpta;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.NotificacionObservacionEnvío_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaMaxRpta;
                            obj.Nombre = ConstantesCombustibles.DscFechaMaxRpta;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region NotificacionSubsanacionEnvío - plantcodi : 131/132

                        case ConstantesCombustibles.NotificacionSubsanacionEnvío_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSubsanacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaSubsanacion;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.NotificacionSubsanacionEnvío_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSubsanacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaSubsanacion;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region NotificacionCulminacionPlazoSubsanacion - plantcodi : 133/134

                        case ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaPlazoMaxSubsanacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaPlazoMaxSubsanacion;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaPlazoMaxSubsanacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaPlazoMaxSubsanacion;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region NotificacionAprobacionEnvío - plantcodi : 135/136

                        case ConstantesCombustibles.NotificacionAprobacionEnvío_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesVigencia;
                            obj.Nombre = ConstantesCombustibles.DscMesVigencia;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaAprobacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaAprobacion;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.NotificacionAprobacionEnvío_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesVigencia;
                            obj.Nombre = ConstantesCombustibles.DscMesVigencia;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaAprobacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaAprobacion;
                            lstSalida.Add(obj);
                            break;

                        #endregion

                        #region NotificacionAprobacionParcialEnvío - plantcodi : 137/138

                        case ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesVigencia;
                            obj.Nombre = ConstantesCombustibles.DscMesVigencia;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaAprobacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaAprobacion;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaDesaprobacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaDesaprobacion;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValRespuestaCoes;
                            obj.Nombre = ConstantesCombustibles.DscRespuestaCoes;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentralesAprobadas;
                            obj.Nombre = ConstantesCombustibles.DscListaCentralesAprobadas;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentralesDesaprobadas;
                            obj.Nombre = ConstantesCombustibles.DscListaCentralesDesaprobadas;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesVigencia;
                            obj.Nombre = ConstantesCombustibles.DscMesVigencia;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaAprobacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaAprobacion;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaDesaprobacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaDesaprobacion;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValRespuestaCoes;
                            obj.Nombre = ConstantesCombustibles.DscRespuestaCoes;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentralesAprobadas;
                            obj.Nombre = ConstantesCombustibles.DscListaCentralesAprobadas;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentralesDesaprobadas;
                            obj.Nombre = ConstantesCombustibles.DscListaCentralesDesaprobadas;
                            lstSalida.Add(obj);
                            break;

                        #endregion

                        #region NotificacionDesaprobacionEnvío - plantcodi : 139/140

                        case ConstantesCombustibles.NotificacionDesaprobacionEnvío_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaDesaprobacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaDesaprobacion;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValRespuestaCoes;
                            obj.Nombre = ConstantesCombustibles.DscRespuestaCoes;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.NotificacionDesaprobacionEnvío_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaDesaprobacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaDesaprobacion;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValRespuestaCoes;
                            obj.Nombre = ConstantesCombustibles.DscRespuestaCoes;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region NotificacionAsignacionEnvío_CN - plantcodi : 141

                        case ConstantesCombustibles.NotificacionAsignacionEnvío_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesVigencia;
                            obj.Nombre = ConstantesCombustibles.DscMesVigencia;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaAsignacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaAsignacion;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region NotificacionAmpliacionPlazoEnvio - plantcodi : 142/143

                        case ConstantesCombustibles.NotificacionAmpliacionPlazoEnvio_CE:
                        case ConstantesCombustibles.NotificacionAmpliacionPlazoEnvio_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaMaxRpta;
                            obj.Nombre = ConstantesCombustibles.DscFechaMaxRpta;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaInicioPlazo;
                            obj.Nombre = ConstantesCombustibles.DscFechaInicioPlazo;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaFinPlazo;
                            obj.Nombre = ConstantesCombustibles.DscFechaFinPlazo;
                            lstSalida.Add(obj);
                            break;



                        #endregion



                        #region RecordatorioRevisarEvaluarInformaciónRecibida - plantcodi : 146/147

                        case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            //obj = new VariableCorreo();
                            //obj.Valor = ConstantesCombustibles.ValDiferenciaDias;
                            //obj.Nombre = ConstantesCombustibles.DscDiferenciaDias;
                            //lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDiasRecepcion;
                            obj.Nombre = ConstantesCombustibles.DscDiasRecepcion;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            //obj = new VariableCorreo();
                            //obj.Valor = ConstantesCombustibles.ValDiferenciaDias;
                            //obj.Nombre = ConstantesCombustibles.DscDiferenciaDias;
                            //lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDiasRecepcion;
                            obj.Nombre = ConstantesCombustibles.DscDiasRecepcion;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region RecordatorioInformarVencimientoPlazoSubsanacion - plantcodi : 148/149

                        case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaMaxRpta;
                            obj.Nombre = ConstantesCombustibles.DscFechaMaxRpta;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValHorasCulminacion;
                            obj.Nombre = ConstantesCombustibles.DscHorasCulminacion;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDestinatariosPara;
                            obj.Nombre = ConstantesCombustibles.DscDestinatariosPara;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaMaxRpta;
                            obj.Nombre = ConstantesCombustibles.DscFechaMaxRpta;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValHorasCulminacion;
                            obj.Nombre = ConstantesCombustibles.DscHorasCulminacion;
                            lstSalida.Add(obj);

                            break;

                        #endregion

                        #region RecordatorioRevisarEvaluarSubsanacionPresentadas - plantcodi : 150/151

                        case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSubsanacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaSubsanacion;
                            lstSalida.Add(obj);

                            //obj = new VariableCorreo();
                            //obj.Valor = ConstantesCombustibles.ValDiferenciaDias;
                            //obj.Nombre = ConstantesCombustibles.DscDiferenciaDias;
                            //lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDiasRecepcion;
                            obj.Nombre = ConstantesCombustibles.DscDiasRecepcion;
                            lstSalida.Add(obj);

                            break;

                        case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN:

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValMesActualOSiguiente;
                            obj.Nombre = ConstantesCombustibles.DscMesActualOSiguiente;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValAnio;
                            obj.Nombre = ConstantesCombustibles.DscAnio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValListaCentrales;
                            obj.Nombre = ConstantesCombustibles.DscListaCentrales;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEmpresa;
                            obj.Nombre = ConstantesCombustibles.DscEmpresa;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValIdEnvio;
                            obj.Nombre = ConstantesCombustibles.DscIdEnvio;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValTipoCombustible;
                            obj.Nombre = ConstantesCombustibles.DscTipoCombustible;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSolicitud;
                            obj.Nombre = ConstantesCombustibles.DscFechaSolicitud;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValEstado;
                            obj.Nombre = ConstantesCombustibles.DscEstado;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaRevision;
                            obj.Nombre = ConstantesCombustibles.DscFechaRevision;
                            lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValFechaSubsanacion;
                            obj.Nombre = ConstantesCombustibles.DscFechaSubsanacion;
                            lstSalida.Add(obj);

                            //obj = new VariableCorreo();
                            //obj.Valor = ConstantesCombustibles.ValDiferenciaDias;
                            //obj.Nombre = ConstantesCombustibles.DscDiferenciaDias;
                            //lstSalida.Add(obj);

                            obj = new VariableCorreo();
                            obj.Valor = ConstantesCombustibles.ValDiasRecepcion;
                            obj.Nombre = ConstantesCombustibles.DscDiasRecepcion;
                            lstSalida.Add(obj);

                            break;

                            #endregion

                    }
                }
            }
            return lstSalida.OrderBy(x => x.Nombre).ToList();
        }

        /// <summary>
        /// Actualiza y Guarda la informacion de la plantilla de correo
        /// </summary>
        /// <param name="correo"></param>
        /// <param name="usuario"></param>
        public void ActualizarDatosPlantillaCorreo(SiPlantillacorreoDTO correo, string usuario)
        {
            //Para los recordatorios, guardo fecha y hora
            if (correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE || correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN ||
               correo.Plantcodi == ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE || correo.Plantcodi == ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN ||
               correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE || correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN)
            {
                /**** Obtengo Proceso a guardar ****/
                //obtengo procesocodi
                int procesoCodi = -1;
                procesoCodi = ObtenerProcesoSegunPlantillaCorreo(correo.Plantcodi);

                int hora = 0;
                int minutos = 0;

                //creo registro proceso a guardar (solo estos recordatorios guardan hora de ejecucion)
                if (correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE || correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN ||
                    correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE || correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN)
                {
                    string[] separadas;
                    separadas = correo.Hora.Split(':');
                    hora = Convert.ToInt32(separadas[0]);
                    minutos = Convert.ToInt32(separadas[1]);
                }
                SiProcesoDTO procesoAGuardar = new SiProcesoDTO
                {
                    Prschorainicio = hora,
                    Prscminutoinicio = minutos,
                    Prcsestado = correo.EstadoRecordatorio
                };
                UpdateHoraEjecucion(procesoAGuardar, procesoCodi);
            }

            //Para los recordatorios, guardo parametros (dia y hora)
            if (correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE || correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN ||
               correo.Plantcodi == ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE || correo.Plantcodi == ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN ||
               correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE || correo.Plantcodi == ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN)
            {

                //obtengo parametro
                int siparcodi = ObtenerParametroSegunPlantillaCorreo(correo.Plantcodi);
                decimal? valNulo = null;
                decimal? val = correo.ParametroDiaHora != "" ? Convert.ToDecimal(correo.ParametroDiaHora) : valNulo;
                DateTime hoy = DateTime.Now;

                SiParametroValorDTO parametroValorAGuardar = new SiParametroValorDTO
                {
                    Siparcodi = siparcodi,
                    Siparvvalor = val,
                    Siparveliminado = "N",
                    Siparvusucreacion = usuario,
                    Siparvfeccreacion = hoy
                };
                new ParametroAppServicio().SaveSiParametroValor(parametroValorAGuardar);
            }

            /**** Actualizar la plantilla ****/
            SiPlantillacorreoDTO c = servCorreo.GetByIdSiPlantillacorreo(correo.Plantcodi);
            c.Plantcontenido = correo.Plantcontenido;
            c.Plantasunto = correo.Plantasunto;
            c.Planticorreos = correo.Planticorreos;
            c.PlanticorreosCc = correo.PlanticorreosCc;
            c.PlanticorreosBcc = correo.PlanticorreosBcc;
            c.PlanticorreoFrom = correo.PlanticorreoFrom;
            c.Plantfecmodificacion = DateTime.Now;
            c.Plantusumodificacion = usuario;

            servCorreo.UpdateSiPlantillacorreo(c);

        }

        /// <summary>
        /// Devuelve el procesocodi segun el tipo de plantilla
        /// </summary>
        /// <param name="plantillacodi"></param>
        /// <returns></returns>
        private int ObtenerProcesoSegunPlantillaCorreo(int plantillacodi)
        {
            int procesoCodi = -1;

            switch (plantillacodi)
            {
                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE:
                    procesoCodi = ConstantesCombustibles.PrcscodiRecordatorioRevisarEvaluarInformaciónRecibida_CE;
                    break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN:
                    procesoCodi = ConstantesCombustibles.PrcscodiRecordatorioRevisarEvaluarInformaciónRecibida_CN;
                    break;
                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE:
                    procesoCodi = ConstantesCombustibles.PrcscodiRecordatorioInformarVencimientoPlazoSubsanacion_CE;
                    break;
                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN:
                    procesoCodi = ConstantesCombustibles.PrcscodiRecordatorioInformarVencimientoPlazoSubsanacion_CN;
                    break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE:
                    procesoCodi = ConstantesCombustibles.PrcscodiRecordatorioRevisarEvaluarSubsanacionPresentadas_CE;
                    break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN:
                    procesoCodi = ConstantesCombustibles.PrcscodiRecordatorioRevisarEvaluarSubsanacionPresentadas_CN;
                    break;
            }

            return procesoCodi;
        }

        public int ObtenerPlantillaCorreoSegunProceso(int prcscodi)
        {
            int plantillacodi = -1;

            switch (prcscodi)
            {
                case ConstantesCombustibles.PrcscodiRecordatorioRevisarEvaluarInformaciónRecibida_CE:
                    plantillacodi = ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE;
                    break;
                case ConstantesCombustibles.PrcscodiRecordatorioRevisarEvaluarInformaciónRecibida_CN:
                    plantillacodi = ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN;
                    break;
                case ConstantesCombustibles.PrcscodiRecordatorioInformarVencimientoPlazoSubsanacion_CE:
                    plantillacodi = ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE;
                    break;
                case ConstantesCombustibles.PrcscodiRecordatorioInformarVencimientoPlazoSubsanacion_CN:
                    plantillacodi = ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN;
                    break;
                case ConstantesCombustibles.PrcscodiRecordatorioRevisarEvaluarSubsanacionPresentadas_CE:
                    plantillacodi = ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE;
                    break;
                case ConstantesCombustibles.PrcscodiRecordatorioRevisarEvaluarSubsanacionPresentadas_CN:
                    plantillacodi = ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN;
                    break;
                case ConstantesCombustibles.PrcscodiNotificacionCulminacionPlazoSubsanacion_CE:
                    plantillacodi = ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CE;
                    break;
                case ConstantesCombustibles.PrcscodiNotificacionCulminacionPlazoSubsanacion_CN:
                    plantillacodi = ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CN;
                    break;
                case ConstantesCombustibles.PrcscodiNotificacionIncumplimientoEntregaInformacionFormato3_CE:
                    plantillacodi = ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE;
                    break;
            }

            return plantillacodi;
        }

        /// <summary>
        /// Devuelve el parametrocodi segun el tipo de plantilla
        /// </summary>
        /// <param name="plantillacodi"></param>
        /// <returns></returns>
        private int ObtenerParametroSegunPlantillaCorreo(int plantillacodi)
        {
            int siparcodi = -1;

            switch (plantillacodi)
            {
                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE:
                    siparcodi = ConstantesCombustibles.ParametroRevisarEvaluarInformaciónRecibida_CE;
                    break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN:
                    siparcodi = ConstantesCombustibles.ParametroRevisarEvaluarInformaciónRecibida_CN;
                    break;
                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE:
                    siparcodi = ConstantesCombustibles.ParametroInformarVencimientoPlazoSubsanacion_CE;
                    break;
                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN:
                    siparcodi = ConstantesCombustibles.ParametroInformarVencimientoPlazoSubsanacion_CN;
                    break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE:
                    siparcodi = ConstantesCombustibles.ParametroRevisarEvaluarSubsanacionPresentadas_CE;
                    break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN:
                    siparcodi = ConstantesCombustibles.ParametroRevisarEvaluarSubsanacionPresentadas_CN;
                    break;
            }

            return siparcodi;
        }

        /// <summary>
        /// Actualizar hora de la ejecución de recordatorios
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="procesocodi"></param>
        public void UpdateHoraEjecucion(SiProcesoDTO entity, int procesocodi)
        {
            SiProcesoDTO entidad = FactorySic.GetSiProcesoRepository().GetById(procesocodi);
            entidad.Prschorainicio = entity.Prschorainicio;
            entidad.Prscminutoinicio = entity.Prscminutoinicio;
            entidad.Prcsestado = entity.Prcsestado;
            FactorySic.GetSiProcesoRepository().Update(entidad);
        }

        /// <summary>
        /// Realiza el envio del correo 
        /// </summary>
        /// <param name="tipoCorreo"></param>
        /// <param name="regEnvio"></param>
        private void EnvioCorreoExtranetPR31Gaseoso(int tipoCorreo, CbEnvioDTO regEnvio)
        {
            //Obtengo la plantilla
            int plantcodi = ObtenerPlantillaCodiPorOperacionYTipoCentral(tipoCorreo, regEnvio.Cbenvtipocentral);
            SiPlantillacorreoDTO plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);

            string correosPara = ObtenerCorreosParaDePlantilla(plantilla, regEnvio);

            if (!correosPara.Contains("@")) correosPara = TipoPlantillaCorreo.MailFrom; //webapp@coes.org.pe

            //obtengo los correos CC incluyendo las variables 
            string correosCcPlantilla = ObtenerCorreosCcDePlantilla(plantilla, regEnvio);
            List<string> ccEmailsPlantilla = (correosCcPlantilla ?? "").Split(';').Where(x => x != "").ToList();
            List<string> ccEmailsPopup = regEnvio.ListaCorreoCCagente != null ? regEnvio.ListaCorreoCCagente : new List<string>();
            ccEmailsPopup.AddRange(ccEmailsPlantilla);

            if (correosPara == "")
                throw new ArgumentException("No se pudo notificar el evento dado que se encontró un correo Para inválido.");

            string fromEmail = plantilla.PlanticorreoFrom ?? "";

            List<string> toEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(correosPara, false);
            List<string> ccEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(string.Join(";",ccEmailsPopup), false);
            List<string> bccEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(plantilla.PlanticorreosBcc, true, true);

            string asunto = ReemplazarVariablesDeCorreo(regEnvio, ConstantesCombustibles.VariableAsunto, plantilla, toEmails);
            string contenido = ReemplazarVariablesDeCorreo(regEnvio, ConstantesCombustibles.VariableContenido, plantilla, toEmails);

            try
            {
                string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                COES.Base.Tools.Util.SendEmail(toEmails, ccEmails, bccEmails, asuntoSendEmail, contenido, "");

                var correo = new SiCorreoDTO();
                correo.Corrasunto = asunto;
                correo.Corrcontenido = contenido;
                correo.Corrfechaenvio = DateTime.Now;
                correo.Corrfechaperiodo = regEnvio.Cbenvfecsolicitud;
                correo.Corrfrom = fromEmail;
                correo.Corrto = string.Join(";", toEmails);
                correo.Corrcc = string.Join(";", ccEmails);
                correo.Corrbcc = string.Join(";", bccEmails);
                correo.Emprcodi = regEnvio.Emprcodi;
                correo.Enviocodi = regEnvio.Cbenvcodi;
                correo.Plantcodi = plantcodi;
                servCorreo.SaveSiCorreo(correo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }

        }

        /// <summary>
        /// Devuelve los correos de PARA incluyendo las variables (si hubiesen)
        /// </summary>
        /// <param name="plantilla"></param>
        /// <param name="regEnvio"></param>
        /// <returns></returns>
        private string ObtenerCorreosParaDePlantilla(SiPlantillacorreoDTO plantilla, CbEnvioDTO regEnvio)
        {
            string salida = plantilla.Planticorreos;

            string paraDesdePlantilla = plantilla.Planticorreos;
            string usuarioUltimoEvento = regEnvio.UsuarioUltimoEvento;
            string todosUsuarios = regEnvio.UsuariosAgentesTotales;

            bool incluyeTodosAgentes = paraDesdePlantilla.Contains(ConstantesCombustibles.ValTodosAgentes);
            bool incluyeAgenteUltimo = paraDesdePlantilla.Contains(ConstantesCombustibles.ValAgenteUltimo);

            if (incluyeAgenteUltimo)
            {
                salida = salida.Replace(ConstantesCombustibles.ValAgenteUltimo, usuarioUltimoEvento);
            }

            if (incluyeTodosAgentes)
            {
                salida = salida.Replace(ConstantesCombustibles.ValTodosAgentes, todosUsuarios);
            }

            return salida;
        }

        /// <summary>
        /// Devuelve los correos de CC incluyendo las variables (si hubiesen)
        /// </summary>
        /// <param name="plantilla"></param>
        /// <param name="regEnvio"></param>
        /// <returns></returns>
        private string ObtenerCorreosCcDePlantilla(SiPlantillacorreoDTO plantilla, CbEnvioDTO regEnvio)
        {
            string salida = "";

            string ccDesdePlantilla = plantilla.PlanticorreosCc;

            if (ccDesdePlantilla != null)
            {
                salida = plantilla.PlanticorreosCc;
                string usuarioUltimoEvento = regEnvio.UsuarioUltimoEvento;
                string todosUsuarios = regEnvio.UsuariosAgentesTotales;

                bool incluyeTodosAgentes = ccDesdePlantilla.Contains(ConstantesCombustibles.ValTodosAgentes);
                bool incluyeOtrosAgentes = ccDesdePlantilla.Contains(ConstantesCombustibles.ValOtrosAgentes);
                bool incluyeAgenteUltimo = ccDesdePlantilla.Contains(ConstantesCombustibles.ValAgenteUltimo);

                if (incluyeAgenteUltimo)
                {
                    salida = salida.Replace(ConstantesCombustibles.ValAgenteUltimo, usuarioUltimoEvento);
                }

                if (incluyeTodosAgentes)
                {
                    salida = salida.Replace(ConstantesCombustibles.ValTodosAgentes, todosUsuarios);
                }

                if (incluyeOtrosAgentes)
                {
                    //obtengo otros usuarios
                    string usuariosSinUltimoEvento = todosUsuarios.Replace(usuarioUltimoEvento, "");

                    char primerCaracter = usuariosSinUltimoEvento.FirstOrDefault();
                    if (primerCaracter == ';')
                    {
                        usuariosSinUltimoEvento = usuariosSinUltimoEvento.Remove(0, 1);
                    }

                    char ultimoCaracter = usuariosSinUltimoEvento.LastOrDefault();
                    if (ultimoCaracter == ';')
                    {
                        usuariosSinUltimoEvento = usuariosSinUltimoEvento.Remove((usuariosSinUltimoEvento.Length - 1), 1);
                    }

                    string otrosAgentes = usuariosSinUltimoEvento.Replace(";;", ";");

                    salida = salida.Replace(ConstantesCombustibles.ValOtrosAgentes, otrosAgentes);
                }
            }

            return salida;
        }

        /// <summary>
        /// Reemplaza las variables por sus valores respectivos
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="variable"></param>
        /// <param name="plantilla"></param>
        /// <returns></returns>
        private string ReemplazarVariablesDeCorreo(CbEnvioDTO regEnvio, int variable, SiPlantillacorreoDTO plantilla, List<string> emailsPara)
        {
            int idPlantilla = plantilla.Plantcodi;
            string textoARemplazar = "";
            string textoSalida = "";
            DateTime? fechaNulo = null;

            //escojo el texto que debe ser reemplazado (Asunto o Contenido)
            if (variable == ConstantesCombustibles.VariableAsunto)
                textoARemplazar = plantilla.Plantasunto;
            if (variable == ConstantesCombustibles.VariableContenido)
                textoARemplazar = plantilla.Plantcontenido;


            /********* Destinatarios ********/
            /** Se usa SOLO cuando el destinatario son los usuario generadores (UG) o un parte de ellos, no cuando sean usuarios de COES **/
            //string destinatarios = "";

            //depende de CC Agentes (destinatarios = quien envio  + cc agentes)
            if (idPlantilla == ConstantesCombustibles.NotificacionObservacionEnvío_CE || idPlantilla == ConstantesCombustibles.NotificacionObservacionEnvío_CN ||
                idPlantilla == ConstantesCombustibles.NotificacionAprobacionEnvío_CE || idPlantilla == ConstantesCombustibles.NotificacionAprobacionEnvío_CN ||
                idPlantilla == ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CE || idPlantilla == ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CN ||
                idPlantilla == ConstantesCombustibles.NotificacionDesaprobacionEnvío_CE || idPlantilla == ConstantesCombustibles.NotificacionDesaprobacionEnvío_CN ||
                idPlantilla == ConstantesCombustibles.NotificacionAsignacionEnvío_CN)
            {
                //List<string> lstTotal = ObtenerCorreosSinDuplicidad(regEnvio.ListaCorreoCCagente, emailsPara);
                //destinatarios = string.Join(", ", lstTotal);
            }
            else
            {
                //destinatarios = string.Join(", ", emailsPara);
            }



            /**** Obteniendo lista de centrales participantes  *****/
            List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
            //cuando la lista es para las centrales EXISTENTES que no enviaron informacion de F3
            if (regEnvio.Cbenvcodi == ConstantesCombustibles.EnvioPorIncumplimiento)
            {
                lstCentralesParticipantes = regEnvio.ListaCentralesSinEnvio;
            }
            else // Para todos los demas casos 
            {
                lstCentralesParticipantes = ListCbEnvioCentralsByEnvio(regEnvio.Cbenvcodi).OrderBy(x => x.Equinomb).ToList();
            }
            List<string> lstStrCentrales = new List<string>();
            foreach (var centralX in lstCentralesParticipantes)
            {
                lstStrCentrales.Add(centralX.Equinomb.Trim());
            }
            string centralesParticipantes = lstCentralesParticipantes.Any() ? string.Join(", ", lstStrCentrales) : "";

            //Fecha revision = fecha que observó coes por primera vez
            string estenvcodisX = ConstantesCombustibles.EstadoObservado.ToString();
            List<CbLogenvioDTO> lstLogEnviosx = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(regEnvio.Cbenvcodi.ToString(), estenvcodisX).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderBy(x => x.Logenvcodi).ToList();
            CbLogenvioDTO primeraObservacionCoes = lstLogEnviosx.Any() ? lstLogEnviosx.First() : null;


            /**** Revision de observacion  *****/
            CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoObservado);
            DateTime? fechaRevisionObs = logEnvioUltimoObs != null ? logEnvioUltimoObs.Logenvfeccreacion : fechaNulo;

            /**** Revision de subsanacion de observacion *****/
            CbLogenvioDTO logEnvioUltimoSubObs = GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoSubsanacionObs);
            DateTime? fechaRevisionSubsanacionObs = logEnvioUltimoSubObs != null ? logEnvioUltimoSubObs.Logenvfeccreacion : fechaNulo;


            /**** Lista de centrales aprobadas y desaprobadas (Aprobacion Parcial) *****/
            string strCAprobadas = regEnvio.ListaCentralesAprobadas != null ? (regEnvio.ListaCentralesAprobadas.Any() ? string.Join(", ", regEnvio.ListaCentralesAprobadas.Select(x => x.Equinomb.Trim())) : "") : "";
            string strCDesaprobadas = regEnvio.ListaCentralesDesaprobadas != null ? (regEnvio.ListaCentralesDesaprobadas.Any() ? string.Join(", ", regEnvio.ListaCentralesDesaprobadas.Select(x => x.Equinomb.Trim())) : "") : "";

            //Dias y horas
            string v_diasRecepcion = ObtenerDiasHorasParametro(idPlantilla);
            string v_horaCulminacion = ObtenerDiasHorasParametro(idPlantilla);

            //seteo las variables  
            string v_mesActual = regEnvio.Cbenvfechaperiodo != null ? EPDate.f_NombreMes(regEnvio.Cbenvfechaperiodo.Value.Month) : "";
            string v_mesActualOSiguiente = regEnvio.Cbenvfechaperiodo != null ? EPDate.f_NombreMes((regEnvio.Cbenvfechaperiodo.Value).Month) : "";
            string v_mesSiguiente = regEnvio.Cbenvfechaperiodo != null ? EPDate.f_NombreMes((regEnvio.Cbenvfechaperiodo.Value).Month) : "";
            string v_anio = "";
            string v_anioActual = regEnvio.Cbenvfechaperiodo != null ? regEnvio.Cbenvfechaperiodo.Value.Year.ToString() : "";
            string v_anioActualOSiguiente = regEnvio.Cbenvfechaperiodo != null ? regEnvio.Cbenvfechaperiodo.Value.Year.ToString() : "";
            string v_anioSiguiente = regEnvio.Cbenvfechaperiodo != null ? regEnvio.Cbenvfechaperiodo.Value.Year.ToString() : "";

            string v_lstCentrales = centralesParticipantes;
            //string v_destinatarios = destinatarios;
            string v_destinatarios = regEnvio.UsuarioUltimoEvento;
            string v_empresa = regEnvio.Emprnomb != null ? regEnvio.Emprnomb.Trim() : "";
            string v_MesVigencia = regEnvio.Cbenvfechaperiodo != null ? EPDate.f_NombreMes(regEnvio.Cbenvfechaperiodo.Value.Month) + "-" + regEnvio.Cbenvfechaperiodo.Value.Year : "";
            string v_costoCombAsignado = "";   //SOS 
            string v_idEnvio = regEnvio.Cbenvcodi != null ? regEnvio.Cbenvcodi.ToString() : "";
            string v_tipoCombustible = regEnvio.Fenergnomb != null ? regEnvio.Fenergnomb.Trim() : "";
            string v_fechaSolicitud = regEnvio.Cbenvfecsolicitud != null ? regEnvio.CbenvfecsolicitudDesc : "";
            string v_estado = regEnvio.Estenvcodi != null ? (regEnvio.Estenvnomb != "" ? regEnvio.Estenvnomb : regEnvio.EstadoDesc) : "";
            string v_fechaCancelacion = regEnvio.Cbenvfecmodificacion != null ? regEnvio.CbenvfecmodificacionDesc : "";
            string v_fechaRevisionObservacion = primeraObservacionCoes != null ? primeraObservacionCoes.Logenvfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
            string v_fechaRevisionSubsanacionObservacion = primeraObservacionCoes != null ? primeraObservacionCoes.Logenvfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
            string v_fechaMaxRespuesta = regEnvio.Cbenvfecfinsubsanarobs != null ? regEnvio.CbenvfecfinsubsanarobsDesc : "";
            string v_fechaSubsanacion = fechaRevisionSubsanacionObs != null ? fechaRevisionSubsanacionObs.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
            string v_fechaCulminacionPlazo = regEnvio.Cbenvfecfinsubsanarobs != null ? regEnvio.CbenvfecfinsubsanarobsDesc : "";
            string v_fechaAprobacion = regEnvio.FechaAprobacionDesc;
            string v_fechaDesaprobacion = regEnvio.FechaDesaprobacionDesc;
            string v_respuestaCOES = regEnvio.Cbenvobs != null ? regEnvio.Cbenvobs : "";
            string v_fechaAsignacion = regEnvio.FechaAsignacionDesc;
            string v_plazoInicio = regEnvio.Cbenvfecmodificacion != null ? regEnvio.Cbenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
            string v_plazoFin = regEnvio.Cbenvfecampl != null ? regEnvio.Cbenvfecampl.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
            string v_lstCentralesAprobadas = strCAprobadas;
            string v_lstCentralesDesaprobadas = strCDesaprobadas;
            string v_fechaModificacion = regEnvio.CbenvfecmodificacionDesc; //para envios parcialmente aprobados

            switch (idPlantilla)
            {

                #region NotificacionIncumplimientoEntregaInformacionFormato3 - plantcodi : 123/124

                case ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE:
                    v_anio = v_anioSiguiente;

                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);

                    break;

                case ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CN:
                    v_anio = v_anioActual;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActual, v_mesActual);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValMesVigencia, v_MesVigencia);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValCostoCombAsignado, v_costoCombAsignado);

                    break;

                #endregion

                #region NotificacionRegistroSolicitud - plantcodi : 125/126

                case ConstantesCombustibles.NotificacionRegistroSolicitud_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);

                    break;

                case ConstantesCombustibles.NotificacionRegistroSolicitud_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);

                    break;

                #endregion

                #region NotificacionCancelarEnvio - plantcodi : 127/128

                case ConstantesCombustibles.NotificacionCancelarEnvio_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaCancelacion, v_fechaCancelacion);

                    break;

                case ConstantesCombustibles.NotificacionCancelarEnvio_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaCancelacion, v_fechaCancelacion);

                    break;

                #endregion

                #region NotificacionObservacionEnvío - plantcodi : 129/130

                case ConstantesCombustibles.NotificacionObservacionEnvío_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaMaxRpta, v_fechaMaxRespuesta);

                    break;

                case ConstantesCombustibles.NotificacionObservacionEnvío_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaMaxRpta, v_fechaMaxRespuesta);

                    break;

                #endregion

                #region NotificacionSubsanacionEnvío - plantcodi : 131/132

                case ConstantesCombustibles.NotificacionSubsanacionEnvío_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionSubsanacionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSubsanacion, v_fechaSubsanacion);

                    break;

                case ConstantesCombustibles.NotificacionSubsanacionEnvío_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionSubsanacionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSubsanacion, v_fechaSubsanacion);

                    break;

                #endregion

                #region NotificacionCulminacionPlazoSubsanacion - plantcodi : 133/134

                case ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaPlazoMaxSubsanacion, v_fechaCulminacionPlazo);

                    break;

                case ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaPlazoMaxSubsanacion, v_fechaCulminacionPlazo);

                    break;

                #endregion

                #region NotificacionAprobacionEnvío - plantcodi : 135/136

                case ConstantesCombustibles.NotificacionAprobacionEnvío_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValMesVigencia, v_MesVigencia);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaAprobacion, v_fechaAprobacion);

                    break;

                case ConstantesCombustibles.NotificacionAprobacionEnvío_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValMesVigencia, v_MesVigencia);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaAprobacion, v_fechaAprobacion);

                    break;

                #endregion

                #region NotificacionAprobacionParcialEnvío - plantcodi : 137/138

                case ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValMesVigencia, v_MesVigencia);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaAprobacion, v_fechaModificacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaDesaprobacion, v_fechaModificacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValRespuestaCoes, v_respuestaCOES);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentralesAprobadas, v_lstCentralesAprobadas);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentralesDesaprobadas, v_lstCentralesDesaprobadas);

                    break;

                case ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValMesVigencia, v_MesVigencia);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaAprobacion, v_fechaModificacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaDesaprobacion, v_fechaModificacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValRespuestaCoes, v_respuestaCOES);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentralesAprobadas, v_lstCentralesAprobadas);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentralesDesaprobadas, v_lstCentralesDesaprobadas);

                    break;

                #endregion

                #region NotificacionDesaprobacionEnvío - plantcodi : 139/140

                case ConstantesCombustibles.NotificacionDesaprobacionEnvío_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaDesaprobacion, v_fechaDesaprobacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValRespuestaCoes, v_respuestaCOES);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValMesVigencia, v_MesVigencia);

                    break;

                case ConstantesCombustibles.NotificacionDesaprobacionEnvío_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaDesaprobacion, v_fechaDesaprobacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValRespuestaCoes, v_respuestaCOES);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValMesVigencia, v_MesVigencia);

                    break;

                #endregion

                #region NotificacionAsignacionEnvío_CN - plantcodi : 141

                case ConstantesCombustibles.NotificacionAsignacionEnvío_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValMesVigencia, v_MesVigencia);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaAsignacion, v_fechaAsignacion);

                    break;

                #endregion

                #region NotificacionAmpliacionPlazoEnvio - plantcodi : 142/143

                case ConstantesCombustibles.NotificacionAmpliacionPlazoEnvio_CE:
                case ConstantesCombustibles.NotificacionAmpliacionPlazoEnvio_CN:

                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaMaxRpta, v_fechaMaxRespuesta);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaInicioPlazo, v_plazoInicio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaFinPlazo, v_plazoFin);

                    break;



                #endregion


                #region RecordatorioRevisarEvaluarInformaciónRecibida - plantcodi : 146/147

                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    //textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDiferenciaDias, v_diferenciaDiasCalendario);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDiasRecepcion, v_diasRecepcion);

                    break;

                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    //textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDiferenciaDias, v_diferenciaDiasCalendario);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDiasRecepcion, v_diasRecepcion);

                    break;

                #endregion

                #region RecordatorioInformarVencimientoPlazoSubsanacion - plantcodi : 148/149

                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaMaxRpta, v_fechaMaxRespuesta);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValHorasCulminacion, v_horaCulminacion);

                    break;

                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDestinatariosPara, v_destinatarios);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaMaxRpta, v_fechaMaxRespuesta);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValHorasCulminacion, v_horaCulminacion);

                    break;

                #endregion

                #region RecordatorioRevisarEvaluarSubsanacionPresentadas - plantcodi : 150/151

                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE:
                    v_anio = v_anioSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesSiguiente, v_mesSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionSubsanacionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSubsanacion, v_fechaSubsanacion);
                    //textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDiferenciaDias, v_diferenciaDiasCalendario);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDiasRecepcion, v_diasRecepcion);

                    break;

                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN:
                    v_anio = v_anioActualOSiguiente;
                    textoSalida = textoARemplazar.Replace(ConstantesCombustibles.ValMesActualOSiguiente, v_mesActualOSiguiente);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValAnio, v_anio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValListaCentrales, v_lstCentrales);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEmpresa, v_empresa);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValIdEnvio, v_idEnvio);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValTipoCombustible, v_tipoCombustible);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSolicitud, v_fechaSolicitud);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValEstado, v_estado);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaRevision, v_fechaRevisionSubsanacionObservacion);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValFechaSubsanacion, v_fechaSubsanacion);
                    //textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDiferenciaDias, v_diferenciaDiasCalendario);
                    textoSalida = textoSalida.Replace(ConstantesCombustibles.ValDiasRecepcion, v_diasRecepcion);

                    break;

                    #endregion

            }
            return textoSalida;
        }

        /// <summary>
        /// Devuelve el valor del parametro ya sea dia u hora
        /// </summary>
        /// <param name="idPlantilla"></param>
        /// <returns></returns>
        private string ObtenerDiasHorasParametro(int idPlantilla)
        {
            string salida = "";

            switch (idPlantilla)
            {
                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE: salida = ObtenerParametroValor(ConstantesCombustibles.ParametroRevisarEvaluarInformaciónRecibida_CE); break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN: salida = ObtenerParametroValor(ConstantesCombustibles.ParametroRevisarEvaluarInformaciónRecibida_CN); break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE: salida = ObtenerParametroValor(ConstantesCombustibles.ParametroRevisarEvaluarSubsanacionPresentadas_CE); break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN: salida = ObtenerParametroValor(ConstantesCombustibles.ParametroRevisarEvaluarSubsanacionPresentadas_CN); break;

                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE: salida = ObtenerParametroValor(ConstantesCombustibles.ParametroInformarVencimientoPlazoSubsanacion_CE); break;
                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN: salida = ObtenerParametroValor(ConstantesCombustibles.ParametroInformarVencimientoPlazoSubsanacion_CN); break;
            }

            return salida;
        }

        /// <summary>
        /// Devuelve el valor del parametro requerido
        /// </summary>
        /// <param name="isParametro"></param>
        /// <returns></returns>
        private string ObtenerParametroValor(int isParametro)
        {
            string salida = "";

            List<SiParametroValorDTO> lstValores = new ParametroAppServicio().ListSiParametroValorByIdParametro(isParametro).OrderByDescending(x => x.Siparvfeccreacion).ToList();

            if (lstValores.Any())
            {
                salida = lstValores.First().Siparvvalor.ToString();
            }

            return salida;
        }

        /// <summary>
        /// Devuelve la plantilla solicitada
        /// </summary>
        /// <param name="tipoCorreo"></param>
        /// <param name="tipoCentral"></param>
        /// <returns></returns>
        private int ObtenerPlantillaCodiPorOperacionYTipoCentral(int tipoCorreo, string tipoCentral)
        {
            int plantillacodi = -1;

            switch (tipoCorreo)
            {
                //Notificacion Incumplimiento de entrega de info
                case ConstantesCombustibles.TipoCorreoIncumplimientoInfo_CE:  // 123
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE;
                    break;

                //Notificacion Solicitud Envío
                case ConstantesCombustibles.TipoCorreoNuevo:  // 125-126
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionRegistroSolicitud_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionRegistroSolicitud_CN;
                    break;

                //Notificacion subsanar Envío
                case ConstantesCombustibles.TipoCorreoSubsanacionObs: // 131-132
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionSubsanacionEnvío_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionSubsanacionEnvío_CN;
                    break;

                //Notificacion Cancelar Envío
                case ConstantesCombustibles.TipoCorreoCancelar: // 127-128
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionCancelarEnvio_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionCancelarEnvio_CN;
                    break;

                //Notificacion Observar Envío
                case ConstantesCombustibles.TipoCorreoObservacion: // 129-130
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionObservacionEnvío_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionObservacionEnvío_CN;
                    break;

                //Notificacion Culminacion de plazo para subsanar Envío
                case ConstantesCombustibles.TipoCorreoCulminacionPlazo: // 133-134
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CN;
                    break;

                //Notificacion Aprobar Envío
                case ConstantesCombustibles.TipoCorreoAprobado: // 135-136
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionAprobacionEnvío_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionAprobacionEnvío_CN;
                    break;

                //Notificacion Aprobar Envío Parcialmente
                case ConstantesCombustibles.TipoCorreoAprobadoParcial: // 137-138
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CN;
                    break;

                //Notificacion Desaprobar Envío
                case ConstantesCombustibles.TipoCorreoDesaprobado: // 139-140
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionDesaprobacionEnvío_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionDesaprobacionEnvío_CN;
                    break;

                //Notificacion Asignar Envío
                case ConstantesCombustibles.TipoCorreoAsignado: // 141
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionAsignacionEnvío_CN;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionAsignacionEnvío_CN;
                    break;

                //Notificacion Ampliación de plazo Envío
                case ConstantesCombustibles.TipoCorreoAmplSubsanarObs: // 142-143
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.NotificacionAmpliacionPlazoEnvio_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.NotificacionAmpliacionPlazoEnvio_CN;
                    break;


                //recordatorio 1
                case ConstantesCombustibles.TipoCorreorRecordatorioSolicitudCoes: // 146-147
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN;
                    break;

                //recordatorio 2
                case ConstantesCombustibles.TipoCorreorRecordatorioSubsanacionObsAgente: // 148-149
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN;
                    break;

                //recordatorio 3
                case ConstantesCombustibles.TipoCorreorRecordatorioSubsanacionObsCoes: // 150-151
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        plantillacodi = ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        plantillacodi = ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN;
                    break;


            }

            return plantillacodi;
        }

        /// <summary>
        /// ejecuta recordatorio y notificaciones de manera manual
        /// </summary>
        /// <param name="plantcodi"></param>
        public void EjecutarRecordatoriosManualmente(int plantcodi, Dictionary<int, string> lstUsuarioPorEmpresa)
        {
            try
            {
                switch (plantcodi)
                {
                    /****************  RECORDATORIOS  *****************/

                    //1: Cuando un envío de una central Existente tiene 3 días de haber recibido la solicitud y está pendiente de revisión y evaluación.
                    case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE:
                        NotificarRecordatorioParaAtenderInformacionSolicitada(ConstantesCombustibles.CentralExistente, lstUsuarioPorEmpresa);
                        break;

                    //1: Cuando un envío de una central nueva tiene 3 días de haber recibido la solicitud y está pendiente de revisión y evaluación.
                    case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN:
                        NotificarRecordatorioParaAtenderInformacionSolicitada(ConstantesCombustibles.CentralNueva, lstUsuarioPorEmpresa);
                        break;

                    //2: Notifica al generador que existe un envío (con central existente) pendiente de subsanación 
                    case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE:
                        NotificarRecordatorioParaSubsanarEnviosObservados(ConstantesCombustibles.CentralExistente, lstUsuarioPorEmpresa);
                        break;

                    //2: Notifica al generador que existe un envío (con central nueva) pendiente de subsanación 
                    case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN:
                        NotificarRecordatorioParaSubsanarEnviosObservados(ConstantesCombustibles.CentralNueva, lstUsuarioPorEmpresa);
                        break;

                    //3: Cuando un envío SUBSANADO tiene 1 día de haber sido presentada por el generador y está pendiente de revisión y evaluación.
                    case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE:
                        NotificarRecordatorioParaAtenderInformacionSubsanada(ConstantesCombustibles.CentralExistente, lstUsuarioPorEmpresa);
                        break;

                    //3: Cuando un envío SUBSANADO tiene 1 día de haber sido presentada por el generador y está pendiente de revisión y evaluación.
                    case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN:
                        NotificarRecordatorioParaAtenderInformacionSubsanada(ConstantesCombustibles.CentralNueva, lstUsuarioPorEmpresa);
                        break;

                    /****************  NOTIFICACIONES  *****************/

                    //4: Cuando culmina el plazo para subsanar las observaciones emitidas por COES.
                    case ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CE:
                        NotificarCulminacionPlazoParaSubsanar(ConstantesCombustibles.CentralExistente, lstUsuarioPorEmpresa);
                        break;

                    //4: Cuando culmina el plazo para subsanar las observaciones emitidas por COES.
                    case ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CN:
                        NotificarCulminacionPlazoParaSubsanar(ConstantesCombustibles.CentralNueva, lstUsuarioPorEmpresa);
                        break;

                    //4: Cuando el generador no presenta información hasta el 20 de cada mes para una central termoeléctrica. Para notificacion manual notifico si o si
                    case ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE:
                        NotificarIncumplimientoEntregaInformacionF3(ConstantesCombustibles.CentralExistente, lstUsuarioPorEmpresa, true);
                        break;
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }

        }

        /// <summary>
        /// Devuelve la hora del sistema configurado por el aplicativo PR31-Gas
        /// </summary>
        /// <returns></returns>
        private DateTime ObtenerFechaSistemaPR31(int cbenvcodi)
        {
            DateTime salida = DateTime.Now;

            //S: usar fecha sistema manual
            var keyConfig = ConfigurationManager.AppSettings[ConstantesCombustibles.KeyFlagPR31HoraSistemaManual];
            if (keyConfig == "S")
            {
                if (cbenvcodi == 0)
                {
                    salida = DateTime.Now;
                }
                else
                {
                    CbEnvioDTO envio = FactorySic.GetCbEnvioRepository().GetById(cbenvcodi); //NO USAR EL GetByIdCbEnvio (hay bucle)
                    salida = envio.Cbenvfecsistema != null ? envio.Cbenvfecsistema.Value : DateTime.Now;
                }
            }
            return salida;
        }

        /// <summary>
        /// Obtener fecha de sistema posterior a la última acción
        /// </summary>
        /// <returns></returns>
        private DateTime ObtenerFechaSistemaPosteriorPR31(DateTime fechaSistemaManual)
        {
            DateTime salida = DateTime.Now;

            //S: usar fecha sistema manual
            var keyConfig = ConfigurationManager.AppSettings[ConstantesCombustibles.KeyFlagPR31HoraSistemaManual];
            if (keyConfig == "S")
            {
                var keyConfigMin = ConfigurationManager.AppSettings[ConstantesCombustibles.KeyFlagPR31HoraSistemaManualMinPosterior];
                int minutos = Convert.ToInt32(keyConfigMin);

                return fechaSistemaManual.AddMinutes(minutos);
            }

            return salida;
        }

        /// <summary>
        /// Notifica Cuando culmina el plazo para subsanar las observaciones emitidas por COES para las centrales nuevas y existentes.
        /// </summary>
        /// <param name="tipoCentral"></param>
        private void NotificarCulminacionPlazoParaSubsanar(string tipoCentral, Dictionary<int, string> lstUsuarioPorEmpresa)
        {
            //Obtengo todos los envios observados para centrales X
            List<int> lstcodis = new List<int>() { ConstantesCombustibles.EstadoObservado };
            List<CbEnvioDTO> listaEnviosEstado = ListXEstado(string.Join(",", lstcodis), ConstantesAppServicio.ParametroDefecto).Where(x => x.Estcomcodi == ConstantesCombustibles.EstcomcodiGas && x.Cbenvtipoenvio == ConstantesCombustibles.GuardadoOficial).ToList();
            List<CbEnvioDTO> listaEnviosEstadoYTipoCentral = listaEnviosEstado.Where(x => x.Cbenvtipocentral == tipoCentral).ToList();

            foreach (var regEnvio in listaEnviosEstadoYTipoCentral)
            {
                // solo para empresas que son termicas al momento de notificar
                if (lstUsuarioPorEmpresa.ContainsKey(regEnvio.Emprcodi))
                {
                    DateTime fechaAct = ObtenerFechaSistemaPR31(regEnvio.Cbenvcodi);

                    //solo los envios observados y de cierta central (existente o nueva)
                    if (ConstantesCombustibles.EstadoObservado == regEnvio.Estenvcodi)
                    {
                        bool enviarCorreoYCambiarEstado = false;
                        bool noEnviarCorreoYCambiarEstado = false;

                        //si venció la ampliación cambiar de estado
                        if (regEnvio.Cbenvfecampl != null)
                        {
                            if (regEnvio.Cbenvfecampl < fechaAct)
                                noEnviarCorreoYCambiarEstado = true;
                        }
                        else
                        {
                            //si no existe ampliacion
                            //vencio fecha maxima respuesta
                            if (regEnvio.Cbenvfecfinsubsanarobs < fechaAct)
                            {
                                enviarCorreoYCambiarEstado = true;
                            }
                        }

                        if (noEnviarCorreoYCambiarEstado)
                        {
                            regEnvio.Estenvcodi = ConstantesCombustibles.EstadoSubsanacionObs;
                            regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                            regEnvio.Cbenvfecmodificacion = fechaAct;
                            regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaAct);

                            //log cambio de estado
                            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                            logEnvio.Estenvcodi = ConstantesCombustibles.EstadoSubsanacionObs;
                            logEnvio.Logenvusucreacion = ConstantesCombustibles.UsuarioSistema;
                            logEnvio.Logenvfeccreacion = fechaAct;
                            logEnvio.Logenvobservacion = string.Empty;
                            regEnvio.LogEnvioActual = logEnvio;

                            //guardar informacion y archivos
                            ActualizarEnvioGaseosoTransaccional(regEnvio);
                        }

                        if (enviarCorreoYCambiarEstado)
                        {
                            regEnvio.Estenvcodi = ConstantesCombustibles.EstadoSubsanacionObs;
                            regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                            regEnvio.Cbenvfecmodificacion = fechaAct;
                            regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaAct);
                            regEnvio.Cbenvobs = "Culminó el plazo para levantamiento de observaciones al costo de combustible";

                            //log cambio de estado
                            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                            logEnvio.Estenvcodi = ConstantesCombustibles.EstadoSubsanacionObs;
                            logEnvio.Logenvusucreacion = ConstantesCombustibles.UsuarioSistema;
                            logEnvio.Logenvfeccreacion = fechaAct;
                            logEnvio.Logenvobservacion = string.Empty;
                            regEnvio.LogEnvioActual = logEnvio;

                            //guardar informacion y archivos
                            ActualizarEnvioGaseosoTransaccional(regEnvio);

                            //log notificacion
                            logEnvio = new CbLogenvioDTO();
                            logEnvio.Estenvcodi = ConstantesCombustibles.EstadoNotificado;
                            logEnvio.Logenvusucreacion = ConstantesCombustibles.UsuarioSistema;
                            logEnvio.Logenvfeccreacion = fechaAct.AddSeconds(1);
                            logEnvio.Logenvobservacion = regEnvio.Cbenvobs;
                            regEnvio.LogEnvioActual = logEnvio;

                            //guardar informacion y archivos
                            ActualizarEnvioGaseosoTransaccional(regEnvio);

                            //enviar notificacion                      
                            regEnvio.UsuariosAgentesTotales = lstUsuarioPorEmpresa[regEnvio.Emprcodi];
                            if (regEnvio.UsuariosAgentesTotales.Trim() == "")
                            {
                                regEnvio.UsuariosAgentesTotales = regEnvio.Cbenvususolicitud;
                            }
                            regEnvio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoUsuFinPlazoSubs, regEnvio, "");
                            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoCulminacionPlazo, regEnvio);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Notifica del incumplimiento de entrega de informacion para centrales existentes
        /// </summary>
        /// <param name="tipoCentral"></param>
        private void NotificarIncumplimientoEntregaInformacionF3(string tipoCentral, Dictionary<int, string> lstUsuarioPorEmpresa, bool esManual)
        {
            DateTime fechaAct = ObtenerFechaSistemaPR31(ConstantesCombustibles.PorDefecto);
            int mesActual = fechaAct.Month;
            int anioActual = fechaAct.Year;
            DateTime dia21 = new DateTime(anioActual, mesActual, 21);

            DateTime diaComparacion;

            //para notificaciones manuales no espero al dia 21, sino hoymismo
            if (esManual)
                diaComparacion = fechaAct;
            else
                diaComparacion = dia21;


            if (fechaAct.Date == diaComparacion.Date)
            {
                //Obtengo todas las centrales existentes
                List<CbCentralxfenergDTO> listaCentralTermicasTipoExistentes = ObtenerListadoCentralesTermicas(true).Where(x => x.Cbcxfeexistente == 1).ToList();

                if (listaCentralTermicasTipoExistentes.Any())
                {
                    DateTime proxMes = new DateTime(fechaAct.AddMonths(1).Year, fechaAct.AddMonths(1).Month, 1);

                    List<int> lstEquicodisCentralesExistentes = listaCentralTermicasTipoExistentes.Select(x => x.Equicodi).ToList();

                    //Obtengo todas las centrales que hayan solicitado envio (a excepcion de las canceladas)
                    List<CbEnvioCentralDTO> listaCentralEntregaronInfo = ListCbEnvioCentralesConInfoEnviada(proxMes.Month, proxMes.Year);
                    List<int> lstEquicodisCentralesExistentesEntregaronInfo = listaCentralEntregaronInfo.Select(x => x.Equicodi).ToList();

                    //Lista de centrales existentes que no han enviado info               
                    IEnumerable<int> equicodisdistintos = lstEquicodisCentralesExistentes.Except(lstEquicodisCentralesExistentesEntregaronInfo);

                    List<CbCentralxfenergDTO> lstCentralesNoEnviaronInfo = listaCentralTermicasTipoExistentes.Where(x => equicodisdistintos.Contains(x.Equicodi)).ToList();

                    //lstEmpresas que tienen centrales qe no enviaron informacion
                    var lstEmpresasConCentralesQueNoEnviaronInfo = lstCentralesNoEnviaronInfo.GroupBy(x => x.Emprcodi).ToList();

                    foreach (var item in lstEmpresasConCentralesQueNoEnviaronInfo)
                    {
                        // solo para empresas que son termicas al momento de notificar
                        if (lstUsuarioPorEmpresa.ContainsKey(item.Key))
                        {
                            //Obtenemos las centrales (CbEnvioCentralDTO) que no enviaron info por empresa
                            List<CbCentralxfenergDTO> lstCentralesSinInfoPorEmpresa = lstCentralesNoEnviaronInfo.Where(x => x.Emprcodi == item.Key).ToList();
                            List<CbEnvioCentralDTO> lstCentrales = new List<CbEnvioCentralDTO>();
                            foreach (var c in lstCentralesSinInfoPorEmpresa)
                            {
                                CbEnvioCentralDTO obj = new CbEnvioCentralDTO();
                                obj.Equinomb = c.Equinomb;
                                obj.Equicodi = c.Equicodi;

                                lstCentrales.Add(obj);
                            }

                            CbEnvioDTO regEnvio = new CbEnvioDTO();

                            regEnvio.Cbenvcodi = ConstantesCombustibles.EnvioPorIncumplimiento;
                            regEnvio.Cbenvfechaperiodo = proxMes;
                            regEnvio.ListaCentralesSinEnvio = lstCentrales;
                            regEnvio.Emprnomb = lstCentralesSinInfoPorEmpresa.First().Emprnomb;
                            regEnvio.Cbenvtipocentral = ConstantesCombustibles.CentralExistente;
                            regEnvio.Cbenvususolicitud = "";
                            regEnvio.UsuariosAgentesTotales = lstUsuarioPorEmpresa[item.Key];

                            //enviar notificacion
                            regEnvio.UsuariosAgentesTotales = lstUsuarioPorEmpresa[item.Key];
                            if (regEnvio.UsuariosAgentesTotales.Trim() == "")
                            {
                                regEnvio.UsuariosAgentesTotales = regEnvio.Cbenvususolicitud;
                            }
                            regEnvio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoUsuIncumplimiento_CE, regEnvio, "");

                            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoIncumplimientoInfo_CE, regEnvio);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Cuando un envío (con central existente o nueva) tiene 3 días de haber recibido la solicitud y está pendiente de revisión y evaluación.
        /// </summary>
        public void NotificarRecordatorioParaAtenderInformacionSolicitada(string tipoCentral, Dictionary<int, string> lstUsuarioPorEmpresa)
        {
            //Obtengo todos los envios solicitados
            List<int> lstcodis = new List<int>() { ConstantesCombustibles.EstadoSolicitud };
            List<CbEnvioDTO> listaEnviosEstado = ListXEstado(string.Join(",", lstcodis), ConstantesAppServicio.ParametroDefecto).Where(x => x.Estcomcodi == ConstantesCombustibles.EstcomcodiGas && x.Cbenvtipoenvio == ConstantesCombustibles.GuardadoOficial).ToList();
            List<CbEnvioDTO> listaEnviosEstadoYTipoCentral = listaEnviosEstado.Where(x => x.Cbenvtipocentral == tipoCentral).ToList();
            //
            foreach (var regEnvio in listaEnviosEstadoYTipoCentral)
            {
                // solo para empresas que son termicas al momento de notificar
                if (lstUsuarioPorEmpresa.ContainsKey(regEnvio.Emprcodi))
                {
                    DateTime fechaActual = ObtenerFechaSistemaPR31(regEnvio.Cbenvcodi);
                    //int dias = 3;
                    int dias = 0;
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        dias = Int32.Parse(ObtenerDiasHorasParametro(ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE));
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        dias = Int32.Parse(ObtenerDiasHorasParametro(ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN));

                    //Solo los envios solicitados
                    if (ConstantesCombustibles.EstadoSolicitud == regEnvio.Estenvcodi)
                    {
                        //
                        if (regEnvio.Cbenvfecsolicitud.AddDays(dias) <= fechaActual)
                        {
                            regEnvio.Estenvnomb = "REVISIÓN PENDIENTE";

                            //log
                            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                            logEnvio.Cbenvcodi = regEnvio.Cbenvcodi;
                            logEnvio.Estenvcodi = ConstantesCombustibles.EstadoNotificado;
                            logEnvio.Logenvusucreacion = ConstantesCombustibles.UsuarioSistema;
                            logEnvio.Logenvfeccreacion = fechaActual;
                            logEnvio.Logenvobservacion = "Recordatorio de existencia de envío(s) solicitado(s) pendiente de revisión y evaluación";
                            RegistrarLogEstadoEnvioTransaccional(logEnvio);

                            //enviar notificacion
                            regEnvio.UsuariosAgentesTotales = lstUsuarioPorEmpresa[regEnvio.Emprcodi];

                            if (regEnvio.UsuariosAgentesTotales.Trim() == "")
                            {
                                regEnvio.UsuariosAgentesTotales = regEnvio.Cbenvususolicitud;
                            }

                            regEnvio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoUsuRecorInfoRecibida, regEnvio, "");
                            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreorRecordatorioSolicitudCoes, regEnvio);

                        }
                    }
                }
            }
        }

        /// <summary>
        /// Notifica al generador que existe un envío (con central existente o nueva) pendiente de subsanación 
        /// </summary>
        /// <param name="tipoCentral"></param>
        public void NotificarRecordatorioParaSubsanarEnviosObservados(string tipoCentral, Dictionary<int, string> lstUsuarioPorEmpresa)
        {
            List<int> lstcodis = new List<int>() { ConstantesCombustibles.EstadoObservado };
            List<CbEnvioDTO> listaEnviosEstado = ListXEstado(string.Join(",", lstcodis), ConstantesAppServicio.ParametroDefecto).Where(x => x.Estcomcodi == ConstantesCombustibles.EstcomcodiGas && x.Cbenvtipoenvio == ConstantesCombustibles.GuardadoOficial).ToList();
            List<CbEnvioDTO> listaEnviosEstadoYTipoCentral = listaEnviosEstado.Where(x => x.Cbenvtipocentral == tipoCentral).ToList();

            foreach (var regEnvio in listaEnviosEstadoYTipoCentral)
            {
                // solo para empresas que son termicas al momento de notificar
                if (lstUsuarioPorEmpresa.ContainsKey(regEnvio.Emprcodi))
                {
                    DateTime fechaActual = ObtenerFechaSistemaPR31(regEnvio.Cbenvcodi);

                    int horas = 0;
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        horas = Int32.Parse(ObtenerDiasHorasParametro(ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE));
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        horas = Int32.Parse(ObtenerDiasHorasParametro(ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN));

                    if (ConstantesCombustibles.EstadoObservado == regEnvio.Estenvcodi)
                    {
                        //
                        if (regEnvio.Cbenvfecfinsubsanarobs.Value.AddHours(-horas) <= fechaActual)
                        {
                            regEnvio.Estenvnomb = "OBSERVADO";

                            CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoObservado);
                            regEnvio.FechaRevisionCoes = logEnvioUltimoObs.Logenvfeccreacion;

                            //log
                            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                            logEnvio.Cbenvcodi = regEnvio.Cbenvcodi;
                            logEnvio.Estenvcodi = ConstantesCombustibles.EstadoNotificado;
                            logEnvio.Logenvusucreacion = ConstantesCombustibles.UsuarioSistema;
                            logEnvio.Logenvfeccreacion = fechaActual;
                            logEnvio.Logenvobservacion = "Recordatorio de vencimiento de plazo para la subsanación de las observaciones";
                            RegistrarLogEstadoEnvioTransaccional(logEnvio);


                            //enviar notificacion
                            regEnvio.UsuariosAgentesTotales = lstUsuarioPorEmpresa[regEnvio.Emprcodi];
                            if (regEnvio.UsuariosAgentesTotales.Trim() == "")
                            {
                                regEnvio.UsuariosAgentesTotales = regEnvio.Cbenvususolicitud;
                            }
                            regEnvio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoUsuRecorAgentePlazoSubsanar, regEnvio, "");
                            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreorRecordatorioSubsanacionObsAgente, regEnvio);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Notifica al generador que existen envios subsanados para revisar
        /// </summary>
        /// <param name="tipoCentral"></param>
        public void NotificarRecordatorioParaAtenderInformacionSubsanada(string tipoCentral, Dictionary<int, string> lstUsuarioPorEmpresa)
        {
            //Obtengo todos los envios solicitados
            List<int> lstcodis = new List<int>() { ConstantesCombustibles.EstadoSubsanacionObs };
            List<CbEnvioDTO> listaEnviosEstado = ListXEstado(string.Join(",", lstcodis), ConstantesAppServicio.ParametroDefecto).Where(x => x.Estcomcodi == ConstantesCombustibles.EstcomcodiGas && x.Cbenvtipoenvio == ConstantesCombustibles.GuardadoOficial).ToList();
            List<CbEnvioDTO> listaEnviosEstadoYTipoCentral = listaEnviosEstado.Where(x => x.Cbenvtipocentral == tipoCentral).ToList();
            //
            foreach (var regEnvio in listaEnviosEstadoYTipoCentral)
            {
                // solo para empresas que son termicas al momento de notificar
                if (lstUsuarioPorEmpresa.ContainsKey(regEnvio.Emprcodi))
                {
                    DateTime fechaActual = ObtenerFechaSistemaPR31(regEnvio.Cbenvcodi);

                    int dias = 0;
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        dias = Int32.Parse(ObtenerDiasHorasParametro(ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE));
                    if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        dias = Int32.Parse(ObtenerDiasHorasParametro(ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN));

                    //Recordatorio al COES
                    if (ConstantesCombustibles.EstadoSubsanacionObs == regEnvio.Estenvcodi)
                    {
                        CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoObservado);
                        CbLogenvioDTO logEnvioUltimoSubObs = GetUltimoCbLogEnvio(regEnvio.Cbenvcodi, ConstantesCombustibles.EstadoSubsanacionObs);

                        //                     
                        if (logEnvioUltimoSubObs.Logenvfeccreacion.AddDays(dias) <= fechaActual)
                        {
                            regEnvio.Estenvnomb = "REVISIÓN PENDIENTE";

                            //log
                            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                            logEnvio.Cbenvcodi = regEnvio.Cbenvcodi;
                            logEnvio.Estenvcodi = ConstantesCombustibles.EstadoNotificado;
                            logEnvio.Logenvusucreacion = ConstantesCombustibles.UsuarioSistema;
                            logEnvio.Logenvfeccreacion = fechaActual;
                            logEnvio.Logenvobservacion = "Recordatorio vencimiento de plazo para atender la subsanación de las observaciones";
                            RegistrarLogEstadoEnvioTransaccional(logEnvio);

                            //correo
                            regEnvio.UsuariosAgentesTotales = lstUsuarioPorEmpresa[regEnvio.Emprcodi];
                            if (regEnvio.UsuariosAgentesTotales.Trim() == "")
                            {
                                regEnvio.UsuariosAgentesTotales = regEnvio.Cbenvususolicitud;
                            }
                            regEnvio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoUsuRecorCoesRevisarSubs, regEnvio, "");
                            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreorRecordatorioSubsanacionObsCoes, regEnvio);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Devuelve si una plantilla es Notificacion o Recordatorio
        /// </summary>
        /// <param name="plantillacodi"></param>
        /// <returns></returns>
        public int ObtenerTipoCorreo(int plantillacodi)
        {
            int salida = -1;
            switch (plantillacodi)
            {
                case ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CE:
                case ConstantesCombustibles.NotificacionIncumplimientoEntregaInformacionFormato3_CN:
                case ConstantesCombustibles.NotificacionRegistroSolicitud_CE:
                case ConstantesCombustibles.NotificacionRegistroSolicitud_CN:
                case ConstantesCombustibles.NotificacionCancelarEnvio_CE:
                case ConstantesCombustibles.NotificacionCancelarEnvio_CN:
                case ConstantesCombustibles.NotificacionObservacionEnvío_CE:
                case ConstantesCombustibles.NotificacionObservacionEnvío_CN:
                case ConstantesCombustibles.NotificacionSubsanacionEnvío_CE:
                case ConstantesCombustibles.NotificacionSubsanacionEnvío_CN:
                case ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CE:
                case ConstantesCombustibles.NotificacionCulminacionPlazoSubsanacion_CN:
                case ConstantesCombustibles.NotificacionAprobacionEnvío_CE:
                case ConstantesCombustibles.NotificacionAprobacionEnvío_CN:
                case ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CE:
                case ConstantesCombustibles.NotificacionAprobacionParcialEnvío_CN:
                case ConstantesCombustibles.NotificacionDesaprobacionEnvío_CE:
                case ConstantesCombustibles.NotificacionDesaprobacionEnvío_CN:
                case ConstantesCombustibles.NotificacionAsignacionEnvío_CN:
                case ConstantesCombustibles.NotificacionAmpliacionPlazoEnvio_CE:
                case ConstantesCombustibles.NotificacionAmpliacionPlazoEnvio_CN:
                    salida = ConstantesCombustibles.EsNotificacion;
                    break;
                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CE:
                case ConstantesCombustibles.RecordatorioRevisarEvaluarInformaciónRecibida_CN:
                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CE:
                case ConstantesCombustibles.RecordatorioInformarVencimientoPlazoSubsanacion_CN:
                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CE:
                case ConstantesCombustibles.RecordatorioRevisarEvaluarSubsanacionPresentadas_CN:
                    salida = ConstantesCombustibles.EsRecordatorio;
                    break;

            }

            return salida;
        }

        #endregion

        #region Configuracion Correos

        /// <summary>
        /// Devuelve el listado de correos enviados segun un rango de fechas
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<SiCorreoDTO> ListarCorreosEnviados(DateTime fechaInicio, DateTime fechaFin)
        {
            List<SiCorreoDTO> lstSalida = new List<SiCorreoDTO>();
            lstSalida = FactorySic.GetSiCorreoRepository().GetByCriteria(ConstantesAppServicio.ParametroDefecto, fechaInicio, fechaFin, ConstantesCombustibles.PlantillaCorreosEnviados.ToString()).OrderByDescending(x => x.Corrcodi).ToList();
            lstSalida = FormatearCorreos(lstSalida);
            return lstSalida;
        }

        /// <summary>
        /// Da formato a los correos
        /// </summary>
        /// <param name="lstCorreos"></param>
        /// <returns></returns>
        public List<SiCorreoDTO> FormatearCorreos(List<SiCorreoDTO> lstCorreos)
        {
            List<SiCorreoDTO> lstSalida = new List<SiCorreoDTO>();

            foreach (var correo in lstCorreos)
            {
                int longitudTexto = correo.Corrasunto.Length;
                correo.CorrasuntoDesc = longitudTexto > 0 ? (longitudTexto > 120 ? correo.Corrasunto.Substring(0, 120) + "..." : correo.Corrasunto) : "";
                correo.CorrfechaenvioDesc = correo.Corrfechaenvio.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
                correo.Corrusuenvio = correo.Corrusuenvio != null ? correo.Corrusuenvio : "";
                lstSalida.Add(correo);
            }

            return lstSalida;
        }

        /// <summary>
        /// Envia Mensajes a los agentes
        /// </summary>
        /// <param name="correo"></param>
        /// <param name="usuario"></param>
        /// <param name="pathTemporal"></param>
        /// <param name="files"></param>
        public void EnviarMensajeAgentes(SiCorreoDTO correo, string usuario, string pathTemporal, List<string> files)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            string fromEmail = TipoPlantillaCorreo.MailFrom; //webapp@coes.org.pe

            if (fromEmail == "")
                throw new ArgumentException("No se pudo notificar el evento dado que se encontró un correo Para inválido.");

            List<string> toEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(correo.Corrto, false);
            List<string> ccEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(correo.Corrcc, false);
            List<string> bccEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(correo.Corrbcc, true);

            string asunto = correo.Corrasunto;
            string contenido = correo.Corrcontenido;


            try
            {
                conn = FactorySic.GetCbArchivoenvioRepository().BeginConnection();
                tran = FactorySic.GetCbArchivoenvioRepository().StartTransaction(conn);

                correo.Corrfechaenvio = DateTime.Now;
                correo.Corrfechaperiodo = DateTime.Now;
                correo.Plantcodi = ConstantesCombustibles.PlantillaCorreosEnviados;
                correo.Corrusuenvio = usuario;
                int miCorrcodi = FactorySic.GetSiCorreoRepository().Save(correo);

                List<CbArchivoenvioDTO> lstArchivos = new List<CbArchivoenvioDTO>();
                List<string> listFiles = new List<string>();
                int num = 0;
                foreach (string file in files)
                {
                    if (!string.IsNullOrEmpty(file))
                    {
                        if (!listFiles.Contains(pathTemporal + file))
                        {
                            listFiles.Add(pathTemporal + file);
                            num++;
                            CbArchivoenvioDTO objArchivo = new CbArchivoenvioDTO();

                            //objArchivo.Cbvercodi = ConstantesCombustibles.PorDefecto;
                            //objArchivo.Ccombcodi = ConstantesCombustibles.PorDefecto;
                            objArchivo.Cbvercodi = 1;  //SOS
                            objArchivo.Ccombcodi = 97;  //SOS
                            objArchivo.Cbarchnombreenvio = file;
                            objArchivo.Cbarchnombrefisico = "archivo_mensaje_pr31Gaseoso_" + miCorrcodi + string.Format("{0:D3}", num);
                            objArchivo.Cbarchorden = num;
                            objArchivo.Cbarchestado = 1;
                            objArchivo.Corrcodi = miCorrcodi;

                            lstArchivos.Add(objArchivo);
                        }
                    }
                }


                //Guardamos CBArchivoEnvio
                int cbarchcodiCorr = FactorySic.GetCbArchivoenvioRepository().GetMaxId();
                foreach (var regArchivo in lstArchivos)
                {
                    regArchivo.Cbarchcodi = cbarchcodiCorr;
                    this.SaveCbArchivoenvio(regArchivo, conn, tran);
                    cbarchcodiCorr++;
                }


                //Enviamos Correo
                string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                COES.Base.Tools.Util.SendEmail(toEmails, ccEmails, bccEmails, asuntoSendEmail, contenido, "", listFiles);

                //Copiamos en el fileserver
                #region Guardar archivos en FileServer
                foreach (var regArchivo in lstArchivos)
                {
                    if (!string.IsNullOrEmpty(regArchivo.Cbarchnombrefisico))
                    {
                        string pathAlternativo = GetPathPrincipal();
                        var pathDestino = GetPathSubcarpeta(ConstantesCombustibles.SubcarpetaArchivoAdjuntado) + miCorrcodi + "\\";

                        FileServer.CreateFolder("", pathDestino, pathAlternativo); // para asegurarnos de su existencia
                        var resultado = FileServer.CopiarFileAlter(pathTemporal, pathDestino, regArchivo.Cbarchnombreenvio, pathAlternativo);
                        if (resultado != 1)
                        {
                            throw new ArgumentException(string.Format("Ocurrió un error cuando se copia el archivo {0} de {1} a {2}.", regArchivo.Cbarchnombrefisico, pathTemporal, pathDestino));
                        }
                    }
                }

                #endregion

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        /// <summary>
        /// Devuelve el listado de archivos adjuntados
        /// </summary>
        /// <param name="corrcodi"></param>
        /// <returns></returns>
        public List<CbArchivoenvioDTO> ObtenerArchivosAdjuntados(int corrcodi)
        {
            List<CbArchivoenvioDTO> lstSalida = new List<CbArchivoenvioDTO>();
            lstSalida = FactorySic.GetCbArchivoenvioRepository().GetByCorreo(corrcodi.ToString());

            return lstSalida;
        }

        #endregion

        #region Listado_Envios_Intranet

        /// <summary>
        /// Devuelve el listado de empresas segun las centrales termicas existentes
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ObtenerListadoEmpresas(string tipoCentral)
        {
            List<SiEmpresaDTO> lstSalida = new List<SiEmpresaDTO>();

            List<CbCentralxfenergDTO> lstCentralesTermicas = ObtenerListadoCentralesTermicas(true);
            if (ConstantesCombustibles.CentralExistente == tipoCentral)
                lstCentralesTermicas = lstCentralesTermicas.Where(x => x.Cbcxfeexistente == 1).ToList();
            if (ConstantesCombustibles.CentralNueva == tipoCentral)
                lstCentralesTermicas = lstCentralesTermicas.Where(x => x.Cbcxfenuevo == 1).ToList();

            var lista = lstCentralesTermicas.GroupBy(x => new { x.Emprcodi, x.Emprnomb }).ToList();

            foreach (var item in lista)
            {
                SiEmpresaDTO obj = new SiEmpresaDTO();
                obj.Emprcodi = item.Key.Emprcodi;
                obj.Emprnomb = item.Key.Emprnomb;

                lstSalida.Add(obj);
            }

            return lstSalida;
        }

        public List<GenericoDTO> ListarTipoCentralXEmpresa(List<int> listaEmprcodis)
        {
            List<CbCentralxfenergDTO> listaCfgCentral = ObtenerListadoCentralesTermicas(true)
                                                        .Where(x => listaEmprcodis.Contains(x.Emprcodi)).ToList();

            List<GenericoDTO> listaTipoCentral = new List<GenericoDTO>();

            if (listaCfgCentral.Find(x => x.Cbcxfeexistente == 1) != null)
                listaTipoCentral.Add(new GenericoDTO() { String1 = ConstantesCombustibles.CentralExistente, String2 = "Existente" });
            if (listaCfgCentral.Find(x => x.Cbcxfenuevo == 1) != null)
                listaTipoCentral.Add(new GenericoDTO() { String1 = ConstantesCombustibles.CentralNueva, String2 = "Nuevo" });

            return listaTipoCentral;
        }

        /// <summary>
        /// Genera el html de las carpetas (estados de envios)
        /// </summary>
        /// <param name="url"></param>
        /// <param name="emprcodi"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarHtmlCarpeta(string emprcodi, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, string omitirTipoCarga, int ambiente)
        {
            List<ExtEstadoEnvioDTO> listaEstado = ListarTotalXEstadoEnvioXFiltro(emprcodi, ConstantesAppServicio.ParametroDefecto, fechaInicio, fechaFin.AddDays(1)
                                                                , ConstantesCombustibles.CombustiblesGaseosos, omitirTipoCarga);

            //REQ 2023-002153: Omitir carpeta asignado
            if ((int)ConstantesCombustibles.Interfaz.Extranet == ambiente)
                listaEstado = listaEstado.Where(x => x.Estenvcodi != ConstantesCombustibles.EstadoAsignado).ToList();

            string htmlCarpeta = GenerarHtmlCarpetasEnvio(estenvcodi, listaEstado);

            return htmlCarpeta;
        }

        /// <summary>
        /// Devuelve el listado de envios
        /// </summary>
        /// <param name="emprcodis"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoCombustible"></param>
        /// <returns></returns>
        public List<CbEnvioDTO> ObtenerListadoEnvios(string emprcodis, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, string tipoCombustible)
        {
            List<CbEnvioDTO> lstSalida = new List<CbEnvioDTO>();
            List<CbEnvioDTO> lstTemp = new List<CbEnvioDTO>();

            lstTemp = FactorySic.GetCbEnvioRepository().ObtenerEnvios(emprcodis, estenvcodi, fechaInicio, fechaFin, tipoCombustible, ConstantesCombustibles.GuardadoOficial);

            //Para el estado solicitado (Estenvcodi = 1) se debe sumar las solicitudes de asignacion (Estenvcodi = 11)
            if (estenvcodi == ConstantesCombustibles.EstadoSolicitud)
            {
                List<CbEnvioDTO> lstSalidaSolicitudesAsignacion = FactorySic.GetCbEnvioRepository().ObtenerEnvios(emprcodis, ConstantesCombustibles.EstadoSolicitudAsignacion, fechaInicio, fechaFin, tipoCombustible, ConstantesCombustibles.GuardadoOficial);
                lstTemp.AddRange(lstSalidaSolicitudesAsignacion);
            }

            lstSalida = lstTemp.OrderByDescending(x => x.Cbenvcodi).ToList();

            foreach (var reg in lstSalida)
            {
                FormatearCbEnvio(reg, new List<CbVersionDTO>(), new List<CbLogenvioDTO>());
            }
            return lstSalida;
        }

        #endregion

        #region Operaciones en envios

        #region Nuevo envío (carga inicial intranet)

        public CbEnvioDTO RealizarSolicitudCargaInicialCombustibleGas(int idEnvio, DateTime fechaVigencia, int idEmpresa, string tipoCentral
                                        , string usuarioExtranet, string estado, string plazo
                                        , List<PR31FormGasCentral> listaFormularioCentral, PR31FormGasSustento formularioSustento
                                        , string tipoCarga
                                        , int tipoGuardado, string descVersion, int? condicionEnvioPrevioTemporal, int interfaz)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);
            bool esNuevoRegistro = idEnvio <= 0;
            int estadoEnvio = ConstantesCombustibles.EstadoAprobado;

            //envio
            CbEnvioDTO regEnvio = new CbEnvioDTO();
            regEnvio.Estcomcodi = ConstantesCombustibles.EstcomcodiGas;
            regEnvio.Emprcodi = idEmpresa;
            regEnvio.Cbenvususolicitud = usuarioExtranet;
            regEnvio.Cbenvfecsolicitud = fechaRegistro;
            regEnvio.Cbenvestado = estado;
            regEnvio.Cbenvplazo = plazo;
            regEnvio.Cbenvtipocentral = tipoCentral;
            regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);
            regEnvio.Cbenvfechaperiodo = fechaVigencia;
            regEnvio.Cbftcodi = listaFormularioCentral[0].Cbftcodi;
            regEnvio.Cbenvtipocarga = tipoCarga;
            regEnvio.Cbenvusucarga = usuarioExtranet;
            regEnvio.Estenvcodi = estadoEnvio;

            //log
            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
            logEnvio.Estenvcodi = estadoEnvio;
            logEnvio.Logenvusucreacion = usuarioExtranet;
            logEnvio.Logenvfeccreacion = fechaRegistro;
            regEnvio.LogEnvioActual = logEnvio;

            //estructura de tablas para guardar grilla y archivos
            CbVersionDTO version = GetVersionFromModeloWebGas(regEnvio, usuarioExtranet, fechaRegistro, listaFormularioCentral, formularioSustento);
            regEnvio.VersionActual = version;

            bool tieneModificacion = true;

            //guardar informacion y archivos
            if (esNuevoRegistro || tieneModificacion)
            {
                int cbenvcodi = GuardarEnvioGaseosoTransaccional(regEnvio, tipoGuardado, "", "");
                regEnvio.Cbenvcodi = cbenvcodi;
                regEnvio.Cbvercodi = regEnvio.VersionActual.Cbvercodi;
            }

            return regEnvio;
        }

        #endregion

        #region Observar Envio

        /// <summary>
        /// Observar un envio gaseoso
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="fechaMaxRespuesta"></param>
        /// <param name="listaCorreoCCagente"></param>
        /// <param name="listaFormularioCentral"></param>
        /// <param name="formularioSustento"></param>
        /// <param name="otrosUsuariosEmpresa"></param>
        /// <exception cref="ArgumentException"></exception>
        public CbEnvioDTO ObservarEnvioPr31Gaseoso(int idEnvio, string usuarioIntranet, DateTime fechaMaxRespuesta, List<string> listaCorreoCCagente
                                    , List<PR31FormGasCentral> listaFormularioCentral, PR31FormGasSustento formularioSustento, string otrosUsuariosEmpresa)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);

            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);

            DateTime fecRealMaxRespuesta = fechaMaxRespuesta.Date.AddDays(1).AddSeconds(-1);
            int result = DateTime.Compare(regEnvio.Cbenvfecsolicitud, fecRealMaxRespuesta);
            if (result > 0)
            {
                throw new ArgumentException("La fecha máxima de respuesta no puede ser menor a la fecha de solicitud.");
            }

            if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud)
            {
                regEnvio.Estenvcodi = ConstantesCombustibles.EstadoObservado;
                regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);
                regEnvio.Cbenvfecfinsubsanarobs = fecRealMaxRespuesta;
                regEnvio.Cbenvfecampl = null;
                regEnvio.DiffDiaHabil = ConstantesCombustibles.DiasGaseosoSubsanarObs;


                //log
                int plazoEnvio = ObtenerPlazoPR31Gaseoso(regEnvio, (int)ConstantesCombustibles.Interfaz.Intranet, false, regEnvio.Cbenvtipocentral, ConstantesCombustibles.EstadoSolicitud, ConstantesCombustibles.EstadoObservado);

                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                logEnvio.Logenvusucreacion = usuarioIntranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                logEnvio.Logenvobservacion = "Envío observado. Fecha máxima de respuesta: " + regEnvio.Cbenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull) + ".";
                logEnvio.Logenvplazo = plazoEnvio;
                regEnvio.LogEnvioActual = logEnvio;

                //estructura de tablas para guardar grilla y archivos
                CbVersionDTO version = GetVersionFromModeloWebGas(regEnvio, usuarioIntranet, fechaRegistro, listaFormularioCentral, formularioSustento);
                regEnvio.VersionActual = version;

                //guardar informacion y archivos
                ActualizarEnvioGaseosoTransaccional(regEnvio);
                regEnvio.Cbvercodi = regEnvio.VersionActual.Cbvercodi;

                //enviar notificacion
                CbEnvioDTO envio = GetByIdCbEnvio(idEnvio);
                envio.ListaCorreoCCagente = listaCorreoCCagente;
                envio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoObservado, envio, "");
                envio.UsuariosAgentesTotales = envio.Cbenvususolicitud;
                EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoObservacion, envio);
            }
            else
            {
                throw new ArgumentException("El envío no se encuentra en estado Solicitud de Observación. No se puede observar.");
            }

            return regEnvio;
        }

        #endregion

        #region Aprobar envio

        /// <summary>
        /// Aprueba un envio gaseoso
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="listaCorreoCCagente"></param>
        /// <param name="listaFormularioCentral"></param>
        /// <param name="formularioSustento"></param>
        /// <param name="otrosUsuariosEmpresa"></param>
        public CbEnvioDTO AprobarEnvioPr31Gaseoso(int idEnvio, string usuarioIntranet, List<string> listaCorreoCCagente
                                , List<PR31FormGasCentral> listaFormularioCentral, PR31FormGasSustento formularioSustento, string otrosUsuariosEmpresa)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);
            int estadoEnvio = ConstantesCombustibles.EstadoAprobado;

            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);
            regEnvio.Estenvcodi = estadoEnvio;
            regEnvio.Cbenvusuaprobacion = usuarioIntranet;
            regEnvio.Cbenvfecaprobacion = fechaRegistro;
            regEnvio.Cbenvfecmodificacion = fechaRegistro;
            regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);

            //log
            int plazoEnvio = ObtenerPlazoPR31Gaseoso(regEnvio, (int)ConstantesCombustibles.Interfaz.Intranet, false, regEnvio.Cbenvtipocentral, null, ConstantesCombustibles.EstadoAprobado);

            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
            logEnvio.Estenvcodi = estadoEnvio;
            logEnvio.Logenvusucreacion = usuarioIntranet;
            logEnvio.Logenvfeccreacion = fechaRegistro;
            regEnvio.LogEnvioActual = logEnvio;
            logEnvio.Logenvplazo = plazoEnvio;

            //estructura de tablas para guardar grilla y archivos
            CbVersionDTO version = GetVersionFromModeloWebGas(regEnvio, usuarioIntranet, fechaRegistro, listaFormularioCentral, formularioSustento);
            regEnvio.VersionActual = version;

            //guardar informacion
            ActualizarEnvioGaseosoTransaccional(regEnvio);
            regEnvio.Cbvercodi = regEnvio.VersionActual.Cbvercodi;

            //enviar notificacion
            CbEnvioDTO envio = GetByIdCbEnvio(idEnvio);
            envio.ListaCorreoCCagente = listaCorreoCCagente;
            envio.UsuariosAgentesTotales = envio.Cbenvususolicitud + ";" + otrosUsuariosEmpresa;
            envio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoAprobado, envio, "");

            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoAprobado, envio);

            return regEnvio;
        }

        #endregion

        #region Desaprobar envio

        /// <summary>
        /// Desaprueba un envio
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="mensaje"></param>
        /// <param name="listaCorreoCCagente"></param>
        /// <param name="listaFormularioCentral"></param>
        /// <param name="formularioSustento"></param>
        /// <param name="otrosUsuariosEmpresa"></param>
        public CbEnvioDTO DesaprobarEnvioPr31Gaseoso(int idEnvio, string usuarioIntranet, string mensaje, List<string> listaCorreoCCagente
                                    , List<PR31FormGasCentral> listaFormularioCentral, PR31FormGasSustento formularioSustento, string otrosUsuariosEmpresa)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);
            int estadoEnvio = ConstantesCombustibles.EstadoDesaprobado;

            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);
            regEnvio.Estenvcodi = estadoEnvio;
            regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
            regEnvio.Cbenvfecmodificacion = fechaRegistro;
            regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);
            regEnvio.Cbenvobs = mensaje;

            //log
            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
            logEnvio.Estenvcodi = estadoEnvio;
            logEnvio.Logenvusucreacion = usuarioIntranet;
            logEnvio.Logenvfeccreacion = fechaRegistro;
            logEnvio.Logenvobservacion = mensaje;
            regEnvio.LogEnvioActual = logEnvio;

            //estructura de tablas para guardar grilla y archivos
            CbVersionDTO version = GetVersionFromModeloWebGas(regEnvio, usuarioIntranet, fechaRegistro, listaFormularioCentral, formularioSustento);
            regEnvio.VersionActual = version;

            //guardar informacion
            ActualizarEnvioGaseosoTransaccional(regEnvio);
            regEnvio.Cbvercodi = regEnvio.VersionActual.Cbvercodi;

            CbEnvioDTO envio = GetByIdCbEnvio(idEnvio);
            envio.ListaCorreoCCagente = listaCorreoCCagente;

            envio.UsuariosAgentesTotales = envio.Cbenvususolicitud + ";" + otrosUsuariosEmpresa;
            envio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoDesaprobado, envio, "");

            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoDesaprobado, envio);

            return regEnvio;
        }

        #endregion

        #region Aprobar parcialmente envio

        /// <summary>
        /// Aprobar parcialmente envio
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="mensaje"></param>
        /// <param name="listaFormularioCentral"></param>
        /// <param name="formularioSustento"></param>
        /// <param name="listaCorreoCCagente"></param>
        /// <param name="listaCentralesAprobadas"></param>
        /// <param name="listaCentralesDesaprobadas"></param>
        /// <param name="otrosUsuariosEmpresa"></param>
        public CbEnvioDTO AprobarParcialmenteEnvioPr31Gaseoso(int idEnvio, string usuarioIntranet, string mensaje
                                            , List<PR31FormGasCentral> listaFormularioCentral, PR31FormGasSustento formularioSustento
                                            , List<string> listaCorreoCCagente, string otrosUsuariosEmpresa)
        {
            /** Seteamos valores para guardar el envio **/
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);
            int estadoEnvio = ConstantesCombustibles.EstadoAprobadoParcialmente;

            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);
            regEnvio.Estenvcodi = estadoEnvio;
            regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
            regEnvio.Cbenvfecmodificacion = fechaRegistro;
            regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);
            regEnvio.Cbenvobs = mensaje;

            //log
            int plazoEnvio = ObtenerPlazoPR31Gaseoso(regEnvio, (int)ConstantesCombustibles.Interfaz.Intranet, false, regEnvio.Cbenvtipocentral, null, ConstantesCombustibles.EstadoAprobadoParcialmente);

            CbLogenvioDTO logEnvio = new CbLogenvioDTO();
            logEnvio.Estenvcodi = estadoEnvio;
            logEnvio.Logenvusucreacion = usuarioIntranet;
            logEnvio.Logenvfeccreacion = fechaRegistro;
            logEnvio.Logenvobservacion = mensaje;
            regEnvio.LogEnvioActual = logEnvio;
            logEnvio.Logenvplazo = plazoEnvio;

            //estructura de tablas para guardar grilla y archivos
            CbVersionDTO version = GetVersionFromModeloWebGas(regEnvio, usuarioIntranet, fechaRegistro, listaFormularioCentral, formularioSustento);
            regEnvio.VersionActual = version;

            //guardar informacion
            ActualizarEnvioGaseosoTransaccional(regEnvio);
            regEnvio.Cbvercodi = regEnvio.VersionActual.Cbvercodi;

            CbEnvioDTO envio = GetByIdCbEnvio(idEnvio);
            envio.ListaCentralesAprobadas = version.ListaCentralXVersion.Where(x => x.Cbcentestado == "A").Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi, Equinomb = x.Equinomb }).ToList();
            envio.ListaCentralesDesaprobadas = version.ListaCentralXVersion.Where(x => x.Cbcentestado == "D").Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi, Equinomb = x.Equinomb }).ToList();

            envio.ListaCorreoCCagente = listaCorreoCCagente;
            envio.UsuariosAgentesTotales = envio.Cbenvususolicitud + ";" + otrosUsuariosEmpresa;
            envio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoAprobadoParcialmente, envio, "");

            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoAprobadoParcial, envio);

            return regEnvio;
        }
        #endregion

        #region Asignar costo
        /// <summary>
        /// Devuelve el costo de combustible con el que fue solicitado la asignacion
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <returns></returns>
        public decimal? ObtenerCostoCombustibleSolicitado(int idEnvio)
        {
            decimal? salida = null;
            decimal? valNulo = null;

            //cuando ya fue solicitado solo busca dicho valor en CBDATOS con su respectivo CbConcepto
            CbDatosDTO objDatos = FactorySic.GetCbDatosRepository().GetCostoCombustibleSolicitado(ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso, idEnvio);
            salida = objDatos != null ? objDatos.Cbevdavalor != null ? (objDatos.Cbevdavalor.Trim() != "" ? Convert.ToDecimal(objDatos.Cbevdavalor) : valNulo) : valNulo : valNulo;

            return salida;
        }

        /// <summary>
        /// Devuelve el costo de combustible actual
        /// </summary>
        /// <returns></returns>
        public decimal? ObtenerCostoCombustibleActual()
        {
            decimal? salida = null;

            var costoTarifarioActual = ObtenerCostoCombustibleVigente(DateTime.Now);
            salida = costoTarifarioActual;

            return salida;
        }

        /// <summary>
        /// Asigna el costo de combustible gaseoso 
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="listaCorreoCCagente"></param>
        public void AsignarEnvioPr31Gaseoso(int idEnvio, string usuarioIntranet, List<string> listaCorreoCCagente
                                            , List<PR31FormGasCentral> listaFormularioCentral, string otrosUsuariosEmpresa)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);
            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);

            if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitudAsignacion)
            {
                regEnvio.Estenvcodi = ConstantesCombustibles.EstadoAsignado;
                regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);

                //log
                int plazoEnvio = ObtenerPlazoPR31Gaseoso(regEnvio, (int)ConstantesCombustibles.Interfaz.Intranet, false, regEnvio.Cbenvtipocentral, null, ConstantesCombustibles.EstadoAsignado);

                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                logEnvio.Logenvusucreacion = usuarioIntranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                logEnvio.Logenvobservacion = "Costo de combustible gaseoso asignado";
                regEnvio.LogEnvioActual = logEnvio;
                logEnvio.Logenvplazo = plazoEnvio;

                //estructura de tablas para guardar grilla y archivos
                CbVersionDTO version = GetVersionFromModeloWebGas(regEnvio, usuarioIntranet, fechaRegistro, listaFormularioCentral, null);
                regEnvio.VersionActual = version;

                //guardar informacion y archivos
                ActualizarEnvioGaseosoTransaccional(regEnvio);

                //enviar notificacion
                CbEnvioDTO envio = GetByIdCbEnvio(idEnvio);
                envio.ListaCorreoCCagente = listaCorreoCCagente;

                envio.UsuariosAgentesTotales = envio.Cbenvususolicitud + ";" + otrosUsuariosEmpresa;
                envio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoAsignado, envio, "");

                EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoAsignado, envio);
            }
            else
            {
                throw new ArgumentException("El envío no se encuentra en estado Solicitud de Observación. No se puede observar.");
            }
        }

        /// <summary>
        /// Devuelve el costo de combustible vigente a cierta fecha
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        private decimal ObtenerCostoCombustibleVigente(DateTime fecha)
        {
            decimal resultado = 0;

            var lista = (new MigracionesAppServicio()).ListarGrupodatHistoricoValores(ConstantesCombustibles.ConcepcodiCostoCombustibleGaseoso, 0)
                                                        .Where(x => x.Deleted == 0 && x.Fechadat <= fecha).OrderByDescending(x => x.Fechadat).ToList();

            var find = lista.FirstOrDefault();
            if (find != null)
            {
                decimal.TryParse(find.Formuladat, out resultado);
            }

            return resultado;
        }
        #endregion

        #region Ampliar Plazo

        /// <summary>
        /// Amplia el plazo para envio de informacion
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="fechaAmpliada"></param>
        public void AmpliarPlazoEnvioPr31Gaseoso(int idEnvio, string usuarioIntranet, DateTime fechaAmpliada, string otrosUsuariosEmpresa)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);

            //envio
            CbEnvioDTO regEnvio = GetByIdCbEnvio(idEnvio);

            //solo para los envios subsanados
            if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSubsanacionObs)
            {
                regEnvio.Estenvcodi = ConstantesCombustibles.EstadoObservado;
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);
                regEnvio.Cbenvfecampl = fechaAmpliada;

                ////obtenemos fecha de revision de coes
                //CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(idEnvio, ConstantesCombustibles.EstadoObservado);
                //regEnvio.FechaRevisionCoes = logEnvioUltimoObs.Logenvfeccreacion;

                //log
                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                logEnvio.Logenvusucreacion = usuarioIntranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                logEnvio.Logenvobservacion = "Se Amplió el plazo para el envío de levantamiento de observaciones hasta " + fechaAmpliada.ToString(ConstantesAppServicio.FormatoFechaFull);
                regEnvio.LogEnvioActual = logEnvio;

                //guardar informacion y archivos
                ActualizarEnvioGaseosoTransaccional(regEnvio);

                //enviar notificacion
                regEnvio.UsuariosAgentesTotales = regEnvio.Cbenvususolicitud + ";" + otrosUsuariosEmpresa;
                regEnvio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoUsuAmpliado, regEnvio, "");
                //EnvioCorreoExtranet(ConstantesCombustibles.TipoCorreoAmplSubsanarObs, regEnvio);
                EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoAmplSubsanarObs, regEnvio);
            }
            else
            {
                throw new ArgumentException("El envío no se encuentra en estado de Subsanación de Observaciones. No se puede ampliar plazo.");
            }
        }

        #endregion

        /// <summary>
        /// Devuelve el ultimo agente de la emrpesa que realizó algun evento
        /// </summary>
        /// <param name="accionARealizar"></param>
        /// <param name="envio"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        private string ObtenerUsuarioUltimoEvento(int accionARealizar, CbEnvioDTO envio, string user)
        {
            string ultimoUsuario = "";
            //segun sea la accion a realizar
            switch (accionARealizar)
            {
                //hubo Incumplimiento de entrega de info para CE
                case ConstantesCombustibles.EstadoUsuIncumplimiento_CE:
                    //NO hay ultimo usuario
                    ultimoUsuario = "";
                    break;

                //se esta enviando Solicitud Envío
                case ConstantesCombustibles.EstadoSolicitud:
                    //el mismo quien la solicitó
                    ultimoUsuario = envio.Cbenvususolicitud;
                    break;

                //se esta subsanando un Envío
                case ConstantesCombustibles.EstadoSubsanacionObs:
                    //el que esta enviando la subsanacion
                    ultimoUsuario = user;
                    break;

                //se va a Cancelar un Envío
                case ConstantesCombustibles.EstadoCancelado:
                    //el mismo quien la solicitó
                    ultimoUsuario = envio.Cbenvususolicitud;
                    break;

                //se esta Observando un Envío
                case ConstantesCombustibles.EstadoObservado:
                    //el mismo quien la solicitó
                    ultimoUsuario = envio.Cbenvususolicitud;
                    break;

                //hubo Culminacion de plazo para subsanar Envío
                case ConstantesCombustibles.EstadoUsuFinPlazoSubs:
                    //solo se notifica a los solicitados o subsanados
                    string estenvcodisFP = ConstantesCombustibles.EstadoSolicitud + "," + ConstantesCombustibles.EstadoSubsanacionObs;
                    List<CbLogenvioDTO> lstLogEnviosFP = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envio.Cbenvcodi.ToString(), estenvcodisFP).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderByDescending(x => x.Logenvcodi).ToList();
                    CbLogenvioDTO ultimoEventoFP = lstLogEnviosFP.First();
                    ultimoUsuario = ultimoEventoFP.Logenvusucreacion;
                    break;

                //Se va a Aprobar un Envío
                case ConstantesCombustibles.EstadoAprobado:
                    //solo se aprueban los solicitados o subsanados
                    string estenvcodisA = ConstantesCombustibles.EstadoSolicitud + "," + ConstantesCombustibles.EstadoSubsanacionObs;
                    List<CbLogenvioDTO> lstLogEnviosA = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envio.Cbenvcodi.ToString(), estenvcodisA).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderByDescending(x => x.Logenvcodi).ToList();
                    CbLogenvioDTO ultimoEventoA = lstLogEnviosA.First();
                    ultimoUsuario = ultimoEventoA.Logenvusucreacion;

                    break;

                //se va a Aprobar Parcialmente un Envío
                case ConstantesCombustibles.EstadoAprobadoParcialmente:
                    //solo se aprueban parcialmente los solicitados o subsanados
                    string estenvcodisAP = ConstantesCombustibles.EstadoSolicitud + "," + ConstantesCombustibles.EstadoSubsanacionObs;
                    List<CbLogenvioDTO> lstLogEnviosAP = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envio.Cbenvcodi.ToString(), estenvcodisAP).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderByDescending(x => x.Logenvcodi).ToList();
                    CbLogenvioDTO ultimoEventoAP = lstLogEnviosAP.First();
                    ultimoUsuario = ultimoEventoAP.Logenvusucreacion;
                    break;

                //Se va a Desaprobar un Envío
                case ConstantesCombustibles.EstadoDesaprobado:
                    //solo se desaprueban los solicitados o subsanados
                    string estenvcodisD = ConstantesCombustibles.EstadoSolicitud + "," + ConstantesCombustibles.EstadoSubsanacionObs;
                    List<CbLogenvioDTO> lstLogEnviosD = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envio.Cbenvcodi.ToString(), estenvcodisD).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderByDescending(x => x.Logenvcodi).ToList();
                    CbLogenvioDTO ultimoEventoD = lstLogEnviosD.First();
                    ultimoUsuario = ultimoEventoD.Logenvusucreacion;
                    break;

                //Se va aprobar Asignacion Envío
                case ConstantesCombustibles.EstadoAsignado:
                    //el mismo quien la solicitó
                    ultimoUsuario = envio.Cbenvususolicitud;
                    break;

                //se va Ampliar plazo de Envío
                case ConstantesCombustibles.EstadoUsuAmpliado:
                    //solo se amplian los subsanados
                    string estenvcodisAmp = ConstantesCombustibles.EstadoSolicitud + "," + ConstantesCombustibles.EstadoSubsanacionObs.ToString();//solo ES subsanados pero se le agrega solicitud por si subsanado lo hizo el SISTEMA
                    List<CbLogenvioDTO> lstLogEnviosAmp = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envio.Cbenvcodi.ToString(), estenvcodisAmp).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderByDescending(x => x.Logenvcodi).ToList();
                    CbLogenvioDTO ultimoEventoAmp = lstLogEnviosAmp.First();
                    ultimoUsuario = ultimoEventoAmp.Logenvusucreacion;
                    break;

                //recordatorio 1
                case ConstantesCombustibles.EstadoUsuRecorInfoRecibida:
                    // los solicitados o subsanados
                    string estenvcodisIR = ConstantesCombustibles.EstadoSolicitud + "," + ConstantesCombustibles.EstadoSubsanacionObs;
                    List<CbLogenvioDTO> lstLogEnviosIR = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envio.Cbenvcodi.ToString(), estenvcodisIR).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderByDescending(x => x.Logenvcodi).ToList();
                    CbLogenvioDTO ultimoEventoIR = lstLogEnviosIR.First();
                    ultimoUsuario = ultimoEventoIR.Logenvusucreacion;
                    break;

                //recordatorio 2
                case ConstantesCombustibles.EstadoUsuRecorAgentePlazoSubsanar:
                    // los solicitados o subsanados
                    string estenvcodisPSA = ConstantesCombustibles.EstadoSolicitud + "," + ConstantesCombustibles.EstadoSubsanacionObs;
                    List<CbLogenvioDTO> lstLogEnviosPSA = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envio.Cbenvcodi.ToString(), estenvcodisPSA).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderByDescending(x => x.Logenvcodi).ToList();
                    CbLogenvioDTO ultimoEventoPSA = lstLogEnviosPSA.First();
                    ultimoUsuario = ultimoEventoPSA.Logenvusucreacion;
                    break;

                //recordatorio 3
                case ConstantesCombustibles.EstadoUsuRecorCoesRevisarSubs:
                    //solo se amplian los subsanados
                    string estenvcodisRSC = ConstantesCombustibles.EstadoSolicitud + "," + ConstantesCombustibles.EstadoSubsanacionObs.ToString();//solo ES subsanados pero se le agrega solicitud por si subsanado lo hizo el SISTEMA
                    List<CbLogenvioDTO> lstLogEnviosRSC = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envio.Cbenvcodi.ToString(), estenvcodisRSC).Where(x => x.Logenvusucreacion != ConstantesCombustibles.UsuarioSistema).OrderByDescending(x => x.Logenvcodi).ToList();
                    CbLogenvioDTO ultimoEventoRSC = lstLogEnviosRSC.First();
                    ultimoUsuario = ultimoEventoRSC.Logenvusucreacion;
                    break;
            }

            return ultimoUsuario;
        }

        /// <summary>
        /// Actualiza el valor de fecha Sistema
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="userName"></param>
        /// <param name="fecha"></param>
        public void GuardarFechaSistema(int idEnvio, string userName, DateTime fecha)
        {
            try
            {
                CbEnvioDTO envio = FactorySic.GetCbEnvioRepository().GetById(idEnvio);
                envio.Cbenvfecsistema = fecha;

                IDbConnection conn = null;
                DbTransaction tran = null;
                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                this.UpdateCbEnvio(envio, conn, tran);

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Devuelve si la accion a realizar se ecuentra en plazo o no
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="ventanaEnUso"></param>
        /// <param name="esNuevoEnvio"></param>
        /// <param name="tipoCentral"></param>
        /// <param name="estadoIni"></param>
        /// <param name="estadoFin"></param>
        /// <returns></returns>
        private int ObtenerPlazoPR31Gaseoso(CbEnvioDTO regEnvio, int ventanaEnUso, bool esNuevoEnvio, string tipoCentral, int? estadoIni, int estadoFin)
        {
            int plazo = -1;
            int idEnvio = regEnvio != null ? regEnvio.Cbenvcodi : 0;
            decimal diff;
            int diasParaSubsanar = 3;
            int diasParaObservar = 5;

            DateTime fechaActual = ObtenerFechaSistemaPR31(idEnvio);

            if (ventanaEnUso == (int)ConstantesCombustibles.Interfaz.Extranet)
            {
                if (esNuevoEnvio) //plazoEnvio = ObtenerPlazo(null, interfaz, true, tipoCentral, null, ConstantesCombustibles.EstadoSolicitud);
                {
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                    {
                        DateTime dia20 = new DateTime(fechaActual.Year, fechaActual.Month, 20, 23, 59, 59);
                        int res = DateTime.Compare(dia20, fechaActual);

                        if (res < 0)
                            plazo = 0; //Fuera de plazo
                        else
                            plazo = 1; //En plazo
                    }
                    else
                    {
                        if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        {
                            plazo = 1; //no existe restricciones
                        }
                    }
                }
                else //subsanacion
                {
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                    {
                        if (estadoIni == ConstantesCombustibles.EstadoObservado && estadoFin == ConstantesCombustibles.EstadoSubsanacionObs) //subsanacion de obs en Existentes
                        {
                            diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecmodificacion.Value);
                            if (diff <= diasParaSubsanar)
                                plazo = 1; //en plazo
                            else
                                plazo = 0; //Fuera de plazo
                        }
                    }
                    else
                    {
                        if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        {
                            if (estadoIni == ConstantesCombustibles.EstadoObservado && estadoFin == ConstantesCombustibles.EstadoSubsanacionObs) //subsanacion de obs en Nuevas
                            {
                                diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecmodificacion.Value);
                                if (diff <= diasParaSubsanar)
                                    plazo = 1; //en plazo
                                else
                                    plazo = 0; //Fuera de plazo
                            }
                        }
                    }
                }

            }
            else
            {
                if (ventanaEnUso == (int)ConstantesCombustibles.Interfaz.Intranet)
                {
                    if (esNuevoEnvio) //registro de solicitud desde intranet
                    {
                        if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        {
                            DateTime dia20 = new DateTime(fechaActual.Year, fechaActual.Month, 20, 23, 59, 59);
                            int res = DateTime.Compare(dia20, fechaActual);

                            if (res < 0)
                                plazo = 0; //Fuera de plazo
                            else
                                plazo = 1; //En plazo
                        }
                        else
                        {
                            if (tipoCentral == ConstantesCombustibles.CentralNueva)
                            {
                                plazo = 1; //no existe restricciones
                            }
                        }
                    }
                    else //subsanacion
                    {
                        if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        {
                            //subsanacion de obs en Existentes
                            if (estadoIni == ConstantesCombustibles.EstadoObservado && estadoFin == ConstantesCombustibles.EstadoSubsanacionObs)
                            {
                                diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecmodificacion.Value);
                                if (diff <= diasParaSubsanar)
                                    plazo = 1; //en plazo
                                else
                                    plazo = 0; //Fuera de plazo
                            }

                            //Observacion desde intranet
                            if (estadoIni == ConstantesCombustibles.EstadoSolicitud && estadoFin == ConstantesCombustibles.EstadoObservado)
                            {
                                diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecsolicitud);
                                if (diff <= diasParaObservar)
                                    plazo = 1; //en plazo
                                else
                                    plazo = 0; //Fuera de plazo
                            }

                            //Aprobacion, Aprobacion Parcil o Asignacion
                            if (estadoFin == ConstantesCombustibles.EstadoAprobado || estadoFin == ConstantesCombustibles.EstadoAprobadoParcialmente)
                            {
                                DateTime primerDiaMes = new DateTime(fechaActual.Year, fechaActual.Month, 1, 0, 0, 0);
                                DateTime ultimoSegundoDelMes = primerDiaMes.AddMonths(1).AddSeconds(-1);
                                int res = DateTime.Compare(fechaActual, ultimoSegundoDelMes);

                                if (res <= 0)
                                    plazo = 1; //En plazo
                                else
                                    plazo = 0; //Fuera de plazo
                            }


                        }
                        else
                        {
                            if (tipoCentral == ConstantesCombustibles.CentralNueva)
                            {
                                //subsanacion de obs en Existentes
                                if (estadoIni == ConstantesCombustibles.EstadoObservado && estadoFin == ConstantesCombustibles.EstadoSubsanacionObs)
                                {
                                    diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecmodificacion.Value);
                                    if (diff <= diasParaSubsanar)
                                        plazo = 1; //en plazo
                                    else
                                        plazo = 0; //Fuera de plazo
                                }

                                //Observacion desde intranet
                                if (estadoIni == ConstantesCombustibles.EstadoSolicitud && estadoFin == ConstantesCombustibles.EstadoObservado)
                                {
                                    diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecsolicitud);
                                    if (diff <= diasParaObservar)
                                        plazo = 1; //en plazo
                                    else
                                        plazo = 0; //Fuera de plazo
                                }

                                //Aprobacion, Aprobacion Parcil o Asignacion
                                if (estadoFin == ConstantesCombustibles.EstadoAprobado || estadoFin == ConstantesCombustibles.EstadoAprobadoParcialmente || estadoFin == ConstantesCombustibles.EstadoAsignado)
                                {
                                    DateTime primerDiaMes = new DateTime(fechaActual.Year, fechaActual.Month, 1, 0, 0, 0);
                                    DateTime ultimoSegundoDelMes = primerDiaMes.AddMonths(1).AddSeconds(-1);
                                    int res = DateTime.Compare(fechaActual, ultimoSegundoDelMes);

                                    if (res <= 0)
                                        plazo = 1; //En plazo
                                    else
                                        plazo = 0; //Fuera de plazo
                                }
                            }
                        }
                    }
                }
            }

            return plazo;
        }

        /// <summary>
        /// Devuelve la cantidad de dias calendario entre dos fechas
        /// </summary>
        /// <param name="fechaMayor"></param>
        /// <param name="fechaMenor"></param>
        /// <returns></returns>
        private decimal DiferenciaDiasCalendario(DateTime fechaMayor, DateTime fechaMenor)
        {
            decimal salida = -1;

            DateTime fechaMaxLimite = fechaMayor.Date.AddDays(1).AddSeconds(-1);
            DateTime fechaDesdeCuenta = fechaMenor.Date.AddDays(1).AddSeconds(-1);

            TimeSpan ts = fechaMaxLimite - fechaDesdeCuenta;

            salida = Convert.ToDecimal(ts.TotalDays);

            return salida;
        }


        /// <summary>
        /// Generar formato 3 e informes sustentarios en archivo comprimido 
        /// </summary>
        /// <param name="currentUserSession"></param>
        /// <param name="idEnvio"></param>
        /// <param name="fecha"></param>
        /// <param name="empresa"></param>
        /// <param name="userName"></param>
        /// <param name="nameFile"></param>
        public void ExportarFormato3InfSustXEnvio(string currentUserSession, int idEnvio, int idVersion, string userName, out string nameFile)
        {
            nameFile = "";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesCombustibles.ModuloArchivosXEnvio;
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal_" + modulo) + currentUserSession;
                string pathZip = GetPathSubcarpeta("Temporal_" + modulo) + "/" + ConstantesCombustibles.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                if (idEnvio > 0)
                {

                    var envio = GetByIdCbEnvio(idEnvio);

                    //>>>>>>>>>>>>> Generar EXcel vacio >>>>>>>>>>>>>>>>
                    string ruta = pathAlternativo + "/" + pathTemporalUsuario;
                    string nameExcel = string.Format("formato3_{0}_{1}", envio.Emprnomb, envio.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes)) + ConstantesAppServicio.ExtensionExcel;

                    if (envio.Estenvcodi != ConstantesCombustibles.EstadoSolicitudAsignacion && envio.Estenvcodi != ConstantesCombustibles.EstadoAsignado)
                    {
                        this.GenerarExcelPlantillaFormato(idEnvio, ruta, nameExcel, envio.Emprcodi, envio.Cbenvtipocentral, envio.Cbenvfechaperiodo.Value, ConstantesCombustibles.ArchivosTotales);
                    }
                    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                    CbVersionDTO regVersionActual = GetUltimoCbVersion(idEnvio);//obtiene la última versión del envío
                    if (regVersionActual != null)
                    {
                        //crear subcarpeta (informeSustentatorio_empresas_mes)
                        string nombreCarpeta = string.Format("infoSust_{0}_{1}", envio.Emprnomb, envio.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes));
                        string pathSustentatorios = pathTemporalUsuario + "/" + nombreCarpeta;
                        FileServer.CreateFolder("", pathSustentatorios, pathAlternativo);

                        this.CopiarArchivosSustentatoriosATemporalXEnvio(idEnvio, regVersionActual.Cbvercodi, ConstantesCombustibles.CCombcodiFechaSuministro, modulo, currentUserSession, nombreCarpeta);

                        //Renombrar
                        var documentos = FileServer.ListarArhivos(pathSustentatorios + "\\", pathAlternativo);

                        //CbVersionDTO regVersionActual = GetUltimoCbVersion(idEnvio);//obtiene la última versión del envío
                        List<CbArchivoenvioDTO> listaArchivoXVersion = GetByCriteriaCbArchivoenvios(regVersionActual.Cbvercodi);
                        foreach (var item in documentos)
                        {
                            var archivo = listaArchivoXVersion.Find(x => x.Cbarchnombrefisico == item.FileName);

                            if (archivo != null)
                            {
                                //renombar
                                FileServer.RenameBlob("", pathSustentatorios + "/" + item.FileName, pathSustentatorios + "/" + archivo.Cbarchnombreenvio, pathAlternativo);
                            }
                        }
                    }

                    // creamos el zip
                    string nombreComprimido = string.Format("formatos3EInformesSustentatorios{0}_{1}", envio.Emprnomb, envio.Cbenvfechaperiodo.Value.Month.ToString());
                    var nombreZip = nombreComprimido + ".zip";
                    var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                    if (File.Exists(rutaZip)) File.Delete(rutaZip);
                    FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                    nameFile = nombreZip;
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        public void GenerarExcelPlantillaFormato(int idEnvio, string ruta, string nombreArchivo, int idEmpresa, string tipoCentral, DateTime fechaVigencia, int tipoArchivo)
        {
            var listaFormularioCentral = ListarFormularioCentralByEnvio(true, idEnvio, 0, idEmpresa, tipoCentral, "", fechaVigencia, tipoArchivo, out bool yaExisteSolicitud);

            GenerarArchivoExcelFormularioGaseosoEnvio(ruta, nombreArchivo, listaFormularioCentral, tipoArchivo, true);
        }

        /// <summary>
        /// copiar archivos sustentatorios final hacia carpeta temporal
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="idConcepto"></param>
        /// <param name="currentUserSession"></param>
        /// <param name="nombreCarpeta"></param>
        public void CopiarArchivosSustentatoriosATemporalXEnvio(int idEnvio, int idVersion, int idConcepto, string moduloDestino, string currentUserSession, string nombreCarpeta)
        {
            //eliminar carpeta temporal
            string pathAlternativo = GetPathPrincipal();

            try
            {
                if (idEnvio > 0)
                {
                    string moduloOrigen = ConstantesCombustibles.SubcarpetaSolicitud;
                    string pathOrigen = GetPathSubcarpeta(moduloOrigen) + GetSubcarpetaEnvio(idEnvio, idVersion, idConcepto);
                    var patTrabajo = "Temporal_" + moduloDestino + "/" + currentUserSession;
                    string pathDestino = GetPathSubcarpeta(patTrabajo) + nombreCarpeta;

                    //eliminar carpeta temporal existente
                    FileServer.DeleteFolderAlter(pathDestino, pathAlternativo);

                    FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        #endregion


        #region Reportes Históricos

        #region reporte histórico de precios, costos y poder calorífico

        /// <summary>
        /// permite generar los reportes web según el tipo
        /// </summary>
        /// <param name="empresas"></param>
        /// <param name="centrales"></param>
        /// <param name="estados"></param>
        /// <param name="tipoReporte"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string ObteneterReporteHistorico(string centrales, int tipoReporte, DateTime fechaInicio, DateTime fechaFin)
        {
            string nombreReporte = "";
            var resultadoHml = string.Empty;
            switch (tipoReporte)
            {
                case ConstantesCombustibles.ReporteCV_S: //por día
                case ConstantesCombustibles.ReporteCV_USD: // por día en dolares
                    var listaDatos = ObtenerDataReporteCV(centrales, tipoReporte, fechaInicio, fechaFin);
                    listaDatos = listaDatos.OrderBy(x => x.Fecha).ThenBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ThenBy(x => x.Gruponomb).ToList();
                    resultadoHml = GenerarReporteHtmlCV(listaDatos, tipoReporte);
                    break;
                case ConstantesCombustibles.ReporteCCG_PCI: // por mes
                    var listaDatosCCG_PCI = ObtenerDataCCG_PCI(centrales, tipoReporte, fechaInicio, fechaFin);
                    listaDatosCCG_PCI = listaDatosCCG_PCI.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    resultadoHml = GenerarReporteHtmlCCG_PCI(listaDatosCCG_PCI, tipoReporte, fechaInicio, fechaFin);
                    break;
                case ConstantesCombustibles.ReportePU_CG_PCI:
                    var lisDatosPU_CG_PCI = ObtenerDataPU_PCI(centrales, tipoReporte, ConstantesCombustibles.TipoReporteCVCuadro3, fechaInicio, fechaFin);
                    lisDatosPU_CG_PCI = lisDatosPU_CG_PCI.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    nombreReporte = "Reporte Precio Unitario de Combustible Gaseoso por concepto - PCI (USD/GJ)";
                    resultadoHml = GenerarReporteHtmlPU_PC(lisDatosPU_CG_PCI, tipoReporte, nombreReporte, fechaInicio, fechaFin);
                    break;
                case ConstantesCombustibles.ReportePU_CG_F3:
                    var lisDatosPU_CG_F3 = ObtenerDataPU_PCI(centrales, tipoReporte, ConstantesCombustibles.TipoReporteCVCuadro1, fechaInicio, fechaFin);
                    lisDatosPU_CG_F3 = lisDatosPU_CG_F3.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    nombreReporte = "Reporte Precio Unitario de Combustible Gaseoso por concepto – Formato 3 (USD/GJ)";
                    resultadoHml = GenerarReporteHtmlPU_PC(lisDatosPU_CG_F3, tipoReporte, nombreReporte, fechaInicio, fechaFin);
                    break;
                case ConstantesCombustibles.ReportePC:
                    var lisDatosPC = ObtenerDataPU_PCI(centrales, tipoReporte, ConstantesCombustibles.TipoReporteCVCuadro2, fechaInicio, fechaFin);
                    lisDatosPC = lisDatosPC.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    nombreReporte = "Reporte de Poder calorífico";
                    resultadoHml = GenerarReporteHtmlPU_PC(lisDatosPC, tipoReporte, nombreReporte, fechaInicio, fechaFin);
                    break;
            }

            return resultadoHml;
        }

        /// <summary>
        /// Permite obtener la data para el reporte de costos variables
        /// </summary>
        /// <param name="centrales"></param>
        /// <param name="estados"></param>
        /// <param name="tipoReporte"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<ElementosXCentral> ObtenerDataReporteCV(string centrales, int tipoReporte, DateTime fechaInicio, DateTime fechaFin)
        {
            List<ElementosXCentral> lstfinalModos = new List<ElementosXCentral>();

            var listPrGrupoEq = _appMigracion.ListPrGrupoeqs();

            List<int> lstCentralCod = centrales.Split(',').Select(x => int.Parse(x)).ToList();
            listPrGrupoEq = listPrGrupoEq.Where(x => x.Fenergcodi == 2).ToList(); // modos de tipo gas
            listPrGrupoEq = listPrGrupoEq.Where(x => lstCentralCod.Contains(x.Equipadre)).ToList(); // filtrar centrales

            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                //listarCentraleS
                //var listaCentrales = FactorySic.GetCbEnvioCentralRepository().ListarCentralUltimoEnvioXDia(fecha, centrales);
                var lstModosXCentralXDia = GenerarDataXdia(listPrGrupoEq, fecha, tipoReporte);

                lstfinalModos.AddRange(lstModosXCentralXDia);
            }

            return lstfinalModos;
        }

        /// <summary>
        /// Permite obtener la data de los modos operación de las centrales por día
        /// </summary>
        /// <param name="listaCentrales"></param>
        /// <param name="fecha"></param>
        /// <param name="tipoReporte"></param>
        /// <returns></returns>
        public List<ElementosXCentral> GenerarDataXdia(List<PrGrupoeqDTO> listPrGrupoEq, DateTime fecha, int tipoReporte)
        {
            List<ElementosXCentral> lstModos = new List<ElementosXCentral>();
            var fecAnterior = fecha.AddMonths(-1);
            bool existeDiaMesAnt = fecAnterior.Day != fecha.Day ? false : true;

            var l_param = ObtenerparametrosGeneralesXFecha(fecha);
            var l_paramAnterior = ObtenerparametrosGeneralesXFecha(fecAnterior);

            //var listPrGrupoEq = _appMigracion.ListPrGrupoeqs();
            if (listPrGrupoEq.Any())
            {
                foreach (var agrupacion in listPrGrupoEq.GroupBy(x => x.Equipadre))
                {
                    EqEquipoDTO central = FactorySic.GetEqEquipoRepository().GetById(agrupacion.Key);
                    //por cada central buscar sus modos operación
                    foreach (var modo in agrupacion.DistinctBy(x => x.Grupocodi).ToList())
                    {
                        ElementosXCentral elemento = new ElementosXCentral();
                        elemento.Fecha = fecha;
                        elemento.FechaDesc = fecha.ToString(ConstantesAppServicio.FormatoFecha);
                        //elemento.codEnvio = modo.Cbenvcodi;
                        //elemento.Emprcodi = central.Emprcodi;
                        elemento.Emprnomb = central.Emprnomb;
                        elemento.Equicodi = modo.Equipadre;
                        elemento.Equinomb = modo.Central;
                        elemento.Grupocodi = modo.Grupocodi;
                        elemento.Gruponomb = modo.Gruponomb;//modo.Gruponomb

                        //Obtener parámetros funcionales
                        var lParametrosFuncionales = _appMigracion.ListaPrGrupoDatByGrupoYFecha(modo.Grupocodi, fecha); // del dia
                        var lParametrosFuncionales_ = _appMigracion.ListaPrGrupoDatByGrupoYFecha(modo.Grupocodi, fecAnterior); // del mismo dia pero mes anterior

                        //evaludar la fórmula
                        EvaluarFormula(lParametrosFuncionales, l_param, fecha, tipoReporte, out ElementosXCentral entidadModo);
                        EvaluarFormula(lParametrosFuncionales_, l_paramAnterior, fecAnterior, tipoReporte, out ElementosXCentral entidadModo_Anterior);

                        elemento.CCombGas_SI = entidadModo.CCombGas_SI;
                        elemento.Cvc = entidadModo.Cvc;
                        elemento.Cvnc = entidadModo.Cvnc;
                        elemento.Cv = entidadModo.Cv;

                        if (entidadModo_Anterior.Cvc != null && entidadModo_Anterior.Cvc != 0 && existeDiaMesAnt)
                            elemento.CvcPorcentaje = (1m - (elemento.Cvc.Value / entidadModo_Anterior.Cvc.Value)) * 100;

                        if (entidadModo_Anterior.Cvnc != null && entidadModo_Anterior.Cvnc != 0 && existeDiaMesAnt)
                            elemento.CvncPorcentaje = (1m - (elemento.Cvnc.Value / entidadModo_Anterior.Cvnc.Value)) * 100;

                        if (entidadModo_Anterior.Cv != null && entidadModo_Anterior.Cv != 0 && existeDiaMesAnt)
                            elemento.CvPorcentaje = (1m - (elemento.Cv.Value / entidadModo_Anterior.Cv.Value)) * 100;

                        lstModos.Add(elemento);
                    }
                }

            }

            return lstModos;
        }

        /// <summary>
        /// Permite obtener los parámetros generales por fecha
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public n_parameter ObtenerparametrosGeneralesXFecha(DateTime fecha)
        {
            var lParametrosGenerales = FactorySic.GetPrGrupodatRepository().ParametrosGeneralesPorFecha(fecha);
            n_parameter l_param = new n_parameter();

            foreach (var drParam in lParametrosGenerales)
            {
                l_param.SetData(drParam.Concepabrev.Trim(), drParam.Formuladat.Trim());
            }
            return l_param;
        }

        /// <summary>
        /// Evaluar la fórmula de los parámetros
        /// </summary>
        /// <param name="lParametrosFuncionales"></param>
        /// <param name="entidadModo"></param>
        public void EvaluarFormula(List<PrGrupodatDTO> lParametrosFuncionales, n_parameter l_param, DateTime fecha, int tipoReporte, out ElementosXCentral entidadModo)
        {
            entidadModo = new ElementosXCentral();
            List<string> ALColumn = new List<string>();
            bool esDolar = tipoReporte == ConstantesCombustibles.ReporteCV_USD || tipoReporte == ConstantesCombustibles.ReporteCCG_PCI ? true : false;
            try
            {
                ALColumn.Add("CCombGas_SI");
                ALColumn.Add("CVC");
                //ALColumn.Add("CVC (SI)");
                ALColumn.Add("CVNC");
                ALColumn.Add("CV");

                foreach (var drLast in lParametrosFuncionales)
                {
                    var formuladat = drLast.Formuladat != null ? drLast.Formuladat.Trim() : string.Empty;
                    l_param.SetData(drLast.Concepabrev.Trim(), formuladat);
                }

                l_param.SetData("CV", "CVNC+CVC");
                var tipocambio = Convert.ToDecimal(l_param.GetEvaluate("TCAMBIO"));

                foreach (var sColumn in ALColumn)
                {
                    decimal resultado = Convert.ToDecimal(l_param.GetEvaluate(sColumn));
                    decimal soles = resultado;
                    decimal dolares = soles / tipocambio;

                    switch (sColumn)
                    {
                        case "CCombGas_SI":
                            entidadModo.CCombGas_SI = esDolar ? dolares : soles;
                            break;
                        case "CVC":

                            entidadModo.Cvc = esDolar ? dolares : soles;
                            break;
                        case "CVNC":
                            entidadModo.Cvnc = esDolar ? dolares : soles;
                            break;
                        case "CV":
                            entidadModo.Cv = esDolar ? dolares : soles;
                            break;
                    }
                }
                //
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Generar html para reporte de costo variable
        /// </summary>
        /// <param name="listaModos"></param>
        /// <param name="tipoReporte"></param>
        /// <returns></returns>
        private string GenerarReporteHtmlCV(List<ElementosXCentral> listaModos, int tipoReporte)
        {
            StringBuilder strHtml = new StringBuilder();
            string nombreReporte = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "REPORTE DE COSTOS VARIABLES (S/kWh)" : "REPORTE DE COSTOS VARIABLES (USD/kWh)";
            string ccgUnidad = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "S/GJ" : "USD/GJ";
            string cvcUnidad = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "S/kWh" : "USD/kWh";
            string cvncUnidad = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "S/kWh" : "USD/kWh";
            string cvUnidad = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "S/kWh" : "USD/kWh";

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' id='tabla_data'>
                        <thead>
                            <tr>
                                <th colspan ='11'>{0}</th>
                            </tr>
                            <tr>
                                <th colspan ='8' style='background-color: #ffffff'></th>
                                <th colspan ='3' style='background-color: #ffe65d; color: black;'>Variacion (1 - dd/mm/aaaa/(dd/mm-1/aaaa))</th>
                            </tr>
                            <tr>
                                <th>Día</th>
                                <th>Empresa</th>
                                <th>Central Termoeléctrica</th>
                                <th>Modo de operación</th>
                                <th>Costo combustible gaseoso <br/> {1}</th>
                                <th>CVC <br/> {2}</th>
                                <th>CVNC <br/> {3}</th>
                                <th>CV <br/> {4}</th>
                                <th style='background-color: #ffe65d; color: black;'>CVC <br/> %</th>
                                <th style='background-color: #ffe65d; color: black;'>CVNC <br/> %</th>
                                <th style='background-color: #ffe65d; color: black;'>CV <br/> %</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.AppendFormat(head, nombreReporte, ccgUnidad, cvcUnidad, cvncUnidad, cvUnidad);

            foreach (var reg in listaModos)
            {
                string filaTr = string.Format(@"
                                    <tr>
                                        <td style='text-align: left;'>{0}</td>
                                        <td style='text-align: left;'>{1}</td>
                                        <td style='text-align: left;'>{2}</td>
                                        <td style='text-align: left;'>{3}</td>
                                        <td style='text-align: center;'>{4}</td>
                                        <td style='text-align: center;'>{5}</td>
                                        <td style='text-align: center;'>{6}</td>
                                        <td style='text-align: center;'>{7}</td>
                                        <td style='text-align: center;'>{8}</td>
                                        <td style='text-align: center;'>{9}</td>
                                        <td style='text-align: center;'>{10}</td>
                                    </tr>
                                    "
                                , reg.FechaDesc
                                , reg.Emprnomb
                                , reg.Equinomb
                                , reg.Gruponomb
                                , reg.CCombGas_SI
                                , reg.Cvc
                                , reg.Cvnc
                                , reg.Cv
                                , reg.CvcPorcentaje != null ? reg.CvcPorcentaje.Value.ToString("0.###") : ""
                                , reg.CvncPorcentaje != null ? reg.CvncPorcentaje.Value.ToString("0.###") : ""
                                , reg.CvPorcentaje != null ? reg.CvPorcentaje.Value.ToString("0.###") : ""
                                );

                strHtml.Append(filaTr);
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Permite generar reporte excel por tipo 
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="centrales"></param>
        /// <param name="estados"></param>
        /// <param name="tipoReporte"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="nameFile"></param>
        public void DescargarReportesHistorico(string ruta, string pathLogo, string centrales, int tipoReporte, DateTime fechaInicio, DateTime fechaFin, out string nameFile)
        {
            nameFile = string.Empty;
            string rangoIni = string.Empty;
            string rangoFin = string.Empty;
            switch (tipoReporte)
            {
                case ConstantesCombustibles.ReporteCV_S:
                case ConstantesCombustibles.ReporteCV_USD:
                    //nameFile = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "ReporteCostosVariables_S.xlsx" : "ReporteCostosVariables_USD.xlsx";
                    rangoIni = fechaInicio.ToString(ConstantesAppServicio.FormatoFechaYMD2);
                    rangoFin = fechaFin.ToString(ConstantesAppServicio.FormatoFechaYMD2);
                    nameFile = "ReporteCostosVariables_" + rangoIni + "_" + rangoFin + ".xlsx";
                    var listaDatos = ObtenerDataReporteCV(centrales, tipoReporte, fechaInicio, fechaFin);
                    listaDatos = listaDatos.OrderBy(x => x.Fecha).ThenBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ThenBy(x => x.Gruponomb).ToList();
                    GenerarArchivoExcelCostosVariables(ruta, pathLogo, listaDatos, tipoReporte, fechaInicio, fechaFin, nameFile);
                    break;
                case ConstantesCombustibles.ReporteCCG_PCI:
                    rangoIni = fechaInicio.ToString(ConstantesAppServicio.FormatoAnioMes);
                    rangoFin = fechaFin.ToString(ConstantesAppServicio.FormatoAnioMes);
                    //nameFile = "ReporteCostoCombustibleGaseoso.xlsx";
                    nameFile = "ReporteCostoCombustibleGaseoso_" + rangoIni + "_" + rangoFin + ".xlsx";

                    var listaDatos_ = ObtenerDataCCG_PCI(centrales, tipoReporte, fechaInicio, fechaFin);
                    listaDatos_ = listaDatos_.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    GenerarArchivoExcelCCG_PCI(ruta, pathLogo, listaDatos_, fechaInicio, fechaFin, nameFile);
                    break;
                case ConstantesCombustibles.ReportePU_CG_PCI:
                case ConstantesCombustibles.ReportePU_CG_F3:
                case ConstantesCombustibles.ReportePC:
                    rangoIni = fechaInicio.ToString(ConstantesAppServicio.FormatoAnioMes);
                    rangoFin = fechaFin.ToString(ConstantesAppServicio.FormatoAnioMes);
                    nameFile = tipoReporte == ConstantesCombustibles.ReportePU_CG_PCI ? "ReportePrecioUnitario_PCI" :
                               tipoReporte == ConstantesCombustibles.ReportePU_CG_F3 ? "ReportePrecioUnitario_F3" : "ReportePoderCalorifico";

                    nameFile = nameFile + "_" + rangoIni + "_" + rangoFin + ".xlsx";

                    int cuadro = tipoReporte == ConstantesCombustibles.ReportePU_CG_PCI ? ConstantesCombustibles.TipoReporteCVCuadro3 :
                                 tipoReporte == ConstantesCombustibles.ReportePU_CG_F3 ? ConstantesCombustibles.TipoReporteCVCuadro1 : ConstantesCombustibles.TipoReporteCVCuadro2;

                    var lisDatos = ObtenerDataPU_PCI(centrales, tipoReporte, cuadro, fechaInicio, fechaFin);
                    lisDatos = lisDatos.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();

                    GenerarArchivoExcelPU_PC(ruta, pathLogo, lisDatos, tipoReporte, fechaInicio, fechaFin, nameFile);
                    break;
            }
        }

        /// <summary>
        /// Permite generar excel de costos variables por día en hojas
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="centrales"></param>
        /// <param name="estados"></param>
        /// <param name="tipoReporte"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelCostosVariables(string ruta, string pathLogo, List<ElementosXCentral> listaElementos, int tipoReporte, DateTime fechaInicio, DateTime fechaFin, string nameFile)
        {
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                string nameWS = "REPORTE";
                string titulo = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "REPORTE DE COSTOS VARIABLES (S/kWh)" : "REPORTE DE COSTOS VARIABLES(USD / kWh)";

                ExcelWorksheet ws = null;
                ws = xlPackage.Workbook.Worksheets.Add(nameWS);
                ws = xlPackage.Workbook.Worksheets[nameWS];

                ws.Row(1).Height = 25;
                ws.Row(2).Height = 25;

                UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

                #region Cabecera y Cuerpo 

                int colIniTitulo = 2;
                int rowIniTitulo = 4;

                int colIniFecha = colIniTitulo + 1;
                int rowIniFecha = rowIniTitulo + 2;

                int colIniTabla = colIniTitulo + 1;
                int rowIniTabla = rowIniTitulo + 6;

                //int rowTitulo = rowIniTabla - 1;

                ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
                ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
                ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

                ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Desde:";
                ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

                ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Hasta:";
                ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

                int colDia = colIniTabla;
                int colEmpresa = colDia + 1;
                int colCentral = colEmpresa + 1;
                int colModo = colCentral + 1;
                int colCCG = colModo + 1;
                int colCVC = colCCG + 1;
                int colCVNC = colCVC + 1;
                int colCV = colCVNC + 1;
                int colCVC_var = colCV + 1;
                int colCVNC_var = colCVC_var + 1;
                int colCV_var = colCVNC_var + 1;

                int rowVariacion = rowIniTabla + 1;
                int rowCabecera = rowVariacion + 1;

                ws.Cells[rowIniTabla, colIniTabla].Value = "Reporte de costos variables";
                ws.Cells[rowVariacion, colCVC_var].Value = "Variacion (1 - dd/mm/aaaa/(dd/mm-1/aaaa))";
                ws.Cells[rowVariacion, colDia].Value = "Día";
                ws.Cells[rowVariacion, colEmpresa].Value = "Empresa";
                ws.Cells[rowVariacion, colCentral].Value = "Central termoeléctrica";
                ws.Cells[rowVariacion, colModo].Value = "Modo de operación";
                ws.Cells[rowVariacion, colCCG].Value = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "Costo combustible gaseoso S/GJ" : "Costo combustible gaseoso USD/GJ";
                ws.Cells[rowVariacion, colCVC].Value = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "CVC S/kWh" : "CVC USD/kWh";
                ws.Cells[rowVariacion, colCVNC].Value = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "CVNC S/kWh" : "CVNC USD/kWh";
                ws.Cells[rowVariacion, colCV].Value = tipoReporte == ConstantesCombustibles.ReporteCV_S ? "CV S/kWh" : "CV USD/kWh";
                ws.Cells[rowCabecera, colCVC_var].Value = "CVC %";
                ws.Cells[rowCabecera, colCVNC_var].Value = "CVNC %";
                ws.Cells[rowCabecera, colCV_var].Value = "CV %";

                //ws.Column(colFecha).Width = 11;

                //Estilos titulo
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
                UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colCV_var + 1);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colCV_var + 1, "Centro");

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
                UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

                //Estilos cabecera
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colIniTabla, rowCabecera, colCV_var, "Calibri", 11);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colIniTabla, rowCabecera, colCV_var, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colIniTabla, rowCabecera, colCV_var, "Centro");
                UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colIniTabla, rowCabecera, colCV_var, "#2980B9");
                UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colIniTabla, rowCabecera, colCV_var, "#FFFFFF");
                UtilExcel.BorderCeldasHair(ws, rowIniTabla, colIniTabla, rowCabecera, colCV_var, "#000000");
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla + 1, colDia, rowCabecera, colDia);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla + 1, colEmpresa, rowCabecera, colEmpresa);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla + 1, colCentral, rowCabecera, colCentral);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla + 1, colModo, rowCabecera, colModo);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla + 1, colCCG, rowCabecera, colCCG);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla + 1, colCVC, rowCabecera, colCVC);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla + 1, colCVNC, rowCabecera, colCVNC);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla + 1, colCV, rowCabecera, colCV);

                //variacion
                UtilExcel.CeldasExcelColorFondo(ws, rowVariacion, colCVC_var, rowCabecera, colCV_var, "#ffe65d");
                UtilExcel.CeldasExcelColorTexto(ws, rowVariacion, colCVC_var, rowCabecera, colCV_var, "#000000");

                //agrupar
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla, colIniTabla, rowIniTabla, colCV_var);
                UtilExcel.CeldasExcelAgrupar(ws, rowVariacion, colCVC_var, rowVariacion, colCV_var);

                //cuerpo
                int rowData = rowCabecera + 1;
                foreach (var item in listaElementos)
                {
                    ws.Cells[rowData, colDia].Value = item.FechaDesc;
                    ws.Cells[rowData, colEmpresa].Value = item.Emprnomb.Trim();
                    ws.Cells[rowData, colCentral].Value = item.Equinomb.Trim();
                    ws.Cells[rowData, colModo].Value = item.Gruponomb.Trim();
                    ws.Cells[rowData, colCCG].Value = item.CCombGas_SI;
                    ws.Cells[rowData, colCVC].Value = item.Cvc;
                    ws.Cells[rowData, colCVNC].Value = item.Cvnc;
                    ws.Cells[rowData, colCV].Value = item.Cv;
                    ws.Cells[rowData, colCVC_var].Value = item.CvcPorcentaje;
                    ws.Cells[rowData, colCVNC_var].Value = item.CvncPorcentaje;
                    ws.Cells[rowData, colCV_var].Value = item.CvPorcentaje;

                    ws.Cells[rowData, colCVC_var].Style.Numberformat.Format = FormatoNumDecimales(3);
                    ws.Cells[rowData, colCVNC_var].Style.Numberformat.Format = FormatoNumDecimales(3);
                    ws.Cells[rowData, colCV_var].Style.Numberformat.Format = FormatoNumDecimales(3);

                    rowData++;
                }

                if (!listaElementos.Any()) rowData++;

                //Estilos registros
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colDia, rowData - 1, colCV_var, "Calibri", 8);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colDia, rowData - 1, colCV_var, "Centro");
                UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colDia, rowData - 1, colCV_var, "#000000");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colDia, rowData - 1, colCV_var, "Centro");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colDia, rowData - 1, colCV_var, "Centro");

                #endregion

                //filter
                //ws.Cells[rowIniTabla, colDia, rowIniTabla, colCV_var].AutoFilter = true;
                ws.Cells[rowVariacion, colDia, rowData, colCV_var].AutoFitColumns();
                ws.View.ShowGridLines = false;
                ws.View.ZoomScale = 100;
                ws.View.FreezePanes(rowIniTabla + 1, 1);

                xlPackage.Save();
            }
        }

        public List<ElementosXCentral> ObtenerDataCCG_PCI(string centrales, int tipoReporte, DateTime fechaInicio, DateTime fechaFin)
        {
            List<ElementosXCentral> lstfinal = new List<ElementosXCentral>();

            var listPrGrupoEq = _appMigracion.ListPrGrupoeqs();

            List<int> lstCentralCod = centrales.Split(',').Select(x => int.Parse(x)).ToList();
            listPrGrupoEq = listPrGrupoEq.Where(x => x.Fenergcodi == 2).ToList(); // modos de tipo gas
            listPrGrupoEq = listPrGrupoEq.Where(x => lstCentralCod.Contains(x.Equipadre)).ToList(); // filtrar centrales
            //listarCentraleS
            //var listaCentrales = FactorySic.GetCbEnvioCentralRepository().ListarCentralXRangoMes(fechaInicio, fechaFin, centrales);
            //listaCentrales = listaCentrales.DistinctBy(x => x.Equicodi).ToList(); //distinc centrales duplicadas

            if (listPrGrupoEq.Any())
            {
                foreach (var central in listPrGrupoEq.GroupBy(x => x.Equipadre))
                {
                    EqEquipoDTO equipoCentral = FactorySic.GetEqEquipoRepository().GetById(central.Key);
                    ElementosXCentral elemento = new ElementosXCentral();
                    elemento.LstCCombGas_SI = new List<decimal?>();
                    //elemento.Emprcodi = equipoPadre.Emprcodi.Value;
                    elemento.Emprnomb = equipoCentral.Emprnomb;
                    //elemento.Equicodi = central.Equicodi;
                    elemento.Equinomb = equipoCentral.Equinomb;
                    elemento.TipoCombustible = listPrGrupoEq.First().Fenergnomb;

                    var fecAnterior = fechaFin.AddMonths(-1);
                    for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
                    {
                        var l_param = ObtenerparametrosGeneralesXFecha(fecha);
                        //Obtener parámetros funcionales
                        var lParametrosFuncionales = _appMigracion.ListaPrGrupoDatByGrupoYFecha(equipoCentral.Grupocodi.Value, fecha);
                        //evaludar la fórmula
                        EvaluarFormula(lParametrosFuncionales, l_param, fecha, tipoReporte, out ElementosXCentral entidadModo);
                        elemento.CCombGas_SI = entidadModo.CCombGas_SI;
                        elemento.LstCCombGas_SI.Add(elemento.CCombGas_SI);

                        if (fecha == fechaFin)
                        {
                            var penultimoValorMes = elemento.LstCCombGas_SI.ElementAt(elemento.LstCCombGas_SI.Count - 2);

                            if (penultimoValorMes != null && penultimoValorMes.Value != 0)
                                elemento.CCombGas_SIPorcentaje = (1m - (elemento.CCombGas_SI.Value / penultimoValorMes.Value)) * 100;

                        }
                    }

                    lstfinal.Add(elemento);
                }
            }

            return lstfinal;
        }

        private string GenerarReporteHtmlCCG_PCI(List<ElementosXCentral> listaElementos, int tipoReporte, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();
            var cantidadMes = fechaFin.Month - fechaInicio.Month + 1;
            cantidadMes = Math.Abs((fechaFin.Month - fechaInicio.Month) + 12 * (fechaFin.Year - fechaInicio.Year)) + 1;
            string nombreReporte = "REPORTE DE COSTOS DE COMBUSTIBLE GASEOSO - PCI (USD/GJ)";

            strHtml.Append("<table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>");
            strHtml.Append("<thead>");
            #region cabecera
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan ='{0}'>{1}</th>", 4 + cantidadMes, nombreReporte);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th colspan ='3'>Mes de Vigencia</th>");

            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                var text = fecha.Month.ToString() + " - " + fecha.Year.ToString();
                strHtml.AppendFormat("<th style='background-color: #006400;'>{0}</th>", text);
            }
            strHtml.Append("<th style='background-color: #ffffff'></th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>Empresa</th>");
            strHtml.Append("<th>Central Termoeléctrica</th>");
            strHtml.Append("<th>Tipo de combustible</th>");
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                strHtml.Append("<th>Costo combustible gaseoso <br/> USD/GJ</th>");
            }
            strHtml.Append("<th style='background-color: #ffe65d; color: black;'>Variacion (1 - Mes(N)/ (N-1)) <br/> % </th>");
            strHtml.Append("</tr>");

            #endregion
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");

            #region cuerpo

            foreach (var reg in listaElementos)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='text-align: left;'>{0}</td>", reg.Emprnomb);
                strHtml.AppendFormat("<td style='text-align: left;'>{0}</td>", reg.Equinomb);
                strHtml.AppendFormat("<td style='text-align: left;'>{0}</td>", reg.TipoCombustible);

                foreach (var item in reg.LstCCombGas_SI)
                {
                    strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", item.HasValue ? item.Value.ToString() : "");
                }
                strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", reg.CCombGas_SIPorcentaje != null ? reg.CCombGas_SIPorcentaje.Value.ToString("0.###") : "");
                strHtml.Append("</tr>");
            }

            #endregion
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        public void GenerarArchivoExcelCCG_PCI(string ruta, string pathLogo, List<ElementosXCentral> listaElementos, DateTime fechaInicio, DateTime fechaFin, string nameFile)
        {
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                string nameWS = "REPORTE";
                string titulo = "REPORTE DE COSTO DE COMBUSTIBLE GASEOSO - PCI(USD/GJ)";

                ExcelWorksheet ws = null;
                ws = xlPackage.Workbook.Worksheets.Add(nameWS);
                ws = xlPackage.Workbook.Worksheets[nameWS];

                ws.Row(1).Height = 25;
                ws.Row(2).Height = 25;

                UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

                #region Cabecera

                int colIniTitulo = 2;
                int rowIniTitulo = 4;

                int colIniFecha = colIniTitulo + 1;
                int rowIniFecha = rowIniTitulo + 2;

                int colIniTabla = colIniTitulo + 1;
                int rowIniTabla = rowIniTitulo + 6;

                ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
                ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
                ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

                ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Desde:";
                ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

                ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Hasta:";
                ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

                int colEmpresa = colIniTabla;
                int colCentral = colEmpresa + 1;
                int colTipo = colCentral + 1;
                int colCCG = colTipo + 1;

                ws.Cells[rowIniTabla, colIniTabla].Value = "REPORTE DE COSTO DE COMBUSTIBLE GASEOSO - PCI(USD/GJ)";
                int rowMeses = rowIniTabla + 1;
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
                {
                    var text = fecha.Month.ToString() + " - " + fecha.Year.ToString();
                    ws.Cells[rowMeses, colCCG].Value = text;

                    colCCG++;
                }
                int colCCG_var = colCCG;
                int rowCabecera = rowMeses + 1;

                ws.Cells[rowMeses, colEmpresa].Value = "Mes de Vigencia";
                ws.Cells[rowMeses, colEmpresa].Value = "Empresa";
                ws.Cells[rowMeses, colCentral].Value = "Central termoeléctrica";
                ws.Cells[rowMeses, colTipo].Value = "Tipo de combustible";

                colCCG = colTipo + 1;
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
                {
                    ws.Cells[rowCabecera, colCCG].Value = "Costo combustible gaseoso USD / GJ";
                    colCCG++;
                }

                ws.Cells[rowCabecera, colCCG_var].Value = "Variacion (1 - Mes(N)/ (N-1)) %";

                //Estilos titulo
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
                UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colCCG_var + 1);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colCCG_var + 1, "Centro");

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
                UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

                //Estilos cabecera
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colIniTabla, rowCabecera, colCCG_var, "Calibri", 11);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colIniTabla, rowCabecera, colCCG_var, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colIniTabla, rowCabecera, colCCG_var, "Centro");
                UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colIniTabla, rowCabecera, colCCG_var, "#2980B9");
                UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colIniTabla, rowCabecera, colCCG_var, "#FFFFFF");
                UtilExcel.BorderCeldasHair(ws, rowIniTabla, colIniTabla, rowCabecera, colCCG_var, "#000000");

                //meses
                UtilExcel.CeldasExcelColorFondo(ws, rowMeses, colTipo + 1, rowCabecera, colCCG - 1, "#006400");
                UtilExcel.CeldasExcelColorTexto(ws, rowMeses, colTipo + 1, rowCabecera, colCCG - 1, "#FFFFFF");

                //variacion
                UtilExcel.CeldasExcelColorFondo(ws, rowCabecera, colCCG_var, rowCabecera, colCCG_var, "#ffe65d");
                UtilExcel.CeldasExcelColorTexto(ws, rowCabecera, colCCG_var, rowCabecera, colCCG_var, "#000000");

                //agrupar
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla, colEmpresa, rowIniTabla, colCCG_var);
                UtilExcel.CeldasExcelAgrupar(ws, rowMeses, colEmpresa, rowMeses, colTipo);

                #endregion

                //cuerpo
                int rowData = rowCabecera + 1;
                foreach (var reg in listaElementos)
                {
                    colCCG = colTipo + 1;

                    ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb.Trim();
                    ws.Cells[rowData, colCentral].Value = reg.Equinomb.Trim();
                    ws.Cells[rowData, colTipo].Value = reg.TipoCombustible ?? "";

                    foreach (var item in reg.LstCCombGas_SI)
                    {
                        ws.Cells[rowData, colCCG].Value = item.Value;
                        colCCG++;
                    }

                    ws.Cells[rowData, colCCG_var].Value = reg.CCombGas_SIPorcentaje;
                    ws.Cells[rowData, colCCG_var].Style.Numberformat.Format = FormatoNumDecimales(3);

                    rowData++;
                }

                if (!listaElementos.Any()) rowData++;

                //Estilos registros
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colCCG_var, "Calibri", 12);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colCCG_var, "Centro");
                UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colCCG_var, "#000000");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colCCG_var, "Centro");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colCCG_var, "Centro");

                ws.Cells[rowCabecera, colEmpresa, rowData, colCCG_var].AutoFitColumns();
                ws.View.ShowGridLines = false;
                ws.View.ZoomScale = 100;
                ws.View.FreezePanes(rowIniTabla + 1, 1);

                xlPackage.Save();
            }
        }


        public List<ElementosXCentral> ObtenerDataPU_PCI(string centrales, int tipoReporte, int cuadro, DateTime fechaInicio, DateTime fechaFin)
        {
            List<ElementosXCentral> lstfinal = new List<ElementosXCentral>();

            //listarCentraleS
            var listaCentrales = FactorySic.GetCbEnvioCentralRepository().ListarCentralXRangoMes(fechaInicio, fechaFin, centrales);
            listaCentrales = listaCentrales.DistinctBy(x => x.Equicodi).ToList(); //distinc centrales duplicadas

            if (listaCentrales.Any())
            {
                foreach (var central in listaCentrales)
                {
                    ElementosXCentral elemento = new ElementosXCentral();
                    elemento.ListaItems = new List<ItemXmes>();
                    //elemento.LstTransporte = new List<decimal?>();
                    //elemento.LstDistribucion = new List<decimal?>();
                    elemento.Emprcodi = central.Emprcodi;
                    elemento.Emprnomb = central.Emprnomb;
                    elemento.Equicodi = central.Equicodi;
                    elemento.Equinomb = central.Equinomb;
                    elemento.TipoCombustible = central.Fenergnomb;

                    for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
                    {
                        //Obtener data  
                        List<CbReporteDTO> lstReportesTempOrdenado = ObtenerReportesPorReporteYMesVigencia(cuadro, fecha.ToString(ConstantesAppServicio.FormatoFecha));
                        if (lstReportesTempOrdenado.Any())
                        {
                            var reporte = lstReportesTempOrdenado.First();// obtiene la último versión del reporte
                            var lstCentralReporte = ObtenerCentralesDelReporte(reporte.Cbrepcodi);

                            var detalle = lstCentralReporte.Find(x => x.Equicodi == central.Equicodi);
                            if (detalle != null)
                            {
                                var lstDetalle = FactorySic.GetCbReporteDetalleRepository().GetByIdCentral(detalle.Cbrcencodi);

                                decimal? suministroVal = null;
                                decimal? transporteVal = null;
                                decimal? distribucionVal = null;
                                decimal? sumTransDistVal = null;

                                ItemXmes valores = new ItemXmes();

                                switch (tipoReporte)
                                {
                                    case ConstantesCombustibles.ReportePU_CG_PCI:
                                        suministroVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi51PUSuministro).Cbrepvalordecimal;
                                        transporteVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi52PUTransporte).Cbrepvalordecimal;
                                        distribucionVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi53PUDistribucion).Cbrepvalordecimal;
                                        break;
                                    case ConstantesCombustibles.ReportePU_CG_F3:
                                        suministroVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi51PUSuministro).Cbrepvalordecimal;
                                        transporteVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi52PUTransporte).Cbrepvalordecimal;
                                        distribucionVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi53PUDistribucion).Cbrepvalordecimal;
                                        break;
                                    case ConstantesCombustibles.ReportePC:
                                        suministroVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi15PCSSuministro).Cbrepvalordecimal;
                                        transporteVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi16PCSTransporte).Cbrepvalordecimal;
                                        distribucionVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi17PCSDistribucion).Cbrepvalordecimal;
                                        sumTransDistVal = lstDetalle.Find(x => x.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI).Cbrepvalordecimal;

                                        valores.SumTransDist = sumTransDistVal;
                                        break;
                                }

                                valores.Suministro = suministroVal;
                                valores.Transporte = transporteVal;
                                valores.Distribucion = distribucionVal;

                                elemento.ListaItems.Add(valores);
                                if (fecha == fechaFin)
                                {
                                    var penultimoItem = elemento.ListaItems.ElementAt(elemento.ListaItems.Count - 2);

                                    if (penultimoItem.Suministro != null && penultimoItem.Suministro != 0 && suministroVal != null)
                                        elemento.SuministroPorcentaje = (1m - (suministroVal.Value / penultimoItem.Suministro.Value)) * 100;

                                    if (penultimoItem.Transporte != null && penultimoItem.Transporte != 0 && transporteVal != null)
                                        elemento.TransportePorcentaje = (1m - (transporteVal.Value / penultimoItem.Transporte.Value)) * 100;

                                    if (penultimoItem.Distribucion != null && penultimoItem.Distribucion != 0 && distribucionVal != null)
                                        elemento.DistribucionPorcentaje = (1m - (distribucionVal.Value / penultimoItem.Distribucion.Value)) * 100;

                                    if (tipoReporte == ConstantesCombustibles.ReportePC)
                                    {
                                        //elemento.SumTransDistPorcentaje = (penultimoItem.SumTransDist != null && sumTransDistVal != null) ? (1m - (sumTransDistVal.Value / penultimoItem.SumTransDist.Value)).ToString("0.###") : "";
                                        if (penultimoItem.SumTransDist != null && penultimoItem.SumTransDist != 0 && sumTransDistVal != null)
                                            elemento.SumTransDistPorcentaje = (1m - (sumTransDistVal.Value / penultimoItem.SumTransDist.Value)) * 100;
                                    }
                                }
                            }
                            else
                                elemento.ListaItems.Add(new ItemXmes());
                        }
                        else
                            elemento.ListaItems.Add(new ItemXmes());
                    }

                    lstfinal.Add(elemento);
                }
            }

            return lstfinal;
        }

        private string GenerarReporteHtmlPU_PC(List<ElementosXCentral> listaElementos, int tipoReporte, string nombreReporte, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();
            var cantidadMes = fechaFin.Month - fechaInicio.Month + 1;
            cantidadMes = Math.Abs((fechaFin.Month - fechaInicio.Month) + 12 * (fechaFin.Year - fechaInicio.Year)) + 1;
            int colspanTitulo = tipoReporte == ConstantesCombustibles.ReportePC ? 7 + cantidadMes * 4 : 6 + cantidadMes * 3;
            int agrupacion = tipoReporte == ConstantesCombustibles.ReportePC ? 4 : 3;
            string unidad = tipoReporte == ConstantesCombustibles.ReportePC ? "KJ/m3" : "USD/GJ";

            strHtml.Append("<table border='0' class='pretty tabla-adicional' id='tabla_data'>");
            strHtml.Append("<thead>");
            #region cabecera
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan ='{0}'>{1}</th>", colspanTitulo, nombreReporte);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th colspan ='3'>Mes de Vigencia</th>");

            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                var text = fecha.Month.ToString() + " - " + fecha.Year.ToString();
                strHtml.AppendFormat("<th colspan ='{1}' style='background-color: #006400;'>{0}</th>", text, agrupacion);
            }
            strHtml.AppendFormat("<th colspan ='{0}' style='background-color: #ffffff'></th>", agrupacion);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan ='2'>Empresa</th>");
            strHtml.Append("<th rowspan ='2'>Central Termoeléctrica</th>");
            strHtml.Append("<th rowspan ='2' >Tipo de combustible</th>");

            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                if (tipoReporte == ConstantesCombustibles.ReportePC)
                {
                    strHtml.Append("<th colspan ='3' >PCS</th>");
                    strHtml.Append("<th >PCI</th>");
                }
                else
                {
                    strHtml.Append("<th colspan ='3' >Precio Unitario</th>");
                }
            }
            strHtml.AppendFormat("<th colspan ='{0}' style='background-color: #ffe65d; color: black;'>Variacion (1 - Mes(N)/ (N-1)) <br/> % </th>", agrupacion);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");

            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                strHtml.AppendFormat("<th>Suministro <br/> {0}</th>", unidad);
                strHtml.AppendFormat("<th>Transporte <br/> {0}</th>", unidad);
                strHtml.AppendFormat("<th>Distribución <br/> {0}</th>", unidad);

                if (tipoReporte == ConstantesCombustibles.ReportePC)
                    strHtml.Append("<th>Suministro, Transporte y Distribución <br/> KJ/m3</th>");
            }

            strHtml.Append("<th>Suministro <br/> %</th>");
            strHtml.Append("<th>Transporte <br/> %</th>");
            strHtml.Append("<th>Distribución <br/> %</th>");

            if (tipoReporte == ConstantesCombustibles.ReportePC)
                strHtml.Append("<th>Suministro, Transporte y Distribución <br/> %</th>");

            strHtml.Append("</tr>");

            #endregion
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");

            #region cuerpo

            foreach (var reg in listaElementos)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='text-align: left;'>{0}</td>", reg.Emprnomb);
                strHtml.AppendFormat("<td style='text-align: left;'>{0}</td>", reg.Equinomb);
                strHtml.AppendFormat("<td style='text-align: left;'>{0}</td>", reg.TipoCombustible);

                foreach (var item in reg.ListaItems)
                {
                    strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", item.Suministro != null ? item.Suministro.ToString() : "No Aplica");
                    strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", item.Transporte != null ? item.Transporte.ToString() : "No Aplica");
                    strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", item.Distribucion != null ? item.Distribucion.ToString() : "No Aplica");

                    if (tipoReporte == ConstantesCombustibles.ReportePC)
                        strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", item.SumTransDist != null ? item.SumTransDist.ToString() : "No Aplica");
                }

                strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", reg.SuministroPorcentaje != null ? reg.SuministroPorcentaje.Value.ToString("0.###") : "");
                strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", reg.TransportePorcentaje != null ? reg.TransportePorcentaje.Value.ToString("0.###") : "");
                strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", reg.DistribucionPorcentaje != null ? reg.DistribucionPorcentaje.Value.ToString("0.###") : "");

                if (tipoReporte == ConstantesCombustibles.ReportePC)
                    strHtml.AppendFormat("<td style='text-align: center;'>{0}</td>", reg.SumTransDistPorcentaje != null ? reg.SumTransDistPorcentaje.Value.ToString("0.###") : "");

                strHtml.Append("</tr>");
            }

            #endregion
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        public void GenerarArchivoExcelPU_PC(string ruta, string pathLogo, List<ElementosXCentral> listaElementos, int tipoReporte, DateTime fechaInicio, DateTime fechaFin, string nameFile)
        {
            string nombreReporte = tipoReporte == ConstantesCombustibles.ReportePU_CG_PCI ? "Reporte Precio Unitario de Combustible Gaseoso por concepto - PCI (USD/GJ)" :
                                tipoReporte == ConstantesCombustibles.ReportePU_CG_F3 ? "Reporte Precio Unitario de Combustible Gaseoso por concepto – Formato 3 (USD/GJ)" : "Reporte de Poder calorífico";

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                string nameWS = "REPORTE";
                string titulo = nombreReporte;

                ExcelWorksheet ws = null;
                ws = xlPackage.Workbook.Worksheets.Add(nameWS);
                ws = xlPackage.Workbook.Worksheets[nameWS];

                ws.Row(1).Height = 25;
                ws.Row(2).Height = 25;

                UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

                #region Cabecera

                int colIniTitulo = 2;
                int rowIniTitulo = 4;

                int colIniFecha = colIniTitulo + 1;
                int rowIniFecha = rowIniTitulo + 2;

                int colIniTabla = colIniTitulo + 1;
                int rowIniTabla = rowIniTitulo + 6;

                ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
                ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
                ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

                ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Desde:";
                ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

                ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Hasta:";
                ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

                int colEmpresa = colIniTabla;
                int colCentral = colEmpresa + 1;
                int colTipo = colCentral + 1;
                int colPU = colTipo + 1;

                ws.Cells[rowIniTabla, colIniTabla].Value = nombreReporte;
                int rowMeses = rowIniTabla + 1;
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
                {
                    var text = fecha.Month.ToString() + " - " + fecha.Year.ToString();
                    ws.Cells[rowMeses, colPU].Value = text;

                    if (tipoReporte == ConstantesCombustibles.ReportePC)
                    {
                        UtilExcel.CeldasExcelAgrupar(ws, rowMeses, colPU, rowMeses, colPU + 3);
                        colPU = colPU + 4;
                    }
                    else
                    {
                        UtilExcel.CeldasExcelAgrupar(ws, rowMeses, colPU, rowMeses, colPU + 2);
                        colPU = colPU + 3;
                    }
                }
                int col_var = colPU;
                int colSumi_var = col_var;
                int colTrans_var = colSumi_var + 1;
                int colDist_var = colTrans_var + 1;
                int colSumTranDist_var = tipoReporte == ConstantesCombustibles.ReportePC ? colDist_var + 1 : colDist_var;

                int rowCabecera = rowMeses + 1;
                int rowParam = rowCabecera + 1;

                ws.Cells[rowMeses, colEmpresa].Value = "Mes de Vigencia";
                ws.Cells[rowCabecera, colEmpresa].Value = "Empresa";
                ws.Cells[rowCabecera, colCentral].Value = "Central termoeléctrica";
                ws.Cells[rowCabecera, colTipo].Value = "Tipo de combustible";

                colPU = colTipo + 1;
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
                {

                    if (tipoReporte == ConstantesCombustibles.ReportePC)
                    {
                        ws.Cells[rowCabecera, colPU].Value = "PCS";
                        ws.Cells[rowCabecera, colPU + 3].Value = "PCI";
                        UtilExcel.CeldasExcelAgrupar(ws, rowCabecera, colPU, rowCabecera, colPU + 3);

                        colPU = colPU + 4;
                    }
                    else
                    {
                        ws.Cells[rowCabecera, colPU].Value = "Precio Unitario";
                        UtilExcel.CeldasExcelAgrupar(ws, rowCabecera, colPU, rowCabecera, colPU + 2);
                        colPU = colPU + 3;
                    }
                }

                ws.Cells[rowCabecera, col_var].Value = "Variacion (1 - Mes(N)/ (N-1)) %";

                colPU = colTipo + 1;
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
                {
                    if (tipoReporte == ConstantesCombustibles.ReportePC)
                    {
                        ws.Cells[rowParam, colPU].Value = "Suministro KJ/m3";
                        ws.Cells[rowParam, colPU + 1].Value = "Transporte KJ/m3";
                        ws.Cells[rowParam, colPU + 2].Value = "Distribución KJ/m3";

                        ws.Cells[rowParam, colPU + 3].Value = "Sum. Trans. y Distribución KJ/m3";

                        colPU = colPU + 4;
                    }
                    else
                    {
                        ws.Cells[rowParam, colPU].Value = "Suministro USD/GJ";
                        ws.Cells[rowParam, colPU + 1].Value = "Transporte USD/GJ";
                        ws.Cells[rowParam, colPU + 2].Value = "Distribución USD/GJ";

                        colPU = colPU + 3;
                    }
                }

                if (tipoReporte == ConstantesCombustibles.ReportePC)
                {
                    ws.Cells[rowParam, colPU].Value = "Suministro %";
                    ws.Cells[rowParam, colPU + 1].Value = "Transporte %";
                    ws.Cells[rowParam, colPU + 2].Value = "Distribución %";

                    ws.Cells[rowParam, colPU + 3].Value = "Sum. Trans. y Distribución %";
                }
                else
                {
                    ws.Cells[rowParam, colPU].Value = "Suministro %";
                    ws.Cells[rowParam, colPU + 1].Value = "Transporte %";
                    ws.Cells[rowParam, colPU + 2].Value = "Distribución %";
                }

                //Estilos titulo
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
                UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colSumTranDist_var + 1);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colSumTranDist_var + 1, "Centro");

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
                UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

                //Estilos cabecera
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colIniTabla, rowParam, colSumTranDist_var, "Calibri", 11);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colIniTabla, rowParam, colSumTranDist_var, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colIniTabla, rowParam, colSumTranDist_var, "Centro");
                UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colIniTabla, rowParam, colSumTranDist_var, "#2980B9");
                UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colIniTabla, rowParam, colSumTranDist_var, "#FFFFFF");
                UtilExcel.BorderCeldasHair(ws, rowIniTabla, colIniTabla, rowParam, colSumTranDist_var, "#000000");

                //meses
                UtilExcel.CeldasExcelColorFondo(ws, rowMeses, colTipo + 1, rowMeses, colPU - 1, "#006400");
                UtilExcel.CeldasExcelColorTexto(ws, rowMeses, colTipo + 1, rowMeses, colPU - 1, "#FFFFFF");

                //variacion
                UtilExcel.CeldasExcelColorFondo(ws, rowCabecera, col_var, rowCabecera, colSumTranDist_var, "#ffe65d");
                UtilExcel.CeldasExcelColorTexto(ws, rowCabecera, col_var, rowCabecera, colSumTranDist_var, "#000000");

                //agrupar
                UtilExcel.CeldasExcelAgrupar(ws, rowIniTabla, colEmpresa, rowIniTabla, colSumTranDist_var);
                UtilExcel.CeldasExcelAgrupar(ws, rowMeses, colEmpresa, rowMeses, colTipo);

                if (tipoReporte == ConstantesCombustibles.ReportePC)
                    UtilExcel.CeldasExcelAgrupar(ws, rowCabecera, colSumi_var, rowCabecera, colSumTranDist_var);
                else
                    UtilExcel.CeldasExcelAgrupar(ws, rowCabecera, colSumi_var, rowCabecera, colDist_var);
                #endregion

                //cuerpo
                int rowData = rowParam + 1;
                foreach (var reg in listaElementos)
                {
                    colPU = colTipo + 1;

                    ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb.Trim();
                    ws.Cells[rowData, colCentral].Value = reg.Equinomb.Trim();
                    ws.Cells[rowData, colTipo].Value = reg.TipoCombustible ?? "";

                    foreach (var item in reg.ListaItems)
                    {
                        if (tipoReporte == ConstantesCombustibles.ReportePC)
                        {
                            if (item.Suministro != null)
                                ws.Cells[rowData, colPU].Value = item.Suministro;
                            else
                                ws.Cells[rowData, colPU].Value = "No Aplica";

                            if (item.Transporte != null)
                                ws.Cells[rowData, colPU + 1].Value = item.Transporte;
                            else
                                ws.Cells[rowData, colPU + 1].Value = "No Aplica";

                            if (item.Distribucion != null)
                                ws.Cells[rowData, colPU + 2].Value = item.Distribucion;
                            else
                                ws.Cells[rowData, colPU + 2].Value = "No Aplica";

                            if (item.SumTransDist != null)
                                ws.Cells[rowData, colPU + 3].Value = item.SumTransDist;
                            else
                                ws.Cells[rowData, colPU + 3].Value = "No Aplica";

                            //ws.Cells[rowData, colPU].Value = item.Suministro != null ? item.Suministro.ToString() : "No Aplica";
                            //ws.Cells[rowData, colPU + 1].Value = item.Transporte != null ? item.Transporte.ToString() : "No Aplica";
                            //ws.Cells[rowData, colPU + 2].Value = item.Distribucion != null ? item.Distribucion.ToString() : "No Aplica";

                            //ws.Cells[rowData, colPU + 3].Value = item.SumTransDist != null ? item.SumTransDist.ToString() : "No Aplica";

                            colPU = colPU + 4;
                        }
                        else
                        {
                            if (item.Suministro != null)
                                ws.Cells[rowData, colPU].Value = item.Suministro;
                            else
                                ws.Cells[rowData, colPU].Value = "No Aplica";

                            if (item.Transporte != null)
                                ws.Cells[rowData, colPU + 1].Value = item.Transporte;
                            else
                                ws.Cells[rowData, colPU + 1].Value = "No Aplica";

                            if (item.Distribucion != null)
                                ws.Cells[rowData, colPU + 2].Value = item.Distribucion;
                            else
                                ws.Cells[rowData, colPU + 2].Value = "No Aplica";

                            //ws.Cells[rowData, colPU].Value = item.Suministro != null ? item.Suministro.ToString() : "No Aplica";
                            //ws.Cells[rowData, colPU + 1].Value = item.Transporte != null ? item.Transporte.ToString() : "No Aplica";
                            //ws.Cells[rowData, colPU + 2].Value = item.Distribucion != null ? item.Distribucion.ToString() : "No Aplica";

                            colPU = colPU + 3;
                        }
                    }

                    ws.Cells[rowData, colSumi_var].Value = reg.SuministroPorcentaje;
                    ws.Cells[rowData, colTrans_var].Value = reg.TransportePorcentaje;
                    ws.Cells[rowData, colDist_var].Value = reg.DistribucionPorcentaje;

                    ws.Cells[rowData, colSumi_var].Style.Numberformat.Format = FormatoNumDecimales(3);
                    ws.Cells[rowData, colTrans_var].Style.Numberformat.Format = FormatoNumDecimales(3);
                    ws.Cells[rowData, colDist_var].Style.Numberformat.Format = FormatoNumDecimales(3);

                    if (tipoReporte == ConstantesCombustibles.ReportePC)
                    {
                        ws.Cells[rowData, colSumTranDist_var].Value = reg.SumTransDistPorcentaje;
                        ws.Cells[rowData, colSumTranDist_var].Style.Numberformat.Format = FormatoNumDecimales(3);
                    }

                    rowData++;
                }

                if (tipoReporte != ConstantesCombustibles.ReportePC)
                {
                    ws.Cells[rowData + 1, colEmpresa].Value = tipoReporte == ConstantesCombustibles.ReportePU_CG_PCI ? "Referido al PCI" : "Referido al PCS";
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowData + 1, colEmpresa, rowData + 1, colEmpresa, "Izquierda");
                }

                if (!listaElementos.Any()) rowData++;

                //Estilos registros
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colSumTranDist_var, "Calibri", 12);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colSumTranDist_var, "Centro");
                UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colSumTranDist_var, "#000000");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colSumTranDist_var, "Centro");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colSumTranDist_var, "Centro");

                ws.Cells[rowCabecera, colEmpresa, rowData, colSumTranDist_var].AutoFitColumns();
                ws.View.ShowGridLines = false;
                ws.View.ZoomScale = 100;
                ws.View.FreezePanes(rowIniTabla + 1, 1);

                xlPackage.Save();
            }
        }

        public void ObteneterGraficoHistorico(string centrales, int tipoReporte, DateTime fechaInicio, DateTime fechaFin, int opcion, out GraficoWeb grafico1, out GraficoWeb grafico2)
        {
            string nombreReporte = "";
            grafico1 = new GraficoWeb();
            grafico2 = new GraficoWeb();
            switch (tipoReporte)
            {
                case ConstantesCombustibles.ReporteCV_S: //por día
                case ConstantesCombustibles.ReporteCV_USD: // por día en dolares
                    var listaDatos = ObtenerDataReporteCV(centrales, tipoReporte, fechaInicio, fechaFin);
                    listaDatos = listaDatos.OrderBy(x => x.Fecha).ThenBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ThenBy(x => x.Gruponomb).ToList();
                    grafico1 = GenerarGWebCostoModosOperacion(listaDatos, tipoReporte, fechaFin);
                    grafico2 = GenerarGWebCVPorTipoGas(listaDatos, tipoReporte, fechaFin);
                    break;
                case ConstantesCombustibles.ReporteCCG_PCI: // por mes
                    var listaDatosCCG_PCI = ObtenerDataCCG_PCI(centrales, tipoReporte, fechaInicio, fechaFin);
                    listaDatosCCG_PCI = listaDatosCCG_PCI.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    grafico2 = GraficoBarraXTipo(listaDatosCCG_PCI, fechaInicio, fechaFin, opcion);
                    break;
                case ConstantesCombustibles.ReportePU_CG_PCI:
                    var lisDatosPU_CG_PCI = ObtenerDataPU_PCI(centrales, tipoReporte, ConstantesCombustibles.TipoReporteCVCuadro3, fechaInicio, fechaFin);
                    lisDatosPU_CG_PCI = lisDatosPU_CG_PCI.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    nombreReporte = "Reporte Precio Unitario de Combustible Gaseoso por concepto - PCI (USD/GJ)";
                    grafico2 = GraficoBarraXTipo(lisDatosPU_CG_PCI, fechaInicio, fechaFin, opcion);
                    break;
                case ConstantesCombustibles.ReportePU_CG_F3:
                    var lisDatosPU_CG_F3 = ObtenerDataPU_PCI(centrales, tipoReporte, ConstantesCombustibles.TipoReporteCVCuadro1, fechaInicio, fechaFin);
                    lisDatosPU_CG_F3 = lisDatosPU_CG_F3.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    nombreReporte = "Reporte Precio Unitario de Combustible Gaseoso por concepto – Formato 3 (USD/GJ)";
                    grafico2 = GraficoBarraXTipo(lisDatosPU_CG_F3, fechaInicio, fechaFin, opcion);
                    break;
                case ConstantesCombustibles.ReportePC:
                    var lisDatosPC = ObtenerDataPU_PCI(centrales, tipoReporte, ConstantesCombustibles.TipoReporteCVCuadro2, fechaInicio, fechaFin);
                    lisDatosPC = lisDatosPC.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
                    nombreReporte = "Reporte de Poder calorífico";
                    grafico2 = GraficoBarraXTipo(lisDatosPC, fechaInicio, fechaFin, opcion);
                    break;
            }
        }

        public GraficoWeb GenerarGWebCostoModosOperacion(List<ElementosXCentral> listDataModosOp, int tiporeporte, DateTime fechaFin)
        {
            listDataModosOp = listDataModosOp.Where(x => x.Fecha == fechaFin).ToList(); // solo valores del último día
            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = listDataModosOp.Select(x => x.Gruponomb).ToList(),
                TitleText = "COSTO DE COMBUSTIBLE GASEOSO POR MODO DE OPERACIÓN",
                YAxixTitle = tiporeporte == ConstantesCombustibles.ReporteCV_S ? new List<string> { "S/./Gj" } : new List<string> { "USD/./Gj" },
                TooltipValueSuffix = tiporeporte == ConstantesCombustibles.ReporteCV_S ? "S/./Gj" : "USD/./Gj",
                YaxixLabelsFormat = "",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom",
                XAxisTitle = "MODOS DE OPERACIÓN"
            };

            List<decimal?> data = new List<decimal?>();

            foreach (var cv in listDataModosOp)
            {
                data.Add(cv.CCombGas_SI);
            }

            graficoWeb.SerieData = new DatosSerie[] { new DatosSerie() { Name = "COSTO", Data = data.ToArray() } };

            return graficoWeb;
        }

        public GraficoWeb GenerarGWebCVPorTipoGas(List<ElementosXCentral> listDataModosOp, int tiporeporte, DateTime fechaFin)
        {
            listDataModosOp = listDataModosOp.Where(x => x.Fecha == fechaFin).ToList(); // solo valores del último día
            var graficoWeb = new GraficoWeb
            {
                TitleText = "EVOLUCIÓN DE LOS COSTOS VARIABLES POR TIPO DE COMBUSTIBLE GASEOSO",
                XAxisCategories = listDataModosOp.Select(x => x.Gruponomb).ToList(),
                YAxixTitle = tiporeporte == ConstantesCombustibles.ReporteCV_S ? new List<string> { "S/./kWh" } : new List<string> { "USD/./kWh" },
                YAxisStackLabels = false,
                TooltipValueSuffix = "",
                PlotOptionsDataLabels = false,
            };

            graficoWeb.SerieData = new DatosSerie[]
            {
                new DatosSerie() { Name = "CVC", Data = listDataModosOp.Select(x=>x.Cvc).ToArray() },
                new DatosSerie() { Name = "CVNC", Data = listDataModosOp.Select(x=>x.Cvnc).ToArray() },
                new DatosSerie() { Name = "CV", Data = listDataModosOp.Select(x=>x.Cv).ToArray() }
            };

            return graficoWeb;
        }

        public GraficoWeb GraficoBarraXTipo(List<ElementosXCentral> listaCentralRER, DateTime fechaInicio, DateTime fechaFin, int opcion)
        {
            //List<SiTipogeneracionDTO> listaTgen = this.ListarSiTipogeneracion().OrderBy(x => x.Tgenernomb).ToList();

            List<string> listaCateg = new List<string>();
            int cantidadMes = fechaFin.Month - fechaInicio.Month + 1;
            cantidadMes = Math.Abs((fechaFin.Month - fechaInicio.Month) + 12 * (fechaFin.Year - fechaInicio.Year)) + 1;

            var subtitulo = "";

            var titulo = "";
            switch (opcion)
            {
                case 0:
                    titulo = "COSTO COMBUSTIBLE GASEOSO";
                    subtitulo = "COSTO COMBUSTIBLE GASEOSO";
                    break;
                case 1:
                    titulo = "SUMINISTRO";
                    subtitulo = "SUMINISTRO";
                    break;
                case 2:
                    titulo = "TRANSPORTE";
                    subtitulo = "TRANSPORTE";
                    break;
                case 3:
                    titulo = "DISTRIBUCIÓN";
                    subtitulo = "DISTRIBUCIÓN";
                    break;
                case 4:
                    titulo = "SUMINISTRO, TRANSPORTE Y DISTRIBUCIÓN";
                    subtitulo = "SUMINISTRO, TRANSPORTE Y DISTRIBUCIÓN";
                    break;
            }

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = string.Format("{0} del {1} al {2}", titulo, fechaInicio.ToString("yyyy-MM"), fechaFin.ToString("yyyy-MM"));

            grafico.Subtitle = subtitulo;

            grafico.SerieData = new DatosSerie[listaCentralRER.Count];

            //Categorias
            int cctg = 0;
            grafico.Categorias = new Categorias[1];
            grafico.Categorias[cctg] = new Categorias();
            grafico.Categorias[cctg].Name = "GASEOSO";
            grafico.Categorias[cctg].Categories = new string[listaCentralRER.Count];

            int cpto = 0;
            foreach (var regCentral in listaCentralRER)
            {
                grafico.Categorias[cctg].Categories[cpto] = regCentral.Equinomb;
                cpto++;
            }

            //Data x categoria
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[cantidadMes][];

            int cc = 0;
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddMonths(1))
            {
                grafico.SeriesData[cc] = new decimal?[listaCentralRER.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = fecha.ToString("yyyy-MM");
                grafico.Series[cc].Type = "column";
                //grafico.Series[cc].Color = (cc % 2 == 0 ? "#C0504D" : "#4F81BD");
                grafico.Series[cc].Color = null;
                grafico.Series[cc].YAxisTitle = "Valor";
                grafico.Series[cc].YAxis = 0;

                int contPto = 0;
                foreach (var reg in listaCentralRER)
                {
                    switch (opcion)
                    {
                        case 0: //costo combustible gaseoso
                            grafico.SeriesData[cc][contPto] = Convert.ToDecimal(Math.Round(reg.LstCCombGas_SI[cc].GetValueOrDefault(0), 3));
                            break;
                        case 1: //Suministro
                            grafico.SeriesData[cc][contPto] = Convert.ToDecimal(Math.Round(reg.ListaItems[cc].Suministro.GetValueOrDefault(0), 3));
                            break;
                        case 2: // Transporte
                            grafico.SeriesData[cc][contPto] = Convert.ToDecimal(Math.Round(reg.ListaItems[cc].Transporte.GetValueOrDefault(0), 3));
                            break;
                        case 3: // Distribución
                            grafico.SeriesData[cc][contPto] = Convert.ToDecimal(Math.Round(reg.ListaItems[cc].Distribucion.GetValueOrDefault(0), 3));
                            break;
                        case 4: //Sum, Trans y Distribución
                            grafico.SeriesData[cc][contPto] = Convert.ToDecimal(Math.Round(reg.ListaItems[cc].SumTransDist.GetValueOrDefault(0), 3));
                            break;
                    }

                    contPto++;
                }

                cc++;
            }

            return grafico;
        }

        #endregion

        #region Reporte histórico de envios Extranet

        public List<CbEnvioDTO> ObtenerListadoHistoricoEnviosExtranet(string emprcodis, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, string tipoCombustible)
        {
            List<CbEnvioDTO> lstSalida = new List<CbEnvioDTO>();
            List<CbEnvioDTO> lstTemp = new List<CbEnvioDTO>();

            lstTemp = FactorySic.GetCbEnvioRepository().ObtenerEnvios(emprcodis, estenvcodi, fechaInicio, fechaFin, tipoCombustible, ConstantesCombustibles.GuardadoOficial);

            List<int> codigosEnvio = lstTemp.Select(x => x.Cbenvcodi).ToList();

            //lista versiones de los envios
            List<CbVersionDTO> listaVersiones = GetByCriteriaCbVersions(string.Join(",", codigosEnvio));

            lstTemp = lstTemp.OrderByDescending(x => x.Cbenvcodi).ToList();
            foreach (var reg in lstTemp)
            {
                FormatearCbEnvio(reg, listaVersiones, new List<CbLogenvioDTO>());
                //obtener lista de centrales de la ultima versión
                var listaCfgCentral = GetByCriteriaCbEnvioCentrals(reg.Cbvercodi);

                var lstVersionXEnvio = listaVersiones.Where(x => x.Cbenvcodi == reg.Cbenvcodi).ToList();
                var lstLogEnvio = GetByCriteriaCbLogenvios(reg.Cbenvcodi);
                foreach (var item in lstVersionXEnvio)
                {
                    CbEnvioDTO envioXversion = new CbEnvioDTO();
                    envioXversion.Cbenvcodi = reg.Cbenvcodi;
                    envioXversion.Cbvercodi = item.Cbvercodi;
                    envioXversion.CbenvfeccreacionDesc = item.Cbverfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
                    envioXversion.NumVersion = item.Cbvernumversion;
                    envioXversion.Emprnomb = reg.Emprnomb;
                    envioXversion.Equinomb = listaCfgCentral.Any() ? string.Join(",", listaCfgCentral.Select(x => x.Equinomb).ToList()) : string.Empty;
                    envioXversion.CbenvtipocentralDesc = reg.CbenvtipocentralDesc;
                    envioXversion.MesVigenciaDesc = reg.MesVigenciaDesc;
                    envioXversion.CbenvfecsolicitudDesc = reg.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull2);
                    //envioXversion.CbenvfecmodificacionDesc = reg.CbenvfecmodificacionDesc;

                    var logEnvio = lstLogEnvio.Find(x => x.Logenvfeccreacion == item.Cbverfeccreacion);
                    if (logEnvio != null)
                    {
                        envioXversion.EstadoDesc = logEnvio.Estenvnomb;
                        envioXversion.Estenvcodi = logEnvio.Estenvcodi;
                        envioXversion.Cbenvususolicitud = item.Cbverusucreacion;
                        lstSalida.Add(envioXversion);
                    }
                }
            }

            return lstSalida.OrderByDescending(x => x.Cbenvcodi).ThenByDescending(x => x.Cbvercodi).ToList();
        }

        public void ExportacionHistoricoExtranet(string ruta, string pathLogo, string empresas, DateTime fechaInicio, DateTime fechaFin, int idEstado, string nameFile)
        {
            List<CbEnvioDTO> listaEnviosTotales = ObtenerListadoHistoricoEnviosExtranet(empresas, idEstado, fechaInicio, fechaFin, ConstantesCombustibles.CombustiblesGaseosos);

            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarExcelHistoricoExtranet(xlPackage, pathLogo, listaEnviosTotales, idEstado, fechaInicio, fechaFin);

                xlPackage.Save();
            }
        }

        private void GenerarExcelHistoricoExtranet(ExcelPackage xlPackage, string pathLogo, List<CbEnvioDTO> listaEnviosTotales, int estado, DateTime fechaInicio, DateTime fechaFin)
        {
            string nameWS = "REPORTE";
            string titulo = "Reporte histórico de envios generados en la Extranet";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniFecha = colIniTitulo + 1;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo + 1;
            int rowIniTabla = rowIniTitulo + 6;

            int colCodigo = colIniTable;
            int colFechaSol = colCodigo + 1;
            int colNumVersion = colFechaSol + 1;
            int colEmpresa = colNumVersion + 1;
            int colCentral = colEmpresa + 1;
            int colEstado = colCentral + 1;
            int colTipoCentral = colEstado + 1;
            int colMesAnio = colTipoCentral + 1;
            int colUsuario = colMesAnio + 1;
            int colFechaHoraEnvio = colUsuario + 1;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
            ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

            ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Desde:";
            ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Hasta:";
            ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

            ws.Row(rowIniTabla).Height = 20;
            ws.Cells[rowIniTabla, colCodigo].Value = "Código";
            ws.Cells[rowIniTabla, colFechaSol].Value = "Fecha Solicitud";
            ws.Cells[rowIniTabla, colNumVersion].Value = "Nro envio";
            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colCentral].Value = "Central termoeléctrica";
            ws.Cells[rowIniTabla, colEstado].Value = "Estado";
            ws.Cells[rowIniTabla, colTipoCentral].Value = "Tipo Central";
            ws.Cells[rowIniTabla, colMesAnio].Value = "Mes-Año";
            ws.Cells[rowIniTabla, colUsuario].Value = "Usuario envío";
            ws.Cells[rowIniTabla, colFechaHoraEnvio].Value = "Fecha - Hora envío";

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaHoraEnvio + 1);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaHoraEnvio + 1, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaHoraEnvio, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaHoraEnvio, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaHoraEnvio, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaHoraEnvio, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaHoraEnvio, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaHoraEnvio, "#000000");

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaEnviosTotales)
            {
                ws.Cells[rowData, colCodigo].Value = item.Cbenvcodi;
                ws.Cells[rowData, colFechaSol].Value = item.CbenvfecsolicitudDesc;
                ws.Cells[rowData, colNumVersion].Value = item.NumVersion;
                ws.Cells[rowData, colEmpresa].Value = item.Emprnomb.Trim();
                ws.Cells[rowData, colCentral].Value = item.Equinomb.Trim();
                ws.Cells[rowData, colEstado].Value = item.EstadoDesc.Trim();
                ws.Cells[rowData, colTipoCentral].Value = item.CbenvtipocentralDesc.Trim();
                ws.Cells[rowData, colMesAnio].Value = item.MesVigenciaDesc.Trim();
                ws.Cells[rowData, colUsuario].Value = item.Cbenvususolicitud;
                ws.Cells[rowData, colFechaHoraEnvio].Value = item.CbenvfeccreacionDesc;

                rowData++;
            }
            if (!listaEnviosTotales.Any()) rowData++;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaHoraEnvio, "Calibri", 10);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaHoraEnvio, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaHoraEnvio, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaHoraEnvio, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colFechaHoraEnvio, rowData - 1, colFechaHoraEnvio, "Centro");

            #endregion

            //filter
            ws.Cells[rowIniTabla, colCodigo, rowIniTabla, colFechaHoraEnvio].AutoFilter = true;
            ws.Cells[rowIniTabla, colIniTable, rowData, colFechaHoraEnvio].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }


        public void ExportarFormato3InfSustXVersion(string currentUserSession, int idEnvio, int idVersion, string userName, out string nameFile)
        {
            nameFile = "";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesCombustibles.ModuloArchivosXEnvio;
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal_" + modulo) + currentUserSession;
                string pathZip = GetPathSubcarpeta("Temporal_" + modulo) + "/" + ConstantesCombustibles.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                if (idEnvio > 0)
                {

                    var envio = GetByIdCbEnvio(idEnvio);

                    //>>>>>>>>>>>>> Generar EXcel vacio >>>>>>>>>>>>>>>>
                    string ruta = pathAlternativo + "/" + pathTemporalUsuario;
                    string nameExcel = string.Format("formato3_{0}_{1}", envio.Emprnomb, envio.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes)) + ConstantesAppServicio.ExtensionExcel;

                    if (envio.Estenvcodi != ConstantesCombustibles.EstadoSolicitudAsignacion && envio.Estenvcodi != ConstantesCombustibles.EstadoAsignado)
                    {
                        this.GenerarExcelPlantillaFormato(idEnvio, ruta, nameExcel, envio.Emprcodi, envio.Cbenvtipocentral, envio.Cbenvfechaperiodo.Value, ConstantesCombustibles.ArchivosTotales);
                    }
                    //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                    //crear subcarpeta (informeSustentatorio_empresas_mes)
                    string nombreCarpeta = string.Format("infoSust_{0}_{1}", envio.Emprnomb, envio.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes));
                    string pathSustentatorios = pathTemporalUsuario + "/" + nombreCarpeta;
                    FileServer.CreateFolder("", pathSustentatorios, pathAlternativo);

                    this.CopiarArchivosSustentatoriosATemporalXEnvio(idEnvio, idVersion, ConstantesCombustibles.CCombcodiFechaSuministro, modulo, currentUserSession, nombreCarpeta);

                    //Renombrar
                    var documentos = FileServer.ListarArhivos(pathSustentatorios + "\\", pathAlternativo);

                    // obtener archivos por version
                    List<CbArchivoenvioDTO> listaArchivoXVersion = GetByCriteriaCbArchivoenvios(idVersion);
                    foreach (var item in documentos)
                    {
                        var archivo = listaArchivoXVersion.Find(x => x.Cbarchnombrefisico == item.FileName);

                        if (archivo != null)
                        {
                            //renombar
                            FileServer.RenameBlob("", pathSustentatorios + "/" + item.FileName, pathSustentatorios + "/" + archivo.Cbarchnombreenvio, pathAlternativo);
                        }
                    }

                    // creamos el zip
                    string nombreComprimido = string.Format("formatos3EInformesSustentatorios_{0}_{1}", envio.Emprnomb, envio.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes));
                    var nombreZip = nombreComprimido + ".zip";
                    var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                    if (File.Exists(rutaZip)) File.Delete(rutaZip);
                    FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                    nameFile = nombreZip;
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region reporte por Participante Generador

        public void ExportarReporteParticipanteGen(string currentUserSession, string emprcodis, string estenvcodis, DateTime fechaInicio, DateTime fechaFin, int tipoArchivo, out string nameFile)
        {
            nameFile = "";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesCombustibles.ModuloArchivosParticipanteGen;
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal_" + modulo) + currentUserSession;
                string pathZip = GetPathSubcarpeta("Temporal_" + modulo) + "/" + ConstantesCombustibles.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                //obtener envios
                List<CbEnvioDTO> lstSalida = FactorySic.GetCbEnvioRepository().ObtenerEnviosXPeriodo(emprcodis, -1, fechaInicio, fechaFin, ConstantesCombustibles.CombustiblesGaseosos, ConstantesCombustibles.GuardadoOficial);
                List<int> estados = estenvcodis.Split(',').Select(x => int.Parse(x)).ToList();
                lstSalida = lstSalida.Where(x => estados.Contains(x.Estenvcodi)).ToList(); // filtrar estados
                if (lstSalida.Any())
                {
                    foreach (var agrupacion in lstSalida.OrderBy(x => x.Cbenvfechaperiodo).GroupBy(x => x.Cbenvfechaperiodo))
                    {
                        var fechaCarpeta = agrupacion.Key;
                        var patTrabajo1 = "Temporal_" + modulo + "\\" + currentUserSession + "\\";

                        string nombreCarpeta1 = fechaCarpeta.Value.Date.ToString(ConstantesAppServicio.FormatoAnioMes);
                        string pathCarpetaXFechaPeriodo = pathTemporalUsuario + "/" + nombreCarpeta1;
                        FileServer.CreateFolder("", pathCarpetaXFechaPeriodo, pathAlternativo);

                        foreach (var reg in agrupacion)
                        {
                            CbVersionDTO regVersionActual = GetUltimoCbVersion(reg.Cbenvcodi);//obtiene la última versión del envío
                            if (regVersionActual != null)
                            {
                                List<CbArchivoenvioDTO> listaArchivoXVersion = GetByCriteriaCbArchivoenvios(regVersionActual.Cbvercodi);

                                switch (tipoArchivo)
                                {
                                    case ConstantesCombustibles.ArchivosNoConfidencial:
                                        listaArchivoXVersion = listaArchivoXVersion.Where(x => x.Cbarchconfidencial == 2).ToList();
                                        break;
                                    case ConstantesCombustibles.ArchivosConfidencial:
                                        listaArchivoXVersion = listaArchivoXVersion.Where(x => x.Cbarchconfidencial == 1).ToList();
                                        break;
                                }

                                // si no hay archivos para el envío entonces pasar al siguiet
                                //if (!listaArchivoXVersion.Any())
                                //    continue;

                                var estadoAbrev = GetAbrevxEstado(reg.Estenvcodi);
                                //var patTrabajo = "Temporal_" + modulo + "\\" + currentUserSession + "\\";
                                var patTrabajo = patTrabajo1 + nombreCarpeta1 + "\\";

                                string nombreCarpeta = reg.Emprnomb + "_" + reg.Cbenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaYMD2) + "_" + estadoAbrev;
                                //string pathCarpetaXEnvio = pathTemporalUsuario + "/" + nombreCarpeta;
                                string pathCarpetaXEnvio = pathCarpetaXFechaPeriodo + "/" + nombreCarpeta;
                                FileServer.CreateFolder("", pathCarpetaXEnvio, pathAlternativo);

                                //>>>>>>>>>>>>> Generar EXcel F3 vacio >>>>>>>>>>>>>>>>>
                                string ruta = pathAlternativo + "/" + pathCarpetaXEnvio;
                                string nameExcel = string.Format("formato3_{0}_{1}", reg.Emprnomb, reg.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes)) + ConstantesAppServicio.ExtensionExcel;
                                if (reg.Estenvcodi != ConstantesCombustibles.EstadoSolicitudAsignacion && reg.Estenvcodi != ConstantesCombustibles.EstadoAsignado)
                                {
                                    this.GenerarExcelPlantillaFormato(reg.Cbenvcodi, ruta, nameExcel, reg.Emprcodi, reg.Cbenvtipocentral, reg.Cbenvfechaperiodo.Value, tipoArchivo);
                                }
                                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                //crear subcarpeta (informeSustentatorio_empresas_mes)
                                string nombreCarpetaIS = string.Format("infoSust_{0}_{1}", reg.Emprnomb, reg.Cbenvfechaperiodo != null ? reg.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes) : string.Empty);
                                //string pathSustentatorios = pathTemporalUsuario + "/" + nombreCarpeta + "/" + nombreCarpetaIS;
                                string pathSustentatorios = pathCarpetaXEnvio + "/" + nombreCarpetaIS;
                                FileServer.CreateFolder("", pathSustentatorios, pathAlternativo);


                                //copiamos todo
                                this.CopiarArchivosSustentatoriosATemporalXEnvio(reg.Cbenvcodi, regVersionActual.Cbvercodi, ConstantesCombustibles.CCombcodiFechaSuministro, modulo, currentUserSession, nombreCarpeta1 + "/" + nombreCarpeta + "/" + nombreCarpetaIS);


                                //quitamos los archivos que no deben ser copiados
                                string pathDestino = GetPathSubcarpeta(patTrabajo) + nombreCarpeta + "/" + nombreCarpetaIS;
                                var documentos = FileServer.ListarArhivos(pathDestino + "\\", pathAlternativo);

                                foreach (var item in documentos)
                                {
                                    var archivo = listaArchivoXVersion.Find(x => x.Cbarchnombrefisico == item.FileName);

                                    if (archivo == null)
                                    {
                                        FileServer.DeleteBlob(pathDestino + "\\" + item.FileName, pathAlternativo);
                                    }
                                    else
                                    {
                                        //renombar
                                        FileServer.RenameBlob("", pathDestino + "/" + item.FileName, pathDestino + "/" + archivo.Cbarchnombreenvio, pathAlternativo);
                                    }
                                }
                            }
                        }
                    }
                }

                var nombreZip = $"Documentos_" + fechaInicio.ToString(ConstantesAppServicio.FormatoAnioMes) + "_" + fechaFin.ToString(ConstantesAppServicio.FormatoAnioMes) + ".zip";
                var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                if (File.Exists(rutaZip)) File.Delete(rutaZip);
                FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                nameFile = nombreZip;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        public void ExportarFormato3InfSustXEmpresas(string currentUserSession, string emprcodis, DateTime fechaInicio, DateTime fechaFin, out string nameFile)
        {
            nameFile = "";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesCombustibles.ModuloArchivosXEnvio;
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal_" + modulo) + currentUserSession;
                string pathZip = GetPathSubcarpeta("Temporal_" + modulo) + "/" + ConstantesCombustibles.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                //obtener envios
                List<CbEnvioDTO> lstSalida = FactorySic.GetCbEnvioRepository().ObtenerEnviosXPeriodo(emprcodis, -1, fechaInicio, fechaFin, ConstantesCombustibles.CombustiblesGaseosos, ConstantesCombustibles.GuardadoOficial);
                if (lstSalida.Any())
                {
                    foreach (var agrupacion in lstSalida.OrderBy(x => x.Cbenvfechaperiodo).GroupBy(x => x.Cbenvfechaperiodo))
                    {
                        var fechaCarpeta = agrupacion.Key;
                        var patTrabajo1 = "Temporal_" + modulo + "\\" + currentUserSession + "\\";

                        string nombreCarpeta1 = fechaCarpeta.Value.Date.ToString(ConstantesAppServicio.FormatoAnioMes);
                        string pathCarpetaXFechaPeriodo = pathTemporalUsuario + "/" + nombreCarpeta1;
                        FileServer.CreateFolder("", pathCarpetaXFechaPeriodo, pathAlternativo);

                        foreach (var reg in agrupacion)
                        {
                            CbVersionDTO regVersionActual = GetUltimoCbVersion(reg.Cbenvcodi);//obtiene la última versión del envío
                            if (regVersionActual != null)
                            {
                                List<CbArchivoenvioDTO> listaArchivoXVersion = GetByCriteriaCbArchivoenvios(regVersionActual.Cbvercodi);

                                // si no hay archivos para el envío entonces pasar al siguiente
                                //if (!listaArchivoXVersion.Any())
                                //    continue;

                                var estadoAbrev = GetAbrevxEstado(reg.Estenvcodi);
                                //var patTrabajo = "Temporal_" + modulo + "\\" + currentUserSession + "\\";
                                var patTrabajo = patTrabajo1 + nombreCarpeta1 + "\\";

                                string nombreCarpeta2 = reg.Cbenvcodi.ToString() + "_" + reg.Emprnomb + "_" + reg.Cbenvfecsolicitud.Date.ToString(ConstantesAppServicio.FormatoFechaDMY) + "_" + estadoAbrev;
                                //string pathCarpetaXEnvio = pathTemporalUsuario + "/" + nombreCarpeta;
                                string pathCarpetaXEnvio = pathCarpetaXFechaPeriodo + "/" + nombreCarpeta2;
                                FileServer.CreateFolder("", pathCarpetaXEnvio, pathAlternativo);

                                //>>>>>>>>>>>>> Generar EXcel F3 vacio >>>>>>>>>>>>>>>>>
                                string ruta = pathAlternativo + "/" + pathCarpetaXEnvio;
                                string nameExcel = string.Format("formato3_{0}_{1}", reg.Emprnomb, reg.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes)) + ConstantesAppServicio.ExtensionExcel;
                                if (reg.Estenvcodi != ConstantesCombustibles.EstadoSolicitudAsignacion && reg.Estenvcodi != ConstantesCombustibles.EstadoAsignado)
                                {
                                    this.GenerarExcelPlantillaFormato(reg.Cbenvcodi, ruta, nameExcel, reg.Emprcodi, reg.Cbenvtipocentral, reg.Cbenvfechaperiodo.Value, ConstantesCombustibles.ArchivosTotales);
                                }
                                //>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                //crear subcarpeta (informeSustentatorio_empresas_mes)
                                string nombreCarpetaIS = string.Format("infoSust_{0}_{1}", reg.Emprnomb, reg.Cbenvfechaperiodo != null ? reg.Cbenvfechaperiodo.Value.ToString(ConstantesAppServicio.FormatoAnioMes) : string.Empty);
                                //string pathSustentatorios = pathTemporalUsuario + "/" + nombreCarpeta + "/" + nombreCarpetaIS;
                                string pathSustentatorios = pathCarpetaXEnvio + "/" + nombreCarpetaIS;
                                FileServer.CreateFolder("", pathSustentatorios, pathAlternativo);

                                //Copiamos archivos sustentatorios
                                this.CopiarArchivosSustentatoriosATemporalXEnvio(reg.Cbenvcodi, regVersionActual.Cbvercodi, ConstantesCombustibles.CCombcodiFechaSuministro, modulo, currentUserSession, nombreCarpeta1 + "/" + nombreCarpeta2 + "/" + nombreCarpetaIS);

                                //quitamos los archivos que no deben ser copiados
                                string pathDestino = GetPathSubcarpeta(patTrabajo) + nombreCarpeta2 + "/" + nombreCarpetaIS;
                                var documentos = FileServer.ListarArhivos(pathDestino + "\\", pathAlternativo);

                                foreach (var item in documentos)
                                {
                                    var archivo = listaArchivoXVersion.Find(x => x.Cbarchnombrefisico == item.FileName);

                                    if (archivo != null)
                                    {
                                        //renombar
                                        FileServer.RenameBlob("", pathDestino + "/" + item.FileName, pathDestino + "/" + archivo.Cbarchnombreenvio, pathAlternativo);
                                    }
                                }
                            }
                        }
                    }
                }

                var nombreZip = $"Documentos.zip";
                var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                if (File.Exists(rutaZip)) File.Delete(rutaZip);
                FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                nameFile = nombreZip;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        #endregion

        #endregion

        #region Reporte Mensual de CV

        /// <summary>
        /// Devuelve versiones de envios aprobados y aprobados parcialmente para cierto mes de vigencia
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <returns></returns>
        private List<CbVersionDTO> ObtenerVersionesPorMesVigenciaYEstado(DateTime mesDeVigencia)
        {
            List<CbVersionDTO> lstSalida = new List<CbVersionDTO>();
            string mesVigencia = mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha);
            string estados = ConstantesCombustibles.EstadoAprobado + "," + ConstantesCombustibles.EstadoAprobadoParcialmente;
            lstSalida = FactorySic.GetCbVersionRepository().GetByPeriodoyEstado(mesVigencia, estados);

            return lstSalida;
        }

        /// <summary>
        /// Devuelve lista de centrales APROBADAS y APROBADAS PARCIALMENTE que partipan en el reporte mensual de CV
        /// </summary>
        /// <param name="lstVersioncodisAAP"></param>
        /// <returns></returns>
        private List<CbEnvioCentralDTO> ObtenerCentralesParticipantesReporteCV(List<string> lstVersioncodisAAP)
        {
            List<CbEnvioCentralDTO> lstSalida = new List<CbEnvioCentralDTO>();
            string versioncodis = string.Join(",", lstVersioncodisAAP);
            string estado = ConstantesCombustibles.EstadoCentralAprobado.ToString();
            lstSalida = FactorySic.GetCbEnvioCentralRepository().GetByEstadoYVersion(estado, versioncodis).Distinct().ToList();

            return lstSalida;
        }

        /// <summary>
        /// Devuelve lista de datos que sirven para procesar el reporte mensual de CV
        /// </summary>
        /// <param name="lstCentralesParticipantes"></param>
        /// <param name="tipoReporte"></param>
        /// <returns></returns>
        private List<CbDatosDTO> ObtenerDatosReporteCV(List<CbEnvioCentralDTO> lstCentralesParticipantes, int tipoReporte)
        {
            List<CbDatosDTO> lstSalida = new List<CbDatosDTO>();

            string cbcentcodis = string.Join(",", lstCentralesParticipantes.Select(x => x.Cbcentcodi));
            string concepcodis = "";

            switch (tipoReporte)
            {
                case ConstantesCombustibles.TipoReporteCVCuadro1:
                    concepcodis = ConstantesCombustibles.Concepcodi51PUSuministro + "," + ConstantesCombustibles.Concepcodi52PUTransporte + "," +
                                  ConstantesCombustibles.Concepcodi53PUDistribucion;
                    break;
                case ConstantesCombustibles.TipoReporteCVCuadro2:
                    concepcodis = ConstantesCombustibles.Concepcodi15PCSSuministro + "," + ConstantesCombustibles.Concepcodi16PCSTransporte + "," +
                                  ConstantesCombustibles.Concepcodi17PCSDistribucion + "," + ConstantesCombustibles.Concepcodi18PCSGncDistribucion + "," +
                                  ConstantesCombustibles.Concepcodi46PCSGncDistribucion + "," + ConstantesCombustibles.Concepcodi413PCSGncDistribucion + "," + ConstantesCombustibles.Concepcodi48PCSGncDistribucion;
                    break;
                case ConstantesCombustibles.TipoReporteCVCuadro3:
                    concepcodis = ConstantesCombustibles.Concepcodi15PCSSuministro + "," + ConstantesCombustibles.Concepcodi16PCSTransporte + "," +
                        ConstantesCombustibles.Concepcodi17PCSDistribucion + "," + ConstantesCombustibles.Concepcodi18PCSGncDistribucion + "," +
                        ConstantesCombustibles.Concepcodi46PCSGncDistribucion + "," + ConstantesCombustibles.Concepcodi413PCSGncDistribucion + "," + ConstantesCombustibles.Concepcodi48PCSGncDistribucion + "," +
                    ConstantesCombustibles.Concepcodi51PUSuministro + "," + ConstantesCombustibles.Concepcodi52PUTransporte + "," + ConstantesCombustibles.Concepcodi53PUDistribucion;
                    break;

                    //case ConstantesCombustibles.PorDefecto:
                    //    concepcodis = ConstantesCombustibles.Concepcodi15PCSSuministro + "," + ConstantesCombustibles.Concepcodi16PCSTransporte + "," +
                    //        ConstantesCombustibles.Concepcodi17PCSDistribucion + "," + ConstantesCombustibles.Concepcodi18PCSGncDistribucion + "," +
                    //        ConstantesCombustibles.Concepcodi51PUSuministro + "," + ConstantesCombustibles.Concepcodi52PUTransporte + "," + ConstantesCombustibles.Concepcodi53PUDistribucion;
                    //    break;
            }

            lstSalida = FactorySic.GetCbDatosRepository().GetDatosReporteCV(concepcodis, cbcentcodis).Distinct().ToList();

            return lstSalida;
        }

        /// <summary>
        /// Obtiene la informacion necesario para generar los reportes
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <param name="lstCentralesParticipantes"></param>
        /// <returns></returns>
        public List<CbDatosDTO> ObtenerInformacionReportesCV(int tipoReporte, DateTime mesDeVigencia, out List<CbEnvioCentralDTO> lstCentralesParticipantes)
        {
            List<CbDatosDTO> lstDatos = new List<CbDatosDTO>();
            lstCentralesParticipantes = new List<CbEnvioCentralDTO>();

            //Obtengo las versiones generados al aprobarse o aprobarse parcialmente
            List<CbVersionDTO> lstVersionesTotales = ObtenerVersionesPorMesVigenciaYEstado(mesDeVigencia);
            if (lstVersionesTotales.Any())
            {
                //string versionesAprobadosYAprobadosParcialmente = "";
                List<string> lstVersioncodisAAP = new List<string>();
                foreach (var reg in lstVersionesTotales.GroupBy(x => x.Cbenvcodi))
                {
                    List<CbVersionDTO> lstVersionesBYEnvio = lstVersionesTotales.Where(x => x.Cbenvcodi == reg.Key).OrderByDescending(x => x.Cbvercodi).ToList();
                    lstVersioncodisAAP.Add(lstVersionesBYEnvio.First().Cbvercodi.ToString());
                }

                //Obtengo las centrales participantes de las versioncodis halladas
                lstCentralesParticipantes = ObtenerCentralesParticipantesReporteCV(lstVersioncodisAAP);

                //ordeno el listado de las centrales segun orden de las centrales termicas
                lstCentralesParticipantes = OrdenarCentralesSegunOrden(lstCentralesParticipantes);

                lstDatos = ObtenerDatosReporteCV(lstCentralesParticipantes, tipoReporte);
            }
            return lstDatos;
        }

        /// <summary>
        /// Ordena las centrales segun su orden (campo editable desde configuracion central )
        /// </summary>
        /// <param name="lstCentralesParticipantes"></param>
        /// <returns></returns>
        private List<CbEnvioCentralDTO> OrdenarCentralesSegunOrden(List<CbEnvioCentralDTO> lstCentralesParticipantes)
        {
            List<CbEnvioCentralDTO> lstSalida = new List<CbEnvioCentralDTO>();

            List<CbCentralxfenergDTO> lstCentralesConOrden = ListCbCentralxfenergs();
            List<CbCentralxfenergDTO> lstCentralesGaseososConOrden = lstCentralesConOrden.Where(x => x.Estcomcodi == ConstantesCombustibles.EstcomcodiGas).ToList();

            foreach (var cp in lstCentralesParticipantes)
            {
                int equicodiCentral = cp.Equicodi;
                CbCentralxfenergDTO centralBuscada = lstCentralesGaseososConOrden.Find(x => x.Equicodi == equicodiCentral && x.Cbcxfevisibleapp == 1);

                if (centralBuscada != null)
                {
                    cp.OrdenLista = centralBuscada.Cbcxfeorden;
                    cp.UsadoEnExtranet = centralBuscada.Cbcxfevisibleapp;
                }
            }

            lstSalida = lstCentralesParticipantes.Where(x => x.UsadoEnExtranet == 1).OrderBy(x => x.OrdenLista).ThenBy(x => x.Equicodi).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el reporte para cierto tipo, mes y reportecodi 
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="mesDeVigencia"></param>
        /// <param name="reporteCodiEnEspecifico"></param>
        /// <returns></returns>
        public string[][] ObtenerReporteCVGuardado(int tipoReporte, DateTime mesDeVigencia, int? reporteCodiEnEspecifico, out int cbrepcodiX, out string nombreReporteX, out string notasX, out string filasPintadas)
        {
            string[][] data = new string[20][];
            bool hayDatos = false;
            filasPintadas = "";

            CbReporteDTO reporte = new CbReporteDTO();

            //OBTENGO TODA LA DATA DEL REPORTE
            //si existe reportecodi, traigo ese
            if (reporteCodiEnEspecifico != null)
            {
                hayDatos = true;
                cbrepcodiX = reporteCodiEnEspecifico.Value;

                //REPORTE
                reporte = GetByIdCbReporte(reporteCodiEnEspecifico.Value);
                nombreReporteX = reporte.Cbrepnombre;

                CompletarDatosReporte(reporte, tipoReporte, out notasX);

            }
            else //traigo el ultimo para dicho mes de vigencia y tipo (si existiesen)
            {
                List<CbReporteDTO> lstReportesTempOrdenado = ObtenerReportesPorReporteYMesVigencia(tipoReporte, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));

                //si existen guardados, uso el ultimo
                if (lstReportesTempOrdenado.Any())
                {
                    hayDatos = true;

                    //REPORTE
                    reporte = lstReportesTempOrdenado.First();
                    cbrepcodiX = reporte.Cbrepcodi;
                    nombreReporteX = reporte.Cbrepnombre;

                    CompletarDatosReporte(reporte, tipoReporte, out notasX);

                }
                else
                {
                    cbrepcodiX = 0;
                    nombreReporteX = tipoReporte == ConstantesCombustibles.TipoReporteCVCVC ? "COSTO VARIABLE COMBUSTIBLE (CVC)" : "";
                    notasX = "";
                    data = null;
                }
            }

            //para reportes C1, C2 y C3
            if (tipoReporte != ConstantesCombustibles.TipoReporteCVCVC)
            {
                if (hayDatos)
                    data = ObtenerMatrizReporteGuardado(tipoReporte, reporte);

                //filas pintadas
                if (tipoReporte == ConstantesCombustibles.TipoReporteCVCuadro3)
                {
                    if (data != null)
                    {
                        filasPintadas = ObtenerFilasPintadas(data);
                    }
                }
            }

            return data;
        }

        /// <summary>
        /// Completa las notas, cabeceras, centrales y detalles para cierto reporte
        /// </summary>
        /// <param name="reporte"></param>
        /// <param name="tipoReporte"></param>
        /// <param name="notasX"></param>
        public void CompletarDatosReporte(CbReporteDTO reporte, int tipoReporte, out string notasX)
        {
            List<CbNotaDTO> lstNotitas = new List<CbNotaDTO>();
            List<CbRepCabeceraDTO> lstCabeceras = new List<CbRepCabeceraDTO>();
            List<CbReporteCentralDTO> lstCentralesTemp = new List<CbReporteCentralDTO>();
            List<CbReporteCentralDTO> lstCentrales = new List<CbReporteCentralDTO>();

            //NOTAS
            lstNotitas = FactorySic.GetCbNotaRepository().GetByReporte(reporte.Cbrepcodi);
            notasX = String.Join("@", lstNotitas.Select(x => x.Cbnotadescripcion));

            //CABECERAS
            lstCabeceras = FactorySic.GetCbRepCabeceraRepository().GetByIdReporte(reporte.Cbrepcodi);
            //seteo las filas y columnas para las cabeceras
            foreach (var repCab in lstCabeceras)
            {
                ObtenerFilaColumnaReporteCabecera(tipoReporte, repCab.Cbrprocodi, out int filaX, out int columnaX);
                repCab.Fila = filaX;
                repCab.Columna = columnaX;
            }
            reporte.ListaCabeceras = lstCabeceras;

            //CENTRALES Y DETALLES 
            lstCentralesTemp = ObtenerCentralesDelReporte(reporte.Cbrepcodi);
            foreach (var central in lstCentralesTemp)
            {
                List<CbReporteDetalleDTO> lstRepDetalles = new List<CbReporteDetalleDTO>();
                lstRepDetalles = FactorySic.GetCbReporteDetalleRepository().GetByIdCentral(central.Cbrcencodi);
                central.ListaDetalles = lstRepDetalles;
            }
            lstCentrales = OrdenarCentralesDeBD(lstCentralesTemp);

            reporte.ListaCentrales = lstCentrales;
        }


        /// <summary>
        /// Ordena las centrales que estan guardadas en la base de datos segun su campo cbrcenorden
        /// </summary>
        /// <param name="lstCentralesTemp"></param>
        /// <returns></returns>
        public List<CbReporteCentralDTO> OrdenarCentralesDeBD(List<CbReporteCentralDTO> lstCentralesTemp)
        {
            List<CbReporteCentralDTO> lstSalida = new List<CbReporteCentralDTO>();

            lstSalida = lstCentralesTemp.OrderBy(x => x.Cbrcenorden).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Devuelve listado de filas a pintar
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ObtenerFilasPintadas(string[][] data)
        {
            string salida = "";
            List<string> lstSalida = new List<string>();
            int numFilas = data.Length;

            for (int fila = 0; fila < numFilas; fila++)
            {
                string valC6 = data[fila][6];

                if (valC6 == "3") //si se debe colorear
                {
                    lstSalida.Add(fila.ToString());
                }
            }
            salida = string.Join(",", lstSalida);

            return salida;
        }

        /// <summary>
        /// Devuelve la matriz con la data del reporte guardado
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="reporte"></param>
        /// <returns></returns>
        private string[][] ObtenerMatrizReporteGuardado(int tipoReporte, CbReporteDTO reporte)
        {
            int numFilas = 3 + reporte.ListaCentrales.Count();
            int numColumnas = -1;

            string[][] data = new string[numFilas][];

            //creamos cabecera
            switch (tipoReporte)
            {
                case ConstantesCombustibles.TipoReporteCVCuadro1:
                    numColumnas = 5;
                    for (int fila = 0; fila < 3; fila++)
                    {
                        data[fila] = new string[numColumnas];
                        for (int col = 0; col < numColumnas; col++)
                        {
                            CbRepCabeceraDTO rc = reporte.ListaCabeceras.Find(x => x.Fila == fila && x.Columna == col);
                            string val = rc != null ? rc.Cbrcabdescripcion : "";
                            data[fila][col] = val;

                        }
                    }

                    break;

                case ConstantesCombustibles.TipoReporteCVCuadro2:
                    numColumnas = 6; //ultima fila pongo los cbrcencodis
                    for (int fila = 0; fila < 3; fila++)
                    {
                        data[fila] = new string[numColumnas];
                        for (int col = 0; col < numColumnas; col++)
                        {
                            CbRepCabeceraDTO rc = reporte.ListaCabeceras.Find(x => x.Fila == fila && x.Columna == col);
                            string val = rc != null ? rc.Cbrcabdescripcion : "";
                            data[fila][col] = val;

                        }
                    }

                    break;

                case ConstantesCombustibles.TipoReporteCVCuadro3:
                    numColumnas = 7; // 5 + 2 : ultima fila pongo los cbrcencodis y al final si colorea
                    for (int fila = 0; fila < 3; fila++)
                    {
                        data[fila] = new string[numColumnas];
                        for (int col = 0; col < numColumnas; col++)
                        {
                            CbRepCabeceraDTO rc = reporte.ListaCabeceras.Find(x => x.Fila == fila && x.Columna == col);
                            string val = rc != null ? rc.Cbrcabdescripcion : "";
                            data[fila][col] = val;

                        }
                    }

                    break;

            }

            int numFila = 3;

            //creamos cuerpo
            foreach (var central in reporte.ListaCentrales)
            {
                data[numFila] = new string[numColumnas];
                for (int col = 0; col < numColumnas; col++)
                {
                    //obtenemos ccombcodi segun posicion de la columna 
                    int miCcombcodi = 0;
                    switch (tipoReporte)
                    {
                        case ConstantesCombustibles.TipoReporteCVCuadro1:
                            switch (col)
                            {
                                case 1: miCcombcodi = ConstantesCombustibles.Concepcodi51PUSuministro; break;
                                case 2: miCcombcodi = ConstantesCombustibles.Concepcodi52PUTransporte; break;
                                case 3: miCcombcodi = ConstantesCombustibles.Concepcodi53PUDistribucion; break;
                            }

                            break;

                        case ConstantesCombustibles.TipoReporteCVCuadro2:
                            switch (col)
                            {
                                case 1: miCcombcodi = ConstantesCombustibles.Concepcodi15PCSSuministro; break;
                                case 2: miCcombcodi = ConstantesCombustibles.Concepcodi16PCSTransporte; break;
                                case 3: miCcombcodi = ConstantesCombustibles.Concepcodi17PCSDistribucion; break;
                                case 4: miCcombcodi = ConstantesCombustibles.ConceptocodiPCI; break;
                            }

                            break;

                        case ConstantesCombustibles.TipoReporteCVCuadro3:
                            switch (col)
                            {
                                case 1: miCcombcodi = ConstantesCombustibles.Concepcodi51PUSuministro; break;
                                case 2: miCcombcodi = ConstantesCombustibles.Concepcodi52PUTransporte; break;
                                case 3: miCcombcodi = ConstantesCombustibles.Concepcodi53PUDistribucion; break;
                                case 4: miCcombcodi = ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso; break;
                            }

                            break;

                    }


                    if (col == 0) //Lleno el nombre de la central   
                    {
                        data[numFila][col] = central.Cbrcennombre.Trim() != null ? central.Cbrcennombre.Trim() : "";
                    }
                    else
                    {
                        //data para cuadro 1 y cuadro 2
                        if (tipoReporte == ConstantesCombustibles.TipoReporteCVCuadro1 || tipoReporte == ConstantesCombustibles.TipoReporteCVCuadro2)
                        {
                            if (col != numColumnas - 1)  //Lleno los datos de las columnas
                            {
                                CbReporteDetalleDTO dato = central.ListaDetalles.Find(x => x.Ccombcodi == miCcombcodi);
                                data[numFila][col] = dato != null ? dato.Cbrepdvalor : "";
                            }
                            else //en la ultima fila pongo Cbcentcodi
                            {
                                data[numFila][col] = central.Cbcentcodi.ToString();
                            }
                        }

                        //data para cuadro 3
                        if (tipoReporte == ConstantesCombustibles.TipoReporteCVCuadro3)
                        {
                            if (col < numColumnas - 2)  //Lleno los datos de las columnas
                            {
                                CbReporteDetalleDTO dato = central.ListaDetalles.Find(x => x.Ccombcodi == miCcombcodi);
                                data[numFila][col] = dato != null ? dato.Cbrepdvalor : "";
                            }
                            else
                            {
                                if (col == numColumnas - 2)//en la penultima fila pongo Cbcentcodi
                                {
                                    data[numFila][col] = central.Cbcentcodi.ToString();
                                }


                                if (col == numColumnas - 1)//en la ultima fila pongo si colorea
                                {
                                    //data[numFila][col] = central.Cbrcencoloreado != null ? central.Cbrcencoloreado.ToString() : "0";
                                    data[numFila][col] = central.Cbrcenorigen.ToString();
                                }
                            }
                        }
                    }
                }
                numFila++;
            }

            return data;
        }

        /// <summary>
        /// Devuelve la matriz del cuadro 1 con la informacion procesada
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <param name="nombreReporteC1"></param>
        /// <param name="notasC1"></param>
        /// <returns></returns>
        public string[][] ObtenerDataReprocesoReporteC1(DateTime mesDeVigencia, out string nombreReporteC1, out string notasC1)
        {
            string[][] data = new string[20][];

            List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
            List<CbDatosDTO> lstDatos = ObtenerInformacionReportesCV(ConstantesCombustibles.TipoReporteCVCuadro1, mesDeVigencia, out lstCentralesParticipantes);

            if (lstDatos.Any())
            {
                //Busco reportes guardados para el mes de vigencia
                List<CbReporteDTO> versionesGuardadas = ObtenerReportesGuardados(ConstantesCombustibles.TipoReporteCVCuadro1, mesDeVigencia);

                List<CbNotaDTO> lstNotasUsar = new List<CbNotaDTO>();
                List<CbRepCabeceraDTO> lstCabeceraUsar = new List<CbRepCabeceraDTO>();

                //si hay reportes guardadas, uso su nombre, cabecera y sus notas
                if (versionesGuardadas.Any())
                {
                    CbReporteDTO ultimoGuardado = versionesGuardadas.First();
                    lstNotasUsar = ultimoGuardado.ListaNotas;
                    lstCabeceraUsar = ultimoGuardado.ListaCabeceras;

                    nombreReporteC1 = ultimoGuardado.Cbrepnombre;
                    notasC1 = String.Join("@", lstNotasUsar.Select(x => x.Cbnotadescripcion));

                    //seteo las filas y columnas para las cabeceras
                    foreach (var repCab in lstCabeceraUsar)
                    {
                        ObtenerFilaColumnaReporteCabecera(ConstantesCombustibles.TipoReporteCVCuadro1, repCab.Cbrprocodi, out int filaX, out int columnaX);
                        repCab.Fila = filaX;
                        repCab.Columna = columnaX;
                    }
                }
                else // si no hay reportes, uso el  por defecto (sin notas y cabecera por default que estan guardados en tabla propiedades)
                {
                    nombreReporteC1 = "PRECIOS UNITARIOS INFORMADOS POR LOS PARTICIPANTES GENERADORES";
                    notasC1 = "";
                    List<CbRepPropiedadDTO> lstPropiedades = ListCbRepPropiedads();
                    lstCabeceraUsar = ObtenerCabeceraPorDefecto(ConstantesCombustibles.TipoReporteCVCuadro1, lstPropiedades);
                }

                data = ObtenerMatrizReporteProcesar(ConstantesCombustibles.TipoReporteCVCuadro1, lstCentralesParticipantes, lstDatos, lstNotasUsar, lstCabeceraUsar);
            }
            else
            {
                nombreReporteC1 = "";
                notasC1 = "";
                data = null;
            }
            return data;
        }

        /// <summary>
        /// Verifica si el reporte ya tiene versiones
        /// </summary>
        /// <param name="tipoReporteCVCuadro1"></param>
        /// <param name="mesDeVigencia"></param>
        /// <returns></returns>
        public int VerificarExistenciaVersion1(int cuadro, DateTime mesDeVigencia)
        {
            int salida = 0;
            List<CbReporteDTO> lstReportesTempOrdenado = ObtenerReportesPorReporteYMesVigencia(cuadro, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));

            if (lstReportesTempOrdenado.Any())
                salida = 1;

            return salida;
        }

        /// <summary>
        /// Devuelve la matriz con la informacion del handson del reporte para cuadro 1 y 2
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="lstCentralesParticipantes"></param>
        /// <param name="lstDatos"></param>
        /// <param name="lstNotasUsar"></param>
        /// <param name="lstCabeceraUsar"></param>
        /// <returns></returns>
        private string[][] ObtenerMatrizReporteProcesar(int tipoReporte, List<CbEnvioCentralDTO> lstCentralesParticipantes, List<CbDatosDTO> lstDatos, List<CbNotaDTO> lstNotasUsar, List<CbRepCabeceraDTO> lstCabeceraUsar)
        {
            int numFilas = 3 + lstCentralesParticipantes.Count();
            int numColumnas = 1; //se setea mas abajo para cada caso (c1, c2 y c3)

            string[][] data = new string[numFilas][];

            //creamos cabecera
            switch (tipoReporte)
            {
                case ConstantesCombustibles.TipoReporteCVCuadro1: numColumnas = 5; break;
                case ConstantesCombustibles.TipoReporteCVCuadro2: numColumnas = 6; break;
            }

            for (int fila = 0; fila < 3; fila++)
            {
                data[fila] = new string[numColumnas];
                for (int col = 0; col < numColumnas; col++)
                {
                    CbRepCabeceraDTO rc = lstCabeceraUsar.Find(x => x.Fila == fila && x.Columna == col);
                    string val = rc != null ? rc.Cbrcabdescripcion : "";
                    data[fila][col] = val;

                }
            }

            int numFila = 3;
            //creamos cuerpo
            foreach (var central in lstCentralesParticipantes)
            {
                //obtenemos los datos por cada central
                List<CbDatosDTO> datosPorCentral = lstDatos.Where(x => x.Cbcentcodi == central.Cbcentcodi).ToList();

                data[numFila] = new string[numColumnas];
                for (int col = 0; col < numColumnas; col++)
                {
                    //obtenemos ccombcodi segun posicion de la columna
                    int miCcombcodi = 0;
                    switch (tipoReporte)
                    {
                        case ConstantesCombustibles.TipoReporteCVCuadro1:
                            switch (col)
                            {
                                case 1: miCcombcodi = ConstantesCombustibles.Concepcodi51PUSuministro; break;
                                case 2: miCcombcodi = ConstantesCombustibles.Concepcodi52PUTransporte; break;
                                case 3: miCcombcodi = ConstantesCombustibles.Concepcodi53PUDistribucion; break;
                            }

                            //pinto la columna central
                            if (col == 0)
                            {
                                data[numFila][col] = central.Equinomb.Trim() != null ? central.Equinomb.Trim() : "";
                            }
                            else //pinto columnas datos
                            {
                                if (col != numColumnas - 1)
                                {
                                    CbDatosDTO dato = datosPorCentral.Find(x => x.Ccombcodi == miCcombcodi);

                                    //los valores deben ser tal cual está en la seccion 5.0 del Formulario 3
                                    data[numFila][col] = dato != null ? (decimal.TryParse(dato.Cbevdavalor, out decimal val) ? val + "" : dato.Cbevdavalor) : "";
                                }
                                else //en la ultima fila pongo Cbcentcodi
                                {
                                    data[numFila][col] = central.Cbcentcodi.ToString();
                                }
                            }
                            break;

                        case ConstantesCombustibles.TipoReporteCVCuadro2:

                            //pinto la columna central
                            if (col == 0)
                            {
                                data[numFila][col] = central.Equinomb.Trim() != null ? central.Equinomb.Trim() : "";
                            }
                            else //pinto columnas datos
                            {
                                if (col != numColumnas - 1)
                                {
                                    switch (col)
                                    {
                                        case 1: //mismo que PCS Suministro
                                            miCcombcodi = ConstantesCombustibles.Concepcodi15PCSSuministro;
                                            CbDatosDTO dato = datosPorCentral.Find(x => x.Ccombcodi == miCcombcodi);

                                            data[numFila][col] = dato != null ? (decimal.TryParse(dato.Cbevdavalor, out decimal val1) ? val1.ToString("###0.00") : dato.Cbevdavalor) : "";
                                            break;

                                        case 2: //Mismo que PCS Transporte
                                            miCcombcodi = ConstantesCombustibles.Concepcodi16PCSTransporte;
                                            CbDatosDTO dato2 = datosPorCentral.Find(x => x.Ccombcodi == miCcombcodi);

                                            data[numFila][col] = dato2 != null ? (decimal.TryParse(dato2.Cbevdavalor, out decimal val2) ? val2.ToString("###0.00") : dato2.Cbevdavalor) : "";
                                            break;

                                        case 3: //(C1.7*(C4.6*365/12+C4.13)+C1.8*C4.15)/((C4.6*365/12+4.13)+C4.15)                                            
                                            string pciDistribucionVal = ObtenerPCIDistribucionReportesCV(datosPorCentral);
                                            string vd = decimal.TryParse(pciDistribucionVal, out decimal vals) ? vals.ToString("###0.00") : pciDistribucionVal;
                                            data[numFila][col] = vd;
                                            break;

                                        case 4:
                                            miCcombcodi = ConstantesCombustibles.ConceptocodiPCI;
                                            CbDatosDTO dato4 = datosPorCentral.Find(x => x.Ccombcodi == miCcombcodi);

                                            data[numFila][col] = dato4 != null ? (decimal.TryParse(dato4.Cbevdavalor, out decimal val4) ? val4.ToString() : dato4.Cbevdavalor) : "";
                                            break;
                                    }


                                }
                                else //en la ultima fila pongo Cbcentcodi
                                {
                                    data[numFila][col] = central.Cbcentcodi.ToString();
                                }
                            }
                            break;
                    }
                }
                numFila++;
            }


            return data;
        }


        /// <summary>
        /// Ordena las centrales para el cuadro3
        /// </summary>
        /// <param name="lstCentralesParticipantesExistentes"></param>
        /// <param name="lstCentralesParticipantesAsignados"></param>
        /// <param name="lstCentralesDatosIncumplidos"></param>
        /// <returns></returns>
        private List<CentralC3> ReordenarCentralesPorOrdenC3(List<CbEnvioCentralDTO> lstCentralesParticipantesExistentes, List<CbEnvioCentralDTO> lstCentralesParticipantesAsignados, List<CbReporteCentralDTO> lstCentralesDatosIncumplidos)
        {
            List<CentralC3> lstSalida = new List<CentralC3>();

            List<CentralC3> lstCbCentCodis = new List<CentralC3>();

            //Uno todas las centrales
            foreach (var item in lstCentralesParticipantesExistentes)
            {
                CentralC3 ob = new CentralC3();
                ob.Cbcentcodi = item.Cbcentcodi;
                ob.TipoDato = ConstantesCombustibles.TipoExistente;
                ob.Orden = null;

                lstCbCentCodis.Add(ob);
            }

            foreach (var item in lstCentralesParticipantesAsignados)
            {
                CentralC3 ob = new CentralC3();
                ob.Cbcentcodi = item.Cbcentcodi;
                ob.TipoDato = ConstantesCombustibles.TipoAsignado;
                ob.Orden = null;

                lstCbCentCodis.Add(ob);
            }

            foreach (var item in lstCentralesDatosIncumplidos)
            {
                CentralC3 ob = new CentralC3();
                ob.Cbcentcodi = item.Cbcentcodi;
                ob.TipoDato = ConstantesCombustibles.TipoIncumplimiento;
                ob.Orden = null;

                lstCbCentCodis.Add(ob);
            }

            //Coloc orden a las centrales
            List<CbCentralxfenergDTO> lstCentralesConOrden = ListCbCentralxfenergs();
            List<CbEnvioCentralDTO> lstCentralesDa = ListCbEnvioCentrals();
            List<CbCentralxfenergDTO> lstCentralesGaseososConOrden = lstCentralesConOrden.Where(x => x.Estcomcodi == ConstantesCombustibles.EstcomcodiGas).ToList();

            foreach (var objt in lstCbCentCodis)
            {
                int micbcentcodi = objt.Cbcentcodi;
                CbEnvioCentralDTO cen = lstCentralesDa.Find(x => x.Cbcentcodi == micbcentcodi);
                int miequicodi = cen.Equicodi;

                CbCentralxfenergDTO centralBuscada = lstCentralesGaseososConOrden.Find(x => x.Equicodi == miequicodi && x.Cbcxfevisibleapp == 1);

                if (centralBuscada != null)
                {
                    objt.Orden = centralBuscada.Cbcxfeorden;
                    objt.UsadoEnLaExtranet = centralBuscada.Cbcxfevisibleapp;
                }

            }

            lstSalida = lstCbCentCodis.Where(x => x.UsadoEnLaExtranet == 1).OrderBy(x => x.Orden).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Devuelve la matriz para cuadro 3
        /// </summary>
        /// <param name="lstCentralesParticipantesExistentes"></param>
        /// <param name="lstDatosExistentes"></param>
        /// <param name="lstCentralesParticipantesAsignados"></param>
        /// <param name="lstDatosAsignados"></param>
        /// <param name="lstCentralesParticipantesIncumplidos"></param>
        /// <param name="lstCentralesDatosIncumplidos"></param>
        /// <param name="lstNotasUsar"></param>
        /// <param name="lstCabeceraUsar"></param>
        /// <returns></returns>
        private string[][] ObtenerMatrizC3ReporteProcesar(List<CbEnvioCentralDTO> lstCentralesParticipantesExistentes, List<CbDatosDTO> lstDatosExistentes, List<CbEnvioCentralDTO> lstCentralesParticipantesAsignados,
                                                          List<CbDatosDTO> lstDatosAsignados, List<CbEnvioCentralDTO> lstCentralesParticipantesIncumplidos, List<CbReporteCentralDTO> lstCentralesDatosIncumplidos,
                                                          List<CbNotaDTO> lstNotasUsar, List<CbRepCabeceraDTO> lstCabeceraUsar, List<CbReporteCentralDTO> lstDataBDDelReporteC1, List<CbReporteCentralDTO> lstDataBDDelReporteC2)
        {
            //Reordenamos las centrales segun Orden
            List<CentralC3> lstCentralesOrdenadaSegunOrden = ReordenarCentralesPorOrdenC3(lstCentralesParticipantesExistentes, lstCentralesParticipantesAsignados, lstCentralesDatosIncumplidos);

            int numFilas = 3 + lstCentralesParticipantesExistentes.Count() + lstCentralesParticipantesAsignados.Count() + lstCentralesParticipantesIncumplidos.Count();
            int numColumnas = 7; // 5 + 2 (codigo reporte central y  tipo dato)

            string[][] data = new string[numFilas][];

            //creamos cabecera
            for (int fila = 0; fila < 3; fila++)
            {
                data[fila] = new string[numColumnas];
                for (int col = 0; col < numColumnas; col++)
                {
                    CbRepCabeceraDTO rc = lstCabeceraUsar.Find(x => x.Fila == fila && x.Columna == col);
                    string val = rc != null ? rc.Cbrcabdescripcion : "";
                    data[fila][col] = val;

                }
            }

            int numFila = 3;
            //cREAMOS EL CUERPO

            foreach (var centralOrdenada in lstCentralesOrdenadaSegunOrden)
            {
                int tipo = centralOrdenada.TipoDato;
                int miCbcentcodi = centralOrdenada.Cbcentcodi;

                switch (tipo)
                {
                    case ConstantesCombustibles.TipoExistente:

                        CbEnvioCentralDTO central_1 = lstCentralesParticipantesExistentes.Find(x => x.Cbcentcodi == miCbcentcodi);
                        ////obtenemos los datos por cada central
                        List<CbDatosDTO> datosPorCentral = lstDatosExistentes.Where(x => x.Cbcentcodi == central_1.Cbcentcodi).ToList();

                        //Obtengo datos guardados del reporte C1 y C2
                        CbReporteCentralDTO rc1 = lstDataBDDelReporteC1.Find(x => x.Cbcentcodi == central_1.Cbcentcodi);
                        CbReporteCentralDTO rc2 = lstDataBDDelReporteC2.Find(x => x.Cbcentcodi == central_1.Cbcentcodi);
                        List<CbReporteDetalleDTO> datosPorCentralBD_C1 = rc1 != null ? rc1.ListaDetalles : new List<CbReporteDetalleDTO>();
                        List<CbReporteDetalleDTO> datosPorCentralBD_C2 = rc2 != null ? rc2.ListaDetalles : new List<CbReporteDetalleDTO>();

                        data[numFila] = new string[numColumnas];
                        for (int col = 0; col < numColumnas; col++)
                        {

                            if (col == 0)
                            {
                                data[numFila][col] = central_1.Equinomb.Trim() != null ? central_1.Equinomb.Trim() : "";
                            }
                            else //pinto columnas datos
                            {
                                if (col < numColumnas - 2)
                                {
                                    switch (col)
                                    {
                                        case 1: //(PU*PCS/PCI)Suministro
                                            string puSuministro = ObtenerPUSuministroC3(datosPorCentral, datosPorCentralBD_C1, datosPorCentralBD_C2);
                                            string vs = decimal.TryParse(puSuministro, out decimal vals) ? vals.ToString("#####0.0000") : puSuministro;
                                            data[numFila][col] = vs;
                                            break;

                                        case 2: //(PU*PCS/PCI)Transporte
                                            string puTransporte = ObtenerPUTransporteC3(datosPorCentral, datosPorCentralBD_C1, datosPorCentralBD_C2);
                                            string vt = decimal.TryParse(puTransporte, out decimal valt) ? valt.ToString("#####0.0000") : puTransporte;
                                            data[numFila][col] = vt;
                                            break;

                                        case 3: //(PU*PCS/PCI)Distribucion                                          
                                            string puDistribucion = ObtenerPUDistribucionC3(datosPorCentral, datosPorCentralBD_C1, datosPorCentralBD_C2);
                                            string vd = decimal.TryParse(puDistribucion, out decimal vald) ? vald.ToString("#####0.0000") : puDistribucion;
                                            data[numFila][col] = vd;

                                            break;

                                        case 4:
                                            string puSuministroX = ObtenerPUSuministroC3(datosPorCentral, datosPorCentralBD_C1, datosPorCentralBD_C2);
                                            bool puSIsNumero = decimal.TryParse(puSuministroX, out decimal puSX);

                                            string puTransporteX = ObtenerPUTransporteC3(datosPorCentral, datosPorCentralBD_C1, datosPorCentralBD_C2);
                                            bool puTIsNumero = decimal.TryParse(puTransporteX, out decimal puTX);

                                            string puDistribucionX = ObtenerPUDistribucionC3(datosPorCentral, datosPorCentralBD_C1, datosPorCentralBD_C2);
                                            bool puDIsNumero = decimal.TryParse(puDistribucionX, out decimal puDX);

                                            decimal sumatoria = (puSIsNumero ? Math.Round(puSX, 4) : 0) + (puTIsNumero ? Math.Round(puTX, 4) : 0) + (puDIsNumero ? Math.Round(puDX, 4) : 0);

                                            string val = sumatoria.ToString("#####0.0000");

                                            //si todos son NO APLICA
                                            if (puSuministroX.Trim().ToUpper() == "NO APLICA" && puTransporteX.Trim().ToUpper() == "NO APLICA" && puDistribucionX.Trim().ToUpper() == "NO APLICA")
                                            {
                                                val = "No Aplica";
                                            }

                                            data[numFila][col] = val;

                                            break;
                                    }
                                }
                                else
                                {
                                    if (col == numColumnas - 2)//en la penultima fila pongo Cbcentcodi
                                    {
                                        data[numFila][col] = central_1.Cbcentcodi.ToString();
                                    }
                                    if (col == numColumnas - 1)//en la ultima fila pongo tipo
                                    {
                                        data[numFila][col] = central_1.TipoC3.ToString();
                                    }
                                }
                            }
                        }


                        break;
                    case ConstantesCombustibles.TipoAsignado:

                        CbEnvioCentralDTO central_2 = lstCentralesParticipantesAsignados.Find(x => x.Cbcentcodi == miCbcentcodi);
                        ////obtenemos los datos por cada central
                        List<CbDatosDTO> datosPorCentral2 = lstDatosAsignados.Where(x => x.Cbcentcodi == central_2.Cbcentcodi).ToList();

                        data[numFila] = new string[numColumnas];
                        for (int col = 0; col < numColumnas; col++)
                        {

                            if (col == 0)
                            {
                                data[numFila][col] = central_2.Equinomb.Trim() != null ? central_2.Equinomb.Trim() : "";
                            }
                            else //pinto columnas datos
                            {
                                if (col < numColumnas - 2)
                                {
                                    data[numFila][col] = "---";

                                    if (col == numColumnas - 3)
                                    {
                                        CbDatosDTO datoPU = datosPorCentral2.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso);
                                        string valPUTransporte = datoPU != null ? (decimal.TryParse(datoPU.Cbevdavalor, out decimal val) ? val.ToString("#####0.0000") : datoPU.Cbevdavalor) : "";
                                        data[numFila][col] = valPUTransporte;

                                    }
                                }
                                else
                                {
                                    if (col == numColumnas - 2)//en la penultima fila pongo Cbcentcodi
                                    {
                                        data[numFila][col] = central_2.Cbcentcodi.ToString();
                                    }
                                    if (col == numColumnas - 1)//en la ultima fila pongo tipo
                                    {
                                        data[numFila][col] = central_2.TipoC3.ToString();
                                    }
                                }
                            }
                        }

                        break;
                    case ConstantesCombustibles.TipoIncumplimiento:

                        CbReporteCentralDTO central_3 = lstCentralesDatosIncumplidos.Find(x => x.Cbcentcodi == miCbcentcodi);

                        List<CbReporteDetalleDTO> lstdataMesPasado = central_3.ListaDetalles;
                        CbEnvioCentralDTO enviocentral = lstCentralesParticipantesIncumplidos.Find(c => c.Equicodi == central_3.Equicodi);

                        data[numFila] = new string[numColumnas];
                        for (int col = 0; col < numColumnas; col++)
                        {

                            if (col == 0)
                            {
                                data[numFila][col] = central_3.Cbrcennombre.Trim() != null ? central_3.Cbrcennombre.Trim() : "";
                            }
                            else
                            {
                                if (col < numColumnas - 2)
                                {
                                    switch (col)
                                    {
                                        case 1:
                                            CbReporteDetalleDTO datoS = lstdataMesPasado.Find(c => c.Ccombcodi == ConstantesCombustibles.Concepcodi51PUSuministro);
                                            string vS = datoS != null ? (decimal.TryParse(datoS.Cbrepdvalor, out decimal valS) ? valS.ToString("#####0.0000") : datoS.Cbrepdvalor) : "";
                                            data[numFila][col] = vS;
                                            break;

                                        case 2:
                                            CbReporteDetalleDTO datoT = lstdataMesPasado.Find(c => c.Ccombcodi == ConstantesCombustibles.Concepcodi52PUTransporte);
                                            string vT = datoT != null ? (decimal.TryParse(datoT.Cbrepdvalor, out decimal valT) ? valT.ToString("#####0.0000") : datoT.Cbrepdvalor) : "";
                                            data[numFila][col] = vT;
                                            break;

                                        case 3:
                                            CbReporteDetalleDTO datoD = lstdataMesPasado.Find(c => c.Ccombcodi == ConstantesCombustibles.Concepcodi53PUDistribucion);
                                            string vD = datoD != null ? (decimal.TryParse(datoD.Cbrepdvalor, out decimal valD) ? valD.ToString("#####0.0000") : datoD.Cbrepdvalor) : "";
                                            data[numFila][col] = vD;

                                            break;

                                        case 4:
                                            CbReporteDetalleDTO datoCC = lstdataMesPasado.Find(c => c.Ccombcodi == ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso);
                                            string vCC = datoCC != null ? (decimal.TryParse(datoCC.Cbrepdvalor, out decimal valCC) ? valCC.ToString("#####0.0000") : datoCC.Cbrepdvalor) : "";
                                            data[numFila][col] = vCC;

                                            break;
                                    }
                                }
                                else
                                {
                                    if (col == numColumnas - 2)//en la penultima fila pongo Cbcentcodi
                                    {
                                        data[numFila][col] = central_3.Cbcentcodi.ToString();
                                    }
                                    if (col == numColumnas - 1)//en la ultima fila pongo tipo
                                    {
                                        data[numFila][col] = enviocentral != null ? enviocentral.TipoC3.ToString() : "";
                                    }
                                }
                            }
                        }

                        break;

                }
                numFila++;
            }



            return data;
        }

        /// <summary>
        /// Devuelve primera columna del C3
        /// </summary>
        /// <param name="datosPorCentral"></param>
        /// <returns></returns>
        private string ObtenerPUSuministroC3(List<CbDatosDTO> datosPorCentral, List<CbReporteDetalleDTO> datosPorCentralBD_C1, List<CbReporteDetalleDTO> datosPorCentralBD_C2)
        {
            // (PU * PCS / PCI)Suministro
            string resultado = "";

            //Val PUSuministro
            string valPUSuministro = "";
            if (datosPorCentralBD_C1.Any())//busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC1 = datosPorCentralBD_C1.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi51PUSuministro);
                valPUSuministro = datoC1 != null ? datoC1.Cbrepdvalor : "";
            }
            else//busco en la BD (CB_Datos)
            {
                CbDatosDTO datoPU = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi51PUSuministro);
                valPUSuministro = datoPU != null ? datoPU.Cbevdavalor : "";
            }
            bool puIsNumero = decimal.TryParse(valPUSuministro, out decimal pu);


            //Val CPSSuministro
            string valPCSSuministro = "";
            if (datosPorCentralBD_C2.Any()) //busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC2_1 = datosPorCentralBD_C2.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi15PCSSuministro);
                valPCSSuministro = datoC2_1 != null ? datoC2_1.Cbrepdvalor : "";
            }
            else //busco en la BD (CB_Datos)
            {
                CbDatosDTO datoPCS = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi15PCSSuministro);
                valPCSSuministro = datoPCS != null ? datoPCS.Cbevdavalor : "";
            }
            bool pcsIsNumero = decimal.TryParse(valPCSSuministro, out decimal pcs);

            //Val CPISuministro
            string valPCISuministro = "";
            if (datosPorCentralBD_C2.Any())//busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC2_2 = datosPorCentralBD_C2.Find(x => x.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI);
                valPCISuministro = datoC2_2 != null ? datoC2_2.Cbrepdvalor : "";
            }
            else//busco en la BD (CB_Datos)
            {
                CbDatosDTO datoPCI = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI);
                valPCISuministro = datoPCI != null ? datoPCI.Cbevdavalor : "";
            }
            bool pciIsNumero = decimal.TryParse(valPCISuministro, out decimal pci);

            if (puIsNumero && pcsIsNumero && pciIsNumero)
            {
                if (pci != 0)
                    resultado = (pu * pcs / pci) + "";
            }
            else
            {
                //Si cualquiera de los datos traidos del formato 3 es NO APLICA entonces el resultado sera NO APLICA
                if (valPUSuministro.Trim().ToUpper() == "NO APLICA" || valPCSSuministro.Trim().ToUpper() == "NO APLICA" || valPCISuministro.Trim().ToUpper() == "NO APLICA")
                {
                    resultado = "No Aplica";
                }
            }

            return resultado;
        }

        /// <summary>
        /// Devuelve primera columna del C3
        /// </summary>
        /// <param name="datosPorCentral"></param>
        /// <returns></returns>
        private string ObtenerPUTransporteC3(List<CbDatosDTO> datosPorCentral, List<CbReporteDetalleDTO> datosPorCentralBD_C1, List<CbReporteDetalleDTO> datosPorCentralBD_C2)
        {
            // (PU * PCS / PCI)Transporte
            string resultado = "";

            //Val PU
            string valPUTransporte = "";
            if (datosPorCentralBD_C1.Any())//busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC1 = datosPorCentralBD_C1.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi52PUTransporte);
                valPUTransporte = datoC1 != null ? datoC1.Cbrepdvalor : "";
            }
            else//busco en la BD (CB_Datos)
            {
                CbDatosDTO datoPU = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi52PUTransporte);
                valPUTransporte = datoPU != null ? datoPU.Cbevdavalor : "";
            }
            bool puIsNumero = decimal.TryParse(valPUTransporte, out decimal pu);

            //Val CPS
            string valPCSTransporte = "";
            if (datosPorCentralBD_C2.Any()) //busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC2_1 = datosPorCentralBD_C2.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi16PCSTransporte);
                valPCSTransporte = datoC2_1 != null ? datoC2_1.Cbrepdvalor : "";
            }
            else//busco en la BD (CB_Datos)
            {
                CbDatosDTO datoPCS = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi16PCSTransporte);
                valPCSTransporte = datoPCS != null ? datoPCS.Cbevdavalor : "";
            }
            bool pcsIsNumero = decimal.TryParse(valPCSTransporte, out decimal pcs);

            //Val CPI
            string valPCITransporte = "";
            if (datosPorCentralBD_C2.Any()) //busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC2_2 = datosPorCentralBD_C2.Find(x => x.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI);
                valPCITransporte = datoC2_2 != null ? datoC2_2.Cbrepdvalor : "";
            }
            else//busco en la BD (CB_Datos)
            {
                CbDatosDTO datoPCI = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI);
                valPCITransporte = datoPCI != null ? datoPCI.Cbevdavalor : "";
            }
            bool pciIsNumero = decimal.TryParse(valPCITransporte, out decimal pci);

            if (puIsNumero && pcsIsNumero && pciIsNumero)
            {
                if (pci != 0)
                    resultado = (pu * pcs / pci) + "";
            }
            else
            {
                //Si cualquiera de los datos traidos del formato 3 es NO APLICA entonces el resultado sera NO APLICA
                if (valPUTransporte.Trim().ToUpper() == "NO APLICA" || valPCSTransporte.Trim().ToUpper() == "NO APLICA" || valPCITransporte.Trim().ToUpper() == "NO APLICA")
                {
                    resultado = "No Aplica";
                }
            }

            return resultado;
        }

        /// <summary>
        /// Devuelve primera columna del C3
        /// </summary>
        /// <param name="datosPorCentral"></param>
        /// <returns></returns>
        private string ObtenerPUDistribucionC3(List<CbDatosDTO> datosPorCentral, List<CbReporteDetalleDTO> datosPorCentralBD_C1, List<CbReporteDetalleDTO> datosPorCentralBD_C2)
        {
            // (PU * PCS / PCI)Distribucion
            string resultado = "";

            //Val PU
            string valPUDistribucion = "";
            if (datosPorCentralBD_C1.Any())//busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC1 = datosPorCentralBD_C1.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi53PUDistribucion);
                valPUDistribucion = datoC1 != null ? datoC1.Cbrepdvalor : "";
            }
            else//busco en la BD (CB_Datos)
            {
                CbDatosDTO datoPU = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi53PUDistribucion);
                valPUDistribucion = datoPU != null ? datoPU.Cbevdavalor : "";
            }
            bool puIsNumero = decimal.TryParse(valPUDistribucion, out decimal pu);


            //Val CPI
            string valPCIDistribucion = "";
            if (datosPorCentralBD_C2.Any()) //busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC2_2 = datosPorCentralBD_C2.Find(x => x.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI);
                valPCIDistribucion = datoC2_2 != null ? datoC2_2.Cbrepdvalor : "";
            }
            else
            {
                CbDatosDTO datoPCI = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI);
                valPCIDistribucion = datoPCI != null ? datoPCI.Cbevdavalor : "";
            }
            bool pciIsNumero = decimal.TryParse(valPCIDistribucion, out decimal pci);

            //Val CPS
            string valPCSDistribucion = "";
            if (datosPorCentralBD_C2.Any()) //busco en reporte ya guardados
            {
                CbReporteDetalleDTO datoC2_1 = datosPorCentralBD_C2.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi17PCSDistribucion);
                valPCSDistribucion = datoC2_1 != null ? datoC2_1.Cbrepdvalor : "";
            }
            else
            {


                // Valor PCSDistribucion = (C1.7*(C4.6*365/12+C4.13)+C1.8*C4.8)/((C4.6*365/12+4.13)+C4.8)
                CbDatosDTO dato17 = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi17PCSDistribucion);
                string val17 = dato17 != null ? dato17.Cbevdavalor : "";
                decimal dec_val17 = val17.Trim().ToUpper() == "NO APLICA" ? 0 : Convert.ToDecimal(val17);

                CbDatosDTO dato18 = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi18PCSGncDistribucion);
                string val18 = dato18 != null ? dato18.Cbevdavalor : "";
                decimal dec_val18 = val18.Trim().ToUpper() == "NO APLICA" ? 0 : Convert.ToDecimal(val18);

                CbDatosDTO dato46 = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi46PCSGncDistribucion);
                string val46 = dato46 != null ? dato46.Cbevdavalor : "";
                decimal dec_val46 = val46.Trim().ToUpper() == "NO APLICA" ? 0 : Convert.ToDecimal(val46);

                CbDatosDTO dato413 = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi413PCSGncDistribucion);
                string val413 = dato413 != null ? dato413.Cbevdavalor : "";
                decimal dec_val413 = val413.Trim().ToUpper() == "NO APLICA" ? 0 : Convert.ToDecimal(val413);

                decimal? val_dato48 = ObtenerValor4punto8(datosPorCentral.Where(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi48PCSGncDistribucion).ToList());
                string val48 = val_dato48 != null ? val_dato48.Value.ToString() : "No Aplica";
                decimal dec_val48 = val_dato48 == null ? 0 : val_dato48.Value;

                decimal numerador = (dec_val17 * (dec_val46 * 365 / 12 + dec_val413)) + (dec_val18 * dec_val48);
                decimal denominador = ((dec_val46 * 365 / 12 + dec_val413) + dec_val48);



                //verifico todos los valores posibles de la ecuacion
                string noAplica = "No Aplica";
                string ene = "N";

                string resN = VerificarNumerador(val17.Trim().ToUpper(), val46.Trim().ToUpper(), val413.Trim().ToUpper(), val18.Trim().ToUpper(), val48.Trim().ToUpper());
                string resD = VerificarDenominador(val46.Trim().ToUpper(), val413.Trim().ToUpper(), val48.Trim().ToUpper());

                if (numerador == 0)
                {
                    if (denominador == 0)
                    {
                        if (resN == noAplica)
                        {
                            valPCSDistribucion = noAplica;
                        }
                        else
                        {
                            if (resD == noAplica)
                            {
                                valPCSDistribucion = noAplica;
                            }
                            if (resD == ene)
                            {
                                valPCSDistribucion = "";
                            }
                        }
                    }
                    else
                    {
                        if (resN == noAplica)
                        {
                            valPCSDistribucion = noAplica;
                        }
                        if (resN == ene)
                        {
                            valPCSDistribucion = "0.0000";
                        }
                    }

                }
                else
                {
                    if (denominador == 0)
                    {
                        if (resD == noAplica)
                        {
                            valPCSDistribucion = noAplica;
                        }
                        if (resD == ene)
                        {
                            valPCSDistribucion = "";
                        }
                    }
                    else
                    {
                        valPCSDistribucion = (numerador / denominador) + "";
                    }
                }

            }
            bool pcsIsNumero = decimal.TryParse(valPCSDistribucion, out decimal pcs);


            if (puIsNumero && pcsIsNumero && pciIsNumero)
            {
                if (pci != 0)
                    resultado = (pu * pcs / pci) + "";
            }
            else
            {
                //Si cualquiera de los datos traidos del formato 3 es NO APLICA entonces el resultado sera NO APLICA
                if (valPUDistribucion.Trim().ToUpper() == "NO APLICA" || valPCSDistribucion.Trim().ToUpper() == "NO APLICA" || valPCIDistribucion.Trim().ToUpper() == "NO APLICA")
                {
                    resultado = "No Aplica";
                }
            }

            return resultado;
        }

        /// <summary>
        /// Devuelve el valor de PCI Distribucion
        /// </summary>
        /// <param name="datosPorCentral"></param>
        /// <returns></returns>
        private string ObtenerPCIDistribucionReportesCV(List<CbDatosDTO> datosPorCentral)
        {
            string salida = "";

            //(C1.7*(C4.6*365/12+C4.13)+C1.8*C4.15) / ((C4.6*365/12+4.13)+C4.15)
            CbDatosDTO dato17 = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi17PCSDistribucion);
            string val17 = dato17 != null ? dato17.Cbevdavalor ?? "" : "";
            decimal dec_val17 = val17.Trim().ToUpper() == "NO APLICA" || val17 == "" ? 0 : Convert.ToDecimal(val17);

            CbDatosDTO dato18 = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi18PCSGncDistribucion);
            string val18 = dato18 != null ? dato18.Cbevdavalor ?? "" : "";
            decimal dec_val18 = val18.Trim().ToUpper() == "NO APLICA" || val18 == "" ? 0 : Convert.ToDecimal(val18);

            CbDatosDTO dato46 = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi46PCSGncDistribucion);
            string val46 = dato46 != null ? dato46.Cbevdavalor ?? "" : "";
            decimal dec_val46 = val46.Trim().ToUpper() == "NO APLICA" || val46 == "" ? 0 : Convert.ToDecimal(val46);

            CbDatosDTO dato413 = datosPorCentral.Find(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi413PCSGncDistribucion);
            string val413 = dato413 != null ? dato413.Cbevdavalor ?? "" : "";
            decimal dec_val413 = val413.Trim().ToUpper() == "NO APLICA" || val413 == "" ? 0 : Convert.ToDecimal(val413);

            List<CbDatosDTO> lst = datosPorCentral.Where(x => x.Ccombcodi == ConstantesCombustibles.Concepcodi48PCSGncDistribucion).ToList();
            decimal? val_dato48 = ObtenerValor4punto8(lst);
            string val48 = val_dato48 != null ? val_dato48.Value.ToString() : "No Aplica";
            decimal dec_val48 = val_dato48 == null ? 0 : val_dato48.Value;

            decimal numerador = (dec_val17 * (dec_val46 * 365 / 12 + dec_val413)) + (dec_val18 * dec_val48);
            decimal denominador = ((dec_val46 * 365 / 12 + dec_val413) + dec_val48);


            //verifico todos los valores posibles de la ecuacion
            string noAplica = "No Aplica";
            string ene = "N";

            string resN = VerificarNumerador(val17.Trim().ToUpper(), val46.Trim().ToUpper(), val413.Trim().ToUpper(), val18.Trim().ToUpper(), val48.Trim().ToUpper());
            string resD = VerificarDenominador(val46.Trim().ToUpper(), val413.Trim().ToUpper(), val48.Trim().ToUpper());

            if (numerador == 0)
            {
                if (denominador == 0)
                {
                    if (resN == noAplica)
                    {
                        salida = noAplica;
                    }
                    else
                    {
                        if (resD == noAplica)
                        {
                            salida = noAplica;
                        }
                        if (resD == ene)
                        {
                            salida = "";
                        }
                    }
                }
                else
                {
                    if (resN == noAplica)
                    {
                        salida = noAplica;
                    }
                    if (resN == ene)
                    {
                        salida = "0.0000";
                    }
                }

            }
            else
            {
                if (denominador == 0)
                {
                    if (resD == noAplica)
                    {
                        salida = noAplica;
                    }
                    if (resD == ene)
                    {
                        salida = "";
                    }
                }
                else
                {
                    salida = (numerador / denominador) + "";
                }
            }


            return salida;
        }

        /// <summary>
        /// Devuelve el valor de 4.8 (sumatoria de todos los valores)
        /// </summary>
        /// <param name="lst_datos"></param>
        /// <returns></returns>
        public decimal? ObtenerValor4punto8(List<CbDatosDTO> lst_datos)
        {
            decimal? salida = null;
            List<CbDatosDTO> lst_datosNumericos = new List<CbDatosDTO>();
            lst_datosNumericos = lst_datos.Where(x => (x.Cbevdavalor ?? "").Trim() != "" && x.Cbevdavalor.Trim().ToUpper() != "NO APLICA").ToList();
            decimal? sumatoria = null;
            int n = 0;
            foreach (var item in lst_datosNumericos)
            {
                if (n == 0)
                    sumatoria = 0;
                decimal val = Convert.ToDecimal(item.Cbevdavalor);
                sumatoria = sumatoria + val;
                n++;
            }

            salida = sumatoria;

            return salida;
        }

        /// <summary>
        /// verifico el resultado real del denominador (si el resultado es un numero o un No Aplica)
        /// </summary>
        /// <param name="v46"></param>
        /// <param name="v413"></param>
        /// <param name="v415"></param>
        /// <returns></returns>
        private string VerificarDenominador(string v46, string v413, string v48) // C4.6*365/12 + 4.13 + C4.8
        {
            string salida = "";
            string noAplica = "No Aplica";
            string ene = "N";

            if (v46 == "NO APLICA" && v413 == "NO APLICA" && v48 == "NO APLICA") salida = noAplica;
            if (v46 == "NO APLICA" && v413 == "NO APLICA" && v48 != "NO APLICA") salida = ene;
            if (v46 == "NO APLICA" && v413 != "NO APLICA" && v48 == "NO APLICA") salida = ene;
            if (v46 == "NO APLICA" && v413 != "NO APLICA" && v48 != "NO APLICA") salida = ene;
            if (v46 != "NO APLICA" && v413 == "NO APLICA" && v48 == "NO APLICA") salida = ene;
            if (v46 != "NO APLICA" && v413 == "NO APLICA" && v48 != "NO APLICA") salida = ene;
            if (v46 != "NO APLICA" && v413 != "NO APLICA" && v48 == "NO APLICA") salida = ene;
            if (v46 != "NO APLICA" && v413 != "NO APLICA" && v48 != "NO APLICA") salida = ene;

            return salida;
        }

        /// <summary>
        /// verifico el resultado real del numerador (si el resultado es un numero o un No Aplica)
        /// </summary>
        /// <param name="v17"></param>
        /// <param name="v46"></param>
        /// <param name="v413"></param>
        /// <param name="v18"></param>
        /// <param name="v415"></param>
        /// <returns></returns>
        private string VerificarNumerador(string v17, string v46, string v413, string v18, string v48) // C1.7 * (C4.6*365/12 + C4.13) + C1.8 * C4.8
        {
            string salida = "";
            string noAplica = "No Aplica";
            string ene = "N";

            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() == "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = noAplica;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() == "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() == "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() == "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() == "NO APLICA") salida = ene;
            if (v17.Trim().ToUpper() != "NO APLICA" && v46.Trim().ToUpper() != "NO APLICA" && v413.Trim().ToUpper() != "NO APLICA" && v18.Trim().ToUpper() != "NO APLICA" && v48.Trim().ToUpper() != "NO APLICA") salida = ene;


            return salida;
        }

        /// <summary>
        /// Devuelve el listado que completará las cabeceras POR DEFECTO de los cuadros 1, 2 y 3
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="lstPropiedades"></param>
        /// <returns></returns>
        private List<CbRepCabeceraDTO> ObtenerCabeceraPorDefecto(int tipoReporte, List<CbRepPropiedadDTO> lstPropiedades)
        {
            List<CbRepCabeceraDTO> lstSalida = new List<CbRepCabeceraDTO>();
            CbRepCabeceraDTO regTemp = new CbRepCabeceraDTO();
            int filaX = -1;
            int columnaX = -1;
            switch (tipoReporte)
            {
                case ConstantesCombustibles.TipoReporteCVCuadro1:

                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_1_CentralTermoeléctrica, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_1_TituloPrecioUnitario, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_1_PUSuministro, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_1_PUTransporte, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_1_PUDistribución, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_1_UnidadPUSuministro, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_1_UnidadPUTransporte, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_1_UnidadPUDistribución, lstPropiedades));

                    break;
                case ConstantesCombustibles.TipoReporteCVCuadro2:

                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_CentralTermoeléctrica, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_TituloPCS, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_TituloPCI, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_PCSSuministro, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_PCSTransporte, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_PCSDistribución, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_UnidadPCSSuministro, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_UnidadPCSTransporte, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_UnidadPCSDistribución, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_2_UnidadPCISuministroTransporteDistribución, lstPropiedades));

                    break;

                case ConstantesCombustibles.TipoReporteCVCuadro3:

                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_CentralTermoeléctrica, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_TituloPrecioUnitario, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_PUSuministro, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_PUTransporte, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_PUDistribución, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_TituloCostoCombustible, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_UnidadPUSuministro, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_UnidadPUTransporte, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_UnidadPUDistribución, lstPropiedades));
                    lstSalida.Add(ObtenerRegistroRepCabecera(tipoReporte, ConstantesCombustibles.Cuadro_3_UnidadCostoCombustible, lstPropiedades));
                    break;

                case ConstantesCombustibles.PorDefecto:

                    break;
            }
            return lstSalida;
        }

        public CbRepCabeceraDTO ObtenerRegistroRepCabecera(int tipoReporte, int codigoPropiedad, List<CbRepPropiedadDTO> lstPropiedades)
        {
            CbRepCabeceraDTO regTemp = new CbRepCabeceraDTO();
            ObtenerFilaColumnaReporteCabecera(tipoReporte, codigoPropiedad, out int filaX, out int columnaX);
            regTemp.Fila = filaX;
            regTemp.Columna = columnaX;
            regTemp.Cbrcabdescripcion = lstPropiedades.Find(x => x.Cbrprocodi == codigoPropiedad).Cbrprovalor;

            return regTemp;
        }

        /// <summary>
        /// Devuelve la Fila y Columna de cada celda con dato de la cabecera
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="codigoPropiedad"></param>
        /// <param name="fila"></param>
        /// <param name="columna"></param>
        private void ObtenerFilaColumnaReporteCabecera(int tipoReporte, int codigoPropiedad, out int fila, out int columna)
        {
            fila = -1;
            columna = -1;

            switch (tipoReporte)
            {
                case ConstantesCombustibles.TipoReporteCVCuadro1:
                    switch (codigoPropiedad)
                    {
                        case ConstantesCombustibles.Cuadro_1_CentralTermoeléctrica: fila = 0; columna = 0; break;
                        case ConstantesCombustibles.Cuadro_1_TituloPrecioUnitario: fila = 0; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_1_PUSuministro: fila = 1; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_1_PUTransporte: fila = 1; columna = 2; break;
                        case ConstantesCombustibles.Cuadro_1_PUDistribución: fila = 1; columna = 3; break;
                        case ConstantesCombustibles.Cuadro_1_UnidadPUSuministro: fila = 2; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_1_UnidadPUTransporte: fila = 2; columna = 2; break;
                        case ConstantesCombustibles.Cuadro_1_UnidadPUDistribución: fila = 2; columna = 3; break;
                    }

                    break;
                case ConstantesCombustibles.TipoReporteCVCuadro2:
                    switch (codigoPropiedad)
                    {
                        case ConstantesCombustibles.Cuadro_2_CentralTermoeléctrica: fila = 0; columna = 0; break;
                        case ConstantesCombustibles.Cuadro_2_TituloPCS: fila = 0; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_2_TituloPCI: fila = 0; columna = 4; break;
                        case ConstantesCombustibles.Cuadro_2_PCSSuministro: fila = 1; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_2_PCSTransporte: fila = 1; columna = 2; break;
                        case ConstantesCombustibles.Cuadro_2_PCSDistribución: fila = 1; columna = 3; break;
                        case ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución: fila = 1; columna = 4; break;
                        case ConstantesCombustibles.Cuadro_2_UnidadPCSSuministro: fila = 2; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_2_UnidadPCSTransporte: fila = 2; columna = 2; break;
                        case ConstantesCombustibles.Cuadro_2_UnidadPCSDistribución: fila = 2; columna = 3; break;
                        case ConstantesCombustibles.Cuadro_2_UnidadPCISuministroTransporteDistribución: fila = 2; columna = 4; break;
                    }
                    break;
                case ConstantesCombustibles.TipoReporteCVCuadro3:
                    switch (codigoPropiedad)
                    {
                        case ConstantesCombustibles.Cuadro_3_CentralTermoeléctrica: fila = 0; columna = 0; break;
                        case ConstantesCombustibles.Cuadro_3_TituloPrecioUnitario: fila = 0; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_3_PUSuministro: fila = 1; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_3_PUTransporte: fila = 1; columna = 2; break;
                        case ConstantesCombustibles.Cuadro_3_PUDistribución: fila = 1; columna = 3; break;
                        case ConstantesCombustibles.Cuadro_3_TituloCostoCombustible: fila = 0; columna = 4; break;
                        case ConstantesCombustibles.Cuadro_3_UnidadPUSuministro: fila = 2; columna = 1; break;
                        case ConstantesCombustibles.Cuadro_3_UnidadPUTransporte: fila = 2; columna = 2; break;
                        case ConstantesCombustibles.Cuadro_3_UnidadPUDistribución: fila = 2; columna = 3; break;
                        case ConstantesCombustibles.Cuadro_3_UnidadCostoCombustible: fila = 2; columna = 4; break;
                    }

                    break;

                case ConstantesCombustibles.PorDefecto:

                    break;
            }
        }

        /// <summary>
        /// Devuelve la matriz del cuadro 2 con la informacion procesada
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <param name="nombreReporteC2"></param>
        /// <param name="notasC2"></param>
        /// <returns></returns>
        public string[][] ObtenerDataReprocesoReporteC2(DateTime mesDeVigencia, out string nombreReporteC2, out string notasC2)
        {
            string[][] data2 = new string[20][];

            List<CbEnvioCentralDTO> lstCentralesParticipantes = new List<CbEnvioCentralDTO>();
            List<CbDatosDTO> lstDatos = ObtenerInformacionReportesCV(ConstantesCombustibles.TipoReporteCVCuadro2, mesDeVigencia, out lstCentralesParticipantes);

            if (lstDatos.Any())
            {
                //Agrego informacion de PCI
                List<CbDatosDTO> lstDatosPCI = ObtenerInformacionPCI(mesDeVigencia, lstCentralesParticipantes);
                lstDatos.AddRange(lstDatosPCI);

                //Busco reportes guardados para el mes de vigencia
                List<CbReporteDTO> versionesGuardadas = ObtenerReportesGuardados(ConstantesCombustibles.TipoReporteCVCuadro2, mesDeVigencia);

                List<CbNotaDTO> lstNotasUsar = new List<CbNotaDTO>();
                List<CbRepCabeceraDTO> lstCabeceraUsar = new List<CbRepCabeceraDTO>();

                //si hay reportes guardadas, uso su nombre, cabecera y sus notas
                if (versionesGuardadas.Any())
                {
                    CbReporteDTO ultimoGuardado = versionesGuardadas.First();
                    lstNotasUsar = ultimoGuardado.ListaNotas;
                    lstCabeceraUsar = ultimoGuardado.ListaCabeceras;

                    nombreReporteC2 = ultimoGuardado.Cbrepnombre;
                    notasC2 = String.Join("@", lstNotasUsar.Select(x => x.Cbnotadescripcion));

                    //seteo las filas y columnas para las cabeceras
                    foreach (var repCab in lstCabeceraUsar)
                    {
                        ObtenerFilaColumnaReporteCabecera(ConstantesCombustibles.TipoReporteCVCuadro2, repCab.Cbrprocodi, out int filaX, out int columnaX);
                        repCab.Fila = filaX;
                        repCab.Columna = columnaX;
                    }
                }
                else // si no hay reportes, uso el  por defecto (sin notas y cabecera por default que estan guardados en tabla propiedades)
                {
                    nombreReporteC2 = "CALIDAD DEL COMBUSTIBLE GAS NATURAL";
                    notasC2 = "";
                    List<CbRepPropiedadDTO> lstPropiedades = ListCbRepPropiedads();
                    lstCabeceraUsar = ObtenerCabeceraPorDefecto(ConstantesCombustibles.TipoReporteCVCuadro2, lstPropiedades);
                }

                data2 = ObtenerMatrizReporteProcesar(ConstantesCombustibles.TipoReporteCVCuadro2, lstCentralesParticipantes, lstDatos, lstNotasUsar, lstCabeceraUsar);
            }
            else
            {
                nombreReporteC2 = "";
                notasC2 = "";
                data2 = null;
            }
            return data2;
        }

        /// <summary>
        /// Devuelve el listado de PCI por cada central
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <param name="lstCentralesParticipantes"></param>
        /// <returns></returns>
        private List<CbDatosDTO> ObtenerInformacionPCI(DateTime mesDeVigencia, List<CbEnvioCentralDTO> lstCentralesParticipantes)
        {
            List<CbDatosDTO> lstSalida = new List<CbDatosDTO>();
            DateTime hoy = DateTime.Now;

            foreach (var central in lstCentralesParticipantes)
            {
                //obtengo el valor de PCI vigente al al dia de la consulta para la central
                decimal datoPCI = 0;
                List<PrGrupodatDTO> lista = (new MigracionesAppServicio()).ListarGrupodatHistoricoValores(ConstantesCombustibles.ConceptocodiPCI, central.Grupocodi)
                                                        .Where(x => x.Deleted == 0 && x.Fechadat <= hoy).OrderByDescending(x => x.Fechadat).ToList();

                var find = lista.FirstOrDefault();
                if (find != null)
                {
                    decimal.TryParse(find.Formuladat, out datoPCI);
                }

                //creo el objeto dato
                CbDatosDTO objDato = new CbDatosDTO();
                objDato.Cbcentcodi = central.Cbcentcodi;
                objDato.Cbevdavalor = datoPCI.ToString();
                objDato.Ccombcodi = ConstantesCombustibles.ConceptocodiPCI;

                lstSalida.Add(objDato);
            }

            return lstSalida;
        }

        /// <summary>
        ///  Devuelve la matriz del cuadro 3 con la informacion procesada
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <param name="nombreReporteC3"></param>
        /// <param name="notasC3"></param>
        /// <returns></returns>
        public string[][] ObtenerDataReprocesoReporteC3(DateTime mesDeVigencia, out string nombreReporteC3, out string notasC3, out string filasPintadas)
        {
            string[][] data3 = new string[20][];

            filasPintadas = "";

            List<CbDatosDTO> lstDatosTotales = new List<CbDatosDTO>();

            //Obtenemos la informacion de los envios existentes (centrales nuevas y existentes)
            List<CbEnvioCentralDTO> lstCentralesParticipantesEnviosExistentes = new List<CbEnvioCentralDTO>();
            List<CbDatosDTO> lstDatosEnviosExistentes = ObtenerInformacionReportesCV(ConstantesCombustibles.TipoReporteCVCuadro3, mesDeVigencia, out lstCentralesParticipantesEnviosExistentes);
            //seteo su tipo de central
            foreach (var central in lstCentralesParticipantesEnviosExistentes)
            {
                central.TipoC3 = ConstantesCombustibles.TipoExistente;
            }

            //Obtenemos la informacion para los envios asignados
            List<CbEnvioCentralDTO> lstCentralesParticipantesAsignados = new List<CbEnvioCentralDTO>();
            List<CbDatosDTO> lstDatosAsignados = ObtenerInformacionReportesC3Asignados(mesDeVigencia, out lstCentralesParticipantesAsignados);
            //seteo su tipo de central
            foreach (var central in lstCentralesParticipantesAsignados)
            {
                central.TipoC3 = ConstantesCombustibles.TipoAsignado;
            }

            //Obtenemos la informacion para los envios incumplidos
            List<CbEnvioCentralDTO> lstCentralesParticipantesIncumplidos = new List<CbEnvioCentralDTO>();
            List<CbReporteCentralDTO> lstCentralesDatosIncumplidos = ObtenerInformacionReportesC3Incumplidos(mesDeVigencia, lstCentralesParticipantesEnviosExistentes, out lstCentralesParticipantesIncumplidos);
            //seteo su tipo de central
            foreach (var central in lstCentralesParticipantesIncumplidos)
            {
                central.TipoC3 = ConstantesCombustibles.TipoIncumplimiento;
            }

            lstDatosTotales.AddRange(lstDatosEnviosExistentes);
            lstDatosTotales.AddRange(lstDatosAsignados);

            if (lstDatosTotales.Any() || lstCentralesDatosIncumplidos.Any())
            {
                //Agrego informacion de PCI
                List<CbDatosDTO> lstDatosPCI = ObtenerInformacionPCI(mesDeVigencia, lstCentralesParticipantesEnviosExistentes);
                lstDatosEnviosExistentes.AddRange(lstDatosPCI);

                //Busco reportes guardados para el mes de vigencia
                List<CbReporteDTO> versionesGuardadas = ObtenerReportesGuardados(ConstantesCombustibles.TipoReporteCVCuadro3, mesDeVigencia);

                List<CbNotaDTO> lstNotasUsar = new List<CbNotaDTO>();
                List<CbRepCabeceraDTO> lstCabeceraUsar = new List<CbRepCabeceraDTO>();

                //si hay reportes guardadas, uso su nombre, cabecera y sus notas
                if (versionesGuardadas.Any())
                {
                    CbReporteDTO ultimoGuardado = versionesGuardadas.First();
                    lstNotasUsar = ultimoGuardado.ListaNotas;
                    lstCabeceraUsar = ultimoGuardado.ListaCabeceras;

                    nombreReporteC3 = ultimoGuardado.Cbrepnombre;
                    notasC3 = String.Join("@", lstNotasUsar.Select(x => x.Cbnotadescripcion));

                    //seteo las filas y columnas para las cabeceras
                    foreach (var repCab in lstCabeceraUsar)
                    {
                        ObtenerFilaColumnaReporteCabecera(ConstantesCombustibles.TipoReporteCVCuadro3, repCab.Cbrprocodi, out int filaX, out int columnaX);
                        repCab.Fila = filaX;
                        repCab.Columna = columnaX;
                    }
                }
                else // si no hay reportes, uso el  por defecto (sin notas y cabecera por default que estan guardados en tabla propiedades)
                {
                    nombreReporteC3 = "COSTO DE COMBUSTIBLE GAS NATURAL";
                    notasC3 = "";
                    List<CbRepPropiedadDTO> lstPropiedades = ListCbRepPropiedads();
                    lstCabeceraUsar = ObtenerCabeceraPorDefecto(ConstantesCombustibles.TipoReporteCVCuadro3, lstPropiedades);
                }

                //Busco datos almacenados de los reportes del C1 y C2 para usarlos en el C3
                List<CbReporteCentralDTO> lstCentralesGuardadasDelReporteC1 = ObtenerDataGuardadasDelReporte(ConstantesCombustibles.TipoReporteCVCuadro1, mesDeVigencia);
                List<CbReporteCentralDTO> lstCentralesGuardadasDelReporteC2 = ObtenerDataGuardadasDelReporte(ConstantesCombustibles.TipoReporteCVCuadro2, mesDeVigencia);

                data3 = ObtenerMatrizC3ReporteProcesar(lstCentralesParticipantesEnviosExistentes, lstDatosEnviosExistentes, lstCentralesParticipantesAsignados, lstDatosAsignados,
                                                      lstCentralesParticipantesIncumplidos, lstCentralesDatosIncumplidos, lstNotasUsar, lstCabeceraUsar,
                                                      lstCentralesGuardadasDelReporteC1, lstCentralesGuardadasDelReporteC2);

                filasPintadas = ObtenerFilasPintadasProcesar(data3);
            }
            else
            {
                nombreReporteC3 = "";
                notasC3 = "";
                data3 = null;
            }
            return data3;
        }

        /// <summary>
        /// Devuelve la lista de centrales y detalles  guardadas
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="mesDeVigencia"></param>
        /// <returns></returns>
        public List<CbReporteCentralDTO> ObtenerDataGuardadasDelReporte(int cuadro, DateTime mesDeVigencia)
        {
            List<CbReporteCentralDTO> lstSalida = new List<CbReporteCentralDTO>();

            //Obtener data  
            List<CbReporteDTO> lstReportesTempOrdenado = ObtenerReportesPorReporteYMesVigencia(cuadro, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));
            if (lstReportesTempOrdenado.Any())
            {
                var reporte = lstReportesTempOrdenado.First();// obtiene la último versión del reporte

                CbReporteDTO reporteC = ObtenerDatosParcialesReporte(reporte.Cbrepcodi);

                if (reporteC != null)
                {
                    if (reporteC.ListaCentrales.Any())
                        lstSalida = reporteC.ListaCentrales;
                }


            }

            return lstSalida;
        }
        /// <summary>
        /// Devuelve listado de filas a pintar
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ObtenerFilasPintadasProcesar(string[][] data)
        {
            string salida = "";
            List<string> lstSalida = new List<string>();
            int numFilas = data.Length;

            for (int fila = 0; fila < numFilas; fila++)
            {
                string valC6 = data[fila][6];

                if (valC6 == "3") //si se debe colorear
                {
                    lstSalida.Add(fila.ToString());
                }
            }
            salida = string.Join(",", lstSalida);

            return salida;
        }

        /// <summary>
        /// Devuelve la informacion de los envios asignados
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <param name="lstCentralesParticipantesAsignados"></param>
        /// <returns></returns>
        private List<CbDatosDTO> ObtenerInformacionReportesC3Asignados(DateTime mesDeVigencia, out List<CbEnvioCentralDTO> lstCentralesParticipantesAsignados)
        {
            List<CbDatosDTO> lstDatos = new List<CbDatosDTO>();
            lstCentralesParticipantesAsignados = new List<CbEnvioCentralDTO>();

            //Obtengo las versiones generados al asignarse            
            string mesVigencia = mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha);
            string estados = ConstantesCombustibles.EstadoAsignado.ToString();
            List<CbVersionDTO> lstVersionesTotales = FactorySic.GetCbVersionRepository().GetByPeriodoyEstado(mesVigencia, estados);


            if (lstVersionesTotales.Any())
            {
                List<string> lstVersioncodisAAP = new List<string>();
                foreach (var reg in lstVersionesTotales.GroupBy(x => x.Cbenvcodi))
                {
                    List<CbVersionDTO> lstVersionesBYEnvio = lstVersionesTotales.Where(x => x.Cbenvcodi == reg.Key).OrderByDescending(x => x.Cbvercodi).ToList();
                    lstVersioncodisAAP.Add(lstVersionesBYEnvio.First().Cbvercodi.ToString());
                }

                //Obtengo las centrales participantes de las versioncodis halladas                
                string versioncodis = string.Join(",", lstVersioncodisAAP);
                lstCentralesParticipantesAsignados = FactorySic.GetCbEnvioCentralRepository().GetByEstadoYVersion("-1", versioncodis).Distinct().ToList();

                //Obtenemos datos
                string cbcentcodis = string.Join(",", lstCentralesParticipantesAsignados.Select(x => x.Cbcentcodi));
                string concepcodis = ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso.ToString();
                lstDatos = FactorySic.GetCbDatosRepository().GetDatosReporteCV(concepcodis, cbcentcodis).Distinct().ToList();
            }
            return lstDatos;
        }

        /// <summary>
        /// Devuelve la informacion de los envios incumplidos
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <param name="lstCentralesParticipantesIncumplidos"></param>
        /// <returns></returns>
        private List<CbReporteCentralDTO> ObtenerInformacionReportesC3Incumplidos(DateTime mesDeVigencia, List<CbEnvioCentralDTO> lstCentralesAprobadosEsteMes, out List<CbEnvioCentralDTO> lstCentralesParticipantesIncumplidos)
        {
            List<CbReporteCentralDTO> lstRep = new List<CbReporteCentralDTO>();
            lstCentralesParticipantesIncumplidos = new List<CbEnvioCentralDTO>();


            //Obtengo centrales que no enviaron informacion (centrales existentes)            
            List<CbCentralxfenergDTO> listaCentralTermicasTipoExistentes = ObtenerListadoCentralesTermicas(true).Where(x => x.Cbcxfeexistente == 1).ToList();
            List<CbCentralxfenergDTO> lstCentralesAprobNoEnviaronInfo = new List<CbCentralxfenergDTO>();
            List<int> lstEquicodisAprobNoEnviaronInfo = new List<int>();
            if (listaCentralTermicasTipoExistentes.Any())
            {
                List<int> lstEquicodisCentralesExistentes = listaCentralTermicasTipoExistentes.Select(x => x.Equicodi).ToList();

                //Obtengo Todas las centrales que no han sido aprobadas este mes
                List<int> lstEquicodisCentralesAprobadasEsteMes = lstCentralesAprobadosEsteMes.Select(x => x.Equicodi).ToList();
                IEnumerable<int> equicodisdistintos = lstEquicodisCentralesExistentes.Except(lstEquicodisCentralesAprobadasEsteMes);

                lstCentralesAprobNoEnviaronInfo = listaCentralTermicasTipoExistentes.Where(x => equicodisdistintos.Contains(x.Equicodi)).ToList();
                lstEquicodisAprobNoEnviaronInfo = lstCentralesAprobNoEnviaronInfo.Select(x => x.Equicodi).ToList();
            }

            //Si existen centrales que no enviaron informacion el mes de consulta
            if (lstCentralesAprobNoEnviaronInfo.Any())
            {
                //Obtengo la informacion del reporte C3 guardados del mes pasado          
                List<CbReporteDTO> lstReportesGuardadosMesPasadoOrdenado = ObtenerReportesPorReporteYMesVigencia(ConstantesCombustibles.TipoReporteCVCuadro3, mesDeVigencia.AddMonths(-1).ToString(ConstantesAppServicio.FormatoFecha));

                if (lstReportesGuardadosMesPasadoOrdenado.Any())
                {
                    CbReporteDTO ultimoEnviado = lstReportesGuardadosMesPasadoOrdenado.First();
                    List<CbReporteCentralDTO> lstCentralesEnviadosMesPasado = ObtenerCentralesDelReporte(ultimoEnviado.Cbrepcodi);

                    //uso solo los reporteCentrales del mes pasado (respecto al mes de consulta) cuyas centrales no enviaron info el mes de consulta
                    List<CbReporteCentralDTO> listaCentralesAMostrar = lstCentralesEnviadosMesPasado.Where(x => lstEquicodisAprobNoEnviaronInfo.Contains(x.Equicodi)).ToList();

                    if (listaCentralesAMostrar.Any())
                    {
                        foreach (var regReporteCentral in listaCentralesAMostrar)
                        {
                            CbEnvioCentralDTO regEC = new CbEnvioCentralDTO();
                            regEC.Cbcentcodi = regReporteCentral.Cbcentcodi;
                            //regEC.Cbcentestado { get; set; }
                            //regEC.Cbvercodi { get; set; }
                            regEC.Equicodi = regReporteCentral.Equicodi;
                            //regEC.Fenergcodi { get; set; }
                            //regEC.Grupocodi { get; set; }
                            //regEC.TipoC3 =  //se llena mas adelante

                            lstCentralesParticipantesIncumplidos.Add(regEC);

                            //completo los detalles de las centrales a usar
                            List<CbReporteDetalleDTO> lstDetallesCentralesMostrar = FactorySic.GetCbReporteDetalleRepository().GetByIdCentral(regReporteCentral.Cbrcencodi);
                            regReporteCentral.ListaDetalles = lstDetallesCentralesMostrar;
                        }
                        lstRep = listaCentralesAMostrar;
                    }
                    else
                    {
                        lstCentralesParticipantesIncumplidos = new List<CbEnvioCentralDTO>();
                    }
                }
                else
                {
                    lstCentralesParticipantesIncumplidos = new List<CbEnvioCentralDTO>();
                }
            }
            else
            {
                lstCentralesParticipantesIncumplidos = new List<CbEnvioCentralDTO>();
            }

            return lstRep;
        }

        /// <summary>
        /// Devuelve reportes ( reporte con lista de notas y cabeceras ) guardados para cierto cuadro y mes de vigencia
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="mesDeVigencia"></param>
        /// <returns></returns>
        private List<CbReporteDTO> ObtenerReportesGuardados(int tipoReporte, DateTime mesDeVigencia)
        {
            List<CbReporteDTO> lstSalida = new List<CbReporteDTO>();

            //obtener reportes guardados
            List<CbReporteDTO> lstReportesTempOrdenado = ObtenerReportesPorReporteYMesVigencia(tipoReporte, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));

            if (lstReportesTempOrdenado.Any())
            {
                //Obtenemos notas por tipo de reporte
                List<CbNotaDTO> lstNotasXTipoReporte = FactorySic.GetCbNotaRepository().GetByTipoReporte(tipoReporte);

                //Obtenemos cabecera por tipo de reporte
                List<CbRepCabeceraDTO> lstCabeceraXTipoReporte = FactorySic.GetCbRepCabeceraRepository().GetByTipoReporte(tipoReporte);

                foreach (var regReporte in lstReportesTempOrdenado)
                {
                    //busco Notas por reporte
                    List<CbNotaDTO> lstNotasPorReporte = lstNotasXTipoReporte.Where(X => X.Cbrepcodi == regReporte.Cbrepcodi).OrderBy(C => C.Cbnotaitem).ToList();

                    //busco Cabecera por reporte
                    List<CbRepCabeceraDTO> lstCabeceraPorReporte = lstCabeceraXTipoReporte.Where(X => X.Cbrepcodi == regReporte.Cbrepcodi).ToList();


                    //lleno data
                    CbReporteDTO reporteX = regReporte;
                    reporteX.ListaNotas = lstNotasPorReporte;
                    reporteX.ListaCabeceras = lstCabeceraPorReporte;


                    lstSalida.Add(reporteX);
                }
            }
            return lstSalida;
        }


        /// <summary>
        /// Devuelve el reporte por  tipo de reporte y mes de vigencia
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="mesVigencia"></param>
        /// <returns></returns>
        private List<CbReporteDTO> ObtenerReportesPorReporteYMesVigencia(int tipoReporte, string mesVigencia)
        {
            List<CbReporteDTO> lstSalida = new List<CbReporteDTO>();
            List<CbReporteDTO> lstSalidaTemp = FactorySic.GetCbReporteRepository().GetByTipoYMesVigencia(tipoReporte, mesVigencia).OrderByDescending(C => C.Cbrepcodi).ToList();
            lstSalida = FormatearReporteAGuardar(lstSalidaTemp);
            return lstSalida;
        }

        /// <summary>
        /// Da formato a registros del reporte
        /// </summary>
        /// <param name="lstSalidaTemp"></param>
        /// <returns></returns>
        private List<CbReporteDTO> FormatearReporteAGuardar(List<CbReporteDTO> lstSalidaTemp)
        {
            List<CbReporteDTO> lstSalida = new List<CbReporteDTO>();

            foreach (var reg in lstSalidaTemp)
            {
                reg.CbrepfeccreacionDesc = reg.Cbrepfeccreacion != null ? reg.Cbrepfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
                reg.CbrepfecmodificacionDesc = reg.Cbrepfecmodificacion != null ? reg.Cbrepfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
                lstSalida.Add(reg);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el cuerpo del handson de Notas
        /// </summary>
        /// <param name="codigoReporte"></param>
        /// <param name="tipoReporte"></param>
        /// <param name="mesVigencia"></param>
        /// <returns></returns>
        public string[][] ObtenerDataNota(int codigoReporte, int tipoReporte, DateTime mesVigencia)
        {
            List<CbNotaDTO> lstNotas = new List<CbNotaDTO>();
            string mesDeVigencia = mesVigencia.ToString(ConstantesAppServicio.FormatoFecha);

            //si existe un reporte guardado, entonces devuelve el listado de notas de dicho reporte
            if (codigoReporte > 0)
            {
                lstNotas = ObtenerNotasPorReporte(codigoReporte);
            }
            else //si codigoReporte =0 (esta en reproceso), muestra el listado de notas del ultimo reporte guardado
            {
                //obtenemos el ultimo reporte guardado
                List<CbReporteDTO> lstReportesGuardadosOrdenado = ObtenerReportesPorReporteYMesVigencia(tipoReporte, mesDeVigencia);

                //Si existe autoguardados, uso el ultimo
                if (lstReportesGuardadosOrdenado.Any())
                {
                    lstNotas = ObtenerNotasPorReporte(lstReportesGuardadosOrdenado.First().Cbrepcodi);
                }
                else //si no existe muestra una fila vacia
                {
                    CbNotaDTO notita = new CbNotaDTO();
                    notita.Cbnotaitem = "1";
                    notita.Cbnotadescripcion = "";

                    lstNotas.Add(notita);
                }
            }

            //si no hay notas agrego una fila vacia
            if (!lstNotas.Any())
            {
                CbNotaDTO notita = new CbNotaDTO();
                notita.Cbnotaitem = "1";
                notita.Cbnotadescripcion = "";

                lstNotas.Add(notita);
            }

            //  Creamos la matriz
            int numFilas = lstNotas.Count();
            int numColumnas = 1;

            string[][] data = new string[numFilas][];

            int numFila = 0;

            //creamos cuerpo
            foreach (var nota in lstNotas)
            {
                data[numFila] = new string[numColumnas];
                for (int col = 0; col < numColumnas; col++)
                {
                    data[numFila][col] = nota.Cbnotadescripcion;
                }
                numFila++;
            }

            return data;
        }

        /// <summary>
        /// Devuelve listado de notas de cierto reporte
        /// </summary>
        /// <param name="cbrepcodi"></param>
        /// <returns></returns>
        private List<CbNotaDTO> ObtenerNotasPorReporte(int cbrepcodi)
        {
            List<CbNotaDTO> lstSalida = new List<CbNotaDTO>();
            lstSalida = FactorySic.GetCbNotaRepository().GetByReporte(cbrepcodi).OrderBy(C => C.Cbnotaitem).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Guarda los datos del reporte
        /// </summary>
        /// <param name="usuario"></param>
        /// <param name="datos"></param>
        /// <param name="notas"></param>
        /// <param name="nombReporte"></param>
        /// <param name="tipoReporte"></param>
        /// <param name="mesDeVigencia"></param>
        /// <returns></returns>
        public int GuardarReporte(string usuario, string[][] datos, string notas, string nombReporte, int tipoReporte, DateTime mesDeVigencia)
        {
            try
            {
                //busco ultimo reporte reporte para sacar su version, fecha y usuario de creacion; para usarlos al guardar nuevo reporte
                List<CbReporteDTO> lstReportesGuardadosYOrdenado = ObtenerReportesPorReporteYMesVigencia(tipoReporte, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));
                CbReporteDTO reporteTemp = new CbReporteDTO();
                if (lstReportesGuardadosYOrdenado.Any())
                {
                    reporteTemp = lstReportesGuardadosYOrdenado.First();
                }
                else
                {
                    reporteTemp.Cbrepversion = 0;
                    reporteTemp.Cbrepusucreacion = usuario;
                    reporteTemp.Cbrepfeccreacion = DateTime.Now;
                }

                //obtengo nuevo reporte a guardar
                CbReporteDTO reporteAGuardar = FormatearReporteAGuardar(usuario, datos, notas, nombReporte, tipoReporte, mesDeVigencia, reporteTemp);

                int cbrepcodi = GuardarReporteTransaccional(reporteAGuardar);

                return cbrepcodi;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }
        }

        /// <summary>
        /// Guarda transaccionalmente un reporte
        /// </summary>
        /// <param name="reporte"></param>
        /// <returns></returns>
        private int GuardarReporteTransaccional(CbReporteDTO reporte)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            int cbrepcodi = 0;

            try
            {
                #region Guardar en bd
                conn = FactorySic.GetCbReporteRepository().BeginConnection();
                tran = FactorySic.GetCbReporteRepository().StartTransaction(conn);

                //Guarda reporte
                cbrepcodi = this.SaveCbReporteTransaccional(reporte, conn, tran);

                //Guardando Notas
                foreach (var nota in reporte.ListaNotas)
                {
                    nota.Cbrepcodi = cbrepcodi;
                    this.SaveCbNotaTransaccional(nota, conn, tran);

                }

                //Guardando Cabecera
                foreach (var repCabecera in reporte.ListaCabeceras)
                {
                    repCabecera.Cbrepcodi = cbrepcodi;
                    this.SaveCbRepCabeceraTransaccional(repCabecera, conn, tran);

                }

                //Guardando Centrales
                foreach (var central in reporte.ListaCentrales)
                {
                    central.Cbrepcodi = cbrepcodi;
                    this.SaveCbReporteCentralTransaccional(central, conn, tran);

                    //Guardando Detalles de las centrales
                    foreach (var centDetalle in central.ListaDetalles)
                    {
                        this.SaveCbReporteDetalleTransaccional(centDetalle, conn, tran);
                    }
                }

                //foreach (var centralX in reporte.ListaCentrales)
                //{
                //    //Guardando Detalles de las centrales
                //    foreach (var centDetalle in centralX.ListaDetalles)
                //    {
                //        this.SaveCbReporteDetalleTransaccional(centDetalle, conn, tran);
                //    }
                //}

                #endregion

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                cbrepcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos del reporte.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

            return cbrepcodi;
        }

        /// <summary>
        /// Devuelve todos los datos del repporte
        /// </summary>
        /// <param name="cbrepcodi"></param>
        /// <returns></returns>
        public CbReporteDTO ObtenerDatosTotalesReporte(int cbrepcodi)
        {
            CbReporteDTO salida = new CbReporteDTO();

            salida = GetByIdCbReporte(cbrepcodi);

            if (salida != null)
            {
                salida.ListaCabeceras = FactorySic.GetCbRepCabeceraRepository().GetByIdReporte(cbrepcodi);
                salida.ListaNotas = FactorySic.GetCbNotaRepository().GetByReporte(cbrepcodi);
                salida.ListaCentrales = ObtenerCentralesDelReporte(cbrepcodi);

                foreach (var central in salida.ListaCentrales)
                {
                    central.ListaDetalles = FactorySic.GetCbReporteDetalleRepository().GetByIdCentral(central.Cbrcencodi);
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve centrales y detalles del repporte
        /// </summary>
        /// <param name="cbrepcodi"></param>
        /// <returns></returns>
        public CbReporteDTO ObtenerDatosParcialesReporte(int cbrepcodi)
        {
            CbReporteDTO salida = new CbReporteDTO();

            salida = GetByIdCbReporte(cbrepcodi);

            if (salida != null)
            {
                salida.ListaCentrales = ObtenerCentralesDelReporte(cbrepcodi);

                foreach (var central in salida.ListaCentrales)
                {
                    central.ListaDetalles = FactorySic.GetCbReporteDetalleRepository().GetByIdCentral(central.Cbrcencodi);
                }
            }

            return salida;
        }

        /// <summary>
        /// Exporta el reporte mensual de CV
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <returns></returns>
        public string ExportarTodosReportesMensualCV(string ruta, DateTime mesDeVigencia)
        {
            string nameFile = string.Format("Reporte_Mensual_de_CV_{0}.xlsx", mesDeVigencia.ToString(ConstantesAppServicio.FormatoFechaWS));
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            List<CbReporteDTO> lstReportesC1Ordenado = ObtenerReportesPorReporteYMesVigencia(ConstantesCombustibles.TipoReporteCVCuadro1, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));
            List<CbReporteDTO> lstReportesC2Ordenado = ObtenerReportesPorReporteYMesVigencia(ConstantesCombustibles.TipoReporteCVCuadro2, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));
            List<CbReporteDTO> lstReportesC3Ordenado = ObtenerReportesPorReporteYMesVigencia(ConstantesCombustibles.TipoReporteCVCuadro3, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));
            List<CbReporteDTO> lstReportesC4 = ObtenerReportesPorReporteYMesVigencia(ConstantesCombustibles.TipoReporteCVCVC, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));

            CbReporteDTO reporteC1 = lstReportesC1Ordenado.Any() ? ObtenerDatosTotalesReporte(lstReportesC1Ordenado.First().Cbrepcodi) : null;
            CbReporteDTO reporteC2 = lstReportesC2Ordenado.Any() ? ObtenerDatosTotalesReporte(lstReportesC2Ordenado.First().Cbrepcodi) : null;
            CbReporteDTO reporteC3 = lstReportesC3Ordenado.Any() ? ObtenerDatosTotalesReporte(lstReportesC3Ordenado.First().Cbrepcodi) : null;
            CbReporteDTO reporteC4 = lstReportesC4.Any() ? ObtenerDatosTotalesReporte(lstReportesC4.First().Cbrepcodi) : null;

            List<CbRepPropiedadDTO> lstPropiedades = ListCbRepPropiedads();

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                //REPORTE1
                GenerarHojaExcelCuadro1(xlPackage, mesDeVigencia, "Formato 3", reporteC1, lstPropiedades);
                xlPackage.Save();

                //REPORTE2
                GenerarHojaExcelCuadro2(xlPackage, mesDeVigencia, "Calidad GN", reporteC2, lstPropiedades);
                xlPackage.Save();

                //REPORTE3
                GenerarHojaExcelCuadro3(xlPackage, mesDeVigencia, "Costo GN", reporteC3, lstPropiedades, reporteC1, reporteC2);
                xlPackage.Save();

                //REPORTE4
                GenerarHojaExcelCuadro4(xlPackage, mesDeVigencia, "Costo Variable", reporteC4, lstPropiedades);
                xlPackage.Save();

                xlPackage.Save();
            }


            return nameFile;
        }

        /// <summary>
        /// Genera el excel del cuadro 1
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="mesDeVigencia"></param>
        /// <param name="nameWS"></param>
        /// <param name="reporteC1"></param>
        /// <param name="lstPropiedades"></param>
        private void GenerarHojaExcelCuadro1(ExcelPackage xlPackage, DateTime mesDeVigencia, string nameWS, CbReporteDTO reporteC1, List<CbRepPropiedadDTO> lstPropiedades)
        {
            int numDecimales = 4;
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            int filaIni = 2;
            int colIni = 2;

            int filaCuadro = filaIni;
            int filaTitulo = filaIni + 1;
            int filanexo = filaIni + 2;
            int filaMes = filaIni + 3;

            int filaTabla = filaIni + 5;
            int filaIniCabecera = filaTabla;
            int filaDosCabecera = filaIniCabecera + 1;
            int filaTresCabecera = filaDosCabecera + 1;

            int filaIniData = filaTabla + 3;
            int colIniData = colIni;
            int colCentral = colIniData;
            int colPUSuministro = colCentral + 1;
            int colPUTransporte = colPUSuministro + 1;
            int colPUDistribucion = colPUTransporte + 1;

            #region encabezado
            ws.Cells[filaCuadro, colCentral].Value = "CUADRO N°1";
            ws.Cells[filaTitulo, colCentral].Value = reporteC1 != null ? reporteC1.Cbrepnombre.ToUpper().Trim() : "PRECIOS UNITARIOS INFORMADOS POR LOS PARTICIPANTES GENERADORES ";
            ws.Cells[filanexo, colCentral].Value = "(FORMATO 3 DEL ANEXO 3 PR-31)";
            ws.Cells[filaMes, colCentral].Value = EPDate.f_NombreMes(mesDeVigencia.Month) + " " + mesDeVigencia.Year;

            ws.Row(filaTitulo).Height = 20;
            UtilExcel.CeldasExcelEnNegrita(ws, filaCuadro, colCentral, filaMes, colCentral);
            UtilExcel.CeldasExcelColorTexto(ws, filaCuadro, colCentral, filaCuadro, colCentral, "#0924BD");
            UtilExcel.CeldasExcelColorFondo(ws, filaCuadro, colCentral, filaCuadro, colCentral, "#FFFFFF");
            UtilExcel.CeldasExcelAgrupar(ws, filaCuadro, colCentral, filaCuadro, colPUDistribucion);
            UtilExcel.CeldasExcelAgrupar(ws, filaTitulo, colCentral, filaTitulo, colPUDistribucion);
            UtilExcel.CeldasExcelAgrupar(ws, filanexo, colCentral, filanexo, colPUDistribucion);
            UtilExcel.CeldasExcelAgrupar(ws, filaMes, colCentral, filaMes, colPUDistribucion);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaCuadro, colCentral, filaMes, colPUDistribucion, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaCuadro, colCentral, filaMes, colPUDistribucion, "Centro");

            #endregion

            #region cabecera
            ws.Cells[filaIniCabecera, colCentral].Value = reporteC1 != null ? reporteC1.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_CentralTermoeléctrica).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_CentralTermoeléctrica).Cbrprovalor;
            ws.Cells[filaIniCabecera, colPUSuministro].Value = reporteC1 != null ? reporteC1.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_TituloPrecioUnitario).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_TituloPrecioUnitario).Cbrprovalor;
            ws.Cells[filaDosCabecera, colPUSuministro].Value = reporteC1 != null ? reporteC1.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_PUSuministro).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_PUSuministro).Cbrprovalor;
            ws.Cells[filaDosCabecera, colPUTransporte].Value = reporteC1 != null ? reporteC1.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_PUTransporte).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_PUTransporte).Cbrprovalor;
            ws.Cells[filaDosCabecera, colPUDistribucion].Value = reporteC1 != null ? reporteC1.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_PUDistribución).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_PUDistribución).Cbrprovalor;
            ws.Cells[filaTresCabecera, colPUSuministro].Value = reporteC1 != null ? reporteC1.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_UnidadPUSuministro).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_UnidadPUSuministro).Cbrprovalor;
            ws.Cells[filaTresCabecera, colPUTransporte].Value = reporteC1 != null ? reporteC1.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_UnidadPUTransporte).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_UnidadPUTransporte).Cbrprovalor;
            ws.Cells[filaTresCabecera, colPUDistribucion].Value = reporteC1 != null ? reporteC1.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_UnidadPUDistribución).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_1_UnidadPUDistribución).Cbrprovalor;

            ws.Row(filaIniCabecera).Height = 25;
            ws.Row(filaDosCabecera).Height = 25;
            ws.Row(filaTresCabecera).Height = 25;

            ws.Column(colCentral).Width = 50;
            ws.Column(colPUSuministro).Width = 20;
            ws.Column(colPUTransporte).Width = 20;
            ws.Column(colPUDistribucion).Width = 20;

            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, colCentral, filaTresCabecera, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, colPUSuministro, filaIniCabecera, colPUDistribucion);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniCabecera, colCentral, filaTresCabecera, colPUDistribucion, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniCabecera, colCentral, filaTresCabecera, colPUDistribucion, "Centro");
            UtilExcel.CeldasExcelColorTexto(ws, filaIniCabecera, colCentral, filaTresCabecera, colPUDistribucion, "#FFFFFF");
            UtilExcel.CeldasExcelColorFondo(ws, filaIniCabecera, colCentral, filaTresCabecera, colPUDistribucion, "#0C76B8");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniCabecera, colCentral, filaTresCabecera, colPUDistribucion, "Arial", 10);
            UtilExcel.BorderCeldas2(ws, filaIniCabecera, colCentral, filaTresCabecera, colPUDistribucion);
            #endregion

            #region Cuerpo

            if (reporteC1 != null)
            {

                List<CbReporteCentralDTO> lstCentrales = OrdenarCentralesDeBD(reporteC1.ListaCentrales);

                foreach (var central in lstCentrales)
                {
                    ws.Cells[filaIniData, colCentral].Value = central.Cbrcennombre.Trim();

                    List<CbReporteDetalleDTO> lstDetalles = central.ListaDetalles;

                    string strPus = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi51PUSuministro).Cbrepdvalor;
                    bool puSIsNumero = decimal.TryParse(strPus, out decimal puS);

                    string strPut = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi52PUTransporte).Cbrepdvalor;
                    bool puTIsNumero = decimal.TryParse(strPut, out decimal puT);

                    string strPuD = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi53PUDistribucion).Cbrepdvalor;
                    bool puDIsNumero = decimal.TryParse(strPuD, out decimal puD);

                    if (puSIsNumero) ws.Cells[filaIniData, colPUSuministro + 0].Value = puS; else ws.Cells[filaIniData, colPUSuministro + 0].Value = strPus;
                    ws.Cells[filaIniData, colPUSuministro + 0].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                    if (puTIsNumero) ws.Cells[filaIniData, colPUSuministro + 1].Value = puT; else ws.Cells[filaIniData, colPUSuministro + 1].Value = strPut;
                    ws.Cells[filaIniData, colPUSuministro + 1].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                    if (puDIsNumero) ws.Cells[filaIniData, colPUSuministro + 2].Value = puD; else ws.Cells[filaIniData, colPUSuministro + 2].Value = strPuD;
                    ws.Cells[filaIniData, colPUSuministro + 2].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                    UtilExcel.BorderCeldas2(ws, filaIniData, colCentral, filaIniData, colPUDistribucion);

                    filaIniData++;
                }
            }
            #endregion

            #region Notas
            int filaNotas = filaIniData;

            if (reporteC1 != null)
            {
                List<CbNotaDTO> lstNotas = reporteC1.ListaNotas;

                foreach (var nota in lstNotas)
                {
                    string valNota = nota.Cbnotadescripcion != null ? nota.Cbnotadescripcion.Replace("\n", "\r\n") : "";
                    ws.Cells[filaNotas, colCentral].Value = valNota;

                    int totalSaltos = 0;
                    if (nota.Cbnotadescripcion != null)
                        totalSaltos = Regex.Matches(nota.Cbnotadescripcion, "\n").Count;

                    ws.Row(filaNotas).Height = totalSaltos > 0 ? (totalSaltos + 1) * 12 : 12;
                    UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaNotas, colCentral, filaNotas, colPUDistribucion, "Arial", 8);
                    UtilExcel.CeldasExcelAgrupar(ws, filaNotas, colCentral, filaNotas, colPUDistribucion);
                    UtilExcel.CeldasExcelWrapText(ws, filaNotas, colCentral);

                    filaNotas++;
                }
            }
            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);
            ws.View.ZoomScale = 100;

            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
        }

        /// <summary>
        /// Genera el excel del cuadro 2
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="mesDeVigencia"></param>
        /// <param name="nameWS"></param>
        /// <param name="reporteC1"></param>
        /// <param name="lstPropiedades"></param>
        private void GenerarHojaExcelCuadro2(ExcelPackage xlPackage, DateTime mesDeVigencia, string nameWS, CbReporteDTO reporteC, List<CbRepPropiedadDTO> lstPropiedades)
        {
            int numDecimales = 2;
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            int filaIni = 2;
            int colIni = 2;

            int filaCuadro = filaIni;
            int filaTitulo = filaIni + 1;
            int filanexo = filaIni + 2;
            int filaMes = filaIni + 3;

            int filaTabla = filaIni + 5;
            int filaIniCabecera = filaTabla;
            int filaDosCabecera = filaIniCabecera + 1;
            int filaTresCabecera = filaDosCabecera + 1;

            int filaIniData = filaTabla + 3;
            int colIniData = colIni;
            int colCentral = colIniData;
            int colSuministro = colCentral + 1;
            int colTransporte = colSuministro + 1;
            int colDistribucion = colTransporte + 1;
            int colTodos = colDistribucion + 1;

            #region encabezado
            ws.Cells[filaCuadro, colCentral].Value = "CUADRO N°2";
            ws.Cells[filaTitulo, colCentral].Value = reporteC != null ? reporteC.Cbrepnombre.ToUpper().Trim() : "CALIDAD DEL COMBUSTIBLE GAS NATURAL";
            ws.Cells[filanexo, colCentral].Value = "";
            ws.Cells[filaMes, colCentral].Value = EPDate.f_NombreMes(mesDeVigencia.Month) + " " + mesDeVigencia.Year;

            ws.Row(filaTitulo).Height = 20;
            UtilExcel.CeldasExcelEnNegrita(ws, filaCuadro, colCentral, filaMes, colCentral);
            UtilExcel.CeldasExcelColorTexto(ws, filaCuadro, colCentral, filaCuadro, colCentral, "#0924BD");
            UtilExcel.CeldasExcelColorFondo(ws, filaCuadro, colCentral, filaCuadro, colCentral, "#FFFFFF");
            UtilExcel.CeldasExcelAgrupar(ws, filaCuadro, colCentral, filaCuadro, colTodos);
            UtilExcel.CeldasExcelAgrupar(ws, filaTitulo, colCentral, filaTitulo, colTodos);
            UtilExcel.CeldasExcelAgrupar(ws, filanexo, colCentral, filanexo, colTodos);
            UtilExcel.CeldasExcelAgrupar(ws, filaMes, colCentral, filaMes, colTodos);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaCuadro, colCentral, filaMes, colTodos, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaCuadro, colCentral, filaMes, colTodos, "Centro");

            #endregion

            #region cabecera
            ws.Cells[filaIniCabecera, colCentral].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_CentralTermoeléctrica).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_CentralTermoeléctrica).Cbrprovalor;
            ws.Cells[filaIniCabecera, colSuministro].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_TituloPCS).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_TituloPCS).Cbrprovalor;
            ws.Cells[filaIniCabecera, colTodos].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_TituloPCI).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_TituloPCI).Cbrprovalor;
            ws.Cells[filaDosCabecera, colSuministro].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCSSuministro).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCSSuministro).Cbrprovalor;
            ws.Cells[filaDosCabecera, colTransporte].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCSTransporte).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCSTransporte).Cbrprovalor;
            ws.Cells[filaDosCabecera, colDistribucion].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCSDistribución).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCSDistribución).Cbrprovalor;
            ws.Cells[filaDosCabecera, colTodos].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución).Cbrprovalor;


            if (reporteC != null)
            {
                GenerarExcelItemUnidad(ws, reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_UnidadPCSSuministro).Cbrcabdescripcion, filaTresCabecera, colSuministro);
            }
            else
            {
                GenerarExcelItemUnidad(ws, lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_UnidadPCSSuministro).Cbrprovalor, filaTresCabecera, colSuministro);
            }



            if (reporteC != null)
            {
                GenerarExcelItemUnidad(ws, reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_UnidadPCSTransporte).Cbrcabdescripcion, filaTresCabecera, colTransporte);
            }
            else
            {
                GenerarExcelItemUnidad(ws, lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_UnidadPCSTransporte).Cbrprovalor, filaTresCabecera, colTransporte);
            }

            if (reporteC != null)
            {
                GenerarExcelItemUnidad(ws, reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_UnidadPCSDistribución).Cbrcabdescripcion, filaTresCabecera, colDistribucion);
            }
            else
            {
                GenerarExcelItemUnidad(ws, lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_UnidadPCSDistribución).Cbrprovalor, filaTresCabecera, colDistribucion);
            }

            if (reporteC != null)
            {
                GenerarExcelItemUnidad(ws, reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_UnidadPCISuministroTransporteDistribución).Cbrcabdescripcion, filaTresCabecera, colTodos);
            }
            else
            {
                GenerarExcelItemUnidad(ws, lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_UnidadPCISuministroTransporteDistribución).Cbrprovalor, filaTresCabecera, colTodos);
            }



            ws.Row(filaIniCabecera).Height = 25;
            ws.Row(filaDosCabecera).Height = 25;
            ws.Row(filaTresCabecera).Height = 25;

            ws.Column(colCentral).Width = 50;
            ws.Column(colSuministro).Width = 20;
            ws.Column(colTransporte).Width = 20;
            ws.Column(colDistribucion).Width = 20;
            ws.Column(colTodos).Width = 25;

            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, colCentral, filaTresCabecera, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, colSuministro, filaIniCabecera, colDistribucion);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniCabecera, colCentral, filaTresCabecera, colTodos, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniCabecera, colCentral, filaTresCabecera, colTodos, "Centro");
            UtilExcel.CeldasExcelColorTexto(ws, filaIniCabecera, colCentral, filaTresCabecera, colTodos, "#FFFFFF");
            UtilExcel.CeldasExcelColorFondo(ws, filaIniCabecera, colCentral, filaTresCabecera, colTodos, "#0C76B8");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniCabecera, colCentral, filaTresCabecera, colTodos, "Arial", 10);
            UtilExcel.BorderCeldas2(ws, filaIniCabecera, colCentral, filaTresCabecera, colTodos);
            UtilExcel.CeldasExcelWrapText(ws, filaDosCabecera, colTodos, filaDosCabecera, colTodos);
            #endregion

            #region Cuerpo

            if (reporteC != null)
            {
                List<CbReporteCentralDTO> lstCentrales = OrdenarCentralesDeBD(reporteC.ListaCentrales);
                foreach (var central in lstCentrales)
                {
                    ws.Cells[filaIniData, colCentral].Value = central.Cbrcennombre.Trim();

                    List<CbReporteDetalleDTO> lstDetalles = central.ListaDetalles;

                    string strPuS = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi15PCSSuministro).Cbrepdvalor;
                    bool puSIsNumero = decimal.TryParse(strPuS, out decimal puS);

                    string strPuT = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi16PCSTransporte).Cbrepdvalor;
                    bool puTIsNumero = decimal.TryParse(strPuT, out decimal puT);

                    string strPuD = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi17PCSDistribucion).Cbrepdvalor;
                    bool puDIsNumero = decimal.TryParse(strPuD, out decimal puD);

                    string strPCI = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI).Cbrepdvalor;
                    bool pciIsNumero = decimal.TryParse(strPCI, out decimal PCI);

                    if (puSIsNumero) ws.Cells[filaIniData, colSuministro + 0].Value = puS; else ws.Cells[filaIniData, colSuministro + 0].Value = strPuS;
                    ws.Cells[filaIniData, colSuministro + 0].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                    if (puTIsNumero) ws.Cells[filaIniData, colSuministro + 1].Value = puT; else ws.Cells[filaIniData, colSuministro + 1].Value = strPuT;
                    ws.Cells[filaIniData, colSuministro + 1].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                    if (puDIsNumero) ws.Cells[filaIniData, colSuministro + 2].Value = puD; else ws.Cells[filaIniData, colSuministro + 2].Value = strPuD;
                    ws.Cells[filaIniData, colSuministro + 2].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                    if (pciIsNumero) ws.Cells[filaIniData, colSuministro + 3].Value = PCI; else ws.Cells[filaIniData, colSuministro + 3].Value = strPCI;


                    UtilExcel.BorderCeldas2(ws, filaIniData, colCentral, filaIniData, colTodos);

                    filaIniData++;
                }
            }
            #endregion

            #region Notas
            int filaNotas = filaIniData;

            if (reporteC != null)
            {
                List<CbNotaDTO> lstNotas = reporteC.ListaNotas;

                foreach (var nota in lstNotas)
                {

                    string valNota = nota.Cbnotadescripcion != null ? nota.Cbnotadescripcion.Replace("\n", "\r\n") : "";
                    ws.Cells[filaNotas, colCentral].Value = valNota;

                    int totalSaltos = 0;
                    if (nota.Cbnotadescripcion != null)
                        totalSaltos = Regex.Matches(nota.Cbnotadescripcion, "\n").Count;

                    ws.Row(filaNotas).Height = totalSaltos > 0 ? (totalSaltos + 1) * 12 : 12;
                    UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaNotas, colCentral, filaNotas, colTodos, "Arial", 8);
                    UtilExcel.CeldasExcelAgrupar(ws, filaNotas, colCentral, filaNotas, colTodos);
                    UtilExcel.CeldasExcelWrapText(ws, filaNotas, colCentral);

                    filaNotas++;
                }
            }
            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            ws.View.ZoomScale = 100;

            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
        }

        /// <summary>
        /// Generar excel superindice de la medida
        /// </summary>
        /// <param name="unidad"></param>
        /// <returns></returns>
        public void GenerarExcelItemUnidad(ExcelWorksheet ws, string unidad, int row, int col)
        {
            unidad = unidad.Trim();
            string formatedo = string.Empty;

            ws.Cells[row, col].IsRichText = true;
            ExcelRichTextCollection rtfCollection = ws.Cells[row, col].RichText;
            ExcelRichText ert = null;

            for (int i = 0; i < unidad.Length; i++)
            {
                int num = -1;
                if (Int32.TryParse(unidad[i].ToString(), out num))
                {
                    ert = rtfCollection.Add(unidad[i].ToString());
                    ert.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;
                    ert.Color = System.Drawing.Color.White;
                }
                else
                {
                    ert = rtfCollection.Add(unidad[i].ToString());
                    ert.Color = System.Drawing.Color.White;
                }
            }

        }

        /// <summary>
        /// Genera el excel del cuadro 2
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="mesDeVigencia"></param>
        /// <param name="nameWS"></param>
        /// <param name="reporteC1"></param>
        /// <param name="lstPropiedades"></param>
        private void GenerarHojaExcelCuadro3(ExcelPackage xlPackage, DateTime mesDeVigencia, string nameWS, CbReporteDTO reporteC, List<CbRepPropiedadDTO> lstPropiedades, CbReporteDTO reporteC1, CbReporteDTO reporteC2)
        {
            int numDecimales = 4;

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            int filaIni = 2;
            int colIni = 2;

            int filaCuadro = filaIni;
            int filaTitulo = filaIni + 1;
            int filanexo = filaIni + 2;
            int filaMes = filaIni + 3;

            int filaTabla = filaIni + 5;
            int filaIniCabecera = filaTabla;
            int filaDosCabecera = filaIniCabecera + 1;
            int filaTresCabecera = filaDosCabecera + 1;

            int filaIniData = filaTabla + 3;
            int colIniData = colIni;
            int colCentral = colIniData;
            int colSuministro = colCentral + 1;
            int colTransporte = colSuministro + 1;
            int colDistribucion = colTransporte + 1;
            int colCostoComb = colDistribucion + 1;

            #region encabezado
            ws.Cells[filaCuadro, colCentral].Value = "CUADRO N°3";
            ws.Cells[filaTitulo, colCentral].Value = reporteC != null ? reporteC.Cbrepnombre.ToUpper().Trim() : "COSTO DE COMBUSTIBLE GAS NATURAL";
            ws.Cells[filanexo, colCentral].Value = "(5.2 DEL ANEXO 3 PR-31)";
            ws.Cells[filaMes, colCentral].Value = EPDate.f_NombreMes(mesDeVigencia.Month) + " " + mesDeVigencia.Year;

            ws.Row(filaTitulo).Height = 20;
            UtilExcel.CeldasExcelEnNegrita(ws, filaCuadro, colCentral, filaMes, colCentral);
            UtilExcel.CeldasExcelColorTexto(ws, filaCuadro, colCentral, filaCuadro, colCentral, "#0924BD");
            UtilExcel.CeldasExcelColorFondo(ws, filaCuadro, colCentral, filaCuadro, colCentral, "#FFFFFF");
            UtilExcel.CeldasExcelAgrupar(ws, filaCuadro, colCentral, filaCuadro, colCostoComb);
            UtilExcel.CeldasExcelAgrupar(ws, filaTitulo, colCentral, filaTitulo, colCostoComb);
            UtilExcel.CeldasExcelAgrupar(ws, filanexo, colCentral, filanexo, colCostoComb);
            UtilExcel.CeldasExcelAgrupar(ws, filaMes, colCentral, filaMes, colCostoComb);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaCuadro, colCentral, filaMes, colCostoComb, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaCuadro, colCentral, filaMes, colCostoComb, "Centro");

            #endregion

            #region cabecera
            ws.Cells[filaIniCabecera, colCentral].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_CentralTermoeléctrica).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_CentralTermoeléctrica).Cbrprovalor;
            ws.Cells[filaIniCabecera, colSuministro].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_TituloPrecioUnitario).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_TituloPrecioUnitario).Cbrprovalor;
            ws.Cells[filaIniCabecera, colCostoComb].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_TituloCostoCombustible).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_TituloCostoCombustible).Cbrprovalor;
            ws.Cells[filaDosCabecera, colSuministro].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_PUSuministro).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_PUSuministro).Cbrprovalor;
            ws.Cells[filaDosCabecera, colTransporte].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_PUTransporte).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_PUTransporte).Cbrprovalor;
            ws.Cells[filaDosCabecera, colDistribucion].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_PUDistribución).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_PUDistribución).Cbrprovalor;
            //ws.Cells[filaDosCabecera, colCostoComb].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución).Cbrcabdescripcion :
            //                                            lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución).Cbrprovalor;
            ws.Cells[filaTresCabecera, colSuministro].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_UnidadPUSuministro).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_UnidadPUSuministro).Cbrprovalor;
            ws.Cells[filaTresCabecera, colTransporte].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_UnidadPUTransporte).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_UnidadPUTransporte).Cbrprovalor;
            ws.Cells[filaTresCabecera, colDistribucion].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_UnidadPUDistribución).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_UnidadPUDistribución).Cbrprovalor;
            ws.Cells[filaTresCabecera, colCostoComb].Value = reporteC != null ? reporteC.ListaCabeceras.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_UnidadCostoCombustible).Cbrcabdescripcion :
                                                        lstPropiedades.Find(x => x.Cbrprocodi == ConstantesCombustibles.Cuadro_3_UnidadCostoCombustible).Cbrprovalor;

            ws.Row(filaIniCabecera).Height = 25;
            ws.Row(filaDosCabecera).Height = 25;
            ws.Row(filaTresCabecera).Height = 25;

            ws.Column(colCentral).Width = 50;
            ws.Column(colSuministro).Width = 20;
            ws.Column(colTransporte).Width = 20;
            ws.Column(colDistribucion).Width = 20;
            ws.Column(colCostoComb).Width = 25;

            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, colCentral, filaTresCabecera, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, colSuministro, filaIniCabecera, colDistribucion);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniCabecera, colCostoComb, filaDosCabecera, colCostoComb);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniCabecera, colCentral, filaTresCabecera, colCostoComb, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniCabecera, colCentral, filaTresCabecera, colCostoComb, "Centro");
            UtilExcel.CeldasExcelColorTexto(ws, filaIniCabecera, colCentral, filaTresCabecera, colCostoComb, "#FFFFFF");
            UtilExcel.CeldasExcelColorFondo(ws, filaIniCabecera, colCentral, filaTresCabecera, colCostoComb, "#0C76B8");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniCabecera, colCentral, filaTresCabecera, colCostoComb, "Arial", 10);
            UtilExcel.BorderCeldas2(ws, filaIniCabecera, colCentral, filaTresCabecera, colCostoComb);
            UtilExcel.CeldasExcelWrapText(ws, filaIniCabecera, colCostoComb, filaDosCabecera, colCostoComb);
            #endregion

            #region Cuerpo

            if (reporteC != null)
            {

                List<CbReporteCentralDTO> lstCentrales = OrdenarCentralesDeBD(reporteC.ListaCentrales);
                int nf = filaIniData;
                foreach (var central in lstCentrales)
                {
                    //Nombre de la central
                    ws.Cells[filaIniData, colCentral].Value = central.Cbrcennombre.Trim();

                    List<CbReporteDetalleDTO> lstDetalles = central.ListaDetalles;



                    string valPUSuministro = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi51PUSuministro).Cbrepdvalor;
                    string valPUTransporte = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi52PUTransporte).Cbrepdvalor;
                    string valPUDistribucion = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Concepcodi53PUDistribucion).Cbrepdvalor;
                    string valCCG = lstDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso).Cbrepdvalor;

                    bool puSIsNumero = decimal.TryParse(valPUSuministro, out decimal puS);
                    bool puTIsNumero = decimal.TryParse(valPUTransporte, out decimal puT);
                    bool puDIsNumero = decimal.TryParse(valPUDistribucion, out decimal puD);
                    bool ccIsNumero = decimal.TryParse(valCCG, out decimal cc);

                    //Para las centrales aprobadas en el mes de vigencia consultado, uso celdas formuladas
                    if (central.Cbrcenorigen == ConstantesCombustibles.OrigenCRCalculo) // Valor de Cbrcenorigen:  1:Del calculo, 2:De asignacion, 3:Copiado mes pasado
                    {
                        //para las filas que son calculadas por formula                        
                        int filaCentralC1 = ObtenerFilaDeCentralExcelFormulado(ConstantesCombustibles.TipoReporteCVCuadro1, central.Cbcentcodi, reporteC1);
                        int filaCentralC2 = ObtenerFilaDeCentralExcelFormulado(ConstantesCombustibles.TipoReporteCVCuadro2, central.Cbcentcodi, reporteC2);

                        //Columna Suministro
                        if (valPUSuministro.Trim().ToUpper() != "NO APLICA")
                        {
                            ws.Cells[filaIniData, colSuministro + 0].Formula = "=ROUND('Formato 3'!C" + filaCentralC1 + "*('Calidad GN'!C" + filaCentralC2 + "/'Calidad GN'!$F" + filaCentralC2 + "), 4)";
                            ws.Cells[filaIniData, colSuministro + 0].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);
                        }
                        else
                        {
                            ws.Cells[filaIniData, colSuministro + 0].Value = valPUSuministro; //No Aplica                            
                        }

                        //Columna Transporte
                        if (valPUTransporte.Trim().ToUpper() != "NO APLICA")
                        {
                            ws.Cells[filaIniData, colSuministro + 1].Formula = "=ROUND('Formato 3'!D" + filaCentralC1 + "*('Calidad GN'!D" + filaCentralC2 + "/'Calidad GN'!$F" + filaCentralC2 + "), 4)";
                            ws.Cells[filaIniData, colSuministro + 1].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);
                        }
                        else
                        {
                            ws.Cells[filaIniData, colSuministro + 1].Value = valPUTransporte; //No Aplica                            
                        }

                        //Columna Distribucion
                        if (valPUDistribucion.Trim().ToUpper() != "NO APLICA")
                        {
                            ws.Cells[filaIniData, colSuministro + 2].Formula = "=ROUND('Formato 3'!E" + filaCentralC1 + "*('Calidad GN'!E" + filaCentralC2 + "/'Calidad GN'!$F" + filaCentralC2 + "), 4)";
                            ws.Cells[filaIniData, colSuministro + 2].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);
                        }
                        else
                        {
                            ws.Cells[filaIniData, colSuministro + 2].Value = valPUDistribucion; //No Aplica                            
                        }

                        //Columna Suma (Costo combustible)
                        if (valPUSuministro.Trim().ToUpper() != "NO APLICA" || valPUTransporte.Trim().ToUpper() != "NO APLICA" || valPUDistribucion.Trim().ToUpper() != "NO APLICA")
                        {
                            ws.Cells[filaIniData, colSuministro + 3].Formula = "=SUM(C" + filaIniData + ":E" + filaIniData + ")";
                            ws.Cells[filaIniData, colSuministro + 3].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);
                        }
                        else
                        {
                            ws.Cells[filaIniData, colSuministro + 3].Value = valCCG; //No Aplica                          
                        }
                    }
                    else
                    {

                        if (puSIsNumero) ws.Cells[filaIniData, colSuministro + 0].Value = puS; else ws.Cells[filaIniData, colSuministro + 0].Value = valPUSuministro;
                        ws.Cells[filaIniData, colSuministro + 0].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                        if (puTIsNumero) ws.Cells[filaIniData, colSuministro + 1].Value = puT; else ws.Cells[filaIniData, colSuministro + 1].Value = valPUTransporte;
                        ws.Cells[filaIniData, colSuministro + 1].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                        if (puDIsNumero) ws.Cells[filaIniData, colSuministro + 2].Value = puD; else ws.Cells[filaIniData, colSuministro + 2].Value = valPUDistribucion;
                        ws.Cells[filaIniData, colSuministro + 2].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);

                        if (ccIsNumero) ws.Cells[filaIniData, colSuministro + 3].Value = cc; else ws.Cells[filaIniData, colSuministro + 3].Value = valCCG;
                        ws.Cells[filaIniData, colSuministro + 3].Style.Numberformat.Format = FormatoNumDecimales(numDecimales);
                    }

                    UtilExcel.BorderCeldas2(ws, filaIniData, colCentral, filaIniData, colCostoComb);

                    if (central.Cbrcencoloreado == 1)
                    {
                        UtilExcel.CeldasExcelColorFondo(ws, filaIniData, colCentral, filaIniData, colCostoComb, "#FAD4A3");
                    }
                    filaIniData++;
                }
            }
            #endregion

            #region Notas
            int filaNotas = filaIniData;

            if (reporteC != null)
            {
                List<CbNotaDTO> lstNotas = reporteC.ListaNotas;

                foreach (var nota in lstNotas)
                {

                    string valNota = nota.Cbnotadescripcion != null ? nota.Cbnotadescripcion.Replace("\n", "\r\n") : "";
                    ws.Cells[filaNotas, colCentral].Value = valNota;

                    int totalSaltos = 0;
                    if (nota.Cbnotadescripcion != null)
                        totalSaltos = Regex.Matches(nota.Cbnotadescripcion, "\n").Count;

                    ws.Row(filaNotas).Height = totalSaltos > 0 ? (totalSaltos + 1) * 12 : 12;
                    UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaNotas, colCentral, filaNotas, colCostoComb, "Arial", 8);
                    UtilExcel.CeldasExcelAgrupar(ws, filaNotas, colCentral, filaNotas, colCostoComb);
                    UtilExcel.CeldasExcelWrapText(ws, filaNotas, colCentral);

                    filaNotas++;
                }
            }
            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);
            ws.View.ZoomScale = 100;

            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
        }

        /// <summary>
        /// Obtiene el numero de fila de una central especfica
        /// </summary>
        /// <param name="tipoCuadro"></param>
        /// <param name="cbcentcodi"></param>
        /// <param name="reporteCuadroX"></param>
        /// <returns></returns>
        public int ObtenerFilaDeCentralExcelFormulado(int tipoCuadro, int cbcentcodi, CbReporteDTO reporteCuadroX)
        {
            int salida = 0;

            int filaDataC1yC2 = 10; //fila que inician la data en el cuadro 1 y 2 en el excel

            //ordeno la lista de centrales (tal como sale en el excel)
            List<CbReporteCentralDTO> lstCentrales = OrdenarCentralesDeBD(reporteCuadroX.ListaCentrales);

            int aumentar = -1;
            bool continuo = true;
            foreach (var central in lstCentrales)
            {
                if (continuo)
                {
                    if (central.Cbcentcodi != cbcentcodi)
                    {

                    }
                    else
                    {
                        continuo = false;
                    }
                    aumentar++;
                }
            }

            salida = filaDataC1yC2 + aumentar;

            return salida;
        }
        /// <summary>
        /// Genera el excel del cuadro 1
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="mesDeVigencia"></param>
        /// <param name="nameWS"></param>
        /// <param name="reporteC1"></param>
        /// <param name="lstPropiedades"></param>
        private void GenerarHojaExcelCuadro4(ExcelPackage xlPackage, DateTime mesDeVigencia, string nameWS, CbReporteDTO reporteC1, List<CbRepPropiedadDTO> lstPropiedades)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            int filaIni = 2;
            int colIni = 2;

            int filaTitulo = filaIni;
            int filaMes = filaIni + 1;
            int filaDisponible = filaIni + 2;
            int filaEnlace = filaIni + 3;



            #region encabezado

            ws.Cells[filaTitulo, colIni].Value = reporteC1 != null ? reporteC1.Cbrepnombre.ToUpper().Trim() : "COSTO VARIABLE COMBUSTIBLE (CVC)";
            ws.Cells[filaMes, colIni].Value = EPDate.f_NombreMes(mesDeVigencia.Month) + " " + mesDeVigencia.Year;
            ws.Cells[filaDisponible, colIni].Value = "Disponible en el siguiente enlace del portal web COES:";

            //linkeado
            string valor = "https://www.coes.org.pe/Portal/Operacion/CaractSEIN/CostoVariables";
            ws.Cells[filaEnlace, colIni].Value = valor;

            Uri uriResult;
            bool result = Uri.TryCreate(valor, UriKind.Absolute, out uriResult)
                && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
            if (result)
            {
                ws.Cells[filaEnlace, colIni].Hyperlink = new Uri(valor);
            }


            ws.Row(filaTitulo).Height = 20;
            ws.Row(filaEnlace).Height = 25;
            ws.Column(colIni).Width = 65;

            UtilExcel.CeldasExcelEnNegrita(ws, filaTitulo, colIni, filaMes, colIni);

            #endregion


            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);
            ws.View.ZoomScale = 100;

            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
        }

        /// <summary>
        /// Convierte data del handson reporte en registros para ser guardados
        /// </summary>
        /// <param name="usuario"></param>
        /// <param name="datos"></param>
        /// <param name="notas"></param>
        /// <param name="nombReporte"></param>
        /// <param name="tipoReporte"></param>
        /// <param name="mesDeVigencia"></param>
        /// <param name="reporteTemp"></param>
        /// <returns></returns>
        public CbReporteDTO FormatearReporteAGuardar(string usuario, string[][] datos, string notas, string nombReporte, int tipoReporte, DateTime mesDeVigencia, CbReporteDTO reporteTemp)
        {
            CbReporteDTO resultado = new CbReporteDTO();
            int NumFilasDatos = datos.GetLength(0);
            int numColumnasDatos = 0;

            //Llenamos datos del reporte
            CbReporteDTO reporteAGuardar = new CbReporteDTO();
            //reporteAGuardar.Cbrepcodi { get; set; }
            reporteAGuardar.Cbrepmesvigencia = mesDeVigencia;
            reporteAGuardar.Cbrepversion = reporteTemp.Cbrepversion + 1;
            reporteAGuardar.Cbrepnombre = nombReporte;
            reporteAGuardar.Cbrepusucreacion = reporteTemp.Cbrepusucreacion;
            reporteAGuardar.Cbrepfeccreacion = reporteTemp.Cbrepfeccreacion;
            reporteAGuardar.Cbrepusumodificacion = usuario;
            reporteAGuardar.Cbrepfecmodificacion = DateTime.Now;
            reporteAGuardar.Cbreptipo = tipoReporte;

            //para el Cuadro 4 no tomaremos en cuento lo siguiente (xq no usa notas, cabeceras ni centrales)
            if (tipoReporte != ConstantesCombustibles.TipoReporteCVCVC)
            {

                //Llenamos datos de las notas
                List<string> lstNotas = notas.Split('@').ToList();
                List<CbNotaDTO> listRegNotas = new List<CbNotaDTO>();

                int numNota = getIdNotaDisponible();
                foreach (var nota in lstNotas)
                {
                    CbNotaDTO notaX = new CbNotaDTO();
                    notaX.Cbnotacodi = numNota;
                    //notaX.Cbrepcodi { get; set; }
                    //notaX.Cbnotaitem { get; set; }
                    notaX.Cbnotadescripcion = nota;
                    listRegNotas.Add(notaX);
                    numNota++;
                }
                reporteAGuardar.ListaNotas = listRegNotas;


                //Llenamos las cabeceras
                List<CbRepCabeceraDTO> lstRepCabecera = new List<CbRepCabeceraDTO>();
                int numCab = getIdRepCabeceraDisponible();
                switch (tipoReporte)
                {
                    case ConstantesCombustibles.TipoReporteCVCuadro1:
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_1_CentralTermoeléctrica, 0, 0, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_1_TituloPrecioUnitario, 0, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_1_PUSuministro, 1, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_1_PUTransporte, 1, 2, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_1_PUDistribución, 1, 3, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_1_UnidadPUSuministro, 2, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_1_UnidadPUTransporte, 2, 2, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_1_UnidadPUDistribución, 2, 3, datos, numCab++));
                        numColumnasDatos = 5; //4 + 1 (la ultima con los cbcentcodis)
                        break;

                    case ConstantesCombustibles.TipoReporteCVCuadro2:

                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_CentralTermoeléctrica, 0, 0, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_TituloPCS, 0, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_TituloPCI, 0, 4, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_PCSSuministro, 1, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_PCSTransporte, 1, 2, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_PCSDistribución, 1, 3, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución, 1, 4, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_UnidadPCSSuministro, 2, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_UnidadPCSTransporte, 2, 2, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_UnidadPCSDistribución, 2, 3, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_2_UnidadPCISuministroTransporteDistribución, 2, 4, datos, numCab++));
                        numColumnasDatos = 6; //5 + 1 (la ultima con los cbcentcodis)

                        break;

                    case ConstantesCombustibles.TipoReporteCVCuadro3:

                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_CentralTermoeléctrica, 0, 0, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_TituloPrecioUnitario, 0, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_PUSuministro, 1, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_PUTransporte, 1, 2, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_PUDistribución, 1, 3, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_TituloCostoCombustible, 0, 4, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_UnidadPUSuministro, 2, 1, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_UnidadPUTransporte, 2, 2, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_UnidadPUDistribución, 2, 3, datos, numCab++));
                        lstRepCabecera.Add(GenerarRegistroRepCabecera(ConstantesCombustibles.Cuadro_3_UnidadCostoCombustible, 2, 4, datos, numCab++));
                        numColumnasDatos = 6; //5 + 1 (la ultima con los cbcentcodis)

                        break;


                }
                reporteAGuardar.ListaCabeceras = lstRepCabecera;


                //Llenamos centrales
                List<CbReporteCentralDTO> lstReporteCentral = new List<CbReporteCentralDTO>();
                int idCentral = getIdReporteCentralDisponible();
                int idRepDetalle = getIdReporteDetalleDisponible();
                for (int fila = 3; fila < NumFilasDatos; fila++)
                {
                    CbReporteCentralDTO regCentral = new CbReporteCentralDTO();
                    regCentral.Cbrcencodi = idCentral;
                    regCentral.Cbrcenorden = fila - 2;
                    //regCentral.Cbrepcodi { get; set; }
                    string miCentcodi = datos[fila][numColumnasDatos - 1];
                    regCentral.Cbcentcodi = miCentcodi != null ? miCentcodi != "" ? Convert.ToInt32(miCentcodi) : 0 : 0;
                    regCentral.Cbrcennombre = datos[fila][0];

                    //para colorear los de incumplimiento
                    if (tipoReporte == ConstantesCombustibles.TipoReporteCVCuadro3)
                    {
                        string tipoX = datos[fila][6];
                        regCentral.Cbrcencoloreado = tipoX.Trim() == ConstantesCombustibles.TipoIncumplimiento.ToString() ? 1 : 0;

                    }

                    //seteamos campo CBRCENORIGEN (1:Del calculo, 2:De asignacion, 3:Copiado mes pasado)
                    switch (tipoReporte)
                    {
                        case ConstantesCombustibles.TipoReporteCVCuadro1:
                        case ConstantesCombustibles.TipoReporteCVCuadro2:
                            regCentral.Cbrcenorigen = ConstantesCombustibles.OrigenCRCalculo;
                            break;

                        case ConstantesCombustibles.TipoReporteCVCuadro3:
                            string tipoX1 = datos[fila][6];

                            string tipoExistente = ConstantesCombustibles.TipoExistente.ToString();
                            string tipoAsignado = ConstantesCombustibles.TipoAsignado.ToString();
                            string tipoIncumplimiento = ConstantesCombustibles.TipoIncumplimiento.ToString();

                            if (tipoX1.Trim() == ConstantesCombustibles.TipoExistente.ToString())
                                regCentral.Cbrcenorigen = ConstantesCombustibles.OrigenCRCalculo;

                            if (tipoX1.Trim() == ConstantesCombustibles.TipoAsignado.ToString())
                                regCentral.Cbrcenorigen = ConstantesCombustibles.OrigenCRAsignacion;

                            if (tipoX1.Trim() == ConstantesCombustibles.TipoIncumplimiento.ToString())
                                regCentral.Cbrcenorigen = ConstantesCombustibles.OrigenCRCopiado;

                            break;
                    }

                    idCentral++;

                    //Llenamos los detalles de la central
                    List<CbReporteDetalleDTO> lstDetalles = new List<CbReporteDetalleDTO>();

                    switch (tipoReporte)
                    {
                        case ConstantesCombustibles.TipoReporteCVCuadro1:

                            //para cada precio unitario
                            for (int pu = 1; pu <= 3; pu++)
                            {
                                CbReporteDetalleDTO objRepDetalle = new CbReporteDetalleDTO();

                                int miCcombcodi = -1;
                                if (pu == 1) miCcombcodi = ConstantesCombustibles.Concepcodi51PUSuministro;
                                if (pu == 2) miCcombcodi = ConstantesCombustibles.Concepcodi52PUTransporte;
                                if (pu == 3) miCcombcodi = ConstantesCombustibles.Concepcodi53PUDistribucion;

                                objRepDetalle.Cbrepdcodi = idRepDetalle;
                                idRepDetalle++;
                                objRepDetalle.Cbrcencodi = regCentral.Cbrcencodi;
                                objRepDetalle.Ccombcodi = miCcombcodi;
                                objRepDetalle.Cbrepdvalor = datos[fila][pu];
                                bool isNumerico = decimal.TryParse(datos[fila][pu], out decimal numericValue);
                                if (isNumerico)
                                    objRepDetalle.Cbrepvalordecimal = numericValue;

                                lstDetalles.Add(objRepDetalle);

                            }
                            break;

                        case ConstantesCombustibles.TipoReporteCVCuadro2:

                            //para cada columna
                            for (int pu = 1; pu <= 4; pu++)
                            {
                                CbReporteDetalleDTO objRepDetalle = new CbReporteDetalleDTO();

                                int miCcombcodi = -1;
                                if (pu == 1) miCcombcodi = ConstantesCombustibles.Concepcodi15PCSSuministro;
                                if (pu == 2) miCcombcodi = ConstantesCombustibles.Concepcodi16PCSTransporte;
                                if (pu == 3) miCcombcodi = ConstantesCombustibles.Concepcodi17PCSDistribucion;
                                if (pu == 4) miCcombcodi = ConstantesCombustibles.ConceptocodiPCI;

                                objRepDetalle.Cbrepdcodi = idRepDetalle;
                                idRepDetalle++;
                                objRepDetalle.Cbrcencodi = regCentral.Cbrcencodi;
                                objRepDetalle.Ccombcodi = miCcombcodi;
                                objRepDetalle.Cbrepdvalor = datos[fila][pu];
                                bool isNumerico = decimal.TryParse(datos[fila][pu], out decimal numericValue);
                                if (isNumerico)
                                    objRepDetalle.Cbrepvalordecimal = numericValue;

                                lstDetalles.Add(objRepDetalle);

                            }
                            break;

                        case ConstantesCombustibles.TipoReporteCVCuadro3:

                            //para cada columna
                            for (int pu = 1; pu <= 4; pu++)
                            {
                                CbReporteDetalleDTO objRepDetalle = new CbReporteDetalleDTO();

                                int miCcombcodi = -1;
                                if (pu == 1) miCcombcodi = ConstantesCombustibles.Concepcodi51PUSuministro;
                                if (pu == 2) miCcombcodi = ConstantesCombustibles.Concepcodi52PUTransporte;
                                if (pu == 3) miCcombcodi = ConstantesCombustibles.Concepcodi53PUDistribucion;
                                if (pu == 4) miCcombcodi = ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso;

                                objRepDetalle.Cbrepdcodi = idRepDetalle;
                                idRepDetalle++;
                                objRepDetalle.Cbrcencodi = regCentral.Cbrcencodi;
                                objRepDetalle.Ccombcodi = miCcombcodi;
                                objRepDetalle.Cbrepdvalor = datos[fila][pu];
                                bool isNumerico = decimal.TryParse(datos[fila][pu], out decimal numericValue);
                                if (isNumerico)
                                    objRepDetalle.Cbrepvalordecimal = numericValue;

                                lstDetalles.Add(objRepDetalle);

                            }
                            break;
                    }

                    regCentral.ListaDetalles = lstDetalles;

                    lstReporteCentral.Add(regCentral);
                }
                reporteAGuardar.ListaCentrales = lstReporteCentral;
            }
            else
            {
                reporteAGuardar.ListaNotas = new List<CbNotaDTO>();
                reporteAGuardar.ListaCabeceras = new List<CbRepCabeceraDTO>();
                reporteAGuardar.ListaCentrales = new List<CbReporteCentralDTO>();
            }

            resultado = reporteAGuardar;


            return resultado;
        }

        /// <summary>
        /// Devuelve un objeto de RepCabecera
        /// </summary>
        /// <param name="cbrprocodi"></param>
        /// <param name="fila"></param>
        /// <param name="columna"></param>
        /// <param name="datos"></param>
        /// <returns></returns>
        public CbRepCabeceraDTO GenerarRegistroRepCabecera(int cbrprocodi, int fila, int columna, string[][] datos, int numCabecera)
        {
            CbRepCabeceraDTO objRepC = new CbRepCabeceraDTO();
            objRepC.Cbrcabcodi = numCabecera;
            objRepC.Cbrprocodi = cbrprocodi;
            objRepC.Cbrcabdescripcion = datos[fila][columna];

            return objRepC;
        }

        /// <summary>
        /// Devuelve el html del popup historial de cambios
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="mesDeVigencia"></param>
        /// <returns></returns>
        public string ObtenerHtmlHistorial(string url, int tipoReporte, DateTime mesDeVigencia)
        {


            List<CbReporteDTO> lstReportesGuardadosYOrdenado = ObtenerReportesPorReporteYMesVigencia(tipoReporte, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));

            string colorFondo = "";
            var colorEsFinal = "#C6E0B4";
            var colorNoFinal = "##F2F5F7";

            StringBuilder str = new StringBuilder();
            str.Append("<table width='540px' class='pretty tabla-adicional' id='tablaHistorial' border='0' cellspacing='0' >");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 80px;'>Acciones</th>");
            str.Append("<th style='width: 80px;'>Versión</th>");
            str.Append("<th style='width: 80px;'>N° Código Reporte</th>");
            str.Append("<th style='width: 200px;'>Usuario creación</th>");
            str.Append("<th style='width: 250px;'>Fecha creación</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var reg in lstReportesGuardadosYOrdenado)
            {

                str.AppendFormat("<tr>");
                //Acciones
                str.AppendFormat("<td style='width: 80px;'>");
                str.AppendFormat("<a class='' href='JavaScript:verReporteCVPorVersion(" + reg.Cbrepcodi + ");' style='margin-right: 4px;'><img style='margin-left: 30px; margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='" + url + "Content/Images/btn-open.png' alt='Ver versión' title='Ver versión' /></a>");
                str.Append("</td>");

                //Versión
                str.AppendFormat("<td class='' style='width: 80px; text-align: center;'>{0}</td>", reg.Cbrepversion);

                //Codigo Reporte
                str.AppendFormat("<td class='' style='width: 80px; text-align: center;'>{0}</td>", reg.Cbrepcodi);

                //Usuario creacion
                str.AppendFormat("<td class='' style='width: 200px; text-align: center;'>{0}</td>", reg.Cbrepusumodificacion);

                //Fecha Creacion
                str.AppendFormat("<td class='' style='width: 250px; text-align: center;'>{0}</td>", reg.CbrepfecmodificacionDesc);

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Devuelve listado de centrales de carga BD
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <returns></returns>
        public List<CbReporteCentralDTO> ObtenerCentralesCargaBD(DateTime mesDeVigencia)
        {
            List<CbReporteCentralDTO> lstSalida = new List<CbReporteCentralDTO>();

            CbReporteDTO reporteC2 = new CbReporteDTO();
            CbReporteDTO reporteC3 = new CbReporteDTO();
            List<CbReporteCentralDTO> lstCentralesC2 = new List<CbReporteCentralDTO>();
            List<CbReporteCentralDTO> lstCentralesC3 = new List<CbReporteCentralDTO>();
            List<int> lstCentralesCodisC2 = new List<int>();
            List<int> lstCentralesCodisC3 = new List<int>();
            List<int> lstCentralesCodisTotales = new List<int>();

            //obtenemos centrales del cuadro 2 para el mes de vigencia
            List<CbReporteDTO> lstReportesC2Ordenado = ObtenerReportesPorReporteYMesVigencia(ConstantesCombustibles.TipoReporteCVCuadro2, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));

            //si existen guardados, uso el ultimo
            if (lstReportesC2Ordenado.Any())
            {
                reporteC2 = lstReportesC2Ordenado.First();

                CompletarDatosReporte(reporteC2, ConstantesCombustibles.TipoReporteCVCuadro2, out string notasX2);
                lstCentralesC2 = reporteC2.ListaCentrales;
                lstCentralesCodisC2 = lstCentralesC2.Select(x => x.Cbcentcodi).ToList();
            }

            //obtenemos centrales del cuadro 3 para el mes de vigencia
            List<CbReporteDTO> lstReportesC3Ordenado = ObtenerReportesPorReporteYMesVigencia(ConstantesCombustibles.TipoReporteCVCuadro3, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha));

            //si existen guardados, uso el ultimo
            if (lstReportesC3Ordenado.Any())
            {
                reporteC3 = lstReportesC3Ordenado.First();
                CompletarDatosReporte(reporteC3, ConstantesCombustibles.TipoReporteCVCuadro3, out string notasX3);
                lstCentralesC3 = reporteC3.ListaCentrales;
                lstCentralesCodisC3 = lstCentralesC3.Select(x => x.Cbcentcodi).ToList();
            }

            lstCentralesCodisTotales.AddRange(lstCentralesCodisC2);
            lstCentralesCodisTotales.AddRange(lstCentralesCodisC3);
            lstCentralesCodisTotales = lstCentralesCodisTotales.Distinct().ToList();
            string strCentralesCodis = string.Join(",", lstCentralesCodisTotales.Select(x => x));

            List<CbEnvioCentralDTO> lstNombCentrales = new List<CbEnvioCentralDTO>();

            if (strCentralesCodis != "")
            {
                lstNombCentrales = FactorySic.GetCbEnvioCentralRepository().ListarPorIds(strCentralesCodis);
            }

            List<CbReporteCentralDTO> lstCentrales = new List<CbReporteCentralDTO>();

            //Para cada central, creamos un registro
            foreach (int cbcentcodi in lstCentralesCodisTotales)
            {
                CbReporteCentralDTO central = new CbReporteCentralDTO();
                List<CbReporteDetalleDTO> lstDetalles = new List<CbReporteDetalleDTO>();
                CbReporteCentralDTO Cnt2 = lstCentralesC2.Find(x => x.Cbcentcodi == cbcentcodi);
                CbReporteCentralDTO Cnt3 = lstCentralesC3.Find(x => x.Cbcentcodi == cbcentcodi);

                central.Cbcentcodi = cbcentcodi;
                central.Cbrcennombre = lstNombCentrales.Find(x => x.Cbcentcodi == cbcentcodi).Equinomb;

                CbReporteDetalleDTO detallePCI = new CbReporteDetalleDTO();
                detallePCI.Ccombcodi = ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución; // No utilizo "ConstantesCombustibles.ConceptocodiPCI" xq tiene mismo valor que CCombcodiCostoCombustibleGaseoso; habria confusion                
                detallePCI.Cbrepdvalor = Cnt2 != null ? Cnt2.ListaDetalles.Find(x => x.Ccombcodi == ConstantesCombustibles.ConceptocodiPCI).Cbrepdvalor : "";


                lstDetalles.Add(detallePCI);

                CbReporteDetalleDTO detalleCC = new CbReporteDetalleDTO();
                detalleCC.Ccombcodi = ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso;
                detalleCC.Cbrepdvalor = Cnt3 != null ? Cnt3.ListaDetalles.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso).Cbrepdvalor : "";

                lstDetalles.Add(detalleCC);

                central.ListaDetalles = lstDetalles;

                lstCentrales.Add(central);
            }
            lstSalida = lstCentrales;

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el html de la tabla de centrales de carga a BD
        /// </summary>
        /// <param name="lstCentralesCargaBD"></param>
        /// <returns></returns>
        public string ObtenerHtmlCentralesCargaBD(List<CbReporteCentralDTO> lstCentralesCargaBD)
        {

            StringBuilder str = new StringBuilder();
            str.Append("<table  class='pretty tabla-adicional' border='0' cellspacing='0' id='tablaCargaBD'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 80px;' rowspan = '3' ></th>");
            str.Append("<th style='width: 80px;' rowspan = '3' >Central Termoeléctrica</th>");
            str.Append("<th style='width: 200px;'>PCI</th>");
            str.Append("<th style='width: 100px;' rowspan = '2' >Costo de Combustible</th>");
            str.Append("</tr>");

            str.Append("<tr>");
            str.Append("<th style='width: 80px;'  >Suministro, Transporte y Distribución</th>");
            str.Append("</tr>");

            str.Append("<tr>");
            str.Append("<th style='width: 80px;' >KJ/m3</th>");
            str.Append("<th style='width: 100px;' >USD/GJ</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var reg in lstCentralesCargaBD)
            {

                str.AppendFormat("<tr>");

                str.AppendFormat("<td class='' style='width: 80px; text-align: center;'> <input type='checkbox' class='tableid' name='ckbCentral' id='ckb_{0}' value = '{0}' checked> </td>", reg.Cbcentcodi);
                str.AppendFormat("<td class='' style='width: 80px; text-align: center;'>{0}</td>", reg.Cbrcennombre);
                str.AppendFormat("<td class='' style='width: 200px; text-align: center;'>{0}</td>", reg.ListaDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución).Cbrepdvalor);
                str.AppendFormat("<td class='' style='width: 100px; text-align: center;'>{0}</td>", reg.ListaDetalles.Find(X => X.Ccombcodi == ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso).Cbrepdvalor);

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Guardar en BD la informacion
        /// </summary>
        /// <param name="mesDeVigencia"></param>
        /// <param name="usuario"></param>
        /// <param name="listaRepcodis"></param>
        /// <param name="lstCentrales"></param>
        public void CargarABaseDatos(DateTime mesDeVigencia, string usuario, List<int> listaRepcodis, List<int> lstCentrales)
        {
            //Guardo en la BD
            List<GrupoDato> lstDatosGuardar = new List<GrupoDato>();
            List<PrGrupodatDTO> listaDat = new List<PrGrupodatDTO>();

            if (lstCentrales != null)
            {
                if (lstCentrales.Any())
                {
                    //obtenemos datos de las centrales
                    string strCentralesCodis = string.Join(",", lstCentrales.Select(x => x));
                    List<CbEnvioCentralDTO> lstDatoCentrales = FactorySic.GetCbEnvioCentralRepository().ListarPorIds(strCentralesCodis);

                    //valido la existencia de informacion 
                    List<string> lstCentralesYaCargadas = new List<string>();
                    foreach (var central in lstDatoCentrales)
                    {
                        PrGrupodatDTO gdCC = GetByIdPrGrupodat(mesDeVigencia, ConstantesCombustibles.ConceptocodiCostoCombustible, central.Grupocodi, 0);
                        PrGrupodatDTO gdPCI = GetByIdPrGrupodat(mesDeVigencia, ConstantesCombustibles.ConceptocodiPCI_CCGas, central.Grupocodi, 0);

                        if (gdCC != null || gdPCI != null)
                        {
                            lstCentralesYaCargadas.Add(central.Equinomb.Trim());
                        }
                    }

                    if (lstCentralesYaCargadas.Any())
                    {
                        throw new ArgumentException("La(s) siguiente(s) central(es) ya tiene(n) informacion cargada para el mes de vigencia (" + EPDate.f_NombreMes(mesDeVigencia.Month) + " " + mesDeVigencia.Year + "):<br>" +
                            string.Join(", ", lstCentralesYaCargadas.Select(x => x)));
                    }


                    //Obtengo la informacion de  todas las centrales 
                    List<CbReporteCentralDTO> lstCentralesCargaBD = ObtenerCentralesCargaBD(mesDeVigencia);



                    lstDatosGuardar = ObtenerGrupoDatosACargarBD(lstCentralesCargaBD, listaRepcodis, lstCentrales, lstDatoCentrales);

                    foreach (var dato in lstDatosGuardar)
                    {
                        listaDat.Add(new PrGrupodatDTO()
                        {
                            Formuladat = dato.Valor,
                            Fechadat = mesDeVigencia,
                            Grupocodi = dato.Grupocodi,
                            Concepcodi = dato.Conceptocodi,
                            Lastuser = usuario,
                            Fechaact = DateTime.Now,
                            Deleted = 0
                        });
                    }

                    IDbConnection conn = null;
                    DbTransaction tran = null;

                    try
                    {
                        conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                        tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);
                        //Guardo Costo Combustible y PCI
                        if (listaDat.Any())
                        {
                            foreach (var regDat in listaDat)
                            {
                                FactorySic.GetPrGrupodatRepository().SaveTransaccional(regDat, conn, tran);
                            }
                        }
                        //guardar definitivamente
                        tran.Commit();
                    }
                    catch (Exception ex)
                    {
                        if (tran != null)
                            tran.Rollback();
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        throw;
                    }
                    finally
                    {
                        if (conn != null)
                            if (conn.State == ConnectionState.Open) conn.Close();
                    }
                }
            }

            //Guardo Costos variables
            foreach (var item in listaRepcodis)
            {
                var oRepCv = _appDespacho.GetByIdPrRepcv(item);
                var lsCostosVariables = new List<PrCvariablesDTO>();
                _appDespacho.GenerarCostosVariables(oRepCv, ref lsCostosVariables, true);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PR_GRUPODAT
        /// </summary>
        public PrGrupodatDTO GetByIdPrGrupodat(DateTime fechadat, int concepcodi, int grupocodi, int deleted)
        {
            return FactorySic.GetPrGrupodatRepository().GetById(fechadat, concepcodi, grupocodi, deleted);
        }

        /// <summary>
        /// Obteniene la informacion a guardar
        /// </summary>
        /// <param name="lstCentralesCargaBD"></param>
        /// <param name="listaRepcodis"></param>
        /// <param name="lstCentrales"></param>
        /// <param name="lstDatoCentrales"></param>
        /// <returns></returns>
        public List<GrupoDato> ObtenerGrupoDatosACargarBD(List<CbReporteCentralDTO> lstCentralesCargaBD, List<int> listaRepcodis, List<int> lstCentrales, List<CbEnvioCentralDTO> lstDatoCentrales)
        {
            List<GrupoDato> lstSalida = new List<GrupoDato>();

            foreach (var miCbcentcodi in lstCentrales)
            {
                CbReporteCentralDTO datoCentral = lstCentralesCargaBD.Find(x => x.Cbcentcodi == miCbcentcodi);
                CbEnvioCentralDTO infoCentral = lstDatoCentrales.Find(x => x.Cbcentcodi == miCbcentcodi);

                string valPCI = datoCentral != null ? datoCentral.ListaDetalles.Find(x => x.Ccombcodi == ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución).Cbrepdvalor : "";
                string valCC = datoCentral != null ? datoCentral.ListaDetalles.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso).Cbrepdvalor : "";

                //comprobamos si son numericos
                bool isNumericPCI = decimal.TryParse(valPCI, out decimal vPCI);
                bool isNumericCC = decimal.TryParse(valCC, out decimal vCC);


                string formatoNumero = "{0:0.0000}";
                int numDecimal = 4;


                if (isNumericCC)
                {
                    string formulaDatCC = string.Format(formatoNumero, Math.Round(vCC, numDecimal));
                    string strDatoCC = formulaDatCC + "*" + ConstantesCombustibles.FormuladatTcambio;

                    GrupoDato gdatoCC = new GrupoDato();
                    gdatoCC.Valor = strDatoCC;
                    gdatoCC.Cbcentcodi = miCbcentcodi;
                    gdatoCC.Grupocodi = infoCentral.Grupocodi;
                    gdatoCC.Conceptocodi = ConstantesCombustibles.ConceptocodiCostoCombustible;
                    gdatoCC.CComcodiTemporal = ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso;

                    lstSalida.Add(gdatoCC);
                }

                if (isNumericPCI)
                {
                    string formulaDatPCI = string.Format(formatoNumero, Math.Round(vPCI, numDecimal));
                    string strDatoPCI = formulaDatPCI;

                    GrupoDato gdatoPCI = new GrupoDato();
                    gdatoPCI.Valor = strDatoPCI;
                    gdatoPCI.Cbcentcodi = miCbcentcodi;
                    gdatoPCI.Grupocodi = infoCentral.Grupocodi;
                    gdatoPCI.Conceptocodi = ConstantesCombustibles.ConceptocodiPCI_CCGas;
                    gdatoPCI.CComcodiTemporal = ConstantesCombustibles.Cuadro_2_PCISuministroTransporteDistribución;

                    lstSalida.Add(gdatoPCI);
                }
            }


            return lstSalida;
        }

        #endregion

        #region Reporte de Cumplimiento

        /// <summary>
        /// Devuelve el listado de log del reporte de cumplimiento
        /// </summary>
        /// <param name="empresas"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<CumplimientoEmpresa> ObtenerListadoLogEnviosGaseosos(string empresas, DateTime fechaInicio, DateTime fechaFin)
        {
            List<CumplimientoEmpresa> lstSalida = new List<CumplimientoEmpresa>();

            string fecIni = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
            string fecFin = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
            List<CbLogenvioDTO> listadoInicial = FactorySic.GetCbLogenvioRepository().ListarLogGaseosoPorEmpresaYRango(empresas, fecIni, fecFin);

            if (listadoInicial.Any())
            {
                string strEnvioscodi = string.Join(",", listadoInicial.Select(x => x.Cbenvcodi));
                List<CbEnvioDTO> lstDatosEnvio = FactorySic.GetCbEnvioRepository().ObtenerInformacionEnviosReporteCumplimiento(strEnvioscodi);

                var listaPorEmpresa = lstDatosEnvio.GroupBy(x => new { x.Cbenvcodi }).ToList();

                List<CumplimientoEmpresa> listaEmpresasReporteCumplimiento = new List<CumplimientoEmpresa>();
                foreach (var item in listaPorEmpresa)
                {
                    int idEnvio = item.Key.Cbenvcodi;
                    List<CbEnvioDTO> lstPorEmpr = lstDatosEnvio.Where(m => m.Cbenvcodi == idEnvio).ToList();
                    CbEnvioDTO objPorEmpresa = lstPorEmpr.First();

                    CumplimientoEmpresa objCE = new CumplimientoEmpresa();
                    objCE.Emprcodi = objPorEmpresa.Emprcodi;
                    objCE.Empresa = objPorEmpresa.Emprnomb;
                    objCE.Central = string.Join("<br>", lstPorEmpr.Select(x => x.Equinomb));
                    objCE.TipoCentral = objPorEmpresa.Cbenvtipocentral == "E" ? "Existente" : (objPorEmpresa.Cbenvtipocentral == "N" ? "Nueva" : "");
                    objCE.TipoCombustible = objPorEmpresa.Estcomcodi == ConstantesCombustibles.EstcomcodiGas ? "Gaseoso" : "";
                    objCE.MesVigencia = EPDate.f_NombreMes(objPorEmpresa.Cbenvfechaperiodo.Value.Month) + " " + objPorEmpresa.Cbenvfechaperiodo.Value.Year;
                    objCE.IDEnvio = idEnvio;
                    objCE.Cbenvfechaperiodo = objPorEmpresa.Cbenvfechaperiodo.Value;

                    List<CbLogenvioDTO> lstAcciones = listadoInicial.Where(g => g.Cbenvcodi == idEnvio).OrderBy(g => g.Logenvcodi).ToList();

                    List<CumplimientoAccion> lstAcc = new List<CumplimientoAccion>();

                    string acn = "";
                    bool yaHuboObservacion = false;
                    foreach (var accion in lstAcciones)
                    {
                        CumplimientoAccion obAcc = new CumplimientoAccion();

                        //campo accion                        
                        switch (accion.Estenvcodi)
                        {
                            case ConstantesCombustibles.EstadoSolicitud: acn = "Solicitud"; break; //1
                            case ConstantesCombustibles.EstadoAprobado: acn = "Aprobación"; break; //3
                            case ConstantesCombustibles.EstadoDesaprobado: acn = "Desaprobación"; break;  //4
                            case ConstantesCombustibles.EstadoObservado: if (yaHuboObservacion) acn = "Ampliación de Plazo"; else acn = "Observación"; break; //6
                            case ConstantesCombustibles.EstadoSubsanacionObs: acn = "Subsanación de Observaciones"; break; //7
                            case ConstantesCombustibles.EstadoCancelado: acn = "Cancelación"; break; //8
                            case ConstantesCombustibles.EstadoNotificado: acn = "Notificación"; break; //9
                            case ConstantesCombustibles.EstadoAprobadoParcialmente: acn = "Aprobación Parcialmente"; break; //10
                            case ConstantesCombustibles.EstadoSolicitudAsignacion: acn = "Solicitud de asignación"; break; //11
                            case ConstantesCombustibles.EstadoAsignado: acn = "Asignación"; break; //12
                        }
                        if (accion.Estenvcodi == ConstantesCombustibles.EstadoObservado) yaHuboObservacion = true;

                        //campo usuario
                        string user = accion.Logenvusucreacion;
                        string usuario = user.Contains("@") ? "Generador" : (user.Contains("SISTEMA") ? "Sistema" : "COES");

                        obAcc.Accion = acn;
                        obAcc.Descripcion = accion.Logenvobservacion != null ? accion.Logenvobservacion : "";
                        obAcc.Usuario = usuario;
                        obAcc.FechaHora = accion.Logenvfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull);
                        obAcc.Condicion = accion.Logenvplazo != null ? ((accion.Logenvplazo == 1) ? "En Plazo" : (accion.Logenvplazo == 0 ? "Fuera Plazo" : "")) : "";

                        lstAcc.Add(obAcc);
                    }
                    objCE.ListaAcciones = lstAcc;

                    listaEmpresasReporteCumplimiento.Add(objCE);
                }

                lstSalida = listaEmpresasReporteCumplimiento.OrderByDescending(x => x.Cbenvfechaperiodo).ThenBy(x => x.Empresa).ThenBy(x => x.Central).ThenBy(x => x.TipoCentral).ToList();

            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el html del reporte de cumplimiento
        /// </summary>
        /// <param name="listadoLogEnvios"></param>
        /// <returns></returns>
        public string GenerarHtmlLogEnvios(List<CumplimientoEmpresa> listadoLogEnvios)
        {
            string colorFondo = "";
            var colorEsFinal = "#C6E0B4";
            var colorNoFinal = "##F2F5F7";

            StringBuilder str = new StringBuilder();
            str.Append("<table  class='pretty ' id='tablaReporteCumplimiento' >");
            str.Append("<thead>");

            #region cabecera
            str.Append("<tr style = 'height: 40px;'>");
            str.Append("<th style='white-space: break-spaces; width: 150px;'>Empresa</th>");
            str.Append("<th style='white-space: break-spaces; width: 200px;'>Central Termoeléctrica</th>");
            str.Append("<th style='white-space: break-spaces; width: 50px;'>Tipo Central</th>");
            str.Append("<th style='white-space: break-spaces; width: 80px;'>Tipo de Combustible</th>");
            str.Append("<th style='white-space: break-spaces; width: 70px;'>Mes-Año</th>");
            str.Append("<th style='white-space: break-spaces; width: 60px;'>Código de Envío</th>");
            str.Append("<th style='white-space: break-spaces; width: 180px;'>Acción</th>");
            str.Append("<th style='white-space: break-spaces; width: 300px;'>Descripción</th>");
            str.Append("<th style='white-space: break-spaces; width: 80px;'>Usuario</th>");
            str.Append("<th style='white-space: break-spaces; width: 110px;'>Fecha y Hora</th>");
            str.Append("<th style='white-space: break-spaces; width: 60px;'>Condición</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var regEnvio in listadoLogEnvios)
            {
                int numAcciones = regEnvio.ListaAcciones.Count;
                int n = 0;
                foreach (var item in regEnvio.ListaAcciones)
                {
                    n++;

                    str.AppendFormat("<tr style = 'height: 25px;'>");
                    if (n == 1)
                    {
                        str.AppendFormat("<td class='' style='width: 150px; text-align: center; vertical-align: middle; border: 1px solid #DDDDDD;' rowspan={0}  >{1}</td>", numAcciones, regEnvio.Empresa);
                        str.AppendFormat("<td class='' style='width: 200px; text-align: center; vertical-align: middle; border: 1px solid #DDDDDD;' rowspan={0}  >{1}</td>", numAcciones, regEnvio.Central);
                        str.AppendFormat("<td class='' style='width:  50px; text-align: center; vertical-align: middle; border: 1px solid #DDDDDD;' rowspan={0}  >{1}</td>", numAcciones, regEnvio.TipoCentral);
                        str.AppendFormat("<td class='' style='width:  80px; text-align: center; vertical-align: middle; border: 1px solid #DDDDDD;' rowspan={0}  >{1}</td>", numAcciones, regEnvio.TipoCombustible);
                        str.AppendFormat("<td class='' style='width:  70px; text-align: center; vertical-align: middle; border: 1px solid #DDDDDD;' rowspan={0}  >{1}</td>", numAcciones, regEnvio.MesVigencia);
                        str.AppendFormat("<td class='' style='width:  60px; text-align: center; vertical-align: middle; border: 1px solid #DDDDDD;' rowspan={0}  >{1}</td>", numAcciones, regEnvio.IDEnvio);
                    }

                    str.AppendFormat("<td class='' style='width: 180px; text-align: left; vertical-align: middle; border: 1px solid #DDDDDD;'>{0}</td>", item.Accion);
                    str.AppendFormat("<td class='' style='width: 300px; text-align: left; vertical-align: middle; border: 1px solid #DDDDDD;'>{0}</td>", item.Descripcion);
                    str.AppendFormat("<td class='' style='width: 80px; text-align: left; vertical-align: middle; border: 1px solid #DDDDDD;'>{0}</td>", item.Usuario);
                    str.AppendFormat("<td class='' style='width: 110px; text-center: left; vertical-align: middle; border: 1px solid #DDDDDD;'>{0}</td>", item.FechaHora);
                    str.AppendFormat("<td class='' style='width: 60px; text-center: left; vertical-align: middle; border: 1px solid #DDDDDD;'>{0}</td>", item.Condicion);
                    str.Append("</tr>");
                }

            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Exporta el reporte de cumplimiento
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="ListadoLogEnvios"></param>
        /// <param name="empresas"></param>
        /// <param name="rangoIni"></param>
        /// <param name="rangoFin"></param>
        /// <returns></returns>
        public string ExportarReporteCumplimiento(string ruta, List<CumplimientoEmpresa> ListadoLogEnvios, string empresas, string rangoIni, string rangoFin)
        {
            List<SiEmpresaDTO> lstempresas = FactorySic.GetSiEmpresaRepository().ListGeneral();
            string nombre = "";
            if (empresas == "-1")
            {
                nombre = "rptCumplimiento_" + rangoIni + "_" + rangoFin + ".xlsx";
            }
            else
            {
                if (empresas.Contains(","))
                {
                    nombre = "rptCumplimiento_" + rangoIni + "_" + rangoFin + ".xlsx";
                }
                else
                {
                    SiEmpresaDTO emp = lstempresas.Find(x => x.Emprcodi == Convert.ToInt32(empresas));
                    nombre = "rptCumplimiento_" + emp.Emprnomb + "_" + rangoIni + "_" + rangoFin + ".xlsx";
                }
            }

            string rutaFile = ruta + nombre;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                //REPORTE1
                GenerarRC(xlPackage, ListadoLogEnvios, rangoIni, rangoFin);
                xlPackage.Save();

                xlPackage.Save();
            }


            return nombre;
        }

        /// <summary>
        /// Genera el excel del reporte de cumplimiento
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="ListadoLogEnvios"></param>
        /// <param name="rangoIni"></param>
        /// <param name="rangoFin"></param>
        private void GenerarRC(ExcelPackage xlPackage, List<CumplimientoEmpresa> ListadoLogEnvios, string rangoIni, string rangoFin)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("Listado");
            ws = xlPackage.Workbook.Worksheets["Listado"];

            int filaIni = 2;
            int colIni = 2;

            int filaReporte = filaIni;
            int filaRango = filaIni + 1;

            int filaTabla = filaIni + 3;
            int filaIniCabecera = filaTabla;

            int filaIniData = filaTabla + 1;

            int colEmpresa = colIni;
            int colCentral = colIni + 1;
            int colTipoCentral = colIni + 2;
            int colTipoCombustible = colIni + 3;
            int colMes = colIni + 4;
            int colId = colIni + 5;
            int colAccion = colIni + 6;
            int colDescripcion = colIni + 7;
            int colUsuario = colIni + 8;
            int colFecha = colIni + 9;
            int colCondicion = colIni + 10;

            #region encabezado
            ws.Cells[filaReporte, colEmpresa].Value = "REPORTE DE CUMPLIMIENTO";
            ws.Cells[filaRango, colEmpresa].Value = rangoFin != rangoIni ? rangoIni + " - " + rangoFin : rangoIni;

            ws.Row(filaReporte).Height = 20;
            UtilExcel.CeldasExcelEnNegrita(ws, filaReporte, colEmpresa, filaReporte, colEmpresa);
            UtilExcel.CeldasExcelEnNegrita(ws, filaRango, colEmpresa, filaRango, colEmpresa);
            UtilExcel.CeldasExcelColorTexto(ws, filaReporte, colEmpresa, filaReporte, colEmpresa, "#0924BD");
            UtilExcel.CeldasExcelColorFondo(ws, filaReporte, colEmpresa, filaReporte, colEmpresa, "#FFFFFF");
            UtilExcel.CeldasExcelAgrupar(ws, filaReporte, colEmpresa, filaReporte, colCondicion);
            UtilExcel.CeldasExcelAgrupar(ws, filaRango, colEmpresa, filaRango, colCondicion);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaReporte, colEmpresa, filaRango, colCondicion, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaReporte, colEmpresa, filaRango, colCondicion, "Centro");

            #endregion

            #region cabecera
            ws.Cells[filaIniCabecera, colEmpresa].Value = "Empresa";
            ws.Cells[filaIniCabecera, colCentral].Value = "Central Termoeléctrica";
            ws.Cells[filaIniCabecera, colTipoCentral].Value = "Tipo Central";
            ws.Cells[filaIniCabecera, colTipoCombustible].Value = "Tipo de Combustible";
            ws.Cells[filaIniCabecera, colMes].Value = "Mes-Año";
            ws.Cells[filaIniCabecera, colId].Value = "Código de Envío";
            ws.Cells[filaIniCabecera, colAccion].Value = "Acción";
            ws.Cells[filaIniCabecera, colDescripcion].Value = "Descripción";
            ws.Cells[filaIniCabecera, colUsuario].Value = "Usuario";
            ws.Cells[filaIniCabecera, colFecha].Value = "Fecha y Hora";
            ws.Cells[filaIniCabecera, colCondicion].Value = "Condición";


            ws.Row(filaIniCabecera).Height = 40;

            ws.Column(colEmpresa).Width = 32;
            ws.Column(colCentral).Width = 65;
            ws.Column(colTipoCentral).Width = 10;
            ws.Column(colTipoCombustible).Width = 15;
            ws.Column(colMes).Width = 15;
            ws.Column(colId).Width = 10;
            ws.Column(colAccion).Width = 30;
            ws.Column(colDescripcion).Width = 45;
            ws.Column(colUsuario).Width = 13;
            ws.Column(colFecha).Width = 17;
            ws.Column(colCondicion).Width = 15;

            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniCabecera, colEmpresa, filaIniCabecera, colCondicion, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniCabecera, colEmpresa, filaIniCabecera, colCondicion, "Centro");
            UtilExcel.CeldasExcelColorTexto(ws, filaIniCabecera, colEmpresa, filaIniCabecera, colCondicion, "#FFFFFF");
            UtilExcel.CeldasExcelColorFondo(ws, filaIniCabecera, colEmpresa, filaIniCabecera, colCondicion, "#0C76B8");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniCabecera, colEmpresa, filaIniCabecera, colCondicion, "Arial", 10);
            UtilExcel.BorderCeldas2(ws, filaIniCabecera, colEmpresa, filaIniCabecera, colCondicion);
            UtilExcel.CeldasExcelWrapText(ws, filaIniCabecera, colEmpresa, filaIniCabecera, colCondicion);
            #endregion

            #region Cuerpo

            foreach (var regEnvio in ListadoLogEnvios)
            {
                int numAcciones = regEnvio.ListaAcciones.Count;
                int n = 0;

                foreach (var item in regEnvio.ListaAcciones)
                {
                    n++;
                    if (n == 1)
                    {
                        ws.Cells[filaIniData, colEmpresa].Value = regEnvio.Empresa;
                        ws.Cells[filaIniData, colCentral].Value = regEnvio.Central.Replace("<br>", ", ");
                        ws.Cells[filaIniData, colTipoCentral].Value = regEnvio.TipoCentral;
                        ws.Cells[filaIniData, colTipoCombustible].Value = regEnvio.TipoCombustible;
                        ws.Cells[filaIniData, colMes].Value = regEnvio.MesVigencia;
                        ws.Cells[filaIniData, colId].Value = regEnvio.IDEnvio;
                    }

                    ws.Cells[filaIniData, colAccion].Value = item.Accion;
                    ws.Cells[filaIniData, colDescripcion].Value = item.Descripcion;
                    ws.Cells[filaIniData, colUsuario].Value = item.Usuario;
                    ws.Cells[filaIniData, colFecha].Value = item.FechaHora;
                    ws.Cells[filaIniData, colCondicion].Value = item.Condicion;

                    filaIniData++;
                }

                UtilExcel.CeldasExcelAgrupar(ws, filaIniData - numAcciones, colEmpresa, filaIniData - 1, colEmpresa);
                UtilExcel.CeldasExcelAgrupar(ws, filaIniData - numAcciones, colCentral, filaIniData - 1, colCentral);
                UtilExcel.CeldasExcelAgrupar(ws, filaIniData - numAcciones, colTipoCentral, filaIniData - 1, colTipoCentral);
                UtilExcel.CeldasExcelAgrupar(ws, filaIniData - numAcciones, colTipoCombustible, filaIniData - 1, colTipoCombustible);
                UtilExcel.CeldasExcelAgrupar(ws, filaIniData - numAcciones, colMes, filaIniData - 1, colMes);
                UtilExcel.CeldasExcelAgrupar(ws, filaIniData - numAcciones, colId, filaIniData - 1, colId);


            }

            if (ListadoLogEnvios.Any())
            {
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaTabla + 1, colEmpresa, filaIniData - 1, colCondicion, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaTabla + 1, colEmpresa, filaIniData - 1, colCondicion, "Centro");
                UtilExcel.BorderCeldas2(ws, filaTabla + 1, colEmpresa, filaIniData - 1, colCondicion);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaTabla + 1, colAccion, filaIniData - 1, colDescripcion, "Izquierda");
                UtilExcel.CeldasExcelWrapText(ws, filaTabla + 1, colEmpresa, filaIniData - 1, colCondicion);
            }
            #endregion


            //No mostrar lineas
            ws.View.ShowGridLines = false;

            ws.View.ZoomScale = 100;

        }


        /// <summary>
        /// Devuelve si la accion a realizar se ecuentra en plazo o no
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="ventanaEnUso"></param>
        /// <param name="esNuevoEnvio"></param>
        /// <param name="tipoCentral"></param>
        /// <param name="estadoIni"></param>
        /// <param name="estadoFin"></param>
        /// <returns></returns>
        private int ObtenerPlazo(CbEnvioDTO regEnvio, int ventanaEnUso, bool esNuevoEnvio, string tipoCentral, int? estadoIni, int estadoFin)
        {
            int plazo = -1;
            int idEnvio = regEnvio != null ? regEnvio.Cbenvcodi : 0;
            decimal diff;
            int diasParaSubsanar = 3;
            int diasParaObservar = 5;

            DateTime fechaActual = ObtenerFechaSistemaPR31(idEnvio);

            if (ventanaEnUso == (int)ConstantesCombustibles.Interfaz.Extranet)
            {
                if (esNuevoEnvio) //plazoEnvio = ObtenerPlazo(null, interfaz, true, tipoCentral, null, ConstantesCombustibles.EstadoSolicitud);
                {
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                    {
                        DateTime dia20 = new DateTime(fechaActual.Year, fechaActual.Month, 20, 23, 59, 59);
                        int res = DateTime.Compare(dia20, fechaActual);

                        if (res < 0)
                            plazo = 0; //Fuera de plazo
                        else
                            plazo = 1; //En plazo
                    }
                    else
                    {
                        if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        {
                            plazo = 1; //no existe restricciones
                        }
                    }
                }
                else //subsanacion
                {
                    if (tipoCentral == ConstantesCombustibles.CentralExistente)
                    {
                        if (estadoIni == ConstantesCombustibles.EstadoObservado && estadoFin == ConstantesCombustibles.EstadoSubsanacionObs) //subsanacion de obs en Existentes
                        {
                            diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecmodificacion.Value);
                            if (diff <= diasParaSubsanar)
                                plazo = 1; //en plazo
                            else
                                plazo = 0; //Fuera de plazo
                        }
                    }
                    else
                    {
                        if (tipoCentral == ConstantesCombustibles.CentralNueva)
                        {
                            if (estadoIni == ConstantesCombustibles.EstadoObservado && estadoFin == ConstantesCombustibles.EstadoSubsanacionObs) //subsanacion de obs en Nuevas
                            {
                                diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecmodificacion.Value);
                                if (diff <= diasParaSubsanar)
                                    plazo = 1; //en plazo
                                else
                                    plazo = 0; //Fuera de plazo
                            }
                        }
                    }
                }

            }
            else
            {
                if (ventanaEnUso == (int)ConstantesCombustibles.Interfaz.Intranet)
                {
                    if (esNuevoEnvio) //registro de solicitud desde intranet
                    {
                        if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        {
                            DateTime dia20 = new DateTime(fechaActual.Year, fechaActual.Month, 20, 23, 59, 59);
                            int res = DateTime.Compare(dia20, fechaActual);

                            if (res < 0)
                                plazo = 0; //Fuera de plazo
                            else
                                plazo = 1; //En plazo
                        }
                        else
                        {
                            if (tipoCentral == ConstantesCombustibles.CentralNueva)
                            {
                                plazo = 1; //no existe restricciones
                            }
                        }
                    }
                    else //subsanacion
                    {
                        if (tipoCentral == ConstantesCombustibles.CentralExistente)
                        {
                            //subsanacion de obs en Existentes
                            if (estadoIni == ConstantesCombustibles.EstadoObservado && estadoFin == ConstantesCombustibles.EstadoSubsanacionObs)
                            {
                                diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecmodificacion.Value);
                                if (diff <= diasParaSubsanar)
                                    plazo = 1; //en plazo
                                else
                                    plazo = 0; //Fuera de plazo
                            }

                            //Observacion desde intranet
                            if (estadoIni == ConstantesCombustibles.EstadoSolicitud && estadoFin == ConstantesCombustibles.EstadoObservado)
                            {
                                diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecsolicitud);
                                if (diff <= diasParaObservar)
                                    plazo = 1; //en plazo
                                else
                                    plazo = 0; //Fuera de plazo
                            }

                            //Aprobacion, Aprobacion Parcil o Asignacion
                            if (estadoFin == ConstantesCombustibles.EstadoAprobado || estadoFin == ConstantesCombustibles.EstadoAprobadoParcialmente)
                            {
                                DateTime primerDiaMes = new DateTime(fechaActual.Year, fechaActual.Month, 1, 0, 0, 0);
                                DateTime ultimoSegundoDelMes = primerDiaMes.AddMonths(1).AddSeconds(-1);
                                int res = DateTime.Compare(fechaActual, ultimoSegundoDelMes);

                                if (res <= 0)
                                    plazo = 1; //En plazo
                                else
                                    plazo = 0; //Fuera de plazo
                            }


                        }
                        else
                        {
                            if (tipoCentral == ConstantesCombustibles.CentralNueva)
                            {
                                //subsanacion de obs en Existentes
                                if (estadoIni == ConstantesCombustibles.EstadoObservado && estadoFin == ConstantesCombustibles.EstadoSubsanacionObs)
                                {
                                    diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecmodificacion.Value);
                                    if (diff <= diasParaSubsanar)
                                        plazo = 1; //en plazo
                                    else
                                        plazo = 0; //Fuera de plazo
                                }

                                //Observacion desde intranet
                                if (estadoIni == ConstantesCombustibles.EstadoSolicitud && estadoFin == ConstantesCombustibles.EstadoObservado)
                                {
                                    diff = DiferenciaDiasCalendario(fechaActual, regEnvio.Cbenvfecsolicitud);
                                    if (diff <= diasParaObservar)
                                        plazo = 1; //en plazo
                                    else
                                        plazo = 0; //Fuera de plazo
                                }

                                //Aprobacion, Aprobacion Parcil o Asignacion
                                if (estadoFin == ConstantesCombustibles.EstadoAprobado || estadoFin == ConstantesCombustibles.EstadoAprobadoParcialmente || estadoFin == ConstantesCombustibles.EstadoAsignado)
                                {
                                    DateTime primerDiaMes = new DateTime(fechaActual.Year, fechaActual.Month, 1, 0, 0, 0);
                                    DateTime ultimoSegundoDelMes = primerDiaMes.AddMonths(1).AddSeconds(-1);
                                    int res = DateTime.Compare(fechaActual, ultimoSegundoDelMes);

                                    if (res <= 0)
                                        plazo = 1; //En plazo
                                    else
                                        plazo = 0; //Fuera de plazo
                                }
                            }
                        }
                    }
                }
            }

            return plazo;
        }

        #endregion

        #endregion

        #region Extranet

        #region Formulario Extranet

        public List<PR31FormGasCentral> ListarFormularioCentralByEnvio(bool esIntranet, int idEnvio, int idVersion, int emprcodi
                                                            , string tipoCentral, string tipoOpcion, DateTime fechaVigencia, int tipoPresentacionDato, out bool yaExisteSolicitud)
        {
            CbEnvioDTO objEnvio = new CbEnvioDTO();
            SiEmpresaDTO objEmpresa = GetByIdSiEmpresa(emprcodi);
            DateTime fechaMesAnt = fechaVigencia.AddMonths(-1);

            //Plantilla vigente
            int cbftcodi = 0;
            yaExisteSolicitud = false;
            List<CbDatosDTO> listaDatos = new List<CbDatosDTO>();
            List<CbObsDTO> listaObs = new List<CbObsDTO>();
            List<CbObsxarchivoDTO> listaObsXArchivo = new List<CbObsxarchivoDTO>();
            List<PR31FormGasCentral> listaForm = new List<PR31FormGasCentral>();
            bool esEditable = false;
            bool esEditableObs = false;
            bool incluirObservacion = false;
            bool esAsignacion = ConstantesCombustibles.OpcionNuevaSolicitoAsignacion == tipoOpcion;

            List<CbCentralxfenergDTO> listaCentral = new List<CbCentralxfenergDTO>();
            List<CbEnvioCentralDTO> listaEnvioCentral = new List<CbEnvioCentralDTO>();
            if (idEnvio == 0)
            {
                objEnvio.Estenvcodi = ConstantesCombustibles.EstadoSolicitud;
                cbftcodi = GetByCriteriaCbFichas().Find(x => x.EsVigente).Cbftcodi;
                listaCentral = ObtenerListadoCentralesTermicas(true).Where(x => x.Emprcodi == emprcodi).ToList();
                if (tipoCentral == ConstantesCombustibles.CentralExistente) listaCentral = listaCentral.Where(x => x.Cbcxfeexistente == 1).ToList();
                if (tipoCentral == ConstantesCombustibles.CentralNueva) listaCentral = listaCentral.Where(x => x.Cbcxfenuevo == 1).ToList();

                bool esMesSiguiente = ConstantesCombustibles.CentralExistente == tipoCentral;

                if (!esIntranet)
                {
                    if (ConstantesCombustibles.CentralExistente == tipoCentral)
                    {
                        esEditable = true;

                        var keyConfig = ConfigurationManager.AppSettings[ConstantesCombustibles.KeyFlagPR31ValidarCentralExistente];
                        if (keyConfig == "S")
                        {
                            esEditable = DateTime.Today.Day < 21; //existentes
                        }
                    }
                    if (ConstantesCombustibles.CentralNueva == tipoCentral) // && ConstantesCombustibles.OpcionNuevaSolicitoAsignacion == tipoOpcion
                        esEditable = true;
                }

                //si ya existe solicitud
                if (ExisteSolicitudXTipoCombustibleYVigenciaYTipocentralCbEnvio(0, emprcodi, ConstantesCombustibles.EstcomcodiGas
                                                                  , fechaVigencia
                                                                  , tipoCentral, -1, out int idEnvioExistente))
                {
                    yaExisteSolicitud = true;
                    esEditable = false;
                }
            }
            else
            {
                objEnvio = GetByIdCbEnvio(idEnvio);
                fechaVigencia = objEnvio.Cbenvfechaperiodo.Value;
                cbftcodi = objEnvio.Cbftcodi.Value;
                if (idVersion <= 0) idVersion = objEnvio.Cbvercodi;
                listaEnvioCentral = GetByCriteriaCbEnvioCentrals(idVersion);
                listaCentral = listaEnvioCentral.Select(x => new CbCentralxfenergDTO()
                {
                    Equicodi = x.Equicodi,
                    Grupocodi = x.Grupocodi,
                    Fenergcodi = x.Fenergcodi,
                    Equinomb = x.Equinomb,
                    Fenergnomb = x.Fenergnomb,
                    Tipocentral = tipoCentral
                }).ToList();
                listaDatos = ListCbDatossByCbCentcodi(string.Join(",", listaEnvioCentral.Select(x => x.Cbcentcodi)));
                listaObs = ListCbObssByCbCentcodi(string.Join(",", listaEnvioCentral.Select(x => x.Cbcentcodi)));
                listaObsXArchivo = ListCbObsxarchivosByCbCentcodi(string.Join(",", listaEnvioCentral.Select(x => x.Cbcentcodi)));

                if (esIntranet)
                {
                    esEditable = false;
                    esEditableObs = objEnvio.EsEditableIntranet;

                    incluirObservacion = true;
                    if (objEnvio.EsEditableExtranet && objEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud) incluirObservacion = false;
                }
                else
                {
                    esEditable = objEnvio.EsEditableExtranet;
                    esEditableObs = objEnvio.EsEditableExtranet;
                    if (idEnvio != 0 && objEnvio.Estenvcodi != ConstantesCombustibles.EstadoSolicitud) incluirObservacion = true;
                }

                //ver historico (las versiones anteriores no son editables)
                if (idVersion > 0 && idVersion != objEnvio.Cbvercodi)
                {
                    esEditable = false;
                    esEditableObs = false;
                }

                //es asignacion
                esAsignacion = ConstantesCombustibles.OpcionNuevaSolicitoAsignacion == objEnvio.TipoOpcionAsignado;
            }

            //habilitar handson si tiene permisos de admin
            if (ConstantesCombustibles.ArchivosTotales != tipoPresentacionDato)
            {
                esEditable = false;
                esEditableObs = false;
            }

            //Obtener datos del mes anterior
            List<CbEnvioCentralDTO> listaCentralAnt = ListarCbEnvioCentralUltimoEnvioXMes(fechaMesAnt.Month, fechaMesAnt.Year);

            string sEquicodis = string.Join(",", listaCentral.Select(x => x.Equicodi).Distinct().ToList());
            //datos de último valor del mes que registró consumo de combustible (anterior a la mes de vigencia)
            List<CbEnvioCentralDTO> listaCentralDatoSeccion2 = ListarCbEnvioCentralUltimoEnvioXDato(sEquicodis, fechaVigencia, ConstantesCombustibles.CCombcodiTipoOpcionSeccion2, "ESI");
            List<CbEnvioCentralDTO> listaCentralDatoSeccion3 = ListarCbEnvioCentralUltimoEnvioXDato(sEquicodis, fechaVigencia, ConstantesCombustibles.CCombcodiTipoOpcionSeccion3, "ESI");
            List<CbEnvioCentralDTO> listaCentralDatoSeccion4 = ListarCbEnvioCentralUltimoEnvioXDato(sEquicodis, fechaVigencia, ConstantesCombustibles.CCombcodiTipoOpcionSeccion4, "ESI");

            //datos de último valor del mes que registró consumo de combustible - central nueva (anterior a la mes de vigencia)
            List<CbEnvioCentralDTO> listaCentralNuevaDatoSeccion2 = ListarCbEnvioCentralNuevaUltimoEnvioXDato(sEquicodis, fechaVigencia, ConstantesCombustibles.CCombcodiUltMesSeccion2);
            List<CbEnvioCentralDTO> listaCentralNuevaDatoSeccion3 = ListarCbEnvioCentralNuevaUltimoEnvioXDato(sEquicodis, fechaVigencia, ConstantesCombustibles.CCombcodiUltMesSeccion3);
            List<CbEnvioCentralDTO> listaCentralNuevaDatoSeccion4 = ListarCbEnvioCentralNuevaUltimoEnvioXDato(sEquicodis, fechaVigencia, ConstantesCombustibles.CCombcodiUltMesSeccion4);

            //Generar handson por cada central
            foreach (var objCfgCentral in listaCentral.OrderBy(x => x.Equinomb).ThenBy(x => x.Fenergnomb).ToList())
            {
                List<CbDatosDTO> listaDatosXCentral = listaDatos.Where(x => x.Equicodi == objCfgCentral.Equicodi).ToList();
                List<CbObsDTO> listaObsXCentral = listaObs.Where(x => x.Equicodi == objCfgCentral.Equicodi).ToList();
                List<CbObsxarchivoDTO> listaObsXArchivoXCentral = listaObsXArchivo.Where(x => x.Equicodi == objCfgCentral.Equicodi).ToList();
                //setear obs a item
                foreach (var objDato in listaDatosXCentral)
                {
                    var objObs = listaObsXCentral.Find(x => x.Cbevdacodi == objDato.Cbevdacodi);
                    if (objObs != null)
                    {
                        objDato.Obs = objObs;
                        objDato.Obs.ListaArchivoXObs = listaObsXArchivoXCentral.Where(x => x.Cbobscodi == objObs.Cbobscodi).ToList();
                    }
                }

                var objFicha = GetByIdCbFicha(cbftcodi); //al consultar bd por cada central no es necesario clonar
                List<CbFichaItemDTO> listaItemXFichaBD = new List<CbFichaItemDTO>();
                listaItemXFichaBD.AddRange(objFicha.ListaSeccion);
                foreach (var objSeccion in objFicha.ListaSeccion) listaItemXFichaBD.AddRange(objSeccion.ListaItemXSeccion);

                PR31FormGasCentral objCentral = null;
                if (esAsignacion)
                {
                    bool flagVolverACalcularCosto = objEnvio.Estenvcodi != ConstantesCombustibles.EstadoAsignado && objEnvio.Estenvcodi != ConstantesCombustibles.EstadoCancelado;
                    objCentral = GetHandsonGasSolicitudAsignacion(esIntranet, objCfgCentral, objFicha, flagVolverACalcularCosto, listaDatosXCentral);
                }
                else
                {
                    //buscar envio mes pasado
                    CbEnvioCentralDTO objEnvioAnt = listaCentralAnt.Find(x => x.Equicodi == objCfgCentral.Equicodi);
                    List<CbDatosDTO> listaDatosCentralAnt = new List<CbDatosDTO>();
                    if (objEnvioAnt != null) listaDatosCentralAnt = ListCbDatossByCbCentcodi(objEnvioAnt.Cbcentcodi.ToString());

                    //por cada seccion asignarle datos almacenados (opcion popup y numero de columnas)
                    foreach (var objSeccion in objFicha.ListaSeccion)
                    {
                        objSeccion.NumColSeccion = 1; //número de columnas default

                        //cuando se muestra por primera vez debe mostrar los valors por defecto, luego debe mostrar lo guardado en bd
                        if (idEnvio == 0)
                            objSeccion.TieneSetearValorDefaultSeccion = objSeccion.Cbftitnumeral == "1.0";

                        if (objSeccion.Cbftitcnp0 > 0) //tipo opcion
                        {
                            //Tipo seleccionado y mes ultimo seleccionado (central nueva)
                            var objDato = listaDatosXCentral.Find(x => x.Ccombcodi == objSeccion.Cbftitcnp0);
                            if (objDato != null) objSeccion.TipoOpcionSeccion = objDato.Cbevdavalor ?? "";

                            var objDato6 = listaDatosXCentral.Find(x => x.Ccombcodi == objSeccion.Cbftitcnp6);
                            if (objDato6 != null) objSeccion.MesUltimoCentralNuevaSeccion = objDato6.Cbevdavalor ?? "";

                            //mes anterior y ultimo mes (no necesariamente el mes anterior)
                            switch (objSeccion.Cbftitcnp0)
                            {
                                case ConstantesCombustibles.CCombcodiTipoOpcionSeccion2:
                                    ObtenerCbenvcentralXSeccion(objCfgCentral.Equicodi, fechaMesAnt, listaCentralDatoSeccion2, listaCentralNuevaDatoSeccion2
                                                                    , out int codigoCentralUltMes2, out int codigoCentralMesAnt2);

                                    objSeccion.CbcentcodiMesUltimoComb = codigoCentralUltMes2;
                                    objSeccion.CbcentcodiMesAnteriorComb = codigoCentralMesAnt2;
                                    break;
                                case ConstantesCombustibles.CCombcodiTipoOpcionSeccion3:
                                    ObtenerCbenvcentralXSeccion(objCfgCentral.Equicodi, fechaMesAnt, listaCentralDatoSeccion3, listaCentralNuevaDatoSeccion3
                                                                    , out int codigoCentralUltMes3, out int codigoCentralMesAnt3);

                                    objSeccion.CbcentcodiMesUltimoComb = codigoCentralUltMes3;
                                    objSeccion.CbcentcodiMesAnteriorComb = codigoCentralMesAnt3;
                                    break;
                                case ConstantesCombustibles.CCombcodiTipoOpcionSeccion4:
                                    ObtenerCbenvcentralXSeccion(objCfgCentral.Equicodi, fechaMesAnt, listaCentralDatoSeccion4, listaCentralNuevaDatoSeccion4
                                                                    , out int codigoCentralUltMes4, out int codigoCentralMesAnt4);

                                    objSeccion.CbcentcodiMesUltimoComb = codigoCentralUltMes4;
                                    objSeccion.CbcentcodiMesAnteriorComb = codigoCentralMesAnt4;
                                    break;
                            }
                        }

                        if (objSeccion.Cbftitcnp1 > 0) //numero de columnas
                        {
                            //mes actual
                            var objDato = listaDatosXCentral.Find(x => x.Ccombcodi == objSeccion.Cbftitcnp1);
                            if (objDato != null) objSeccion.NumColSeccion = objDato.ValorEntero ?? 0;

                            //mes anterior
                            var objDatoAnt = listaDatosCentralAnt.Find(x => x.Ccombcodi == objSeccion.Cbftitcnp1);
                            if (objDatoAnt != null) objSeccion.NumColSeccionMesAnt = objDatoAnt.ValorEntero ?? 0;
                        }

                        //
                        if (objSeccion.TieneListaDesplegable)
                        {
                            var listaDatoXItem = listaDatosXCentral.Where(x => x.Ccombcodi == objSeccion.ConcepcodiDesplegable).ToList();
                            var listaDatoXItemAnt = listaDatosCentralAnt.Where(x => x.Ccombcodi == objSeccion.ConcepcodiDesplegable).ToList();

                            for (var i = 0; i < objSeccion.ListaOpcionDesplegable.Count; i++)
                            {
                                objSeccion.ListaOpcionNumcolDesplegableMesActual[i] = listaDatoXItem.Where(x => (x.Cbevdavalor ?? "").ToUpper() == objSeccion.ListaOpcionDesplegable[i].ToUpper()).Count();

                                //si el mes anterior seleccionaron ESI
                                if (objSeccion.CbcentcodiMesAnteriorComb > 0)
                                    objSeccion.ListaOpcionNumcolDesplegableMesAnterior[i] = listaDatoXItemAnt.Where(x => (x.Cbevdavalor ?? "").ToUpper() == objSeccion.ListaOpcionDesplegable[i].ToUpper()).Count();
                            }

                            //celda agrupada para mercado secundario
                            int concepcodiEspecial = 0;
                            if (objSeccion.Cbftitnumeral == "3.0") concepcodiEspecial = 150;
                            if (objSeccion.Cbftitnumeral == "4.0") concepcodiEspecial = 166;

                            var listaTmp4 = listaDatosXCentral.Where(x => x.Ccombcodi == concepcodiEspecial && (x.Cbevdavalor ?? "").ToUpper() == "NO APLICA").ToList();
                            objSeccion.NumColNoaplica = listaTmp4.Count;
                        }
                    }

                    #region Incluir Valores en Memoria

                    //Si no existen datos en la version
                    if (!listaDatosXCentral.Any())
                    {
                        List<CbDatosDTO> listaDatoMemoria = new List<CbDatosDTO>();
                        listaDatoMemoria.Add(new CbDatosDTO() { Ccombcodi = ConstantesCombustibles.CCombcodiNumColSeccion2, ValorEntero = 1, Cbevdatipo = "NUMERO" });
                        listaDatoMemoria.Add(new CbDatosDTO() { Ccombcodi = ConstantesCombustibles.CCombcodiNumColSeccion3, ValorEntero = 1, Cbevdatipo = "NUMERO" });
                        listaDatoMemoria.Add(new CbDatosDTO() { Ccombcodi = ConstantesCombustibles.CCombcodiNumColSeccion4, ValorEntero = 1, Cbevdatipo = "NUMERO" });

                        listaDatosXCentral.AddRange(listaDatoMemoria);
                    }

                    //actualizar item 1.4 Fecha de suministro de información cuando el autoguardado de tipo de solicitud todavía no es enviado por el agente
                    if (objEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud && objEnvio.Cbenvtipoenvio == ConstantesCombustibles.GuardadoTemporal)
                    {
                        var listaTmpFecAutog = listaDatosXCentral.Where(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiFechaSuministro).ToList();
                        foreach (var objTmp in listaTmpFecAutog)
                        {
                            objTmp.Cbevdavalor = DateTime.Today.ToString(ConstantesAppServicio.FormatoFecha);
                        }
                    }

                    #endregion

                    //matriz de cada seccion por numero de proveedores y setear estado
                    GrillaGasActualizarDimensionYEstado(objCfgCentral, ref listaItemXFichaBD, ref listaDatosXCentral);

                    //Armar handson
                    objCentral = GetHandsonGasFormato3(esIntranet, objCfgCentral, objFicha, listaDatosXCentral, incluirObservacion, tipoPresentacionDato, objEnvio.Estenvcodi);

                    //si el handson es no editable
                    if (!esEditable)
                    {
                        foreach (var objSeccion in objCentral.ArrayItem.ToList().Where(x => x.EsSeccion))
                        {
                            objSeccion.EsSeccionSoloLectura = true;
                        }
                    }
                }

                //mantener valores
                objCentral.EsEditable = esEditable;
                objCentral.EsEditableObs = esEditableObs;
                objCentral.IncluirObservacion = incluirObservacion;
                objCentral.TipoCentral = tipoCentral;
                objCentral.Emprnomb = objEmpresa.Emprnomb;
                objCentral.Cbcentestado = listaEnvioCentral.Find(x => x.Equicodi == objCfgCentral.Equicodi)?.Cbcentestado;
                objCentral.MesVigencia = fechaVigencia.ToString(ConstantesAppServicio.FormatoMesAnio);

                listaForm.Add(objCentral);
            }

            return listaForm;
        }

        public List<PR31FormGasCentral> ActualizarHandsonFormulario(bool esIntranet, List<PR31FormGasCentral> listaFormularioCentral, bool actualizarTodoEquipo, int? equicodi, int? cnpSeccion1
                                                            , int? numCol, string numColDesp, int? cnpSeccion0, string tipoOpcionSeccion, string mesAnteriorCentralNueva, int tipoPresentacionDato)
        {
            List<PR31FormGasCentral> listaFormularioUpdate = new List<PR31FormGasCentral>();

            foreach (var objTabWeb in listaFormularioCentral)
            {
                //Setear opción seleccionada desde el popup
                if (objTabWeb.Equicodi == equicodi || actualizarTodoEquipo)
                {
                    var objCfgCentral = new CbCentralxfenergDTO()
                    {
                        Equicodi = objTabWeb.Equicodi,
                        Fenergcodi = objTabWeb.Fenergcodi,
                        Grupocodi = objTabWeb.Grupocodi,
                        Equinomb = objTabWeb.Central,
                        Tipocentral = objTabWeb.TipoCentral
                    };

                    //Última versión de la plantilla
                    var objFicha = GetByIdCbFicha(objTabWeb.Cbftcodi);
                    List<CbFichaItemDTO> listaItemXFichaBD = new List<CbFichaItemDTO>();
                    listaItemXFichaBD.AddRange(objFicha.ListaSeccion);
                    foreach (var objSeccion in objFicha.ListaSeccion) listaItemXFichaBD.AddRange(objSeccion.ListaItemXSeccion);

                    //Obtener datos del handson
                    List<CbDatosDTO> listaDatoWeb = GetEnvioCentralVersionFromModeloWeb(objTabWeb.ArrayItem, objTabWeb.ArrayItemObs, objTabWeb.Handson
                                                                            , objTabWeb.Equicodi, objTabWeb.Fenergcodi, objTabWeb.Grupocodi, objTabWeb.Cbcentestado, null, objTabWeb.IncluirObservacion).ListaDato;

                    //Copiar configuración del handson a la última versión de la plantilla
                    foreach (var objSeccion in objFicha.ListaSeccion)
                    {
                        //num col
                        objSeccion.NumColSeccion = objTabWeb.ArrayItem.ToList().Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).NumColSeccion;
                        objSeccion.TipoOpcionSeccion = objTabWeb.ArrayItem.ToList().Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).TipoOpcionSeccion;
                        objSeccion.MesUltimoCentralNuevaSeccion = objTabWeb.ArrayItem.ToList().Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).MesUltimoCentralNuevaSeccion;

                        //
                        var objTmp = objTabWeb.ArrayItem.ToList().Find(x => x.Cbftitcnp1 == objSeccion.Cbftitcnp1); //ubicar item seccion
                        if (objTmp != null)
                        {
                            objSeccion.NumColSeccionMesAnt = objTmp.NumColSeccionMesAnt;
                            objSeccion.CbcentcodiMesUltimoComb = objTmp.CbcentcodiMesUltimoComb;
                            objSeccion.CbcentcodiMesAnteriorComb = objTmp.CbcentcodiMesAnteriorComb;
                        }

                        //seccion 3.0, 4.0
                        objSeccion.NumColNoaplica = objTabWeb.ArrayItem.ToList().Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).NumColNoaplica;
                        objSeccion.ListaOpcionNumcolDesplegableMesActual = objTabWeb.ArrayItem.ToList().Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).ListaOpcionNumcolDesplegableMesActual;
                        objSeccion.ListaOpcionNumcolDesplegableMesAnterior = objTabWeb.ArrayItem.ToList().Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).ListaOpcionNumcolDesplegableMesAnterior;
                    }

                    //Actualizar opciones de la seccion seleccionada
                    GrillaGasSetearValorPopup(listaItemXFichaBD, listaDatoWeb, cnpSeccion1, numCol, numColDesp, cnpSeccion0, tipoOpcionSeccion, mesAnteriorCentralNueva);

                    //matriz de cada seccion por numero de proveedores y setear estado
                    GrillaGasActualizarDimensionYEstado(objCfgCentral, ref listaItemXFichaBD, ref listaDatoWeb);

                    //Armar handson
                    var objTabUpdate = GetHandsonGasFormato3(esIntranet, objCfgCentral, objFicha, listaDatoWeb, objTabWeb.IncluirObservacion, tipoPresentacionDato, objTabWeb.Estenvcodi);

                    //mantener valores
                    objTabUpdate.EsEditable = objTabWeb.EsEditable;
                    objTabUpdate.EsEditableObs = objTabWeb.EsEditableObs;
                    objTabUpdate.IncluirObservacion = objTabWeb.IncluirObservacion;
                    objTabUpdate.TipoCentral = objTabWeb.TipoCentral;
                    objTabUpdate.Emprnomb = objTabWeb.Emprnomb;
                    objTabUpdate.MesVigencia = objTabWeb.MesVigencia;
                    objTabUpdate.Cbcentestado = objTabWeb.Cbcentestado;
                    objTabUpdate.EnergiaMesAnterior = objTabWeb.EnergiaMesAnterior;
                    objTabUpdate.FlagConsultoEnergiaMesAnterior = objTabWeb.FlagConsultoEnergiaMesAnterior;

                    //agregar handson actualizado de la central 
                    listaFormularioUpdate.Add(objTabUpdate);
                }
                else
                {
                    //agregar handson de la web de la central 
                    listaFormularioUpdate.Add(objTabWeb);
                }
            }

            return listaFormularioUpdate;
        }

        private void ObtenerCbenvcentralXSeccion(int equicodi, DateTime fechaMesAnt, List<CbEnvioCentralDTO> listaCEDatoESI, List<CbEnvioCentralDTO> listaCNDatoENO
                                                , out int codigoCentralUltMes, out int codigoCentralMesAnt)
        {
            codigoCentralUltMes = 0;
            codigoCentralMesAnt = 0;

            DateTime? objFecCE = listaCEDatoESI.Where(x => x.Equicodi == equicodi).FirstOrDefault()?.Cbenvfechaperiodo;
            DateTime? objFecCN = listaCNDatoENO.Where(x => x.Equicodi == equicodi).FirstOrDefault()?.Cbenvfechaperiodo;

            List<CbEnvioCentralDTO> listaDato = new List<CbEnvioCentralDTO>();
            if (objFecCE != null && objFecCN != null)
            {
                listaDato = objFecCE > objFecCN ? listaCEDatoESI : listaCNDatoENO;
            }
            else
            {
                if (objFecCE != null) listaDato = listaCEDatoESI;
                if (objFecCN != null) listaDato = listaCNDatoENO;
            }

            var objCentralSec2 = listaDato.Find(x => x.Equicodi == equicodi);
            if (objCentralSec2 != null)
            {
                codigoCentralUltMes = objCentralSec2.Cbcentcodi;
                codigoCentralMesAnt = objCentralSec2.Cbenvfechaperiodo == fechaMesAnt ? objCentralSec2.Cbcentcodi : 0;
            }
        }

        private void GrillaGasActualizarDimensionYEstado(CbCentralxfenergDTO objCfgCentral, ref List<CbFichaItemDTO> listaItemXFichaBD, ref List<CbDatosDTO> listaDatoWeb)
        {
            //actualizar listaDatoWeb por # de proveedores
            GrillaGasRearmarNumeroColumnas(objCfgCentral.Tipocentral, listaItemXFichaBD, ref listaDatoWeb);

            //Setear valores Global
            GrillaGasSetearValorDefectoGlobal(listaItemXFichaBD, ref listaDatoWeb);

            //
            foreach (var objSeccion in listaItemXFichaBD.Where(x => x.EsSeccion))
            {
                //obtener datos de último envio donde tuvo consumo de combusible
                List<CbDatosDTO> listaDatoCentralUltVig = new List<CbDatosDTO>();
                if (objSeccion.CbcentcodiMesUltimoComb > 0) listaDatoCentralUltVig = ListCbDatossByCbCentcodi(objSeccion.CbcentcodiMesUltimoComb.ToString());

                //Setear valores defecto
                GrillaGasSetearEstadoXSeccion(objSeccion.TieneSetearValorDefaultSeccion, objCfgCentral, objSeccion, ref listaDatoWeb, listaDatoCentralUltVig, ref listaItemXFichaBD);

                //guardar variable temporal
                listaItemXFichaBD.Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).NumColNoaplica = objSeccion.NumColNoaplica;
                listaItemXFichaBD.Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).ListaOpcionNumcolDesplegableMesActual = objSeccion.ListaOpcionNumcolDesplegableMesActual;
                listaItemXFichaBD.Find(x => x.Cbftitnumeral == objSeccion.Cbftitnumeral).ListaOpcionNumcolDesplegableMesAnterior = objSeccion.ListaOpcionNumcolDesplegableMesAnterior;
            }

            //celdas formuladas 
            GrillaGasSetearValorDespuesCalculoFormula(listaItemXFichaBD, ref listaDatoWeb);

        }

        private void GrillaGasSetearValorPopup(List<CbFichaItemDTO> listaItemXFichaBD, List<CbDatosDTO> listaDatoWeb, int? cnpSeccion1, int? numCol
                                        , string numColDesp, int? cnpSeccion0, string tipoOpcionSeccion, string mesAnteriorCentralNueva)
        {
            //opcion popup
            var objOpcionSeccion = listaDatoWeb.Find(x => x.Ccombcodi == cnpSeccion0);
            if (objOpcionSeccion != null)
            {
                objOpcionSeccion.Cbevdavalor = tipoOpcionSeccion;
            }

            //numero de columnas popup
            var objNumColSeccion = listaDatoWeb.Find(x => x.Ccombcodi == cnpSeccion1);
            if (objNumColSeccion != null)
            {
                objNumColSeccion.Cbevdavalor = numCol.ToString();
                objNumColSeccion.ValorEntero = numCol;

                CbFichaItemDTO objSeccion = listaItemXFichaBD.Find(x => x.EsSeccion && x.Cbftitcnp1 == cnpSeccion1);
                if (objSeccion != null)
                {
                    var redefinirEstructuraSeccion = objSeccion.TieneSetearValorDefaultSeccion;

                    if (!string.IsNullOrEmpty(numColDesp))
                    {
                        //verificar si se ha cambiado las columnas
                        redefinirEstructuraSeccion = string.Join(",", objSeccion.ListaOpcionNumcolDesplegableMesActual ?? new int[0]) != (numColDesp ?? "");
                        objSeccion.ListaOpcionNumcolDesplegableMesActual = numColDesp.Split(',').Select(x => Convert.ToInt32(x)).ToArray();
                    }

                    //si el popup fue seleccionado entonces actualizar sus datos
                    if (cnpSeccion1 != null)
                    {
                        objSeccion.NumColSeccion = numCol ?? 1;

                        //verificar si ha cambiado el tipo del popup
                        redefinirEstructuraSeccion = redefinirEstructuraSeccion || objSeccion.TipoOpcionSeccion != tipoOpcionSeccion;
                    }

                    objSeccion.TipoOpcionSeccion = tipoOpcionSeccion;
                    objSeccion.MesUltimoCentralNuevaSeccion = mesAnteriorCentralNueva;

                    objSeccion.TieneSetearValorDefaultSeccion = redefinirEstructuraSeccion;
                }
            }
        }

        private void GrillaGasRearmarNumeroColumnas(string tipoCentral, List<CbFichaItemDTO> listaItemXFichaBD, ref List<CbDatosDTO> listaDatoWeb)
        {
            foreach (var objSeccion in listaItemXFichaBD.Where(x => x.EsSeccion))
            {
                //3.0 y 4.0 ESI. #proveedores múltiples
                bool tieneNumProvSeccion = false;
                if (objSeccion.TieneListaDesplegable)
                {
                    if (objSeccion.TipoOpcionSeccion == "ESI") tieneNumProvSeccion = true;
                    if (tipoCentral == ConstantesCombustibles.CentralNueva && objSeccion.TipoOpcionSeccion == "ENO" && !string.IsNullOrEmpty(objSeccion.MesUltimoCentralNuevaSeccion)) tieneNumProvSeccion = true;
                }

                if (tieneNumProvSeccion)
                {
                    //almacena solo los objetos que pertenezcan a las columnas definidas. Las columnas eliminadas también son quitados sus datos
                    var listaTmpDatoWebSeccion = new List<CbDatosDTO>();

                    var listaTmp2 = listaDatoWeb.Where(x => x.Ccombcodi == objSeccion.ConcepcodiDesplegable).ToList(); //fila de datos de Tipo de servicio contratado

                    for (var c = 0; c < objSeccion.ListaOpcionDesplegable.Count; c++)
                    {
                        string opdesp = objSeccion.ListaOpcionDesplegable[c];
                        int totalXOpDesp = listaTmp2.Where(x => x.Cbevdavalor == opdesp).Count();

                        //obtener posiciones de la opcion en la seccion antes de los cambios
                        int posIni = -1;
                        int posFin = -1;
                        for (var c1 = 0; c1 < listaTmp2.Count; c1++)
                        {
                            if ((listaTmp2[c1].Cbevdavalor ?? "").ToUpper() == (opdesp ?? "").ToUpper())
                            {
                                if (posIni < 0) posIni = c1;
                                posFin = c1;
                            }
                        }

                        //efectuar cambios a la estructura
                        int numFilas = objSeccion.ListaOpcionNumcolDesplegableMesActual[c];
                        if (numFilas > 0)
                        {
                            foreach (var objItem in objSeccion.ListaItemXSeccion)
                            {
                                var listaNueva = new List<CbDatosDTO>();
                                var listaTmp3 = listaDatoWeb.Where(x => x.Ccombcodi == objItem.Ccombcodi).ToList(); //fila de datos de item

                                for (var c3 = 0; c3 < numFilas; c3++)
                                {
                                    CbDatosDTO objTmp = null;
                                    if (posIni >= 0 && c3 >= (posIni - posIni) && c3 <= (posFin - posIni))
                                    {
                                        objTmp = listaTmp3.Count > (posIni + c3) ? listaTmp3[posIni + c3] : null;
                                    }

                                    if (objTmp == null)
                                    {
                                        objTmp = new CbDatosDTO()
                                        {
                                            Ccombcodi = objItem.Ccombcodi ?? 0,
                                            Cbevdavalor = ""
                                        };
                                    }

                                    if (objItem.Ccombcodi == objSeccion.ConcepcodiDesplegable)
                                    {
                                        objTmp.Cbevdavalor = opdesp;
                                        objTmp.Cbevdaestado = 0; //no editable
                                    }
                                    listaNueva.Add(objTmp);
                                }

                                //nueva fila de datos del item
                                listaTmpDatoWebSeccion.AddRange(listaNueva);
                            }
                        }
                    }

                    foreach (var objItem in objSeccion.ListaItemXSeccion)
                    {
                        listaDatoWeb = listaDatoWeb.Where(x => x.Ccombcodi != objItem.Ccombcodi).ToList();
                    }

                    //quitar elementos
                    listaDatoWeb.AddRange(listaTmpDatoWebSeccion);
                }
                else
                {
                    if (objSeccion.Cbftitnumeral == "1.0" || objSeccion.Cbftitnumeral == "5.0")
                    {
                        //almacena solo los objetos que pertenezcan a las columnas definidas. Las columnas eliminadas también son quitados sus datos
                        var listaTmpDatoWebSeccion = new List<CbDatosDTO>();

                        foreach (var objItem in objSeccion.ListaItemXSeccion)
                        {
                            CbDatosDTO objTmp = listaDatoWeb.Find(x => x.Ccombcodi == objItem.Ccombcodi);
                            if (objTmp == null)
                            {
                                objTmp = new CbDatosDTO()
                                {
                                    Ccombcodi = objItem.Ccombcodi ?? 0,
                                    Cbevdavalor = ""
                                };
                            }
                            listaTmpDatoWebSeccion.Add(objTmp);

                            listaDatoWeb = listaDatoWeb.Where(x => x.Ccombcodi != objItem.Ccombcodi).ToList();
                        }

                        //quitar elementos
                        listaDatoWeb.AddRange(listaTmpDatoWebSeccion);
                    }
                    else
                    {
                        //almacena solo los objetos que pertenezcan a las columnas definidas. Las columnas eliminadas también son quitados sus datos
                        var listaTmpDatoWebSeccion = new List<CbDatosDTO>();

                        //buscar un item que siempre tenga celdas sin combinar
                        var objItemFlag = listaItemXFichaBD.Find(x => x.Cbftittipodato == "TEXTO" && x.Cbftittipocelda == "M");
                        var listaTmp2 = listaDatoWeb.Where(x => x.Ccombcodi == objItemFlag.Ccombcodi).ToList(); //fila de datos de Tipo de servicio contratado

                        //obtener posiciones de la opcion en la seccion antes de los cambios
                        int posIni = 0;
                        int posFin = listaTmp2.Count();

                        //efectuar cambios a la estructura
                        int numFilas = objSeccion.NumColSeccion;
                        if (numFilas > 0)
                        {
                            foreach (var objItem in objSeccion.ListaItemXSeccion)
                            {
                                var listaNueva = new List<CbDatosDTO>();
                                var listaTmp3 = listaDatoWeb.Where(x => x.Ccombcodi == objItem.Ccombcodi).ToList(); //fila de datos de item

                                for (var c3 = 0; c3 < numFilas; c3++)
                                {
                                    CbDatosDTO objTmp = null;
                                    if (posIni >= 0 && c3 >= (posIni - posIni) && c3 <= (posFin - posIni))
                                    {
                                        objTmp = listaTmp3.Count > (posIni + c3) ? listaTmp3[posIni + c3] : null;
                                    }

                                    if (objTmp == null)
                                    {
                                        objTmp = new CbDatosDTO()
                                        {
                                            Ccombcodi = objItem.Ccombcodi ?? 0,
                                            Cbevdavalor = ""
                                        };
                                    }

                                    listaNueva.Add(objTmp);
                                }

                                //nueva fila de datos del item
                                listaTmpDatoWebSeccion.AddRange(listaNueva);
                            }

                            foreach (var objItem in objSeccion.ListaItemXSeccion)
                            {
                                listaDatoWeb = listaDatoWeb.Where(x => x.Ccombcodi != objItem.Ccombcodi).ToList();
                            }

                            //quitar elementos
                            listaDatoWeb.AddRange(listaTmpDatoWebSeccion);
                        }
                    }
                }
            }
        }

        private void GrillaGasSetearValorDefectoGlobal(List<CbFichaItemDTO> listaItemXFichaBD, ref List<CbDatosDTO> listaDatoWeb)
        {
            foreach (var objItem in listaItemXFichaBD)
            {
                int estadoDefault = 1; //editable
                if (objItem.Cbftittipodato == "FORMULA") estadoDefault = 0; // solo lectura

                var listaTmp = listaDatoWeb.Where(x => x.Ccombcodi == objItem.Ccombcodi).ToList();
                foreach (var objDatoTmp in listaTmp)
                {
                    objDatoTmp.Cbevdaestado = estadoDefault;
                }
            }
        }

        private void GrillaGasSetearEstadoXSeccion(bool actualizarDatoCelda, CbCentralxfenergDTO objCfgCentral, CbFichaItemDTO objSeccion
                                                , ref List<CbDatosDTO> listaDatoWeb, List<CbDatosDTO> listaDatoCentralUltVig, ref List<CbFichaItemDTO> listaItemXFichaBD)
        {
            //default seccion 1.0
            if (objSeccion.Cbftitnumeral == "1.0")
            {
                foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                {
                    switch (objFichaItem.Cbftitnumeral)
                    {
                        case "1.01":
                        case "1.02":
                        case "1.04":
                            var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                            foreach (var objTmp in listaObjTmpEdit)
                            {
                                objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                            }
                            break;
                    }

                    if (actualizarDatoCelda)
                    {
                        string valorCelda = "";
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.01":
                                if (actualizarDatoCelda) valorCelda = objCfgCentral.Emprnomb;
                                break;
                            case "1.02":
                                if (actualizarDatoCelda) valorCelda = objCfgCentral.Equinomb;
                                break;
                            case "1.04":
                                if (actualizarDatoCelda) valorCelda = DateTime.Today.ToString(ConstantesAppServicio.FormatoFecha);
                                break;
                        }

                        if (!string.IsNullOrEmpty(valorCelda))
                        {
                            var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                            foreach (var objTmp in listaObjTmpEdit)
                            {
                                objTmp.Cbevdavalor = valorCelda;
                            }
                        }
                    }
                }
            }

            //default azul para seccion 2.0,3.0,4.0
            if (string.IsNullOrEmpty(objSeccion.TipoOpcionSeccion) && objSeccion.Cbftitcnp0 > 0)
            {
                foreach (var objFichaItem in objSeccion.ListaItemXSeccion) //iterar todos los items de la seccion
                {
                    var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                    foreach (var objTmp in listaObjTmpEdit)
                    {
                        if (actualizarDatoCelda) objTmp.Cbevdavalor = "";
                        objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaNoEditable;
                    }
                }

                List<int> listaNumeral = new List<int>();
                if (objSeccion.Cbftitnumeral == "2.0") listaNumeral = new List<int>() { ConstantesCombustibles.CCombcodiPCSs };
                if (objSeccion.Cbftitnumeral == "3.0") listaNumeral = new List<int>() { ConstantesCombustibles.CCombcodiPCSt };
                if (objSeccion.Cbftitnumeral == "4.0") listaNumeral = new List<int>() { ConstantesCombustibles.CCombcodiPCSd, ConstantesCombustibles.CCombcodiPCSdg };


                if (listaNumeral.Any())
                {
                    var listaObjTmpEdit = listaDatoWeb.Where(x => listaNumeral.Contains(x.Ccombcodi)).ToList();
                    foreach (var objTmp in listaObjTmpEdit)
                    {
                        if (actualizarDatoCelda) objTmp.Cbevdavalor = "";
                        objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaNoEditable;
                    }
                }
            }

            if (objSeccion.Cbftitnumeral == "2.0") //2.0 INFORMACIÓN COMPROBANTE DE PAGO POR SUMINISTRO  
            {
                if (objSeccion.TipoOpcionSeccion == "NA") //No aplica           
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.05":
                            case "2.01":
                            case "2.02":
                            case "2.03":
                            case "2.04":
                            case "2.05":
                            case "2.06":
                            case "2.07":
                            case "2.08":
                            case "2.09":
                            case "2.10":
                            case "2.11":
                            case "2.12":
                            case "5.01":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = ConstantesCombustibles.TextoNoAplica;
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                }
                                break;
                        }
                    }
                }

                if (objSeccion.TipoOpcionSeccion == "ESI") //Consumió energía durante el mes anterior
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.05":
                            case "2.01":
                            case "2.02":
                            case "2.03":
                            case "2.04":
                            case "2.05":
                            case "2.06":
                            case "2.07":
                            case "2.08":
                            case "2.09":
                            case "2.10":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaEditable;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.05":
                            case "2.01":
                            case "2.02":
                            case "2.03":
                            case "2.04":
                            case "2.05":
                            case "2.06":
                            case "2.07":
                            case "2.08":
                            case "2.09":
                            case "2.10":
                            case "2.11":
                            case "2.12":
                            case "5.01":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = "";
                                }
                                break;
                        }
                    }
                }

                if (objCfgCentral.Tipocentral == ConstantesCombustibles.CentralExistente)
                {
                    if (objSeccion.TipoOpcionSeccion == "ENO") //Energía consumida igual a cero (0) durante el mes anterior
                    {
                        foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                        {
                            if (objFichaItem.Cbftitnumeral == "2.12")
                            { }

                            switch (objFichaItem.Cbftitnumeral)
                            {
                                case "2.02":
                                case "2.03":
                                case "2.05":
                                case "2.06":
                                case "2.07":
                                case "2.08":
                                case "2.09":
                                case "2.10":
                                case "2.11":
                                case "1.05":
                                case "2.01":
                                case "2.04":
                                case "2.12":
                                case "5.01":
                                    var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                    foreach (var objTmp in listaObjTmpEdit)
                                    {
                                        objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                    }
                                    break;
                            }

                            switch (objFichaItem.Cbftitnumeral)
                            {
                                case "2.02":
                                case "2.03":
                                case "2.05":
                                case "2.06":
                                case "2.07":
                                case "2.08":
                                case "2.09":
                                case "2.10":
                                case "2.11":
                                    var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                    foreach (var objTmp2 in listaObjTmpEdit)
                                    {
                                        if (actualizarDatoCelda) objTmp2.Cbevdavalor = "";
                                    }
                                    objFichaItem.OmitirCalculoFormula = true;

                                    break;
                                //asignar datos
                                case "1.05":
                                case "2.01":
                                case "2.04":
                                case "2.12":
                                case "5.01":
                                    var objTmp = listaDatoWeb.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi); //handson actual

                                    var objTmpUltVig = listaDatoCentralUltVig.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi); //bd envio anterior
                                    string valorUltVig = objTmpUltVig != null ? objTmpUltVig.Cbevdavalor : "";

                                    //asignar dato con el valor del mes pasado
                                    if (objTmp != null)
                                    {
                                        if (actualizarDatoCelda) objTmp.Cbevdavalor = valorUltVig;
                                    }
                                    //cambiar formula a numero para que tome el valor anterior
                                    objFichaItem.OmitirCalculoFormula = true;
                                    break;
                            }
                        }
                    }
                }
                else
                {
                    if (objSeccion.TipoOpcionSeccion == "ENO") //Energía consumida igual a cero (0) durante el mes anterior
                    {
                        foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                        {
                            //usar estado default
                            //asignar datos
                            switch (objFichaItem.Cbftitnumeral)
                            {
                                case "1.05":
                                case "2.01":
                                case "2.02":
                                case "2.03":
                                case "2.04":
                                case "2.05":
                                case "2.06":
                                case "2.07":
                                case "2.08":
                                case "2.09":
                                case "2.10":
                                case "2.11":
                                case "2.12":
                                case "5.01":
                                    var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                    foreach (var objTmp2 in listaObjTmpEdit)
                                    {
                                        if (actualizarDatoCelda) objTmp2.Cbevdavalor = "";
                                    }
                                    break;
                            }
                        }
                    }
                }
            }

            if (objSeccion.Cbftitnumeral == "3.0")
            {
                //No aplica
                if (objSeccion.TipoOpcionSeccion == "NA")
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.06":
                            case "3.01":
                            case "3.02":
                            case "3.03":
                            case "3.04":
                            case "3.05":
                            case "3.06":
                            case "3.07":
                            case "3.08":
                            case "3.09":
                            case "3.10":
                            case "3.11":
                            case "3.12":
                            case "3.13":
                            case "3.14":
                            case "3.15":
                            case "3.16":
                            case "3.17":
                            case "5.02":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = ConstantesCombustibles.TextoNoAplica;
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                }
                                break;
                        }
                    }
                }

                //Número de proveedores
                if (objSeccion.TipoOpcionSeccion == "ESI" || (objCfgCentral.Tipocentral == ConstantesCombustibles.CentralNueva && objSeccion.TipoOpcionSeccion == "ENO"))
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "3.02":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.06":
                            case "3.01":
                            //case "3.02":
                            case "3.03":
                            case "3.04":
                            case "3.05":
                            case "3.06":
                            case "3.07":
                            //case "3.08":
                            case "3.09":
                            case "3.10":
                            case "3.11":
                            case "3.12":
                            case "3.13":
                            case "3.14":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaEditable;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.06":
                            case "3.01":
                            //case "3.02":
                            case "3.03":
                            case "3.04":
                            case "3.05":
                            case "3.06":
                            case "3.07":
                            //case "3.08":
                            case "3.09":
                            case "3.10":
                            case "3.11":
                            case "3.12":
                            case "3.13":
                            case "3.14":
                            case "5.02":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = "";
                                }
                                break;
                        }
                    }

                    GrillaGasSetearEstadoEspecialXSeccion(actualizarDatoCelda, objCfgCentral.Tipocentral, objSeccion, listaDatoWeb, ref listaItemXFichaBD);
                }

                if (objCfgCentral.Tipocentral == ConstantesCombustibles.CentralExistente && objSeccion.TipoOpcionSeccion == "ENO") //No cuenta con tipo de servicio firme y no registró consumo durante el mes anterior
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            //solo lectura 
                            case "3.02":
                            case "3.03":
                            case "3.04":
                            case "3.06":
                            case "3.07":
                            case "3.08":
                            case "3.09":
                            case "3.10":
                            case "3.11":
                            case "3.12":
                            case "3.13":
                            case "3.14":
                            case "3.15":
                            case "3.16":
                            case "1.06":
                            case "3.01":
                            case "3.05":
                            case "3.17":
                            case "5.02":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            // vacio
                            case "3.02":
                            case "3.03":
                            case "3.04":
                            case "3.06":
                            case "3.07":
                            case "3.08":
                            case "3.09":
                            case "3.10":
                            case "3.11":
                            case "3.12":
                            case "3.13":
                            case "3.14":
                            case "3.15":
                            case "3.16":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp2 in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp2.Cbevdavalor = "";
                                }
                                break;
                            //asignar datos
                            case "1.06":
                            case "3.01":
                            case "3.05":
                            case "3.17":
                            case "5.02":
                                var objTmp = listaDatoWeb.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi); //handson actual

                                var objTmpUltVig = listaDatoCentralUltVig.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi); //bd envio anterior
                                string valorUltVig = objTmpUltVig != null ? objTmpUltVig.Cbevdavalor : "";

                                //asignar dato con el valor del mes pasado
                                if (objTmp != null)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = valorUltVig;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            //asignar datos
                            case "3.17":
                            case "5.02":
                                //cambiar formula a numero para que tome el valor anterior
                                objFichaItem.OmitirCalculoFormula = true;
                                break;
                        }
                    }
                }

                //CASO ESPECIAL 
                if (objCfgCentral.Tipocentral == ConstantesCombustibles.CentralNueva)
                {
                    if ((objSeccion.TipoOpcionSeccion == "ESI" || objSeccion.TipoOpcionSeccion == "ENO") && objSeccion.NumColSeccion == 1) //Cuenta con tipo de servicio firme y/o registró consumo durante el mes anterior
                    {
                        foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                        {
                            switch (objFichaItem.Cbftitnumeral)
                            {
                                case "3.13":
                                case "3.14":
                                case "3.15":
                                case "3.16":
                                    var objTmp = listaDatoWeb.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi);
                                    if (objTmp != null)
                                    {
                                        if (actualizarDatoCelda) objTmp.Cbevdavalor = ConstantesCombustibles.TextoNoAplica;
                                        objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                    }
                                    break;
                            }
                        }
                    }
                }
            }

            if (objSeccion.Cbftitnumeral == "4.0")
            {
                //No aplica
                if (objSeccion.TipoOpcionSeccion == "NA")
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.07":
                            case "1.08":
                            case "4.01":
                            case "4.02":
                            case "4.03":
                            case "4.04":
                            case "4.05":
                            case "4.06":
                            case "4.07":
                            case "4.08":
                            case "4.09":
                            case "4.10":
                            case "4.11":
                            case "4.12":
                            case "4.13":
                            case "4.14":
                            case "4.15":
                            case "4.16":
                            case "5.03":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = ConstantesCombustibles.TextoNoAplica;
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                }
                                break;
                        }
                    }
                }

                //Número de proveedores
                if (objSeccion.TipoOpcionSeccion == "ESI" || (objCfgCentral.Tipocentral == ConstantesCombustibles.CentralNueva && objSeccion.TipoOpcionSeccion == "ENO"))
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "4.02":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.07":
                            case "1.08":
                            case "4.01":
                            //case "4.02":
                            case "4.03":
                            case "4.04":
                            case "4.05":
                            case "4.06":
                            case "4.07":
                            case "4.08":
                            case "4.09":
                            case "4.10":
                            case "4.11":
                            case "4.12":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaEditable;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "1.07":
                            case "1.08":
                            case "4.01":
                            //case "4.02":
                            case "4.03":
                            case "4.04":
                            case "4.05":
                            case "4.06":
                            case "4.07":
                            case "4.08":
                            case "4.09":
                            case "4.10":
                            case "4.11":
                            case "4.12":
                            case "4.13":
                            case "4.14":
                            case "4.15":
                            case "4.16":
                            case "5.03":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = "";
                                }
                                break;
                        }
                    }

                    GrillaGasSetearEstadoEspecialXSeccion(actualizarDatoCelda, objCfgCentral.Tipocentral, objSeccion, listaDatoWeb, ref listaItemXFichaBD);
                }

                if (objCfgCentral.Tipocentral == ConstantesCombustibles.CentralExistente && objSeccion.TipoOpcionSeccion == "ENO") //No cuenta con tipo de servicio firme y no registró consumo durante el mes anterior
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            //solo lectura y vacio
                            case "4.02":
                            case "4.03":
                            case "4.04":
                            case "4.06":
                            case "4.07":
                            case "4.08":
                            case "4.09":
                            case "4.10":
                            case "4.11":
                            case "4.12":
                            case "4.13":
                            case "4.14":
                            case "4.15":
                            case "1.07":
                            case "1.08":
                            case "4.01":
                            case "4.05":
                            case "4.16":
                            case "5.03":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            //solo lectura y vacio
                            case "4.02":
                            case "4.03":
                            case "4.04":
                            case "4.06":
                            case "4.07":
                            case "4.08":
                            case "4.09":
                            case "4.10":
                            case "4.11":
                            case "4.12":
                            case "4.13":
                            case "4.14":
                            case "4.15":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp2 in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp2.Cbevdavalor = "";
                                }
                                break;
                            //asignar datos
                            case "1.07":
                            case "1.08":
                            case "4.01":
                            case "4.05":
                            case "4.16":
                            case "5.03":
                                var objTmp = listaDatoWeb.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi); //handson actual

                                var objTmpUltVig = listaDatoCentralUltVig.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi); //bd envio anterior
                                string valorUltVig = objTmpUltVig != null ? objTmpUltVig.Cbevdavalor : "";

                                //asignar dato con el valor del mes pasado
                                if (objTmp != null)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = valorUltVig;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            //asignar datos
                            case "4.13":
                            case "4.14":
                            case "4.15":
                            case "4.16":
                            case "5.03":
                                //cambiar formula a numero para que tome el valor anterior
                                objFichaItem.OmitirCalculoFormula = true;
                                break;
                        }
                    }
                }

                //CASO ESPECIAL 
                if (objCfgCentral.Tipocentral == ConstantesCombustibles.CentralNueva)
                {
                    if (objSeccion.TipoOpcionSeccion == "ENO" && objSeccion.NumColSeccion == 1) //No cuenta con tipo de servicio firme y no registró consumo durante el mes anterior
                    {
                        foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                        {
                            switch (objFichaItem.Cbftitnumeral)
                            {
                                case "4.08":
                                case "4.11":
                                case "4.15":
                                    var objTmp = listaDatoWeb.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi);
                                    if (objTmp != null)
                                    {
                                        if (actualizarDatoCelda) objTmp.Cbevdavalor = ConstantesCombustibles.TextoNoAplica;
                                        objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                    }
                                    break;
                            }
                        }
                    }

                }

                if (objSeccion.TipoOpcionSeccion == "EDS") //Cuenta con la aplicación del mecanismo de compensación regulado por el Decreto Supremo N° 035-2013-EM y/o sus modificatorias
                {
                    foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                    {
                        switch (objFichaItem.Cbftitnumeral)
                        {
                            //solo lectura y vacio
                            case "4.01":
                            case "4.02":
                            case "4.03":
                            case "4.04":
                            case "4.05":
                            case "4.06":
                            case "4.07":
                            case "4.08":
                            case "4.09":
                            case "4.10":
                            case "4.11":
                            case "4.12":
                            case "4.13":
                            case "4.14":
                            case "4.15":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp in listaObjTmpEdit)
                                {
                                    objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                }
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            //solo lectura y vacio
                            case "1.07":
                            case "1.08":
                            case "4.01":
                            case "4.02":
                            case "4.03":
                            case "4.04":
                            case "4.05":
                            case "4.06":
                            case "4.07":
                            case "4.08":
                            case "4.09":
                            case "4.10":
                            case "4.11":
                            case "4.12":
                            case "4.13":
                            case "4.14":
                            case "4.15":
                                var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                foreach (var objTmp2 in listaObjTmpEdit)
                                {
                                    if (actualizarDatoCelda) objTmp2.Cbevdavalor = "";
                                }
                                break;
                            //asignar datos
                            case "4.16":
                            case "5.03":
                                var objTmp = listaDatoWeb.Find(x => x.Ccombcodi == objFichaItem.Ccombcodi);
                                if (objTmp != null)
                                {
                                    if (actualizarDatoCelda) objTmp.Cbevdavalor = "0";
                                }

                                //cambiar formula a numero para que tome el valor anterior
                                objFichaItem.OmitirCalculoFormula = true; //items formulas y numeros
                                break;
                        }

                        switch (objFichaItem.Cbftitnumeral)
                        {
                            case "4.13":
                            case "4.16":
                            case "5.03":
                                //cambiar formula a numero para que tome el valor anterior
                                objFichaItem.OmitirCalculoFormula = true; //items formulas y numeros
                                break;
                        }
                    }
                }

            }
        }

        private void GrillaGasSetearEstadoEspecialXSeccion(bool actualizarDatoCelda, string tipoCentral, CbFichaItemDTO objSeccion
                                        , List<CbDatosDTO> listaDatoWeb, ref List<CbFichaItemDTO> listaItemXFichaBD)
        {
            //setear celdas especiales por valor de item 3.2 y 4.2
            if (objSeccion.TieneListaDesplegable)
            {
                int concepcodiEspecial = 0;
                if (objSeccion.Cbftitnumeral == "3.0") concepcodiEspecial = 150;
                if (objSeccion.Cbftitnumeral == "4.0") concepcodiEspecial = 166;

                var listaTmp2 = listaDatoWeb.Where(x => x.Ccombcodi == objSeccion.ConcepcodiDesplegable).ToList(); //fila de datos de Tipo de servicio contratado

                for (var c = 0; c < objSeccion.ListaOpcionDesplegable.Count; c++)
                {
                    string opdesp = objSeccion.ListaOpcionDesplegable[c];

                    int totalXOpDesp = listaTmp2.Where(x => x.Cbevdavalor == opdesp).Count();

                    //obtener posiciones de la opcion en la seccion antes de los cambios
                    int posIni = -1;
                    int posFin = -1;
                    for (var c1 = 0; c1 < listaTmp2.Count; c1++)
                    {
                        if ((listaTmp2[c1].Cbevdavalor ?? "").ToUpper() == (opdesp ?? "").ToUpper())
                        {
                            if (posIni < 0) posIni = c1;
                            posFin = c1;
                        }
                    }

                    //efectuar cambios a la estructura
                    int numFilas = objSeccion.ListaOpcionNumcolDesplegableMesActual[c];
                    if (numFilas > 0 && posIni >= 0)
                    {
                        foreach (var objItem in objSeccion.ListaItemXSeccion)
                        {
                            var listaTmp3 = listaDatoWeb.Where(x => x.Ccombcodi == objItem.Ccombcodi).ToList(); //fila de datos de item

                            var listaXTipoDesp = listaTmp3.GetRange(posIni, posFin - posIni + 1).ToList();

                            foreach (var objDato in listaXTipoDesp)
                            {
                                if (objItem.Cbftittipocelda == "M" || objItem.Ccombcodi == concepcodiEspecial)
                                {
                                    //
                                    string configuracionCelda = ((string)objItem.GetType().GetProperty("Cbftitceldatipo" + (c + 1)).GetValue(objItem, null));

                                    //3.2 Tipo de servicio contratado, 4.2 Tipo de servicio contratado
                                    if (objItem.Cbftitnumeral == "3.02" || objItem.Cbftitnumeral == "4.02")
                                        configuracionCelda = "SL";

                                    switch (configuracionCelda)
                                    {
                                        case "E": //editable
                                            objDato.Cbevdaestado = ConstantesCombustibles.EstadoCeldaEditable;
                                            break;
                                        case "NE": //no editable
                                            objDato.Cbevdaestado = ConstantesCombustibles.EstadoCeldaNoEditable;
                                            break;
                                        case "SLNA": //solo lectura no aplica
                                            if (actualizarDatoCelda) objDato.Cbevdavalor = ConstantesCombustibles.TextoNoAplica;
                                            objDato.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                            break;
                                        case "SL": //solo lectura
                                            objDato.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                            break;
                                    }
                                }
                            }
                        }
                    }
                }

                var listaTmp4 = listaDatoWeb.Where(x => x.Ccombcodi == concepcodiEspecial && (x.Cbevdavalor ?? "").ToUpper() == "NO APLICA").ToList();
                objSeccion.NumColNoaplica = listaTmp4.Count;

                //caso especial para la sección 4 cuando no se escoge la columna "GNC o GNL", el ítem 1.8 aparece el texto "No Aplica" de manera bloqueada
                if (objSeccion.Cbftitnumeral == "4.0")
                {
                    var numColGnc = objSeccion.ListaOpcionNumcolDesplegableMesActual[3];

                    if (numColGnc == 0)
                    {
                        foreach (var objFichaItem in listaItemXFichaBD) //iterar todos los items
                        {
                            //Utilizar estado default
                            //Setear valores especificos
                            switch (objFichaItem.Cbftitnumeral)
                            {
                                case "1.08":
                                    var listaObjTmpEdit = listaDatoWeb.Where(x => x.Ccombcodi == objFichaItem.Ccombcodi).ToList();
                                    foreach (var objTmp in listaObjTmpEdit)
                                    {
                                        if (actualizarDatoCelda) objTmp.Cbevdavalor = ConstantesCombustibles.TextoNoAplica;
                                        objTmp.Cbevdaestado = ConstantesCombustibles.EstadoCeldaSoloLectura;
                                    }
                                    break;
                            }
                        }
                    }
                }
            }
        }

        private void GrillaGasSetearValorDespuesCalculoFormula(List<CbFichaItemDTO> listaItemXFichaBD, ref List<CbDatosDTO> listaDatoWeb)
        {
            //Celda excel de cada dato
            int rowExcel = 7;
            foreach (var objSeccion in listaItemXFichaBD.Where(x => x.EsSeccion))
            {
                rowExcel++;

                foreach (var objItem in objSeccion.ListaItemXSeccion)
                {
                    rowExcel++;

                    int colExcel = 6;
                    var listaFilaDatoWeb = listaDatoWeb.Where(x => x.Ccombcodi == objItem.Ccombcodi).ToList();

                    foreach (var objDato in listaFilaDatoWeb)
                    {
                        objDato.PosRowExcel = rowExcel;
                        objDato.PosColExcel = colExcel;
                        objDato.CeldaExcel = GetExcelColumnName(colExcel) + rowExcel;

                        colExcel++;
                    }
                }
            }

            //Evaluar formula web
            foreach (var objSeccion in listaItemXFichaBD.Where(x => x.EsSeccion))
            {
                foreach (var objItem in objSeccion.ListaItemXSeccion)
                {
                    bool volverACalcularCelda = true;
                    var objItemBD = listaItemXFichaBD.Find(x => x.Ccombcodi == objItem.Ccombcodi);
                    if (objItemBD != null) volverACalcularCelda = !objItemBD.OmitirCalculoFormula;

                    if (objItem.Cbftitnumeral == "2.09")
                    { }
                    if (objItem.Cbftitnumeral == "2.11")
                    { }
                    if (objItem.Cbftitnumeral == "2.12")
                    { }
                    if (objItem.Cbftitnumeral == "3.08")
                    { }
                    if (objItem.Cbftitnumeral == "3.15")
                    { }
                    if (objItem.Cbftitnumeral == "3.16")
                    { }
                    if (objItem.Cbftitnumeral == "3.17")
                    { }
                    if (objItem.Cbftitnumeral == "4.13")
                    { }
                    if (objItem.Cbftitnumeral == "4.16")
                    { }
                    if (objItem.Cbftitnumeral == "5.03")
                    { }
                    if (objItem.Cbftittipodato == "FORMULA")
                    {
                        try
                        {
                            if (objItem.Cbftittipocelda == "M" && objSeccion.NumColSeccion > 1) //multicelda
                            {
                                for (var j = 0; j < objSeccion.NumColSeccion; j++)
                                {
                                    //calculo del valor de formula
                                    var l_param = GetParametroXColumna(listaDatoWeb, listaItemXFichaBD, j, objItem.Ccombcodi ?? 0, true);
                                    var l_param_CeldaExcel = GetParametroXColumna(listaDatoWeb, listaItemXFichaBD, j, objItem.Ccombcodi ?? 0, false);
                                    decimal valor = (decimal)l_param.GetEvaluate(objItem.Cbftitabrev);
                                    if (valor < 0) valor = 0;

                                    //setear valor
                                    var objTmp = GetCeldaDatoXPosColGas(j, objItem.Ccombcodi ?? 0, listaDatoWeb);
                                    if (objTmp != null && (objTmp.Cbevdavalor ?? "").Trim().ToUpper() != "NO APLICA" && volverACalcularCelda)
                                    {
                                        objTmp.Cbevdavalor = valor.ToString();
                                        objTmp.Valor = valor;
                                        objTmp.FormulaValor = GetFormulaExcel(objItem.Cbftitnumeral, objItem.Cbftitabrev, objItem.Cbftitformula, l_param_CeldaExcel);
                                    }
                                }
                            }
                            else //uni 
                            {
                                if (objItem.Cbftittipocelda == "U" || (objItem.Cbftittipocelda == "M" && objSeccion.NumColSeccion == 1))
                                {
                                    int posCol = -1;
                                    if (objSeccion.NumColNoaplica > 0 && (objItem.Ccombcodi == 150 || objItem.Ccombcodi == 166))
                                        posCol = objSeccion.NumColNoaplica;

                                    //calculo del valor de formula
                                    var l_param = GetParametroXColumna(listaDatoWeb, listaItemXFichaBD, -1, objItem.Ccombcodi ?? 0, true);
                                    var l_param_CeldaExcel = GetParametroXColumna(listaDatoWeb, listaItemXFichaBD, -1, objItem.Ccombcodi ?? 0, false);
                                    decimal valor = (decimal)l_param.GetEvaluate(objItem.Cbftitabrev);
                                    if (valor < 0) valor = 0;

                                    //setear valor
                                    var listaFilaDatoWeb = listaDatoWeb.Where(x => x.Ccombcodi == objItem.Ccombcodi).ToList();
                                    var objTmpDatoFormula = listaFilaDatoWeb.FirstOrDefault();
                                    if (posCol > 0 && listaFilaDatoWeb.Count > posCol) objTmpDatoFormula = listaFilaDatoWeb[posCol];
                                    if (objTmpDatoFormula != null && (objTmpDatoFormula.Cbevdavalor ?? "").Trim().ToUpper() != "NO APLICA" && volverACalcularCelda)
                                    {
                                        //if (objSeccion.Cbftitnumeral == "5.0") valor = Math.Round(valor, 4); //SOLO para resultados

                                        objTmpDatoFormula.Cbevdavalor = valor.ToString();
                                        objTmpDatoFormula.Valor = valor;

                                        string formulaValorTmp3 = GetFormulaExcel(objItem.Cbftitnumeral, objItem.Cbftitabrev, objItem.Cbftitformula, l_param_CeldaExcel);
                                        foreach (var objTmp3 in listaFilaDatoWeb)
                                        {
                                            if ((objTmp3.Cbevdavalor ?? "").Trim().ToUpper() != "NO APLICA")
                                                objTmp3.FormulaValor = formulaValorTmp3;
                                        }
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            //puede salir error al evaluar una formula, no es necesario grabar en log
                        }
                    }
                }
            }
        }

        private static string GetExcelColumnName(int columnNumber)
        {
            int dividend = columnNumber;
            string columnName = String.Empty;
            int modulo;

            while (dividend > 0)
            {
                modulo = (dividend - 1) % 26;
                columnName = Convert.ToChar(65 + modulo).ToString() + columnName;
                dividend = (int)((dividend - modulo) / 26);
            }

            return columnName;
        }

        private string GetFormulaExcel(string cbftitnumeral, string abrevPlantilla, string formulaPlantilla, n_parameter variablesCeldaExcel)
        {
            //ordenar pares (variable, celda excel)
            List<GenericoDTO> listaMap = new List<GenericoDTO>();
            foreach (var objKey in variablesCeldaExcel.Keys)
            {
                listaMap.Add(new GenericoDTO() { String1 = objKey.ToString(), String2 = variablesCeldaExcel[objKey].ToString() });
            }
            listaMap = listaMap.OrderByDescending(x => x.String1.Length).ToList();

            string formulaCelda = "";
            bool esCasoEspecial = cbftitnumeral == "2.12" || cbftitnumeral == "3.16";

            //caso especiales (suma de productos)
            if (cbftitnumeral == "2.12")
            {
                var lista209 = listaMap.Where(x => x.String1.ToUpper().StartsWith("SEC2ENERG_")).OrderByDescending(x => x.String1).ToList();
                var lista211 = listaMap.Where(x => x.String1.ToUpper().StartsWith("SEC2PRECIOXPROV_")).OrderByDescending(x => x.String1).ToList();

                List<string> lTmp = new List<string>();
                for (var i = 0; i < lista209.Count(); i++)
                {
                    lTmp.Add(string.Format("{0}*{1}", lista209[i].String2, lista211[i].String2));
                }
                var sSumProd = string.Join("+", lTmp);
                var sEnerg = string.Join("+", lista209.Select(x => x.String2));
                formulaCelda = string.Format("({0})/({1})", sSumProd, sEnerg);
            }
            if (cbftitnumeral == "3.16")
            {
                var lista313 = listaMap.Where(x => x.String1.ToUpper().StartsWith("SEC3VMSN_")).OrderByDescending(x => x.String1).ToList();

                var suma = string.Join("+", lista313.Select(x => x.String2));
                formulaCelda = string.Format("({0})", suma);
            }

            if (cbftitnumeral == "3.17")
            {
                var lista315 = listaMap.Where(x => x.String1.ToUpper().StartsWith("SEC3CMS_")).OrderByDescending(x => x.String1).ToList();

                var suma = string.Join("+", lista315.Select(x => x.String2));
                formulaCelda = string.Format("({0})", suma);

                var regMap315 = listaMap.Find(x => x.String1.ToUpper() == "SEC3CMS");
                if (regMap315 != null)
                {
                    regMap315.String2 = formulaCelda;
                }
            }

            if (!esCasoEspecial)
            {
                //obtener celdas excel
                formulaCelda = (formulaPlantilla + "").ToUpper();
                foreach (var reg in listaMap)
                {
                    formulaCelda = formulaCelda.Replace(reg.String1, reg.String2);
                }
            }

            /*if (cbftitnumeral == "5.01" || cbftitnumeral == "5.02" || cbftitnumeral == "5.03")
            {
                formulaCelda = string.Format("ROUND({0},4)", formulaCelda);
            }*/

            //validacion numero negativo
            if (formulaCelda.Contains("-"))
                formulaCelda = string.Format("IF({0}>0,{0},0)", formulaCelda);

            return formulaCelda;
        }

        private n_parameter GetParametroXColumna(List<CbDatosDTO> listaDatoWeb, List<CbFichaItemDTO> listaItemXFichaBD, int posCol, int ccombcodiOmitirEval, bool evaluarFormula)
        {
            //calcular valor de fórmula
            n_parameter l_param = new n_parameter();

            foreach (var objSeccion in listaItemXFichaBD)
            {
                if (objSeccion.EsSeccion)
                {
                    foreach (var objItem in objSeccion.ListaItemXSeccion)
                    {
                        if (objItem.Cbftitnumeral == "2.09")
                        { }
                        if (objItem.Cbftitnumeral == "2.11")
                        { }
                        if (objItem.Cbftitnumeral == "2.12")
                        { }
                        if (objItem.Cbftitnumeral == "3.13")
                        { }
                        if (objItem.Cbftitnumeral == "3.15")
                        { }
                        if (objItem.Cbftitnumeral == "3.16")
                        { }
                        if (objItem.Cbftitnumeral == "3.17")
                        { }

                        if (objItem.Cbftittipodato == "NUMERO" || objItem.Cbftittipodato == "FORMULA")
                        {
                            CbDatosDTO objDato = null;
                            var valorNumero = "0";
                            var celdaExcel = "";
                            if (objItem.Cbftittipocelda == "M")
                            {
                                if (posCol == -1)
                                {
                                    decimal valorCol = 0;
                                    for (var j = 0; j < objSeccion.NumColSeccion; j++)
                                    {
                                        objDato = GetCeldaDatoXPosColGas(j, objItem.Ccombcodi ?? 0, listaDatoWeb);
                                        var objSinNA = GetCeldaDatoXPosColGasSinNA(objItem.Ccombcodi ?? 0, listaDatoWeb);
                                        if (objDato != null && j == 0) celdaExcel = objDato.CeldaExcel;
                                        if (objSinNA != null) celdaExcel = objSinNA.CeldaExcel;
                                        if (objDato != null && !string.IsNullOrEmpty(objDato.Cbevdavalor)) valorCol += objDato.Valor;

                                        //celdas formuladas de microsoft excel
                                        string celdaExcelCol = "";
                                        if (objDato != null) celdaExcelCol = objDato.CeldaExcel;
                                        if (!evaluarFormula)
                                        {
                                            //celda excel
                                            if (!string.IsNullOrEmpty(celdaExcelCol))
                                            {
                                                celdaExcelCol = string.Format("IF(ISNUMBER({0}),{0},0)", celdaExcelCol);
                                            }
                                            l_param.SetData(string.Format("{0}_{1}", objItem.Cbftitabrev, j), celdaExcelCol);
                                        }
                                    }

                                    if (valorCol < 0) valorCol = 0;
                                    valorNumero = valorCol.ToString();

                                    //celdas formuladas de microsoft excel
                                    if (!evaluarFormula)
                                    {
                                        //celda excel
                                        if (!string.IsNullOrEmpty(celdaExcel))
                                        {
                                            celdaExcel = string.Format("IF(ISNUMBER({0}),{0},0)", celdaExcel);
                                        }
                                        l_param.SetData(objItem.Cbftitabrev, celdaExcel);
                                    }
                                }
                                else
                                {
                                    objDato = GetCeldaDatoXPosColGas(posCol, objItem.Ccombcodi ?? 0, listaDatoWeb);
                                    if (objDato != null) celdaExcel = objDato.CeldaExcel;
                                    if (objDato != null && !string.IsNullOrEmpty(objDato.Cbevdavalor)) valorNumero = objDato.Cbevdavalor.Trim();

                                    //celdas formuladas de microsoft excel
                                    if (!evaluarFormula)
                                    {
                                        //celda excel
                                        if (!string.IsNullOrEmpty(celdaExcel))
                                        {
                                            celdaExcel = string.Format("IF(ISNUMBER({0}),{0},0)", celdaExcel);
                                        }
                                        l_param.SetData(objItem.Cbftitabrev, celdaExcel);
                                    }
                                }
                            }
                            else
                            {
                                objDato = GetCeldaDatoXPosColGas(0, objItem.Ccombcodi ?? 0, listaDatoWeb);
                                var objSinNA = GetCeldaDatoXPosColGasSinNA(objItem.Ccombcodi ?? 0, listaDatoWeb);
                                if (objDato != null) celdaExcel = objDato.CeldaExcel;
                                if (objSinNA != null) celdaExcel = objSinNA.CeldaExcel;
                                if (objDato != null && !string.IsNullOrEmpty(objDato.Cbevdavalor)) valorNumero = objDato.Cbevdavalor.Trim();

                                //celdas formuladas de microsoft excel
                                if (!evaluarFormula)
                                {
                                    //celda excel
                                    if (!string.IsNullOrEmpty(celdaExcel))
                                    {
                                        celdaExcel = string.Format("IF(ISNUMBER({0}),{0},0)", celdaExcel);
                                    }

                                    l_param.SetData(objItem.Cbftitabrev, celdaExcel);
                                }
                            }

                            if (evaluarFormula)
                            {
                                //caso especial 3.17
                                if (ccombcodiOmitirEval == 151)//3.17
                                {
                                    //setear valor de formula (valor numerico o formula)
                                    if (objDato != null)
                                    {
                                        var valorPuedeSerNegativo = (objItem.Cbftitformula ?? "").Contains("-");

                                        //listaBDTot.Add(new PrGrupoDTO() { });
                                        if (objItem.Cbftittipodato == "NUMERO" && !objItem.OmitirCalculoFormula)
                                        {
                                            l_param.SetData(objItem.Cbftitabrev, valorNumero);
                                        }
                                        if (objItem.Cbftittipodato == "FORMULA" && !objItem.OmitirCalculoFormula)
                                        {
                                            decimal.TryParse(valorNumero, out decimal valorDecimal);

                                            if (valorNumero.ToUpper() != "NO APLICA" && valorDecimal > 0 && objItem.Ccombcodi != ccombcodiOmitirEval)
                                                l_param.SetData(objItem.Cbftitabrev, valorNumero);
                                            else
                                            {
                                                l_param.SetData(objItem.Cbftitabrev, objItem.Cbftitformula);
                                                //evaluar las otras formulas
                                                if (true) //valorPuedeSerNegativo
                                                {
                                                    decimal valor = (decimal)l_param.GetEvaluate(objItem.Cbftitabrev);
                                                    if (valor < 0) valor = 0;
                                                    l_param.SetData(objItem.Cbftitabrev, valor);
                                                }
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    //setear valor de formula (valor numerico o formula)
                                    if (objDato != null)
                                    {
                                        //listaBDTot.Add(new PrGrupoDTO() { });
                                        if (objItem.Cbftittipodato == "NUMERO" && !objItem.OmitirCalculoFormula)
                                        {
                                            l_param.SetData(objItem.Cbftitabrev, valorNumero);
                                        }
                                        if (objItem.Cbftittipodato == "FORMULA" && !objItem.OmitirCalculoFormula)
                                        {
                                            if (objItem.Ccombcodi == 151)//3.17
                                            {
                                                l_param.SetData(objItem.Cbftitabrev, valorNumero);
                                            }
                                            else
                                            {
                                                l_param.SetData(objItem.Cbftitabrev, objItem.Cbftitformula);

                                                //evaluar las otras formulas
                                                if (objItem.Ccombcodi != ccombcodiOmitirEval)
                                                {
                                                    decimal valor = (decimal)l_param.GetEvaluate(objItem.Cbftitabrev);
                                                    if (valor < 0) valor = 0;
                                                    l_param.SetData(objItem.Cbftitabrev, valor);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                        }
                    }
                }
            }

            return l_param;
        }

        private PR31FormGasCentral GetHandsonGasFormato3(bool esIntranet, CbCentralxfenergDTO objCfgCentral, CbFichaDTO objFicha, List<CbDatosDTO> listaDatoBD
                                            , bool incluirObservacion, int tipoPresentacionDato, int estadoEnvio)
        {
            PR31FormGasCentral objCentral = new PR31FormGasCentral();
            objCentral.Equicodi = objCfgCentral.Equicodi;
            objCentral.Central = objCfgCentral.Equinomb;
            objCentral.Fenergcodi = objCfgCentral.Fenergcodi;
            objCentral.Grupocodi = objCfgCentral.Grupocodi;
            objCentral.Cbftcodi = objFicha.Cbftcodi;
            objCentral.Estenvcodi = estadoEnvio;

            List<CeldaErrorCombustible> listaErrores = new List<CeldaErrorCombustible>();

            //número de columnas
            objCentral.NumMaxColData = objFicha.ListaSeccion.Max(x => x.NumColSeccion);

            //Crear objeto
            HandsonModel objHandson = new HandsonModel();

            var listaColWidth = new List<int>();
            listaColWidth.Add(40); //1
            listaColWidth.Add(40); //1.8
            listaColWidth.Add(400); //propiedad
            listaColWidth.Add(80); //m3
            for (var col = 1; col <= objCentral.NumMaxColData; col++)
                listaColWidth.Add(150); //valor
            listaColWidth.Add(600); //instructivo
            listaColWidth.Add(90); //confidencial
            if (incluirObservacion)
            {
                listaColWidth.Add(300); //
                listaColWidth.Add(300); //
                listaColWidth.Add(300); //
                listaColWidth.Add(100); //
            }

            //inicializar matriz excel
            int nFil = objFicha.TotalItem + 1;
            int nCol = listaColWidth.Count;

            string[][] listaExcelData = new string[nFil][];
            short[][] matrizTipoEstado = new short[nFil][];
            int[][] matrizDigitoDecimal = new int[nFil][];
            string[][] matrizCeldaExcel = new string[nFil][];
            for (int i = 0; i < nFil; i++)
            {
                listaExcelData[i] = new string[nCol];
                matrizTipoEstado[i] = new short[nCol];
                matrizDigitoDecimal[i] = new int[nCol];
                matrizCeldaExcel[i] = new string[nCol];
            }

            for (int i = 0; i < nFil; i++)
            {
                for (int j = 0; j < nCol; j++)
                {
                    listaExcelData[i][j] = "";
                    matrizTipoEstado[i][j] = ConstantesCombustibles.EstadoCeldaNoEditable; //no editable (celda azul)
                    matrizDigitoDecimal[i][j] = ConstantesCombustibles.NumDecFormulaDefault; //mínimo 4 decimales
                    matrizCeldaExcel[i][j] = "";
                }
            }

            //llenar data
            List<CbFichaItemDTO> listaItem = new List<CbFichaItemDTO>();
            List<CbFichaItemDTO> listaItemObs = new List<CbFichaItemDTO>();
            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            int maxFilaNoTabla = 0;
            int rowData = maxFilaNoTabla + 1;

            int colNumSeccion = 0;
            int colNumItem = colNumSeccion + 1;
            int colProp = colNumItem + 1;
            int colUnidad = colProp + 1;
            int colValorIni = colUnidad + 1;
            int colValorFin = colValorIni + objCentral.NumMaxColData - 1;
            int colInstruc = colValorFin + 1;
            int colConf = colInstruc + 1;
            int colObsCOES = colConf + 1;
            int colSubsGen = colObsCOES + 1;
            int colRptaCOES = colSubsGen + 1;
            int colEstado = colRptaCOES + 1;

            //primera fila vacia, antes de la fila de confidencial y observaciones
            var cellMerge = new CeldaMerge();
            cellMerge.col = colNumSeccion;
            cellMerge.row = 0;
            cellMerge.colspan = colConf; //agrupa 5 columnas y columna de datos
            cellMerge.rowspan = 1; //agrupa 1 fila
            listaMerge.Add(cellMerge);

            listaExcelData[0][colConf] = "Confidencial";
            if (incluirObservacion)
            {
                listaExcelData[0][colObsCOES] = "REVISIÓN Y EVALUACIÓN";

                cellMerge = new CeldaMerge();
                cellMerge.col = colObsCOES;
                cellMerge.row = 0;
                cellMerge.colspan = 4; //agrupa 4 columnas
                cellMerge.rowspan = 1; //agrupa 1 fila
                listaMerge.Add(cellMerge);
            }

            //
            foreach (var objSeccion in objFicha.ListaSeccion)
            {
                listaExcelData[rowData][colNumSeccion] = objSeccion.Cbftitnumeral;
                listaExcelData[rowData][colNumItem] = "";
                listaExcelData[rowData][colProp] = objSeccion.Cbftitnombre;
                objSeccion.PosRow = rowData;
                listaItem.Add(objSeccion);

                if (string.IsNullOrEmpty(objSeccion.TipoOpcionSeccion) && objSeccion.Cbftitcnp1 > 0)
                {
                    listaErrores.Add(new CeldaErrorCombustible() { Celda = objSeccion.Cbftitnumeral + " " + objSeccion.Cbftitnombre, Mensaje = "Debe seleccionar opción" });
                }

                // Check para las secciones
                if (objSeccion.TieneCheckConf)
                {
                    listaExcelData[rowData][colConf] = "2";
                    matrizTipoEstado[rowData][colConf] = 1;//editable
                }

                //nombre de sección
                cellMerge = new CeldaMerge();
                cellMerge.col = colProp;
                cellMerge.row = rowData;
                cellMerge.colspan = colConf - 1 - 2; //agrupa 3 columnas y columna de datos
                cellMerge.rowspan = 1; //agrupa 1 fila
                listaMerge.Add(cellMerge);

                //celdas de datos no editables de sección
                if (objSeccion.Cbftitnumeral != "1.0" && objSeccion.NumColSeccion < objCentral.NumMaxColData)
                {
                    int numColValido = objSeccion.Cbftitnumeral != "5.0" && string.IsNullOrEmpty(objSeccion.TipoOpcionSeccion) ? 0 : objSeccion.NumColSeccion;

                    cellMerge = new CeldaMerge();
                    cellMerge.col = colValorIni + numColValido;
                    cellMerge.row = rowData + 1;
                    cellMerge.colspan = objCentral.NumMaxColData - numColValido;
                    cellMerge.rowspan = objSeccion.ListaItemXSeccion.Count(); //agrupa 1 fila
                    listaMerge.Add(cellMerge);
                }

                //columnas adicionales de observacion
                if (incluirObservacion)
                {
                    if (objSeccion.Cbftitcnp2 > 0)
                    {
                        for (var coli = colObsCOES; coli <= colRptaCOES; coli++)
                        {
                            cellMerge = new CeldaMerge();
                            cellMerge.col = coli;
                            cellMerge.row = rowData + 1;
                            cellMerge.colspan = 1; //agrupa 1 columna
                            cellMerge.rowspan = objSeccion.ListaItemXSeccion.Count(); //agrupa n fila
                            listaMerge.Add(cellMerge);
                        }

                        cellMerge = new CeldaMerge();
                        cellMerge.col = colEstado;
                        cellMerge.row = rowData + 2;
                        cellMerge.colspan = 1; //agrupa 1 columna                        
                        cellMerge.rowspan = 1; //muestra cada fila pero en el js se ocultan los bordes
                        listaMerge.Add(cellMerge);

                        listaExcelData[rowData][colObsCOES] = "Observación (COES)";
                        listaExcelData[rowData][colSubsGen] = "Subsanación de la observación (Generador)";
                        listaExcelData[rowData][colRptaCOES] = "Respuesta a subsanación de observación (COES)";
                        listaExcelData[rowData][colEstado] = "Estado";

                        listaExcelData[rowData + 1][colObsCOES] = "";
                        listaExcelData[rowData + 1][colSubsGen] = "";
                        listaExcelData[rowData + 1][colRptaCOES] = "";
                        listaExcelData[rowData + 1][colEstado] = GetValorTextoCeldaHandsonGas(0, objSeccion.Cbftitcnp5 ?? 0, "", listaDatoBD);
                        if (string.IsNullOrEmpty(listaExcelData[rowData + 1][colEstado])) listaExcelData[rowData + 1][colEstado] = "";

                        if (objSeccion.ListaItemCabXSeccion != null)
                        {
                            SetValorHandsonItemObs(objSeccion.ListaItemCabXSeccion, objSeccion.Cbftitcnp2 ?? 0, rowData + 1, colObsCOES, objSeccion.Cbftitnombre, objSeccion.Cbftitnumeral, listaDatoBD, false);
                            SetValorHandsonItemObs(objSeccion.ListaItemCabXSeccion, objSeccion.Cbftitcnp3 ?? 0, rowData + 1, colSubsGen, objSeccion.Cbftitnombre, objSeccion.Cbftitnumeral, listaDatoBD, false);
                            SetValorHandsonItemObs(objSeccion.ListaItemCabXSeccion, objSeccion.Cbftitcnp4 ?? 0, rowData + 1, colRptaCOES, objSeccion.Cbftitnombre, objSeccion.Cbftitnumeral, listaDatoBD, false);
                            SetValorHandsonItemObs(objSeccion.ListaItemCabXSeccion, objSeccion.Cbftitcnp5 ?? 0, rowData + 1, colEstado, objSeccion.Cbftitnombre, objSeccion.Cbftitnumeral, listaDatoBD, true);

                            listaItemObs.AddRange(objSeccion.ListaItemCabXSeccion);
                        }

                        //readonly por defecto
                        matrizTipoEstado[rowData + 1][colObsCOES] = -2;
                        matrizTipoEstado[rowData + 1][colRptaCOES] = -2;
                        matrizTipoEstado[rowData + 1][colSubsGen] = -2;
                        matrizTipoEstado[rowData + 1][colEstado] = -2;

                        if (esIntranet)
                        {
                            objSeccion.EsSeccionSoloLectura = true;

                            if (ConstantesCombustibles.EstadoSolicitud == estadoEnvio)
                            {
                                matrizTipoEstado[rowData + 1][colObsCOES] = 1;//editable
                                matrizTipoEstado[rowData + 1][colEstado] = 1;//editable
                                //if (listaExcelData[rowData + 1][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData + 1][colObsCOES] = 1;//editable
                                //if (listaExcelData[rowData + 1][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData + 1][colEstado] = 1;//editable
                            }
                            if (ConstantesCombustibles.EstadoSubsanacionObs == estadoEnvio)
                            {
                                matrizTipoEstado[rowData + 1][colRptaCOES] = 1;//editable
                                matrizTipoEstado[rowData + 1][colEstado] = 1;//editable

                                //if (listaExcelData[rowData + 1][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData + 1][colRptaCOES] = 1;//editable
                                //if (listaExcelData[rowData + 1][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData + 1][colEstado] = 1;//editable
                            }
                        }
                        else
                        {
                            objSeccion.EsSeccionSoloLectura = false;
                            if (ConstantesCombustibles.EstadoObservado == estadoEnvio)
                            {
                                objSeccion.EsSeccionSoloLectura = listaExcelData[rowData + 1][colEstado].ToUpper() == "CONFORME";
                                if (listaExcelData[rowData + 1][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData + 1][colSubsGen] = 1;//editable
                                if (listaExcelData[rowData + 1][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData + 1][colEstado] = 1;//editable

                                //verificar que columna confidencial sea editable
                                objSeccion.TieneCheckConfEditable = !objSeccion.EsSeccionSoloLectura;
                                foreach (var objItem in objSeccion.ListaItemXSeccion)
                                {
                                    if (objItem.TieneCheckConf && !objSeccion.EsSeccionSoloLectura)
                                        objItem.TieneCheckConfEditable = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        for (var coli = colObsCOES; coli <= colEstado; coli++)
                        {
                            cellMerge = new CeldaMerge();
                            cellMerge.col = coli;
                            cellMerge.row = rowData + 1;
                            cellMerge.colspan = 1; //agrupa 1 columna                            
                            cellMerge.rowspan = 1; // seccion 5, muestra cada fila pero se borra los bordes en eljs
                            listaMerge.Add(cellMerge);

                            matrizTipoEstado[rowData + 1][coli] = -1;// nunca editable
                            matrizTipoEstado[rowData + 2][coli] = -1;// nunca editable
                            matrizTipoEstado[rowData + 3][coli] = -1;// nunca editable
                        }
                    }
                }
                else
                {
                    if (objSeccion.Cbftitcnp2 > 0)
                    {
                        if (!esIntranet)
                        {
                            //extranet
                            if (ConstantesCombustibles.EstadoSolicitud == estadoEnvio)
                            {
                                objSeccion.TieneCheckConfEditable = true;

                                foreach (var objItem in objSeccion.ListaItemXSeccion)
                                {
                                    if (objItem.TieneCheckConf)
                                        objItem.TieneCheckConfEditable = true;
                                }
                            }
                        }
                    }
                }

                rowData++;

                foreach (var objItem in objSeccion.ListaItemXSeccion)
                {
                    if (objItem.Cbftitnumeral == "3.08")
                    { }
                    if (objItem.Cbftitnumeral == "4.15")
                    { }

                    //columna numeral de item, nombre de item, unidad de item
                    listaExcelData[rowData][colNumItem] = objItem.Cbftitnumeral.Replace(".0", ".");
                    listaExcelData[rowData][colProp] = objItem.Cbftitnombre;
                    listaExcelData[rowData][colUnidad] = objItem.Ccombunidad;

                    //columna instructivo, confidencial
                    listaExcelData[rowData][colInstruc] = objItem.Cbftitinstructivo;
                    listaExcelData[rowData][colConf] = "";
                    if (objItem.TieneCheckConf)
                    {
                        //obtenervalorCheck
                        listaExcelData[rowData][colConf] = GetValorConfCeldaHandsonGas(-1, objItem.Ccombcodi ?? 0, listaDatoBD);
                        matrizTipoEstado[rowData][colConf] = (short)(1);//0: solo lectura , 1: editable
                    }
                    bool esFilaConfidencial = listaExcelData[rowData][colConf] == "1";

                    //formatear celda segun tipo de exportacion
                    bool esMostrarCelda = true;
                    string textoCeldaExportacion = "";
                    if (ConstantesCombustibles.ArchivosConfidencial == tipoPresentacionDato)
                    {
                        if (!esFilaConfidencial)
                        {
                            esMostrarCelda = false;
                            textoCeldaExportacion = "";
                        }
                    }
                    if (ConstantesCombustibles.ArchivosNoConfidencial == tipoPresentacionDato)
                    {
                        if (esFilaConfidencial)
                        {
                            esMostrarCelda = false;
                            textoCeldaExportacion = ConstantesCombustibles.TextoConfidencial;
                        }
                    }

                    //n columnas valor
                    for (var colJ = colValorIni; colJ <= colValorFin; colJ++)
                    {
                        //estado 
                        int valorEstado = GetValorEstadoCeldaHandsonGas(colJ - colValorIni, objItem.Ccombcodi ?? 0, listaDatoBD) ?? ConstantesCombustibles.EstadoCeldaNoEditable;
                        matrizTipoEstado[rowData][colJ] = (short)(valorEstado);

                        //numero de decimales
                        int valorNumDecimal = GetValorNumDecimalCeldaHandsonGas(colJ - colValorIni, objItem.Ccombcodi ?? 0, listaDatoBD);
                        if (valorNumDecimal > 0)
                        {
                            matrizDigitoDecimal[rowData][colJ] = valorNumDecimal;
                        }

                        //setear valor a celda
                        if (objSeccion.Cbftitnumeral == "1.0") //las columnas valores de items se hacen merge
                        {
                            if (colJ == colValorIni)
                            {
                                string valorCeldaJTmp = GetValorTextoCeldaHandsonGas(0, objItem.Ccombcodi ?? 0, "", listaDatoBD);
                                ValidarCeldaHandsonGas(valorCeldaJTmp, valorEstado, objItem, valorNumDecimal, listaErrores, rowData, colJ, out string valorCeldaJ, out int estadoCeldaJ);
                                matrizTipoEstado[rowData][colJ] = (short)(estadoCeldaJ);

                                listaExcelData[rowData][colJ] = esMostrarCelda ? valorCeldaJ : textoCeldaExportacion;
                                cellMerge = new CeldaMerge();
                                cellMerge.col = colJ;
                                cellMerge.row = rowData;
                                cellMerge.colspan = objCentral.NumMaxColData; //columna de datos
                                cellMerge.rowspan = 1; //agrupa 1 fila
                                listaMerge.Add(cellMerge);
                            }
                        }
                        else
                        {
                            if (colJ <= colValorIni + objSeccion.NumColSeccion - 1)
                            {
                                if (objItem.Cbftittipocelda == "U" && objSeccion.NumColSeccion > 1) //celda formula unicelda de seccion de varias columnas 
                                {
                                    string valorCeldaJTmp = GetValorTextoCeldaHandsonGas(colJ - colValorIni, objItem.Ccombcodi ?? 0, objItem.Cbftittipodato, listaDatoBD);
                                    string valorCeldaExcelJTmp = GetFormulaExcelCeldaHandsonGas(colJ - colValorIni, objItem.Ccombcodi ?? 0, objItem.Cbftittipodato, listaDatoBD);
                                    bool agruparCelda = false;
                                    int numColAgrup = objSeccion.NumColSeccion;

                                    if (objSeccion.NumColNoaplica > 0 && (objItem.Ccombcodi == 150 || objItem.Ccombcodi == 166)) //items especiales 3.16 y 4.15
                                    {
                                        if (colJ < colValorIni + objSeccion.NumColNoaplica)
                                        {
                                            ValidarCeldaHandsonGas(valorCeldaJTmp, valorEstado, objItem, valorNumDecimal, listaErrores, rowData, colJ, out string valorCeldaJ, out int estadoCeldaJ);
                                            matrizTipoEstado[rowData][colJ] = (short)(estadoCeldaJ);

                                            listaExcelData[rowData][colJ] = esMostrarCelda ? valorCeldaJ : textoCeldaExportacion;
                                            matrizCeldaExcel[rowData][colJ] = valorCeldaExcelJTmp;
                                        }
                                        else
                                        {
                                            if (colJ == colValorIni + objSeccion.NumColNoaplica)
                                            {
                                                agruparCelda = true;
                                                numColAgrup = numColAgrup - objSeccion.NumColNoaplica;
                                            }
                                        }
                                    }
                                    else
                                    {
                                        if (colJ == colValorIni)
                                        {
                                            agruparCelda = true;
                                        }
                                    }

                                    if (agruparCelda)
                                    {
                                        ValidarCeldaHandsonGas(valorCeldaJTmp, valorEstado, objItem, valorNumDecimal, listaErrores, rowData, colJ, out string valorCeldaJ, out int estadoCeldaJ);
                                        matrizTipoEstado[rowData][colJ] = (short)(estadoCeldaJ);

                                        listaExcelData[rowData][colJ] = esMostrarCelda ? valorCeldaJ : textoCeldaExportacion;
                                        matrizCeldaExcel[rowData][colJ] = valorCeldaExcelJTmp;

                                        cellMerge = new CeldaMerge();
                                        cellMerge.col = colJ;
                                        cellMerge.row = rowData;
                                        cellMerge.colspan = numColAgrup; //columna de datos
                                        cellMerge.rowspan = 1; //agrupa 1 fila
                                        listaMerge.Add(cellMerge);
                                    }
                                }
                                else
                                {
                                    string valorCeldaJTmp = GetValorTextoCeldaHandsonGas(colJ - colValorIni, objItem.Ccombcodi ?? 0, objItem.Cbftittipodato, listaDatoBD);
                                    string valorCeldaExcelJTmp = GetFormulaExcelCeldaHandsonGas(colJ - colValorIni, objItem.Ccombcodi ?? 0, objItem.Cbftittipodato, listaDatoBD);
                                    ValidarCeldaHandsonGas(valorCeldaJTmp, valorEstado, objItem, valorNumDecimal, listaErrores, rowData, colJ, out string valorCeldaJ, out int estadoCeldaJ);
                                    matrizTipoEstado[rowData][colJ] = (short)(estadoCeldaJ);

                                    listaExcelData[rowData][colJ] = esMostrarCelda ? valorCeldaJ : textoCeldaExportacion;
                                    matrizCeldaExcel[rowData][colJ] = valorCeldaExcelJTmp;
                                }
                            }
                            else
                            {
                                matrizTipoEstado[rowData][colJ] = -1;//nunca editable
                            }
                        }
                    }

                    objItem.TieneDato = true;
                    objItem.PosRow = rowData;
                    objItem.PosCol = colValorIni;
                    listaItem.Add(objItem);
                    rowData++;
                }

                //Setear solo lectura a celdas de datos editables CONFORME
                if (objSeccion.EsSeccionSoloLectura)
                {
                    for (var f = objSeccion.PosRow; f <= objSeccion.PosRow + objSeccion.ListaItemXSeccion.Count() - 1; f++)
                    {
                        for (var c = colValorIni; c <= colConf; c++)
                        {
                            if (matrizTipoEstado[f][c] == 1)
                                matrizTipoEstado[f][c] = ConstantesCombustibles.EstadoHandsonReadonly;
                        }
                    }
                }
            }
            //formatear errores
            foreach (var obj in listaErrores)
            {
                obj.Tab = objCentral.Central;
            }

            //
            objHandson.ListaExcelData = listaExcelData;
            objHandson.ListaColWidth = listaColWidth;
            objHandson.ListaMerge = listaMerge.Where(x => x.colspan > 1 || x.rowspan > 1).ToList();
            objHandson.MatrizTipoEstado = matrizTipoEstado;
            objHandson.MatrizDigitoDecimal = matrizDigitoDecimal;
            objHandson.MatrizCeldaExcel = matrizCeldaExcel;

            objCentral.FilaIni = maxFilaNoTabla;
            objCentral.Handson = objHandson;
            objCentral.ArrayItem = listaItem.ToArray();
            objCentral.ArrayItemObs = listaItemObs.ToArray();
            objCentral.ListaErrores = listaErrores;

            return objCentral;
        }

        private void ValidarCeldaHandsonGas(string valorCelda, int estadoCelda, CbFichaItemDTO objItem, int numDecimal, List<CeldaErrorCombustible> listaErrores, int row, int col
                                                , out string valorCeldaFinal, out int estadoCeldaFinal)
        {
            CeldaErrorCombustible objError = null;

            //
            valorCeldaFinal = (valorCelda ?? "").Trim();
            estadoCeldaFinal = estadoCelda;

            if (!string.IsNullOrEmpty(valorCeldaFinal) && (objItem.Cbftittipodato == "NUMERO" || objItem.Cbftittipodato == "FORMULA") && valorCeldaFinal.ToUpper() != "NO APLICA")
            {
                if (valorCeldaFinal.Contains(","))
                {
                    objError = new CeldaErrorCombustible();
                    objError.Celda = objItem.Cbftitnumeral.Replace(".0", ".") + " " + objItem.Cbftitnombre;
                    objError.Valor = valorCeldaFinal;
                    objError.Mensaje = "Error: Separador decimal coma (,)";
                    objError.ColorError = 1;
                }

                if (!decimal.TryParse(valorCeldaFinal, out decimal valorDecimal))
                {
                    objError = new CeldaErrorCombustible();
                    objError.Celda = objItem.Cbftitnumeral.Replace(".0", ".") + " " + objItem.Cbftitnombre;
                    objError.Valor = valorCeldaFinal;
                    objError.Mensaje = "Error: valor no numérico";
                    objError.ColorError = 1;
                }
                else
                {
                    if (valorDecimal < 0)
                    {
                        objError = new CeldaErrorCombustible();
                        objError.Celda = objItem.Cbftitnumeral.Replace(".0", ".") + " " + objItem.Cbftitnombre;
                        objError.Valor = valorCeldaFinal;
                        objError.Mensaje = "Error: valor negativo";
                        objError.ColorError = 1;
                    }

                    NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
                    nfi.NumberGroupSeparator = "";
                    nfi.NumberDecimalDigits = numDecimal;
                    nfi.NumberDecimalSeparator = ".";

                    if (objItem.Cbftittipodato == "FORMULA") //el redondeo de decimales solo es para formulas
                        valorCeldaFinal = valorDecimal.ToString("N", nfi);
                }

            }
            else
            {
                if (string.IsNullOrEmpty(valorCeldaFinal))
                {
                    objError = new CeldaErrorCombustible();
                    objError.Celda = objItem.Cbftitnumeral.Replace(".0", ".") + " " + objItem.Cbftitnombre;
                    objError.Valor = valorCeldaFinal;
                    objError.Mensaje = "Error: Celda vacía en las celdas no bloqueadas";
                    //objError.ColorError = 1;
                }
            }

            // si la celda es NO EDITABLE entonces mostrar vacío
            if (estadoCeldaFinal == -1) valorCeldaFinal = "";

            if (objError != null)
            {
                if (estadoCeldaFinal == 1)
                {
                    objError.Row = row;
                    objError.Col = col;
                    listaErrores.Add(objError);
                }
            }
        }

        private PR31FormGasCentral GetHandsonGasSolicitudAsignacion(bool esIntranet, CbCentralxfenergDTO objCfgCentral, CbFichaDTO objFicha, bool esActualizarHandson
                                                            , List<CbDatosDTO> listaDatos)
        {
            PR31FormGasCentral objCentral = new PR31FormGasCentral();
            objCentral.Equicodi = objCfgCentral.Equicodi;
            objCentral.Central = objCfgCentral.Equinomb;
            objCentral.Fenergcodi = objCfgCentral.Fenergcodi;
            objCentral.Grupocodi = objCfgCentral.Grupocodi;

            objCentral.Cbftcodi = objFicha.Cbftcodi;

            //Crear objeto
            HandsonModel objHandson = new HandsonModel();

            string[][] listaExcelData = new string[1][];
            listaExcelData[0] = new string[1];

            if (esActualizarHandson)
            {
                listaExcelData[0][0] = ObtenerCostoCombustibleVigente(DateTime.Today).ToString();
            }
            else
            {
                //en extranet muestra el costo con el que fue solicitado o si fue aprobado, muestra dicho costo de aprobacion
                listaExcelData[0][0] = GetValorTextoCeldaHandsonGas(0, ConstantesCombustibles.CCombcodiCostoCombustibleGaseoso, "", listaDatos);
            }

            List<CbFichaItemDTO> listaItem = new List<CbFichaItemDTO>();
            listaItem.Add(objFicha.ItemCostoOsinergmin);

            //
            objHandson.ListaExcelData = listaExcelData;

            objCentral.Handson = objHandson;
            objCentral.ArrayItem = listaItem.ToArray();

            return objCentral;
        }

        private CbDatosDTO GetCeldaDatoXPosColGas(int posCol, int ccombcodi, List<CbDatosDTO> listaDato)
        {
            var listatmp = listaDato.Where(x => x.Ccombcodi == ccombcodi).ToList();
            if (listatmp.Any())
            {
                if (posCol >= 0)
                {
                    if (listatmp.Count() - 1 >= posCol)
                        return listatmp[posCol];
                }
                else
                    return listatmp.FirstOrDefault();
            }

            return null;
        }

        private CbDatosDTO GetCeldaDatoXPosColGasSinNA(int ccombcodi, List<CbDatosDTO> listaDato)
        {
            var listatmp = listaDato.Where(x => x.Ccombcodi == ccombcodi && (x.Cbevdavalor ?? "").ToUpper() != "NO APLICA").ToList();
            if (listatmp.Any())
            {
                return listatmp.FirstOrDefault();
            }

            return null;
        }

        private string GetValorConfCeldaHandsonGas(int posCol, int ccombcodi, List<CbDatosDTO> listaDatoBD)
        {
            var objTmp = GetCeldaDatoXPosColGas(posCol, ccombcodi, listaDatoBD);
            if (objTmp != null)
            {
                return objTmp.Cbevdaconfidencial != null ? objTmp.Cbevdaconfidencial.Value.ToString() : "2";
            }

            return "2";
        }

        private string GetValorTextoCeldaHandsonGas(int posCol, int ccombcodi, string tipoCelda, List<CbDatosDTO> listaDatoBD)
        {
            string valorDefecto = "";
            if (tipoCelda == "FORMULA") valorDefecto = "";

            var objTmp = GetCeldaDatoXPosColGas(posCol, ccombcodi, listaDatoBD);
            if (objTmp != null)
            {
                if (string.IsNullOrEmpty(objTmp.Cbevdavalor)) return valorDefecto;
                return objTmp.Cbevdavalor;
            }

            return valorDefecto;
        }

        private string GetFormulaExcelCeldaHandsonGas(int posCol, int ccombcodi, string tipoCelda, List<CbDatosDTO> listaDatoBD)
        {
            string valorDefecto = "";
            if (tipoCelda == "FORMULA")
            {
                var objTmp = GetCeldaDatoXPosColGas(posCol, ccombcodi, listaDatoBD);
                if (objTmp != null)
                {
                    if (string.IsNullOrEmpty(objTmp.FormulaValor)) return valorDefecto;
                    return objTmp.FormulaValor;
                }
            }

            return valorDefecto;
        }

        private CbDatosDTO GetValorHtmlCeldaHandsonGas(int posCol, int ccombcodi, List<CbDatosDTO> listaDatoBD)
        {
            var objTmp = GetCeldaDatoXPosColGas(posCol, ccombcodi, listaDatoBD);
            if (objTmp != null && objTmp.Obs != null)
            {
                return objTmp;
            }

            return null;
        }

        private int? GetValorEstadoCeldaHandsonGas(int posCol, int ccombcodi, List<CbDatosDTO> listaDatoBD)
        {
            var objTmp = GetCeldaDatoXPosColGas(posCol, ccombcodi, listaDatoBD);
            if (objTmp != null)
            {
                return objTmp.Cbevdaestado;
            }

            return null;
        }

        private int GetValorNumDecimalCeldaHandsonGas(int posCol, int ccombcodi, List<CbDatosDTO> listaDatoBD)
        {
            var objTmp = GetCeldaDatoXPosColGas(posCol, ccombcodi, listaDatoBD);
            if (objTmp != null && objTmp.Cbevdanumdecimal > 0)
            {
                return objTmp.Cbevdanumdecimal.Value;
            }

            return 4;
        }

        private void SetValorHandsonItemObs(List<CbFichaItemDTO> listaItemCabXSeccion, int concepto, int row, int col
                                        , string nombreSeccion, string numeralSeccion, List<CbDatosDTO> listaDatoBD, bool esEstado)
        {
            CbFichaItemDTO objItem = listaItemCabXSeccion.Find(x => x.Ccombcodi == concepto);
            if (objItem != null)
            {
                objItem.TieneDato = true;
                objItem.PosRow = row;
                objItem.PosCol = col;
                objItem.NombreSeccion = nombreSeccion;
                objItem.NumeralSeccion = numeralSeccion;
                objItem.EsColEstado = esEstado;
                objItem.Ccombnombre = objItem.Ccombnombre;

                var objDato = GetValorHtmlCeldaHandsonGas(0, concepto, listaDatoBD);
                objItem.Obs = new CbObsDTO() { Ccombcodi = concepto };
                objItem.Obs.Cbobshtml = objDato != null ? objDato.Obs.Cbobshtml : "";
                objItem.Obs.ListaArchivoXObs = objDato != null ? objDato.Obs.ListaArchivoXObs : new List<CbObsxarchivoDTO>();
            }
        }

        private List<EqEquipoDTO> ListarEnergiaXCentralTermica(DateTime fechaPeriodo, int empresa)
        {
            List<EqEquipoDTO> listaEq = new List<EqEquipoDTO>();

            //Si el aplicativo valida Medidores con Horas de operación
            var keyConfig = ConfigurationManager.AppSettings[ConstantesCombustibles.KeyFlagPR31UsarMedidores];
            if (keyConfig == "S")
            {
                DateTime fechaIni = fechaPeriodo;
                DateTime fechaFin = fechaPeriodo.AddMonths(1).AddDays(-1);

                //traer datos
                List<MeMedicion96DTO> listaM96Rango = (new ReporteMedidoresAppServicio()).ListaDataMDGeneracionConsolidado(fechaIni, fechaFin, ConstantesMedicion.IdTipogrupoCOES,
                                            ConstantesMedicion.IdTipoGeneracionTermoelectrica.ToString(), empresa.ToString(),
                                            ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), true);

                List<MeMedicion96DTO> listTipoGeneracion = (from t in listaM96Rango
                                                            group t by new { t.Equipadre, t.Fenergcodi }
                                                            into destino
                                                            select new MeMedicion96DTO()
                                                            {
                                                                Equipadre = destino.Key.Equipadre,
                                                                Fenergcodi = destino.Key.Fenergcodi,
                                                                H1 = destino.Sum(t => t.H1),
                                                                H2 = destino.Sum(t => t.H2),
                                                                H3 = destino.Sum(t => t.H3),
                                                                H4 = destino.Sum(t => t.H4),
                                                                H5 = destino.Sum(t => t.H5),
                                                                H6 = destino.Sum(t => t.H6),
                                                                H7 = destino.Sum(t => t.H7),
                                                                H8 = destino.Sum(t => t.H8),
                                                                H9 = destino.Sum(t => t.H9),
                                                                H10 = destino.Sum(t => t.H10),

                                                                H11 = destino.Sum(t => t.H11),
                                                                H12 = destino.Sum(t => t.H12),
                                                                H13 = destino.Sum(t => t.H13),
                                                                H14 = destino.Sum(t => t.H14),
                                                                H15 = destino.Sum(t => t.H15),
                                                                H16 = destino.Sum(t => t.H16),
                                                                H17 = destino.Sum(t => t.H17),
                                                                H18 = destino.Sum(t => t.H18),
                                                                H19 = destino.Sum(t => t.H19),
                                                                H20 = destino.Sum(t => t.H20),

                                                                H21 = destino.Sum(t => t.H21),
                                                                H22 = destino.Sum(t => t.H22),
                                                                H23 = destino.Sum(t => t.H23),
                                                                H24 = destino.Sum(t => t.H24),
                                                                H25 = destino.Sum(t => t.H25),
                                                                H26 = destino.Sum(t => t.H26),
                                                                H27 = destino.Sum(t => t.H27),
                                                                H28 = destino.Sum(t => t.H28),
                                                                H29 = destino.Sum(t => t.H29),
                                                                H30 = destino.Sum(t => t.H30),

                                                                H31 = destino.Sum(t => t.H31),
                                                                H32 = destino.Sum(t => t.H32),
                                                                H33 = destino.Sum(t => t.H33),
                                                                H34 = destino.Sum(t => t.H34),
                                                                H35 = destino.Sum(t => t.H35),
                                                                H36 = destino.Sum(t => t.H36),
                                                                H37 = destino.Sum(t => t.H37),
                                                                H38 = destino.Sum(t => t.H38),
                                                                H39 = destino.Sum(t => t.H39),
                                                                H40 = destino.Sum(t => t.H40),

                                                                H41 = destino.Sum(t => t.H41),
                                                                H42 = destino.Sum(t => t.H42),
                                                                H43 = destino.Sum(t => t.H43),
                                                                H44 = destino.Sum(t => t.H44),
                                                                H45 = destino.Sum(t => t.H45),
                                                                H46 = destino.Sum(t => t.H46),
                                                                H47 = destino.Sum(t => t.H47),
                                                                H48 = destino.Sum(t => t.H48),
                                                                H49 = destino.Sum(t => t.H49),
                                                                H50 = destino.Sum(t => t.H50),

                                                                H51 = destino.Sum(t => t.H51),
                                                                H52 = destino.Sum(t => t.H52),
                                                                H53 = destino.Sum(t => t.H53),
                                                                H54 = destino.Sum(t => t.H54),
                                                                H55 = destino.Sum(t => t.H55),
                                                                H56 = destino.Sum(t => t.H56),
                                                                H57 = destino.Sum(t => t.H57),
                                                                H58 = destino.Sum(t => t.H58),
                                                                H59 = destino.Sum(t => t.H59),
                                                                H60 = destino.Sum(t => t.H60),

                                                                H61 = destino.Sum(t => t.H61),
                                                                H62 = destino.Sum(t => t.H62),
                                                                H63 = destino.Sum(t => t.H63),
                                                                H64 = destino.Sum(t => t.H64),
                                                                H65 = destino.Sum(t => t.H65),
                                                                H66 = destino.Sum(t => t.H66),
                                                                H67 = destino.Sum(t => t.H67),
                                                                H68 = destino.Sum(t => t.H68),
                                                                H69 = destino.Sum(t => t.H69),
                                                                H70 = destino.Sum(t => t.H70),

                                                                H71 = destino.Sum(t => t.H71),
                                                                H72 = destino.Sum(t => t.H72),
                                                                H73 = destino.Sum(t => t.H73),
                                                                H74 = destino.Sum(t => t.H74),
                                                                H75 = destino.Sum(t => t.H75),
                                                                H76 = destino.Sum(t => t.H76),
                                                                H77 = destino.Sum(t => t.H77),
                                                                H78 = destino.Sum(t => t.H78),
                                                                H79 = destino.Sum(t => t.H79),
                                                                H80 = destino.Sum(t => t.H80),

                                                                H81 = destino.Sum(t => t.H81),
                                                                H82 = destino.Sum(t => t.H82),
                                                                H83 = destino.Sum(t => t.H83),
                                                                H84 = destino.Sum(t => t.H84),
                                                                H85 = destino.Sum(t => t.H85),
                                                                H86 = destino.Sum(t => t.H86),
                                                                H87 = destino.Sum(t => t.H87),
                                                                H88 = destino.Sum(t => t.H88),
                                                                H89 = destino.Sum(t => t.H89),
                                                                H90 = destino.Sum(t => t.H90),

                                                                H91 = destino.Sum(t => t.H91),
                                                                H92 = destino.Sum(t => t.H92),
                                                                H93 = destino.Sum(t => t.H93),
                                                                H94 = destino.Sum(t => t.H94),
                                                                H95 = destino.Sum(t => t.H95),
                                                                H96 = destino.Sum(t => t.H96)
                                                            }).ToList();

                List<decimal> listaH;
                decimal total; decimal? valorH;

                foreach (var reg in listTipoGeneracion)
                {
                    var objEq = new EqEquipoDTO();
                    objEq.Equicodi = reg.Equipadre;
                    objEq.Fenergcodi = reg.Fenergcodi;

                    listaH = new List<decimal>();
                    total = 0;
                    for (int h = 1; h <= 96; h++)
                    {
                        valorH = (decimal?)reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(reg, null);
                        if (valorH != null)
                        {
                            listaH.Add(valorH.Value);
                        }
                    }

                    if (listaH.Count > 0)
                    {
                        total = listaH.Sum(x => x);
                    }

                    reg.Meditotal = total;
                    objEq.ValorTermoelectrico = total / 4;

                    listaEq.Add(objEq);
                }
            }

            return listaEq;
        }

        public decimal ObtenerValorMedidoresCentral(DateTime fechaPeriodo, int idEmpresa, int idCentral)
        {
            var objEnergia = ListarEnergiaXCentralTermica(fechaPeriodo, idEmpresa).Where(x => x.Equicodi == idCentral).FirstOrDefault();
            if (objEnergia != null)
                return objEnergia.ValorTermoelectrico ?? 0;

            return 0;
        }

        private CbFichaDTO ClonarFichaGas(CbFichaDTO ficha)
        {
            CbFichaDTO objClone = (CbFichaDTO)ficha.Clone();

            if (objClone.ListaSeccion != null)
            {
                var listaSeccion = new List<CbFichaItemDTO>();
                foreach (var objSeccion in objClone.ListaSeccion)
                {
                    var objSeccionClone = (CbFichaItemDTO)objSeccion.Clone();
                    if (objSeccion.ListaItemCabXSeccion != null)
                    {
                        var listaItemCabXSeccion = new List<CbFichaItemDTO>();
                        foreach (var objItem in objSeccion.ListaItemCabXSeccion)
                        {
                            listaItemCabXSeccion.Add((CbFichaItemDTO)objItem.Clone());
                        }
                        objSeccionClone.ListaItemCabXSeccion = listaItemCabXSeccion;
                    }

                    if (objSeccion.ListaItemXSeccion != null)
                    {
                        var listaItemXSeccion = new List<CbFichaItemDTO>();
                        foreach (var objItem in objSeccion.ListaItemXSeccion)
                        {
                            listaItemXSeccion.Add((CbFichaItemDTO)objItem.Clone());
                        }
                        objSeccionClone.ListaItemXSeccion = listaItemXSeccion;
                    }

                    listaSeccion.Add(objSeccionClone);
                }

                objClone.ListaSeccion = listaSeccion;
            }

            return objClone;
        }

        public PR31FormGasSustento GetHandsonGasArchivoSustento(bool esIntranet, int idEnvio, int idVersion, bool esActualizarHandson
                                            , CbObsDTO[] listaObs, List<CbArchivoenvioDTO> listaArchivo
                                            , bool incluirObservacion, int estadoEnvio)
        {
            PR31FormGasSustento objTab = new PR31FormGasSustento();
            objTab.SeccionCombustible = ListarDocumentoByEnvioGas(0, 0, listaObs);
            objTab.IncluirObservacion = incluirObservacion;
            objTab.Estenvcodi = estadoEnvio;
            if (!esActualizarHandson)
            {
                objTab.SeccionCombustible = ListarDocumentoByEnvioGas(idEnvio, idVersion, null);
                listaArchivo = objTab.SeccionCombustible.ListaArchivo;
            }
            objTab.SeccionCombustible.ListaArchivo = listaArchivo;

            //Crear objeto
            HandsonModel objHandson = new HandsonModel();

            var listaColWidth = new List<int>();
            listaColWidth.Add(60); //boton eliminar
            listaColWidth.Add(200); //nombre de archivo
            listaColWidth.Add(140); //confidencial
            if (incluirObservacion)
            {
                listaColWidth.Add(300); //
                listaColWidth.Add(300); //
                listaColWidth.Add(300); //
                listaColWidth.Add(150); //
            }

            //inicializar matriz excel
            int nFil = listaArchivo.Count() + 1;
            if (incluirObservacion) nFil += 1;
            int nCol = listaColWidth.Count;

            string[][] listaExcelData = new string[nFil][];
            short[][] matrizTipoEstado = new short[nFil][];
            for (int i = 0; i < nFil; i++)
            {
                listaExcelData[i] = new string[nCol];
                matrizTipoEstado[i] = new short[nCol];
            }

            for (int i = 0; i < nFil; i++)
            {
                for (int j = 0; j < nCol; j++)
                {
                    listaExcelData[i][j] = "";
                    matrizTipoEstado[i][j] = ConstantesCombustibles.EstadoCeldaNoEditable; //no editable (celda azul)
                }
            }

            //llenar data
            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            int maxFilaNoTabla = 0;
            int rowData = maxFilaNoTabla;
            if (incluirObservacion)
            {
                maxFilaNoTabla = 1;
                rowData = maxFilaNoTabla;
            }

            int colBtnEliminar = 0;
            int colNombreArchivo = colBtnEliminar + 1;
            int colConf = colNombreArchivo + 1;
            int colObsCOES = colConf + 1;
            int colSubsGen = colObsCOES + 1;
            int colRptaCOES = colSubsGen + 1;
            int colEstado = colRptaCOES + 1;

            listaExcelData[rowData][colBtnEliminar] = "Acción";
            listaExcelData[rowData][colNombreArchivo] = "Archivo";
            listaExcelData[rowData][colConf] = "Es confidencial";

            //primera fila vacia, antes de la fila de confidencial y observaciones
            var cellMerge = new CeldaMerge();
            if (incluirObservacion)
            {
                cellMerge.col = colBtnEliminar;
                cellMerge.row = 0;
                cellMerge.colspan = 3; //agrupa 3 columnas
                cellMerge.rowspan = 1; //agrupa 1 fila
                listaMerge.Add(cellMerge);

                listaExcelData[0][colObsCOES] = "REVISIÓN Y EVALUACIÓN";

                cellMerge = new CeldaMerge();
                cellMerge.col = colObsCOES;
                cellMerge.row = 0;
                cellMerge.colspan = 4; //agrupa 4 columnas
                cellMerge.rowspan = 1; //agrupa 1 fila
                listaMerge.Add(cellMerge);

                listaExcelData[rowData][colObsCOES] = "Observación (COES)";
                listaExcelData[rowData][colSubsGen] = "Subsanación de la observación (Generador)";
                listaExcelData[rowData][colRptaCOES] = "Respuesta a subsanación de observación (COES)";
                listaExcelData[rowData][colEstado] = "Estado";

                if (listaArchivo.Any())
                {
                    string estado = objTab.SeccionCombustible.ListaObs.FirstOrDefault()?.Cbevdavalor;

                    for (var coli = colObsCOES; coli <= colRptaCOES; coli++)
                    {
                        cellMerge = new CeldaMerge();
                        cellMerge.col = coli;
                        cellMerge.row = rowData + 1;
                        cellMerge.colspan = 1; //agrupa 1 columna
                        cellMerge.rowspan = listaArchivo.Count(); //agrupa n fila
                        listaMerge.Add(cellMerge);
                    }

                    string valorDefecto = "";
                    listaExcelData[rowData + 1][colEstado] = !string.IsNullOrEmpty(estado) ? estado : valorDefecto;

                    matrizTipoEstado[rowData + 1][colObsCOES] = -2;
                    matrizTipoEstado[rowData + 1][colRptaCOES] = -2;
                    matrizTipoEstado[rowData + 1][colSubsGen] = -2;
                    matrizTipoEstado[rowData + 1][colEstado] = -2;

                    if (esIntranet)
                    {
                        if (ConstantesCombustibles.EstadoSolicitud == estadoEnvio)
                        {
                            matrizTipoEstado[rowData + 1][colObsCOES] = 1;//editable
                            matrizTipoEstado[rowData + 1][colEstado] = 1;//editable
                            //if (listaExcelData[rowData][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData][colObsCOES] = 1;//editable
                            //if (listaExcelData[rowData][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData][colEstado] = 1;//editable
                        }
                        if (ConstantesCombustibles.EstadoSubsanacionObs == estadoEnvio)
                        {
                            matrizTipoEstado[rowData + 1][colRptaCOES] = 1;//editable
                            matrizTipoEstado[rowData + 1][colEstado] = 1;//editable
                            //if (listaExcelData[rowData][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData][colRptaCOES] = 1;//editable
                            //if (listaExcelData[rowData][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData][colEstado] = 1;//editable
                        }
                    }
                    else
                    {
                        objTab.SeccionCombustible.EsSeccionSoloLectura = listaExcelData[rowData + 1][colEstado].ToUpper() == "CONFORME";

                        //extranet
                        if (ConstantesCombustibles.EstadoObservado == estadoEnvio)
                        {
                            if (listaExcelData[rowData + 1][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData + 1][colSubsGen] = 1;//editable
                            if (listaExcelData[rowData + 1][colEstado].ToUpper() != "CONFORME") matrizTipoEstado[rowData + 1][colEstado] = 1;//editable
                        }
                    }
                }
            }

            rowData++;

            foreach (var objItem in listaArchivo)
            {
                listaExcelData[rowData][colNombreArchivo] = objItem.Cbarchnombreenvio;

                listaExcelData[rowData][colConf] = "2";
                if (objItem.Cbarchconfidencial != null)
                {
                    listaExcelData[rowData][colConf] = objItem.Cbarchconfidencial.ToString();
                }
                matrizTipoEstado[rowData][colConf] = (short)(esIntranet ? -2 : 1);//editable

                rowData++;
            }

            //
            objHandson.ListaExcelData = listaExcelData;
            objHandson.ListaColWidth = listaColWidth;
            objHandson.ListaMerge = listaMerge;
            objHandson.MatrizTipoEstado = matrizTipoEstado;

            objTab.FilaIni = maxFilaNoTabla;
            objTab.Handson = objHandson;

            return objTab;
        }

        private SeccionCombustible ListarDocumentoByEnvioGas(int idEnvio, int idVersion, CbObsDTO[] listaObsTmp)
        {
            SeccionCombustible s1 = new SeccionCombustible();
            s1.Seccion = new CbConceptocombDTO();
            s1.Seccion.Ccombcodi = ConstantesCombustibles.CCombcodiInfSust;
            s1.Seccion.Titulo = "Partes del 1 al 4: Informe Sustentatorio";
            s1.Seccion.Descripcion = "Informe sustentatorio, según lo indicado en el numeral 2.5 del anexo 3 del PR-31.";

            //obtener archivos de bd
            List<CbArchivoenvioDTO> listaArchivoBD = new List<CbArchivoenvioDTO>();
            CbObsDTO[] listaObs = new CbObsDTO[3];
            listaObs[0] = new CbObsDTO() { Ccombcodi = ConstantesCombustibles.CCombcodiInfSustObs, Ccombnombre = "Informe Sustentatorio - Observación (COES)" };
            listaObs[1] = new CbObsDTO() { Ccombcodi = ConstantesCombustibles.CCombcodiInfSustSub, Ccombnombre = "Informe Sustentatorio - Subsanación de la observación (Generador)" };
            listaObs[2] = new CbObsDTO() { Ccombcodi = ConstantesCombustibles.CCombcodiInfSustRpta, Ccombnombre = "Informe Sustentatorio - Respuesta Final (COES)" };

            if (idEnvio != 0)
            {
                var objEnvio = GetByIdCbEnvio(idEnvio);
                if (idVersion <= 0) idVersion = objEnvio.Cbvercodi;
                listaArchivoBD = GetByCriteriaCbArchivoenvios(idVersion).OrderBy(x => x.Cbarchcodi).ToList();

                var listaObsBD = ListCbObssByCbvercodi(idVersion).OrderBy(x => x.Cbobscodi).ToList();
                var listaObsXArchivoBD = ListCbObsxarchivosByCbvercodi(idVersion);
                List<CbDatosDTO> listaDatos = GetByCriteriaCbDatoss(idVersion.ToString(), "197,198,199");
                string estado = listaDatos.FirstOrDefault()?.Cbevdavalor;

                //el primer archivo tiene el estado de la revisión y guarda ls obs html
                var obj1 = listaObsBD.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiInfSustObs);
                var obj2 = listaObsBD.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiInfSustSub);
                var obj3 = listaObsBD.Find(x => x.Ccombcodi == ConstantesCombustibles.CCombcodiInfSustRpta);
                if (obj1 != null) listaObs[0] = obj1;
                if (obj2 != null) listaObs[1] = obj2;
                if (obj3 != null) listaObs[2] = obj3;

                foreach (var objObs in listaObs)
                {
                    objObs.ListaArchivoXObs = listaObsXArchivoBD.Where(x => x.Cbobscodi == objObs.Cbobscodi).ToList();
                    objObs.Cbevdavalor = estado;
                }
            }
            else
            {
                if (listaObsTmp != null)
                {
                    listaObs = listaObsTmp; //cuando se actualiza la grilla de archivos
                }
            }

            s1.ListaObs = listaObs;
            s1.ListaArchivo = listaArchivoBD.Where(x => x.Ccombcodi == s1.Seccion.Ccombcodi).ToList();

            return s1;
        }

        #endregion

        #region Exportación individual excel / Importar excel

        public void GenerarArchivoExcelFormularioGaseosoEnvio(string ruta, string nombreArchivo, List<PR31FormGasCentral> listaFormularioCentral
                                                        , int tipoArchivo, bool mostrarLeyendaConfidencial)
        {
            string rutaFile = ruta + "/" + nombreArchivo;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            int estadoEnvio = listaFormularioCentral.First().Estenvcodi;

            bool incluirFormula = false;
            if (tipoArchivo == ConstantesCombustibles.ArchivosTotales)
            {
                if (ConstantesCombustibles.EstadoSolicitud == estadoEnvio || ConstantesCombustibles.EstadoObservado == estadoEnvio || ConstantesCombustibles.EstadoSubsanacionObs == estadoEnvio)
                    incluirFormula = true;
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                foreach (var objTab in listaFormularioCentral)
                    GenerarArchivoExcelXFormularioGaseoso(xlPackage, ConstantesCombustibles.NombreReporteFormularioEnvios, objTab, incluirFormula, tipoArchivo, mostrarLeyendaConfidencial);

                xlPackage.Save();
            }
        }

        private void GenerarArchivoExcelXFormularioGaseoso(ExcelPackage xlPackage, string pathLogo, PR31FormGasCentral objTab, bool incluirFormula, int tipo, bool mostrarLeyendaConfidencial = true)
        {
            string fontHoja = "Calibri";
            ExcelWorksheet ws = null;

            string nameWS = objTab.Central;
            if (nameWS.Length > 30) nameWS = nameWS.Substring(0, 30);

            ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            //Logo
            //UtilExcel.AddImageLocal(ws, 1, 0, pathLogo);

            //Tabla filtro
            int colIniTitulo = 1;
            int rowIniTitulo = 2;
            int rowIniEmpresa = rowIniTitulo + 1;
            int rowIniCentral = rowIniEmpresa + 1;
            int rowIniMes = rowIniCentral + 1;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = "FORMATO 3";
            ws.Cells[rowIniEmpresa, colIniTitulo].Value = "Empresa";
            ws.Cells[rowIniCentral, colIniTitulo].Value = "Central";
            ws.Cells[rowIniMes, colIniTitulo].Value = "Mes de Vigencia";
            ws.Cells[rowIniEmpresa, colIniTitulo + 1].Value = objTab.Emprnomb;
            ws.Cells[rowIniCentral, colIniTitulo + 1].Value = objTab.Central;
            ws.Cells[rowIniMes, colIniTitulo + 1].Value = objTab.MesVigencia;

            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEmpresa, colIniTitulo, rowIniMes, colIniTitulo, "#000000", true, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEmpresa, colIniTitulo + 1, rowIniEmpresa, colIniTitulo + 3, "#000000");
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCentral, colIniTitulo + 1, rowIniCentral, colIniTitulo + 3, "#000000");
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniMes, colIniTitulo + 1, rowIniMes, colIniTitulo + 3, "#000000");

            //grilla
            int colNumSeccion = 2;
            int colNumItem = colNumSeccion + 1;
            int colProp = colNumItem + 1;
            int colUnidad = colProp + 1;
            int colValorIni = colUnidad + 1;
            int colValorFin = colValorIni + objTab.NumMaxColData - 1;
            int colInstruc = colValorFin + 1;

            ws.Column(1).Width = 15;
            int colTmp = colNumSeccion;
            foreach (var columnWidth in objTab.Handson.ListaColWidth)
            {
                ws.Column(colTmp).SetTrueColumnWidth(columnWidth / 7);
                colTmp++;
            }

            int rowData = rowIniTitulo + 6;
            for (var i = objTab.FilaIni + 1; i < objTab.Handson.ListaExcelData.Length; i++)
            {
                var objItem = objTab.ArrayItem[i - objTab.FilaIni - 1];

                int colData = colNumSeccion;
                for (var j = 0; j < colInstruc - colNumSeccion + 1; j++)
                {
                    //setear dato
                    string datoCelda = objTab.Handson.ListaExcelData[i][j];
                    string celdaExcel = objTab.Handson.MatrizCeldaExcel[i][j];

                    //formato de celda
                    if (objItem.EsSeccion)
                    {
                        ws.Cells[rowData, colData].Value = datoCelda;
                        UtilExcel.SetFormatoCelda(ws, rowData, colData, rowData, colData, "Arriba", "Centro", "#FFFFFF", "#0D6AB7", fontHoja, 11, true, true);
                    }
                    else
                    {
                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colData, rowData, colData, "#000000");

                        if (colNumSeccion == colData || colNumItem == colData)
                        {
                            ws.Cells[rowData, colData].Value = datoCelda;
                            UtilExcel.SetFormatoCelda(ws, rowData, colData, rowData, colData, "Arriba", "Centro", "#3075B5", "#F2F2F2", fontHoja, 10, false, true);
                        }
                        if (colProp == colData)
                        {
                            ws.Cells[rowData, colData].Value = datoCelda;
                            UtilExcel.SetFormatoCelda(ws, rowData, colData, rowData, colData, "Arriba", "Izquierda", "#45587D", "#F2F2F2", fontHoja, 10, false, true);
                        }
                        if (colUnidad == colData)
                        {
                            ws.Cells[rowData, colData].Value = datoCelda;
                            UtilExcel.SetFormatoCelda(ws, rowData, colData, rowData, colData, "Arriba", "Centro", "#45587D", "#F2F2F2", fontHoja, 10, false, true);
                        }

                        if (colData >= colValorIni && colData <= colValorFin)
                        {
                            if (objTab.Handson.MatrizTipoEstado[i][j] == -1) //nunca editable (color azul)
                                UtilExcel.SetFormatoCelda(ws, rowData, colData, rowData, colData, "Arriba", "Centro", "#000000", "#9BC2E6", fontHoja, 10, false, true);
                            else
                            {
                                if (objTab.Handson.MatrizTipoEstado[i][j] == 0) //dato fórmula
                                    UtilExcel.SetFormatoCelda(ws, rowData, colData, rowData, colData, "Arriba", "Centro", "#000000", "#A6A6A6", fontHoja, 10, false, true);
                                else
                                {
                                    UtilExcel.SetFormatoCelda(ws, rowData, colData, rowData, colData, "Arriba", "Centro", "#696969", "#FFFFFF", fontHoja, 10, false, true);
                                }

                                if (incluirFormula)
                                {
                                    if (!string.IsNullOrEmpty(celdaExcel))
                                    {
                                        ws.Cells[rowData, colData].Formula = "=" + celdaExcel;
                                    }
                                    else
                                    {
                                        if (decimal.TryParse(datoCelda, out decimal valorCeldaDecimal))
                                        {
                                            ws.Cells[rowData, colData].Value = valorCeldaDecimal;
                                        }
                                        else
                                        {
                                            ws.Cells[rowData, colData].Value = datoCelda;
                                        }
                                    }
                                }
                                else
                                {
                                    if (decimal.TryParse(datoCelda, out decimal valorCeldaDecimal))
                                    {
                                        ws.Cells[rowData, colData].Value = valorCeldaDecimal;
                                    }
                                    else
                                    {
                                        ws.Cells[rowData, colData].Value = datoCelda;
                                    }
                                }

                                if (objItem.Cbftittipodato == "FORMULA")
                                {
                                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colData, rowData, colData, objTab.Handson.MatrizDigitoDecimal[i][j]);
                                }
                            }
                        }

                        if (colInstruc == colData)
                        {
                            ws.Cells[rowData, colData].Value = datoCelda;
                            UtilExcel.SetFormatoCelda(ws, rowData, colData, rowData, colData, "Arriba", "Izquierda", "#777777", "#F2F2F2", fontHoja, 7, false, true);
                        }

                    }

                    //
                    colData++;
                }
                rowData++;
            }

            if (mostrarLeyendaConfidencial)
            {
                ws.Cells[rowData + 1, colNumItem].Value = ConstantesCombustibles.TextoConfidencial;
                ws.Cells[rowData + 1, colProp].Value = "Confidencial";
            }

            //aplicar merge
            foreach (var objMerge in objTab.Handson.ListaMerge)
            {
                int filaIni = objMerge.row + (rowIniTitulo + 6) - objTab.FilaIni - 1;
                int colIni = objMerge.col + (colNumSeccion);
                UtilExcel.CeldasExcelAgrupar(ws, filaIni, colIni, filaIni + objMerge.rowspan - 1, colIni + objMerge.colspan - 1);
            }

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            //ws.View.FreezePanes(rowIniTitulo + 2, 1);

            //ws.Calculate();
        }

        public List<PR31FormGasCentral> ActualizarModeloConExcelTemporal(string file, List<PR31FormGasCentral> listaFormularioCentral, ref List<CeldaErrorCombustible> listaError)
        {

            foreach (var objTab in listaFormularioCentral)
            {
                string nameWS = objTab.Central;
                if (nameWS.Length > 30) nameWS = nameWS.Substring(0, 30);

                objTab.NameSheet = nameWS;

            }

            //lectura de archivo excel
            FileInfo fileInfo = new FileInfo(file);
            using (ExcelPackage xlPackage = new ExcelPackage(fileInfo))
            {
                for (var posSheet = 1; posSheet <= listaFormularioCentral.Count(); posSheet++)
                {
                    try
                    {
                        ExcelWorksheet ws = xlPackage.Workbook.Worksheets[posSheet];
                        if (ws != null)
                        {
                            #region validar formato 

                            var textFormato = ws.Cells[2, 1].Value != null ? ws.Cells[2, 1].Value.ToString() : "";
                            var textEmpresaTab = ws.Cells[3, 1].Value != null ? ws.Cells[3, 1].Value.ToString() : "";
                            var textCentralTab = ws.Cells[4, 1].Value != null ? ws.Cells[4, 1].Value.ToString() : "";
                            var empresaTab = ws.Cells[3, 2].Value != null ? (ws.Cells[3, 2].Value.ToString() ?? "").Trim().ToUpper() : "";
                            var centralTab = ws.Cells[4, 2].Value != null ? ws.Cells[4, 2].Value.ToString() : "";

                            if (textFormato != "FORMATO 3") listaError.Add(new CeldaErrorCombustible() { TipoError = 10, Mensaje = "Celda no es formato." });
                            if (string.IsNullOrEmpty(textEmpresaTab)) listaError.Add(new CeldaErrorCombustible() { TipoError = 10, Mensaje = "Celda no es formato." });
                            if (string.IsNullOrEmpty(textCentralTab)) listaError.Add(new CeldaErrorCombustible() { TipoError = 10, Mensaje = "Celda no es formato." });
                            if (string.IsNullOrEmpty(empresaTab)) listaError.Add(new CeldaErrorCombustible() { TipoError = 10, Mensaje = "Celda no es formato." });
                            if (string.IsNullOrEmpty(centralTab)) listaError.Add(new CeldaErrorCombustible() { TipoError = 10, Mensaje = "Celda no es formato." });

                            #endregion

                            if (!listaError.Any())
                            {
                                var empresaEnvio = listaFormularioCentral.First().Emprnomb;
                                if (empresaTab != (empresaEnvio ?? "").Trim().ToUpper())
                                {
                                    listaError.Add(new CeldaErrorCombustible() { TipoError = 11, Mensaje = string.Format("La empresa {0} no corresponde.", empresaTab) });
                                }
                            }

                            string nameWS = ws.Name;
                            var objTab = listaFormularioCentral.Find(x => x.NameSheet.ToUpper().Trim() == (nameWS ?? "").ToUpper().Trim());

                            if (objTab != null)
                            {
                                //Tabla filtro
                                int colIniTitulo = 1;
                                int rowIniTitulo = 2;

                                //grilla
                                int colNumSeccion = 2;
                                int colNumItem = colNumSeccion + 1;
                                int colProp = colNumItem + 1;
                                int colUnidad = colProp + 1;
                                int colValorIni = colUnidad + 1;
                                int colValorFin = colValorIni + objTab.NumMaxColData - 1;
                                int colInstruc = colValorFin + 1;

                                //leer archivo
                                int rowData = rowIniTitulo + 6;
                                for (var i = objTab.FilaIni + 1; i < objTab.Handson.ListaExcelData.Length; i++)
                                {
                                    var objItem = objTab.ArrayItem[i - objTab.FilaIni - 1];

                                    int colData = colNumSeccion;
                                    for (var j = 0; j < colInstruc - colNumSeccion + 1; j++)
                                    {
                                        //formato de celda
                                        if (objItem.EsSeccion)
                                        {
                                        }
                                        else
                                        {
                                            if (colData >= colValorIni && colData <= colValorFin)
                                            {
                                                var bloque = ws.Cells[rowData, colData];
                                                string datoCelda = (bloque.Value != null) ? bloque.Value.ToString() : "";

                                                if (objTab.Handson.MatrizTipoEstado[i][j] == ConstantesCombustibles.EstadoCeldaEditable)
                                                {
                                                    datoCelda = GetTextoValidacionNoAplica(datoCelda);

                                                    //setear dato
                                                    objTab.Handson.ListaExcelData[i][j] = datoCelda;

                                                }
                                                else
                                                {
                                                    if (objTab.Handson.MatrizTipoEstado[i][j] == ConstantesCombustibles.EstadoCeldaSoloLectura)
                                                    {
                                                        //numero decimales
                                                        if (objItem.Cbftittipodato == "FORMULA")
                                                        {
                                                            //var formato = bloque.Style.Numberformat.Format;
                                                            //int numDec = UtilExcel.NumeroDecimalFromFormato(formato, ConstantesCombustibles.NumDecFormulaDefault);

                                                            //objTab.Handson.MatrizDigitoDecimal[i][j] = numDec;
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        //
                                        colData++;
                                    }
                                    rowData++;
                                }
                            }
                            else
                            {
                                listaError.Add(new CeldaErrorCombustible() { TipoError = 10, Mensaje = string.Format("No existe la hoja {0}.", nameWS) });
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        listaError.Add(new CeldaErrorCombustible() { TipoError = 10, Mensaje = string.Format("No se pudo acceder a la hoja {0}", posSheet) });
                    }
                }

            }

            //actualizacion de valores formula

            listaFormularioCentral = ActualizarHandsonFormulario(false, listaFormularioCentral, true, null
                                        , null, null, null, null
                                        , null, null, ConstantesCombustibles.ArchivosTotales);

            return listaFormularioCentral;
        }

        private string GetTextoValidacionNoAplica(string datoCelda)
        {
            datoCelda = (datoCelda ?? "").Trim();
            if (datoCelda.ToUpper().Contains("NO APLICA")) datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper().Contains("NO APLICA.")) datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper().Contains("NOAPLICA")) datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper().Contains("NOAPLICA.")) datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper() == "NA") datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper() == "NA.") datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper() == "N.A") datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper() == "N.A.") datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper() == "NO A") datoCelda = ConstantesCombustibles.TextoNoAplica;
            if (datoCelda.ToUpper() == "NO A.") datoCelda = ConstantesCombustibles.TextoNoAplica;

            return datoCelda;
        }

        #endregion

        #region Listado_Envios_Extranet

        /// <summary>
        /// Guarda al usuario y la fecha de recepcion del cargo
        /// </summary>
        /// <param name="listadoEnvios"></param>
        /// <param name="idEstado"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarFechaRecepcionDeCargo(List<CbEnvioDTO> listadoEnvios, int idEstado, string usuario)
        {
            int salida = 0;

            //solo si existen envios para la carpeta seleccionada
            if (listadoEnvios.Any())
            {

                //para algunos estados
                if (idEstado == ConstantesCombustibles.EstadoObservado || idEstado == ConstantesCombustibles.EstadoAprobado || idEstado == ConstantesCombustibles.EstadoAprobadoParcialmente ||
                    idEstado == ConstantesCombustibles.EstadoDesaprobado || idEstado == ConstantesCombustibles.EstadoAsignado)
                {
                    DateTime hoy = DateTime.Now;

                    //Obtenemos los registros LogEnvios para cada envio de cierto estado
                    List<int> lstEnvioscodis = listadoEnvios.Select(x => x.Cbenvcodi).Distinct().ToList();
                    string envioscodis = String.Join(",", lstEnvioscodis);
                    List<CbLogenvioDTO> lstLogEnvios = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envioscodis, idEstado.ToString()).ToList();


                    List<CbLogenvioDTO> lstLogEnviosSinFechaRecepcion = lstLogEnvios.Where(x => x.Logenvfecrecepcion == null).ToList();
                    foreach (var regLogEnvio in lstLogEnviosSinFechaRecepcion)
                    {
                        regLogEnvio.Logenvfecrecepcion = hoy;
                        regLogEnvio.Logenvusurecepcion = usuario;

                        UpdateCbLogenvio(regLogEnvio);
                    }

                }
            }
            return salida;
        }

        /// <summary>
        /// Guarda al usuario y la fecha de lectura del cargo
        /// </summary>
        /// <param name="envio"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarFechaLecturaDeCargo(CbEnvioDTO envio, string usuario)
        {
            int salida = 0;

            if (envio != null)
            {
                int idEstado = envio.Estenvcodi;

                //para algunos estados
                if (idEstado == ConstantesCombustibles.EstadoObservado || idEstado == ConstantesCombustibles.EstadoAprobado || idEstado == ConstantesCombustibles.EstadoAprobadoParcialmente ||
                    idEstado == ConstantesCombustibles.EstadoDesaprobado || idEstado == ConstantesCombustibles.EstadoAsignado)
                {
                    DateTime hoy = DateTime.Now;

                    //Obtenemos los registros LogEnvios para cada envio de cierto estado                    
                    string envioscodi = envio.Cbenvcodi.ToString();
                    List<CbLogenvioDTO> lstLogEnvios = FactorySic.GetCbLogenvioRepository().ListarPorEnviosYEstado(envioscodi, idEstado.ToString()).ToList();

                    List<CbLogenvioDTO> lstLogEnviosSinFechaLectura = lstLogEnvios.Where(x => x.Logenvfeclectura == null).ToList();
                    foreach (var regLogEnvio in lstLogEnviosSinFechaLectura)
                    {
                        regLogEnvio.Logenvfeclectura = hoy;
                        regLogEnvio.Logenvusulectura = usuario;

                        UpdateCbLogenvio(regLogEnvio);
                    }
                }
            }
            return salida;
        }

        /// <summary>
        /// Genera el reporte del listado de envios
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="empresas"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="idEstado"></param>
        /// <param name="nameFile"></param>
        public void GenerarExportacionEnvios(string ruta, string pathLogo, string empresas, DateTime fechaInicio, DateTime fechaFin, int idEstado, string nameFile)
        {
            List<CbEnvioDTO> listaEnviosTotales = ObtenerListadoEnvios(empresas, idEstado, fechaInicio, fechaFin, ConstantesCombustibles.CombustiblesGaseosos);

            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelXEstado(xlPackage, pathLogo, listaEnviosTotales, idEstado, fechaInicio, fechaFin);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera la estructura del reporte del listado de envios a exportar
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="listaEnviosTotales"></param>
        /// <param name="estado"></param>
        private void GenerarArchivoExcelXEstado(ExcelPackage xlPackage, string pathLogo, List<CbEnvioDTO> listaEnviosTotales, int estado, DateTime fechaInicio, DateTime fechaFin)
        {
            string nameWS = "REPORTE";
            string titulo = "Registro de entrega de información por parte del Participante Generador Termoeléctrico";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniFecha = colIniTitulo + 1;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo + 1;
            int rowIniTabla = rowIniTitulo + 6;

            int colCodigo = colIniTable;
            int colEstado = colIniTable + 1;
            int colEmpresa = colIniTable + 2;
            int colTipoComb = colIniTable + 3;
            int colUsuario = colIniTable + 4;
            int colFechaSol = colIniTable + 5;
            int colFechaAsignacion = -1;
            int colCostoVigenteDesde = -1;
            int colFechaDesaprobacion = -1;
            int colFechaAprobacion = -1;
            int colFechaMesVigencia = -1;
            int colFechaActualizacion = colIniTable + 6;

            if (estado == ConstantesCombustibles.EstadoSolicitudAsignacion || estado == ConstantesCombustibles.EstadoAsignado)
            {
                colFechaAsignacion = colIniTable + 6;
                colCostoVigenteDesde = colIniTable + 7;
                colFechaActualizacion = colIniTable + 8;
            }

            if (estado == ConstantesCombustibles.EstadoDesaprobado)
            {
                colFechaDesaprobacion = colIniTable + 6;
                colFechaActualizacion = colIniTable + 7;
            }
            if (estado == ConstantesCombustibles.EstadoAprobadoParcialmente)
            {
                colFechaAprobacion = colIniTable + 6;
                colFechaMesVigencia = colIniTable + 7;
                colFechaActualizacion = colIniTable + 8;
            }
            if (estado == ConstantesCombustibles.EstadoAprobado)
            {
                colFechaAprobacion = colIniTable + 6;
                colFechaMesVigencia = colIniTable + 7;
                colFechaActualizacion = colIniTable + 8;
            }


            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
            ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

            ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Desde:";
            ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = EPDate.f_NombreMes(fechaInicio.Month).ToUpper() + " " + fechaInicio.Year;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Hasta:";
            ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = EPDate.f_NombreMes(fechaFin.Month).ToUpper() + " " + fechaFin.Year;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

            ws.Row(rowIniTabla).Height = 20;
            ws.Cells[rowIniTabla, colCodigo].Value = "Código";
            ws.Cells[rowIniTabla, colEstado].Value = "Estado";
            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colTipoComb].Value = "Tipo de Combustible";
            ws.Cells[rowIniTabla, colUsuario].Value = "Usuario";
            ws.Cells[rowIniTabla, colFechaSol].Value = "Fecha de solicitud";
            if (estado == ConstantesCombustibles.EstadoSolicitudAsignacion || estado == ConstantesCombustibles.EstadoAsignado)
            {
                ws.Cells[rowIniTabla, colFechaAsignacion].Value = "Fecha de Asignación";
                ws.Cells[rowIniTabla, colCostoVigenteDesde].Value = "Costo Vigente Desde";
            }
            if (estado == ConstantesCombustibles.EstadoDesaprobado)
                ws.Cells[rowIniTabla, colFechaDesaprobacion].Value = "Fecha de Desaprobación";
            if (estado == ConstantesCombustibles.EstadoAprobadoParcialmente || estado == ConstantesCombustibles.EstadoAprobado)
            {
                ws.Cells[rowIniTabla, colFechaAprobacion].Value = "Fecha de Aprobación";
                ws.Cells[rowIniTabla, colFechaMesVigencia].Value = "Mes de Vigencia";
            }
            ws.Cells[rowIniTabla, colFechaActualizacion].Value = "Actualización";

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaActualizacion + 1);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaActualizacion + 1, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaActualizacion, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaActualizacion, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaActualizacion, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaActualizacion, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaActualizacion, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaActualizacion, "#000000");

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaEnviosTotales)
            {
                ws.Cells[rowData, colCodigo].Value = item.Cbenvcodi;
                ws.Cells[rowData, colEstado].Value = item.Estenvnomb.ToString().Trim();
                ws.Cells[rowData, colEmpresa].Value = item.Emprnomb.ToString().Trim();
                ws.Cells[rowData, colTipoComb].Value = item.Fenergnomb.ToString().Trim();
                ws.Cells[rowData, colUsuario].Value = item.Cbenvususolicitud.Trim();
                ws.Cells[rowData, colFechaSol].Value = item.CbenvfecsolicitudDesc;
                ws.Cells[rowData, colFechaActualizacion].Value = item.CbenvfecmodificacionDesc;

                if (estado == ConstantesCombustibles.EstadoSolicitudAsignacion || estado == ConstantesCombustibles.EstadoAsignado)
                {
                    ws.Cells[rowData, colFechaAsignacion].Value = item.FechaAsignacionDesc;
                    ws.Cells[rowData, colCostoVigenteDesde].Value = item.CostoVigenteDesdeDesc;
                }

                if (estado == ConstantesCombustibles.EstadoDesaprobado)
                {
                    ws.Cells[rowData, colFechaDesaprobacion].Value = item.FechaDesaprobacionDesc;
                }
                if (estado == ConstantesCombustibles.EstadoAprobadoParcialmente)
                {
                    ws.Cells[rowData, colFechaAprobacion].Value = item.FechaAprobacionDesc;
                    ws.Cells[rowData, colFechaMesVigencia].Value = item.FechaVigenciaDesc;
                }
                if (estado == ConstantesCombustibles.EstadoAprobado)
                {
                    ws.Cells[rowData, colFechaAprobacion].Value = item.FechaAprobacionDesc;
                    ws.Cells[rowData, colFechaMesVigencia].Value = item.FechaVigenciaDesc;
                }


                rowData++;
            }
            if (!listaEnviosTotales.Any()) rowData++;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaActualizacion, "Calibri", 8);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaActualizacion, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaActualizacion, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaActualizacion, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEstado, rowData - 1, colFechaActualizacion, "Centro");

            #endregion

            //filter
            ws.Cells[rowIniTabla, colCodigo, rowIniTabla, colFechaActualizacion].AutoFilter = true;
            ws.Cells[rowIniTabla, colIniTable, rowData, colFechaActualizacion].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }
        #endregion

        #region Operaciones en envios

        public CbEnvioDTO RealizarSolicitudCostoCombustibleGas(int idEnvio, int idEmpresa, string tipoCentral, string tipoOpcion
                                        , string usuarioExtranet, string estado, string plazo
                                        , List<PR31FormGasCentral> listaFormularioCentral, PR31FormGasSustento formularioSustento
                                        , string otrosUsuariosEmpresa, string usuarioCargaIntranet, string tipoCarga
                                        , int tipoGuardado, string descVersion, int? condicionEnvioPrevioTemporal, int interfaz)
        {
            try
            {
                //Si el anterior envio temporal no tuvo conexion con servidor, lo guardo
                if (tipoGuardado == ConstantesCombustibles.GuardadoTemporal && condicionEnvioPrevioTemporal == ConstantesCombustibles.EnvioTemporalPrevioConErrorConexion)
                {
                    GuardarVersionCasoError(idEnvio, idEmpresa, tipoCentral, tipoOpcion, usuarioExtranet, plazo, tipoGuardado, condicionEnvioPrevioTemporal);
                }

                DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);

                int estadoEnvio = -1;
                bool esNuevoRegistro = idEnvio == 0;
                bool enviarCorreoSubs = false;

                int plazoEnvio = -1;
                //Es subsanacion o edicion del dia (CExistentes)
                CbEnvioDTO regEnvio = new CbEnvioDTO();
                if (!esNuevoRegistro)
                {
                    regEnvio = GetByIdCbEnvio(idEnvio);

                    //obtener plazo
                    if (tipoGuardado == ConstantesCombustibles.GuardadoOficial)
                    {
                        //si es correccion del mismo dia para un envio nuevo
                        if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud)
                            plazoEnvio = ObtenerPlazo(regEnvio, interfaz, true, regEnvio.Cbenvtipocentral, ConstantesCombustibles.EstadoObservado, ConstantesCombustibles.EstadoSubsanacionObs);
                        else
                            plazoEnvio = ObtenerPlazo(regEnvio, interfaz, false, regEnvio.Cbenvtipocentral, ConstantesCombustibles.EstadoObservado, ConstantesCombustibles.EstadoSubsanacionObs);
                    }

                    estadoEnvio = regEnvio.Estenvcodi;
                    regEnvio.Cbenvfecmodificacion = fechaRegistro;
                    regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);

                    //solo cuando sea oficial cambio su estenvcodi
                    if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoObservado && tipoGuardado == ConstantesCombustibles.GuardadoOficial)
                    {
                        estadoEnvio = ConstantesCombustibles.EstadoSubsanacionObs;
                        enviarCorreoSubs = regEnvio.Cbenvfecampl == null;

                        CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(idEnvio, ConstantesCombustibles.EstadoObservado);
                        regEnvio.FechaRevisionCoes = logEnvioUltimoObs.Logenvfeccreacion;
                    }

                }
                else
                {
                    //es nuevo envio
                    //obtener plazo
                    if (tipoGuardado == ConstantesCombustibles.GuardadoOficial)
                        plazoEnvio = ObtenerPlazo(null, interfaz, true, tipoCentral, null, ConstantesCombustibles.EstadoSolicitud);

                    DateTime fechaVigencia = new DateTime(fechaRegistro.Year, fechaRegistro.Month, 1).AddMonths(1); //existente
                    if (tipoCentral == ConstantesCombustibles.CentralNueva) fechaVigencia = fechaVigencia.AddMonths(-1);

                    regEnvio.Estcomcodi = ConstantesCombustibles.EstcomcodiGas;
                    regEnvio.Emprcodi = idEmpresa;
                    regEnvio.Cbenvususolicitud = usuarioExtranet;
                    regEnvio.Cbenvfecsolicitud = fechaRegistro;
                    regEnvio.Cbenvestado = estado;
                    regEnvio.Cbenvplazo = plazo;
                    regEnvio.Cbenvtipocentral = tipoCentral;
                    regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);
                    regEnvio.Cbenvfechaperiodo = fechaVigencia;
                    regEnvio.Cbftcodi = listaFormularioCentral[0].Cbftcodi;
                    regEnvio.Cbenvtipocarga = tipoCarga;
                    regEnvio.Cbenvusucarga = usuarioCargaIntranet;

                    //regEnvio.Cbenvfecfinrptasolicitud = FechaFinRespuestaSolicitud(regEnvio.Estcomcodi, regEnvio.Cbenvfecsolicitud);

                    estadoEnvio = ConstantesCombustibles.EstadoSolicitud;
                    if (ConstantesCombustibles.OpcionNuevaSolicitoAsignacion == tipoOpcion) estadoEnvio = ConstantesCombustibles.EstadoSolicitudAsignacion;
                }
                regEnvio.Cbenvtipoenvio = tipoGuardado;
                regEnvio.Estenvcodi = estadoEnvio;

                //log
                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = estadoEnvio;
                logEnvio.Logenvusucreacion = usuarioExtranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                regEnvio.LogEnvioActual = logEnvio;
                logEnvio.Logenvplazo = plazoEnvio;

                //estructura de tablas para guardar grilla y archivos
                CbVersionDTO version = GetVersionFromModeloWebGas(regEnvio, usuarioExtranet, fechaRegistro, listaFormularioCentral, formularioSustento);
                regEnvio.VersionActual = version;

                string enviocodisAutoguardados = "";
                string versioncodisAutoguardados = "";
                if (tipoGuardado == ConstantesCombustibles.GuardadoTemporal)
                {
                    //descripcion
                    string midescripcionparte1 = "";
                    if (descVersion == "" || descVersion == null)
                    {
                        midescripcionparte1 = "Se autoguardó exitosamente.";
                    }
                    else
                    {
                        midescripcionparte1 = descVersion + " y " + "se autoguardó exitosamente.";
                    }

                    version.Cbveroperacion = 1;
                    version.Cbverdescripcion = midescripcionparte1;
                    version.Cbverconexion = 1;
                    version.Cbvertipo = ConstantesCombustibles.GuardadoTemporal;


                    //cuando se subsane y es guardado oficial, el estadoEnvio para encontrar los autoguardados debe ser OBSERVACION (estadoEnvio = 6)
                    int estEnvioX = estadoEnvio;
                    if (estadoEnvio == ConstantesCombustibles.EstadoSubsanacionObs)
                        estEnvioX = ConstantesCombustibles.EstadoObservado;

                    //obtengo el numero de la version
                    List<CbEnvioDTO> lstAutoguardadosActuales = ObtenerAutoguardados(tipoCentral, regEnvio.Cbenvfechaperiodo.Value, idEmpresa, estEnvioX);
                    List<CbVersionDTO> lstVersionesAutoguardados = lstAutoguardadosActuales.Any() ? ObtenerVersionesAutoguardados(lstAutoguardadosActuales) : new List<CbVersionDTO>();
                    version.Cbvernumversion = lstVersionesAutoguardados.Any() ? lstVersionesAutoguardados.Count + 1 : 1;
                }
                else
                {
                    //Obtengo los envios y versiones que deben cambiar de estado para no ser tomados en cuenta en futuros cambios
                    if (tipoGuardado == ConstantesCombustibles.GuardadoOficial)
                    {
                        //cuando se subsane y es guardado oficial, el estadoEnvio para encontrar los autoguardados debe ser OBSERVACION (estadoEnvio = 6)
                        int estEnvio = estadoEnvio;
                        if (estadoEnvio == ConstantesCombustibles.EstadoSubsanacionObs)
                            estEnvio = ConstantesCombustibles.EstadoObservado;

                        //Obtengo los envios y versiones de los autoguardados
                        List<CbEnvioDTO> lstAutoguardados = ObtenerAutoguardados(tipoCentral, regEnvio.Cbenvfechaperiodo.Value, idEmpresa, estEnvio);
                        enviocodisAutoguardados = string.Join(",", lstAutoguardados.Select(x => x.Cbenvcodi).ToList());

                        List<CbVersionDTO> lstVersionesAuto = ObtenerVersionesAutoguardados(lstAutoguardados);
                        versioncodisAutoguardados = string.Join(",", lstVersionesAuto.Select(x => x.Cbvercodi).ToList());
                    }
                }

                int cbenvcodi = idEnvio;
                bool tieneModificacion = true;

                //guardar informacion y archivos
                if (esNuevoRegistro || tieneModificacion)
                {
                    cbenvcodi = GuardarEnvioGaseosoTransaccional(regEnvio, tipoGuardado, enviocodisAutoguardados, versioncodisAutoguardados);
                    regEnvio.Cbenvcodi = cbenvcodi;
                    regEnvio.Cbvercodi = regEnvio.VersionActual.Cbvercodi;

                    //enviar notificacion
                    if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud || regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitudAsignacion)
                    {
                        //obtener datos de empresa, central, etc
                        CbEnvioDTO envio = GetByIdCbEnvio(cbenvcodi);
                        envio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(estadoEnvio, envio, "");
                        envio.UsuariosAgentesTotales = envio.Cbenvususolicitud + ";" + otrosUsuariosEmpresa;
                        if (esNuevoRegistro && tipoGuardado == ConstantesCombustibles.GuardadoOficial)
                        {
                            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoNuevo, envio);
                        }
                    }
                    else
                    {

                        regEnvio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoSubsanacionObs, regEnvio, usuarioExtranet);
                        regEnvio.UsuariosAgentesTotales = regEnvio.Cbenvususolicitud + ";" + otrosUsuariosEmpresa;
                        if (enviarCorreoSubs && tipoGuardado == ConstantesCombustibles.GuardadoOficial)
                        {
                            EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoSubsanacionObs, regEnvio);
                        }
                    }
                }

                return regEnvio;
            }
            catch (Exception ex)
            {
                if (tipoGuardado == ConstantesCombustibles.GuardadoTemporal)
                {
                    GuardarVersionCasoError(idEnvio, idEmpresa, tipoCentral, tipoOpcion, usuarioExtranet, plazo, tipoGuardado, null);
                }
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }
        }

        /// <summary>
        /// Guarda versiones en caso ocurra algun error en el servidor 
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="tipoCentral"></param>
        /// <param name="tipoOpcion"></param>
        /// <param name="usuarioExtranet"></param>
        /// <param name="estado"></param>
        /// <param name="plazo"></param>
        /// <param name="tipoGuardado"></param>
        public void GuardarVersionCasoError(int idEnvio, int idEmpresa, string tipoCentral, string tipoOpcion, string usuarioExtranet, string plazo, int tipoGuardado, int? condicionEnvioPrevioTemporal)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(idEnvio);

            //para pruebas sumo 5min 
            if (tipoGuardado == ConstantesCombustibles.GuardadoTemporal)
                fechaRegistro.AddMinutes(3);

            int estadoEnvio = -1;
            bool esNuevoRegistro = idEnvio == 0;
            bool enviarCorreoSubs = false;

            //envio
            CbEnvioDTO regEnvio = new CbEnvioDTO();
            DateTime fechaVigencia = DateTime.Today;

            //Es subsanacion o edicion del dia (CExistentes)
            if (!esNuevoRegistro)
            {
                regEnvio = GetByIdCbEnvio(idEnvio);
                estadoEnvio = regEnvio.Estenvcodi;
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvfecsistema = fechaRegistro.AddMinutes(1);
                regEnvio.Cbenvestado = ConstantesCombustibles.EstadoConError; // "X" Pongo este estado para no tomarlo en cuenta cuando busque autoguardados
                fechaVigencia = regEnvio.Cbenvfechaperiodo.Value;

                if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoObservado && tipoGuardado == ConstantesCombustibles.GuardadoOficial)
                {
                    estadoEnvio = ConstantesCombustibles.EstadoSubsanacionObs;
                    enviarCorreoSubs = regEnvio.Cbenvfecampl == null;

                    CbLogenvioDTO logEnvioUltimoObs = GetUltimoCbLogEnvio(idEnvio, ConstantesCombustibles.EstadoObservado);
                    regEnvio.FechaRevisionCoes = logEnvioUltimoObs.Logenvfeccreacion;
                }

            }
            else //es nuevo envio
            {

                fechaVigencia = new DateTime(fechaRegistro.Year, fechaRegistro.Month, 1).AddMonths(1); //existente
                if (tipoCentral == ConstantesCombustibles.CentralNueva) fechaVigencia = fechaVigencia.AddMonths(-1);

                regEnvio.Estcomcodi = ConstantesCombustibles.EstcomcodiGas;
                regEnvio.Emprcodi = idEmpresa;
                regEnvio.Cbenvususolicitud = usuarioExtranet;
                regEnvio.Cbenvfecsolicitud = fechaRegistro;
                regEnvio.Cbenvestado = ConstantesCombustibles.EstadoConError; // "X" Pongo este estado para no tomarlo en cuenta cuando busque autoguardados
                regEnvio.Cbenvplazo = plazo;
                regEnvio.Cbenvtipocentral = tipoCentral;
                regEnvio.Cbenvfecsistema = fechaRegistro.AddSeconds(1);
                regEnvio.Cbenvfechaperiodo = fechaVigencia;
                regEnvio.Cbenvtipocarga = "E";

                estadoEnvio = ConstantesCombustibles.EstadoSolicitud;
                if (ConstantesCombustibles.OpcionNuevaSolicitoAsignacion == tipoOpcion) estadoEnvio = ConstantesCombustibles.EstadoSolicitudAsignacion;
            }
            regEnvio.Estenvcodi = estadoEnvio;
            regEnvio.Cbenvtipoenvio = tipoGuardado;


            //estructura de tablas para guardar grilla y archivos
            CbVersionDTO version = new CbVersionDTO();
            version.Cbvernumversion = GetNumeroVersionSiguiente(idEnvio);
            version.Cbverestado = ConstantesCombustibles.EstadoConError; // "X"
            version.Cbverusucreacion = usuarioExtranet;
            version.Cbverfeccreacion = fechaRegistro;

            string enviocodisAutoguardados = "";
            string versioncodisAutoguardados = "";
            if (tipoGuardado == ConstantesCombustibles.GuardadoTemporal)
            {
                string errorConErrorEnServidor = "Llegó la información del Generador al servidor COES, pero ocurrió un problema al guardarlo.";
                string errorAnteriorSinConexion = "Se perdió la conexión Generador / servidor COES, no llegó la información al servidor.";
                string descripcion = condicionEnvioPrevioTemporal != null ? (condicionEnvioPrevioTemporal == 0 ? errorAnteriorSinConexion : "Hubo error al guardar") : errorConErrorEnServidor;
                version.Cbveroperacion = 2;
                version.Cbverdescripcion = descripcion;
                version.Cbverconexion = 1;
                version.Cbvertipo = ConstantesCombustibles.GuardadoTemporal;


                //cuando se subsane y es guardado oficial, el estadoEnvio para encontrar los autoguardados debe ser OBSERVACION (estadoEnvio = 6)
                int estEnvioX = estadoEnvio;
                if (estadoEnvio == ConstantesCombustibles.EstadoSubsanacionObs)
                    estEnvioX = ConstantesCombustibles.EstadoObservado;

                //obtengo el numero de la version
                List<CbEnvioDTO> lstAutoguardadosActuales = ObtenerAutoguardados(tipoCentral, regEnvio.Cbenvfechaperiodo.Value, idEmpresa, estEnvioX);
                version.Cbvernumversion = lstAutoguardadosActuales.Any() ? lstAutoguardadosActuales.Count + 1 : 1;
            }
            regEnvio.VersionActual = version;

            GuardarEnvioGaseosoTransaccional(regEnvio, tipoGuardado, enviocodisAutoguardados, versioncodisAutoguardados);
        }

        private int GuardarEnvioGaseosoTransaccional(CbEnvioDTO regEnvio, int tipoGuardado, string enviocodisAutoguardados, string versioncodisAutoguardados)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            int cbenvcodi = 0;

            try
            {
                #region Guardar en bd

                conn = FactorySic.GetCbEnvioRepository().BeginConnection();
                tran = FactorySic.GetCbEnvioRepository().StartTransaction(conn);

                if (tipoGuardado == ConstantesCombustibles.GuardadoOficial)
                {
                    if (regEnvio.Cbenvcodi != 0)
                    {
                        this.UpdateCbEnvio(regEnvio, conn, tran);
                        cbenvcodi = regEnvio.Cbenvcodi;
                    }
                    else
                    {
                        cbenvcodi = this.SaveCbEnvio(regEnvio, conn, tran);
                    }

                    //log
                    regEnvio.LogEnvioActual.Cbenvcodi = cbenvcodi;
                    this.SaveCbLogenvio(regEnvio.LogEnvioActual, conn, tran);
                }
                else
                {
                    //cuando es envio temporal, guardo si o si un envio, ya sea nuevo o subsanado
                    if (tipoGuardado == ConstantesCombustibles.GuardadoTemporal)
                    {
                        CbEnvioDTO envio = ObtenerEnvioTemporalAAlmacenar(regEnvio, out int accion);

                        if (accion == ConstantesCombustibles.AccionGuardar)
                            cbenvcodi = this.SaveCbEnvio(envio, conn, tran);
                        else
                        {
                            if (accion == ConstantesCombustibles.AccionActualizar)
                            {
                                this.UpdateCbEnvio(envio, conn, tran);
                                cbenvcodi = envio.Cbenvcodi;
                            }
                        }

                        regEnvio.VersionActual.Cbvertipo = ConstantesCombustibles.GuardadoTemporal;
                    }
                }

                //version
                regEnvio.VersionActual.Cbenvcodi = cbenvcodi;
                int cbvercodi = this.SaveCbVersion(regEnvio.VersionActual, conn, tran);
                regEnvio.VersionActual.Cbvercodi = cbvercodi;

                //correlativos
                int cbarchcodiCorr = FactorySic.GetCbArchivoenvioRepository().GetMaxId();
                int cbcentcodiCorr = FactorySic.GetCbEnvioCentralRepository().GetMaxId();
                int cbvercodiCorr = FactorySic.GetCbDatosRepository().GetMaxId();
                int cbdetcodiCorr = FactorySic.GetCbDatosDetalleRepository().GetMaxId();
                int cbobscodiCorr = FactorySic.GetCbObsRepository().GetMaxId();
                int cbobsacodiCorr = FactorySic.GetCbObsxarchivoRepository().GetMaxId();

                //archivos
                if (regEnvio.VersionActual.ListaArchivo != null)
                {
                    foreach (var regArchivo in regEnvio.VersionActual.ListaArchivo)
                    {
                        regArchivo.Cbvercodi = cbvercodi;
                        regArchivo.Cbarchcodi = cbarchcodiCorr;
                        this.SaveCbArchivoenvio(regArchivo, conn, tran);
                        cbarchcodiCorr++;
                    }
                }

                //observaciones de archivo sustentatorio
                if (regEnvio.VersionActual.ListaDato != null)
                {
                    foreach (var regDato in regEnvio.VersionActual.ListaDato)
                    {
                        regDato.Cbcentcodi = null;
                        regDato.Cbvercodi = cbvercodi;
                        regDato.Cbevdacodi = cbvercodiCorr++;
                        this.SaveCbDatos(regDato, conn, tran);
                        cbvercodiCorr++;

                        //obs de sección
                        if (regDato.Obs != null)
                        {
                            regDato.Obs.Cbevdacodi = regDato.Cbevdacodi;
                            regDato.Obs.Cbobscodi = cbobscodiCorr;
                            this.SaveCbObs(regDato.Obs, conn, tran);
                            cbobscodiCorr++;

                            if (regDato.Obs.ListaArchivoXObs != null)
                            {
                                //archivos de cada obs
                                foreach (var objObsArch in regDato.Obs.ListaArchivoXObs)
                                {
                                    objObsArch.Cbobscodi = regDato.Obs.Cbobscodi;
                                    objObsArch.Cbobsacodi = cbobsacodiCorr;
                                    this.SaveCbObsxarchivo(objObsArch, conn, tran);
                                    cbobsacodiCorr++;
                                }
                            }
                        }
                    }
                }

                //centrales por versión
                if (regEnvio.VersionActual.ListaCentralXVersion != null)
                {
                    foreach (var regCentral in regEnvio.VersionActual.ListaCentralXVersion)
                    {
                        regCentral.Cbvercodi = regEnvio.VersionActual.Cbvercodi;
                        regCentral.Cbcentcodi = cbcentcodiCorr;
                        this.SaveCbEnvioCentral(regCentral, conn, tran);
                        cbcentcodiCorr++;

                        //datos
                        foreach (var regDato in regCentral.ListaDato)
                        {
                            regDato.Cbcentcodi = regCentral.Cbcentcodi;
                            regDato.Cbvercodi = cbvercodi;
                            regDato.Cbevdacodi = cbvercodiCorr++;
                            this.SaveCbDatos(regDato, conn, tran);
                            cbvercodiCorr++;

                            //obs de sección
                            if (regDato.Obs != null)
                            {
                                regDato.Obs.Cbevdacodi = regDato.Cbevdacodi;
                                regDato.Obs.Cbobscodi = cbobscodiCorr;
                                this.SaveCbObs(regDato.Obs, conn, tran);
                                cbobscodiCorr++;

                                if (regDato.Obs.ListaArchivoXObs != null)
                                {
                                    //archivos de cada obs
                                    foreach (var objObsArch in regDato.Obs.ListaArchivoXObs)
                                    {
                                        objObsArch.Cbobscodi = regDato.Obs.Cbobscodi;
                                        objObsArch.Cbobsacodi = cbobsacodiCorr;
                                        this.SaveCbObsxarchivo(objObsArch, conn, tran);
                                        cbobsacodiCorr++;
                                    }
                                }
                            }
                        }

                    }
                }

                //Cuando realizo un envio oficial, borro el historial de autoguardados
                if (tipoGuardado == ConstantesCombustibles.GuardadoOficial && enviocodisAutoguardados != "")
                {
                    CambiarEstadoEnvios(enviocodisAutoguardados, ConstantesCombustibles.EstadoDesuso);
                    CambiarEstadoVersiones(versioncodisAutoguardados, ConstantesCombustibles.EstadoDesuso);
                }

                #endregion

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                cbenvcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos de la solicitud.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

            return cbenvcodi;
        }

        /// <summary>
        /// Devuelve el envio a guardar o actualizar segun la existencia de autoguardados previos
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="accion"></param>
        /// <returns></returns>
        private CbEnvioDTO ObtenerEnvioTemporalAAlmacenar(CbEnvioDTO regEnvio, out int accion)
        {
            CbEnvioDTO envio = new CbEnvioDTO();

            //Verifico si ya existe un autoguardado para la empresa, tipo central, mes de vigencia
            string tipoCentral = regEnvio.Cbenvtipocentral;
            DateTime mesDeVigencia = regEnvio.Cbenvfechaperiodo.Value;
            int idEmpresa = regEnvio.Emprcodi;
            int estenvcodi = regEnvio.Estenvcodi;

            //busco los envios autoguardados 
            List<CbEnvioDTO> lstAutoguardados = ObtenerAutoguardados(tipoCentral, mesDeVigencia, idEmpresa, estenvcodi);

            bool tieneAutoguardados = lstAutoguardados.Any() ? true : false;

            //si el envio tiene estado ERROR, debe buscar un envio autoguardado con ERROR para actualizarlo y si no lo encuentra debe crear nuevo envio 
            if (regEnvio.Cbenvestado == ConstantesCombustibles.EstadoConError)
            {
                if (tieneAutoguardados)
                {
                    //busco el autoguardado con error
                    List<CbEnvioDTO> lstConErrores = lstAutoguardados.Where(x => x.Cbenvestado == ConstantesCombustibles.EstadoConError).OrderBy(x => x.Cbenvcodi).ToList();
                    CbEnvioDTO ultimoAutoguardadoConError = lstConErrores.Any() ? lstConErrores.First() : null;

                    //si existe un autoguardado con error, uso ese para guardar el autoguardado con error 
                    if (ultimoAutoguardadoConError != null)
                    {
                        regEnvio.Cbenvcodi = ultimoAutoguardadoConError.Cbenvcodi;
                        envio = regEnvio;
                        accion = ConstantesCombustibles.AccionActualizar;
                    }
                    else // si no existe un autoguardado con error, creo uno nuevo para utilizar la info del autoguardado sin errores
                    {
                        envio = regEnvio;
                        accion = ConstantesCombustibles.AccionGuardar;
                    }

                }
                else
                {
                    envio = regEnvio;
                    accion = ConstantesCombustibles.AccionGuardar;
                }

            }
            else //si el envio no tiene errores (tiene f3 y archivos)
            {

                if (tieneAutoguardados)
                {
                    List<CbEnvioDTO> lstSinErrores = lstAutoguardados.Where(x => x.Cbenvestado != ConstantesCombustibles.EstadoConError).OrderBy(x => x.Cbenvcodi).ToList();
                    CbEnvioDTO ultimoAutoguardadoSinError = lstSinErrores.Any() ? lstSinErrores.First() : null;

                    //si existe un autoguardado sin error, uso ese para guardar el autoguardado sin error 
                    if (ultimoAutoguardadoSinError != null)
                    {
                        regEnvio.Cbenvcodi = ultimoAutoguardadoSinError.Cbenvcodi;
                        envio = regEnvio;
                        accion = ConstantesCombustibles.AccionActualizar;
                    }
                    else // si no existe un autoguardado sin error, creo uno nuevo para utilizar la info del autoguardado sin errores
                    {
                        envio = regEnvio;
                        accion = ConstantesCombustibles.AccionGuardar;
                    }


                }
                else
                {
                    envio = regEnvio;
                    accion = ConstantesCombustibles.AccionGuardar;
                }
            }

            return envio;
        }

        private void ActualizarEnvioGaseosoTransaccional(CbEnvioDTO regEnvio)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                this.UpdateCbEnvio(regEnvio, conn, tran);

                //log
                regEnvio.LogEnvioActual.Cbenvcodi = regEnvio.Cbenvcodi;
                this.SaveCbLogenvio(regEnvio.LogEnvioActual, conn, tran);

                if (regEnvio.VersionActual != null)
                {
                    //version
                    regEnvio.VersionActual.Cbenvcodi = regEnvio.Cbenvcodi;
                    int cbvercodi = this.SaveCbVersion(regEnvio.VersionActual, conn, tran);
                    regEnvio.VersionActual.Cbvercodi = cbvercodi;

                    //correlativos
                    int cbarchcodiCorr = FactorySic.GetCbArchivoenvioRepository().GetMaxId();
                    int cbcentcodiCorr = FactorySic.GetCbEnvioCentralRepository().GetMaxId();
                    int cbvercodiCorr = FactorySic.GetCbDatosRepository().GetMaxId();
                    int cbdetcodiCorr = FactorySic.GetCbDatosDetalleRepository().GetMaxId();
                    int cbobscodiCorr = FactorySic.GetCbObsRepository().GetMaxId();
                    int cbobsacodiCorr = FactorySic.GetCbObsxarchivoRepository().GetMaxId();

                    //archivos
                    if (regEnvio.VersionActual.ListaArchivo != null)
                    {
                        foreach (var regArchivo in regEnvio.VersionActual.ListaArchivo)
                        {
                            regArchivo.Cbvercodi = cbvercodi;
                            regArchivo.Cbarchcodi = cbarchcodiCorr;
                            this.SaveCbArchivoenvio(regArchivo, conn, tran);
                            cbarchcodiCorr++;
                        }
                    }

                    //observaciones de archivo sustentatorio
                    foreach (var regDato in regEnvio.VersionActual.ListaDato)
                    {
                        regDato.Cbcentcodi = null;
                        regDato.Cbvercodi = cbvercodi;
                        regDato.Cbevdacodi = cbvercodiCorr++;
                        this.SaveCbDatos(regDato, conn, tran);
                        cbvercodiCorr++;

                        //obs de sección
                        if (regDato.Obs != null)
                        {
                            regDato.Obs.Cbevdacodi = regDato.Cbevdacodi;
                            regDato.Obs.Cbobscodi = cbobscodiCorr;
                            this.SaveCbObs(regDato.Obs, conn, tran);
                            cbobscodiCorr++;

                            if (regDato.Obs.ListaArchivoXObs != null)
                            {
                                //archivos de cada obs
                                foreach (var objObsArch in regDato.Obs.ListaArchivoXObs)
                                {
                                    objObsArch.Cbobscodi = regDato.Obs.Cbobscodi;
                                    objObsArch.Cbobsacodi = cbobsacodiCorr;
                                    this.SaveCbObsxarchivo(objObsArch, conn, tran);
                                    cbobsacodiCorr++;
                                }
                            }
                        }
                    }

                    //centrales por versión
                    if (regEnvio.VersionActual.ListaCentralXVersion != null)
                    {
                        foreach (var regCentral in regEnvio.VersionActual.ListaCentralXVersion)
                        {
                            regCentral.Cbvercodi = regEnvio.VersionActual.Cbvercodi;
                            regCentral.Cbcentcodi = cbcentcodiCorr;
                            this.SaveCbEnvioCentral(regCentral, conn, tran);
                            cbcentcodiCorr++;

                            //datos
                            foreach (var regDato in regCentral.ListaDato)
                            {
                                regDato.Cbcentcodi = regCentral.Cbcentcodi;
                                regDato.Cbvercodi = cbvercodi;
                                regDato.Cbevdacodi = cbvercodiCorr++;
                                this.SaveCbDatos(regDato, conn, tran);
                                cbvercodiCorr++;

                                //obs de sección
                                if (regDato.Obs != null)
                                {
                                    regDato.Obs.Cbevdacodi = regDato.Cbevdacodi;
                                    regDato.Obs.Cbobscodi = cbobscodiCorr;
                                    this.SaveCbObs(regDato.Obs, conn, tran);
                                    cbobscodiCorr++;

                                    if (regDato.Obs.ListaArchivoXObs != null)
                                    {
                                        //archivos de cada obs
                                        foreach (var objObsArch in regDato.Obs.ListaArchivoXObs)
                                        {
                                            objObsArch.Cbobscodi = regDato.Obs.Cbobscodi;
                                            objObsArch.Cbobsacodi = cbobsacodiCorr;
                                            this.SaveCbObsxarchivo(objObsArch, conn, tran);
                                            cbobsacodiCorr++;
                                        }
                                    }
                                }
                            }

                        }
                    }
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private CbVersionDTO GetVersionFromModeloWebGas(CbEnvioDTO regEnvio, string usuario, DateTime fechaRegistro
                                                    , List<PR31FormGasCentral> listaFormularioCentral, PR31FormGasSustento formularioSustento)
        {
            string tipoOpcion = (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitudAsignacion || regEnvio.Estenvcodi == ConstantesCombustibles.EstadoAsignado)
                                        ? ConstantesCombustibles.OpcionNuevaSolicitoAsignacion : "";

            //
            CbVersionDTO version = new CbVersionDTO();
            version.Cbvernumversion = GetNumeroVersionSiguiente(regEnvio.Cbenvcodi);
            version.Cbverestado = ConstantesCombustibles.EstadoRegActivo;
            version.Cbverusucreacion = usuario;
            version.Cbverfeccreacion = fechaRegistro;

            //archivos
            List<CbArchivoenvioDTO> listaArchivo = new List<CbArchivoenvioDTO>();
            List<CbDatosDTO> listaDatoObs = new List<CbDatosDTO>();
            if (formularioSustento != null)
            {
                if (formularioSustento.SeccionCombustible.ListaArchivo != null)
                {
                    int orden = 1;
                    foreach (var regArchTmp in formularioSustento.SeccionCombustible.ListaArchivo)
                    {
                        CbArchivoenvioDTO regArchivo = new CbArchivoenvioDTO();
                        regArchivo.Ccombcodi = formularioSustento.SeccionCombustible.Seccion.Ccombcodi;
                        regArchivo.Cbarchnombreenvio = regArchTmp.Cbarchnombreenvio;
                        regArchivo.Cbarchnombrefisico = regArchTmp.Cbarchnombrefisico;
                        regArchivo.EsNuevo = regArchTmp.EsNuevo;
                        regArchivo.Cbarchorden = orden;
                        regArchivo.Cbarchestado = ConstantesCombustibles.EstadoArchivoActivo;
                        regArchivo.Cbarchconfidencial = regArchTmp.Cbarchconfidencial;

                        listaArchivo.Add(regArchivo);
                        orden++;
                    }
                }

                if (formularioSustento.SeccionCombustible.ListaObs != null)
                {
                    int orden = 1;
                    foreach (var regObsTmp in formularioSustento.SeccionCombustible.ListaObs)
                    {
                        CbDatosDTO regDatoObs = new CbDatosDTO();
                        regDatoObs.Ccombcodi = regObsTmp.Ccombcodi;
                        regDatoObs.Cbevdavalor = regObsTmp.Cbevdavalor;
                        regDatoObs.Obs = new CbObsDTO() { Cbobshtml = regObsTmp.Cbobshtml, ListaArchivoXObs = regObsTmp.ListaArchivoXObs };

                        listaDatoObs.Add(regDatoObs);
                        orden++;
                    }
                }
            }
            version.ListaArchivo = listaArchivo;
            version.ListaDato = listaDatoObs;

            List<CbEnvioCentralDTO> listaCentralXVersion = new List<CbEnvioCentralDTO>();
            foreach (var objTab in listaFormularioCentral)
            {
                CbEnvioCentralDTO objCentral = GetEnvioCentralVersionFromModeloWeb(objTab.ArrayItem, objTab.ArrayItemObs, objTab.Handson
                                                    , objTab.Equicodi, objTab.Fenergcodi, objTab.Grupocodi, objTab.Cbcentestado, tipoOpcion, objTab.IncluirObservacion);
                objCentral.Equinomb = objTab.Central;
                listaCentralXVersion.Add(objCentral);
            }

            version.ListaCentralXVersion = listaCentralXVersion;

            return version;
        }

        private CbEnvioCentralDTO GetEnvioCentralVersionFromModeloWeb(CbFichaItemDTO[] arrayItem, CbFichaItemDTO[] arrayItemObs, HandsonModel handson
                                                    , int equicodi, int fenergcodi, int grupocodi, string cbcentestado, string tipoOpcion, bool tieneColObs)
        {
            //version
            CbEnvioCentralDTO objCentral = new CbEnvioCentralDTO();
            objCentral.Equicodi = equicodi;
            objCentral.Fenergcodi = fenergcodi;
            objCentral.Grupocodi = grupocodi;
            objCentral.Cbcentestado = cbcentestado;

            //grilla
            List<CbDatosDTO> listaDato = new List<CbDatosDTO>();
            if (ConstantesCombustibles.OpcionNuevaSolicitoAsignacion == tipoOpcion)
            {
                CbDatosDTO regDato = new CbDatosDTO();
                regDato.Ccombcodi = arrayItem[0].Ccombcodi.Value;
                regDato.Cbevdavalor = ObtenerCostoCombustibleVigente(DateTime.Today).ToString();

                listaDato.Add(regDato);
            }
            else
            {
                int colConf = handson.ListaExcelData[0].Length - 0 - 1;
                if (tieneColObs) colConf = handson.ListaExcelData[0].Length - 4 - 1;

                CbFichaItemDTO objSeccion = null;
                foreach (var objItem in arrayItem)
                {
                    if (objItem.EsSeccion)
                    {
                        objSeccion = objItem;

                        //guardar el tipo de seccion
                        if (objItem.EsSeccion && objItem.Cbftitcnp0 > 0)
                        {
                            CbDatosDTO regDato = new CbDatosDTO();
                            regDato.Ccombcodi = objItem.Cbftitcnp0.Value;
                            regDato.Cbevdavalor = objItem.TipoOpcionSeccion;

                            listaDato.Add(regDato);
                        }

                        //guardar el número de columnas
                        if (objItem.EsSeccion && objItem.Cbftitcnp1 > 0)
                        {
                            CbDatosDTO regDato = new CbDatosDTO();
                            regDato.Ccombcodi = objItem.Cbftitcnp1.Value;
                            regDato.Cbevdavalor = objItem.NumColSeccion.ToString();
                            regDato.ValorEntero = objItem.NumColSeccion;
                            regDato.Cbevdatipo = "NUMERO";

                            listaDato.Add(regDato);
                        }

                        //guardar el número de columnas
                        if (objItem.EsSeccion && objItem.Cbftitcnp6 > 0)
                        {
                            CbDatosDTO regDato = new CbDatosDTO();
                            regDato.Ccombcodi = objItem.Cbftitcnp6.Value;
                            regDato.Cbevdavalor = objItem.MesUltimoCentralNuevaSeccion;

                            listaDato.Add(regDato);
                        }
                    }
                    else
                    {
                        if (objItem.Cbftitnumeral == "2.11")
                        { }

                        int numCol = objSeccion.NumColSeccion > 0 ? objSeccion.NumColSeccion : 1;
                        for (var j = 0; j < numCol; j++)
                        {
                            int estado = (int)handson.MatrizTipoEstado[objItem.PosRow][objItem.PosCol + j];
                            if (estado != ConstantesCombustibles.EstadoCeldaNoEditable) //solo considerar datos con editables o solo lectura
                            {
                                CbDatosDTO regDato = new CbDatosDTO();
                                regDato.Ccombcodi = objItem.Ccombcodi.Value;
                                regDato.Cbevdavalor = GetTextoValidacionNoAplica(handson.ListaExcelData[objItem.PosRow][objItem.PosCol + j]);
                                regDato.Cbevdaestado = estado;
                                regDato.Cbevdatipo = objItem.Cbftittipodato;

                                //regDato.Cbevdaconfidencial = handson.ListaExcelData[objItem.PosRow][6] == "True"? 1 : 0;
                                string confCelda = handson.ListaExcelData[objItem.PosRow][colConf];
                                if (!string.IsNullOrEmpty(confCelda))
                                {
                                    if (confCelda == "1" || confCelda.ToUpper() == "TRUE") regDato.Cbevdaconfidencial = 1;
                                    if (confCelda == "2" || confCelda.ToUpper() == "FALSE") regDato.Cbevdaconfidencial = 2;
                                }

                                if (objItem.Cbftittipodato == "NUMERO" || objItem.Cbftittipodato == "FORMULA")
                                {
                                    regDato.Cbevdanumdecimal = (int)handson.MatrizDigitoDecimal[objItem.PosRow][objItem.PosCol + j];

                                    if (!string.IsNullOrEmpty(regDato.Cbevdavalor))
                                    {
                                        Int32.TryParse(regDato.Cbevdavalor, out int valorEntero);
                                        regDato.ValorEntero = valorEntero;

                                        decimal.TryParse(regDato.Cbevdavalor, out decimal valorCol);
                                        regDato.Valor = valorCol;
                                    }
                                }

                                listaDato.Add(regDato);
                            }
                        }

                    }
                }

                if (arrayItemObs != null)
                    foreach (var regItem in arrayItemObs)
                    {
                        if (regItem.TieneDato)
                        {
                            CbDatosDTO regDato = new CbDatosDTO();
                            regDato.Ccombcodi = regItem.Ccombcodi.Value;
                            if (regItem.EsColEstado)
                                regDato.Cbevdavalor = handson.ListaExcelData[regItem.PosRow][regItem.PosCol];

                            if (!string.IsNullOrEmpty(regItem.Obs.Cbobshtml))
                            {
                                regDato.Obs = new CbObsDTO() { Cbobshtml = regItem.Obs.Cbobshtml, ListaArchivoXObs = regItem.Obs.ListaArchivoXObs };
                            }

                            listaDato.Add(regDato);
                        }
                    }
            }

            objCentral.ListaDato = listaDato;

            return objCentral;
        }

        /// <summary>
        /// Lista de codigos que guardan archivos de observaciones
        /// </summary>
        /// <returns></returns>
        private List<int> ListaCcombcodiXArchivos()
        {
            return new List<int>() { 118, 199, 198, 197, 196, 190, 189, 188, 185, 184, 183, 180, 179, 178, 175, 174, 173 };
        }

        /// <summary>
        /// Cancela un envío de combustibles gaseosos
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="motivo"></param>
        /// <param name="usuarioExtranet"></param>
        public void CancelarEnvioExtranetPr31Gaseoso(CbEnvioDTO regEnvio, string motivo, string usuarioExtranet, string otrosUsuariosEmpresa)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaPR31(regEnvio.Cbenvcodi);

            //solo se permite la cancelacion a los envios con estado SOLICITUD y Solicitud de asignacion
            if (regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitud || regEnvio.Estenvcodi == ConstantesCombustibles.EstadoSolicitudAsignacion)
            {
                int estadoEnvio = ConstantesCombustibles.EstadoCancelado;
                regEnvio.Estenvcodi = estadoEnvio;
                regEnvio.Cbenvfecmodificacion = fechaRegistro;
                regEnvio.Cbenvfecsistema = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);
                regEnvio.Cbenvobs = motivo;

                //log
                CbLogenvioDTO logEnvio = new CbLogenvioDTO();
                logEnvio.Estenvcodi = estadoEnvio;
                logEnvio.Logenvobservacion = motivo;
                logEnvio.Logenvusucreacion = usuarioExtranet;
                logEnvio.Logenvfeccreacion = fechaRegistro;
                regEnvio.LogEnvioActual = logEnvio;

                //guardar informacion y archivos
                ActualizarEnvioGaseosoTransaccional(regEnvio);

                //enviar notificacion
                CbEnvioDTO envio = GetByIdCbEnvio(regEnvio.Cbenvcodi);
                envio.UsuariosAgentesTotales = envio.Cbenvususolicitud + ";" + otrosUsuariosEmpresa;

                envio.UsuarioUltimoEvento = ObtenerUsuarioUltimoEvento(ConstantesCombustibles.EstadoCancelado, envio, "");
                EnvioCorreoExtranetPR31Gaseoso(ConstantesCombustibles.TipoCorreoCancelar, envio);
            }
            else
            {
                throw new ArgumentException("El envio ha sido procesado, no se puede cancelar.");
            }
        }

        #endregion


        #region Autoguardado

        /// <summary>
        /// Obtener envios autoguardados
        /// </summary>
        /// <param name="tipoCentral"></param>
        /// <param name="mesDeVigencia"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        public List<CbEnvioDTO> ObtenerAutoguardados(string tipoCentral, DateTime mesDeVigencia, int idEmpresa, int estenvcodi)
        {
            List<CbEnvioDTO> lstTemp = new List<CbEnvioDTO>();
            List<CbEnvioDTO> lstAutoguardados = new List<CbEnvioDTO>();

            //obtenemos solo los envios autoguardados
            lstTemp = FactorySic.GetCbEnvioRepository().ObtenerAutoguardados(tipoCentral, mesDeVigencia.ToString(ConstantesAppServicio.FormatoFecha), idEmpresa, estenvcodi, ConstantesCombustibles.GuardadoTemporal);

            //escogemos solo envios que estan acivos
            lstAutoguardados = lstTemp.Where(c => c.Cbenvestado != ConstantesCombustibles.EstadoDesuso).OrderBy(x => x.Cbenvcodi).ToList(); //el ultimo negativo

            return lstAutoguardados;
        }

        /// <summary>
        /// Obtener versiones autoguardadas
        /// </summary>
        /// <param name="lstAutoguardados"></param>
        /// <returns></returns>
        public List<CbVersionDTO> ObtenerVersionesAutoguardados(List<CbEnvioDTO> lstAutoguardados)
        {
            List<CbVersionDTO> lstVersAutoguardados = new List<CbVersionDTO>();
            string enviocodis = string.Join(",", lstAutoguardados.Select(x => x.Cbenvcodi).ToList());
            lstVersAutoguardados = GetByCriteriaCbVersions(enviocodis).OrderByDescending(x => x.Cbvercodi).ToList();

            return lstVersAutoguardados;
        }

        /// <summary>
        /// Cambia estado a los envios 
        /// </summary>
        /// <param name="enviocodisAutoguardados"></param>
        /// <param name="estado"></param>
        public void CambiarEstadoEnvios(string enviocodisAutoguardados, string estado)
        {
            try
            {
                FactorySic.GetCbEnvioRepository().CambiarEstadoEnvio(enviocodisAutoguardados, estado);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Cambia los estados de las versiones
        /// </summary>
        /// <param name="versioncodisAutoguardados"></param>
        /// <param name="estado"></param>
        public void CambiarEstadoVersiones(string versioncodisAutoguardados, string estado)
        {
            try
            {
                FactorySic.GetCbVersionRepository().CambiarEstado(versioncodisAutoguardados, estado);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualizar datos de último autoguardado
        /// </summary>
        /// <param name="idEnvioActual"></param>
        /// <param name="idEnvioAutoguardado"></param>
        public void ActualizarDatosAutoguardadoConEnvioActual(int idEnvioActual, int idEnvioAutoguardado)
        {
            if (idEnvioActual > 0 && idEnvioAutoguardado != 0)
            {
                IDbConnection conn = null;
                DbTransaction tran = null;

                try
                {
                    var regAutoguardado = FactorySic.GetCbEnvioRepository().GetById(idEnvioAutoguardado);
                    var regEnvioActual = FactorySic.GetCbEnvioRepository().GetById(idEnvioActual);

                    //setear valores
                    regAutoguardado.Cbenvfecsistema = regEnvioActual.Cbenvfecsistema;
                    regAutoguardado.Cbenvfecampl = regEnvioActual.Cbenvfecampl;
                    regAutoguardado.Cbenvfecfinrptasolicitud = regEnvioActual.Cbenvfecfinrptasolicitud;
                    regAutoguardado.Cbenvfecfinsubsanarobs = regEnvioActual.Cbenvfecfinsubsanarobs;
                    regAutoguardado.Cbenvfecmodificacion = regEnvioActual.Cbenvfecmodificacion;

                    //update
                    conn = FactorySic.GetCbEnvioRepository().BeginConnection();
                    tran = FactorySic.GetCbEnvioRepository().StartTransaction(conn);
                    FactorySic.GetCbEnvioRepository().Update(regAutoguardado, conn, tran);

                    //guardar definitivamente
                    tran.Commit();
                }
                catch (Exception ex)
                {
                    if (tran != null)
                        tran.Rollback();
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                }
                finally
                {
                    if (conn != null)
                        if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        #endregion

        #endregion

        #region Manejo de Archivos

        /// <summary>
        /// Permite obtener la carpeta principal de Intervenciones
        /// </summary>
        /// <returns></returns>
        public string GetPathPrincipal()
        {
            //- Definimos la carpeta raiz (termina con /)
            string pathRaiz = FileServer.GetDirectory();
            return pathRaiz;
        }

        public static string GetPathSubcarpeta(string subcarpeta)
        {
            return ConstantesCombustibles.FolderRaizPR31Gaseoso + subcarpeta + @"/";
        }

        public string GetSubcarpetaEnvio(int idEnvio, int idVersion, int idConcepto)
        {
            string carpetaEnvio = string.Format("envio_{0}/version_{1}", idEnvio, idVersion);

            if (idConcepto > 0)
                return carpetaEnvio + "/" + idConcepto;
            else
                return carpetaEnvio;
        }

        public byte[] GetBufferArchivoEnvioFinal(int idEnvio, int idVersion, int idConcepto, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathDestino = GetPathSubcarpeta(ConstantesCombustibles.SubcarpetaSolicitud) + GetSubcarpetaEnvio(idEnvio, idVersion, idConcepto);

                if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        public byte[] GetBufferArchivoEnvioTemporal(string currentUserSession, int idConcepto, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathTemporal = GetPathSubcarpeta(ConstantesCombustibles.CarpetaTemporal);
                string pathSesionID = pathTemporal + currentUserSession + @"/" + GetSubcarpetaEnvio(0, 0, idConcepto); //termina sin /

                if (FileServer.VerificarExistenciaFile(pathSesionID, fileName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathSesionID + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        public void UploadArchivoEnvioTemporal(string currentUserSession, int idConcepto, string fileNameOriginal, Stream inputStream, out string fileNamefisico)
        {
            string pathAlternativo = GetPathPrincipal();

            string myFilePath = "C:\\" + fileNameOriginal;
            string ext = Path.GetExtension(myFilePath);
            string fileName = "archivo_pr31_" + DateTime.Now.Ticks + ext;
            fileNamefisico = fileName;

            string pathTemporal = GetPathSubcarpeta(ConstantesCombustibles.CarpetaTemporal);

            try
            {
                //1. Crear carpeta temporal(si no existiese) para guardar los archivos de intervenciones o mensajes
                FileServer.CreateFolder(pathTemporal, currentUserSession, pathAlternativo);
                FileServer.CreateFolder(pathTemporal + currentUserSession + @"/", "envio_0", pathAlternativo);
                FileServer.CreateFolder(pathTemporal + currentUserSession + @"/envio_0/", "version_0", pathAlternativo);
                FileServer.CreateFolder(pathTemporal + currentUserSession + @"/envio_0/version_0/", idConcepto.ToString(), pathAlternativo);

                string pathSesionID = pathTemporal + currentUserSession + @"/" + GetSubcarpetaEnvio(0, 0, idConcepto); //termina sin /

                if (FileServer.VerificarExistenciaFile(pathSesionID, fileName, pathAlternativo))
                {
                    FileServer.DeleteBlob(pathSesionID + "\\" + fileName, pathAlternativo);
                }

                //2. guardar stream en el fileserver
                FileServer.UploadFromStream(inputStream, pathSesionID + "\\", fileName, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
            }
        }

        public List<FileData> ListarArchivoEnvioTemporal(string currentUserSession, int idConcepto)
        {
            List<FileData> listaFiles = new List<FileData>();

            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathTemporal = GetPathSubcarpeta(ConstantesCombustibles.CarpetaTemporal);
                string pathSesionID = pathTemporal + currentUserSession + @"/" + GetSubcarpetaEnvio(0, 0, idConcepto); //termina sin /

                var lista1 = FileServer.ListarArhivos(pathSesionID + "\\", pathAlternativo);
                foreach (var arch in lista1) arch.EsTemporal = true;
                listaFiles.AddRange(lista1);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }

            return listaFiles;
        }

        public void EliminarArchivoTemporal(string currentUserSession, int idConcepto, string fileName)
        {
            try
            {
                string pathAlternativo = GetPathPrincipal();

                string pathTemporal = GetPathSubcarpeta(ConstantesCombustibles.CarpetaTemporal);
                string pathSesionID = pathTemporal + currentUserSession + @"/" + GetSubcarpetaEnvio(0, 0, idConcepto); //termina sin /

                if (FileServer.VerificarExistenciaFile(pathSesionID, fileName, pathAlternativo))
                {
                    FileServer.DeleteBlob(pathSesionID + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo eliminar el archivo del servidor.", ex);
            }
        }

        public void EliminarCarpetaTemporal(string currentUserSession)
        {
            string pathAlternativo = GetPathPrincipal();
            string pathTemporal = GetPathSubcarpeta(ConstantesCombustibles.CarpetaTemporal) + currentUserSession;

            FileServer.DeleteFolderAlter(pathTemporal, pathAlternativo);
        }

        public void CopiarArchivosFinalATemporal(string currentUserSession, int idEnvio, int idVersion)
        {
            //eliminar carpeta temporal

            string pathAlternativo = GetPathPrincipal();

            try
            {
                if (idEnvio > 0)
                {
                    string pathOrigen = GetPathSubcarpeta(ConstantesCombustibles.SubcarpetaSolicitud) + GetSubcarpetaEnvio(idEnvio, idVersion, 0);
                    string pathDestino = GetPathSubcarpeta(ConstantesCombustibles.CarpetaTemporal) + currentUserSession + @"/" + GetSubcarpetaEnvio(0, 0, 0); //termina sin /

                    //EliminarCarpetaTemporal(currentUserSession); //eliminar carpeta temporal existente
                    FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        public void GuardarArchivosFinal(string currentUserSession, int idEnvio, int idVersion, bool esEnvioTemporal, List<string> listaArchivoFisicoAGuardar)
        {
            List<int> listaConcepto = ListaCcombcodiXArchivos();
            foreach (var idConcepto in listaConcepto)
            {
                //2. copiar temporales a la carpeta final
                var listaDocumentos = ListarArchivoEnvioTemporal(currentUserSession, idConcepto);

                string pathAlternativo = GetPathPrincipal();

                string pathTemporal = GetPathSubcarpeta(ConstantesCombustibles.CarpetaTemporal) + currentUserSession + @"/" + GetSubcarpetaEnvio(0, 0, idConcepto); //termina sin /
                string pathDestino = GetPathSubcarpeta(ConstantesCombustibles.SubcarpetaSolicitud) + GetSubcarpetaEnvio(idEnvio, idVersion, idConcepto);

                try
                {
                    FileServer.DeleteFolderAlter(pathDestino, pathAlternativo);//eliminar carpeta existente

                    if (listaDocumentos.Any())
                    {
                        FileServer.CreateFolder("", pathDestino, pathAlternativo);

                        foreach (var reg in listaDocumentos)
                        {
                            if (listaArchivoFisicoAGuardar.Contains(reg.FileName)) //solo mover / copiar los archivos a procesar
                            {
                                if (esEnvioTemporal)
                                {
                                    FileServer.CopyBlob("", pathTemporal + "/" + reg.FileName, pathDestino + "/" + reg.FileName, pathAlternativo);
                                }
                                else
                                {
                                    //mover 
                                    FileServer.RenameBlob("", pathTemporal + "/" + reg.FileName, pathDestino + "/" + reg.FileName, pathAlternativo);
                                }
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
                }
            }
        }

        /// <summary>
        /// Obtener solos archivos que visualiza / carga el usuario en sesion
        /// </summary>
        /// <param name="objEnvioGuardado"></param>
        /// <returns></returns>
        public List<string> ListarArchivoFisicoFromEnvio(CbEnvioDTO objEnvioGuardado)
        {
            List<string> listaArchivo = new List<string>();

            if (objEnvioGuardado != null && objEnvioGuardado.VersionActual != null)
            {
                //informe sustentatorio y sus observaciones
                if (objEnvioGuardado.VersionActual.ListaArchivo != null)
                {
                    foreach (var obj in objEnvioGuardado.VersionActual.ListaArchivo)
                        listaArchivo.Add(obj.Cbarchnombrefisico);
                }
                if (objEnvioGuardado.VersionActual.ListaDato != null)
                {
                    foreach (var obj in objEnvioGuardado.VersionActual.ListaDato)
                    {
                        if (obj.Obs != null && obj.Obs.ListaArchivoXObs != null)
                        {
                            foreach (var objObsArch in obj.Obs.ListaArchivoXObs)
                            {
                                listaArchivo.Add(objObsArch.Cbobsanombrefisico);
                            }
                        }
                    }
                }

                //Obs de secciones
                if (objEnvioGuardado.VersionActual.ListaCentralXVersion != null)
                {
                    foreach (var objCentral in objEnvioGuardado.VersionActual.ListaCentralXVersion)
                    {
                        if (objCentral.ListaDato != null)
                        {
                            foreach (var obj in objCentral.ListaDato)
                            {
                                if (obj.Obs != null && obj.Obs.ListaArchivoXObs != null)
                                {
                                    foreach (var objObsArch in obj.Obs.ListaArchivoXObs)
                                    {
                                        listaArchivo.Add(objObsArch.Cbobsanombrefisico);
                                    }
                                }
                            }
                        }
                    }
                }
            }

            return listaArchivo.Distinct().OrderBy(x => x).ToList();
        }

        /// <summary>
        /// Eliminar archivos que están en la carpeta reporte Cada vez que se ingrese al módulo de PR31
        /// </summary>
        /// <exception cref="ArgumentException"></exception>
        public void EliminarArchivosReporte()
        {
            try
            {
                string pathAlternativo = AppDomain.CurrentDomain.BaseDirectory + ConstantesCombustibles.FolderReporte;
                var listaDocumentos = FileServer.ListarArhivos(null, pathAlternativo);

                if (listaDocumentos.Any())
                {
                    foreach (var item in listaDocumentos)
                    {
                        //los archivos se guardan con prefijo archivo_pr31_ ... entonces se eliminaran
                        if (item.FileName.StartsWith("archivo_pr31_"))
                        {
                            FileServer.DeleteBlob(item.FileName, pathAlternativo);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo eliminar el archivo del servidor.", ex);
            }
        }

        public byte[] GetBufferArchivoAdjuntoCorreo(int corrcodi, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathDestino = GetPathSubcarpeta(ConstantesCombustibles.SubcarpetaArchivoAdjuntado) + corrcodi;

                if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }


        #endregion

        #endregion
    }
}