using COES.Base.Core;
using COES.Dominio.DTO.Sic;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.Correo;
using COES.Servicios.Aplicacion.Equipamiento.Helper;
using COES.Servicios.Aplicacion.Factory;
using COES.Servicios.Aplicacion.General;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.IEOD;
using COES.Servicios.Aplicacion.Migraciones;
using COES.Servicios.Aplicacion.Migraciones.Helper;
using COES.Servicios.Aplicacion.Titularidad;
using log4net;
using OfficeOpenXml;
using OfficeOpenXml.DataValidation;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net.Http;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace COES.Servicios.Aplicacion.Equipamiento
{
    /// <summary>
    /// Clase del aplicativo Ficha técnica (Reporte de equipamiento y modos de operación)
    /// </summary>
    public partial class FichaTecnicaAppServicio : AppServicioBase
    {
        CorreoAppServicio servCorreo = new CorreoAppServicio();

        /// <summary>
        /// Instancia para el manejo de logs
        /// </summary>
        private static readonly ILog Logger = LogManager.GetLogger(typeof(FichaTecnicaAppServicio));

        #region Metodos Tablas


        #region Métodos Tabla FW_USERROL

        /// <summary>
        /// Inserta un registro de la tabla FW_USERROL
        /// </summary>
        public void SaveFwUserrol(FwUserrolDTO entity)
        {
            try
            {
                FactorySic.GetFwUserrolRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FW_USERROL
        /// </summary>
        public void UpdateFwUserrol(FwUserrolDTO entity)
        {
            try
            {
                FactorySic.GetFwUserrolRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FW_USERROL
        /// </summary>
        public void DeleteFwUserrol(int usercode, int rolcode)
        {
            try
            {
                FactorySic.GetFwUserrolRepository().Delete(usercode, rolcode);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FW_USERROL
        /// </summary>
        public FwUserrolDTO GetByIdFwUserrol(int usercode, int rolcode)
        {
            return FactorySic.GetFwUserrolRepository().GetById(usercode, rolcode);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FW_USERROL
        /// </summary>
        public List<FwUserrolDTO> ListFwUserrols()
        {
            return FactorySic.GetFwUserrolRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FwUserrol
        /// </summary>
        public List<FwUserrolDTO> GetByCriteriaFwUserrols()
        {
            return FactorySic.GetFwUserrolRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FW_ROL

        /// <summary>
        /// Inserta un registro de la tabla FW_ROL
        /// </summary>
        public void SaveFwRol(FwRolDTO entity)
        {
            try
            {
                FactorySic.GetFwRolRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FW_ROL
        /// </summary>
        public void UpdateFwRol(FwRolDTO entity)
        {
            try
            {
                FactorySic.GetFwRolRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FW_ROL
        /// </summary>
        public void DeleteFwRol(int rolcode)
        {
            try
            {
                FactorySic.GetFwRolRepository().Delete(rolcode);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FW_ROL
        /// </summary>
        public FwRolDTO GetByIdFwRol(int rolcode)
        {
            return FactorySic.GetFwRolRepository().GetById(rolcode);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FW_ROL
        /// </summary>
        public List<FwRolDTO> ListFwRols()
        {
            return FactorySic.GetFwRolRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FwRol
        /// </summary>
        public List<FwRolDTO> GetByCriteriaFwRols()
        {
            return FactorySic.GetFwRolRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla SI_EMPRESA

        /// <summary>
        /// Devuelve entidad empresadto buscado por id
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public SiEmpresaDTO GetByIdSiEmpresa(int idEmpresa)
        {
            return FactorySic.GetSiEmpresaRepository().GetById(idEmpresa);
        }

        /// <summary>
        /// Permite listar las empresas por Famcodi
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresasxFamilia(string tipoEquipos, string estadoEquipo)
        {
            return FactorySic.GetSiEmpresaRepository().ListarEmpresasxTipoEquipos(tipoEquipos, ConstantesAppServicio.ParametroDefecto, estadoEquipo);
        }

        /// <summary>
        /// Permite listar las empresas por Catecodi
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresasxCategoria(string catecodis)
        {
            return FactorySic.GetSiEmpresaRepository().ListarEmpresasxCategoria(catecodis);
        }

        #endregion

        #region Métodos Tabla PR_CATEGORIA

        /// <summary>
        /// Permite listar las categorias de grupos
        /// </summary>
        /// <returns></returns>
        public List<PrCategoriaDTO> ListarCategoriaGrupoXCatecodi(string catecodi)
        {
            List<int> catecodis = catecodi.Split(',').Select(x => int.Parse(x)).ToList();
            return FactorySic.GetPrCategoriaRepository().GetByCriteria().Where(x => catecodis.Contains(x.Catecodi)).ToList();
        }

        #endregion

        #region Métodos Tabla PR_CONCEPTO

        /// <summary>
        /// Permite listar los conceptos de las categoria de grupo
        /// </summary>
        /// <param name="catecodi"></param>
        /// <returns></returns>
        public List<PrConceptoDTO> ListPrConceptoByCatecodi(string catecodi, bool flagSoloFicha)
        {
            List<PrConceptoDTO> l = FactorySic.GetPrConceptoRepository().ListByCatecodi(catecodi);

            //FILTRAR SOLO CONCEPTOS QUE PERTENECEN A FICHA TÉCNICA
            if (flagSoloFicha) l = l.Where(x => x.Concepfichatec == "S").ToList();

            foreach (var reg in l)
            {
                reg.Concepdesc = reg.Concepdesc != null ? reg.Concepdesc.Trim() : string.Empty;
                reg.Concepnombficha = reg.Concepnombficha != null ? reg.Concepnombficha.Trim() : string.Empty;
                reg.Concepabrev = reg.Concepabrev != null ? reg.Concepabrev.Trim() : string.Empty;
                reg.Concepunid = reg.Concepunid != null ? reg.Concepunid.Trim() : string.Empty;
                reg.Conceptipo = reg.Conceptipo != null ? reg.Conceptipo.Trim() : string.Empty;
                reg.Catenomb = reg.Catenomb != null ? reg.Catenomb.Trim() : string.Empty;
            }

            return l;
        }

        /// <summary>
        /// Listar conceptos
        /// </summary>
        /// <returns></returns>
        public List<PrConceptoDTO> ListarTodoPrConceptos()
        {
            return FactorySic.GetPrConceptoRepository().ListarConceptosxFiltro(-2, string.Empty, -1);
        }

        #endregion

        #region Métodos Tabla EQ_PROPIEDAD

        /// <summary>
        /// Permite listar todos los registros de la tabla EQ_PROPIEDAD
        /// </summary>
        public List<EqPropiedadDTO> ListEqPropiedadByFamcodi(int famcodi, bool flagSoloFicha)
        {
            List<EqPropiedadDTO> l = FactorySic.GetEqPropiedadRepository().ListByFamcodi(famcodi);

            //Solo propiedades que pertenecen a ficha técnica
            if (flagSoloFicha) l = l.Where(x => x.Propfichaoficial == "S").ToList();

            foreach (var reg in l)
            {
                reg.Propnomb = reg.Propnomb != null ? reg.Propnomb.Trim() : string.Empty;
                reg.Propabrev = reg.Propabrev != null ? reg.Propabrev.Trim() : string.Empty;
                reg.Propunidad = reg.Propunidad != null ? reg.Propunidad.Trim() : string.Empty;
                reg.Propdefinicion = reg.Propdefinicion != null ? reg.Propdefinicion.Trim() : string.Empty;
                reg.Proptipo = reg.Proptipo != null ? reg.Proptipo.Trim() : string.Empty;
                reg.NombreFamilia = reg.NombreFamilia != null ? reg.NombreFamilia.Trim() : string.Empty;
                reg.Propnombficha = reg.Propnombficha != null ? reg.Propnombficha.Trim() : string.Empty;
            }

            return l;
        }

        /// <summary>
        /// Listar propiedades
        /// </summary>
        /// <returns></returns>
        public List<EqPropiedadDTO> ListarTodoEqPropiedades()
        {
            return FactorySic.GetEqPropiedadRepository().GetByCriteria(-2, string.Empty, -1);
        }

        #endregion

        #region Métodos Tabla EQ_EQUIPO

        /// <summary>
        /// Listado de Equipos
        /// </summary>
        /// <param name="iEmpresa"></param>
        /// <param name="iFamilia"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarEquipoPaginado(int iEmpresa, int iFamilia)
        {
            return FactorySic.GetEqEquipoRepository().ListaEquipamientoPaginado(iEmpresa, iFamilia, -2, -2, " ", string.Empty, 1, Int32.MaxValue);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla EQ_EQUIPO
        /// </summary>
        public EqEquipoDTO GetByIdEqEquipo(int equicodi)
        {
            return FactorySic.GetEqEquipoRepository().GetById(equicodi);
        }


        #endregion

        #region Métodos Tabla PR_GRUPO

        /// <summary>
        /// Método que devuelve el listado de grupos
        /// </summary>
        /// <param name="iEmpresa"></param>
        /// <param name="iCategoria"></param>
        /// <param name="nombre"></param>
        /// <param name="estado"></param>
        /// <param name="numPagina"></param>
        /// <param name="tamPagina"></param>
        /// <param name="fecha"></param>
        /// <param name="esReservaFria"></param>
        /// <param name="esNodoEnergetico"></param>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarGrupoPaginado(int iEmpresa, string iCategoria, string nombre, string estado, int numPagina, int tamPagina, DateTime fecha, int esReservaFria, int esNodoEnergetico)
        {
            List<PrGrupoDTO> lista = FactorySic.GetPrGrupoRepository().ListaPrGruposPaginado(iEmpresa, iCategoria, nombre, estado, numPagina, tamPagina, fecha, esReservaFria, esNodoEnergetico);

            foreach (var reg in lista)
            {
                reg.Emprnomb = reg.Emprnomb != null ? reg.Emprnomb.Trim() : string.Empty;
                reg.Catenomb = reg.Catenomb != null ? reg.Catenomb.Trim() : string.Empty;
                reg.Gruponomb = reg.Gruponomb != null ? reg.Gruponomb.Trim() : string.Empty;
                reg.Grupoabrev = reg.Grupoabrev != null ? reg.Grupoabrev.Trim() : string.Empty;
                reg.Areanomb = reg.Areanomb != null && !reg.Areanomb.Trim().Contains("(NO-DEF)") ? reg.Areanomb.Trim() : string.Empty;
                reg.Areadesc = reg.Areadesc != null && !reg.Areadesc.Trim().Contains("(NO-DEF)") ? reg.Areadesc.Trim() : string.Empty;

                reg.GrupoactivoDesc = reg.Grupoactivo != null ? Util.SiNoDescripcion(reg.Grupoactivo) : string.Empty;
                reg.GrupoEstadoDesc = EquipamientoHelper.EstadoDescripcion(reg.GrupoEstado);
                reg.EstiloEstado = EquipamientoHelper.EstiloEstado(reg.GrupoEstado);
            }

            return lista;
        }

        ///Método que devuelve el total de grupos/param>
        /// <returns></returns>
        public int TotalGrupo(int iEmpresa, string iCatecodi, string nombre, string estado, DateTime fecha, int esReservaFria, int esNodoEnergetico)
        {
            return FactorySic.GetPrGrupoRepository().TotalPrGrupos(iEmpresa, iCatecodi, nombre, estado, fecha, esReservaFria, esNodoEnergetico);
        }


        /// <summary>
        /// Permite obtener un registro de la tabla PR_GRUPO
        /// </summary>
        public PrGrupoDTO GetByIdPrGrupo(int grupocodi)
        {
            return FactorySic.GetPrGrupoRepository().GetById(grupocodi);
        }

        #endregion

        #region Métodos Tabla PR_GRUPOEQ

        /// <summary>
        /// Permite realizar búsquedas en la tabla PrGrupoeq
        /// </summary>
        public List<PrGrupoeqDTO> GetByCriteriaPrGrupoeqs(int grupocodi, int equipadre)
        {
            return FactorySic.GetPrGrupoeqRepository().GetByCriteria(grupocodi, equipadre).Where(x => x.Geqactivo == 1).ToList();
        }

        #endregion

        #endregion

        #region Ficha Padre

        /// <summary>
        /// Listar las fichas padres segun Tipo de Equipo o Categoria de Grupo
        /// </summary>
        /// <param name="tipoOrigen"></param>
        /// <param name="catecodi"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        public List<FtFictecXTipoEquipoDTO> ListarFichaTecnicaPadre(int tipoOrigen, int? catecodi, int? famcodi)
        {
            List<FtFictecXTipoEquipoDTO> l = ListarFichaTecnica(ConstantesAppServicio.Activo).OrderBy(x => x.OrigenTipoDesc).ThenBy(x => x.Fteqnombre).ToList();
            if (tipoOrigen == ConstantesFichaTecnica.OrigenTipoEquipo)
                l = l.Where(x => x.Famcodi != famcodi).ToList();
            if (tipoOrigen == ConstantesFichaTecnica.OrigenCategoriaGrupo)
                l = l.Where(x => x.Catecodi != catecodi).ToList();

            return l;
        }

        /// <summary>
        /// Validar si el hijo ya existe en los hijos del padre
        /// </summary>
        /// <param name="idFTPadre"></param>
        /// <param name="tipoOrigen"></param>
        /// <param name="catecodi"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        public bool ExisteFichaTecnicaHijo(int idFTPadre, int tipoOrigen, int? catecodi, int? famcodi)
        {
            List<FtFictecXTipoEquipoDTO> listaFTHijos = ListarFichaTecnicaByPadre(idFTPadre);

            switch (tipoOrigen)
            {
                case ConstantesFichaTecnica.OrigenTipoEquipo:
                    if (famcodi.GetValueOrDefault(0) > 0)
                    {
                        listaFTHijos = listaFTHijos.Where(x => x.Famcodi == famcodi.Value).ToList();
                    }
                    catecodi = null;
                    break;
                case ConstantesFichaTecnica.OrigenCategoriaGrupo:
                    if (catecodi.GetValueOrDefault(0) > 0)
                    {
                        listaFTHijos = listaFTHijos.Where(x => x.Catecodi == catecodi.Value).ToList();
                    }
                    famcodi = null;
                    break;
            }

            return listaFTHijos.Count > 0;
        }

        #endregion

        #region Ficha Tecnica Tree

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_FICTECITEM
        /// </summary>
        public List<FtFictecItemDTO> ListarItemsByFichaTecnica(int fteqcodi)
        {
            List<FtFictecItemDTO> l = FactorySic.GetFtFictecItemRepository().ListarItemsByFichaTecnica(fteqcodi);
            List<FtFictecItemNotaDTO> listaDataNota = ListFtFictecItemNotaByFteqcodi(fteqcodi);

            foreach (var reg in l)
            {
                reg.Ftitnombre = reg.Ftitnombre != null ? reg.Ftitnombre.Trim() : string.Empty;
                reg.Propnomb = reg.Propnomb != null ? reg.Propnomb.Trim() : string.Empty;
                reg.Propunidad = reg.Propunidad != null ? reg.Propunidad.Trim() : string.Empty;
                reg.Proptipo = reg.Proptipo != null ? reg.Proptipo.Trim() : string.Empty;
                reg.Concepdesc = reg.Concepdesc != null ? reg.Concepdesc.Trim() : string.Empty;
                reg.Concepunid = reg.Concepunid != null ? reg.Concepunid.Trim() : string.Empty;
                reg.Conceptipo = reg.Conceptipo != null ? reg.Conceptipo.Trim() : string.Empty;
                reg.Ftpropnomb = reg.Ftpropnomb != null ? reg.Ftpropnomb.Trim() : string.Empty;
                reg.Ftpropunidad = reg.Ftpropunidad != null ? reg.Ftpropunidad.Trim() : string.Empty;
                reg.Ftproptipo = reg.Ftproptipo != null ? reg.Ftproptipo.Trim() : string.Empty;


                reg.FtitfeccreacionDesc = reg.Ftitfeccreacion != null ? reg.Ftitfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.FtitfecmodificacionDesc = reg.Ftitfecmodificacion != null ? reg.Ftitfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.UltimaModificacionUsuarioDesc = reg.Ftitfecmodificacion != null ? reg.Ftitusumodificacion : reg.Ftitusucreacion;
                reg.UltimaModificacionFechaDesc = reg.Ftitfecmodificacion != null ? reg.FtitfecmodificacionDesc : reg.FtitfeccreacionDesc;

                if (reg.Ftittipoitem == ConstantesFichaTecnica.TipoPropiedad)
                {
                }

                switch (reg.Ftittipoprop)
                {
                    case ConstantesFichaTecnica.OrigenTipoEquipo:
                        reg.Origen = ConstantesFichaTecnica.OrigenTipoEquipo;
                        reg.OrigenDesc = ConstantesFichaTecnica.TipoEquipoPropiedadDesc;
                        reg.OrigenTipo = reg.Propcodi.Value;
                        reg.OrigenTipoDesc = reg.Propnomb;
                        reg.ItemUnidad = reg.Propunidad;
                        reg.ItemTipo = reg.Proptipo;
                        reg.EsArchivo = EsTipoArchivo(reg.Proptipo);
                        reg.EsNumerico = EsTipoNumero(reg.Proptipo);
                        reg.TieneColorInflexOp = reg.Propflagcolor == 1;
                        break;
                    case ConstantesFichaTecnica.OrigenCategoriaGrupo:
                        reg.Origen = ConstantesFichaTecnica.OrigenCategoriaGrupo;
                        reg.OrigenDesc = ConstantesFichaTecnica.TipoConceptoDesc;
                        reg.OrigenTipo = reg.Concepcodi.Value;
                        reg.OrigenTipoDesc = reg.Concepdesc;
                        reg.ItemUnidad = reg.Concepunid;
                        reg.ItemTipo = reg.Conceptipo;
                        reg.EsArchivo = EsTipoArchivo(reg.Conceptipo);
                        reg.EsNumerico = EsTipoNumero(reg.Conceptipo);
                        reg.TieneColorInflexOp = reg.Concepflagcolor == 1;
                        break;
                    case ConstantesFichaTecnica.OrigenFichaTecnica:
                        reg.Origen = ConstantesFichaTecnica.OrigenFichaTecnica;
                        reg.OrigenDesc = ConstantesFichaTecnica.TipoFichaPropiedadDesc;
                        reg.OrigenTipo = reg.Ftpropcodi.Value;
                        reg.OrigenTipoDesc = reg.Ftpropnomb;
                        reg.ItemUnidad = reg.Ftpropunidad;
                        reg.ItemTipo = reg.Ftproptipo;
                        break;
                }

                reg.ItemUnidadDesc = reg.ItemUnidad != null && reg.ItemUnidad.Trim() != string.Empty ? "[" + reg.ItemUnidad + "]" : string.Empty;

                List<FtFictecItemNotaDTO> listaByItem = listaDataNota.Where(x => x.Ftitcodi == reg.Ftitcodi).ToList();
                reg.ListaNotacodi = string.Join(",", listaByItem.Select(x => x.Ftnotacodi).ToList());
                reg.ListaNotanum = string.Join(" ", listaByItem.Select(x => "(" + x.Ftnotanum + ")").ToList());
            }

            return l;
        }

        private bool EsTipoArchivo(string tipo)
        {
            tipo = tipo ?? "";
            return tipo.ToUpper() == "ARCHIVO" || tipo.ToUpper() == "FILE";
        }

        private bool EsTipoNumero(string tipo)
        {
            tipo = tipo ?? "";
            return tipo == "DECIMAL" || tipo == "ENTERO" || tipo == "FORMULA";
        }

        /// <summary>
        /// Ficha tecnica default
        /// </summary>
        /// <returns></returns>
        public List<FtFictecItemDTO> ListarItemsByFichaTecnicaDefault()
        {
            List<FtFictecItemDTO> l = new List<FtFictecItemDTO>();

            FtFictecItemDTO item = new FtFictecItemDTO();
            item.Ftitnombre = "Datos";
            item.Ftitorden = 1;
            item.Ftitpadre = -1;
            item.Ftittipoitem = ConstantesFichaTecnica.TipoAgrupamiento;
            item.Ftitorientacion = ConstantesFichaTecnica.OrientacionVertical;
            l.Add(item);

            return l;
        }

        /// <summary>
        /// Guardar los items Json Tree
        /// </summary>
        /// <param name="idFT"></param>
        /// <param name="listaJson"></param>
        /// <param name="usuario"></param>
        /// <param name="listaCambios"></param>
        public void GuardarTreeItemsFichaTecnica(int idFT, List<TreeItemFichaTecnica> listaJson, string usuario, ref List<NotificacionFTItems> listaCambios)
        {
            int idPadre = ConstantesFichaTecnica.TipoRaiz;
            List<FtFictecItemDTO> listaEditados = new List<FtFictecItemDTO>();

            List<FtFictecItemDTO> lista = ListarItemsByFichaTecnica(idFT);

            GuardarTreeItemsFichaTecnicaRecursivo(idFT, listaJson, idPadre, usuario, lista, ref listaEditados, ref listaCambios);

            List<int> listacodiEdit = listaEditados.Select(x => x.Ftitcodi).Distinct().ToList();
            List<FtFictecItemDTO> listaEliminados = lista.Where(x => !listacodiEdit.Contains(x.Ftitcodi)).ToList();

            foreach (var regElim in listaEliminados)
            {
                regElim.Ftitusumodificacion = usuario;
                regElim.Ftitfecmodificacion = DateTime.Now;
                DeleteFtFictecItem(regElim);
            }
        }

        /// <summary>
        /// Registrar o modificar los items de la configuracion
        /// </summary>
        /// <param name="idFT"></param>
        /// <param name="listaItem"></param>
        /// <param name="idPadre"></param>
        /// <param name="usuario"></param>
        /// <param name="listaBD"></param>
        /// <param name="lEditados"></param>
        /// <param name="listaCambios"></param>
        private void GuardarTreeItemsFichaTecnicaRecursivo(int idFT, List<TreeItemFichaTecnica> listaItem, int idPadre, string usuario, List<FtFictecItemDTO> listaBD, ref List<FtFictecItemDTO> lEditados, ref List<NotificacionFTItems> listaCambios)
        {
            List<TreeItemFichaTecnica> hijos = listaItem;
            int orden = 1;

            foreach (var reg in hijos)
            {
                GuardarItemTree(idFT, reg, idPadre, usuario, orden, listaBD, ref lEditados, ref listaCambios);
                orden++;
            }

            foreach (var reg in hijos)
            {
                if (reg.children.Count > 0) //agrupamiento o propiedad con subpropiedades
                {
                    GuardarTreeItemsFichaTecnicaRecursivo(idFT, reg.children, reg.data.Ftitcodi, usuario, listaBD, ref lEditados, ref listaCambios);
                }
            }
        }

        /// <summary>
        /// Guardar Item to Dto
        /// </summary>
        /// <param name="idFT"></param>
        /// <param name="item"></param>
        /// <param name="idPadre"></param>
        /// <param name="usuario"></param>
        /// <param name="orden"></param>
        /// <param name="listaBD"></param>
        /// <param name="lEditados"></param>
        /// <param name="listaCambios"></param>
        private void GuardarItemTree(int idFT, TreeItemFichaTecnica item, int idPadre, string usuario, int orden, List<FtFictecItemDTO> listaBD, ref List<FtFictecItemDTO> lEditados, ref List<NotificacionFTItems> listaCambios)
        {
            FtFictecItemDTO obj = new FtFictecItemDTO();
            NotificacionFTItems ftItem = new NotificacionFTItems();
            if (item.data != null)
            {
                if (item.data.Ftitcodi > 0) //Item existente
                {
                    obj = listaBD.Find(x => x.Ftitcodi == item.data.Ftitcodi);
                    obj.Ftitnombre = obj.Ftitnombre != null ? obj.Ftitnombre.Trim() : string.Empty;

                    DateTime? fechaModificacion = obj.Ftitfecmodificacion;
                    string usuarioModificacion = obj.Ftitusumodificacion;

                    if ((obj.Fteqcodi != idFT)
                        || (obj.Ftitnombre != item.title.Trim())
                        || (obj.Ftitpadre != idPadre)
                        || (obj.Ftitorden != orden)
                        || (obj.Ftitorientacion != item.data.Ftitorientacion)
                        || (obj.ListaNotacodi != item.data.ListaNotacodi)) //si existe cambio, modificar los valores de auditoria
                    {
                        fechaModificacion = DateTime.Now;
                        usuarioModificacion = usuario;

                        //valores para notificación 
                        ftItem.Ftitcodi = obj.Ftitcodi;
                        ftItem.Ftitnombre = obj.Ftitnombre;
                        ftItem.FtitnombreNew = obj.Ftitnombre != item.title.Trim() ? item.title.Trim() : string.Empty;
                        ftItem.Ftitorden = obj.Ftitorden;
                        ftItem.FtitordenNew = obj.Ftitorden != orden ? orden : 0;
                        ftItem.Ftitusumodificacion = usuarioModificacion;
                        ftItem.Ftitfecmodificacion = fechaModificacion;
                    }

                    obj.Ftitnombre = item.title.Trim();
                    obj.Fteqcodi = idFT;
                    obj.Ftitpadre = idPadre;
                    obj.Ftitorden = orden;
                    obj.Ftitorientacion = item.data.Ftitorientacion;
                    obj.Ftitactivo = ConstantesFichaTecnica.EstadoActivo;
                    obj.Ftitusumodificacion = usuarioModificacion;
                    obj.Ftitfecmodificacion = fechaModificacion;

                    UpdateFtFictecItem(obj);

                    lEditados.Add(obj);
                }
                else
                {
                    obj.Fteqcodi = idFT;
                    obj.Ftitnombre = item.title.Trim();
                    obj.Ftittipoitem = item.folder ? ConstantesFichaTecnica.TipoAgrupamiento : ConstantesFichaTecnica.TipoPropiedad;
                    //obj.Ftittipoitem = item.data.Ftittipoitem;
                    obj.Ftittipoprop = item.data.Origen;
                    obj.Ftitpadre = idPadre;
                    obj.Concepcodi = item.data.Concepcodi;
                    obj.Propcodi = item.data.Propcodi;
                    obj.Ftpropcodi = item.data.Ftpropcodi;
                    obj.Ftitorden = orden;
                    obj.Ftitorientacion = item.data.Ftitorientacion;
                    obj.Ftitactivo = ConstantesFichaTecnica.EstadoActivo;
                    obj.Ftitusucreacion = usuario;
                    obj.Ftitfeccreacion = DateTime.Now;

                    obj.Ftitcodi = SaveFtFictecItem(obj);

                    lEditados.Add(obj);

                    //valores para notificación 
                    ftItem.Ftitcodi = obj.Ftitcodi;
                    ftItem.FtitnombreNew = item.title.Trim();
                    ftItem.FtitordenNew = orden;
                    ftItem.Ftitusumodificacion = usuario;
                    ftItem.Ftitfecmodificacion = DateTime.Now; ;
                }

                var listaNotasAntes = ListFtFictecItemNotaByFteqcodi(idFT);

                GuardarItemNota(obj.Ftitcodi, item.data.ListaNotacodi);

                if (ftItem.Ftitcodi > 0)
                {
                    ftItem.NumNotas = listaNotasAntes.Any() ? listaNotasAntes.Count : 0;

                    List<int> listaNotacodi = new List<int>();
                    var listaNota = item.data.ListaNotacodi;
                    if (!string.IsNullOrEmpty(listaNota))
                        listaNotacodi = listaNota.Split(',').Select(x => int.Parse(x)).ToList();

                    ftItem.NumNotasNew = listaNotacodi.Any() ? listaNotacodi.Count : 0;
                    listaCambios.Add(ftItem);
                }
            }

            item.data = obj;
        }

        /// <summary>
        /// Guardar la relacion entre el item y la notas
        /// </summary>
        /// <param name="idItem"></param>
        /// <param name="listaNota"></param>
        private void GuardarItemNota(int idItem, string listaNota)
        {
            List<int> listaNotacodi = new List<int>();
            if (!string.IsNullOrEmpty(listaNota))
            {
                listaNotacodi = listaNota.Split(',').Select(x => int.Parse(x)).ToList();
            }

            //Eliminar relacion
            DeleteFtFictecItemNotaByFtitcodi(idItem);

            //Crear relacion entre el item y nota
            foreach (int idNota in listaNotacodi)
            {
                FtFictecItemNotaDTO f = new FtFictecItemNotaDTO();
                f.Ftitntfecha = DateTime.Now;
                f.Ftitcodi = idItem;
                f.Ftnotacodi = idNota;

                SaveFtFictecItemNota(f);
            }
        }

        public FTFiltroReporteExcel GetFichaYDatosXEquipoOModo(int idFT, int codigo, bool incluirData, int ambiente, DateTime fechaConsulta)
        {
            List<EqPropequiDTO> listaDataPropiedad = new List<EqPropequiDTO>();
            List<PrGrupodatDTO> listaDataGrupo = new List<PrGrupodatDTO>();
            List<FtFictecPropiedadValor> listaDataPropiedadFicha = new List<FtFictecPropiedadValor>();

            List<FtFictecItemDTO> listaAllData = ListarItemsByFichaTecnica(idFT).OrderBy(x => x.Ftitcodi).ToList();

            if (!incluirData && listaAllData.Count == 0)
            {
                listaAllData = ListarItemsByFichaTecnicaDefault();
            }
            else
            {
                //obtener ficha
                FtFictecXTipoEquipoDTO fichaTecnica = GetFichaTecnica(idFT);
                int tipoOrigen = ConstantesFichaTecnica.OrigenTipoEquipo;
                if (fichaTecnica.Famcodi == null)
                {
                    tipoOrigen = ConstantesFichaTecnica.OrigenCategoriaGrupo;
                }

                //segun conceptos / propiedades obtener sus datos
                if (incluirData)
                {
                    //DateTime fecha = DateTime.Today;
                    DateTime fecha = fechaConsulta;

                    List<int> listaPropcodi = listaAllData.Where(x => x.Propcodi != null).Select(x => x.Propcodi.Value).Distinct().ToList();
                    if (listaPropcodi.Count > 0)
                    {
                        listaDataPropiedad = FactorySic.GetEqPropequiRepository().ListarValoresVigentesPropiedades(fecha, codigo.ToString(), "-1", "-1", string.Join(",", listaPropcodi), string.Empty, "-1");
                    }

                    List<int> listaConcepcodi = listaAllData.Where(x => x.Concepcodi != null).Select(x => x.Concepcodi.Value).Distinct().ToList();
                    if (listaConcepcodi.Count > 0)
                    {
                        //Ficha central termica
                        if (fichaTecnica.Famcodi != null)
                        {
                            int grupocentral = ObtenerGrupoCentral(codigo);

                            if (grupocentral > 0)
                                listaDataGrupo = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fecha, grupocentral.ToString(), string.Join(",", listaConcepcodi));
                        }
                        else
                        {
                            //Ficha modo de operación
                            listaDataGrupo = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fecha, codigo.ToString(), string.Join(",", listaConcepcodi));
                        }
                    }
                }

                //Datos que se obtienen por lógica
                List<int?> listaFtpropcodi = listaAllData.Where(x => x.Ftpropcodi != null).Select(x => x.Ftpropcodi).Distinct().ToList();
                listaDataPropiedadFicha = ListarDataPropiedadFicha(codigo, tipoOrigen, listaFtpropcodi);
            }

            FTFiltroReporteExcel objFiltro = new FTFiltroReporteExcel();
            objFiltro.IdFT = idFT;
            objFiltro.Codigo = codigo;
            objFiltro.IncluirData = incluirData;
            objFiltro.Ambiente = ambiente;
            objFiltro.ListaDataPropiedad = listaDataPropiedad;
            objFiltro.ListaDataGrupo = listaDataGrupo;
            objFiltro.ListaDataPropiedadFicha = listaDataPropiedadFicha;
            objFiltro.ListaAllData = listaAllData;

            return objFiltro;
        }

        public int ObtenerGrupoCentral(int equicodi)
        {
            EqEquipoDTO eq = GetByIdEqEquipo(equicodi);
            int grupocodi = eq.Grupocodi ?? 0;
            int grupocentral = 0;
            if (grupocodi > 0)
            {
                PrGrupoDTO gr = GetByIdPrGrupo(grupocodi);

                //GRUPO TERMICO
                if (gr.Catecodi == 3 && gr.Grupopadre > 0) grupocentral = gr.Grupopadre.Value;

                //CENTRAL TERMICA
                if (gr.Catecodi == 4) grupocentral = grupocodi;
            }

            return grupocentral;
        }

        /// <summary>
        /// Listar items por Ficha tecnica
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <param name="litemDataFinal"></param>
        /// <param name="litemFinal"></param>
        /// <param name="lJsonFinal"></param>
        public void ListarTreeItemsFichaTecnica(FTFiltroReporteExcel objFiltro,
                            out List<FtFictecItemDTO> litemDataFinal, out List<FtFictecItemDTO> litemFinal, out List<TreeItemFichaTecnica> lJsonFinal)
        {
            List<TreeItemFichaTecnica> listaJson = new List<TreeItemFichaTecnica>();
            List<FtFictecItemDTO> listaData = new List<FtFictecItemDTO>();
            List<FtFictecItemDTO> listaAllData = objFiltro.ListaAllData; //

            List<TreeItemFichaTecnica> listaAllJson = listaAllData.Select(x => GetItemJsonFichaTecnica(x, objFiltro.Ambiente,
                                objFiltro.ListaDataPropiedad, objFiltro.ListaDataGrupo, objFiltro.ListaDataPropiedadFicha)).ToList();
            foreach (var objItem in listaAllData)
                objItem.Codigo = objFiltro.Codigo;

            int idPadre = ConstantesFichaTecnica.TipoRaiz;
            ListarTreeItemsFichaTecnicaRecursivo(listaAllData, listaAllJson, listaData, listaJson, idPadre, string.Empty, string.Empty, 1);

            //orden lista vertical
            foreach (var obj in listaAllData)
            {
                obj.OrdenNumericoLong = (long)Convert.ToDouble(((obj.OrdenPad ?? "0").Replace(".", "")).PadRight(18, '0')); //máximo 8 subniveles
            }
            listaAllData = listaAllData.OrderBy(x => x.OrdenNumericoLong).ToList();
            int orden = 1;
            foreach (var obj in listaAllData)
            {
                obj.OrdenNumerico = orden;
                orden++;
            }

            //salidas
            litemFinal = listaData;
            lJsonFinal = listaJson;
            litemDataFinal = listaAllData;
        }

        /// <summary>
        /// Obtener Json e Items de forma recursiva
        /// </summary>
        /// <param name="listaAllData"></param>
        /// <param name="listaAllJson"></param>
        /// <param name="listaFinal"></param>
        /// <param name="listaFinalJson"></param>
        /// <param name="idPadre"></param>
        /// <param name="ordenPadre"></param>
        /// <param name="ordenPadrePad"></param>
        /// <param name="nivel"></param>
        private void ListarTreeItemsFichaTecnicaRecursivo(List<FtFictecItemDTO> listaAllData, List<TreeItemFichaTecnica> listaAllJson,
                                                        List<FtFictecItemDTO> listaFinal, List<TreeItemFichaTecnica> listaFinalJson
                                                        , int idPadre, string ordenPadre, string ordenPadrePad, int nivel)
        {
            List<FtFictecItemDTO> hijos = listaAllData.Where(x => x.Ftitpadre == idPadre).OrderBy(x => x.Ftitorden).ToList();
            if (hijos.Any())
            {
                List<TreeItemFichaTecnica> hijosJson = listaAllJson.Where(x => x.data.Ftitpadre == idPadre).OrderBy(x => x.data.Ftitorden).ToList();

                if (ConstantesFichaTecnica.TipoRaiz == idPadre)
                {
                    listaFinal.AddRange(hijos);

                    foreach (var hj in hijosJson) { hj.expanded = hj.folder; }
                    listaFinalJson.AddRange(hijosJson);
                }
                else
                {
                    FtFictecItemDTO padre = listaAllData.Find(x => x.Ftitcodi == idPadre);
                    TreeItemFichaTecnica padreJson = listaAllJson.Find(x => x.data.Ftitcodi == idPadre);

                    if (padre != null)
                    {
                        padre.ListaHijos = hijos;
                    }

                    if (padreJson != null)
                    {
                        padreJson.children = hijosJson;
                    }
                }

                foreach (var reg in hijos)
                {
                    reg.Nivel = nivel;
                    reg.Orden = ordenPadre == string.Empty ? reg.Ftitorden.ToString() : ordenPadre + "." + reg.Ftitorden.ToString();

                    var padLef = (reg.Ftitorden.ToString()).PadLeft(2, '0');
                    reg.OrdenPad = ordenPadrePad == string.Empty ? padLef : ordenPadrePad + "." + padLef; //1.1 y 1.10 tienen el mismo 'orden', se crea variable temporal para hacer 1.01 y 1.10 

                    ListarTreeItemsFichaTecnicaRecursivo(listaAllData, listaAllJson, listaFinal, listaFinalJson, reg.Ftitcodi, reg.Orden, reg.OrdenPad, nivel + 1);
                }
            }
        }

        /// <summary>
        /// Convertir DTO a json Tree
        /// </summary>
        /// <param name="obj"></param>
        /// <param name="ambiente"></param>
        /// <param name="listaDataPropiedad"></param>
        /// <param name="listaDataGrupo"></param>
        /// <param name="listaDataPropiedadFicha"></param>
        /// <returns></returns>
        private TreeItemFichaTecnica GetItemJsonFichaTecnica(FtFictecItemDTO obj, int ambiente
            , List<EqPropequiDTO> listaDataPropiedad, List<PrGrupodatDTO> listaDataGrupo, List<FtFictecPropiedadValor> listaDataPropiedadFicha)
        {
            TreeItemFichaTecnica reg = new TreeItemFichaTecnica();
            reg.title = obj.Ftitnombre.Trim();
            reg.folder = ConstantesFichaTecnica.TipoAgrupamiento == obj.Ftittipoitem;
            reg.expanded = false;
            reg.data = obj;
            obj.Ftitfeccreacion = null;
            obj.Ftitfecmodificacion = null;
            obj.Valor = string.Empty;
            obj.Orden = obj.Ftitorden.ToString();
            reg.children = new List<TreeItemFichaTecnica>();

            string urlIntranet = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyUrlIntranet];

            switch (obj.Ftittipoprop)
            {
                case ConstantesFichaTecnica.OrigenTipoEquipo:
                    var regProp = listaDataPropiedad.Find(x => x.Propcodi == obj.Propcodi);
                    obj.Valor = regProp != null ? regProp.Valor : string.Empty;
                    obj.Itemocultocomentario = (regProp?.Propocultocomentario) ?? "N";
                    obj.Itemcomentario = regProp != null ? regProp.Propequicomentario : string.Empty; //OCULTAR COMENTARIO O PINTAR DE ROJO EN EL EXCEL O JS
                    obj.ItemSustento = regProp != null ? regProp.Propequisustento : string.Empty;
                    obj.CheckCeroCorrecto = (regProp?.Propequicheckcero) ?? 0;

                    if (ambiente == ConstantesFichaTecnica.EXTRANET) // urls para extranet
                    {
                        if (obj.EsArchivo && obj.Valor != null)
                        {
                            obj.Valor = GenerarUrlValorXAmbiente(obj.Valor, ambiente, urlIntranet);
                        }

                        //sustento
                        obj.ItemSustento = GenerarUrlSustentoXAmbiente(obj.ItemSustento, ambiente, urlIntranet);
                    }

                    if (ambiente == ConstantesFichaTecnica.PORTAL) // url para portal
                    {
                        if (obj.EsArchivo && obj.Valor != null)
                        {
                            obj.Valor = GenerarUrlValorXAmbiente(obj.Valor, ambiente, urlIntranet);
                        }

                        //sustento
                        obj.ItemSustento = GenerarUrlSustentoXAmbiente(obj.ItemSustento, ambiente, urlIntranet);
                    }

                    //solo mostrar el cero cuando tiene el check de CERO CORRECTO
                    if ((ConstantesFichaTecnica.EXTRANET == ambiente || ConstantesFichaTecnica.PORTAL == ambiente) && obj.Valor == "0")
                    {
                        if (regProp.Propequicheckcero != 1)
                            obj.Valor = "";
                    }
                    break;
                case ConstantesFichaTecnica.OrigenCategoriaGrupo:
                    var regGrupoDat = listaDataGrupo.Find(x => x.Concepcodi == obj.Concepcodi);
                    obj.Valor = regGrupoDat != null ? regGrupoDat.Formuladat : string.Empty;
                    obj.Itemocultocomentario = (regGrupoDat?.Concepocultocomentario) ?? "N";
                    obj.Itemcomentario = regGrupoDat != null ? regGrupoDat.Gdatcomentario : string.Empty; //OCULTAR COMENTARIO O PINTAR DE ROJO EN EL EXCEL O JS
                    obj.ItemSustento = regGrupoDat != null ? regGrupoDat.Gdatsustento : string.Empty;
                    obj.CheckCeroCorrecto = (regGrupoDat?.Gdatcheckcero) ?? 0;

                    if (ambiente == ConstantesFichaTecnica.EXTRANET) // urls para extranet
                    {
                        if (obj.EsArchivo && obj.Valor != null)
                        {
                            obj.Valor = GenerarUrlValorXAmbiente(obj.Valor, ambiente, urlIntranet);
                        }

                        //sustento
                        obj.ItemSustento = GenerarUrlSustentoXAmbiente(obj.ItemSustento, ambiente, urlIntranet);
                    }

                    if (ambiente == ConstantesFichaTecnica.PORTAL) // url para portal
                    {
                        if (obj.EsArchivo && obj.Valor != null)
                        {
                            obj.Valor = GenerarUrlValorXAmbiente(obj.Valor, ambiente, urlIntranet);
                        }

                        //sustento
                        obj.ItemSustento = GenerarUrlSustentoXAmbiente(obj.ItemSustento, ambiente, urlIntranet);
                    }

                    //solo mostrar el cero cuando tiene el check de CERO CORRECTO
                    if ((ConstantesFichaTecnica.EXTRANET == ambiente || ConstantesFichaTecnica.PORTAL == ambiente) && obj.Valor == "0")
                    {
                        if (regGrupoDat.Gdatcheckcero != 1)
                            obj.Valor = "";
                    }

                    break;
                case ConstantesFichaTecnica.OrigenFichaTecnica:
                    var regFiProp = listaDataPropiedadFicha.Find(x => x.Ftpropcodi == obj.Ftpropcodi);
                    obj.Valor = regFiProp != null ? regFiProp.Valor : string.Empty;

                    break;
            }

            if ((ConstantesFichaTecnica.EXTRANET == ambiente || ConstantesFichaTecnica.PORTAL == ambiente) && obj.Itemocultocomentario == "S")
                obj.Itemcomentario = "";
            return reg;
        }

        public string GenerarUrlValorXAmbiente(string valor, int ambiente, string urlIntranet)
        {

            if (valor == null) valor = "";

            valor = valor.Trim();
            valor = valor.Replace("/ (?:\r\n |\r |\n) / g", " ");
            valor = valor.Replace("/ (\n) +/ g", " ");

            List<string> listaFormateada = new List<string>();
            var arraySep = valor.Split(' ');
            for (var i = 0; i < arraySep.Length; i++)
            {
                var posibleLink = arraySep[i].Trim();
                if (posibleLink.Length > 0 && (posibleLink.ToLower().StartsWith("http") || posibleLink.ToLower().StartsWith("www")))
                {
                    if (ambiente == ConstantesFichaTecnica.EXTRANET)
                    {
                        string urlExtranet = FichaTecnicaAppServicio.GetUrlExtranet();
                        posibleLink = posibleLink.Replace(urlIntranet, urlExtranet); // reemplaza url del valor
                        listaFormateada.Add(posibleLink);
                    }
                    if (ambiente == ConstantesFichaTecnica.PORTAL)
                    {
                        string urlFileApp = FichaTecnicaAppServicio.GetUrlFileappFichaTecnica() + "Content/" + ConstantesFichaTecnica.ArchivoConfidencialSinPermiso;
                        //reemplazar cuando sea intranet
                        if (posibleLink.ToUpper().Contains(urlIntranet.ToUpper())) posibleLink = urlFileApp; // reemplazar toda la URL
                        listaFormateada.Add(posibleLink);
                    }
                }
                else
                    listaFormateada.Add(posibleLink);
            }


            valor = string.Join(" ", listaFormateada); // nuevamente separar por espacios

            return valor;
        }

        public string GenerarUrlSustentoXAmbiente(string sustento, int ambiente, string urlIntranet)
        {
            if (sustento == null) sustento = "";

            sustento = sustento.Trim();
            sustento = sustento.Replace("/ (?:\r\n |\r |\n) / g", " ");
            sustento = sustento.Replace("/ (\n) +/ g", " ");

            List<string> listaFormateada = new List<string>();
            var arraySep = sustento.Split(' ');
            for (var i = 0; i < arraySep.Length; i++)
            {
                var posibleLink = arraySep[i].Trim();
                if (posibleLink.Length > 0 && (posibleLink.ToLower().StartsWith("http") || posibleLink.ToLower().StartsWith("www")))
                {
                    if (ambiente == ConstantesFichaTecnica.EXTRANET)
                    {
                        string urlExtranet = FichaTecnicaAppServicio.GetUrlExtranet();
                        posibleLink = posibleLink.Replace(urlIntranet, urlExtranet); // reemplaza url del sustento
                        listaFormateada.Add(posibleLink);
                    }
                    if (ambiente == ConstantesFichaTecnica.PORTAL)
                    {
                        string urlFileApp = FichaTecnicaAppServicio.GetUrlFileappFichaTecnica() + "Content/" + ConstantesFichaTecnica.ArchivoConfidencialSinPermiso;
                        posibleLink = urlFileApp; // reemplaza toda la URL
                        listaFormateada.Add(posibleLink);
                    }
                }
                else
                    listaFormateada.Add(posibleLink);
            }


            sustento = string.Join(" ", listaFormateada); // nuevamente separar por espacios

            return sustento;
        }

        #endregion

        #region Ficha Maestra

        /// <summary>
        /// Actualizar El Principal y generar el detalle de la Ficha maestra
        /// </summary>
        /// <param name="idFM"></param>
        /// <param name="listaIdFT"></param>
        /// <param name="fecha"></param>
        /// <param name="usuario"></param>
        /// <param name="idFMAnterior"></param>
        /// <param name="listaCambios"></param>
        public void GuardarFichaMaestra(int idFM, List<int> listaIdFT, DateTime fecha, string usuario, int? idFMAnterior, int ambiente, ref List<NotificacionFMDetails> listaCambios)
        {
            FtFichaTecnicaDTO reg = GetFichaMaestra(idFM);

            if (ConstantesFichaTecnica.FichaMaestraPrincipal == reg.Ftecprincipal)
            {
                List<FtFichaTecnicaDTO> listaFM = ListarFichaMaestra(ConstantesAppServicio.ParametroDefecto).Where(x => x.Fteccodi != reg.Fteccodi && x.Ftecambiente == ambiente).ToList();

                foreach (var regFM in listaFM)
                {
                    regFM.Ftecprincipal = ConstantesFichaTecnica.FichaMaestraNoPrincipal;
                    UpdateFichaMaestra(regFM);
                }

                //DAR DE BAjA AL OFICIAL ANTERIOR
                if (idFMAnterior != null)
                {
                    var fmOficialAnterior = GetFichaMaestra(idFMAnterior.Value);
                    if (reg.Fteccodi != fmOficialAnterior.Fteccodi && reg.Ftecambiente == ambiente)
                    {
                        fmOficialAnterior.Ftecfecmodificacion = DateTime.Now;
                        fmOficialAnterior.Ftecusumodificacion = usuario;
                        fmOficialAnterior.Ftecestado = ConstantesAppServicio.Baja;
                        UpdateFichaMaestra(fmOficialAnterior);
                    }
                }
            }

            //Eliminar relacion
            DeleteFtFictecDetByFichaMaestra(idFM);

            //Crear relacion FM y FT
            foreach (int idRel in listaIdFT)
            {
                FtFictecDetDTO f = new FtFictecDetDTO();
                f.Ftecdusuario = usuario;
                f.Ftecdfecha = fecha;
                f.Fteccodi = idFM;
                f.Fteqcodi = idRel;

                SaveFtFictecDet(f);
            }

            if (ConstantesFichaTecnica.FichaMaestraPrincipal == reg.Ftecprincipal)
            {
                var listaFichaTecnicaSelec = ListarFichaTecnicaByMaestra(idFM);
                foreach (var item in listaFichaTecnicaSelec)
                {
                    listaCambios.Add(new NotificacionFMDetails
                    {
                        Fteqcodi = item.Fteqcodi,
                        Fteqnombre = item.Fteqnombre,
                        Ftecdusuario = usuario,
                        Ftecdfecha = fecha
                    });

                }
            }
        }

        #endregion

        #region Visualización de Ficha Técnica

        /// <summary>
        /// Listar empresas por ficha tecnica
        /// </summary>
        /// <param name="idFT"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaByFichaTecnica(int idFT)
        {
            List<SiEmpresaDTO> lista = new List<SiEmpresaDTO>();

            FtFictecXTipoEquipoDTO reg = GetFichaTecnica(idFT);
            if (reg.Famcodi != null)
            {
                lista = ListarEmpresasxFamilia(reg.Famcodi.Value.ToString(), ConstantesAppServicio.Activo);
            }
            else
            {
                lista = ListarEmpresasxCategoria(reg.Catecodi.Value.ToString());
            }

            return lista;
        }

        /// <summary>
        /// Listar todos los elementos de una ficha tecnica segun sea Equipos o Grupos
        /// </summary>
        /// <param name="idFT"></param>
        /// <param name="iEmpresa"></param>
        /// <returns></returns>
        public List<ElementoFichaTecnica> ListarElementoFichaTecnica(int idFT, int iEmpresa, string strEstado = "A")
        {
            List<ElementoFichaTecnica> lista = new List<ElementoFichaTecnica>();
            List<FtFictecVisualentidadDTO> listElementosVisualizacion = ListFtFictecVisualentidads();

            if (strEstado == "-2")
            {
                strEstado = ConstantesFichaTecnica.EstadoValidos;
            }

            List<string> listaEstados = strEstado.Split(',').Select(x => x).ToList();
            FtFictecXTipoEquipoDTO fichaTecnica = GetFichaTecnica(idFT);
            if (fichaTecnica.Famcodi != null)
            {
                List<EqEquipoDTO> listaEq = ListarEquipoPaginado(iEmpresa, fichaTecnica.Famcodi.Value);
                //listaEq = listaEq.Where(x => x.Equiestado.Trim() == "A").OrderBy(x => x.Equinomb).ThenBy(x => x.Emprnomb).ToList();
                listaEq = listaEq.Where(x => listaEstados.Contains(x.Equiestado)).ToList();
                listaEq = listaEq.OrderBy(x => x.Equinomb).ThenBy(x => x.Emprnomb).ToList();
                lista = listaEq.Select(x => GetElementoFichaTecnica(x, null, ConstantesFichaTecnica.OrigenTipoEquipo, idFT, listElementosVisualizacion)).ToList();
            }
            else
            {
                List<PrGrupoDTO> listaPr = ListarGrupoPaginado(iEmpresa, fichaTecnica.Catecodi.Value.ToString(), string.Empty, ConstantesAppServicio.SI, 1, Int32.MaxValue, DateTime.Today, -1, -1);
                listaPr = listaPr.Where(x => listaEstados.Contains(x.GrupoEstado)).ToList();
                //listaPr = listaPr.Where(x => x.GrupoEstado.Trim() == "A").ToList();
                lista = listaPr.Select(x => GetElementoFichaTecnica(null, x, ConstantesFichaTecnica.OrigenCategoriaGrupo, idFT, listElementosVisualizacion)).ToList();
            }

            return lista;
        }

        /// <summary>
        /// Metodo para convertir EqEquipo a Elemento
        /// </summary>
        /// <param name="eq"></param>
        /// <param name="gr"></param>
        /// <param name="tipo"></param>
        /// <param name="idFT"></param>
        /// <returns></returns>
        private ElementoFichaTecnica GetElementoFichaTecnica(EqEquipoDTO eq, PrGrupoDTO gr, int tipo, int idFT, List<FtFictecVisualentidadDTO> listElementosVisualizacion)
        {
            ElementoFichaTecnica reg = new ElementoFichaTecnica();
            reg.Tipo = tipo;

            //List<FtFictecVisualentidadDTO> listElementosVisualizacion = ListFtFictecVisualentidads();

            if (ConstantesFichaTecnica.OrigenTipoEquipo == tipo)
            {
                reg.Codigo = eq.Equicodi;
                reg.TipoId = eq.Famcodi.Value;
                reg.Nombre = (eq.Equinomb ?? "").Trim();
                reg.Abreviatura = (eq.Equiabrev ?? "").Trim();
                reg.Empresa = (eq.EMPRNOMB ?? "").Trim();
                reg.Ubicacion = (eq.AREANOMB ?? "").Trim();
                reg.Estado = EquipamientoHelper.EstadoDescripcion(eq.Equiestado);
                reg.Existe = ConstantesFichaTecnica.FichaMaestraPrincipal;
                reg.Tipo = ConstantesFichaTecnica.OrigenTipoEquipo;
                reg.Areacodi = eq.Areacodi;
                reg.Emprcodi = eq.Emprcodi ?? 0;

                var EquipoVisibilidad = listElementosVisualizacion.Find(x => x.Ftvercodisicoes == eq.Equicodi && x.Fteqcodi == idFT);
                reg.Ftveroculto = EquipoVisibilidad != null ? EquipoVisibilidad.Ftverocultoportal ?? "N" : "N";
                reg.FtverocultoExtranet = EquipoVisibilidad != null ? EquipoVisibilidad.Ftverocultoextranet ?? "N" : "N";
                reg.FtverocultoIntranet = EquipoVisibilidad != null ? EquipoVisibilidad.Ftverocultointranet ?? "N" : "N";
            }
            else
            {
                reg.Codigo = gr.Grupocodi;
                reg.TipoId = gr.Catecodi;
                reg.Nombre = (gr.Gruponomb ?? "").Trim();
                reg.Abreviatura = (gr.Grupoabrev ?? "").Trim();
                reg.Empresa = (gr.Emprnomb ?? "").Trim();
                reg.Ubicacion = (gr.Areanomb ?? "").Trim();
                reg.Estado = EquipamientoHelper.EstadoDescripcion(gr.GrupoEstado);
                reg.Existe = ConstantesFichaTecnica.FichaMaestraPrincipal;
                reg.Tipo = ConstantesFichaTecnica.OrigenCategoriaGrupo;
                reg.Areacodi = gr.Areacodi;
                reg.Emprcodi = gr.Emprcodi ?? 0;

                var grupoVisibilidad = listElementosVisualizacion.Find(x => x.Ftvercodisicoes == gr.Grupocodi && x.Fteqcodi == idFT);
                reg.Ftveroculto = grupoVisibilidad != null ? grupoVisibilidad.Ftverocultoportal ?? "N" : "N";
                reg.FtverocultoExtranet = grupoVisibilidad != null ? grupoVisibilidad.Ftverocultoextranet ?? "N" : "N";
                reg.FtverocultoIntranet = grupoVisibilidad != null ? grupoVisibilidad.Ftverocultointranet ?? "N" : "N";
            }

            return reg;
        }

        /// <summary>
        /// Get Elemento Detalle Existente
        /// </summary>
        /// <param name="idFichaTecnica"></param>
        /// <param name="idElemento"></param>
        /// <returns></returns>
        public ElementoFichaTecnica GetElementoDetalleExistente(int idFichaTecnica, int idElemento)
        {
            TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
            List<FtFictecVisualentidadDTO> listElementosVisualizacion = ListFtFictecVisualentidads();

            ElementoFichaTecnica reg = new ElementoFichaTecnica();
            reg.Existe = ConstantesFichaTecnica.FichaMaestraNoPrincipal;

            var fichaTecnica = GetFichaTecnica(idFichaTecnica);
            string origenTipoDesc = string.Empty;
            string origenPadreTipoDesc = string.Empty;

            List<int> listaFamcodiCentral = ConstantesHorasOperacion.CodFamilias.Split(',').Select(x => int.Parse(x)).ToList();
            List<int> listaFamcodiGen = ConstantesHorasOperacion.CodFamiliasGeneradores.Split(',').Select(x => int.Parse(x)).ToList();

            if (fichaTecnica != null)
            {
                origenTipoDesc = textInfo.ToTitleCase(fichaTecnica.OrigenTipoDesc.ToLower());
                origenPadreTipoDesc = "Ubicación";
                if (fichaTecnica.Famcodi != null)
                {
                    EqEquipoDTO eq = GetByIdEqEquipo(idElemento);
                    if (eq.Famcodi == fichaTecnica.Famcodi)
                    {
                        reg = GetElementoFichaTecnica(eq, null, fichaTecnica.Origen, fichaTecnica.Fteqcodi, listElementosVisualizacion);
                    }

                    origenTipoDesc = listaFamcodiGen.Contains(fichaTecnica.Famcodi.Value) ? "Unidad de Generación" : origenTipoDesc;
                    origenPadreTipoDesc = listaFamcodiGen.Contains(fichaTecnica.Famcodi.Value) ? "Central" : origenPadreTipoDesc;
                }
                else
                {
                    PrGrupoDTO gr = GetByIdPrGrupo(idElemento);
                    if (gr.Catecodi == fichaTecnica.Catecodi)
                    {
                        reg = GetElementoFichaTecnica(null, gr, fichaTecnica.Origen, fichaTecnica.Fteqcodi, listElementosVisualizacion);
                    }

                    origenTipoDesc = fichaTecnica.Catecodi == 2 ? "Modo de Operación" : origenTipoDesc;
                    origenPadreTipoDesc = "Central";
                }

                reg.Fteqcodi = fichaTecnica.Fteqcodi;

                reg.FlagCheckComent = fichaTecnica.Fteqflagmostrarcoment;
                reg.FlagCheckSust = fichaTecnica.Fteqflagmostrarsust;
                reg.FlagCheckFech = fichaTecnica.Fteqflagmostrarfech;
            }

            reg.TituloFicha = fichaTecnica.Titulo;
            reg.OrigenTipoDesc = origenTipoDesc;
            reg.OrigenPadreTipoDesc = origenPadreTipoDesc;

            return reg;
        }

        /// <summary>
        /// Numero maximo de columnas 
        /// </summary>
        /// <param name="listaAllData"></param>
        /// <returns></returns>
        public int ProfundidadHorizontalRecursivo(List<FtFictecItemDTO> listaAllData)
        {
            List<int> listaProfundidad = new List<int>();
            List<FtFictecItemDTO> hijos = listaAllData.OrderBy(x => x.Ftitorden).ToList();

            foreach (var reg in hijos)
            {
                if (reg.Nivel == 1)
                {
                    listaProfundidad.Add(1 + ProfundidadHorizontalRecursivo(reg.ListaHijos));
                }
                else
                {
                    if (ConstantesFichaTecnica.TipoAgrupamiento == reg.Ftittipoitem)
                    {
                        listaProfundidad.Add(2 + ProfundidadHorizontalRecursivo(reg.ListaHijos));
                    }
                    else
                    {
                        if (reg.ListaHijos.Any()) //propiedad con subpropiedades
                        {
                            listaProfundidad.Add(1 + ProfundidadHorizontalRecursivo(reg.ListaHijos));
                        }
                        else
                        {
                            //propiedad sin hijos
                            listaProfundidad.Add(3);
                        }
                    }
                }
            }

            return listaProfundidad.Count > 0 ? listaProfundidad.Max() : 0;
        }

        /// <summary>
        /// Numero de filas de la agrupacion
        /// </summary>
        /// <param name="listaHijos"></param>
        /// <returns></returns>
        public int ProfundidadVerticalRecursivo(List<FtFictecItemDTO> listaHijos)
        {
            List<int> listaProfundidad = new List<int>();
            List<FtFictecItemDTO> hijos = listaHijos.OrderBy(x => x.Ftitorden).ToList();

            foreach (var reg in hijos)
            {
                if (ConstantesFichaTecnica.TipoAgrupamiento == reg.Ftittipoitem || reg.ListaHijos.Any())
                {
                    if (reg.ListaHijos.Count > 0)
                    {
                        int filaAdicional = ConstantesFichaTecnica.TipoAgrupamiento != reg.Ftittipoitem ? 1 : 0; //propiedad con subpropiedades
                        listaProfundidad.Add(ProfundidadVerticalRecursivo(reg.ListaHijos) + filaAdicional);
                    }
                    else
                    {
                        listaProfundidad.Add(1); //carpetas vacías
                    }
                }
                else
                {
                    listaProfundidad.Add(1); //propiedad al mismo nivel de la carpeta
                }
            }

            return listaProfundidad.Count > 0 ? listaProfundidad.Sum() : 0;
        }

        /// <summary>
        /// Exportacion Masivo de Ficha Tecnicas
        /// </summary>
        /// <param name="iFT"></param>
        /// <param name="pathLogo"></param>
        /// <param name="ambiente"></param>
        /// <param name="incluirColumnaComentario"></param>
        /// <param name="incluirColumnaSustento"></param>
        /// <param name="incluirEqOcultos"></param>
        /// <param name="iEmpresa"></param>
        /// <param name="strEstado"></param>
        /// <param name="ruta"></param>
        /// <param name="nombre"></param>
        public void ReporteMasivoFichaTecnicaExcel(int iFT, string pathLogo, int ambiente, bool flagSoloEqActivo, bool incluirColumnaComentario, bool incluirColumnaSustento, bool incluirEqOcultos, int iEmpresa, string strEstado, out string ruta, out string nombre)
        {
            DateTime fechaConsulta = DateTime.Now;
            string fileExcel = string.Empty;
            FtFictecXTipoEquipoDTO fichaTecnica = GetFichaTecnica(iFT);

            if (strEstado == "-2")
                strEstado = ConstantesFichaTecnica.EstadoValidos;

            List<ElementoFichaTecnica> listaElementos = ListarElementoFichaTecnica(iFT, iEmpresa, strEstado);

            //quitar los equipos o grupos ocultos para intranet
            if (!incluirEqOcultos)
            {
                listaElementos = listaElementos.Where(x => x.FtverocultoIntranet != "S").ToList();
            }

            if (listaElementos.Count > 0)
            {
                using (ExcelPackage xlPackage = new ExcelPackage())
                {
                    GenerarAllHojaExcelFichaTecnica(xlPackage, pathLogo, fichaTecnica, fechaConsulta, listaElementos.Select(x => x.Codigo).ToList(), ambiente, flagSoloEqActivo, incluirColumnaComentario, incluirColumnaSustento, false);

                    fileExcel = System.IO.Path.GetTempFileName();
                    xlPackage.SaveAs(new FileInfo(fileExcel));
                }
            }

            ruta = fileExcel;
            nombre = ConstantesFichaTecnica.NombreArchivoMasivo + DateTime.Now.ToString(ConstantesFichaTecnica.FormatoFechaHoraExcel);
        }

        /// <summary>
        /// Reporte Detalle Ficha Tecnica Excel
        /// </summary>
        /// <param name="pathLogo"></param>
        /// <param name="idFichaTecnica"></param>
        /// <param name="idElemento"></param>
        /// <param name="ambiente"></param>
        /// <param name="incluirColumnaComentario"></param>
        /// <param name="ruta"></param>
        /// <param name="nombre"></param>
        public void ReporteDetalleFichaTecnicaExcel(string pathLogo, int idFichaTecnica, int idElemento, int ambiente, bool flagSoloEqActivo, bool incluirColumnaComentario, bool incluirColumnaSustento,
                                                DateTime fechaConsulta, bool esAdmin, out string ruta, out string nombre)
        {
            var fichaTecnica = GetFichaTecnica(idFichaTecnica);

            //Exportación a Excel
            //DateTime fechaConsulta = DateTime.Now;
            string fileExcel = string.Empty;

            using (ExcelPackage xlPackage = new ExcelPackage())
            {
                GenerarAllHojaExcelFichaTecnica(xlPackage, pathLogo, fichaTecnica, fechaConsulta, new List<int>() { idElemento }, ambiente, flagSoloEqActivo, incluirColumnaComentario, incluirColumnaSustento, esAdmin);

                fileExcel = System.IO.Path.GetTempFileName();
                xlPackage.SaveAs(new FileInfo(fileExcel));
            }

            ruta = fileExcel;
            nombre = ConstantesFichaTecnica.NombreArchivo + DateTime.Now.ToString(ConstantesFichaTecnica.FormatoFechaHoraExcel);
        }

        /// <summary>
        /// Generar todos las hojas de una ficha y codigo
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="fichaTecnicaPadre"></param>
        /// <param name="fechaConsulta"></param>
        /// <param name="listaIdElementoPadre"></param>
        /// <param name="esPortal"></param>
        /// <param name="incluirColumnaComentario"></param>
        private void GenerarAllHojaExcelFichaTecnica(ExcelPackage xlPackage, string pathLogo, FtFictecXTipoEquipoDTO fichaTecnicaPadre, DateTime fechaConsulta,
                                                List<int> listaIdElementoPadre, int ambiente, bool flagSoloEqActivo, bool incluirColumnaComentario, bool incluirColumnaSustento, bool esAdmin)
        {
            if (fichaTecnicaPadre != null)
            {
                //Fichas que no tienen padre
                List<ElementoFichaTecnica> listaReg = new List<ElementoFichaTecnica>();
                if (fichaTecnicaPadre.Famcodi != null)
                {
                    foreach (var idElemento in listaIdElementoPadre)
                    {
                        string nombreHoja = GetNombreHoja(fichaTecnicaPadre.Famcodi, null, fichaTecnicaPadre.Famnomb, "");
                        listaReg.Add(new ElementoFichaTecnica() { Fteqcodi = fichaTecnicaPadre.Fteqcodi, NombreHoja = nombreHoja, Codigo = idElemento });
                    }
                }
                else
                {
                    //Se selecciona modos de operación
                    foreach (var idElemento in listaIdElementoPadre)
                    {
                        string nombreHoja = GetNombreHoja(null, fichaTecnicaPadre.Catecodi, "", fichaTecnicaPadre.Catenomb);
                        listaReg.Add(new ElementoFichaTecnica() { Fteqcodi = fichaTecnicaPadre.Fteqcodi, NombreHoja = nombreHoja, Codigo = idElemento });
                    }
                }

                //Hijos
                List<FtFictecXTipoEquipoDTO> listaHijo = ListarFichaTecnicaByPadre(fichaTecnicaPadre.Fteqcodi);
                foreach (var hijo in listaHijo)
                {
                    if (hijo.Famcodi != null)
                    {
                        foreach (var idElementoPadre in listaIdElementoPadre)
                        {
                            EqEquipoDTO eqPadre = FactorySic.GetEqEquipoRepository().GetById(idElementoPadre);
                            var listaEquipo = ListarEquipoActivoXFicha(eqPadre.Areacodi ?? 0, idElementoPadre, fichaTecnicaPadre.Famcodi ?? 0, hijo.Famcodi ?? 0, flagSoloEqActivo)
                                                    .OrderBy(x => x.Equinomb).ToList();

                            foreach (var equipo in listaEquipo)
                            {
                                string nombreHoja = GetNombreHoja(hijo.Famcodi, null, hijo.Famnomb, "");
                                listaReg.Add(new ElementoFichaTecnica() { Fteqcodi = hijo.Fteqcodi, NombreHoja = nombreHoja, Codigo = equipo.Equicodi });
                            }
                        }
                    }
                    else
                    {
                        if (fichaTecnicaPadre.Famcodi != null && hijo.Catecodi == 2)  //central con modos de operacion
                        {
                            foreach (var idElementoPadre in listaIdElementoPadre)
                            {
                                List<PrGrupoDTO> listaGrupo = ListarModoXCentral(idElementoPadre).OrderBy(x => x.Gruponomb).ToList();

                                foreach (var grupo in listaGrupo)
                                {
                                    string nombreHoja = GetNombreHoja(null, hijo.Catecodi, "", hijo.Catenomb);
                                    listaReg.Add(new ElementoFichaTecnica() { Fteqcodi = hijo.Fteqcodi, NombreHoja = nombreHoja, Codigo = grupo.Grupocodi });
                                }
                            }
                        }
                    }
                }

                var lstAgrup = listaReg.GroupBy(x => x.Fteqcodi);

                int uno = 0;
                //hojas
                foreach (var agrup in lstAgrup)
                {
                    bool incluirComentarioHoja = incluirColumnaComentario;

                    if (agrup.First().NombreHoja == null)
                    { }

                    FTReporteExcel objRpt = GetReporteDatosExcel(agrup.Key, fechaConsulta, agrup.Select(x => x.Codigo).ToList(), ambiente, incluirComentarioHoja, incluirColumnaSustento, agrup.First().NombreHoja, esAdmin);

                    objRpt.Modulo = ConstantesFichaTecnica.ModuloVisualizacion; // para visualización
                    GenerarHojaExcelFichaTecnicaDetalle(xlPackage, pathLogo, objRpt);
                    uno++;
                }
            }
        }

        private string GetNombreHoja(int? famcodi, int? catecodi, string famnomb, string catenomb)
        {
            if (famcodi > 0)
            {
                List<int> listaCentrales = new List<int>() { 39, 4, 37, 5 };
                if (listaCentrales.Contains(famcodi.Value)) return "CENTRALES";

                List<int> listaGenerador = new List<int>() { 2, 3 };
                if (listaGenerador.Contains(famcodi.Value)) return "UNIDADES DE GENERACIÓN";

                if (famcodi == 22) return "GENERADORES DE VAPOR";
                if (famcodi == 36) return "COMPONENTE DE CENTRAL SOLAR";
                if (famcodi == 38) return "COMPONENTE DE CENTRAL EÓLICA";

                return famnomb;
            }
            else
            {
                if (catecodi == 2) return "MODOS DE OPERACIÓN";
                return catenomb;
            }
        }

        private FTReporteExcel GetReporteDatosExcel(int fteqcodi, DateTime fechaConsulta,
                                List<int> listaIdElemento, int ambiente, bool incluirColumnaComentario, bool incluirColumnaSustento, string nombreSheet, bool esAdmin)
        {
            FtFictecXTipoEquipoDTO fichaTecnica = GetFichaTecnica(fteqcodi);

            //Estructura arbol
            List<FtFictecItemDTO> listaTreeItems, listaAllItems;
            List<TreeItemFichaTecnica> listaItemsJson;

            FTFiltroReporteExcel objFiltro1 = GetFichaYDatosXEquipoOModo(fichaTecnica.Fteqcodi, 0, false, ConstantesFichaTecnica.INTRANET, fechaConsulta);
            ListarTreeItemsFichaTecnica(objFiltro1, out listaAllItems, out listaTreeItems, out listaItemsJson);

            //Data
            bool existeComentarioHoja = false;
            List<FtFictecItemDTO> listaTreeData = new List<FtFictecItemDTO>();
            foreach (var idElemento in listaIdElemento)
            {
                FTFiltroReporteExcel objFiltro2 = GetFichaYDatosXEquipoOModo(fichaTecnica.Fteqcodi, idElemento, true, ConstantesFichaTecnica.INTRANET, fechaConsulta);
                ListarTreeItemsFichaTecnica(objFiltro2, out List<FtFictecItemDTO> listaAllItemsTmp, out List<FtFictecItemDTO> listaTreeItemsTmp,
                                                        out List<TreeItemFichaTecnica> listaItemsJsonTmp);
                listaTreeData.AddRange(listaAllItemsTmp);
            }
            listaTreeData.OrderBy(x => x.Ftitcodi).ToList();
            foreach (var obj in listaTreeData)
            {
                if (!string.IsNullOrEmpty(obj.Itemcomentario)) existeComentarioHoja = true;

                //lógica para sustentos confidenciales
                if (obj.ItemSustento != null && obj.ItemSustento.Length > 0)
                {
                    if (!esAdmin) // si no es admin
                    {
                        var listaSustento = GetListaEnlaceXTextoAdmin(obj.ItemSustento);
                        obj.ItemSustento = string.Join(" ", listaSustento);
                    }
                }
            }

            //solo incluir columna adiconal comentario sí existe algun comentario uno de los equipos
            if (incluirColumnaComentario && (ConstantesFichaTecnica.EXTRANET == ambiente || ConstantesFichaTecnica.PORTAL == ambiente))
                incluirColumnaComentario = existeComentarioHoja;

            FTReporteExcel objRpt = new FTReporteExcel();
            objRpt.FichaTecnica = fichaTecnica;
            objRpt.FechaConsulta = fechaConsulta;
            objRpt.Ambiente = ambiente;
            objRpt.IncluirColumnaComentario = incluirColumnaComentario;
            objRpt.IncluirColumnaSustento = incluirColumnaSustento;
            objRpt.ListaIdElemento = listaIdElemento;
            objRpt.NombreSheet = nombreSheet;

            objRpt.ListaTreeItems = listaTreeItems;
            objRpt.ListaAllItems = listaAllItems;
            objRpt.ListaTreeData = listaTreeData;

            return objRpt;
        }

        private void GenerarHojaExcelFichaTecnicaDetalle(ExcelPackage xlPackage, string pathLogo, FTReporteExcel objRpt)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(objRpt.NombreSheet);
            ws.View.ShowGridLines = false;

            //bloquear edición de todo el excel
            if (objRpt.IncluirColumnaProcesoRevision || objRpt.Modulo == ConstantesFichaTecnica.ModuloRevisionDerivacion)
                ws.Protection.IsProtected = true;

            //evitar que cambie de nombre a la hoja
            xlPackage.Workbook.Protection.LockStructure = true;

            //Logo
            UtilExcel.AddImageLocal(ws, 0, 0, pathLogo);

            int row = 4;
            int column = 1;

            #region filtros
            int columnIniFiltro = column;

            int rowIniFiltro = row;
            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloVisualizacion || objRpt.Modulo == ConstantesFichaTecnica.ModuloRevisionDerivacion
                || objRpt.Modulo == ConstantesFichaTecnica.ModuloEnviosHistorico)
            {
                ws.Cells[row, columnIniFiltro].Value = "Ficha Técnica:";
                ws.Cells[row, columnIniFiltro + 1].Value = objRpt.FichaTecnica.Fteqnombre;

                ws.Cells[row + 1, columnIniFiltro].Value = "Fecha de consulta:";
                ws.Cells[row + 1, columnIniFiltro + 1].Value = objRpt.FechaConsulta.ToString(ConstantesAppServicio.FormatoFechaHora);

                UtilExcel.BorderCeldasLineaDelgada(ws, row, columnIniFiltro, row + 1, columnIniFiltro, "#000000", true, true);
                UtilExcel.SetFormatoCelda(ws, row, columnIniFiltro, row + 1, columnIniFiltro, "Centro", "Derecha", "#FFFFFF", "#227ABE", "Calibri", 11, true);
                UtilExcel.SetFormatoCelda(ws, row, columnIniFiltro + 1, row + 1, columnIniFiltro + 1, "Centro", "Izquierda", "#000000", "#FFFFFF", "Calibri", 11, false);
            }

            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloReporteHistoricoFT)
            {
                if (!string.IsNullOrEmpty(objRpt.NombreEtapa))
                {
                    ws.Cells[1, columnIniFiltro + 2].Value = "Etapa - " + objRpt.NombreEtapa; //titulo
                }

                if (objRpt.EsHistorico)
                {
                    ws.Cells[row, columnIniFiltro].Value = "Desde:";
                    ws.Cells[row, columnIniFiltro + 1].Value = objRpt.FechaIniConsulta.Value.ToString(ConstantesAppServicio.FormatoFecha);
                    ws.Cells[row + 1, columnIniFiltro].Value = "Hasta:";
                    ws.Cells[row + 1, columnIniFiltro + 1].Value = objRpt.FechaFinConsulta.Value.ToString(ConstantesAppServicio.FormatoFecha);
                    UtilExcel.SetFormatoCelda(ws, row, columnIniFiltro, row + 1, columnIniFiltro, "Centro", "Derecha", "#FFFFFF", "#227ABE", "Calibri", 11, true);

                }
                else
                {
                    if (objRpt.FechaIniConsulta != null)
                    {
                        ws.Cells[row + 1, columnIniFiltro].Value = "Fecha de consulta:";
                        ws.Cells[row + 1, columnIniFiltro + 1].Value = objRpt.FechaIniConsulta.Value.ToString(ConstantesAppServicio.FormatoFecha);
                        UtilExcel.SetFormatoCelda(ws, row + 1, columnIniFiltro, row + 1, columnIniFiltro, "Centro", "Derecha", "#FFFFFF", "#227ABE", "Calibri", 11, true);
                    }
                }
            }

            #endregion

            row += 2;
            int rowCodigo = row - 1;

            //Ficha
            List<FtFictecItemDTO> listaDataXNivel = objRpt.ListaTreeItems.Where(x => x.Nivel == 1).ToList();
            int colspan = ProfundidadHorizontalRecursivo(listaDataXNivel);

            int rowIni = row;
            int colIni = column;
            int colFin = column + colspan - 1;
            var colCodigo = colFin + 1;
            if (colspan == 1) colCodigo = 3; //caso de ficha vacia (solo un elemento carpeta)

            ws.Column(1).Width = 1;//primera columna no visible

            //parte superior
            int colFinCod = 0;
            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloVisualizacion) // visualización ficha
            {
                GenerarExcelItemCabeceraModVisualizacion(ws, objRpt.Ambiente, objRpt.IncluirColumnaComentario, objRpt.IncluirColumnaSustento, objRpt.ListaIdElemento, rowCodigo, colCodigo, out int colFinCodigo);
                colFinCod = colFinCodigo;
            }

            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloRevisionDerivacion) // revison y derivación áreas
            {
                GenerarExcelItemCabeceraModRevisionDerivacion(ws, objRpt.IncluirColumnaComentario, objRpt.IncluirColumnaSustento, objRpt.IncluirColumnaProcesoRevision, objRpt.IncluirColumnaProcesoDerivacion, objRpt.ListaIdElemento, objRpt.IdAreaRevision, rowCodigo, colCodigo, out int colFinCodigo);
                colFinCod = colFinCodigo;
            }

            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloEnviosHistorico) // reporte envios histórico
            {
                GenerarExcelItemCabeceraModEnviosHistorico(ws, objRpt.IncluirColumnaComentario, objRpt.IncluirColumnaSustento, objRpt.IncluirColumnaProcesoRevision, objRpt.IncluirColumnaProcesoDerivacion, objRpt.ListaIdElemento, objRpt.IdAreaRevision, rowCodigo, colCodigo, out int colFinCodigo);
                colFinCod = colFinCodigo;
            }

            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloReporteHistoricoFT) // reporte historico ft
            {
                GenerarExcelItemCabeceraModReporteHistoricoFT(ws, objRpt, objRpt.ListaEqRpt, rowCodigo + 1, colCodigo, out int colFinCodigo);
                colFinCod = colFinCodigo;
            }

            int totalElemento = 0;
            if (objRpt.Modulo != ConstantesFichaTecnica.ModuloReporteHistoricoFT)
            {
                totalElemento = objRpt.ListaIdElemento.Count;
            }
            else
            {
                totalElemento = objRpt.ListaEqRpt.Count;
            }
            int totalColumnaAdicional = ObtenerColumnasAdicionales(objRpt.Modulo, totalElemento, objRpt);

            //parte izquierda (fijo)
            GenerarExcelItem(ws, objRpt.ListaAllItems, objRpt.ListaTreeItems, objRpt.ListaTreeData, objRpt.ListaIdElemento, ConstantesFichaTecnica.TipoRaiz,
                                true, 1, objRpt.Ambiente, colFin, ref row, column, row, column, totalColumnaAdicional);

            //parte derecha (contenido)
            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloVisualizacion)
            {
                GenerarDetalleModVisualizacion(ws, objRpt.ListaTreeItems, objRpt.ListaTreeData, objRpt.ListaIdElemento, objRpt.Ambiente, objRpt.IncluirColumnaComentario, objRpt.IncluirColumnaSustento,
                    colFin, column, totalColumnaAdicional);
            }
            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloRevisionDerivacion)
            {
                GenerarDetalleModRevisionDerivacion(ws, objRpt.ListaTreeItems, objRpt.ListaTreeData, objRpt.ListaIdElemento, objRpt.IncluirColumnaComentario, objRpt.IncluirColumnaSustento,
                     objRpt.IncluirColumnaProcesoRevision, objRpt.IncluirColumnaProcesoDerivacion, objRpt.ListaDerivacion, colFin, column, totalColumnaAdicional);
            }
            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloEnviosHistorico)
            {
                GenerarDetalleModEnviosHistorico(ws, objRpt.ListaTreeItems, objRpt.ListaTreeData, objRpt.ListaIdElemento, objRpt.EsHistorico, objRpt.IncluirColumnaComentario, objRpt.IncluirColumnaSustento,
                    objRpt.IncluirColumnaProcesoRevision, objRpt.IncluirColumnaProcesoDerivacion, objRpt.ListaDerivacion, colFin, column, totalColumnaAdicional);
            }

            if (objRpt.Modulo == ConstantesFichaTecnica.ModuloReporteHistoricoFT) // reporte historico ft
            {
                GenerarDetalleModReporteHistoricoFT(ws, objRpt.ListaAllItems, objRpt, objRpt.ListaEqRpt, colFin);
            }

            int rowFin = row;

            ws.Cells[rowIni, colIni, rowFin, colFinCod].Style.WrapText = true;
            ws.Column(columnIniFiltro).Width = 17;//columna filtro visible

            if (colspan == 1) ws.Column(2).Width = 25; //caso de ficha vacia (solo un elemento carpeta)

            //Notas
            row += 2;
            GenerarExceNota(ws, objRpt.FichaTecnica.Fteqcodi, ref row, column);

            //Cabecera de codigo
            int numFilaFreeze = 2;
            switch (objRpt.FichaTecnica.Famcodi ?? 0)
            {
                case 1: //SUBESTACION
                    numFilaFreeze = 0;
                    break;
                case 2://GENERADOR HIDROELÉCTRICO
                case 3: //GENERADOR TERMOELÉCTRICO
                    numFilaFreeze = 3;
                    break;
                case 26: //TRANSFORMADOR DE CORRIENTE
                case 27: //TRANSFORMADOR DE TENSION
                    numFilaFreeze = 1;
                    break;
            }
            if (objRpt.FichaTecnica.Catecodi == 2) numFilaFreeze = 3;

            int rowIniFreez = rowCodigo + 2 + numFilaFreeze + 1;
            if (numFilaFreeze == 0) rowIniFreez = rowCodigo + 2;
            ws.View.FreezePanes(rowIniFreez, colCodigo);
        }

        private void GenerarExcelItemCabeceraModVisualizacion(ExcelWorksheet ws, int ambiente, bool incluirColumnaComentario, bool incluirColumnaSusento, List<int> listaIdElemento,
                                        int rowCodigo, int colCodigo, out int colFinCodigo)
        {
            if (ConstantesFichaTecnica.EXTRANET == ambiente || ConstantesFichaTecnica.PORTAL == ambiente)
            {
                bool incluirColumnaComentarioEnHoja = incluirColumnaComentario && listaIdElemento.Count > 1;
                foreach (var idElemento in listaIdElemento)
                {
                    int colValorTmpFin = colCodigo + (incluirColumnaComentarioEnHoja ? 1 : 0);

                    ws.Cells[rowCodigo, colCodigo].Value = idElemento;
                    ws.Cells[rowCodigo + 1, colCodigo].Value = "Detalle";
                    ws.Column(colCodigo).Width = 20;

                    if (incluirColumnaComentarioEnHoja)
                    {
                        ws.Cells[rowCodigo + 1, colValorTmpFin].Value = "Comentario";
                        ws.Column(colCodigo + 1).Width = 20;

                        ws.Cells[rowCodigo, colCodigo, rowCodigo, colValorTmpFin].Merge = true;
                    }
                    UtilExcel.SetFormatoCelda(ws, rowCodigo, colCodigo, rowCodigo, colValorTmpFin, "Centro", "Centro", "#FFFFFF", "#FFFFFF", "Calibri", 11, false);
                    UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);

                    UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "#000000", true, true);

                    int colCodigoInicio = colCodigo;

                    colCodigo = colValorTmpFin + 1;
                    if (incluirColumnaSusento)
                    {
                        ws.Cells[rowCodigo + 1, colCodigo].Value = "Sustento";
                        ws.Column(colCodigo).Width = 20;

                        ws.Cells[rowCodigo, colCodigoInicio, rowCodigo, colCodigo].Merge = true;
                        UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                        UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "#000000", true, true);//aumentamos +1 al primero
                        colCodigo++;
                    }
                }
            }
            else
            {
                foreach (var idElemento in listaIdElemento)
                {
                    int colValorTmpFin = colCodigo + (incluirColumnaComentario ? 1 : 0);

                    ws.Cells[rowCodigo, colCodigo].Value = idElemento;
                    ws.Cells[rowCodigo + 1, colCodigo].Value = "Detalle";
                    ws.Column(colCodigo).Width = 20;

                    if (incluirColumnaComentario)
                    {
                        ws.Cells[rowCodigo + 1, colValorTmpFin].Value = "Comentario";
                        ws.Column(colCodigo + 1).Width = 20;

                        ws.Cells[rowCodigo, colCodigo, rowCodigo, colValorTmpFin].Merge = true;
                    }

                    UtilExcel.SetFormatoCelda(ws, rowCodigo, colCodigo, rowCodigo, colValorTmpFin, "Centro", "Centro", "#FFFFFF", "#FFFFFF", "Calibri", 11, false); //codigo en color blanco

                    UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 11, false); //aumentamos +1
                    UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "#000000", true, true);//aumentamos +1 al primero

                    int colCodigoInicio = colCodigo;

                    colCodigo = colValorTmpFin + 1;
                    if (incluirColumnaSusento)
                    {
                        ws.Cells[rowCodigo + 1, colCodigo].Value = "Sustento";
                        ws.Column(colCodigo).Width = 20;

                        ws.Cells[rowCodigo, colCodigoInicio, rowCodigo, colCodigo].Merge = true;
                        UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                        UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "#000000", true, true);//aumentamos +1 al primero
                        colCodigo++;
                    }
                }
            }

            colFinCodigo = colCodigo;
        }

        private void GenerarExcelItemCabeceraModReporteHistoricoFT(ExcelWorksheet ws, FTReporteExcel objRpt, List<FTFiltroReporteExcel> listaEqRpt,
                                        int rowNivel1, int colNivel1, out int colFinNivel1)
        {
            int rowEstado = rowNivel1 - (objRpt.EsHistorico ? 3 : 2);
            int rowFechaVig = rowEstado + 1;
            int rowIdElemento = (objRpt.EsHistorico ? rowFechaVig : rowEstado) + 1;
            int row = rowNivel1;

            //cantidad de columnas por equipo
            var numColXEq = objRpt.NumColXEq;

            //columna filtro
            int colFiltro = colNivel1 - 1;
            ws.Cells[rowEstado, colFiltro].Value = "Estado";
            ws.Cells[rowFechaVig, colFiltro].Value = "Fecha vigencia modificación";
            ws.Cells[rowIdElemento, colFiltro].Value = "Código";
            UtilExcel.CeldasExcelEnNegrita(ws, rowEstado, colFiltro, rowIdElemento, colFiltro);
            UtilExcel.CeldasExcelWrapText(ws, rowEstado, colFiltro, rowIdElemento, colFiltro);

            //columnas de datos
            int contador = 1;
            foreach (var itemEqCol in listaEqRpt)
            {
                var item = itemEqCol.EqColumna;

                int colIniEq = colNivel1 + (contador - 1) * numColXEq;
                ws.Cells[rowEstado, colIniEq].Value = item.EstadoelementoDesc;
                ws.Cells[rowFechaVig, colIniEq].Value = item.Ftenvfecvigencia != null ? item.Ftenvfecvigencia.Value.ToString(ConstantesAppServicio.FormatoFecha) : "";
                ws.Cells[rowIdElemento, colIniEq].Value = item.Idelemento;
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowEstado, colIniEq, rowIdElemento, colIniEq, "Centro");

                int colIniTmp = colIniEq;
                int colFinTmp = colIniEq + numColXEq - 1;

                if (objRpt.TieneColFechaVigencia)
                {
                    ws.Cells[row, colIniEq].Value = "Fecha de vigencia";
                    ws.Column(colIniEq).Width = 13;
                    colIniEq++;
                }
                if (objRpt.TieneColValor)
                {
                    ws.Cells[row, colIniEq].Value = "Valor";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }
                if (objRpt.TieneColCheckcero)
                {
                    ws.Cells[row, colIniEq].Value = "Valor cero(0) correcto";
                    colIniEq++;
                }
                if (objRpt.TieneColComentario)
                {
                    ws.Cells[row, colIniEq].Value = "Comentario";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }
                if (objRpt.TieneColSustento)
                {
                    ws.Cells[row, colIniEq].Value = "Sustento";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }
                if (objRpt.TieneColUsuariomodif)
                {
                    ws.Cells[row, colIniEq].Value = "Usuario modificación";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }
                if (objRpt.TieneColFechamodif)
                {
                    ws.Cells[row, colIniEq].Value = "Fecha modificación";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }

                UtilExcel.CeldasExcelAgrupar(ws, rowEstado, colIniTmp, rowEstado, colFinTmp);
                UtilExcel.CeldasExcelAgrupar(ws, rowFechaVig, colIniTmp, rowFechaVig, colFinTmp);
                UtilExcel.CeldasExcelAgrupar(ws, rowIdElemento, colIniTmp, rowIdElemento, colFinTmp);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowEstado, colIniTmp, row, colFinTmp, "Centro");

                contador++;
            }

            colFinNivel1 = colNivel1 + listaEqRpt.Count * numColXEq - 1;

            UtilExcel.BorderCeldasLineaDelgada(ws, rowEstado, colNivel1, row, colFinNivel1, "#000000", true, true);
            UtilExcel.SetFormatoCelda(ws, row, colNivel1, row, colFinNivel1, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, true, true);

        }

        private void GenerarExcelItemCabeceraModRevisionDerivacion(ExcelWorksheet ws, bool incluirColumnaComentario, bool incluirColumnaSusento, bool incluirColumnaProcesoRevision, bool incluirColumnaProcesoDerivacion, List<int> listaIdElemento,
                                int idAreaRevision, int rowCodigo, int colCodigo, out int colFinCodigo)
        {
            foreach (var idElemento in listaIdElemento)
            {
                int colValorTmpFin = colCodigo + (incluirColumnaComentario ? 1 : 0);

                ws.Cells[rowCodigo, colCodigo].Value = idElemento;
                ws.Cells[rowCodigo + 1, colCodigo].Value = "Detalle";
                ws.Column(colCodigo).Width = 20;

                if (incluirColumnaComentario)
                {
                    ws.Cells[rowCodigo + 1, colValorTmpFin].Value = "Comentario";
                    ws.Column(colCodigo + 1).Width = 20;

                    ws.Cells[rowCodigo, colCodigo, rowCodigo, colValorTmpFin].Merge = true;
                }

                UtilExcel.SetFormatoCelda(ws, rowCodigo, colCodigo, rowCodigo, colValorTmpFin, "Centro", "Centro", "#FFFFFF", "#FFFFFF", "Calibri", 11, false); //codigo en color blanco

                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 11, false); //aumentamos +1
                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "#000000", true, true);//aumentamos +1 al primero

                colCodigo = colValorTmpFin + 1;

                if (incluirColumnaSusento)
                {
                    ws.Cells[rowCodigo + 1, colCodigo].Value = "Sustento";
                    ws.Column(colCodigo).Width = 20;

                    UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "#000000", true, true);//aumentamos +1 al primero
                    colCodigo++;
                }
            }

            //despues del último código de equipos
            if (incluirColumnaProcesoRevision)
            {
                ws.Cells[rowCodigo, colCodigo].Value = "ADMINISTRACIÓN FICHA TÉCNICA";
                ws.Cells[rowCodigo + 1, colCodigo].Value = "Observación COES";
                ws.Cells[rowCodigo + 1, colCodigo + 1].Value = "Respuesta Subsanación de Observación (Agente)";
                ws.Cells[rowCodigo + 1, colCodigo + 2].Value = "Respuesta Subsanación de Observación (COES)";
                ws.Cells[rowCodigo + 1, colCodigo + 3].Value = "Estado";
                ws.Column(colCodigo).Width = 20;
                ws.Column(colCodigo + 1).Width = 20;
                ws.Column(colCodigo + 2).Width = 20;
                ws.Column(colCodigo + 3).Width = 20;

                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo + 3, "Centro", "Centro", "#000000", "#ffff00", "Calibri", 11, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "#000000", true, true);//aumentamos +1 al primero
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo + 1, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo + 2, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo + 3, "#000000", true, true);

                //Agrupar celdas revisión
                ws.Cells[rowCodigo, colCodigo, rowCodigo, colCodigo + 3].Merge = true;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo, colCodigo, rowCodigo, colCodigo + 3, "#000000");
                UtilExcel.SetFormatoCelda(ws, rowCodigo, colCodigo, rowCodigo, colCodigo + 3, "Centro", "Centro", "#000000", "#ffff00", "Calibri", 11, false);
            }

            if (incluirColumnaProcesoDerivacion)
            {
                string nombreArea = "REVISIÓN ÁREAS COES";
                if (idAreaRevision > 0)
                {
                    var areaDesc = GetByIdFtExtCorreoarea(idAreaRevision).Faremnombre;
                    nombreArea = "REVISIÓN " + areaDesc.ToUpper();
                }

                int colDerivacion = colCodigo + 4;

                ws.Cells[rowCodigo, colDerivacion].Value = nombreArea;
                ws.Cells[rowCodigo + 1, colDerivacion].Value = "Áreas";
                ws.Cells[rowCodigo + 1, colDerivacion + 1].Value = "Revisión solicitud";
                ws.Cells[rowCodigo + 1, colDerivacion + 2].Value = "Estado solicitud";
                ws.Cells[rowCodigo + 1, colDerivacion + 3].Value = "Revisión subsanación";
                ws.Cells[rowCodigo + 1, colDerivacion + 4].Value = "Estado subsanación";
                ws.Column(colDerivacion).Width = 20;
                ws.Column(colDerivacion + 1).Width = 20;
                ws.Column(colDerivacion + 2).Width = 20;
                ws.Column(colDerivacion + 3).Width = 20;
                ws.Column(colDerivacion + 4).Width = 20;

                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 4, "Centro", "Centro", "#FFFFFF", "#3366FF", "Calibri", 11, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 1, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 2, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 3, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 4, "#000000", true, true);

                ws.Column(colDerivacion).Style.WrapText = true;

                //Agrupar celdas Derivación
                ws.Cells[rowCodigo, colDerivacion, rowCodigo, colDerivacion + 4].Merge = true;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo, colDerivacion, rowCodigo, colDerivacion + 4, "#000000");
                UtilExcel.SetFormatoCelda(ws, rowCodigo, colDerivacion, rowCodigo, colDerivacion + 4, "Centro", "Centro", "#FFFFFF", "#3366FF", "Calibri", 11, false);
            }

            colFinCodigo = colCodigo;
        }

        private void GenerarExcelItemCabeceraModEnviosHistorico(ExcelWorksheet ws, bool incluirColumnaComentario, bool incluirColumnaSusento, bool incluirColumnaProcesoRevision, bool incluirColumnaProcesoDerivacion, List<int> listaIdElemento,
                                int idAreaRevision, int rowCodigo, int colCodigo, out int colFinCodigo)
        {
            foreach (var idElemento in listaIdElemento)
            {
                int colValorTmpFin = colCodigo + (incluirColumnaComentario ? 1 : 0);

                ws.Cells[rowCodigo, colCodigo].Value = idElemento;
                ws.Cells[rowCodigo + 1, colCodigo].Value = "Valor";
                ws.Column(colCodigo).Width = 20;


                ws.Cells[rowCodigo + 1, colValorTmpFin].Value = "Confidencial Valor";
                ws.Column(colCodigo + 1).Width = 15;
                ws.Cells[rowCodigo, colCodigo, rowCodigo, colValorTmpFin].Merge = true;
                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "#000000", true, true);

                colValorTmpFin = colValorTmpFin + 1;

                if (incluirColumnaComentario)
                {
                    ws.Cells[rowCodigo + 1, colValorTmpFin].Value = "Comentario";
                    ws.Column(colCodigo + 2).Width = 20;

                    ws.Cells[rowCodigo, colCodigo, rowCodigo, colValorTmpFin].Merge = true;
                }

                UtilExcel.SetFormatoCelda(ws, rowCodigo, colCodigo, rowCodigo, colValorTmpFin, "Centro", "Centro", "#FFFFFF", "#FFFFFF", "Calibri", 11, false); //codigo en color blanco

                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 11, false); //aumentamos +1
                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colValorTmpFin, "#000000", true, true);//aumentamos +1 al primero

                colCodigo = colValorTmpFin + 1;

                if (incluirColumnaSusento)
                {
                    ws.Cells[rowCodigo + 1, colCodigo].Value = "Sustento";
                    ws.Column(colCodigo).Width = 20;

                    UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "#000000", true, true);//aumentamos +1 al primero
                    colCodigo++;
                }

                ws.Cells[rowCodigo + 1, colCodigo].Value = "Confidencial Sustento";
                ws.Column(colCodigo).Width = 15;
                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "#000000", true, true);
                colCodigo++;
            }

            //despues del último código de equipos
            if (incluirColumnaProcesoRevision)
            {
                ws.Cells[rowCodigo, colCodigo].Value = "ADMINISTRACIÓN FICHA TÉCNICA";
                ws.Cells[rowCodigo + 1, colCodigo].Value = "Observación COES";
                ws.Cells[rowCodigo + 1, colCodigo + 1].Value = "Respuesta Subsanación de Observación (Agente)";
                ws.Cells[rowCodigo + 1, colCodigo + 2].Value = "Respuesta Subsanación de Observación (COES)";
                ws.Cells[rowCodigo + 1, colCodigo + 3].Value = "Estado";
                ws.Column(colCodigo).Width = 20;
                ws.Column(colCodigo + 1).Width = 20;
                ws.Column(colCodigo + 2).Width = 20;
                ws.Column(colCodigo + 3).Width = 20;

                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo + 3, "Centro", "Centro", "#000000", "#ffff00", "Calibri", 11, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo, "#000000", true, true);//aumentamos +1 al primero
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo + 1, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo + 2, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colCodigo, rowCodigo + 1, colCodigo + 3, "#000000", true, true);

                //Agrupar celdas revisión
                ws.Cells[rowCodigo, colCodigo, rowCodigo, colCodigo + 3].Merge = true;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo, colCodigo, rowCodigo, colCodigo + 3, "#000000");
                UtilExcel.SetFormatoCelda(ws, rowCodigo, colCodigo, rowCodigo, colCodigo + 3, "Centro", "Centro", "#000000", "#ffff00", "Calibri", 11, false);
            }

            if (incluirColumnaProcesoDerivacion)
            {
                string nombreArea = "REVISIÓN ÁREAS COES";
                if (idAreaRevision > 0)
                {
                    var areaDesc = GetByIdFtExtCorreoarea(idAreaRevision).Faremnombre;
                    nombreArea = "REVISIÓN " + areaDesc.ToUpper();
                }

                int colDerivacion = colCodigo + 4;

                ws.Cells[rowCodigo, colDerivacion].Value = nombreArea;
                ws.Cells[rowCodigo + 1, colDerivacion].Value = "Áreas";
                ws.Cells[rowCodigo + 1, colDerivacion + 1].Value = "Revisión solicitud";
                ws.Cells[rowCodigo + 1, colDerivacion + 2].Value = "Estado solicitud";
                ws.Cells[rowCodigo + 1, colDerivacion + 3].Value = "Revisión subsanación";
                ws.Cells[rowCodigo + 1, colDerivacion + 4].Value = "Estado subsanación";
                ws.Column(colDerivacion).Width = 20;
                ws.Column(colDerivacion + 1).Width = 20;
                ws.Column(colDerivacion + 2).Width = 20;
                ws.Column(colDerivacion + 3).Width = 20;
                ws.Column(colDerivacion + 4).Width = 20;

                UtilExcel.SetFormatoCelda(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 4, "Centro", "Centro", "#FFFFFF", "#3366FF", "Calibri", 11, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 1, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 2, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 3, "#000000", true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo + 1, colDerivacion, rowCodigo + 1, colDerivacion + 4, "#000000", true, true);

                ws.Column(colDerivacion).Style.WrapText = true;

                //Agrupar celdas Derivación
                ws.Cells[rowCodigo, colDerivacion, rowCodigo, colDerivacion + 4].Merge = true;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowCodigo, colDerivacion, rowCodigo, colDerivacion + 4, "#000000");
                UtilExcel.SetFormatoCelda(ws, rowCodigo, colDerivacion, rowCodigo, colDerivacion + 4, "Centro", "Centro", "#FFFFFF", "#3366FF", "Calibri", 11, false);
            }

            colFinCodigo = colCodigo;
        }

        private void GenerarDetalleModVisualizacion(ExcelWorksheet ws, List<FtFictecItemDTO> listaTree, List<FtFictecItemDTO> listaTreeData, List<int> listaIdElemento,
                                                int ambiente, bool incluirColumnaComentario, bool incluirColumnaSusento, int numMaxCol, int col, int totalColumnaAdicional)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();
            foreach (var reg in listaTreeData)
            {
                int rowIniNombre = reg.FilaExcel;
                int colIniNombre = col + 1;
                int colFinNombre = numMaxCol - 1;

                //Valor
                //int rowIniValor = row;
                int rowIniValor = reg.FilaExcel;
                int colIniValor = numMaxCol + 1;

                int colValorTmp = colIniValor;
                List<FtFictecItemDTO> listaValorXItem = new List<FtFictecItemDTO>();
                listaValorXItem = listaTreeData.Where(x => x.Ftitcodi == reg.Ftitcodi).ToList();

                if (reg.FilaExcel > 0)
                {
                    bool esPortal = ConstantesFichaTecnica.EXTRANET == ambiente || ConstantesFichaTecnica.PORTAL == ambiente;
                    if (esPortal)
                    {
                        foreach (var idElemento in listaIdElemento)
                        {
                            int colValorTmpFin = colValorTmp + (incluirColumnaComentario && listaIdElemento.Count > 1 ? 1 : 0);
                            var objDato = listaValorXItem.Find(x => x.Codigo == idElemento) ?? new FtFictecItemDTO();
                            if (string.IsNullOrEmpty(objDato.ValorFormula))
                            {
                                GenerarExcelItemValor(ws, objDato.Valor, objDato.EsArchivo, rowIniValor, colValorTmp);
                            }
                            else
                            {
                                try
                                {
                                    ws.Cells[rowIniValor, colValorTmp].FormulaR1C1 = "=" + objDato.ValorFormula;
                                }
                                catch (Exception)
                                {
                                    ws.Cells[rowIniValor, colValorTmp].Value = objDato.Valor;
                                }
                            }
                            //UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmpFin, "Centro", "Centro", "#0000FF", "#FFFFFF", "Calibri", 10, false);

                            //Si tiene marcado el check,pinto de color verde claro
                            if (reg.TieneColorInflexOp)
                            {
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp, ConstantesFichaTecnica.ColorVerdeClaro);
                            }

                            if (incluirColumnaComentario)
                            {
                                if (listaIdElemento.Count > 1)
                                {
                                    GenerarExcelItemValor(ws, objDato.Itemcomentario, false, rowIniValor, colValorTmpFin);
                                }
                                else
                                {
                                    if (!string.IsNullOrEmpty(objDato.Itemcomentario))
                                        UtilExcel.AgregarComentarioExcel(ws, rowIniNombre, colFinNombre, "Informado por el Agente: \n" + objDato.Itemcomentario);
                                }
                            }
                            //UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmpFin, "#000000", true, true);

                            colValorTmp = colValorTmpFin + 1;

                            //sustento de item de la ficha
                            if (incluirColumnaSusento)
                            {
                                GenerarExcelItemValor(ws, objDato.ItemSustento, false, rowIniValor, colValorTmp);
                                //UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp - 1, rowIniValor, colValorTmp, "#000000", true, true);

                                colValorTmp++;
                            }
                        }
                    }
                    else
                    {
                        foreach (var idElemento in listaIdElemento)
                        {
                            int colValorTmpFin = colValorTmp + (incluirColumnaComentario ? 1 : 0);
                            var objDato = listaValorXItem.Find(x => x.Codigo == idElemento) ?? new FtFictecItemDTO();
                            GenerarExcelItemValor(ws, objDato.Valor, objDato.EsArchivo, rowIniValor, colValorTmp);
                            //UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmpFin, "Centro", "Centro", "#0000FF", "#FFFFFF", "Calibri", 10, false);
                            if (objDato.Ambiente == ConstantesFichaTecnica.EXTRANET)
                                ws.Cells[rowIniValor, colValorTmp].Style.Locked = false;

                            //Si tiene marcado el check,pinto de color verde claro
                            if (reg.TieneColorInflexOp)
                            {
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp, ConstantesFichaTecnica.ColorVerdeClaro);
                            }

                            if (incluirColumnaComentario)
                            {
                                GenerarExcelItemValor(ws, objDato.Itemcomentario, false, rowIniValor, colValorTmpFin);
                                //UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmpFin, rowIniValor, colValorTmpFin, "Centro", "Centro", "#0000FF", "#FFFFFF", "Calibri", 10, false);

                                if (objDato.Ambiente == ConstantesFichaTecnica.EXTRANET)
                                    ws.Cells[rowIniValor, colValorTmpFin].Style.Locked = false;

                                if (objDato.Itemocultocomentario == "S")
                                    UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmpFin, rowIniValor, colValorTmpFin, "Centro", "Centro", "#FF0000", "#FFFFFF", "Calibri", 10, false);
                            }
                            //UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmpFin, "#000000", true, true);

                            colValorTmp = colValorTmpFin + 1;


                            //sustento de item de la ficha
                            if (incluirColumnaSusento)
                            {
                                GenerarExcelItemValor(ws, objDato.ItemSustento, false, rowIniValor, colValorTmp);
                                //UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp - 1, rowIniValor, colValorTmp, "#000000", true, true);

                                colValorTmp++;
                            }
                        }
                    }
                }
            }
        }

        private void GenerarDetalleModRevisionDerivacion(ExcelWorksheet ws, List<FtFictecItemDTO> listaTree, List<FtFictecItemDTO> listaTreeData, List<int> listaIdElemento,
                                        bool incluirColumnaComentario, bool incluirColumnaSusento, bool incluirColumnaProcesoRevision, bool incluirColumnaProcesoDerivacion,
                                        List<DatoRevisionAreasFT> listaDerivacion, int numMaxCol, int col, int totalColumnaAdicional)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();

            foreach (var reg in listaTreeData)
            {
                int rowIniNombre = reg.FilaExcel;
                int colIniNombre = col + 1;
                int colFinNombre = numMaxCol - 1;

                //Valor
                //int rowIniValor = row;
                int rowIniValor = reg.FilaExcel;
                int colIniValor = numMaxCol + 1;

                int colValorTmp = colIniValor;
                List<FtFictecItemDTO> listaValorXItem = new List<FtFictecItemDTO>();
                listaValorXItem = listaTreeData.Where(x => x.Ftitcodi == reg.Ftitcodi).ToList();

                if (reg.FilaExcel > 0)
                {
                    List<DatoRevisionAreasFT> listaDerivacionXItem = new List<DatoRevisionAreasFT>();
                    if (listaDerivacion != null && listaDerivacion.Any())
                        listaDerivacionXItem = listaDerivacion.Where(x => x.Ftitcodi == reg.Ftitcodi).ToList();

                    foreach (var idElemento in listaIdElemento)
                    {
                        #region Valor detalle

                        var objDato = listaValorXItem.Find(x => x.Codigo == idElemento) ?? new FtFictecItemDTO();

                        int colValorTmpFin = colValorTmp + (incluirColumnaComentario ? 1 : 0);

                        GenerarExcelItemValor(ws, objDato.Valor, objDato.EsArchivo, rowIniValor, colValorTmp);
                        if (objDato.Ambiente == ConstantesFichaTecnica.EXTRANET)
                            ws.Cells[rowIniValor, colValorTmp].Style.Locked = false;

                        //Si tiene marcado el check,pinto de color verde claro
                        if (reg.TieneColorInflexOp)
                        {
                            servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp, ConstantesFichaTecnica.ColorVerdeClaro);
                        }

                        if (incluirColumnaComentario)
                        {
                            GenerarExcelItemValor(ws, objDato.Itemcomentario, false, rowIniValor, colValorTmpFin);

                            if (objDato.Ambiente == ConstantesFichaTecnica.EXTRANET)
                                ws.Cells[rowIniValor, colValorTmpFin].Style.Locked = false;

                            if (objDato.Itemocultocomentario == "S")
                                UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmpFin, rowIniValor, colValorTmpFin, "Centro", "Centro", "#FF0000", "#FFFFFF", "Calibri", 10, false);
                        }

                        //pintar en fondo gris las celdas que no son editables
                        if (!objDato.EsFilaEditableExtranet)
                        {
                            servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmpFin, ConstantesFichaTecnica.ColorValorNoEditable);
                        }

                        colValorTmp = colValorTmpFin + 1;

                        //sustento de item de la ficha
                        if (incluirColumnaSusento)
                        {
                            GenerarExcelItemValor(ws, objDato.UrlItemSustento, false, rowIniValor, colValorTmp);

                            colValorTmp++;
                        }

                        #endregion

                        #region Proceso revisión

                        if (incluirColumnaProcesoRevision)
                        {
                            var txthtmlobscoes = GenerarTextoSinHtml(objDato.EnvioRevision.Ftrevhtmlobscoes ?? "");
                            GenerarExcelItemValor(ws, txthtmlobscoes, true, rowIniValor, colValorTmp);
                            var txthtmlrptaagente = GenerarTextoSinHtml(objDato.EnvioRevision.Ftrevhtmlrptaagente ?? "");
                            GenerarExcelItemValor(ws, txthtmlrptaagente, true, rowIniValor, colValorTmp + 1);
                            var txthtmlrptacoes = GenerarTextoSinHtml(objDato.EnvioRevision.Ftrevhtmlrptacoes ?? "");
                            GenerarExcelItemValor(ws, txthtmlrptacoes, true, rowIniValor, colValorTmp + 2);

                            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosSegunInterfazYEstado(objDato.Ambiente, objDato.Estenvcodi, 0);

                            string nombreEstado = ObtenerDescripcionEstadoRev(objDato.EnvioRevision.Ftrevestado ?? "");
                            ws.Cells[rowIniValor, colValorTmp + 3].Value = nombreEstado;

                            UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp + 3, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp + 3, "#000000", true, true);

                            if (objDato.Estenvcodi > 0) //existe estado que mostrar
                            {
                                var bloqueado = VerificarFilaBloqueada(objDato.Ambiente, objDato.Estenvcodi, objDato.Ftetcodi, objDato.EsFilaRevisableIntranet, objDato.EnvioRevision, ConstantesFichaTecnica.AccionEditar);
                                if (!bloqueado)
                                {
                                    var celdaObsCoesEstaBloqueada = EsCeldaObsCoesBloqueada(objDato.Ambiente, objDato.Estenvcodi);
                                    var celdaRptaAgenteEstaBloqueada = EsCeldaRptaAgenteBloqueada(objDato.Ambiente, objDato.Estenvcodi);
                                    var celdaRptaCoesEstaBloqueada = EsCeldaRptaCoesBloqueada(objDato.Ambiente, objDato.Estenvcodi);
                                    var celdaEstadoEstaBloqueada = objDato.Ambiente == 0 ? true : false;

                                    if (celdaObsCoesEstaBloqueada)
                                        servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp, ConstantesFichaTecnica.ColorBloqueado);
                                    else
                                        ws.Cells[rowIniValor, colValorTmp].Style.Locked = false;
                                    if (celdaRptaAgenteEstaBloqueada)
                                        servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp + 1, rowIniValor, colValorTmp + 1, ConstantesFichaTecnica.ColorBloqueado);
                                    else
                                        ws.Cells[rowIniValor, colValorTmp + 1].Style.Locked = false;
                                    if (celdaRptaCoesEstaBloqueada)
                                        servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp + 2, rowIniValor, colValorTmp + 2, ConstantesFichaTecnica.ColorBloqueado);
                                    else
                                        ws.Cells[rowIniValor, colValorTmp + 2].Style.Locked = false;
                                    if (celdaEstadoEstaBloqueada)
                                        servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp + 3, rowIniValor, colValorTmp + 3, ConstantesFichaTecnica.ColorBloqueado);
                                    else
                                    {
                                        if (lstEstados.Any())
                                        {
                                            // agregar combo de estados en excel
                                            AgregarComboEstadosExcel(ws, rowIniValor, colValorTmp + 3, lstEstados);
                                        }
                                        ws.Cells[rowIniValor, colValorTmp + 3].Style.Locked = false;
                                    }
                                }
                                else
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp + 3, ConstantesFichaTecnica.ColorBloqueado);
                            }
                            else
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp + 3, ConstantesFichaTecnica.ColorBloqueado);
                        }

                        #endregion

                        #region Proceso Derivación

                        if (incluirColumnaProcesoDerivacion)
                        {
                            var objDeriv = listaDerivacionXItem != null && listaDerivacionXItem.Any() ? listaDerivacionXItem.First() : new DatoRevisionAreasFT() { EsParaAdminFT = true };
                            int colValorDerivacion = colValorTmp + 4;

                            GenerarExcelItemValor(ws, objDeriv.AreasNombAsignadas, true, rowIniValor, colValorDerivacion);

                            var txthtmlMsgSolicitud = GenerarTextoSinHtml(objDeriv.MsgSolicitud ?? "");
                            GenerarExcelItemValor(ws, txthtmlMsgSolicitud, true, rowIniValor, colValorDerivacion + 1);

                            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosAreas();
                            if (objDeriv.EsParaAdminFT)
                            {
                                string nombreEstado1 = GenerarTextoSinHtml(objDeriv.IdValorEstadoSolicitado ?? "");
                                ws.Cells[rowIniValor, colValorDerivacion + 2].Value = nombreEstado1;
                            }
                            else
                            {
                                string nombreEstado1 = ObtenerDescripcionEstadoRev(objDeriv.IdValorEstadoSolicitado ?? "");
                                ws.Cells[rowIniValor, colValorDerivacion + 2].Value = nombreEstado1;
                            }

                            var txthtmlMsgSubsanacion = GenerarTextoSinHtml(objDeriv.MsgSubsanacion ?? "");
                            GenerarExcelItemValor(ws, txthtmlMsgSubsanacion, true, rowIniValor, colValorDerivacion + 3);

                            if (objDeriv.EsParaAdminFT)
                            {
                                string nombreEstado2 = GenerarTextoSinHtml(objDeriv.IdValorEstadoSubsanado ?? "");
                                ws.Cells[rowIniValor, colValorDerivacion + 4].Value = nombreEstado2;
                            }
                            else
                            {
                                string nombreEstado2 = ObtenerDescripcionEstadoRev(objDeriv.IdValorEstadoSubsanado ?? "");
                                ws.Cells[rowIniValor, colValorDerivacion + 4].Value = nombreEstado2;
                            }

                            UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorDerivacion, rowIniValor, colValorDerivacion + 4, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorDerivacion, rowIniValor, colValorDerivacion + 4, "#000000", true, true);

                            //pintar de color bloqueado a los nombres de áreas y la sección de administrador
                            if (objDeriv.EsParaAdminFT)
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion, rowIniValor, colValorDerivacion, ConstantesFichaTecnica.ColorBloqueado);
                            else
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorDerivacion, ConstantesFichaTecnica.ColorBloqueado);

                            if (objDeriv.EsFilaRevisable && objDeriv.TipoEstado == ConstantesFichaTecnica.EstadoStrPendiente)
                            {
                                if (objDeriv.CeldaRevSolicitudEstaBloqueada)
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 1, rowIniValor, colValorDerivacion + 1, ConstantesFichaTecnica.ColorBloqueado);
                                else
                                    ws.Cells[rowIniValor, colValorDerivacion + 1].Style.Locked = false;
                                if (objDeriv.CeldaEstadoSolicitudEstaBloqueada)
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 2, rowIniValor, colValorDerivacion + 2, ConstantesFichaTecnica.ColorBloqueado);
                                else
                                {
                                    if (lstEstados.Any() && !objDeriv.EsParaAdminFT)
                                    {
                                        // agregar combo de estados en excel
                                        AgregarComboEstadosExcel(ws, rowIniValor, colValorDerivacion + 2, lstEstados);
                                    }

                                    ws.Cells[rowIniValor, colValorDerivacion + 2].Style.Locked = false;
                                }
                                if (objDeriv.CeldaRevSubsanadoEstaBloqueada)
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 3, rowIniValor, colValorDerivacion + 3, ConstantesFichaTecnica.ColorBloqueado);
                                else
                                    ws.Cells[rowIniValor, colValorDerivacion + 3].Style.Locked = false;
                                if (objDeriv.CeldaEstadoSubsanadoEstaBloqueada)
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 4, rowIniValor, colValorDerivacion + 4, ConstantesFichaTecnica.ColorBloqueado);
                                else
                                {
                                    if (lstEstados.Any() && !objDeriv.EsParaAdminFT)
                                    {
                                        // agregar combo de estados en excel
                                        AgregarComboEstadosExcel(ws, rowIniValor, colValorDerivacion + 4, lstEstados);
                                    }
                                    ws.Cells[rowIniValor, colValorDerivacion + 4].Style.Locked = false;
                                }
                            }
                            else
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 1, rowIniValor, colValorDerivacion + 4, ConstantesFichaTecnica.ColorBloqueado);

                        }

                        #endregion

                    }
                }
            }
        }

        private void GenerarDetalleModEnviosHistorico(ExcelWorksheet ws, List<FtFictecItemDTO> listaTree, List<FtFictecItemDTO> listaTreeData, List<int> listaIdElemento,
                                        bool esHistorico, bool incluirColumnaComentario, bool incluirColumnaSusento, bool incluirColumnaProcesoRevision, bool incluirColumnaProcesoDerivacion,
                                        List<DatoRevisionAreasFT> listaDerivacion, int numMaxCol, int col, int totalColumnaAdicional)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();

            foreach (var reg in listaTreeData)
            {
                int rowIniNombre = reg.FilaExcel;
                int colIniNombre = col + 1;
                int colFinNombre = numMaxCol - 1;

                //Valor
                //int rowIniValor = row;
                int rowIniValor = reg.FilaExcel;
                int colIniValor = numMaxCol + 1;

                int colValorTmp = colIniValor;
                List<FtFictecItemDTO> listaValorXItem = new List<FtFictecItemDTO>();
                listaValorXItem = listaTreeData.Where(x => x.Ftitcodi == reg.Ftitcodi).ToList();

                if (reg.FilaExcel > 0)
                {

                    List<DatoRevisionAreasFT> listaDerivacionXItem = new List<DatoRevisionAreasFT>();
                    if (listaDerivacion != null && listaDerivacion.Any())
                        listaDerivacionXItem = listaDerivacion.Where(x => x.Ftitcodi == reg.Ftitcodi).ToList();

                    foreach (var idElemento in listaIdElemento)
                    {
                        int colValorTmpFin = colValorTmp + (incluirColumnaComentario ? 1 : 0);
                        var objDato = listaValorXItem.Find(x => x.Codigo == idElemento) ?? new FtFictecItemDTO();
                        GenerarExcelItemValor(ws, objDato.Valor, objDato.EsArchivo, rowIniValor, colValorTmp);
                        //UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmpFin, "Centro", "Centro", "#0000FF", "#FFFFFF", "Calibri", 10, false);
                        if (objDato.Ambiente == ConstantesFichaTecnica.EXTRANET)
                            ws.Cells[rowIniValor, colValorTmp].Style.Locked = false;

                        //Si tiene marcado el check,pinto de color verde claro
                        if (reg.TieneColorInflexOp)
                        {
                            servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp, ConstantesFichaTecnica.ColorVerdeClaro);
                        }

                        // confidencial valor
                        if (esHistorico)
                        {
                            ws.Cells[rowIniValor, colValorTmpFin].Value = objDato.ItemValConfidencial == ConstantesFichaTecnica.Si ? "Sí" : objDato.ItemValConfidencial == ConstantesFichaTecnica.No ? "No" : string.Empty;
                            UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmpFin, rowIniValor, colValorTmpFin, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                            //UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmpFin, "#000000", true, true);
                            colValorTmpFin = colValorTmpFin + 1;
                        }

                        if (incluirColumnaComentario)
                        {
                            GenerarExcelItemValor(ws, objDato.Itemcomentario, false, rowIniValor, colValorTmpFin);
                            //UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmpFin, rowIniValor, colValorTmpFin, "Centro", "Centro", "#0000FF", "#FFFFFF", "Calibri", 10, false);

                            if (objDato.Ambiente == ConstantesFichaTecnica.EXTRANET)
                                ws.Cells[rowIniValor, colValorTmpFin].Style.Locked = false;

                            if (objDato.Itemocultocomentario == "S")
                                UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmpFin, rowIniValor, colValorTmpFin, "Centro", "Centro", "#FF0000", "#FFFFFF", "Calibri", 10, false);
                        }
                        //UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmpFin, "#000000", true, true);

                        colValorTmp = colValorTmpFin + 1;


                        //sustento de item de la ficha
                        if (incluirColumnaSusento)
                        {
                            GenerarExcelItemValor(ws, objDato.UrlItemSustento, false, rowIniValor, colValorTmp);
                            //UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp - 1, rowIniValor, colValorTmp, "#000000", true, true);

                            colValorTmp++;
                        }

                        // confidencial sustento
                        if (esHistorico)
                        {
                            ws.Cells[rowIniValor, colValorTmp].Value = objDato.ItemSustentoConfidencial == ConstantesFichaTecnica.Si ? "Sí" : objDato.ItemSustentoConfidencial == ConstantesFichaTecnica.No ? "No" : string.Empty;
                            UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                            //UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp - 1, rowIniValor, colValorTmp, "#000000", true, true);
                            colValorTmp++;
                        }

                        #region Proceso revisión
                        if (incluirColumnaProcesoRevision)
                        {
                            var txthtmlobscoes = GenerarTextoSinHtml(objDato.EnvioRevision.Ftrevhtmlobscoes ?? "");
                            GenerarExcelItemValor(ws, txthtmlobscoes, true, rowIniValor, colValorTmp);
                            var txthtmlrptaagente = GenerarTextoSinHtml(objDato.EnvioRevision.Ftrevhtmlrptaagente ?? "");
                            GenerarExcelItemValor(ws, txthtmlrptaagente, true, rowIniValor, colValorTmp + 1);
                            var txthtmlrptacoes = GenerarTextoSinHtml(objDato.EnvioRevision.Ftrevhtmlrptacoes ?? "");
                            GenerarExcelItemValor(ws, txthtmlrptacoes, true, rowIniValor, colValorTmp + 2);

                            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosSegunInterfazYEstado(objDato.Ambiente, objDato.Estenvcodi, 0);

                            string nombreEstado = ObtenerDescripcionEstadoRev(objDato.EnvioRevision.Ftrevestado ?? "");
                            ws.Cells[rowIniValor, colValorTmp + 3].Value = nombreEstado;

                            UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp + 3, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp + 3, "#000000", true, true);

                            if (objDato.Estenvcodi > 0) //existe estado que mostrar
                            {
                                var bloqueado = VerificarFilaBloqueada(objDato.Ambiente, objDato.Estenvcodi, objDato.Ftetcodi, objDato.EsFilaRevisableIntranet, objDato.EnvioRevision, ConstantesFichaTecnica.AccionEditar);
                                if (!bloqueado)
                                {
                                    var celdaObsCoesEstaBloqueada = EsCeldaObsCoesBloqueada(objDato.Ambiente, objDato.Estenvcodi);
                                    var celdaRptaAgenteEstaBloqueada = EsCeldaRptaAgenteBloqueada(objDato.Ambiente, objDato.Estenvcodi);
                                    var celdaRptaCoesEstaBloqueada = EsCeldaRptaCoesBloqueada(objDato.Ambiente, objDato.Estenvcodi);
                                    var celdaEstadoEstaBloqueada = objDato.Ambiente == 0 ? true : false;

                                    if (celdaObsCoesEstaBloqueada)
                                        servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp, ConstantesFichaTecnica.ColorBloqueado);
                                    else
                                        ws.Cells[rowIniValor, colValorTmp].Style.Locked = false;
                                    if (celdaRptaAgenteEstaBloqueada)
                                        servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp + 1, rowIniValor, colValorTmp + 1, ConstantesFichaTecnica.ColorBloqueado);
                                    else
                                        ws.Cells[rowIniValor, colValorTmp + 1].Style.Locked = false;
                                    if (celdaRptaCoesEstaBloqueada)
                                        servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp + 2, rowIniValor, colValorTmp + 2, ConstantesFichaTecnica.ColorBloqueado);
                                    else
                                        ws.Cells[rowIniValor, colValorTmp + 2].Style.Locked = false;
                                    if (celdaEstadoEstaBloqueada)
                                        servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp + 3, rowIniValor, colValorTmp + 3, ConstantesFichaTecnica.ColorBloqueado);
                                    else
                                    {
                                        if (lstEstados.Any())
                                        {
                                            // agregar combo de estados en excel
                                            AgregarComboEstadosExcel(ws, rowIniValor, colValorTmp + 3, lstEstados);
                                        }
                                        ws.Cells[rowIniValor, colValorTmp + 3].Style.Locked = false;
                                    }
                                }
                                else
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp + 3, ConstantesFichaTecnica.ColorBloqueado);
                            }
                            else
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorTmp + 3, ConstantesFichaTecnica.ColorBloqueado);
                        }

                        #endregion

                        #region Proceso Derivación

                        if (incluirColumnaProcesoDerivacion)
                        {
                            var objDeriv = listaDerivacionXItem != null && listaDerivacionXItem.Any() ? listaDerivacionXItem.First() : new DatoRevisionAreasFT() { EsParaAdminFT = true };
                            int colValorDerivacion = colValorTmp + 4;

                            GenerarExcelItemValor(ws, objDeriv.AreasNombAsignadas, true, rowIniValor, colValorDerivacion);

                            var txthtmlMsgSolicitud = GenerarTextoSinHtml(objDeriv.MsgSolicitud ?? "");
                            GenerarExcelItemValor(ws, txthtmlMsgSolicitud, true, rowIniValor, colValorDerivacion + 1);

                            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosAreas();
                            if (objDeriv.EsParaAdminFT)
                            {
                                string nombreEstado1 = GenerarTextoSinHtml(objDeriv.IdValorEstadoSolicitado ?? "");
                                ws.Cells[rowIniValor, colValorDerivacion + 2].Value = nombreEstado1;
                            }
                            else
                            {
                                string nombreEstado1 = ObtenerDescripcionEstadoRev(objDeriv.IdValorEstadoSolicitado ?? "");
                                ws.Cells[rowIniValor, colValorDerivacion + 2].Value = nombreEstado1;
                            }

                            var txthtmlMsgSubsanacion = GenerarTextoSinHtml(objDeriv.MsgSubsanacion ?? "");
                            GenerarExcelItemValor(ws, txthtmlMsgSubsanacion, true, rowIniValor, colValorDerivacion + 3);

                            if (objDeriv.EsParaAdminFT)
                            {
                                string nombreEstado2 = GenerarTextoSinHtml(objDeriv.IdValorEstadoSubsanado ?? "");
                                ws.Cells[rowIniValor, colValorDerivacion + 4].Value = nombreEstado2;
                            }
                            else
                            {
                                string nombreEstado2 = ObtenerDescripcionEstadoRev(objDeriv.IdValorEstadoSubsanado ?? "");
                                ws.Cells[rowIniValor, colValorDerivacion + 4].Value = nombreEstado2;
                            }

                            UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorDerivacion, rowIniValor, colValorDerivacion + 4, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorDerivacion, rowIniValor, colValorDerivacion + 4, "#000000", true, true);

                            //pintar de color bloqueado a los nombres de áreas y la sección de administrador
                            if (objDeriv.EsParaAdminFT)
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion, rowIniValor, colValorDerivacion, ConstantesFichaTecnica.ColorBloqueado);
                            else
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorTmp, rowIniValor, colValorDerivacion, ConstantesFichaTecnica.ColorBloqueado);

                            if (objDeriv.EsFilaRevisable && objDeriv.TipoEstado == ConstantesFichaTecnica.EstadoStrPendiente)
                            {
                                if (objDeriv.CeldaRevSolicitudEstaBloqueada)
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 1, rowIniValor, colValorDerivacion + 1, ConstantesFichaTecnica.ColorBloqueado);
                                else
                                    ws.Cells[rowIniValor, colValorDerivacion + 1].Style.Locked = false;
                                if (objDeriv.CeldaEstadoSolicitudEstaBloqueada)
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 2, rowIniValor, colValorDerivacion + 2, ConstantesFichaTecnica.ColorBloqueado);
                                else
                                {
                                    if (lstEstados.Any() && !objDeriv.EsParaAdminFT)
                                    {
                                        // agregar combo de estados en excel
                                        AgregarComboEstadosExcel(ws, rowIniValor, colValorDerivacion + 2, lstEstados);
                                    }
                                    ws.Cells[rowIniValor, colValorDerivacion + 2].Style.Locked = false;
                                }
                                if (objDeriv.CeldaRevSubsanadoEstaBloqueada)
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 3, rowIniValor, colValorDerivacion + 3, ConstantesFichaTecnica.ColorBloqueado);
                                else
                                    ws.Cells[rowIniValor, colValorDerivacion + 3].Style.Locked = false;
                                if (objDeriv.CeldaEstadoSubsanadoEstaBloqueada)
                                    servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 4, rowIniValor, colValorDerivacion + 4, ConstantesFichaTecnica.ColorBloqueado);
                                else
                                {
                                    if (lstEstados.Any() && !objDeriv.EsParaAdminFT)
                                    {
                                        // agregar combo de estados en excel
                                        AgregarComboEstadosExcel(ws, rowIniValor, colValorDerivacion + 4, lstEstados);
                                    }

                                    ws.Cells[rowIniValor, colValorDerivacion + 4].Style.Locked = false;
                                }
                            }
                            else
                                servFormato.CeldasExcelColorFondo(ws, rowIniValor, colValorDerivacion + 1, rowIniValor, colValorDerivacion + 4, ConstantesFichaTecnica.ColorBloqueado);

                        }

                        #endregion
                    }
                }
            }
        }

        private void GenerarDetalleModReporteHistoricoFT(ExcelWorksheet ws, List<FtFictecItemDTO> listaTree, FTReporteExcel objRpt, List<FTFiltroReporteExcel> listaEqRpt,
                                                int col)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();
            foreach (var reg in listaTree)
            {
                //Valor
                int rowData = reg.FilaExcel;
                int numColXEq = objRpt.NumColXEq;

                if (reg.FilaExcel > 0)
                {
                    int contador = 1;
                    foreach (var itemEqCol in listaEqRpt)
                    {
                        int colIniEq = col + 1 + (contador - 1) * numColXEq;

                        var objDatoEq = itemEqCol.ListaTreeData.Find(x => x.Ftitcodi == reg.Ftitcodi);
                        if (objDatoEq != null)
                        {
                            if (objRpt.TieneColFechaVigencia)
                            {
                                ws.Cells[rowData, colIniEq].Value = objDatoEq.FechaVigenciaDesc;
                                colIniEq++;
                            }
                            if (objRpt.TieneColValor)
                            {
                                if (string.IsNullOrEmpty(objDatoEq.ValorFormula))
                                {
                                    GenerarExcelItemValor(ws, objDatoEq.Valor, objDatoEq.EsArchivo, rowData, colIniEq);
                                }
                                else
                                {
                                    try
                                    {
                                        ws.Cells[rowData, colIniEq].FormulaR1C1 = "=" + objDatoEq.ValorFormula;
                                    }
                                    catch (Exception)
                                    {
                                        ws.Cells[rowData, colIniEq].Value = objDatoEq.Valor;
                                    }
                                }

                                //si el valor no es vigente entonces pintarlo de celeste claro
                                if (!objDatoEq.EsValorVigente)
                                    UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniEq, rowData, colIniEq, "#CCFFFF");

                                colIniEq++;
                            }
                            if (objRpt.TieneColCheckcero)
                            {
                                ws.Cells[rowData, colIniEq].Value = objDatoEq.CheckCeroCorrectoDesc;
                                colIniEq++;
                            }
                            if (objRpt.TieneColComentario)
                            {
                                ws.Cells[rowData, colIniEq].Value = objDatoEq.Itemcomentario;
                                colIniEq++;
                            }
                            if (objRpt.TieneColSustento)
                            {
                                GenerarExcelItemValor(ws, objDatoEq.ItemSustento, true, rowData, colIniEq);
                                colIniEq++;
                            }
                            if (objRpt.TieneColUsuariomodif)
                            {
                                ws.Cells[rowData, colIniEq].Value = objDatoEq.ItemUsuariomodif;
                                colIniEq++;
                            }
                            if (objRpt.TieneColFechamodif)
                            {
                                ws.Cells[rowData, colIniEq].Value = objDatoEq.ItemFechamodif;
                                colIniEq++;
                            }
                        }

                        contador++;
                    }
                }
            }
        }

        private int ObtenerColumnasAdicionales(int modulo, int totalElemento, FTReporteExcel objRpt)
        {
            bool esPortal = ConstantesFichaTecnica.EXTRANET == objRpt.Ambiente || ConstantesFichaTecnica.PORTAL == objRpt.Ambiente;
            bool esHistorico = objRpt.EsHistorico;
            bool incluirColumnaComentario = objRpt.IncluirColumnaComentario;
            bool incluirColumnaSustento = objRpt.IncluirColumnaSustento;
            bool incluirColumnaProcesoRevision = objRpt.IncluirColumnaProcesoRevision;
            bool incluirColumnaProcesoDerivacion = objRpt.IncluirColumnaProcesoDerivacion;

            //obtener columnas según el módulo

            int totalColumnaAdicional = totalElemento;

            if (incluirColumnaComentario)
            {
                if (esPortal && totalElemento == 1)
                    totalColumnaAdicional = 1;
                else
                    totalColumnaAdicional = totalColumnaAdicional * 2;
            }
            if (incluirColumnaSustento)
            {
                if (totalColumnaAdicional == 1)
                    totalColumnaAdicional += 1;
                else
                    totalColumnaAdicional = incluirColumnaComentario ? totalElemento * 3 : totalElemento * 2;
            }

            if (modulo == ConstantesFichaTecnica.ModuloEnviosHistorico) // envios históricos
            {
                if (totalColumnaAdicional == 1)
                    totalColumnaAdicional += 2;
                else
                    totalColumnaAdicional = totalElemento * 5;
            }

            if (modulo == ConstantesFichaTecnica.ModuloRevisionDerivacion || modulo == ConstantesFichaTecnica.ModuloEnviosHistorico)
            {
                if (incluirColumnaProcesoRevision) totalColumnaAdicional += 4;

                if (incluirColumnaProcesoDerivacion) totalColumnaAdicional += 5;
            }

            if (modulo == ConstantesFichaTecnica.ModuloReporteHistoricoFT)
            {
                var numColXEq = objRpt.NumColXEq;

                totalColumnaAdicional = totalElemento * numColXEq;
            }

            return totalColumnaAdicional;
        }

        /// <summary>
        /// Metodo recursivo para generar el excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="listaAllItems"></param>
        /// <param name="listaTree"></param>
        /// <param name="listaTreeData"></param>
        /// <param name="listaIdElemento"></param>
        /// <param name="idPadre"></param>
        /// <param name="iniciaNuevaFila"></param>
        /// <param name="nivel"></param>
        /// <param name="ambiente"></param>
        /// <param name="numMaxCol"></param>
        /// <param name="row"></param>
        /// <param name="col"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="totalColumnaAdicional"></param>
        private void GenerarExcelItem(ExcelWorksheet ws, List<FtFictecItemDTO> listaAllItems, List<FtFictecItemDTO> listaTree, List<FtFictecItemDTO> listaTreeData,
                                        List<int> listaIdElemento, int idPadre, bool iniciaNuevaFila, int nivel,
                                        int ambiente, int numMaxCol, ref int row, int col, int rowIni, int colIni, int totalColumnaAdicional)
        {
            List<FtFictecItemDTO> hijos = listaTree.OrderBy(x => x.Ftitorden).ToList();

            //color
            string colorAgrupamiento = string.Empty;
            if (ConstantesFichaTecnica.PORTAL == ambiente)
            {
                colorAgrupamiento = ConstantesFichaTecnica.TipoRaiz == idPadre ? ConstantesFichaTecnica.ColorPortalAgrupRaiz : ConstantesFichaTecnica.ColorPortalAgrupHijo;
            }
            else
            {
                colorAgrupamiento = ConstantesFichaTecnica.TipoRaiz == idPadre ? ConstantesFichaTecnica.ColorIntranetAgrupRaiz : ConstantesFichaTecnica.ColorIntranetAgrupHijo;
            }

            foreach (var reg in hijos)
            {
                if (ConstantesFichaTecnica.TipoAgrupamiento == reg.Ftittipoitem)
                {
                    if (reg.Nivel == 1 || reg.ListaHijos.Count == 0) //solo orden y nombre
                    {
                        int rowspan = ProfundidadVerticalRecursivo(reg.ListaHijos);
                        if (iniciaNuevaFila) row = row + 1;

                        FormatearCeldasCarpetaRaiz(ws, rowspan, numMaxCol, totalColumnaAdicional, colorAgrupamiento, reg, ref row, col, rowIni, colIni, out int colOut);

                        iniciaNuevaFila = true;

                        if (rowspan > 0)
                        {
                            col = colOut;
                            GenerarExcelItem(ws, listaAllItems, reg.ListaHijos, listaTreeData, listaIdElemento, reg.Ftitcodi,
                                                false, reg.Nivel + 1, ambiente, numMaxCol, ref row, col, rowIni, colIni, totalColumnaAdicional);
                        }
                    }
                    else
                    {
                        //orden, nombre y propiedades
                        int rowspan = ProfundidadVerticalRecursivo(reg.ListaHijos);
                        if (iniciaNuevaFila) row = row + 1;

                        FormatearCeldasSubcarpeta(ws, rowspan, colorAgrupamiento, reg, ref row, col, rowIni, colIni, out int colFinNombreOut);

                        iniciaNuevaFila = true;

                        if (rowspan > 0)
                        {
                            int colFinNombre = colFinNombreOut;
                            GenerarExcelItem(ws, listaAllItems, reg.ListaHijos, listaTreeData, listaIdElemento, reg.Ftitcodi,
                                                false, reg.Nivel + 1, ambiente, numMaxCol, ref row, colFinNombre + 1, rowIni, colIni, totalColumnaAdicional);
                        }
                    }
                }
                else
                {
                    //
                    int rowspan = ProfundidadVerticalRecursivo(reg.ListaHijos);
                    if (reg.ListaHijos.Any()) rowspan += 1;

                    if (iniciaNuevaFila) row = row + 1;

                    FormatearCeldaItemPropiedad(ws, rowspan > 0 ? rowspan : 1, numMaxCol, totalColumnaAdicional, reg, listaTreeData, listaIdElemento, ref row, col);

                    iniciaNuevaFila = true;

                    if (reg.ListaHijos.Any()) //subpropiedades
                    {
                        GenerarExcelItem(ws, listaAllItems, reg.ListaHijos, listaTreeData, listaIdElemento, reg.Ftitcodi,
                                            true, reg.Nivel + 1, ambiente, numMaxCol, ref row, col + 1, rowIni, colIni, totalColumnaAdicional);
                    }
                }
            }
        }

        private void FormatearCeldasCarpetaRaiz(ExcelWorksheet ws, int rowspan, int numMaxCol, int totalColumnaAdicional, string colorAgrupamiento, FtFictecItemDTO reg,
                                            ref int row, int col, int rowIni, int colIni, out int colOut)
        {
            //orden
            int rowIniOrden = row;
            int colIniOrden = reg.Nivel == 1 ? colIni : col; //si es carpeta raiz entonces resetear a la  1ra columna

            if (reg.Nivel <= 2)
            {
                if (reg.Nivel <= 1) ws.Cells[rowIniOrden, colIniOrden].Value = Int32.Parse(reg.Orden);
                else ws.Cells[rowIniOrden, colIniOrden].Value = decimal.Parse(reg.Orden);
                ws.Column(colIniOrden).Width = 7;
            }
            else
            {
                ws.Cells[rowIniOrden, colIniOrden].Value = reg.Orden;
                ws.Column(colIniOrden).Width = 12;
            }

            UtilExcel.SetFormatoCelda(ws, rowIniOrden, colIniOrden, rowIniOrden, colIniOrden, "Centro", "Centro",
                                        ConstantesFichaTecnica.ColorTextoAgrup, colorAgrupamiento, "Calibri", reg.Nivel == 1 ? 13 : 11, true); //se debe ajustar texto antes de imprimir las notas 
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniOrden, colIniOrden, rowIniOrden, colIniOrden, "#000000");

            //nombre con notas
            int rowIniNombre = rowIniOrden;
            int colIniNombre = colIniOrden + 1;
            int colFinNombre = colIni + numMaxCol - 1;
            if (colFinNombre < colIniNombre) colFinNombre = colIniNombre;

            UtilExcel.SetFormatoCelda(ws, rowIniNombre, colIniNombre, rowIniNombre, colIniNombre, "Centro", "Izquierda",
                                        ConstantesFichaTecnica.ColorTextoAgrup, colorAgrupamiento, "Calibri", 13, true); //se debe ajustar texto antes de imprimir las notas 

            ws.Cells[rowIniNombre, colIniNombre].Style.Indent = 1;
            ws.Cells[rowIniNombre, colIniNombre].IsRichText = true;
            ExcelRichTextCollection rtfCollection = ws.Cells[rowIniNombre, colIniNombre].RichText;
            ExcelRichText ert = rtfCollection.Add(reg.Ftitnombre);
            ert.Bold = true;

            if (!string.IsNullOrEmpty(reg.ListaNotanum))
            {
                ert = rtfCollection.Add(" ");
                ert = rtfCollection.Add(reg.ListaNotanum);
                ert.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;
                ert.Color = Color.Blue;
            }
            ws.Cells[rowIniNombre, colIniNombre].Style.Font.SetFromFont(new Font("Calibri", reg.Nivel == 1 ? 13 : 11));

            ws.Cells[rowIniNombre, colIniNombre, rowIniNombre, colFinNombre].Merge = true;
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniNombre, colIniNombre, rowIniNombre, colFinNombre, "#000000");

            //celdas adicionales
            for (int i = 1; i <= totalColumnaAdicional; i++)
            {
                UtilExcel.SetFormatoCelda(ws, rowIniOrden, colFinNombre + i, rowIniOrden, colFinNombre + i, "Centro", "Centro",
                                            ConstantesFichaTecnica.ColorTextoAgrup, colorAgrupamiento, "Calibri", reg.Nivel == 1 ? 13 : 11, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniOrden, colFinNombre + i, rowIniOrden, colFinNombre + i, "#000000");
            }

            //
            colOut = col;
            if (rowspan > 0)
            {
                row = row + 1;

                //filas en blanco
                int rowIniEspacio = rowIniOrden + 1;
                int rowFinEspacio = rowIniEspacio + (rowspan - 1);
                int colIniEspacio = colIniOrden;
                ws.Cells[rowIniEspacio, colIniEspacio, rowFinEspacio, colIniEspacio].Merge = true;
                //ws.Cells[rowIniEspacio, colIniEspacio, rowFinEspacio, colIniEspacio].Style.WrapText = true;
                ws.Cells[rowIniEspacio, colIniEspacio, rowFinEspacio, colIniEspacio].Style.Border.BorderAround(ExcelBorderStyle.Thin);
                ws.Cells[rowIniEspacio, colIniEspacio, rowFinEspacio, colIniEspacio].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[rowIniEspacio, colIniEspacio, rowFinEspacio, colIniEspacio].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                colOut = colIniEspacio + 1;
            }
        }

        private void FormatearCeldasSubcarpeta(ExcelWorksheet ws, int rowspan, string colorAgrupamiento, FtFictecItemDTO reg,
                                            ref int row, int col, int rowIni, int colIni, out int colFinNombreOut)
        {
            //orden
            int rowIniOrden = row;
            int rowFinOrden = rowIniOrden + rowspan - 1;
            int colIniOrden = col;
            int colFinOrden = colIniOrden;
            if (reg.Nivel <= 2)
            {
                ws.Cells[rowIniOrden, colIniOrden].Value = decimal.Parse(reg.Orden); //1.1
            }
            else
            {
                ws.Cells[rowIniOrden, colIniOrden].Value = reg.Orden; //1.1.1
            }
            ws.Column(colIniOrden).Width = 12;

            UtilExcel.SetFormatoCelda(ws, rowIniOrden, colIniOrden, rowIniOrden, colIniOrden, "Arriba", "Centro",
                                        ConstantesFichaTecnica.ColorOrdenAgrup, colorAgrupamiento, "Calibri", 11, false); //se debe ajustar texto antes de imprimir las notas 
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniOrden, colIniOrden, rowFinOrden, colFinOrden, "#000000");
            ws.Cells[rowIniOrden, colIniOrden, rowFinOrden, colFinOrden].Merge = true;

            //nombre con notas
            int rowIniNombre = rowIniOrden;
            int rowFinNombre = rowIniOrden + rowspan - 1;
            int colIniNombre = colIniOrden + 1;
            int colFinNombre = colIniNombre;

            ws.Cells[rowIniNombre, colIniNombre].Style.Indent = 1;
            ws.Cells[rowIniNombre, colIniNombre].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[rowIniNombre, colIniNombre].Style.Fill.PatternType = ExcelFillStyle.Solid;
            ws.Cells[rowIniNombre, colIniNombre].Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml(colorAgrupamiento));
            ws.Cells[rowIniNombre, colIniNombre].Style.Font.Color.SetColor(ColorTranslator.FromHtml(ConstantesFichaTecnica.ColorTextoAgrup));
            ws.Cells[rowIniNombre, colIniNombre].IsRichText = true;
            ExcelRichTextCollection rtfCollection = ws.Cells[rowIniNombre, colIniNombre].RichText;
            ExcelRichText ert = rtfCollection.Add(reg.Ftitnombre);
            ert.Bold = false;

            if (!string.IsNullOrEmpty(reg.ListaNotanum))
            {
                ert = rtfCollection.Add(" ");
                ert = rtfCollection.Add(reg.ListaNotanum);
                ert.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;
                ert.Color = Color.Blue;
            }
            ws.Cells[rowIniNombre, colIniNombre].Style.Font.SetFromFont(new Font("Calibri", 11));
            ws.Cells[rowIniNombre, colIniNombre, rowFinNombre, colFinNombre].Merge = true;
            //ws.Cells[rowIniNombre, colIniNombre, rowFinNombre, colFinNombre].Style.WrapText = true;
            ws.Cells[rowIniNombre, colIniNombre, rowFinNombre, colFinNombre].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[rowIniNombre, colIniNombre, rowFinNombre, colFinNombre].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            ws.Cells[rowIniNombre, colIniNombre, rowFinNombre, colFinNombre].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

            //
            colFinNombreOut = colFinNombre;
        }

        private void FormatearCeldaItemPropiedad(ExcelWorksheet ws, int rowspan, int numMaxCol, int totalColumnaAdicional, FtFictecItemDTO reg,
                                            List<FtFictecItemDTO> listaTreeData, List<int> listaIdElemento, ref int row, int col)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();
            //orden
            int rowIniOrden = row;
            int rowFinOrden = rowIniOrden + rowspan - 1;
            int colIniOrden = col;
            int colFinOrden = colIniOrden;
            if (reg.Nivel <= 2)
            {
                if (reg.Nivel <= 1) ws.Cells[rowIniOrden, colIniOrden].Value = Int32.Parse(reg.Orden);
                else ws.Cells[rowIniOrden, colIniOrden].Value = decimal.Parse(reg.Orden);
            }
            else
            {
                ws.Cells[rowIniOrden, colIniOrden].Value = reg.Orden;
            }
            ws.Column(colIniOrden).Width = 10;
            UtilExcel.SetFormatoCelda(ws, rowIniOrden, colIniOrden, rowIniOrden, colIniOrden, "Arriba", "Centro",
                                        ConstantesFichaTecnica.ColorOrdenAgrup, "#FFFFFF", "Calibri", 11, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniOrden, colIniOrden, rowFinOrden, colIniOrden, "#000000");
            if (rowIniOrden != rowFinOrden) ws.Cells[rowIniOrden, colIniOrden, rowFinOrden, colFinOrden].Merge = true;

            //nombre con notas
            int rowIniNombre = rowIniOrden;
            int rowFinNombre = rowIniOrden;
            int colIniNombre = colIniOrden + 1;
            int colFinNombre = numMaxCol - 1;

            ws.Cells[rowIniNombre, colIniNombre].Style.Indent = 1;
            ws.Cells[rowIniNombre, colIniNombre].IsRichText = true;
            ExcelRichTextCollection rtfCollection = ws.Cells[rowIniNombre, colIniNombre].RichText;
            ExcelRichText ert = rtfCollection.Add(reg.Ftitnombre);
            if (!string.IsNullOrEmpty(reg.ListaNotanum))
            {
                ert = rtfCollection.Add(" ");
                ert = rtfCollection.Add(reg.ListaNotanum);
                ert.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;
                ert.Color = Color.Blue;
                ert.Bold = true;
            }
            if (colIniNombre != colFinNombre)
            {
                ws.Cells[rowIniNombre, colIniNombre, rowIniNombre, colFinNombre].Merge = true;
            }
            //ws.Cells[rowIniNombre, colIniNombre, rowIniNombre, colFinNombre].Style.WrapText = true;
            ws.Cells[rowIniNombre, colIniNombre, rowIniNombre, colFinNombre].Style.Border.BorderAround(ExcelBorderStyle.Thin);
            ws.Cells[rowIniNombre, colIniNombre, rowIniNombre, colFinNombre].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            ws.Cells[rowIniNombre, colIniNombre, rowIniNombre, colFinNombre].Style.VerticalAlignment = ExcelVerticalAlignment.Top;
            ws.Column(colIniNombre).Width = colIniNombre == colFinNombre ? 42 : 21;

            //unidad
            int rowIniUnidad = rowIniOrden;
            int colIniUnidad = colFinNombre + 1;
            GenerarExcelItemUnidad(ws, reg.ItemUnidadDesc, rowIniUnidad, colIniUnidad);
            UtilExcel.SetFormatoCelda(ws, rowIniUnidad, colIniUnidad, rowIniUnidad, colIniUnidad, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniUnidad, colIniUnidad, rowIniUnidad, colIniUnidad, "#000000");
            ws.Column(colIniUnidad).Width = 15;

            //Si tiene marcado el check,pinto de color verde claro
            if (reg.TieneColorInflexOp)
            {
                servFormato.CeldasExcelColorFondo(ws, rowIniOrden, colIniOrden, rowIniOrden, colIniOrden, ConstantesFichaTecnica.ColorVerdeClaro);
                servFormato.CeldasExcelColorFondo(ws, rowIniNombre, colIniNombre, rowIniNombre, colIniNombre, ConstantesFichaTecnica.ColorVerdeClaro); //"#FFAAAA"
                servFormato.CeldasExcelColorFondo(ws, rowIniUnidad, colIniUnidad, rowIniUnidad, colIniUnidad, ConstantesFichaTecnica.ColorVerdeClaro); //"#FBFFAA"
            }

            reg.FilaExcel = row; // asignamos la fila del item
            var listaValorXItem = listaTreeData.Where(x => x.Ftitcodi == reg.Ftitcodi).ToList();
            if (listaValorXItem != null)
                listaValorXItem.ForEach(x => x.FilaExcel = reg.FilaExcel);

            int rowIniValor = row;
            int colIniValor = colIniUnidad + 1;
            int colValorTmp = colIniValor;

            UtilExcel.SetFormatoCelda(ws, rowIniValor, colValorTmp, rowIniValor, colIniUnidad + totalColumnaAdicional, "Centro", "Centro", "#0000FF", "#FFFFFF", "Calibri", 10, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniValor, colValorTmp, rowIniValor, colIniUnidad + totalColumnaAdicional, "#000000", true, true);
        }

        /// <summary>
        /// Generar excel superindice de la medida
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="unidad"></param>
        /// <param name="row"></param>
        /// <param name="col"></param>
        private void GenerarExcelItemUnidad(ExcelWorksheet ws, string unidad, int row, int col)
        {
            unidad = unidad.Trim();
            string formatedo = string.Empty;

            ws.Cells[row, col].IsRichText = true;
            ExcelRichTextCollection rtfCollection = ws.Cells[row, col].RichText;
            ExcelRichText ert = null;

            for (int i = 0; i < unidad.Length; i++)
            {
                int num = -1;
                if (Int32.TryParse(unidad[i].ToString(), out num))
                {
                    ert = rtfCollection.Add(unidad[i].ToString());
                    ert.VerticalAlign = ExcelVerticalAlignmentFont.Superscript;
                }
                else
                {
                    ert = rtfCollection.Add(unidad[i].ToString());
                }
            }

        }

        /// <summary>
        /// Generar excel del valor del item
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="valor"></param>
        /// <param name="esFile"></param>
        /// <param name="row"></param>
        /// <param name="col"></param>
        private void GenerarExcelItemValor(ExcelWorksheet ws, string valor, bool esFile, int row, int col)
        {
            string formatedo = (valor ?? "").Trim();

            if (esFile && formatedo != "")
            {
                ws.Cells[row, col].Value = formatedo;

                Uri uriResult;
                bool result = Uri.TryCreate(formatedo, UriKind.Absolute, out uriResult)
                    && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);
                if (result)
                {
                    ws.Cells[row, col].Hyperlink = new Uri(formatedo);
                }
            }
            else
            {
                ws.Cells[row, col].Value = formatedo;
            }
        }

        /// <summary>
        /// Generar pie de pagina
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="fteqcodi"></param>
        /// <param name="row"></param>
        /// <param name="col"></param>
        private void GenerarExceNota(ExcelWorksheet ws, int fteqcodi, ref int row, int col)
        {
            var listaNota = ListFtFictecNotaByFteqcodi(fteqcodi);
            int totalNota = listaNota.Count;
            if (totalNota > 0)
            {
                int rowIniNota = row;
                int colIniNota = col;
                int rowFinNota = rowIniNota + totalNota - 1;
                ws.Cells[rowIniNota, colIniNota].Value = "Nota:";
                ws.Cells[rowIniNota, colIniNota].Style.Font.Bold = true;
                //ws.Cells[rowIniNota, colIniNota].Style.Fill.PatternType = ExcelFillStyle.Solid;
                ws.Cells[rowIniNota, colIniNota].Style.Font.Color.SetColor(Color.Blue);
                ws.Cells[rowIniNota, colIniNota].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[rowIniNota, colIniNota].Style.VerticalAlignment = ExcelVerticalAlignment.Top;

                ws.Cells[rowIniNota, colIniNota, rowFinNota, colIniNota].Merge = true;
                ws.Cells[rowIniNota, colIniNota, rowFinNota, colIniNota].Style.WrapText = true;

                int colIniNum = colIniNota + 1;
                int colIniDesc = colIniNum + 1;
                for (int i = 0; i < totalNota; i++)
                {
                    String num = listaNota[i].Ftnotanum + " )";
                    ws.Cells[row, colIniNum].Value = num;
                    ws.Cells[row, colIniNum].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    ws.Cells[row, colIniNum].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    ws.Cells[row, colIniNum].Style.Font.Color.SetColor(Color.Blue);

                    ws.Cells[row, colIniDesc].Value = listaNota[i].Ftnotdesc;
                    ws.Cells[row, colIniDesc].Style.Indent = 2;
                    ws.Cells[row, colIniDesc].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    ws.Cells[row, colIniDesc].Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    ws.Cells[row, colIniDesc].Style.Font.Color.SetColor(Color.Blue);
                    row++;
                }
            }
        }

        /// <summary>
        /// Actualizar Visibilidad Equipos y Modos
        /// </summary>
        /// <param name="idFT"></param>
        /// <param name="idElemento"></param>
        /// <param name="tipo"></param>
        /// <param name="opcion"></param>
        /// <param name="fecha"></param>
        /// <param name="usuario"></param>
        /// <param name="elementoCambio"></param>
        public void ActualizarVisibilidadEquiposModos(int idFT, int idElemento, int tipo, int tipoOculto, string opcion, DateTime fecha, string usuario, ref NotificacionEqVisualizacion elementoCambio)
        {
            List<FtFictecVisualentidadDTO> listElementosVisualizacion = ListFtFictecVisualentidads();
            var ElementoVisibilidad = listElementosVisualizacion.Find(x => x.Ftvercodisicoes == idElemento && x.Fteqcodi == idFT);

            if (tipo == ConstantesFichaTecnica.OrigenTipoEquipo)
            {
                if (ElementoVisibilidad == null)
                {
                    if (opcion == "S")
                    {
                        elementoCambio.Oculto = "NO";
                        elementoCambio.OcultoNew = "SI";
                        FtFictecVisualentidadDTO reg = new FtFictecVisualentidadDTO();
                        reg.Fteqcodi = idFT;
                        reg.Ftvertipoentidad = "E";
                        reg.Ftvercodisicoes = idElemento;
                        reg.Ftverocultoportal = tipoOculto == ConstantesFichaTecnica.TipoOcultoPortal ? opcion : reg.Ftverocultoportal;
                        reg.Ftverocultoextranet = tipoOculto == ConstantesFichaTecnica.TipoOcultoExtranet ? opcion : reg.Ftverocultoextranet;
                        reg.Ftverocultointranet = tipoOculto == ConstantesFichaTecnica.TipoOcultoIntranet ? opcion : reg.Ftverocultointranet;
                        reg.Ftverusucreacion = usuario;
                        reg.Ftverfeccreacion = fecha;

                        SaveFtFictecVisualentidad(reg);
                    }
                }
                else
                {
                    elementoCambio.Oculto = opcion == "S" ? "NO" : "SI";
                    elementoCambio.OcultoNew = opcion == "S" ? "SI" : "NO";
                    ElementoVisibilidad.Ftverocultoportal = tipoOculto == ConstantesFichaTecnica.TipoOcultoPortal ? opcion : ElementoVisibilidad.Ftverocultoportal;
                    ElementoVisibilidad.Ftverocultoextranet = tipoOculto == ConstantesFichaTecnica.TipoOcultoExtranet ? opcion : ElementoVisibilidad.Ftverocultoextranet;
                    ElementoVisibilidad.Ftverocultointranet = tipoOculto == ConstantesFichaTecnica.TipoOcultoIntranet ? opcion : ElementoVisibilidad.Ftverocultointranet;
                    ElementoVisibilidad.Ftverusumodificacion = usuario;
                    ElementoVisibilidad.Ftverfecmodificacion = fecha;

                    UpdateFtFictecVisualentidad(ElementoVisibilidad);
                }

            }
            if (tipo == ConstantesFichaTecnica.OrigenCategoriaGrupo)
            {
                if (ElementoVisibilidad == null)
                {
                    if (opcion == "S")
                    {
                        elementoCambio.Oculto = "NO";
                        elementoCambio.OcultoNew = "SI";
                        FtFictecVisualentidadDTO reg = new FtFictecVisualentidadDTO();
                        reg.Fteqcodi = idFT;
                        reg.Ftvertipoentidad = "G";
                        reg.Ftvercodisicoes = idElemento;
                        reg.Ftverocultoportal = tipoOculto == ConstantesFichaTecnica.TipoOcultoPortal ? opcion : reg.Ftverocultoportal;
                        reg.Ftverocultoextranet = tipoOculto == ConstantesFichaTecnica.TipoOcultoExtranet ? opcion : reg.Ftverocultoextranet;
                        reg.Ftverocultointranet = tipoOculto == ConstantesFichaTecnica.TipoOcultoIntranet ? opcion : reg.Ftverocultointranet;
                        reg.Ftverusucreacion = usuario;
                        reg.Ftverfeccreacion = fecha;

                        SaveFtFictecVisualentidad(reg);
                    }
                }
                else
                {
                    elementoCambio.Oculto = opcion == "S" ? "NO" : "SI";
                    elementoCambio.OcultoNew = opcion == "S" ? "SI" : "NO";
                    ElementoVisibilidad.Ftverocultoportal = tipoOculto == ConstantesFichaTecnica.TipoOcultoPortal ? opcion : ElementoVisibilidad.Ftverocultoportal;
                    ElementoVisibilidad.Ftverocultoextranet = tipoOculto == ConstantesFichaTecnica.TipoOcultoExtranet ? opcion : ElementoVisibilidad.Ftverocultoextranet;
                    ElementoVisibilidad.Ftverocultointranet = tipoOculto == ConstantesFichaTecnica.TipoOcultoIntranet ? opcion : ElementoVisibilidad.Ftverocultointranet;
                    ElementoVisibilidad.Ftverusumodificacion = usuario;
                    ElementoVisibilidad.Ftverfecmodificacion = fecha;

                    UpdateFtFictecVisualentidad(ElementoVisibilidad);
                }

            }
        }

        /// <summary>
        /// Reporte Detalle Ficha Tecnica
        /// </summary>
        /// <param name="idFichaTecnica"></param>
        /// <param name="idElemento"></param>
        /// <param name="ambiente"></param>
        /// <param name="flagSoloEqActivo"></param>
        /// <param name="fechaConsulta"></param>
        /// <param name="listaAllItems"></param>
        /// <param name="listaTreeItems"></param>
        /// <param name="listaItemsJson"></param>
        /// <param name="listaNota"></param>
        /// <param name="listaHijo"></param>
        /// <param name="fichaTecnica"></param>
        /// <param name="listaEquipo"></param>
        /// <param name="listaGrupo"></param>
        /// <param name="flagExisteComentario"></param>
        public void ReporteDetalleFichaTecnica(int idFichaTecnica, int idElemento, int ambiente, bool flagSoloEqActivo, DateTime fechaConsulta,
                                        out List<FtFictecItemDTO> listaAllItems, out List<FtFictecItemDTO> listaTreeItems,
                                        out List<TreeItemFichaTecnica> listaItemsJson, out List<FtFictecNotaDTO> listaNota,
                                        out List<FtFictecXTipoEquipoDTO> listaHijo, out FtFictecXTipoEquipoDTO fichaTecnica,
                                        out List<EqEquipoDTO> listaEquipo, out List<PrGrupoDTO> listaGrupo, out bool flagExisteComentario)
        {
            listaAllItems = new List<FtFictecItemDTO>();
            listaTreeItems = new List<FtFictecItemDTO>();
            listaItemsJson = new List<TreeItemFichaTecnica>();
            listaNota = new List<FtFictecNotaDTO>();
            listaHijo = new List<FtFictecXTipoEquipoDTO>();
            fichaTecnica = new FtFictecXTipoEquipoDTO();
            listaEquipo = new List<EqEquipoDTO>();
            listaGrupo = new List<PrGrupoDTO>();
            flagExisteComentario = false;

            //Ficha padre
            fichaTecnica = GetFichaTecnica(idFichaTecnica);

            if (fichaTecnica != null)
            {
                FTFiltroReporteExcel objFiltro = GetFichaYDatosXEquipoOModo(fichaTecnica.Fteqcodi, idElemento, true, ambiente, fechaConsulta);
                ListarTreeItemsFichaTecnica(objFiltro, out listaAllItems, out listaTreeItems, out listaItemsJson);
                if (listaAllItems.Where(x => !string.IsNullOrEmpty(x.Itemcomentario)).Any()) flagExisteComentario = true;

                //LISTADO DE NOTAS DE LA FICHA
                listaNota = ListFtFictecNotaByFteqcodi(fichaTecnica.Fteqcodi);

                //LISTADO DE HIJHOS
                listaHijo = ListarFichaTecnicaByPadre(fichaTecnica.Fteqcodi);
                var listaFamcodi = listaHijo.Where(x => x.Famcodi > 0).Select(x => x.Famcodi).ToList();

                if (listaHijo.Count > 0)
                {
                    EqEquipoDTO eqPadre = FactorySic.GetEqEquipoRepository().GetById(idElemento);
                    List<FtFictecVisualentidadDTO> listElementosVisualizacion = ListFtFictecVisualentidads();

                    //lista de equipos
                    foreach (var hijo in listaHijo)
                    {
                        if (hijo.Famcodi != null)
                        {
                            var listaEquipoXFam = ListarEquipoActivoXFicha(eqPadre.Areacodi ?? 0, idElemento, fichaTecnica.Famcodi ?? 0, hijo.Famcodi ?? 0, flagSoloEqActivo)
                                                               .OrderBy(x => x.Equinomb).ToList();

                            //Verificar si existe (con al menos un equipo es suficiente)
                            if (flagSoloEqActivo && !flagExisteComentario)
                            {
                                foreach (var regEq in listaEquipoXFam)
                                {
                                    if (!flagExisteComentario)
                                    {
                                        FTFiltroReporteExcel objFiltro2 = GetFichaYDatosXEquipoOModo(fichaTecnica.Fteqcodi, regEq.Equicodi, true, ambiente, fechaConsulta);
                                        ListarTreeItemsFichaTecnica(objFiltro2, out List<FtFictecItemDTO> listaAllItemsTmp, out List<FtFictecItemDTO> listaTreeItemsTmp,
                                                                                out List<TreeItemFichaTecnica> listaItemsJsonTmp);

                                        if (listaAllItemsTmp.Where(x => !string.IsNullOrEmpty(x.Itemcomentario)).Any()) flagExisteComentario = true;
                                    }
                                }
                            }

                            //poner valores ocultos a los equipos
                            foreach (var eq in listaEquipoXFam)
                            {
                                var equipoVisibilidad = listElementosVisualizacion.Find(x => x.Ftvercodisicoes == eq.Equicodi && x.Fteqcodi == hijo.Fteqcodi);
                                eq.FtverocultoPortal = equipoVisibilidad != null ? equipoVisibilidad.Ftverocultoportal : "N";
                                eq.FtverocultoExtranet = equipoVisibilidad != null ? equipoVisibilidad.Ftverocultoextranet : "N";
                                eq.FtverocultoIntranet = equipoVisibilidad != null ? equipoVisibilidad.Ftverocultointranet : "N";
                            }

                            listaEquipo.AddRange(listaEquipoXFam);
                        }
                        else
                        {
                            if (fichaTecnica.Famcodi != null && hijo.Catecodi == 2)  //central con modos de operacion
                            {
                                //lista de modos de operación
                                listaGrupo = ListarModoXCentral(idElemento).OrderBy(x => x.Gruponomb).ToList();

                                //Verificar si existe (con al menos un equipo es suficiente)
                                if (flagSoloEqActivo)
                                {
                                    listaGrupo = listaGrupo.Where(x => x.GrupoEstado == ConstantesAppServicio.Activo).ToList();

                                    foreach (var regGr in listaGrupo)
                                    {
                                        if (!flagExisteComentario)
                                        {
                                            FTFiltroReporteExcel objFiltro3 = GetFichaYDatosXEquipoOModo(hijo.Fteqcodi, regGr.Grupocodi, true, ambiente, DateTime.Today);
                                            ListarTreeItemsFichaTecnica(objFiltro3, out List<FtFictecItemDTO> listaAllItemsTmp, out List<FtFictecItemDTO> listaTreeItemsTmp,
                                                                                out List<TreeItemFichaTecnica> listaItemsJsonTmp);
                                            if (listaAllItemsTmp.Where(x => !string.IsNullOrEmpty(x.Itemcomentario)).Any()) flagExisteComentario = true;
                                        }
                                    }
                                }

                                //poner valores ocultos a los grupos modos
                                foreach (var gr in listaGrupo)
                                {
                                    var grupoVisibilidad = listElementosVisualizacion.Find(x => x.Ftvercodisicoes == gr.Grupocodi && x.Fteqcodi == hijo.Fteqcodi);
                                    gr.FtverocultoPortal = grupoVisibilidad != null ? grupoVisibilidad.Ftverocultoportal : "N";
                                    gr.FtverocultoExtranet = grupoVisibilidad != null ? grupoVisibilidad.Ftverocultoextranet : "N";
                                    gr.FtverocultoIntranet = grupoVisibilidad != null ? grupoVisibilidad.Ftverocultointranet : "N";
                                }
                            }

                        }
                    }
                }
            }
        }

        /// <summary>
        /// Listar empresas por área
        /// </summary>
        /// <param name="fteqcodi"></param>
        /// <param name="areacodi"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListaEmpresasXFichaSubestacion(int fteqcodi, int areacodi, bool esPortal)
        {
            //LISTADO DE HIJHOS
            var listaHijo = ListarFichaTecnicaByPadre(fteqcodi);
            var listaFamcodi = listaHijo.Where(x => x.Famcodi > 0).Select(x => x.Famcodi).ToList();

            //
            List<SiEmpresaDTO> listaEmpresasXArea = new List<SiEmpresaDTO>();

            var listaequipos = ListarEquipoActivoXFicha(areacodi, -1, 1, -1, esPortal)
                                    .Where(x => listaFamcodi.Contains(x.Famcodi)).OrderBy(x => x.Equinomb).ToList();

            //obtener empresas
            foreach (var listaAgrupada in listaequipos.GroupBy(x => x.Emprcodi))
            {
                var elemento = listaAgrupada.First();
                SiEmpresaDTO empresa = new SiEmpresaDTO();
                empresa.Emprcodi = elemento.Emprcodi.Value;
                empresa.Emprnomb = elemento.Emprnomb;

                listaEmpresasXArea.Add(empresa);
            }

            return listaEmpresasXArea.OrderBy(x => x.Emprnomb).ToList();
        }

        private List<EqEquipoDTO> ListarEquipoActivoXFicha(int areacodi, int equipadre, int famcodiPadre, int famcodiHijo, bool esPortal)
        {
            List<EqEquipoDTO> listaEq = new List<EqEquipoDTO>();

            if (famcodiPadre == 1)
            {
                if (esPortal) // filtrar solo actvos
                    listaEq = FactorySic.GetEqEquipoRepository().ObtenerEquipoPorAreaEmpresa(-1, areacodi)
                                .Where(x => x.Equiestado == ConstantesAppServicio.Activo).ToList();
                else
                {
                    listaEq = FactorySic.GetEqEquipoRepository().ObtenerEquipoPorAreaEmpresa(-1, areacodi);
                    // filtrar solo estados activos, en proyecto y fuera de COES
                    listaEq = listaEq.Where(x => x.Equiestado == "A" || x.Equiestado == "P" || x.Equiestado == "F").ToList();
                }
            }
            else
            {
                if (equipadre > 0)
                {
                    if (esPortal) // filtrar solo activos
                        listaEq = FactorySic.GetEqEquipoRepository().GetByEmprFamCentral(-2, -2, equipadre)
                                    .Where(x => x.Equiestado == ConstantesAppServicio.Activo).ToList();
                    else
                        listaEq = FactorySic.GetEqEquipoRepository().GetByEmprFamCentral2(-2, -2, equipadre);
                }
            }

            if (famcodiHijo > 0)
            {
                listaEq = listaEq.Where(x => x.Famcodi == famcodiHijo).ToList();
            }

            foreach (var reg in listaEq)
            {
                reg.Equinomb = (reg.Equinomb ?? "").Trim();
                reg.Equiabrev = (reg.Equiabrev ?? "").Trim();
                reg.Emprnomb = (reg.Emprnomb ?? "").Trim();
                reg.Areanomb = (reg.Areanomb ?? "").Trim();
                reg.EstadoDesc = EquipamientoHelper.EstadoDescripcion(reg.Equiestado);
            }

            return listaEq;
        }

        private List<PrGrupoDTO> ListarModoXCentral(int equipadre)
        {
            //var listaRelUnidadModo = GetByCriteriaPrGrupoeqs(-1, equipadre).Where(x => x.Equiestado == ConstantesAppServicio.Activo && x.Grupoestado == ConstantesAppServicio.Activo).ToList();
            var listaRelUnidadModo = GetByCriteriaPrGrupoeqs(-1, equipadre);

            return listaRelUnidadModo.GroupBy(x => x.Grupocodi).Select(x => new PrGrupoDTO()
            {
                Grupocodi = x.Key,
                Gruponomb = x.First().Gruponomb,
                Grupoabrev = x.First().Grupoabrev,
                Emprnomb = x.First().Emprnomb,
                GrupoEstado = x.First().Grupoestado,
                GrupoEstadoDesc = EquipamientoHelper.EstadoDescripcion(x.First().Grupoestado)
            }).OrderBy(x => x.Gruponomb).ToList();
        }

        /// <summary>
        /// enlace para descargar los archivos de los formularios de los envios
        /// </summary>
        /// <param name="texto"></param>
        /// <returns></returns>
        public List<string> GetListaEnlaceXTextoAdmin(string texto)
        {
            var urlConfig = FichaTecnicaAppServicio.GetUrlIntranet();

            if (texto == null) texto = "";

            texto = texto.Trim();
            texto = texto.Replace("/ (?:\r\n |\r |\n) / g", " ");
            texto = texto.Replace("/ (\n) +/ g", " ");

            List<string> arrayLink = new List<string>();
            var arraySep = texto.Split(' ');
            for (var i = 0; i < arraySep.Length; i++)
            {
                var posibleLink = arraySep[i].Trim();
                if (posibleLink.Length > 0 && (posibleLink.ToLower().StartsWith("http") || posibleLink.ToLower().StartsWith("www")))
                {
                    arrayLink.Add(posibleLink);
                }
            }

            return arrayLink;
        }

        #endregion

    }

    /// <summary>
    /// Funcionalidades de Carga de datos (Extranet, Intranet y Servicio distribuido)
    /// </summary>
    public partial class FichaTecnicaAppServicio
    {
        #region Metodos Tablas

        #region Métodos Tabla SI_PLANTILLACORREO

        /// <summary>
        /// Permite obtener un registro de la tabla SI_PLANTILLACORREO
        /// </summary>
        public SiPlantillacorreoDTO GetByIdSiPlantillacorreo(int plantcodi)
        {
            var plantilla = FactorySic.GetSiPlantillacorreoRepository().GetById(plantcodi);
            FormatearSiPlantillacorreo(plantilla);

            return plantilla;
        }

        private void FormatearSiPlantillacorreo(SiPlantillacorreoDTO plantilla)
        {
            plantilla.Plantnomb = plantilla.Plantnomb ?? "";
            plantilla.Plantusucreacion = plantilla.Plantusucreacion != null ? plantilla.Plantusucreacion : "";
            plantilla.Plantusumodificacion = plantilla.Plantusumodificacion != null ? plantilla.Plantusumodificacion : "";
            plantilla.PlantfeccreacionDesc = plantilla.Plantfeccreacion != null ? plantilla.Plantfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
            plantilla.PlantfecmodificacionDesc = plantilla.Plantfecmodificacion != null ? plantilla.Plantfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";

            plantilla.UltimaModificacionFechaDesc = plantilla.Plantfecmodificacion != null ? plantilla.PlantfecmodificacionDesc : plantilla.PlantfeccreacionDesc;
            plantilla.UltimaModificacionUsuarioDesc = plantilla.Plantfecmodificacion != null ? plantilla.Plantusumodificacion : plantilla.Plantusucreacion;
        }

        #endregion

        #region Métodos Tabla INT_DIRECTORIO

        /// <summary>
        /// Permite obtener un registro de la tabla INT_DIRECTORIO
        /// </summary>
        public IntDirectorioDTO GetByIdIntDirectorio(int dircodi)
        {
            return FactorySic.GetIntDirectorioRepository().GetById(dircodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla INT_DIRECTORIO
        /// </summary>
        public List<IntDirectorioDTO> ListIntDirectorios()
        {
            return FactorySic.GetIntDirectorioRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IntDirectorio
        /// </summary>
        public List<IntDirectorioDTO> GetByCriteriaIntDirectorios()
        {
            return FactorySic.GetIntDirectorioRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tablas FT_*, FT_EXT_*

        #region Métodos Tabla FT_FICHATECNICA (Ficha Maestra)

        /// <summary>
        /// Inserta un registro de la tabla FT_FICHATECNICA
        /// </summary>
        public int SaveFichaMaestra(FtFichaTecnicaDTO entity)
        {
            return FactorySic.GetFtFichaTecnicaRepository().Save(entity);
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_FICHATECNICA
        /// </summary>
        public void UpdateFichaMaestra(FtFichaTecnicaDTO entity)
        {
            try
            {
                FactorySic.GetFtFichaTecnicaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICHATECNICA
        /// </summary>
        public void DeleteFichaMaestra(FtFichaTecnicaDTO entity)
        {
            try
            {
                FactorySic.GetFtFichaTecnicaRepository().Delete(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }



        /// <summary>
        /// Permite obtener un registro de la tabla FT_FICHATECNICA
        /// </summary>
        public FtFichaTecnicaDTO GetFichaMaestra(int fteccodi)
        {
            return FactorySic.GetFtFichaTecnicaRepository().GetById(fteccodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFichaTecnica
        /// </summary>
        public List<FtFichaTecnicaDTO> ListarFichaMaestra(string estado)
        {
            List<FtFichaTecnicaDTO> l = FactorySic.GetFtFichaTecnicaRepository().GetByCriteria(estado);

            foreach (var reg in l)
            {
                reg.FtecfeccreacionDesc = reg.Ftecfeccreacion != null ? reg.Ftecfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.FtecfecmodificacionDesc = reg.Ftecfecmodificacion != null ? reg.Ftecfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.FtecestadoDesc = Util.EstadoDescripcion(reg.Ftecestado);
                reg.FtecprincipalDesc = reg.Ftecprincipal == ConstantesFichaTecnica.FichaMaestraPrincipal ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc;
                reg.Ftecusumodificacion = String.IsNullOrEmpty(reg.Ftecusumodificacion) ? string.Empty : reg.Ftecusumodificacion.Trim();

                switch (reg.Ftecambiente.Value)
                {
                    case ConstantesFichaTecnica.FichaMaestraPortal:
                        reg.FtecambienteDesc = ConstantesFichaTecnica.FichaMaestraPortalDesc;
                        break;
                    case ConstantesFichaTecnica.FichaMaestraIntranet:
                        reg.FtecambienteDesc = ConstantesFichaTecnica.FichaMaestraIntranetDesc;
                        break;
                    case ConstantesFichaTecnica.FichaMaestraExtranet:
                        reg.FtecambienteDesc = ConstantesFichaTecnica.FichaMaestraExtranetDesc;
                        break;
                }
            }

            return l.OrderBy(x => x.Fteccodi).ThenBy(x => x.Ftecprincipal).ToList();
        }

        /// <summary>
        /// Obtener la Ficha maestra Principal
        /// </summary>
        /// <returns></returns>
        public FtFichaTecnicaDTO GetFichaMaestraPrincipal(int ambiente)
        {
            return FactorySic.GetFtFichaTecnicaRepository().GetFichaMaestraPrincipal(ambiente);
        }

        #endregion

        #region Métodos Tabla FT_FICTECDET (Relacion de Ficha Maestra y Ficha Tecnica)

        /// <summary>
        /// Inserta un registro de la tabla FT_FICTECDET
        /// </summary>
        public void SaveFtFictecDet(FtFictecDetDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecDetRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_FICTECDET
        /// </summary>
        public void UpdateFtFictecDet(FtFictecDetDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecDetRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTECDET
        /// </summary>
        public void DeleteFtFictecDet(int ftecdcodi)
        {
            try
            {
                FactorySic.GetFtFictecDetRepository().Delete(ftecdcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTECDET
        /// </summary>
        public void DeleteFtFictecDetByFichaMaestra(int fteccodi)
        {
            try
            {
                FactorySic.GetFtFictecDetRepository().DeleteByFteccodi(fteccodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_FICTECDET
        /// </summary>
        public FtFictecDetDTO GetByIdFtFictecDet(int ftecdcodi)
        {
            return FactorySic.GetFtFictecDetRepository().GetById(ftecdcodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecDet
        /// </summary>
        public List<FtFictecDetDTO> GetByCriteriaFtFictecDets()
        {
            return FactorySic.GetFtFictecDetRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_FICTECXTIPOEQUIPO (Ficha Técnica)

        /// <summary>
        /// Inserta un registro de la tabla FT_FICTECXTIPOEQUIPO
        /// </summary>
        public int SaveFichaTecnica(FtFictecXTipoEquipoDTO entity)
        {
            return FactorySic.GetFtFictecXTipoEquipoRepository().Save(entity);
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_FICTECXTIPOEQUIPO
        /// </summary>
        public void UpdateFichaTecnica(FtFictecXTipoEquipoDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecXTipoEquipoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTECXTIPOEQUIPO
        /// </summary>
        public void DeleteFichaTecnica(FtFictecXTipoEquipoDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecXTipoEquipoRepository().Delete(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }



        /// <summary>
        /// Permite obtener un registro de la tabla FT_FICTECXTIPOEQUIPO
        /// </summary>
        public FtFictecXTipoEquipoDTO GetFichaTecnica(int fteqcodi)
        {
            FtFictecXTipoEquipoDTO reg = FactorySic.GetFtFictecXTipoEquipoRepository().GetById(fteqcodi);
            FormatearFtFictecXTipoEquipo(reg);
            return reg;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecXTipoEquipo
        /// </summary>
        public List<FtFictecXTipoEquipoDTO> ListarFichaTecnica(string estado)
        {
            FtFichaTecnicaDTO fichaMaestra = GetFichaMaestraPrincipal(ConstantesFichaTecnica.FichaMaestraPortal);
            List<FtFictecXTipoEquipoDTO> listaFTFromMaestra = fichaMaestra != null ? ListarAllFichaTecnicaByMaestra(fichaMaestra.Fteccodi) : new List<FtFictecXTipoEquipoDTO>();

            List<FtFictecXTipoEquipoDTO> lista = FactorySic.GetFtFictecXTipoEquipoRepository().GetByCriteria(estado);
            foreach (var reg in lista)
            {
                var regEsFromMaestra = listaFTFromMaestra.Find(x => x.Fteqcodi == reg.Fteqcodi);

                reg.Ftecprincipal = regEsFromMaestra != null ? ConstantesFichaTecnica.FichaMaestraPrincipal : ConstantesFichaTecnica.FichaMaestraNoPrincipal;
                reg.FtecprincipalDesc = reg.Ftecprincipal == ConstantesFichaTecnica.FichaMaestraPrincipal ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc;

                reg.FteqfeccreacionDesc = reg.Fteqfeccreacion != null ? reg.Fteqfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.FteqfecmodificacionDesc = reg.Fteqfecmodificacion != null ? reg.Fteqfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.UltimaModificacionUsuarioDesc = reg.Fteqfecmodificacion != null ? reg.Ftequsumodificacion : reg.Ftequsucreacion;
                reg.UltimaModificacionFechaDesc = reg.Fteqfecmodificacion != null ? reg.FteqfecmodificacionDesc : reg.FteqfeccreacionDesc;

                reg.Ftequsumodificacionasig = reg.Ftequsumodificacionasig ?? string.Empty;
                reg.FteqfecmodificacionasigDesc = reg.Fteqfecmodificacionasig != null ? reg.Fteqfecmodificacionasig.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;

                reg.Fteqnombre = reg.Fteqnombre != null ? reg.Fteqnombre.Trim() : string.Empty;
                reg.Famnomb = reg.Famnomb != null ? reg.Famnomb.Trim() : string.Empty;
                reg.Catenomb = reg.Catenomb != null ? reg.Catenomb.Trim() : string.Empty;
                reg.Origen = reg.Famcodi != null ? ConstantesFichaTecnica.OrigenTipoEquipo : ConstantesFichaTecnica.OrigenCategoriaGrupo;
                reg.OrigenDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? ConstantesFichaTecnica.OrigenTipoEquipoDesc : ConstantesFichaTecnica.OrigenCategoriaGrupoDesc;
                reg.OrigenTipo = reg.Famcodi != null ? reg.Famcodi.Value : reg.Catecodi.Value;
                reg.OrigenTipoDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? reg.Famnomb : reg.Catenomb;

                reg.Fteqnombrepadre = reg.Fteqnombrepadre != null ? reg.Fteqnombrepadre.Trim() : string.Empty;
                reg.Famnombpadre = reg.Famnombpadre != null ? reg.Famnombpadre.Trim() : string.Empty;
                reg.Catenombpadre = reg.Catenombpadre != null ? reg.Catenombpadre.Trim() : string.Empty;
                reg.OrigenPadre = reg.Fteqpadre != null ? (reg.Famcodipadre != null ? ConstantesFichaTecnica.OrigenTipoEquipo : ConstantesFichaTecnica.OrigenCategoriaGrupo) : ConstantesFichaTecnica.OrigenTipoNinguno;
                reg.OrigenPadreDesc = reg.OrigenPadre == ConstantesFichaTecnica.OrigenTipoEquipo ? ConstantesFichaTecnica.OrigenTipoEquipoDesc : reg.OrigenPadre == ConstantesFichaTecnica.OrigenCategoriaGrupo ? ConstantesFichaTecnica.OrigenCategoriaGrupoDesc : ConstantesFichaTecnica.OrigenTipoNingunoDesc;
                reg.OrigenPadreTipo = reg.Fteqpadre != null ? (reg.Famcodipadre != null ? reg.Famcodipadre.Value : reg.Catecodipadre.Value) : 0;
                reg.OrigenPadreTipoDesc = reg.Fteqpadre != null ? (reg.OrigenPadre == ConstantesFichaTecnica.OrigenTipoEquipo ? reg.Famnombpadre : reg.Catenombpadre) : string.Empty;

                reg.FteqestadoDesc = Util.EstadoDescripcion(reg.Fteqestado);

                DateTime? fecVigenciaExt = reg.Fteqfecvigenciaext;
                reg.FechaVigenciaExt = fecVigenciaExt != null ? (fecVigenciaExt.Value.ToString(ConstantesAppServicio.FormatoFecha)) : "";

            }

            return lista.OrderBy(x => x.Fteqestado).ThenByDescending(x => x.Ftecprincipal).ThenBy(x => x.OrigenPadreTipoDesc).ThenBy(x => x.OrigenTipoDesc).ThenBy(x => x.Fteqnombre).ToList();
        }



        /// <summary>
        /// Listar las fichas tecnicas sin sus hijos
        /// </summary>
        /// <returns></returns>
        public List<FtFictecXTipoEquipoDTO> ListarFichaTecnicaSinPadre()
        {
            List<FtFictecXTipoEquipoDTO> ldata = FactorySic.GetFtFictecXTipoEquipoRepository().GetByCriteria(ConstantesAppServicio.Activo);
            List<FtFictecXTipoEquipoDTO> lista = new List<FtFictecXTipoEquipoDTO>();
            lista = ldata.Where(x => x.Fteqpadre == null).ToList();

            foreach (var reg in lista)
            {
                reg.Fteqnombre = reg.Fteqnombre != null ? reg.Fteqnombre.Trim() : string.Empty;
                reg.FteqfeccreacionDesc = reg.Fteqfeccreacion != null ? reg.Fteqfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.FteqfecmodificacionDesc = reg.Fteqfecmodificacion != null ? reg.Fteqfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.Famnomb = reg.Famnomb != null ? reg.Famnomb.Trim() : string.Empty;
                reg.Catenomb = reg.Catenomb != null ? reg.Catenomb.Trim() : string.Empty;
                reg.Origen = reg.Famcodi != null ? ConstantesFichaTecnica.OrigenTipoEquipo : ConstantesFichaTecnica.OrigenCategoriaGrupo;
                reg.OrigenDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? ConstantesFichaTecnica.OrigenTipoEquipoDesc : ConstantesFichaTecnica.OrigenCategoriaGrupoDesc;
                reg.OrigenTipo = reg.Famcodi != null ? reg.Famcodi.Value : reg.Catecodi.Value;
                reg.OrigenTipoDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? reg.Famnomb : reg.Catenomb;

                reg.Fteqnombrepadre = reg.Fteqnombrepadre != null ? reg.Fteqnombrepadre.Trim() : string.Empty;
                reg.Famnombpadre = reg.Famnombpadre != null ? reg.Famnombpadre.Trim() : string.Empty;
                reg.Catenombpadre = reg.Catenombpadre != null ? reg.Catenombpadre.Trim() : string.Empty;
                reg.OrigenPadre = reg.Fteqpadre != null ? (reg.Famcodipadre != null ? ConstantesFichaTecnica.OrigenTipoEquipo : ConstantesFichaTecnica.OrigenCategoriaGrupo) : ConstantesFichaTecnica.OrigenTipoNinguno;
                reg.OrigenPadreDesc = reg.OrigenPadre == ConstantesFichaTecnica.OrigenTipoEquipo ? ConstantesFichaTecnica.OrigenTipoEquipoDesc : reg.OrigenPadre == ConstantesFichaTecnica.OrigenCategoriaGrupo ? ConstantesFichaTecnica.OrigenCategoriaGrupoDesc : ConstantesFichaTecnica.OrigenTipoNingunoDesc;
                reg.OrigenPadreTipo = reg.Fteqpadre != null ? (reg.Famcodipadre != null ? reg.Famcodipadre.Value : reg.Catecodipadre.Value) : 0;
                reg.OrigenPadreTipoDesc = reg.Fteqpadre != null ? (reg.OrigenPadre == ConstantesFichaTecnica.OrigenTipoEquipo ? reg.Famnombpadre : reg.Catenombpadre) : string.Empty;

                reg.FteqestadoDesc = Util.EstadoDescripcion(reg.Fteqestado);
            }

            return lista.OrderBy(x => x.Fteqnombre).ToList();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecXTipoEquipo
        /// </summary>
        public List<FtFictecXTipoEquipoDTO> ListarFichaTecnicaByMaestra(int fteccodi)
        {
            List<FtFictecXTipoEquipoDTO> lista = FactorySic.GetFtFictecXTipoEquipoRepository().ListByFteccodi(fteccodi).OrderBy(x => x.Fteqnombre).ToList();
            foreach (var reg in lista)
            {
                reg.Fteqnombre = reg.Fteqnombre != null ? reg.Fteqnombre.Trim() : string.Empty;
                reg.Origen = reg.Famcodi != null ? ConstantesFichaTecnica.OrigenTipoEquipo : ConstantesFichaTecnica.OrigenCategoriaGrupo;
                reg.OrigenDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? ConstantesFichaTecnica.OrigenTipoEquipoDesc : ConstantesFichaTecnica.OrigenCategoriaGrupoDesc;
                reg.OrigenTipo = reg.Famcodi != null ? reg.Famcodi.Value : reg.Catecodi.Value;
                reg.OrigenTipoDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? reg.Famnomb : reg.Catenomb;
                reg.Titulo = reg.Fteqnombre != null ? reg.Fteqnombre : string.Empty;
            }

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecXTipoEquipo, incluyendo las fichas hijas
        /// </summary>
        public List<FtFictecXTipoEquipoDTO> ListarAllFichaTecnicaByMaestra(int fteccodi)
        {
            List<FtFictecXTipoEquipoDTO> lista = FactorySic.GetFtFictecXTipoEquipoRepository().ListAllByFteccodi(fteccodi);
            foreach (var reg in lista)
            {
                FormatearFtFictecXTipoEquipo(reg);
            }

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecXTipoEquipo
        /// </summary>
        public List<FtFictecXTipoEquipoDTO> ListarFichaTecnicaByPadre(int fteqpadre)
        {
            List<FtFictecXTipoEquipoDTO> lista = FactorySic.GetFtFictecXTipoEquipoRepository().ListByFteqpadre(fteqpadre);
            foreach (var reg in lista)
            {
                reg.Fteqnombre = reg.Fteqnombre != null ? reg.Fteqnombre.Trim() : string.Empty;
                reg.Origen = reg.Famcodi != null ? ConstantesFichaTecnica.OrigenTipoEquipo : ConstantesFichaTecnica.OrigenCategoriaGrupo;
                reg.OrigenDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? ConstantesFichaTecnica.OrigenTipoEquipoDesc : ConstantesFichaTecnica.OrigenCategoriaGrupoDesc;
                reg.OrigenTipo = reg.Famcodi != null ? reg.Famcodi.Value : reg.Catecodi.Value;
                reg.OrigenTipoDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? reg.Famnomb : reg.Catenomb;
                reg.Titulo = reg.Fteqnombre != null ? reg.Fteqnombre : string.Empty;
            }

            return lista;
        }

        private void FormatearFtFictecXTipoEquipo(FtFictecXTipoEquipoDTO reg)
        {
            reg.Fteqnombre = reg.Fteqnombre != null ? reg.Fteqnombre.Trim() : string.Empty;
            reg.Origen = reg.Famcodi != null ? ConstantesFichaTecnica.OrigenTipoEquipo : ConstantesFichaTecnica.OrigenCategoriaGrupo;
            reg.OrigenDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? ConstantesFichaTecnica.OrigenTipoEquipoDesc : ConstantesFichaTecnica.OrigenCategoriaGrupoDesc;
            reg.OrigenTipo = reg.Famcodi != null ? reg.Famcodi.Value : reg.Catecodi.Value;
            reg.OrigenTipoDesc = reg.Origen == ConstantesFichaTecnica.OrigenTipoEquipo ? reg.Famnomb : reg.Catenomb;
            reg.Titulo = reg.Fteqnombre != null ? reg.Fteqnombre : string.Empty;
            reg.FlagVisibilidadExt = reg.Fteqflagext != null ? (reg.Fteqflagext == 1 ? "S" : "N") : string.Empty;
            reg.FechaVigenciaExt = reg.Fteqfecvigenciaext != null ? (reg.Fteqfecvigenciaext.Value.ToString(ConstantesAppServicio.FormatoFecha)) : string.Empty;

            reg.Fteqflagmostrarcoment = reg.Fteqflagmostrarcoment != null ? reg.Fteqflagmostrarcoment : 1; // por defecto activo con check
            reg.Fteqflagmostrarsust = reg.Fteqflagmostrarsust != null ? reg.Fteqflagmostrarsust : 1; // por defecto activo con check
            reg.Fteqflagmostrarfech = reg.Fteqflagmostrarfech != null ? reg.Fteqflagmostrarfech : 1; // por defecto activo con check
        }

        /// <summary>
        /// Copiar Ficha Tecnica
        /// </summary>
        /// <param name="idFTOrigen"></param>
        /// <param name="idFT"></param>
        /// <param name="listaItemsJson"></param>
        /// <param name="usuario"></param>
        public void CopiarFichaTecnica(int idFTOrigen, int idFT, List<TreeItemFichaTecnica> listaItemsJson, string usuario)
        {
            int idPadre = ConstantesFichaTecnica.TipoRaiz;
            List<FtFictecItemDTO> listaEditados = new List<FtFictecItemDTO>();

            List<FtFictecItemDTO> lista = ListarItemsByFichaTecnica(idFT);

            CopiarTreeItemsFichaTecnicaRecursivo(idFT, listaItemsJson, idPadre, usuario, lista, ref listaEditados);

            List<int> listacodiEdit = listaEditados.Select(x => x.Ftitcodi).Distinct().ToList();
            List<FtFictecItemDTO> listaEliminados = lista.Where(x => !listacodiEdit.Contains(x.Ftitcodi)).ToList();

            foreach (var regElim in listaEliminados)
            {
                regElim.Ftitusumodificacion = usuario;
                regElim.Ftitfecmodificacion = DateTime.Now;
                DeleteFtFictecItem(regElim);
            }
        }

        private void CopiarTreeItemsFichaTecnicaRecursivo(int idFT, List<TreeItemFichaTecnica> listaItem, int idPadre, string usuario, List<FtFictecItemDTO> listaBD, ref List<FtFictecItemDTO> lEditados)
        {
            List<TreeItemFichaTecnica> hijos = listaItem;
            int orden = 1;

            foreach (var reg in hijos)
            {
                //GuardarItemTree(idFT, reg, idPadre, usuario, orden, listaBD, ref lEditados);

                FtFictecItemDTO obj = new FtFictecItemDTO();
                obj.Fteqcodi = idFT;
                obj.Ftitnombre = reg.title.Trim();
                obj.Ftittipoitem = reg.folder ? ConstantesFichaTecnica.TipoAgrupamiento : ConstantesFichaTecnica.TipoPropiedad;
                obj.Ftittipoprop = reg.data.Origen;
                obj.Ftitpadre = idPadre;
                obj.Concepcodi = reg.data.Concepcodi;
                obj.Propcodi = reg.data.Propcodi;
                obj.Ftpropcodi = reg.data.Ftpropcodi;
                obj.Ftitorden = orden;
                obj.Ftitorientacion = reg.data.Ftitorientacion;
                obj.Ftitactivo = ConstantesFichaTecnica.EstadoActivo;
                obj.Ftitusucreacion = usuario;
                obj.Ftitfeccreacion = DateTime.Now;

                obj.Ftitcodi = SaveFtFictecItem(obj);

                lEditados.Add(obj);
                GuardarItemNota(obj.Ftitcodi, reg.data.ListaNotacodi);
                reg.data = obj;

                orden++;
            }

            foreach (var reg in hijos)
            {
                if (reg.children.Count > 0)
                {
                    CopiarTreeItemsFichaTecnicaRecursivo(idFT, reg.children, reg.data.Ftitcodi, usuario, listaBD, ref lEditados);
                }
            }
        }

        public void ActualizarFichaVisibilidadCheck(int idFT, bool flagCheck, int tipoCheck)
        {
            var fichaTecnica = GetFichaTecnica(idFT);

            switch (tipoCheck)
            {
                case ConstantesFichaTecnica.TipoCheckComentario:
                    fichaTecnica.Fteqflagmostrarcoment = flagCheck ? ConstantesFichaTecnica.EstadoActivo : ConstantesFichaTecnica.EstadoInactivo;
                    break;
                case ConstantesFichaTecnica.TipoCheckSustento:
                    fichaTecnica.Fteqflagmostrarsust = flagCheck ? ConstantesFichaTecnica.EstadoActivo : ConstantesFichaTecnica.EstadoInactivo;
                    break;
                case ConstantesFichaTecnica.TipoCheckFecha:
                    fichaTecnica.Fteqflagmostrarfech = flagCheck ? ConstantesFichaTecnica.EstadoActivo : ConstantesFichaTecnica.EstadoInactivo;
                    break;
            }

            UpdateFichaTecnica(fichaTecnica);
        }

        #endregion

        #region Métodos Tabla FT_FICTECITEM (Ficha Técnica Items)

        /// <summary>
        /// Inserta un registro de la tabla FT_FICTECITEM
        /// </summary>
        public int SaveFtFictecItem(FtFictecItemDTO entity)
        {
            return FactorySic.GetFtFictecItemRepository().Save(entity);
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_FICTECITEM
        /// </summary>
        public void UpdateFtFictecItem(FtFictecItemDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecItemRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTECITEM
        /// </summary>
        public void DeleteFtFictecItem(FtFictecItemDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecItemRepository().Delete(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_FICTECITEM
        /// </summary>
        public FtFictecItemDTO GetByIdFtFictecItem(int ftitcodi)
        {
            return FactorySic.GetFtFictecItemRepository().GetById(ftitcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_FICTECITEM
        /// </summary>
        public List<FtFictecItemDTO> ListFtFictecItems()
        {
            return FactorySic.GetFtFictecItemRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecItem
        /// </summary>
        public List<FtFictecItemDTO> GetByCriteriaFtFictecItems()
        {
            return FactorySic.GetFtFictecItemRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_FICTECNOTA

        /// <summary>
        /// Inserta un registro de la tabla FT_FICTECNOTA
        /// </summary>
        public void SaveFtFictecNota(FtFictecNotaDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecNotaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_FICTECNOTA
        /// </summary>
        public void UpdateFtFictecNota(FtFictecNotaDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecNotaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTECNOTA
        /// </summary>
        public void DeleteFtFictecNota(FtFictecNotaDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecNotaRepository().Delete(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_FICTECNOTA
        /// </summary>
        public FtFictecNotaDTO GetByIdFtFictecNota(int ftnotacodi)
        {
            return FactorySic.GetFtFictecNotaRepository().GetById(ftnotacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_FICTECNOTA
        /// </summary>
        public List<FtFictecNotaDTO> ListFtFictecNotaByFteqcodi(int fteqcodi)
        {
            List<FtFictecNotaDTO> lista = FactorySic.GetFtFictecNotaRepository().ListByFteqcodi(fteqcodi);
            foreach (var reg in lista)
            {
                reg.FtnotafeccreacionDesc = reg.Ftnotafeccreacion != null ? reg.Ftnotafeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.FtnotafecmodificacionDesc = reg.Ftnotafecmodificacion != null ? reg.Ftnotafecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.UltimaModificacionUsuarioDesc = reg.Ftnotafecmodificacion != null ? reg.Ftnotausumodificacion : reg.Ftnotausucreacion;
                reg.UltimaModificacionFechaDesc = reg.Ftnotafecmodificacion != null ? reg.FtnotafecmodificacionDesc : reg.FtnotafeccreacionDesc;
            }

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecNota
        /// </summary>
        public List<FtFictecNotaDTO> GetByCriteriaFtFictecNotas()
        {
            return FactorySic.GetFtFictecNotaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_FICTECITEM_NOTA

        /// <summary>
        /// Inserta un registro de la tabla FT_FICTECITEM_NOTA
        /// </summary>
        public void SaveFtFictecItemNota(FtFictecItemNotaDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecItemNotaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_FICTECITEM_NOTA
        /// </summary>
        public void UpdateFtFictecItemNota(FtFictecItemNotaDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecItemNotaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTECITEM_NOTA
        /// </summary>
        public void DeleteFtFictecItemNota(int ftitntcodi)
        {
            try
            {
                FactorySic.GetFtFictecItemNotaRepository().Delete(ftitntcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTECITEM_NOTA
        /// </summary>
        public void DeleteFtFictecItemNotaByFtitcodi(int ftitcodi)
        {
            try
            {
                FactorySic.GetFtFictecItemNotaRepository().DeleteByFtitcodi(ftitcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_FICTECITEM_NOTA
        /// </summary>
        public FtFictecItemNotaDTO GetByIdFtFictecItemNota(int ftitntcodi)
        {
            return FactorySic.GetFtFictecItemNotaRepository().GetById(ftitntcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_FICTECITEM_NOTA
        /// </summary>
        public List<FtFictecItemNotaDTO> ListFtFictecItemNotaByFteqcodi(int fteqcodi)
        {
            return FactorySic.GetFtFictecItemNotaRepository().ListByFteqcodi(fteqcodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecItemNota
        /// </summary>
        public List<FtFictecItemNotaDTO> GetByCriteriaFtFictecItemNotas()
        {
            return FactorySic.GetFtFictecItemNotaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_FICTECPROP

        /// <summary>
        /// Inserta un registro de la tabla FT_FICTECPROP
        /// </summary>
        public void SaveFtFictecProp(FtFictecPropDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecPropRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_FICTECPROP
        /// </summary>
        public void UpdateFtFictecProp(FtFictecPropDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecPropRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTECPROP
        /// </summary>
        public void DeleteFtFictecProp(int ftpropcodi)
        {
            try
            {
                FactorySic.GetFtFictecPropRepository().Delete(ftpropcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_FICTECPROP
        /// </summary>
        public FtFictecPropDTO GetByIdFtFictecProp(int ftpropcodi)
        {
            return FactorySic.GetFtFictecPropRepository().GetById(ftpropcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_FICTECPROP
        /// </summary>
        public List<FtFictecPropDTO> ListFtFictecProps()
        {
            return FactorySic.GetFtFictecPropRepository().List();
        }

        /// <summary>
        /// Listar Propiedad Particulares de la ficha tecnica
        /// </summary>
        /// <param name="id"></param>
        /// <param name="origen"></param>
        /// <param name="listacodi"></param>
        /// <returns></returns>
        public List<FtFictecPropiedadValor> ListarDataPropiedadFicha(int id, int origen, List<int?> listacodi)
        {
            List<FtFictecPropiedadValor> l = new List<FtFictecPropiedadValor>();
            List<GenericoDTO> listaDato = new List<GenericoDTO>();

            switch (origen)
            {
                case ConstantesFichaTecnica.OrigenTipoEquipo:
                    var eq = FactorySic.GetEqEquipoRepository().GetById(id);

                    if (eq != null)
                    {
                        listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropEmpresa, String1 = eq.Emprnomb });

                        List<int> listaFamcodiGen = ConstantesHorasOperacion.CodFamiliasGeneradores.Split(',').Select(x => int.Parse(x)).ToList();
                        if (listaFamcodiGen.Contains(eq.Famcodi ?? 0) && eq.Equipadre > 0)
                        {
                            var eqp = FactorySic.GetEqEquipoRepository().GetById(eq.Equipadre.Value);
                            listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropCentral, String1 = eqp.Equinomb });

                        }
                        listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropNombreEquipo, String1 = eq.Equinomb });
                        listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropCodigoEquipo, String1 = eq.Equicodi.ToString() });

                        List<int> listaFamcodiCentral = ConstantesHorasOperacion.CodFamilias.Split(',').Select(x => int.Parse(x)).ToList();
                        if (listaFamcodiCentral.Contains(eq.Famcodi ?? 0))
                        {
                            var totalModo = ListarModoXCentral(eq.Equicodi).Count();
                            if (totalModo > 0) listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropNumModosOp, String1 = totalModo.ToString() });
                        }

                        if (listaFamcodiGen.Contains(eq.Famcodi ?? 0) || listaFamcodiCentral.Contains(eq.Famcodi ?? 0))
                        {

                            var regProp = FactorySic.GetEqPropequiRepository().ListarValoresVigentesPropiedades(DateTime.Today, eq.Equicodi.ToString(), "-1", "-1",
                                                                        ConstantesAppServicio.PropiedadOperacionComercial.ToString(), string.Empty, "-1").FirstOrDefault();
                            if (regProp != null && regProp.Valor == ConstantesAppServicio.SI)
                            {
                                listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropInicioOpComercialEquipo, String1 = regProp.Fechapropequi.Value.ToString(ConstantesAppServicio.FormatoFecha) });
                            }

                        }
                    }

                    break;
                case ConstantesFichaTecnica.OrigenCategoriaGrupo:
                    var pr = FactorySic.GetPrGrupoRepository().GetById(id);

                    if (pr != null)
                    {
                        listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropEmpresa, String1 = pr.Emprnomb });


                        if (pr.Catecodi == 2)
                        {
                            var objModo = GetByCriteriaPrGrupoeqs(pr.Grupocodi, -1).FirstOrDefault();
                            listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropCentral, String1 = objModo?.Central });

                            var regProp = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(DateTime.Today, pr.Grupocodi.ToString(), ConstantesMigraciones.ConcepcodiOpComercial.ToString()).FirstOrDefault();
                            if (regProp != null && regProp.Formuladat == ConstantesAppServicio.SI)
                            {
                                listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropInicioOpComercialModoOp, String1 = regProp.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) });
                            }
                        }
                        listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropNombreModoOp, String1 = pr.Gruponomb });
                        listaDato.Add(new GenericoDTO() { Entero1 = ConstantesFichaTecnica.PropCodigoModoOp, String1 = pr.Grupocodi.ToString() });

                    }

                    break;
            }

            if (listacodi != null && listacodi.Count > 0)
            {
                listacodi = listacodi.Distinct().ToList();

                foreach (int codigo in listacodi)
                {
                    var objDato = listaDato.Find(x => x.Entero1 == codigo);
                    l.Add(new FtFictecPropiedadValor() { Ftpropcodi = codigo, Valor = (objDato?.String1) ?? "" });
                }
            }

            return l;
        }


        #endregion

        #region Métodos Tabla FT_FICTEC_VISUALENTIDAD

        /// <summary>
        /// Inserta un registro de la tabla FT_FICTEC_VISUALENTIDAD
        /// </summary>
        public void SaveFtFictecVisualentidad(FtFictecVisualentidadDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecVisualentidadRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_FICTEC_VISUALENTIDAD
        /// </summary>
        public void UpdateFtFictecVisualentidad(FtFictecVisualentidadDTO entity)
        {
            try
            {
                FactorySic.GetFtFictecVisualentidadRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_FICTEC_VISUALENTIDAD
        /// </summary>
        public void DeleteFtFictecVisualentidad(int ftvercodi)
        {
            try
            {
                FactorySic.GetFtFictecVisualentidadRepository().Delete(ftvercodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_FICTEC_VISUALENTIDAD
        /// </summary>
        public FtFictecVisualentidadDTO GetByIdFtFictecVisualentidad(int ftvercodi)
        {
            return FactorySic.GetFtFictecVisualentidadRepository().GetById(ftvercodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_FICTEC_VISUALENTIDAD
        /// </summary>
        public List<FtFictecVisualentidadDTO> ListFtFictecVisualentidads()
        {
            return FactorySic.GetFtFictecVisualentidadRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtFictecVisualentidad
        /// </summary>
        public List<FtFictecVisualentidadDTO> GetByCriteriaFtFictecVisualentidads()
        {
            return FactorySic.GetFtFictecVisualentidadRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ETAPA

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ETAPA
        /// </summary>
        public void SaveFtExtEtapa(FtExtEtapaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEtapaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ETAPA
        /// </summary>
        public void UpdateFtExtEtapa(FtExtEtapaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEtapaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ETAPA
        /// </summary>
        public void DeleteFtExtEtapa(int ftetcodi)
        {
            try
            {
                FactorySic.GetFtExtEtapaRepository().Delete(ftetcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ETAPA
        /// </summary>
        public FtExtEtapaDTO GetByIdFtExtEtapa(int ftetcodi)
        {
            return FactorySic.GetFtExtEtapaRepository().GetById(ftetcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ETAPA
        /// </summary>
        public List<FtExtEtapaDTO> ListFtExtEtapas()
        {
            var lista = FactorySic.GetFtExtEtapaRepository().List().OrderBy(x => x.Ftetcodi).ToList();

            var regModif = lista.Find(x => x.Ftetcodi == ConstantesFichaTecnica.EtapaModificacion);
            regModif.EtapaDefault = true;

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEtapa
        /// </summary>
        public List<FtExtEtapaDTO> GetByCriteriaFtExtEtapas()
        {
            return FactorySic.GetFtExtEtapaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_PROYECTO

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_PROYECTO
        /// </summary>
        public void SaveFtExtProyecto(FtExtProyectoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtProyectoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_PROYECTO
        /// </summary>
        public void UpdateFtExtProyecto(FtExtProyectoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtProyectoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_PROYECTO
        /// </summary>
        public void DeleteFtExtProyecto(int ftprycodi)
        {
            try
            {
                FactorySic.GetFtExtProyectoRepository().Delete(ftprycodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public List<FtExtProyectoDTO> GetProyectosByEstado(string estado)
        {
            return FactorySic.GetFtExtProyectoRepository().ListarPorEstado(estado).ToList();
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_PROYECTO
        /// </summary>
        public FtExtProyectoDTO GetByIdFtExtProyecto(int ftprycodi)
        {
            return FactorySic.GetFtExtProyectoRepository().GetById(ftprycodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_PROYECTO
        /// </summary>
        public List<FtExtProyectoDTO> ListFtExtProyectos()
        {
            return FactorySic.GetFtExtProyectoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtProyecto
        /// </summary>
        public List<FtExtProyectoDTO> GetByCriteriaFtExtProyectos()
        {
            return FactorySic.GetFtExtProyectoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELEEQREV

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELEEQREV
        /// </summary>
        public int SaveFtExtEnvioReleeqrev(FtExtEnvioReleeqrevDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetFtExtEnvioReleeqrevRepository().SaveTransaccional(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELEEQREV
        /// </summary>
        public void SaveFtExtEnvioReleeqrev(FtExtEnvioReleeqrevDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioReleeqrevRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELEEQREV
        /// </summary>
        public void UpdateFtExtEnvioReleeqrev(FtExtEnvioReleeqrevDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioReleeqrevRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELEEQREV
        /// </summary>
        public void DeleteFtExtEnvioReleeqrev(int freqrvcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioReleeqrevRepository().Delete(freqrvcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELEEQREV
        /// </summary>
        public FtExtEnvioReleeqrevDTO GetByIdFtExtEnvioReleeqrev(int freqrvcodi)
        {
            return FactorySic.GetFtExtEnvioReleeqrevRepository().GetById(freqrvcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELEEQREV
        /// </summary>
        public List<FtExtEnvioReleeqrevDTO> ListFtExtEnvioReleeqrevs()
        {
            return FactorySic.GetFtExtEnvioReleeqrevRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioReleeqrev
        /// </summary>
        public List<FtExtEnvioReleeqrevDTO> GetByCriteriaFtExtEnvioReleeqrevs()
        {
            return FactorySic.GetFtExtEnvioReleeqrevRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO
        /// </summary>
        public int SaveFtExtEnvio(FtExtEnvioDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetFtExtEnvioRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO
        /// </summary>
        public void UpdateFtExtEnvio(FtExtEnvioDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioRepository().Update(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO
        /// </summary>
        public void DeleteFtExtEnvio(int ftenvcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioRepository().Delete(ftenvcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO
        /// </summary>
        public FtExtEnvioDTO GetByIdFtExtEnvio(int ftenvcodi)
        {
            var obj = FactorySic.GetFtExtEnvioRepository().GetById(ftenvcodi);
            List<FtExtEnvioVersionDTO> listaVersion = GetByCriteriaFtExtEnvioVersions(ftenvcodi.ToString());

            List<int> lstEnvio = new List<int> { ftenvcodi };
            List<FtExtEnvioEqDTO> listaEquiposTotal = ObtenerListadoDeEquiposPorEnvios(lstEnvio);

            FormatearFtExtEnvio(obj, listaEquiposTotal, listaVersion);

            return obj;
        }

        /// <summary>
        /// Da formato a los registros de envios
        /// </summary>
        /// <param name="item"></param>
        /// <param name="listaEquiposTotal"></param>
        private void FormatearFtExtEnvio(FtExtEnvioDTO item, List<FtExtEnvioEqDTO> listaEquiposTotal, List<FtExtEnvioVersionDTO> listaVersion)
        {
            item.Estenvcolor = GetColorExtEstado(item.Estenvcodi);
            item.Estenvnomb = GetDescripcionExtEstado(item.Estenvcodi);
            item.FtenvfecsolicitudDesc = item.Ftenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull2);
            item.FtenvfecobservacionDesc = item.Ftenvfecobservacion != null ? item.Ftenvfecobservacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FtenvfecsistemaDesc = item.Ftenvfecsistema != null ? item.Ftenvfecsistema.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FtenvfecaprobacionDesc = item.Ftenvfecaprobacion != null ? item.Ftenvfecaprobacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FtenvfecfinrptasolicitudDesc = item.Ftenvfecfinrptasolicitud != null ? item.Ftenvfecfinrptasolicitud.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FtenvfecfinsubsanarobsDesc = item.Ftenvfecfinsubsanarobs != null ? item.Ftenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FechaVigenciaDesc = item.Ftenvfecvigencia != null ? item.Ftenvfecvigencia.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FtenvfecmodificacionDesc = item.Ftenvfecmodificacion != null ? item.Ftenvfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FechaAprobacionParcialDesc = item.FtenvfecmodificacionDesc;
            item.FtenvfecampliacionDesc = item.Ftenvfecampliacion != null ? item.Ftenvfecampliacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;
            item.FechaDesaprobacionDesc = item.Estenvcodi == ConstantesFichaTecnica.EstadoDesaprobado ? item.FtenvfecmodificacionDesc : string.Empty;
            item.AgenteUltimoEvento = ObtenerAgenteUltimoEventoPorEstadoEnvio(item);
            item.Ftenvfecinirev1Desc = item.Ftenvfecinirev1 != null ? item.Ftenvfecinirev1.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.Ftenvfecinirev2Desc = item.Ftenvfecinirev2 != null ? item.Ftenvfecinirev2.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;

            DateTime fechaActualSistema = ObtenerFechaSistemaFT(item.Ftenvcodi);

            //es editable cuando es negativo
            item.EsEditableExtranet = item.Ftenvcodi < 0;

            //es editable mientras no termine la fecha fin para subsanar
            if ((item.Estenvcodi == ConstantesFichaTecnica.EstadoObservado))
            {
                DateTime? fechaMaxPermitida = null;

                //si venció la ampliación cambiar de estado
                if (item.Ftenvfecampliacion != null)
                {
                    //ampliacion excepcional por parte del administrador COES                    
                    if (fechaActualSistema < item.Ftenvfecampliacion)
                        fechaMaxPermitida = item.Ftenvfecampliacion;
                }
                else
                {
                    //plazo segun el PR31
                    if (fechaActualSistema < item.Ftenvfecfinsubsanarobs)
                    {
                        fechaMaxPermitida = item.Ftenvfecfinsubsanarobs;
                    }
                }

                if (fechaMaxPermitida != null)
                {
                    if (fechaActualSistema <= fechaMaxPermitida)
                        item.EsEditableExtranet = true;
                }
            }

            if (item.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud || item.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs ||
                (item.Estenvcodi == ConstantesFichaTecnica.EstadoAprobado && item.Ftetcodi == ConstantesFichaTecnica.EtapaConexion))
            {
                item.EsEditableIntranet = true;
            }

            //si esta en solicitud debe tener fecha de inicio de revisión
            if (item.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud && item.Ftenvfecinirev1 == null)
            {
                item.EsEditableIntranet = false;
            }

            //si esta en subsanacion debe tener fecha de inicio de revisión
            if (item.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs && item.Ftenvfecinirev2 == null)
            {
                item.EsEditableIntranet = false;
            }

            item.TipoAccionIntranet = item.EsEditableIntranet ? ConstantesFichaTecnica.AccionEditar : ConstantesFichaTecnica.AccionVer;
            item.TipoAccionExtranet = item.EsEditableExtranet ? ConstantesFichaTecnica.AccionEditar : ConstantesFichaTecnica.AccionVer;

            #region Versiones

            //solo considerar las versiones que tienen la misma carpeta que el envio
            var listaHist = listaVersion.Where(x => x.Ftenvcodi == item.Ftenvcodi).OrderByDescending(x => x.Ftevercodi).ToList();

            //version actual
            var objUltimaVersionOficial = listaHist.Where(x => x.Ftevertipo == ConstantesFichaTecnica.GuardadoOficial).FirstOrDefault();
            if (objUltimaVersionOficial != null)
            {
                item.FtevercodiOficial = objUltimaVersionOficial.Ftevercodi;
                item.VersionOficialActual = objUltimaVersionOficial;

                item.VersionActual = objUltimaVersionOficial;
                item.FtevercodiActual = objUltimaVersionOficial.Ftevercodi;
            }

            //ultimo temporal (son autoguardado pero no log), esta versión tiene que ser posterior al oficial.
            var objTmpExt = listaHist.Where(x => x.Estenvcodi == item.Estenvcodi && x.Ftevertipo == ConstantesFichaTecnica.GuardadoTemporal
                                                && x.Fteverusucreacion.Contains("@") && x.Ftevercodi > item.FtevercodiOficial).FirstOrDefault();
            if (objTmpExt != null)
            {
                item.FtevercodiTemporalExtranet = objTmpExt.Ftevercodi;
                item.VersionTemporalExtranet = objTmpExt;
            }

            var objTmpInt = listaHist.Where(x => x.Estenvcodi == item.Estenvcodi && x.Ftevertipo == ConstantesFichaTecnica.GuardadoTemporal
                                                && !x.Fteverusucreacion.Contains("@") && x.Ftevercodi > item.FtevercodiOficial).FirstOrDefault();
            if (objTmpInt != null)
            {
                item.FtevercodiTemporalIntranet = objTmpInt.Ftevercodi;
                item.VersionTemporalIntranet = objTmpInt;
            }

            //versiones "atendido" para areas
            var objTmpIntAreaSol = listaHist.Where(x => x.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud 
                                                && (x.Ftevertipo == ConstantesFichaTecnica.GuardadoTemporal || x.Ftevertipo == ConstantesFichaTecnica.GuardadoOficial)
                                                && !x.Fteverusucreacion.Contains("@")).FirstOrDefault();
            if (objTmpIntAreaSol != null)
            {
                item.FtevercodiTemporalIntranetSolicitud = objTmpIntAreaSol.Ftevercodi;
            }
            var objTmpIntAreaSubs = listaHist.Where(x => x.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs
                                                && (x.Ftevertipo == ConstantesFichaTecnica.GuardadoTemporal || x.Ftevertipo == ConstantesFichaTecnica.GuardadoOficial)
                                                && !x.Fteverusucreacion.Contains("@")).FirstOrDefault();
            if (objTmpIntAreaSubs != null)
            {
                item.FtevercodiTemporalIntranetSubsanacion = objTmpIntAreaSubs.Ftevercodi;
            }

            //version para comparar cambios en Modificación de Ficha técnica

            var objModif = listaVersion.Where(x => x.Ftevertipo == ConstantesFichaTecnica.GuardadoTemporalFTVigente).OrderByDescending(x => x.Ftevercodi).FirstOrDefault();
            if (objModif != null)
            {
                item.FtevercodiTemporalFTVigente = objModif.Ftevercodi;
            }

            #endregion

            #region Equipos Proyecto y Nombre Equipos

            List<string> lstNombEquiposArea = new List<string>();
            List<FtExtEnvioEqDTO> lstEquiposPorEnvio = listaEquiposTotal.Where(x => x.Ftevercodi == item.FtevercodiOficial).OrderBy(x => x.Nombreelemento).ToList();
            foreach (var reg in lstEquiposPorEnvio)
            {
                string nombE = reg.Nombreelemento != null ? reg.Nombreelemento.Trim() : "";
                string nombU = reg.Areaelemento != null ? reg.Areaelemento.Trim() : "";
                string cad = nombE + " (" + nombU + ")";
                lstNombEquiposArea.Add(cad);
            }

            if (item.Ftetcodi == ConstantesFichaTecnica.EtapaModificacion)
            {
                item.Ftprynombre = "";
                item.EquiposProyecto = "";
                item.EquiposProyectoUnico = "";
                item.NombreEquipos = lstNombEquiposArea.Any() ? string.Join(", ", lstNombEquiposArea) : "";
                item.NombreEquiposUnico = lstNombEquiposArea.Any() ? lstNombEquiposArea.First() : "";
            }
            else
            {
                if (item.Ftetcodi == ConstantesFichaTecnica.EtapaConexion || item.Ftetcodi == ConstantesFichaTecnica.EtapaIntegracion || item.Ftetcodi == ConstantesFichaTecnica.EtapaOperacionComercial)
                {

                    item.NombreEquipos = lstNombEquiposArea.Any() ? string.Join(", ", lstNombEquiposArea) : "";
                    item.NombreEquiposUnico = lstNombEquiposArea.Any() ? lstNombEquiposArea.First() : "";
                    item.EquiposProyecto = item.NombreEquipos;
                    item.EquiposProyectoUnico = item.NombreEquiposUnico;
                }
            }

            #endregion

        }

        public int GetVersionSegunAmbiente(FtExtEnvioDTO reg, int ambiente)
        {
            if (ambiente == ConstantesFichaTecnica.INTRANET)
            {
                return reg.EsEditableIntranet ? reg.FtevercodiTemporalIntranet : reg.FtevercodiOficial;
            }
            else
            {
                return reg.EsEditableExtranet ? reg.FtevercodiTemporalExtranet : reg.FtevercodiOficial;
            }
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO
        /// </summary>
        public List<FtExtEnvioDTO> ListFtExtEnvios()
        {
            return FactorySic.GetFtExtEnvioRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvio
        /// </summary>
        public List<FtExtEnvioDTO> GetByCriteriaFtExtEnvios()
        {
            return FactorySic.GetFtExtEnvioRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_FORMATO

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_FORMATO
        /// </summary>
        public void SaveFtExtFormato(FtExtFormatoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtFormatoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta transaccionalmente un registro de la tabla  FT_EXT_FORMATO
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public int SaveFtExtFormatoTransaccional(FtExtFormatoDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                return FactorySic.GetFtExtFormatoRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_FORMATO
        /// </summary>
        public void UpdateFtExtFormato(FtExtFormatoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtFormatoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_FORMATO
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void UpdateFtExtFormatoTransaccional(FtExtFormatoDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtFormatoRepository().Update(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_FORMATO
        /// </summary>
        public void DeleteFtExtFormato(int ftfmtcodi)
        {
            try
            {
                FactorySic.GetFtExtFormatoRepository().Delete(ftfmtcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_FORMATO
        /// </summary>
        public FtExtFormatoDTO GetByIdFtExtFormato(int ftfmtcodi)
        {
            return FactorySic.GetFtExtFormatoRepository().GetById(ftfmtcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_FORMATO
        /// </summary>
        public List<FtExtFormatoDTO> ListFtExtFormatos()
        {
            return FactorySic.GetFtExtFormatoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtFormato
        /// </summary>
        public List<FtExtFormatoDTO> GetByCriteriaFtExtFormatos()
        {
            return FactorySic.GetFtExtFormatoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ITEMCFG

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ITEMCFG
        /// </summary>
        public void SaveFtExtItemcfg(FtExtItemcfgDTO entity)
        {
            try
            {
                FactorySic.GetFtExtItemcfgRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta transaccionalmente un registro de la tabla  FT_EXT_ITEMCFG
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public int SaveFtExtItemcfgTransaccional(FtExtItemcfgDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                return FactorySic.GetFtExtItemcfgRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ITEMCFG
        /// </summary>
        public void UpdateFtExtItemcfg(FtExtItemcfgDTO entity)
        {
            try
            {
                FactorySic.GetFtExtItemcfgRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ITEMCFG
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void UpdateFtExtItemcfgTransaccional(FtExtItemcfgDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtItemcfgRepository().Update(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ITEMCFG
        /// </summary>
        public void DeleteFtExtItemcfg(int fitcfgcodi)
        {
            try
            {
                FactorySic.GetFtExtItemcfgRepository().Delete(fitcfgcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ITEMCFG
        /// </summary>
        /// <param name="fitcfgcodi"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void DeleteFtExtItemcfgTransaccional(int fitcfgcodi, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtItemcfgRepository().Delete(fitcfgcodi, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ITEMCFG
        /// </summary>
        public FtExtItemcfgDTO GetByIdFtExtItemcfg(int fitcfgcodi)
        {
            return FactorySic.GetFtExtItemcfgRepository().GetById(fitcfgcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ITEMCFG
        /// </summary>
        public List<FtExtItemcfgDTO> ListFtExtItemcfgs()
        {
            return FactorySic.GetFtExtItemcfgRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtItemcfg
        /// </summary>
        public List<FtExtItemcfgDTO> GetByCriteriaFtExtItemcfgs()
        {
            return FactorySic.GetFtExtItemcfgRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_EVENTO

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_EVENTO
        /// </summary>
        public int SaveFtExtEvento(FtExtEventoDTO entity)
        {
            int result = -1;
            try
            {
                result = FactorySic.GetFtExtEventoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }

            return result;
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_EVENTO
        /// </summary>
        public void UpdateFtExtEvento(FtExtEventoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEventoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_EVENTO
        /// </summary>
        public void DeleteFtExtEvento(int ftevcodi)
        {
            try
            {
                FactorySic.GetFtExtEventoRepository().Delete(ftevcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_EVENTO
        /// </summary>
        public FtExtEventoDTO GetByIdFtExtEvento(int ftevcodi)
        {
            return FactorySic.GetFtExtEventoRepository().GetById(ftevcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_EVENTO
        /// </summary>
        public List<FtExtEventoDTO> ListFtExtEventos()
        {
            return FactorySic.GetFtExtEventoRepository().List();
        }

        public void DarBajaEvento(int ftprycodi, string usuario)
        {
            try
            {
                FtExtEventoDTO evt = GetByIdFtExtEvento(ftprycodi);
                evt.Ftevestado = ConstantesFichaTecnica.EstadoStrEliminado;
                evt.Ftevusumodificacion = usuario;
                evt.Ftevfecmodificacion = DateTime.Now;
                UpdateFtExtEvento(evt);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }


        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEvento
        /// </summary>
        public List<FtExtEventoDTO> GetByCriteriaFtExtEventos()
        {
            var lista = FactorySic.GetFtExtEventoRepository().GetByCriteria().Where(x => x.Ftevcodi != ConstantesFichaTecnica.EventoBajaMO).OrderByDescending(x => x.Ftevcodi).ToList();

            var objVigente = lista.FirstOrDefault(x => x.Ftevfecvigenciaext <= DateTime.Today);
            if (objVigente != null) objVigente.EsVigente = true;

            foreach (var obj in lista)
                FormatearCbFicha(obj);

            return lista;
        }

        private void FormatearCbFicha(FtExtEventoDTO reg)
        {
            reg.FtevfecvigenciaextDesc = reg.Ftevfecvigenciaext.ToString(ConstantesAppServicio.FormatoFecha);

            reg.FtevfeccreacionDesc = reg.Ftevfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
            reg.Ftevusumodificacion = reg.Ftevusumodificacion ?? "";
            reg.FtevfecmodificacionDesc = reg.Ftevfecmodificacion != null ? reg.Ftevfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";

            reg.UltimaModificacionUsuarioDesc = reg.Ftevusumodificacion != null ? reg.Ftevusumodificacion : reg.Ftevusucreacion;
            reg.UltimaModificacionFechaDesc = reg.Ftevfecmodificacion != null ? reg.Ftevfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Ftevfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);

            reg.Ftevusumodificacionasig = reg.Ftevusumodificacionasig ?? string.Empty;
            reg.FtevfecmodificacionasigDesc = reg.Ftevfecmodificacionasig != null ? reg.Ftevfecmodificacionasig.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;

            reg.EstadoActual = "Vigente";
            if (!reg.EsVigente)
            {
                reg.EstadoActual = reg.Ftevfecvigenciaext < DateTime.Today ? "Baja" : "En Proyecto";
            }
            if (reg.Ftevestado == ConstantesFichaTecnica.EstadoStrEliminado)
            {
                reg.EstadoActual = "Eliminado";
            }
        }


        #endregion

        #region Métodos Tabla FT_EXT_EVENTO_REQ

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_EVENTO_REQ
        /// </summary>
        public void SaveFtExtEventoReq(FtExtEventoReqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEventoReqRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_EVENTO_REQ
        /// </summary>
        public void UpdateFtExtEventoReq(FtExtEventoReqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEventoReqRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_EVENTO_REQ
        /// </summary>
        public void DeleteFtExtEventoReq(int fevrqcodi)
        {
            try
            {
                FactorySic.GetFtExtEventoReqRepository().Delete(fevrqcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_EVENTO_REQ
        /// </summary>
        public FtExtEventoReqDTO GetByIdFtExtEventoReq(int fevrqcodi)
        {
            return FactorySic.GetFtExtEventoReqRepository().GetById(fevrqcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_EVENTO_REQ
        /// </summary>
        public List<FtExtEventoReqDTO> ListFtExtEventoReqs()
        {
            return FactorySic.GetFtExtEventoReqRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEventoReq
        /// </summary>
        public List<FtExtEventoReqDTO> GetByCriteriaFtExtEventoReqs()
        {
            return FactorySic.GetFtExtEventoReqRepository().GetByCriteria();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEventoReq para un FTExtevento seleccionado, con estado Activo (A)
        /// </summary>
        public List<FtExtEventoReqDTO> GetByCriteriaFtExtEventoReqsxIdFTExtEvento(int ftevcodi)
        {
            var lista = FactorySic.GetFtExtEventoReqRepository().GetByCriteria().Where(x => x.Ftevcodi == ftevcodi && x.Fevrqestado == ConstantesFichaTecnica.EstadoStrActivo).OrderBy(x => x.Fevrqcodi).ToList();

            foreach (var reg in lista)
            {
                FormatearFtExtEventoReq(reg);
            }

            return lista;
        }

        private void FormatearFtExtEventoReq(FtExtEventoReqDTO reg)
        {
            reg.Fevrqliteral = reg.Fevrqliteral ?? "";
        }

        #endregion

        #region Métodos Tabla FT_EXT_RELEQEMPLT

        /// <summary>
        /// Devuelve el listado de empresas copropietarias de cierto equipo
        /// </summary>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public List<FtExtReleqempltDTO> ObtenerListadoEmpresasCopropietarias(string strEquicodis)
        {
            List<FtExtReleqempltDTO> lstSalida = new List<FtExtReleqempltDTO>();

            lstSalida = FactorySic.GetFtExtReleqempltRepository().ListarPorEquipo(strEquicodis);

            foreach (var item in lstSalida)
            {
                item.FtreqeestadoDesc = item.Ftreqeestado == 1 ? "Activo" : (item.Ftreqeestado == 0 ? "Baja" : "");
                item.FechaCreacionDesc = item.Ftreqefeccreacion != null ? item.Ftreqefeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                item.FechaModificacionDesc = item.Ftreqefecmodificacion != null ? item.Ftreqefecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            }

            return lstSalida;
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_RELEQEMPLT
        /// </summary>
        public void SaveFtExtReleqemplt(FtExtReleqempltDTO entity)
        {
            try
            {
                FactorySic.GetFtExtReleqempltRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_RELEQEMPLT
        /// </summary>
        public void UpdateFtExtReleqemplt(FtExtReleqempltDTO entity)
        {
            try
            {
                FactorySic.GetFtExtReleqempltRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_RELEQEMPLT
        /// </summary>
        public void DeleteFtExtReleqemplt(int ftreqecodi)
        {
            try
            {
                FactorySic.GetFtExtReleqempltRepository().Delete(ftreqecodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_RELEQEMPLT
        /// </summary>
        public FtExtReleqempltDTO GetByIdFtExtReleqemplt(int ftreqecodi)
        {
            FtExtReleqempltDTO obj = FactorySic.GetFtExtReleqempltRepository().GetById(ftreqecodi);
            obj.FechaCreacionDesc = obj.Ftreqefeccreacion != null ? obj.Ftreqefeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            obj.FechaModificacionDesc = obj.Ftreqefecmodificacion != null ? obj.Ftreqefecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            obj.FtreqeestadoDesc = obj.Ftreqeestado != null ? (obj.Ftreqeestado == 1 ? "Activo" : (obj.Ftreqeestado == 0 ? "Baja" : "")) : "";


            return obj;
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_RELEQEMPLT
        /// </summary>
        public List<FtExtReleqempltDTO> ListFtExtReleqemplts()
        {
            return FactorySic.GetFtExtReleqempltRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtReleqemplt
        /// </summary>
        public List<FtExtReleqempltDTO> GetByCriteriaFtExtReleqemplts()
        {
            return FactorySic.GetFtExtReleqempltRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_RELEQPRY
        /// <summary>
        /// Devuelve el listado de proyectos asociados a un equipo
        /// </summary>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public List<FtExtReleqpryDTO> ObtenerListadoProyectosPorEquipo(int equicodi)
        {
            List<FtExtReleqpryDTO> lstSalida = new List<FtExtReleqpryDTO>();

            lstSalida = FactorySic.GetFtExtReleqpryRepository().ListarPorEquipo(equicodi);

            foreach (var item in lstSalida)
            {
                item.FtreqpestadoDesc = item.Ftreqpestado == 1 ? "Activo" : (item.Ftreqpestado == 0 ? "Baja" : "");
                item.FechaCreacionDesc = item.Ftreqpfeccreacion != null ? item.Ftreqpfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                item.FechaModificacionDesc = item.Ftreqpfecmodificacion != null ? item.Ftreqpfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de proyectos asociados a un grupo
        /// </summary>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public List<FtExtReleqpryDTO> ObtenerListadoProyectosPorGrupo(int grupocodi)
        {
            List<FtExtReleqpryDTO> lstSalida = new List<FtExtReleqpryDTO>();

            lstSalida = FactorySic.GetFtExtReleqpryRepository().ListarPorGrupo(grupocodi);

            foreach (var item in lstSalida)
            {
                item.FtreqpestadoDesc = item.Ftreqpestado == 1 ? "Activo" : (item.Ftreqpestado == 0 ? "Baja" : "");
                item.FechaCreacionDesc = item.Ftreqpfeccreacion != null ? item.Ftreqpfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                item.FechaModificacionDesc = item.Ftreqpfecmodificacion != null ? item.Ftreqpfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            }

            return lstSalida;
        }


        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_RELEQPRY
        /// </summary>
        public void SaveFtExtReleqpry(FtExtReleqpryDTO entity)
        {
            try
            {
                FactorySic.GetFtExtReleqpryRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_RELEQPRY
        /// </summary>
        public void UpdateFtExtReleqpry(FtExtReleqpryDTO entity)
        {
            try
            {
                FactorySic.GetFtExtReleqpryRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_RELEQPRY
        /// </summary>
        public void DeleteFtExtReleqpry(int ftreqpcodi)
        {
            try
            {
                FactorySic.GetFtExtReleqpryRepository().Delete(ftreqpcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_RELEQPRY
        /// </summary>
        public FtExtReleqpryDTO GetByIdFtExtReleqpry(int ftreqpcodi)
        {
            FtExtReleqpryDTO obj = FactorySic.GetFtExtReleqpryRepository().GetById(ftreqpcodi);
            obj.FechaCreacionDesc = obj.Ftreqpfeccreacion != null ? obj.Ftreqpfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            obj.FechaModificacionDesc = obj.Ftreqpfecmodificacion != null ? obj.Ftreqpfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            obj.FtreqpestadoDesc = obj.Ftreqpestado != null ? (obj.Ftreqpestado == 1 ? "Activo" : (obj.Ftreqpestado == 0 ? "Baja" : "")) : "";

            return obj;
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_RELEQPRY
        /// </summary>
        public List<FtExtReleqpryDTO> ListFtExtReleqprys()
        {
            return FactorySic.GetFtExtReleqpryRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtReleqpry
        /// </summary>
        public List<FtExtReleqpryDTO> GetByCriteriaFtExtReleqprys()
        {
            return FactorySic.GetFtExtReleqpryRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_RELEMPETAPA

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_RELEMPETAPA
        /// </summary>
        public void SaveFtExtRelempetapa(FtExtRelempetapaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtRelempetapaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta transaccionalmente un registro de la tabla FT_EXT_RELEMPETAPA
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public int SaveFtExtRelempetapaTransaccional(FtExtRelempetapaDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                return FactorySic.GetFtExtRelempetapaRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_RELEMPETAPA
        /// </summary>
        public void UpdateFtExtRelempetapa(FtExtRelempetapaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtRelempetapaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_RELEMPETAPA
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void UpdateFtExtRelempetapaTransaccional(FtExtRelempetapaDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtRelempetapaRepository().Update(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_RELEMPETAPA
        /// </summary>
        public void DeleteFtExtRelempetapa(int fetempcodi)
        {
            try
            {
                FactorySic.GetFtExtRelempetapaRepository().Delete(fetempcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_RELEMPETAPA
        /// </summary>
        public FtExtRelempetapaDTO GetByIdFtExtRelempetapa(int fetempcodi)
        {
            return FactorySic.GetFtExtRelempetapaRepository().GetById(fetempcodi);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_RELEMPETAPA
        /// </summary>
        public FtExtRelempetapaDTO GetByEmpresaYEtapaFtExtRelempetapa(int emprcodi, int ftetcodi)
        {
            return FactorySic.GetFtExtRelempetapaRepository().GetByCriteriaProyAsigByFiltros(emprcodi.ToString(), ftetcodi).Find(x => x.Fetempestado == ConstantesFichaTecnica.EstadoStrActivo);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_RELEMPETAPA
        /// </summary>
        public List<FtExtRelempetapaDTO> ListFtExtRelempetapas()
        {
            return FactorySic.GetFtExtRelempetapaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtRelempetapa
        /// </summary>
        public List<FtExtRelempetapaDTO> GetByCriteriaFtExtRelempetapas()
        {
            return FactorySic.GetFtExtRelempetapaRepository().GetByCriteria();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtRelempetapa 
        /// </summary>
        public List<FtExtRelempetapaDTO> ListarProyectosAsignadosByFiltros(string sEmpresa, int idetapa)
        {
            return FactorySic.GetFtExtRelempetapaRepository().GetByCriteriaProyAsigByFiltros(sEmpresa, idetapa);
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELREVARCHIVO

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELREVARCHIVO
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void SaveFtExtEnvioRelrevarchivo(FtExtEnvioRelrevarchivoDTO entity, IDbConnection conn, DbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevarchivoRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELREVARCHIVO
        /// </summary>
        public void SaveFtExtEnvioRelrevarchivo(FtExtEnvioRelrevarchivoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevarchivoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELREVARCHIVO
        /// </summary>
        public void UpdateFtExtEnvioRelrevarchivo(FtExtEnvioRelrevarchivoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevarchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELREVARCHIVO
        /// </summary>
        public void DeleteFtExtEnvioRelrevarchivo(int ftrrvacodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevarchivoRepository().Delete(ftrrvacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELREVARCHIVO
        /// </summary>
        public FtExtEnvioRelrevarchivoDTO GetByIdFtExtEnvioRelrevarchivo(int ftrrvacodi)
        {
            return FactorySic.GetFtExtEnvioRelrevarchivoRepository().GetById(ftrrvacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELREVARCHIVO
        /// </summary>
        public List<FtExtEnvioRelrevarchivoDTO> ListFtExtEnvioRelrevarchivos()
        {
            return FactorySic.GetFtExtEnvioRelrevarchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioRelrevarchivo
        /// </summary>
        public List<FtExtEnvioRelrevarchivoDTO> GetByCriteriaFtExtEnvioRelrevarchivos()
        {
            return FactorySic.GetFtExtEnvioRelrevarchivoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ETEMPDETPRY

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ETEMPDETPRY
        /// </summary>
        public void SaveFtExtEtempdetpry(FtExtEtempdetpryDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEtempdetpryRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta transaccionalmente un registro de la tabla FT_EXT_ETEMPDETPRY
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public int SaveFtExtEtempdetpryTransaccional(FtExtEtempdetpryDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                return FactorySic.GetFtExtEtempdetpryRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ETEMPDETPRY
        /// </summary>
        public void UpdateFtExtEtempdetpry(FtExtEtempdetpryDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEtempdetpryRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ETEMPDETPRY
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void UpdateFtExtEtempdetpryTransaccional(FtExtEtempdetpryDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEtempdetpryRepository().Update(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ETEMPDETPRY
        /// </summary>
        public void DeleteFtExtEtempdetpry(int feeprycodi)
        {
            try
            {
                FactorySic.GetFtExtEtempdetpryRepository().Delete(feeprycodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ETEMPDETPRY
        /// </summary>
        public FtExtEtempdetpryDTO GetByIdFtExtEtempdetpry(int feeprycodi)
        {
            return FactorySic.GetFtExtEtempdetpryRepository().GetById(feeprycodi);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ETEMPDETPRY
        /// </summary>
        public FtExtEtempdetpryDTO GetByEmpresaEtapaProyectoFtExtEtempdetpry(int emprcodi, int ftetcodi, int ftprycodi)
        {
            return FactorySic.GetFtExtEtempdetpryRepository().GetByEmpresaEtapaProyecto(emprcodi, ftetcodi, ftprycodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ETEMPDETPRY
        /// </summary>
        public List<FtExtEtempdetpryDTO> ListFtExtEtempdetprys()
        {
            return FactorySic.GetFtExtEtempdetpryRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEtempdetpry
        /// </summary>
        public List<FtExtEtempdetpryDTO> GetByCriteriaFtExtEtempdetprys()
        {
            return FactorySic.GetFtExtEtempdetpryRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ETEMPDETPRYEQ

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ETEMPDETPRYEQ
        /// </summary>
        public void SaveFtExtEtempdetpryeq(FtExtEtempdetpryeqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEtempdetpryeqRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta transaccionalmente un registro de la tabla FT_EXT_ETEMPDETPRYEQ
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public int SaveFtExtEtempdetpryeqTransaccional(FtExtEtempdetpryeqDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                return FactorySic.GetFtExtEtempdetpryeqRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ETEMPDETPRYEQ
        /// </summary>
        public void UpdateFtExtEtempdetpryeq(FtExtEtempdetpryeqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEtempdetpryeqRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ETEMPDETPRYEQ
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void UpdateFtExtEtempdetpryeqTransaccional(FtExtEtempdetpryeqDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEtempdetpryeqRepository().Update(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ETEMPDETPRYEQ
        /// </summary>
        public void DeleteFtExtEtempdetpryeq(int feepeqcodi)
        {
            try
            {
                FactorySic.GetFtExtEtempdetpryeqRepository().Delete(feepeqcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ETEMPDETPRYEQ
        /// </summary>
        public FtExtEtempdetpryeqDTO GetByIdFtExtEtempdetpryeq(int feepeqcodi)
        {
            return FactorySic.GetFtExtEtempdetpryeqRepository().GetById(feepeqcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ETEMPDETPRYEQ
        /// </summary>
        public List<FtExtEtempdetpryeqDTO> ListFtExtEtempdetpryeqs()
        {
            return FactorySic.GetFtExtEtempdetpryeqRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEtempdetpryeq
        /// </summary>
        public List<FtExtEtempdetpryeqDTO> GetByCriteriaFtExtEtempdetpryeqs()
        {
            return FactorySic.GetFtExtEtempdetpryeqRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ETEMPDETEQ

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ETEMPDETEQ
        /// </summary>
        public void SaveFtExtEtempdeteq(FtExtEtempdeteqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEtempdeteqRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta transaccionalmente un registro de la tabla FT_EXT_ETEMPDETEQ
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public int SaveFtExtEtempdeteqTransaccional(FtExtEtempdeteqDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                return FactorySic.GetFtExtEtempdeteqRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ETEMPDETEQ
        /// </summary>
        public void UpdateFtExtEtempdeteq(FtExtEtempdeteqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEtempdeteqRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ETEMPDETEQ
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="transaction"></param>
        public void UpdateFtExtEtempdeteqTransaccional(FtExtEtempdeteqDTO entity, IDbConnection conn, IDbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEtempdeteqRepository().Update(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ETEMPDETEQ
        /// </summary>
        public void DeleteFtExtEtempdeteq(int feeeqcodi)
        {
            try
            {
                FactorySic.GetFtExtEtempdeteqRepository().Delete(feeeqcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ETEMPDETEQ
        /// </summary>
        public FtExtEtempdeteqDTO GetByIdFtExtEtempdeteq(int feeeqcodi)
        {
            FtExtEtempdeteqDTO obj = FactorySic.GetFtExtEtempdeteqRepository().GetById(feeeqcodi);
            obj.FechaCreacionDesc = obj.Feeeqfeccreacion != null ? obj.Feeeqfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            obj.FechaModificacionDesc = obj.Feeeqfecmodificacion != null ? obj.Feeeqfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";

            return obj;
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ETEMPDETEQ
        /// </summary>
        public List<FtExtEtempdeteqDTO> ListFtExtEtempdeteqs()
        {
            return FactorySic.GetFtExtEtempdeteqRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEtempdeteq
        /// </summary>
        public List<FtExtEtempdeteqDTO> GetByCriteriaFtExtEtempdeteqs()
        {
            return FactorySic.GetFtExtEtempdeteqRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_RELPLTCORRETAPA

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_RELPLTCORRETAPA
        /// </summary>
        public void SaveFtExtRelpltcorretapa(FtExtRelpltcorretapaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtRelpltcorretapaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_RELPLTCORRETAPA
        /// </summary>
        public void UpdateFtExtRelpltcorretapa(FtExtRelpltcorretapaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtRelpltcorretapaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_RELPLTCORRETAPA
        /// </summary>
        public void DeleteFtExtRelpltcorretapa(int fcoretcodi)
        {
            try
            {
                FactorySic.GetFtExtRelpltcorretapaRepository().Delete(fcoretcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_RELPLTCORRETAPA
        /// </summary>
        public FtExtRelpltcorretapaDTO GetByIdFtExtRelpltcorretapa(int fcoretcodi)
        {
            return FactorySic.GetFtExtRelpltcorretapaRepository().GetById(fcoretcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_RELPLTCORRETAPA
        /// </summary>
        public List<FtExtRelpltcorretapaDTO> ListFtExtRelpltcorretapas()
        {
            return FactorySic.GetFtExtRelpltcorretapaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtRelpltcorretapa
        /// </summary>
        public List<FtExtRelpltcorretapaDTO> GetByCriteriaFtExtRelpltcorretapas(int tpcorrcodi, int ftetcodi)
        {
            return FactorySic.GetFtExtRelpltcorretapaRepository().GetByCriteria(tpcorrcodi, ftetcodi);
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_ARCHIVO

        /// <summary>
        /// Devuelve los archivos de revison de las areas de cierta version 
        /// </summary>
        /// <param name="ftvercodis"></param>
        /// <returns></returns>
        public List<FtExtEnvioArchivoDTO> ListFtExtEnvioArchivosByVersionAreas(string ftvercodis)
        {
            return FactorySic.GetFtExtEnvioArchivoRepository().ListByVersionAreas(ftvercodis);
        }

        public List<FtExtEnvioArchivoDTO> ListFtExtEnvioArchivosByVersionAreaYEquipo(int ftvercodi, int faremcodi, int fteeqcodi)
        {
            List<FtExtEnvioArchivoDTO> lista = FactorySic.GetFtExtEnvioArchivoRepository().ListarRelacionesPorVersionAreaYEquipo(ftvercodi, faremcodi, fteeqcodi);
            return lista;
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public void SaveFtExtEnvioArchivo(FtExtEnvioArchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioArchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public void UpdateFtExtEnvioArchivo(FtExtEnvioArchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioArchivoRepository().Update(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public void DeleteFtExtEnvioArchivo(int ftearccodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioArchivoRepository().Delete(ftearccodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void DeleteFtExtEnvioArchivoPorIds(string ftearccodis, IDbConnection conn, DbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEnvioArchivoRepository().DeletePorIds(ftearccodis, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public FtExtEnvioArchivoDTO GetByIdFtExtEnvioArchivo(int ftearccodi)
        {
            return FactorySic.GetFtExtEnvioArchivoRepository().GetById(ftearccodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public List<FtExtEnvioArchivoDTO> ListFtExtEnvioArchivos()
        {
            return FactorySic.GetFtExtEnvioArchivoRepository().List();
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public List<FtExtEnvioArchivoDTO> ListByVersionYReqFtExtEnvioArchivos(int ftevercodi)
        {
            return FactorySic.GetFtExtEnvioArchivoRepository().ListByVersionYReq(ftevercodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public List<FtExtEnvioArchivoDTO> ListByVersionYEqFtExtEnvioArchivos(int ftevercodi)
        {
            return FactorySic.GetFtExtEnvioArchivoRepository().ListByVersionYEq(ftevercodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public List<FtExtEnvioArchivoDTO> ListByVersionYDatoFtExtEnvioArchivos(int ftevercodi)
        {
            return FactorySic.GetFtExtEnvioArchivoRepository().ListByVersionYDato(ftevercodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_ARCHIVO
        /// </summary>
        public List<FtExtEnvioArchivoDTO> ListByRevisionFtExtEnvioArchivos(string strFtrevcodis)
        {
            if (string.IsNullOrEmpty(strFtrevcodis)) return new List<FtExtEnvioArchivoDTO>();

            return FactorySic.GetFtExtEnvioArchivoRepository().ListByRevision(strFtrevcodis);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioArchivo
        /// </summary>
        public List<FtExtEnvioArchivoDTO> GetByCriteriaFtExtEnvioArchivos()
        {
            return FactorySic.GetFtExtEnvioArchivoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_DATO

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_DATO
        /// </summary>
        public int SaveFtExtEnvioDato(FtExtEnvioDatoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetFtExtEnvioDatoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_DATO
        /// </summary>
        public void UpdateFtExtEnvioDato(FtExtEnvioDatoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioDatoRepository().Update(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_DATO
        /// </summary>
        public void DeleteFtExtEnvioDato(int ftedatcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioDatoRepository().Delete(ftedatcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioDato
        /// </summary>
        public List<FtExtEnvioDatoDTO> GetByCriteriaFtExtEnvioDatos(string fteeqcodis)
        {
            if (string.IsNullOrEmpty(fteeqcodis))
                return new List<FtExtEnvioDatoDTO>();

            var lista = FactorySic.GetFtExtEnvioDatoRepository().GetByCriteria(fteeqcodis);
            foreach (var item in lista)
            {
                FormatearFtExtEnvioDato(item);
            }
            return lista;
        }

        public List<FtExtEnvioDatoDTO> ListarParametrosFtExtEnvioDatos(string fteeqcodis)
        {
            if (string.IsNullOrEmpty(fteeqcodis))
                return new List<FtExtEnvioDatoDTO>();

            var lista = FactorySic.GetFtExtEnvioDatoRepository().ListarParametros(fteeqcodis);
            foreach (var item in lista)
            {
                FormatearFtExtEnvioDato(item);
            }
            return lista;
        }

        private void FormatearFtExtEnvioDato(FtExtEnvioDatoDTO reg)
        {
            reg.EsFilaEditableExtranet = reg.Ftedatflageditable == "S";
            reg.EsFilaRevisableIntranet = reg.Ftedatflagrevisable == "S";
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_EQ

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_EQ
        /// </summary>
        public int SaveFtExtEnvioEq(FtExtEnvioEqDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetFtExtEnvioEqRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_EQ
        /// </summary>
        public void UpdateFtExtEnvioEq(FtExtEnvioEqDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioEqRepository().Update(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_EQ
        /// </summary>
        public void UpdateFtExtEnvioEqXEstado(string fteeqcodis, string estado, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                if (!string.IsNullOrEmpty(fteeqcodis))
                    FactorySic.GetFtExtEnvioEqRepository().UpdateEstado(fteeqcodis, estado, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_EQ
        /// </summary>
        public void DeleteFtExtEnvioEq(int fteeqcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioEqRepository().Delete(fteeqcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_EQ
        /// </summary>
        public FtExtEnvioEqDTO GetByIdFtExtEnvioEq(int fteeqcodi)
        {
            var regEq = FactorySic.GetFtExtEnvioEqRepository().GetById(fteeqcodi);
            if (regEq != null)
            {
                FormatearFtExtEnvioEq(regEq);
            }
            return regEq;
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_EQ
        /// </summary>
        public List<FtExtEnvioEqDTO> ListFtExtEnvioEqs()
        {
            return FactorySic.GetFtExtEnvioEqRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioEq
        /// </summary>
        public List<FtExtEnvioEqDTO> GetByCriteriaFtExtEnvioEqs(string ftevercodis)
        {
            var lista = FactorySic.GetFtExtEnvioEqRepository().GetByCriteria(ftevercodis, "S");
            foreach (var regEq in lista)
            {
                FormatearFtExtEnvioEq(regEq);
            }
            return lista;
        }

        private List<FtExtEnvioEqDTO> GetByCriteriaFtExtEnvioEqsTodoEstado(string ftevercodis)
        {
            var lista = FactorySic.GetFtExtEnvioEqRepository().GetByCriteria(ftevercodis, "-1");
            foreach (var regEq in lista)
            {
                FormatearFtExtEnvioEq(regEq);
            }
            return lista;
        }

        public List<FtExtEnvioEqDTO> GetByCriteriaFtExtEnvioEqsXId(string fteeqcodis)
        {
            if (string.IsNullOrEmpty(fteeqcodis)) return new List<FtExtEnvioEqDTO>();

            var lista = FactorySic.GetFtExtEnvioEqRepository().ListarPorIds(fteeqcodis);
            foreach (var regEq in lista)
            {
                FormatearFtExtEnvioEq(regEq);
            }
            return lista;
        }

        private void FormatearFtExtEnvioEq(FtExtEnvioEqDTO regEq)
        {
            regEq.TipoYCodigo = regEq.Equicodi != null ? "E" + regEq.Equicodi.Value.ToString() : "G" + regEq.Grupocodi.Value.ToString();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_LOG

        public void SaveFtExtEnvioLog(FtExtEnvioLogDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioLogRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_LOG
        /// </summary>
        public void SaveFtExtEnvioLog(FtExtEnvioLogDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioLogRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_LOG
        /// </summary>
        public void UpdateFtExtEnvioLog(FtExtEnvioLogDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioLogRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_LOG
        /// </summary>
        public void DeleteFtExtEnvioLog(int ftelogcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioLogRepository().Delete(ftelogcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_LOG
        /// </summary>
        public FtExtEnvioLogDTO GetByIdFtExtEnvioLog(int ftelogcodi)
        {
            return FactorySic.GetFtExtEnvioLogRepository().GetById(ftelogcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_LOG
        /// </summary>
        public List<FtExtEnvioLogDTO> ListFtExtEnvioLogs()
        {
            return FactorySic.GetFtExtEnvioLogRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioLog
        /// </summary>
        public List<FtExtEnvioLogDTO> GetByCriteriaFtExtEnvioLogs(int ftenvcodi)
        {
            return FactorySic.GetFtExtEnvioLogRepository().GetByCriteria(ftenvcodi);
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELDATOARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELDATOARCHIVO
        /// </summary>
        public void SaveFtExtEnvioReldatoarchivo(FtExtEnvioReldatoarchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatoarchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELDATOARCHIVO
        /// </summary>
        public void UpdateFtExtEnvioReldatoarchivo(FtExtEnvioReldatoarchivoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatoarchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELDATOARCHIVO
        /// </summary>
        public void DeleteFtExtEnvioReldatoarchivo(int fterdacodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatoarchivoRepository().Delete(fterdacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELDATOARCHIVO
        /// </summary>
        public FtExtEnvioReldatoarchivoDTO GetByIdFtExtEnvioReldatoarchivo(int fterdacodi)
        {
            return FactorySic.GetFtExtEnvioReldatoarchivoRepository().GetById(fterdacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELDATOARCHIVO
        /// </summary>
        public List<FtExtEnvioReldatoarchivoDTO> ListFtExtEnvioReldatoarchivos()
        {
            return FactorySic.GetFtExtEnvioReldatoarchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioReldatoarchivo
        /// </summary>
        public List<FtExtEnvioReldatoarchivoDTO> GetByCriteriaFtExtEnvioReldatoarchivos()
        {
            return FactorySic.GetFtExtEnvioReldatoarchivoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELREQARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELREQARCHIVO
        /// </summary>
        public void SaveFtExtEnvioRelreqarchivo(FtExtEnvioRelreqarchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqarchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELREQARCHIVO
        /// </summary>
        public void UpdateFtExtEnvioRelreqarchivo(FtExtEnvioRelreqarchivoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqarchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELREQARCHIVO
        /// </summary>
        public void DeleteFtExtEnvioRelreqarchivo(int fterracodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqarchivoRepository().Delete(fterracodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELREQARCHIVO
        /// </summary>
        public FtExtEnvioRelreqarchivoDTO GetByIdFtExtEnvioRelreqarchivo(int fterracodi)
        {
            return FactorySic.GetFtExtEnvioRelreqarchivoRepository().GetById(fterracodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELREQARCHIVO
        /// </summary>
        public List<FtExtEnvioRelreqarchivoDTO> ListFtExtEnvioRelreqarchivos()
        {
            return FactorySic.GetFtExtEnvioRelreqarchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioRelreqarchivo
        /// </summary>
        public List<FtExtEnvioRelreqarchivoDTO> GetByCriteriaFtExtEnvioRelreqarchivos()
        {
            return FactorySic.GetFtExtEnvioRelreqarchivoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_REQ

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_REQ
        /// </summary>
        public void SaveFtExtEnvioReq(FtExtEnvioReqDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioReqRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_REQ
        /// </summary>
        public void UpdateFtExtEnvioReq(FtExtEnvioReqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioReqRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_REQ
        /// </summary>
        public void DeleteFtExtEnvioReq(int ftereqcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioReqRepository().Delete(ftereqcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_REQ
        /// </summary>
        public FtExtEnvioReqDTO GetByIdFtExtEnvioReq(int ftereqcodi)
        {
            return FactorySic.GetFtExtEnvioReqRepository().GetById(ftereqcodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioReq
        /// </summary>
        public List<FtExtEnvioReqDTO> ListByVersionesFtExtEnvioReqs(int version)
        {
            var lista = FactorySic.GetFtExtEnvioReqRepository().GetListByVersiones(version.ToString());

            foreach (var reg in lista)
            {
                FormatearFtExtEnvioReq(reg);
            }

            return lista;
        }

        private void FormatearFtExtEnvioReq(FtExtEnvioReqDTO reg)
        {
            reg.EsObligatorioArchivo = reg.Ftereqflagarchivo == 1;
            reg.EsFilaEditableExtranet = reg.Ftereqflageditable == "S";
            reg.EsFilaRevisableIntranet = reg.Ftereqflagrevisable == "S";
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_VERSION

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_VERSION
        /// </summary>
        public int SaveFtExtEnvioVersion(FtExtEnvioVersionDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetFtExtEnvioVersionRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_VERSION
        /// </summary>
        public void UpdateFtExtEnvioVersion(FtExtEnvioVersionDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioVersionRepository().Update(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_VERSION
        /// </summary>
        public void UpdateListaFtExtEnvioVersionXEnvio(int ftenvcodiOrigen, int ftenvcodiDestino, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioVersionRepository().UpdateListaVersion(ftenvcodiOrigen, ftenvcodiDestino, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_VERSION
        /// </summary>
        public void DeleteFtExtEnvioVersion(int ftevercodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioVersionRepository().Delete(ftevercodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_VERSION
        /// </summary>
        public FtExtEnvioVersionDTO GetByIdFtExtEnvioVersion(int ftevercodi)
        {
            return FactorySic.GetFtExtEnvioVersionRepository().GetById(ftevercodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_VERSION
        /// </summary>
        public List<FtExtEnvioVersionDTO> ListFtExtEnvioVersions()
        {
            return FactorySic.GetFtExtEnvioVersionRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioVersion
        /// </summary>
        public List<FtExtEnvioVersionDTO> GetByCriteriaFtExtEnvioVersions(string ftenvcodis)
        {
            if (ftenvcodis != "0" && ftenvcodis != "")
            {
                var lista = FactorySic.GetFtExtEnvioVersionRepository().GetByCriteria(ftenvcodis, "-1")
                    .OrderByDescending(x => x.Ftevercodi).ToList();
                foreach (var reg in lista)
                    FormatearFtExtEnvioVersio(reg);

                return lista;
            }
            return new List<FtExtEnvioVersionDTO>();
        }

        private void FormatearFtExtEnvioVersio(FtExtEnvioVersionDTO obj)
        {
            obj.FteverfeccreacionDesc = obj.Fteverfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);
            obj.FteveroperacionDesc = obj.Fteveroperacion == ConstantesFichaTecnica.OperacionExistosa ? "Exitosa" : (obj.Fteveroperacion == ConstantesFichaTecnica.OperacionConError ? "Con Error" : "");
            obj.RealizadoPor = obj.Fteverautoguardado == ConstantesFichaTecnica.RealizadoPorSistema ? "Sistema" : (obj.Fteverautoguardado == ConstantesFichaTecnica.RealizadoPorManual ? "Manual" : "");
            obj.Fteverdescripcion = obj.Fteverdescripcion ?? "";
            obj.Fteverusucreacion = obj.Fteverusucreacion ?? "";
        }

        #endregion

        #region Métodos Tabla FT_EXT_CORREOAREA

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_CORREOAREA
        /// </summary>
        public void SaveFtExtCorreoarea(FtExtCorreoareaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtCorreoareaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_CORREOAREA
        /// </summary>
        public void UpdateFtExtCorreoarea(FtExtCorreoareaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtCorreoareaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_CORREOAREA
        /// </summary>
        public void DeleteFtExtCorreoarea(int faremcodi)
        {
            try
            {
                FactorySic.GetFtExtCorreoareaRepository().Delete(faremcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_CORREOAREA
        /// </summary>
        public FtExtCorreoareaDTO GetByIdFtExtCorreoarea(int faremcodi)
        {
            FtExtCorreoareaDTO area = FactorySic.GetFtExtCorreoareaRepository().GetById(faremcodi);

            if (area != null)
            {
                area.FaremEstadoDesc = area.Faremestado == "A" ? "Activo" : "Baja";
                area.Faremusucreacion = area.Faremusucreacion != null ? area.Faremusucreacion.Trim() : "";
                area.FechaCreacionDesc = area.Faremfeccreacion != null ? area.Faremfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                area.Faremusumodificacion = area.Faremusumodificacion != null ? area.Faremusumodificacion.Trim() : "";
                area.FechaModificacionDesc = area.Faremfecmodificacion != null ? area.Faremfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            }

            return area;
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_CORREOAREA
        /// </summary>
        public List<FtExtCorreoareaDTO> ListFtExtCorreoareas()
        {
            return FactorySic.GetFtExtCorreoareaRepository().List().OrderBy(x => x.Faremnombre).ToList();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtCorreoarea
        /// </summary>
        public List<FtExtCorreoareaDTO> GetByCriteriaFtExtCorreoareas()
        {
            return FactorySic.GetFtExtCorreoareaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_CORREOAREADET

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_CORREOAREADET
        /// </summary>
        public void SaveFtExtCorreoareadet(FtExtCorreoareadetDTO entity)
        {
            try
            {
                FactorySic.GetFtExtCorreoareadetRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_CORREOAREADET
        /// </summary>
        public void UpdateFtExtCorreoareadet(FtExtCorreoareadetDTO entity)
        {
            try
            {
                FactorySic.GetFtExtCorreoareadetRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_CORREOAREADET
        /// </summary>
        public void DeleteFtExtCorreoareadet(int faremdcodi)
        {
            try
            {
                FactorySic.GetFtExtCorreoareadetRepository().Delete(faremdcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_CORREOAREADET
        /// </summary>
        public FtExtCorreoareadetDTO GetByIdFtExtCorreoareadet(int faremdcodi)
        {
            return FactorySic.GetFtExtCorreoareadetRepository().GetById(faremdcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_CORREOAREADET
        /// </summary>
        public List<FtExtCorreoareadetDTO> ListFtExtCorreoareadets()
        {
            return FactorySic.GetFtExtCorreoareadetRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtCorreoareadet
        /// </summary>
        public List<FtExtCorreoareadetDTO> GetByCriteriaFtExtCorreoareadets()
        {
            return FactorySic.GetFtExtCorreoareadetRepository().GetByCriteria();
        }

        public List<FtExtCorreoareadetDTO> ListarCorreosPorArea(string faremcodis)
        {
            return FactorySic.GetFtExtCorreoareadetRepository().ListarCorreosPorArea(faremcodis);
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELDATOREV

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELDATOREV
        /// </summary>
        public int SaveFtExtEnvioReldatorev(FtExtEnvioReldatorevDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetFtExtEnvioReldatorevRepository().SaveTransaccional(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELDATOREV
        /// </summary>
        public void SaveFtExtEnvioReldatorev(FtExtEnvioReldatorevDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatorevRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELDATOREV
        /// </summary>
        public void UpdateFtExtEnvioReldatorev(FtExtEnvioReldatorevDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatorevRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELDATOREV
        /// </summary>
        public void DeleteFtExtEnvioReldatorev(int frdrevcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatorevRepository().Delete(frdrevcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELDATOREV
        /// </summary>
        public FtExtEnvioReldatorevDTO GetByIdFtExtEnvioReldatorev(int frdrevcodi)
        {
            return FactorySic.GetFtExtEnvioReldatorevRepository().GetById(frdrevcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELDATOREV
        /// </summary>
        public List<FtExtEnvioReldatorevDTO> ListFtExtEnvioReldatorevs()
        {
            return FactorySic.GetFtExtEnvioReldatorevRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioReldatorev
        /// </summary>
        public List<FtExtEnvioReldatorevDTO> GetByCriteriaFtExtEnvioReldatorevs()
        {
            return FactorySic.GetFtExtEnvioReldatorevRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELREQREV

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELREQREV
        /// </summary>
        public int SaveFtExtEnvioRelreqrev(FtExtEnvioRelreqrevDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetFtExtEnvioRelreqrevRepository().SaveTransaccional(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELREQREV
        /// </summary>
        public void SaveFtExtEnvioRelreqrev(FtExtEnvioRelreqrevDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqrevRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELREQREV
        /// </summary>
        public void UpdateFtExtEnvioRelreqrev(FtExtEnvioRelreqrevDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqrevRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELREQREV
        /// </summary>
        public void DeleteFtExtEnvioRelreqrev(int frrrevcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqrevRepository().Delete(frrrevcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELREQREV
        /// </summary>
        public FtExtEnvioRelreqrevDTO GetByIdFtExtEnvioRelreqrev(int frrrevcodi)
        {
            return FactorySic.GetFtExtEnvioRelreqrevRepository().GetById(frrrevcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELREQREV
        /// </summary>
        public List<FtExtEnvioRelreqrevDTO> ListFtExtEnvioRelreqrevs()
        {
            return FactorySic.GetFtExtEnvioRelreqrevRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioRelreqrev
        /// </summary>
        public List<FtExtEnvioRelreqrevDTO> GetByCriteriaFtExtEnvioRelreqrevs()
        {
            return FactorySic.GetFtExtEnvioRelreqrevRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_REVISION

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_REVISION
        /// </summary>
        public int SaveFtExtEnvioRevision(FtExtEnvioRevisionDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetFtExtEnvioRevisionRepository().SaveTransaccional(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_REVISION
        /// </summary>
        public void SaveFtExtEnvioRevision(FtExtEnvioRevisionDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRevisionRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_REVISION
        /// </summary>
        public void UpdateFtExtEnvioRevision(FtExtEnvioRevisionDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioRevisionRepository().Update(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_REVISION
        /// </summary>
        public void DeleteFtExtEnvioRevision(int ftrevcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioRevisionRepository().Delete(ftrevcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_REVISION
        /// </summary>
        public FtExtEnvioRevisionDTO GetByIdFtExtEnvioRevision(int ftrevcodi)
        {
            return FactorySic.GetFtExtEnvioRevisionRepository().GetById(ftrevcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_REVISION
        /// </summary>
        public List<FtExtEnvioRevisionDTO> ListFtExtEnvioRevisions()
        {
            return FactorySic.GetFtExtEnvioRevisionRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioRevision
        /// </summary>
        public List<FtExtEnvioRevisionDTO> GetByCriteriaFtExtEnvioRevisions()
        {
            return FactorySic.GetFtExtEnvioRevisionRepository().GetByCriteria();
        }

        public List<FtExtEnvioRevisionDTO> GetByCriteriaFtExtEnvioRevisionsXVersionYDato(int ftevercodi)
        {
            var lista = FactorySic.GetFtExtEnvioRevisionRepository().ListByVersionYDato(ftevercodi);

            foreach (var item in lista)
            {
                FormatearFtExtEnvioRevision(item);
            }

            return lista;
        }

        public List<FtExtEnvioRevisionDTO> GetByCriteriaFtExtEnvioRevisionsXVersionYReq(int ftevercodi)
        {
            var lista = FactorySic.GetFtExtEnvioRevisionRepository().ListByVersionYReq(ftevercodi);

            foreach (var item in lista)
            {
                FormatearFtExtEnvioRevision(item);
            }

            return lista;
        }

        public void FormatearFtExtEnvioRevision(FtExtEnvioRevisionDTO obj)
        {
            obj.Ftrevhtmlobscoes = (obj.Ftrevhtmlobscoes ?? "").Trim();
            obj.Ftrevhtmlrptaagente = (obj.Ftrevhtmlrptaagente ?? "").Trim();
            obj.Ftrevhtmlrptacoes = (obj.Ftrevhtmlrptacoes ?? "").Trim();
        }

        #endregion

        #region Métodos Tabla FT_EXT_REL_AREAREQ

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_REL_AREAREQ
        /// </summary>
        public void SaveFtExtRelAreareq(FtExtRelAreareqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtRelAreareqRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_REL_AREAREQ
        /// </summary>
        public void UpdateFtExtRelAreareq(FtExtRelAreareqDTO entity)
        {
            try
            {
                FactorySic.GetFtExtRelAreareqRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_REL_AREAREQ
        /// </summary>
        public void DeleteFtExtRelAreareq(int frracodi)
        {
            try
            {
                FactorySic.GetFtExtRelAreareqRepository().Delete(frracodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_REL_AREAREQ
        /// </summary>
        public FtExtRelAreareqDTO GetByIdFtExtRelAreareq(int frracodi)
        {
            return FactorySic.GetFtExtRelAreareqRepository().GetById(frracodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_REL_AREAREQ
        /// </summary>
        public List<FtExtRelAreareqDTO> ListFtExtRelAreareqs()
        {
            return FactorySic.GetFtExtRelAreareqRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtRelAreareq
        /// </summary>
        public List<FtExtRelAreareqDTO> GetByCriteriaFtExtRelAreareqs()
        {
            return FactorySic.GetFtExtRelAreareqRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_RELAREAITEMCFG

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_RELAREAITEMCFG
        /// </summary>
        public void SaveFtExtRelareaitemcfg(FtExtRelareaitemcfgDTO entity)
        {
            try
            {
                FactorySic.GetFtExtRelareaitemcfgRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_RELAREAITEMCFG
        /// </summary>
        public void UpdateFtExtRelareaitemcfg(FtExtRelareaitemcfgDTO entity)
        {
            try
            {
                FactorySic.GetFtExtRelareaitemcfgRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_RELAREAITEMCFG
        /// </summary>
        public void DeleteFtExtRelareaitemcfg(int friacodi)
        {
            try
            {
                FactorySic.GetFtExtRelareaitemcfgRepository().Delete(friacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_RELAREAITEMCFG
        /// </summary>
        public FtExtRelareaitemcfgDTO GetByIdFtExtRelareaitemcfg(int friacodi)
        {
            return FactorySic.GetFtExtRelareaitemcfgRepository().GetById(friacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_RELAREAITEMCFG
        /// </summary>
        public List<FtExtRelareaitemcfgDTO> ListFtExtRelareaitemcfgs()
        {
            var lista = FactorySic.GetFtExtRelareaitemcfgRepository().List();
            var listaAreas = ListarAreaCorreos();
            foreach (var reg in lista)
                FormatearFtExtRelareaitemcfg(reg, listaAreas);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtRelareaitemcfg
        /// </summary>
        public List<FtExtRelareaitemcfgDTO> GetByCriteriaFtExtRelareaitemcfgs()
        {
            return FactorySic.GetFtExtRelareaitemcfgRepository().GetByCriteria();
        }

        public void FormatearFtExtRelareaitemcfg(FtExtRelareaitemcfgDTO reg, List<FtExtCorreoareaDTO> lstAreas)
        {
            reg.NombreArea = lstAreas.Find(x => x.Faremcodi == reg.Faremcodi).Faremnombre;
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_AREA

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_AREA
        /// </summary>
        public void SaveFtExtEnvioArea(FtExtEnvioAreaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioAreaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_AREA de forma transaccional
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="conn"></param>
        /// <param name="tran"></param>
        /// <returns></returns>
        public int SaveFtExtEnvioArea(FtExtEnvioAreaDTO entity, IDbConnection conn, DbTransaction transaction)
        {
            try
            {
                return FactorySic.GetFtExtEnvioAreaRepository().Save(entity, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_AREA
        /// </summary>
        public void UpdateFtExtEnvioArea(FtExtEnvioAreaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioAreaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_AREA
        /// </summary>
        public void DeleteFtExtEnvioArea(int envarcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioAreaRepository().Delete(envarcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_AREA
        /// </summary>
        public FtExtEnvioAreaDTO GetByIdFtExtEnvioArea(int envarcodi)
        {
            return FactorySic.GetFtExtEnvioAreaRepository().GetById(envarcodi);
        }

        /// <summary>
        /// Devuelve por version y area
        /// </summary>
        /// <param name="ftevercodi"></param>
        /// <param name="faremcodi"></param>
        /// <returns></returns>
        public FtExtEnvioAreaDTO GetFtExtEnvioAreaByVersionYArea(int ftevercodi, int faremcodi)
        {
            return FactorySic.GetFtExtEnvioAreaRepository().GetByVersionYArea(ftevercodi, faremcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_AREA
        /// </summary>
        public List<FtExtEnvioAreaDTO> ListFtExtEnvioAreas()
        {
            return FactorySic.GetFtExtEnvioAreaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioArea
        /// </summary>
        public List<FtExtEnvioAreaDTO> GetByCriteriaFtExtEnvioAreas()
        {
            return FactorySic.GetFtExtEnvioAreaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_REVAREA

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_REVAREA
        /// </summary>
        public void SaveFtExtEnvioRevarea(FtExtEnvioRevareaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRevareaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_REVAREA
        /// </summary>
        public void SaveFtExtEnvioRevarea(FtExtEnvioRevareaDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioRevareaRepository().Save(entity, conn, tran);

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_REVAREA
        /// </summary>
        public void UpdateFtExtEnvioRevarea(FtExtEnvioRevareaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRevareaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_REVAREA
        /// </summary>
        public void DeleteFtExtEnvioRevarea(int revacodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioRevareaRepository().Delete(revacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void DeleteFtExtEnvioRevareaPorIds(string revacodis, IDbConnection conn, DbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEnvioRevareaRepository().DeletePorIds(revacodis, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_REVAREA
        /// </summary>
        public FtExtEnvioRevareaDTO GetByIdFtExtEnvioRevarea(int revacodi)
        {
            return FactorySic.GetFtExtEnvioRevareaRepository().GetById(revacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_REVAREA
        /// </summary>
        public List<FtExtEnvioRevareaDTO> ListFtExtEnvioRevareas()
        {
            return FactorySic.GetFtExtEnvioRevareaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioRevarea
        /// </summary>
        public List<FtExtEnvioRevareaDTO> GetByCriteriaFtExtEnvioRevareas()
        {
            return FactorySic.GetFtExtEnvioRevareaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELDATOREVAREA

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELDATOREVAREA
        /// </summary>
        public void SaveFtExtEnvioReldatorevarea(FtExtEnvioReldatorevareaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatorevareaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELDATOREVAREA
        /// </summary>
        public void SaveFtExtEnvioReldatorevarea(FtExtEnvioReldatorevareaDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatorevareaRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELDATOREVAREA
        /// </summary>
        public void UpdateFtExtEnvioReldatorevarea(FtExtEnvioReldatorevareaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatorevareaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELDATOREVAREA
        /// </summary>
        public void DeleteFtExtEnvioReldatorevarea(int revadcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatorevareaRepository().Delete(revadcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void DeleteFtExtEnvioReldatorevareaPorIds(string revadcodis, IDbConnection conn, DbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEnvioReldatorevareaRepository().DeletePorIds(revadcodis, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELDATOREVAREA
        /// </summary>
        public FtExtEnvioReldatorevareaDTO GetByIdFtExtEnvioReldatorevarea(int revadcodi)
        {
            return FactorySic.GetFtExtEnvioReldatorevareaRepository().GetById(revadcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELDATOREVAREA
        /// </summary>
        public List<FtExtEnvioReldatorevareaDTO> ListFtExtEnvioReldatorevareas()
        {
            return FactorySic.GetFtExtEnvioReldatorevareaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioReldatorevarea
        /// </summary>
        public List<FtExtEnvioReldatorevareaDTO> GetByCriteriaFtExtEnvioReldatorevareas()
        {
            return FactorySic.GetFtExtEnvioReldatorevareaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELREQREVAREA

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELREQREVAREA
        /// </summary>
        public void SaveFtExtEnvioRelreqrevarea(FtExtEnvioRelreqrevareaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqrevareaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void SaveFtExtEnvioRelreqrevarea(FtExtEnvioRelreqrevareaDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqrevareaRepository().Save(entity, conn, tran);

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELREQREVAREA
        /// </summary>
        public void UpdateFtExtEnvioRelreqrevarea(FtExtEnvioRelreqrevareaDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqrevareaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELREQREVAREA
        /// </summary>
        public void DeleteFtExtEnvioRelreqrevarea(int revarqcodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqrevareaRepository().Delete(revarqcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void DeleteFtExtEnvioRelreqrevareaPorIds(string revarqcodis, IDbConnection conn, DbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelreqrevareaRepository().DeletePorIds(revarqcodis, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELREQREVAREA
        /// </summary>
        public FtExtEnvioRelreqrevareaDTO GetByIdFtExtEnvioRelreqrevarea(int revarqcodi)
        {
            return FactorySic.GetFtExtEnvioRelreqrevareaRepository().GetById(revarqcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELREQREVAREA
        /// </summary>
        public List<FtExtEnvioRelreqrevareaDTO> ListFtExtEnvioRelreqrevareas()
        {
            return FactorySic.GetFtExtEnvioRelreqrevareaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioRelreqrevarea
        /// </summary>
        public List<FtExtEnvioRelreqrevareaDTO> GetByCriteriaFtExtEnvioRelreqrevareas()
        {
            return FactorySic.GetFtExtEnvioRelreqrevareaRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla FT_EXT_ENVIO_RELREVAREAARCHIVO

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELREVAREAARCHIVO
        /// </summary>
        public void SaveFtExtEnvioRelrevareaarchivo(FtExtEnvioRelrevareaarchivoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla FT_EXT_ENVIO_RELREVAREAARCHIVO
        /// </summary>
        public void SaveFtExtEnvioRelrevareaarchivo(FtExtEnvioRelrevareaarchivoDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla FT_EXT_ENVIO_RELREVAREAARCHIVO
        /// </summary>
        public void UpdateFtExtEnvioRelrevareaarchivo(FtExtEnvioRelrevareaarchivoDTO entity)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla FT_EXT_ENVIO_RELREVAREAARCHIVO
        /// </summary>
        public void DeleteFtExtEnvioRelrevareaarchivo(int revaacodi)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().Delete(revaacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void DeleteFtExtEnvioRelrevareaarchivoPorIds(string revaacodis, IDbConnection conn, DbTransaction transaction)
        {
            try
            {
                FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().DeletePorIds(revaacodis, conn, transaction);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla FT_EXT_ENVIO_RELREVAREAARCHIVO
        /// </summary>
        public FtExtEnvioRelrevareaarchivoDTO GetByIdFtExtEnvioRelrevareaarchivo(int revaacodi)
        {
            return FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().GetById(revaacodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla FT_EXT_ENVIO_RELREVAREAARCHIVO
        /// </summary>
        public List<FtExtEnvioRelrevareaarchivoDTO> ListFtExtEnvioRelrevareaarchivos()
        {
            return FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioRelrevareaarchivo
        /// </summary>
        public List<FtExtEnvioRelrevareaarchivoDTO> GetByCriteriaFtExtEnvioRelrevareaarchivos()
        {
            return FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().GetByCriteria();
        }

        #endregion
        #endregion

        #endregion

        #region Configuración de plantilla de correo

        public List<SiTipoplantillacorreoDTO> ListarTipoPlantilla()
        {
            List<int> listaTipoFT = new List<int>() { 4, 5, 6, 7 };
            var lista = FactorySic.GetSiTipoplantillacorreoRepository().List();
            lista = lista.Where(x => listaTipoFT.Contains(x.Tpcorrcodi)).OrderBy(x => x.Tpcorrcodi).ToList();

            return lista;
        }

        public List<FtExtEtapaDTO> ListarEtapaXTipoPlantilla(int tpcorrcodi)
        {
            List<FtExtRelpltcorretapaDTO> listaRel = GetByCriteriaFtExtRelpltcorretapas(tpcorrcodi, -1);
            List<FtExtEtapaDTO> listaEtapa = listaRel.GroupBy(x => x.Ftetcodi).Select(x => new FtExtEtapaDTO()
            {
                Ftetcodi = x.Key,
                Ftetnombre = x.First().Ftetnombre
            }).ToList();

            return listaEtapa;
        }

        public List<SiPlantillacorreoDTO> ListarPlantillaXTipoYEtapa(int tpcorrcodi, int ftetcodi)
        {
            List<int> plantcodis = GetByCriteriaFtExtRelpltcorretapas(tpcorrcodi, ftetcodi).Select(x => x.Plantcodi).ToList();

            List<SiPlantillacorreoDTO> lista = new List<SiPlantillacorreoDTO>();

            if (plantcodis.Any())
            {
                lista = FactorySic.GetSiPlantillacorreoRepository().ListarPlantillas(string.Join(",", plantcodis)).OrderBy(x => x.Plantnomb).ToList();
                foreach (var reg in lista)
                    FormatearSiPlantillacorreo(reg);
            }

            return lista;
        }

        /// <summary>
        /// Devuelve si una plantilla es Notificacion o Recordatorio
        /// </summary>
        /// <param name="plantillacodi"></param>
        /// <returns></returns>
        public int ObtenerTipoCorreo(int plantillacodi)
        {
            int salida = -1;
            switch (plantillacodi)
            {
                //case ConstantesFichaTecnica.NotificacionIncumplimientoEntregaInformacionFormato3_CE:
                //    salida = ConstantesFichaTecnica.EsNotificacion;
                //    break;

                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudConexion:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudIntegracion:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudOperacionComercial:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnica:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnicaBaja:

                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionConexion:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionIntegracion:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionOperacionComercial:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnica:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnicaBaja:

                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasConexion:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasIntegracion:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasOperacionComercial:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnica:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnicaBaja:

                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasConexion:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasIntegracion:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasOperacionComercial:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnica:
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnicaBaja:


                    salida = ConstantesFichaTecnica.EsRecordatorio;
                    break;

            }

            return salida;
        }

        /// <summary>
        /// Agrega los parametros de las variables (dia recepcion) del contenido para los recordatorios
        /// </summary>
        /// <param name="plantilla"></param>
        /// <returns></returns>
        public SiPlantillacorreoDTO AgregarParametrosDiaRecepcion(SiPlantillacorreoDTO plantilla)
        {
            SiPlantillacorreoDTO plantillaSalida = new SiPlantillacorreoDTO();

            string valor = ObtenerParametroDiasRecepcion(plantilla.Plantcodi);

            plantilla.ParametroDiaHora = valor;
            plantillaSalida = plantilla;

            return plantillaSalida;
        }

        /// <summary>
        /// Devuelve el valor del parametro ya sea dia 
        /// </summary>
        /// <param name="idPlantilla"></param>
        /// <returns></returns>
        private string ObtenerParametroDiasRecepcion(int idPlantilla)
        {
            string salida = "";

            switch (idPlantilla)
            {
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudConexion: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudConexion); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudIntegracion: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudIntegracion); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudOperacionComercial: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudOperacionComercial); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnica: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudModifTecnica); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnicaBaja: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudModifTecnicaBaja); break;

                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionConexion: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionConexion); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionIntegracion: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionIntegracion); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionOperacionComercial: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionOperacionComercial); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnica: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionModifTecnica); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnicaBaja: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionModifTecnicaBaja); break;

                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasConexion: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasConexion); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasIntegracion: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasIntegracion); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasOperacionComercial: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasOperacionComercial); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnica: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasModifTecnica); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnicaBaja: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasModifTecnicaBaja); break;

                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasConexion: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasConexion); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasIntegracion: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasIntegracion); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasOperacionComercial: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasOperacionComercial); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnica: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasModifTecnica); break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnicaBaja: salida = ObtenerParametroValor(ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasModifTecnicaBaja); break;
            }

            return salida;
        }

        /// <summary>
        /// Devuelve el valor del parametro requerido
        /// </summary>
        /// <param name="isParametro"></param>
        /// <returns></returns>
        private string ObtenerParametroValor(int isParametro)
        {
            string salida = "";

            List<SiParametroValorDTO> lstValores = new ParametroAppServicio().ListSiParametroValorByIdParametro(isParametro).OrderByDescending(x => x.Siparvfeccreacion).ToList();

            if (lstValores.Any())
            {
                salida = lstValores.First().Siparvvalor.ToString();
            }

            return salida;
        }

        public void ActualizarDatosPlantillaCorreo(SiPlantillacorreoDTO correo, string usuario)
        {

            //Para los recordatorios, guardo fecha y hora
            int procesoCodi = 0; //ObtenerProcesoSegunPlantillaCorreo(correo.Plantcodi);
            if (procesoCodi > 0)
            {
                string[] separadas = correo.Hora.Split(':');
                int? hora = Convert.ToInt32(separadas[0]);
                int? minutos = Convert.ToInt32(separadas[1]);

                SiProcesoDTO procesoAGuardar = new SiProcesoDTO
                {
                    Prschorainicio = hora,
                    Prscminutoinicio = minutos,
                    Prcsestado = correo.EstadoRecordatorio
                };
                //UpdateHoraEjecucion(procesoAGuardar, procesoCodi);
            }

            //Para los recordatorios, guardo parametros (dia)
            if (correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudConexion || correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudIntegracion ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudOperacionComercial || correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnica ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnicaBaja ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionConexion || correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionIntegracion ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionOperacionComercial || correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnica ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnicaBaja ||


               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasConexion || correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasIntegracion ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasOperacionComercial || correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnica ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnicaBaja ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasConexion || correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasIntegracion ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasOperacionComercial || correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnica ||
               correo.Plantcodi == ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnicaBaja)
            {

                //obtengo parametro
                int siparcodi = ObtenerParametroSegunPlantillaCorreo(correo.Plantcodi);
                decimal? valNulo = null;
                decimal? val = correo.ParametroDiaHora != "" ? Convert.ToDecimal(correo.ParametroDiaHora) : valNulo;
                DateTime hoy = DateTime.Now;

                SiParametroValorDTO parametroValorAGuardar = new SiParametroValorDTO
                {
                    Siparcodi = siparcodi,
                    Siparvvalor = val,
                    Siparveliminado = "N",
                    Siparvusucreacion = usuario,
                    Siparvfeccreacion = hoy
                };
                new ParametroAppServicio().SaveSiParametroValor(parametroValorAGuardar);
            }

            /**** Actualizar la plantilla ****/
            SiPlantillacorreoDTO c = servCorreo.GetByIdSiPlantillacorreo(correo.Plantcodi);
            c.Plantcontenido = correo.Plantcontenido;
            c.Plantasunto = correo.Plantasunto;
            c.Planticorreos = correo.Planticorreos;
            c.PlanticorreosCc = correo.PlanticorreosCc;
            c.PlanticorreosBcc = correo.PlanticorreosBcc;
            c.PlanticorreoFrom = correo.PlanticorreoFrom;
            c.Plantfecmodificacion = DateTime.Now;
            c.Plantusumodificacion = usuario;

            servCorreo.UpdateSiPlantillacorreo(c);
        }


        /// <summary>
        /// Devuelve el parametrocodi segun el tipo de plantilla
        /// </summary>
        /// <param name="plantillacodi"></param>
        /// <returns></returns>
        private int ObtenerParametroSegunPlantillaCorreo(int plantillacodi)
        {
            int siparcodi = -1;

            switch (plantillacodi)
            {
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudConexion:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudConexion;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudIntegracion:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudIntegracion;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudOperacionComercial:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudOperacionComercial;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnica:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudModifTecnica;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnicaBaja:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudModifTecnicaBaja;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionConexion:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionConexion;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionIntegracion:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionIntegracion;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionOperacionComercial:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionOperacionComercial;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnica:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionModifTecnica;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnicaBaja:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionModifTecnicaBaja;
                    break;

                //Recordatorios areas
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasConexion:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasConexion;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasIntegracion:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasIntegracion;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasOperacionComercial:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasOperacionComercial;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnica:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasModifTecnica;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnicaBaja:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSolicitudAreasModifTecnicaBaja;
                    break;

                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasConexion:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasConexion;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasIntegracion:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasIntegracion;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasOperacionComercial:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasOperacionComercial;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnica:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasModifTecnica;
                    break;
                case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnicaBaja:
                    siparcodi = ConstantesFichaTecnica.ParametroVencimientoPlazoSubsanacionAreasModifTecnicaBaja;
                    break;

            }

            return siparcodi;
        }

        /// <summary>
        /// ejecuta recordatorio y notificaciones de manera manual
        /// </summary>
        /// <param name="plantcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="usuario"></param>
        public void EjecutarRecordatoriosManualmente(int plantcodi, int ftetcodi)
        {
            try
            {
                switch (plantcodi)
                {
                    /****************  RECORDATORIOS  CULMINACION PLAZO SUBSANAR  - Notifica y cambia a SUBSANADO *****************/

                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesConexion:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesIntegracion:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesOpComercial:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesModifTecnica:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesModifTecnicaBaja:
                        NotificarCulminacionPlazoParaSubsanar(ConstantesFichaTecnica.EstadoObservado, plantcodi, ftetcodi, ConstantesFichaTecnica.UsuarioSistema);//Hay logEnvio
                        break;

                    /****************  RECORDATORIOS  VENCIMIENTO PLAZO revision  SOLICITUD (SOLO NOTIFICA) *****************/
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudConexion:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudIntegracion:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudOperacionComercial:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnica:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnicaBaja:

                        NotificarVencimientoPlazoRevision(ConstantesFichaTecnica.EstadoSolicitud, plantcodi, ftetcodi, "Correo Recordatorio al COES de revisión de Solicitud.");
                        break;

                    /****************  RECORDATORIOS  VENCIMIENTO PLAZO revision SUBSANACION  (SOLO NOTIFICA) *****************/

                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionConexion:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionIntegracion:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionOperacionComercial:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnica:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnicaBaja:
                        NotificarVencimientoPlazoRevision(ConstantesFichaTecnica.EstadoSubsanacionObs, plantcodi, ftetcodi, "Correo Recordatorio al COES de revisión de Subsanación de Observaciones.");//no hay log
                        break;

                    #region AREAS

                    /****************  RECORDATORIOS  VENCIMIENTO PLAZO revision SOLICITUD POR LAS AREAS (solo envia correo) *****************/
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasConexion:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasIntegracion:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasOperacionComercial:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnica:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnicaBaja:
                        NotificarAcercamientoDeVencimientoPlazoRevisionAreas(ConstantesFichaTecnica.EstadoSolicitud, plantcodi, ftetcodi, "Correo(s) Recordatorio(s) al COES"); //no hay log
                        break;


                    /****************  RECORDATORIOS  VENCIMIENTO PLAZO revision SUBSANACION POR LAS AREAS (solo envia correo) *****************/
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasConexion:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasIntegracion:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasOperacionComercial:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnica:
                    case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnicaBaja:
                        NotificarAcercamientoDeVencimientoPlazoRevisionAreas(ConstantesFichaTecnica.EstadoSubsanacionObs, plantcodi, ftetcodi, "Correo(s) Recordatorio(s) al COES");
                        break;

                    /****************  RECORDATORIOS  CULMINACION PLAZO REVISAR SOLICITADOS (envia correo y pasa a ATENDIDO) *****************/

                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasConexion:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasIntegracion:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasOpComercial:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasModifTecnica:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasModifTecnicaBaja:
                        NotificarCulminacionPlazoParaRevisarAreas(ConstantesFichaTecnica.EstadoSolicitud, plantcodi, ftetcodi, ConstantesFichaTecnica.UsuarioSistema);//hay log
                        break;

                    /****************  RECORDATORIOS  CULMINACION PLAZO REVISAR SUBSANADOS  (envia correo y pasa a ATENDIDO) *****************/

                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasConexion:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasIntegracion:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasOpComercial:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasModifTecnica:
                    case ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasModifTecnicaBaja:
                        NotificarCulminacionPlazoParaRevisarAreas(ConstantesFichaTecnica.EstadoSubsanacionObs, plantcodi, ftetcodi, ConstantesFichaTecnica.UsuarioSistema);
                        break;
                        #endregion
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }
        }

        /// <summary>
        /// Notifica Cuando culmina el plazo para subsanar las observaciones emitidas por COES para las centrales nuevas y existentes.
        /// </summary>
        /// <param name="estenvcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="usuario"></param>
        private void NotificarCulminacionPlazoParaSubsanar(int estenvcodi, int plantcodi, int ftetcodi, string usuario)
        {
            //Obtengo todos los envios observados (se asume que sí tienen fecha de inicio de revisión Ronda 1)
            List<FtExtEnvioDTO> listaEnviosEstado = ObtenerListadoEnviosPorEstado(ConstantesAppServicio.ParametroDefecto, estenvcodi, ftetcodi);

            foreach (var regEnvio in listaEnviosEstado)
            {
                DateTime fechaAct = ObtenerFechaSistemaFT(regEnvio.Ftenvcodi);

                //solo los envios observados y de cierta central (existente o nueva)
                if (ConstantesFichaTecnica.EstadoObservado == regEnvio.Estenvcodi)
                {
                    bool enviarCorreoYCambiarEstado = false;
                    bool noEnviarCorreoYCambiarEstado = false;

                    //si venció la ampliación cambiar de estado
                    if (regEnvio.Ftenvfecampliacion != null)
                    {
                        if (regEnvio.Ftenvfecampliacion < fechaAct)
                            noEnviarCorreoYCambiarEstado = true;
                    }
                    else
                    {
                        //si no existe ampliacion
                        //vencio fecha maxima respuesta
                        if (regEnvio.Ftenvfecfinsubsanarobs < fechaAct)
                        {
                            enviarCorreoYCambiarEstado = true;
                        }
                    }

                    //CREAR copia de la versión oficial (la última oficial es del administrador cuando realiza por primera vez la observación o amplia)
                    if (noEnviarCorreoYCambiarEstado || enviarCorreoYCambiarEstado)
                    {
                        //nueva versión: cambiar carpeta de OBSERVADO a SUBSANADO (para que sea una versión visible en Extranet)
                        CrearVersionTrabajoFromVersionBD(regEnvio.Ftenvcodi, regEnvio.VersionActual.Ftevercodi,
                                                                ConstantesFichaTecnica.EstadoSubsanacionObs, ConstantesFichaTecnica.GuardadoOficial, regEnvio.Ftenvtipoformato, "SISTEMA");

                        //crear versión de trabajo en Intranet
                        CrearVersionTrabajoFromVersionBD(regEnvio.Ftenvcodi, regEnvio.VersionActual.Ftevercodi,
                                                                ConstantesFichaTecnica.EstadoSubsanacionObs, ConstantesFichaTecnica.GuardadoTemporal, regEnvio.Ftenvtipoformato, "SISTEMA");
                    }

                    //1. Subsanación automática cuando SÍ existe ampliación activada
                    if (noEnviarCorreoYCambiarEstado)
                    {
                        regEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoSubsanacionObs;
                        regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                        regEnvio.Ftenvfecmodificacion = fechaAct;
                        regEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaAct);
                        regEnvio.Ftenvusumodificacion = usuario;
                        regEnvio.FlagUpdateEnvio = true;

                        //log cambio de estado
                        FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                        logEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoSubsanacionObs;
                        logEnvio.Ftelogusucreacion = usuario;
                        logEnvio.Ftelogfeccreacion = fechaAct.AddSeconds(1);
                        logEnvio.Ftelogobs = "Subsanación automática de Observaciones por vencimiento de plazo para subsanar. No se envía notificación de culminación de plazo.";
                        logEnvio.Ftelogcondicion = "";
                        regEnvio.LogEnvioActual = logEnvio;

                        regEnvio.VersionActual = null;

                        //guardar informacion y archivos
                        GuardarEnvioFormatoFichaExtranetTransaccional(regEnvio);
                    }

                    //2. Subsanación automática cuando NO existe ampliación activada
                    if (enviarCorreoYCambiarEstado)
                    {
                        regEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoSubsanacionObs;
                        regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                        regEnvio.Ftenvfecmodificacion = fechaAct;
                        regEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaAct);
                        regEnvio.Ftenvusumodificacion = usuario;
                        regEnvio.FlagUpdateEnvio = true;
                        regEnvio.Ftenvobs = "Culminó el plazo para levantamiento de observaciones de un envío"; //visible para el agente

                        //log cambio de estado
                        FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                        logEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoSubsanacionObs;
                        logEnvio.Ftelogusucreacion = usuario;
                        logEnvio.Ftelogfeccreacion = fechaAct.AddSeconds(1);
                        logEnvio.Ftelogobs = "Subsanación automática de Observaciones por vencimiento de plazo para subsanar. Se envía notificación de culminación de plazo.";
                        logEnvio.Ftelogcondicion = "";
                        regEnvio.LogEnvioActual = logEnvio;

                        regEnvio.VersionActual = null;

                        //guardar informacion y archivos
                        GuardarEnvioFormatoFichaExtranetTransaccional(regEnvio);

                        //log notificacion
                        logEnvio = new FtExtEnvioLogDTO();
                        logEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoNotificado;
                        logEnvio.Ftelogusucreacion = usuario;
                        logEnvio.Ftelogfeccreacion = fechaAct.AddSeconds(1);
                        logEnvio.Ftelogobs = "Notificación de culminación de plazo para subsanar envío observado.";
                        regEnvio.LogEnvioActual = logEnvio;
                        regEnvio.FlagUpdateEnvio = false;

                        regEnvio.VersionActual = null;

                        //guardar informacion y archivos
                        GuardarEnvioFormatoFichaExtranetTransaccional(regEnvio);

                        //enviar notificacion
                        FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(regEnvio.Ftenvcodi);
                        var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, new List<FTParametroModificacion>());
                        NotificarManualmente(plantcodi, regEnvioGuardado, mapaVariable);
                    }
                }
            }
        }

        /// <summary>
        /// Notifica el vencimiento plazo para revisar los envios 
        /// </summary>
        /// <param name="estenvcodi"></param>
        /// <param name="ftetcodi"></param>
        private void NotificarVencimientoPlazoRevision(int estenvcodi, int plantcodi, int ftetcodi, string msgObs)
        {
            //Obtengo todos los envios solicitados por etapa
            List<FtExtEnvioDTO> listaEnviosEstado = ObtenerListadoEnviosPorEstado(ConstantesAppServicio.ParametroDefecto, estenvcodi, ftetcodi);

            foreach (var regEnvio in listaEnviosEstado)
            {
                DateTime fechaAct = ObtenerFechaSistemaFT(regEnvio.Ftenvcodi);

                //solo los envios solicitados y subsanados
                if (ConstantesFichaTecnica.EstadoSolicitud == regEnvio.Estenvcodi || ConstantesFichaTecnica.EstadoSubsanacionObs == regEnvio.Estenvcodi)
                {
                    bool enviarCorreo = false;

                    if (regEnvio.Ftenvfecinirev1 != null)
                    {
                        string valorDia = ObtenerParametroDiasRecepcion(plantcodi);

                        int diasRecepcion = 0;

                        if (valorDia == "")
                            throw new Exception("La plantilla del recordatorio no cuenta con el dato 'Dias Recepción'. Debe ingresar este valor en la plantilla.");
                        else
                            diasRecepcion = int.Parse(valorDia);


                        DateTime fecchaF = regEnvio.Ftenvfecinirev1.Value.AddDays(diasRecepcion);

                        int result = DateTime.Compare(fechaAct.Date, fecchaF.Date);
                        if (result > 0)
                        {
                            enviarCorreo = true;
                        }

                    }

                    if (enviarCorreo)
                    {


                        //enviar notificacion
                        FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(regEnvio.Ftenvcodi);

                        switch (plantcodi)
                        {
                            /****************  RECORDATORIOS  VENCIMIENTO PLAZO revision  SOLICITUD *****************/
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudConexion:
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudIntegracion:
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudOperacionComercial:
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnica:
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnicaBaja:

                                regEnvioGuardado.DiasRecepcionSolicitud = ObtenerParametroDiasRecepcion(plantcodi);
                                break;

                            /****************  RECORDATORIOS  VENCIMIENTO PLAZO revision SUBSANACION *****************/

                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionConexion:
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionIntegracion:
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionOperacionComercial:
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnica:
                            case ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnicaBaja:
                                regEnvioGuardado.DiasRecepcionSubsanacion = ObtenerParametroDiasRecepcion(plantcodi);
                                break;
                        }

                        //Guarda log                    
                        FtExtEnvioLogDTO envioLog = new FtExtEnvioLogDTO();
                        envioLog.Ftenvcodi = regEnvio.Ftenvcodi;
                        envioLog.Ftelogusucreacion = ConstantesFichaTecnica.UsuarioSistema;
                        envioLog.Ftelogfeccreacion = fechaAct;
                        envioLog.Ftelogobs = msgObs;
                        envioLog.Estenvcodi = ConstantesFichaTecnica.EstadoNotificado;
                        envioLog.Envarcodi = null;

                        SaveFtExtEnvioLog(envioLog);

                        var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, new List<FTParametroModificacion>());
                        NotificarManualmente(plantcodi, regEnvioGuardado, mapaVariable);
                    }
                }
            }
        }

        /// <summary>
        /// Envia correos de recordatorio de vencimiento de plazo para revisar, dias antes que termine su plazo
        /// </summary>
        /// <param name="estenvcodi"></param>
        /// <param name="plantcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="usuario"></param>
        private void NotificarAcercamientoDeVencimientoPlazoRevisionAreas(int estenvcodi, int plantcodi, int ftetcodi, string msgObs)
        {
            //Verifico si tiene guardado la cantidad de dias para vencer en la plantilla
            string valorDia = ObtenerParametroDiasRecepcion(plantcodi);
            int diasParaVencer = 0;

            if (valorDia == "")
                throw new Exception("La plantilla del recordatorio no cuenta con el dato 'Tiempo para vencimiento plazo'. Debe ingresar este valor editando la plantilla.");
            else
                diasParaVencer = int.Parse(valorDia);

            //Obtengo los envios solicitados y subsanados que fueron derivados y con revision pendiente
            List<FtExtEnvioDTO> listaEnviosDerivadosPendientesRevision = FactorySic.GetFtExtEnvioRepository().ListarEnviosDerivadosPorCarpetaYEstado(estenvcodi, ftetcodi, ConstantesFichaTecnica.EstadoStrPendiente);
            string strIdEnviosRevPendiente = string.Join(",", listaEnviosDerivadosPendientesRevision.Select(x => x.Ftenvcodi).Distinct().ToList());

            //Obtengo todas las areas con revision pendiente de todos los envios anteriores
            List<FtExtEnvioAreaDTO> listaAreasRevPendientePorEnvios = strIdEnviosRevPendiente != "" ?
                          FactorySic.GetFtExtEnvioAreaRepository().ListarPorEnvioCarpetaYEstado(estenvcodi, strIdEnviosRevPendiente, ConstantesFichaTecnica.EstadoStrPendiente) : new List<FtExtEnvioAreaDTO>();
            string lstFaremcodis = string.Join(",", listaAreasRevPendientePorEnvios.Select(x => x.Faremcodi).Distinct().ToList());

            //Obtengo informacin de los correos por cada area
            List<FtExtCorreoareadetDTO> lstCorreosAreas = lstFaremcodis != "" ? ListarCorreosPorArea(lstFaremcodis) : new List<FtExtCorreoareadetDTO>();

            foreach (var envioPendienteRev in listaEnviosDerivadosPendientesRevision)
            {
                DateTime fechaMaxDeRevision = envioPendienteRev.Envarfecmaxrpta;
                DateTime fechaActXEnvio = ObtenerFechaSistemaFT(envioPendienteRev.Ftenvcodi);
                if (ConstantesFichaTecnica.EstadoSolicitud == envioPendienteRev.Estenvcodi || ConstantesFichaTecnica.EstadoSubsanacionObs == envioPendienteRev.Estenvcodi)
                {
                    //Verifico si se cumple que la fecha sea la correcta para enviar recordatorio
                    bool admiteNotificacion = false;
                    DateTime fechaActualMasXDias = fechaActXEnvio.AddDays(diasParaVencer);
                    int result = DateTime.Compare(fechaActualMasXDias.Date, fechaMaxDeRevision.Date);
                    if (result >= 0)
                    {
                        admiteNotificacion = true;
                    }

                    if (admiteNotificacion)
                    {
                        //Obtengo las areas pendientes de Rev por cada envio
                        List<FtExtEnvioAreaDTO> lstAreaPorEnvio = listaAreasRevPendientePorEnvios.Where(x => x.Ftenvcodi == envioPendienteRev.Ftenvcodi).Distinct().ToList();

                        foreach (var areaPendRevision in lstAreaPorEnvio)
                        {
                            int idArea = areaPendRevision.Faremcodi;

                            //Obtengo los correos de las areas 
                            List<FtExtCorreoareadetDTO> lstCorreosANotificar = lstCorreosAreas.Where(x => x.Faremcodi == idArea).ToList();
                            string correosAreaPendRev = string.Join(";", lstCorreosANotificar.Select(x => x.Faremdemail).Distinct().ToList());

                            if (correosAreaPendRev != "")
                            {
                                string nombArea = lstCorreosANotificar.First() != null ? (lstCorreosANotificar.First().Faremnombre != null ? lstCorreosANotificar.First().Faremnombre.Trim() : "") : "";

                                //Lleno las variables para el correo
                                FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(envioPendienteRev.Ftenvcodi);

                                objEnvio.FechaMaxRptaDerivacionDesc = areaPendRevision.Envarfecmaxrpta != null ? areaPendRevision.Envarfecmaxrpta.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                                objEnvio.CorreosAreasAsignadoPendienteRevision = correosAreaPendRev;
                                objEnvio.NombreAreaPendienteRevision = nombArea;
                                objEnvio.DiasPlazoFinRevisionAreas = ObtenerParametroDiasRecepcion(plantcodi);
                                objEnvio.Envarfecmaxrpta = envioPendienteRev.Envarfecmaxrpta;

                                //Guarda log                    
                                FtExtEnvioLogDTO envioLog = new FtExtEnvioLogDTO();
                                envioLog.Ftenvcodi = objEnvio.Ftenvcodi;
                                envioLog.Ftelogusucreacion = ConstantesFichaTecnica.UsuarioSistema;
                                envioLog.Ftelogfeccreacion = fechaActXEnvio;
                                envioLog.Ftelogobs = msgObs;
                                envioLog.Estenvcodi = ConstantesFichaTecnica.EstadoNotificado;
                                envioLog.Envarcodi = areaPendRevision.Envarcodi;

                                SaveFtExtEnvioLog(envioLog);

                                var mapaVariable = LlenarVariablesCorreos(objEnvio, new List<FTParametroModificacion>());
                                NotificarManualmente(plantcodi, objEnvio, mapaVariable);
                            }

                        }

                    }
                }

            }

        }

        /// <summary>
        /// Envia notificacion cuando se vence el plazo para revisar areas, pasan a ATENDIDO
        /// </summary>
        /// <param name="estenvcodi"></param>
        /// <param name="plantcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="usuario"></param>
        private void NotificarCulminacionPlazoParaRevisarAreas(int estenvcodi, int plantcodi, int ftetcodi, string usuario)
        {
            //Obtengo los envios solicitados y subsanados que fueron derivados y con revision pendiente
            List<FtExtEnvioDTO> listaEnviosDerivadosPendientesRevision = FactorySic.GetFtExtEnvioRepository().ListarEnviosDerivadosPorCarpetaYEstado(estenvcodi, ftetcodi, ConstantesFichaTecnica.EstadoStrPendiente);
            string strIdEnviosRevPendiente = string.Join(",", listaEnviosDerivadosPendientesRevision.Select(x => x.Ftenvcodi).Distinct().ToList());

            //Obtengo todas las areas con revision pendiente de todos los envios anteriores
            List<FtExtEnvioAreaDTO> listaAreasRevPendientePorEnvios = strIdEnviosRevPendiente != "" ?
                          FactorySic.GetFtExtEnvioAreaRepository().ListarPorEnvioCarpetaYEstado(estenvcodi, strIdEnviosRevPendiente, ConstantesFichaTecnica.EstadoStrPendiente) : new List<FtExtEnvioAreaDTO>();
            string lstFaremcodis = string.Join(",", listaAreasRevPendientePorEnvios.Select(x => x.Faremcodi).Distinct().ToList());

            //Obtengo informacin de los correos por cada area
            List<FtExtCorreoareadetDTO> lstCorreosAreas = lstFaremcodis != "" ? ListarCorreosPorArea(lstFaremcodis) : new List<FtExtCorreoareadetDTO>();

            //Obtengo todos la relacion entre envios, version y areas para obtener la respectiva version a usar (para derivar se esta usando el TEMPORAL)
            List<FtExtEnvioDTO> listaRelacionEnvioVesionArea = FactorySic.GetFtExtEnvioRepository().ListarRelacionEnvioVersionArea(estenvcodi, ftetcodi, ConstantesFichaTecnica.GuardadoTemporal);

            foreach (FtExtEnvioDTO envioPendienteRev in listaEnviosDerivadosPendientesRevision)
            {
                DateTime fechaMaxDeRevision = envioPendienteRev.Envarfecmaxrpta;
                DateTime fechaActXEnvio = ObtenerFechaSistemaFT(envioPendienteRev.Ftenvcodi);
                if (ConstantesFichaTecnica.EstadoSolicitud == envioPendienteRev.Estenvcodi || ConstantesFichaTecnica.EstadoSubsanacionObs == envioPendienteRev.Estenvcodi)
                {
                    //Verifico si se cumple que la fecha sea la correcta para enviar recordatorio
                    bool admiteNotificacion = false;
                    int result = DateTime.Compare(fechaActXEnvio.Date, fechaMaxDeRevision.Date);
                    if (result > 0)
                    {
                        admiteNotificacion = true;
                    }

                    if (admiteNotificacion)
                    {
                        //Obtengo las areas pendientes de Rev por cada envio
                        List<FtExtEnvioAreaDTO> lstAreaPorEnvio = listaAreasRevPendientePorEnvios.Where(x => x.Ftenvcodi == envioPendienteRev.Ftenvcodi).Distinct().ToList();

                        //Envio correo por cada area pendiente de revision
                        foreach (var areaPendRevision in lstAreaPorEnvio)
                        {
                            int idArea = areaPendRevision.Faremcodi;

                            //Obtengo los correos de las areas 
                            List<FtExtCorreoareadetDTO> lstCorreosANotificar = lstCorreosAreas.Where(x => x.Faremcodi == idArea).ToList();
                            string correosAreaPendRev = string.Join(";", lstCorreosANotificar.Select(x => x.Faremdemail).Distinct().ToList());

                            if (correosAreaPendRev != "")
                            {
                                string nombArea = lstCorreosANotificar.First() != null ? (lstCorreosANotificar.First().Faremnombre != null ? lstCorreosANotificar.First().Faremnombre.Trim() : "") : "";

                                //Obtengo la version respectiva
                                FtExtEnvioDTO envioX = listaRelacionEnvioVesionArea.Find(x => x.Ftenvcodi == envioPendienteRev.Ftenvcodi && x.Faremcodi == idArea);
                                if (envioX == null) throw new ArgumentException("Ocurrió un error al momento de encontrar version usada en el envio: " + envioPendienteRev.Ftenvcodi);
                                int idVersionUsada = envioX.Ftevercodi.Value;

                                //Cambio de estado al envio
                                FtExtEnvioAreaDTO objAActualizar = GetFtExtEnvioAreaByVersionYArea(idVersionUsada, idArea);
                                if (objAActualizar == null) throw new ArgumentException("Ocurrió un error al momento de actualizar la revisión. No se encontró la relacion Envío-Área");
                                objAActualizar.Envarestado = ConstantesFichaTecnica.EstadoStrAtendido;
                                UpdateFtExtEnvioArea(objAActualizar);

                                //Guarda log
                                string nombCarpeta = envioPendienteRev.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud ? ConstantesFichaTecnica.CarpetaAreasRCSolicitud : (envioPendienteRev.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs ? ConstantesFichaTecnica.CarpetaAreasRCSubsanacíon : "");
                                FtExtEnvioLogDTO envioLog = new FtExtEnvioLogDTO();
                                envioLog.Ftenvcodi = envioPendienteRev.Ftenvcodi;
                                envioLog.Ftelogusucreacion = usuario;
                                envioLog.Ftelogfeccreacion = fechaActXEnvio;
                                envioLog.Ftelogobs = nombCarpeta + ": Respuesta revisión Áreas COES";
                                envioLog.Estenvcodi = envioPendienteRev.Estenvcodi;
                                envioLog.Ftelogcondicion = ConstantesFichaTecnica.CondicionFueraPlazo;
                                envioLog.Envarcodi = objAActualizar.Envarcodi;

                                SaveFtExtEnvioLog(envioLog);

                                //Lleno las variables para el correo
                                FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(envioPendienteRev.Ftenvcodi);
                                objEnvio.FechaMaxRptaDerivacionDesc = areaPendRevision.Envarfecmaxrpta != null ? areaPendRevision.Envarfecmaxrpta.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                                objEnvio.CorreosDelAreaQuienesDebieronRevisar = correosAreaPendRev;
                                objEnvio.NombreAreaQuienDebioRevisar = nombArea;
                                objEnvio.Envarfecmaxrpta = envioPendienteRev.Envarfecmaxrpta;

                                var mapaVariable = LlenarVariablesCorreos(objEnvio, new List<FTParametroModificacion>());
                                NotificarManualmente(plantcodi, objEnvio, mapaVariable);
                            }

                        }

                    }
                }

            }

        }

        #endregion

        #region Notificaciones correo Ficha Técnica

        /// <summary>
        /// Enviar notificación de cambios en configuración de ficha que pertenece a la ficha maestra oficial
        /// </summary>
        /// <param name="fichaCambio"></param>
        /// <param name="listaCambios"></param>
        /// <param name="lstCorreosAdminFT"></param>
        public void EnviarNotificacionConfiguracionFT(NotificacionFT fichaCambio, List<NotificacionFTItems> listaCambios, List<string> lstCorreosAdminFT)
        {
            //plantilla
            int plantcodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosConfiguracionFT;
            SiPlantillacorreoDTO plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);

            try
            {
                //ENVIAR CORREO
                if (fichaCambio.Fteqcodi > 0)
                {
                    //Envio de correo electronico
                    string from = plantilla.PlanticorreoFrom;
                    string to = string.Join(";", lstCorreosAdminFT);
                    string cc = plantilla.PlanticorreosCc;
                    string bcc = plantilla.PlanticorreosBcc;
                    string asunto = plantilla.Plantasunto;
                    string contenido = ObtenerCuerpoCorreoConfiFT(fichaCambio, listaCambios);

                    List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to, false);
                    List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc, false);
                    List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true);

                    string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                    COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asuntoSendEmail, contenido, from);

                    //Guardar en SI_CORREO
                    var correo = new SiCorreoDTO();
                    correo.Corrasunto = plantilla.Plantasunto;
                    correo.Corrcontenido = contenido;
                    correo.Corrfechaenvio = DateTime.Now;
                    correo.Corrfrom = TipoPlantillaCorreo.MailFrom;
                    correo.Corrto = to;
                    correo.Corrcc = cc;
                    correo.Corrbcc = bcc;
                    correo.Enviocodi = null;
                    correo.Plantcodi = plantilla.Plantcodi;
                    servCorreo.SaveSiCorreo(correo);
                }
            }
            catch (Exception ex)
            {
                throw ex;
                //Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// Obtener el cuerpo del correo para cambios en configuración de ficha
        /// </summary>
        /// <param name="fichaCambio"></param>
        /// <param name="listaCambios"></param>
        /// <returns></returns>
        protected string ObtenerCuerpoCorreoConfiFT(NotificacionFT fichaCambio, List<NotificacionFTItems> listaCambios)
        {
            StringBuilder htmlconfigFt = new StringBuilder();
            StringBuilder htmlconfigFtItem = new StringBuilder();

            htmlconfigFt.Append(String.Format(HtmlNotificacion.HtmlConfigFt, fichaCambio.Fteqcodi, fichaCambio.Fteqnombre, fichaCambio.FteqnombreNew, fichaCambio.Fteqestado, fichaCambio.FteqestadoNew, fichaCambio.Ftequsumodificacion, fichaCambio.Fteqfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora)));

            foreach (var item in listaCambios)
            {
                string ordenNew = item.FtitordenNew == 0 ? string.Empty : item.FtitordenNew.ToString();
                htmlconfigFtItem.Append(String.Format(HtmlNotificacion.HtmlConfigFtItem, item.Ftitcodi, item.Ftitnombre, item.FtitnombreNew, item.Ftitorden, ordenNew, item.NumNotas, item.NumNotasNew, item.Ftitusumodificacion, item.Ftitfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora)));
            }

            String mensaje = String.Format(HtmlNotificacion.HtmlCuerpoConfigFt, htmlconfigFt.ToString(), htmlconfigFtItem.ToString());
            mensaje = mensaje.Replace("[", "{");
            mensaje = mensaje.Replace("]", "}");
            return mensaje;
        }

        /// <summary>
        /// Enviar notificación de cambios en la Ficha Maestra Oficial
        /// </summary>
        /// <param name="fichaMaestraCambio"></param>
        /// <param name="listaCambios"></param>
        /// <param name="lstCorreosAdminFT"></param>
        public void EnviarNotificacionFM(NotificacionFM fichaMaestraCambio, List<NotificacionFMDetails> listaCambios, List<string> lstCorreosAdminFT, int ambiente)
        {
            //plantilla
            int plantcodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosFMOficial;
            SiPlantillacorreoDTO plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);

            try
            {
                //ENVIAR CORREO
                if (fichaMaestraCambio.Fteccodi > 0)
                {

                    string nombreAmbiente = "";
                    switch (ambiente)
                    {
                        case ConstantesFichaTecnica.FichaMaestraPortal:
                            nombreAmbiente = "PORTAL WEB";
                            break;
                        case ConstantesFichaTecnica.FichaMaestraIntranet:
                            nombreAmbiente = "INTRANET";
                            break;
                        case ConstantesFichaTecnica.FichaMaestraExtranet:
                            nombreAmbiente = "EXTRANET";
                            break;
                    }

                    //Envio de correo electronico
                    string from = plantilla.PlanticorreoFrom;
                    string to = string.Join(";", lstCorreosAdminFT);
                    string cc = plantilla.PlanticorreosCc;
                    string bcc = plantilla.PlanticorreosBcc;
                    string asunto = plantilla.Plantasunto + " " + nombreAmbiente;
                    string contenido = ObtenerCuerpoCorreoFM(fichaMaestraCambio, listaCambios, nombreAmbiente);

                    List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to, false);
                    List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc, false);
                    List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true);

                    string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                    COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asuntoSendEmail, contenido, from);

                    //Guardar en SI_CORREO
                    var correo = new SiCorreoDTO();
                    correo.Corrasunto = plantilla.Plantasunto;
                    correo.Corrcontenido = contenido;
                    correo.Corrfechaenvio = DateTime.Now; ;
                    correo.Corrfrom = TipoPlantillaCorreo.MailFrom;
                    correo.Corrto = to;
                    correo.Corrcc = cc;
                    correo.Corrbcc = bcc;
                    correo.Enviocodi = null;
                    correo.Plantcodi = plantilla.Plantcodi;
                    servCorreo.SaveSiCorreo(correo);

                }
            }
            catch (Exception ex)
            {
                throw ex;
                //Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        private string ObtenerCuerpoCorreoFM(NotificacionFM fichaMaestraCambio, List<NotificacionFMDetails> listaCambios, string nombreAmbiente)
        {
            StringBuilder htmlFm = new StringBuilder();
            StringBuilder htmlFmItems = new StringBuilder();

            htmlFm.Append(String.Format(HtmlNotificacion.HtmlFM, fichaMaestraCambio.Fteccodi, fichaMaestraCambio.Ftecnombre, fichaMaestraCambio.FtecnombreNew, fichaMaestraCambio.Ftecprincipal, fichaMaestraCambio.FtecprincipalNew, fichaMaestraCambio.Ftequsumodificacion, fichaMaestraCambio.Fteqfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaHora)));

            foreach (var item in listaCambios)
            {
                htmlFmItems.Append(String.Format(HtmlNotificacion.HtmlFMItems, item.Fteqcodi, item.Fteqnombre, item.Ftecdusuario, item.Ftecdfecha.Value.ToString(ConstantesAppServicio.FormatoFechaHora)));
            }

            String mensaje = String.Format(HtmlNotificacion.HtmlCuerpoFm, nombreAmbiente, htmlFm.ToString(), htmlFmItems.ToString());
            mensaje = mensaje.Replace("[", "{");
            mensaje = mensaje.Replace("]", "}");
            return mensaje;
        }

        /// <summary>
        /// Enviar notificación de cambios de visualización del equipo
        /// </summary>
        /// <param name="elementoCambio"></param>
        /// <param name="lstCorreosAdminFT"></param>
        public void EnviarNotificacionEquiposVisualizacion(NotificacionEqVisualizacion elementoCambio, List<string> lstCorreosAdminFT, int tipoOculto)
        {
            //plantilla
            SiPlantillacorreoDTO plantilla = new SiPlantillacorreoDTO();
            int plantcodi = 0;

            switch (tipoOculto)
            {
                case ConstantesFichaTecnica.TipoOcultoPortal:
                    plantcodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosEquiposVisualizacionPortalWeb;
                    plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);
                    break;
                case ConstantesFichaTecnica.TipoOcultoExtranet:
                    plantcodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosEquiposVisualizacionExtranet;
                    plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);
                    break;
                case ConstantesFichaTecnica.TipoOcultoIntranet:
                    plantcodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosEquiposVisualizacionIntranet;
                    plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);
                    break;
            }

            try
            {
                //ENVIAR CORREO
                if (elementoCambio.Codigo > 0)
                {
                    //Envio de correo electronico
                    string from = plantilla.PlanticorreoFrom;
                    string to = string.Join(";", lstCorreosAdminFT);
                    string cc = plantilla.PlanticorreosCc;
                    string bcc = plantilla.PlanticorreosBcc;
                    string asunto = plantilla.Plantasunto;
                    string contenido = ObtenerCuerpoEquiposVisualizacion(elementoCambio, tipoOculto);

                    List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to, false);
                    List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc, false);
                    List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true);

                    string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                    COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asuntoSendEmail, contenido, from);

                    //Guardar en SI_CORREO
                    var correo = new SiCorreoDTO();
                    correo.Corrasunto = plantilla.Plantasunto;
                    correo.Corrcontenido = contenido;
                    correo.Corrfechaenvio = DateTime.Now; ;
                    correo.Corrfrom = TipoPlantillaCorreo.MailFrom;
                    correo.Corrto = to;
                    correo.Corrcc = cc;
                    correo.Corrbcc = bcc;
                    correo.Enviocodi = null;
                    correo.Plantcodi = plantilla.Plantcodi;
                    servCorreo.SaveSiCorreo(correo);
                }
            }
            catch (Exception ex)
            {
                throw ex;
                //Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        private string ObtenerCuerpoEquiposVisualizacion(NotificacionEqVisualizacion elementoCambio, int tipoOculto)
        {
            StringBuilder htmlElemento = new StringBuilder();

            htmlElemento.Append(String.Format(HtmlNotificacion.HtmlEquipo, elementoCambio.Codigo, elementoCambio.Nombre, elementoCambio.Abreviatura, elementoCambio.Empresa, elementoCambio.Ubicacion, elementoCambio.Oculto, elementoCambio.OcultoNew, elementoCambio.Usuario, elementoCambio.Fecha.Value.ToString(ConstantesAppServicio.FormatoFechaHora)));

            string mensaje = "";

            switch (tipoOculto)
            {
                case ConstantesFichaTecnica.TipoOcultoPortal:
                    mensaje = String.Format(HtmlNotificacion.HtmlCuerpoEquipo, htmlElemento.ToString());
                    break;
                case ConstantesFichaTecnica.TipoOcultoExtranet:
                    mensaje = String.Format(HtmlNotificacion.HtmlCuerpoEquipoExtranet, htmlElemento.ToString());
                    break;
                case ConstantesFichaTecnica.TipoOcultoIntranet:
                    mensaje = String.Format(HtmlNotificacion.HtmlCuerpoEquipoIntranet, htmlElemento.ToString());
                    break;
            }

            //String mensaje = tipoOculto == ConstantesFichaTecnica.TipoOcultoPortal ? String.Format(HtmlNotificacion.HtmlCuerpoEquipo, htmlElemento.ToString()) : String.Format(HtmlNotificacion.HtmlCuerpoEquipoExtranet, htmlElemento.ToString());
            mensaje = mensaje.Replace("[", "{");
            mensaje = mensaje.Replace("]", "}");
            return mensaje;
        }

        /// <summary>
        /// Armar html para las notificaciones
        /// </summary>
        public struct HtmlNotificacion
        {

            public const string HtmlConfigFt = @" <tr>
					               <td class='tdcelda'>{0}</td>
					               <td class='tdcelda'>{1}</td>
					               <td class='tdcelda'>{2}</td>
					               <td class='tdcelda'>{3}</td>
					               <td class='tdcelda'>{4}</td>
					               <td class='tdcelda'>{5}</td>							
					               <td class='tdcelda'>{6}</td>							
				               </tr>";
            public const string HtmlConfigFtItem = @"<tr>
					                 <td class='tdcelda'>{0}</td>
					                 <td class='tdcelda'>{1}</td>
					                 <td class='tdcelda'>{2}</td>
					                 <td class='tdcelda'>{3}</td>
					                 <td class='tdcelda'>{4}</td>
					                 <td class='tdcelda'>{5}</td>	
                                     <td class='tdcelda'>{6}</td>	
                                     <td class='tdcelda'>{7}</td>	
                                     <td class='tdcelda'>{8}</td>	
				                 </tr>";
            public const string HtmlFM = @"<tr>
					                 <td class='tdcelda'>{0}</td>
					                 <td class='tdcelda'>{1}</td>
					                 <td class='tdcelda'>{2}</td>
					                 <td class='tdcelda'>{3}</td>
					                 <td class='tdcelda'>{4}</td>
					                 <td class='tdcelda'>{5}</td>	
                                     <td class='tdcelda'>{6}</td>	
				                 </tr>";
            public const string HtmlFMItems = @"<tr>
					                 <td class='tdcelda'>{0}</td>
					                 <td class='tdcelda'>{1}</td>
					                 <td class='tdcelda'>{2}</td>
					                 <td class='tdcelda'>{3}</td>
				                 </tr>";
            public const string HtmlEquipo = @"<tr>
					                 <td class='tdcelda'>{0}</td>
					                 <td class='tdcelda'>{1}</td>
					                 <td class='tdcelda'>{2}</td>
					                 <td class='tdcelda'>{3}</td>
					                 <td class='tdcelda'>{4}</td>
					                 <td class='tdcelda'>{5}</td>	
                                     <td class='tdcelda'>{6}</td>	
                                     <td class='tdcelda'>{7}</td>	
                                     <td class='tdcelda'>{8}</td>
				                 </tr>";

            public const string HtmlCuerpoConfigFt = @"<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
                            <html xmlns='http://www.w3.org/1999/xhtml'>
                            <head>
                            <meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1' />
                            <title>Informe equipamiento</title>
                            <style type='text/css'>
                            body[
	                            background-color:#EEF0F2;
	                            top:0;
	                            left:0;
	                            margin:0;
	                            font-family:Arial, Helvetica, sans-serif;
	                            font-size:12px;
	                            color:#333333;
                            ]
                            .content[
	                            width:80%;
	                            margin:auto;
                            ]

                            .titulo[
	                            font-size:16px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-align:center;
	                            padding:20px;
	                            text-transform:uppercase;
                            ]

                            .subtitulo[
	                            font-size:13px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-transform:uppercase;		
                            ]

                            .table[
	
	                            margin-bottom:20px;
                            ]

                            .trtitulo[
	                            background-color:#506DBE;
	                            color:#fff;
	                            font-weight:bold;
	                            text-align:center;
	                            line-height:20px;
	                            font-size:10px;
	                            text-transform:uppercase;
                            ]

                            .tdcelda[
	                            background-color:#fff;
	                            text-align:center;
	                            border:1px solid #DBDCDD;
	                            border-top:1px none;
	                            line-height:18px;
                                font-size:11px;
                            ]

                            </style>
                            </head>

                            <body>
                            <table class='content'>
	                            <tr>
		                            <td class='titulo'>cambios en Ficha técnica</td>
	                            </tr>
	                            <tr>
		                            <td class='subtitulo'>Cambios en Configuración de Ficha Técnica</td>
	                            </tr>
	                            <tr>
		                            <td>
			                            <table cellspacing='0' cellpadding='0' width='100%' border='0' class='table'>
				                            <tr class='trtitulo'>
					                            <td>Código</td>
					                            <td>Nombre Ficha técnica antes</td>
					                            <td>Nombre Ficha técnica modificado</td>
					                            <td>Estado antes</td>
					                            <td>Estado modificado</td>
					                            <td>Usuario modificación</td>
                                                <td>Fecha modificación</td>
				                            </tr>
				                            {0}				                          
			                            </table>
                                        <br />
                                        <br />
		                            </td>
	                            </tr>
	                            <tr>
		                            <td class='subtitulo'>Cambios en propiedades de Ficha Técnica</td>
	                            </tr>
	                            <tr>
		                            <td>
			                            <table cellspacing='0' cellpadding='0' width='100%' border='0' class='table'>
				                            <tr class='trtitulo'>
					                            <td>Código propiedad</td>
					                            <td>Nombre Propiedad antes</td>
					                            <td>Nombre Propiedad modificado</td>
					                            <td>Orden antes</td>
                                                <td>Orden modificado</td>
                                                <td># Notas antes</td>
                                                <td># Notas modificado</td>
					                            <td>Usuario modificación</td>
					                            <td>Fecha modificación</td>		
				                            </tr>	
                                            {1}
			                            </table>
                                        <br />
                                        <br />
		                            </td>
	                            </tr>
                            </table>

                            </body>
                            </html>
                            ";

            public const string HtmlCuerpoFm = @"<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
                            <html xmlns='http://www.w3.org/1999/xhtml'>
                            <head>
                            <meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1' />
                            <title>Informe equipamiento</title>
                            <style type='text/css'>
                            body[
	                            background-color:#EEF0F2;
	                            top:0;
	                            left:0;
	                            margin:0;
	                            font-family:Arial, Helvetica, sans-serif;
	                            font-size:12px;
	                            color:#333333;
                            ]
                            .content[
	                            width:80%;
	                            margin:auto;
                            ]

                            .titulo[
	                            font-size:16px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-align:center;
	                            padding:20px;
	                            text-transform:uppercase;
                            ]

                            .subtitulo[
	                            font-size:13px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-transform:uppercase;		
                            ]

                            .table[
	
	                            margin-bottom:20px;
                            ]

                            .trtitulo[
	                            background-color:#506DBE;
	                            color:#fff;
	                            font-weight:bold;
	                            text-align:center;
	                            line-height:20px;
	                            font-size:10px;
	                            text-transform:uppercase;
                            ]

                            .tdcelda[
	                            background-color:#fff;
	                            text-align:center;
	                            border:1px solid #DBDCDD;
	                            border-top:1px none;
	                            line-height:18px;
                                font-size:11px;
                            ]

                            </style>
                            </head>

                            <body>
                            <table class='content'>
	                            <tr>
		                            <td class='titulo'>cambios en Ficha Maestra {0}</td>
	                            </tr>
	                            <tr>
		                            <td class='subtitulo'>Cambios en Ficha Maestra Oficial</td>
	                            </tr>
	                            <tr>
		                            <td>
			                            <table cellspacing='0' cellpadding='0' width='100%' border='0' class='table'>
				                            <tr class='trtitulo'>
					                            <td>Código</td>
					                            <td>Nombre Ficha maestra antes</td>
					                            <td>Nombre Ficha maestra modificado</td>
					                            <td>Oficial antes</td>
					                            <td>Oficial modificado</td>
					                            <td>Usuario modificación</td>
                                                <td>Fecha modificación</td>
				                            </tr>
				                            {1}				                          
			                            </table>
                                        <br />
                                        <br />
		                            </td>
	                            </tr>
	                            <tr>
		                            <td class='subtitulo'>Lista de Fichas Vinculadas</td>
	                            </tr>
	                            <tr>
		                            <td>
			                            <table cellspacing='0' cellpadding='0' width='100%' border='0' class='table'>
				                            <tr class='trtitulo'>
					                            <td>Código Ficha</td>
					                            <td>Nombre Ficha</td>
					                            <td>Usuario modificación</td>
					                            <td>Fecha modificación</td>		
				                            </tr>	
                                            {2}
			                            </table>
                                        <br />
                                        <br />
		                            </td>
	                            </tr>
                            </table>

                            </body>
                            </html>
                            ";

            public const string HtmlCuerpoEquipo = @"<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
                            <html xmlns='http://www.w3.org/1999/xhtml'>
                            <head>
                            <meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1' />
                            <title>Informe equipamiento</title>
                            <style type='text/css'>
                            body[
	                            background-color:#EEF0F2;
	                            top:0;
	                            left:0;
	                            margin:0;
	                            font-family:Arial, Helvetica, sans-serif;
	                            font-size:12px;
	                            color:#333333;
                            ]
                            .content[
	                            width:80%;
	                            margin:auto;
                            ]

                            .titulo[
	                            font-size:16px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-align:center;
	                            padding:20px;
	                            text-transform:uppercase;
                            ]

                            .subtitulo[
	                            font-size:13px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-transform:uppercase;		
                            ]

                            .table[
	
	                            margin-bottom:20px;
                            ]

                            .trtitulo[
	                            background-color:#506DBE;
	                            color:#fff;
	                            font-weight:bold;
	                            text-align:center;
	                            line-height:20px;
	                            font-size:10px;
	                            text-transform:uppercase;
                            ]

                            .tdcelda[
	                            background-color:#fff;
	                            text-align:center;
	                            border:1px solid #DBDCDD;
	                            border-top:1px none;
	                            line-height:18px;
                                font-size:11px;
                            ]

                            </style>
                            </head>

                            <body>
                            <table class='content'>
	                            <tr>
		                            <td class='titulo'>cambios en Ficha Maestra</td>
	                            </tr>
	                            <tr>
		                            <td>
			                            <table cellspacing='0' cellpadding='0' width='100%' border='0' class='table'>
				                            <tr class='trtitulo'>
					                            <td>Código</td>
					                            <td>Nombre</td>
					                            <td>Abreviatura</td>
					                            <td>Empresa</td>
					                            <td>Ubicación</td>
					                            <td>Oculto Portal Antes</td>
					                            <td>Oculto Portal Modificación</td>
					                            <td>Usuario modificación</td>
                                                <td>Fecha modificación</td>
				                            </tr>
				                            {0}				                          
			                            </table>
                                        <br />
                                        <br />
		                            </td>
	                            </tr>
                            </table>

                            </body>
                            </html>
                            ";

            public const string HtmlCuerpoEquipoExtranet = @"<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
                            <html xmlns='http://www.w3.org/1999/xhtml'>
                            <head>
                            <meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1' />
                            <title>Informe equipamiento</title>
                            <style type='text/css'>
                            body[
	                            background-color:#EEF0F2;
	                            top:0;
	                            left:0;
	                            margin:0;
	                            font-family:Arial, Helvetica, sans-serif;
	                            font-size:12px;
	                            color:#333333;
                            ]
                            .content[
	                            width:80%;
	                            margin:auto;
                            ]

                            .titulo[
	                            font-size:16px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-align:center;
	                            padding:20px;
	                            text-transform:uppercase;
                            ]

                            .subtitulo[
	                            font-size:13px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-transform:uppercase;		
                            ]

                            .table[
	
	                            margin-bottom:20px;
                            ]

                            .trtitulo[
	                            background-color:#506DBE;
	                            color:#fff;
	                            font-weight:bold;
	                            text-align:center;
	                            line-height:20px;
	                            font-size:10px;
	                            text-transform:uppercase;
                            ]

                            .tdcelda[
	                            background-color:#fff;
	                            text-align:center;
	                            border:1px solid #DBDCDD;
	                            border-top:1px none;
	                            line-height:18px;
                                font-size:11px;
                            ]

                            </style>
                            </head>

                            <body>
                            <table class='content'>
	                            <tr>
		                            <td class='titulo'>cambios en Ficha Extranet Vigente</td>
	                            </tr>
	                            <tr>
		                            <td>
			                            <table cellspacing='0' cellpadding='0' width='100%' border='0' class='table'>
				                            <tr class='trtitulo'>
					                            <td>Código</td>
					                            <td>Nombre</td>
					                            <td>Abreviatura</td>
					                            <td>Empresa</td>
					                            <td>Ubicación</td>
					                            <td>Oculto Extranet Antes</td>
					                            <td>Oculto Extranet Modificación</td>
					                            <td>Usuario modificación</td>
                                                <td>Fecha modificación</td>
				                            </tr>
				                            {0}				                          
			                            </table>
                                        <br />
                                        <br />
		                            </td>
	                            </tr>
                            </table>

                            </body>
                            </html>
                            ";

            public const string HtmlCuerpoEquipoIntranet = @"<!DOCTYPE html PUBLIC '-//W3C//DTD XHTML 1.0 Transitional//EN' 'http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd'>
                            <html xmlns='http://www.w3.org/1999/xhtml'>
                            <head>
                            <meta http-equiv='Content-Type' content='text/html; charset=iso-8859-1' />
                            <title>Informe equipamiento</title>
                            <style type='text/css'>
                            body[
	                            background-color:#EEF0F2;
	                            top:0;
	                            left:0;
	                            margin:0;
	                            font-family:Arial, Helvetica, sans-serif;
	                            font-size:12px;
	                            color:#333333;
                            ]
                            .content[
	                            width:80%;
	                            margin:auto;
                            ]

                            .titulo[
	                            font-size:16px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-align:center;
	                            padding:20px;
	                            text-transform:uppercase;
                            ]

                            .subtitulo[
	                            font-size:13px;
	                            color:#004080;
	                            font-weight:bold;
	                            text-transform:uppercase;		
                            ]

                            .table[
	
	                            margin-bottom:20px;
                            ]

                            .trtitulo[
	                            background-color:#506DBE;
	                            color:#fff;
	                            font-weight:bold;
	                            text-align:center;
	                            line-height:20px;
	                            font-size:10px;
	                            text-transform:uppercase;
                            ]

                            .tdcelda[
	                            background-color:#fff;
	                            text-align:center;
	                            border:1px solid #DBDCDD;
	                            border-top:1px none;
	                            line-height:18px;
                                font-size:11px;
                            ]

                            </style>
                            </head>

                            <body>
                            <table class='content'>
	                            <tr>
		                            <td class='titulo'>cambios en Ficha Intranet Vigente</td>
	                            </tr>
	                            <tr>
		                            <td>
			                            <table cellspacing='0' cellpadding='0' width='100%' border='0' class='table'>
				                            <tr class='trtitulo'>
					                            <td>Código</td>
					                            <td>Nombre</td>
					                            <td>Abreviatura</td>
					                            <td>Empresa</td>
					                            <td>Ubicación</td>
					                            <td>Oculto Intranet Antes</td>
					                            <td>Oculto Intranet Modificación</td>
					                            <td>Usuario modificación</td>
                                                <td>Fecha modificación</td>
				                            </tr>
				                            {0}				                          
			                            </table>
                                        <br />
                                        <br />
		                            </td>
	                            </tr>
                            </table>

                            </body>
                            </html>
                            ";
        }

        #endregion

        #region Envio Correos Manuales

        /// <summary>
        /// Devuelve el listado de correos enviados segun un rango de fechas
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<SiCorreoDTO> ListarCorreosEnviados(string strIdsEmpresa, DateTime fechaInicio, DateTime fechaFin)
        {
            List<SiCorreoDTO> lstSalida = new List<SiCorreoDTO>();
            lstSalida = FactorySic.GetSiCorreoRepository().GetByCriteria(strIdsEmpresa, fechaInicio, fechaFin, ConstantesFichaTecnica.PlantillaCorreosEnviados.ToString()).OrderBy(x => x.Corrasunto).ToList();
            lstSalida = FormatearCorreos(lstSalida);
            return lstSalida;
        }

        /// <summary>
        /// Da formato a los correos
        /// </summary>
        /// <param name="lstCorreos"></param>
        /// <returns></returns>
        public List<SiCorreoDTO> FormatearCorreos(List<SiCorreoDTO> lstCorreos)
        {
            List<SiCorreoDTO> lstSalida = new List<SiCorreoDTO>();

            foreach (var correo in lstCorreos)
            {
                int longitudTexto = correo.Corrasunto.Length;
                correo.CorrasuntoDesc = longitudTexto > 0 ? (longitudTexto > 120 ? correo.Corrasunto.Substring(0, 120) + "..." : correo.Corrasunto) : "";
                correo.CorrfechaenvioDesc = correo.Corrfechaenvio.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                correo.Corrusuenvio = correo.Corrusuenvio != null ? correo.Corrusuenvio : "";
                correo.Emprnomb = correo.Emprnomb != null ? correo.Emprnomb.Trim() : "";
                lstSalida.Add(correo);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de archivos adjuntados
        /// </summary>
        /// <param name="corrcodi"></param>
        /// <returns></returns>
        public List<SiCorreoArchivoDTO> ObtenerArchivosAdjuntados(int corrcodi)
        {
            List<SiCorreoArchivoDTO> lstSalida = new List<SiCorreoArchivoDTO>();
            lstSalida = FactorySic.GetSiCorreoArchivoRepository().GetByCorreos(corrcodi.ToString());

            return lstSalida;
        }


        /// <summary>
        /// Envia Mensajes a los agentes
        /// </summary>
        /// <param name="correo"></param>
        /// <param name="usuario"></param>
        /// <param name="pathTemporal"></param>
        /// <param name="files"></param>
        public void EnviarMensajeAgentes(SiCorreoDTO correo, string usuario, string pathTemporal, List<string> files)
        {

            IDbConnection conn = null;
            DbTransaction tran = null;
            int cbenvcodi = 0;

            string fromEmail = correo.Corrfrom ?? "";

            if (!fromEmail.Contains("@"))
                fromEmail = TipoPlantillaCorreo.MailFrom; //webapp@coes.org.pe

            if (fromEmail == "")
                throw new ArgumentException("No se pudo notificar el evento dado que se encontró un correo Para inválido.");


            string asunto = correo.Corrasunto;
            string contenido = correo.Corrcontenido;


            try
            {
                conn = FactorySic.GetCbArchivoenvioRepository().BeginConnection();
                tran = FactorySic.GetCbArchivoenvioRepository().StartTransaction(conn);

                #region Enviar correos de pruebas



                List<string> toEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(correo.Corrto, false);
                List<string> ccEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(correo.Corrcc, false);
                List<string> bccEmails = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(correo.Corrbcc, true);

                #endregion

                correo.Corrfechaenvio = DateTime.Now;
                correo.Corrfechaperiodo = DateTime.Now;
                correo.Plantcodi = ConstantesFichaTecnica.PlantillaCorreosEnviados;
                correo.Corrusuenvio = usuario;
                int miCorrcodi = FactorySic.GetSiCorreoRepository().Save(correo);

                List<SiCorreoArchivoDTO> lstArchivos = new List<SiCorreoArchivoDTO>();
                List<string> listFiles = new List<string>();
                int num = 0;
                foreach (string file in files)
                {
                    if (!string.IsNullOrEmpty(file))
                    {
                        if (!listFiles.Contains(pathTemporal + file))
                        {
                            listFiles.Add(pathTemporal + file);
                            num++;
                            SiCorreoArchivoDTO objArchivo = new SiCorreoArchivoDTO();

                            objArchivo.Corrcodi = miCorrcodi;
                            objArchivo.Earchnombreoriginal = file;
                            objArchivo.Earchnombrefisico = "archivo_mensaje_agente_FT_" + miCorrcodi + string.Format("{0:D3}", num);
                            objArchivo.Earchorden = num;
                            objArchivo.Earchestado = 1;



                            lstArchivos.Add(objArchivo);
                        }
                    }
                }


                //Guardamos CBArchivoEnvio
                int archcodiCorr = FactorySic.GetSiCorreoArchivoRepository().GetMaxId();
                foreach (var regArchivo in lstArchivos)
                {
                    regArchivo.Earchcodi = archcodiCorr;
                    FactorySic.GetSiCorreoArchivoRepository().Save(regArchivo, conn, tran);
                    archcodiCorr++;
                }


                //Enviamos Correo
                COES.Base.Tools.Util.SendEmail(toEmails, ccEmails, bccEmails, asunto, contenido, fromEmail, listFiles);

                //Copiamos en el fileserver
                #region Guardar archivos en FileServer
                foreach (var regArchivo in lstArchivos)
                {
                    if (!string.IsNullOrEmpty(regArchivo.Earchnombrefisico))
                    {
                        string pathAlternativo = GetPathPrincipal();//C:\FileSystemCOES\ (localdirectory)
                        var pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaArchivoAdjuntado) + miCorrcodi + "\\";// ...Extranet/FichaTecnicaEtapa2/EnvioCorreo/Corrcodi/

                        FileServer.CreateFolder("", pathDestino, pathAlternativo); // para asegurarnos de su existencia
                        var resultado = FileServer.CopiarFileAlter(pathTemporal, pathDestino, regArchivo.Earchnombreoriginal, pathAlternativo);
                        if (resultado != 1)
                        {
                            throw new ArgumentException(string.Format("Ocurrió un error cuando se copia el archivo {0} de {1} a {2}.", regArchivo.Earchnombrefisico, pathTemporal, pathDestino));
                        }
                    }
                }

                #endregion

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                cbenvcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        #endregion

        #region Proyectos

        /// <summary>
        /// Lista a todas las empresas con estado activo
        /// </summary>
        /// <returns></returns>
        public List<EmpresaCoes> ListarEmpresasActivas()
        {
            List<EmpresaCoes> lstSalida = new List<EmpresaCoes>();

            List<SiEmpresaDTO> lstTemp = FactorySic.GetSiEmpresaRepository().ListarPorTipo(-2); // -2 : para que tome todos los tipos 

            foreach (var emp in lstTemp)
            {
                EmpresaCoes e = new EmpresaCoes();
                e.Emprcodi = emp.Emprcodi;
                e.Emprnomb = emp.Emprnomb;

                lstSalida.Add(e);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de tipos de empresas
        /// </summary>
        /// <returns></returns>
        public List<SiTipoempresaDTO> ListarTipoEmpresas()
        {
            List<SiTipoempresaDTO> lstSalida = new List<SiTipoempresaDTO>();

            lstSalida = FactorySic.GetSiTipoempresaRepository().GetByCriteria().OrderBy(x => x.Tipoemprcodi).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Devuelve las empresas segun su tipo
        /// </summary>
        /// <param name="tipoEmpresa"></param>
        /// <returns></returns>
        public List<EmpresaCoes> ObtenerEmpresasPorTipo(int tipoEmpresa)
        {
            List<EmpresaCoes> lstSalida = new List<EmpresaCoes>();

            List<SiEmpresaDTO> lstTemp = FactorySic.GetSiEmpresaRepository().ListarPorTipo(tipoEmpresa).ToList();

            int numE = 0;
            foreach (var emp in lstTemp)
            {
                //if (numE < 1000)
                //{
                EmpresaCoes e = new EmpresaCoes();
                e.Emprcodi = emp.Emprcodi;
                e.Emprnomb = emp.Emprnomb;

                lstSalida.Add(e);
                //}
                //numE++;
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de estudios por empresa
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<EpoEstudioEoDTO> ListarEstudiosEo(int idEmpresa)
        {
            List<EpoEstudioEoDTO> lstSalida = new List<EpoEstudioEoDTO>();
            List<EpoEstudioEoDTO> lstTemp = new List<EpoEstudioEoDTO>();

            lstTemp = FactorySic.GetEpoEstudioEoRepository().ListarPorEmpresa(idEmpresa);
            lstSalida = lstTemp;
            return lstSalida;
        }

        /// <summary>
        /// Devuelve datos del estudio EO
        /// </summary>
        /// <param name="esteocodi"></param>
        /// <returns></returns>
        public EpoEstudioEoDTO ObtenerEstudioEO(int esteocodi)
        {
            return FactorySic.GetEpoEstudioEoRepository().GetById(esteocodi);
        }

        /// <summary>
        /// Lista los proyectos existentes
        /// </summary>
        /// <returns></returns>
        public List<FtExtProyectoDTO> ListarProyectos(string empresa, DateTime fechaIni, DateTime fechaFin)
        {
            List<FtExtProyectoDTO> lstSalida = new List<FtExtProyectoDTO>();

            List<FtExtProyectoDTO> lstPyPorRangoYEmpresa = FactorySic.GetFtExtProyectoRepository().ListarProyectosPorRangoYEmpresa(empresa, fechaIni, fechaFin.AddDays(1));

            foreach (var proyecto in lstPyPorRangoYEmpresa)
            {
                proyecto.FtpryestadoDesc = proyecto.Ftpryestado == "A" ? "Activo" : (proyecto.Ftpryestado == "B" ? "Baja" : "Eliminado");
                proyecto.Ftpryusucreacion = proyecto.Ftpryusucreacion != null ? proyecto.Ftpryusucreacion.Trim() : "";
                proyecto.FechaCreaciónDesc = proyecto.Ftpryfeccreacion != null ? proyecto.Ftpryfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                proyecto.Ftpryusumodificacion = proyecto.Ftpryusumodificacion != null ? proyecto.Ftpryusumodificacion.Trim() : "";
                proyecto.FechaModificacionDesc = proyecto.Ftpryfecmodificacion != null ? proyecto.Ftpryfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";

                lstSalida.Add(proyecto);
            }

            lstSalida = lstSalida.OrderByDescending(x => x.Ftpryfeccreacion).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Devuelve los datos de la empresa y el codigo autogenerado
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public EmpresaCoes ObtenerDatosNuevoEmpresa(int emprcodi)
        {
            EmpresaCoes salida = new EmpresaCoes();
            SiEmpresaDTO emp = GetByIdSiEmpresa(emprcodi);

            salida.Emprcodi = emp.Emprcodi;
            salida.Emprnomb = emp.Emprnomb.Trim();
            salida.Codigo = ObtenerCodigoProyectoAutogenerado();

            return salida;
        }

        /// <summary>
        /// Devuelve el codigo del proyecto autogenerado
        /// </summary>
        /// <returns></returns>
        public string ObtenerCodigoProyectoAutogenerado()
        {
            string salida = "";
            int anio = DateTime.Now.Year;
            List<FtExtProyectoDTO> lstProyectosSinCodigoEO = FactorySic.GetFtExtProyectoRepository().ListarProyectosSinCodigoEOPorAnio(anio);
            int numElementos = lstProyectosSinCodigoEO.Count;

            salida = "NA-" + anio + "-" + string.Format("{0:D3}", (numElementos + 1));

            return salida;
        }

        /// <summary>
        /// Guarda o Actualiza Proyectos
        /// </summary>
        /// <param name="objProyecto"></param>
        /// <param name="conEstudio"></param>
        /// <param name="accion"></param>
        /// <param name="usuario"></param>
        /// <param name="ftprycodi"></param>
        public void GuardarDatosProyecto(FtExtProyectoDTO objProyecto, string conEstudio, int accion, string usuario, int? ftprycodi)
        {
            FtExtProyectoDTO proyGuardar = new FtExtProyectoDTO();
            FtExtProyectoDTO objEditado = new FtExtProyectoDTO();

            //validamos duplicados
            if (accion == ConstantesFichaTecnica.AccionNuevo)
            {
                //Solo se valida con el nombre proyecto extranet
                List<FtExtProyectoDTO> lstProyectosActivos = FactorySic.GetFtExtProyectoRepository().ListarPorEstado("A");
                FtExtProyectoDTO objRepetido = lstProyectosActivos.Find(x => x.Ftprynombre.ToUpper().Trim() == objProyecto.Ftprynombre.ToUpper().Trim());
                if (objRepetido != null)
                {
                    throw new Exception("Ya existe proyecto con el mismo 'Nombre proyecto (Extranet)'.");
                }
            }
            else
            {
                if (accion == ConstantesFichaTecnica.AccionEditar)
                {
                    objEditado = GetByIdFtExtProyecto(ftprycodi.Value);
                    List<FtExtProyectoDTO> lstProyectosActivos = FactorySic.GetFtExtProyectoRepository().ListarPorEstado("A");
                    List<FtExtProyectoDTO> lstProyectoSinEditado = lstProyectosActivos.Where(x => x.Ftprycodi != objEditado.Ftprycodi).ToList();
                    FtExtProyectoDTO objRepetido = lstProyectoSinEditado.Find(x => x.Ftprynombre.ToUpper().Trim() == objProyecto.Ftprynombre.ToUpper().Trim());
                    if (objRepetido != null)
                    {
                        throw new Exception("Ya existe proyecto con el mismo 'Nombre proyecto (Extranet)'.");
                    }
                }
            }

            //preparamos el proyecto a guardar
            objProyecto.Ftpryestado = "A";


            if (accion == ConstantesFichaTecnica.AccionNuevo)
            {
                proyGuardar = objProyecto;
                proyGuardar.Ftpryusucreacion = usuario;
                proyGuardar.Ftpryfeccreacion = DateTime.Now;
                //proyGuardar.Ftpryusumodificacion = usuario;
                //proyGuardar.Ftpryfecmodificacion = DateTime.Now;

                if (conEstudio == "N")
                    proyGuardar.Esteocodi = null;
            }
            else
            {
                if (accion == ConstantesFichaTecnica.AccionEditar)
                {
                    proyGuardar = objEditado;
                    proyGuardar.Ftpryusumodificacion = usuario;
                    proyGuardar.Ftpryfecmodificacion = DateTime.Now;
                    proyGuardar.Ftprynombre = objProyecto.Ftprynombre;

                    if (conEstudio == "N")
                        proyGuardar.Ftpryeonombre = objProyecto.Ftpryeonombre;

                }
            }


            if (accion == ConstantesFichaTecnica.AccionNuevo)
                SaveFtExtProyecto(proyGuardar);
            else
                UpdateFtExtProyecto(proyGuardar);
        }

        /// <summary>
        /// Elimina un registro de proyecto
        /// </summary>
        /// <param name="ftprycodi"></param>
        /// <param name="usuario"></param>
        public void DarBajaProyecto(int ftprycodi, string usuario)
        {
            try
            {
                FtExtProyectoDTO py = GetByIdFtExtProyecto(ftprycodi);
                py.Ftpryestado = "B";
                py.Ftpryusumodificacion = usuario;
                py.Ftpryfecmodificacion = DateTime.Now;

                UpdateFtExtProyecto(py);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// Activa un registro de proyecto
        /// </summary>
        /// <param name="ftprycodi"></param>
        /// <param name="usuario"></param>
        public void ActivarProyecto(int ftprycodi, string usuario)
        {
            try
            {
                //Valido que no haya otro registro con mismo nombre proyecto extranet
                FtExtProyectoDTO py = GetByIdFtExtProyecto(ftprycodi);
                List<FtExtProyectoDTO> lstProyectosActivos = FactorySic.GetFtExtProyectoRepository().ListarPorEstado("A");
                List<FtExtProyectoDTO> lstProyectoSinEditado = lstProyectosActivos.Where(x => x.Ftprycodi != py.Ftprycodi).ToList();
                FtExtProyectoDTO objRepetido = lstProyectoSinEditado.Find(x => x.Ftprynombre.ToUpper().Trim() == py.Ftprynombre.ToUpper().Trim());
                if (objRepetido != null)
                {
                    throw new Exception("Existe otro proyecto con el mismo 'Nombre proyecto (Extranet)'.");
                }


                py.Ftpryestado = "A";
                py.Ftpryusumodificacion = usuario;
                py.Ftpryfecmodificacion = DateTime.Now;

                UpdateFtExtProyecto(py);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }
        }


        /// <summary>
        /// Genera el archivo a exportar con el listado de proyectos
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pathLogo"></param>
        /// <param name="nameFile"></param>
        /// <param name="empresa"></param>
        /// <param name="rangoIni"></param>
        /// <param name="rangoFin"></param>
        public void GenerarExportacionProyectos(string ruta, string pathLogo, string nameFile, string empresa, DateTime rangoIni, DateTime rangoFin)
        {
            List<FtExtProyectoDTO> listaPyTotales = ListarProyectos(empresa, rangoIni, rangoFin);

            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelPE(xlPackage, pathLogo, listaPyTotales);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera la estructura de la tabla a exportar
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="listaPyTotales"></param>
        private void GenerarArchivoExcelPE(ExcelPackage xlPackage, string pathLogo, List<FtExtProyectoDTO> listaPyTotales)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();

            string nameWS = "REPORTE";
            string titulo = "LISTADO DE PROYECTOS";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniTable = colIniTitulo;
            int rowIniTabla = rowIniTitulo + 2;

            int colEmpresa = colIniTable;
            int colCodigo = colIniTable + 1;
            int colNombProy = colIniTable + 2;
            int colNombProyExt = colIniTable + 3;
            int colEstado = colIniTable + 4;
            int colUsuarioCreacion = colIniTable + 5;
            int colFechaCreacion = colIniTable + 6;
            int colUsuarioModificacion = colIniTable + 7;
            int colFechaModificacion = colIniTable + 8;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            servFormato.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaModificacion);
            servFormato.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaModificacion);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaModificacion, "Centro");
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaModificacion, "Calibri", 16);

            ws.Row(rowIniTabla).Height = 25;
            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colCodigo].Value = "Código Estudio (EO)";
            ws.Cells[rowIniTabla, colNombProy].Value = "Nombre del Proyecto";
            ws.Cells[rowIniTabla, colNombProyExt].Value = "Nombre del Proyecto (Extranet)";
            ws.Cells[rowIniTabla, colEstado].Value = "Estado";
            ws.Cells[rowIniTabla, colUsuarioCreacion].Value = "Usuario Creación";
            ws.Cells[rowIniTabla, colFechaCreacion].Value = "Fecha de Creación";
            ws.Cells[rowIniTabla, colUsuarioModificacion].Value = "Usuario Modificación";
            ws.Cells[rowIniTabla, colFechaModificacion].Value = "Fecha de Modificación";

            //Estilos cabecera
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colEmpresa, rowIniTabla, colFechaModificacion, "Calibri", 11);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colEmpresa, rowIniTabla, colFechaModificacion, "Centro");
            servFormato.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colEmpresa, rowIniTabla, colFechaModificacion, "Centro");
            servFormato.CeldasExcelColorFondo(ws, rowIniTabla, colEmpresa, rowIniTabla, colFechaModificacion, "#2980B9");
            servFormato.CeldasExcelColorTexto(ws, rowIniTabla, colEmpresa, rowIniTabla, colFechaModificacion, "#FFFFFF");
            servFormato.BorderCeldas2(ws, rowIniTabla, colEmpresa, rowIniTabla, colFechaModificacion);
            servFormato.CeldasExcelEnNegrita(ws, rowIniTabla, colEmpresa, rowIniTabla, colFechaModificacion);

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaPyTotales)
            {
                ws.Cells[rowData, colEmpresa].Value = item.Emprnomb.Trim();
                ws.Cells[rowData, colCodigo].Value = item.Ftpryeocodigo;
                ws.Cells[rowData, colNombProy].Value = item.Ftpryeonombre;
                ws.Cells[rowData, colNombProyExt].Value = item.Ftprynombre;
                ws.Cells[rowData, colEstado].Value = item.FtpryestadoDesc;
                ws.Cells[rowData, colUsuarioCreacion].Value = item.Ftpryusucreacion;
                ws.Cells[rowData, colFechaCreacion].Value = item.FechaCreaciónDesc;
                ws.Cells[rowData, colUsuarioModificacion].Value = item.Ftpryusumodificacion;
                ws.Cells[rowData, colFechaModificacion].Value = item.FechaModificacionDesc;

                if (item.Ftpryestado == "B")
                {
                    servFormato.CeldasExcelColorFondo(ws, rowData, colEmpresa, rowData, colFechaModificacion, "#FFDDDD");
                }

                rowData++;
            }

            if (!listaPyTotales.Any()) rowData++;

            //Estilos registros
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colFechaModificacion, "Calibri", 8);
            servFormato.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colFechaModificacion, "Centro");
            servFormato.BorderCeldas2(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colFechaModificacion);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colFechaModificacion, "Centro");

            #endregion

            //filter           
            ws.Cells[rowIniTabla, colEmpresa, rowData, colFechaModificacion].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        #endregion

        #region Formato Extranet

        /// <summary>
        /// Guarda o Actualiza el Evento y sus requisitos
        /// </summary>
        /// <param name="objEvento"></param>
        /// <param name="accion"></param>
        /// <param name="usuario"></param>
        /// <param name="ftevcodi"></param>
        /// <param name="listaData"></param>
        public void GuardarDatosEvento(FtExtEventoDTO objEvento, int accion, string usuario, int? ftevcodi, List<FtExtEventoReqDTO> listaData)
        {
            FtExtEventoDTO eventGuardar = new FtExtEventoDTO();
            FtExtEventoDTO objEditado = new FtExtEventoDTO();

            //preparamos el proyecto a guardar
            objEvento.Ftevestado = ConstantesFichaTecnica.EstadoStrActivo;


            if (accion == ConstantesFichaTecnica.AccionNuevo)
            {
                eventGuardar = objEvento;
                eventGuardar.Ftevusucreacion = usuario;
                eventGuardar.Ftevfeccreacion = DateTime.Now;

            }
            else
            {
                if (accion == ConstantesFichaTecnica.AccionEditar)
                {
                    objEditado = GetByIdFtExtEvento(ftevcodi.Value);
                    eventGuardar = objEditado;
                    eventGuardar.Ftevusumodificacion = usuario;
                    eventGuardar.Ftevfecmodificacion = DateTime.Now;
                    eventGuardar.Ftevnombre = objEvento.Ftevnombre;
                    eventGuardar.Ftevfecvigenciaext = objEvento.Ftevfecvigenciaext;

                }
            }

            if (accion == ConstantesFichaTecnica.AccionNuevo)
            {
                int i = SaveFtExtEvento(eventGuardar);
                foreach (var obj in listaData)
                {
                    FtExtEventoReqDTO entity = new FtExtEventoReqDTO();
                    entity.Ftevcodi = i;
                    entity.Fevrqliteral = obj.Fevrqliteral;
                    entity.Fevrqdesc = obj.Fevrqdesc;
                    entity.Fevrqflaghidro = obj.Fevrqflaghidro;
                    entity.Fevrqflagtermo = obj.Fevrqflagtermo;
                    entity.Fevrqflagsolar = obj.Fevrqflagsolar;
                    entity.Fevrqflageolico = obj.Fevrqflageolico;
                    entity.Fevrqestado = ConstantesFichaTecnica.EstadoStrActivo;
                    SaveFtExtEventoReq(entity);
                }
            }
            else
            {
                UpdateFtExtEvento(eventGuardar);
                foreach (var obj in listaData)
                {
                    if (obj.Nuevo == ConstantesFichaTecnica.AccionNuevo)
                    {
                        FtExtEventoReqDTO entity = new FtExtEventoReqDTO();
                        entity.Ftevcodi = (int)ftevcodi;
                        entity.Fevrqliteral = obj.Fevrqliteral;
                        entity.Fevrqdesc = obj.Fevrqdesc;
                        entity.Fevrqflaghidro = obj.Fevrqflaghidro;
                        entity.Fevrqflagtermo = obj.Fevrqflagtermo;
                        entity.Fevrqflagsolar = obj.Fevrqflagsolar;
                        entity.Fevrqflageolico = obj.Fevrqflageolico;
                        entity.Fevrqestado = ConstantesFichaTecnica.EstadoStrActivo;
                        SaveFtExtEventoReq(entity);
                    }
                    else
                    {
                        if (obj.Nuevo == ConstantesFichaTecnica.AccionEliminar)
                        {
                            var aux = GetByIdFtExtEventoReq(obj.Fevrqcodi);
                            obj.Fevrqliteral = aux.Fevrqliteral;
                            obj.Ftevcodi = aux.Ftevcodi;
                            obj.Fevrqliteral = aux.Fevrqliteral;
                            obj.Fevrqdesc = aux.Fevrqdesc;
                            obj.Fevrqflaghidro = aux.Fevrqflaghidro;
                            obj.Fevrqflagtermo = aux.Fevrqflagtermo;
                            obj.Fevrqflagsolar = aux.Fevrqflagsolar;
                            obj.Fevrqflageolico = aux.Fevrqflageolico;
                            obj.Fevrqestado = ConstantesFichaTecnica.EstadoStrBaja;
                            UpdateFtExtEventoReq(obj);
                        }
                        else
                        {
                            UpdateFtExtEventoReq(obj);
                        }

                    }

                }
            }
        }

        /// <summary>
        /// Genera el archivo a exportar con el listado de eventos
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pathLogo"></param>
        /// <param name="nameFile"></param>        
        public void GenerarExportacionEventos(string ruta, string pathLogo, string nameFile)
        {
            List<FtExtEventoDTO> listaeventos = GetByCriteriaFtExtEventos();

            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelEventos(xlPackage, pathLogo, listaeventos);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera la estructura de la tabla a exportar
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="listaeventos"></param>
        private void GenerarArchivoExcelEventos(ExcelPackage xlPackage, string pathLogo, List<FtExtEventoDTO> listaeventos)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();

            string nameWS = "REPORTE";
            string titulo = "LISTADO DE EVENTOS";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniTable = colIniTitulo;
            int rowIniTabla = rowIniTitulo + 2;


            int colCodigo = colIniTable;
            int colNombEve = colIniTable + 1;
            int colEstadoExt = colIniTable + 2;
            int colEstadoVig = colIniTable + 3;
            int colUsuarioCreacion = colIniTable + 4;
            int colFechaCreacion = colIniTable + 5;
            int colUsuarioModificacion = colIniTable + 6;
            int colFechaModificacion = colIniTable + 7;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            servFormato.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaModificacion);
            servFormato.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaModificacion);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaModificacion, "Centro");
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colFechaModificacion, "Calibri", 16);

            ws.Row(rowIniTabla).Height = 25;
            ws.Cells[rowIniTabla, colCodigo].Value = "Código";
            ws.Cells[rowIniTabla, colNombEve].Value = "Nombre";
            ws.Cells[rowIniTabla, colEstadoExt].Value = "Estado actual Extranet";
            ws.Cells[rowIniTabla, colEstadoVig].Value = "Fecha de vigencia Extranet";
            ws.Cells[rowIniTabla, colUsuarioCreacion].Value = "Usuario Creación";
            ws.Cells[rowIniTabla, colFechaCreacion].Value = "Fecha de Creación";
            ws.Cells[rowIniTabla, colUsuarioModificacion].Value = "Usuario Modificación";
            ws.Cells[rowIniTabla, colFechaModificacion].Value = "Fecha de Modificación";

            //Estilos cabecera
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaModificacion, "Calibri", 11);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaModificacion, "Centro");
            servFormato.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaModificacion, "Centro");
            servFormato.CeldasExcelColorFondo(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaModificacion, "#2980B9");
            servFormato.CeldasExcelColorTexto(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaModificacion, "#FFFFFF");
            servFormato.BorderCeldas2(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaModificacion);
            servFormato.CeldasExcelEnNegrita(ws, rowIniTabla, colCodigo, rowIniTabla, colFechaModificacion);

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaeventos)
            {
                ws.Cells[rowData, colCodigo].Value = item.Ftevcodi;
                ws.Cells[rowData, colNombEve].Value = item.Ftevnombre;
                ws.Cells[rowData, colEstadoExt].Value = item.EstadoActual;
                ws.Cells[rowData, colEstadoVig].Value = item.FtevfecvigenciaextDesc;
                ws.Cells[rowData, colUsuarioCreacion].Value = item.Ftevusucreacion;
                ws.Cells[rowData, colFechaCreacion].Value = item.FtevfeccreacionDesc;
                ws.Cells[rowData, colUsuarioModificacion].Value = item.Ftevusumodificacion;
                ws.Cells[rowData, colFechaModificacion].Value = item.FtevfecmodificacionDesc;

                rowData++;
            }

            if (!listaeventos.Any()) rowData++;

            //Estilos registros
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaModificacion, "Calibri", 8);
            servFormato.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaModificacion, "Centro");
            servFormato.BorderCeldas2(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaModificacion);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colFechaModificacion, "Centro");

            #endregion

            //filter           
            ws.Cells[rowIniTabla, colCodigo, rowData, colFechaModificacion].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        #endregion

        #region Asignación de proyectos Extranet

        /// <summary>
        /// Listado de ubicaciones
        /// </summary>
        /// <returns></returns>
        public List<EqAreaDTO> ListarUbicacionesFT()
        {
            return FactorySic.GetEqAreaRepository().ListarComboUbicacionesXEmpresa("0");
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtRelempetapa 
        /// </summary>
        /// <param name="sEmpresa"></param>
        /// <param name="idetapa"></param>
        /// <returns></returns>
        public List<FtExtRelempetapaDTO> ListarAsignacionProyExtranet(string sEmpresa, int idetapa)
        {
            if (sEmpresa.Length > 4000) sEmpresa = "-1"; // si supera el máx permitido en BD
            var lista = ListarProyectosAsignadosByFiltros(sEmpresa, idetapa);

            //formatea listado
            foreach (var obj in lista)
            {
                obj.Fetempusucreacion = obj.Fetempusucreacion != null ? obj.Fetempusucreacion : "";
                obj.StrFetempfeccreacion = obj.Fetempfeccreacion != null ? obj.Fetempfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                obj.Fetempusumodificacion = obj.Fetempusumodificacion != null ? obj.Fetempusumodificacion : "";
                obj.StrFetempfecmodificacion = obj.Fetempfecmodificacion != null ? obj.Fetempfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
            }
            return lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.Ftetnombre).ToList();
        }

        /// <summary>
        /// Elimina un registro de proyecto asignado
        /// </summary>
        /// <param name="estado"></param>
        /// <param name="fetempcodi"></param>
        /// <param name="usuario"></param>
        public void DarAlta_BajaProyectoAsignado(int fetempcodi, string usuario, string estado)
        {
            try
            {
                FtExtRelempetapaDTO py = GetByIdFtExtRelempetapa(fetempcodi);
                py.Fetempestado = estado;
                py.Fetempusumodificacion = usuario;
                py.Fetempfecmodificacion = DateTime.Now;
                UpdateFtExtRelempetapa(py);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// Guarda o Actualiza la asignación de proyectos a Extranet
        /// </summary>
        /// <param name="objProyecto"></param>
        /// <param name="accion"></param>
        /// <param name="usuario"></param>
        /// <param name="idproyecto"></param>        
        public void GuardarDatosProtectoAsignado(FtExtRelempetapaDTO objProyecto, int accion, string usuario, int idproyecto)
        {
            FtExtRelempetapaDTO objGuardar = new FtExtRelempetapaDTO();
            FtExtRelempetapaDTO objEditado = new FtExtRelempetapaDTO();

            //preparamos el proyecto a guardar
            objProyecto.Fetempestado = ConstantesFichaTecnica.EstadoStrActivo;


            if (accion == ConstantesFichaTecnica.AccionNuevo)
            {
                objGuardar = objProyecto;
                objGuardar.Fetempusucreacion = usuario;
                objGuardar.Fetempfeccreacion = DateTime.Now;
                SaveFtExtRelempetapa(objGuardar);
            }
            else
            {
                if (accion == ConstantesFichaTecnica.AccionEditar)
                {
                    objEditado = GetByIdFtExtRelempetapa(idproyecto);
                    objGuardar = objEditado;
                    objGuardar.Emprcodi = objProyecto.Emprcodi;
                    objGuardar.Ftetcodi = objProyecto.Ftetcodi;
                    objGuardar.Fetempusumodificacion = usuario;
                    objGuardar.Fetempfecmodificacion = DateTime.Now;
                    UpdateFtExtRelempetapa(objGuardar);
                }
            }
        }

        /// <summary>
        /// Guarda los datos del popup
        /// </summary>
        /// <param name="accion"></param>
        /// <param name="fetempcodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="idetapa"></param>
        /// <param name="lstProyectos"></param>
        /// <param name="lstCambiosCIO"></param>
        /// <param name="lstElementos"></param>
        /// <param name="usuario"></param>
        public void GuardarDatosProyectoYRelaciones(int accion, int fetempcodi, int emprcodi, int idetapa, List<FtExtEtempdetpryDTO> lstProyectos, List<FTRelacionEGP> lstCambiosCIO, List<FTRelacionEGP> lstElementos, string usuario)
        {
            try
            {
                //Obtenemos la informacion a guardar
                FtExtRelempetapaDTO objRelEE = ObtenerInfoParaGuardar(accion, fetempcodi, emprcodi, idetapa, lstProyectos, lstCambiosCIO, lstElementos, usuario);

                GuardarActualizarDatosProyectoYRelacionesTransaccionalmente(accion, idetapa, objRelEE);

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }

        }

        /// <summary>
        /// valida la no duplicidad de relacion empresa-etapa, y que todos los proyectos tengan elementos
        /// </summary>
        /// <param name="lstProyectos"></param>
        /// <param name="emprcodi"></param>
        /// <param name="idetapa"></param>
        /// <param name="accion"></param>
        /// <returns></returns>
        public string ValidarDuplicidadYProyectosYExistenciaCambios(List<FtExtEtempdetpryDTO> lstProyectos, List<FTRelacionEGP> lstCambiosCIO, List<FTRelacionEGP> lstElementos, int emprcodi, int idetapa, int accion)
        {
            string salida = "";

            if (accion == ConstantesFichaTecnica.AccionNuevo)
            {
                //valida la no duplicidad de relacion empresa-etapa
                List<FtExtRelempetapaDTO> ListaRelacionesActivas = FactorySic.GetFtExtRelempetapaRepository().GetByCriteriaProyAsigByFiltros(emprcodi.ToString(), idetapa).Where(x => x.Fetempestado == ConstantesFichaTecnica.EstadoStrActivo).ToList();

                if (ListaRelacionesActivas.Any())
                {
                    salida += "<p>Ya existe una asignación de proyecto activa para dicha relación (empresa-etapa).</p>";
                }
            }
            else //valido que haya minimo 1 a guardar y que haya cambios al guardar edición
            {



                // valido que haya cambios
                FtExtRelempetapaDTO objEmpEtapa = FactorySic.GetFtExtRelempetapaRepository().GetByCriteriaProyAsigByFiltros(emprcodi.ToString(), idetapa).Find(x => x.Fetempestado == ConstantesFichaTecnica.EstadoStrActivo);
                bool hayCambios = false;

                if (idetapa == ConstantesFichaTecnica.EtapaConexion || idetapa == ConstantesFichaTecnica.EtapaIntegracion || idetapa == ConstantesFichaTecnica.EtapaOperacionComercial)
                {

                    //primero valido que haya datos minimo 1
                    if (lstProyectos.Count == 0)
                    {
                        salida += "<p>Debe  ingresar al menos un proyecto.</p>";
                        hayCambios = true; // solo para que no valide cambios.
                    }
                    else
                    {
                        List<FtExtEtempdetpryDTO> lstPys = objEmpEtapa != null ? FactorySic.GetFtExtEtempdetpryRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.EstadoStrActivo, objEmpEtapa.Fetempcodi) : new List<FtExtEtempdetpryDTO>();

                        hayCambios = ExistenCambiosEntreProyectos(lstProyectos, lstPys, lstCambiosCIO, emprcodi, idetapa);
                    }




                }
                else
                {
                    if (idetapa == ConstantesFichaTecnica.EtapaModificacion)
                    {
                        //primero valido que haya datos minimo 1
                        if (lstElementos.Count == 0)
                        {
                            salida += "<p>Debe  ingresar al menos un equipo.</p>";
                            hayCambios = true; // solo para que no valide cambios.
                        }
                        else
                        {
                            //Verifico cambios en los registros
                            List<FtExtEtempdeteqDTO> lstRegEq = objEmpEtapa != null ? FactorySic.GetFtExtEtempdeteqRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.EstadoStrActivo, objEmpEtapa.Fetempcodi) : new List<FtExtEtempdeteqDTO>();

                            int numElementosWeb = lstElementos.Count();
                            int numElementosBD = lstRegEq.Count();

                            if (numElementosWeb != numElementosBD)
                            {
                                hayCambios = true;
                            }
                            else
                            {
                                foreach (var item in lstRegEq)
                                {
                                    FTRelacionEGP objEl = lstElementos.Find(x => x.Emprcodi == item.Emprcodi && x.Equicodi == item.Equicodi && x.Grupocodi == item.Grupocodi);

                                    if (objEl == null)
                                    {
                                        hayCambios = true;
                                    }
                                    else
                                    {
                                        //reviso si cambio su flag
                                        if (objEl.EditoFlag == "S")
                                        {
                                            hayCambios = true;
                                        }

                                        if (objEl.FlagCentralCOES != item.Feeeqflagcentral)
                                        {
                                            hayCambios = true;
                                        }
                                    }
                                }
                            }
                        }

                    }
                }

                if (!hayCambios)
                {
                    salida += "<p>No se detectó cambios. Para actualizar la información se requiere algún cambio en la información.</p>";
                }
            }

            //valido que todos los proyectos tengan equipos (minimo 1)
            List<string> lstProySinEquipos = new List<string>();
            foreach (var proy in lstProyectos)
            {

                List<FTRelacionEGP> lstElementosPorProyecto = ObtenerMOYEquiposRelacionadosAlProyecto(proy.Feeprycodi, proy.Ftprycodi, emprcodi, idetapa);
                if (!lstElementosPorProyecto.Any())
                {
                    lstProySinEquipos.Add(proy.CodigoProy.Trim());
                    //
                }
            }
            if (lstProySinEquipos.Any())
            {
                string cad = string.Join(", ", lstProySinEquipos);
                salida += "<p>El/Los siguiente(s) proyecto(s) no contiene(n) equipo(s): " + cad + ".</p>";
            }


            return salida;
        }

        /// <summary>
        /// Compara si dos registros tienen cambios o son iguales
        /// </summary>
        /// <param name="lstProyectosEnWeb"></param>
        /// <param name="lstProyectosEnBD"></param>
        /// <param name="lstCambiosCIO"></param>
        /// <returns></returns>
        public bool ExistenCambiosEntreProyectos(List<FtExtEtempdetpryDTO> lstProyectosEnWeb, List<FtExtEtempdetpryDTO> lstProyectosEnBD, List<FTRelacionEGP> lstCambiosCIO, int emprcodi, int idEtapa)
        {
            bool salida = false;

            int numPyWeb = lstProyectosEnWeb.Count();
            int numPyBD = lstProyectosEnBD.Count();

            if (numPyBD != numPyWeb)
            {
                salida = true;
            }
            else //Si la cantidad de proyectos son iguales (web como BD)
            {
                foreach (FtExtEtempdetpryDTO proyBD in lstProyectosEnBD)
                {
                    int ftPryCodi = proyBD.Ftprycodi;

                    //busco en los proyectos de la web
                    FtExtEtempdetpryDTO py = lstProyectosEnWeb.Find(x => x.Ftprycodi == ftPryCodi);
                    if (py == null) //si el proyecto esta en BD pero no en WEB, hay diferencia
                    {
                        salida = true;
                    }
                    else //si el proyecto esta tanto en la bd como en la web verifico si tuvo cambios
                    {
                        //Primero verifico que tengan los mismo elementos
                        //X eso hallo los equipos relacionados al proy actuales
                        List<FTRelacionEGP> lstElementos = ObtenerMOYEquiposRelacionadosAlProyecto(proyBD.Feeprycodi, proyBD.Ftprycodi, emprcodi, idEtapa);
                        List<int> lstIdElementos = lstElementos.Where(x => x.Codigo != "").Select(x => int.Parse(x.Codigo)).Distinct().ToList();

                        //ahora busco las relaciones almacenadas en BD
                        List<FtExtEtempdetpryeqDTO> lstpyeq = FactorySic.GetFtExtEtempdetpryeqRepository().ListarDetallesPorRelEmpresaEtapaProyecto(ConstantesFichaTecnica.EstadoStrActivo, ConstantesFichaTecnica.EstadoStrActivo, proyBD.Feeprycodi);
                        List<int> lstIdElementosREquicodis = lstpyeq.Where(x => x.Equicodi != null).Select(x => x.Equicodi.Value).Distinct().ToList();
                        List<int> lstIdElementosRGrupocodis = lstpyeq.Where(x => x.Grupocodi != null).Select(x => x.Grupocodi.Value).Distinct().ToList();
                        List<int> lstIdElementosREl = new List<int>();
                        lstIdElementosREl.AddRange(lstIdElementosREquicodis);
                        lstIdElementosREl.AddRange(lstIdElementosRGrupocodis);

                        //Verifico si tienen mismo equipos
                        List<int> lstDiferencia = (List<int>)lstIdElementos.Except(lstIdElementosREl).ToList();
                        List<int> lstDiferencia2 = (List<int>)lstIdElementosREl.Except(lstIdElementos).ToList();

                        if (lstDiferencia.Any() || lstDiferencia2.Any())
                        {
                            salida = true;
                        }
                        else //si tienen los mismo elementos
                        {
                            //Reviso cambios en los checks
                            if (lstpyeq.Any())
                            {
                                foreach (var objpyeq in lstpyeq)
                                {
                                    FTRelacionEGP objCambio = lstCambiosCIO.Find(x => x.Emprcodi == objpyeq.Emprcodi && x.Equicodi == objpyeq.Equicodi && x.Grupocodi == objpyeq.Grupocodi);

                                    if (objCambio != null)
                                    {
                                        salida = true;
                                    }
                                }
                            }
                        }


                    }
                }
            }

            return salida;
        }

        /// <summary>
        /// valida que no haya otra relacion empresa-etapa activa
        /// </summary>
        /// <param name="fetempcodi"></param>
        /// <param name="opt"></param>
        /// <returns></returns>
        public string ValidarActivacionEmpresaEtapa(int fetempcodi, int opt)
        {
            string salida = "";

            if (opt == 1) //cuando sea activacion
            {
                FtExtRelempetapaDTO relacion = GetByIdFtExtRelempetapa(fetempcodi);

                List<FtExtRelempetapaDTO> ListaRelacionesActivas = FactorySic.GetFtExtRelempetapaRepository().GetByCriteriaProyAsigByFiltros(relacion.Emprcodi.ToString(), relacion.Ftetcodi).Where(x => x.Fetempestado == ConstantesFichaTecnica.EstadoStrActivo).ToList();

                if (ListaRelacionesActivas.Any())
                {
                    salida += "Ya existe una asignación de proyecto activa para dicha relación (empresa-etapa).";
                }
            }

            return salida;
        }

        /// <summary>
        /// Elabora los objetos a almacenar
        /// </summary>
        /// <param name="accion"></param>
        /// <param name="fetempcodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="idetapa"></param>
        /// <param name="lstProyectos"></param>
        /// <param name="lstCambiosCIO"></param>
        /// <param name="lstElementos"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        private FtExtRelempetapaDTO ObtenerInfoParaGuardar(int accion, int fetempcodi, int emprcodi, int idetapa, List<FtExtEtempdetpryDTO> lstProyectos, List<FTRelacionEGP> lstCambiosCIO, List<FTRelacionEGP> lstElementos, string usuario)
        {
            FtExtRelempetapaDTO objSalida = new FtExtRelempetapaDTO();

            if (accion == ConstantesFichaTecnica.AccionNuevo)
            {
                objSalida.Emprcodi = emprcodi;
                objSalida.Ftetcodi = idetapa;
                //objSalida.Fetempcodi { get; set; } //codigo
                objSalida.Fetempusucreacion = usuario;
                objSalida.Fetempfeccreacion = DateTime.Now;
                //objSalida.Fetempusumodificacion { get; set; } 
                //objSalida.Fetempfecmodificacion { get; set; } 
                objSalida.Fetempestado = ConstantesFichaTecnica.EstadoStrActivo;

                if (idetapa == ConstantesFichaTecnica.EtapaConexion || idetapa == ConstantesFichaTecnica.EtapaIntegracion || idetapa == ConstantesFichaTecnica.EtapaOperacionComercial)
                {
                    //Obtenemos informacion del listado de proyectos
                    List<FtExtEtempdetpryDTO> lstPy = new List<FtExtEtempdetpryDTO>();
                    foreach (var proy in lstProyectos)
                    {
                        int idProy = proy.Ftprycodi;
                        List<FtExtEtempdetpryeqDTO> lstElementosActualesPorProy = ObtenerElementosActualesDelProyecto(emprcodi, idetapa, idProy);

                        //Preparamos el proyecto a guardar
                        FtExtEtempdetpryDTO objP = new FtExtEtempdetpryDTO();
                        //objP.Fetempcodi { get; set; } 
                        //objP.Feeprycodi { get; set; }  //codigo
                        objP.Ftprycodi = idProy;
                        objP.Feepryestado = ConstantesFichaTecnica.EstadoStrActivo;


                        List<FtExtEtempdetpryeqDTO> lstCmb = new List<FtExtEtempdetpryeqDTO>();

                        foreach (var elemento in lstElementosActualesPorProy)
                        {
                            //Verifico si usuario cambio su flag
                            FTRelacionEGP cambio = lstCambiosCIO.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi && x.Ftprycodi == idProy);

                            //genero para guardar
                            FtExtEtempdetpryeqDTO objC = new FtExtEtempdetpryeqDTO();

                            //objC.Feeprycodi { get; set; } 
                            objC.Equicodi = elemento.Equicodi;
                            objC.Grupocodi = elemento.Grupocodi;
                            objC.Feepeqestado = "A";
                            //objC.Feepeqcodi { get; set; } //Codigo
                            objC.Feepeqflagsistema = VerificarSiUnidadPerteneceOtraEtapa(elemento.Equicodi, elemento.Grupocodi, idetapa);

                            if (cambio != null)
                            {
                                objC.Feepeqflagotraetapa = cambio.FlagEquipoOtroEtapa;
                                objC.Feepequsucreacion = usuario;
                                objC.Feepeqfeccreacion = DateTime.Now;
                                //objC.Feepequsumodificacion { get; set; } 
                                //objC.Feepeqfecmodificacion { get; set; } 
                            }


                            lstCmb.Add(objC);
                        }

                        //guardamos todos los elementos del proyecto (incluye sus cambios)
                        objP.ListaCambiosGuardar = lstCmb;

                        lstPy.Add(objP);
                    }

                    objSalida.ListaProyectosGuardar = lstPy;
                }
                else
                {
                    if (idetapa == ConstantesFichaTecnica.EtapaModificacion)
                    {
                        //Obtenemos informacion del listado de elementos (equipos/grupos)
                        List<FtExtEtempdeteqDTO> lstEL = new List<FtExtEtempdeteqDTO>();
                        foreach (FTRelacionEGP elemento in lstElementos)
                        {
                            FtExtEtempdeteqDTO objP = new FtExtEtempdeteqDTO();

                            //objP.Fetempcodi { get; set; }
                            objP.Grupocodi = elemento.Grupocodi;
                            objP.Equicodi = elemento.Equicodi;
                            //objP.Feeeqcodi { get; set; }  //id
                            objP.Feeeqestado = ConstantesFichaTecnica.EstadoStrActivo;
                            objP.Feeeqflagsistema = VerificarSiUnidadPerteneceOtraEtapa(elemento.Equicodi, elemento.Grupocodi, idetapa);
                            objP.Feeeqflagcentral = elemento.FlagCentralCOES;// flag central

                            if (elemento.EditoFlag == "S")
                            {
                                objP.Feeeqflagotraetapa = elemento.FlagEquipoOtroEtapa;
                                objP.Feeequsucreacion = usuario;
                                objP.Feeeqfeccreacion = DateTime.Now;
                                //objP.Feeequsumodificacion { get; set; }
                                //objP.Feeeqfecmodificacion { get; set; }
                            }


                            lstEL.Add(objP);
                        }

                        objSalida.ListaElementosGuardar = lstEL;
                    }
                }


            }
            else
            {
                if (accion == ConstantesFichaTecnica.AccionEditar)
                {
                    objSalida = GetByIdFtExtRelempetapa(fetempcodi);
                    objSalida.Fetempusumodificacion = usuario;
                    objSalida.Fetempfecmodificacion = DateTime.Now;
                    objSalida.ListaProyectos = new List<FtExtEtempdetpryDTO>();
                    objSalida.ListaProyectosGuardar = new List<FtExtEtempdetpryDTO>();
                    objSalida.ListaProyectosActualizar = new List<FtExtEtempdetpryDTO>();
                    objSalida.ListaElementos = new List<FtExtEtempdeteqDTO>();
                    objSalida.ListaElementosGuardar = new List<FtExtEtempdeteqDTO>();
                    objSalida.ListaElementosActualizar = new List<FtExtEtempdeteqDTO>();

                    if (idetapa == ConstantesFichaTecnica.EtapaConexion || idetapa == ConstantesFichaTecnica.EtapaIntegracion || idetapa == ConstantesFichaTecnica.EtapaOperacionComercial)
                    {
                        List<int> listaProyectoTomadosEnCuenta = new List<int>();
                        List<int> listaIdProyectosDeTabla = lstProyectos.Select(x => x.Ftprycodi).ToList();
                        List<FtExtEtempdetpryDTO> lstTotalRelProyectosEnBD = FactorySic.GetFtExtEtempdetpryRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.PorDefecto.ToString(), objSalida.Fetempcodi);
                        List<FtExtEtempdetpryDTO> lstRelProyectosActivosEnBD = lstTotalRelProyectosEnBD.Where(x => x.Feepryestado == ConstantesFichaTecnica.EstadoStrActivo).ToList();
                        List<FtExtEtempdetpryDTO> lstRelProyectosEnBajaEnBD = lstTotalRelProyectosEnBD.Where(x => x.Feepryestado == ConstantesFichaTecnica.EstadoStrBaja).ToList();

                        //Obtengo los proyectos a guardar (que no estan en BD ni con estado A  ni con estado B) y los proyectos a cambiar de estado (ya sean activados o dados en baja)

                        #region ACTUALIZACION  (ACTIVACION)
                        //Obtengo los proyectos a actualizar (caso ACTIVACION DE PROYECTOS)  Para casos que en ASIGNACION DE PROYECTOS ya exista registros que usen proyectos que estan en estado BAJA                      
                        List<FtExtEtempdetpryDTO> lstProyActivar = lstRelProyectosEnBajaEnBD.Where(x => listaIdProyectosDeTabla.Contains(x.Ftprycodi)).ToList();
                        foreach (FtExtEtempdetpryDTO proyAAct in lstProyActivar)
                        {
                            List<FtExtEtempdetpryeqDTO> lstElementosActualesPorProy = ObtenerElementosActualesDelProyecto(emprcodi, idetapa, proyAAct.Ftprycodi);

                            //seteo que dicho proyecto es tomado en cuenta
                            listaProyectoTomadosEnCuenta.Add(proyAAct.Ftprycodi);

                            //empiezo armar
                            List<FtExtEtempdetpryeqDTO> lstGuardarDet = new List<FtExtEtempdetpryeqDTO>();
                            List<FtExtEtempdetpryeqDTO> lstActualizarDet = new List<FtExtEtempdetpryeqDTO>();

                            int idProy = proyAAct.Ftprycodi;
                            int miFeeprycodi = proyAAct.Feeprycodi;

                            proyAAct.Feepryestado = ConstantesFichaTecnica.EstadoStrActivo;

                            List<FtExtEtempdetpryeqDTO> lstDetallesEnBDActivo = FactorySic.GetFtExtEtempdetpryeqRepository().ListarPorRelProyectoEtapaEmpresa(miFeeprycodi, ConstantesFichaTecnica.EstadoStrActivo);
                            List<FtExtEtempdetpryeqDTO> lstDetallesEnBDDeBaja = FactorySic.GetFtExtEtempdetpryeqRepository().ListarPorRelProyectoEtapaEmpresa(miFeeprycodi, ConstantesFichaTecnica.EstadoStrBaja);


                            //Actualizamos los elementos para el proyecto
                            foreach (var elemento in lstElementosActualesPorProy)
                            {
                                //Verifico si usuario cambio su flag
                                FTRelacionEGP cambio = lstCambiosCIO.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi && x.Ftprycodi == idProy);

                                FtExtEtempdetpryeqDTO hayDetallesEnBD = lstDetallesEnBDActivo.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi);
                                FtExtEtempdetpryeqDTO hayDetallesEnBDEnBaja = lstDetallesEnBDDeBaja.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi);

                                if (hayDetallesEnBD != null)
                                {

                                    if (cambio != null)
                                    {
                                        if (hayDetallesEnBD.Feepeqfeccreacion != null)
                                        {
                                            hayDetallesEnBD.Feepequsumodificacion = usuario;
                                            hayDetallesEnBD.Feepeqfecmodificacion = DateTime.Now;
                                        }
                                        else
                                        {
                                            hayDetallesEnBD.Feepequsucreacion = usuario;
                                            hayDetallesEnBD.Feepeqfeccreacion = DateTime.Now;
                                        }
                                        hayDetallesEnBD.Feepeqflagotraetapa = cambio.FlagEquipoOtroEtapa;


                                        lstActualizarDet.Add(hayDetallesEnBD);
                                    }
                                }
                                else
                                {
                                    //busco en los estados en baja
                                    if (hayDetallesEnBDEnBaja != null)
                                    {
                                        if (cambio != null)
                                        {
                                            if (hayDetallesEnBDEnBaja.Feepeqfeccreacion != null)
                                            {
                                                hayDetallesEnBDEnBaja.Feepequsumodificacion = usuario;
                                                hayDetallesEnBDEnBaja.Feepeqfecmodificacion = DateTime.Now;
                                            }
                                            else
                                            {
                                                hayDetallesEnBDEnBaja.Feepequsucreacion = usuario;
                                                hayDetallesEnBDEnBaja.Feepeqfeccreacion = DateTime.Now;
                                            }
                                            hayDetallesEnBDEnBaja.Feepeqflagotraetapa = cambio.FlagEquipoOtroEtapa;
                                        }

                                        //Cambio de estado a ACTIVADO y ACTUALIZO
                                        hayDetallesEnBDEnBaja.Feepeqestado = "A";
                                        lstActualizarDet.Add(hayDetallesEnBDEnBaja);
                                    }
                                    else //Si tampoco esta en los de estado baja, entonces creo nuevo registro
                                    {
                                        FtExtEtempdetpryeqDTO objCa = new FtExtEtempdetpryeqDTO();

                                        objCa.Feeprycodi = miFeeprycodi;   /////////////// NOTA
                                        objCa.Equicodi = elemento.Equicodi;
                                        objCa.Grupocodi = elemento.Grupocodi;
                                        objCa.Feepeqestado = "A";
                                        objCa.Feepeqflagsistema = VerificarSiUnidadPerteneceOtraEtapa(elemento.Equicodi, elemento.Grupocodi, idetapa);

                                        if (cambio != null)
                                        {
                                            objCa.Feepeqflagotraetapa = cambio.FlagEquipoOtroEtapa;
                                            objCa.Feepequsucreacion = usuario;
                                            objCa.Feepeqfeccreacion = DateTime.Now;
                                        }

                                        lstGuardarDet.Add(objCa);
                                    }
                                }


                            }

                            //Actualizamos si hay cambios de elementos en el proyecto
                            foreach (FtExtEtempdetpryeqDTO relacionEnBD in lstDetallesEnBDActivo)
                            {
                                FtExtEtempdetpryeqDTO relacion = lstElementosActualesPorProy.Find(x => x.Equicodi == relacionEnBD.Equicodi && x.Grupocodi == relacionEnBD.Grupocodi);

                                //Si el elemento existe tanto en la relacion guardada como en los elementos actuales del proyecto
                                if (relacion != null)
                                {
                                    //se revisa sus cambios en checks (caso ya analizado en el foreach anterior)
                                }
                                else // si el elemento de la relacion ya no forma parte del proyecto, se da de baja la relacion
                                {
                                    //Solo se modifica su estado
                                    relacionEnBD.Feepeqestado = "B";

                                    lstActualizarDet.Add(relacionEnBD);
                                }
                            }

                            proyAAct.ListaCambiosActualizar = lstActualizarDet;
                            proyAAct.ListaCambiosGuardar = lstGuardarDet;

                            objSalida.ListaProyectosActualizar.Add(proyAAct);
                        }


                        #endregion

                        #region ACTUALIZACION (DAR BAJA PROYECTOS)
                        //Elijo los proyectos que ya no forman parte y los actualizo (dar baja PROYECTOS)
                        List<int> lstIdRelProyectosActivos = lstRelProyectosActivosEnBD.Select(x => x.Ftprycodi).ToList();
                        List<int> lstDiferencia = (List<int>)lstIdRelProyectosActivos.Except(listaIdProyectosDeTabla).ToList();

                        //la diferencia deben darse de baja
                        List<FtExtEtempdetpryDTO> lstProyBajar = lstRelProyectosActivosEnBD.Where(x => lstDiferencia.Contains(x.Ftprycodi)).ToList();

                        foreach (var proyB in lstProyBajar)
                        {
                            proyB.Feepryestado = ConstantesFichaTecnica.EstadoStrBaja;

                            objSalida.ListaProyectosActualizar.Add(proyB);

                            /* Analizo si tiene equipos que se activaron o se dieron de baja */

                            //Obtenemos el listado actual total de elementos (equipos o grupos) del proyecto ACTUALMENTE
                            List<FtExtEtempdetpryeqDTO> lstElementosActualesPorProy = ObtenerElementosActualesDelProyecto(emprcodi, idetapa, proyB.Ftprycodi);
                            List<FtExtEtempdetpryeqDTO> lstGuardarDet = new List<FtExtEtempdetpryeqDTO>();
                            List<FtExtEtempdetpryeqDTO> lstActualizarDet = new List<FtExtEtempdetpryeqDTO>();

                            FtExtEtempdetpryDTO proyAnalizar = lstTotalRelProyectosEnBD.Find(x => x.Feeprycodi == proyB.Feeprycodi);
                            if (proyAnalizar != null)
                            {

                                int idProy = proyB.Ftprycodi;
                                int miFeeprycodi = proyB.Feeprycodi;

                                List<FtExtEtempdetpryeqDTO> lstDetallesEnBDActivo = FactorySic.GetFtExtEtempdetpryeqRepository().ListarPorRelProyectoEtapaEmpresa(miFeeprycodi, ConstantesFichaTecnica.EstadoStrActivo);
                                List<FtExtEtempdetpryeqDTO> lstDetallesEnBDDeBaja = FactorySic.GetFtExtEtempdetpryeqRepository().ListarPorRelProyectoEtapaEmpresa(miFeeprycodi, ConstantesFichaTecnica.EstadoStrBaja);


                                foreach (var elemento in lstElementosActualesPorProy)
                                {
                                    FtExtEtempdetpryeqDTO hayDetallesEnBD = lstDetallesEnBDActivo.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi);
                                    FtExtEtempdetpryeqDTO hayDetallesEnBDEnBaja = lstDetallesEnBDDeBaja.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi);

                                    if (hayDetallesEnBD != null)
                                    {

                                    }
                                    else
                                    {
                                        if (hayDetallesEnBDEnBaja != null)
                                        {
                                            //Cambio de estado a ACTIVADO y ACTUALIZO
                                            hayDetallesEnBDEnBaja.Feepeqestado = "A";
                                            lstActualizarDet.Add(hayDetallesEnBDEnBaja);
                                        }
                                        else //Si tampoco esta en los de estado baja, entonces creo nuevo registro
                                        {
                                            FtExtEtempdetpryeqDTO objCa = new FtExtEtempdetpryeqDTO();

                                            objCa.Feeprycodi = miFeeprycodi;   /////////////// NOTA
                                            objCa.Equicodi = elemento.Equicodi;
                                            objCa.Grupocodi = elemento.Grupocodi;
                                            objCa.Feepeqestado = "A";
                                            objCa.Feepeqflagsistema = VerificarSiUnidadPerteneceOtraEtapa(elemento.Equicodi, elemento.Grupocodi, idetapa);

                                            lstGuardarDet.Add(objCa);
                                        }
                                    }
                                }

                                //Actualizamos si hay cambios de elementos en el proyecto
                                foreach (FtExtEtempdetpryeqDTO relacionEnBD in lstDetallesEnBDActivo)
                                {
                                    FtExtEtempdetpryeqDTO relacion = lstElementosActualesPorProy.Find(x => x.Equicodi == relacionEnBD.Equicodi && x.Grupocodi == relacionEnBD.Grupocodi);

                                    //Si el elemento existe tanto en la relacion guardada como en los elementos actuales del proyecto
                                    if (relacion != null)
                                    {
                                        //se revisa sus cambios en checks (caso ya analizado en el foreach anterior)
                                    }
                                    else // si el elemento de la relacion ya no forma parte del proyecto, se da de baja la relacion
                                    {
                                        //Solo se modifica su estado
                                        relacionEnBD.Feepeqestado = "B";

                                        lstActualizarDet.Add(relacionEnBD);
                                    }
                                }

                                proyAnalizar.ListaCambiosActualizar = lstActualizarDet;
                                proyAnalizar.ListaCambiosGuardar = lstGuardarDet;

                                objSalida.ListaProyectosActualizar.Add(proyAnalizar);

                            }
                        }
                        #endregion


                        #region GUARDAR (SE AGREGO NUEVOS PROYECTOS QUE NO ESTAN EN BD ni como Activos ni como Baja)
                        //Elijo los nuevos proyectos y los Guardo
                        List<int> lstIdRelProyectosTotales = lstTotalRelProyectosEnBD.Select(x => x.Ftprycodi).ToList();
                        List<int> lstNuevos = (List<int>)listaIdProyectosDeTabla.Except(lstIdRelProyectosTotales).ToList();

                        List<FtExtEtempdetpryDTO> lstProyNuevos = lstProyectos.Where(x => lstNuevos.Contains(x.Ftprycodi)).ToList();

                        List<FtExtEtempdetpryDTO> lstPy = new List<FtExtEtempdetpryDTO>();
                        foreach (var proy in lstProyNuevos)
                        {
                            int idProy = proy.Ftprycodi;
                            listaProyectoTomadosEnCuenta.Add(idProy);

                            //Obtenemos el listado total de elementos (equipos o grupos) de todos los proyectos nuevos
                            List<FtExtEtempdetpryeqDTO> lstElementosActualesPorProy = ObtenerElementosActualesDelProyecto(emprcodi, idetapa, idProy);

                            //Preparamos el proyecto a guardar
                            FtExtEtempdetpryDTO objP = new FtExtEtempdetpryDTO();
                            objP.Fetempcodi = fetempcodi;  //////////// NOTA
                            //objP.Feeprycodi { get; set; }  //codigo
                            objP.Ftprycodi = idProy;
                            objP.Feepryestado = ConstantesFichaTecnica.EstadoStrActivo;

                            List<FtExtEtempdetpryeqDTO> lstCmb = new List<FtExtEtempdetpryeqDTO>();

                            foreach (var elemento in lstElementosActualesPorProy)
                            {
                                //Verifico si usuario cambio su flag
                                FTRelacionEGP cambio = lstCambiosCIO.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi && x.Ftprycodi == idProy);

                                //genero para guardar
                                FtExtEtempdetpryeqDTO objC = new FtExtEtempdetpryeqDTO();

                                //objC.Feeprycodi { get; set; } 
                                objC.Equicodi = elemento.Equicodi;
                                objC.Grupocodi = elemento.Grupocodi;
                                objC.Feepeqestado = "A";
                                //objC.Feepeqcodi { get; set; } //Codigo
                                objC.Feepeqflagsistema = VerificarSiUnidadPerteneceOtraEtapa(elemento.Equicodi, elemento.Grupocodi, idetapa);

                                if (cambio != null)
                                {
                                    objC.Feepeqflagotraetapa = cambio.FlagEquipoOtroEtapa;
                                    objC.Feepequsucreacion = usuario;
                                    objC.Feepeqfeccreacion = DateTime.Now;
                                    //objC.Feepequsumodificacion { get; set; } 
                                    //objC.Feepeqfecmodificacion { get; set; } 
                                }


                                lstCmb.Add(objC);
                            }

                            //guardamos todos los elementos del proyecto (incluye sus cambios)
                            objP.ListaCambiosGuardar = lstCmb;

                            lstPy.Add(objP);
                        }

                        objSalida.ListaProyectosGuardar.AddRange(lstPy);
                        #endregion

                        #region ACTUALIZACION (PROYECTOS SE MANTIENEN PERO HAY CAMBIOS [En checks])
                        List<int> lstProysSoloConCambiosEnChecksOElementos = (List<int>)listaIdProyectosDeTabla.Except(listaProyectoTomadosEnCuenta).ToList();
                        List<FtExtEtempdetpryDTO> lstProyActualizarChecksOElementos = lstProyectos.Where(x => lstProysSoloConCambiosEnChecksOElementos.Contains(x.Ftprycodi)).ToList();

                        foreach (var proy in lstProyActualizarChecksOElementos)
                        {
                            //Obtenemos el listado actual total de elementos (equipos o grupos) del proyecto ACTUALMENTE
                            List<FtExtEtempdetpryeqDTO> lstElementosActualesPorProy = ObtenerElementosActualesDelProyecto(emprcodi, idetapa, proy.Ftprycodi);

                            List<FtExtEtempdetpryeqDTO> lstGuardarDet = new List<FtExtEtempdetpryeqDTO>();
                            List<FtExtEtempdetpryeqDTO> lstActualizarDet = new List<FtExtEtempdetpryeqDTO>();

                            FtExtEtempdetpryDTO proyActualizar = lstTotalRelProyectosEnBD.Find(x => x.Feeprycodi == proy.Feeprycodi);

                            if (proyActualizar != null)
                            {

                                int idProy = proy.Ftprycodi;
                                int miFeeprycodi = proy.Feeprycodi;

                                List<FtExtEtempdetpryeqDTO> lstDetallesEnBD = FactorySic.GetFtExtEtempdetpryeqRepository().ListarPorRelProyectoEtapaEmpresa(miFeeprycodi, ConstantesFichaTecnica.EstadoStrActivo);
                                List<FtExtEtempdetpryeqDTO> lstDetallesEnBDDeBaja = FactorySic.GetFtExtEtempdetpryeqRepository().ListarPorRelProyectoEtapaEmpresa(miFeeprycodi, ConstantesFichaTecnica.EstadoStrBaja);

                                //Actualizamos los CHECKS de elementos para el proyecto
                                foreach (var elemento in lstElementosActualesPorProy)
                                {
                                    //Verifico si usuario cambio su flag
                                    FTRelacionEGP cambio = lstCambiosCIO.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi && x.Ftprycodi == idProy);

                                    FtExtEtempdetpryeqDTO hayDetallesEnBD = lstDetallesEnBD.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi);
                                    FtExtEtempdetpryeqDTO hayDetallesEnBDEnBaja = lstDetallesEnBDDeBaja.Find(x => x.Equicodi == elemento.Equicodi && x.Grupocodi == elemento.Grupocodi);

                                    //Si el elemento esta en los activos analizo sus cambios en checks
                                    if (hayDetallesEnBD != null)
                                    {
                                        if (cambio != null)
                                        {
                                            if (hayDetallesEnBD.Feepeqfeccreacion != null)
                                            {
                                                hayDetallesEnBD.Feepequsumodificacion = usuario;
                                                hayDetallesEnBD.Feepeqfecmodificacion = DateTime.Now;
                                            }
                                            else
                                            {
                                                hayDetallesEnBD.Feepequsucreacion = usuario;
                                                hayDetallesEnBD.Feepeqfeccreacion = DateTime.Now;
                                            }
                                            hayDetallesEnBD.Feepeqflagotraetapa = cambio.FlagEquipoOtroEtapa;


                                            lstActualizarDet.Add(hayDetallesEnBD);
                                        }
                                    }
                                    else
                                    {
                                        //busco en los estados en baja
                                        if (hayDetallesEnBDEnBaja != null)
                                        {
                                            if (cambio != null)
                                            {
                                                if (hayDetallesEnBDEnBaja.Feepeqfeccreacion != null)
                                                {
                                                    hayDetallesEnBDEnBaja.Feepequsumodificacion = usuario;
                                                    hayDetallesEnBDEnBaja.Feepeqfecmodificacion = DateTime.Now;
                                                }
                                                else
                                                {
                                                    hayDetallesEnBDEnBaja.Feepequsucreacion = usuario;
                                                    hayDetallesEnBDEnBaja.Feepeqfeccreacion = DateTime.Now;
                                                }
                                                hayDetallesEnBDEnBaja.Feepeqflagotraetapa = cambio.FlagEquipoOtroEtapa;
                                            }

                                            //Cambio de estado a ACTIVADO y ACTUALIZO
                                            hayDetallesEnBDEnBaja.Feepeqestado = "A";
                                            lstActualizarDet.Add(hayDetallesEnBDEnBaja);
                                        }
                                        else //Si tampoco esta en los de estado baja, entonces creo nuevo registro
                                        {
                                            FtExtEtempdetpryeqDTO objCa = new FtExtEtempdetpryeqDTO();

                                            objCa.Feeprycodi = miFeeprycodi;   /////////////// NOTA
                                            objCa.Equicodi = elemento.Equicodi;
                                            objCa.Grupocodi = elemento.Grupocodi;
                                            objCa.Feepeqestado = "A";
                                            objCa.Feepeqflagsistema = VerificarSiUnidadPerteneceOtraEtapa(elemento.Equicodi, elemento.Grupocodi, idetapa);

                                            if (cambio != null)
                                            {
                                                objCa.Feepeqflagotraetapa = cambio.FlagEquipoOtroEtapa;
                                                objCa.Feepequsucreacion = usuario;
                                                objCa.Feepeqfeccreacion = DateTime.Now;
                                            }

                                            lstGuardarDet.Add(objCa);
                                        }
                                    }


                                }

                                //Actualizamos si hay cambios de elementos en el proyecto
                                foreach (FtExtEtempdetpryeqDTO relacionEnBD in lstDetallesEnBD)
                                {
                                    FtExtEtempdetpryeqDTO relacion = lstElementosActualesPorProy.Find(x => x.Equicodi == relacionEnBD.Equicodi && x.Grupocodi == relacionEnBD.Grupocodi);

                                    //Si el elemento existe tanto en la relacion guardada como en los elementos actuales del proyecto
                                    if (relacion != null)
                                    {
                                        //se revisa sus cambios en checks (caso ya analizado en el foreach anterior)
                                    }
                                    else // si el elemento de la relacion ya no forma parte del proyecto, se da de baja la relacion
                                    {
                                        //Solo se modifica su estado
                                        relacionEnBD.Feepeqestado = "B";

                                        lstActualizarDet.Add(relacionEnBD);
                                    }
                                }

                                proyActualizar.ListaCambiosActualizar = lstActualizarDet;
                                proyActualizar.ListaCambiosGuardar = lstGuardarDet;

                                objSalida.ListaProyectosActualizar.Add(proyActualizar);

                            }

                        }

                        #endregion
                    }
                    else
                    {
                        if (idetapa == ConstantesFichaTecnica.EtapaModificacion)
                        {

                            List<int> listaElementosTomadosEnCuenta = new List<int>();
                            List<int> listaIdElementosDeTabla = lstElementos.Select(x => int.Parse(x.Codigo)).ToList();
                            List<FtExtEtempdeteqDTO> lstTotalRelElementosEnBD = FactorySic.GetFtExtEtempdeteqRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.PorDefecto.ToString(), objSalida.Fetempcodi);
                            List<FtExtEtempdeteqDTO> lstRelElementosActivosEnBD = lstTotalRelElementosEnBD.Where(x => x.Feeeqestado == ConstantesFichaTecnica.EstadoStrActivo).ToList();
                            List<FtExtEtempdeteqDTO> lstRelElementosEnBajaEnBD = lstTotalRelElementosEnBD.Where(x => x.Feeeqestado == ConstantesFichaTecnica.EstadoStrBaja).ToList();

                            #region ACTUALIZACION
                            //Obtengo los elementos a actualizar (caso ACTIVACION)
                            List<FtExtEtempdeteqDTO> lstElementosActivar = new List<FtExtEtempdeteqDTO>();
                            List<FtExtEtempdeteqDTO> lstEquiposActivar = lstRelElementosEnBajaEnBD.Where(x => x.Equicodi != null && listaIdElementosDeTabla.Contains(x.Equicodi.Value)).ToList();
                            List<FtExtEtempdeteqDTO> lstGruposActivar = lstRelElementosEnBajaEnBD.Where(x => x.Grupocodi != null && listaIdElementosDeTabla.Contains(x.Grupocodi.Value)).ToList();

                            lstElementosActivar.AddRange(lstEquiposActivar);
                            lstElementosActivar.AddRange(lstGruposActivar);
                            foreach (FtExtEtempdeteqDTO elmAAct in lstElementosActivar)
                            {
                                int miCodigo = -1;

                                if (elmAAct.Equicodi != null)
                                    miCodigo = elmAAct.Equicodi.Value;
                                else
                                {
                                    if (elmAAct.Grupocodi != null)
                                    {
                                        miCodigo = elmAAct.Equicodi.Value;
                                    }
                                }

                                //almaceno el que se usa
                                listaElementosTomadosEnCuenta.Add(miCodigo);

                                //cambio de estado
                                elmAAct.Feeeqestado = ConstantesFichaTecnica.EstadoStrActivo;

                                FTRelacionEGP regTabla = lstElementos.Find(x => x.Codigo == miCodigo.ToString());
                                if (regTabla != null)
                                {
                                    //verifico si cambió su check, Para actualizarlo
                                    if (regTabla.EditoFlag == "S")
                                    {
                                        elmAAct.Feeeqflagotraetapa = regTabla.FlagEquipoOtroEtapa;

                                        //Verifico si ya tuvo cambios de check previos
                                        if (elmAAct.Feeeqfeccreacion != null)
                                        {
                                            elmAAct.Feeequsumodificacion = usuario;
                                            elmAAct.Feeeqfecmodificacion = DateTime.Now;
                                        }
                                        else
                                        {
                                            elmAAct.Feeequsucreacion = usuario;
                                            elmAAct.Feeeqfeccreacion = DateTime.Now;
                                        }

                                    }
                                }

                                objSalida.ListaElementosActualizar.Add(elmAAct);

                            }
                            #endregion

                            #region ACTUALIZACION (DAR BAJA)


                            List<int> lstIdRelElementosActivos = new List<int>();
                            List<int> lstEquiposActivos = lstRelElementosActivosEnBD.Where(x => x.Equicodi != null).Select(x => x.Equicodi.Value).ToList();
                            List<int> lstGruposActivos = lstRelElementosActivosEnBD.Where(x => x.Grupocodi != null).Select(x => x.Grupocodi.Value).ToList();
                            lstIdRelElementosActivos.AddRange(lstEquiposActivos);
                            lstIdRelElementosActivos.AddRange(lstGruposActivos);

                            List<int> lstCodigoABajar = (List<int>)lstIdRelElementosActivos.Except(listaIdElementosDeTabla).Distinct().ToList();

                            //la diferencia deben darse de baja

                            List<FtExtEtempdeteqDTO> lstElementosBajar = new List<FtExtEtempdeteqDTO>();
                            List<FtExtEtempdeteqDTO> lstEquiposBajar = lstCodigoABajar.Any() ? lstRelElementosActivosEnBD.Where(x => x.Equicodi != null && lstCodigoABajar.Contains(x.Equicodi.Value)).ToList() : new List<FtExtEtempdeteqDTO>();
                            List<FtExtEtempdeteqDTO> lstGruposBajar = lstCodigoABajar.Any() ? lstRelElementosActivosEnBD.Where(x => x.Grupocodi != null && lstCodigoABajar.Contains(x.Grupocodi.Value)).ToList() : new List<FtExtEtempdeteqDTO>();
                            lstElementosBajar.AddRange(lstEquiposBajar);
                            lstElementosBajar.AddRange(lstGruposBajar);

                            foreach (FtExtEtempdeteqDTO elemento in lstElementosBajar)
                            {
                                elemento.Feeeqestado = ConstantesFichaTecnica.EstadoStrBaja;

                                objSalida.ListaElementosActualizar.Add(elemento);
                            }
                            #endregion


                            #region GUARDAR (SE AGREGO NUEVOS ELEMENTOS QUE NO ESTAN EN BD ni como A ni como B)
                            List<int> lstIdRelElementosTotalesEnBd = new List<int>();
                            List<int> lstIdRelEquiposTotales = lstTotalRelElementosEnBD.Where(X => X.Equicodi != null).Select(x => x.Equicodi.Value).ToList();
                            List<int> lstIdRelGruposTotales = lstTotalRelElementosEnBD.Where(X => X.Grupocodi != null).Select(x => x.Grupocodi.Value).ToList();
                            lstIdRelElementosTotalesEnBd.AddRange(lstIdRelEquiposTotales);
                            lstIdRelElementosTotalesEnBd.AddRange(lstIdRelGruposTotales);

                            List<int> lstNuevos = (List<int>)listaIdElementosDeTabla.Except(lstIdRelElementosTotalesEnBd).ToList();

                            List<FTRelacionEGP> lstENuevos = lstElementos.Where(x => lstNuevos.Contains(int.Parse(x.Codigo))).ToList();

                            //Obtenemos informacion del listado de elementos (equipos/grupos)
                            List<FtExtEtempdeteqDTO> lstEL = new List<FtExtEtempdeteqDTO>();
                            foreach (FTRelacionEGP elemento in lstENuevos)
                            {
                                listaElementosTomadosEnCuenta.Add(int.Parse(elemento.Codigo));

                                FtExtEtempdeteqDTO objP = new FtExtEtempdeteqDTO();

                                objP.Fetempcodi = fetempcodi;  //////// NOTA
                                objP.Grupocodi = elemento.Grupocodi;
                                objP.Equicodi = elemento.Equicodi;
                                //objP.Feeeqcodi { get; set; }  //id
                                objP.Feeeqestado = ConstantesFichaTecnica.EstadoStrActivo;
                                objP.Feeeqflagcentral = elemento.FlagCentralCOES; // flag central
                                objP.Feeeqflagsistema = VerificarSiUnidadPerteneceOtraEtapa(elemento.Equicodi, elemento.Grupocodi, idetapa);

                                if (elemento.EditoFlag == "S")
                                {
                                    objP.Feeeqflagotraetapa = elemento.FlagEquipoOtroEtapa;
                                    objP.Feeequsucreacion = usuario;
                                    objP.Feeeqfeccreacion = DateTime.Now;
                                    //objP.Feeequsumodificacion { get; set; }
                                    //objP.Feeeqfecmodificacion { get; set; }
                                }


                                lstEL.Add(objP);
                            }

                            objSalida.ListaElementosGuardar = lstEL;


                            #endregion

                            #region ACTUALIZACION (ELEMENTOS SE MANTIENEN PERO HAY CAMBIOS [En checks])
                            List<int> lstElementosSoloConCambiosEnChecks = (List<int>)listaIdElementosDeTabla.Except(listaElementosTomadosEnCuenta).ToList();
                            List<FTRelacionEGP> lstElActualizarChecks = lstElementos.Where(x => lstElementosSoloConCambiosEnChecks.Contains(int.Parse(x.Codigo))).ToList();

                            foreach (FTRelacionEGP elemento in lstElActualizarChecks)
                            {
                                if (elemento.EditoFlag == "S")
                                {
                                    FtExtEtempdeteqDTO objAc = lstTotalRelElementosEnBD.Find(x => x.Grupocodi == elemento.Grupocodi && x.Equicodi == elemento.Equicodi);

                                    if (objAc != null)
                                    {
                                        objAc.Feeeqflagotraetapa = elemento.FlagEquipoOtroEtapa;

                                        //Verifico si ya tuvo cambios de check previos
                                        if (objAc.Feeeqfeccreacion != null)
                                        {
                                            objAc.Feeequsumodificacion = usuario;
                                            objAc.Feeeqfecmodificacion = DateTime.Now;
                                        }
                                        else
                                        {
                                            objAc.Feeequsucreacion = usuario;
                                            objAc.Feeeqfeccreacion = DateTime.Now;
                                        }

                                        objSalida.ListaElementosActualizar.Add(objAc);
                                    }

                                }

                                //para actualizar el nuevo flag
                                var existeBD = lstTotalRelElementosEnBD.Find(x => x.Grupocodi == elemento.Grupocodi && x.Equicodi == elemento.Equicodi);
                                if (existeBD != null)
                                {
                                    if (existeBD.Feeeqflagcentral != elemento.FlagCentralCOES)
                                    {
                                        existeBD.Feeeqflagcentral = elemento.FlagCentralCOES;
                                        existeBD.Feeequsumodificacion = usuario;
                                        existeBD.Feeeqfecmodificacion = DateTime.Now;

                                        objSalida.ListaElementosActualizar.Add(existeBD);
                                    }
                                }
                            }

                            #endregion
                        }
                    }


                }
            }

            return objSalida;
        }

        /// <summary>
        /// Devuelve el listado de elementos actuales de cierto proyecto
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="idetapa"></param>
        /// <param name="idProy"></param>
        /// <returns></returns>
        private List<FtExtEtempdetpryeqDTO> ObtenerElementosActualesDelProyecto(int emprcodi, int idetapa, int idProy)
        {
            //Obtenemos el listado total actual de elementos (equipos o grupos) del proyecto
            List<FtExtEtempdetpryeqDTO> lstElementosNuevosPorProy = new List<FtExtEtempdetpryeqDTO>();
            List<FTRelacionEGP> lstTempElementosNuevos = ObtenerMOYEquiposRelacionadosAlProyecto(-1, idProy, emprcodi, idetapa);
            foreach (var item in lstTempElementosNuevos)
            {
                FtExtEtempdetpryeqDTO oElem = new FtExtEtempdetpryeqDTO();
                oElem.Grupocodi = item.Grupocodi;
                oElem.Equicodi = item.Equicodi;
                lstElementosNuevosPorProy.Add(oElem);
            }

            return lstElementosNuevosPorProy;
        }

        /// <summary>
        /// Guarda transaccionalmente  los datos de las relaciones proyecto / equipos
        /// </summary>
        /// <param name="accion"></param>
        /// <param name="idetapa"></param>
        /// <param name="objRelEE"></param>
        private void GuardarActualizarDatosProyectoYRelacionesTransaccionalmente(int accion, int idetapa, FtExtRelempetapaDTO objRelEE)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            int fetempcodi = 0;

            try
            {
                #region Guardar en bd
                conn = FactorySic.GetCbReporteRepository().BeginConnection();
                tran = FactorySic.GetCbReporteRepository().StartTransaction(conn);


                if (accion == ConstantesFichaTecnica.AccionNuevo)
                {
                    if (idetapa == ConstantesFichaTecnica.EtapaConexion || idetapa == ConstantesFichaTecnica.EtapaIntegracion || idetapa == ConstantesFichaTecnica.EtapaOperacionComercial)
                    {
                        //Guarda relacion etapa empresa
                        fetempcodi = SaveFtExtRelempetapaTransaccional(objRelEE, conn, tran);

                        List<FtExtEtempdetpryDTO> lstRelProyectos = objRelEE.ListaProyectosGuardar != null ? objRelEE.ListaProyectosGuardar : new List<FtExtEtempdetpryDTO>();

                        //Guardando proyectos
                        foreach (var objRP in lstRelProyectos)
                        {
                            objRP.Fetempcodi = fetempcodi;
                            int miFeeprycodi = SaveFtExtEtempdetpryTransaccional(objRP, conn, tran);

                            List<FtExtEtempdetpryeqDTO> lstRelCambiosPorProy = objRP.ListaCambiosGuardar != null ? objRP.ListaCambiosGuardar : new List<FtExtEtempdetpryeqDTO>();

                            //Guardando cambios
                            foreach (var objCambio in lstRelCambiosPorProy)
                            {
                                objCambio.Feeprycodi = miFeeprycodi;
                                int miFeepeqcodi = SaveFtExtEtempdetpryeqTransaccional(objCambio, conn, tran);
                            }
                        }
                    }
                    else
                    {
                        if (idetapa == ConstantesFichaTecnica.EtapaModificacion)
                        {
                            //Guarda relacion etapa empresa
                            fetempcodi = SaveFtExtRelempetapaTransaccional(objRelEE, conn, tran);

                            List<FtExtEtempdeteqDTO> lstRelElementos = objRelEE.ListaElementosGuardar != null ? objRelEE.ListaElementosGuardar : new List<FtExtEtempdeteqDTO>();

                            //Guardando elementos
                            foreach (var objRP in lstRelElementos)
                            {
                                objRP.Fetempcodi = fetempcodi;
                                int miFeeeqcodi = SaveFtExtEtempdeteqTransaccional(objRP, conn, tran);


                            }
                        }
                    }

                }
                else
                {
                    if (accion == ConstantesFichaTecnica.AccionEditar)
                    {
                        if (idetapa == ConstantesFichaTecnica.EtapaConexion || idetapa == ConstantesFichaTecnica.EtapaIntegracion || idetapa == ConstantesFichaTecnica.EtapaOperacionComercial)
                        {
                            //Actualiza relacion etapa empresa
                            UpdateFtExtRelempetapaTransaccional(objRelEE, conn, tran);

                            List<FtExtEtempdetpryDTO> lstRelProyectosActualizar = objRelEE.ListaProyectosActualizar != null ? objRelEE.ListaProyectosActualizar : new List<FtExtEtempdetpryDTO>();
                            List<FtExtEtempdetpryDTO> lstRelProyectosGuardar = objRelEE.ListaProyectosGuardar != null ? objRelEE.ListaProyectosGuardar : new List<FtExtEtempdetpryDTO>();

                            //Actualizar proyectos
                            foreach (FtExtEtempdetpryDTO objRPA in lstRelProyectosActualizar)
                            {
                                UpdateFtExtEtempdetpryTransaccional(objRPA, conn, tran);

                                List<FtExtEtempdetpryeqDTO> lstRelCambiosActualizar = objRPA.ListaCambiosActualizar != null ? objRPA.ListaCambiosActualizar : new List<FtExtEtempdetpryeqDTO>();
                                List<FtExtEtempdetpryeqDTO> lstRelCambiosGuardar = objRPA.ListaCambiosGuardar != null ? objRPA.ListaCambiosGuardar : new List<FtExtEtempdetpryeqDTO>();

                                //Actualizar cambios
                                foreach (var objCambioA in lstRelCambiosActualizar)
                                {
                                    UpdateFtExtEtempdetpryeqTransaccional(objCambioA, conn, tran);
                                }

                                //Guardando cambios
                                foreach (var objCambioG in lstRelCambiosGuardar)
                                {
                                    int miFeepeqcodi2 = SaveFtExtEtempdetpryeqTransaccional(objCambioG, conn, tran);
                                }

                            }

                            //Guardando proyectos
                            foreach (FtExtEtempdetpryDTO objRPG in lstRelProyectosGuardar)
                            {
                                //objRPG.Fetempcodi = fetempcodi;
                                int miFeeprycodi2 = SaveFtExtEtempdetpryTransaccional(objRPG, conn, tran);

                                List<FtExtEtempdetpryeqDTO> lstRelCambiosPorProy = objRPG.ListaCambiosGuardar != null ? objRPG.ListaCambiosGuardar : new List<FtExtEtempdetpryeqDTO>();

                                //Guardando cambios
                                foreach (FtExtEtempdetpryeqDTO objCambio in lstRelCambiosPorProy)
                                {
                                    objCambio.Feeprycodi = miFeeprycodi2;
                                    int miFeepeqcodi = SaveFtExtEtempdetpryeqTransaccional(objCambio, conn, tran);
                                }
                            }
                        }
                        else
                        {
                            if (idetapa == ConstantesFichaTecnica.EtapaModificacion)
                            {
                                //Actualiza relacion etapa empresa
                                UpdateFtExtRelempetapaTransaccional(objRelEE, conn, tran);

                                List<FtExtEtempdeteqDTO> lstRelElementosActualizar = objRelEE.ListaElementosActualizar != null ? objRelEE.ListaElementosActualizar : new List<FtExtEtempdeteqDTO>();
                                List<FtExtEtempdeteqDTO> lstRelElementosGuardar = objRelEE.ListaElementosGuardar != null ? objRelEE.ListaElementosGuardar : new List<FtExtEtempdeteqDTO>();

                                //Actualizar elementos
                                foreach (FtExtEtempdeteqDTO objRPA in lstRelElementosActualizar)
                                {
                                    UpdateFtExtEtempdeteqTransaccional(objRPA, conn, tran);
                                }

                                //Guardando elementos
                                foreach (FtExtEtempdeteqDTO objRPG in lstRelElementosGuardar)
                                {
                                    //objRPG.Fetempcodi = fetempcodi;
                                    int miFeeprycodi2 = SaveFtExtEtempdeteqTransaccional(objRPG, conn, tran);

                                }
                            }
                        }
                    }
                }
                #endregion

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                fetempcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al guardar datos de la asignación de proyectos extranet. Error: " + ex.Message);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

        }

        /// <summary>
        /// Devuelve los datos de un grupo de proyectos
        /// </summary>
        /// <param name="strIdsProyectos"></param>
        /// <returns></returns>
        public List<FtExtProyectoDTO> ObtenerDatosDeProyectos(string strIdsProyectos)
        {
            List<FtExtProyectoDTO> lstSalida = new List<FtExtProyectoDTO>();

            lstSalida = FactorySic.GetFtExtProyectoRepository().ListarGrupo(strIdsProyectos);

            return lstSalida.OrderBy(x => x.Ftpryeocodigo).ToList();
        }

        /// <summary>
        /// Devuelve los equipos / Modos de operacion relacionados con empresa y proyecto, sean propietarias o copropietarias
        /// </summary>
        /// <param name="feeprycodi"></param>
        /// <param name="ftprycodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="idEtapa"></param>
        /// <returns></returns>
        public List<FTRelacionEGP> ObtenerMOYEquiposRelacionadosAlProyecto(int feeprycodi, int ftprycodi, int emprcodi, int idEtapa)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();

            FtExtProyectoDTO proyecto = GetByIdFtExtProyecto(ftprycodi);

            //primero obtengo los equipos / Modos de operacion por empresa del proyecto seleccionado
            List<FTRelacionEGP> lstTemp1 = ObtenerRelacionesMoEqPorProyecto(feeprycodi, ftprycodi, emprcodi, idEtapa, proyecto);

            //Ahora obtengo los equipos del proyecto que son copropiedad de la empresa seleccionada
            List<FTRelacionEGP> lstTemp2 = ObtenerRelacionesEqCopropPorProyecto(feeprycodi, ftprycodi, emprcodi, idEtapa, proyecto);

            lstSalida.AddRange(lstTemp1);
            lstSalida.AddRange(lstTemp2);
            //cuando sea operación comercial solo considerar los equipos de generación. Excluir los demás
            if (ConstantesFichaTecnica.EtapaOperacionComercial == idEtapa)
            {
                List<int> listaFamcodiGeneracion = new List<int>() { 39, 4, 37, 5, 38, 2, 36, 3 };
                var listaEqGen = lstSalida.Where(x => x.Famcodi > 0 && listaFamcodiGeneracion.Contains(x.Famcodi.Value)).ToList();

                List<int> listaCatecodiGeneracion = new List<int>() { 2 };
                var listaPrGen = lstSalida.Where(x => x.Catecodi > 0 && listaCatecodiGeneracion.Contains(x.Catecodi.Value)).ToList();

                lstSalida = new List<FTRelacionEGP>();
                lstSalida.AddRange(listaEqGen);
                lstSalida.AddRange(listaPrGen);
            }

            List<FTRelacionEGP> listaFinal = new List<FTRelacionEGP>();
            foreach (var agrupacion in lstSalida.GroupBy(x => x.Codigo).ToList())
            {
                var item = agrupacion.First();
                listaFinal.Add(item);
            }

            return listaFinal.OrderBy(x => x.EmpresaNomb).ThenBy(x => x.EmpresaCoNomb).ThenBy(x => x.Ubicacion).ThenBy(x => x.Tipo).ThenBy(x => x.EquipoNomb).ToList();
        }

        /// <summary>
        /// Devuelve las relacion de equipos y modos de operacion asociados a un proyecto y a una empresa
        /// </summary>
        /// <param name="feeprycodi"></param>
        /// <param name="ftprycodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="idEtapa"></param>
        /// <returns></returns>
        private List<FTRelacionEGP> ObtenerRelacionesMoEqPorProyecto(int feeprycodi, int ftprycodi, int emprcodi, int idEtapa, FtExtProyectoDTO proyecto)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();

            List<FtExtReleqpryDTO> lstRelacion = FactorySic.GetFtExtReleqpryRepository().ListarPorEmpresaPropietariaYProyecto(ftprycodi, emprcodi);

            foreach (var item in lstRelacion)
            {
                if (item.Equicodi == 11304)
                { }
                string estadoDesc = "";
                switch (item.Estadoelemento)
                {
                    case "A": estadoDesc = "Activo"; break;
                    case "B": estadoDesc = "Baja"; break;
                    case "P": estadoDesc = "En Proyecto"; break;
                    case "F": estadoDesc = "Fuera de COES"; break;
                    case "X": estadoDesc = "Anulado"; break;
                }

                FTRelacionEGP obj = new FTRelacionEGP();
                obj.Ftprynomb = proyecto.Ftprynombre;
                obj.Ftprycodi = ftprycodi;
                obj.Emprcodi = emprcodi;

                obj.Equicodi = item.Equicodi;
                obj.Grupocodi = item.Grupocodi;
                obj.Catecodi = item.Catecodi;
                obj.Famcodi = item.Famcodi;
                obj.IdEmpresa = item.Idempresaelemento;
                obj.IdEmpresaCo = null;

                obj.Codigo = item.Equicodi != null ? item.Equicodi.Value.ToString() : item.Grupocodi.Value.ToString();
                obj.TipoYCodigo = item.Equicodi != null ? "E" + item.Equicodi.Value.ToString() : "G" + item.Grupocodi.Value.ToString();
                obj.EmpresaNomb = item.Nombempresaelemento;
                obj.EmpresaCoNomb = "";
                obj.Tipo = item.Tipoelemento;
                obj.EquipoNomb = item.Nombreelemento;
                obj.Ubicacion = item.Areaelemento;
                obj.EstadoDesc = estadoDesc;
                obj.FlagEquipoOtroEtapa = VerificarFlagOtroEquipoEtapaCIOEmpProp(feeprycodi, ftprycodi, emprcodi, item.Equicodi, item.Grupocodi, idEtapa, out int hayCambiosGuardados);
                obj.TieneCambios = hayCambiosGuardados; // 0: no, 1: si

                lstSalida.Add(obj);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve si el equipo esta en otra etapa (evaluado por el sistema o que el usuario guardo cambios indicando dicha opcion)
        /// </summary>
        /// <param name="feeprycodi"></param>
        /// <param name="ftprycodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="idEtapa"></param>
        /// <param name="hayCambiosGuardados"></param>
        /// <returns></returns>
        private string VerificarFlagOtroEquipoEtapaCIOEmpProp(int feeprycodi, int ftprycodi, int emprcodi, int? equicodi, int? grupocodi, int idEtapa, out int hayCambiosGuardados)
        {
            string salida = "";
            hayCambiosGuardados = 0;

            //primero verifico si hay datos en BD, puede que el usuario guardo esta opcion en el pasado Y LUEGO verifico si esta en otra etapa

            //Si es un RelProyecto que vino de BD (tiene feeprycodi)
            if (feeprycodi > 0)
            {
                //lo busco por idRelProyecto y unidad
                FtExtEtempdetpryeqDTO objC = FactorySic.GetFtExtEtempdetpryeqRepository().GetByProyectoYUnidad(feeprycodi, equicodi, grupocodi, ConstantesFichaTecnica.EstadoStrActivo);

                if (objC != null)
                {
                    //verifico si tiene cambios, osea si tiene fecha modificacion 
                    if (objC.Feepeqfeccreacion != null)
                    {
                        salida = objC.Feepeqflagotraetapa;
                        hayCambiosGuardados = 1;
                    }
                    else
                    {
                        salida = VerificarSiUnidadPerteneceOtraEtapa(equicodi, grupocodi, idEtapa);
                        hayCambiosGuardados = 0;
                    }
                }
                else
                {
                    salida = VerificarSiUnidadPerteneceOtraEtapa(equicodi, grupocodi, idEtapa);
                    hayCambiosGuardados = 0;
                }
            }
            else  //Si es un RelProyecto fue agregado (no tiene feeprycodi, defecto -1 )
            {
                //lo busco por empresa, etapa, proyecto (ftprycodi) y unidad
                FtExtEtempdetpryeqDTO objC2 = FactorySic.GetFtExtEtempdetpryeqRepository().GetByProyectoUnidadEmpresaEtapa(equicodi, grupocodi, ftprycodi, emprcodi, idEtapa, ConstantesFichaTecnica.EstadoStrActivo);

                if (objC2 != null)
                {
                    //verifico si tiene cambios, osea si tiene fecha modificacion 
                    if (objC2.Feepeqfeccreacion != null)
                    {
                        salida = objC2.Feepeqflagotraetapa;
                        hayCambiosGuardados = 1;
                    }
                    else
                    {
                        salida = VerificarSiUnidadPerteneceOtraEtapa(equicodi, grupocodi, idEtapa);
                        hayCambiosGuardados = 0;
                    }

                }
                else
                {
                    salida = VerificarSiUnidadPerteneceOtraEtapa(equicodi, grupocodi, idEtapa);
                    hayCambiosGuardados = 0;
                }
            }


            return salida;
        }

        /// <summary>
        /// Verifica si un equipo/grupo pertenece a otra etapa
        /// </summary>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="idEtapa"></param>
        /// <returns></returns>
        private string VerificarSiUnidadPerteneceOtraEtapa(int? equicodi, int? grupocodi, int idEtapa)
        {
            string salida = "N";

            if (idEtapa == ConstantesFichaTecnica.EtapaModificacion) return "N";

            //Busco las etapas donde esta el elemento
            List<FtExtRelempetapaDTO> lstEtapasPorElemento = FactorySic.GetFtExtRelempetapaRepository().GetByEtapasPorElemento(equicodi, grupocodi);

            if (lstEtapasPorElemento.Any())
            {
                //Busco las etapas diferentes a IDETAPA y distinto a modificación de ficha técnica 
                List<FtExtRelempetapaDTO> lstEnOtrasEtapasPorElemento = lstEtapasPorElemento.Where(x => x.Ftetcodi != idEtapa).ToList();

                //Si hay elementos quiere decir que se encuientra en otras etapa 
                if (lstEnOtrasEtapasPorElemento.Any())
                {
                    salida = "S";
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve los equipos que formas parte de empresas copropietarias de cierto proyecto
        /// </summary>
        /// <param name="feeprycodi"></param>
        /// <param name="ftprycodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="idEtapa"></param>
        /// <returns></returns>
        private List<FTRelacionEGP> ObtenerRelacionesEqCopropPorProyecto(int feeprycodi, int ftprycodi, int emprcodi, int idEtapa, FtExtProyectoDTO proyecto)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();

            List<FtExtReleqpryDTO> lstRelacion = FactorySic.GetFtExtReleqpryRepository().ListarPorEmpresaCopropietariaYProyecto(ftprycodi, emprcodi);

            foreach (var item in lstRelacion)
            {
                string estadoDesc = "";
                switch (item.Estadoelemento)
                {
                    case "A": estadoDesc = "Activo"; break;
                    case "B": estadoDesc = "Baja"; break;
                    case "P": estadoDesc = "En Proyecto"; break;
                    case "F": estadoDesc = "Fuera de COES"; break;
                    case "X": estadoDesc = "Anulado"; break;
                }

                FTRelacionEGP obj = new FTRelacionEGP();
                obj.Ftprynomb = proyecto.Ftprynombre;
                obj.Ftprycodi = ftprycodi;
                obj.Emprcodi = emprcodi;

                obj.Equicodi = item.Equicodi;
                obj.Grupocodi = null;
                obj.Famcodi = item.Famcodi;
                obj.Catecodi = null;
                obj.IdEmpresa = item.Idempresaelemento;
                obj.IdEmpresaCo = item.Idempresacopelemento;

                obj.Codigo = item.Equicodi.ToString();
                obj.TipoYCodigo = "E" + item.Equicodi.ToString();
                obj.EmpresaNomb = item.Nombempresaelemento;
                obj.EmpresaCoNomb = item.Nombempresacopelemento;
                obj.Tipo = item.Tipoelemento;
                obj.EquipoNomb = item.Nombreelemento;
                obj.Ubicacion = item.Areaelemento;
                obj.EstadoDesc = estadoDesc;
                obj.FlagEquipoOtroEtapa = VerificarFlagOtroEquipoEtapaCIOEmpProp(feeprycodi, ftprycodi, emprcodi, item.Equicodi, item.Grupocodi, idEtapa, out int hayCambiosGuardados);
                obj.TieneCambios = hayCambiosGuardados;

                lstSalida.Add(obj);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve la informacion de cierta asignacion
        /// </summary>
        /// <param name="fetempcodi"></param>
        /// <returns></returns>
        public FtExtRelempetapaDTO ObtenerInformacionRelEmpresaEtapa(int fetempcodi)
        {
            FtExtRelempetapaDTO salida = new FtExtRelempetapaDTO();
            List<FtExtEtempdetpryDTO> lstProyectosRel = new List<FtExtEtempdetpryDTO>();
            List<FtExtEtempdetpryDTO> lstElementosRel = new List<FtExtEtempdetpryDTO>();

            salida = GetByIdFtExtRelempetapa(fetempcodi);

            int idEtapa = salida.Ftetcodi;

            if (idEtapa != ConstantesFichaTecnica.EtapaModificacion)
            {
                List<FtExtEtempdetpryDTO> lstRelProyectos = FactorySic.GetFtExtEtempdetpryRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.EstadoStrActivo, fetempcodi);

                if (lstRelProyectos.Any())
                {
                    List<int> lstIdsPy = lstRelProyectos.Select(x => x.Ftprycodi).ToList();
                    string ftprycodis = string.Join(",", lstIdsPy);
                    List<FtExtProyectoDTO> lstP = FactorySic.GetFtExtProyectoRepository().ListarGrupo(ftprycodis);

                    foreach (var item in lstRelProyectos)
                    {
                        FtExtProyectoDTO op = lstP.Find(x => x.Ftprycodi == item.Ftprycodi);

                        if (op != null)
                        {
                            item.NombreEmpresa = op.Emprnomb != null ? op.Emprnomb.Trim() : "";
                            item.CodigoProy = op.Ftpryeocodigo != null ? op.Ftpryeocodigo.Trim() : "";
                            item.NombProyExt = op.Ftprynombre != null ? op.Ftprynombre.Trim() : "";
                        }
                        else
                        {
                            item.NombreEmpresa = "";
                            item.CodigoProy = "";
                            item.NombProyExt = "";
                        }

                        lstProyectosRel.Add(item);
                    }

                }
                salida.ListaProyectos = lstProyectosRel;
            }
            else
            {
                List<FtExtEtempdeteqDTO> lstRelElementos = FactorySic.GetFtExtEtempdeteqRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.EstadoStrActivo, fetempcodi);

                if (lstRelElementos.Any())
                {
                    //Lo analizo fuera

                }

                salida.ListaElementos = lstRelElementos;
            }

            return salida;
        }

        /// <summary>
        /// Devuelve los elementos con toda su informacion
        /// </summary>
        /// <param name="listaElementos"></param>
        /// <returns></returns>
        public List<FTRelacionEGP> ObtenerElementosGuardados(List<FtExtEtempdeteqDTO> listaElementos, int fetempcodi)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();
            FtExtRelempetapaDTO relEE = GetByIdFtExtRelempetapa(fetempcodi);
            int emprcodi = relEE.Emprcodi;
            int idEtapa = relEE.Ftetcodi;

            List<int> lstEquiposGuardados = listaElementos.Where(x => x.Equicodi != null && x.Grupocodi == null).Select(x => x.Equicodi.Value).ToList();
            List<int> lstGruposGuardados = listaElementos.Where(x => x.Grupocodi != null && x.Equicodi == null).Select(x => x.Grupocodi.Value).ToList();

            string strEquipos = string.Join(",", lstEquiposGuardados);
            string strGrupos = string.Join(",", lstGruposGuardados);

            List<FTRelacionEGP> relEquipos = ObtenerDatosDeElementosSeleccionados(strEquipos, ConstantesFichaTecnica.OrigenTipoEquipo, -1, emprcodi, idEtapa);
            CompletarInfoElementos(ConstantesFichaTecnica.OrigenTipoEquipo, fetempcodi, relEquipos);
            List<FTRelacionEGP> relGrupos = ObtenerDatosDeElementosSeleccionados(strGrupos, ConstantesFichaTecnica.OrigenCategoriaGrupo, -1, emprcodi, idEtapa);
            CompletarInfoElementos(ConstantesFichaTecnica.OrigenCategoriaGrupo, fetempcodi, relGrupos);

            lstSalida.AddRange(relEquipos);
            lstSalida.AddRange(relGrupos);

            return lstSalida;
        }

        /// <summary>
        /// Setea valores adicionales, ejmp Feeeqcodis
        /// </summary>
        /// <param name="origen"></param>
        /// <param name="fetempcodi"></param>
        /// <param name="relEquipos"></param>
        private void CompletarInfoElementos(int origen, int fetempcodi, List<FTRelacionEGP> relEquipos)
        {
            List<FtExtEtempdeteqDTO> lstRegistrosXEmpresaEtapa = FactorySic.GetFtExtEtempdeteqRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.EstadoStrActivo, fetempcodi);

            foreach (var item in relEquipos)
            {
                if (origen == ConstantesFichaTecnica.OrigenTipoEquipo)
                {
                    FtExtEtempdeteqDTO regBuscado = lstRegistrosXEmpresaEtapa.Find(x => x.Equicodi == item.Equicodi.Value);

                    if (regBuscado != null)
                    {
                        item.Feeeqcodi = regBuscado.Feeeqcodi;
                    }
                }
                else
                {
                    if (origen == ConstantesFichaTecnica.OrigenCategoriaGrupo)
                    {
                        FtExtEtempdeteqDTO regBuscado = lstRegistrosXEmpresaEtapa.Find(x => x.Grupocodi == item.Grupocodi.Value);

                        if (regBuscado != null)
                        {
                            item.Feeeqcodi = regBuscado.Feeeqcodi;
                        }
                    }
                }
            }


        }

        /// <summary>
        /// Obtiene la informacion para auditoria
        /// </summary>
        /// <param name="feeprycodi"></param>
        /// <param name="ftprycodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="idEtapa"></param>
        /// <returns></returns>
        public FtExtEtempdetpryeqDTO ObtenerDatosDetalleCIO(int feeprycodi, int ftprycodi, int emprcodi, int? equicodi, int? grupocodi, int idEtapa)
        {
            FtExtEtempdetpryeqDTO salida = new FtExtEtempdetpryeqDTO();
            FtExtEtempdetpryeqDTO temp = new FtExtEtempdetpryeqDTO();

            //primero verifico si hay datos en BD, puede que el usuario guardo esta opcion en el pasado Y LUEGO verifico si esta en otra etapa

            //Si es un RelProyecto que vino de BD (tiene feeprycodi)
            if (feeprycodi > 0)
            {
                //lo busco por idRelProyecto y unidad
                FtExtEtempdetpryeqDTO objC = FactorySic.GetFtExtEtempdetpryeqRepository().GetByProyectoYUnidad(feeprycodi, equicodi, grupocodi, ConstantesFichaTecnica.EstadoStrActivo);
                temp = objC;
            }
            else  //Si es un RelProyecto fue agregado (no tiene feeprycodi, defecto -1 )
            {
                //lo busco por empresa, etapa, proyecto (ftprycodi) y unidad
                FtExtEtempdetpryeqDTO objC2 = FactorySic.GetFtExtEtempdetpryeqRepository().GetByProyectoUnidadEmpresaEtapa(equicodi, grupocodi, ftprycodi, emprcodi, idEtapa, ConstantesFichaTecnica.EstadoStrActivo);
                temp = objC2;
            }

            if (temp != null)
            {
                temp.FechaCreacionDesc = temp.Feepeqfeccreacion != null ? temp.Feepeqfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                temp.FechaModificacionDesc = temp.Feepeqfecmodificacion != null ? temp.Feepeqfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";

                salida = temp;
            }
            else
            {
                throw new ArgumentException("Ocurrió un error, no se encontró datos de auditoria.");
            }

            return salida;
        }

        /// <summary>
        /// Obtiene la informacion para auditoria
        /// </summary>
        /// <param name="feeeqcodi"></param>
        /// <returns></returns>
        public FtExtEtempdeteqDTO ObtenerDatosDetalleO(int feeeqcodi)
        {
            FtExtEtempdeteqDTO salida = new FtExtEtempdeteqDTO();

            salida = GetByIdFtExtEtempdeteq(feeeqcodi);

            return salida;
        }

        /// <summary>
        /// Obtiene el listado de elementos relacionados con cierta empresa
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="idElemento"></param>
        /// <returns></returns>
        public List<FTRelacionEGP> ObtenerListadoElementosRelacionados(int tipo, int idElemento, int emprcodi, int idUbicacion)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();

            switch (tipo)
            {
                case ConstantesFichaTecnica.OrigenTipoEquipo: // EqFamilia y EqEquipo
                    //muestro equipos relacionados a la empresa y equipos cuyo empresa copropietaria sea relacionada a la empresa                    

                    //primero obtengo los equipos cuya empresa propietaria sea la empresa
                    List<FTRelacionEGP> lstTemp1 = ObtenerRelacionesEquipoEmpresaProp(emprcodi, idElemento);

                    //Ahora obtengo los equipos cuyo empresa copropietaria sea la empresa
                    List<FTRelacionEGP> lstTemp2 = ObtenerRelacionesEquipoEmpresaCoprop(emprcodi, idElemento);

                    lstSalida.AddRange(lstTemp1);
                    lstSalida.AddRange(lstTemp2);

                    break;

                case ConstantesFichaTecnica.OrigenCategoriaGrupo:
                    //obtengo los grupos cuya empresa propietaria sea la empresa
                    lstSalida = ObtenerRelacionesGrupoEmpresaProp(emprcodi, idElemento);
                    break;
            }

            //filtro por ubicacion
            if (idUbicacion != -1)
            {
                lstSalida = lstSalida.Where(x => x.Areacodi == idUbicacion).ToList();
            }

            return lstSalida.OrderBy(x => x.EmpresaNomb).ThenBy(x => x.EmpresaCoNomb).ThenBy(x => x.Ubicacion).ThenBy(x => x.Tipo).ThenBy(x => x.EquipoNomb).ToList();
        }

        /// <summary>
        /// Obtiene la info de los elementos seleccionados
        /// </summary>
        /// <param name="strIdsSeleccionados"></param>
        /// <param name="tipo"></param>
        /// <param name="idElemento"></param>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<FTRelacionEGP> ObtenerDatosDeElementosSeleccionados(string strIdsSeleccionados, int tipo, int idElemento, int emprcodi, int idEtapa)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();
            List<FTRelacionEGP> lstTemp = new List<FTRelacionEGP>();
            List<int> listaCentrales = new List<int>() { 39, 4, 37, 5 };

            lstTemp = ObtenerListadoElementosRelacionados(tipo, idElemento, emprcodi, ConstantesFichaTecnica.PorDefecto);
            List<string> idSeleccionados = strIdsSeleccionados.Split(',').ToList();

            lstSalida = lstTemp.Where(x => idSeleccionados.Contains(x.Codigo)).ToList();

            List<FtExtEtempdeteqDTO> listaPorEmpresaEtapa = FactorySic.GetFtExtEtempdeteqRepository().GetByEmpresaEtapa(emprcodi, idEtapa);

            //Seteo valor del flag
            foreach (var item in lstSalida)
            {
                item.FlagEquipoOtroEtapa = VerificarFlagOtroEquipoEtapaO(listaPorEmpresaEtapa, item.Equicodi, item.Grupocodi, idEtapa, out int hayCambios);

                //SOLO PARA CENTRALES 
                if (listaCentrales.Contains(item.Famcodi ?? 0))
                {
                    var existeBD = listaPorEmpresaEtapa.Find(x => x.Equicodi == item.Equicodi.Value);
                    if (existeBD != null)
                        item.FlagCentralCOES = existeBD.Feeeqflagcentral;
                    else
                        item.FlagCentralCOES = "S";
                }

                item.TieneCambios = hayCambios;
            }

            return lstSalida;
        }

        /// <summary>
        /// Verifica el valor del check de EQUIPO OTRA ETAPA
        /// </summary>
        /// <param name="listaPorEmpresaEtapa"></param>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="hayCambiosGuardados"></param>
        /// <returns></returns>
        private string VerificarFlagOtroEquipoEtapaO(List<FtExtEtempdeteqDTO> listaPorEmpresaEtapa, int? equicodi, int? grupocodi, int idEtapa, out int hayCambiosGuardados)
        {
            string salida = "";
            hayCambiosGuardados = 0;

            if (equicodi != null)
            {
                //lo busco por empresa, etapa, y unidad                
                FtExtEtempdeteqDTO objC1 = listaPorEmpresaEtapa.Find(x => x.Equicodi == equicodi.Value);
                if (objC1 != null)
                {
                    if (objC1.Feeeqfeccreacion != null)
                    {
                        salida = objC1.Feeeqflagotraetapa;
                        hayCambiosGuardados = 1;
                    }
                    else
                    {
                        salida = VerificarSiUnidadPerteneceOtraEtapa(equicodi, grupocodi, idEtapa);
                        hayCambiosGuardados = 0;
                    }
                }
            }
            else
            {
                if (grupocodi != null)
                {
                    //lo busco por empresa, etapa, y unidad                    
                    FtExtEtempdeteqDTO objC2 = listaPorEmpresaEtapa.Find(x => x.Grupocodi == grupocodi.Value);

                    if (objC2 != null)
                    {
                        if (objC2.Feeeqfeccreacion != null)
                        {
                            salida = objC2.Feeeqflagotraetapa;
                            hayCambiosGuardados = 1;
                        }
                        else
                        {
                            salida = VerificarSiUnidadPerteneceOtraEtapa(equicodi, grupocodi, idEtapa);
                            hayCambiosGuardados = 0;
                        }
                    }
                }
            }

            return salida;
        }

        /// <summary>
        ///  Devuelve el listado de equipos para cierta empresa propietaria
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        private List<FTRelacionEGP> ObtenerRelacionesEquipoEmpresaProp(int emprcodi, int famcodi)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();

            List<EqEquipoDTO> lstRelacion = FactorySic.GetEqEquipoRepository().ListarPorEmpresaPropietaria(emprcodi, famcodi);

            foreach (var item in lstRelacion)
            {
                string estadoDesc = "";
                switch (item.Estadoelemento)
                {
                    case "A": estadoDesc = "Activo"; break;
                    case "B": estadoDesc = "Baja"; break;
                    case "P": estadoDesc = "En Proyecto"; break;
                    case "F": estadoDesc = "Fuera de COES"; break;
                    case "X": estadoDesc = "Anulado"; break;
                }

                FTRelacionEGP obj = new FTRelacionEGP();
                //obj.Ftprycodi 
                obj.Emprcodi = emprcodi;

                obj.Equicodi = item.Equicodi;
                //obj.Grupocodi = 
                obj.IdEmpresa = item.Idempresaelemento;
                //obj.IdEmpresaCo = 

                obj.Codigo = item.Equicodi != null ? item.Equicodi.ToString() : "";
                obj.EmpresaNomb = item.Nombempresaelemento != null ? item.Nombempresaelemento.Trim() : "";
                obj.EmpresaCoNomb = "";
                obj.Tipo = item.Tipoelemento != null ? item.Tipoelemento.Trim() : "";
                obj.EquipoNomb = item.Nombreelemento != null ? item.Nombreelemento.Trim() : "";
                obj.Ubicacion = item.Areaelemento != null ? item.Areaelemento.Trim() : "";
                obj.EstadoDesc = estadoDesc;
                obj.Areacodi = item.Areacodi.Value;
                obj.Famcodi = item.Famcodi;
                //obj.FlagEquipoOtroEtapa = 
                //obj.TieneCambios = 
                //obj.FlagEquipoOtroEtapa = 
                //obj.TieneCambios = 

                lstSalida.Add(obj);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de equipos para cierta empresa copropietaria
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        private List<FTRelacionEGP> ObtenerRelacionesEquipoEmpresaCoprop(int emprcodi, int famcodi)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();

            List<EqEquipoDTO> lstRelacion = FactorySic.GetEqEquipoRepository().ListarPorEmpresaCoPropietaria(emprcodi, famcodi);

            foreach (var item in lstRelacion)
            {
                string estadoDesc = "";
                switch (item.Estadoelemento)
                {
                    case "A": estadoDesc = "Activo"; break;
                    case "B": estadoDesc = "Baja"; break;
                    case "P": estadoDesc = "En Proyecto"; break;
                    case "F": estadoDesc = "Fuera de COES"; break;
                    case "X": estadoDesc = "Anulado"; break;
                }

                FTRelacionEGP obj = new FTRelacionEGP();
                //obj.Ftprycodi 
                obj.Emprcodi = emprcodi;

                obj.Equicodi = item.Equicodi;
                //obj.Grupocodi 
                obj.IdEmpresa = item.Idempresaelemento;
                obj.IdEmpresaCo = item.Idempresacopelemento;

                obj.Codigo = item.Equicodi != null ? item.Equicodi.ToString() : "";
                obj.EmpresaNomb = item.Nombempresaelemento != null ? item.Nombempresaelemento.Trim() : "";
                obj.EmpresaCoNomb = item.Nombempresacopelemento != null ? item.Nombempresacopelemento.Trim() : "";
                obj.Tipo = item.Tipoelemento != null ? item.Tipoelemento.Trim() : "";
                obj.EquipoNomb = item.Nombreelemento != null ? item.Nombreelemento.Trim() : "";
                obj.Ubicacion = item.Areaelemento != null ? item.Areaelemento.Trim() : "";
                obj.EstadoDesc = estadoDesc;
                obj.Areacodi = item.Areacodi.Value;
                obj.Famcodi = item.Famcodi;
                //obj.FlagEquipoOtroEtapa = 
                //obj.TieneCambios = 

                lstSalida.Add(obj);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de grupos para cierta empresa propietaria
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="catecodi"></param>
        /// <returns></returns>
        private List<FTRelacionEGP> ObtenerRelacionesGrupoEmpresaProp(int emprcodi, int catecodi)
        {
            List<FTRelacionEGP> lstSalida = new List<FTRelacionEGP>();

            List<PrGrupoDTO> lstRelacion = FactorySic.GetPrGrupoRepository().ListarPorEmpresaPropietaria(emprcodi, catecodi);

            foreach (var item in lstRelacion)
            {
                string estadoDesc = "";
                switch (item.Estadoelemento)
                {
                    case "A": estadoDesc = "Activo"; break;
                    case "B": estadoDesc = "Baja"; break;
                    case "P": estadoDesc = "En Proyecto"; break;
                    case "F": estadoDesc = "Fuera de COES"; break;
                    case "X": estadoDesc = "Anulado"; break;
                }

                FTRelacionEGP obj = new FTRelacionEGP();
                //obj.Ftprycodi = 
                obj.Emprcodi = emprcodi;

                //obj.Equicodi = 
                obj.Grupocodi = item.Grupocodi;
                obj.IdEmpresa = item.Idempresaelemento;
                //obj.IdEmpresaCo = 

                obj.Codigo = item.Grupocodi != null ? item.Grupocodi.ToString() : "";
                obj.EmpresaNomb = item.Nombempresaelemento;
                obj.EmpresaCoNomb = "";
                obj.Tipo = item.Tipoelemento;
                obj.EquipoNomb = item.Nombreelemento;
                obj.Ubicacion = item.Areaelemento;
                obj.EstadoDesc = estadoDesc;
                obj.Areacodi = item.Areacodi;
                obj.Famcodi = item.Famcodi;
                //obj.FlagEquipoOtroEtapa = 
                //obj.TieneCambios = 
                //obj.FlagEquipoOtroEtapa = 
                //obj.TieneCambios = 

                lstSalida.Add(obj);
            }

            return lstSalida;
        }
        #endregion

        #region Formato extranet Conexión, Integración y Modificación

        /// <summary>
        /// Devuelve las fichas tecnica visibles en extranet
        /// </summary>
        /// <returns></returns>
        public List<FtFictecXTipoEquipoDTO> ListarFTVisibleExtranet()
        {
            List<FtFictecXTipoEquipoDTO> lstSalida = new List<FtFictecXTipoEquipoDTO>();
            List<FtFictecXTipoEquipoDTO> lstTemp = new List<FtFictecXTipoEquipoDTO>();

            lstTemp = ListarFichaTecnica(ConstantesAppServicio.ParametroDefecto);
            lstTemp = lstTemp.Where(x => x.Fteqflagext == 1).OrderBy(x => x.Famcodi).ToList();

            //Separo por famcodi y catecodi y busco los estados en cada grupoFamcodiCatecodi
            var lista = lstTemp.GroupBy(x => new { x.Famcodi, x.Catecodi }).ToList();

            foreach (var item in lista)
            {
                List<FtFictecXTipoEquipoDTO> lstFTXFamcodiCatecodi = lstTemp.Where(x => x.Famcodi == item.Key.Famcodi && x.Catecodi == item.Key.Catecodi).OrderByDescending(x => x.Fteqcodi).ToList();

                FtFictecXTipoEquipoDTO objVigente = lstFTXFamcodiCatecodi.FirstOrDefault(x => x.Fteqfecvigenciaext <= DateTime.Today);
                if (objVigente != null)
                {
                    objVigente.EstadoActualExtranet = ConstantesFichaTecnica.EstadoStrVigente;
                    objVigente.EstadoActualExtranetDesc = "Vigente";
                    objVigente.EsVigente = true;
                }


                foreach (var regFT in lstFTXFamcodiCatecodi)
                {
                    if (regFT.EstadoActualExtranet != ConstantesFichaTecnica.EstadoStrVigente)
                    {
                        if (regFT.Fteqfecvigenciaext != null)
                        {
                            if (regFT.Fteqfecvigenciaext < DateTime.Today)
                            {
                                regFT.EstadoActualExtranet = ConstantesFichaTecnica.EstadoStrBaja;
                                regFT.EstadoActualExtranetDesc = "Baja";
                            }
                            else
                            {
                                regFT.EstadoActualExtranet = ConstantesFichaTecnica.EstadoStrProyecto;
                                regFT.EstadoActualExtranetDesc = "En Proyecto";
                            }
                        }
                        else
                        {
                            regFT.EstadoActualExtranet = "";
                            regFT.EstadoActualExtranetDesc = "";
                        }
                    }
                    lstSalida.Add(regFT);
                }


            }

            return lstSalida.OrderBy(x => x.Fteqestado).ThenByDescending(x => x.Ftecprincipal).ThenBy(x => x.OrigenPadreTipoDesc).ThenBy(x => x.OrigenTipoDesc).ThenBy(x => x.Fteqnombre).ToList();

        }

        /// <summary>
        /// Guarda los datos del formato y los valores de la configuracion de formato extranet
        /// </summary>
        /// <param name="tipoGuardado"></param>
        /// <param name="fteqcodi"></param>
        /// <param name="formato"></param>
        /// <param name="lstCorreosAdminFT"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarDatosFormatoExtranet(int tipoGuardado, int fteqcodi, FTFormatoExtranet formato, List<string> lstCorreosAdminFT, string usuario)
        {
            try
            {
                int ftfmtcodi = -1;
                List<FtExtItemcfgDTO> lstSinAccion = new List<FtExtItemcfgDTO>();
                List<FtExtItemcfgDTO> lstAGuardar = new List<FtExtItemcfgDTO>();
                List<FtExtItemcfgDTO> lstAActualizar = new List<FtExtItemcfgDTO>();
                List<FtExtItemcfgDTO> lstABorrar = new List<FtExtItemcfgDTO>();

                FtFictecXTipoEquipoDTO ft = GetFichaTecnica(fteqcodi);

                List<FTNotificacionCambio> lstDiferencias = new List<FTNotificacionCambio>();

                //Verifico si existe registros guardados para el formato
                FtExtFormatoDTO formatoBD = FactorySic.GetFtExtFormatoRepository().GetByEtapaYTipoEquipo(formato.Fteqcodi, formato.Ftetcodi);

                if (formatoBD != null) // (ACCION ACTUALIZAR) Actualizo SOLO los registros FtExtItemcfgDTO
                {
                    //Obtengo los registros FtExtItemcfgDTO guardados
                    List<FtExtItemcfgDTO> lstDataFilasBD = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(formatoBD.Ftfmtcodi);

                    List<FtExtItemcfgDTO> lstDatosTabla = formato.ListaDataFila;

                    foreach (FtExtItemcfgDTO filaTabla in lstDatosTabla)
                    {
                        int ftitcodiFila = filaTabla.Ftitcodi;

                        FtExtItemcfgDTO datosFilaBD = lstDataFilasBD.Find(x => x.Ftitcodi == ftitcodiFila);


                        if (datosFilaBD != null)
                        {
                            datosFilaBD.FlagUsado = true;
                            filaTabla.FlagUsado = true;
                            VerificarAccionRegistroItem(usuario, filaTabla, datosFilaBD, ft, out List<FtExtItemcfgDTO> lstAActualizarTemp, out List<FtExtItemcfgDTO> lstSinAccionTemp, out List<FTNotificacionCambio> lstDiferenciasTemp);

                            lstAActualizar.AddRange(lstAActualizarTemp);
                            lstSinAccion.AddRange(lstSinAccionTemp);
                            lstDiferencias.AddRange(lstDiferenciasTemp);
                        }
                    }

                    //Obtengo los registros a Guardar (nuevos) y a eliminar (ya no forman parte de la FT)
                    //Primero los nuevos a guardar
                    List<FtExtItemcfgDTO> nuevasFilas = lstDatosTabla.Where(x => x.FlagUsado != true).ToList();
                    foreach (FtExtItemcfgDTO regFila in nuevasFilas)
                    {
                        regFila.Fitcfginstructivo = regFila.Fitcfginstructivo != null ? regFila.Fitcfginstructivo : "";
                        regFila.Fitcfgusucreacion = usuario;
                        regFila.Fitcfgfeccreacion = DateTime.Now;
                    }
                    lstAGuardar.AddRange(nuevasFilas);

                    //Ahora las que ya no son parte de la FT
                    List<FtExtItemcfgDTO> filasABorrar = lstDataFilasBD.Where(x => x.FlagUsado != true).ToList();
                    lstABorrar.AddRange(filasABorrar);

                    //Validar actualizar la plantilla actual con una nueva configuración y la plantilla actual ya tiene envíos o autoguardados realizados en Extranet por el agente.
                    if (lstABorrar.Any())
                    {
                        var totalEqEnvioOAutoguardado = FactorySic.GetFtExtEnvioEqRepository().GetTotalXFormatoExtranet(formatoBD.Ftfmtcodi);
                        if (totalEqEnvioOAutoguardado > 0) throw new ArgumentException("No se puede actualizar la plantilla, ya existen envíos y/o autoguardados con la configuración actual. Debe crear una nueva ficha técnica.");
                    }

                    ftfmtcodi = GuardarActualizarFormatoExtranetTransaccionalmente(ConstantesFichaTecnica.AccionActualizar, formatoBD, lstAGuardar, lstAActualizar, lstABorrar);
                }
                else // (ACCION GUARDAR) Guardo los registros en BD  
                {
                    FtExtFormatoDTO objFormato = new FtExtFormatoDTO();

                    objFormato.Ftetcodi = formato.Ftetcodi;
                    objFormato.Fteqcodi = formato.Fteqcodi;

                    List<FtExtItemcfgDTO> lstDatosTabla = formato.ListaDataFila;
                    foreach (FtExtItemcfgDTO regFila in lstDatosTabla)
                    {
                        regFila.Fitcfginstructivo = regFila.Fitcfginstructivo != null ? regFila.Fitcfginstructivo : "";
                        regFila.Fitcfgusucreacion = usuario;
                        regFila.Fitcfgfeccreacion = DateTime.Now;
                        //regFila.Fitcfgusumodificacion = usuario;
                        //regFila.Fitcfgfecmodificacion = DateTime.Now;

                        //obtengo los cambios
                        for (int i = 1; i <= 9; i++)
                        {
                            string valCambio = "";
                            switch (i)
                            {
                                case 1: valCambio = regFila.Fitcfgflagcomentario; break;
                                case 2: valCambio = regFila.Fitcfgflagvalorconf; break;
                                case 3: valCambio = regFila.Fitcfgflagbloqedicion; break;
                                case 4: valCambio = regFila.Fitcfgflagsustento; break;
                                case 5: valCambio = regFila.Fitcfgflagsustentoconf; break;
                                case 6: valCambio = regFila.Fitcfgflaginstructivo; break;
                                case 7: valCambio = regFila.Fitcfgflagvalorobligatorio; break;
                                case 8: valCambio = regFila.Fitcfgflagsustentoobligatorio; break;
                                case 9: valCambio = regFila.Fitcfginstructivo; break;
                            }

                            //solo si el guardado es oficial obtengo los cambios, el guardado temporal no requiere lista de cambios
                            if (tipoGuardado == ConstantesFichaTecnica.GuardadoOficial)
                            {
                                FTNotificacionCambio cambio2 = ObtenerRegistroCambio(i, usuario, ft, regFila.NombreFila, valCambio, "");
                                lstDiferencias.Add(cambio2);
                            }
                        }
                    }

                    ftfmtcodi = GuardarActualizarFormatoExtranetTransaccionalmente(ConstantesFichaTecnica.AccionGuardar, objFormato, lstDatosTabla, lstAActualizar, lstABorrar);
                }

                //Notificar cambios en Ficha tecnica solo cuando el guardado sea oficial y vigente, los temporales no envian
                if (tipoGuardado == ConstantesFichaTecnica.GuardadoOficial)
                {
                    var esFichaVigente = ListarFTVisibleExtranet().Where(x => x.EsVigente && x.Fteqcodi == formato.Fteqcodi) != null;
                    NotificarCambiosEnFT(lstDiferencias, lstCorreosAdminFT);
                }


                return ftfmtcodi;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }
        }

        /// <summary>
        /// Verifica si debo actualizar o no la data de la fila, ademas obtiene la lista de diferencias
        /// </summary>
        /// <param name="usuario"></param>
        /// <param name="filaTabla"></param>
        /// <param name="filaBD"></param>
        /// <param name="fichaTec"></param>
        /// <param name="lstAActualizar"></param>
        /// <param name="lstSinAccion"></param>
        /// <param name="lstDiferencias"></param>
        public void VerificarAccionRegistroItem(string usuario, FtExtItemcfgDTO filaTabla, FtExtItemcfgDTO filaBD, FtFictecXTipoEquipoDTO fichaTec,
                                                 out List<FtExtItemcfgDTO> lstAActualizar, out List<FtExtItemcfgDTO> lstSinAccion, out List<FTNotificacionCambio> lstDiferencias)
        {
            lstAActualizar = new List<FtExtItemcfgDTO>();
            lstSinAccion = new List<FtExtItemcfgDTO>();
            lstDiferencias = new List<FTNotificacionCambio>();

            //Comparo ambos registros, si hay diferencias en algunos campos mando a lstActualizar, si es diferente totalmente mando a listaGuardar. Si son iguales mando a listaSinAccion
            int flagDiferente = 0;
            int flagIgual = 0;

            //campo cab 1
            string valTb_1 = filaTabla.Fitcfgflagcomentario;
            string valBD_1 = filaBD.Fitcfgflagcomentario;
            if (valTb_1 == valBD_1)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio1 = ObtenerRegistroCambio(1, usuario, fichaTec, filaTabla.NombreFila, valTb_1, valBD_1);
                lstDiferencias.Add(cambio1);
            }

            //campo cab 2
            string valTb_2 = filaTabla.Fitcfgflagvalorconf;
            string valBD_2 = filaBD.Fitcfgflagvalorconf;
            if (valTb_2 == valBD_2)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio2 = ObtenerRegistroCambio(2, usuario, fichaTec, filaTabla.NombreFila, valTb_2, valBD_2);
                lstDiferencias.Add(cambio2);
            }

            //campo cab 3
            string valTb_3 = filaTabla.Fitcfgflagbloqedicion;
            string valBD_3 = filaBD.Fitcfgflagbloqedicion;
            if (valTb_3 == valBD_3)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio3 = ObtenerRegistroCambio(3, usuario, fichaTec, filaTabla.NombreFila, valTb_3, valBD_3);
                lstDiferencias.Add(cambio3);
            }

            //campo cab 4
            string valTb_4 = filaTabla.Fitcfgflagsustento;
            string valBD_4 = filaBD.Fitcfgflagsustento;
            if (valTb_4 == valBD_4)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio4 = ObtenerRegistroCambio(4, usuario, fichaTec, filaTabla.NombreFila, valTb_4, valBD_4);
                lstDiferencias.Add(cambio4);
            }

            //campo cab 5
            string valTb_5 = filaTabla.Fitcfgflagsustentoconf;
            string valBD_5 = filaBD.Fitcfgflagsustentoconf;
            if (valTb_5 == valBD_5)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio5 = ObtenerRegistroCambio(5, usuario, fichaTec, filaTabla.NombreFila, valTb_5, valBD_5);
                lstDiferencias.Add(cambio5);
            }

            //campo cab 6
            string valTb_6 = filaTabla.Fitcfgflaginstructivo;
            string valBD_6 = filaBD.Fitcfgflaginstructivo;
            if (valTb_6 == valBD_6)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio6 = ObtenerRegistroCambio(6, usuario, fichaTec, filaTabla.NombreFila, valTb_6, valBD_6);
                lstDiferencias.Add(cambio6);
            }

            //campo cab 7
            string valTb_7 = filaTabla.Fitcfgflagvalorobligatorio;
            string valBD_7 = filaBD.Fitcfgflagvalorobligatorio;
            if (valTb_7 == valBD_7)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio7 = ObtenerRegistroCambio(7, usuario, fichaTec, filaTabla.NombreFila, valTb_7, valBD_7);
                lstDiferencias.Add(cambio7);
            }

            //campo cab 8
            string valTb_8 = filaTabla.Fitcfgflagsustentoobligatorio;
            string valBD_8 = filaBD.Fitcfgflagsustentoobligatorio;
            if (valTb_8 == valBD_8)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio8 = ObtenerRegistroCambio(8, usuario, fichaTec, filaTabla.NombreFila, valTb_8, valBD_8);
                lstDiferencias.Add(cambio8);
            }

            //campo cab 9
            string valTb_9 = filaTabla.Fitcfginstructivo != null ? filaTabla.Fitcfginstructivo.Trim() : "";
            string valBD_9 = filaBD.Fitcfginstructivo != null ? filaBD.Fitcfginstructivo.Trim() : "";
            if (valTb_9 == valBD_9)
            {
                flagIgual++;
            }
            else
            {
                flagDiferente++;
                FTNotificacionCambio cambio9 = ObtenerRegistroCambio(9, usuario, fichaTec, filaTabla.NombreFila, valTb_9, valBD_9);
                lstDiferencias.Add(cambio9);
            }

            //hago evaluacion
            if (flagIgual == 9) // si todos los registros son iguales, no hubo cambio
            {
                lstSinAccion.Add(filaBD);
            }
            else
            {
                if (flagDiferente > 0)
                {
                    filaBD.Fitcfgflagcomentario = filaTabla.Fitcfgflagcomentario;
                    filaBD.Fitcfgflagvalorconf = filaTabla.Fitcfgflagvalorconf;
                    filaBD.Fitcfgflagbloqedicion = filaTabla.Fitcfgflagbloqedicion;
                    filaBD.Fitcfgflagsustento = filaTabla.Fitcfgflagsustento;
                    filaBD.Fitcfgflagsustentoconf = filaTabla.Fitcfgflagsustentoconf;
                    filaBD.Fitcfgflaginstructivo = filaTabla.Fitcfgflaginstructivo;
                    filaBD.Fitcfgflagvalorobligatorio = filaTabla.Fitcfgflagvalorobligatorio;
                    filaBD.Fitcfgflagsustentoobligatorio = filaTabla.Fitcfgflagsustentoobligatorio;
                    filaBD.Fitcfginstructivo = filaTabla.Fitcfginstructivo;

                    filaBD.Fitcfgusumodificacion = usuario;
                    filaBD.Fitcfgfecmodificacion = DateTime.Now;

                    lstAActualizar.Add(filaBD);
                }
            }


        }

        /// <summary>
        /// Devuelve un registro de cambios para notificarlo mendiante correo
        /// </summary>
        /// <param name="numFlag"></param>
        /// <param name="usuario"></param>
        /// <param name="fichaTec"></param>
        /// <param name="parametro"></param>
        /// <param name="valDespues"></param>
        /// <param name="valAntes"></param>
        /// <returns></returns>
        private FTNotificacionCambio ObtenerRegistroCambio(int numFlag, string usuario, FtFictecXTipoEquipoDTO fichaTec, string parametro, string valDespues, string valAntes)
        {
            string nombCab = "";

            switch (numFlag)
            {
                case 1: nombCab = "Contiene Comentario"; break;
                case 2: nombCab = "Opción Confidencial (valor o detalle)"; break;
                case 3: nombCab = "Parámetro Bloqueado Edición"; break;
                case 4: nombCab = "Adjuntar Sustento"; break;
                case 5: nombCab = "Opción Confidencial (Sustento)"; break;
                case 6: nombCab = "Instructivo de Llenado"; break;
                case 7: nombCab = "Envío Obligatorio de valor"; break;
                case 8: nombCab = "Envío Obligatorio de sustento"; break;
                case 9: nombCab = "Detalle de instructivo de llenado"; break;
            }

            FTNotificacionCambio reg = new FTNotificacionCambio();
            reg.Codigo = fichaTec.Fteqcodi;
            reg.TipoFicha = fichaTec.OrigenTipoDesc;
            reg.NombreFicha = fichaTec.Fteqnombre;
            reg.Parametro = parametro;
            reg.NombFlag = nombCab;
            reg.ValAntes = numFlag < 9 ? (valAntes == "N" ? "No" : (valAntes == "S" ? "Si" : "")) : (valAntes);
            reg.ValDespues = numFlag < 9 ? (valDespues == "N" ? "No" : (valDespues == "S" ? "Si" : "")) : (valDespues);
            reg.Usuario = usuario;
            reg.Fecha = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaFull);

            return reg;
        }

        /// <summary>
        ///  Guarda y actualiza transaccionalmente los registros de formato extranet
        /// </summary>
        /// <param name="accion"></param>
        /// <param name="objFormato"></param>
        /// <param name="lstAGuardar"></param>
        /// <param name="lstAActualizar"></param>
        /// <param name="lstABorrar"></param>
        /// <returns></returns>
        private int GuardarActualizarFormatoExtranetTransaccionalmente(int accion, FtExtFormatoDTO objFormato, List<FtExtItemcfgDTO> lstAGuardar, List<FtExtItemcfgDTO> lstAActualizar, List<FtExtItemcfgDTO> lstABorrar)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            int ftfmtcodi = 0;

            try
            {
                #region Guardar en bd
                conn = FactorySic.GetCbReporteRepository().BeginConnection();
                tran = FactorySic.GetCbReporteRepository().StartTransaction(conn);

                if (accion == ConstantesFichaTecnica.AccionGuardar)
                {
                    //Guarda reporte
                    ftfmtcodi = SaveFtExtFormatoTransaccional(objFormato, conn, tran);

                    //Guardando filas
                    foreach (var reg in lstAGuardar)
                    {
                        reg.Ftfmtcodi = ftfmtcodi;
                        SaveFtExtItemcfgTransaccional(reg, conn, tran);
                    }
                }
                else
                {
                    if (accion == ConstantesFichaTecnica.AccionActualizar)
                    {
                        //Actualiza filas
                        foreach (var reg in lstAActualizar)
                        {
                            UpdateFtExtItemcfgTransaccional(reg, conn, tran);
                        }

                        //guardar nuevos registros
                        foreach (var reg in lstAGuardar)
                        {
                            reg.Ftfmtcodi = objFormato.Ftfmtcodi;
                            SaveFtExtItemcfgTransaccional(reg, conn, tran);
                        }

                        //eliminar registros obsoletos
                        foreach (var reg in lstABorrar)
                        {
                            DeleteFtExtItemcfgTransaccional(reg.Fitcfgcodi, conn, tran);
                        }
                    }
                }
                #endregion

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                ftfmtcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos del formato extranet.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

            return ftfmtcodi;
        }

        /// <summary>
        /// Devuelve la informacion del formato para cierto item y formato
        /// </summary>
        /// <param name="fteqcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="hayGuardado"></param>
        /// <returns></returns>
        public FTFormatoExtranet ObtenerInformacionFEGuardada(int fteqcodi, int ftetcodi, out int hayGuardado)
        {
            FTFormatoExtranet objFE = new FTFormatoExtranet();
            hayGuardado = 0;

            FtExtFormatoDTO formato = FactorySic.GetFtExtFormatoRepository().GetByEtapaYTipoEquipo(fteqcodi, ftetcodi);

            if (formato != null)
            {
                hayGuardado = 1;

                List<FtExtItemcfgDTO> lstDataFilas = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(formato.Ftfmtcodi);

                objFE.Fteqcodi = fteqcodi;
                objFE.Ftetcodi = ftetcodi;
                objFE.ListaDataFila = lstDataFilas;
            }
            return objFE;
        }

        /// <summary>
        /// Obtiene la informacion del formato para el vigente del grupo de familia
        /// </summary>
        /// <param name="fteqcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="catecodi"></param>
        /// <param name="usuario"></param>
        /// <param name="formatoAGuardar"></param>
        /// <param name="hayGuardado"></param>
        /// <returns></returns>
        public FTFormatoExtranet ObtenerInformacionFEGuardadaDelVigente(int fteqcodi, int ftetcodi, int? famcodi, int? catecodi, string usuario, FTFormatoExtranet formatoAGuardar, out int hayGuardado)
        {
            FTFormatoExtranet objFE = new FTFormatoExtranet();
            hayGuardado = 0;

            //Obtengo el vigente para la familia
            List<FtFictecXTipoEquipoDTO> lstTotalFT = ListarFTVisibleExtranet();
            List<FtFictecXTipoEquipoDTO> lstFTParaFamilia = lstTotalFT.Where(x => x.Famcodi == famcodi && x.Catecodi == catecodi).ToList();
            FtFictecXTipoEquipoDTO ftVigente = lstFTParaFamilia.Find(x => x.EstadoActualExtranet == ConstantesFichaTecnica.EstadoStrVigente);

            if (ftVigente == null)
            {
                throw new Exception("No existe ficha técnica vigente.");
            }
            else
            {
                //busco en BD si existe Formato para esta ficha tecnica
                FtExtFormatoDTO formatoVigente = FactorySic.GetFtExtFormatoRepository().GetByEtapaYTipoEquipo(ftVigente.Fteqcodi, ftetcodi);

                if (formatoVigente == null)
                {
                    throw new Exception("La Ficha Técnica Vigente no contiene un Formato Extranet registrado.");
                }
                else
                {
                    hayGuardado = 1;

                    FtExtFormatoDTO formato = FactorySic.GetFtExtFormatoRepository().GetByEtapaYTipoEquipo(fteqcodi, ftetcodi);

                    List<FtExtItemcfgDTO> lstDataFilasVigente = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(formatoVigente.Ftfmtcodi);

                    List<FtExtItemcfgDTO> lstDataFilas = new List<FtExtItemcfgDTO>();

                    //Si existen registros guardados para el que no es vigente, reemplazo los datos de la configuracion
                    if (formato != null)
                    {
                        lstDataFilas = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(formato.Ftfmtcodi);

                        //Reemplazo valores de los combos y inputText
                        foreach (var regFila in lstDataFilas)
                        {
                            //int ftitcodi = regFila.Ftitcodi;
                            //FtFictecItemDTO regFTItem = GetByIdFtFictecItem(ftitcodi);
                            int? ftpropcodiA = regFila.Ftpropcodi;
                            int? concepcodiA = regFila.Concepcodi;
                            int? propcodiA = regFila.Propcodi;

                            //Busco info en el vigente guardado en BD
                            FtExtItemcfgDTO objFilaVigente = lstDataFilasVigente.Find(x => x.Ftpropcodi == ftpropcodiA && x.Concepcodi == concepcodiA && x.Propcodi == propcodiA);

                            if (objFilaVigente != null)
                            {
                                regFila.Fitcfgflagcomentario = objFilaVigente.Fitcfgflagcomentario;
                                regFila.Fitcfgflagvalorconf = objFilaVigente.Fitcfgflagvalorconf;
                                regFila.Fitcfgflagbloqedicion = objFilaVigente.Fitcfgflagbloqedicion;
                                regFila.Fitcfgflagsustento = objFilaVigente.Fitcfgflagsustento;
                                regFila.Fitcfgflagsustentoconf = objFilaVigente.Fitcfgflagsustentoconf;
                                regFila.Fitcfgflaginstructivo = objFilaVigente.Fitcfgflaginstructivo;
                                regFila.Fitcfgflagvalorobligatorio = objFilaVigente.Fitcfgflagvalorobligatorio;
                                regFila.Fitcfgflagsustentoobligatorio = objFilaVigente.Fitcfgflagsustentoobligatorio;
                                regFila.Fitcfginstructivo = objFilaVigente.Fitcfginstructivo;
                            }
                        }
                    }
                    else //si no existe formato guardado para el no vigente, guardo la data temporalmente para poder usarla luego
                    {
                        List<string> relleno = new List<string>();
                        //guardo la data para poder hacer match
                        int idFormatoTemp = GuardarDatosFormatoExtranet(ConstantesFichaTecnica.GuardadoTemporal, fteqcodi, formatoAGuardar, relleno, usuario);

                        FtExtFormatoDTO formatoTemp = FactorySic.GetFtExtFormatoRepository().GetByEtapaYTipoEquipo(fteqcodi, ftetcodi);

                        if (formatoTemp != null)
                        {
                            lstDataFilas = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(formatoTemp.Ftfmtcodi);

                            //List<FtExtItemcfgDTO> lstDataFilasVigente = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(formatoVigente.Ftfmtcodi);

                            //Reemplazo valores de los combos y inputText
                            foreach (var regFila in lstDataFilas)
                            {
                                //int ftitcodi = regFila.Ftitcodi;
                                //FtFictecItemDTO regFTItem = GetByIdFtFictecItem(ftitcodi);
                                int? ftpropcodiA = regFila.Ftpropcodi;
                                int? concepcodiA = regFila.Concepcodi;
                                int? propcodiA = regFila.Propcodi;

                                //Busco info en el vigente guardado en BD
                                FtExtItemcfgDTO objFilaVigente = lstDataFilasVigente.Find(x => x.Ftpropcodi == ftpropcodiA && x.Concepcodi == concepcodiA && x.Propcodi == propcodiA);

                                if (objFilaVigente != null)
                                {
                                    regFila.Fitcfgflagcomentario = objFilaVigente.Fitcfgflagcomentario;
                                    regFila.Fitcfgflagvalorconf = objFilaVigente.Fitcfgflagvalorconf;
                                    regFila.Fitcfgflagbloqedicion = objFilaVigente.Fitcfgflagbloqedicion;
                                    regFila.Fitcfgflagsustento = objFilaVigente.Fitcfgflagsustento;
                                    regFila.Fitcfgflagsustentoconf = objFilaVigente.Fitcfgflagsustentoconf;
                                    regFila.Fitcfgflaginstructivo = objFilaVigente.Fitcfgflaginstructivo;
                                    regFila.Fitcfgflagvalorobligatorio = objFilaVigente.Fitcfgflagvalorobligatorio;
                                    regFila.Fitcfgflagsustentoobligatorio = objFilaVigente.Fitcfgflagsustentoobligatorio;
                                    regFila.Fitcfginstructivo = objFilaVigente.Fitcfginstructivo;
                                }
                            }
                        }

                        //Elimino el formato e item temporales
                        EliminarFormatoEItems(idFormatoTemp);
                    }

                    //seteo data obtenida
                    objFE.Fteqcodi = fteqcodi;
                    objFE.Ftetcodi = ftetcodi;
                    objFE.ListaDataFila = lstDataFilas;
                }
            }

            return objFE;
        }

        /// <summary>
        /// Elimina el formato e items temporales
        /// </summary>
        /// <param name="idFormatoTemp"></param>
        public void EliminarFormatoEItems(int idFormatoTemp)
        {
            FactorySic.GetFtExtItemcfgRepository().DeletePorFormato(idFormatoTemp);
            FactorySic.GetFtExtFormatoRepository().Delete(idFormatoTemp);
        }

        /// <summary>
        /// Envia correo de notificacion de cambios
        /// </summary>
        /// <param name="lstDiferencias"></param>
        /// <param name="lstCorreosAdminFT"></param>
        public void NotificarCambiosEnFT(List<FTNotificacionCambio> lstDiferencias, List<string> lstCorreosAdminFT)
        {
            try
            {
                SiPlantillacorreoDTO plantilla = new SiPlantillacorreoDTO();
                plantilla.Plantasunto = "Notificación de Cambios Ficha Técnica Extranet";
                plantilla.PlanticorreoFrom = "webapp@coes.org.pe";

                //ENVIAR CORREO
                if (lstCorreosAdminFT.Count > 0)
                {
                    //Envio de correo electronico
                    string from = plantilla.PlanticorreoFrom;
                    string to = string.Join(";", lstCorreosAdminFT);
                    string cc = plantilla.PlanticorreosCc;
                    string bcc = plantilla.PlanticorreosBcc;
                    string asunto = plantilla.Plantasunto;
                    string contenido = ObtenerContenidoNotificacionCambiosFT(lstDiferencias);

                    List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to, false);
                    List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc, false);
                    List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true);

                    string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                    COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asuntoSendEmail, contenido, from);

                    //Guardar en SI_CORREO
                    var correo = new SiCorreoDTO();
                    correo.Corrasunto = asunto;
                    correo.Corrcontenido = contenido;
                    correo.Corrfechaenvio = DateTime.Now; ;
                    correo.Corrfrom = TipoPlantillaCorreo.MailFrom;
                    correo.Corrto = to;
                    correo.Corrcc = cc;
                    correo.Corrbcc = bcc;
                    correo.Enviocodi = null;
                    correo.Plantcodi = null;
                    servCorreo.SaveSiCorreo(correo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Devuelve el contenido para la notificacion
        /// </summary>
        /// <param name="lstDiferencias"></param>
        /// <returns></returns>
        public string ObtenerContenidoNotificacionCambiosFT(List<FTNotificacionCambio> lstDiferencias)
        {
            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<p style='text-align: justify;'>&nbsp;</p>");
            strHtml.Append("<p>&nbsp;</p>");
            strHtml.Append("<p><span style='font-size: 13.3333px; text-align: justify;'>Informe de cambios en Ficha T&eacute;cnica Extranet:</span></p>");
            strHtml.Append("<p>&nbsp;</p>");
            strHtml.Append("<table style='height: 73px; width: 1200px; border: 1px solid black;' border='1'>");
            strHtml.Append("<tbody>");
            strHtml.Append("<tr style='height: 26px; border: 1px solid black;'>");
            strHtml.Append("<td style='width: 44.4844px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>C&oacute;digo</span></strong></td>");
            strHtml.Append("<td style='width: 137.438px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Tipo de Ficha T&eacute;cnica</span></strong></td>");
            strHtml.Append("<td style='width: 138.547px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Nombre Ficha Oficial</span></strong></td>");
            strHtml.Append("<td style='width: 147.297px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Nombre Par&aacute;metro</span></strong></td>");
            strHtml.Append("<td style='width: 126.219px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Nombre Campo</span></strong></td>");
            strHtml.Append("<td style='width: 134.188px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Valor Previo</span></strong></td>");
            strHtml.Append("<td style='width: 137.219px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Nuevo Valor</span></strong></td>");
            strHtml.Append("<td style='width: 116.219px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Usuario Modificaci&oacute;n</span></strong></td>");
            strHtml.Append("<td style='width: 116.391px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Fecha Modificaci&oacute;n</span></strong></td>");
            strHtml.Append("</tr>");

            foreach (var item in lstDiferencias)
            {
                strHtml.Append("<tr style='height: 13px; border: 1px solid black;'>");
                strHtml.AppendFormat("<td style='width: 44.4844px; height: 13px; text-align: center;'>{0}</td>", item.Codigo);
                strHtml.AppendFormat("<td style='width: 137.438px; height: 13px; text-align: center;'>{0}</td>", item.TipoFicha);
                strHtml.AppendFormat("<td style='width: 138.547px; height: 13px; text-align: center;'>{0}</td>", item.NombreFicha);
                strHtml.AppendFormat("<td style='width: 147.297px; height: 13px; text-align: center;'>{0}</td>", item.Parametro);
                strHtml.AppendFormat("<td style='width: 126.219px; height: 13px; text-align: center;'>{0}</td>", item.NombFlag);
                strHtml.AppendFormat("<td style='width: 134.188px; height: 13px; text-align: center;'>{0}</td>", item.ValAntes);
                strHtml.AppendFormat("<td style='width: 137.219px; height: 13px; text-align: center;'>{0}</td>", item.ValDespues);
                strHtml.AppendFormat("<td style='width: 116.219px; height: 13px; text-align: center;'>{0}</td>", item.Usuario);
                strHtml.AppendFormat("<td style='width: 116.391px; height: 13px; text-align: center;'>{0}</td>", item.Fecha);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            strHtml.Append("<p>&nbsp;</p>");
            strHtml.Append("<p><span style='font-size: 10pt; text-align: justify;'>Atentamente,</span></p>");
            strHtml.Append("<p><span style='font-size: 13.3333px; text-align: justify;'><img src='https://tse1.mm.bing.net/th?id=OIP.oZNQ2yuNL0bHvM147UD3HgAAAA&amp;pid=Api&amp;P=0' alt='Logo Coes' width='127' height='66' /></span></p>");
            strHtml.Append("<div style='color: #222222; font-family: Arial, Helvetica, sans-serif; font-size: small;'>&nbsp;</div>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Valida que no hay dos registros con el mismo propcodi/concepcodi que tengan NO en "parametro bloquear edicion"
        /// </summary>
        /// <param name="formato"></param>
        /// <returns></returns>
        public string ValidarDuplicidadParametroBloqueadoEdicion(FTFormatoExtranet formato)
        {
            string salida = "";

            List<FtExtItemcfgDTO> ListaFilas = formato.ListaDataFila;

            if (ListaFilas.Any())
            {
                var listaAgrup = ListaFilas.GroupBy(x => new { x.Concepcodi, x.Propcodi }).ToList();

                foreach (var item in listaAgrup)
                {
                    List<FtExtItemcfgDTO> lstAComparar = ListaFilas.Where(x => x.Concepcodi == item.Key.Concepcodi && x.Propcodi == item.Key.Propcodi).ToList();

                    List<FtExtItemcfgDTO> lstACompararConNOEnParametroBloqueadoEdicion = lstAComparar.Where(x => x.Fitcfgflagbloqedicion == "N").ToList();
                    List<FtExtItemcfgDTO> lstACompararConSIEnParametroBloqueadoEdicion = lstAComparar.Where(x => x.Fitcfgflagbloqedicion == "S").ToList();

                    //Si hay 2 o mas con NO en campo "ParametroBloqueadoEdicion" los capturo para mensaje error
                    if (lstACompararConNOEnParametroBloqueadoEdicion.Count > 1)
                    {
                        List<string> lstNombres = lstACompararConNOEnParametroBloqueadoEdicion.Select(x => x.NombreFila).ToList();
                        string nombs = String.Join(", ", lstNombres);
                        salida += "<p>Hay 2 o más filas con la misma Propiedad/Concepto donde eligieron 'NO' en el campo 'Parámetro Bloqueado Edición', pero solo esta permitido un solo 'NO'. Estas filas son: " + nombs + ".</p>";
                    }


                    //Para filas que tengan mismo concepto propiedad, valido que tengan igual configuracion en todas las columnas excepto en "Parámetro Bloqueado Edición"
                    if (lstAComparar.Count() > 1)
                    {
                        if (lstACompararConNOEnParametroBloqueadoEdicion.Count() == 1 && lstACompararConSIEnParametroBloqueadoEdicion.Count() > 0)
                        {
                            List<string> lstConf = new List<string>();
                            List<string> lstNombs = new List<string>();

                            FtExtItemcfgDTO objManda = lstACompararConNOEnParametroBloqueadoEdicion.First();
                            string txtManda = objManda.Fitcfgflagcomentario + objManda.Fitcfgflagvalorconf + objManda.Fitcfgflagsustento + objManda.Fitcfgflagsustentoconf + objManda.Fitcfgflaginstructivo + objManda.Fitcfgflagvalorobligatorio + objManda.Fitcfgflagsustentoobligatorio;
                            lstConf.Add(txtManda);
                            lstNombs.Add(objManda.NombreFila);

                            foreach (var objDep in lstACompararConSIEnParametroBloqueadoEdicion)
                            {
                                string txtDep = objDep.Fitcfgflagcomentario + objDep.Fitcfgflagvalorconf + objDep.Fitcfgflagsustento + objDep.Fitcfgflagsustentoconf + objDep.Fitcfgflaginstructivo + objDep.Fitcfgflagvalorobligatorio + objDep.Fitcfgflagsustentoobligatorio;
                                lstConf.Add(txtDep);
                                lstNombs.Add(objDep.NombreFila);
                            }

                            List<string> lstConfDiferentes = lstConf.Distinct().ToList();
                            string nombsFilas = String.Join(", ", lstNombs);

                            if (lstConfDiferentes.Count() > 1)
                            {
                                salida += "<p>Hay filas con la misma Propiedad/Concepto que tienen diferenes configuraciones. Estas filas deben tener la misma configuracion en todas las columnas excepto en 'Parámetro Bloqueado Edición'. Estas filas son: " + nombsFilas + ".</p>";
                            }
                        }
                    }


                }
            }

            return salida;
        }

        #endregion

        #region Envios Listado

        /// <summary>
        /// Devuelve la lista de empresas de los envios y con asignacion de proyectos
        /// </summary>
        /// <returns></returns>
        public List<EmpresaCoes> ListarEmpresasExtranetFT()
        {
            List<EmpresaCoes> lstSalida = new List<EmpresaCoes>();

            List<SiEmpresaDTO> lstTemp = FactorySic.GetSiEmpresaRepository().ListarEmpresaExtranetFT();

            foreach (var emp in lstTemp)
            {
                EmpresaCoes e = new EmpresaCoes();
                e.Emprcodi = emp.Emprcodi;
                e.Emprnomb = emp.Emprnomb;

                lstSalida.Add(e);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de etapas para cierta empresa con asignacion
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<FtExtEtapaDTO> ListarEtapasPorEmpresaConAsignacion(int emprcodi)
        {
            List<FtExtEtapaDTO> lstEtapas = ListFtExtEtapas();
            List<int> lstIdEtapas = ListFtExtRelempetapas().Where(x => x.Emprcodi == emprcodi).Select(x => x.Ftetcodi).Distinct().ToList();

            return lstEtapas.Where(x => lstIdEtapas.Contains(x.Ftetcodi)).OrderBy(x => x.Ftetcodi).ToList();
        }

        /// <summary>
        /// Devuelve la relacion de proyectos por empresa y etapa
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        public List<FtExtProyectoDTO> ListarProyectosPorEmpresaYEtapa(int emprcodi, int ftetcodi, string feepryestado)
        {
            return FactorySic.GetFtExtProyectoRepository().ListarPorEmpresaYEtapa(emprcodi, ftetcodi, feepryestado).OrderBy(x => x.Ftprynombre).ToList();

        }

        /// <summary>
        /// Devuelve el listado de envios
        /// </summary>
        /// <param name="emprcodis"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        public List<FtExtEnvioDTO> ObtenerListadoEnviosEtapa(string emprcodis, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, string ftetcodi)
        {
            List<FtExtEnvioDTO> lstSalida = new List<FtExtEnvioDTO>();
            List<FtExtEnvioDTO> lstTemp = new List<FtExtEnvioDTO>();

            lstTemp = FactorySic.GetFtExtEnvioRepository().ObtenerEnviosEtapas(emprcodis, estenvcodi, fechaInicio, fechaFin, ftetcodi);
            lstSalida = lstTemp.OrderByDescending(x => x.Ftenvcodi).ToList();

            //Obtenemos el listado de equipos
            List<int> lstIdEnvios = lstSalida.Select(x => x.Ftenvcodi).Distinct().ToList();
            List<FtExtEnvioEqDTO> listaEquiposTotal = ObtenerListadoDeEquiposPorEnvios(lstIdEnvios);

            List<FtExtEnvioVersionDTO> listaVersion = GetByCriteriaFtExtEnvioVersions(string.Join(",", lstIdEnvios));

            foreach (var reg in lstSalida)
            {
                FormatearFtExtEnvio(reg, listaEquiposTotal, listaVersion);
            }

            return lstSalida;
        }


        /// <summary>
        /// Devuelve el listado de envios
        /// </summary>
        /// <param name="emprcodis"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        public List<FtExtEnvioDTO> ObtenerListadoEnviosPorEstado(string emprcodis, int estenvcodi, int ftetcodi)
        {
            List<FtExtEnvioDTO> lstSalida = new List<FtExtEnvioDTO>();
            List<FtExtEnvioDTO> lstTemp = new List<FtExtEnvioDTO>();

            lstTemp = FactorySic.GetFtExtEnvioRepository().ObtenerEnviosPorEstado(emprcodis, estenvcodi, ftetcodi);
            lstSalida = lstTemp.OrderByDescending(x => x.Ftenvcodi).ToList();

            //Obtenemos el listado de equipos
            List<int> lstIdEnvios = lstSalida.Select(x => x.Ftenvcodi).Distinct().ToList();
            List<FtExtEnvioEqDTO> listaEquiposTotal = ObtenerListadoDeEquiposPorEnvios(lstIdEnvios);

            List<FtExtEnvioVersionDTO> listaVersion = GetByCriteriaFtExtEnvioVersions(string.Join(",", lstIdEnvios));

            foreach (var reg in lstSalida)
            {
                FormatearFtExtEnvio(reg, listaEquiposTotal, listaVersion);
            }

            return lstSalida;
        }

        /// <summary>
        /// Genera el reporte del listado de envios
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pathLogo"></param>
        /// <param name="empresas"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="idEstado"></param>
        /// <param name="etapas"></param>
        /// <param name="nameFile"></param>
        public void GenerarExportacionEnviosEtapa(string ruta, string pathLogo, string empresas, DateTime fechaInicio, DateTime fechaFin, string etapas, string nameFile)
        {
            List<FtExtEnvioDTO> listaEnviosTotales = ObtenerListadoReporteAmpliacionPlazo(empresas, fechaInicio, fechaFin, etapas);

            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelEnviosEtapa(xlPackage, pathLogo, listaEnviosTotales, fechaInicio, fechaFin);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera la estructura del reporte del listado de envios a exportar
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="listaEnviosTotales"></param>
        /// <param name="estado"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        private void GenerarArchivoExcelEnviosEtapa(ExcelPackage xlPackage, string pathLogo, List<FtExtEnvioDTO> listaEnviosTotales, DateTime fechaInicio, DateTime fechaFin)
        {
            string nameWS = "REPORTE";
            string titulo = "Reporte de Ampliación de Plazo de Ficha Técnica";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniFecha = colIniTitulo + 1;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo + 1;
            int rowIniTabla = rowIniTitulo + 6;

            int colCodigo = colIniTable;
            int colFecSolicitud = colIniTable + 1;
            int colEmpresa = colIniTable + 2;
            int colEtapa = colIniTable + 3;
            int colFFinPlazo = colIniTable + 4;
            int colFecAmpliacion = colIniTable + 5;
            int colUsuAmpliacion = colIniTable + 6;

            int colUltima = colIniTable + 7;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
            ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

            ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Desde:";
            ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Hasta:";
            ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

            ws.Row(rowIniTabla).Height = 20;
            ws.Cells[rowIniTabla, colCodigo].Value = "Código del Envío";
            ws.Cells[rowIniTabla, colFecSolicitud].Value = "Fecha de solicitud";
            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colEtapa].Value = "Etapa";
            ws.Cells[rowIniTabla, colFFinPlazo].Value = "Fin de Plazo";
            ws.Cells[rowIniTabla, colFecAmpliacion].Value = "Fecha de Ampliación";
            ws.Cells[rowIniTabla, colUsuAmpliacion].Value = "Usuario Ampliación";

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#000000");

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaEnviosTotales)
            {
                ws.Cells[rowData, colCodigo].Value = item.Ftenvcodi;
                ws.Cells[rowData, colFecSolicitud].Value = item.FtenvfecsolicitudDesc.Trim();
                ws.Cells[rowData, colEmpresa].Value = item.Emprnomb.Trim();
                ws.Cells[rowData, colEtapa].Value = item.Ftetnombre.Trim();

                int rowAIni = rowData;
                foreach (FtExtEnvioLogDTO log in item.ListaLog)
                {
                    ws.Cells[rowData, colFFinPlazo].Value = log.FtelogfecampliacionDesc;
                    ws.Cells[rowData, colFecAmpliacion].Value = log.FtelogfeccreacionDesc;
                    ws.Cells[rowData, colUsuAmpliacion].Value = log.Ftelogusucreacion;

                    rowData++;
                }

                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colCodigo, rowData - 1, colCodigo);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colFecSolicitud, rowData - 1, colFecSolicitud);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colEmpresa, rowData - 1, colEmpresa);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colEtapa, rowData - 1, colEtapa);


            }
            if (!listaEnviosTotales.Any()) rowData++;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Calibri", 8);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Centro");

            #endregion

            //filter
            ws.Cells[rowIniTabla, colCodigo, rowIniTabla, colUltima - 1].AutoFilter = true;
            ws.Cells[rowIniTabla, colIniTable, rowData, colUltima - 1].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        /// <summary>
        /// Devuelve el listado de equipos por grupo de envios
        /// </summary>
        /// <param name="lstIdEnvios"></param>
        /// <returns></returns>
        private List<FtExtEnvioEqDTO> ObtenerListadoDeEquiposPorEnvios(List<int> lstIdEnvios)
        {
            List<FtExtEnvioEqDTO> lstSalida = new List<FtExtEnvioEqDTO>();

            if (lstIdEnvios.Any())
            {
                string strIdsEnvios = string.Join(",", lstIdEnvios);

                lstSalida = FactorySic.GetFtExtEnvioEqRepository().ListarPorEnvios(strIdsEnvios);
            }

            return lstSalida;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla FtExtEnvioEq
        /// </summary>
        public List<FtExtEnvioEqDTO> ListFtExtEnvioEqsXEnvio(int version)
        {
            if (version == 0) return new List<FtExtEnvioEqDTO>(); ;

            FtExtEnvioVersionDTO objVersion = GetByIdFtExtEnvioVersion(version);
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(objVersion.Ftenvcodi);

            List<FtExtEnvioEqDTO> lista = GetByCriteriaFtExtEnvioEqs(version.ToString());

            foreach (var regEq in lista)
            {
                regEq.Nombempresacopelemento = "";
                if (regEq.Idempresaelemento != objEnvio.Emprcodi) //si la empresa del envio no coincide con el del equipo, entonces la empresa del envio es copropietario
                {
                    regEq.Idempresacopelemento = objEnvio.Emprcodi;
                    regEq.Nombempresacopelemento = objEnvio.Emprnomb;
                }
                regEq.TipoYCodigo = regEq.Equicodi != null ? "E" + regEq.Equicodi.Value.ToString() : "G" + regEq.Grupocodi.Value.ToString();

                regEq.Ftenvcodi = objEnvio.Ftenvcodi;
            }

            return lista.OrderBy(x => x.Nombempresaelemento).ThenBy(x => x.Areaelemento).ThenBy(x => x.Tipoelemento).ThenBy(x => x.Nombreelemento).ToList();
        }

        /// <summary>
        /// Genera el html de las carpetas (estados de envios)
        /// </summary>
        /// <param name="url"></param>
        /// <param name="emprcodi"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarHtmlCarpeta(string emprcodi, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, int ftetcodi)
        {
            List<ExtEstadoEnvioDTO> listaEstado = ListarTotalXEstadoEnvioXFiltro(emprcodi, fechaInicio, fechaFin.AddDays(1), ftetcodi);
            string htmlCarpeta = GenerarHtmlCarpetasEnvio(estenvcodi, listaEstado);

            return htmlCarpeta;
        }

        /// <summary>
        /// Devuelve los envios agrupados por su estado
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="equicodis"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoCombustible"></param>
        /// <returns></returns>
        private List<ExtEstadoEnvioDTO> ListarTotalXEstadoEnvioXFiltro(string emprcodi, DateTime fechaInicio, DateTime fechaFin, int ftetcodi)
        {
            var lista = ListExtEstadoEnvio();

            foreach (var reg in lista)
            {
                reg.Total = GetTotalEnvio(emprcodi, reg.Estenvcodi, fechaInicio, fechaFin, ftetcodi);
                //reg.Total = 0;
            }

            return lista;
        }

        /// <summary>
        /// genera el html de la tabla carpetas estado
        /// </summary>
        /// <param name="idEstado"></param>
        /// <param name="listaAll"></param>
        /// <returns></returns>
        private string GenerarHtmlCarpetasEnvio(int idEstado, List<ExtEstadoEnvioDTO> listaAll)
        {
            StringBuilder strHtml = new StringBuilder();
            strHtml.Append("<table width='100%'>");

            foreach (var reg in listaAll)
            {
                var totalRegistros = listaAll.Find(x => x.Estenvcodi == reg.Estenvcodi).Total;

                string estiloCeldaSelect = reg.Estenvcodi == idEstado ? "item_carpeta_selected" : "";
                if (totalRegistros > 0) estiloCeldaSelect += " item_tiene_dato";
                string textoCelda = totalRegistros > 0 ? string.Format("{0} ({1})", reg.Estenvnomb, totalRegistros) : reg.Estenvnomb;

                strHtml.AppendFormat(@"
                                <tr onclick='buscarEnvio({0});'>
                                    <td class='item_carpeta {2}'>{1}</td>
                                </tr>
                    ", reg.Estenvcodi, textoCelda, estiloCeldaSelect);
            }
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Obtiene el total de envios en un periodo
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="equicodis"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public int GetTotalEnvio(string emprcodi, int estenvcodi, DateTime fechaInicio, DateTime fechaFin, int ftetcodi)
        {
            return FactorySic.GetFtExtEnvioRepository().ObtenerTotalXFiltro(emprcodi, estenvcodi, fechaInicio, fechaFin, ftetcodi);
        }

        /// <summary>
        /// Lista de estados
        /// </summary>
        /// <returns></returns>
        public List<ExtEstadoEnvioDTO> ListExtEstadoEnvio()
        {
            List<int> listaEnvcodi = new List<int>();

            listaEnvcodi = new List<int>() { 1, 3, 4, 6, 7, 8, 10 };

            var lista = FactorySic.GetExtEstadoEnvioRepository().List().Where(x => listaEnvcodi.Contains(x.Estenvcodi)).ToList();

            foreach (var reg in lista)
                FormatearExtEstadoEnvio(reg);

            return lista.OrderBy(x => x.Orden).ToList();
        }

        /// <summary>
        /// Brinda formato a la tabla de carpetas estado
        /// </summary>
        /// <param name="reg"></param>
        private void FormatearExtEstadoEnvio(ExtEstadoEnvioDTO reg)
        {
            reg.Estenvnomb = GetDescripcionExtEstado(reg.Estenvcodi);
            reg.Estenvcolor = GetColorExtEstado(reg.Estenvcodi);
            reg.Orden = GetOrdenExtEstado(reg.Estenvcodi);
        }

        /// <summary>
        /// Devuelve la descripcion del estado carpeta
        /// </summary>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        public string GetDescripcionExtEstado(int estenvcodi)
        {
            string desc = string.Empty;

            switch (estenvcodi)
            {
                case ConstantesFichaTecnica.EstadoSolicitud: //1
                    desc = "Solicitud";
                    break;
                case ConstantesFichaTecnica.EstadoObservado: //6
                    desc = "Observado";
                    break;
                case ConstantesFichaTecnica.EstadoSubsanacionObs: //7
                    desc = "Subsanación de observaciones";
                    break;
                case ConstantesFichaTecnica.EstadoAprobado: //3
                    desc = "Aprobado";
                    break;
                case ConstantesFichaTecnica.EstadoAprobadoParcialmente: //10
                    desc = "Aprobado Parcialmente";
                    break;
                case ConstantesFichaTecnica.EstadoDesaprobado: //4
                    desc = "Denegado";
                    break;
                case ConstantesFichaTecnica.EstadoCancelado: //8
                    desc = "Cancelado";
                    break;

            }

            return desc;
        }

        /// <summary>
        /// Devuelve color del estado carpeta
        /// </summary>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        private string GetColorExtEstado(int estenvcodi)
        {
            string colorEstado = "SeaGreen";

            switch (estenvcodi)
            {
                case ConstantesFichaTecnica.EstadoSolicitud: //1
                    colorEstado = "blue";
                    break;
                case ConstantesFichaTecnica.EstadoObservado: //6
                    colorEstado = "red";
                    break;
                case ConstantesFichaTecnica.EstadoAprobado: //3
                    colorEstado = "green";
                    break;
                case ConstantesFichaTecnica.EstadoDesaprobado: //4
                    colorEstado = "red";
                    break;
            }

            return colorEstado;
        }

        /// <summary>
        /// Devuelve el orden que se presenta en la lista de estados
        /// </summary>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        private int GetOrdenExtEstado(int estenvcodi)
        {
            int orden = 0;

            switch (estenvcodi)
            {
                case ConstantesFichaTecnica.EstadoSolicitud: //1
                    orden = 1;
                    break;
                case ConstantesFichaTecnica.EstadoObservado: //6
                    orden = 2;
                    break;
                case ConstantesFichaTecnica.EstadoSubsanacionObs: //7
                    orden = 3;
                    break;
                case ConstantesFichaTecnica.EstadoAprobado: //3
                    orden = 4;
                    break;
                case ConstantesFichaTecnica.EstadoAprobadoParcialmente: //10
                    orden = 5;
                    break;
                case ConstantesFichaTecnica.EstadoDesaprobado: //4
                    orden = 6;
                    break;
                case ConstantesFichaTecnica.EstadoCancelado: //8
                    orden = 8;
                    break;
            }

            return orden;
        }

        /// <summary>
        /// Lista los equipos para las etapas CIO al crear nuevo envio
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="ftprycodi"></param>
        /// <returns></returns>
        public List<FTRelacionEGP> ListarEquiposNuevoEnvio(int emprcodi, int ftetcodi, int ftprycodi)
        {
            List<FTRelacionEGP> lstSalida = ListarEquipoEnvioConexIntegModif(emprcodi, ftetcodi, ftprycodi, ConstantesFichaTecnica.PorDefecto.ToString());
            return lstSalida;
        }

        /// <summary>
        /// Genera el reporte del listado de envios
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pathLogo"></param>
        /// <param name="empresas"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="idEstado"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="nameFile"></param>
        public void GenerarExportacionEnvios(string ruta, string pathLogo, string empresas, DateTime fechaInicio, DateTime fechaFin, int idEstado, int ftetcodi, string nameFile)
        {
            List<FtExtEnvioDTO> listaEnviosTotales = ObtenerListadoEnviosEtapa(empresas, idEstado, fechaInicio, fechaFin, ftetcodi.ToString());

            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelEnvios(xlPackage, pathLogo, listaEnviosTotales, idEstado, fechaInicio, fechaFin);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera la estructura del reporte del listado de envios a exportar
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="listaEnviosTotales"></param>
        /// <param name="estado"></param>
        private void GenerarArchivoExcelEnvios(ExcelPackage xlPackage, string pathLogo, List<FtExtEnvioDTO> listaEnviosTotales, int estado, DateTime fechaInicio, DateTime fechaFin)
        {
            string EstadoEnvio = ObtenerDescripcionEstadoEnvioFT(estado, 1);
            string nameWS = "REPORTE";
            string titulo = "REPORTE DE ENVÍOS DE FICHA TÉCNICA (CARPETA: " + EstadoEnvio.ToUpper() + ")";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniFecha = colIniTitulo + 1;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo + 1;
            int rowIniTabla = rowIniTitulo + 6;

            int colCodigo = colIniTable;
            int colEmpresa = colIniTable + 1;
            int colEtapa = colIniTable + 2;
            int colNombProyecto = colIniTable + 3;
            int colEquiProyecto = colIniTable + 4;
            int colNombEquipos = colIniTable + 5;
            int colUsuario = colIniTable + 6;
            int colFecSolicitud = colIniTable + 7;

            int colFechaActualizacion = -1;
            int colFechaAprobacion = -1;
            int colFechaAprobacionParcial = -1;
            int colFechaVigencia = -1;
            int colFechaDenegacion = -1;
            int colUltima = colIniTable + 8;


            if (estado == ConstantesFichaTecnica.EstadoSubsanacionObs)
            {
                colFechaActualizacion = colIniTable + 8;
                colUltima = colIniTable + 9;
            }
            if (estado == ConstantesFichaTecnica.EstadoAprobado)
            {
                colFechaActualizacion = colIniTable + 8;
                colFechaAprobacion = colIniTable + 9;
                colFechaVigencia = colIniTable + 10;
                colUltima = colIniTable + 11;
            }
            if (estado == ConstantesFichaTecnica.EstadoAprobadoParcialmente)
            {
                colFechaActualizacion = colIniTable + 8;
                colFechaAprobacionParcial = colIniTable + 9;
                colFechaVigencia = colIniTable + 10;
                colUltima = colIniTable + 11;
            }
            if (estado == ConstantesFichaTecnica.EstadoDesaprobado)
            {
                colFechaActualizacion = colIniTable + 8;
                colFechaDenegacion = colIniTable + 9;
                colUltima = colIniTable + 10;
            }
            if (estado == ConstantesFichaTecnica.EstadoCancelado)
            {
                colFechaActualizacion = colIniTable + 8;
                colUltima = colIniTable + 9;
            }


            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
            ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

            ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Desde:";
            ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Hasta:";
            ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

            ws.Row(rowIniTabla).Height = 20;
            ws.Cells[rowIniTabla, colCodigo].Value = "Código";
            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colEtapa].Value = "Etapa";
            ws.Cells[rowIniTabla, colNombProyecto].Value = "Nombre Proyecto";
            ws.Cells[rowIniTabla, colEquiProyecto].Value = "Equipo(s) Proyecto";
            ws.Cells[rowIniTabla, colNombEquipos].Value = "Nombre Equipo(s)";
            ws.Cells[rowIniTabla, colUsuario].Value = "Usuario";
            ws.Cells[rowIniTabla, colFecSolicitud].Value = "Fecha de solicitud";

            if (estado == ConstantesFichaTecnica.EstadoSubsanacionObs)
            {
                ws.Cells[rowIniTabla, colFechaActualizacion].Value = "Fecha de actualización";
            }
            if (estado == ConstantesFichaTecnica.EstadoAprobado)
            {
                ws.Cells[rowIniTabla, colFechaActualizacion].Value = "Fecha de actualización";
                ws.Cells[rowIniTabla, colFechaAprobacion].Value = "Fecha de aprobación";
                ws.Cells[rowIniTabla, colFechaVigencia].Value = "Fecha de vigencia";
            }
            if (estado == ConstantesFichaTecnica.EstadoAprobadoParcialmente)
            {
                ws.Cells[rowIniTabla, colFechaActualizacion].Value = "Fecha de actualización";
                ws.Cells[rowIniTabla, colFechaAprobacionParcial].Value = "Fecha de aprobación parcial";
                ws.Cells[rowIniTabla, colFechaVigencia].Value = "Fecha de vigencia";
            }
            if (estado == ConstantesFichaTecnica.EstadoDesaprobado)
            {
                ws.Cells[rowIniTabla, colFechaActualizacion].Value = "Fecha de actualización";
                ws.Cells[rowIniTabla, colFechaDenegacion].Value = "Fecha de denegación";
            }
            if (estado == ConstantesFichaTecnica.EstadoCancelado)
            {
                ws.Cells[rowIniTabla, colFechaActualizacion].Value = "Fecha de actualización";
            }

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#000000");

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaEnviosTotales)
            {
                ws.Cells[rowData, colCodigo].Value = item.Ftenvcodi;
                ws.Cells[rowData, colEmpresa].Value = item.Emprnomb.Trim();
                ws.Cells[rowData, colEtapa].Value = item.Ftetnombre.Trim();
                ws.Cells[rowData, colNombProyecto].Value = item.Ftprynombre.Trim();
                ws.Cells[rowData, colEquiProyecto].Value = item.EquiposProyecto.Trim();
                ws.Cells[rowData, colNombEquipos].Value = item.NombreEquipos.Trim();
                ws.Cells[rowData, colUsuario].Value = item.Ftenvususolicitud.Trim();
                ws.Cells[rowData, colFecSolicitud].Value = item.FtenvfecsolicitudDesc.Trim();

                if (estado == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    ws.Cells[rowData, colFechaActualizacion].Value = item.FtenvfecmodificacionDesc;
                }
                if (estado == ConstantesFichaTecnica.EstadoAprobado)
                {
                    ws.Cells[rowData, colFechaActualizacion].Value = item.FtenvfecmodificacionDesc;
                    ws.Cells[rowData, colFechaAprobacion].Value = item.FtenvfecaprobacionDesc;
                    ws.Cells[rowData, colFechaVigencia].Value = item.FechaVigenciaDesc;
                }
                if (estado == ConstantesFichaTecnica.EstadoAprobadoParcialmente)
                {
                    ws.Cells[rowData, colFechaActualizacion].Value = item.FtenvfecmodificacionDesc;
                    ws.Cells[rowData, colFechaAprobacionParcial].Value = item.FechaAprobacionParcialDesc;
                    ws.Cells[rowData, colFechaVigencia].Value = item.FechaVigenciaDesc;
                }
                if (estado == ConstantesFichaTecnica.EstadoDesaprobado)
                {
                    ws.Cells[rowData, colFechaActualizacion].Value = item.FtenvfecmodificacionDesc;
                    ws.Cells[rowData, colFechaDenegacion].Value = item.FechaDesaprobacionDesc;
                }
                if (estado == ConstantesFichaTecnica.EstadoCancelado)
                {
                    ws.Cells[rowData, colFechaActualizacion].Value = item.FtenvfecmodificacionDesc;
                }


                rowData++;
            }
            if (!listaEnviosTotales.Any()) rowData++;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Calibri", 8);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Centro");

            #endregion

            //filter
            ws.Cells[rowIniTabla, colCodigo, rowIniTabla, colUltima - 1].AutoFilter = true;
            ws.Cells[rowIniTabla, colIniTable, rowData, colUltima - 1].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        /// <summary>
        /// Devuelve la descripcion del estado del envio
        /// </summary>
        /// <param name="estado"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        string ObtenerDescripcionEstadoEnvioFT(int estado, int tipo)
        {
            string salida = "";
            string salida1 = "";
            string salida2 = "";

            switch (estado)
            {
                case ConstantesFichaTecnica.EstadoSolicitud: salida1 = "Solicitud"; salida2 = "Solicitados"; break;
                case ConstantesFichaTecnica.EstadoObservado: salida1 = "Observado"; salida2 = "Observados"; break;
                case ConstantesFichaTecnica.EstadoSubsanacionObs: salida1 = "Subsanación de Observaciones"; salida2 = "Subsanados"; break;
                case ConstantesFichaTecnica.EstadoAprobado: salida1 = "Aprobado"; salida2 = "Aprobados"; break;
                case ConstantesFichaTecnica.EstadoAprobadoParcialmente: salida1 = "Aprobado parcialmente"; salida2 = "Aprobados parcialmente"; break;
                case ConstantesFichaTecnica.EstadoDesaprobado: salida1 = "Denegado"; salida2 = "Denegados"; break;
                case ConstantesFichaTecnica.EstadoCancelado: salida1 = "Cancelado"; salida2 = "Cancelados"; break;
            }

            switch (tipo)
            {
                case 1: salida = salida1; break;
                case 2: salida = salida2; break;
            }

            return salida;
        }

        /// <summary>
        /// Reemplaza las variables por sus valores correspondientes
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <returns></returns>
        public Dictionary<string, string> LlenarVariablesCorreos(FtExtEnvioDTO regEnvio, List<FTParametroModificacion> lstCambios)
        {
            Dictionary<string, string> lstSalida = new Dictionary<string, string>();

            string miCorreosCopropietarios = regEnvio.CorreosCCAgentesCopropietarios != null ? regEnvio.CorreosCCAgentesCopropietarios.Trim() : "";

            string mienvio = regEnvio.Ftenvcodi.ToString();
            string miNombEmpresa = regEnvio.Emprnomb != null ? regEnvio.Emprnomb.Trim() : "";
            string miNombProyecto = regEnvio.Ftprynombre != null ? regEnvio.Ftprynombre.Trim() : "";
            string miEquiposNomb = regEnvio.EquiposProyecto != null ? regEnvio.EquiposProyecto.Trim() : "";
            string miNombEtapa = regEnvio.Ftetnombre != null ? regEnvio.Ftetnombre.Trim() : "";
            string miFecSolicitud = regEnvio.FtenvfecsolicitudDesc != null ? regEnvio.FtenvfecsolicitudDesc.Trim() : "";
            string miFecCancelacion = regEnvio.FtenvfecmodificacionDesc != null ? regEnvio.FtenvfecmodificacionDesc.Trim() : "";
            string miUsuarioSolicitud = regEnvio.Ftenvususolicitud != null ? regEnvio.Ftenvususolicitud.Trim() : "";
            string miTablaEquipoParam = ObtenerHtmlTablaParametros(lstCambios, regEnvio.Ftenvcodi, regEnvio.VersionActual.Ftevercodi);
            string miEquipos = regEnvio.NombreEquipos != null ? regEnvio.NombreEquipos.Trim() : "";

            //Observados
            string miFecRevision = regEnvio.FtenvfecobservacionDesc != null ? regEnvio.FtenvfecobservacionDesc.Trim() : "";
            string miFecMaxRespuesta = regEnvio.FtenvfecfinsubsanarobsDesc != null ? regEnvio.FtenvfecfinsubsanarobsDesc.Trim() : "";
            string miEquiposModificados = ObtenerEquiposModificados(lstCambios, regEnvio);

            //Denegados
            string miCorreoUltEvento = regEnvio.AgenteUltimoEvento != null ? regEnvio.AgenteUltimoEvento.Trim() : "";
            string miCorreosCCAgente = regEnvio.CorreosCCAgentes != null ? regEnvio.CorreosCCAgentes.Trim() : "";
            string miFecDenegacion = regEnvio.Ftenvfecsistema != null ? (regEnvio.FtenvfecsistemaDesc != null ? regEnvio.FtenvfecsistemaDesc.Trim() : "") : ObtenerFechaSistemaFT(regEnvio.Ftenvcodi).ToString(ConstantesAppServicio.FormatoFechaFull2);
            string miMensajeAgente = regEnvio.MensajeAlAgente != null ? regEnvio.MensajeAlAgente.Trim() : "";
            string miFecAprobacion = regEnvio.FtenvfecaprobacionDesc != null ? regEnvio.FtenvfecaprobacionDesc.Trim() : "";

            //Subsanados
            string miFecSubsanacion = regEnvio.Ftenvfecsistema != null ? (regEnvio.FtenvfecsistemaDesc != null ? regEnvio.FtenvfecsistemaDesc.Trim() : "") : ObtenerFechaSistemaFT(regEnvio.Ftenvcodi).ToString(ConstantesAppServicio.FormatoFechaFull2);

            //aprobacion

            //ampliacion plazo
            string miFecIniPlazo = regEnvio.FtenvfecmodificacionDesc != null ? regEnvio.FtenvfecmodificacionDesc.Trim() : "";
            string miFecFinPlazo = regEnvio.FtenvfecampliacionDesc != null ? regEnvio.FtenvfecampliacionDesc.Trim() : "";

            //aprob parcialmente            
            string miTablaAprobados = regEnvio.HtmlTablaAprobados;
            string miTablaDenegados = regEnvio.HtmlTablaDenegados;
            string miFecAprobParcial = regEnvio.FtenvfecmodificacionDesc != null ? regEnvio.FtenvfecmodificacionDesc.Trim() : "";

            //Dar baja MO
            string nombreMO = "";
            if (regEnvio.Ftenvtipoformato == ConstantesFichaTecnica.FormatoBajaModoOperacion && regEnvio.VersionActual != null)
            {
                List<FtExtEnvioEqDTO> listaEnvioEqUltVers = GetByCriteriaFtExtEnvioEqs(regEnvio.VersionActual.Ftevercodi.ToString());
                if (listaEnvioEqUltVers.Any())
                {
                    FtExtEnvioEqDTO envioEq = listaEnvioEqUltVers.First();

                    if (envioEq != null)
                        nombreMO = envioEq.Nombreelemento != null ? envioEq.Nombreelemento.Trim() : "";
                }
            }

            //Dias y horas
            string diasRecepcionSolicitud = regEnvio.DiasRecepcionSolicitud != null ? regEnvio.DiasRecepcionSolicitud : "";
            string diasRecepcionSubsanacion = regEnvio.DiasRecepcionSubsanacion != null ? regEnvio.DiasRecepcionSubsanacion : "";

            //Derivacion de envios
            string correosAdminFt = ObtenerCorreosAdminFichaTecnica();
            string miFecMaxRptaDerivacion = regEnvio.FechaMaxRptaDerivacionDesc != null ? regEnvio.FechaMaxRptaDerivacionDesc.Trim() : "";
            string lstCorreosTodasAreasSolicitud = ObtenerCorreosAreasPorEnvio(regEnvio, ConstantesFichaTecnica.EstadoSolicitud);
            string lstCorreosTodasAreasSubsanacion = ObtenerCorreosAreasPorEnvio(regEnvio, ConstantesFichaTecnica.EstadoSubsanacionObs);

            //Recordatorio Vencimiento plazo para revisar areas            
            string correosDeAreasAsignadosQueAunNoRevisan = regEnvio.CorreosAreasAsignadoPendienteRevision != null ? regEnvio.CorreosAreasAsignadoPendienteRevision : "";
            string nombAreaAsignadaQueAunNoRevisan = regEnvio.NombreAreaPendienteRevision != null ? regEnvio.NombreAreaPendienteRevision : "";
            string diasPlazoFinRevision = regEnvio.DiasPlazoFinRevisionAreas != null ? regEnvio.DiasPlazoFinRevisionAreas : "";

            //Revision de envios por las areas
            string correosDelAreaQuienEstaRevisando = regEnvio.CorreosDelAreaQuienEstaRevisando != null ? regEnvio.CorreosDelAreaQuienEstaRevisando : "";
            string nombAreaQuienEstaRevisando = regEnvio.NombreAreaQuienEstaRevisando != null ? regEnvio.NombreAreaQuienEstaRevisando : "";


            //Revision automatica de areas para envios solicitados
            string correosDelAreaQuienesDebieronRevisar = regEnvio.CorreosDelAreaQuienesDebieronRevisar != null ? regEnvio.CorreosDelAreaQuienesDebieronRevisar : "";
            string nombAreaQuienDebioRevisar = regEnvio.NombreAreaQuienDebioRevisar != null ? regEnvio.NombreAreaQuienDebioRevisar : "";

            string miFecCartaSolicitud = regEnvio.Ftenvfecinirev1Desc != null ? regEnvio.Ftenvfecinirev1Desc.Trim() : "";
            string miFecCartaSubsanacion = regEnvio.Ftenvfecinirev2Desc != null ? regEnvio.Ftenvfecinirev2Desc.Trim() : "";

            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREO_USUARIO_LT_OTRO_AGENTE, miCorreosCopropietarios);
            lstSalida.Add(ConstantesFichaTecnica.VAR_CODIGO_ENVIO, mienvio);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NOMBRE_EMPRESA_ENVIO, miNombEmpresa);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NOMBRE_PROYECTO, miNombProyecto);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NOMBRE_EQUIPO_PROYECTO, miEquiposNomb);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NOMBRE_ETAPA, miNombEtapa);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_SOLICITUD, miFecSolicitud);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_CANCELACION, miFecCancelacion);
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREO_USUARIO_SOLICITUD, miUsuarioSolicitud);
            lstSalida.Add(ConstantesFichaTecnica.VAR_TABLA_EQUIPO_PARAMETRO_MODIF_FT, miTablaEquipoParam);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NOMBRE_EQUIPOS, miEquipos);

            //Observados
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_REVISION, miFecRevision);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_MAX_RPTA, miFecMaxRespuesta);
            lstSalida.Add(ConstantesFichaTecnica.VAR_EQUIPOS_MODIFICADOS, miEquiposModificados);

            //Denegados
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREO_USUARIO_ULTIMO_EVENTO, miCorreoUltEvento);
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREOS_CC_AGENTES, miCorreosCCAgente);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_DENEGACION, miFecDenegacion);
            lstSalida.Add(ConstantesFichaTecnica.VAR_MENSAJE_AL_AGENTE, miMensajeAgente);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_APROBACION, miFecAprobacion);

            //subsanado
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_SUBSANACION_OBS, miFecSubsanacion);

            //aprobacion


            //ampliacion
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_INICIO_DE_PLAZO, miFecIniPlazo);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_FINAL_DE_PLAZO, miFecFinPlazo);

            //aprobacion parcial
            lstSalida.Add(ConstantesFichaTecnica.VAR_TABLA_EQUIPO_PARAMETRO_MODIF_FT_APROBADO, miTablaAprobados);
            lstSalida.Add(ConstantesFichaTecnica.VAR_TABLA_EQUIPO_PARAMETRO_MODIF_FT_DENEGADO, miTablaDenegados);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_APROBACION_PARCIAL, miFecAprobParcial);


            //Dar baja MO
            lstSalida.Add(ConstantesFichaTecnica.VAR_MODO_OPERACION_BAJA, nombreMO);

            //Dias recepcion
            lstSalida.Add(ConstantesFichaTecnica.VAR_NUMERO_DIAS_RECEPCION_SOLICITUD, diasRecepcionSolicitud);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NUMERO_DIAS_RECEPCION_SUBSANACION, diasRecepcionSubsanacion);

            //Derivacion envio
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREOS_ADMIN_FT, correosAdminFt);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_MAX_RPTA_DERIVACION, miFecMaxRptaDerivacion);
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREOS_AREAS_COES_SOLICITUD, lstCorreosTodasAreasSolicitud);
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREOS_AREAS_COES_SUBSANADO, lstCorreosTodasAreasSubsanacion);

            //Recordatorio vencimiento de plazo para revisar envio derivado por las areas
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREOS_AREAS_ASIGNADOS_PENDIENTE_REVISION, correosDeAreasAsignadosQueAunNoRevisan);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NOMBRE_AREA_ASIGNADA_PENDIENTE_REVISION, nombAreaAsignadaQueAunNoRevisan);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NUMERO_DIAS_FALTANTES_VENCIMIENTO_PLAZO_REVISION_AREAS, diasPlazoFinRevision);

            //Revision de envios por las areas
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREOS_DEL_AREA_ASIGNADA_QUIEN_REALIZA_REVISION, correosDelAreaQuienEstaRevisando);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NOMBRE_AREA_ASIGNADA_QUIEN_REALIZA_REVISION, nombAreaQuienEstaRevisando);


            //Revisión automatica areas solicitado
            lstSalida.Add(ConstantesFichaTecnica.VAR_CORREOS_DEL_AREA_ASIGNADA_QUIENES_DEBIERON_REVISAR, correosDelAreaQuienesDebieronRevisar);
            lstSalida.Add(ConstantesFichaTecnica.VAR_NOMBRE_AREA_ASIGNADA_QUIEN_DEBIO_REVISAR, nombAreaQuienDebioRevisar);

            //fechas cartas
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_CARTA_SOLICITUD, miFecCartaSolicitud);
            lstSalida.Add(ConstantesFichaTecnica.VAR_FECHA_CARTA_SUBSANACION, miFecCartaSubsanacion);

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de correos de las areas asignadas a cierto envio derivado
        /// </summary>
        /// <param name="envio"></param>
        /// <param name="tipoEnvio"></param>
        /// <returns></returns>
        public string ObtenerCorreosAreasPorEnvio(FtExtEnvioDTO envio, int tipoEnvio)
        {
            string salida = "";

            int miEstenvcodi = envio.Estenvcodi;
            FtExtEnvioVersionDTO version = envio.VersionOficialActual;

            if (tipoEnvio == envio.Estenvcodi)
            {
                List<FtExtCorreoareaDTO> listaAreaCorreo = ObtenerAreasAsignadasPorVersion(version.Ftevercodi);

                if (listaAreaCorreo.Any())
                {
                    string lstFaremcodis = string.Join(",", listaAreaCorreo.Select(x => x.Faremcodi).Distinct().ToList());
                    List<FtExtCorreoareadetDTO> lstCorreosAreas = lstFaremcodis != "" ? ListarCorreosPorArea(lstFaremcodis) : new List<FtExtCorreoareadetDTO>();
                    salida = lstCorreosAreas.Any() ? string.Join(";", lstCorreosAreas.Where(x => x.Faremdemail.Contains("@")).Select(x => x.Faremdemail).OrderBy(x => x).ToList()) : "";
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve el listado de correos de la administracion de ficha técnica
        /// </summary>
        public string ObtenerCorreosAdminFichaTecnica()
        {
            string salida = "";

            List<FtExtCorreoareadetDTO> lstCorreosXareaAdmin = ListarCorreosPorArea(ConstantesFichaTecnica.IdAreaAdminFT.ToString());
            salida = lstCorreosXareaAdmin.Any() ? string.Join(";", lstCorreosXareaAdmin.Where(x => x.Faremdemail.Contains("@")).Select(x => x.Faremdemail).OrderBy(x => x).ToList()) : "";

            return salida;
        }

        /// <summary>
        /// Devuelve el listado de equipos modificados (etapa modificacion de FT)
        /// </summary>
        /// <param name="lstCambios"></param>
        /// <returns></returns>
        public string ObtenerEquiposModificados(List<FTParametroModificacion> lstCambios, FtExtEnvioDTO regEnvio)
        {
            string salida = "";

            int tipoformato = regEnvio.Ftenvtipoformato;
            if (tipoformato == ConstantesFichaTecnica.FormatoBajaModoOperacion) //para envios en dar baja 
            {
                List<FtExtEnvioEqDTO> listaElemento = GetByCriteriaFtExtEnvioEqs(regEnvio.VersionActual.Ftevercodi.ToString());
                if (listaElemento.Any())
                {
                    List<string> lstEquiposM = listaElemento.Where(x => x.Nombreelemento != null).Select(x => x.Nombreelemento.Trim()).Distinct().OrderBy(x => x).ToList();
                    if (lstEquiposM.Any())
                    {
                        salida = string.Join(", ", lstEquiposM);
                    }
                }
            }
            else
            {
                if (lstCambios.Any()) //Cuando se registra un envio de modificacion de FT con cambios
                {

                    List<string> lstEquipos = lstCambios.Select(x => x.NombreEquipo).Distinct().OrderBy(x => x).ToList();

                    if (lstEquipos.Any())
                    {
                        salida = string.Join(", ", lstEquipos);
                    }
                }
                else  //otros casos
                {
                    List<FtExtEnvioEqDTO> listaEnvioEqModificados = FactorySic.GetFtExtEnvioEqRepository().GetByVersionYModificacion(regEnvio.VersionActual.Ftevercodi.ToString(), ConstantesFichaTecnica.EquiposModificadosFT);

                    if (listaEnvioEqModificados.Any())
                    {
                        List<string> lstEquiposM = listaEnvioEqModificados.Select(x => x.Nombreelemento).Distinct().OrderBy(x => x).ToList();

                        if (lstEquiposM.Any())
                        {
                            salida = string.Join(", ", lstEquiposM);
                        }
                    }
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve la tabla de parametros
        /// </summary>
        /// <returns></returns>
        public string ObtenerHtmlTablaParametros(List<FTParametroModificacion> lstCambios, int codigoEnvio, int codigoVersion)
        {
            if (lstCambios.Any()) //Cuando se registra un envio de modificacion de FT con cambios
            {

            }
            else //otros casos
            {
                ListarCambiosEtapaModificacionFT(codigoEnvio, codigoVersion, false, out lstCambios);
            }

            StringBuilder strHtml = new StringBuilder();

            List<FTParametroModificacion> lst = lstCambios;

            strHtml.Append("<table style='width: 1023px;' border='1'>");
            strHtml.Append("<tbody>");
            strHtml.Append("<tr style='height: 15px;'>");
            strHtml.Append("<td style='width: 68.0625px; background-color: #456ad9; height: 15px; border-color: #c7c7c7; text-align: center;'><strong><span style='color: #ffffff;'>C&oacute;digo</span></strong></td>");
            strHtml.Append("<td style='width: 184.047px; background-color: #456ad9; height: 15px; text-align: center;'><span style='color: #ffffff;'><strong>Nombre Equipo</strong></span></td>");
            strHtml.Append("<td style='width: 201.562px; background-color: #456ad9; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Nombre Par&aacute;metro</span></strong></td>");
            strHtml.Append("<td style='width: 176.766px; background-color: #456ad9; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Unidad Medida</span></strong></td>");
            strHtml.Append("<td style='width: 155.891px; background-color: #456ad9; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Valor actual</span></strong></td>");
            strHtml.Append("<td style='width: 196.672px; background-color: #456ad9; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Valor solicitud modificaci&oacute;n</span></strong></td>");
            strHtml.Append("</tr>");

            foreach (var item in lst)
            {
                strHtml.Append("<tr style='height: 13.4688px;'>");
                strHtml.AppendFormat("<td style='width: 68.0625px; height: 13.4688px; text-align: center;'>{0}</td>", item.Codigo);
                strHtml.AppendFormat("<td style='width: 184.047px; height: 13.4688px; text-align: center;'>{0}</td>", item.NombreEquipo);
                strHtml.AppendFormat("<td style='width: 201.562px; height: 13.4688px; text-align: center;'>{0}</td>", item.NombreParametro);
                strHtml.AppendFormat("<td style='width: 176.766px; height: 13.4688px; text-align: center;'>{0}</td>", item.UnidadMedida);
                strHtml.AppendFormat("<td style='width: 155.891px; height: 13.4688px; text-align: center;'>{0}</td>", item.ValorActual);
                strHtml.AppendFormat("<td style='width: 196.672px; height: 13.4688px; text-align: center;'>{0}</td>", item.ValorSolicitudMod);

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Realiza el envio del correo 
        /// </summary>
        /// <param name="tipoCorreo"></param>
        /// <param name="regEnvio"></param>
        private void EnvioCorreoExtranetFichaTecnica(int tpcorrcodi, FtExtEnvioDTO regEnvio, Dictionary<string, string> mapaVariable)
        {
            //Obtengo la plantilla
            int plantcodi = ObtenerPlantillaCorreos(tpcorrcodi, regEnvio);


            EnviarCorreoNotificacion(regEnvio, mapaVariable, plantcodi);
        }

        /// <summary>
        /// Envia las notificaciones de la derivacion realizada
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="mapaVariable"></param>
        private void NotificarDerivacion(FtExtEnvioDTO regEnvio, Dictionary<string, string> mapaVariable)
        {
            //Obtengo la plantilla
            int plantcodi = ObtenerPlantillaCorreosDerivacion(regEnvio);

            if (plantcodi == -1)
                throw new ArgumentException("Ocurrió un error al obtener la plantilla correspondiente para notificar la derivación. La derivación realizada no fue notificada.");

            EnviarCorreoNotificacion(regEnvio, mapaVariable, plantcodi);
        }

        /// <summary>
        /// Devuelve los codigos de las plantillas de derivacion
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <returns></returns>
        private int ObtenerPlantillaCorreosDerivacion(FtExtEnvioDTO regEnvio)
        {
            int plantillacodi = -1;

            int ftetcodi = regEnvio.Ftetcodi;
            int estenvcodi = regEnvio.Estenvcodi;
            int tipoformato = regEnvio.Ftenvtipoformato;

            if (estenvcodi == ConstantesFichaTecnica.EstadoSolicitud)
            {
                if (tipoformato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                {
                    plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSolicitudMFTDB;
                }
                else
                {
                    switch (ftetcodi)
                    {
                        case ConstantesFichaTecnica.EtapaConexion: plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSolicitudConexion; break;
                        case ConstantesFichaTecnica.EtapaIntegracion: plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSolicitudIntegracion; break;
                        case ConstantesFichaTecnica.EtapaOperacionComercial: plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSolicitudOpComercial; break;
                        case ConstantesFichaTecnica.EtapaModificacion: plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSolicitudMFT; break;
                    }
                }
            }
            else
            {
                if (estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    if (tipoformato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                    {
                        plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSubsanacionMFTDB;
                    }
                    else
                    {
                        switch (ftetcodi)
                        {
                            case ConstantesFichaTecnica.EtapaConexion: plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSubsanacionConexion; break;
                            case ConstantesFichaTecnica.EtapaIntegracion: plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSubsanacionIntegracion; break;
                            case ConstantesFichaTecnica.EtapaOperacionComercial: plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSubsanacionOpComercial; break;
                            case ConstantesFichaTecnica.EtapaModificacion: plantillacodi = ConstantesFichaTecnica.PlantcodiDerivacionSubsanacionMFT; break;
                        }
                    }
                }
            }


            return plantillacodi;
        }

        /// <summary>
        /// envia correo de notificaciones manuales
        /// </summary>
        /// <param name="plantcodi"></param>
        /// <param name="regEnvio"></param>
        /// <param name="mapaVariable"></param>
        private void NotificarManualmente(int plantcodi, FtExtEnvioDTO regEnvio, Dictionary<string, string> mapaVariable)
        {
            EnviarCorreoNotificacion(regEnvio, mapaVariable, plantcodi);
        }

        /// <summary>
        /// Envia correo segun datos
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="mapaVariable"></param>
        /// <param name="plantcodi"></param>
        /// <param name="fechaRegistro"></param>
        private void EnviarCorreoNotificacion(FtExtEnvioDTO regEnvio, Dictionary<string, string> mapaVariable, int plantcodi)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaFT(regEnvio.Ftenvcodi); //incluye fechaSistema

            SiPlantillacorreoDTO plantilla = servCorreo.GetByIdSiPlantillacorreo(plantcodi);

            try
            {
                string from = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreoFrom, mapaVariable);
                string to = CorreoAppServicio.GetTextoSinVariable(plantilla.Planticorreos, mapaVariable);
                string cc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosCc, mapaVariable);
                string bcc = CorreoAppServicio.GetTextoSinVariable(plantilla.PlanticorreosBcc, mapaVariable); //agregar a webapp@coes.org.pe
                string asunto = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantasunto, mapaVariable);
                string contenido = CorreoAppServicio.GetTextoSinVariable(plantilla.Plantcontenido, mapaVariable);

                List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to, false);
                List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc, false);
                List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true);

                string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asuntoSendEmail, contenido, from);

                var correo = new SiCorreoDTO();
                correo.Corrasunto = asunto;
                correo.Corrcontenido = contenido;
                correo.Corrfechaenvio = fechaRegistro;
                correo.Corrfechaperiodo = regEnvio.Ftenvfecsolicitud;
                correo.Corrfrom = from;
                correo.Corrto = to;
                correo.Corrcc = cc;
                correo.Emprcodi = regEnvio.Emprcodi;
                correo.Enviocodi = regEnvio.Ftenvcodi;
                correo.Plantcodi = plantcodi;

                servCorreo.SaveSiCorreo(correo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// Devuelve la plantilla solicitada
        /// </summary>
        /// <param name="tipoCorreo"></param>
        /// <returns></returns>
        private int ObtenerPlantillaCorreos(int tpcorrcodi, FtExtEnvioDTO regEnvio)
        {
            int plantillacodi = -1;

            int ftetcodi = regEnvio.Ftetcodi;
            int estenvcodi = regEnvio.Estenvcodi;

            //defino si es especial
            int? esEspecial = null;
            if (regEnvio.Ftenvtipoformato == ConstantesFichaTecnica.FormatoBajaModoOperacion) // si es de dar baja
            {
                esEspecial = 1;
            }
            else
            {
                if (regEnvio.Ftenvtipoformato == ConstantesFichaTecnica.FormatoConexIntegModif && regEnvio.EsDenegacionAprobados)
                {
                    esEspecial = 1;
                }
            }

            //defino si es ampliacion 
            int? esAmpliacion = null;
            if (regEnvio.EsAmpliacionPlazo)
            {
                esAmpliacion = 1;
            }

            FtExtRelpltcorretapaDTO regPlantilla = FactorySic.GetFtExtRelpltcorretapaRepository().ObtenerPorEtapaYCarpeta(ftetcodi, estenvcodi, tpcorrcodi, esEspecial, esAmpliacion);

            if (regPlantilla != null)
            {
                plantillacodi = regPlantilla.Plantcodi;
            }


            return plantillacodi;
        }

        /// <summary>
        /// Devuelve el usuario DEL AGENTE del ultimo evento por el estado del envio
        /// </summary>
        /// <param name="accionARealizar"></param>
        /// <param name="envio"></param>
        /// <param name="user"></param>
        /// <returns></returns>
        private string ObtenerAgenteUltimoEventoPorEstadoEnvio(FtExtEnvioDTO envio)
        {
            string ultimoUsuario = "";

            int estenvcodiEnvio = envio.Estenvcodi;

            //segun sea el estado
            switch (estenvcodiEnvio)
            {
                //Si es un envio en solicitud
                case ConstantesFichaTecnica.EstadoSolicitud:
                    //el mismo quien la solicitó
                    ultimoUsuario = envio.Ftenvususolicitud;
                    break;

                //Si es un envio cancelado
                case ConstantesFichaTecnica.EstadoCancelado:
                    //el mismo quien la solicitó
                    ultimoUsuario = envio.Ftenvususolicitud;
                    break;

                //Si es un envio observado
                case ConstantesFichaTecnica.EstadoObservado:
                    //solo se observan envios subsanados o solicitados
                    string estenvcodisD = ConstantesFichaTecnica.EstadoSubsanacionObs + "," + ConstantesFichaTecnica.EstadoSolicitud;
                    List<FtExtEnvioLogDTO> lstLogEnviosD = FactorySic.GetFtExtEnvioLogRepository().ListarPorEnviosYEstados(envio.Ftenvcodi.ToString(), estenvcodisD).Where(x => x.Ftelogusucreacion != ConstantesFichaTecnica.UsuarioSistema).OrderByDescending(x => x.Ftelogcodi).ToList();
                    List<FtExtEnvioLogDTO> lstLogEnviosDFiltro = lstLogEnviosD.Where(x => x.Ftelogusucreacion.Contains("@")).ToList();
                    FtExtEnvioLogDTO ultimoEventoD = lstLogEnviosDFiltro.FirstOrDefault();
                    if (ultimoEventoD != null) ultimoUsuario = ultimoEventoD.Ftelogusucreacion;
                    break;

                //Si es un envio subsanado
                case ConstantesFichaTecnica.EstadoSubsanacionObs:
                    //se llega a subsanado desde una solicitud (subsanacion automatica) o subsanacion (por ampliacion de plazo)
                    string estenvcodisS = ConstantesFichaTecnica.EstadoSubsanacionObs + "," + ConstantesFichaTecnica.EstadoSolicitud;
                    List<FtExtEnvioLogDTO> lstLogEnviosS = FactorySic.GetFtExtEnvioLogRepository().ListarPorEnviosYEstados(envio.Ftenvcodi.ToString(), estenvcodisS).Where(x => x.Ftelogusucreacion != ConstantesFichaTecnica.UsuarioSistema).OrderByDescending(x => x.Ftelogcodi).ToList();
                    List<FtExtEnvioLogDTO> lstLogEnviosSFiltro = lstLogEnviosS.Where(x => x.Ftelogusucreacion.Contains("@")).ToList();
                    FtExtEnvioLogDTO ultimoEventoS = lstLogEnviosSFiltro.FirstOrDefault();
                    if (ultimoEventoS != null) ultimoUsuario = ultimoEventoS.Ftelogusucreacion;
                    break;

                //Si es un envio aprobado
                case ConstantesFichaTecnica.EstadoAprobado:
                    //se llega a aprobado desde una solicitud (subsanacion automatica) o subsanacion (por ampliacion de plazo)
                    string estenvcodisA = ConstantesFichaTecnica.EstadoSubsanacionObs + "," + ConstantesFichaTecnica.EstadoSolicitud;
                    List<FtExtEnvioLogDTO> lstLogEnviosA = FactorySic.GetFtExtEnvioLogRepository().ListarPorEnviosYEstados(envio.Ftenvcodi.ToString(), estenvcodisA).Where(x => x.Ftelogusucreacion != ConstantesFichaTecnica.UsuarioSistema).OrderByDescending(x => x.Ftelogcodi).ToList();
                    List<FtExtEnvioLogDTO> lstLogEnviosAFiltro = lstLogEnviosA.Where(x => x.Ftelogusucreacion.Contains("@")).ToList();
                    FtExtEnvioLogDTO ultimoEventoA = lstLogEnviosAFiltro.FirstOrDefault();
                    if (ultimoEventoA != null) ultimoUsuario = ultimoEventoA.Ftelogusucreacion;
                    break;

                //Si es un envio aprobado Parcialmente
                case ConstantesFichaTecnica.EstadoAprobadoParcialmente:
                    //se llega a aprobado parcialmente desde una solicitud (subsanacion automatica) o subsanacion 
                    string estenvcodisAP = ConstantesFichaTecnica.EstadoSubsanacionObs + "," + ConstantesFichaTecnica.EstadoSolicitud;
                    List<FtExtEnvioLogDTO> lstLogEnviosAP = FactorySic.GetFtExtEnvioLogRepository().ListarPorEnviosYEstados(envio.Ftenvcodi.ToString(), estenvcodisAP).Where(x => x.Ftelogusucreacion != ConstantesFichaTecnica.UsuarioSistema).OrderByDescending(x => x.Ftelogcodi).ToList();
                    List<FtExtEnvioLogDTO> lstLogEnviosAPFiltro = lstLogEnviosAP.Where(x => x.Ftelogusucreacion.Contains("@")).ToList();
                    FtExtEnvioLogDTO ultimoEventoAP = lstLogEnviosAPFiltro.FirstOrDefault();
                    if (ultimoEventoAP != null) ultimoUsuario = ultimoEventoAP.Ftelogusucreacion;
                    break;

                //Si es un envio denegado
                case ConstantesFichaTecnica.EstadoDesaprobado:
                    //se llega a aprobado parcialmente desde una solicitud (subsanacion automatica) o subsanacion 
                    string estenvcodisDS = ConstantesFichaTecnica.EstadoSubsanacionObs + "," + ConstantesFichaTecnica.EstadoSolicitud;
                    List<FtExtEnvioLogDTO> lstLogEnviosDS = FactorySic.GetFtExtEnvioLogRepository().ListarPorEnviosYEstados(envio.Ftenvcodi.ToString(), estenvcodisDS).Where(x => x.Ftelogusucreacion != ConstantesFichaTecnica.UsuarioSistema).OrderByDescending(x => x.Ftelogcodi).ToList();
                    List<FtExtEnvioLogDTO> lstLogEnviosDSFiltro = lstLogEnviosDS.Where(x => x.Ftelogusucreacion.Contains("@")).ToList();
                    FtExtEnvioLogDTO ultimoEventoDS = lstLogEnviosDSFiltro.FirstOrDefault();
                    if (ultimoEventoDS != null) ultimoUsuario = ultimoEventoDS.Ftelogusucreacion;
                    break;

            }

            return ultimoUsuario.Trim();
        }
        #endregion

        #region Envío Formato Extranet - Conexión, Integración y Modificación de Ficha Técnica 

        public List<FTRelacionEGP> ListarEquipoEnvioConexIntegModif(int emprcodi, int ftetcodi, int ftprycodi, string codigoEquipos)
        {
            List<FTRelacionEGP> listaEqAll = new List<FTRelacionEGP>();

            List<int> listaCentrales = new List<int>() { 39, 4, 37, 5 };

            //Obtengo los envios activos y oficiales
            List<FtExtEnvioDTO> listaEnviosActivosYOficiales = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqNoSeleccionable("-1", -1);

            //Equipos y modos de Intranet
            List<FTRelacionEGP> listaEqTmp = new List<FTRelacionEGP>();
            if (ConstantesFichaTecnica.EtapaModificacion == ftetcodi)
            {
                FtExtRelempetapaDTO objAsignacion = GetByEmpresaYEtapaFtExtRelempetapa(emprcodi, ftetcodi);

                if (objAsignacion != null)
                {
                    List<FtExtEtempdeteqDTO> listaEqPorEmpresaEtapa = FactorySic.GetFtExtEtempdeteqRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.EstadoStrActivo, objAsignacion.Fetempcodi);
                    foreach (var regEq in listaEqPorEmpresaEtapa)
                    {
                        int codigo = regEq.Equicodi > 0 ? regEq.Equicodi.Value : regEq.Grupocodi.Value;
                        string tipoCodigo = regEq.Equicodi > 0 ? "E" + regEq.Equicodi.Value : "G" + regEq.Grupocodi.Value;
                        string tipoNomb = regEq.Equicodi > 0 ? regEq.Famnomb.Trim() : regEq.Catenomb.Trim();
                        int? emprcodiCo = regEq.Emprcodi == objAsignacion.Emprcodi ? null : (int?)objAsignacion.Emprcodi;
                        string emprnombCo = regEq.Emprcodi == objAsignacion.Emprcodi ? "" : objAsignacion.Emprnomb;

                        bool seleccionable = true; //En Modificacion de FT siempre debe mostrarse
                        if (listaCentrales.Contains(regEq.Famcodi ?? 0)) seleccionable = regEq.Feeeqflagcentral == "S";

                        listaEqTmp.Add(new FTRelacionEGP()
                        {
                            Equicodi = regEq.Equicodi,
                            Grupocodi = regEq.Grupocodi,
                            Codigo = codigo.ToString(),
                            TipoYCodigo = tipoCodigo,
                            EquipoNomb = regEq.Equinomb,
                            Ubicacion = regEq.Areanomb,
                            IdEmpresa = regEq.Emprcodi,
                            EmpresaNomb = regEq.Emprnomb,
                            IdEmpresaCo = emprcodiCo,
                            EmpresaCoNomb = emprnombCo,
                            Catecodi = regEq.Catecodi,
                            Famcodi = regEq.Famcodi,
                            Tipo = tipoNomb,
                            CheckSeleccionableEnNuevo = seleccionable
                        });
                    }
                }
            }
            else
            {
                FtExtEtempdetpryDTO objAsignacion = GetByEmpresaEtapaProyectoFtExtEtempdetpry(emprcodi, ftetcodi, ftprycodi);

                if (objAsignacion != null)
                {
                    List<FtExtEtempdetpryeqDTO> listaEqPorEmpresaEtapaProyecto = FactorySic.GetFtExtEtempdetpryeqRepository().ListarDetallesPorRelEmpresaEtapaProyecto(ConstantesFichaTecnica.EstadoStrActivo, ConstantesFichaTecnica.EstadoStrActivo, objAsignacion.Feeprycodi);

                    foreach (var regEq in listaEqPorEmpresaEtapaProyecto)
                    {
                        if (regEq.Equicodi == 267)
                        { }
                        int codigo = regEq.Equicodi > 0 ? regEq.Equicodi.Value : regEq.Grupocodi.Value;
                        string tipoCodigo = regEq.Equicodi > 0 ? "E" + regEq.Equicodi.Value : "G" + regEq.Grupocodi.Value;
                        string tipoNomb = regEq.Equicodi > 0 ? regEq.Famnomb.Trim() : regEq.Catenomb.Trim();
                        int? emprcodiCo = regEq.Emprcodi == objAsignacion.Emprcodi ? null : (int?)objAsignacion.Emprcodi;
                        string emprnombCo = regEq.Emprcodi == objAsignacion.Emprcodi ? "" : objAsignacion.Emprnomb;

                        bool seleccionable = VerificarSiDebeSeleccionarseCIO(regEq, ftetcodi, listaEnviosActivosYOficiales);

                        listaEqTmp.Add(new FTRelacionEGP()
                        {
                            Equicodi = regEq.Equicodi,
                            Grupocodi = regEq.Grupocodi,
                            Codigo = codigo.ToString(),
                            TipoYCodigo = tipoCodigo,
                            EquipoNomb = regEq.Equinomb,
                            Ubicacion = regEq.Areanomb,
                            IdEmpresa = regEq.Emprcodi,
                            EmpresaNomb = regEq.Emprnomb,
                            IdEmpresaCo = emprcodiCo,
                            EmpresaCoNomb = emprnombCo,
                            Catecodi = regEq.Catecodi,
                            Famcodi = regEq.Famcodi,
                            Tipo = tipoNomb,
                            CheckSeleccionableEnNuevo = seleccionable
                        });
                    }
                }

                //cuando sea operación comercial solo considerar los equipos de generación. Excluir los demás
                if (ConstantesFichaTecnica.EtapaOperacionComercial == ftetcodi)
                {
                    List<int> listaFamcodiGeneracion = new List<int>() { 39, 4, 37, 5, 38, 2, 36, 3 };
                    var listaEqGen = listaEqTmp.Where(x => x.Famcodi > 0 && listaFamcodiGeneracion.Contains(x.Famcodi.Value)).ToList();

                    List<int> listaCatecodiGeneracion = new List<int>() { 2 };
                    var listaPrGen = listaEqTmp.Where(x => x.Catecodi > 0 && listaCatecodiGeneracion.Contains(x.Catecodi.Value)).ToList();

                    listaEqTmp = new List<FTRelacionEGP>();
                    listaEqTmp.AddRange(listaEqGen);
                    listaEqTmp.AddRange(listaPrGen);
                }

            }

            //solo considerar equipos seleccionados de la pantalla principal
            if (ConstantesAppServicio.ParametroDefecto != codigoEquipos)
            {
                List<string> listaCodigos = codigoEquipos.Split(',').ToList();
                List<int> listaEquicodi = listaCodigos.Where(x => x.StartsWith("E")).Select(x => Convert.ToInt32(x.Replace("E", ""))).ToList();
                List<int> listaGrupocodi = listaCodigos.Where(x => x.StartsWith("G")).Select(x => Convert.ToInt32(x.Replace("G", ""))).ToList();

                //solo retornar el subconjunto
                List<FTRelacionEGP> listaEq = listaEqTmp.Where(x => listaEquicodi.Contains(x.Equicodi ?? 0)).ToList();
                List<FTRelacionEGP> listaGrupo = listaEqTmp.Where(x => listaGrupocodi.Contains(x.Grupocodi ?? 0)).ToList();
                listaEqAll.AddRange(listaEq);
                listaEqAll.AddRange(listaGrupo);
            }
            else
            {
                ////Setear Si deben o no ser seleccionables, segun su estado en las diferentes etapas
                //SetearSiEsSeleccionableSegunEtapas(listaEqTmp, ftetcodi);
                listaEqAll = listaEqTmp;
            }

            return listaEqAll.OrderBy(x => x.EmpresaNomb).ThenBy(x => x.Ubicacion).ThenBy(x => x.Tipo).ThenBy(x => x.EquipoNomb).ToList();
        }

        /// <summary>
        /// Verifica si el elemento de la etapa CIO debe poder seleccionarse o no
        /// </summary>
        /// <param name="registro"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        public bool VerificarSiDebeSeleccionarseCIO(FtExtEtempdetpryeqDTO registro, int ftetcodi, List<FtExtEnvioDTO> listaEnviosActivosYOficiales)
        {
            bool salida = true;

            //si el usuario administrador le quitó el check o puso check "equipo otra etapa" (tiene datos de auditoría)
            if (!string.IsNullOrEmpty(registro.Feepeqflagotraetapa))
            {
                return registro.Feepeqflagotraetapa == "N";
            }
            else
            {
                //De esos envios, obtengo los envios para el elemento
                List<FtExtEnvioDTO> lstEnviosPorElemento = listaEnviosActivosYOficiales.Where(x => x.Equicodi == registro.Equicodi && x.Grupocodi == registro.Grupocodi).ToList();

                //De lo anterior, obtengo los envios para la etapa seleccionada en el popup
                List<FtExtEnvioDTO> lstEnviosPorElementoParaEtapa = lstEnviosPorElemento.Where(x => x.Ftetcodi == ftetcodi).OrderByDescending(x => x.Ftenvcodi).ToList();

                if (lstEnviosPorElementoParaEtapa.Any())
                {
                    FtExtEnvioDTO env = lstEnviosPorElementoParaEtapa.First();

                    //si el ultimo envio es cancelado, parcialmente aprobado o desaprobado, verifico otros filtros
                    if (env.Estenvcodi == ConstantesFichaTecnica.EstadoCancelado || env.Estenvcodi == ConstantesFichaTecnica.EstadoAprobadoParcialmente || env.Estenvcodi == ConstantesFichaTecnica.EstadoDesaprobado)
                    {
                        //Ahora verifico si el elemento pertenece a otra etapa
                        string feepeqflagsistema_ = VerificarSiUnidadPerteneceOtraEtapa(registro.Equicodi, registro.Grupocodi, ftetcodi);

                        //si pertenece a otra etapa, no debe seleccionarse
                        if (feepeqflagsistema_ == "S")
                            salida = false;
                    }
                    else //si el ultimo envio es diferente a cancelado, parcialmente aprobado o desaprobado, no debe seleccionarse xq no debe seleccionarse xq no debe permitirse enviar dos veces mismo elemento para la misma etapa
                    {
                        salida = false;
                    }

                }
                else
                {
                    //verifico si pertenece a otra etapa

                    //Ahora verifico si el elemento pertenece a otra etapa
                    string feepeqflagsistema_ = VerificarSiUnidadPerteneceOtraEtapa(registro.Equicodi, registro.Grupocodi, ftetcodi);

                    //si pertenece a otra etapa, no debe seleccionarse
                    if (feepeqflagsistema_ == "S")
                        salida = false;
                }
            }

            return salida;
        }

        public FtExtEnvioDTO ClonarEstructuraEnvioFromBDConexIntegModif(int ftenvcodiTemporal, int versionEnvio, int estenvcodi,
                        int tipoGuardadoEnvio, string usuarioRegistro, string fteeqcodisFiltro)
        {
            List<FtExtEnvioEqDTO> listaEnvioEqBD = GetByCriteriaFtExtEnvioEqs(versionEnvio.ToString()).ToList();
            //filtrar equipos para clonar solo algunos de ellos
            if (!string.IsNullOrEmpty(fteeqcodisFiltro))
            {
                List<int> listaFteeqcodis = fteeqcodisFiltro.Split(',').Select(x => int.Parse(x)).ToList();
                listaEnvioEqBD = listaEnvioEqBD.Where(x => listaFteeqcodis.Contains(x.Fteeqcodi)).ToList();
            }

            List<FtExtEnvioDatoDTO> listaDatoAllXEqBD = GetByCriteriaFtExtEnvioDatos(string.Join(",", listaEnvioEqBD.Select(x => x.Fteeqcodi)));
            List<FtExtEnvioArchivoDTO> listaArchivoBD = ListByVersionYDatoFtExtEnvioArchivos(versionEnvio).ToList();
            List<FtExtEnvioRevisionDTO> listaRevisionBD = GetByCriteriaFtExtEnvioRevisionsXVersionYDato(versionEnvio);

            List<int> lstFtrevcodis = listaRevisionBD.Select(x => x.Ftrevcodi).Distinct().ToList();
            List<FtExtEnvioArchivoDTO> lstArchivosXRevision = ListByRevisionFtExtEnvioArchivos(string.Join(",", lstFtrevcodis));

            //Generar estructura
            DateTime fechaRegistro = DateTime.Now;

            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(ftenvcodiTemporal);
            objEnvio.Ftenvcodi = 0;
            objEnvio.Estenvcodi = estenvcodi;
            objEnvio.Ftenvtipoenvio = tipoGuardadoEnvio;

            FtExtEnvioVersionDTO objVersion = new FtExtEnvioVersionDTO()
            {
                Estenvcodi = objEnvio.Estenvcodi,
                Ftevercodi = versionEnvio,  //usado para buscar archivos en la carpeta de la version anterior
                Fteverestado = ConstantesAppServicio.Activo,
                Fteverusucreacion = usuarioRegistro,
                Fteverfeccreacion = fechaRegistro,
                Fteveroperacion = -1,
                Fteverconexion = -1,
            };

            List<FtExtEnvioEqDTO> listaEq = new List<FtExtEnvioEqDTO>();
            List<FtExtEnvioArchivoDTO> listaArchivo = new List<FtExtEnvioArchivoDTO>();
            List<FtExtEnvioRevisionDTO> listaRevision = new List<FtExtEnvioRevisionDTO>();

            //recorrer equipo
            foreach (var regEq in listaEnvioEqBD)
            {
                regEq.ListaDato = listaDatoAllXEqBD.Where(x => x.Fteeqcodi == regEq.Fteeqcodi).ToList();
                regEq.IdEnvioEq = regEq.Fteeqcodi;

                //recorrer item  que puede ingresar dato (propiedad o concepto)
                foreach (var regDato in regEq.ListaDato)
                {
                    regDato.FtedatcodiOld = regDato.Ftedatcodi; //codigo para comparar

                    //archivos x dato
                    List<FtExtEnvioReldatoarchivoDTO> listaRelDatoArchivo = new List<FtExtEnvioReldatoarchivoDTO>();
                    var listaArchivoXDato = listaArchivoBD.Where(x => x.Ftedatcodi == regDato.Ftedatcodi).ToList();
                    foreach (var regArch in listaArchivoXDato)
                    {
                        regArch.Ftearccodi = 0;
                        regArch.Ftitcodi = regDato.Ftitcodi; //carpeta
                        listaArchivo.Add(regArch);

                        listaRelDatoArchivo.Add(new FtExtEnvioReldatoarchivoDTO()
                        {
                            Archivo = regArch
                        });
                    }

                    //revision x dato 
                    FtExtEnvioReldatorevDTO relDatoRev = new FtExtEnvioReldatorevDTO();
                    var regRev = listaRevisionBD.Find(x => x.Ftedatcodi == regDato.Ftedatcodi) ?? new FtExtEnvioRevisionDTO();
                    var ftrevcodiActual = regRev.Ftrevcodi;
                    regRev.Ftrevcodi = 0;
                    regRev.Ftedatcodi = regDato.Ftedatcodi;

                    //>>> AGREGAR ARCHIVOS POR REVISION
                    List<FtExtEnvioRelrevarchivoDTO> listaRelRevArchivo = new List<FtExtEnvioRelrevarchivoDTO>();
                    var lstArchivosFila = lstArchivosXRevision.Where(x => x.Ftrevcodi == ftrevcodiActual).ToList();
                    foreach (var item in lstArchivosFila)
                    {
                        item.Ftitcodi = regDato.Ftitcodi; //carpeta
                        listaArchivo.Add(item);

                        listaRelRevArchivo.Add(new FtExtEnvioRelrevarchivoDTO()
                        {
                            Archivo = item
                        });
                    }

                    regRev.ListaArchivosRev = lstArchivosFila;

                    listaRevision.Add(regRev);

                    relDatoRev.Revision = regRev; //se copia la revisión pero quitando su id, si no tiene entonces el estado es null

                    //actualizar dato
                    regDato.Fteeqcodi = 0;
                    regDato.Ftedatcodi = 0;
                    regDato.RelRevisionDato = relDatoRev;
                    regDato.ListaRelDatoArchivo = listaRelDatoArchivo;
                    regDato.ListaRelRevArchivo = listaRelRevArchivo;
                    if (!string.IsNullOrEmpty(regRev.Ftrevestado)) //ya se revisó la solicitud en la Intranet y el agente modificó valores en la Extranet
                    {
                        bool esEditableYRevisable = regRev.Ftrevestado != ConstantesFichaTecnica.OpcionConforme; //regDato.Ftedatflagmodificado == 1 && 
                        regDato.Ftedatflageditable = esEditableYRevisable ? "S" : "N";
                        regDato.Ftedatflagrevisable = esEditableYRevisable ? "S" : "N";
                    }
                    else
                    {
                        //Hubo revisión del envio en la Intranet pero como no hubo modificación del agente entonces no hubo revision del item
                        if (ftrevcodiActual > 0)
                        {
                            regDato.Ftedatflageditable = "N";
                            regDato.Ftedatflagrevisable = "N";
                        }
                    }
                }

                //actualizar eq
                regEq.Fteeqcodi = 0;
                regEq.TipoYCodigo = regEq.Equicodi != null ? "E" + regEq.Equicodi.Value.ToString() : "G" + regEq.Grupocodi.Value.ToString();
                listaEq.Add(regEq);
            }

            objEnvio.VersionActual = objVersion;

            objEnvio.ListaArchivo = listaArchivo;
            objEnvio.ListaRevision = listaRevision;

            objVersion.ListaEquipoEnvio = listaEq;
            objEnvio.CodigoEquipos = listaEq.Select(x => x.TipoYCodigo).Distinct().ToList();

            return objEnvio;
        }

        public async Task<FtExtEnvioDTO> GetEnvioTemporalConexIntegModif(int emprcodi, int ftetcodi, int ftprycodi, string codigoEquipos, string usuarioRegistro
                                                        , string carpetaUploadTemporal)
        {
            //Obtener equipos segun los filtros
            var listaEquipoEnvio = ListarEquipoEnvioConexIntegModif(emprcodi, ftetcodi, ftprycodi, codigoEquipos);

            //Obtener fichas
            List<FtFictecXTipoEquipoDTO> listaFichaVigente = ListarFTVisibleExtranet().Where(x => x.EsVigente).ToList();
            List<FtExtFormatoDTO> listaRelFichaEtapa = GetByCriteriaFtExtFormatos();
            List<FtExtItemcfgDTO> listaConfItemXFichaEtapa = GetByCriteriaFtExtItemcfgs();

            //Generar estructura
            DateTime fechaRegistro = DateTime.Now;
            int? ftprycodiFinal = ftprycodi > 0 ? (int?)ftprycodi : null;

            FtExtEnvioDTO objEnvio = new FtExtEnvioDTO()
            {
                Estenvcodi = ConstantesFichaTecnica.EstadoSolicitud,
                Ftevcodi = null,
                Ftetcodi = ftetcodi,
                Emprcodi = emprcodi,
                Ftprycodi = ftprycodiFinal,
                Ftenvfecsolicitud = fechaRegistro,
                Ftenvususolicitud = usuarioRegistro,
                Ftenvtipoenvio = ConstantesFichaTecnica.GuardadoTemporal,
                Ftenvtipoformato = ConstantesFichaTecnica.FormatoConexIntegModif
            };

            FtExtEnvioVersionDTO objVersion = new FtExtEnvioVersionDTO()
            {
                Estenvcodi = ConstantesFichaTecnica.EstadoSolicitud,
                Fteverestado = ConstantesAppServicio.Activo,
                Fteverusucreacion = usuarioRegistro,
                Fteverfeccreacion = fechaRegistro,
                Fteveroperacion = -1,
                Fteverconexion = -1,
            };

            List<FtExtEnvioEqDTO> listaEq = new List<FtExtEnvioEqDTO>();
            List<FtExtEnvioArchivoDTO> listaArchivo = new List<FtExtEnvioArchivoDTO>();
            List<string> listaEqSinFicha = new List<string>();
            foreach (var regEqFiltro in listaEquipoEnvio)
            {
                //configuracion de formato
                int? ftfmtcodi = null;
                var objFichaXEq = listaFichaVigente.Find(x => x.Famcodi == regEqFiltro.Famcodi && x.Catecodi == regEqFiltro.Catecodi);
                if (objFichaXEq != null)
                {
                    var objRelFichaEtapa = listaRelFichaEtapa.Find(x => x.Fteqcodi == objFichaXEq.Fteqcodi && x.Ftetcodi == ftetcodi);
                    if (objRelFichaEtapa != null) ftfmtcodi = objRelFichaEtapa.Ftfmtcodi;
                }

                //Si el equipo tiene formato de ficha entonces agregarlo
                if (ftfmtcodi > 0)
                {
                    //si el equipo fue seleccionado por el agente
                    string estado = regEqFiltro.CheckSeleccionableEnNuevo ? "S" : "N";

                    FtExtEnvioEqDTO objEq = new FtExtEnvioEqDTO()
                    {
                        Equicodi = regEqFiltro.Equicodi,
                        Grupocodi = regEqFiltro.Grupocodi,
                        Famcodi = regEqFiltro.Famcodi,
                        Catecodi = regEqFiltro.Catecodi,
                        Fteeqestado = estado,
                        Ftfmtcodi = ftfmtcodi,
                        TipoYCodigo = regEqFiltro.TipoYCodigo,
                    };

                    List<FtExtEnvioDatoDTO> listaDato = new List<FtExtEnvioDatoDTO>();
                    if (estado == "S" && objEq.Ftfmtcodi > 0)
                    {
                        int codigo = regEqFiltro.Equicodi > 0 ? regEqFiltro.Equicodi.Value : regEqFiltro.Grupocodi.Value;

                        //obtener los items de ficha con su valor
                        FTFiltroReporteExcel objFichaConDato = GetFichaYDatosXEquipoOModo(objFichaXEq.Fteqcodi, codigo, true, ConstantesFichaTecnica.EXTRANET, DateTime.Today);
                        ListarTreeItemsFichaTecnica(objFichaConDato, out List<FtFictecItemDTO> listaAllItems, out List<FtFictecItemDTO> listaItems, out List<TreeItemFichaTecnica> listaItemsJson);

                        var listaItem = listaConfItemXFichaEtapa.Where(x => x.Ftfmtcodi == objEq.Ftfmtcodi);
                        foreach (var objItem in listaItem)
                        {
                            string valorCelda = "";
                            string comentarioCelda = "";
                            FtFictecItemDTO itemFichaDato = listaAllItems.Find(x => x.Ftitcodi == objItem.Ftitcodi);
                            if (itemFichaDato != null)
                            {
                                valorCelda = itemFichaDato.Valor;
                                comentarioCelda = itemFichaDato.Itemcomentario;

                                if (itemFichaDato.EsNumerico)
                                {
                                    //el agente habia registrado vacio pero el administrador lo habia guardado como cero, entonces volverlo a vacío
                                    if (itemFichaDato.CheckCeroCorrecto == 0 && itemFichaDato.Valor == "0") itemFichaDato.Valor = "";
                                }

                                List<FtExtEnvioReldatoarchivoDTO> listaRelDatoArchivo = new List<FtExtEnvioReldatoarchivoDTO>();
                                if (itemFichaDato.EsArchivo && !string.IsNullOrEmpty(valorCelda))
                                {
                                    //en las tablas propequi y prgrupodat, los archivos estan como url, entonces descargarlos
                                    FTArchivoDescargado objRes = await DescargarArchivoValorOSustento(valorCelda, carpetaUploadTemporal, ConstantesFichaTecnica.STipoArchivoValorDato, objItem.Ftitcodi);

                                    if (objRes.ArchivoEstaDescargado)
                                    {
                                        FtExtEnvioArchivoDTO objArchivo = new FtExtEnvioArchivoDTO()
                                        {
                                            Ftearcnombreoriginal = objRes.NombreOriginal,
                                            Ftearcnombrefisico = objRes.NombreArchivoFisico,
                                            Ftearctipo = ConstantesFichaTecnica.TipoArchivoAgenteValorDato,
                                            Ftearcestado = 1,
                                            Ftearcflagsustentoconf = "N",
                                        };
                                        listaArchivo.Add(objArchivo);

                                        listaRelDatoArchivo.Add(new FtExtEnvioReldatoarchivoDTO()
                                        {
                                            Archivo = objArchivo
                                        });
                                    }

                                    valorCelda = ""; //Si el item es archivo entonces no tiene texto editable, solo selección de archivos
                                }

                                //dato en la carpeta solicitud
                                FtExtEnvioDatoDTO objDato = new FtExtEnvioDatoDTO()
                                {
                                    Fitcfgcodi = objItem.Fitcfgcodi,
                                    Ftitcodi = objItem.Ftitcodi,
                                    Ftedatvalor = valorCelda,
                                    Ftedatflagvalorconf = "N",
                                    Ftedatcomentario = comentarioCelda,
                                    Ftedatflagsustentoconf = "",
                                    Ftedatflagmodificado = objItem.Fitcfgflagbloqedicion == "N" ? 1 : 0, // se considera modificado los que son editables en configuración de formato
                                    Ftedatflageditable = objItem.Fitcfgflagbloqedicion == "N" ? "S" : "N", // se considera editable los que son editables en configuración de formato
                                    Ftedatflagrevisable = objItem.Fitcfgflagbloqedicion == "N" ? "S" : "N", //puede ser revisable en Intranet
                                    ListaRelDatoArchivo = listaRelDatoArchivo
                                };

                                listaDato.Add(objDato);
                            }
                        }
                    }
                    objEq.ListaDato = listaDato;

                    listaEq.Add(objEq);
                }
                else
                {
                    listaEqSinFicha.Add(string.Format("Empresa: {0}, Ubicación: {1}, Tipo: {2}, Equipo: {3}", regEqFiltro.EmpresaNomb, regEqFiltro.Ubicacion, regEqFiltro.Tipo, regEqFiltro.EquipoNomb));
                }
            }

            objEnvio.VersionActual = objVersion;
            //objEnvio.LogEnvioActual = objLog; //Comentado porque genera accion = ENVIADO en el reporte Cumplimiento
            objEnvio.ListaArchivo = listaArchivo;
            objEnvio.MensajeEqSinFicha = string.Join(". ", listaEqSinFicha);
            objVersion.ListaEquipoEnvio = listaEq;

            return objEnvio;
        }

        private async Task<FTArchivoDescargado> DescargarArchivoValorOSustento(string urlArchivo, string carpetaUploadTemporal, string subcarpeta, int carpetaCodigoItem)
        {
            bool archivoEstaDescargado = false;
            string nombreArchivoFisico = "";
            string nombreOriginal = "";

            Uri uriResult;
            bool esUrlValido = !string.IsNullOrEmpty(urlArchivo) && Uri.TryCreate(urlArchivo, UriKind.Absolute, out uriResult)
                                                            && (uriResult.Scheme == Uri.UriSchemeHttp || uriResult.Scheme == Uri.UriSchemeHttps);

            if (esUrlValido)
            {
                //agregar parametro adicional a la url para "bypassear" la validación de confidencialidad
                string urlIntranet = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyUrlIntranet];
                string urlExtranet = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyUrlExtranet];

                if (urlArchivo.ToUpper() == urlIntranet.ToUpper() || urlArchivo.ToUpper() == urlExtranet.ToUpper())
                {
                    urlArchivo = urlArchivo + "&idapp=" + ConstantesFichaTecnica.ClaveOcultaPermiteDescargaConfidencial;
                }

                try
                {
                    Directory.CreateDirectory(carpetaUploadTemporal);
                    Directory.CreateDirectory(carpetaUploadTemporal + subcarpeta + "\\");
                    Directory.CreateDirectory(carpetaUploadTemporal + subcarpeta + "\\" + carpetaCodigoItem);
                    string folderDestino = carpetaUploadTemporal + subcarpeta + "\\" + carpetaCodigoItem + "\\";

                    //descargar archivos que estan en otros sites COES distinto a Extranet
                    using (var client = new HttpClient())
                    {
                        client.Timeout = TimeSpan.FromMinutes(10); //esperar máximo 10minutos en la descarga del archivo

                        using (var response = await client.GetAsync(urlArchivo).ConfigureAwait(false))
                        {
                            // make sure our request was successful
                            response.EnsureSuccessStatusCode();

                            // read the filename from the Content-Disposition header
                            if (response.Content.Headers.ContentDisposition != null)
                            {
                                nombreOriginal = response.Content.Headers.ContentDisposition.FileName;
                                nombreOriginal = nombreOriginal.Replace("\"", "");
                            }
                            else
                            {
                                if (response.Content.Headers != null)
                                {
                                    nombreOriginal = (string)response.Content.Headers.GetValues("Content-Disposition").FirstOrDefault();
                                    nombreOriginal = nombreOriginal.Replace("\"", "").Replace("filename", "").Replace("=", "");
                                }
                            }

                            nombreOriginal = (nombreOriginal ?? "").Trim();
                            if (!string.IsNullOrEmpty(nombreOriginal))
                            {
                                // read the downloaded file data
                                var stream = await response.Content.ReadAsStreamAsync();

                                //guardar en bd maximo de 50 caracteres
                                if (nombreOriginal.Length > 50) nombreOriginal = nombreOriginal.Substring(nombreOriginal.Length - 50, 50);

                                string myFilePath = "C:\\" + nombreOriginal;
                                string ext = Path.GetExtension(myFilePath);
                                nombreArchivoFisico = "archivo_ft2_" + DateTime.Now.Ticks + ext;

                                // write the steam content into a file
                                using (var fileStream = File.Create(folderDestino + nombreArchivoFisico))
                                {
                                    stream.CopyTo(fileStream);
                                    archivoEstaDescargado = true;
                                }
                            }
                        }
                    }

                }
                catch (Exception ex)
                {
                    Logger.Error("Error en descargar url " + urlArchivo);
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                }
            }

            FTArchivoDescargado objRes = new FTArchivoDescargado()
            {
                ArchivoEstaDescargado = archivoEstaDescargado,
                NombreArchivoFisico = nombreArchivoFisico,
                NombreOriginal = nombreOriginal,
            };

            return objRes;
        }

        /// <summary>
        /// Determinar los equipos que son nuevos, que se pueden actualizar y los que se ocultaran
        /// </summary>
        /// <param name="codigoVersionAutoguardado"></param>
        /// <param name="emprcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="ftprycodi"></param>
        /// <param name="codigoEquipos"></param>
        /// <param name="listaEqNuevo"></param>
        /// <param name="listaFteeqcodiUpdate"></param>
        /// <param name="listaFteeqcodiEliminar"></param>
        public void ListarEquipoAdicionalSinAutoguardado(bool esFormato, int codigoVersionAutoguardado, int emprcodi, int ftetcodi, int ftprycodi, string codigoEquipos
                                            , out List<string> listaEqNuevo, out List<int> listaFteeqcodiUpdate, out List<int> listaFteeqcodiEliminar)
        {
            //Obtener fichas vigentes
            List<FtFictecXTipoEquipoDTO> listaFichaVigente = ListarFTVisibleExtranet().Where(x => x.EsVigente).ToList();
            List<FtExtFormatoDTO> listaRelFichaEtapa = GetByCriteriaFtExtFormatos();

            //Obtener equipos que pueden ser parte del envio segun los filtros
            var listaEquipoNuevoEnvio = ListarEquipoEnvioConexIntegModif(emprcodi, ftetcodi, ftprycodi, codigoEquipos);
            foreach (var regEqFiltro in listaEquipoNuevoEnvio)
            {
                //configuracion de formato
                int? ftfmtcodi = null;
                var objFichaXEq = listaFichaVigente.Find(x => x.Famcodi == regEqFiltro.Famcodi && x.Catecodi == regEqFiltro.Catecodi);
                if (objFichaXEq != null)
                {
                    var objRelFichaEtapa = listaRelFichaEtapa.Find(x => x.Fteqcodi == objFichaXEq.Fteqcodi && x.Ftetcodi == ftetcodi);
                    if (objRelFichaEtapa != null) ftfmtcodi = objRelFichaEtapa.Ftfmtcodi;
                }

                //asignar formato vigente a equipo
                regEqFiltro.Ftfmtcodi = ftfmtcodi;
            }

            //equipos autoguardados
            var listaEnvioEqAutoguardado = GetByCriteriaFtExtEnvioEqsTodoEstado(codigoVersionAutoguardado.ToString());

            //salida
            listaEqNuevo = new List<string>();
            listaFteeqcodiUpdate = new List<int>();
            var listaCodigoEqUpdate = new List<string>();
            listaFteeqcodiEliminar = new List<int>();

            foreach (var item in listaEquipoNuevoEnvio)
            {
                //Pantalla de Formato
                if (esFormato)
                {
                    //buscar equipo con el mismo formato
                    var regEqEnv = listaEnvioEqAutoguardado.Find(x => x.TipoYCodigo == item.TipoYCodigo && x.Ftfmtcodi == item.Ftfmtcodi);
                    if (regEqEnv != null)
                    {
                        //equipos existentes (visibles o no) que se volveran visibles
                        listaFteeqcodiUpdate.Add(regEqEnv.Fteeqcodi);
                        listaCodigoEqUpdate.Add(item.TipoYCodigo);
                    }
                    else
                    {
                        //nuevos equipos que no estan autoguardados o cambiaron de formato
                        listaEqNuevo.Add(item.TipoYCodigo);
                    }
                }
                else
                {
                    //Pantalla de Requisitos
                    var regEqEnv = listaEnvioEqAutoguardado.Find(x => x.TipoYCodigo == item.TipoYCodigo);
                    if (regEqEnv != null)
                    {
                        //equipos existentes (visibles o no) que se volveran visibles
                        listaFteeqcodiUpdate.Add(regEqEnv.Fteeqcodi);
                        listaCodigoEqUpdate.Add(item.TipoYCodigo);
                    }
                    else
                    {
                        //nuevos equipos que no estan autoguardados
                        listaEqNuevo.Add(item.TipoYCodigo);
                    }
                }
            }

            //equipos que se ocultaran
            listaFteeqcodiEliminar = listaEnvioEqAutoguardado.Where(x => !listaCodigoEqUpdate.Contains(x.TipoYCodigo)).Select(x => x.Fteeqcodi).ToList();
        }

        public List<int> ListarEmprcodiCopropietarioDeEnvio(int version)
        {
            List<int> lstIdEmpresaCopropietarias = new List<int>();

            List<FtExtEnvioEqDTO> listaEnvioEqBD = GetByCriteriaFtExtEnvioEqs(version.ToString()).ToList();

            //verifico si el elemento tiene empresas copropietarias y obtengo sus correos
            List<int> listaEquicodi = listaEnvioEqBD.Where(x => x.Equicodi > 0).Select(x => x.Equicodi.Value).ToList();
            if (listaEquicodi.Any())
            {
                string equicodis = string.Join(",", listaEquicodi);
                List<FtExtReleqempltDTO> listadoEmpresasCopropietariasXEnvio = (new EquipamientoAppServicio()).ObtenerListadoEmpresasCopropietarias(equicodis);
                lstIdEmpresaCopropietarias = listadoEmpresasCopropietariasXEnvio.Any() ? listadoEmpresasCopropietariasXEnvio.Select(x => x.Emprcodi).Distinct().ToList() : new List<int>();
            }

            return lstIdEmpresaCopropietarias;
        }

        /// <summary>
        /// Devuelve la fecha maxima de respuesta para intranet y extranet en carpetas observado y subsanado
        /// </summary>
        /// <param name="objEnvio"></param>
        /// <returns></returns>
        public string ObtenerMensajeFechaMaxRespuesta(FtExtEnvioDTO objEnvio, int interfaz)
        {
            string salida = "";

            int carpeta = objEnvio.Estenvcodi;
            DateTime? fecMaxRpta = objEnvio.Ftenvfecfinsubsanarobs;

            if (fecMaxRpta != null)
            {
                salida = fecMaxRpta.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);

                if (carpeta == ConstantesFichaTecnica.EstadoObservado)
                {
                    //Muestra fecha incluso cuando exista ampliacion


                }
                else
                {
                    if (carpeta == ConstantesFichaTecnica.EstadoSubsanacionObs)
                    {
                        //solo muestra si es intranet, si es extranet no muestra
                        if (interfaz == ConstantesFichaTecnica.EXTRANET)
                        {
                            salida = "";
                        }
                    }
                    else
                    {
                        salida = "";
                    }
                }
            }

            return salida;
        }

        public string ObtenerMensajeFechaMaxRespuestaRevisionArea(FtExtEnvioDTO objEnvio, int idArea)
        {
            List<FtExtEnvioDTO> lista = new List<FtExtEnvioDTO>();
            lista.Add(objEnvio);

            var listaEnvioLog = ListarLogCumplimientoRevisionAreas(lista, idArea);
            foreach (var item in listaEnvioLog)
            {
                var listaDetalle = item.ListaAcciones.Where(x => x.Accion.Contains("Se derivó el envío para la revisión de las áreas") && x.UsuarioRegistroNomb == "Administrador de la Ficha Técnica");
                if (listaDetalle.Any())
                {
                    return listaDetalle.Last().PlazoLimiteRpta;
                }
            }

            return string.Empty;
        }

        /// <summary>
        /// Verifica si la FT ha sufrido cambios dsede que inicio envio
        /// </summary>
        /// <param name="objEnvio"></param>
        /// <returns></returns>
        public string VerificarSiParametrosFueronModificados(int ftevercodi)
        {
            string salida = "N";

            List<FtExtEnvioEqDTO> listaEnvioEqUltVers = GetByCriteriaFtExtEnvioEqs(ftevercodi.ToString()).ToList();
            List<int> lstFteeqcodis = listaEnvioEqUltVers.Select(x => x.Fteeqcodi).Distinct().ToList();
            string strLstFteeqcodis = string.Join(",", lstFteeqcodis);

            List<FtExtEnvioDatoDTO> lstTemp = ListarParametrosFtExtEnvioDatos(strLstFteeqcodis);
            List<FtExtEnvioDatoDTO> lstTempInactivos = lstTemp.Where(x => x.Ftitactivo == 0).ToList();

            bool existeDiferente = false;
            if (lstTempInactivos.Any()) //si hay parametros inactivos 
                existeDiferente = true;

            foreach (var envioeq in listaEnvioEqUltVers)
            {
                if (!existeDiferente)
                {
                    int fteeqcodi = envioeq.Fteeqcodi;
                    FTReporteExcel objRep = ObtenerFichaTreeXEnvioEq(fteeqcodi, ConstantesFichaTecnica.EXTRANET);

                    List<FtFictecItemDTO> lstItems = objRep.ListaAllItems;
                    List<FtExtEnvioDatoDTO> lstTempPorEq = lstTemp.Where(x => x.Fteeqcodi == fteeqcodi).ToList();
                    List<int> lstFtitcodisEnvio = lstTempPorEq.Select(x => x.Ftitcodi).Distinct().ToList();

                    foreach (var item in lstItems)
                    {
                        if (!existeDiferente)
                        {
                            if (item.Concepcodi != null || item.Propcodi != null)
                            {
                                bool contiene = lstFtitcodisEnvio.Contains(item.Ftitcodi);

                                if (!contiene)
                                {
                                    existeDiferente = true;
                                }
                            }
                        }
                    }
                }
            }

            if (existeDiferente)
                salida = "S";


            return salida;
        }

        #region Diferencia entre versiones

        public void BuscarDiferenciasEntreVersionesConexIntegModif(int fteeqcodi, int versionAnterior,
                                    out FTReporteExcel rep, out List<FTDatoRevisionParametrosAEnvio> listaRevisionParametrosAFT)
        {
            //datos de la versión seleccionada
            rep = ObtenerFichaTreeXEnvioEq(fteeqcodi, ConstantesFichaTecnica.EXTRANET);
            listaRevisionParametrosAFT = ObtenerDatosRevisionParametrosAFT(fteeqcodi, ConstantesFichaTecnica.EXTRANET);

            //obtener equipo / grupo de la versión anterior
            if (versionAnterior > 0)
            {
                FtExtEnvioEqDTO objEnvioEqActual = GetByIdFtExtEnvioEq(fteeqcodi);
                var listaEnvioEqAnterior = ListFtExtEnvioEqsXEnvio(versionAnterior);
                var eqEnvioAnt = listaEnvioEqAnterior.Find(x => x.Equicodi == objEnvioEqActual.Equicodi && x.Grupocodi == objEnvioEqActual.Grupocodi);
                if (eqEnvioAnt != null)
                {
                    int fteeqcodiAnt = eqEnvioAnt.Fteeqcodi;
                    var repAnt = ObtenerFichaTreeXEnvioEq(fteeqcodiAnt, ConstantesFichaTecnica.EXTRANET);
                    var listaRevisionParametrosAFTAnt = ObtenerDatosRevisionParametrosAFT(fteeqcodiAnt, ConstantesFichaTecnica.EXTRANET);

                    //items (para diferenciar los items archivos)
                    FtExtFormatoDTO formato = GetByIdFtExtFormato(objEnvioEqActual.Ftfmtcodi.Value);
                    var lstItems = ListarItemsByFichaTecnica(formato.Fteqcodi);

                    //realizar comparación de la parte izquierda (valor)
                    var envioEqFin = GetEnvioEqFromItemFormulario(rep);
                    var envioEqIni = GetEnvioEqFromItemFormulario(repAnt);
                    var listaCambioXEq = ListarCambioFormularioXEqGr(envioEqFin, envioEqIni, lstItems);

                    //setear flag para pintar celda cambio
                    foreach (var itemCfg in rep.ListaItemConfig)
                    {
                        var objCambio = listaCambioXEq.Find(x => x.Ftitcodi == itemCfg.Ftitcodi);
                        if (objCambio != null) itemCfg.CambioValor = 1;
                    }
                }
            }
        }

        private FtExtEnvioEqDTO GetEnvioEqFromItemFormulario(FTReporteExcel rep)
        {
            FtExtEnvioEqDTO eqEnv = new FtExtEnvioEqDTO();
            eqEnv.ListaDato = new List<FtExtEnvioDatoDTO>();

            foreach (var objItemFicha in rep.ListaTreeData.Where(x => x.Fitcfgcodi > 0).ToList())
            {
                List<FtExtEnvioArchivoDTO> listaArch = new List<FtExtEnvioArchivoDTO>();
                listaArch.AddRange(objItemFicha.ListaArchivoValor);
                listaArch.AddRange(objItemFicha.ListaArchivoAdjunto);

                var listaRelArch = new List<FtExtEnvioReldatoarchivoDTO>();
                foreach (var arch in listaArch)
                {
                    listaRelArch.Add(new FtExtEnvioReldatoarchivoDTO() { Archivo = arch });
                }

                eqEnv.ListaDato.Add(new FtExtEnvioDatoDTO()
                {
                    Fitcfgcodi = objItemFicha.Fitcfgcodi,
                    Ftitcodi = objItemFicha.Ftitcodi,
                    Ftedatvalor = objItemFicha.Valor,
                    ListaRelDatoArchivo = listaRelArch,
                });
            }

            return eqEnv;
        }

        public void BuscarDiferenciasEntreVersionesOpComercial(int ftevcodi, int versionActual, int versionAnterior,
                                    out List<FtExtEventoReqDTO> listaReqEvento, out List<FTDatoRevisionParametrosAEnvio> listaRevisionParametrosAFT)
        {
            listaReqEvento = ListarRequisitoXEnvioVersion(ftevcodi, versionActual, ConstantesFichaTecnica.EXTRANET);
            listaRevisionParametrosAFT = ObtenerDatosRevisionContenidoReq(versionActual, ConstantesFichaTecnica.EXTRANET);

            //obtener requisitos de la versión anterior
            if (versionAnterior > 0)
            {
                var listaReqEventoAnt = ListarRequisitoXEnvioVersion(ftevcodi, versionAnterior, ConstantesFichaTecnica.EXTRANET);
                var listaRevisionParametrosAFTAnt = ObtenerDatosRevisionContenidoReq(versionAnterior, ConstantesFichaTecnica.EXTRANET);

                foreach (var reqActual in listaReqEvento)
                {
                    var reqAnterior = listaReqEventoAnt.Find(x => x.Fevrqcodi == reqActual.Fevrqcodi);
                    if (reqAnterior != null)
                    {
                        var listaArchActual = reqActual.ListaArchivo ?? new List<FtExtEnvioArchivoDTO>();
                        var listaArchAnt = reqAnterior.ListaArchivo ?? new List<FtExtEnvioArchivoDTO>();
                        if (ExisteDiferenciaEntreListaArchivo(listaArchActual, listaArchAnt))
                            reqActual.CambioValor = 1;
                    }
                    else
                    {
                        reqActual.CambioValor = 1;
                    }
                }
            }
        }

        private bool ExisteDiferenciaEntreListaArchivo(List<FtExtEnvioArchivoDTO> listaArchivoAct, List<FtExtEnvioArchivoDTO> listaArchivoAnt)
        {
            if (listaArchivoAct.Count != listaArchivoAnt.Count) return true;

            List<string> l1 = listaArchivoAct.Select(x => x.Ftearcnombrefisico + (x.Ftearcflagsustentoconf ?? "N")).ToList();
            List<string> l2 = listaArchivoAnt.Select(x => x.Ftearcnombrefisico + (x.Ftearcflagsustentoconf ?? "N")).ToList();

            IEnumerable<string> inFirstOnly = l1.Except(l2);
            IEnumerable<string> inSecondOnly = l2.Except(l1);
            bool allInBoth = !inFirstOnly.Any() && !inSecondOnly.Any();

            return !allInBoth;
        }

        #endregion

        #region Listar cambios - Modificación de ficha técnica

        public void ListarCambiosEtapaModificacionFT(int codigoEnvio, int codigoVersion, bool updateDatoItem, out List<FTParametroModificacion> lstCambios)
        {
            lstCambios = new List<FTParametroModificacion>();

            //envio
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(codigoEnvio);

            if (objEnvio.Ftetcodi == ConstantesFichaTecnica.EtapaModificacion && ConstantesFichaTecnica.FormatoConexIntegModif == objEnvio.Ftenvtipoformato)
            {
                //obtener cambios 
                lstCambios = ObtenerListaCambiosFTEnModificacion(codigoEnvio, codigoVersion, objEnvio.FtevercodiTemporalFTVigente);

                //Actualizar los datos de la version
                if (updateDatoItem)
                {
                    ActualizarTransaccionalFlagItemModificacionXVersion(codigoVersion, lstCambios.Select(x => x.Ftedatcodi).ToList());
                }
            }
        }

        private List<FTParametroModificacion> ObtenerListaCambiosFTEnModificacion(int codigoEnvio, int codigoVersion, int codigoVersionFichaTecnica)
        {
            if (codigoVersionFichaTecnica == 0)
            {
                return new List<FTParametroModificacion>();
            }

            //información del envio Extranet
            FtExtEnvioDTO envioFinal = ClonarEstructuraEnvioFromBDConexIntegModif(codigoEnvio, codigoVersion, ConstantesFichaTecnica.EstadoSolicitud, -1, "", "");

            //información de ficha técnica vigente
            FtExtEnvioDTO envioInicial = ClonarEstructuraEnvioFromBDConexIntegModif(codigoEnvio, codigoVersionFichaTecnica, ConstantesFichaTecnica.EstadoSolicitud, -1, "", "");

            List<FTParametroModificacion> lstSalida = new List<FTParametroModificacion>();

            List<FtExtEnvioEqDTO> lstaEquiposComparar = envioFinal.VersionActual.ListaEquipoEnvio;
            List<FtExtEnvioEqDTO> lstaEquiposContraste = envioInicial.VersionActual.ListaEquipoEnvio;

            foreach (FtExtEnvioEqDTO envioEqFin in lstaEquiposComparar)
            {
                int? idFormato = envioEqFin.Ftfmtcodi;

                if (idFormato != null)
                {
                    FtExtFormatoDTO formato = GetByIdFtExtFormato(idFormato.Value);
                    if (formato != null)
                    {
                        int fteqcodi = formato.Fteqcodi;

                        var lstItems = ListarItemsByFichaTecnica(fteqcodi);

                        int idPadre = ConstantesFichaTecnica.TipoRaiz;
                        ListarTreeItemsFichaTecnicaRecursivo(lstItems, new List<TreeItemFichaTecnica>(), new List<FtFictecItemDTO>(), new List<TreeItemFichaTecnica>(), idPadre, string.Empty, string.Empty, 1);

                        FtExtEnvioEqDTO envioEqIni = lstaEquiposContraste.Find(x => x.Equicodi == envioEqFin.Equicodi && x.Grupocodi == envioEqFin.Grupocodi);

                        if (envioEqIni != null)
                        {
                            var listaCambioXEq = ListarCambioFormularioXEqGr(envioEqFin, envioEqIni, lstItems);
                            lstSalida.AddRange(listaCambioXEq);
                        }
                    }
                }

            }

            return lstSalida;
        }

        private List<FTParametroModificacion> ListarCambioFormularioXEqGr(FtExtEnvioEqDTO envioEqFin, FtExtEnvioEqDTO envioEqIni, List<FtFictecItemDTO> lstItems)
        {
            List<FTParametroModificacion> lstSalida = new List<FTParametroModificacion>();

            List<FtExtEnvioDatoDTO> lstDatoFinal = envioEqFin.ListaDato ?? new List<FtExtEnvioDatoDTO>();
            List<FtExtEnvioDatoDTO> lstDatoInicial = envioEqIni.ListaDato ?? new List<FtExtEnvioDatoDTO>();

            foreach (FtExtEnvioDatoDTO itemFin in lstDatoFinal)
            {
                FtExtEnvioDatoDTO itemIni = lstDatoInicial.Find(x => x.Fitcfgcodi == itemFin.Fitcfgcodi);
                FtFictecItemDTO objItem = lstItems.Find(x => x.Ftitcodi == itemFin.Ftitcodi); //elemento de la plantilla que visualiza el agente

                if (itemIni != null)
                {
                    bool existeCambioComentCheck = false;
                    string comentarioFin = (itemFin.Ftedatcomentario ?? "").Trim();
                    string comentarioIni = (itemIni.Ftedatcomentario ?? "").Trim();

                    string confidencialidadFin = (itemFin.Ftedatflagvalorconf ?? "").Trim();
                    string confidencialidadIni = (itemIni.Ftedatflagvalorconf ?? "").Trim();

                    if (comentarioFin != comentarioIni || confidencialidadFin != confidencialidadIni)
                    {
                        existeCambioComentCheck = true;
                    }

                    if (objItem != null)
                    {
                        if (!objItem.EsArchivo)//para datos diferentes a Tipo ARCHIVO 
                        {
                            string valFin = itemFin.Ftedatvalor != null ? itemFin.Ftedatvalor.Trim() : "";
                            string valIni = itemIni.Ftedatvalor != null ? itemIni.Ftedatvalor.Trim() : "";

                            if (valFin != valIni || existeCambioComentCheck)
                            {
                                itemFin.Ftedatflagmodificado = 1; //esta fila tiene cambio

                                FTParametroModificacion objNew = new FTParametroModificacion();
                                objNew.Codigo = envioEqFin.Idelemento;
                                objNew.NombreEquipo = envioEqFin.Nombreelemento;
                                objNew.NombreParametro = objItem != null ? objItem.Orden + " " + objItem.Ftitnombre : "";
                                objNew.UnidadMedida = objItem.ItemUnidad ?? "";
                                objNew.ValorSolicitudMod = valFin;
                                objNew.ValorActual = valIni;
                                objNew.Fteeqcodi = envioEqFin.IdEnvioEq;
                                objNew.Ftitcodi = itemIni.Ftitcodi;
                                objNew.Ftedatcodi = itemFin.FtedatcodiOld;

                                lstSalida.Add(objNew);
                            }
                        }
                        else
                        {
                            //Para datos tipo ARCHIVO
                            List<FtExtEnvioReldatoarchivoDTO> lstArchFin = itemFin.ListaRelDatoArchivo ?? new List<FtExtEnvioReldatoarchivoDTO>();
                            List<FtExtEnvioReldatoarchivoDTO> lstArchIni = itemIni.ListaRelDatoArchivo ?? new List<FtExtEnvioReldatoarchivoDTO>();

                            var listaArchActual = lstArchFin.Select(x => x.Archivo).ToList();
                            var listaArchAnt = lstArchIni.Select(x => x.Archivo).ToList();
                            if (ExisteDiferenciaEntreListaArchivo(listaArchActual, listaArchAnt) || existeCambioComentCheck)
                            {
                                itemFin.Ftedatflagmodificado = 1; //esta fila tiene cambio

                                FTParametroModificacion objNew = new FTParametroModificacion();
                                objNew.Codigo = envioEqFin.Idelemento;
                                objNew.NombreEquipo = envioEqFin.Nombreelemento;
                                objNew.NombreParametro = objItem != null ? objItem.Orden + " " + objItem.Ftitnombre : "";
                                objNew.UnidadMedida = objItem.ItemUnidad ?? "";
                                objNew.ValorSolicitudMod = string.Join(", ", listaArchActual.Select(x => x.Ftearcnombreoriginal));
                                objNew.ValorActual = string.Join(", ", listaArchAnt.Select(x => x.Ftearcnombreoriginal));
                                objNew.Fteeqcodi = envioEqFin.IdEnvioEq;
                                objNew.Ftitcodi = itemIni.Ftitcodi;
                                objNew.Ftedatcodi = itemFin.FtedatcodiOld;

                                lstSalida.Add(objNew);
                            }
                        }
                    }
                }
            }

            return lstSalida;
        }

        public void ListarCambiosEtapaConexionIntegracionFT(int codigoEnvio, int codigoVersion, int tipoFormato, bool updateDatoItem)
        {
            //envio
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(codigoEnvio);

            if ((objEnvio.Ftetcodi == ConstantesFichaTecnica.EtapaConexion || objEnvio.Ftetcodi == ConstantesFichaTecnica.EtapaIntegracion)
                && ConstantesFichaTecnica.FormatoConexIntegModif == tipoFormato && ConstantesFichaTecnica.EstadoSolicitud == objEnvio.Estenvcodi)
            {
                //obtener cambios 
                var lstCambios = ObtenerListaCambiosFTEnConexionIntegracion(codigoEnvio, codigoVersion);

                //Actualizar los datos de la version
                if (updateDatoItem)
                {
                    ActualizarTransaccionalFlagItemModificacionXVersion(codigoVersion, lstCambios.Select(x => x.Ftedatcodi).ToList());
                }
            }

            if (ConstantesFichaTecnica.EstadoObservado == objEnvio.Estenvcodi)
            {
                //obtener cambios 
                var lstCambios = ObtenerListaCambiosFTEnConexionIntegracion(codigoEnvio, codigoVersion);

                //Agregar revisión a equipos nuevos
                AgregarRevisionEquipos(codigoVersion, lstCambios.Select(x => x.Ftedatcodi).ToList());
            }
        }

        private List<FTParametroModificacion> ObtenerListaCambiosFTEnConexionIntegracion(int codigoEnvio, int codigoVersion)
        {
            List<FTParametroModificacion> lstSalida = new List<FTParametroModificacion>();

            //información del envio Extranet
            var envioFinal = ClonarEstructuraEnvioFromBDConexIntegModif(codigoEnvio, codigoVersion, ConstantesFichaTecnica.EstadoSolicitud, -1, "", "");

            List<FtExtEnvioEqDTO> lstaEq = envioFinal.VersionActual.ListaEquipoEnvio;

            //recorrer por ficha
            foreach (FtExtEnvioEqDTO envioEqFin in lstaEq)
            {
                List<FtExtEnvioDatoDTO> lstDatoFinal = envioEqFin.ListaDato ?? new List<FtExtEnvioDatoDTO>();

                foreach (FtExtEnvioDatoDTO itemDato in lstDatoFinal)
                {
                    if (itemDato.EsFilaEditableExtranet)
                    {
                        FTParametroModificacion objNew = new FTParametroModificacion();
                        objNew.Fteeqcodi = envioEqFin.IdEnvioEq;
                        objNew.Ftitcodi = itemDato.Ftitcodi;
                        objNew.Ftedatcodi = itemDato.FtedatcodiOld;

                        lstSalida.Add(objNew);
                    }
                }
            }

            return lstSalida;
        }

        public void ListarCambiosEtapaIntegracionFTCasoEspecial1(int codigoEnvio, int codigoVersion, int tipoFormato, string ftedatcodisAprobados, bool updateDatoItem)
        {
            //envio
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(codigoEnvio);

            if (objEnvio.Ftetcodi == ConstantesFichaTecnica.EtapaIntegracion && ConstantesFichaTecnica.FormatoConexIntegModif == tipoFormato)
            {
                //obtener cambios 
                var lstCambios = ObtenerListaCambiosFTEnModificacion(codigoEnvio, codigoVersion, objEnvio.FtevercodiTemporalFTVigente);

                //solo considerar equipos aprobados
                if (ftedatcodisAprobados != "")
                {
                    List<int> ftedatcodisA = ftedatcodisAprobados.Split(',').Select(x => int.Parse(x)).ToList();
                    lstCambios = lstCambios.Where(x => ftedatcodisA.Contains(x.Ftedatcodi)).ToList();
                }

                //Actualizar los datos de la version
                if (updateDatoItem)
                {
                    foreach (var sublista in lstCambios.GroupBy(x => x.Fteeqcodi))
                    {
                        int fteeqcodi = sublista.Key ?? 0;
                        if (fteeqcodi > 0) ActualizarTransaccionalFlagItemModificacionXEquipo(fteeqcodi, sublista.ToList().Select(x => x.Ftedatcodi).ToList());
                    }
                }
            }
        }

        #endregion

        #endregion

        #region Envío Formato Extranet - Operación Comercial

        public FtExtEnvioDTO GetEnvioTemporalOperacionComercial(int emprcodi, int ftetcodi, int ftprycodi, string codigoEquipos, string usuarioRegistro)
        {

            //Evento y requisitos
            List<FtExtEventoDTO> listaEvento = GetByCriteriaFtExtEventos();
            FtExtEventoDTO objEventoVigente = listaEvento.Find(x => x.EsVigente);

            return GetEnvioTemporalOperacionComercialFromEvento(objEventoVigente, emprcodi, ftetcodi, ftprycodi, codigoEquipos,
                                                            ConstantesFichaTecnica.EstadoSolicitud, ConstantesFichaTecnica.FormatoOperacionComercial, usuarioRegistro);
        }

        public FtExtEnvioDTO GetEnvioTemporalOperacionComercialFromEvento(FtExtEventoDTO objEventoVigente, int emprcodi, int ftetcodi, int? ftprycodi, string codigoEquipos,
                                               int estenvcodi, int tipoFormato, string usuarioRegistro)
        {
            List<FtExtEventoReqDTO> listaReq = GetByCriteriaFtExtEventoReqsxIdFTExtEvento(objEventoVigente.Ftevcodi);

            //equipos
            List<FTRelacionEGP> listaEquipoEnvio = ListarEquipoEnvioConexIntegModif(emprcodi, ftetcodi, ftprycodi ?? 0, codigoEquipos);
            List<int> listaFamcodi = listaEquipoEnvio.Where(x => x.Famcodi > 0).Select(x => x.Famcodi.Value).Distinct().ToList();
            List<int> listaCatecodi = listaEquipoEnvio.Where(x => x.Catecodi > 0).Select(x => x.Catecodi.Value).Distinct().ToList();

            //data maestra
            List<int> listaFamcodiH = new List<int>() { 4, 2 };
            List<int> listaFamcodiT = new List<int>() { 5, 3 };
            List<int> listaFamcodiS = new List<int>() { 37, 36 };
            List<int> listaFamcodiE = new List<int>() { 39, 38 };
            List<int> listaCatecodiT = new List<int>() { 2 };

            //Generar estructura
            DateTime fechaRegistro = DateTime.Now;

            FtExtEnvioDTO objEnvio = new FtExtEnvioDTO()
            {
                Estenvcodi = estenvcodi,
                Ftetcodi = ftetcodi,
                Emprcodi = emprcodi,
                Ftprycodi = ftprycodi,
                Ftevcodi = objEventoVigente.Ftevcodi,
                Ftenvfecsolicitud = fechaRegistro,
                Ftenvususolicitud = usuarioRegistro,
                Ftenvtipoenvio = ConstantesFichaTecnica.GuardadoTemporal,
                Ftenvtipoformato = tipoFormato
            };

            //FtExtEnvioLogDTO objLog = new FtExtEnvioLogDTO();
            //objLog.Estenvcodi = objEnvio.Estenvcodi;
            //objLog.Ftelogfeccreacion = fechaRegistro;
            //objLog.Ftelogusucreacion = usuarioRegistro;

            FtExtEnvioVersionDTO objVersion = new FtExtEnvioVersionDTO()
            {
                Fteverestado = ConstantesAppServicio.Activo,
                Fteverusucreacion = usuarioRegistro,
                Fteverfeccreacion = fechaRegistro,
                Ftevertipo = 2,
                Fteveroperacion = 1,
                Fteverconexion = 1,
            };

            List<FtExtEnvioEqDTO> listaEq = new List<FtExtEnvioEqDTO>();
            foreach (var regEqFiltro in listaEquipoEnvio)
            {
                FtExtEnvioEqDTO objEq = new FtExtEnvioEqDTO()
                {
                    Equicodi = regEqFiltro.Equicodi,
                    Grupocodi = regEqFiltro.Grupocodi,
                    Fteeqestado = "S",
                    Ftfmtcodi = null,
                };

                listaEq.Add(objEq);
            }

            List<FtExtEnvioArchivoDTO> listaArchivoEnvio = new List<FtExtEnvioArchivoDTO>();
            List<FtExtEnvioReqDTO> listaReqEnvio = new List<FtExtEnvioReqDTO>();
            foreach (var objReq in listaReq)
            {
                //es obligatorio que el agente cargue archivos en la extranet
                bool esObligatorioArchivo = false;
                if (objReq.Fevrqflaghidro == ConstantesAppServicio.SI && listaFamcodiH.Any(x => listaFamcodi.Contains(x))) esObligatorioArchivo = true;
                if (objReq.Fevrqflagtermo == ConstantesAppServicio.SI && (listaFamcodiT.Any(x => listaFamcodi.Contains(x)) || listaCatecodiT.Any(x => listaCatecodi.Contains(x)))) esObligatorioArchivo = true;
                if (objReq.Fevrqflageolico == ConstantesAppServicio.SI && listaFamcodiE.Any(x => listaFamcodi.Contains(x))) esObligatorioArchivo = true;
                if (objReq.Fevrqflagsolar == ConstantesAppServicio.SI && listaFamcodiS.Any(x => listaFamcodi.Contains(x))) esObligatorioArchivo = true;

                List<FtExtEnvioRelreqarchivoDTO> listaRelreqarchivo = new List<FtExtEnvioRelreqarchivoDTO>();

                listaReqEnvio.Add(new FtExtEnvioReqDTO()
                {
                    Fevrqcodi = objReq.Fevrqcodi,
                    Ftereqflagarchivo = esObligatorioArchivo ? 1 : 0,
                    Ftereqflageditable = esObligatorioArchivo ? "S" : "N",
                    Ftereqflagrevisable = esObligatorioArchivo ? "S" : "N",
                    ListaRelreqarchivo = listaRelreqarchivo,
                });
            }

            objEnvio.VersionActual = objVersion;
            //objEnvio.LogEnvioActual = objLog; //Comentado porque genera accion = ENVIADO en el reporte Cumplimiento
            objEnvio.ListaArchivo = listaArchivoEnvio;

            objVersion.ListaEquipoEnvio = listaEq;
            objVersion.ListaReqEnvio = listaReqEnvio;

            return objEnvio;
        }

        public FtExtEnvioDTO ClonarEstructuraFromBDOperacionComercial(int ftenvcodiTemporal, int versionTemporal, int estenvcodi,
                        int tipoGuardadoEnvio, int tipoGuardadoVersion, string usuarioRegistro)
        {
            FtExtEnvioDTO objEnvio = FactorySic.GetFtExtEnvioRepository().GetById(ftenvcodiTemporal);
            objEnvio.Estenvcodi = estenvcodi;
            objEnvio.Ftenvtipoenvio = tipoGuardadoEnvio;

            #region Datos Revision

            //Obtengo los requisitos  para dicha version
            List<FtExtEnvioReqDTO> ListaRequisitosUltVers = ListByVersionesFtExtEnvioReqs(versionTemporal);
            List<int> lstFtereqcodis = ListaRequisitosUltVers.Select(x => x.Ftereqcodi).Distinct().ToList();
            string strFtereqcodis = string.Join(",", lstFtereqcodis);

            //Obtenemos su Revision (si lo tiene)
            List<FtExtEnvioRevisionDTO> ListaEnvioRevisionUltVers = strFtereqcodis != "" ? GetByCriteriaFtExtEnvioRevisionsXVersionYReq(versionTemporal) : new List<FtExtEnvioRevisionDTO>();

            List<FtExtEnvioRelreqrevDTO> lstDatoRelRevision = strFtereqcodis != "" ? FactorySic.GetFtExtEnvioRelreqrevRepository().GetByRequisitos(strFtereqcodis) : new List<FtExtEnvioRelreqrevDTO>();

            List<int> lstFtrevcodis = ListaEnvioRevisionUltVers.Select(x => x.Ftrevcodi).Distinct().ToList();
            string strFtrevcodis = string.Join(",", lstFtrevcodis);

            List<FtExtEnvioArchivoDTO> listaArchivoXDato = ListByVersionYReqFtExtEnvioArchivos(versionTemporal);
            List<FtExtEnvioArchivoDTO> lstArchivosXRevision = ListByRevisionFtExtEnvioArchivos(strFtrevcodis);

            #endregion

            List<FtExtEnvioEqDTO> listaEnvioEqBD = ListFtExtEnvioEqsXEnvio(versionTemporal);

            //Generar estructura
            DateTime fechaRegistro = ObtenerFechaSistemaFT(ftenvcodiTemporal);

            objEnvio.Estenvcodi = estenvcodi;
            objEnvio.Ftenvfecmodificacion = fechaRegistro;
            objEnvio.Ftenvusumodificacion = usuarioRegistro;
            objEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaRegistro);

            FtExtEnvioVersionDTO objVersion = new FtExtEnvioVersionDTO()
            {
                Estenvcodi = objEnvio.Estenvcodi,
                Ftevercodi = versionTemporal,  //usado para buscar archivos en la carpeta de la version anterior
                Fteverestado = ConstantesAppServicio.Activo,
                Fteverusucreacion = usuarioRegistro,
                Fteverfeccreacion = fechaRegistro,
                Ftevertipo = tipoGuardadoVersion,
                Fteveroperacion = -1,
                Fteverconexion = -1,
            };

            List<FtExtEnvioEqDTO> listaEq = new List<FtExtEnvioEqDTO>();
            foreach (var regEqFiltro in listaEnvioEqBD)
            {
                listaEq.Add(regEqFiltro);
            }

            List<FtExtEnvioArchivoDTO> listaArchivoEnvio = new List<FtExtEnvioArchivoDTO>();

            //requisitos del envio
            List<FtExtEnvioReqDTO> listaReqEnvio = new List<FtExtEnvioReqDTO>();
            foreach (var envReq in ListaRequisitosUltVers)
            {
                //sustento del requisito 
                List<FtExtEnvioRelreqarchivoDTO> listaRelreqarchivo = new List<FtExtEnvioRelreqarchivoDTO>();

                int orden = 1;
                foreach (var regArch in listaArchivoXDato.Where(x => x.Ftereqcodi == envReq.Ftereqcodi))
                {
                    regArch.Ftearccodi = 0;
                    regArch.Ftearcorden = orden;
                    listaRelreqarchivo.Add(new FtExtEnvioRelreqarchivoDTO()
                    {
                        Archivo = regArch,
                    });
                    orden++;

                    listaArchivoEnvio.Add(regArch);
                }

                envReq.ListaRelreqarchivo = listaRelreqarchivo;

                #region Datos Revision

                //Armo la revision para cada sección que permita la carga de archivos
                if (envReq.EsObligatorioArchivo)
                {
                    FtExtEnvioRelreqrevDTO relRev = lstDatoRelRevision.Find(x => x.Ftereqcodi == envReq.Ftereqcodi) ?? new FtExtEnvioRelreqrevDTO();
                    FtExtEnvioRevisionDTO regRev = ListaEnvioRevisionUltVers.Find(x => x.Ftrevcodi == relRev.Ftrevcodi) ?? new FtExtEnvioRevisionDTO();

                    //archivos de cada revision
                    List<FtExtEnvioRelrevarchivoDTO> listaRelRevArchivo = new List<FtExtEnvioRelrevarchivoDTO>();
                    orden = 1;
                    foreach (var regArch in lstArchivosXRevision.Where(x => x.Ftrevcodi == relRev.Ftrevcodi).ToList())
                    {
                        regArch.Ftearccodi = 0;
                        regArch.Ftearcorden = orden;
                        listaArchivoEnvio.Add(regArch);

                        listaRelRevArchivo.Add(new FtExtEnvioRelrevarchivoDTO()
                        {
                            Archivo = regArch
                        });
                    }

                    envReq.RevisionReq = regRev;
                    envReq.RelRevisionReq = relRev;
                    envReq.ListaRelRevArchivo = listaRelRevArchivo;
                    if (!string.IsNullOrEmpty(regRev.Ftrevestado)) //ya se revisó la solicitud en la Intranet
                    {
                        bool esEditableYRevisable = regRev.Ftrevestado != ConstantesFichaTecnica.OpcionConforme;
                        envReq.Ftereqflageditable = esEditableYRevisable ? "S" : "N";
                        envReq.Ftereqflagrevisable = esEditableYRevisable ? "S" : "N";
                    }
                }

                #endregion

                envReq.Ftereqcodi = 0;
                listaReqEnvio.Add(envReq);
            }

            objEnvio.VersionActual = objVersion;
            //objEnvio.LogEnvioActual = objLog; //Comentado porque genera accion = ENVIADO en el reporte Cumplimiento
            objEnvio.ListaArchivo = listaArchivoEnvio;

            objVersion.ListaEquipoEnvio = listaEq;
            objVersion.ListaReqEnvio = listaReqEnvio;

            return objEnvio;
        }

        /// <summary>
        /// Devuelve un string con los codigos de los equipos 
        /// </summary>
        /// <param name="listaEquipoEnvio"></param>
        /// <returns></returns>
        public string ObtenerCodigoEquiposOC(List<FtExtEnvioEqDTO> listaEquipoEnvio)
        {
            string salida = "";

            List<string> lstTemp = new List<string>();
            foreach (var item in listaEquipoEnvio)
            {
                int? equicodi = item.Equicodi;
                int? grupocodi = item.Grupocodi;

                if (equicodi != null && grupocodi == null)
                {
                    lstTemp.Add("E" + equicodi);
                }
                if (equicodi == null && grupocodi != null)
                {
                    lstTemp.Add("G" + grupocodi);
                }
            }

            salida = string.Join(",", lstTemp);

            return salida;
        }

        public void ActualizarEstadoEquipoFormatoExtranet(List<FtExtEnvioEqDTO> listaEqEnvNuevo, List<int> listaFteeqcodiUpdate, List<int> listaFteeqcodiEliminar)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                int correlativoFteeqcodi = FactorySic.GetFtExtEnvioEqRepository().GetMaxId();

                //nuevos equipos
                if (listaEqEnvNuevo != null)
                {
                    foreach (var regEq in listaEqEnvNuevo)
                    {
                        regEq.Fteeqcodi = correlativoFteeqcodi;
                        SaveFtExtEnvioEq(regEq, conn, tran);
                        correlativoFteeqcodi++;
                    }
                }

                //cambiar el estado a equipos de la versión
                if (listaFteeqcodiUpdate != null)
                {
                    UpdateFtExtEnvioEqXEstado(string.Join(",", listaFteeqcodiUpdate), "S", conn, tran);
                }
                if (listaFteeqcodiEliminar != null)
                {
                    UpdateFtExtEnvioEqXEstado(string.Join(",", listaFteeqcodiEliminar), "N", conn, tran);
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos de la solicitud.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        #endregion

        #region Envío Formato Extranet - Dar de baja a modo de operación

        public FtExtEnvioDTO GetEnvioEstructuraFromWebBajaModoOperacion(string codigoEquipos, string usuarioRegistro)
        {
            int grupocodi = Convert.ToInt32(codigoEquipos.Replace("G", ""));
            FtExtEventoDTO objEventoVigente = GetByIdFtExtEvento(ConstantesFichaTecnica.EventoBajaMO);
            PrGrupoDTO objGrupo = GetByIdPrGrupo(grupocodi);
            int ftetcodi = ConstantesFichaTecnica.EtapaModificacion;

            return GetEnvioTemporalOperacionComercialFromEvento(objEventoVigente, objGrupo.Emprcodi ?? 0, ftetcodi, null, codigoEquipos,
                                                            ConstantesFichaTecnica.EstadoSolicitud, ConstantesFichaTecnica.FormatoBajaModoOperacion, usuarioRegistro);
        }

        #endregion

        #region Exportación / Importación

        public void GenerarFormatoConexIntegModifXEnvio(string rutaCarpeta, string pathLogo, int ftenvcodi, string fteeqcodis, string fteeqcodisLimpiar,
                                            int ambiente, int versionEnvio, string faremcodis, out string fileName)
        {
            List<FTReporteExcel> listaHoja = ListarHojaFormatoConexIntegModifConRevision(ftenvcodi, fteeqcodis, fteeqcodisLimpiar, ambiente, versionEnvio, faremcodis, 0, false, false);

            //Exportación a Excel
            DateTime fechaConsulta = DateTime.Now;
            if (ambiente == ConstantesFichaTecnica.INTRANET)
                fileName = string.Format("RevisionFichaTécnica_{0}_{1}.xlsx", ftenvcodi.ToString(), fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaYMDHora));
            else
                fileName = string.Format("EnvíoFichaTécnica_{0}.xlsx", fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaYMDHora));


            string file = rutaCarpeta + fileName;
            FileInfo newFile = new FileInfo(file);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                foreach (var objRpt in listaHoja)
                {
                    objRpt.FechaConsulta = fechaConsulta;
                    objRpt.Modulo = ConstantesFichaTecnica.ModuloRevisionDerivacion; // revision derivación
                    GenerarHojaExcelFichaTecnicaDetalle(xlPackage, pathLogo, objRpt);
                }

                xlPackage.Save();
            }
        }

        public void GenerarFormatoConexIntegModifXEnvioDerivacion(string rutaCarpeta, string pathLogo, int ftenvcodi, string fteeqcodis, int estado, int ambiente, int versionEnvio, string faremcodis, int idAreaRevision, out string fileName)
        {
            List<FTReporteExcel> listaHoja = ListarHojaFormatoConexIntegModifConRevision(ftenvcodi, fteeqcodis, null, ambiente, versionEnvio, faremcodis, idAreaRevision, false, false);

            //Exportación a Excel
            DateTime fechaConsulta = DateTime.Now;
            fileName = string.Format("RevisionFichaTécnica_{0}_{1}.xlsx", ftenvcodi.ToString(), fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaYMDHora));

            string file = rutaCarpeta + fileName;
            FileInfo newFile = new FileInfo(file);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                foreach (var objRpt in listaHoja)
                {
                    objRpt.FechaConsulta = fechaConsulta;
                    objRpt.Modulo = ConstantesFichaTecnica.ModuloRevisionDerivacion; // revision derivación
                    GenerarHojaExcelFichaTecnicaDetalle(xlPackage, pathLogo, objRpt);
                }

                xlPackage.Save();
            }
        }

        public List<FTReporteExcel> ListarHojaFormatoConexIntegModif(string fteeqcodis, int ambiente, int version)
        {
            var objVersion = GetByIdFtExtEnvioVersion(version);

            //Equipos seleccionados de la última versión del envio
            List<int> listaFteeqcodi = fteeqcodis.Split(',').Select(x => int.Parse(x)).ToList();
            List<FtExtEnvioEqDTO> listaEnvioEq = ListFtExtEnvioEqsXEnvio(version);
            if (ConstantesAppServicio.ParametroDefecto != fteeqcodis)
                listaEnvioEq = listaEnvioEq.Where(x => listaFteeqcodi.Contains(x.Fteeqcodi)).ToList();

            //Datos de equipo seleccionado
            string strEnviosEq = string.Join(",", listaEnvioEq.Select(x => x.Fteeqcodi));
            List<FtExtEnvioDatoDTO> listaDatoAllXEq = GetByCriteriaFtExtEnvioDatos(strEnviosEq);

            //Archivos de los datos
            List<FtExtEnvioArchivoDTO> listaArchivoXDato = ListByVersionYDatoFtExtEnvioArchivos(listaEnvioEq[0].Ftevercodi).ToList();

            //Lista de fichas
            List<FtExtFormatoDTO> listaRelFichaEtapa = GetByCriteriaFtExtFormatos();
            List<int> listaFtfmtcodi = listaEnvioEq.Where(x => x.Ftfmtcodi > 0).Select(x => x.Ftfmtcodi.Value).Distinct().ToList();
            listaRelFichaEtapa = listaRelFichaEtapa.Where(x => listaFtfmtcodi.Contains(x.Ftfmtcodi)).ToList();

            //
            List<FTReporteExcel> listaHoja = new List<FTReporteExcel>();

            foreach (var objRelFicha in listaRelFichaEtapa)
            {
                List<FtExtEnvioEqDTO> listaEnvioEqXFicha = listaEnvioEq.Where(x => x.Ftfmtcodi == objRelFicha.Ftfmtcodi).ToList();
                List<int> listaIdElemento = new List<int>();
                if (objRelFicha.Catecodi > 0) listaIdElemento = listaEnvioEqXFicha.Where(x => x.Ftfmtcodi == objRelFicha.Ftfmtcodi).Select(x => x.Grupocodi.Value).ToList();
                if (objRelFicha.Famcodi > 0) listaIdElemento = listaEnvioEqXFicha.Where(x => x.Ftfmtcodi == objRelFicha.Ftfmtcodi).Select(x => x.Equicodi.Value).ToList();

                FTReporteExcel objRpt = GetReporteDatosExcelFormatoConexIntegModif(objRelFicha.Fteqcodi, objRelFicha.Ftfmtcodi, listaEnvioEqXFicha, listaIdElemento,
                                                            listaDatoAllXEq, listaArchivoXDato, ambiente, objVersion.Estenvcodi);

                listaHoja.Add(objRpt);
            }

            return listaHoja;
        }

        private FTReporteExcel GetReporteDatosExcelFormatoConexIntegModif(int fteqcodi, int ftfmtcodi,
                             List<FtExtEnvioEqDTO> listaEnvioEqXFicha, List<int> listaIdElemento,
                             List<FtExtEnvioDatoDTO> listaDatoAllXEq, List<FtExtEnvioArchivoDTO> listaArchivoXDato, int ambiente, int estenvcodi)
        {
            FtFictecXTipoEquipoDTO fichaTecnica = GetFichaTecnica(fteqcodi);

            string nombreSheet = "";
            if (fichaTecnica.Famcodi > 0)
            {
                switch (fichaTecnica.Famcodi)
                {
                    case 36: nombreSheet = "COMPONENTE DE CENTRAL SOLAR"; break;
                    case 38: nombreSheet = "COMPONENTE DE CENTRAL EÓLICA"; break;
                    case 3: nombreSheet = "UNIDAD TERMOELÉCTRICA"; break;
                    case 2: nombreSheet = "UNIDAD HIDROELÉCTRICA"; break;
                    default: nombreSheet = fichaTecnica.Famnomb; break;
                }
            }
            else
            {
                switch (fichaTecnica.Catecodi)
                {
                    case 2: nombreSheet = "MODOS DE OPERACIÓN"; break;
                    default: nombreSheet = fichaTecnica.Catenomb; break;
                }
            }

            //Obtengo todos los registros de configuracion asociados a treeData
            List<FtExtItemcfgDTO> lstConfiguraciones = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(ftfmtcodi);

            //Estructura arbol
            List<FtFictecItemDTO> listaTreeItems, listaAllItems;
            List<TreeItemFichaTecnica> listaItemsJson;

            FTFiltroReporteExcel objFiltro1 = GetFichaYDatosXEquipoOModo(fichaTecnica.Fteqcodi, 0, false, ConstantesFichaTecnica.EXTRANET, DateTime.Today);
            ListarTreeItemsFichaTecnica(objFiltro1, out listaAllItems, out listaTreeItems, out listaItemsJson);
            foreach (var regItem in listaAllItems)
            {
                var objCfgItem = lstConfiguraciones.Find(x => x.Ftitcodi == regItem.Ftitcodi);
                if (objCfgItem != null)
                {
                    regItem.Fitcfginstructivo = objCfgItem.Fitcfginstructivo;
                    regItem.FtitcodiDependiente = GetFtitcodiDependiente(regItem, objCfgItem, listaAllItems);
                }
            }

            //Data
            List<FtFictecItemDTO> listaTreeData = new List<FtFictecItemDTO>();
            foreach (var objEnvioEq in listaEnvioEqXFicha)
            {
                int idElemento = objEnvioEq.Equicodi > 0 ? objEnvioEq.Equicodi.Value : objEnvioEq.Grupocodi.Value;
                FTFiltroReporteExcel objFiltro2 = GetFichaYDatosXEquipoOModo(fteqcodi, idElemento, false, ConstantesFichaTecnica.EXTRANET, DateTime.Today);

                //obtener estructura
                ListarTreeItemsFichaTecnica(objFiltro2, out List<FtFictecItemDTO> listaAllItemsTmp, out List<FtFictecItemDTO> listaTreeItemsTmp, out List<TreeItemFichaTecnica> listaItemsJsonTmp);

                //actualizar grilla con bd
                List<FtExtEnvioDatoDTO> listaDatoXEq = listaDatoAllXEq.Where(x => x.Fteeqcodi == objEnvioEq.Fteeqcodi).ToList();
                foreach (var objItemFicha in listaAllItemsTmp)
                {
                    var objDato = listaDatoXEq.Find(x => x.Ftitcodi == objItemFicha.Ftitcodi);
                    if (objDato != null)
                    {
                        objItemFicha.Valor = objDato.Ftedatvalor;
                        objItemFicha.Itemcomentario = objDato.Ftedatcomentario;
                        objItemFicha.ItemValConfidencial = objDato.Ftedatflagvalorconf ?? "N";
                        objItemFicha.Ftedatcodi = objDato.Ftedatcodi;
                        objItemFicha.Fitcfgcodi = objDato.Fitcfgcodi;
                        objItemFicha.Fteeqcodi = objDato.Fteeqcodi;
                        objItemFicha.ListaArchivoValor = listaArchivoXDato.Where(x => x.Ftedatcodi == objDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteValorDato).ToList();
                        objItemFicha.ListaArchivoAdjunto = listaArchivoXDato.Where(x => x.Ftedatcodi == objDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteSustentoDato).ToList();

                        objItemFicha.EsFilaEditableExtranet = objDato.EsFilaEditableExtranet; //para lectura en extranet

                        if (ambiente == ConstantesFichaTecnica.INTRANET && objItemFicha.ListaArchivoAdjunto.Any())
                        {
                            var urlConfig = FichaTecnicaAppServicio.GetUrlIntranet();
                            string urlConfidencial = "";
                            string urlNoCondifencial = "";
                            string urlSustento = "";
                            var confidenciales = objItemFicha.ListaArchivoAdjunto.Where(x => x.Ftearcflagsustentoconf == "S").ToList();

                            if (confidenciales.Any())
                            {
                                urlConfidencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtSustentoConf?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);
                                urlNoCondifencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtSustento?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);
                            }
                            else
                            {
                                urlNoCondifencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtSustento?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);
                            }

                            urlSustento = urlConfidencial + " " + urlNoCondifencial;
                            objItemFicha.UrlItemSustento = urlSustento;
                        }
                    }
                }

                listaTreeData.AddRange(listaAllItemsTmp);
            }

            //Ficha
            List<FtFictecItemDTO> listaDataXNivel = listaTreeItems.Where(x => x.Nivel == 1).ToList();
            int colspan = ProfundidadHorizontalRecursivo(listaDataXNivel);
            int colIniData = colspan + 1;
            int rowIniItem = 7;

            FTReporteExcel objRpt = new FTReporteExcel();
            objRpt.FichaTecnica = fichaTecnica;
            objRpt.Ambiente = ConstantesFichaTecnica.INTRANET;
            objRpt.NombreSheet = nombreSheet;
            objRpt.IncluirColumnaComentario = lstConfiguraciones.Any(x => x.Fitcfgflagcomentario == "S");
            objRpt.IncluirColumnaInstructivo = false;

            if (ambiente == ConstantesFichaTecnica.INTRANET)
                objRpt.IncluirColumnaSustento = lstConfiguraciones.Any(x => x.Fitcfgflagsustento == "S"); //TODO solo para Intranet

            objRpt.ListaIdElemento = listaIdElemento;
            objRpt.ListaEnvioEqXFicha = listaEnvioEqXFicha;

            objRpt.ListaTreeItems = listaTreeItems;
            objRpt.ListaAllItems = listaAllItems; //parte izquierda
            objRpt.ListaTreeData = listaTreeData; // parte derecha (contiene FITCFGCODI)
            objRpt.ColIniData = colIniData;
            objRpt.RowIniItem = rowIniItem;

            objRpt.ListaItemConfig = lstConfiguraciones;

            objRpt.Fteeqcodi = 0;
            objRpt.Ftenvcodi = listaEnvioEqXFicha[0].Ftenvcodi;
            objRpt.Ftevercodi = listaEnvioEqXFicha[0].Ftevercodi;

            return objRpt;
        }

        public FTReporteExcel ObtenerFichaTreeXEnvioEq(int fteeqcodi, int ambiente)
        {
            FtExtEnvioEqDTO objEnvioEq = GetByIdFtExtEnvioEq(fteeqcodi);
            FtExtEnvioVersionDTO objVersion = GetByIdFtExtEnvioVersion(objEnvioEq.Ftevercodi);
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(objVersion.Ftenvcodi);
            FtExtFormatoDTO objFmt = GetByIdFtExtFormato(objEnvioEq.Ftfmtcodi.Value);
            List<FtExtEnvioDatoDTO> listaDatoXEq = GetByCriteriaFtExtEnvioDatos(fteeqcodi.ToString());
            List<FtExtEnvioArchivoDTO> listaArchivoXDato = ListByVersionYDatoFtExtEnvioArchivos(objEnvioEq.Ftevercodi).Where(x => x.Fteeqcodi == fteeqcodi).OrderBy(x => x.Ftearccodi).ToList();

            //Obtengo todos los registros de configuracion asociados a treeData
            List<FtExtItemcfgDTO> lstConfiguraciones = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(objEnvioEq.Ftfmtcodi ?? 0);

            int idElemento = objEnvioEq.Equicodi > 0 ? objEnvioEq.Equicodi.Value : objEnvioEq.Grupocodi.Value;
            FTFiltroReporteExcel objFiltro2 = GetFichaYDatosXEquipoOModo(objFmt.Fteqcodi, idElemento, false, ambiente, DateTime.Today);
            ActualizarEmpresaTTIE(objFiltro2, objEnvio.Emprcodi);

            //Estructura arbol
            List<FtFictecItemDTO> listaTreeItems;
            List<TreeItemFichaTecnica> listaItemsJson;
            List<FtFictecItemDTO> listaTreeData = new List<FtFictecItemDTO>();

            //obtener estructura
            ListarTreeItemsFichaTecnica(objFiltro2, out listaTreeData, out listaTreeItems, out listaItemsJson);

            foreach (var objItemFicha in listaTreeData)
            {
                FtExtItemcfgDTO objCfg = lstConfiguraciones.Find(x => x.Ftitcodi == objItemFicha.Ftitcodi) ?? new FtExtItemcfgDTO();

                objItemFicha.FtitcodiDependiente = GetFtitcodiDependiente(objItemFicha, objCfg, listaTreeData);

                objItemFicha.EsArchivoAdjuntado = objCfg.Fitcfgflagsustento == "S";
                objItemFicha.HabilitarCheckValorConfidencial = objCfg.Fitcfgflagvalorconf == "S";
                objItemFicha.HabilitarCheckSustentoConfidencial = objCfg.Fitcfgflagsustentoconf == "S";
            }
            foreach (var objItemFicha in listaTreeData.Where(x => x.FtitcodiDependiente > 0))
            {
                //variable bool para js
                var objItemFichaReplica = listaTreeData.Find(x => x.Ftitcodi == objItemFicha.FtitcodiDependiente);
                if (objItemFichaReplica != null)
                {
                    objItemFichaReplica.EsReplica = true;
                    objItemFichaReplica.FtitcodiFuente = objItemFicha.Ftitcodi;
                }
            }

            //actualizar grilla con bd
            bool opcionGlobalEditar = ConstantesFichaTecnica.EXTRANET == ambiente ? objEnvio.EsEditableExtranet : false;
            foreach (var objItemFicha in listaTreeData)
            {
                objItemFicha.ListaArchivoValor = new List<FtExtEnvioArchivoDTO>();
                objItemFicha.ListaArchivoAdjunto = new List<FtExtEnvioArchivoDTO>();

                var objDato = listaDatoXEq.Find(x => x.Ftitcodi == objItemFicha.Ftitcodi);
                if (objDato != null)
                {
                    objItemFicha.Valor = objDato.Ftedatvalor;
                    objItemFicha.Valor = FormatearComillas(objItemFicha.Valor);
                    objItemFicha.Itemcomentario = objDato.Ftedatcomentario != null ? objDato.Ftedatcomentario : "";
                    objItemFicha.ItemValConfidencial = objDato.Ftedatflagvalorconf ?? "N";

                    objItemFicha.EsFilaEditableExtranet = objDato.EsFilaEditableExtranet && opcionGlobalEditar; //para lectura en extranet

                    objItemFicha.Ftedatcodi = objDato.Ftedatcodi; //para luego hacer update en formulario web individual
                    objItemFicha.Fitcfgcodi = objDato.Fitcfgcodi;
                    objItemFicha.Fteeqcodi = objDato.Fteeqcodi;
                    objItemFicha.ListaArchivoValor = listaArchivoXDato.Where(x => x.Ftedatcodi == objDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteValorDato).ToList();
                    objItemFicha.ListaArchivoAdjunto = listaArchivoXDato.Where(x => x.Ftedatcodi == objDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteSustentoDato).ToList();
                }
            }

            FTReporteExcel objRpt = new FTReporteExcel();
            objRpt.ListaTreeItems = listaTreeItems;
            objRpt.ListaAllItems = listaTreeData;
            objRpt.ListaTreeData = listaTreeData;
            objRpt.ListaItemConfig = lstConfiguraciones;
            objRpt.ListaNota = new List<FtFictecNotaDTO>();
            objRpt.Fteeqcodi = fteeqcodi;
            objRpt.Ftenvcodi = objEnvioEq.Ftenvcodi;
            objRpt.Ftevercodi = objEnvioEq.Ftevercodi;
            objRpt.Ambiente = ambiente;

            return objRpt;
        }

        private int? GetFtitcodiDependiente(FtFictecItemDTO objItemFicha, FtExtItemcfgDTO objCfg, List<FtFictecItemDTO> listaTreeData)
        {
            int? ftitcodiDependiente = null;

            //Busco el parametro que depende del parametro analizado
            bool tieneConcepto = objCfg.Concepcodi != null ? true : false;
            bool tienePropiedad = objCfg.Propcodi != null ? true : false;

            List<FtFictecItemDTO> lstDependencia = new List<FtFictecItemDTO>();
            if (tieneConcepto && !tienePropiedad)
            {
                lstDependencia = listaTreeData.Where(x => x.Concepcodi == objItemFicha.Concepcodi).ToList();

                if (lstDependencia.Count() > 1) //si existen 2 elementos
                {
                    FtFictecItemDTO buscado = lstDependencia.Find(x => x.Ftitcodi != objItemFicha.Ftitcodi);

                    if (buscado != null)
                    {
                        //Si es EDITABLE el parametro en curso, entonces sera el padre de buscado
                        if (objCfg.Fitcfgflagbloqedicion == "N")
                        {
                            ftitcodiDependiente = buscado.Ftitcodi;
                        }
                    }
                }
            }
            else
            {
                if (!tieneConcepto && tienePropiedad)
                {
                    lstDependencia = listaTreeData.Where(x => x.Propcodi == objItemFicha.Propcodi).ToList();

                    if (lstDependencia.Count() > 1) //si existen 2 elementos
                    {
                        FtFictecItemDTO buscado = lstDependencia.Find(x => x.Ftitcodi != objItemFicha.Ftitcodi);

                        if (buscado != null)
                        {
                            //Si es EDITABLE el parametro en curso, entonces sera el padre de buscado
                            if (objCfg.Fitcfgflagbloqedicion == "N")
                            {
                                ftitcodiDependiente = buscado.Ftitcodi;
                            }
                        }

                    }
                }
            }

            return ftitcodiDependiente;
        }

        public List<FTReporteExcel> ListarLecturaExcelFormatoConexIntegModif(int ftenvcodi, string file, int ambiente, int estado,
                                                    int versionEnvio, string mensajeAutoguardado, int idAreaRevision, string faremcodis, out string mensajes)
        {
            List<FTReporteExcel> listaHoja = ListarHojaFormatoConexIntegModifConRevision(ftenvcodi, ConstantesAppServicio.ParametroDefecto, null,
                                                                ambiente, versionEnvio, faremcodis, idAreaRevision, false, false);
            mensajes = "";

            //lectura de archivo excel
            FileInfo fileInfo = new FileInfo(file);
            List<FTReporteExcel> listaFormFinal = new List<FTReporteExcel>();
            using (ExcelPackage xlPackage = new ExcelPackage(fileInfo))
            {
                int totalHoja = xlPackage.Workbook.Worksheets.Count;

                try
                {
                    for (int posSheet = 0; posSheet < totalHoja; posSheet++)
                    {
                        ExcelWorksheet ws = xlPackage.Workbook.Worksheets[posSheet + 1];
                        string nombreHoja = ws.Name;

                        FTReporteExcel objHoja = listaHoja.Find(x => x.NombreSheet.ToLower().Trim() == nombreHoja.ToLower().Trim());
                        if (objHoja != null)
                        {
                            List<FTReporteExcel> listaFormTmp = new List<FTReporteExcel>();

                            int rowCodigo = objHoja.RowIniItem - 2;
                            int colCodigo = objHoja.ColIniData;
                            int rowData = objHoja.RowIniItem;
                            int colRevision = colCodigo + (objHoja.IncluirColumnaComentario ? 1 : 0);
                            colRevision = colRevision + (objHoja.IncluirColumnaSustento ? 1 : 0);
                            for (var i = 0; i < 1000; i++) //leer cada equipo (columna)
                            {
                                int codigo = 0;
                                int fteeqcodi = 0;
                                try
                                {
                                    codigo = (int)(((double?)ws.Cells[rowCodigo, colCodigo].Value) ?? 0);

                                    //obtener eqenv
                                    if (objHoja.FichaTecnica.Famcodi > 0)
                                    {
                                        FtExtEnvioEqDTO objEqEnv = objHoja.ListaEnvioEqXFicha.Find(x => x.Equicodi == codigo);
                                        if (objEqEnv != null) fteeqcodi = objEqEnv.Fteeqcodi;
                                    }
                                    else
                                    {
                                        FtExtEnvioEqDTO objEqEnv = objHoja.ListaEnvioEqXFicha.Find(x => x.Grupocodi == codigo);
                                        if (objEqEnv != null) fteeqcodi = objEqEnv.Fteeqcodi;
                                    }

                                    //si el codigo de equipo no existe en el autoguardado entonces no continuar lectura de archivo
                                    if (fteeqcodi == 0) codigo = 0;
                                }
                                catch (Exception ex)
                                {
                                }

                                //obtener datos
                                if (codigo > 0)
                                {
                                    var listaDataFicha = objHoja.ListaTreeData.Where(x => x.Codigo == codigo).ToList();

                                    List<FtFictecItemDTO> listaDataExcel = new List<FtFictecItemDTO>();
                                    List<FtFictecItemDTO> listaDataExcelReplica = new List<FtFictecItemDTO>();
                                    List<FTDatoRevisionParametrosAEnvio> revisioncambios = new List<FTDatoRevisionParametrosAEnvio>(); // SECCIÓN REVISIÓN
                                    List<DatoRevisionAreasFT> derivacioncambios = new List<DatoRevisionAreasFT>(); // SECCIÓN DERIVACION

                                    int corr = 0;

                                    foreach (var regItem in objHoja.ListaAllItems) //leer cada item (fila)
                                    {
                                        bool esFilaLeible = regItem.Nivel == 1 || regItem.Propcodi > 0 || regItem.Concepcodi > 0 || regItem.Ftpropcodi > 0;

                                        if (esFilaLeible)
                                        {
                                            var objDataFicha = listaDataFicha.Find(x => x.Ftitcodi == regItem.Ftitcodi);
                                            var objCfgItem = objHoja.ListaItemConfig.Find(x => x.Ftitcodi == regItem.Ftitcodi);

                                            if (objDataFicha != null && objDataFicha.Ftedatcodi > 0 && objCfgItem != null)
                                            {
                                                object celdaDetalle = ws.Cells[rowData + corr, colCodigo].Value;

                                                string valorCeldaComentario = "";
                                                if (objHoja.IncluirColumnaComentario)
                                                {
                                                    object celdaComentario = ws.Cells[rowData + corr, colCodigo + 1].Value;
                                                    valorCeldaComentario = celdaComentario != null ? (celdaComentario.ToString() ?? "").Trim() : "";
                                                }

                                                string valorCeldaSustento = "";
                                                if (objHoja.IncluirColumnaSustento)
                                                {
                                                    object celdaSustento = ws.Cells[rowData + corr, colCodigo + 1].Value;
                                                    valorCeldaSustento = celdaSustento != null ? (celdaSustento.ToString() ?? "").Trim() : "";
                                                }

                                                string valorCeldaDetalle = celdaDetalle != null ? (celdaDetalle.ToString() ?? "").Trim() : "";

                                                if (objDataFicha.EsFilaEditableExtranet)
                                                {
                                                    if (!regItem.EsArchivo) objDataFicha.Valor = valorCeldaDetalle;
                                                    if (objCfgItem.Fitcfgflagcomentario == "S") objDataFicha.Itemcomentario = valorCeldaComentario;
                                                }

                                                if (objHoja.IncluirColumnaProcesoRevision)
                                                {
                                                    object celdaobscoes = ws.Cells[rowData + corr, colRevision + 1].Value;
                                                    string valorCeldaobscoes = celdaobscoes != null ? (celdaobscoes.ToString() ?? "").Trim() : "";
                                                    object celdarptaagente = ws.Cells[rowData + corr, colRevision + 2].Value;
                                                    string valorCeldaptaagente = celdarptaagente != null ? (celdarptaagente.ToString() ?? "").Trim() : "";
                                                    object celdarptacoes = ws.Cells[rowData + corr, colRevision + 3].Value;
                                                    string valorCeldarptacoes = celdarptacoes != null ? (celdarptacoes.ToString() ?? "").Trim() : "";
                                                    object celdaEstado = ws.Cells[rowData + corr, colRevision + 4].Value;
                                                    string valorCeldaEstado = celdaEstado != null ? (celdaEstado.ToString() ?? "").Trim() : "";

                                                    var bloqueado = VerificarFilaBloqueada(ambiente, objDataFicha.Estenvcodi, objDataFicha.Ftetcodi, objDataFicha.EsFilaRevisableIntranet
                                                                                    , objDataFicha.EnvioRevision, ConstantesFichaTecnica.AccionEditar);
                                                    string valorCeldaMsjRevision = "";
                                                    if (!bloqueado)
                                                    {
                                                        int columnaEditable = 0;

                                                        var celdaObsCoesEstaBloqueada = EsCeldaObsCoesBloqueada(ambiente, objDataFicha.Estenvcodi);
                                                        if (!celdaObsCoesEstaBloqueada)
                                                            columnaEditable = colRevision + 1;
                                                        var celdaRptaAgenteEstaBloqueada = EsCeldaRptaAgenteBloqueada(ambiente, objDataFicha.Estenvcodi);
                                                        if (!celdaRptaAgenteEstaBloqueada)
                                                            columnaEditable = colRevision + 2;
                                                        var celdaRptaCoesEstaBloqueada = EsCeldaRptaCoesBloqueada(ambiente, objDataFicha.Estenvcodi);
                                                        if (!celdaRptaCoesEstaBloqueada)
                                                            columnaEditable = colRevision + 3;

                                                        object celdaMsjRevision = ws.Cells[rowData + corr, columnaEditable].Value;
                                                        valorCeldaMsjRevision = celdaMsjRevision != null ? (celdaMsjRevision.ToString() ?? "").Trim() : "";


                                                        FTDatoRevisionParametrosAEnvio revision = new FTDatoRevisionParametrosAEnvio();
                                                        revision.Ftitcodi = regItem.Ftitcodi;
                                                        revision.Fteeqcodi = fteeqcodi;
                                                        revision.Estenvcodi = objDataFicha.Estenvcodi;

                                                        var idEstadoDesc = ObtenerCodigoEstado(valorCeldaEstado);
                                                        revision.IdValorEstado = idEstadoDesc;
                                                        revision.MsgColumnaEditada = valorCeldaMsjRevision;
                                                        revision.NumcolumnaEditada = columnaEditable - colRevision;

                                                        revisioncambios.Add(revision);
                                                    }
                                                }

                                                if (objHoja.IncluirColumnaProcesoDerivacion)
                                                {
                                                    var listaDerivacionXItem = objHoja.ListaDerivacion.Where(x => x.Ftitcodi == regItem.Ftitcodi).ToList();
                                                    var objDeriv = listaDerivacionXItem != null && listaDerivacionXItem.Any() ? listaDerivacionXItem.First() : new DatoRevisionAreasFT();
                                                    int colValorDerivacion = colRevision + 5;

                                                    if (objDeriv.EsFilaRevisable && !objDeriv.EsParaAdminFT)
                                                    {
                                                        DatoRevisionAreasFT derivacion = new DatoRevisionAreasFT();
                                                        derivacion.Ftitcodi = regItem.Ftitcodi;
                                                        derivacion.Fteeqcodi = fteeqcodi;
                                                        derivacion.Estenvcodi = objDataFicha.Estenvcodi;

                                                        if (!objDeriv.CeldaRevSolicitudEstaBloqueada)
                                                        {
                                                            object celdaMsgSolicitud = ws.Cells[rowData + corr, colValorDerivacion + 1].Value;
                                                            string valorCeldaMsgSolicitud = celdaMsgSolicitud != null ? (celdaMsgSolicitud.ToString() ?? "").Trim() : "";

                                                            object celdaEstadoRonda1 = ws.Cells[rowData + corr, colValorDerivacion + 2].Value;
                                                            string valorCeldaEstadoRonda1 = celdaEstadoRonda1 != null ? (celdaEstadoRonda1.ToString() ?? "").Trim() : "";

                                                            var idEstadoRondaDesc = ObtenerCodigoEstado(valorCeldaEstadoRonda1);

                                                            derivacion.MsgSolicitud = valorCeldaMsgSolicitud;
                                                            derivacion.IdValorEstadoSolicitado = idEstadoRondaDesc;
                                                        }

                                                        if (!objDeriv.CeldaRevSubsanadoEstaBloqueada)
                                                        {
                                                            object celdaMsgSubsanacion = ws.Cells[rowData + corr, colValorDerivacion + 3].Value;
                                                            string valorCeldaMsgSubsanacion = celdaMsgSubsanacion != null ? (celdaMsgSubsanacion.ToString() ?? "").Trim() : "";

                                                            object celdaEstadoRonda2 = ws.Cells[rowData + corr, colValorDerivacion + 4].Value;
                                                            string valorCeldaEstadoRonda2 = celdaEstadoRonda2 != null ? (celdaEstadoRonda2.ToString() ?? "").Trim() : "";

                                                            var idEstadoRondaDesc = ObtenerCodigoEstado(valorCeldaEstadoRonda2);

                                                            derivacion.MsgSubsanacion = valorCeldaMsgSubsanacion;
                                                            derivacion.IdValorEstadoSubsanado = idEstadoRondaDesc;

                                                        }

                                                        derivacioncambios.Add(derivacion);

                                                    }
                                                }

                                                listaDataExcel.Add(objDataFicha);

                                                if (regItem.FtitcodiDependiente > 0) //Si tiene dependientes agregarlo
                                                {
                                                    objDataFicha.FtitcodiDependiente = regItem.FtitcodiDependiente;
                                                    listaDataExcelReplica.Add(objDataFicha);
                                                }
                                            }

                                            corr++;
                                        }
                                    }

                                    //la duplica de los datos se realiza en el método del autoguardado

                                    //culminar lectura de equio
                                    FTReporteExcel objEquipoLectura = new FTReporteExcel()
                                    {
                                        Fteeqcodi = fteeqcodi,
                                        Ftenvcodi = objHoja.ListaEnvioEqXFicha[0].Ftenvcodi,
                                        Ftevercodi = objHoja.ListaEnvioEqXFicha[0].Ftevercodi,
                                        ListaTreeData = listaDataExcel,
                                        ListaRevision = revisioncambios,
                                        ListaDerivacion = derivacioncambios,
                                        MensajeAutoguardado = mensajeAutoguardado,
                                    };
                                    listaFormFinal.Add(objEquipoLectura);


                                    //continuar siguiente equipo
                                    colCodigo += 2;
                                }
                                else
                                {
                                    //se llega a la columna instructivo de llenado
                                    break;
                                }
                            }
                        }
                        else
                        {
                            mensajes += "<li>" + "La hoja con nombre: " + nombreHoja + " no forma parte del formato" + "</li>";
                        }

                    }
                }
                catch (Exception ex)
                {

                }
            }

            return listaFormFinal;
        }

        public string FormatearComillas(string cadena)
        {
            string comilla = "\""; // formato especial para comillas;

            if (cadena != null)
            {
                if (cadena.StartsWith(comilla))
                    cadena = cadena.Substring(2);//remover del incio

                if (cadena.EndsWith(comilla))
                    cadena = cadena.Remove(cadena.Length - 2);//remover del final
            }

            // reemplazar comillas si está en el medio del texto
            string comillaHtml = "&quot;";
            if (cadena != null)
                cadena = cadena.Replace(comilla, comillaHtml);

            return cadena;
        }

        #endregion

        #region Casos especiales Solicitud y aprobación

        public void ActualizarCentralEnvioCasoEspecial(FtExtEnvioDTO objEnvioTemp, string carpetaUploadTemporal)
        {
            //bd
            List<int> listaCentrales = new List<int>() { 39, 4, 37, 5 };
            List<int> listaGenerador = new List<int>() { 2, 3, 36, 38 };

            int casoEspecial = 0;

            //filtrar equipos centrales del nuevo envio
            List<FtExtEnvioEqDTO> listaEqCentralNuevoEnvio = objEnvioTemp.VersionActual.ListaEquipoEnvio.Where(x => listaCentrales.Contains(x.Famcodi ?? 0)).ToList();
            if (listaEqCentralNuevoEnvio.Any())
            {
                //determinar qué caso es. Si está en conexión la central y el U2, buscar en donde está la central y el U1
                if (ConstantesFichaTecnica.EtapaConexion == objEnvioTemp.Ftetcodi)
                {
                    //1. buscar si hay equipos aprobados en "Integración"
                    if (casoEspecial == 0)
                    {
                        //todos los equipos aprobados
                        List<FtExtEnvioDTO> listaEqYEnvio = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqAprobado("-1", ConstantesFichaTecnica.EtapaIntegracion)
                                                                .OrderByDescending(x => x.Ftenvfecvigencia).ToList();
                        listaEqYEnvio = listaEqYEnvio.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados

                        //solo verificar centrales de generación del nuevo envio
                        foreach (var eqEnvioTmp in listaEqCentralNuevoEnvio)
                        {
                            //copiar datos aprobados al nuevo envio [Obligatorio]
                            FtExtEnvioDTO objEnvioAprobado = listaEqYEnvio.Find(x => x.Equicodi > 0 && x.Equicodi == eqEnvioTmp.Equicodi);
                            if (objEnvioAprobado != null)
                            {
                                casoEspecial = ConstantesFichaTecnica.CasoEspecial2;
                                objEnvioTemp.Ftenvtipocasoesp = casoEspecial; //si al menos un equipo es especial, entonces el envio es especial
                                eqEnvioTmp.Fteeqflagespecial = casoEspecial; //el equipo es especial

                                //datos a tomar en cuenta en la aprobación
                                eqEnvioTmp.Fteeqcodiorigen = objEnvioAprobado.Fteeqcodi;

                                CopiarEnvioAprobadoAFichaTecnicaVigente(objEnvioAprobado, eqEnvioTmp, ref objEnvioTemp, carpetaUploadTemporal);
                            }
                        }
                    }

                    //2. buscar si hay equipos aprobados en "Modificación FT"
                    if (casoEspecial == 0)
                    {
                        //equipos que se encuentran en "Modificación FT" significa que fueron aprobados en Integración
                        List<FTRelacionEGP> listaEqEtapaModifFT = ListarEquiposNuevoEnvio(objEnvioTemp.Emprcodi, ConstantesFichaTecnica.EtapaModificacion, 0)
                                                                            .Where(x => x.CheckSeleccionableEnNuevo && listaCentrales.Contains(x.Famcodi ?? 0)).ToList();

                        //caso especial
                        if (listaEqEtapaModifFT.Any())
                        {
                            //todos los equipos aprobados
                            List<FtExtEnvioDTO> listaEqYEnvio = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqAprobado("-1", ConstantesFichaTecnica.EtapaModificacion)
                                                                    .OrderByDescending(x => x.Ftenvfecvigencia).ToList();
                            listaEqYEnvio = listaEqYEnvio.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados

                            //solo verificar centrales de generación del nuevo envio
                            foreach (var eqEnvioTmp in listaEqCentralNuevoEnvio)
                            {
                                //si la central del nuevo envio se encuentra en la etapa "modif" entonces es caso especial
                                if (listaEqEtapaModifFT.Any(x => x.Equicodi == eqEnvioTmp.Equicodi))
                                {
                                    casoEspecial = ConstantesFichaTecnica.CasoEspecial1;
                                    objEnvioTemp.Ftenvtipocasoesp = casoEspecial; //si al menos un equipo es especial, entonces el envio es especial
                                    eqEnvioTmp.Fteeqflagespecial = casoEspecial; //el equipo es especial

                                    //copiar datos aprobados al nuevo envio [Opcional]
                                    FtExtEnvioDTO objEnvioAprobado = listaEqYEnvio.Find(x => x.Equicodi > 0 && x.Equicodi == eqEnvioTmp.Equicodi);
                                    if (objEnvioAprobado != null)
                                    {
                                        //datos a tomar en cuenta en la aprobación
                                        eqEnvioTmp.Fteeqcodiorigen = objEnvioAprobado.Fteeqcodi;

                                        CopiarEnvioAprobadoAFichaTecnicaVigente(objEnvioAprobado, eqEnvioTmp, ref objEnvioTemp, carpetaUploadTemporal);
                                    }
                                }
                            }
                        }
                    }
                }

                if (ConstantesFichaTecnica.EtapaIntegracion == objEnvioTemp.Ftetcodi)
                {
                    //todos los equipos aprobados
                    List<FtExtEnvioDTO> listaEqYEnvio = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqAprobado("-1", ConstantesFichaTecnica.EtapaConexion)
                                                            .OrderByDescending(x => x.Ftenvfecvigencia).ToList();
                    listaEqYEnvio = listaEqYEnvio.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados

                    //solo verificar centrales de generación del nuevo envio
                    foreach (var eqEnvioTmp in listaEqCentralNuevoEnvio)
                    {
                        //copiar datos aprobados al nuevo envio [Obligatorio]
                        FtExtEnvioDTO objEnvioAprobado = listaEqYEnvio.Find(x => x.Equicodi > 0 && x.Equicodi == eqEnvioTmp.Equicodi);
                        if (objEnvioAprobado != null && objEnvioAprobado.Ftenvtipocasoesp > 0)
                        {
                            casoEspecial = objEnvioAprobado.Ftenvtipocasoesp;
                            objEnvioTemp.Ftenvtipocasoesp = casoEspecial; //si al menos un equipo es especial, entonces el envio es especial
                            eqEnvioTmp.Fteeqflagespecial = casoEspecial; //el equipo es especial

                            //datos a tomar en cuenta en la aprobación
                            eqEnvioTmp.Fteeqcodiorigen = objEnvioAprobado.Fteeqcodi;

                            CopiarEnvioAprobadoAFichaTecnicaVigente(objEnvioAprobado, eqEnvioTmp, ref objEnvioTemp, carpetaUploadTemporal);
                        }
                    }

                }

                if (ConstantesFichaTecnica.EtapaModificacion == objEnvioTemp.Ftetcodi)
                {
                    //todos los equipos observados / subsanados en Operación comercial
                    List<FtExtEnvioDTO> listaEqYEnvioOpCom = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqNoSeleccionable("-1", ConstantesFichaTecnica.EtapaOperacionComercial)
                                                            .Where(x => x.Estenvcodi == ConstantesFichaTecnica.EstadoObservado || x.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                                                            .OrderByDescending(x => x.Ftevercodi).ToList();
                    listaEqYEnvioOpCom = listaEqYEnvioOpCom.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados

                    //todos los equipos aprobados en Integración
                    List<FtExtEnvioDTO> listaEqYEnvio = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqAprobado("-1", ConstantesFichaTecnica.EtapaIntegracion)
                                                            .OrderByDescending(x => x.Ftenvfecvigencia).ToList();
                    listaEqYEnvio = listaEqYEnvio.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados

                    //solo verificar centrales de generación del nuevo envio
                    foreach (var eqEnvioTmp in listaEqCentralNuevoEnvio)
                    {
                        //1. verificar que la central está en Op comercial
                        FtExtEnvioDTO objEnvioOpCom = listaEqYEnvioOpCom.Find(x => x.Equicodi > 0 && x.Equicodi == eqEnvioTmp.Equicodi);

                        //2. verificar que existe aprobado en Integracion
                        FtExtEnvioDTO objEnvioAprobado = listaEqYEnvio.Find(x => x.Equicodi > 0 && x.Equicodi == eqEnvioTmp.Equicodi);

                        //copiar datos aprobados al nuevo envio [Obligatorio]
                        if (objEnvioOpCom != null && objEnvioOpCom.Ftenvtipocasoesp == ConstantesFichaTecnica.CasoEspecial1
                            && objEnvioAprobado != null && objEnvioAprobado.Ftenvtipocasoesp == ConstantesFichaTecnica.CasoEspecial1)
                        {
                            casoEspecial = ConstantesFichaTecnica.CasoEspecial1;
                            objEnvioTemp.Ftenvtipocasoesp = casoEspecial; //si al menos un equipo es especial, entonces el envio es especial
                            eqEnvioTmp.Fteeqflagespecial = casoEspecial; //el equipo es especial

                            //datos a tomar en cuenta en la aprobación
                            eqEnvioTmp.Fteeqcodiorigen = objEnvioAprobado.Fteeqcodi;

                            CopiarEnvioAprobadoAFichaTecnicaVigente(objEnvioAprobado, eqEnvioTmp, ref objEnvioTemp, carpetaUploadTemporal);
                        }
                    }

                }

            }
        }

        private void CopiarEnvioAprobadoAFichaTecnicaVigente(FtExtEnvioDTO objEnvioAprobado, FtExtEnvioEqDTO eqEnvioTmp, ref FtExtEnvioDTO objEnvioTemp,
                                        string carpetaUploadTemporal)
        {
            //obtener equipo con información aprobada
            FtExtEnvioDTO objEnvioTempClonado = ClonarEstructuraEnvioFromBDConexIntegModif(objEnvioAprobado.Ftenvcodi, objEnvioAprobado.Ftevercodi ?? 0, -1, -1, "", "");
            var eqEnvioAprobado = objEnvioTempClonado.VersionActual.ListaEquipoEnvio.Find(x => x.Equicodi > 0 && x.Equicodi == objEnvioAprobado.Equicodi);

            foreach (var regDato in eqEnvioTmp.ListaDato)
            {
                var regDatoAprobado = eqEnvioAprobado.ListaDato.Find(x => x.Ftitcodi == regDato.Ftitcodi);
                if (regDatoAprobado != null)
                {
                    regDato.Ftedatvalor = regDatoAprobado.Ftedatvalor ?? "";
                    regDato.Ftedatcomentario = regDatoAprobado.Ftedatcomentario ?? "";
                    regDato.Ftedatflagvalorconf = regDatoAprobado.Ftedatflagvalorconf ?? "N";

                    regDato.ListaRelDatoArchivo = regDatoAprobado.ListaRelDatoArchivo ?? new List<FtExtEnvioReldatoarchivoDTO>();
                    foreach (var itemArch in regDato.ListaRelDatoArchivo)
                    {
                        itemArch.Ftearccodi = 0;
                    }

                    objEnvioTemp.ListaArchivo.AddRange(regDato.ListaRelDatoArchivo.Select(x => x.Archivo).ToList());
                }
            }

            //copiar los archivos
            string pathAlternativo = GetPathPrincipal();
            string pathOrigen = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + "envio_" + objEnvioAprobado.Ftenvcodi + "/version_" + (objEnvioAprobado.Ftevercodi ?? 0);
            string pathDestino = carpetaUploadTemporal;

            //1. Crear carpeta destino
            FileServer.CreateFolder(pathDestino, "", pathAlternativo);

            //2. copiar todos los archivos del origen a la carpeta destino
            FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo); //copiar todo al destino

        }

        #endregion

        #region Manejo de Archivos

        /// <summary>
        /// Permite obtener la carpeta principal de Intervenciones
        /// </summary>
        /// <returns></returns>
        public string GetPathPrincipal()
        {
            //- Definimos la carpeta raiz (termina con /)
            string pathRaiz = FileServer.GetDirectory();
            return pathRaiz;
        }

        public string GetPathSubcarpeta(string subcarpeta)
        {
            return ConstantesFichaTecnica.FolderRaizExtranetFT + subcarpeta + @"/";
        }

        public string GetSubcarpetaEnvio(int idEnvio, int idVersion, int idElemento, string tipoArchivo)
        {
            string carpetaEnvio = string.Format("envio_{0}/version_{1}", idEnvio, idVersion);

            if (idElemento != 0 && !string.IsNullOrEmpty(tipoArchivo))
                return carpetaEnvio + "/" + tipoArchivo + "/" + idElemento;
            else
                return carpetaEnvio;
        }

        public byte[] GetBufferArchivoEnvioFinal(int idEnvio, int idVersion, int idElemento, string tipoArchivo, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + GetSubcarpetaEnvio(idEnvio, idVersion, idElemento, tipoArchivo);

                if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        public void UploadArchivoEnvioTemporal(int idEnvio, int idVersion, int idElemento, string tipoArchivo, string fileNameOriginal,
                                            Stream inputStream, DateTime fecha, out string fileNamefisico)
        {
            string pathAlternativo = GetPathPrincipal();

            string myFilePath = "C:\\" + fileNameOriginal;
            string ext = Path.GetExtension(myFilePath);
            string fileName = "archivo_ft2_" + fecha.Ticks + ext;
            fileNamefisico = fileName;

            string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud);

            try
            {
                //1. Crear carpeta temporal(si no existiese) para guardar los archivos de intervenciones o mensajes
                FileServer.CreateFolder(pathDestino, "", pathAlternativo);
                FileServer.CreateFolder(pathDestino + @"/", "envio_" + idEnvio, pathAlternativo);
                FileServer.CreateFolder(pathDestino + @"/envio_" + idEnvio + "/", "version_" + idVersion, pathAlternativo);
                FileServer.CreateFolder(pathDestino + @"/envio_" + idEnvio + "/version_" + idVersion + "/", tipoArchivo, pathAlternativo);
                FileServer.CreateFolder(pathDestino + @"/envio_" + idEnvio + "/version_" + idVersion + "/" + tipoArchivo + "/", idElemento.ToString(), pathAlternativo);

                string pathSesionID = pathDestino + GetSubcarpetaEnvio(idEnvio, idVersion, idElemento, tipoArchivo); //termina sin /

                if (FileServer.VerificarExistenciaFile(pathSesionID, fileName, pathAlternativo))
                {
                    FileServer.DeleteBlob(pathSesionID + "\\" + fileName, pathAlternativo);
                }

                //2. guardar stream en el fileserver
                FileServer.UploadFromStream(inputStream, pathSesionID + "\\", fileName, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
            }
        }

        public void RenombrarCarpetaUploadToAplicativo(string carpetaUploadTemporal, int idEnvio, int idVersion, bool flagEliminarCarpetaTemporal)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                //crear carpetas destino
                string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud);
                FileServer.CreateFolder(pathDestino, "", pathAlternativo);
                FileServer.CreateFolder(pathDestino + @"/", "envio_" + idEnvio, pathAlternativo);
                FileServer.CreateFolder(pathDestino + @"/envio_" + idEnvio + "/", "version_" + idVersion, pathAlternativo);

                //carpetas principales de cada version (Archivos del agente, revisión administrador)
                List<string> listaTipoArchivo = new List<string>() { ConstantesFichaTecnica.STipoArchivoValorDato, ConstantesFichaTecnica.STipoArchivoSustentoDato };

                foreach (var tipoArchivo in listaTipoArchivo)
                {
                    string pathTipoArchivo = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + string.Format("envio_{0}/version_{1}/{2}", idEnvio, idVersion, tipoArchivo);
                    var listaFolder = FileServer.ListarArhivos(tipoArchivo, carpetaUploadTemporal).Where(x => x.FileType == ConstantesBase.TipoFolder).Select(x => x.FileName).ToList();

                    //crear subcarpeta destino
                    FileServer.CreateFolder(pathDestino + @"/envio_" + idEnvio + "/version_" + idVersion + "/", tipoArchivo, pathAlternativo);

                    //subcarpeta (codigo ftitcodi (item de ficha), requisito)
                    foreach (var idElemento in listaFolder)
                    {
                        //crear subcarpeta destino
                        string pathDestinoCompleto = pathDestino + @"/envio_" + idEnvio + "/version_" + idVersion + "/" + tipoArchivo + "/" + idElemento + "/";
                        FileServer.CreateFolder(pathDestino + @"/envio_" + idEnvio + "/version_" + idVersion + "/" + tipoArchivo + "/", idElemento.ToString(), pathAlternativo);

                        string pathOrigen = tipoArchivo + "\\" + idElemento + "\\";

                        //2. copiar temporales a la carpeta final
                        var listaDocumentos = FileServer.ListarArhivos(pathOrigen, carpetaUploadTemporal);

                        if (listaDocumentos.Any())
                        {
                            //copiar los archivos de la carpeta temporal a la carpeta final
                            foreach (var reg in listaDocumentos)
                            {
                                FileServer.CopiarFileAlterFinal(carpetaUploadTemporal + pathOrigen, pathDestinoCompleto, reg.FileName, pathAlternativo);
                            }
                        }

                    }
                }

                //eliminar carpeta upload temporal
                if (flagEliminarCarpetaTemporal)
                {
                    if (Directory.Exists(carpetaUploadTemporal))
                        Directory.Delete(carpetaUploadTemporal, true);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
            }
        }

        private void RenombrarCarpetaEnvioEstadoSolicitud(int idEnvioNegativo, int idEnvioPositivo, int idVersionCarpetaTrabajo, List<string> listaArchivoFisicoAGuardar)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathOrigen = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + "envio_" + idEnvioNegativo;
                string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + "envio_" + idEnvioPositivo;

                //1. eliminar los archivos que ya no forman parte del envio (fueron subidos pero no se guardaron o eliminados por el usuario en el formulario)
                EliminarArchivosResidualesXVersion(idEnvioNegativo, idVersionCarpetaTrabajo, listaArchivoFisicoAGuardar);

                //2. copiar todos los archivos a la carpeta destino
                FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo); //copiar todo al destino

                //3. Eliminar carpeta origen
                FileServer.DeleteFolderAlter(pathOrigen, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        public void QuitarArchivosResidualesVersion(int idEnvio, int idVersion, List<string> listaArchivoFisicoAGuardar)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                //1. eliminar los archivos que ya no forman parte del envio (fueron subidos pero no se guardaron o eliminados por el usuario en el formulario)
                EliminarArchivosResidualesXVersion(idEnvio, idVersion, listaArchivoFisicoAGuardar);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        private void CopiarCarpetaVersion(int idEnvio, int idVersionOrigen, int idVersionDestino)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathOrigen = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + "envio_" + idEnvio + "/version_" + idVersionOrigen;
                string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + "envio_" + idEnvio + "/version_" + idVersionDestino;

                //1. Crear carpeta destino
                FileServer.CreateFolder(pathDestino, "", pathAlternativo);

                //2. copiar todos los archivos del origen a la carpeta destino
                FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo); //copiar todo al destino
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        private void EliminarArchivosResidualesXVersion(int idEnvio, int idVersion, List<string> listaArchivoFisicoAGuardar)
        {
            string pathAlternativo = GetPathPrincipal();

            //carpetas principales de cada version (Archivos del agente, revisión administrador)
            List<string> listaTipoArchivo = new List<string>() { ConstantesFichaTecnica.STipoArchivoValorDato, ConstantesFichaTecnica.STipoArchivoSustentoDato,
                                                            ConstantesFichaTecnica.STipoArchivoRequisito,
                                                            ConstantesFichaTecnica.STipoArchivoRevisionObsCOES, ConstantesFichaTecnica.STipoArchivoRevisionRptaAgente,ConstantesFichaTecnica.STipoArchivoRevisionRptaCOES
                                                            };

            foreach (var tipoArchivo in listaTipoArchivo)
            {
                string pathTipoArchivo = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + string.Format("envio_{0}/version_{1}/{2}", idEnvio, idVersion, tipoArchivo);
                var listaFolder = FileServer.ListarArhivos(pathTipoArchivo, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder).Select(x => x.FileName).ToList();

                //subcarpeta (codigo ftitcodi (item de ficha), requisito)
                foreach (var idElemento in listaFolder)
                {
                    string pathDestino = pathTipoArchivo + "/" + idElemento;

                    //2. copiar temporales a la carpeta final
                    var listaDocumentos = FileServer.ListarArhivos(pathDestino, pathAlternativo);

                    try
                    {
                        if (listaDocumentos.Any())
                        {
                            //si el archivo no pertenece al envio entonces se elimina
                            foreach (var reg in listaDocumentos)
                            {
                                string pathDestinoFile = pathDestino + "/" + reg.FileName;
                                if (!listaArchivoFisicoAGuardar.Contains(reg.FileName)) //solo mover / copiar los archivos a procesar
                                {
                                    //eliminar 
                                    FileServer.DeleteBlob(pathDestinoFile, pathAlternativo);
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
                    }
                }
            }
        }

        private List<string> ListarArchivoFisicoFromVersion(int ftenvcodi, int codigoVersion)
        {
            List<FtExtEnvioArchivoDTO> listaArchivoBD = new List<FtExtEnvioArchivoDTO>();

            var objEnvioAct = GetByIdFtExtEnvio(ftenvcodi);

            switch (objEnvioAct.Ftenvtipoformato)
            {
                case ConstantesFichaTecnica.FormatoConexIntegModif:
                    //archivos de items
                    var lista1 = ListByVersionYDatoFtExtEnvioArchivos(codigoVersion);
                    listaArchivoBD.AddRange(lista1);

                    //Archivos de revision
                    List<FtExtEnvioRevisionDTO> listaRevisionBD = GetByCriteriaFtExtEnvioRevisionsXVersionYDato(codigoVersion);
                    string strFtrevcodis = string.Join(",", listaRevisionBD.Select(x => x.Ftrevcodi).Distinct().ToList());
                    List<FtExtEnvioArchivoDTO> lstArchivosXRevision = ListByRevisionFtExtEnvioArchivos(strFtrevcodis);
                    listaArchivoBD.AddRange(lstArchivosXRevision);
                    break;
                case ConstantesFichaTecnica.FormatoOperacionComercial:
                case ConstantesFichaTecnica.FormatoBajaModoOperacion:
                    //archivos de requisitos
                    var lista2 = ListByVersionYReqFtExtEnvioArchivos(codigoVersion);
                    listaArchivoBD.AddRange(lista2);

                    //Archivos de revision
                    List<FtExtEnvioRevisionDTO> listaRevisionBD2 = GetByCriteriaFtExtEnvioRevisionsXVersionYReq(codigoVersion);
                    string strFtrevcodis2 = string.Join(",", listaRevisionBD2.Select(x => x.Ftrevcodi).Distinct().ToList());
                    List<FtExtEnvioArchivoDTO> lstArchivosXRevision2 = ListByRevisionFtExtEnvioArchivos(strFtrevcodis2);
                    listaArchivoBD.AddRange(lstArchivosXRevision2);
                    break;
            }


            //lista de string
            List<string> listaArchivo = listaArchivoBD.Select(x => x.Ftearcnombrefisico).ToList();

            return listaArchivo.Distinct().OrderBy(x => x).ToList();
        }

        public byte[] GetBufferArchivoAdjuntoCorreo(int corrcodi, string fileName)
        {
            string pathAlternativo = GetPathPrincipal();

            try
            {
                string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaArchivoAdjuntado) + corrcodi;

                if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                {
                    return FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }

            return null;
        }

        public static string GetPathPrincipalExtranetAprobado()
        {
            //- Definimos la carpeta raiz (termina con /)
            string pathRaiz = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyFileServerExtranetppFichaTecnica];
            return pathRaiz;
        }

        public void GenerarZipYCopiarAFileServerFileappFT(int idEnvio, int idVersion, List<FtExtEnvioDatoDTO> lstTotalParametros)
        {
            string pathAlternativo = GetPathPrincipal();

            string subcarpetaDestinoNoConf = GetPathPrincipalExtranetAprobado() + ConstantesFichaTecnica.SubcarpetaNoConfidencial + "/";
            string subcarpetaDestinoConf = GetPathPrincipalExtranetAprobado() + ConstantesFichaTecnica.SubcarpetaConfidencial + "/";
            try
            {
                //crear carpeta donde guardar los archivos a zipear
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal") + DateTime.Now.Ticks + "/";
                FileServer.CreateFolder("", pathTemporalUsuario, pathAlternativo);

                foreach (var itemDato in lstTotalParametros)
                {
                    string subcarpetaOrigenVD = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) +
                                            GetSubcarpetaEnvio(idEnvio, idVersion, itemDato.Ftitcodi, ConstantesFichaTecnica.STipoArchivoValorDato) + "/";
                    string subcarpetaOrigenSD = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) +
                                            GetSubcarpetaEnvio(idEnvio, idVersion, itemDato.Ftitcodi, ConstantesFichaTecnica.STipoArchivoSustentoDato) + "/";

                    //valor no confidencial
                    GenerarZipYCopiarAFileServerFileappFTXTipo(itemDato.NombFileZipValorNoConf, itemDato.ListaArchivoValorNoConf, subcarpetaOrigenVD,
                                                        subcarpetaDestinoNoConf, itemDato.FolderEnvio, itemDato.SubfolderEqGr, pathTemporalUsuario, pathAlternativo);

                    //valor confidencial
                    GenerarZipYCopiarAFileServerFileappFTXTipo(itemDato.NombFileZipValorConf, itemDato.ListaArchivoValorConf, subcarpetaOrigenVD,
                                                        subcarpetaDestinoConf, itemDato.FolderEnvio, itemDato.SubfolderEqGr, pathTemporalUsuario, pathAlternativo);

                    //sustento no confidencial
                    GenerarZipYCopiarAFileServerFileappFTXTipo(itemDato.NombFileZipSustentoNoConf, itemDato.ListaArchivoSustentoNoConf, subcarpetaOrigenSD,
                                                        subcarpetaDestinoNoConf, itemDato.FolderEnvio, itemDato.SubfolderEqGr, pathTemporalUsuario, pathAlternativo);

                    //sustento confidencial
                    GenerarZipYCopiarAFileServerFileappFTXTipo(itemDato.NombFileZipSustentoConf, itemDato.ListaArchivoSustentoConf, subcarpetaOrigenSD,
                                                        subcarpetaDestinoConf, itemDato.FolderEnvio, itemDato.SubfolderEqGr, pathTemporalUsuario, pathAlternativo);
                }

                //eliminar folder temporal
                FileServer.DeleteFolderAlter(pathTemporalUsuario, pathAlternativo);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        private void GenerarZipYCopiarAFileServerFileappFTXTipo(string nombreZip, List<FtExtEnvioArchivoDTO> listaArchivo, string subcarpetaOrigen,
                                                    string subcarpetaDestino, string subfolderDestino, string subfolderEqGr,
                                                    string pathTemporalUsuario, string pathAlternativo)
        {
            if (listaArchivo.Any())
            {
                try
                {
                    //crear carpeta
                    FileServer.CreateFolder("", subfolderDestino, subcarpetaDestino);
                    FileServer.CreateFolder("", subfolderDestino + "/" + subfolderEqGr, subcarpetaDestino);
                    string subcarpetaDestinoEnvioEq = subcarpetaDestino + "/" + subfolderDestino + "/" + subfolderEqGr + "/";

                    //copiar archivos, generar zip y enviarlos FS del fileapp
                    foreach (var itemArch in listaArchivo)
                    {
                        FileServer.CopiarFile(subcarpetaOrigen, pathTemporalUsuario, itemArch.Ftearcnombrefisico, pathAlternativo);
                        FileServer.RenameBlob(pathTemporalUsuario, itemArch.Ftearcnombrefisico, itemArch.Ftearcnombreoriginal, pathAlternativo);
                    }

                    //crear zip
                    string pathZip = subcarpetaDestinoEnvioEq + nombreZip;
                    if (File.Exists(pathZip)) File.Delete(pathZip);
                    FileServer.CreateZipFromDirectory(pathTemporalUsuario, pathZip, pathAlternativo);

                    //eliminar archivos temporales
                    foreach (var itemArch in listaArchivo)
                    {
                        FileServer.DeleteBlob(pathTemporalUsuario + itemArch.Ftearcnombreoriginal, pathAlternativo);
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                }
            }
        }

        #endregion

        #region Correo Área

        /// <summary>
        /// Devuelve los datos del área admin FT
        /// </summary>
        /// <returns></returns>
        public FtExtCorreoareaDTO ObtenerAreaAdminFT()
        {
            FtExtCorreoareaDTO salida = GetByIdFtExtCorreoarea(ConstantesFichaTecnica.IdAreaAdminFT);

            if (salida == null)
            {
                salida = new FtExtCorreoareaDTO();
                salida.FechaCreacionDesc = "";
                salida.FechaModificacionDesc = "";
                salida.Faremusucreacion = "";
                salida.Faremusumodificacion = "";
            }

            return salida;
        }

        public List<UserCorreo> ListarCorreos()
        {
            string pathAlternativo = GetPathPrincipalIntranet();
            string pathDestino = ConstantesFichaTecnica.FolderDirectorio;

            //Intranet corporativa
            List<IntDirectorioDTO> lstCorreosBD = GetByCriteriaIntDirectorios().Where(x => x.Direstado == ConstantesAppServicio.Activo).ToList();

            List<UserCorreo> lstCorreos = new List<UserCorreo>();
            foreach (var item in lstCorreosBD)
            {
                UserCorreo correo = new UserCorreo();
                correo.Codigo = item.Dircodi;
                correo.Nombre = item.Dirnombre + " " + item.Dirapellido;
                correo.Correo = item.Dircorreo;

                // ASIGNAR RUTA IMAGENES
                string fileName = ConstantesFichaTecnica.FotoThumbnail + item.Dircodi + item.Dirfoto;

                byte[] imagen = null;

                if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                {
                    imagen = FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                }
                else
                {
                    item.Dirfoto = ".png";
                    fileName = ConstantesFichaTecnica.ImagenDefectoDirectorioThumbnail;
                    if (FileServer.VerificarExistenciaFile(pathDestino, fileName, pathAlternativo))
                    {
                        imagen = FileServer.DownloadToArrayByte(pathDestino + "\\" + fileName, pathAlternativo);
                    }
                }

                if (imagen != null)
                {
                    string mimeType = "image/" + item.Dirfoto.Replace(".", string.Empty);
                    string base64 = Convert.ToBase64String(imagen);
                    correo.Imagen = string.Format("data:{0};base64,{1}", mimeType, base64);
                }
                else
                {
                    correo.Imagen = string.Empty;
                }

                lstCorreos.Add(correo);
            }

            return lstCorreos;
        }

        public string GetPathPrincipalIntranet()
        {
            //- Definimos la carpeta raiz (termina con /)
            string pathRaiz = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyFileServerIntranetCorporativa].ToString();
            return pathRaiz;
        }

        public List<UserCorreo> AgregarCorreos(List<string> ListaCorreosPorArea)
        {
            List<UserCorreo> lstCorreos = new List<UserCorreo>();
            List<UserCorreo> lstCorreosCOES = ListarCorreos();

            foreach (var item in ListaCorreosPorArea)
            {
                var reg = lstCorreosCOES.Find(x => x.Correo == item);
                if (reg == null)
                {
                    UserCorreo correo = new UserCorreo();
                    correo.Nombre = item;
                    correo.Correo = item;

                    // ASIGNAR RUTA IMAGENES
                    correo.Imagen = "";

                    lstCorreos.Add(correo);
                }
            }

            lstCorreosCOES.AddRange(lstCorreos);

            return lstCorreosCOES;
        }


        /// <summary>
        /// Listar todas las áreas correos
        /// </summary>
        /// <returns></returns>
        public List<FtExtCorreoareaDTO> ListarAreaCorreos()
        {
            List<FtExtCorreoareaDTO> lstSalida = new List<FtExtCorreoareaDTO>();

            List<FtExtCorreoareaDTO> lstAreaCorreo = ListFtExtCorreoareas().Where(X => X.Faremcodi != 1).ToList();  //correos diferentes al ID = 1 (Admin FT)
            List<FtExtCorreoareadetDTO> lstDetCorreos = ListFtExtCorreoareadets();

            foreach (var area in lstAreaCorreo)
            {
                area.FaremEstadoDesc = area.Faremestado == "A" ? "Activo" : "Baja";
                area.FechaCreacionDesc = area.Faremfeccreacion != null ? area.Faremfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                area.Faremusumodificacion = area.Faremusumodificacion != null ? area.Faremusumodificacion : "";
                area.FechaModificacionDesc = area.Faremfecmodificacion != null ? area.Faremfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                area.CantidadCorreos = lstDetCorreos.Where(x => x.Faremcodi == area.Faremcodi).ToList().Count();

                lstSalida.Add(area);
            }

            lstSalida = lstSalida.OrderBy(x => x.Faremnombre).ThenByDescending(x => x.Faremfeccreacion).ToList();

            return lstSalida;
        }


        public void GuardarDatosAreaCorreo(string area, List<string> lstCorreos, string usuario)
        {
            int faremcodi = 0;
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        //var listaCorreosCoes = ListarCorreos();

                        //guardar area
                        FtExtCorreoareaDTO areaCorreo = new FtExtCorreoareaDTO();
                        areaCorreo.Faremnombre = area;
                        areaCorreo.Faremestado = "A";
                        areaCorreo.Faremusucreacion = usuario;
                        areaCorreo.Faremfeccreacion = DateTime.Now;

                        faremcodi = FactorySic.GetFtExtCorreoareaRepository().Save(areaCorreo, connection, transaction);

                        //Guardo detalle
                        List<FtExtCorreoareadetDTO> lstRegistros = FormatearDetalleParaGuardar(lstCorreos);
                        foreach (var email in lstRegistros)
                        {
                            email.Faremcodi = faremcodi;
                            email.Faremdestado = "A";

                            FactorySic.GetFtExtCorreoareadetRepository().Save(email, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

        }


        public void ActualizarDatosAreaCorreo(string area, List<string> lstCorreos, string usuario, int faremcodi)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = (DbTransaction)UoW.StartTransaction(connection))
                {
                    try
                    {
                        //obtener área
                        var areaCorreo = GetByIdFtExtCorreoarea(faremcodi);
                        areaCorreo.Faremnombre = area;
                        areaCorreo.Faremfecmodificacion = DateTime.Now;
                        areaCorreo.Faremusumodificacion = usuario;
                        FactorySic.GetFtExtCorreoareaRepository().Update(areaCorreo, connection, transaction);

                        List<FtExtCorreoareadetDTO> lstNuevos = new List<FtExtCorreoareadetDTO>();
                        List<FtExtCorreoareadetDTO> lstEliminados = new List<FtExtCorreoareadetDTO>();

                        //obtener datlles
                        List<FtExtCorreoareadetDTO> lstRegistrosBD = ListarCorreosPorArea(faremcodi.ToString());
                        List<FtExtCorreoareadetDTO> lstRegistros = FormatearDetalleParaGuardar(lstCorreos);

                        //agregar nuevos registros
                        foreach (var correo in lstRegistros)
                        {
                            var regBD = lstRegistrosBD.Find(x => x.Faremdemail == correo.Faremdemail);
                            if (regBD == null)
                            {
                                FtExtCorreoareadetDTO correodet = new FtExtCorreoareadetDTO();
                                correodet.Faremcodi = faremcodi;
                                correodet.Faremdemail = correo.Faremdemail != null ? correo.Faremdemail.Trim() : "";
                                correodet.Faremduserlogin = correo.Faremduserlogin != null ? correo.Faremduserlogin.Trim() : "";
                                correodet.Faremdestado = "A";

                                lstNuevos.Add(correodet);//solo incluir los nuevos
                            }
                        }

                        //obtener eliminados
                        foreach (var item in lstRegistrosBD)
                        {
                            var regBD = lstRegistros.Find(x => x.Faremdemail == item.Faremdemail);
                            if (regBD == null)
                            {
                                lstEliminados.Add(item);
                            }
                        }

                        //guardar nuevos
                        foreach (FtExtCorreoareadetDTO reg in lstNuevos)
                        {
                            FactorySic.GetFtExtCorreoareadetRepository().Save(reg, connection, transaction);
                        }

                        //Actualizar detalle
                        foreach (var reg in lstEliminados)
                        {
                            FactorySic.GetFtExtCorreoareadetRepository().Delete(reg.Faremdcodi, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }

        }

        private List<FtExtCorreoareadetDTO> FormatearDetalleParaGuardar(List<string> lstCorreos)
        {
            List<FtExtCorreoareadetDTO> listDetalle = new List<FtExtCorreoareadetDTO>();

            var listaCorreosCoes = ListarCorreos();

            foreach (var email in lstCorreos)
            {
                var correo = listaCorreosCoes.Find(x => x.Correo == email);

                if (correo != null)
                {
                    listDetalle.Add(new FtExtCorreoareadetDTO()
                    {
                        Faremdemail = email,
                        Faremduserlogin = correo.Nombre
                    });
                }
                else
                {
                    listDetalle.Add(new FtExtCorreoareadetDTO()
                    {
                        Faremdemail = email,
                        Faremduserlogin = string.Empty
                    }); ;
                }
            }
            return listDetalle;
        }

        public void DarBajaAreaCorreo(int faremcodi, string usuario)
        {
            try
            {
                FtExtCorreoareaDTO area = GetByIdFtExtCorreoarea(faremcodi);
                area.Faremestado = "X";
                area.Faremusumodificacion = usuario;
                area.Faremfecmodificacion = DateTime.Now;

                UpdateFtExtCorreoarea(area);

                List<FtExtCorreoareadetDTO> lstDetalle = ListarCorreosPorArea(faremcodi.ToString());
                foreach (var regBD in lstDetalle)
                {
                    // Dar de baja el detalle
                    regBD.Faremdestado = "X";
                    UpdateFtExtCorreoareadet(regBD);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        public void ActivarAreaCorreo(int faremcodi, string usuario)
        {
            //Valido que no haya otro registro con mismo nombre
            FtExtCorreoareaDTO area = GetByIdFtExtCorreoarea(faremcodi);
            List<FtExtCorreoareaDTO> lstAreaActivos = ListFtExtCorreoareas().Where(x => x.Faremestado == "A").ToList();
            List<FtExtCorreoareaDTO> lstAreaSinEditado = lstAreaActivos.Where(x => x.Faremcodi != area.Faremcodi).ToList();
            FtExtCorreoareaDTO objRepetido = lstAreaSinEditado.Find(x => x.Faremnombre.ToUpper().Trim() == area.Faremnombre.ToUpper().Trim());
            if (objRepetido != null)
            {
                throw new Exception("Ya existe un área con el mismo nombre");
            }

            List<FtExtCorreoareadetDTO> lstCorreosXarea = this.ListarCorreosPorArea(faremcodi.ToString());
            var correos = lstCorreosXarea.Select(x => x.Faremdemail).ToList();
            var mensaje = ValidarCorreosOtrasAreas(correos, faremcodi);
            if (mensaje != "")
                throw new Exception("No se puede activar el área, porque contiene correos asignados en otras áreas");

            area.Faremestado = "A";
            area.Faremusumodificacion = usuario;
            area.Faremfecmodificacion = DateTime.Now;
            UpdateFtExtCorreoarea(area);

            List<FtExtCorreoareadetDTO> lstDetalle = ListarCorreosPorArea(faremcodi.ToString());
            foreach (var regBD in lstDetalle)
            {
                // Dar de baja el detalle
                regBD.Faremdestado = "A";
                UpdateFtExtCorreoareadet(regBD);
            }
        }

        public void GenerarExportacionArea(string ruta, string pathLogo, string nameFile)
        {
            List<FtExtCorreoareaDTO> listaAreasTotales = ListarAreaCorreos();

            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelArea(xlPackage, pathLogo, listaAreasTotales);

                xlPackage.Save();
            }
        }

        private void GenerarArchivoExcelArea(ExcelPackage xlPackage, string pathLogo, List<FtExtCorreoareaDTO> listaAreasTotales)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();

            string nameWS = "REPORTE";
            string titulo = "LISTADO DE AREAS";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniTable = colIniTitulo;
            int rowIniTabla = rowIniTitulo + 2;

            int colNombre = colIniTable;
            int colUsuarioCreacion = colIniTable + 1;
            int colFechaCreacion = colIniTable + 2;
            int colUsuarioModificacion = colIniTable + 3;
            int colFechaModificacion = colIniTable + 4;
            int colCorreosAsociados = colIniTable + 5;
            int colEstado = colIniTable + 6;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            servFormato.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colEstado);
            servFormato.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colEstado);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colEstado, "Centro");
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colEstado, "Calibri", 16);

            ws.Row(rowIniTabla).Height = 25;
            ws.Cells[rowIniTabla, colNombre].Value = "Nombre Área COES";
            ws.Cells[rowIniTabla, colUsuarioCreacion].Value = "Usuario Creación";
            ws.Cells[rowIniTabla, colFechaCreacion].Value = "Fecha de Creación";
            ws.Cells[rowIniTabla, colUsuarioModificacion].Value = "Usuario Modificación";
            ws.Cells[rowIniTabla, colFechaModificacion].Value = "Fecha de Modificación";
            ws.Cells[rowIniTabla, colCorreosAsociados].Value = "Correos asociados";
            ws.Cells[rowIniTabla, colEstado].Value = "Estado";

            //Estilos cabecera
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colNombre, rowIniTabla, colEstado, "Calibri", 11);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colNombre, rowIniTabla, colEstado, "Centro");
            servFormato.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colNombre, rowIniTabla, colEstado, "Centro");
            servFormato.CeldasExcelColorFondo(ws, rowIniTabla, colNombre, rowIniTabla, colEstado, "#2980B9");
            servFormato.CeldasExcelColorTexto(ws, rowIniTabla, colNombre, rowIniTabla, colEstado, "#FFFFFF");
            servFormato.BorderCeldas2(ws, rowIniTabla, colNombre, rowIniTabla, colEstado);
            servFormato.CeldasExcelEnNegrita(ws, rowIniTabla, colNombre, rowIniTabla, colEstado);

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaAreasTotales)
            {
                ws.Cells[rowData, colNombre].Value = item.Faremnombre.Trim();
                ws.Cells[rowData, colUsuarioCreacion].Value = item.Faremusucreacion;
                ws.Cells[rowData, colFechaCreacion].Value = item.FechaCreacionDesc;
                ws.Cells[rowData, colUsuarioModificacion].Value = item.Faremusumodificacion;
                ws.Cells[rowData, colFechaModificacion].Value = item.FechaModificacionDesc;
                ws.Cells[rowData, colCorreosAsociados].Value = item.CantidadCorreos;
                ws.Cells[rowData, colEstado].Value = item.FaremEstadoDesc;

                if (item.Faremestado == "X")
                {
                    servFormato.CeldasExcelColorFondo(ws, rowData, colNombre, rowData, colEstado, "#FFDDDD");
                }

                rowData++;
            }

            if (!listaAreasTotales.Any()) rowData++;

            //Estilos registros
            servFormato.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colNombre, rowData - 1, colEstado, "Calibri", 8);
            servFormato.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colNombre, rowData - 1, colEstado, "Centro");
            servFormato.BorderCeldas2(ws, rowIniTabla + 1, colNombre, rowData - 1, colEstado);
            servFormato.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colNombre, rowData - 1, colEstado, "Centro");

            #endregion

            //filter           
            ws.Cells[rowIniTabla, colNombre, rowData, colEstado].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        /// <summary>
        /// Devuelve todos los usuario de cierto rol
        /// </summary>
        /// <param name="rolcode"></param>
        /// <returns></returns>
        public List<FwUserrolDTO> ObtenerUsuarioPorRol(int rolcode)
        {
            List<FwUserrolDTO> lstSalida = new List<FwUserrolDTO>();
            lstSalida = FactorySic.GetFwUserrolRepository().GetByRol(rolcode.ToString());

            return lstSalida;
        }

        public string ValidarAreaRepetida(string area)
        {
            string mensaje = "";
            var listaAreasBD = ListFtExtCorreoareas();

            var repetido = listaAreasBD.Find(x => x.Faremnombre.Trim() == area.Trim() && x.Faremestado == ConstantesFichaTecnica.EstadoStrActivo);
            if (repetido != null)
                mensaje = "El nombre del Área COES ingresado ya existe";

            return mensaje;
        }

        public string ValidarCorreosVacios(List<string> listaCorreos)
        {
            string salida = "";
            List<string> listaCorreosVacios = new List<string>();
            foreach (string correo in listaCorreos)
            {
                if (correo.Trim() == "")
                {
                    listaCorreosVacios.Add(correo);
                }
            }

            if (listaCorreosVacios.Any())
                salida = "<p>El campo Correos Electrónicos contiene correos vacios, corregir. Para ello escribir un correo válido y presionar Enter para añadirlo</p>";


            return salida;
        }

        public string ValidarCorreosOtrasAreas(List<string> listaCorreos, int faremcodi)
        {
            string mensaje = "";
            List<string> listaCorreosInvalidos = new List<string>();

            var listadoCorreosAreas = ListFtExtCorreoareadets().Where(x => x.Faremcodi != faremcodi && x.Faremdestado == "A").ToList();
            //quitar el área de Administración F.T.
            listadoCorreosAreas = listadoCorreosAreas.Where(x => x.Faremcodi != 1).ToList();


            string htmlCorreos = "";
            foreach (string correo in listaCorreos)
            {
                var existeCorreo = listadoCorreosAreas.Find(x => x.Faremdemail.Trim() == correo.Trim());

                if (existeCorreo != null)
                {
                    listaCorreosInvalidos.Add(correo);
                    htmlCorreos += "<li>" + correo + "</li>";
                }
            }

            if (listaCorreosInvalidos.Any())
                mensaje = "<p>El campo Correos Relacionados contiene correos asignados en otras áreas, corregir.</p>" + htmlCorreos;


            return mensaje;
        }

        #endregion

        #region Asignación Areas

        #region Asignación Area Item

        public void ListarRelaciones(List<FtFictecItemDTO> listaAllItems)
        {
            //obtener toda la lista de activos
            var listaRelacion = ListFtExtRelareaitemcfgs().Where(x => x.Friaestado == "A");

            var lista = listaAllItems.Where(x => x.Ftittipoitem == 0).ToList();
            foreach (var item in lista)
            {
                //obtener valores de areas por cada item
                var listaXItem = listaRelacion.Where(X => X.Ftitcodi == item.Ftitcodi).ToList();

                if (listaXItem.Any())
                    item.ListaAreasXItem = listaXItem;
            }

            //return listaAllItems;
        }

        public void GuardarRelacionAreaItem(List<FtExtRelareaitemcfgDTO> listaRelacionesGuardar, int fteqcodi, List<string> lstCorreosAdminFT, string usuario)
        {
            List<FtExtRelareaitemcfgDTO> lstAGuardar = new List<FtExtRelareaitemcfgDTO>();
            List<FtExtRelareaitemcfgDTO> lstAActualizar = new List<FtExtRelareaitemcfgDTO>();
            List<FtExtRelareaitemcfgDTO> lstABaja = new List<FtExtRelareaitemcfgDTO>();
            List<FTNotificacionCambio> lstDiferencias = new List<FTNotificacionCambio>();
            FtFictecXTipoEquipoDTO ft = GetFichaTecnica(fteqcodi);

            //obtener  lista relacion bd
            var listaRelacionesBD = ListFtExtRelareaitemcfgs().ToList();

            var listaAreas = ListarAreaCorreos();
            foreach (var item in listaRelacionesGuardar)
                FormatearFtExtRelareaitemcfg(item, listaAreas);

            foreach (var listaAgrup in listaRelacionesGuardar.GroupBy(x => x.Ftitcodi))
            {
                // obtener lista de relaciones x item de BD
                var lstRelacionXItemBD = listaRelacionesBD.Where(x => x.Ftitcodi == listaAgrup.Key).ToList();

                var lstRelaciones = listaAgrup.ToList();
                var listaRelacion = lstRelaciones.Select(x => x.Faremcodi).Distinct().ToList();

                // EXISTEN EN BD Y ESTAN EN LISTA A GUARDAR ()
                var listRelacionExisten = lstRelacionXItemBD.Where(x => listaRelacion.Contains(x.Faremcodi)).ToList();

                // EXISTEN EN BD Y NO ESTAN EN LISTA A GUARDAR (YA NO EXISTEN)
                var lstIdsExisten = listRelacionExisten.Select(x => x.Faremcodi).Distinct().ToList();
                var listRelacionNoExisten = lstRelacionXItemBD.Where(x => !lstIdsExisten.Contains(x.Faremcodi)).ToList();

                // NO EXISTEN EN BD (NUEVOS)
                var lstIdsBd = lstRelacionXItemBD.Select(x => x.Faremcodi).Distinct().ToList();
                var listRelacionpNuevas = lstRelaciones.Where(x => !lstIdsBd.Contains(x.Faremcodi)).ToList();

                //Lista Nombres de áreas para el Ftitcodi
                List<string> listaAntes = lstRelacionXItemBD.Where(x => x.Friaestado == "A").Select(x => x.NombreArea).ToList();
                List<string> lstAreaNueva = new List<string>();
                bool tieneCambio = false;

                //existen en la BD, pero puede que esté en baja, entonces solamente lo activamos
                foreach (FtExtRelareaitemcfgDTO reg in listRelacionExisten)
                {
                    var rela = lstRelaciones.Find(x => x.Faremcodi == reg.Faremcodi);
                    if (rela != null && reg.Friaestado == "B")
                    {
                        reg.Friaestado = "A";
                        reg.Friausumodificacion = usuario;
                        reg.Friafecmodificacion = DateTime.Now;

                        lstAActualizar.Add(reg);

                        //hay cambio porque se actualizan los estados de las áreas (se activan)
                        tieneCambio = true;
                    }
                }

                foreach (FtExtRelareaitemcfgDTO reg in listRelacionpNuevas)
                {
                    reg.Friaestado = "A";
                    reg.Friausucreacion = usuario;
                    reg.Friafeccreacion = DateTime.Now;

                    //hay cambio porque se agregan nuevas áreas
                    tieneCambio = true;
                    lstAreaNueva.Add(reg.NombreArea);
                }
                lstAGuardar.AddRange(listRelacionpNuevas);

                // dar de baja (YA NO EXISTE RELACIÓN)
                foreach (FtExtRelareaitemcfgDTO reg in listRelacionNoExisten)
                {
                    if (reg.Friaestado == "A") //solo si está activo
                    {
                        reg.Friaestado = "B";
                        reg.Friausumodificacion = usuario;
                        reg.Friafecmodificacion = DateTime.Now;

                        //hay cambio porque se actualizan los estados de las áreas (se dan baja)
                        tieneCambio = true;
                    }
                }
                lstABaja.AddRange(listRelacionNoExisten);

                //notifiación
                if (tieneCambio)
                {
                    //obtiene solo las áreas activas después de las modificaciones de estados.
                    List<string> listaDespues = lstRelacionXItemBD.Where(x => x.Friaestado == "A").Select(x => x.NombreArea).ToList();
                    listaDespues.AddRange(lstAreaNueva);

                    FTNotificacionCambio cambio = new FTNotificacionCambio();
                    cambio.Codigo = ft.Fteqcodi;
                    cambio.TipoFicha = ft.OrigenTipoDesc;
                    cambio.NombreFicha = ft.Fteqnombre;
                    cambio.Parametro = lstRelaciones.First().NombrePropiedad;
                    cambio.ValAntes = string.Join(",", listaAntes);
                    cambio.ValDespues = string.Join(",", listaDespues);
                    cambio.Usuario = usuario;
                    cambio.Fecha = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaFull);
                    lstDiferencias.Add(cambio);
                }
            }

            if (lstAGuardar.Any() || lstAActualizar.Any() || lstABaja.Any())
            {
                ft.Ftequsumodificacionasig = usuario;
                ft.Fteqfecmodificacionasig = DateTime.Now;
            }

            GuardarActualizarRelacionAreaItem(lstAGuardar, lstAActualizar, lstABaja, ft);

            // obtener ficha técnica de ficha maestra
            var fichaPrincipal = GetFichaMaestraPrincipal(ConstantesFichaTecnica.FichaMaestraPortal);
            var listaFictecdetXfm = ListarAllFichaTecnicaByMaestra(fichaPrincipal.Fteccodi);
            var fichaPerteneceMaestra = listaFictecdetXfm.Find(x => x.Fteqcodi == fteqcodi);

            if (lstDiferencias.Any() && fichaPerteneceMaestra != null) // pertenece a la maestra oficial
            {
                NotificarCambiosEnAsignacionAreasFT(lstDiferencias, lstCorreosAdminFT);
            }
        }

        private void GuardarActualizarRelacionAreaItem(List<FtExtRelareaitemcfgDTO> lstAGuardar, List<FtExtRelareaitemcfgDTO> lstAActualizar, List<FtExtRelareaitemcfgDTO> lstABaja, FtFictecXTipoEquipoDTO fichaTecnica)
        {
            try
            {

                //guardar nuevos registros
                foreach (var reg in lstAGuardar)
                {
                    SaveFtExtRelareaitemcfg(reg);
                }

                //Actualiza filas
                foreach (var reg in lstAActualizar)
                {
                    UpdateFtExtRelareaitemcfg(reg);
                }

                //Actualiza filas baja
                foreach (var reg in lstABaja)
                {
                    UpdateFtExtRelareaitemcfg(reg);
                }

                if (lstAGuardar.Any() || lstAActualizar.Any() || lstABaja.Any())
                {
                    //actualizar campos de auditoria de asignación parámetro
                    UpdateFichaTecnica(fichaTecnica);
                }

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }


        /// <summary>
        /// Envia correo de notificacion de cambios
        /// </summary>
        /// <param name="lstDiferencias"></param>
        /// <param name="lstCorreosAdminFT"></param>
        public void NotificarCambiosEnAsignacionAreasFT(List<FTNotificacionCambio> lstDiferencias, List<string> lstCorreosAdminFT)
        {
            try
            {
                SiPlantillacorreoDTO plantilla = new SiPlantillacorreoDTO();
                plantilla.Plantasunto = "Notificación de Cambios Administración de Correos Areas";
                plantilla.PlanticorreoFrom = "webapp@coes.org.pe";

                //ENVIAR CORREO
                if (lstCorreosAdminFT.Count > 0)
                {
                    //Envio de correo electronico
                    string from = plantilla.PlanticorreoFrom;
                    string to = string.Join(";", lstCorreosAdminFT);
                    string cc = plantilla.PlanticorreosCc;
                    string bcc = plantilla.PlanticorreosBcc;
                    string asunto = plantilla.Plantasunto;
                    string contenido = ObtenerContenidoNotificacionAsignacionAreaCambios(lstDiferencias);

                    List<string> listaTo = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(to, false);
                    List<string> listaCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(cc, false);
                    List<string> listaBCC = CorreoAppServicio.ListarCorreosValidoSegunAmbiente(bcc, true);

                    string asuntoSendEmail = CorreoAppServicio.GetTextoAsuntoSegunAmbiente(asunto);
                    COES.Base.Tools.Util.SendEmail(listaTo, listaCC, listaBCC, asuntoSendEmail, contenido, from);

                    //Guardar en SI_CORREO
                    var correo = new SiCorreoDTO();
                    //correo.Corrasunto = asunto;
                    correo.Corrasunto = plantilla.Plantasunto;
                    correo.Corrcontenido = contenido;
                    correo.Corrfechaenvio = DateTime.Now; ;
                    correo.Corrfrom = TipoPlantillaCorreo.MailFrom;
                    correo.Corrto = to;
                    correo.Corrcc = cc;
                    correo.Corrbcc = bcc;
                    correo.Enviocodi = null;
                    correo.Plantcodi = null;
                    servCorreo.SaveSiCorreo(correo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Obtiene la informacion del formato para el vigente del grupo de familia
        /// </summary>
        /// <param name="fteqcodi"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="catecodi"></param>
        /// <param name="usuario"></param>
        /// <param name="formatoAGuardar"></param>
        /// <param name="hayGuardado"></param>
        /// <returns></returns>
        public List<FtFictecItemDTO> ObtenerInformacionFEGuardadaDelFichaOficial(int fteqcodi)
        {
            List<FtFictecItemDTO> lstItemsActuales = new List<FtFictecItemDTO>();

            // obtener ficha técnica de ficha maestra
            var fichaPrincipal = GetFichaMaestraPrincipal(ConstantesFichaTecnica.FichaMaestraPortal);
            if (fichaPrincipal != null)
            {
                var listaFictecdetXfm = ListarAllFichaTecnicaByMaestra(fichaPrincipal.Fteccodi); // fichas oficiales
                var fichaActual = GetFichaTecnica(fteqcodi);

                List<FtFictecItemDTO> listaItems1, listaAllItems1;
                List<TreeItemFichaTecnica> listaItemsJson1;

                FTFiltroReporteExcel objFiltroActual = GetFichaYDatosXEquipoOModo(fteqcodi, -2, false, ConstantesFichaTecnica.INTRANET, DateTime.Today);
                ListarTreeItemsFichaTecnica(objFiltroActual, out listaAllItems1, out listaItems1, out listaItemsJson1);
                lstItemsActuales = listaAllItems1;
                ListarRelaciones(lstItemsActuales);


                //obtener ficha oficial del tipo de equipo
                FtFictecXTipoEquipoDTO fichaOficialXtipo = new FtFictecXTipoEquipoDTO();

                if (fichaActual.Famcodi != null) // familia
                    fichaOficialXtipo = listaFictecdetXfm.Find(x => x.Famcodi == fichaActual.Famcodi);
                else // categoria
                    fichaOficialXtipo = listaFictecdetXfm.Find(x => x.Catecodi == fichaActual.Catecodi);


                if (fichaOficialXtipo != null && fichaOficialXtipo.Fteqcodi > 0)
                {

                    //obtener datos de la ficha
                    List<FtFictecItemDTO> listaItems, listaAllItems;
                    List<TreeItemFichaTecnica> listaItemsJson;
                    FTFiltroReporteExcel objFiltro = GetFichaYDatosXEquipoOModo(fichaOficialXtipo.Fteqcodi, -2, false, ConstantesFichaTecnica.INTRANET, DateTime.Today);
                    ListarTreeItemsFichaTecnica(objFiltro, out listaAllItems, out listaItems, out listaItemsJson);
                    var lstAllItems = listaAllItems;

                    //obtener valores de areas por cada item
                    ListarRelaciones(lstAllItems);


                    //Reemplazo valores de los combos
                    var listaActual = lstItemsActuales.Where(x => x.Ftittipoitem == 0).ToList();
                    foreach (var regFila in listaActual)
                    {
                        //int ftitcodi = regFila.Ftitcodi;
                        //FtFictecItemDTO regFTItem = GetByIdFtFictecItem(ftitcodi);
                        int? ftpropcodiA = regFila.Ftpropcodi;
                        int? concepcodiA = regFila.Concepcodi;
                        int? propcodiA = regFila.Propcodi;

                        //Busco info en el vigente guardado en BD
                        FtFictecItemDTO objFilaVigente = lstAllItems.Find(x => x.Ftpropcodi == ftpropcodiA && x.Concepcodi == concepcodiA && x.Propcodi == propcodiA);

                        if (objFilaVigente != null)
                        {
                            regFila.ListaAreasXItem = objFilaVigente.ListaAreasXItem;
                        }
                    }
                }
                else
                {
                    throw new Exception("La Ficha Técnica no tiene una ficha oficial");
                }

            }

            return lstItemsActuales;
        }

        /// <summary>
        /// Devuelve el contenido para la notificacion
        /// </summary>
        /// <param name="lstDiferencias"></param>
        /// <returns></returns>
        public string ObtenerContenidoNotificacionAsignacionAreaCambios(List<FTNotificacionCambio> lstDiferencias)
        {
            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<p style='text-align: justify;'>&nbsp;</p>");
            strHtml.Append("<p>&nbsp;</p>");
            strHtml.Append("<p><span style='font-size: 13.3333px; text-align: justify;'>INFORME DE CAMBIOS EN ADMINISTRADOR DE CORREOS AREAS:</span></p>");
            strHtml.Append("<p>&nbsp;</p>");
            strHtml.Append("<table style='height: 73px; width: 1200px; border: 1px solid black;' border='1'>");
            strHtml.Append("<tbody>");
            strHtml.Append("<tr style='height: 26px; border: 1px solid black;'>");
            strHtml.Append("<td style='width: 44.4844px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>C&oacute;digo</span></strong></td>");
            strHtml.Append("<td style='width: 137.438px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Tipo de Ficha T&eacute;cnica</span></strong></td>");
            strHtml.Append("<td style='width: 138.547px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Nombre Ficha Oficial</span></strong></td>");
            strHtml.Append("<td style='width: 147.297px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Nombre Par&aacute;metro</span></strong></td>");
            strHtml.Append("<td style='width: 134.188px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Área Inical </span></strong></td>");
            strHtml.Append("<td style='width: 137.219px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Área Final </span></strong></td>");
            strHtml.Append("<td style='width: 116.219px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Usuario Modificaci&oacute;n</span></strong></td>");
            strHtml.Append("<td style='width: 116.391px; background-color: #0b3fdb; text-align: center; height: 26px; padding-top: 10px;'><strong><span style='color: #ffffff;'>Fecha Modificaci&oacute;n</span></strong></td>");
            strHtml.Append("</tr>");

            foreach (var item in lstDiferencias)
            {
                strHtml.Append("<tr style='height: 13px; border: 1px solid black;'>");
                strHtml.AppendFormat("<td style='width: 44.4844px; height: 13px; text-align: center;'>{0}</td>", item.Codigo);
                strHtml.AppendFormat("<td style='width: 137.438px; height: 13px; text-align: center;'>{0}</td>", item.TipoFicha);
                strHtml.AppendFormat("<td style='width: 138.547px; height: 13px; text-align: center;'>{0}</td>", item.NombreFicha);
                strHtml.AppendFormat("<td style='width: 147.297px; height: 13px; text-align: center;'>{0}</td>", item.Parametro);
                strHtml.AppendFormat("<td style='width: 134.188px; height: 13px; text-align: center;'>{0}</td>", item.ValAntes);
                strHtml.AppendFormat("<td style='width: 137.219px; height: 13px; text-align: center;'>{0}</td>", item.ValDespues);
                strHtml.AppendFormat("<td style='width: 116.219px; height: 13px; text-align: center;'>{0}</td>", item.Usuario);
                strHtml.AppendFormat("<td style='width: 116.391px; height: 13px; text-align: center;'>{0}</td>", item.Fecha);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            strHtml.Append("<p>&nbsp;</p>");
            strHtml.Append("<p><span style='font-size: 10pt; text-align: justify;'>Atentamente,</span></p>");
            strHtml.Append("<p><span style='font-size: 13.3333px; text-align: justify;'><img src='https://tse1.mm.bing.net/th?id=OIP.oZNQ2yuNL0bHvM147UD3HgAAAA&amp;pid=Api&amp;P=0' alt='Logo Coes' width='127' height='66' /></span></p>");
            strHtml.Append("<div style='color: #222222; font-family: Arial, Helvetica, sans-serif; font-size: small;'>&nbsp;</div>");

            return strHtml.ToString();
        }

        #endregion

        #region Asignación Area Requisito

        public void ListarRelAreaReq(List<FtExtEventoReqDTO> listaRequisitos)
        {
            List<FtExtRelAreareqDTO> ListaXRequisito = new List<FtExtRelAreareqDTO>();

            //obtener toda la lista de activos
            var listaRelacion = ListFtExtRelAreareqs().Where(x => x.Frraestado == "A").ToList();

            foreach (var item in listaRequisitos)
            {
                //obtener valores de areas por cada requisito
                var listaXItem = listaRelacion.Where(x => x.Fevrqcodi == item.Fevrqcodi).ToList();

                if (listaXItem.Any())
                {
                    item.ListaAreasXRequisito = new List<FtExtRelAreareqDTO>();

                    var listHidro = listaXItem.Where(x => x.Frraflaghidro == "S").ToList();//Lista Hidro
                    var listTermo = listaXItem.Where(x => x.Frraflagtermo == "S").ToList();//Lista Termo
                    var listEolico = listaXItem.Where(x => x.Frraflageolico == "S").ToList();//Lista Eólico
                    var listSolar = listaXItem.Where(x => x.Frraflagsolar == "S").ToList();//Lista Solar

                    item.ListaAreasXRequisitoHidro = listHidro.Select(x => x.Faremcodi).ToList(); //Ids areas para Hidro
                    item.ListaAreasXRequisitoTermo = listTermo.Select(x => x.Faremcodi).ToList(); //Ids areas para Termo
                    item.ListaAreasXRequisitoEolico = listEolico.Select(x => x.Faremcodi).ToList(); //Ids areas para Eolico
                    item.ListaAreasXRequisitoSolar = listSolar.Select(x => x.Faremcodi).ToList(); //Ids areas para Solar

                    item.ListaAreasXRequisito.AddRange(listHidro);
                    item.ListaAreasXRequisito.AddRange(listTermo);
                    item.ListaAreasXRequisito.AddRange(listEolico);
                    item.ListaAreasXRequisito.AddRange(listSolar);

                    item.ListaAreasXRequisito = item.ListaAreasXRequisito.Distinct().ToList();
                }
            }
        }


        public void GuardarRelacionAreaReq(List<FtExtRelAreareqDTO> listaRelaciones, string usuario)
        {
            List<int> listaAreasXReq = new List<int>();
            List<FtExtRelAreareqDTO> listaRelacionesGuardar = new List<FtExtRelAreareqDTO>();

            foreach (var item in listaRelaciones)
            {
                List<int> hidro = item.Strflaghidro != null ? item.Strflaghidro.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();
                List<int> termo = item.Strflagtermo != null ? item.Strflagtermo.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();
                List<int> eolico = item.Strflageolico != null ? item.Strflageolico.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();
                List<int> solar = item.Strflagsolar != null ? item.Strflagsolar.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();

                listaAreasXReq.AddRange(hidro);
                listaAreasXReq.AddRange(termo);
                listaAreasXReq.AddRange(eolico);
                listaAreasXReq.AddRange(solar);

                listaAreasXReq = listaAreasXReq.Distinct().ToList();

                foreach (var reg in listaAreasXReq)
                {
                    FtExtRelAreareqDTO objGuardar = new FtExtRelAreareqDTO();
                    objGuardar.Fevrqcodi = item.Fevrqcodi;
                    objGuardar.Faremcodi = reg;
                    objGuardar.Frraestado = "A";
                    objGuardar.Frraflaghidro = hidro.Contains(reg) ? "S" : "N";
                    objGuardar.Frraflagtermo = termo.Contains(reg) ? "S" : "N";
                    objGuardar.Frraflageolico = eolico.Contains(reg) ? "S" : "N";
                    objGuardar.Frraflagsolar = solar.Contains(reg) ? "S" : "N";

                    listaRelacionesGuardar.Add(objGuardar);
                }
            }


            List<FtExtRelAreareqDTO> lstAGuardar = new List<FtExtRelAreareqDTO>();
            List<FtExtRelAreareqDTO> lstAActualizar = new List<FtExtRelAreareqDTO>();
            List<FtExtRelAreareqDTO> lstABaja = new List<FtExtRelAreareqDTO>();

            //obtener  lista relacion bd
            var listaRelacionesBD = ListFtExtRelAreareqs().Where(x => x.Frraestado == "A").ToList();

            foreach (var listaAgrup in listaRelacionesGuardar.GroupBy(x => x.Fevrqcodi))
            {
                // obtener lista de relaciones x item de BD
                var lstRelacionXItemBD = listaRelacionesBD.Where(x => x.Fevrqcodi == listaAgrup.Key).ToList();

                var lstRelaciones = listaAgrup.ToList();
                var listaIdsRel = lstRelaciones.Select(x => x.Faremcodi).Distinct().ToList();

                // EXISTEN EN BD Y ESTAN EN LISTA A GUARDAR (pero podrian modificarse sus flag)
                var listRelacionExisten = lstRelacionXItemBD.Where(x => listaIdsRel.Contains(x.Faremcodi)).ToList();

                // EXISTEN EN BD Y NO ESTAN EN LISTA A GUARDAR (YA NO EXISTEN)
                var lstIdsExisten = listRelacionExisten.Select(x => x.Faremcodi).Distinct().ToList();
                var listRelacionNoExisten = lstRelacionXItemBD.Where(x => !lstIdsExisten.Contains(x.Faremcodi)).ToList();
                lstABaja.AddRange(listRelacionNoExisten);

                // NO EXISTEN EN BD (NUEVOS)
                var lstIdsBd = lstRelacionXItemBD.Select(x => x.Faremcodi).Distinct().ToList();
                var listRelacionpNuevas = lstRelaciones.Where(x => !lstIdsBd.Contains(x.Faremcodi)).ToList();


                foreach (FtExtRelAreareqDTO reg in listRelacionExisten)
                {
                    var rela = lstRelaciones.Find(x => x.Faremcodi == reg.Faremcodi);
                    if (rela != null)
                    {
                        // si hay cambio en alguno de los flag se actualiza la entidad
                        if (rela.Frraflaghidro != reg.Frraflaghidro ||
                            rela.Frraflagtermo != reg.Frraflagtermo ||
                            rela.Frraflageolico != reg.Frraflageolico ||
                            rela.Frraflagsolar != reg.Frraflagsolar)
                        {
                            reg.Frraflaghidro = rela.Frraflaghidro;
                            reg.Frraflagtermo = rela.Frraflagtermo;
                            reg.Frraflageolico = rela.Frraflageolico;
                            reg.Frraflagsolar = rela.Frraflagsolar;
                            reg.Frrausumodificacion = usuario;
                            reg.Frrafecmodificacion = DateTime.Now;

                            lstAActualizar.Add(reg);
                        }
                    }
                }
                //lstAActualizar.AddRange(listRelacionExisten);

                // dar de baja (YA NO EXISTE RELACIÓN)
                foreach (FtExtRelAreareqDTO reg in listRelacionNoExisten)
                {
                    reg.Frraestado = "B";
                    reg.Frrausumodificacion = usuario;
                    reg.Frrafecmodificacion = DateTime.Now;
                }
                lstABaja.AddRange(listRelacionNoExisten);


                foreach (FtExtRelAreareqDTO reg in listRelacionpNuevas)
                {
                    reg.Frraestado = "A";
                    reg.Frrausucreacion = usuario;
                    reg.Frrafeccreacion = DateTime.Now;
                }
                lstAGuardar.AddRange(listRelacionpNuevas);

            }

            if (lstAGuardar.Any() || lstAActualizar.Any() || lstABaja.Any())
            {
                // obtener evento para actualizar campos de auditoria de asignación
                var relacion = listaRelaciones.First();
                var requsito = GetByIdFtExtEventoReq(relacion.Fevrqcodi);
                FtExtEventoDTO evento = GetByIdFtExtEvento(requsito.Ftevcodi);

                evento.Ftevusumodificacionasig = usuario;
                evento.Ftevfecmodificacionasig = DateTime.Now;

                GuardarActualizarRelacionAreaReq(lstAGuardar, lstAActualizar, lstABaja, evento);
            }
        }

        private void GuardarActualizarRelacionAreaReq(List<FtExtRelAreareqDTO> lstAGuardar, List<FtExtRelAreareqDTO> lstAActualizar, List<FtExtRelAreareqDTO> lstABaja, FtExtEventoDTO evento)
        {
            try
            {

                //guardar nuevos registros
                foreach (var reg in lstAGuardar)
                {
                    SaveFtExtRelAreareq(reg);
                }

                //Actualiza filas
                foreach (var reg in lstAActualizar)
                {
                    UpdateFtExtRelAreareq(reg);
                }

                //Actualiza filas baja
                foreach (var reg in lstABaja)
                {
                    UpdateFtExtRelAreareq(reg);
                }

                if (lstAGuardar.Any() || lstAActualizar.Any() || lstABaja.Any())
                {
                    //actualizar campos de auditoria de asignación parámetro
                    UpdateFtExtEvento(evento);
                }

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Asignación Area Baja MO
        public FtExtEventoReqDTO ListarRelacionesBajaMO()
        {
            FtExtEventoDTO evento = GetByIdFtExtEvento(ConstantesFichaTecnica.EventoBajaMO);

            //obtener requisito de baja Modo operación
            FtExtEventoReqDTO reqBajaMo = GetByIdFtExtEventoReq(ConstantesFichaTecnica.RequisitoBajaMO);
            reqBajaMo.UsuarioModificacion = evento.Ftevusumodificacionasig ?? string.Empty;
            reqBajaMo.FechaModificacion = evento.Ftevfecmodificacionasig != null ? evento.Ftevfecmodificacionasig.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;

            //obtener lista relación areas por requisito
            reqBajaMo.ListaAreasXRequisito = ListFtExtRelAreareqs().Where(x => x.Fevrqcodi == ConstantesFichaTecnica.RequisitoBajaMO && x.Frraestado == "A").ToList();

            return reqBajaMo;
        }

        public void GuardarRelAreaBajaMO(string areas, string usuario)
        {
            List<FtExtRelAreareqDTO> listaRelacionesGuardar = new List<FtExtRelAreareqDTO>();

            List<int> listaIdsAreas = areas.Split(',').Select(x => int.Parse(x)).ToList();
            foreach (var reg in listaIdsAreas)
            {
                FtExtRelAreareqDTO objGuardar = new FtExtRelAreareqDTO();
                objGuardar.Fevrqcodi = ConstantesFichaTecnica.RequisitoBajaMO;
                objGuardar.Faremcodi = reg;
                objGuardar.Frraestado = "A";

                listaRelacionesGuardar.Add(objGuardar);
            }

            List<FtExtRelAreareqDTO> lstAGuardar = new List<FtExtRelAreareqDTO>();
            List<FtExtRelAreareqDTO> lstAActualizar = new List<FtExtRelAreareqDTO>();
            List<FtExtRelAreareqDTO> lstABaja = new List<FtExtRelAreareqDTO>();

            //obtener  lista relacion bd
            var listaRelacionesBD = ListFtExtRelAreareqs();
            //var listaRelacionesBD = ListFtExtRelAreareqs().Where(x => x.Frraestado == "A").ToList();

            // obtener lista de relaciones x Baja modo operación
            var lstRelacionXItemBD = listaRelacionesBD.Where(x => x.Fevrqcodi == ConstantesFichaTecnica.RequisitoBajaMO).ToList();

            var listaRelacion = listaRelacionesGuardar.Select(x => x.Faremcodi).Distinct().ToList();
            // EXISTEN EN BD Y ESTAN EN LISTA A GUARDAR ()
            var listRelacionExisten = lstRelacionXItemBD.Where(x => listaRelacion.Contains(x.Faremcodi)).ToList();

            // EXISTEN EN BD Y NO ESTAN EN LISTA A GUARDAR (YA NO EXISTEN)
            var lstIdsExisten = listRelacionExisten.Select(x => x.Faremcodi).Distinct().ToList();
            var listRelacionNoExisten = lstRelacionXItemBD.Where(x => !lstIdsExisten.Contains(x.Faremcodi)).ToList();

            // NO EXISTEN EN BD (NUEVOS)
            var lstIdsBd = lstRelacionXItemBD.Select(x => x.Faremcodi).Distinct().ToList();
            var listRelacionpNuevas = listaRelacionesGuardar.Where(x => !lstIdsBd.Contains(x.Faremcodi)).ToList();


            //existen en la BD, pero puede que esté en baja, entonces solamente lo activamos
            foreach (FtExtRelAreareqDTO reg in listRelacionExisten)
            {
                var rela = listaRelacionesGuardar.Find(x => x.Faremcodi == reg.Faremcodi);
                if (rela != null && reg.Frraestado == "B")
                {
                    reg.Frraestado = "A";
                    reg.Frrausumodificacion = usuario;
                    reg.Frrafecmodificacion = DateTime.Now;

                    lstAActualizar.Add(reg);
                }
            }

            foreach (FtExtRelAreareqDTO reg in listRelacionpNuevas)
            {
                reg.Frraestado = "A";
                reg.Frrausucreacion = usuario;
                reg.Frrafeccreacion = DateTime.Now;
            }
            lstAGuardar.AddRange(listRelacionpNuevas);

            // dar de baja (YA NO EXISTE RELACIÓN)
            foreach (FtExtRelAreareqDTO reg in listRelacionNoExisten)
            {
                if (reg.Frraestado == "A") //solo si está activo
                {
                    reg.Frraestado = "B";
                    reg.Frrausumodificacion = usuario;
                    reg.Frrafecmodificacion = DateTime.Now;
                }
            }
            lstABaja.AddRange(listRelacionNoExisten);

            if (lstAGuardar.Any() || lstAActualizar.Any() || lstABaja.Any())
            {
                // obtener evento para actualizar campos de auditoria de asignación
                FtExtEventoDTO evento = GetByIdFtExtEvento(ConstantesFichaTecnica.EventoBajaMO);

                evento.Ftevusumodificacionasig = usuario;
                evento.Ftevfecmodificacionasig = DateTime.Now;

                GuardarActualizarRelacionAreaReq(lstAGuardar, lstAActualizar, lstABaja, evento);
            }
        }

        #endregion

        #endregion

        #region Bloque Revision

        /// <summary>
        /// Devuelve la data de la revision para los parametros
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="fteeqcodi"></param>
        /// <param name="interfaz"></param>
        /// <param name="accion"></param>
        /// <returns></returns>
        public List<FTDatoRevisionParametrosAEnvio> ObtenerDatosRevisionParametrosAFT(int fteeqcodi, int interfaz)
        {
            List<FTDatoRevisionParametrosAEnvio> lstSalida = new List<FTDatoRevisionParametrosAEnvio>();

            //Hallo opciones para la columna estados
            FtExtEnvioEqDTO envioEq = GetByIdFtExtEnvioEq(fteeqcodi);

            int versionRevision = envioEq.Ftevercodi;
            FtExtEnvioDTO envio = GetByIdFtExtEnvio(envioEq.Ftenvcodi);

            //Extranet cuando todavia no tiene habilitado la Revisión
            if (interfaz == ConstantesFichaTecnica.EXTRANET &&
                (envio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud || envio.Estenvcodi == ConstantesFichaTecnica.EstadoCancelado))
                return new List<FTDatoRevisionParametrosAEnvio>();

            int accion = interfaz == ConstantesFichaTecnica.EXTRANET ? envio.TipoAccionExtranet : envio.TipoAccionIntranet;
            int numColumnaEditada = 0;
            if (interfaz == ConstantesFichaTecnica.EXTRANET) numColumnaEditada = 2;
            else
            {
                if (envio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud) numColumnaEditada = 1;
                else numColumnaEditada = 3;
            }

            int estadoCarpetaEnvio = envio.Estenvcodi;
            int etapaEnvio = envio.Ftetcodi;
            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosSegunInterfazYEstado(interfaz, estadoCarpetaEnvio, etapaEnvio);

            //Hallo la data de la revision
            List<FtExtEnvioDatoDTO> listaDatoAllXEqBD = GetByCriteriaFtExtEnvioDatos(fteeqcodi.ToString());
            List<int> lstFtedatcodis = listaDatoAllXEqBD.Select(x => x.Ftedatcodi).Distinct().ToList();
            List<int> lstFitcfgcodis = listaDatoAllXEqBD.Select(x => x.Fitcfgcodi).Distinct().ToList();
            List<FtFictecItemDTO> total = FactorySic.GetFtFictecItemRepository().List();

            if (lstFtedatcodis.Any())
            {
                string strFitCfgcodis = string.Join(",", lstFitcfgcodis);
                List<FtExtItemcfgDTO> lstItemsConf = strFitCfgcodis != "" ? FactorySic.GetFtExtItemcfgRepository().ListarPorIds(strFitCfgcodis) : new List<FtExtItemcfgDTO>();

                List<int> lstFtitcodis = lstItemsConf.Select(x => x.Ftitcodi).Distinct().ToList();
                string strFtitcodis = string.Join(",", lstFtitcodis);
                List<FtFictecItemDTO> lstFictecitem = strFtitcodis != "" ? FactorySic.GetFtFictecItemRepository().ListarPorIds(strFtitcodis) : new List<FtFictecItemDTO>();

                string strFtedatcodis = string.Join(",", lstFtedatcodis);
                List<FtExtEnvioRevisionDTO> lstDatosRev = strFtedatcodis != "" ? GetByCriteriaFtExtEnvioRevisionsXVersionYDato(versionRevision) : new List<FtExtEnvioRevisionDTO>();
                lstDatosRev = lstDatosRev.Where(x => lstFtedatcodis.Contains(x.Ftedatcodi)).ToList(); //solo considerar las revisiones del equipo

                //si el equipo fue agregado en carpeta "observado" entonces no debe mostrar bloque amarillo
                if (interfaz == ConstantesFichaTecnica.EXTRANET && !lstDatosRev.Any()) return new List<FTDatoRevisionParametrosAEnvio>();

                List<int> lstFtrevcodis = lstDatosRev.Select(x => x.Ftrevcodi).Distinct().ToList();
                string strFtrevcodis = string.Join(",", lstFtrevcodis);

                List<FtExtEnvioArchivoDTO> lstArchivosXRevision = ListByRevisionFtExtEnvioArchivos(strFtrevcodis);

                foreach (var envioDato in listaDatoAllXEqBD)
                {
                    //obtener configuración
                    FtExtItemcfgDTO objIConf = lstItemsConf.Find(x => x.Fitcfgcodi == envioDato.Fitcfgcodi);
                    if (objIConf != null)
                    {
                        int miFtitcodi = objIConf.Ftitcodi;
                        string numeral = ObtenerNumeralPorFtitcodi("", miFtitcodi, total);

                        FtFictecItemDTO objItem = lstFictecitem.Find(x => x.Ftitcodi == miFtitcodi);

                        bool filaRevisable = envioDato.EsFilaRevisableIntranet;

                        //Lleno la data
                        FTDatoRevisionParametrosAEnvio objRevisionFila = new FTDatoRevisionParametrosAEnvio();

                        objRevisionFila.NumcolumnaEditada = numColumnaEditada;
                        objRevisionFila.Numeral = numeral;
                        objRevisionFila.Elemento = envioEq.Nombreelemento;
                        objRevisionFila.FilaRevisable = filaRevisable;
                        objRevisionFila.Fteeqcodi = envioDato.Fteeqcodi;
                        objRevisionFila.Ftedatcodi = envioDato.Ftedatcodi;
                        objRevisionFila.Fitcfgcodi = envioDato.Fitcfgcodi;
                        objRevisionFila.Ftitcodi = miFtitcodi;
                        objRevisionFila.Equicodi = envioEq.Equicodi;
                        objRevisionFila.Grupocodi = envioEq.Grupocodi;
                        objRevisionFila.Propcodi = objItem.Propcodi;
                        objRevisionFila.Concepcodi = objItem.Concepcodi;
                        objRevisionFila.TieneRevision = false;

                        FtExtEnvioRevisionDTO fila = lstDatosRev.Find(x => x.Ftedatcodi == envioDato.Ftedatcodi);

                        if (fila != null)
                        {
                            objRevisionFila.TieneRevision = filaRevisable;
                            objRevisionFila.ValObsCoes = fila.Ftrevhtmlobscoes ?? "";
                            objRevisionFila.ValRptaAgente = fila.Ftrevhtmlrptaagente ?? "";
                            objRevisionFila.ValRptaCoes = fila.Ftrevhtmlrptacoes ?? "";
                            if (numColumnaEditada == 1) objRevisionFila.MsgColumnaEditada = objRevisionFila.ValObsCoes;
                            if (numColumnaEditada == 2) objRevisionFila.MsgColumnaEditada = objRevisionFila.ValRptaAgente;
                            if (numColumnaEditada == 3) objRevisionFila.MsgColumnaEditada = objRevisionFila.ValRptaCoes;
                            objRevisionFila.ValEstado = fila.Ftrevestado != null ? fila.Ftrevestado.Trim() : "";
                            objRevisionFila.ValEstadoDesc = ObtenerDescripcionEstadoRev(objRevisionFila.ValEstado);
                            objRevisionFila.IdValorEstado = objRevisionFila.ValEstado;
                            objRevisionFila.ColorValEstado = ObtenerColorTextoEstado(fila.Ftrevestado);

                            //busco los archivos de revisiones
                            List<FtExtEnvioArchivoDTO> lstArchivosFila = lstArchivosXRevision.Where(x => x.Ftrevcodi == fila.Ftrevcodi).ToList();

                            objRevisionFila.ListaArchivosObsCoes = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevisionObsCOES).ToList();
                            objRevisionFila.ListaArchivosRptaAgente = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevisionRptaAgente).ToList();
                            objRevisionFila.ListaArchivosRptaCoes = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevisionRptaCOES).ToList();
                        }

                        objRevisionFila.ListaEstados = new List<FTOpcionEstado>();
                        objRevisionFila.FilaBloqueada = true;
                        if (filaRevisable)
                        {
                            objRevisionFila.ListaEstados = lstEstados;
                            objRevisionFila.FilaBloqueada = VerificarFilaBloqueada(interfaz, estadoCarpetaEnvio, etapaEnvio, filaRevisable, fila, accion);
                        }

                        if (!objRevisionFila.FilaBloqueada)
                        {
                            objRevisionFila.CeldaObsCoesEstaBloqueada = EsCeldaObsCoesBloqueada(interfaz, estadoCarpetaEnvio);
                            objRevisionFila.CeldaRptaAgenteEstaBloqueada = EsCeldaRptaAgenteBloqueada(interfaz, estadoCarpetaEnvio);
                            objRevisionFila.CeldaRptaCoesEstaBloqueada = EsCeldaRptaCoesBloqueada(interfaz, estadoCarpetaEnvio);
                            objRevisionFila.CeldaEstadoEstaBloqueada = EsCeldaEstadoBloqueada(interfaz, estadoCarpetaEnvio);
                        }

                        lstSalida.Add(objRevisionFila);
                    }
                }
            }

            return lstSalida;
        }

        public string ObtenerNumeralPorFtitcodi(string cad, int miFtitcodi, List<FtFictecItemDTO> total)
        {
            //string salida = "";

            FtFictecItemDTO obj = total.Find(x => x.Ftitcodi == miFtitcodi);

            if (obj != null)
            {
                if (obj.Ftitorden != null)
                {
                    if (obj.Ftitpadre != -1)
                    {
                        cad = ObtenerNumeralPorFtitcodi(cad, obj.Ftitpadre, total) + "." + obj.Ftitorden.ToString();
                    }
                    else
                    {
                        cad = obj.Ftitorden != null ? obj.Ftitorden.ToString() : "";
                    }




                }

            }

            return cad;
        }
        /// <summary>
        /// Verifica si la primera columna esta activa o bloqueada
        /// </summary>
        /// <param name="interfaz"></param>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        public bool EsCeldaObsCoesBloqueada(int interfaz, int estenvcodi)
        {
            bool salida = true;

            //solo en solicitud de intranet es editable
            if (interfaz == ConstantesFichaTecnica.INTRANET)
            {
                switch (estenvcodi)
                {
                    case ConstantesFichaTecnica.EstadoSolicitud:
                        salida = false;
                        break;
                }
            }

            return salida;
        }

        /// <summary>
        /// Verifica si la 2da columna es editable o no
        /// </summary>
        /// <param name="interfaz"></param>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        public bool EsCeldaRptaAgenteBloqueada(int interfaz, int estenvcodi)
        {
            bool salida = true;

            //solo en Subsanacion de extranet es editable
            if (interfaz == ConstantesFichaTecnica.EXTRANET)
            {
                switch (estenvcodi)
                {
                    case ConstantesFichaTecnica.EstadoObservado:
                        salida = false;
                        break;
                }
            }

            return salida;
        }

        /// <summary>
        /// Verifica si la tercera columna esta activa o bloqueada
        /// </summary>
        /// <param name="interfaz"></param>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        public bool EsCeldaRptaCoesBloqueada(int interfaz, int estenvcodi)
        {
            bool salida = true;

            //solo en subsanacion de intranet es editable
            if (interfaz == ConstantesFichaTecnica.INTRANET)
            {
                switch (estenvcodi)
                {
                    case ConstantesFichaTecnica.EstadoSubsanacionObs:
                        salida = false;
                        break;
                }
            }

            return salida;
        }

        /// <summary>
        /// Estado no es bloqueado
        /// </summary>
        /// <param name="interfaz"></param>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        public bool EsCeldaEstadoBloqueada(int interfaz, int estenvcodi)
        {
            bool salida = false;



            return salida;
        }

        /// <summary>
        /// Devuelve la descripcion del estado de la revision
        /// </summary>
        /// <param name="estadoRev"></param>
        /// <returns></returns>
        public string ObtenerDescripcionEstadoRev(string estadoRev)
        {
            string salida = "";

            if (estadoRev != null)
            {
                switch (estadoRev.Trim())
                {
                    case ConstantesFichaTecnica.OpcionConforme: salida = "Conforme"; break;
                    case ConstantesFichaTecnica.OpcionNoSubsanado: salida = "No Subsanado"; break;
                    case ConstantesFichaTecnica.OpcionSubsanado: salida = "Subsanado"; break;
                    case ConstantesFichaTecnica.OpcionObservado: salida = "Observado"; break;
                    case ConstantesFichaTecnica.OpcionDenegado: salida = "Denegado"; break;
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve el código del estado de la revision
        /// </summary>
        /// <param name="estadoDes"></param>
        /// <returns></returns>
        public string ObtenerCodigoEstado(string estadoDes)
        {
            string salida = "";

            if (estadoDes != null)
            {
                switch (estadoDes.Trim().ToUpper())
                {
                    case "CONFORME": salida = ConstantesFichaTecnica.OpcionConforme; break;
                    case "NO SUBSANADO": salida = ConstantesFichaTecnica.OpcionNoSubsanado; break;
                    case "SUBSANADO": salida = ConstantesFichaTecnica.OpcionSubsanado; break;
                    case "OBSERVADO": salida = ConstantesFichaTecnica.OpcionObservado; break;
                    case "DENEGADO": salida = ConstantesFichaTecnica.OpcionDenegado; break;
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve el color del texto de estado
        /// </summary>
        /// <param name="ftrevestado"></param>
        /// <returns></returns>
        public string ObtenerColorTextoEstado(string ftrevestado)
        {
            string salida = "#000000";

            if (ftrevestado != null)
            {
                switch (ftrevestado.Trim())
                {
                    case ConstantesFichaTecnica.OpcionConforme: salida = ConstantesFichaTecnica.ColorAzul; break;
                    case ConstantesFichaTecnica.OpcionNoSubsanado: salida = ConstantesFichaTecnica.ColorNaranja; break;
                    case ConstantesFichaTecnica.OpcionSubsanado: salida = ConstantesFichaTecnica.ColorVerde; break;
                    case ConstantesFichaTecnica.OpcionObservado: salida = ConstantesFichaTecnica.ColorRojo; break;
                    case ConstantesFichaTecnica.OpcionDenegado: salida = ConstantesFichaTecnica.ColorVioleta; break;
                }
            }

            return salida;
        }

        /// <summary>
        /// Verifica si la fila de revisión se bloquea a edicion (caso que dicha fila se coloco CONFORME desde intranet)
        /// </summary>
        /// <param name="interfaz"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="ftrevestado"></param>
        /// <returns></returns>
        public bool VerificarFilaBloqueada(int interfaz, int estenvcodi, int ftetcodi, bool filaRevisable, FtExtEnvioRevisionDTO objEnvRev, int accion)
        {
            if (!filaRevisable) return true;

            bool salida = false;
            string ftrevestado = objEnvRev != null ? objEnvRev.Ftrevestado : "";

            //Si la ventana esta en modo VER, bloqueo toda la fila
            if (accion == ConstantesFichaTecnica.AccionVer)
            {
                salida = true;
            }
            else
            {
                if (accion == ConstantesFichaTecnica.AccionNuevo || accion == ConstantesFichaTecnica.AccionEditar)
                {
                    if (interfaz == ConstantesFichaTecnica.INTRANET)
                    {
                        switch (estenvcodi)
                        {
                            case ConstantesFichaTecnica.EstadoSubsanacionObs:
                                salida = !filaRevisable;
                                break;
                            case ConstantesFichaTecnica.EstadoAprobado:
                                if (ftetcodi == ConstantesFichaTecnica.EtapaConexion)
                                {
                                    salida = true;
                                }
                                break;

                        }
                    }
                    else
                    {
                        if (interfaz == ConstantesFichaTecnica.EXTRANET)
                        {
                            switch (estenvcodi)
                            {
                                case ConstantesFichaTecnica.EstadoObservado:
                                    if (ftrevestado == ConstantesFichaTecnica.OpcionConforme)
                                    {
                                        salida = true;
                                    }
                                    break;

                            }
                        }
                    }
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve el listado de opciones a mostrar en la columna ESTADO
        /// </summary>
        /// <param name="interfaz"></param>
        /// <param name="estenvcodi"></param>
        /// <returns></returns>
        public List<FTOpcionEstado> ObtenerListaEstadosSegunInterfazYEstado(int interfaz, int estenvcodi, int etapaEnvio)
        {
            List<FTOpcionEstado> lstSalida = new List<FTOpcionEstado>();

            if (interfaz == ConstantesFichaTecnica.INTRANET)
            {
                switch (estenvcodi)
                {
                    case ConstantesFichaTecnica.EstadoSolicitud:
                        FTOpcionEstado valOp = new FTOpcionEstado();
                        valOp.Codigo = ConstantesFichaTecnica.OpcionConforme;
                        valOp.Texto = "Conforme";
                        valOp.ValColor = ConstantesFichaTecnica.ColorAzul;
                        lstSalida.Add(valOp);
                        FTOpcionEstado valOp2 = new FTOpcionEstado();
                        valOp2.Codigo = ConstantesFichaTecnica.OpcionObservado;
                        valOp2.Texto = "Observado";
                        valOp2.ValColor = ConstantesFichaTecnica.ColorRojo;
                        lstSalida.Add(valOp2);
                        break;
                    case ConstantesFichaTecnica.EstadoSubsanacionObs:
                        FTOpcionEstado valOp3 = new FTOpcionEstado();
                        valOp3.Codigo = ConstantesFichaTecnica.OpcionConforme;
                        valOp3.Texto = "Conforme";
                        valOp3.ValColor = ConstantesFichaTecnica.ColorAzul;
                        lstSalida.Add(valOp3);
                        FTOpcionEstado valOp4 = new FTOpcionEstado();
                        valOp4.Codigo = ConstantesFichaTecnica.OpcionNoSubsanado;
                        valOp4.Texto = "No Subsanado";
                        valOp4.ValColor = ConstantesFichaTecnica.ColorNaranja;
                        lstSalida.Add(valOp4);
                        break;
                    case ConstantesFichaTecnica.EstadoAprobado:
                        if (etapaEnvio == ConstantesFichaTecnica.EtapaConexion)
                        {
                            //OpcionEstado valOp5 = new OpcionEstado();
                            //valOp5.Codigo = ConstantesFichaTecnica.OpcionDenegado;
                            //valOp5.Texto = "Denegado";
                            //valOp5.ValColor = ConstantesFichaTecnica.ColorVioleta;
                            //lstSalida.Add(valOp5);
                        }

                        break;
                }
            }
            else
            {
                if (interfaz == ConstantesFichaTecnica.EXTRANET)
                {
                    switch (estenvcodi)
                    {
                        case ConstantesFichaTecnica.EstadoObservado:
                            FTOpcionEstado valOp = new FTOpcionEstado();
                            valOp.Codigo = ConstantesFichaTecnica.OpcionSubsanado;
                            valOp.Texto = "Subsanado";
                            valOp.ValColor = ConstantesFichaTecnica.ColorVerde;
                            lstSalida.Add(valOp);
                            break;
                    }
                }
            }

            return lstSalida;
        }

        #region Operacion Comercial

        public List<FtExtEventoReqDTO> ListarRequisitoXEnvioVersion(int ftevcodi, int ftevercodi, int ambiente)
        {
            FtExtEnvioVersionDTO objVersion = GetByIdFtExtEnvioVersion(ftevercodi);
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(objVersion.Ftenvcodi);
            bool opcionGlobalEditar = ConstantesFichaTecnica.EXTRANET == ambiente ? objEnvio.EsEditableExtranet : false;

            List<FtExtEventoReqDTO> listaReq = GetByCriteriaFtExtEventoReqsxIdFTExtEvento(ftevcodi);
            List<FtExtEnvioReqDTO> lstRequisitosPorEnvio = ListByVersionesFtExtEnvioReqs(ftevercodi);
            List<FtExtEnvioArchivoDTO> listaArchivo = ListByVersionYReqFtExtEnvioArchivos(ftevercodi);

            foreach (var item in listaReq)
            {
                var objReq = lstRequisitosPorEnvio.Find(x => x.Fevrqcodi == item.Fevrqcodi);
                if (objReq != null)
                {
                    item.EsObligatorioArchivo = objReq.EsObligatorioArchivo;
                    item.EsFilaEditableExtranet = objReq.EsFilaEditableExtranet && opcionGlobalEditar;
                    item.EsFilaRevisableIntranet = objReq.EsFilaRevisableIntranet && opcionGlobalEditar;
                }
                item.ListaArchivo = listaArchivo.Where(x => x.Fevrqcodi == objReq.Fevrqcodi).OrderBy(x => x.Ftearccodi).ToList();
            }

            return listaReq;
        }

        public void LimpiarEnvioXRequisito(FtExtEnvioDTO objEnvio, List<FtExtEventoReqDTO> listaReqEvento)
        {
            //cuando es solicitud entonces dejar sin archivos cada requisito
            if (ConstantesFichaTecnica.EstadoSolicitud == objEnvio.Estenvcodi && objEnvio.Ftenvcodi < 0)
            {
                foreach (var item in listaReqEvento)
                {
                    item.ListaArchivo = new List<FtExtEnvioArchivoDTO>();
                }
            }

            //cuando está en la carpeta observado, listar los archivos que se enviaron en la solicitud
            if (ConstantesFichaTecnica.EstadoObservado == objEnvio.Estenvcodi)
            {
                int verscodiOficial = objEnvio.FtevercodiOficial; //obtener versión "solicitud"

                var listaReqEventoOfi = ListarRequisitoXEnvioVersion(objEnvio.Ftevcodi ?? 0, verscodiOficial, ConstantesFichaTecnica.EXTRANET);
                foreach (var item in listaReqEvento)
                {
                    var objReqOfi = listaReqEventoOfi.Find(x => x.Fevrqcodi == item.Fevrqcodi);
                    if (objReqOfi != null)
                        item.ListaArchivo = objReqOfi.ListaArchivo;
                }
            }
        }

        /// <summary>
        /// Ventana principal para envios en operacion comercial
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="interfaz"></param>
        /// <param name="accion"></param>
        /// <returns></returns>
        public List<FTDatoRevisionParametrosAEnvio> ObtenerDatosRevisionContenidoReq(int versionEnvio, int interfaz)
        {
            List<FTDatoRevisionParametrosAEnvio> lstSalida = new List<FTDatoRevisionParametrosAEnvio>();

            FtExtEnvioVersionDTO objVersion = GetByIdFtExtEnvioVersion(versionEnvio);
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(objVersion.Ftenvcodi);

            //Extranet cuando todavia no tiene habilitado la Revisión
            if (interfaz == ConstantesFichaTecnica.EXTRANET &&
                (objEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud || objEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoCancelado))
                return new List<FTDatoRevisionParametrosAEnvio>();

            List<FtExtEnvioReqDTO> lstRequisitosPorEnvio = ListByVersionesFtExtEnvioReqs(versionEnvio);

            int accion = interfaz == ConstantesFichaTecnica.EXTRANET ? objEnvio.TipoAccionExtranet : objEnvio.TipoAccionIntranet;
            int numColumnaEditada = 0;
            if (interfaz == ConstantesFichaTecnica.EXTRANET) numColumnaEditada = 2;
            else
            {
                if (objEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud) numColumnaEditada = 1;
                else numColumnaEditada = 3;
            }

            int estadoCarpetaEnvio = objEnvio.Estenvcodi;
            int etapaEnvio = objEnvio.Ftetcodi;
            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosSegunInterfazYEstado(interfaz, estadoCarpetaEnvio, etapaEnvio);

            if (lstRequisitosPorEnvio.Any())
            {
                List<FtExtEnvioRevisionDTO> lstRevisionContenido = GetByCriteriaFtExtEnvioRevisionsXVersionYReq(versionEnvio);

                //si el equipo fue agregado en carpeta "observado" entonces no debe mostrar bloque amarillo
                if (interfaz == ConstantesFichaTecnica.EXTRANET && !lstRevisionContenido.Any()) return new List<FTDatoRevisionParametrosAEnvio>();

                List<int> lstFtrevcodis = lstRevisionContenido.Select(x => x.Ftrevcodi).Distinct().ToList();
                string strFtrevcodis = string.Join(",", lstFtrevcodis);

                List<FtExtEnvioArchivoDTO> lstArchivosXRevision = ListByRevisionFtExtEnvioArchivos(strFtrevcodis);

                foreach (var requisito in lstRequisitosPorEnvio)
                {
                    int miFevrqcodi = requisito.Fevrqcodi;

                    //Lleno la data
                    FTDatoRevisionParametrosAEnvio objRevisionFila = new FTDatoRevisionParametrosAEnvio();
                    objRevisionFila.Fevrqcodi = requisito.Fevrqcodi;
                    objRevisionFila.Literal = requisito.Fevrqliteral;
                    objRevisionFila.Numeral = requisito.Fevrqliteral;
                    objRevisionFila.TieneRevision = false;
                    objRevisionFila.NumcolumnaEditada = numColumnaEditada;

                    FtExtEnvioRevisionDTO fila = lstRevisionContenido.Find(x => x.Fevrqcodi == miFevrqcodi);

                    if (fila != null)
                    {
                        objRevisionFila.TieneRevision = requisito.EsFilaRevisableIntranet;
                        objRevisionFila.ValObsCoes = fila.Ftrevhtmlobscoes ?? "";
                        objRevisionFila.ValRptaAgente = fila.Ftrevhtmlrptaagente ?? "";
                        objRevisionFila.ValRptaCoes = fila.Ftrevhtmlrptacoes ?? "";
                        if (numColumnaEditada == 1) objRevisionFila.MsgColumnaEditada = objRevisionFila.ValObsCoes;
                        if (numColumnaEditada == 2) objRevisionFila.MsgColumnaEditada = objRevisionFila.ValRptaAgente;
                        if (numColumnaEditada == 3) objRevisionFila.MsgColumnaEditada = objRevisionFila.ValRptaCoes;

                        objRevisionFila.ValEstado = fila.Ftrevestado != null ? fila.Ftrevestado.Trim() : "";
                        objRevisionFila.ValEstadoDesc = ObtenerDescripcionEstadoRev(objRevisionFila.ValEstado);
                        objRevisionFila.IdValorEstado = objRevisionFila.ValEstado;
                        objRevisionFila.ColorValEstado = ObtenerColorTextoEstado(fila.Ftrevestado);

                        //busco los archivos de revisiones
                        List<FtExtEnvioArchivoDTO> lstArchivosFila = lstArchivosXRevision.Where(x => x.Ftrevcodi == fila.Ftrevcodi).ToList();

                        objRevisionFila.ListaArchivosObsCoes = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevisionObsCOES).ToList();
                        objRevisionFila.ListaArchivosRptaAgente = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevisionRptaAgente).ToList();
                        objRevisionFila.ListaArchivosRptaCoes = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevisionRptaCOES).ToList();

                    }

                    objRevisionFila.ListaEstados = lstEstados;

                    //la fila esta bloqueada si no es obligatorio archivos
                    objRevisionFila.FilaBloqueada = true;
                    if (requisito.EsFilaRevisableIntranet)
                    {
                        objRevisionFila.FilaBloqueada = VerificarFilaBloqueada(interfaz, estadoCarpetaEnvio, etapaEnvio, requisito.EsFilaRevisableIntranet, fila, accion);

                        if (!objRevisionFila.FilaBloqueada)
                        {
                            objRevisionFila.CeldaObsCoesEstaBloqueada = EsCeldaObsCoesBloqueada(interfaz, estadoCarpetaEnvio);
                            objRevisionFila.CeldaRptaAgenteEstaBloqueada = EsCeldaRptaAgenteBloqueada(interfaz, estadoCarpetaEnvio);
                            objRevisionFila.CeldaRptaCoesEstaBloqueada = EsCeldaRptaCoesBloqueada(interfaz, estadoCarpetaEnvio);
                            objRevisionFila.CeldaEstadoEstaBloqueada = EsCeldaEstadoBloqueada(interfaz, estadoCarpetaEnvio);
                        }
                    }

                    lstSalida.Add(objRevisionFila);
                }
            }

            return lstSalida;
        }

        #endregion

        #endregion

        #region Bloque Revision Areas

        /// <summary>
        /// pasa todos los envios que aun faltan revisar por las areas a atendido
        /// </summary>
        /// <param name="regEnvio"></param>
        public void CambiarAAtendidoEnvioDerivado(int accionRealizada, FtExtEnvioDTO regEnvio)
        {
            int versionUsada = regEnvio.FtevercodiTemporalIntranet;
            int carpetaIniEnvio = regEnvio.Estenvcodi;
            DateTime fechaRegistro = ObtenerFechaSistemaFT(regEnvio.Ftenvcodi);
            //busco areas que revisan
            List<FtExtEnvioAreaDTO> enviosAreaPorVersion = FactorySic.GetFtExtEnvioAreaRepository().ListarPorVersiones(versionUsada.ToString());

            string msgObs = "La revisión del áreas COES pasa a Atendido por cambio de estado del envío";
            switch (accionRealizada)
            {
                case ConstantesFichaTecnica.EstadoObservado:
                    msgObs = ConstantesFichaTecnica.CarpetaAreasRCSolicitud + ": La revisión del áreas COES pasa a Atendido por observación del envío.";
                    break;
                case ConstantesFichaTecnica.EstadoAprobado:
                    if (carpetaIniEnvio == ConstantesFichaTecnica.EstadoSolicitud)
                        msgObs = ConstantesFichaTecnica.CarpetaAreasRCSolicitud + ": La revisión del áreas COES pasa a Atendido por aprobación del envío.";
                    if (carpetaIniEnvio == ConstantesFichaTecnica.EstadoSubsanacionObs)
                        msgObs = ConstantesFichaTecnica.CarpetaAreasRCSubsanacíon + ": La revisión del áreas COES pasa a Atendido por aprobación del envío.";
                    break;
                case ConstantesFichaTecnica.EstadoAprobadoParcialmente:
                    if (carpetaIniEnvio == ConstantesFichaTecnica.EstadoSolicitud) //esto no ocurre pero si hay cambios en el futuro
                        msgObs = ConstantesFichaTecnica.CarpetaAreasRCSolicitud + ": La revisión del áreas COES pasa a Atendido por aprobación parcial del envío.";
                    if (carpetaIniEnvio == ConstantesFichaTecnica.EstadoSubsanacionObs)
                        msgObs = ConstantesFichaTecnica.CarpetaAreasRCSubsanacíon + ": La revisión del áreas COES pasa a Atendido por aprobación parcial del envío.";
                    break;
                case ConstantesFichaTecnica.EstadoCancelado:
                    msgObs = ConstantesFichaTecnica.CarpetaAreasRCSolicitud + ": La revisión del áreas COES pasa a Atendido por cancelación del envío.";
                    break;
                case ConstantesFichaTecnica.EstadoDesaprobado:
                    if (carpetaIniEnvio == ConstantesFichaTecnica.EstadoSolicitud) //esto no ocurre pero si hay cambios en el futuro
                        msgObs = ConstantesFichaTecnica.CarpetaAreasRCSolicitud + ": La revisión del áreas COES pasa a Atendido por denegación del envío.";
                    if (carpetaIniEnvio == ConstantesFichaTecnica.EstadoSubsanacionObs)
                        msgObs = ConstantesFichaTecnica.CarpetaAreasRCSubsanacíon + ": La revisión del áreas COES pasa a Atendido por denegación del envío.";
                    break;
            }

            foreach (var item in enviosAreaPorVersion)
            {
                if (item.Envarestado == ConstantesFichaTecnica.EstadoStrPendiente)
                {
                    item.Envarestado = ConstantesFichaTecnica.EstadoStrAtendido;

                    UpdateFtExtEnvioArea(item);

                    //Guarda log                    
                    FtExtEnvioLogDTO envioLog = new FtExtEnvioLogDTO();
                    envioLog.Ftenvcodi = regEnvio.Ftenvcodi;
                    envioLog.Ftelogusucreacion = ConstantesFichaTecnica.UsuarioSistema;
                    envioLog.Ftelogfeccreacion = fechaRegistro;
                    envioLog.Ftelogobs = msgObs;
                    envioLog.Estenvcodi = regEnvio.Estenvcodi;
                    envioLog.Ftelogcondicion = ConstantesFichaTecnica.CondicionNoAtendido;
                    envioLog.Envarcodi = item.Envarcodi;

                    SaveFtExtEnvioLog(envioLog);
                }

            }
        }

        /// <summary>
        /// devuelve las areas a las cuales pertenece el usuario
        /// </summary>
        /// <param name="usuario"></param>
        /// <param name="nombreAreas"></param>
        /// <returns></returns>
        public string ObtenerIdAreaDelUsuario(string usuario, string email, out string nombreAreas)
        {
            string salida = "";
            nombreAreas = "";
            bool usuarioEsAdmin = false;

            string correosAdminFt = ObtenerCorreosAdminFichaTecnica();
            usuarioEsAdmin = correosAdminFt.Contains(email);


            if (usuarioEsAdmin)
            {
                //salida = "-1";
                List<FtExtCorreoareadetDTO> listaAreasCorreo1 = FactorySic.GetFtExtCorreoareadetRepository().List().Where(x => x.Faremdestado == "A").ToList();

                if (listaAreasCorreo1.Any())
                {
                    salida = string.Join(",", listaAreasCorreo1.Select(x => x.Faremcodi).Distinct().ToList());
                    nombreAreas = string.Join(", ", listaAreasCorreo1.Select(x => x.Faremnombre).Distinct().OrderBy(x => x).ToList());
                }
            }
            else
            {
                List<FtExtCorreoareadetDTO> listaAreasCorreo = FactorySic.GetFtExtCorreoareadetRepository().ListarPorCorreo(usuario);

                if (listaAreasCorreo.Any())
                {
                    salida = string.Join(",", listaAreasCorreo.Select(x => x.Faremcodi).Distinct().ToList());
                    nombreAreas = string.Join(", ", listaAreasCorreo.Select(x => x.Faremnombre).Distinct().OrderBy(x => x).ToList());
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve todaas las areas (como si fuera admin)
        /// </summary>
        /// <returns></returns>
        public string ObtenerIdAreaTotales()
        {
            string salida = "";

            List<FtExtCorreoareadetDTO> listaAreasCorreo1 = FactorySic.GetFtExtCorreoareadetRepository().List().Where(x => x.Faremdestado == "A").ToList();

            if (listaAreasCorreo1.Any())
            {
                salida = string.Join(",", listaAreasCorreo1.Select(x => x.Faremcodi).Distinct().ToList());
            }


            return salida;
        }

        /// <summary>
        /// Devuelve el listado de envios de las areas
        /// </summary>
        /// <param name="emprcodis"></param>
        /// <param name="idCarpeta"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        public List<FtExtEnvioDTO> ObtenerListadoEnviosEtapaParaAreas(string areasUsuario, string emprcodis, int idCarpeta, DateTime fechaInicio, DateTime fechaFin, string ftetcodi, bool habilitadoEditarInformacionSegunRol, string usuarioEmail)
        {
            List<FtExtEnvioDTO> lstSalida = new List<FtExtEnvioDTO>();
            List<FtExtEnvioDTO> lstTemp = new List<FtExtEnvioDTO>();

            if (areasUsuario != "")
            {

                string envarestado = idCarpeta == ConstantesFichaTecnica.EstadoAtendido ? ConstantesFichaTecnica.EstadoStrAtendido : (idCarpeta == ConstantesFichaTecnica.EstadoPendiente ? ConstantesFichaTecnica.EstadoStrPendiente : "");
                if (envarestado == "") throw new ArgumentException("Ocurrió un error al momento de reconocer el estado de la carpeta seleccionada.");

                lstTemp = FactorySic.GetFtExtEnvioRepository().ObtenerEnviosEtapasParaAreas(emprcodis, ftetcodi, fechaInicio, fechaFin, envarestado, areasUsuario);
                lstSalida = lstTemp;

                //Obtenemos el listado de equipos
                List<int> lstIdEnvios = lstSalida.Select(x => x.Ftenvcodi).Distinct().ToList();
                List<FtExtEnvioEqDTO> listaEquiposTotal = ObtenerListadoDeEquiposPorEnvios(lstIdEnvios);

                List<FtExtEnvioVersionDTO> listaVersion = GetByCriteriaFtExtEnvioVersions(string.Join(",", lstIdEnvios));

                foreach (FtExtEnvioDTO reg in lstSalida)
                {
                    reg.UsuarioPerteneceAArea = VerificarSiUsuarioPerteneceArea(usuarioEmail, reg.Faremcodi);
                    FormatearFtExtEnvio(reg, listaEquiposTotal, listaVersion);
                    FormatearFtExtEnvioParaAreas(reg, habilitadoEditarInformacionSegunRol);
                }
            }
            lstSalida = lstSalida.OrderByDescending(x => x.Ftenvcodi).ThenBy(x => x.Estenvnombversion).ThenBy(x => x.Faremnombre).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Verifica si el usuario intranet pertenece al area consultada
        /// </summary>
        /// <param name="usuarioEmail"></param>
        /// <param name="idAreaConsultar"></param>
        /// <returns></returns>
        public bool VerificarSiUsuarioPerteneceArea(string usuarioEmail, int? idAreaConsultar)
        {
            bool salida = false;

            if (idAreaConsultar != null)
            {
                List<FtExtCorreoareadetDTO> lstCorreosXarea = ListarCorreosPorArea(idAreaConsultar.ToString());
                string strCorreosArea = string.Join(";", lstCorreosXarea.Where(x => x.Faremdemail.Contains("@")).Select(x => x.Faremdemail).OrderBy(x => x).ToList());
                salida = strCorreosArea.Contains(usuarioEmail);
            }
            return salida;
        }

        /// <summary>
        ///  Da formato a los registros de envios para las areas
        /// </summary>
        /// <param name="item"></param>
        /// <param name="habilitadoEditarInformacionSegunRol"></param>
        private void FormatearFtExtEnvioParaAreas(FtExtEnvioDTO item, bool habilitadoEditarInformacionSegunRol)
        {
            bool flagEditarSinTomarCuentaRoles = item.Envarestado == ConstantesFichaTecnica.EstadoStrAtendido ? false :
                            (item.Envarestado == ConstantesFichaTecnica.EstadoStrPendiente ? (item.UsuarioPerteneceAArea != null ? item.UsuarioPerteneceAArea : true) : false);
            item.EsEditableParaAreas = !habilitadoEditarInformacionSegunRol ? false : (flagEditarSinTomarCuentaRoles);
            item.Estenvnombversion = (item.Estenvcodiversion == ConstantesFichaTecnica.EstadoSolicitud || item.Estenvcodiversion == ConstantesFichaTecnica.EstadoObservado) ? GetDescripcionExtEstado(ConstantesFichaTecnica.EstadoSolicitud) : GetDescripcionExtEstado(item.Estenvcodiversion);
        }

        /// <summary>
        /// Genera el html de las carpetas para las areas (estados de envios)
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="idCarpeta"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        public string GenerarHtmlCarpetaAreas(string areasUsuario, string emprcodi, int idCarpeta, DateTime fechaInicio, DateTime fechaFin, int ftetcodi)
        {
            List<CarpetaArea> listaEstado = ListarTotalXEstadoEnvioXFiltroParaAreas(areasUsuario, emprcodi, fechaInicio, fechaFin.AddDays(1), ftetcodi);
            string htmlCarpeta = GenerarHtmlCarpetasEnvioAreas(idCarpeta, listaEstado);

            return htmlCarpeta;
        }

        /// <summary>
        /// Devuelve los envios agrupados por su carpeta
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        private List<CarpetaArea> ListarTotalXEstadoEnvioXFiltroParaAreas(string areasUsuario, string emprcodi, DateTime fechaInicio, DateTime fechaFin, int ftetcodi)
        {
            List<CarpetaArea> lista = ListExtEstadoEnvioAreas();
            List<FtExtEnvioDTO> lstEnviosArea = FactorySic.GetFtExtEnvioRepository().ObtenerEnviosEtapasParaAreas(emprcodi, ftetcodi.ToString(), fechaInicio, fechaFin, ConstantesFichaTecnica.PorDefecto.ToString(), areasUsuario);

            foreach (var reg in lista)
            {
                List<FtExtEnvioDTO> lstTemp = lstEnviosArea.Where(x => x.Envarestado == reg.StrCodigo).Distinct().ToList();
                reg.Total = lstTemp.Count();
            }

            return lista;
        }


        /// <summary>
        /// Lista de estados para el listado de envios para areas
        /// </summary>
        /// <returns></returns>
        public List<CarpetaArea> ListExtEstadoEnvioAreas()
        {
            List<CarpetaArea> listaCarpetas = new List<CarpetaArea>();


            CarpetaArea obj1 = new CarpetaArea();
            obj1.Codigo = ConstantesFichaTecnica.EstadoPendiente;
            obj1.StrCodigo = ConstantesFichaTecnica.EstadoStrPendiente;
            obj1.Nombre = "Revisión Pendiente";
            obj1.Orden = 1;
            listaCarpetas.Add(obj1);

            CarpetaArea obj2 = new CarpetaArea();
            obj2.Codigo = ConstantesFichaTecnica.EstadoAtendido;
            obj2.StrCodigo = ConstantesFichaTecnica.EstadoStrAtendido;
            obj2.Nombre = "Atendido";
            obj2.Orden = 2;
            listaCarpetas.Add(obj2);

            return listaCarpetas;
        }


        /// <summary>
        /// genera el html de la tabla carpetas estado
        /// </summary>
        /// <param name="idEstado"></param>
        /// <param name="listaAll"></param>
        /// <returns></returns>
        private string GenerarHtmlCarpetasEnvioAreas(int idEstado, List<CarpetaArea> listaAll)
        {
            StringBuilder strHtml = new StringBuilder();
            strHtml.Append("<table width='100%'>");

            foreach (var reg in listaAll)
            {
                var totalRegistros = reg.Total;

                string estiloCeldaSelect = reg.Codigo == idEstado ? "item_carpeta_selected" : "";
                if (totalRegistros > 0) estiloCeldaSelect += " item_tiene_dato";
                string textoCelda = totalRegistros > 0 ? string.Format("{0} ({1})", reg.Nombre, totalRegistros) : reg.Nombre;

                strHtml.AppendFormat(@"
                                <tr onclick='buscarEnvio({0});'>
                                    <td class='item_carpeta {2}'>{1}</td>
                                </tr>
                    ", reg.Codigo, textoCelda, estiloCeldaSelect);
            }
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera el reporte del listado de envios
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pathLogo"></param>
        /// <param name="empresas"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="idCarpeta"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="nameFile"></param>
        public void GenerarExportacionEnviosAreas(string areasUsuario, string ruta, string pathLogo, string empresas, DateTime fechaInicio, DateTime fechaFin, int idCarpeta, int ftetcodi, string nameFile, bool habilitadoEditarInformacion, string usuarioEmail)
        {
            List<FtExtEnvioDTO> listaEnviosTotales = ObtenerListadoEnviosEtapaParaAreas(areasUsuario, empresas, idCarpeta, fechaInicio, fechaFin, ftetcodi.ToString(), habilitadoEditarInformacion, usuarioEmail);

            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelEnviosParaAreas(xlPackage, pathLogo, listaEnviosTotales, idCarpeta, fechaInicio, fechaFin);

                xlPackage.Save();
            }
        }


        /// <summary>
        /// Genera la estructura del reporte del listado de envios a exportar
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="listaEnviosTotales"></param>
        /// <param name="estado"></param>
        private void GenerarArchivoExcelEnviosParaAreas(ExcelPackage xlPackage, string pathLogo, List<FtExtEnvioDTO> listaEnviosTotales, int estado, DateTime fechaInicio, DateTime fechaFin)
        {
            string EstadoEnvio = ObtenerDescripcionEstadoEnvioAreas(estado, 1);
            string nameWS = "REPORTE";
            string titulo = "REPORTE DE ENVÍOS DE FICHA TÉCNICA (CARPETA: " + EstadoEnvio.ToUpper() + ")";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniFecha = colIniTitulo + 1;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo + 1;
            int rowIniTabla = rowIniTitulo + 6;

            int colCodigo = colIniTable;
            int colTipo = colIniTable + 1;
            int colEmpresa = colIniTable + 2;
            int colEtapa = colIniTable + 3;
            int colNombProyecto = colIniTable + 4;
            int colEquiProyecto = colIniTable + 5;
            int colNombEquipos = colIniTable + 6;
            int colUsuario = colIniTable + 7;
            int colFecSolicitud = colIniTable + 8;
            int colFechaActualizacion = colIniTable + 9;

            int colUltima = colIniTable + 10;



            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
            ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

            ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Desde:";
            ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Hasta:";
            ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

            ws.Row(rowIniTabla).Height = 20;
            ws.Cells[rowIniTabla, colCodigo].Value = "Código del Envío";
            ws.Cells[rowIniTabla, colTipo].Value = "Tipo de Envío";
            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colEtapa].Value = "Etapa";
            ws.Cells[rowIniTabla, colNombProyecto].Value = "Nombre Proyecto";
            ws.Cells[rowIniTabla, colEquiProyecto].Value = "Equipo(s) Proyecto";
            ws.Cells[rowIniTabla, colNombEquipos].Value = "Nombre Equipo(s)";
            ws.Cells[rowIniTabla, colUsuario].Value = "Usuario";
            ws.Cells[rowIniTabla, colFecSolicitud].Value = "Fecha de solicitud";
            ws.Cells[rowIniTabla, colFechaActualizacion].Value = "Fecha de actualización";



            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colCodigo, rowIniTabla, colUltima - 1, "#000000");

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaEnviosTotales)
            {
                ws.Cells[rowData, colCodigo].Value = item.Ftenvcodi;
                ws.Cells[rowData, colTipo].Value = item.Estenvnombversion;
                ws.Cells[rowData, colEmpresa].Value = item.Emprnomb.Trim();
                ws.Cells[rowData, colEtapa].Value = item.Ftetnombre.Trim();
                ws.Cells[rowData, colNombProyecto].Value = item.Ftprynombre.Trim();
                ws.Cells[rowData, colEquiProyecto].Value = item.EquiposProyecto.Trim();
                ws.Cells[rowData, colNombEquipos].Value = item.NombreEquipos.Trim();
                ws.Cells[rowData, colUsuario].Value = item.Ftenvususolicitud.Trim();
                ws.Cells[rowData, colFecSolicitud].Value = item.FtenvfecsolicitudDesc.Trim();

                if (item.Estenvcodiversion == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    ws.Cells[rowData, colFechaActualizacion].Value = item.FtenvfecmodificacionDesc;
                }
                else
                {
                    ws.Cells[rowData, colFechaActualizacion].Value = "";
                }


                rowData++;
            }
            if (!listaEnviosTotales.Any()) rowData++;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Calibri", 8);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colCodigo, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Centro");

            #endregion

            //filter
            ws.Cells[rowIniTabla, colCodigo, rowIniTabla, colUltima - 1].AutoFilter = true;
            ws.Cells[rowIniTabla, colIniTable, rowData, colUltima - 1].AutoFitColumns();
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        /// <summary>
        /// Devuelve la descripcion del estado del envio
        /// </summary>
        /// <param name="estado"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        string ObtenerDescripcionEstadoEnvioAreas(int estado, int tipo)
        {
            string salida = "";
            string salida1 = "";
            string salida2 = "";

            switch (estado)
            {
                case ConstantesFichaTecnica.EstadoPendiente: salida1 = "Revisión Pendiente"; salida2 = "Pendientes de Revisión"; break;
                case ConstantesFichaTecnica.EstadoAtendido: salida1 = "Atendido"; salida2 = "Atendidos"; break;
            }

            switch (tipo)
            {
                case 1: salida = salida1; break;
                case 2: salida = salida2; break;
            }

            return salida;
        }

        /// <summary>
        /// Devuelve el tipo de Opcion para el detalle de cierto envio area (E: EDITAR, V: VER)
        /// </summary>
        /// <param name="envioArea"></param>
        /// <param name="habilitadoEditarInformacion"></param>
        /// <returns></returns>
        public string ObtenerTipoOpcionDelDetalleEnvio(FtExtEnvioAreaDTO envioArea, bool habilitadoEditarInformacion, bool usuarioPerteneceAArea)
        {
            string salida = "";

            string tipoSinRol = envioArea.Envarestado == ConstantesFichaTecnica.EstadoStrAtendido ? "V" :
                          (envioArea.Envarestado == ConstantesFichaTecnica.EstadoStrPendiente ? (usuarioPerteneceAArea != null ? (usuarioPerteneceAArea ? "E" : "V") : "E") : "V");

            salida = !habilitadoEditarInformacion ? "V" : tipoSinRol;

            return salida;
        }


        /// <summary>
        ///  Devuelve la data de la revision de los parametros para las areas
        /// </summary>
        /// <param name="fteeqcodi"></param>
        /// <param name="faremcodisUsuario"></param>
        /// <returns></returns>
        public List<DatoRevisionAreasFT> ObtenerDatosRevisionAreasFT(int fteeqcodi, string faremcodisGeneral, string nombAreasUsuario, int idAreaRevision, string nombAreaRevision)
        {
            List<DatoRevisionAreasFT> lstSalida = new List<DatoRevisionAreasFT>();

            //Hallo opciones para la columna estados
            FtExtEnvioEqDTO envioEq = GetByIdFtExtEnvioEq(fteeqcodi);
            FtExtEnvioDTO envio = GetByIdFtExtEnvio(envioEq.Ftenvcodi);
            int versionRevision = envioEq.Ftevercodi;
            int idEnvio = envioEq.Ftenvcodi;
            int miEstenvcodi = envio.Estenvcodi;
            int etapaEnvio = envio.Ftetcodi;

            FtExtEnvioAreaDTO envioArea = GetFtExtEnvioAreaByVersionYArea(versionRevision, idAreaRevision);

            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosAreas();

            //Hallo la data de la revision
            List<FtExtEnvioDatoDTO> listaDatoAllXEqBD = GetByCriteriaFtExtEnvioDatos(fteeqcodi.ToString());
            List<int> lstFtedatcodis = listaDatoAllXEqBD.Select(x => x.Ftedatcodi).Distinct().ToList();
            List<int> lstFitcfgcodis = listaDatoAllXEqBD.Select(x => x.Fitcfgcodi).Distinct().ToList();
            List<FtFictecItemDTO> total = FactorySic.GetFtFictecItemRepository().List();

            if (lstFtedatcodis.Any())
            {
                string strFitCfgcodis = string.Join(",", lstFitcfgcodis);
                List<FtExtItemcfgDTO> lstItemsConf = strFitCfgcodis != "" ? FactorySic.GetFtExtItemcfgRepository().ListarPorIds(strFitCfgcodis) : new List<FtExtItemcfgDTO>();

                List<int> lstFtitcodis = lstItemsConf.Select(x => x.Ftitcodi).Distinct().ToList();
                string strFtitcodis = string.Join(",", lstFtitcodis);
                List<FtFictecItemDTO> lstFictecitem = strFtitcodis != "" ? FactorySic.GetFtFictecItemRepository().ListarPorIds(strFtitcodis) : new List<FtFictecItemDTO>();

                //busco areas que revisan
                List<FtExtEnvioAreaDTO> enviosAreaPorVersion = FactorySic.GetFtExtEnvioAreaRepository().ListarPorVersiones(versionRevision.ToString());

                List<FtExtRelareaitemcfgDTO> listadoGeneralAreasYFilas = FactorySic.GetFtExtRelareaitemcfgRepository().ListarPorAreas(ConstantesFichaTecnica.EstadoStrActivo, faremcodisGeneral);

                string strFtedatcodis = string.Join(",", lstFtedatcodis);

                List<FtExtEnvioRevareaDTO> lstDatosRev = strFtedatcodis != "" ? FactorySic.GetFtExtEnvioRevareaRepository().ListarRevisionPorAreaVersionYDatos(idAreaRevision.ToString(), versionRevision, strFtedatcodis) : new List<FtExtEnvioRevareaDTO>();

                List<int> lstRevacodis = lstDatosRev.Select(x => x.Revacodi).Distinct().ToList();
                string strRevacodis = string.Join(",", lstRevacodis);

                List<FtExtEnvioArchivoDTO> lstArchivosXRevision = strRevacodis != "" ? FactorySic.GetFtExtEnvioArchivoRepository().ListByRevisionAreas(strRevacodis) : new List<FtExtEnvioArchivoDTO>();

                //Para subsanados: Obtengo revision de bloque amarillo para obtener su estado elegido 
                List<FtExtEnvioRevisionDTO> lstDatosRevBloqueAdministracion = new List<FtExtEnvioRevisionDTO>();
                if (miEstenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    lstDatosRevBloqueAdministracion = strFtedatcodis != "" ? GetByCriteriaFtExtEnvioRevisionsXVersionYDato(versionRevision) : new List<FtExtEnvioRevisionDTO>();
                }

                foreach (var envioDato in listaDatoAllXEqBD)
                {
                    int miFtedatcodi = envioDato.Ftedatcodi;
                    int miFteeqcodi = envioDato.Fteeqcodi;

                    //Hallo equicodi y grupocodi
                    int? miEquicodi = envioEq.Equicodi;
                    int? miGrupocodi = envioEq.Grupocodi;

                    //Hallo concepto y propiedad
                    int? miConcepcodi = null;
                    int? miPropcodi = null;
                    FtExtItemcfgDTO objIConf = lstItemsConf.Find(x => x.Fitcfgcodi == envioDato.Fitcfgcodi);
                    if (objIConf != null)
                    {
                        int miFtitcodi = objIConf.Ftitcodi;
                        string numeral = ObtenerNumeralPorFtitcodi("", miFtitcodi, total);

                        FtFictecItemDTO objItem = lstFictecitem.Find(x => x.Ftitcodi == miFtitcodi);

                        if (objItem != null)
                        {
                            miConcepcodi = objItem.Concepcodi;
                            miPropcodi = objItem.Propcodi;
                        }

                        bool esFilaRevisable = false;
                        bool posibleEsFilaRevisable = false;
                        string nombreAreasAsignadas = "";
                        string idsAreasAsignadas = "";
                        List<FtExtRelareaitemcfgDTO> objetosEncontrado = listadoGeneralAreasYFilas.Where(x => x.Ftitcodi == miFtitcodi).OrderBy(x => x.Faremnombre).ToList();
                        if (objetosEncontrado.Any())
                        {
                            nombreAreasAsignadas = string.Join(", ", objetosEncontrado.Select(x => x.Faremnombre).Distinct().ToList());
                            idsAreasAsignadas = string.Join(",", objetosEncontrado.Select(x => x.Faremcodi).Distinct().ToList());
                        }

                        //si es subsanado verifico si el estado elegido en ESTADO es CONFORME O SUBSANADO, si es conforme bloqueo revision de areas,
                        //solo se revisan los que tengan SUBSANADO en el campo estado (del bloque amarillo - rev admin FT)
                        FtExtEnvioRevisionDTO filaAdminFT = lstDatosRevBloqueAdministracion.Find(x => x.Ftedatcodi == miFtedatcodi);
                        string estadoElegidoEnAdminFT = filaAdminFT != null ? (filaAdminFT.Ftrevestado != null ? filaAdminFT.Ftrevestado.Trim() : "") : "";

                        //Verifico si la fila es revisable o no
                        List<string> listaIdAsignados = idsAreasAsignadas.Split(',').ToList();
                        posibleEsFilaRevisable = estadoElegidoEnAdminFT == ConstantesFichaTecnica.OpcionConforme ? false : (listaIdAsignados.Contains(idAreaRevision.ToString()));

                        //Si el envío es Modificacion FT sin dar baja, solo seran posibles revisables aquellos que tengan modificación
                        if (etapaEnvio == ConstantesFichaTecnica.EtapaModificacion && envio.Ftenvtipoformato == ConstantesFichaTecnica.FormatoConexIntegModif)
                        {
                            if (envioDato.EsFilaRevisableIntranet)
                            {
                                esFilaRevisable = posibleEsFilaRevisable;
                            }
                        }
                        else
                        {
                            esFilaRevisable = posibleEsFilaRevisable;
                        }

                        //Lleno la data
                        DatoRevisionAreasFT objRevisionFila = new DatoRevisionAreasFT();

                        objRevisionFila.Estenvcodi = miEstenvcodi;
                        objRevisionFila.Numeral = numeral;
                        objRevisionFila.Elemento = envioEq.Nombreelemento != null ? envioEq.Nombreelemento.Trim() : "";
                        objRevisionFila.EsFilaRevisable = esFilaRevisable;
                        objRevisionFila.Fteeqcodi = miFteeqcodi;
                        objRevisionFila.Ftedatcodi = miFtedatcodi;
                        objRevisionFila.Ftitcodi = miFtitcodi;
                        objRevisionFila.Equicodi = miEquicodi;
                        objRevisionFila.Grupocodi = miGrupocodi;
                        objRevisionFila.Propcodi = miPropcodi;
                        objRevisionFila.Concepcodi = miConcepcodi;

                        objRevisionFila.AreaIdEnRevision = idAreaRevision;
                        objRevisionFila.AreaNombEnRevision = nombAreaRevision;
                        objRevisionFila.AreasIdsStrAsignadas = idsAreasAsignadas;
                        objRevisionFila.AreasNombAsignadas = nombreAreasAsignadas;

                        FtExtEnvioRevareaDTO filaRevision = lstDatosRev.Find(x => x.Ftedatcodi == miFtedatcodi);

                        if (filaRevision != null)
                        {
                            objRevisionFila.MsgSolicitud = filaRevision.Revahtmlronda1 != null ? filaRevision.Revahtmlronda1.Trim() : "";
                            objRevisionFila.MsgSubsanacion = filaRevision.Revahtmlronda2 != null ? filaRevision.Revahtmlronda2.Trim() : "";
                            objRevisionFila.IdValorEstadoSolicitado = filaRevision.Revaestadoronda1 != null ? filaRevision.Revaestadoronda1.Trim() : "";
                            objRevisionFila.IdValorEstadoSubsanado = filaRevision.Revaestadoronda2 != null ? filaRevision.Revaestadoronda2.Trim() : "";

                            objRevisionFila.ColorValEstadoSolicitado = ObtenerColorTextoEstado(filaRevision.Revaestadoronda1);
                            objRevisionFila.ColorValEstadoSubsanado = ObtenerColorTextoEstado(filaRevision.Revaestadoronda2);

                            //busco los archivos de revisiones
                            List<FtExtEnvioArchivoDTO> lstArchivosFila = lstArchivosXRevision.Where(x => x.Revacodi == filaRevision.Revacodi).ToList();

                            objRevisionFila.ListaArchivosSolicitados = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevAreaSolicitado).ToList();
                            objRevisionFila.ListaArchivosSubsanados = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevAreaSubsanado).ToList();
                        }
                        else
                        {
                            objRevisionFila.MsgSolicitud = "";
                            objRevisionFila.MsgSubsanacion = "";
                            objRevisionFila.IdValorEstadoSolicitado = "";
                            objRevisionFila.IdValorEstadoSubsanado = "";

                            objRevisionFila.ColorValEstadoSolicitado = ObtenerColorTextoEstado("");
                            objRevisionFila.ColorValEstadoSubsanado = ObtenerColorTextoEstado("");

                            objRevisionFila.ListaArchivosSolicitados = new List<FtExtEnvioArchivoDTO>();
                            objRevisionFila.ListaArchivosSubsanados = new List<FtExtEnvioArchivoDTO>();
                        }

                        objRevisionFila.ListaEstadosSolicitado = lstEstados;
                        objRevisionFila.ListaEstadosSubsanado = lstEstados;

                        if (objRevisionFila.EsFilaRevisable)
                        {

                            objRevisionFila.CeldaNombAreasEstaBloqueada = true;
                            objRevisionFila.CeldaRevSolicitudEstaBloqueada = EsCeldaMensajeRevAreasBloqueada(ConstantesFichaTecnica.EstadoSolicitud, miEstenvcodi, idsAreasAsignadas, idAreaRevision);
                            objRevisionFila.CeldaEstadoSolicitudEstaBloqueada = EsCeldaMensajeRevAreasBloqueada(ConstantesFichaTecnica.EstadoSolicitud, miEstenvcodi, idsAreasAsignadas, idAreaRevision);
                            objRevisionFila.CeldaRevSubsanadoEstaBloqueada = EsCeldaMensajeRevAreasBloqueada(ConstantesFichaTecnica.EstadoSubsanacionObs, miEstenvcodi, idsAreasAsignadas, idAreaRevision);
                            objRevisionFila.CeldaEstadoSubsanadoEstaBloqueada = EsCeldaMensajeRevAreasBloqueada(ConstantesFichaTecnica.EstadoSubsanacionObs, miEstenvcodi, idsAreasAsignadas, idAreaRevision);
                        }
                        else
                        {
                            objRevisionFila.CeldaNombAreasEstaBloqueada = true;
                            objRevisionFila.CeldaRevSolicitudEstaBloqueada = true;
                            objRevisionFila.CeldaEstadoSolicitudEstaBloqueada = true;
                            objRevisionFila.CeldaRevSubsanadoEstaBloqueada = true;
                            objRevisionFila.CeldaEstadoSubsanadoEstaBloqueada = true;
                        }

                        objRevisionFila.TipoEstado = envioArea.Envarestado;

                        lstSalida.Add(objRevisionFila);

                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve los datos usados en la revision de areas para cierto equipo y área
        /// </summary>
        /// <param name="fteeqcodi"></param>
        /// <param name="faremcodisUsuario"></param>
        /// <returns></returns>
        public List<DatoRevisionAreasFT> ObtenerDatosRevisionAreasCOESFT(int fteeqcodi, string faremcodisUsuario)
        {
            //si el formato no tiene derivación de areas entonces no mostrar el bloque azul
            if (string.IsNullOrEmpty(faremcodisUsuario)) return new List<DatoRevisionAreasFT>();

            List<DatoRevisionAreasFT> lstSalida = new List<DatoRevisionAreasFT>();

            //Hallo opciones para la columna estados
            FtExtEnvioEqDTO envioEq = GetByIdFtExtEnvioEq(fteeqcodi);
            FtExtEnvioDTO envio = GetByIdFtExtEnvio(envioEq.Ftenvcodi);
            int versionRevision = envioEq.Ftevercodi;
            int idEnvio = envioEq.Ftenvcodi;
            int miEstenvcodi = envio.Estenvcodi;
            int etapaEnvio = envio.Ftetcodi;

            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosAreas();

            //Hallo la data de la revision
            List<FtExtEnvioDatoDTO> listaDatoAllXEqBD = GetByCriteriaFtExtEnvioDatos(fteeqcodi.ToString());
            List<int> lstFtedatcodis = listaDatoAllXEqBD.Select(x => x.Ftedatcodi).Distinct().ToList();
            List<int> lstFitcfgcodis = listaDatoAllXEqBD.Select(x => x.Fitcfgcodi).Distinct().ToList();
            List<FtFictecItemDTO> total = FactorySic.GetFtFictecItemRepository().List();

            if (lstFtedatcodis.Any())
            {
                string strFitCfgcodis = string.Join(",", lstFitcfgcodis);
                List<FtExtItemcfgDTO> lstItemsConf = strFitCfgcodis != "" ? FactorySic.GetFtExtItemcfgRepository().ListarPorIds(strFitCfgcodis) : new List<FtExtItemcfgDTO>();

                List<int> lstFtitcodis = lstItemsConf.Select(x => x.Ftitcodi).Distinct().ToList();
                string strFtitcodis = string.Join(",", lstFtitcodis);
                List<FtFictecItemDTO> lstFictecitem = strFtitcodis != "" ? FactorySic.GetFtFictecItemRepository().ListarPorIds(strFtitcodis) : new List<FtFictecItemDTO>();

                //busco areas que revisan
                List<FtExtEnvioAreaDTO> enviosAreaPorVersion = FactorySic.GetFtExtEnvioAreaRepository().ListarPorVersiones(versionRevision.ToString());

                List<FtExtRelareaitemcfgDTO> listadoGeneralAreasYFilas = FactorySic.GetFtExtRelareaitemcfgRepository().ListarPorAreas(ConstantesFichaTecnica.EstadoStrActivo, faremcodisUsuario);

                string strFtedatcodis = string.Join(",", lstFtedatcodis);
                List<FtExtEnvioRevareaDTO> lstDatosRev = new List<FtExtEnvioRevareaDTO>();

                List<int> listaAreas = faremcodisUsuario.Split(',').Select(int.Parse).ToList();

                var listarevisonArea = strFtedatcodis != "" ? FactorySic.GetFtExtEnvioRevareaRepository().ListarRevisionPorAreaVersionYDatos(faremcodisUsuario, versionRevision, strFtedatcodis) : new List<FtExtEnvioRevareaDTO>();
                lstDatosRev.AddRange(listarevisonArea);

                List<int> lstRevacodis = lstDatosRev.Select(x => x.Revacodi).Distinct().ToList();
                string strRevacodis = string.Join(",", lstRevacodis);

                List<FtExtEnvioArchivoDTO> lstArchivosXRevision = strRevacodis != "" ? FactorySic.GetFtExtEnvioArchivoRepository().ListByRevisionAreas(strRevacodis) : new List<FtExtEnvioArchivoDTO>();

                foreach (var envioDato in listaDatoAllXEqBD)
                {
                    int miFtedatcodi = envioDato.Ftedatcodi;
                    int miFteeqcodi = envioDato.Fteeqcodi;

                    //Hallo equicodi y grupocodi
                    int? miEquicodi = envioEq.Equicodi;
                    int? miGrupocodi = envioEq.Grupocodi;

                    //Hallo concepto y propiedad
                    int? miConcepcodi = null;
                    int? miPropcodi = null;
                    FtExtItemcfgDTO objIConf = lstItemsConf.Find(x => x.Fitcfgcodi == envioDato.Fitcfgcodi);
                    if (objIConf != null)
                    {
                        int miFtitcodi = objIConf.Ftitcodi;
                        string numeral = ObtenerNumeralPorFtitcodi("", miFtitcodi, total);

                        FtFictecItemDTO objItem = lstFictecitem.Find(x => x.Ftitcodi == miFtitcodi);

                        if (objItem != null)
                        {
                            miConcepcodi = objItem.Concepcodi;
                            miPropcodi = objItem.Propcodi;
                        }

                        bool esFilaRevisable = false;
                        string nombreAreasAsignadas = "";
                        string idsAreasAsignadas = "";
                        List<FtExtRelareaitemcfgDTO> objetosEncontrado = listadoGeneralAreasYFilas.Where(x => x.Ftitcodi == miFtitcodi).OrderBy(x => x.Faremnombre).ToList();
                        if (objetosEncontrado.Any())
                        {
                            //esFilaRevisable = true;
                            nombreAreasAsignadas = string.Join(", ", objetosEncontrado.Select(x => x.Faremnombre).Distinct().ToList());
                            idsAreasAsignadas = string.Join(",", objetosEncontrado.Select(x => x.Faremcodi).Distinct().ToList());
                        }

                        //Lleno la data
                        DatoRevisionAreasFT objRevisionFila = new DatoRevisionAreasFT();

                        objRevisionFila.Estenvcodi = miEstenvcodi;
                        objRevisionFila.Numeral = numeral;
                        objRevisionFila.Elemento = envioEq.Nombreelemento != null ? envioEq.Nombreelemento.Trim() : "";
                        objRevisionFila.EsFilaRevisable = esFilaRevisable;
                        objRevisionFila.Fteeqcodi = miFteeqcodi;
                        objRevisionFila.Ftedatcodi = miFtedatcodi;
                        objRevisionFila.Ftitcodi = miFtitcodi;
                        objRevisionFila.Equicodi = miEquicodi;
                        objRevisionFila.Grupocodi = miGrupocodi;
                        objRevisionFila.Propcodi = miPropcodi;
                        objRevisionFila.Concepcodi = miConcepcodi;

                        objRevisionFila.AreasIdsStrAsignadas = idsAreasAsignadas;
                        objRevisionFila.AreasNombAsignadas = nombreAreasAsignadas;


                        //OBTENER FILA REVISIÓN POR ÁREA
                        string msgSolicitud = "";
                        string msgSubsanacion = "";
                        string idValorEstadoSolicitado = "";
                        string idValorEstadoSubsanado = "";
                        objRevisionFila.ListaArchivosSolicitados = new List<FtExtEnvioArchivoDTO>();
                        objRevisionFila.ListaArchivosSubsanados = new List<FtExtEnvioArchivoDTO>();
                        objRevisionFila.LstFilaRevision = new List<RevisionAreas>();
                        foreach (var idAreaRevision in listaAreas)
                        {
                            FtExtEnvioRevareaDTO filaRevision = lstDatosRev.Find(x => x.Ftedatcodi == miFtedatcodi && x.Faremcodi == idAreaRevision && x.Envarestado == "A");
                            if (filaRevision != null)
                            {
                                RevisionAreas revisonArea = new RevisionAreas();
                                var nombreArea = objetosEncontrado.Find(x => x.Faremcodi == idAreaRevision);
                                revisonArea.Nombre = nombreArea.Faremnombre;

                                var mensajeSolicitud = filaRevision.Revahtmlronda1 != null ? filaRevision.Revahtmlronda1.Trim() : "";
                                var mensajeSubsanacion = filaRevision.Revahtmlronda2 != null ? filaRevision.Revahtmlronda2.Trim() : "";
                                var estadoSolicitado = filaRevision.Revaestadoronda1 != null ? ObtenerDescripcionEstadoRev(filaRevision.Revaestadoronda1.Trim()) : "";
                                var estadoSubsanado = filaRevision.Revaestadoronda2 != null ? ObtenerDescripcionEstadoRev(filaRevision.Revaestadoronda2.Trim()) : "";

                                revisonArea.MsgSolicitado = GenerarTextoSinHtml(mensajeSolicitud);
                                revisonArea.MsgSubsanado = GenerarTextoSinHtml(mensajeSubsanacion);
                                revisonArea.MsgHtmlSolicitado = mensajeSolicitud;
                                revisonArea.MsgHtmlSubsanado = mensajeSubsanacion;
                                revisonArea.EstadoSolicitado = estadoSolicitado;
                                revisonArea.EstadoSubsanado = estadoSubsanado;

                                if (mensajeSolicitud != "")
                                    msgSolicitud += "<b>" + nombreArea.Faremnombre + ": </b>" + GenerarTextoSinHtml(mensajeSolicitud);

                                if (mensajeSubsanacion != "")
                                    msgSubsanacion += "<b>" + nombreArea.Faremnombre + ": </b>" + GenerarTextoSinHtml(mensajeSubsanacion);

                                if (estadoSolicitado != "")
                                    idValorEstadoSolicitado += "<b>" + nombreArea.Faremnombre + ": </b>" + estadoSolicitado;

                                if (estadoSubsanado != "")
                                    idValorEstadoSubsanado += "<b>" + nombreArea.Faremnombre + ": </b>" + estadoSubsanado;

                                //busco los archivos de revisiones
                                List<FtExtEnvioArchivoDTO> lstArchivosFila = lstArchivosXRevision.Where(x => x.Revacodi == filaRevision.Revacodi).ToList();

                                var lstArchivosSolicitados = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevAreaSolicitado).ToList();
                                var lstArchivosSubsanado = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevAreaSubsanado).ToList();

                                revisonArea.ListaArchivosSolicitados = lstArchivosSolicitados;
                                revisonArea.ListaArchivosSubsanados = lstArchivosSubsanado;

                                objRevisionFila.LstFilaRevision.Add(revisonArea);

                                if (lstArchivosSolicitados.Any())
                                    objRevisionFila.ListaArchivosSolicitados.AddRange(lstArchivosSolicitados);

                                if (lstArchivosSubsanado.Any())
                                    objRevisionFila.ListaArchivosSubsanados.AddRange(lstArchivosSubsanado);
                            }
                            else
                            {
                                objRevisionFila.MsgSolicitud = "";
                                objRevisionFila.MsgSubsanacion = "";
                                objRevisionFila.IdValorEstadoSolicitado = "";
                                objRevisionFila.IdValorEstadoSubsanado = "";
                            }
                        }

                        objRevisionFila.MsgSolicitud = msgSolicitud;
                        objRevisionFila.MsgSubsanacion = msgSubsanacion;
                        objRevisionFila.IdValorEstadoSolicitado = idValorEstadoSolicitado;
                        objRevisionFila.IdValorEstadoSubsanado = idValorEstadoSubsanado;

                        objRevisionFila.ListaEstadosSolicitado = lstEstados;
                        objRevisionFila.ListaEstadosSubsanado = lstEstados;

                        objRevisionFila.CeldaNombAreasEstaBloqueada = true;
                        objRevisionFila.CeldaRevSolicitudEstaBloqueada = true;
                        objRevisionFila.CeldaEstadoSolicitudEstaBloqueada = true;
                        objRevisionFila.CeldaRevSubsanadoEstaBloqueada = true;
                        objRevisionFila.CeldaEstadoSubsanadoEstaBloqueada = true;

                        objRevisionFila.EsParaAdminFT = true;

                        lstSalida.Add(objRevisionFila);
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Verifica si columna mensaje de areas esta activa o bloqueada
        /// </summary>
        /// <param name="columna"></param>
        /// <param name="estenvcodi"></param>
        /// <param name="strIdsAsignados"></param>
        /// <param name="idFila"></param>
        /// <returns></returns>
        public bool EsCeldaMensajeRevAreasBloqueada(int columna, int estenvcodi, string strIdsAsignados, int idFila)
        {
            bool salida = true;

            if (columna == estenvcodi)
            {
                //si el area esta en el listado de asignados es FALSO
                if (strIdsAsignados != "")
                {
                    List<string> listaIdAsignados = strIdsAsignados.Split(',').Select(x => x.Trim()).ToList();
                    bool flag = listaIdAsignados.Contains(idFila.ToString());

                    if (flag)
                        salida = false;
                }
            }

            return salida;
        }

        /// <summary>
        /// Devuelve el listado de opciones a mostrar en la columna ESTADO para las areas
        /// </summary>
        /// <returns></returns>
        public List<FTOpcionEstado> ObtenerListaEstadosAreas()
        {
            List<FTOpcionEstado> lstSalida = new List<FTOpcionEstado>();

            FTOpcionEstado valOp = new FTOpcionEstado();
            valOp.Codigo = ConstantesFichaTecnica.OpcionConforme;
            valOp.Texto = "Conforme";
            valOp.ValColor = ConstantesFichaTecnica.ColorAzul;
            lstSalida.Add(valOp);

            FTOpcionEstado valOp2 = new FTOpcionEstado();
            valOp2.Codigo = ConstantesFichaTecnica.OpcionObservado;
            valOp2.Texto = "Observado";
            valOp2.ValColor = ConstantesFichaTecnica.ColorRojo;
            lstSalida.Add(valOp2);


            return lstSalida;
        }

        /// <summary>
        /// Devuelve los datos de la revision de areas para opracion comercial y dar de baja
        /// </summary>
        /// <param name="versionEnvio"></param>
        /// <param name="faremcodisTotales"></param>
        /// <param name="nombAreasUsuario"></param>
        /// <param name="idAreaRevision"></param>
        /// <param name="nombAreaRevision"></param>
        /// <returns></returns>
        public List<DatoRevisionAreasContenido> ObtenerDatosRevisionAreasContenido(int versionEnvio, string faremcodisTotales, string nombAreasUsuario, int idAreaRevision, string nombAreaRevision)
        {
            List<DatoRevisionAreasContenido> lstSalida = new List<DatoRevisionAreasContenido>();

            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosAreas();
            FtExtEnvioVersionDTO objVersion = GetByIdFtExtEnvioVersion(versionEnvio);
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(objVersion.Ftenvcodi);
            int miEstenvcodi = objEnvio.Estenvcodi;

            FtExtEnvioAreaDTO envioArea = GetFtExtEnvioAreaByVersionYArea(versionEnvio, idAreaRevision);

            List<FtExtEnvioReqDTO> lstRequisitosPorEnvio = ListByVersionesFtExtEnvioReqs(versionEnvio);
            string strFtereqcodis = string.Join(",", lstRequisitosPorEnvio.Select(x => x.Ftereqcodi).Distinct().ToList());

            if (lstRequisitosPorEnvio.Any())
            {
                List<FtExtRelAreareqDTO> listadoGeneralAreasYFilas = FactorySic.GetFtExtRelAreareqRepository().ListarPorAreas(ConstantesFichaTecnica.EstadoStrActivo, faremcodisTotales);

                //Obtengo revisiones de areas y sus archivos
                List<FtExtEnvioRevareaDTO> lstDatosRev = strFtereqcodis != "" ? FactorySic.GetFtExtEnvioRevareaRepository().ListarRevisionPorAreaVersionYReq(idAreaRevision.ToString(), versionEnvio, strFtereqcodis) : new List<FtExtEnvioRevareaDTO>();

                List<int> lstRevacodis = lstDatosRev.Select(x => x.Revacodi).Distinct().ToList();
                string strRevacodis = string.Join(",", lstRevacodis);

                List<FtExtEnvioArchivoDTO> lstArchivosXRevision = strRevacodis != "" ? FactorySic.GetFtExtEnvioArchivoRepository().ListByRevisionAreas(strRevacodis) : new List<FtExtEnvioArchivoDTO>();

                //Para subsanados: Obtengo revision de bloque amarillo para obtener su estado elegido 
                List<FtExtEnvioRevisionDTO> lstDatosRevBloqueAdministracion = new List<FtExtEnvioRevisionDTO>();
                if (miEstenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    lstDatosRevBloqueAdministracion = GetByCriteriaFtExtEnvioRevisionsXVersionYReq(versionEnvio);
                }

                foreach (var requisito in lstRequisitosPorEnvio)
                {
                    int miFevrqcodi = requisito.Fevrqcodi;
                    int miFtereqcodi = requisito.Ftereqcodi;

                    string nombreAreasAsignadas = "";
                    string idsAreasAsignadas = "";
                    List<FtExtRelAreareqDTO> objetosEncontrado = listadoGeneralAreasYFilas.Where(x => x.Fevrqcodi == miFevrqcodi).OrderBy(x => x.Faremnombre).ToList();
                    if (objetosEncontrado.Any())
                    {
                        nombreAreasAsignadas = string.Join(", ", objetosEncontrado.Select(x => x.Faremnombre).Distinct().ToList());
                        idsAreasAsignadas = string.Join(",", objetosEncontrado.Select(x => x.Faremcodi).Distinct().ToList());
                    }

                    //si es subsanado verifico si el estado elegido en ESTADO es CONFORME O SUBSANADO, si es conforme bloqueo revision de areas
                    FtExtEnvioRevisionDTO filaAfminFT = lstDatosRevBloqueAdministracion.Find(x => x.Fevrqcodi == miFevrqcodi);
                    string estadoElegidoEnAdminFT = filaAfminFT != null ? (filaAfminFT.Ftrevestado != null ? filaAfminFT.Ftrevestado.Trim() : "") : "";

                    //Verifico si la fila es revisable o no
                    List<string> listaIdAsignados = idsAreasAsignadas.Split(',').ToList();
                    bool esFilaRevisable = estadoElegidoEnAdminFT == ConstantesFichaTecnica.OpcionConforme ? false :
                                        (requisito.EsFilaRevisableIntranet ? listaIdAsignados.Contains(idAreaRevision.ToString()) : false);

                    //Lleno la data
                    DatoRevisionAreasContenido objRevisionFila = new DatoRevisionAreasContenido();

                    objRevisionFila.Estenvcodi = miEstenvcodi;
                    objRevisionFila.EsFilaRevisable = esFilaRevisable;

                    objRevisionFila.Fevrqcodi = miFevrqcodi;
                    objRevisionFila.Ftereqcodi = requisito.Ftereqcodi;
                    objRevisionFila.Literal = requisito.Fevrqliteral;

                    objRevisionFila.AreaIdEnRevision = idAreaRevision;
                    objRevisionFila.AreaNombEnRevision = nombAreaRevision;
                    objRevisionFila.AreasIdsStrAsignadas = idsAreasAsignadas;
                    objRevisionFila.AreasNombAsignadas = nombreAreasAsignadas;

                    FtExtEnvioRevareaDTO filaRevision = lstDatosRev.Find(x => x.Ftereqcodi == miFtereqcodi);

                    if (filaRevision != null)
                    {
                        objRevisionFila.MsgSolicitud = filaRevision.Revahtmlronda1 != null ? filaRevision.Revahtmlronda1.Trim() : "";
                        objRevisionFila.MsgSubsanacion = filaRevision.Revahtmlronda2 != null ? filaRevision.Revahtmlronda2.Trim() : "";
                        objRevisionFila.IdValorEstadoSolicitado = filaRevision.Revaestadoronda1 != null ? filaRevision.Revaestadoronda1.Trim() : "";
                        objRevisionFila.IdValorEstadoSubsanado = filaRevision.Revaestadoronda2 != null ? filaRevision.Revaestadoronda2.Trim() : "";
                        objRevisionFila.ColorValEstadoSolicitado = ObtenerColorTextoEstado(filaRevision.Revaestadoronda1);
                        objRevisionFila.ColorValEstadoSubsanado = ObtenerColorTextoEstado(filaRevision.Revaestadoronda2);

                        //busco los archivos de revisiones
                        List<FtExtEnvioArchivoDTO> lstArchivosFila = lstArchivosXRevision.Where(x => x.Revacodi == filaRevision.Revacodi).ToList();

                        objRevisionFila.ListaArchivosSolicitados = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevAreaSolicitado).ToList();
                        objRevisionFila.ListaArchivosSubsanados = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevAreaSubsanado).ToList();
                    }
                    else
                    {
                        objRevisionFila.MsgSolicitud = "";
                        objRevisionFila.MsgSubsanacion = "";
                        objRevisionFila.IdValorEstadoSolicitado = "";
                        objRevisionFila.IdValorEstadoSubsanado = "";

                        objRevisionFila.ListaArchivosSolicitados = new List<FtExtEnvioArchivoDTO>();
                        objRevisionFila.ListaArchivosSubsanados = new List<FtExtEnvioArchivoDTO>();
                    }

                    //para que muestre listado o no
                    if (requisito.EsFilaRevisableIntranet)
                    {
                        objRevisionFila.ListaEstadosSolicitado = lstEstados;
                        objRevisionFila.ListaEstadosSubsanado = lstEstados;
                    }
                    else
                    {
                        objRevisionFila.ListaEstadosSolicitado = new List<FTOpcionEstado>();
                        objRevisionFila.ListaEstadosSubsanado = new List<FTOpcionEstado>();
                        objRevisionFila.AreasNombAsignadas = "";
                    }

                    if (objRevisionFila.EsFilaRevisable)
                    {
                        objRevisionFila.CeldaNombAreasEstaBloqueada = true;
                        objRevisionFila.CeldaRevSolicitudEstaBloqueada = EsCeldaMensajeRevAreasBloqueada(ConstantesFichaTecnica.EstadoSolicitud, miEstenvcodi, idsAreasAsignadas, idAreaRevision);
                        objRevisionFila.CeldaEstadoSolicitudEstaBloqueada = EsCeldaMensajeRevAreasBloqueada(ConstantesFichaTecnica.EstadoSolicitud, miEstenvcodi, idsAreasAsignadas, idAreaRevision);
                        objRevisionFila.CeldaRevSubsanadoEstaBloqueada = EsCeldaMensajeRevAreasBloqueada(ConstantesFichaTecnica.EstadoSubsanacionObs, miEstenvcodi, idsAreasAsignadas, idAreaRevision);
                        objRevisionFila.CeldaEstadoSubsanadoEstaBloqueada = EsCeldaMensajeRevAreasBloqueada(ConstantesFichaTecnica.EstadoSubsanacionObs, miEstenvcodi, idsAreasAsignadas, idAreaRevision);
                    }
                    else
                    {
                        objRevisionFila.CeldaNombAreasEstaBloqueada = true;
                        objRevisionFila.CeldaRevSolicitudEstaBloqueada = true;
                        objRevisionFila.CeldaEstadoSolicitudEstaBloqueada = true;
                        objRevisionFila.CeldaRevSubsanadoEstaBloqueada = true;
                        objRevisionFila.CeldaEstadoSubsanadoEstaBloqueada = true;
                    }

                    objRevisionFila.TipoEstado = envioArea.Envarestado;

                    lstSalida.Add(objRevisionFila);

                }

            }


            return lstSalida;
        }

        public List<DatoRevisionAreasContenido> ObtenerDatosRevisionAreasContenidoCOESFT(int versionEnvio, string faremcodisUsuario)
        {
            List<DatoRevisionAreasContenido> lstSalida = new List<DatoRevisionAreasContenido>();

            List<FTOpcionEstado> lstEstados = ObtenerListaEstadosAreas();
            FtExtEnvioVersionDTO objVersion = GetByIdFtExtEnvioVersion(versionEnvio);
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(objVersion.Ftenvcodi);
            int miEstenvcodi = objEnvio.Estenvcodi;

            List<FtExtEnvioReqDTO> lstRequisitosPorEnvio = ListByVersionesFtExtEnvioReqs(versionEnvio);
            string strFtereqcodis = string.Join(",", lstRequisitosPorEnvio.Select(x => x.Ftereqcodi).Distinct().ToList());

            if (lstRequisitosPorEnvio.Any() && !string.IsNullOrEmpty(faremcodisUsuario))
            {
                List<FtExtRelAreareqDTO> listadoGeneralAreasYFilas = FactorySic.GetFtExtRelAreareqRepository().ListarPorAreas(ConstantesFichaTecnica.EstadoStrActivo, faremcodisUsuario);

                List<FtExtEnvioRevareaDTO> lstDatosRev = new List<FtExtEnvioRevareaDTO>();
                List<int> listaAreas = faremcodisUsuario.Split(',').Select(int.Parse).ToList();

                List<FtExtEnvioRevareaDTO> listarevisonArea = strFtereqcodis != "" ? FactorySic.GetFtExtEnvioRevareaRepository().ListarRevisionPorAreaVersionYReq(faremcodisUsuario, versionEnvio, strFtereqcodis) : new List<FtExtEnvioRevareaDTO>();
                lstDatosRev.AddRange(listarevisonArea);

                List<int> lstRevacodis = lstDatosRev.Select(x => x.Revacodi).Distinct().ToList();
                string strRevacodis = string.Join(",", lstRevacodis);

                List<FtExtEnvioArchivoDTO> lstArchivosXRevision = strRevacodis != "" ? FactorySic.GetFtExtEnvioArchivoRepository().ListByRevisionAreas(strRevacodis) : new List<FtExtEnvioArchivoDTO>();


                //Para subsanados: Obtengo revision de bloque amarillo para obtener su estado elegido 
                List<FtExtEnvioRevisionDTO> lstDatosRevBloqueAdministracion = new List<FtExtEnvioRevisionDTO>();
                if (miEstenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    lstDatosRevBloqueAdministracion = GetByCriteriaFtExtEnvioRevisionsXVersionYReq(versionEnvio);
                }

                foreach (var requisito in lstRequisitosPorEnvio)
                {
                    int miFevrqcodi = requisito.Fevrqcodi;
                    int miFtereqcodi = requisito.Ftereqcodi;

                    bool esFilaRevisable = false;
                    string nombreAreasAsignadas = "";
                    string idsAreasAsignadas = "";
                    List<FtExtRelAreareqDTO> objetosEncontrado = listadoGeneralAreasYFilas.Where(x => x.Fevrqcodi == miFevrqcodi).OrderBy(x => x.Faremnombre).ToList();
                    if (objetosEncontrado.Any())
                    {
                        nombreAreasAsignadas = string.Join(", ", objetosEncontrado.Select(x => x.Faremnombre).Distinct().ToList());
                        idsAreasAsignadas = string.Join(",", objetosEncontrado.Select(x => x.Faremcodi).Distinct().ToList());
                    }

                    //Lleno la data
                    DatoRevisionAreasContenido objRevisionFila = new DatoRevisionAreasContenido();

                    objRevisionFila.Estenvcodi = miEstenvcodi;
                    objRevisionFila.EsFilaRevisable = esFilaRevisable;

                    objRevisionFila.Fevrqcodi = miFevrqcodi;
                    objRevisionFila.Literal = requisito.Fevrqliteral;

                    objRevisionFila.AreasIdsStrAsignadas = idsAreasAsignadas;
                    objRevisionFila.AreasNombAsignadas = nombreAreasAsignadas;

                    string msgSolicitud = "";
                    string msgSubsanacion = "";
                    string idValorEstadoSolicitado = "";
                    string idValorEstadoSubsanado = "";
                    objRevisionFila.LstFilaRevision = new List<RevisionAreas>();
                    objRevisionFila.ListaArchivosSolicitados = new List<FtExtEnvioArchivoDTO>();
                    objRevisionFila.ListaArchivosSubsanados = new List<FtExtEnvioArchivoDTO>();
                    foreach (var idAreaRevision in listaAreas)
                    {
                        FtExtEnvioRevareaDTO filaRevision = lstDatosRev.Find(x => x.Ftereqcodi == miFtereqcodi && x.Faremcodi == idAreaRevision && x.Envarestado == "A");
                        //FtExtEnvioRevareaDTO filaRevision = lstDatosRev.Find(x => x.Fevrqcodi == miFevrqcodi);
                        if (filaRevision != null)
                        {
                            RevisionAreas revisonArea = new RevisionAreas();
                            var nombreArea = objetosEncontrado.Find(x => x.Faremcodi == idAreaRevision);

                            var mensajeSolicitud = filaRevision.Revahtmlronda1 != null ? filaRevision.Revahtmlronda1.Trim() : "";
                            var mensajeSubsanacion = filaRevision.Revahtmlronda2 != null ? filaRevision.Revahtmlronda2.Trim() : "";
                            var estadoSolicitado = filaRevision.Revaestadoronda1 != null ? ObtenerDescripcionEstadoRev(filaRevision.Revaestadoronda1.Trim()) : "";
                            var estadoSubsanado = filaRevision.Revaestadoronda2 != null ? ObtenerDescripcionEstadoRev(filaRevision.Revaestadoronda2.Trim()) : "";

                            revisonArea.Nombre = nombreArea.Faremnombre;
                            revisonArea.MsgSolicitado = GenerarTextoSinHtml(mensajeSolicitud);
                            revisonArea.MsgSubsanado = GenerarTextoSinHtml(mensajeSubsanacion);
                            revisonArea.MsgHtmlSolicitado = mensajeSolicitud;
                            revisonArea.MsgHtmlSubsanado = mensajeSubsanacion;
                            revisonArea.EstadoSolicitado = estadoSolicitado;
                            revisonArea.EstadoSubsanado = estadoSubsanado;

                            if (mensajeSolicitud != "")
                                msgSolicitud += "<b>" + nombreArea.Faremnombre + ": </b>" + GenerarTextoSinHtml(mensajeSolicitud);

                            if (mensajeSubsanacion != "")
                                msgSubsanacion += "<b>" + nombreArea.Faremnombre + ": </b>" + GenerarTextoSinHtml(mensajeSubsanacion);

                            if (estadoSolicitado != "")
                                idValorEstadoSolicitado += "<b>" + nombreArea.Faremnombre + ": </b>" + estadoSolicitado;

                            if (estadoSubsanado != "")
                                idValorEstadoSubsanado += "<b>" + nombreArea.Faremnombre + ": </b>" + estadoSubsanado;

                            //busco los archivos de revisiones
                            List<FtExtEnvioArchivoDTO> lstArchivosFila = lstArchivosXRevision.Where(x => x.Revacodi == filaRevision.Revacodi).ToList();

                            var lstArchivosSolicitados = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevAreaSolicitado).ToList();
                            var lstArchivosSubsanado = lstArchivosFila.Where(x => x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoRevAreaSubsanado).ToList();

                            revisonArea.ListaArchivosSolicitados = lstArchivosSolicitados;
                            revisonArea.ListaArchivosSubsanados = lstArchivosSubsanado;

                            objRevisionFila.LstFilaRevision.Add(revisonArea);

                            if (lstArchivosSolicitados.Any())
                                objRevisionFila.ListaArchivosSolicitados.AddRange(lstArchivosSolicitados);

                            if (lstArchivosSubsanado.Any())
                                objRevisionFila.ListaArchivosSubsanados.AddRange(lstArchivosSubsanado);

                        }
                        else
                        {
                            objRevisionFila.MsgSolicitud = "";
                            objRevisionFila.MsgSubsanacion = "";
                            objRevisionFila.IdValorEstadoSolicitado = "";
                            objRevisionFila.IdValorEstadoSubsanado = "";
                        }
                    }


                    objRevisionFila.MsgSolicitud = msgSolicitud;
                    objRevisionFila.MsgSubsanacion = msgSubsanacion;
                    objRevisionFila.IdValorEstadoSolicitado = idValorEstadoSolicitado;
                    objRevisionFila.IdValorEstadoSubsanado = idValorEstadoSubsanado;

                    objRevisionFila.ListaEstadosSolicitado = lstEstados;
                    objRevisionFila.ListaEstadosSubsanado = lstEstados;

                    objRevisionFila.CeldaNombAreasEstaBloqueada = true;
                    objRevisionFila.CeldaRevSolicitudEstaBloqueada = true;
                    objRevisionFila.CeldaEstadoSolicitudEstaBloqueada = true;
                    objRevisionFila.CeldaRevSubsanadoEstaBloqueada = true;
                    objRevisionFila.CeldaEstadoSubsanadoEstaBloqueada = true;

                    objRevisionFila.EsParaAdminFT = true;

                    lstSalida.Add(objRevisionFila);

                }

            }


            return lstSalida;
        }

        /// <summary>
        /// Guarda los avances de las revisiones de areas
        /// </summary>
        /// <param name="modelWeb"></param>
        /// <param name="usuarioIntranet"></param>
        /// <param name="datosArchivo"></param>
        public void GuardarAvanceRevisionAreas(FTReporteExcelAreas modelWeb, int tipoFormato)
        {

            List<DatoRevisionAreasFT> lstRevisionFT = modelWeb.ListaRevisionFT;
            List<DatoRevisionAreasContenido> lstRevisionContenido = modelWeb.ListaRevisionContenido;
            int miFaremcodi = modelWeb.Faremcodi;
            int miFtenvcodi = modelWeb.Ftenvcodi;
            int miFtevercodi = modelWeb.Ftevercodi;
            int miFteeqcodi = modelWeb.Fteeqcodi; //puede ser nulo

            //Encuentro el envarcodi correspondiente a la version y area
            List<FtExtEnvioAreaDTO> enviosAreaPorVersion = FactorySic.GetFtExtEnvioAreaRepository().ListarPorVersiones(miFtevercodi.ToString());
            FtExtEnvioAreaDTO envioPorArea = enviosAreaPorVersion.Find(x => x.Faremcodi == miFaremcodi);
            if (envioPorArea == null) throw new ArgumentException("No se encontró relacion con un área para esta versión del envío.");
            int miEnvarcodi = envioPorArea.Envarcodi;

            List<FtExtEnvioRevareaDTO> lstRevisionFila = new List<FtExtEnvioRevareaDTO>();

            //para los que tienen Ficha Tecnica
            if (tipoFormato == ConstantesFichaTecnica.FormatoConexIntegModif)
            {
                //Solo guardo aquellas filas que tienen permitido revisar, es decir, aquellas filas donde el area haya sido asignada a revisar
                List<DatoRevisionAreasFT> lstRevisionRevisables = lstRevisionFT.Where(x => x.EsFilaRevisable == true).ToList();


                foreach (var filaRevisable in lstRevisionRevisables)
                {
                    FtExtEnvioRevareaDTO objRevision = new FtExtEnvioRevareaDTO();
                    objRevision.Revaestadoronda1 = filaRevisable.IdValorEstadoSolicitado;
                    objRevision.Revahtmlronda1 = filaRevisable.MsgSolicitud;
                    objRevision.Revaestadoronda2 = filaRevisable.IdValorEstadoSubsanado;
                    objRevision.Revahtmlronda2 = filaRevisable.MsgSubsanacion;
                    objRevision.Ftevercodi = miFtevercodi;

                    FtExtEnvioReldatorevareaDTO objRel = new FtExtEnvioReldatorevareaDTO();
                    objRel.Ftedatcodi = filaRevisable.Ftedatcodi.Value;
                    objRel.Envarcodi = miEnvarcodi;
                    objRel.Ftevercodi = miFtevercodi;

                    objRevision.RelacionDatoRevisionArea = objRel;

                    List<FtExtEnvioArchivoDTO> lstArchivosSolicitados = filaRevisable.ListaArchivosSolicitados != null ? filaRevisable.ListaArchivosSolicitados : new List<FtExtEnvioArchivoDTO>();
                    List<FtExtEnvioArchivoDTO> lstArchivosSubsanados = filaRevisable.ListaArchivosSubsanados != null ? filaRevisable.ListaArchivosSubsanados : new List<FtExtEnvioArchivoDTO>();

                    List<FtExtEnvioArchivoDTO> lstArchivosTotales = new List<FtExtEnvioArchivoDTO>();
                    //Archivos solicitados
                    List<FtExtEnvioArchivoDTO> lstArchivosRevSolicitados = new List<FtExtEnvioArchivoDTO>();
                    foreach (var archSolicitado in lstArchivosSolicitados)
                    {
                        FtExtEnvioArchivoDTO objArchivo = new FtExtEnvioArchivoDTO();
                        objArchivo.Ftearcnombreoriginal = archSolicitado.Ftearcnombreoriginal;
                        objArchivo.Ftearcnombrefisico = archSolicitado.Ftearcnombrefisico;
                        objArchivo.Ftearcestado = 1;
                        objArchivo.Ftearctipo = ConstantesFichaTecnica.TipoArchivoRevAreaSolicitado;

                        FtExtEnvioRelrevareaarchivoDTO objRelArchRevArea = new FtExtEnvioRelrevareaarchivoDTO();
                        objRelArchRevArea.Ftevercodi = miFtevercodi;

                        objArchivo.RelacionArchivoRevArea = objRelArchRevArea;

                        lstArchivosRevSolicitados.Add(objArchivo);
                    }
                    lstArchivosTotales.AddRange(lstArchivosRevSolicitados);

                    //Archivos subsanados
                    List<FtExtEnvioArchivoDTO> lstArchivosRevSubsanados = new List<FtExtEnvioArchivoDTO>();
                    foreach (var archSubsanado in lstArchivosSubsanados)
                    {
                        FtExtEnvioArchivoDTO objArchivo = new FtExtEnvioArchivoDTO();
                        objArchivo.Ftearcnombreoriginal = archSubsanado.Ftearcnombreoriginal;
                        objArchivo.Ftearcnombrefisico = archSubsanado.Ftearcnombrefisico;
                        objArchivo.Ftearcestado = 1;
                        objArchivo.Ftearctipo = ConstantesFichaTecnica.TipoArchivoRevAreaSubsanado;

                        FtExtEnvioRelrevareaarchivoDTO objRelArchRevArea = new FtExtEnvioRelrevareaarchivoDTO();
                        objRelArchRevArea.Ftevercodi = miFtevercodi;

                        objArchivo.RelacionArchivoRevArea = objRelArchRevArea;

                        lstArchivosRevSubsanados.Add(objArchivo);
                    }
                    lstArchivosTotales.AddRange(lstArchivosRevSubsanados);

                    objRevision.ListaArchivosRev = lstArchivosTotales;

                    lstRevisionFila.Add(objRevision);
                }
            }
            else
            {
                if (tipoFormato == ConstantesFichaTecnica.FormatoOperacionComercial || tipoFormato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                {
                    //Solo guardo aquellas filas que tienen permitido revisar, es decir, aquellas filas donde el area haya sido asignada a revisar
                    List<DatoRevisionAreasContenido> lstRevisionRevisables = lstRevisionContenido.Where(x => x.EsFilaRevisable == true).ToList();


                    foreach (var filaRevisable in lstRevisionRevisables)
                    {
                        FtExtEnvioRevareaDTO objRevision = new FtExtEnvioRevareaDTO();
                        objRevision.Revaestadoronda1 = filaRevisable.IdValorEstadoSolicitado;
                        objRevision.Revahtmlronda1 = filaRevisable.MsgSolicitud;
                        objRevision.Revaestadoronda2 = filaRevisable.IdValorEstadoSubsanado;
                        objRevision.Revahtmlronda2 = filaRevisable.MsgSubsanacion;
                        objRevision.Ftevercodi = miFtevercodi;

                        FtExtEnvioRelreqrevareaDTO objRel = new FtExtEnvioRelreqrevareaDTO();
                        objRel.Ftereqcodi = filaRevisable.Ftereqcodi.Value;
                        objRel.Envarcodi = miEnvarcodi;
                        objRel.Ftevercodi = miFtevercodi;

                        objRevision.RelacionReqRevisionArea = objRel;

                        List<FtExtEnvioArchivoDTO> lstArchivosSolicitados = filaRevisable.ListaArchivosSolicitados != null ? filaRevisable.ListaArchivosSolicitados : new List<FtExtEnvioArchivoDTO>();
                        List<FtExtEnvioArchivoDTO> lstArchivosSubsanados = filaRevisable.ListaArchivosSubsanados != null ? filaRevisable.ListaArchivosSubsanados : new List<FtExtEnvioArchivoDTO>();

                        List<FtExtEnvioArchivoDTO> lstArchivosTotales = new List<FtExtEnvioArchivoDTO>();

                        //Archivos solicitados
                        List<FtExtEnvioArchivoDTO> lstArchivosRevSolicitados = new List<FtExtEnvioArchivoDTO>();
                        foreach (var archSolicitado in lstArchivosSolicitados)
                        {
                            FtExtEnvioArchivoDTO objArchivo = new FtExtEnvioArchivoDTO();
                            objArchivo.Ftearcnombreoriginal = archSolicitado.Ftearcnombreoriginal;
                            objArchivo.Ftearcnombrefisico = archSolicitado.Ftearcnombrefisico;
                            objArchivo.Ftearcestado = 1;
                            objArchivo.Ftearctipo = ConstantesFichaTecnica.TipoArchivoRevAreaSolicitado;

                            FtExtEnvioRelrevareaarchivoDTO objRelArchRevArea = new FtExtEnvioRelrevareaarchivoDTO();
                            objRelArchRevArea.Ftevercodi = miFtevercodi;

                            objArchivo.RelacionArchivoRevArea = objRelArchRevArea;

                            lstArchivosRevSolicitados.Add(objArchivo);
                        }
                        lstArchivosTotales.AddRange(lstArchivosRevSolicitados);

                        //Archivos subsanados
                        List<FtExtEnvioArchivoDTO> lstArchivosRevSubsanados = new List<FtExtEnvioArchivoDTO>();
                        foreach (var archSubsanado in lstArchivosSubsanados)
                        {
                            FtExtEnvioArchivoDTO objArchivo = new FtExtEnvioArchivoDTO();
                            objArchivo.Ftearcnombreoriginal = archSubsanado.Ftearcnombreoriginal;
                            objArchivo.Ftearcnombrefisico = archSubsanado.Ftearcnombrefisico;
                            objArchivo.Ftearcestado = 1;
                            objArchivo.Ftearctipo = ConstantesFichaTecnica.TipoArchivoRevAreaSubsanado;

                            FtExtEnvioRelrevareaarchivoDTO objRelArchRevArea = new FtExtEnvioRelrevareaarchivoDTO();
                            objRelArchRevArea.Ftevercodi = miFtevercodi;

                            objArchivo.RelacionArchivoRevArea = objRelArchRevArea;

                            lstArchivosRevSubsanados.Add(objArchivo);
                        }
                        lstArchivosTotales.AddRange(lstArchivosRevSubsanados);

                        objRevision.ListaArchivosRev = lstArchivosTotales;

                        lstRevisionFila.Add(objRevision);
                    }
                }
            }

            if (lstRevisionFila.Any())
            {
                if (tipoFormato == ConstantesFichaTecnica.FormatoConexIntegModif)
                    GuardarDatosRevisionAreaFTTransaccional(lstRevisionFila, miFtevercodi, miFaremcodi, miFteeqcodi);

                if (tipoFormato == ConstantesFichaTecnica.FormatoOperacionComercial || tipoFormato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                    GuardarDatosRevisionAreaContenidoTransaccional(lstRevisionFila, miFtevercodi, miFaremcodi, tipoFormato);
            }


        }

        /// <summary>
        /// Guarda la informacion de revision de las areas de manera transaccional
        /// </summary>
        /// <param name="lstRevisionFilas"></param>
        /// <param name="version"></param>
        /// <param name="fteeqcodi"></param>
        private void GuardarDatosRevisionAreaFTTransaccional(List<FtExtEnvioRevareaDTO> lstRevisionFilas, int version, int faremcodi, int fteeqcodi)
        {
            //Guardar en bd
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //correlativos
                int correlativoRevadcodi = FactorySic.GetFtExtEnvioReldatorevareaRepository().GetMaxId();
                int correlativoRevaacodi = FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().GetMaxId();
                int correlativoFtearccodi = FactorySic.GetFtExtEnvioArchivoRepository().GetMaxId();
                int correlativoRevacodi = FactorySic.GetFtExtEnvioRevareaRepository().GetMaxId();


                //Elimino por version de la BD
                List<FtExtEnvioReldatorevareaDTO> lstRel1 = FactorySic.GetFtExtEnvioReldatorevareaRepository().ListarRelacionesPorVersionAreaYEquipo(version, faremcodi, fteeqcodi);
                string strRevadcodis = string.Join(",", lstRel1.Select(x => x.Revadcodi).Distinct().ToList());

                List<FtExtEnvioRelrevareaarchivoDTO> lstRel2 = FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().ListarRelacionesPorVersionAreaYEquipo(version, faremcodi, fteeqcodi);
                string strRevaacodis = string.Join(",", lstRel2.Select(x => x.Revaacodi).Distinct().ToList());

                List<FtExtEnvioArchivoDTO> lstRel3 = ListFtExtEnvioArchivosByVersionAreaYEquipo(version, faremcodi, fteeqcodi);
                string strFtearccodis = string.Join(",", lstRel3.Select(x => x.Ftearccodi).Distinct().ToList());

                List<FtExtEnvioRevareaDTO> lstRel4 = FactorySic.GetFtExtEnvioRevareaRepository().ListarRelacionesPorVersionAreaYEquipo(version, faremcodi, fteeqcodi);
                string strRevacodis = string.Join(",", lstRel4.Select(x => x.Revacodi).Distinct().ToList());

                if (strRevadcodis != "") DeleteFtExtEnvioReldatorevareaPorIds(strRevadcodis, conn, tran);
                if (strRevaacodis != "") DeleteFtExtEnvioRelrevareaarchivoPorIds(strRevaacodis, conn, tran);
                if (strFtearccodis != "") DeleteFtExtEnvioArchivoPorIds(strFtearccodis, conn, tran);
                if (strRevacodis != "") DeleteFtExtEnvioRevareaPorIds(strRevacodis, conn, tran);




                //Ahora guardo la info 
                foreach (FtExtEnvioRevareaDTO fila in lstRevisionFilas)
                {
                    fila.Revacodi = correlativoRevacodi;
                    SaveFtExtEnvioRevarea(fila, conn, tran);

                    fila.RelacionDatoRevisionArea.Revacodi = correlativoRevacodi;
                    fila.RelacionDatoRevisionArea.Revadcodi = correlativoRevadcodi;
                    SaveFtExtEnvioReldatorevarea(fila.RelacionDatoRevisionArea, conn, tran);

                    List<FtExtEnvioArchivoDTO> listaArchivosRev = fila.ListaArchivosRev;
                    foreach (FtExtEnvioArchivoDTO archivo in listaArchivosRev)
                    {
                        archivo.Ftearccodi = correlativoFtearccodi;
                        SaveFtExtEnvioArchivo(archivo, conn, tran);

                        archivo.RelacionArchivoRevArea.Revaacodi = correlativoRevaacodi;
                        archivo.RelacionArchivoRevArea.Revacodi = correlativoRevacodi;
                        archivo.RelacionArchivoRevArea.Ftearccodi = correlativoFtearccodi;
                        SaveFtExtEnvioRelrevareaarchivo(archivo.RelacionArchivoRevArea, conn, tran);

                        correlativoRevaacodi++;
                        correlativoFtearccodi++;
                    }

                    correlativoRevadcodi++;
                    correlativoRevacodi++;
                }



                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al guardar datos. Error: " + ex.Message);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private void GuardarDatosRevisionAreaContenidoTransaccional(List<FtExtEnvioRevareaDTO> lstRevisionFilas, int version, int faremcodi, int tipoFormato)
        {
            //Guardar en bd
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //correlativos
                int correlativoRevarqcodi = FactorySic.GetFtExtEnvioRelreqrevareaRepository().GetMaxId();
                int correlativoRevaacodi = FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().GetMaxId();
                int correlativoFtearccodi = FactorySic.GetFtExtEnvioArchivoRepository().GetMaxId();
                int correlativoRevacodi = FactorySic.GetFtExtEnvioRevareaRepository().GetMaxId();


                //Elimino por version de la BD
                List<FtExtEnvioRelreqrevareaDTO> lstRel1 = FactorySic.GetFtExtEnvioRelreqrevareaRepository().ListarRelacionesPorVersionArea(version, faremcodi);
                string strRevarqcodis = string.Join(",", lstRel1.Select(x => x.Revarqcodi).Distinct().ToList());

                List<FtExtEnvioRelrevareaarchivoDTO> lstRel2 = FactorySic.GetFtExtEnvioRelrevareaarchivoRepository().ListarRelacionesContenidoPorVersionArea(version, faremcodi);
                string strRevaacodis = string.Join(",", lstRel2.Select(x => x.Revaacodi).Distinct().ToList());

                List<FtExtEnvioArchivoDTO> lstRel3 = FactorySic.GetFtExtEnvioArchivoRepository().ListarRelacionesContenidoPorVersionArea(version, faremcodi);
                string strFtearccodis = string.Join(",", lstRel3.Select(x => x.Ftearccodi).Distinct().ToList());

                List<FtExtEnvioRevareaDTO> lstRel4 = FactorySic.GetFtExtEnvioRevareaRepository().ListarRelacionesContenidoPorVersionArea(version, faremcodi);
                string strRevacodis = string.Join(",", lstRel4.Select(x => x.Revacodi).Distinct().ToList());

                if (strRevarqcodis != "") DeleteFtExtEnvioRelreqrevareaPorIds(strRevarqcodis, conn, tran);
                if (strRevaacodis != "") DeleteFtExtEnvioRelrevareaarchivoPorIds(strRevaacodis, conn, tran);
                if (strFtearccodis != "") DeleteFtExtEnvioArchivoPorIds(strFtearccodis, conn, tran);
                if (strRevacodis != "") DeleteFtExtEnvioRevareaPorIds(strRevacodis, conn, tran);




                //Ahora guardo la info 
                foreach (FtExtEnvioRevareaDTO fila in lstRevisionFilas)
                {
                    fila.Revacodi = correlativoRevacodi;
                    SaveFtExtEnvioRevarea(fila, conn, tran);

                    fila.RelacionReqRevisionArea.Revacodi = correlativoRevacodi;
                    fila.RelacionReqRevisionArea.Revarqcodi = correlativoRevarqcodi;
                    SaveFtExtEnvioRelreqrevarea(fila.RelacionReqRevisionArea, conn, tran);

                    List<FtExtEnvioArchivoDTO> listaArchivosRev = fila.ListaArchivosRev;
                    foreach (FtExtEnvioArchivoDTO archivo in listaArchivosRev)
                    {
                        archivo.Ftearccodi = correlativoFtearccodi;
                        SaveFtExtEnvioArchivo(archivo, conn, tran);

                        archivo.RelacionArchivoRevArea.Revaacodi = correlativoRevaacodi;
                        archivo.RelacionArchivoRevArea.Revacodi = correlativoRevacodi;
                        archivo.RelacionArchivoRevArea.Ftearccodi = correlativoFtearccodi;
                        SaveFtExtEnvioRelrevareaarchivo(archivo.RelacionArchivoRevArea, conn, tran);

                        correlativoRevaacodi++;
                        correlativoFtearccodi++;
                    }

                    correlativoRevarqcodi++;
                    correlativoRevacodi++;
                }



                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al guardar datos. Error: " + ex.Message);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        public void GuardarArchivosRevAreasAlFileServer(string currentUserSession, int idEnvio, int idVersion, List<int> listaCodigosFila, List<string> listaArchivoFisicoAGuardar)
        {
            List<string> listaTipoArchivo = new List<string>() { ConstantesFichaTecnica.STipoArchivoAreaRevision };

            foreach (var tipoArchivo in listaTipoArchivo)
            {
                foreach (var idCodigoFila in listaCodigosFila)
                {
                    //2. copiar temporales a la carpeta final
                    var listaArchivosTemporales = new List<FileData>(); // ListarArchivoEnvioTemporal(currentUserSession, idCodigoFila, tipoArchivo);

                    string pathAlternativo = GetPathPrincipal(); //LocalDirectory

                    //pathTemporal = Extranet/FichaTecnicaEtapa2/Temporal/{usuario}/envio_0/version_0/{tipoArchivo/{idCodigoFila}
                    //pathDestino = Extranet/FichaTecnicaEtapa2/Solicitud_Agente/envio_{idEnvio}/version_{version}/{tipoArchivo/{idCodigoFila}}
                    string pathTemporal = GetPathSubcarpeta(ConstantesFichaTecnica.CarpetaTemporal) + currentUserSession + @"/" + GetSubcarpetaEnvio(0, 0, idCodigoFila, tipoArchivo); //termina sin /
                    string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + GetSubcarpetaEnvio(idEnvio, idVersion, idCodigoFila, tipoArchivo);

                    //string pathVersionAnt = "";
                    //List<FileData> listaDocumentosVerAnt = new List<FileData>();
                    //if (idVersionAnterior != 0)
                    //{
                    //    pathVersionAnt = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + GetSubcarpetaEnvio(idEnvio, idVersionAnterior, idCodigoFila, tipoArchivo);
                    //    listaDocumentosVerAnt = ListarArchivoEnvioPorTipo(currentUserSession, pathVersionAnt);
                    //}



                    try
                    {
                        string path = pathAlternativo + pathDestino;
                        if (!Directory.Exists(path))
                        {
                            FileServer.CreateFolder("", pathDestino, pathAlternativo);
                        }

                        //FileServer.DeleteFolderAlter(pathDestino, pathAlternativo);//eliminar carpeta existente

                        if (listaArchivosTemporales.Any())
                        //if (listaArchivosTemporales.Any() || listaDocumentosVerAnt.Any())
                        {
                            //FileServer.CreateFolder("", pathDestino, pathAlternativo);

                            //copio archivos nuevos de la subsanacion
                            foreach (var reg in listaArchivosTemporales)
                            {
                                if (listaArchivoFisicoAGuardar.Contains(reg.FileName)) //solo mover / copiar los archivos a procesar
                                {

                                    FileServer.CopyBlob("", pathTemporal + "/" + reg.FileName, pathDestino + "/" + reg.FileName, pathAlternativo);
                                }
                            }

                            ////Copio los archivos que no fueron modificados (de la version anterior)
                            //foreach (var reg in listaDocumentosVerAnt)
                            //{
                            //    if (listaArchivoFisicoAGuardar.Contains(reg.FileName)) //solo mover / copiar los archivos a procesar
                            //    {
                            //        //Solo los copio para que la version anterior siga teniendo su archivo, no muevo. 
                            //        FileServer.CopyBlob("", pathVersionAnt + "/" + reg.FileName, pathDestino + "/" + reg.FileName, pathAlternativo);
                            //    }
                            //}
                        }
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
                    }
                }
            }
        }

        /// <summary>
        /// Devuelve el resumen de la revision del area
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="ftevercodi"></param>
        /// <param name="idsAreasUsuario"></param>
        /// <param name="nombreAreasUsuario"></param>
        /// <param name="idAreaRevision"></param>
        /// <param name="nombreAreaRevision"></param>
        /// <returns></returns>
        public List<DatoRevisionAreasFT> ObtenerDatosResumenRevisionParametros(int ftenvcodi, int ftevercodi, string idsAreasUsuario, string nombreAreasUsuario, int idAreaRevision, string nombreAreaRevision)
        {
            List<DatoRevisionAreasFT> lstSalida = new List<DatoRevisionAreasFT>();

            List<FtExtEnvioEqDTO> listaEnvioEqXVersion = ListFtExtEnvioEqsXEnvio(ftevercodi);
            List<int> lstFteeqcodis = listaEnvioEqXVersion.Select(x => x.Fteeqcodi).Distinct().ToList();

            //Obtengo la revision para todos los equipos
            List<DatoRevisionAreasFT> lstRevisionGeneral = new List<DatoRevisionAreasFT>();
            foreach (var fteeqcodi in lstFteeqcodis)
            {
                List<DatoRevisionAreasFT> lstRevisionEquipoX = ObtenerDatosRevisionAreasFT(fteeqcodi, idsAreasUsuario, nombreAreasUsuario, idAreaRevision, nombreAreaRevision);

                if (lstRevisionEquipoX.Any())
                    lstRevisionGeneral.AddRange(lstRevisionEquipoX);
            }

            //Obtengo la revision solo para los que el area debe revisar
            List<DatoRevisionAreasFT> lstRevisionAsignada = lstRevisionGeneral.Where(x => x.EsFilaRevisable == true).ToList();
            lstSalida = lstRevisionAsignada;

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el porcentaje de avance para FT
        /// </summary>
        /// <param name="codigoEnvio"></param>
        /// <param name="area"></param>
        /// <param name="versionUsado"></param>
        /// <param name="estenvodi"></param>
        /// <param name="strAreasUsuario"></param>
        /// <param name="nombreAreas"></param>
        /// <param name="nombreAreaRev"></param>
        /// <returns></returns>
        public int ObtenerPorcantajeAvanceParametrosFT(int codigoEnvio, int area, int versionUsado, int estenvodi, string strAreasUsuario, string nombreAreas, string nombreAreaRev)
        {
            int porcentajeAvance = 0;
            List<DatoRevisionAreasFT> listaResumenRevision = ObtenerDatosResumenRevisionParametros(codigoEnvio, versionUsado, strAreasUsuario, nombreAreas, area, nombreAreaRev);
            int totalFilasAsignados = listaResumenRevision.Count();
            int totalFilasRevisados = 0;
            if (estenvodi == ConstantesFichaTecnica.EstadoSolicitud) totalFilasRevisados = listaResumenRevision.Where(x => x.IdValorEstadoSolicitado == ConstantesFichaTecnica.OpcionConforme || x.IdValorEstadoSolicitado == ConstantesFichaTecnica.OpcionObservado).ToList().Count;
            if (estenvodi == ConstantesFichaTecnica.EstadoSubsanacionObs) totalFilasRevisados = listaResumenRevision.Where(x => x.IdValorEstadoSubsanado == ConstantesFichaTecnica.OpcionConforme || x.IdValorEstadoSubsanado == ConstantesFichaTecnica.OpcionObservado).ToList().Count;
            if (totalFilasAsignados > 0)
            {
                double re = (double)totalFilasRevisados / totalFilasAsignados;
                porcentajeAvance = Convert.ToInt32(100 * re);
            }

            return porcentajeAvance;
        }



        public void QuitarArchivosResidualesRevAreas(int idEnvio, int idVersion, List<string> listaArchivoFisicoAGuardar)
        {
            //string pathAlternativo = GetPathPrincipal();

            try
            {
                ////1. eliminar los archivos que ya no forman parte del envio (fueron subidos pero no se guardaron o eliminados por el usuario en el formulario)
                //EliminarArchivosResidualesXVersion(idEnvio, idVersion, listaArchivoFisicoAGuardar);

                string pathAlternativo = GetPathPrincipal();

                //carpetas principales de cada version (Archivos del agente, revisión administrador)
                List<string> listaTipoArchivo = new List<string>() { ConstantesFichaTecnica.STipoArchivoAreaRevision };

                foreach (var tipoArchivo in listaTipoArchivo)
                {
                    string pathTipoArchivo = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + string.Format("envio_{0}/version_{1}/{2}", idEnvio, idVersion, tipoArchivo);
                    var listaFolder = FileServer.ListarArhivos(pathTipoArchivo, pathAlternativo).Where(x => x.FileType == ConstantesBase.TipoFolder).Select(x => x.FileName).ToList();

                    //subcarpeta (codigo ftitcodi (item de ficha), requisito)
                    foreach (var idElemento in listaFolder)
                    {
                        string pathDestino = pathTipoArchivo + "/" + idElemento;

                        //2. copiar temporales a la carpeta final
                        var listaDocumentos = FileServer.ListarArhivos(pathDestino, pathAlternativo);

                        try
                        {
                            if (listaDocumentos.Any())
                            {
                                //si el archivo no pertenece al envio entonces se elimina
                                foreach (var reg in listaDocumentos)
                                {
                                    string pathDestinoFile = pathDestino + "/" + reg.FileName;
                                    if (!listaArchivoFisicoAGuardar.Contains(reg.FileName)) //solo mover / copiar los archivos a procesar
                                    {
                                        //eliminar 
                                        FileServer.DeleteBlob(pathDestinoFile, pathAlternativo);
                                    }
                                }
                            }
                        }
                        catch (Exception ex)
                        {
                            Logger.Error(ConstantesAppServicio.LogError, ex);
                            throw new ArgumentException("No se pudo guardar el archivo en el servidor.", ex);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        /// <summary>
        /// Devuelve el porcentaje de avance para contenido de operacion comercial
        /// </summary>
        /// <param name="codigoEnvio"></param>
        /// <param name="area"></param>
        /// <param name="versionUsado"></param>
        /// <param name="estenvodi"></param>
        /// <param name="strAreasUsuario"></param>
        /// <param name="nombreAreas"></param>
        /// <param name="nombreAreaRev"></param>
        /// <returns></returns>
        public int ObtenerPorcantajeAvanceContenido(int codigoEnvio, int area, int versionUsado, int estenvodi, string strAreasUsuario, string nombreAreas, string nombreAreaRev)
        {
            int porcentajeAvance = 0;
            List<DatoRevisionAreasContenido> listaResumenRevision = ObtenerDatosResumenRevisionContenido(versionUsado, strAreasUsuario, nombreAreas, area, nombreAreaRev);
            int totalFilasAsignados = listaResumenRevision.Count();
            int totalFilasRevisados = 0;
            if (estenvodi == ConstantesFichaTecnica.EstadoSolicitud) totalFilasRevisados = listaResumenRevision.Where(x => x.IdValorEstadoSolicitado == ConstantesFichaTecnica.OpcionConforme || x.IdValorEstadoSolicitado == ConstantesFichaTecnica.OpcionObservado).ToList().Count;
            if (estenvodi == ConstantesFichaTecnica.EstadoSubsanacionObs) totalFilasRevisados = listaResumenRevision.Where(x => x.IdValorEstadoSubsanado == ConstantesFichaTecnica.OpcionConforme || x.IdValorEstadoSubsanado == ConstantesFichaTecnica.OpcionObservado).ToList().Count;
            if (totalFilasAsignados > 0)
            {
                double re = (double)totalFilasRevisados / totalFilasAsignados;
                porcentajeAvance = Convert.ToInt32(100 * re);
            }

            return porcentajeAvance;
        }

        /// <summary>
        /// Devuelve el resumen de la revision del area para el contenido
        /// </summary>
        /// <param name="ftevercodi"></param>
        /// <param name="idsAreasUsuario"></param>
        /// <param name="nombreAreasUsuario"></param>
        /// <param name="idAreaRevision"></param>
        /// <param name="nombreAreaRevision"></param>
        /// <returns></returns>
        public List<DatoRevisionAreasContenido> ObtenerDatosResumenRevisionContenido(int ftevercodi, string idsAreasUsuario, string nombreAreasUsuario, int idAreaRevision, string nombreAreaRevision)
        {
            List<DatoRevisionAreasContenido> lstSalida = new List<DatoRevisionAreasContenido>();
            List<DatoRevisionAreasContenido> lstRevisionGeneral = new List<DatoRevisionAreasContenido>();

            //Obtengo la revision 
            lstRevisionGeneral = ObtenerDatosRevisionAreasContenido(ftevercodi, idsAreasUsuario, nombreAreasUsuario, idAreaRevision, nombreAreaRevision);

            //Obtengo la revision solo para los que el area debe revisar
            lstSalida = lstRevisionGeneral.Where(x => x.EsFilaRevisable == true).ToList();

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el html del porcentaje de avance de revision
        /// </summary>
        /// <param name="porcentajeAvance"></param>
        /// <returns></returns>
        public string ObtenerHtmlPorcentajeAvance(int porcentajeAvance)
        {
            StringBuilder strHtml = new StringBuilder();

            if (porcentajeAvance < 100)
            {
                strHtml.Append("<div class='progress progress-striped active'>");
                strHtml.AppendFormat("<div class='progress-bar progress-bar-danger' role='progressbar' style='width:{0}%'>", porcentajeAvance);
                strHtml.AppendFormat("<b>{0}% </b>", porcentajeAvance);
                strHtml.Append("</div>");
                strHtml.Append("</div>");
            }
            else
            {
                strHtml.Append("<div class='progress'>");
                strHtml.Append("<div class='progress-bar progress-bar-success' role='progressbar' style='width: 100%'>");
                strHtml.Append("<b>100%</b>");
                strHtml.Append("</div>");
                strHtml.Append("</div>");
            }

            return strHtml.ToString();
        }

        /// <summary>
        /// Devuelve el listado de errores encontrados
        /// </summary>
        /// <param name="codigoEnvio"></param>
        /// <param name="area"></param>
        /// <param name="versionUsado"></param>
        /// <param name="estenvodi"></param>
        /// <param name="strAreasUsuario"></param>
        /// <param name="nombreAreas"></param>
        /// <param name="nombreAreaRev"></param>
        /// <returns></returns>
        public List<ErrorRevisionAreas> ObtenerListadoErroresRevAreasParametrosFT(int codigoEnvio, int area, int versionUsado, int estenvodi, string strAreasUsuario, string nombreAreas, string nombreAreaRev)
        {
            List<ErrorRevisionAreas> lstSalida = new List<ErrorRevisionAreas>();
            List<DatoRevisionAreasFT> listaRevisables = ObtenerDatosResumenRevisionParametros(codigoEnvio, versionUsado, strAreasUsuario, nombreAreas, area, nombreAreaRev);

            foreach (var filaRevisable in listaRevisables)
            {
                string opcionElegida = "";
                string mensajeIngresado = "";
                List<FtExtEnvioArchivoDTO> listadoArchivos = new List<FtExtEnvioArchivoDTO>();

                if (estenvodi == ConstantesFichaTecnica.EstadoSolicitud)
                {
                    opcionElegida = filaRevisable.IdValorEstadoSolicitado;
                    mensajeIngresado = filaRevisable.MsgSolicitud;
                    listadoArchivos = filaRevisable.ListaArchivosSolicitados;
                }
                else
                {
                    if (estenvodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                    {
                        opcionElegida = filaRevisable.IdValorEstadoSubsanado;
                        mensajeIngresado = filaRevisable.MsgSubsanacion;
                        listadoArchivos = filaRevisable.ListaArchivosSubsanados;
                    }
                }

                //Evaluo
                if (opcionElegida == "")
                {
                    ErrorRevisionAreas objErr = new ErrorRevisionAreas();
                    objErr.NombEquipo = filaRevisable.Elemento;
                    objErr.Numeral = filaRevisable.Numeral;
                    objErr.Mensaje = "Fila no revisada, se debe escoger una opción: 'Conforme' u 'Observada'.";
                    lstSalida.Add(objErr);
                }
                else
                {
                    if (opcionElegida == ConstantesFichaTecnica.OpcionObservado)
                    {
                        //string mensajeIngresado = filaRevisable.MsgSolicitud;
                        string mensajeIngresadoSinHtml = QuitarTagsHtml(mensajeIngresado);
                        bool tieneArchivo = listadoArchivos.Any();

                        if (mensajeIngresadoSinHtml == "" && !tieneArchivo)
                        {
                            ErrorRevisionAreas objErr = new ErrorRevisionAreas();
                            objErr.NombEquipo = filaRevisable.Elemento;
                            objErr.Numeral = filaRevisable.Numeral;
                            objErr.Mensaje = "Información Observada. Falta ingresar comentario o agregar un archivo adjuntado.";
                            lstSalida.Add(objErr);
                        }
                    }
                }

            }



            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de errores encontrados en operacion comercial
        /// </summary>
        /// <param name="codigoEnvio"></param>
        /// <param name="area"></param>
        /// <param name="versionUsado"></param>
        /// <param name="estenvodi"></param>
        /// <param name="strAreasUsuario"></param>
        /// <param name="nombreAreas"></param>
        /// <param name="nombreAreaRev"></param>
        /// <returns></returns>
        public List<ErrorRevisionAreas> ObtenerListadoErroresRevAreasContenido(int codigoEnvio, int area, int versionUsado, int estenvodi, string strAreasUsuario, string nombreAreas, string nombreAreaRev, int tipoFormato)
        {
            List<ErrorRevisionAreas> lstSalida = new List<ErrorRevisionAreas>();
            List<DatoRevisionAreasContenido> listaRevisables = ObtenerDatosResumenRevisionContenido(versionUsado, strAreasUsuario, nombreAreas, area, nombreAreaRev);

            foreach (var filaRevisable in listaRevisables)
            {
                string opcionElegida = "";
                string mensajeIngresado = "";
                List<FtExtEnvioArchivoDTO> listadoArchivos = new List<FtExtEnvioArchivoDTO>();

                if (estenvodi == ConstantesFichaTecnica.EstadoSolicitud)
                {
                    opcionElegida = filaRevisable.IdValorEstadoSolicitado;
                    mensajeIngresado = filaRevisable.MsgSolicitud;
                    listadoArchivos = filaRevisable.ListaArchivosSolicitados;
                }
                else
                {
                    if (estenvodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                    {
                        opcionElegida = filaRevisable.IdValorEstadoSubsanado;
                        mensajeIngresado = filaRevisable.MsgSubsanacion;
                        listadoArchivos = filaRevisable.ListaArchivosSubsanados;
                    }
                }

                //Evaluo
                if (opcionElegida == "")
                {
                    ErrorRevisionAreas objErr = new ErrorRevisionAreas();
                    objErr.Literal = tipoFormato == ConstantesFichaTecnica.FormatoOperacionComercial ? filaRevisable.Literal : (tipoFormato == ConstantesFichaTecnica.FormatoBajaModoOperacion ? "Sustento" : "");
                    objErr.Mensaje = "Fila no revisada, se debe escoger una opción: 'Conforme' u 'Observada'.";
                    lstSalida.Add(objErr);
                }
                else
                {
                    if (opcionElegida == ConstantesFichaTecnica.OpcionObservado)
                    {
                        string mensajeIngresadoSinHtml = QuitarTagsHtml(mensajeIngresado);
                        bool tieneArchivo = listadoArchivos.Any();

                        if (mensajeIngresadoSinHtml == "" && !tieneArchivo)
                        {
                            ErrorRevisionAreas objErr = new ErrorRevisionAreas();
                            objErr.Literal = tipoFormato == ConstantesFichaTecnica.FormatoOperacionComercial ? filaRevisable.Literal : (tipoFormato == ConstantesFichaTecnica.FormatoBajaModoOperacion ? "Sustento" : "");
                            objErr.Mensaje = "Información Observada. Falta ingresar comentario o agregar un archivo adjuntado.";
                            lstSalida.Add(objErr);
                        }
                    }
                }

            }



            return lstSalida;
        }

        /// <summary>
        /// Devuelve una cadena sin tags html
        /// </summary>
        /// <param name="textoConHtml"></param>
        /// <returns></returns>
        public static string QuitarTagsHtml(string textoConHtml)
        {
            return Regex.Replace(textoConHtml, "<[a-zA-Z/].*?>", String.Empty);
        }

        /// <summary>
        /// Envia la revisión final
        /// </summary>
        /// <param name="idVersion"></param>
        /// <param name="idArea"></param>
        public void EnviarRevisionFinal(FtExtEnvioDTO objEnvio, int idVersion, int idArea, string usuario)
        {
            FtExtEnvioAreaDTO objAActualizar = GetFtExtEnvioAreaByVersionYArea(idVersion, idArea);

            if (objAActualizar == null) throw new ArgumentException("Ocurrió un error al momento de guardar la revisión. No se encontró la relacion Envío-Área");
            objAActualizar.Envarestado = ConstantesFichaTecnica.EstadoStrAtendido;

            UpdateFtExtEnvioArea(objAActualizar);

            //logEnvio
            string nombCarpeta = objEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud ? ConstantesFichaTecnica.CarpetaAreasRCSolicitud : (objEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs ? ConstantesFichaTecnica.CarpetaAreasRCSubsanacíon : "");
            DateTime fechaRegistro = ObtenerFechaSistemaFT(objEnvio.Ftenvcodi);
            //Condicion
            DateTime fechaRevision = fechaRegistro;
            DateTime? fechaPlazo = objAActualizar.Envarfecmaxrpta;
            string condicion = "";
            if (fechaPlazo != null)
            {
                int result = DateTime.Compare(fechaPlazo.Value, fechaRevision);
                if (result >= 0)
                    condicion = ConstantesFichaTecnica.CondicionEnPlazo;
                else
                    condicion = ConstantesFichaTecnica.CondicionFueraPlazo;
            }

            FtExtEnvioLogDTO envioLog = new FtExtEnvioLogDTO();
            envioLog.Ftenvcodi = objEnvio.Ftenvcodi;
            envioLog.Ftelogusucreacion = usuario;
            envioLog.Ftelogfeccreacion = fechaRegistro;
            envioLog.Ftelogobs = nombCarpeta + ": Respuesta revisión Áreas COES";
            envioLog.Estenvcodi = objEnvio.Estenvcodi;
            envioLog.Ftelogcondicion = condicion;
            envioLog.Envarcodi = objAActualizar.Envarcodi;

            SaveFtExtEnvioLog(envioLog);

            //variables para las notificaciones
            List<FtExtCorreoareadetDTO> lstCorreosXarea = ListarCorreosPorArea(idArea.ToString());
            string correosDelArea = string.Join(";", lstCorreosXarea.Select(x => x.Faremdemail).Distinct().ToList());

            if (correosDelArea == "") throw new ArgumentException("Ocurrió un error al momento de notificar revisión. No se encontró correos registrado del área.");

            objEnvio.CorreosDelAreaQuienEstaRevisando = correosDelArea;
            objEnvio.NombreAreaQuienEstaRevisando = lstCorreosXarea.First().Faremnombre;

            var mapaVariable = LlenarVariablesCorreos(objEnvio, new List<FTParametroModificacion>());
            NotificarRevisionAreas(objEnvio, mapaVariable);

        }

        /// <summary>
        /// Envia las notificaciones de la revision  realizada por las areas
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="mapaVariable"></param>
        private void NotificarRevisionAreas(FtExtEnvioDTO regEnvio, Dictionary<string, string> mapaVariable)
        {
            //Obtengo la plantilla
            int plantcodi = ObtenerPlantillaCorreosRevisiónAreas(regEnvio);

            if (plantcodi == -1)
                throw new ArgumentException("Ocurrió un error al obtener la plantilla correspondiente para notificar la revisión del envío por parte del área. La revisión realizada no fue notificada.");

            EnviarCorreoNotificacion(regEnvio, mapaVariable, plantcodi);
        }

        /// <summary>
        /// Devuelve los codigos de las plantillas de derivacion
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <returns></returns>
        private int ObtenerPlantillaCorreosRevisiónAreas(FtExtEnvioDTO regEnvio)
        {
            int plantillacodi = -1;

            int ftetcodi = regEnvio.Ftetcodi;
            int estenvcodi = regEnvio.Estenvcodi;
            int tipoformato = regEnvio.Ftenvtipoformato;

            if (estenvcodi == ConstantesFichaTecnica.EstadoSolicitud)
            {
                if (tipoformato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                {
                    plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSolicitudMFTDB;
                }
                else
                {
                    switch (ftetcodi)
                    {
                        case ConstantesFichaTecnica.EtapaConexion: plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSolicitudConexion; break;
                        case ConstantesFichaTecnica.EtapaIntegracion: plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSolicitudIntegracion; break;
                        case ConstantesFichaTecnica.EtapaOperacionComercial: plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSolicitudOpComercial; break;
                        case ConstantesFichaTecnica.EtapaModificacion: plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSolicitudMFT; break;
                    }
                }
            }
            else
            {
                if (estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    if (tipoformato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                    {
                        plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSubsanacionMFTDB;
                    }
                    else
                    {
                        switch (ftetcodi)
                        {
                            case ConstantesFichaTecnica.EtapaConexion: plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSubsanacionConexion; break;
                            case ConstantesFichaTecnica.EtapaIntegracion: plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSubsanacionIntegracion; break;
                            case ConstantesFichaTecnica.EtapaOperacionComercial: plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSubsanacionOpComercial; break;
                            case ConstantesFichaTecnica.EtapaModificacion: plantillacodi = ConstantesFichaTecnica.PlantcodiRevisionAreasSubsanacionMFT; break;
                        }
                    }
                }
            }


            return plantillacodi;
        }

        #endregion

        #region Acciones en envios

        #region Solicitud

        public FtExtEnvioDTO CrearVersionTemporalFormatoExtranet(FtExtEnvioDTO regEnvio)
        {
            //Guardar actualización y log en bd
            GuardarEnvioFormatoFichaExtranetTransaccional(regEnvio);

            return regEnvio;
        }

        public FtExtEnvioDTO ActualizarSolicitudFormatoExtranetFromTemporal(int ftenvcodiTemporal, int ftevercodiTemporal, int tipoFormato,
                                                    string emailCCAgentesCopropietarios,
                                                    string usuarioRegistro, bool flagEnviarNotificacion)
        {
            int estenvcodiEnvio = ftenvcodiTemporal <= 0 ? ConstantesFichaTecnica.EstadoSolicitud : ConstantesFichaTecnica.EstadoSubsanacionObs;
            int estenvcodiVersion = ftenvcodiTemporal <= 0 ? ConstantesFichaTecnica.EstadoSolicitud : ConstantesFichaTecnica.EstadoObservado;

            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(ftenvcodiTemporal); //valor de empresa, etapa, estado

            List<FTParametroModificacion> lstCambios = new List<FTParametroModificacion>();
            if (objEnvio.Ftetcodi == ConstantesFichaTecnica.EtapaModificacion && ConstantesFichaTecnica.FormatoConexIntegModif == objEnvio.Ftenvtipoformato)
            {
                //obtener cambios 
                lstCambios = ObtenerListaCambiosFTEnModificacion(ftenvcodiTemporal, ftevercodiTemporal, objEnvio.FtevercodiTemporalFTVigente);
            }

            //Actualizar flag de los editables de los items de Conexion, Integracion
            ListarCambiosEtapaConexionIntegracionFT(ftenvcodiTemporal, ftevercodiTemporal, tipoFormato, true);

            //Generar estructura
            DateTime fechaRegistro = ObtenerFechaSistemaFT(ftenvcodiTemporal); //incluye fechaSistema

            if (ftenvcodiTemporal < 0)
            {
                objEnvio.Ftenvcodi = 0;
                objEnvio.Ftenvususolicitud = usuarioRegistro;
                objEnvio.Ftenvfecsolicitud = fechaRegistro;
            }
            objEnvio.Estenvcodi = estenvcodiEnvio; //tener versión histórico o solicitud u observaciones
            objEnvio.Ftenvtipoenvio = ConstantesFichaTecnica.GuardadoOficial;
            objEnvio.Ftenvtipoformato = tipoFormato;

            objEnvio.CorreosCCAgentesCopropietarios = emailCCAgentesCopropietarios;

            FtExtEnvioVersionDTO objVersion = GetByIdFtExtEnvioVersion(ftevercodiTemporal);
            objVersion.Fteverfeccreacion = fechaRegistro;
            objVersion.Fteverusucreacion = usuarioRegistro;
            objVersion.Estenvcodi = estenvcodiVersion;
            objVersion.Ftevertipo = ConstantesFichaTecnica.GuardadoOficial; //cambiar la version temporal a oficial

            FtExtEnvioLogDTO objLog = new FtExtEnvioLogDTO();
            objLog.Estenvcodi = objEnvio.Estenvcodi;
            objLog.Ftelogfeccreacion = fechaRegistro;
            objLog.Ftelogusucreacion = usuarioRegistro;

            string mensajeLog = "";
            string condicion = "";
            if (estenvcodiEnvio == ConstantesFichaTecnica.EstadoSolicitud)
                mensajeLog = "Solicitud del envío.";
            else
            {
                if (estenvcodiEnvio == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    //Log
                    mensajeLog = "Subsanación de Observaciones del envío tras ampliación de plazo.";

                    //Condicion
                    DateTime fechaSubsanacion = fechaRegistro;
                    DateTime? fecAmpliacion = objEnvio.Ftenvfecampliacion;
                    if (fecAmpliacion != null) //si se subsanada despues de una ampliacion
                    {
                        int result = DateTime.Compare(fecAmpliacion.Value, fechaSubsanacion);
                        if (result >= 0)
                            condicion = ConstantesFichaTecnica.CondicionEnPlazo;
                        else
                            condicion = ConstantesFichaTecnica.CondicionFueraPlazo;
                    }
                    else
                    {
                        //Log
                        mensajeLog = "Subsanación de Observaciones del envío. Fecha máxima de respuesta: " + objEnvio.Ftenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull) + ".";

                        //Condicion
                        DateTime? fechaPlazoFinSubsanacion = objEnvio.Ftenvfecfinsubsanarobs;
                        if (fechaPlazoFinSubsanacion != null)
                        {
                            int result = DateTime.Compare(fechaPlazoFinSubsanacion.Value, fechaSubsanacion);
                            if (result >= 0)
                                condicion = ConstantesFichaTecnica.CondicionEnPlazo;
                            else
                                condicion = ConstantesFichaTecnica.CondicionFueraPlazo;
                        }


                    }
                }

            }
            objLog.Ftelogobs = mensajeLog;
            objLog.Ftelogcondicion = condicion;

            objEnvio.Ftenvflaghabeq = null; //luego enviar la subsanacion, setear a su valor por defecto
            objEnvio.VersionActual = objVersion;
            objEnvio.LogEnvioActual = objLog;

            //se crea nueva version, su log, y la version temporal cambia de envio (UPDATE)
            int ftenvcodiNuevaSolicitud = GuardarEnvioFormatoFichaExtranetFromTemporalTransaccional(objEnvio, ftenvcodiTemporal);

            if (ConstantesFichaTecnica.EstadoSolicitud == objEnvio.Estenvcodi)
            {
                //obtener lista de archivos validos (items, requisitos, revision)
                List<string> listaArchivoValido = ListarArchivoFisicoFromVersion(ftenvcodiNuevaSolicitud, ftevercodiTemporal);

                //mover la carpeta negativa a positiva
                RenombrarCarpetaEnvioEstadoSolicitud(ftenvcodiTemporal, ftenvcodiNuevaSolicitud, ftevercodiTemporal, listaArchivoValido);
            }
            else
            {
                //Eliminar archivos que estan eliminados logicamente  
                //Eliminar los archivos residuales (no forman parte de los archivos activos)
                List<string> listaArchivoValido = ListarArchivoFisicoFromVersion(ftenvcodiNuevaSolicitud, ftevercodiTemporal);

                QuitarArchivosResidualesVersion(ftenvcodiNuevaSolicitud, ftevercodiTemporal, listaArchivoValido);
            }

            //Notificación automática            
            if (flagEnviarNotificacion)
            {
                FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(ftenvcodiNuevaSolicitud);
                regEnvioGuardado.CorreosCCAgentesCopropietarios = objEnvio.CorreosCCAgentesCopropietarios ?? ""; //para agregar copropietarios en la notificacion
                var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, lstCambios);

                EnvioCorreoExtranetFichaTecnica(ConstantesFichaTecnica.TipoCorreoNotificacionAutomatica, objEnvio, mapaVariable);
            }

            return objEnvio;
        }

        private int GuardarEnvioFormatoFichaExtranetTransaccional(FtExtEnvioDTO regEnvio)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            int ftenvcodi = 0;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                if (regEnvio.Ftenvcodi != 0)
                {
                    if (regEnvio.FlagUpdateEnvio)
                    {
                        UpdateFtExtEnvio(regEnvio, conn, tran);
                    }
                    ftenvcodi = regEnvio.Ftenvcodi;
                }
                else
                {
                    ftenvcodi = SaveFtExtEnvio(regEnvio, conn, tran);
                }

                //log
                if (regEnvio.LogEnvioActual != null)
                {
                    regEnvio.LogEnvioActual.Ftenvcodi = ftenvcodi;
                    SaveFtExtEnvioLog(regEnvio.LogEnvioActual, conn, tran);
                }

                //correlativos 
                int correlativoFtevercodi = FactorySic.GetFtExtEnvioVersionRepository().GetMaxId();
                int correlativoFteeqcodi = FactorySic.GetFtExtEnvioEqRepository().GetMaxId();
                int correlativoFtedatcodi = FactorySic.GetFtExtEnvioDatoRepository().GetMaxId();
                int correlativoFtearccodi = FactorySic.GetFtExtEnvioArchivoRepository().GetMaxId();
                int correlativoFtereqcodi = FactorySic.GetFtExtEnvioReqRepository().GetMaxId();
                int correlativoFterracodi = FactorySic.GetFtExtEnvioRelreqarchivoRepository().GetMaxId();
                int correlativoFterdacodi = FactorySic.GetFtExtEnvioReldatoarchivoRepository().GetMaxId();

                int correlativoFtrevcodi = FactorySic.GetFtExtEnvioRevisionRepository().GetMaxId();
                int correlativoFrdrevcodi = FactorySic.GetFtExtEnvioReldatorevRepository().GetMaxId();
                int correlativoFreqrvcodi = FactorySic.GetFtExtEnvioReleeqrevRepository().GetMaxId();
                int correlativoFrrrevcodi = FactorySic.GetFtExtEnvioRelreqrevRepository().GetMaxId();
                int correlativoFtrrvacodi = FactorySic.GetFtExtEnvioRelrevarchivoRepository().GetMaxId();

                if (regEnvio.VersionActual != null)
                {
                    //archivos
                    if (regEnvio.ListaArchivo != null)
                    {
                        foreach (var regArch in regEnvio.ListaArchivo)
                        {
                            regArch.Ftearccodi = correlativoFtearccodi;
                            SaveFtExtEnvioArchivo(regArch, conn, tran);
                            correlativoFtearccodi++;
                        }
                    }

                    //Revision
                    if (regEnvio.ListaRevision != null)
                    {
                        foreach (var regRev in regEnvio.ListaRevision)
                        {
                            regRev.Ftrevcodi = correlativoFtrevcodi;
                            SaveFtExtEnvioRevision(regRev, conn, tran);

                            correlativoFtrevcodi++;
                        }
                    }

                    //version 
                    int ftevercodi = regEnvio.VersionActual.Ftevercodi;
                    if (regEnvio.VersionActual.Ftevercodi > 0)
                    {
                        if (regEnvio.VersionActual.FlagUpdateVersion)
                        { }

                        //cambiar el estado a equipos de la versión
                        if (regEnvio.VersionActual.ListaFteeqcodiUpdate != null)
                        {
                            UpdateFtExtEnvioEqXEstado(string.Join(",", regEnvio.VersionActual.ListaFteeqcodiUpdate), "S", conn, tran);
                        }
                        if (regEnvio.VersionActual.ListaFteeqcodiEliminar != null)
                        {
                            UpdateFtExtEnvioEqXEstado(string.Join(",", regEnvio.VersionActual.ListaFteeqcodiEliminar), "N", conn, tran);
                        }
                    }
                    else
                    {
                        regEnvio.VersionActual.Ftenvcodi = ftenvcodi;
                        regEnvio.VersionActual.Ftevercodi = correlativoFtevercodi;
                        ftevercodi = SaveFtExtEnvioVersion(regEnvio.VersionActual, conn, tran);
                        regEnvio.VersionActual.Ftevercodi = ftevercodi;
                        correlativoFtevercodi++;
                    }

                    //equipos y modos de operación
                    if (regEnvio.VersionActual.ListaEquipoEnvio != null)
                    {
                        foreach (var regEq in regEnvio.VersionActual.ListaEquipoEnvio)
                        {
                            regEq.Ftevercodi = ftevercodi;
                            regEq.Fteeqcodi = correlativoFteeqcodi;
                            SaveFtExtEnvioEq(regEq, conn, tran);


                            //datos de formulario
                            if (regEq.ListaDato != null)
                            {
                                foreach (var regDato in regEq.ListaDato)
                                {
                                    regDato.Fteeqcodi = regEq.Fteeqcodi;
                                    regDato.Ftedatcodi = correlativoFtedatcodi;
                                    SaveFtExtEnvioDato(regDato, conn, tran);

                                    //archivos de cada dato (valor o sustento)  
                                    if (regDato.ListaRelDatoArchivo != null)
                                    {
                                        foreach (var regRelArch in regDato.ListaRelDatoArchivo)
                                        {
                                            regRelArch.Ftearccodi = regRelArch.Archivo.Ftearccodi;
                                            regRelArch.Ftedatcodi = regDato.Ftedatcodi;
                                            regRelArch.Fterdacodi = correlativoFterdacodi;
                                            SaveFtExtEnvioReldatoarchivo(regRelArch, conn, tran);
                                            correlativoFterdacodi++;
                                        }
                                    }

                                    //revision de cada dato
                                    if (regDato.RelRevisionDato != null)
                                    {
                                        regDato.RelRevisionDato.Frdrevcodi = correlativoFrdrevcodi;
                                        regDato.RelRevisionDato.Ftedatcodi = correlativoFtedatcodi;
                                        regDato.RelRevisionDato.Ftrevcodi = regDato.RelRevisionDato.Revision.Ftrevcodi;
                                        SaveFtExtEnvioReldatorev(regDato.RelRevisionDato, conn, tran);

                                        //archivos de revisión
                                        if (regDato.ListaRelRevArchivo != null)
                                        {
                                            foreach (var regRelrevArch in regDato.ListaRelRevArchivo)
                                            {
                                                regRelrevArch.Ftearccodi = regRelrevArch.Archivo.Ftearccodi;
                                                regRelrevArch.Ftrevcodi = regDato.RelRevisionDato.Revision.Ftrevcodi;
                                                regRelrevArch.Ftrrvacodi = correlativoFtrrvacodi;
                                                SaveFtExtEnvioRelrevarchivo(regRelrevArch, conn, tran);
                                                correlativoFtrrvacodi++;
                                            }
                                        }

                                        correlativoFrdrevcodi++;
                                    }

                                    correlativoFtedatcodi++;
                                }
                            }

                            correlativoFteeqcodi++;
                        }
                    }

                    //requisitos
                    if (regEnvio.VersionActual.ListaReqEnvio != null)
                    {
                        foreach (var regReq in regEnvio.VersionActual.ListaReqEnvio)
                        {
                            regReq.Ftevercodi = ftevercodi;
                            regReq.Ftereqcodi = correlativoFtereqcodi;
                            SaveFtExtEnvioReq(regReq, conn, tran);

                            //Guardo su revision 
                            if (regReq.RevisionReq != null)
                            {
                                regReq.RevisionReq.Ftrevcodi = correlativoFtrevcodi;
                                SaveFtExtEnvioRevision(regReq.RevisionReq, conn, tran);

                                if (regReq.RelRevisionReq != null)
                                {
                                    regReq.RelRevisionReq.Frrrevcodi = correlativoFrrrevcodi;
                                    regReq.RelRevisionReq.Ftereqcodi = correlativoFtereqcodi;
                                    regReq.RelRevisionReq.Ftrevcodi = correlativoFtrevcodi;
                                    SaveFtExtEnvioRelreqrev(regReq.RelRevisionReq, conn, tran);

                                    //archivos de revisión
                                    if (regReq.ListaRelRevArchivo != null)
                                    {
                                        foreach (var regRelrevArch in regReq.ListaRelRevArchivo)
                                        {
                                            regRelrevArch.Ftearccodi = regRelrevArch.Archivo.Ftearccodi;
                                            regRelrevArch.Ftrevcodi = correlativoFtrevcodi;
                                            regRelrevArch.Ftrrvacodi = correlativoFtrrvacodi;
                                            SaveFtExtEnvioRelrevarchivo(regRelrevArch, conn, tran);
                                            correlativoFtrrvacodi++;
                                        }
                                    }

                                    correlativoFrrrevcodi++;
                                }
                                correlativoFtrevcodi++;
                            }

                            //archivos de cada requisito
                            if (regReq.ListaRelreqarchivo != null)
                            {
                                foreach (var regRelArch in regReq.ListaRelreqarchivo)
                                {
                                    regRelArch.Ftereqcodi = regReq.Ftereqcodi;
                                    regRelArch.Ftearccodi = regRelArch.Archivo.Ftearccodi;
                                    regRelArch.Fterracodi = correlativoFterracodi;
                                    SaveFtExtEnvioRelreqarchivo(regRelArch, conn, tran);
                                    correlativoFterracodi++;
                                }
                            }

                            correlativoFtereqcodi++;
                        }
                    }

                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                ftenvcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos de la solicitud.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

            return ftenvcodi;
        }

        private int GuardarEnvioFormatoFichaExtranetFromTemporalTransaccional(FtExtEnvioDTO regEnvio, int ftenvcodiTemporal)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            int ftenvcodi = 0;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //guardar envio

                if (regEnvio.Ftenvcodi > 0)
                {
                    UpdateFtExtEnvio(regEnvio, conn, tran);
                    ftenvcodi = regEnvio.Ftenvcodi;
                }
                else
                {
                    ftenvcodi = SaveFtExtEnvio(regEnvio, conn, tran);
                }

                //guardar log
                regEnvio.LogEnvioActual.Ftenvcodi = ftenvcodi;
                SaveFtExtEnvioLog(regEnvio.LogEnvioActual, conn, tran);

                //correlativos 
                int correlativoFteeqcodi = FactorySic.GetFtExtEnvioEqRepository().GetMaxId();
                int correlativoFtedatcodi = FactorySic.GetFtExtEnvioDatoRepository().GetMaxId();
                int correlativoFtearccodi = FactorySic.GetFtExtEnvioArchivoRepository().GetMaxId();
                int correlativoFtereqcodi = FactorySic.GetFtExtEnvioReqRepository().GetMaxId();
                int correlativoFterracodi = FactorySic.GetFtExtEnvioRelreqarchivoRepository().GetMaxId();
                int correlativoFterdacodi = FactorySic.GetFtExtEnvioReldatoarchivoRepository().GetMaxId();

                int correlativoFtrevcodi = FactorySic.GetFtExtEnvioRevisionRepository().GetMaxId();
                int correlativoFrdrevcodi = FactorySic.GetFtExtEnvioReldatorevRepository().GetMaxId();
                int correlativoFreqrvcodi = FactorySic.GetFtExtEnvioReleeqrevRepository().GetMaxId();
                int correlativoFrrrevcodi = FactorySic.GetFtExtEnvioRelreqrevRepository().GetMaxId();
                int correlativoFtrrvacodi = FactorySic.GetFtExtEnvioRelrevarchivoRepository().GetMaxId();

                if (regEnvio.VersionActual != null)
                {
                    //actualizar version (cambia su codigo de envio)
                    regEnvio.VersionActual.Ftenvcodi = ftenvcodi;

                    //solo cambia 
                    UpdateFtExtEnvioVersion(regEnvio.VersionActual, conn, tran);
                }

                //las versiones temporales que tienen envio negativo cambiarlos al positivo para no perder la historia
                if (ftenvcodiTemporal < 0)
                {
                    UpdateListaFtExtEnvioVersionXEnvio(ftenvcodiTemporal, ftenvcodi, conn, tran);
                }

                //Guardar archivos


                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                ftenvcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos de la solicitud.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

            return ftenvcodi;
        }

        public FtExtEnvioDTO CrearOActualizarVersionTrabajoFromFichaVigente(int codigoEnvio, int codigoVersion, FtExtEnvioDTO objEnvioTemp,
                        string carpetaUploadTemporal, List<int> listaFteeqcodiUpdate, List<int> listaFteeqcodiEliminar)
        {
            //solo guardar cuando todos los equipos tengan ficha
            if (!string.IsNullOrEmpty(objEnvioTemp.MensajeEqSinFicha))
                throw new ArgumentException("Existe(n) equipo(s) sin ficha técnica. " + objEnvioTemp.MensajeEqSinFicha);

            //Casos especiales para centrales de generación
            string carpetaUploadTemporal2 = GetPathSubcarpeta(ConstantesFichaTecnica.CarpetaTemporal) + "FTExt_" + DateTime.Now.Ticks + "\\";
            ActualizarCentralEnvioCasoEspecial(objEnvioTemp, carpetaUploadTemporal2);

            //guardar
            objEnvioTemp.Ftenvcodi = codigoEnvio; //si es 0 entonces se creará un nuevo envio. si es negativo entonces se actualizará el envio
            objEnvioTemp.VersionActual.Estenvcodi = ConstantesFichaTecnica.EstadoSolicitud;

            if (codigoVersion == 0)
                objEnvioTemp.VersionActual.Ftevertipo = ConstantesFichaTecnica.GuardadoTemporal; //4 luego se hará update a 2
            objEnvioTemp.VersionActual.Ftevercodi = codigoVersion; //no existe versión
            objEnvioTemp.VersionActual.ListaFteeqcodiUpdate = listaFteeqcodiUpdate;
            objEnvioTemp.VersionActual.ListaFteeqcodiEliminar = listaFteeqcodiEliminar;
            GuardarEnvioFormatoFichaExtranetTransaccional(objEnvioTemp);

            //1. mover archivos de la carpeta temporal (ficha técnica vigente) al fileserver
            RenombrarCarpetaUploadToAplicativo(carpetaUploadTemporal, objEnvioTemp.Ftenvcodi, objEnvioTemp.VersionActual.Ftevercodi, true);

            //2. copiar todos los archivos del origen a la carpeta destino
            string pathAlternativo = GetPathPrincipal();
            string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + "envio_" + objEnvioTemp.Ftenvcodi + "/version_" + objEnvioTemp.VersionActual.Ftevercodi;
            FileServer.CopiarDirectoryAlter(carpetaUploadTemporal2, pathDestino, pathAlternativo); //copiar todo al destino
            FileServer.DeleteFolderAlter(carpetaUploadTemporal2, pathAlternativo);

            return objEnvioTemp;
        }

        /// <summary>
        /// Actualizar autoguardado con la última configuración del formato extranet
        /// </summary>
        /// <param name="listaFteeqcodiUpdate"></param>
        /// <exception cref="ArgumentException"></exception>
        public void ActualizarFormatoExtranetAutoguardado(List<int> listaFteeqcodiUpdate)
        {
            //datos
            List<FtExtEnvioDatoDTO> listaDatoUpdate = ListarActualizacionFormatoExtranetAutoguardado(listaFteeqcodiUpdate);

            //Guardar en bd
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //actualizar los datos
                if (listaDatoUpdate != null)
                {
                    foreach (var reg in listaDatoUpdate)
                    {
                        UpdateFtExtEnvioDato(reg, conn, tran);
                    }
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al guardar datos. Error: " + ex.Message);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private List<FtExtEnvioDatoDTO> ListarActualizacionFormatoExtranetAutoguardado(List<int> listaFteeqcodiUpdate)
        {
            List<FtExtEnvioDatoDTO> listaDatoUpdate = new List<FtExtEnvioDatoDTO>();

            if (listaFteeqcodiUpdate.Any())
            {
                //equipos del envio
                List<FtExtEnvioEqDTO> listaEnvioEqBD = GetByCriteriaFtExtEnvioEqsXId(string.Join(",", listaFteeqcodiUpdate)).ToList();

                //datos de los equipos
                List<FtExtEnvioDatoDTO> listaDatoAllXEqBD = GetByCriteriaFtExtEnvioDatos(string.Join(",", listaEnvioEqBD.Select(x => x.Fteeqcodi)));

                //formatos asociados a los equipos
                List<int> listaFtfmtcodi = listaEnvioEqBD.Where(x => x.Ftfmtcodi > 0).Select(x => x.Ftfmtcodi.Value).Distinct().ToList();
                foreach (var ftfmtcodi in listaFtfmtcodi)
                {
                    //configuracion del formato
                    List<FtExtItemcfgDTO> lstConfiguraciones = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(ftfmtcodi);

                    //datos de los equipos
                    List<int> listaFteeqcodi = listaEnvioEqBD.Where(x => x.Ftfmtcodi == ftfmtcodi).Select(x => x.Fteeqcodi).ToList();
                    List<FtExtEnvioDatoDTO> listaDatoXFmt = listaDatoAllXEqBD.Where(x => listaFteeqcodi.Contains(x.Fteeqcodi)).ToList();

                    foreach (var itemDato in listaDatoXFmt)
                    {
                        FtExtItemcfgDTO itemFichaDato = lstConfiguraciones.Find(x => x.Ftitcodi == itemDato.Ftitcodi);
                        if (itemFichaDato != null)
                        {
                            string valorDefaultFtedatflageditable = itemFichaDato.Fitcfgflagbloqedicion == "N" ? "S" : "N"; // se considera editable los que son editables en configuración de formato

                            //buscar diferencia entre el autoguardado Extranet y la configuración de la ficha y etapa en Intranet
                            if (itemDato.Ftedatflageditable != valorDefaultFtedatflageditable)
                            {
                                //actualizar valores
                                itemDato.Ftedatflageditable = valorDefaultFtedatflageditable;
                                listaDatoUpdate.Add(itemDato);
                            }
                        }
                    }
                }

            }

            return listaDatoUpdate;
        }

        public int CrearVersionTrabajoFromVersionBD(int ftenvcodi, int ftevercodi, int estenvcodi, int tipoVersion, int tipoFormatoEnvio, string usuario)
        {
            return CrearOActualizarVersionTrabajoFromVersionBD(ftenvcodi, ftevercodi, estenvcodi, tipoVersion, tipoFormatoEnvio, usuario, 0, "");
        }

        public int CrearOActualizarVersionTrabajoFromVersionBD(int ftenvcodi, int ftevercodi, int estenvcodi, int tipoVersion, int tipoFormatoEnvio, string usuario,
                                                                int ftevercodiTemporalFTVigente, string fteeqcodisFiltro)
        {
            int versionOrigen = ftevercodi;

            //Tipo de version. En extranet es ficticio (cambia a temporal cuando se autoguarda) y en Intranet es temporal
            //Extranet 4 luego se hará update a 2
            //Intranet 2

            //crear version de copia
            int versionDestino = 0;
            if (ConstantesFichaTecnica.FormatoConexIntegModif == tipoFormatoEnvio)
            {
                //crear nueva versión identica en bd
                FtExtEnvioDTO objEnvioTemp2 = ClonarEstructuraEnvioFromBDConexIntegModif(ftenvcodi, ftevercodi,
                                                    estenvcodi, ConstantesFichaTecnica.GuardadoOficial, usuario, fteeqcodisFiltro);
                objEnvioTemp2.Ftenvcodi = ftenvcodi; //para evitar que sea un insert. se simula un update al ftextenvio
                objEnvioTemp2.VersionActual.Ftevertipo = tipoVersion;
                if (ftevercodiTemporalFTVigente != 0)
                {
                    objEnvioTemp2.VersionActual.Ftevercodi = ftevercodiTemporalFTVigente;

                    //solo agregar nuevos equipos
                    if (objEnvioTemp2.VersionActual.ListaEquipoEnvio.Any() && !string.IsNullOrEmpty(fteeqcodisFiltro))
                        GuardarEnvioFormatoFichaExtranetTransaccional(objEnvioTemp2);
                }
                else
                {
                    objEnvioTemp2.VersionActual.Ftevercodi = 0;
                    GuardarEnvioFormatoFichaExtranetTransaccional(objEnvioTemp2);
                    versionDestino = objEnvioTemp2.VersionActual.Ftevercodi;
                }
            }

            if (ConstantesFichaTecnica.FormatoOperacionComercial == tipoFormatoEnvio || ConstantesFichaTecnica.FormatoBajaModoOperacion == tipoFormatoEnvio)
            {
                FtExtEnvioDTO objEnvioTemp2 = ClonarEstructuraFromBDOperacionComercial(ftenvcodi, ftevercodi,
                                                    estenvcodi, ConstantesFichaTecnica.GuardadoOficial, ConstantesFichaTecnica.GuardadoTemporal, usuario);
                objEnvioTemp2.Ftenvcodi = ftenvcodi; //para evitar que sea un insert. se simula un update al ftextenvio
                objEnvioTemp2.VersionActual.Ftevertipo = tipoVersion;
                objEnvioTemp2.VersionActual.Ftevercodi = 0;
                GuardarEnvioFormatoFichaExtranetTransaccional(objEnvioTemp2);

                versionDestino = objEnvioTemp2.VersionActual.Ftevercodi;
            }

            //Copiar el contenido de la version
            if (versionDestino != 0 && versionOrigen != versionDestino)
                CopiarCarpetaVersion(ftenvcodi, versionOrigen, versionDestino);

            return versionDestino;
        }

        private void ActualizarTransaccionalFlagItemModificacionXVersion(int ftevercodi, List<int> listaFtedatcodi)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //todos los datos de la version setear el flag de ftedatflagmodificado a 0
                FactorySic.GetFtExtEnvioDatoRepository().UpdateXVersion(ftevercodi, conn, tran);

                if (listaFtedatcodi.Any())
                {
                    //los datos cambiados de la version setear el flag de ftedatflagmodificado a 1
                    FactorySic.GetFtExtEnvioDatoRepository().UpdateXFtedatcodis(string.Join(",", listaFtedatcodi), conn, tran);
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos de la solicitud.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private void ActualizarTransaccionalFlagItemModificacionXEquipo(int fteeqcodi, List<int> listaFtedatcodi)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //todos los datos de la version setear el flag de ftedatflagmodificado a 0
                FactorySic.GetFtExtEnvioDatoRepository().UpdateXEquipo(fteeqcodi, conn, tran);

                if (listaFtedatcodi.Any())
                {
                    //los datos cambiados de la version setear el flag de ftedatflagmodificado a 1
                    FactorySic.GetFtExtEnvioDatoRepository().UpdateXFtedatcodis(string.Join(",", listaFtedatcodi), conn, tran);
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al momento de guarda los datos de la solicitud.");
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private void AgregarRevisionEquipos(int ftevercodi, List<int> listaFtedatcodi)
        {
            List<FtExtEnvioRevisionDTO> listaRevisionBD = GetByCriteriaFtExtEnvioRevisionsXVersionYDato(ftevercodi);

            // lista de todos los Ftedatcodi de la BD que tienen revisión
            var listaBDFtedatcodis = listaRevisionBD.Select(x => x.Ftedatcodi).ToList();

            // solo quedamos con los Ftedatcodi sin revisiones
            var listaFinalFtedatcodi = listaFtedatcodi.Except(listaBDFtedatcodis).ToList();

            if (listaFinalFtedatcodi != null && listaFinalFtedatcodi.Any()) // si no tiene revisión
            {
                IDbConnection conn = null;
                DbTransaction tran = null;
                try
                {
                    conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                    tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                    int correlativoFtrevcodi = FactorySic.GetFtExtEnvioRevisionRepository().GetMaxId();
                    int correlativoFrdrevcodi = FactorySic.GetFtExtEnvioReldatorevRepository().GetMaxId();

                    //crear revisión 
                    FtExtEnvioRevisionDTO revisionNew = new FtExtEnvioRevisionDTO();
                    revisionNew.Ftrevestado = "S";
                    revisionNew.Ftrevcodi = correlativoFtrevcodi;
                    SaveFtExtEnvioRevision(revisionNew, conn, tran);

                    //equipos y modos de operación
                    foreach (var ftedatcodi in listaFtedatcodi)
                    {
                        FtExtEnvioReldatorevDTO relDatoRev = new FtExtEnvioReldatorevDTO();
                        relDatoRev.Frdrevcodi = correlativoFrdrevcodi;
                        relDatoRev.Ftedatcodi = ftedatcodi;
                        relDatoRev.Ftrevcodi = correlativoFtrevcodi;
                        SaveFtExtEnvioReldatorev(relDatoRev, conn, tran);

                        correlativoFrdrevcodi++;
                    }

                    //guardar definitivamente
                    tran.Commit();
                }
                catch (Exception ex)
                {
                    if (tran != null)
                        tran.Rollback();
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw new ArgumentException("Ocurrió un error al momento de guarda los datos de la solicitud.");
                }
                finally
                {
                    if (conn != null)
                        if (conn.State == ConnectionState.Open) conn.Close();
                }
            }
        }

        #endregion

        #region Cancelar

        /// <summary>
        /// /Cancela un envío de ficha tecnica
        /// </summary>
        /// <param name="regEnvio"></param>
        /// <param name="motivo"></param>
        /// <param name="usuarioExtranet"></param>
        /// <param name="otrosUsuariosEmpresa"></param>
        public void CancelarEnvioExtranetFT(FtExtEnvioDTO regEnvio, string motivo, string usuarioExtranet, string otrosUsuariosEmpresa)
        {
            DateTime fechaRegistro = ObtenerFechaSistemaFT(regEnvio.Ftenvcodi); //incluye fechaSistema

            //solo se permite la cancelacion a los envios con estado SOLICITUD y Solicitud de asignacion
            if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud)
            {
                FtExtEnvioDTO regEnvioInicial = GetByIdFtExtEnvio(regEnvio.Ftenvcodi);
                int estadoEnvio = ConstantesFichaTecnica.EstadoCancelado;

                //Cuando se cancela no se crea nueva versión, solo log
                regEnvio.VersionActual = null;

                //Actualización de envio
                regEnvio.Estenvcodi = estadoEnvio;
                regEnvio.Ftenvfecmodificacion = fechaRegistro;
                regEnvio.Ftenvusumodificacion = usuarioExtranet;
                //regEnvio.ftenvfec = ObtenerFechaSistemaPosteriorPR31(fechaRegistro);  // Editar Iteracion 2
                regEnvio.Ftenvobs = motivo;
                regEnvio.FlagUpdateEnvio = true;

                //log
                FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                logEnvio.Estenvcodi = estadoEnvio;
                logEnvio.Ftelogobs = motivo != null ? (motivo.Trim() != "" ? ("Cancelación del envío. Motivo: '" + motivo + "'.") : "Cancelación del envío.") : "Cancelación del envío.";
                logEnvio.Ftelogcondicion = "";
                logEnvio.Ftelogusucreacion = usuarioExtranet;
                logEnvio.Ftelogfeccreacion = fechaRegistro.AddSeconds(1);
                regEnvio.LogEnvioActual = logEnvio;

                //Guardar actualización y log en bd
                int ftenvcodi = GuardarEnvioFormatoFichaExtranetTransaccional(regEnvio);

                FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(ftenvcodi);
                var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, new List<FTParametroModificacion>());
                EnvioCorreoExtranetFichaTecnica(ConstantesFichaTecnica.TipoCorreoNotificacionAutomatica, regEnvioGuardado, mapaVariable);

                //si el envio solicitado fue derivado y aun tiene revision pendiente para algunas areas, todos pasan a ATENDIDO
                CambiarAAtendidoEnvioDerivado(ConstantesFichaTecnica.EstadoCancelado, regEnvioInicial);
            }
            else
            {
                throw new ArgumentException("El envio ha sido procesado, no se puede cancelar.");
            }
        }

        #endregion

        #region Observacion de envio

        /// <summary>
        /// Devuelve X dias habiles despues de X fecha 
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="numDiasHabilesDespues"></param>
        /// <returns></returns>
        public DateTime ObtenerDiasHabiles(DateTime fechaInicial, int numDiasHabilesDespues)
        {
            DateTime salida = new DateTime();
            salida = numDiasHabilesDespues != 0 ? FactorySic.GetDocDiaEspRepository().ObtenerFechaDiasHabiles(fechaInicial, numDiasHabilesDespues) : fechaInicial;

            return salida;
        }

        /// <summary>
        /// Devuelve el plazo predefinido para la subsanacion de observaciones segun etapa, incluye fecha sistema
        /// </summary>
        /// <param name="ftetcodi"></param>
        /// <param name="fechaSistema"></param>
        /// <returns></returns>
        public string ObtenerPlazoDiasParaSubsanarSegunEtapa(FtExtEnvioDTO objEnvio)
        {
            int ftetcodi = objEnvio.Ftetcodi;

            DateTime hoy = ObtenerFechaSistemaFT(objEnvio.Ftenvcodi);

            int numDiasHabiles = 0;

            switch (ftetcodi)
            {
                case ConstantesFichaTecnica.EtapaConexion: numDiasHabiles = 5; break;
                case ConstantesFichaTecnica.EtapaIntegracion: numDiasHabiles = 5; break;
                case ConstantesFichaTecnica.EtapaOperacionComercial: numDiasHabiles = 5; break;
                case ConstantesFichaTecnica.EtapaModificacion: numDiasHabiles = 10; break;
            }

            DateTime ffinplazo = ObtenerDiasHabiles(hoy, numDiasHabiles);

            string salida = ffinplazo.ToString(ConstantesAppServicio.FormatoFecha);

            return salida;
        }

        /// <summary>
        /// Observa un envio para cualquier etapa
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="data"></param>
        /// <param name="fechaMaxRespuesta"></param>
        /// <param name="usuarioIntranet"></param>
        public FtExtEnvioDTO ObservarEnvioFT(int ftenvcodi, DateTime fechaMaxRespuesta, string usuarioIntranet)
        {
            DateTime fechaSistemaEnvio = ObtenerFechaSistemaFT(ftenvcodi);

            //envio
            FtExtEnvioDTO regEnvio = GetByIdFtExtEnvio(ftenvcodi);
            FtExtEnvioDTO regEnvioInicial = GetByIdFtExtEnvio(ftenvcodi);
            regEnvio.VersionAnterior = regEnvio.VersionActual;
            string usuarioSolicitud = regEnvio.Ftenvususolicitud;

            DateTime fecRealMaxRespuesta = fechaMaxRespuesta.Date.AddDays(1).AddSeconds(-1);
            int result = DateTime.Compare(regEnvio.Ftenvfecsolicitud, fecRealMaxRespuesta);
            if (result > 0)
            {
                throw new ArgumentException("La fecha máxima de respuesta no puede ser menor a la fecha de solicitud.");
            }

            //Solo los envio en estado solicitud pueden ser observados
            if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud)
            {
                regEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoObservado;
                regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                regEnvio.Ftenvfecmodificacion = fechaSistemaEnvio;
                regEnvio.Ftenvfecobservacion = fechaSistemaEnvio;
                regEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaSistemaEnvio);
                regEnvio.Ftenvfecfinsubsanarobs = fecRealMaxRespuesta;
                regEnvio.Ftenvfecampliacion = null;

                ////log               
                FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                logEnvio.Ftelogusucreacion = usuarioIntranet;
                logEnvio.Ftelogfeccreacion = fechaSistemaEnvio.AddSeconds(1);
                logEnvio.Ftelogobs = "Envío observado.";
                logEnvio.Ftelogcondicion = ObtenerCondicionLog(ConstantesFichaTecnica.EstadoObservado, regEnvio, fechaSistemaEnvio);
                regEnvio.LogEnvioActual = logEnvio;

                //solo actualizar envio (cambiar carpeta), Version (pasar de temporal a oficial) y agregar log
                regEnvio.VersionTemporalIntranet.Fteverfeccreacion = fechaSistemaEnvio;
                regEnvio.VersionTemporalIntranet.Fteverusucreacion = usuarioIntranet;
                regEnvio.VersionTemporalIntranet.Ftevertipo = ConstantesFichaTecnica.GuardadoOficial;
                ActualizarEnvioIntranetTransaccional(regEnvio);

                //Eliminar los archivos residuales (no forman parte de los archivos activos)
                List<string> listaArchivoValido = ListarArchivoFisicoFromVersion(ftenvcodi, regEnvio.VersionTemporalIntranet.Ftevercodi);
                QuitarArchivosResidualesVersion(ftenvcodi, regEnvio.VersionTemporalIntranet.Ftevercodi, listaArchivoValido);

                //notificación a agente / COES
                FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(ftenvcodi);
                var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, new List<FTParametroModificacion>());
                EnvioCorreoExtranetFichaTecnica(ConstantesFichaTecnica.TipoCorreoNotificacionAutomatica, regEnvioGuardado, mapaVariable);

                //si el envio solicitado fue derivado y aun tiene revision pendiente para algunas areas, todos pasan a ATENDIDO
                CambiarAAtendidoEnvioDerivado(ConstantesFichaTecnica.EstadoObservado, regEnvioInicial);
            }
            else
            {
                throw new ArgumentException("El envío no se encuentra en estado Solicitud. No se puede observar.");
            }


            return regEnvio;
        }

        /// <summary>
        /// Devuelve la condicion para las diferentse acciones realizadas
        /// </summary>
        /// <param name="accionRealizada"></param>
        /// <param name="regEnvio"></param>
        /// <param name="fechaAccion"></param>
        /// <returns></returns>
        public string ObtenerCondicionLog(int accionRealizada, FtExtEnvioDTO regEnvio, DateTime? fechaAccion)
        {
            string salida = "";
            int etapaEnvio = regEnvio.Ftetcodi;
            int diasParaRevisarSolicitud = 0;
            int diasParaRevisarSubsanado = 0;

            switch (etapaEnvio)
            {
                case ConstantesFichaTecnica.EtapaConexion: diasParaRevisarSolicitud = ConstantesFichaTecnica.PlazoDiasRevisarSolicitudConexion; diasParaRevisarSubsanado = ConstantesFichaTecnica.PlazoDiasRevisarSubsanadoConexion; break;
                case ConstantesFichaTecnica.EtapaIntegracion: diasParaRevisarSolicitud = ConstantesFichaTecnica.PlazoDiasRevisarSolicitudIntegracion; diasParaRevisarSubsanado = ConstantesFichaTecnica.PlazoDiasRevisarSubsanadoIntegracion; break;
                case ConstantesFichaTecnica.EtapaOperacionComercial: diasParaRevisarSolicitud = ConstantesFichaTecnica.PlazoDiasRevisarSolicitudOperacionComercial; diasParaRevisarSubsanado = ConstantesFichaTecnica.PlazoDiasRevisarSubsanadoOperacionComercial; break;
                case ConstantesFichaTecnica.EtapaModificacion: diasParaRevisarSolicitud = ConstantesFichaTecnica.PlazoDiasRevisarSolicitudModificacion; diasParaRevisarSubsanado = ConstantesFichaTecnica.PlazoDiasRevisarSubsanadoModificacion; break;
            }

            DateTime? fechaSolicitudIniCarta = regEnvio.Ftenvfecinirev1;
            DateTime? fechaAprobacion = regEnvio.Ftenvfecaprobacion;
            DateTime? fechaDeObservacion = regEnvio.Ftenvfecobservacion;

            //busco la ultima version subsanada para obtener la fecha de subsanacion
            FtExtEnvioVersionDTO ultVersionSubsanada = ObtenerVersionParaCondicion(ConstantesFichaTecnica.EstadoSubsanacionObs, regEnvio);

            switch (accionRealizada)
            {
                case ConstantesFichaTecnica.EstadoObservado: //al observar envio
                                                             //
                    DateTime? fechaObservacionO = fechaAccion;

                    if (fechaObservacionO != null && fechaSolicitudIniCarta != null)
                    {
                        TimeSpan ts = fechaObservacionO.Value.Subtract(fechaSolicitudIniCarta.Value);
                        int diffDias = Convert.ToInt32(ts.TotalDays);

                        if (diffDias > diasParaRevisarSolicitud)
                        {
                            salida = ConstantesFichaTecnica.CondicionFueraPlazo;
                        }
                        else
                        {
                            salida = ConstantesFichaTecnica.CondicionEnPlazo;
                        }
                    }
                    break;

                case ConstantesFichaTecnica.EstadoDesaprobado: //al denegar envio - Solo se evalua si deniega desde un subsanado

                    //verificamos si se deniega desde un aprobado o desde un subsanado
                    if (fechaAprobacion == null) //cuando se deniega desde un aprobado, no se evalua condicion dado que no hay plazo para denegar aprobados
                    {

                    }
                    else
                    {
                        if (ultVersionSubsanada != null)
                        {
                            DateTime? fechaCartaSubsanacion = regEnvio.Ftenvfecinirev2;
                            DateTime? fechaDenegacion = regEnvio.Ftenvfecmodificacion;

                            if (fechaDenegacion != null && fechaCartaSubsanacion != null)
                            {
                                TimeSpan ts = fechaDenegacion.Value.Subtract(fechaCartaSubsanacion.Value);
                                int diffDias = Convert.ToInt32(ts.TotalDays);

                                if (diffDias > diasParaRevisarSubsanado)
                                {
                                    salida = ConstantesFichaTecnica.CondicionFueraPlazo;
                                }
                                else
                                {
                                    salida = ConstantesFichaTecnica.CondicionEnPlazo;
                                }
                            }
                        }
                    }
                    break;

                case ConstantesFichaTecnica.EstadoAprobado: //al aprobar envio - Puede ser desde uno solicitado o subsanado

                    //verificamos si se esta aprobando uno solicitado o subsanado
                    if (fechaDeObservacion == null) //se aprueba desde un solicitado
                    {
                        if (fechaAprobacion != null && fechaSolicitudIniCarta != null)
                        {
                            TimeSpan ts = fechaAprobacion.Value.Subtract(fechaSolicitudIniCarta.Value);
                            int diffDias = Convert.ToInt32(ts.TotalDays);

                            if (diffDias > diasParaRevisarSolicitud)
                            {
                                salida = ConstantesFichaTecnica.CondicionFueraPlazo;
                            }
                            else
                            {
                                salida = ConstantesFichaTecnica.CondicionEnPlazo;
                            }
                        }
                    }
                    else // se aprueba desde un subsanado
                    {
                        if (ultVersionSubsanada != null)
                        {

                            DateTime? fechaCartaSubsanacion1 = regEnvio.Ftenvfecinirev2;

                            if (fechaAprobacion != null && fechaCartaSubsanacion1 != null)
                            {
                                TimeSpan ts = fechaAprobacion.Value.Subtract(fechaCartaSubsanacion1.Value);
                                int diffDias = Convert.ToInt32(ts.TotalDays);

                                if (diffDias > diasParaRevisarSubsanado)
                                {
                                    salida = ConstantesFichaTecnica.CondicionFueraPlazo;
                                }
                                else
                                {
                                    salida = ConstantesFichaTecnica.CondicionEnPlazo;
                                }
                            }
                        }
                    }
                    break;

                case ConstantesFichaTecnica.EstadoAprobadoParcialmente: //al aprobar parcialmente envio - Solo se puede realizar desde un subsanado

                    if (ultVersionSubsanada != null)
                    {

                        DateTime? fechaCartaSubsanacion2 = regEnvio.Ftenvfecinirev2;

                        if (fechaAprobacion != null && fechaCartaSubsanacion2 != null)
                        {
                            TimeSpan ts = fechaAprobacion.Value.Subtract(fechaCartaSubsanacion2.Value);
                            int diffDias = Convert.ToInt32(ts.TotalDays);

                            if (diffDias > diasParaRevisarSubsanado)
                            {
                                salida = ConstantesFichaTecnica.CondicionFueraPlazo;
                            }
                            else
                            {
                                salida = ConstantesFichaTecnica.CondicionEnPlazo;
                            }
                        }
                    }

                    break;
            }

            return salida;
        }

        /// <summary>
        /// Devuelve la ultima version de cierta accion
        /// </summary>
        /// <param name="idCarpetaBuscada"></param>
        /// <param name="envio"></param>
        /// <returns></returns>
        public FtExtEnvioVersionDTO ObtenerVersionParaCondicion(int idCarpetaBuscada, FtExtEnvioDTO envio)
        {
            FtExtEnvioVersionDTO salida = new FtExtEnvioVersionDTO();

            //si se busca la ultima version subsanada, se debe buscar version con estenvcodi 6 (observado)
            switch (idCarpetaBuscada)
            {
                case ConstantesFichaTecnica.EstadoSubsanacionObs: //busco la ultima version subsanada
                    List<FtExtEnvioVersionDTO> listaVersionesTotales = FactorySic.GetFtExtEnvioVersionRepository().GetByCriteria(envio.Ftenvcodi.ToString(), ConstantesFichaTecnica.GuardadoOficial.ToString());
                    List<FtExtEnvioVersionDTO> listaVersionesObservadas = listaVersionesTotales.Where(x => x.Estenvcodi == ConstantesFichaTecnica.EstadoObservado && x.Fteverusucreacion.Contains("@")).OrderByDescending(x => x.Fteverfeccreacion).ToList();
                    salida = listaVersionesObservadas.Any() ? listaVersionesObservadas.First() : null;
                    break;

            }

            return salida;
        }

        /// <summary>
        /// Actualiza los datos de envio solo para denegacion de aprobados
        /// </summary>
        /// <param name="regEnvio"></param>
        private void ActualizarEnvioIntranetTransaccionalEspecial(FtExtEnvioDTO regEnvio)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //actualizar envio
                UpdateFtExtEnvio(regEnvio, conn, tran);

                //actualizar version
                UpdateFtExtEnvioVersion(regEnvio.VersionActual, conn, tran);

                //actualizar revision
                if (regEnvio.ListaRevision != null)
                {
                    foreach (var rev in regEnvio.ListaRevision)
                    {
                        UpdateFtExtEnvioRevision(rev, conn, tran);
                    }
                }

                //actualizar equipos (cambiar estado final de null a A, D)
                if (regEnvio.VersionActual.ListaEquipoEnvio != null)
                {
                    foreach (var envioEq in regEnvio.VersionActual.ListaEquipoEnvio)
                    {
                        UpdateFtExtEnvioEq(envioEq, conn, tran);
                    }
                }

                //nuevo log
                regEnvio.LogEnvioActual.Ftenvcodi = regEnvio.Ftenvcodi;
                SaveFtExtEnvioLog(regEnvio.LogEnvioActual, conn, tran);

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        /// <summary>
        /// Actualiza los datos de envio
        /// </summary>
        /// <param name="regEnvio"></param>
        private void ActualizarEnvioIntranetTransaccional(FtExtEnvioDTO regEnvio)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //actualizar envio
                UpdateFtExtEnvio(regEnvio, conn, tran);

                //actualizar version
                UpdateFtExtEnvioVersion(regEnvio.VersionTemporalIntranet, conn, tran);

                //actualizar equipos (cambiar estado final de null a A, D)
                if (regEnvio.VersionTemporalIntranet.ListaEquipoEnvio != null)
                {
                    foreach (var envioEq in regEnvio.VersionTemporalIntranet.ListaEquipoEnvio)
                    {
                        UpdateFtExtEnvioEq(envioEq, conn, tran);
                    }
                }

                //nuevo log
                regEnvio.LogEnvioActual.Ftenvcodi = regEnvio.Ftenvcodi;
                SaveFtExtEnvioLog(regEnvio.LogEnvioActual, conn, tran);

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        #endregion

        #region Subsanación de Envio

        public void ListarCambioProcesoRevision(int codigoEnvio, int ftevercodi, int fteeqcodi, List<FTDatoRevisionParametrosAEnvio> lstRevisionWeb, bool flagActualizarArchivo,
                        out List<FtExtEnvioRevisionDTO> listaRevisionUpdate)
        {
            listaRevisionUpdate = new List<FtExtEnvioRevisionDTO>();
            FtExtEnvioDTO envio = GetByIdFtExtEnvio(codigoEnvio);

            //revision y sus archivos por equipo o evento
            List<FtExtEnvioRevisionDTO> listaRevisionBD = new List<FtExtEnvioRevisionDTO>();
            List<FtExtEnvioArchivoDTO> listaArchivoRevisionBD = new List<FtExtEnvioArchivoDTO>();

            //formato extranet
            if (envio.Ftenvtipoformato == ConstantesFichaTecnica.FormatoConexIntegModif)
            {
                if (fteeqcodi != 0)
                {
                    listaRevisionBD = GetByCriteriaFtExtEnvioRevisionsXVersionYDato(ftevercodi).Where(x => x.Fteeqcodi == fteeqcodi).ToList();
                    listaArchivoRevisionBD = ListByRevisionFtExtEnvioArchivos(string.Join(",", listaRevisionBD.Select(x => x.Ftrevcodi)));

                    foreach (var itemBD in listaRevisionBD)
                    {
                        var objWeb = lstRevisionWeb.Find(x => x.Ftitcodi == itemBD.Ftitcodi); //cada item
                        if (objWeb != null)
                        {
                            ValidarExisteCambioFilaRevision(itemBD, objWeb, listaArchivoRevisionBD.Where(x => x.Ftrevcodi == itemBD.Ftrevcodi).ToList(), flagActualizarArchivo, ref listaRevisionUpdate);
                        }
                    }
                }
            }
            else
            {
                //operacion comercial / dar de baj
                listaRevisionBD = GetByCriteriaFtExtEnvioRevisionsXVersionYReq(ftevercodi);
                listaArchivoRevisionBD = ListByRevisionFtExtEnvioArchivos(string.Join(",", listaRevisionBD.Select(x => x.Ftrevcodi)));

                foreach (var itemBD in listaRevisionBD)
                {
                    var objWeb = lstRevisionWeb.Find(x => x.Fevrqcodi == itemBD.Fevrqcodi); //cada requisito
                    if (objWeb != null)
                    {
                        ValidarExisteCambioFilaRevision(itemBD, objWeb, listaArchivoRevisionBD.Where(x => x.Ftrevcodi == itemBD.Ftrevcodi).ToList(), flagActualizarArchivo, ref listaRevisionUpdate);
                    }
                }
            }
        }

        private void ValidarExisteCambioFilaRevision(FtExtEnvioRevisionDTO itemBD, FTDatoRevisionParametrosAEnvio objWeb,
                                              List<FtExtEnvioArchivoDTO> listaArchivoRevisionBD, bool flagActualizarArchivo, ref List<FtExtEnvioRevisionDTO> listaRevisionUpdate)
        {
            int numColumnaEditada = objWeb.NumcolumnaEditada ?? 0;
            int tipoArchivoXColumna = 0;

            List<FtExtEnvioArchivoDTO> listaArchivoColumnaWeb = new List<FtExtEnvioArchivoDTO>();
            List<FtExtEnvioArchivoDTO> listaArchivoRevisionColumnaBD = new List<FtExtEnvioArchivoDTO>();
            bool existeCambioRev = false;

            //cambio de contenido html
            objWeb.MsgColumnaEditada = (objWeb.MsgColumnaEditada ?? "").Trim();
            switch (numColumnaEditada)
            {
                case 1:
                    listaArchivoColumnaWeb = objWeb.ListaArchivosObsCoes ?? new List<FtExtEnvioArchivoDTO>();
                    tipoArchivoXColumna = ConstantesFichaTecnica.TipoArchivoRevisionObsCOES;
                    if (itemBD.Ftrevhtmlobscoes != objWeb.MsgColumnaEditada)
                    {
                        itemBD.Ftrevhtmlobscoes = objWeb.MsgColumnaEditada;
                        existeCambioRev = true;
                    }
                    break;
                case 2:
                    listaArchivoColumnaWeb = objWeb.ListaArchivosRptaAgente ?? new List<FtExtEnvioArchivoDTO>();
                    tipoArchivoXColumna = ConstantesFichaTecnica.TipoArchivoRevisionRptaAgente;
                    if (itemBD.Ftrevhtmlrptaagente != objWeb.MsgColumnaEditada)
                    {
                        itemBD.Ftrevhtmlrptaagente = objWeb.MsgColumnaEditada;
                        existeCambioRev = true;
                    }
                    break;
                case 3:
                    listaArchivoColumnaWeb = objWeb.ListaArchivosRptaCoes ?? new List<FtExtEnvioArchivoDTO>();
                    tipoArchivoXColumna = ConstantesFichaTecnica.TipoArchivoRevisionRptaCOES;
                    if (itemBD.Ftrevhtmlrptacoes != objWeb.MsgColumnaEditada)
                    {
                        itemBD.Ftrevhtmlrptacoes = objWeb.MsgColumnaEditada;
                        existeCambioRev = true;
                    }
                    break;
            }

            //cambio de combo estado
            if (itemBD.Ftrevestado != objWeb.IdValorEstado)
            {
                existeCambioRev = true;
                itemBD.Ftrevestado = objWeb.IdValorEstado;
            }

            if (flagActualizarArchivo)
            {
                //cambio de archivos
                var listaArchivosRev = new List<FtExtEnvioArchivoDTO>();
                listaArchivoRevisionColumnaBD = listaArchivoRevisionBD.Where(x => x.Ftearctipo == tipoArchivoXColumna).ToList();

                foreach (var regArchWeb in listaArchivoColumnaWeb)
                {
                    var regArchBD = listaArchivoRevisionColumnaBD.Find(x => x.Ftearcnombrefisico == regArchWeb.Ftearcnombrefisico);

                    if (regArchBD == null)
                    {
                        var regArch = new FtExtEnvioArchivoDTO();
                        regArch.Ftearcnombrefisico = regArchWeb.Ftearcnombrefisico;
                        regArch.Ftearcnombreoriginal = regArchWeb.Ftearcnombreoriginal;
                        regArch.Ftearcestado = 1;
                        regArch.Ftearctipo = tipoArchivoXColumna;
                        regArch.Ftearcflagsustentoconf = regArch.Ftearcflagsustentoconf ?? "N";

                        listaArchivosRev.Add(regArch);
                    }
                }

                foreach (var regArchBD in listaArchivoRevisionColumnaBD)
                {
                    var regArchWeb = listaArchivoColumnaWeb.Find(x => x.Ftearcnombrefisico == regArchBD.Ftearcnombrefisico);
                    if (regArchWeb == null) //quitar eliminados
                    {
                        regArchBD.Ftearcestado = 0; //eliminado lógico
                        listaArchivosRev.Add(regArchBD);
                    }
                    else
                    {
                        //cambio el check de confidencialidad
                        string confidencialidadArcWeb = (regArchWeb.Ftearcflagsustentoconf ?? "").Trim();
                        string confidencialidadArcBD = (regArchBD.Ftearcflagsustentoconf ?? "").Trim();
                        if (confidencialidadArcWeb != confidencialidadArcBD)
                        {
                            regArchBD.Ftearcflagsustentoconf = confidencialidadArcWeb;
                            listaArchivosRev.Add(regArchBD);
                        }
                    }
                }
                itemBD.ListaArchivosRev = listaArchivosRev;
                if (listaArchivosRev.Any()) existeCambioRev = true;
            }

            //
            if (existeCambioRev)
                listaRevisionUpdate.Add(itemBD);
        }

        public void ActualizarEnvioEq(FtExtEnvioEqDTO regEnvioEq)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //actualizar
                UpdateFtExtEnvioEq(regEnvioEq, conn, tran);

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        #endregion

        #region Denegar Envio

        /// <summary>
        /// Observa un envio para cualquier etapa
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="data"></param>
        /// <param name="fechaMaxRespuesta"></param>
        /// <param name="usuarioIntranet"></param>
        public FtExtEnvioDTO DenegarEnvioFT(int ftenvcodi, DateTime? fechaVigencia, string mensaje, string ccAgentes, string usuarioIntranet)
        {
            DateTime fechaSistemaEnvio = ObtenerFechaSistemaFT(ftenvcodi);
            bool esDenegacionAprobado = false;

            //envio
            FtExtEnvioDTO regEnvio = GetByIdFtExtEnvio(ftenvcodi);
            FtExtEnvioDTO regEnvioInicial = GetByIdFtExtEnvio(ftenvcodi);
            regEnvio.VersionAnterior = regEnvio.VersionActual;
            string agenteUltimoEvento = regEnvio.AgenteUltimoEvento;

            bool esCasoEspecial = regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoAprobado && regEnvio.Ftetcodi == ConstantesFichaTecnica.EtapaConexion;

            //Solo los envio en estado subsanado y (aprobados en conexion) pueden ser denegados
            if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs
                || (esCasoEspecial))
            {
                //Seteo Denegado en los estados de cada fila para los aprobados en conexion
                if (esCasoEspecial)
                {
                    int result = DateTime.Compare(regEnvio.Ftenvfecsolicitud, fechaVigencia.Value);
                    if (result > 0)
                    {
                        throw new ArgumentException("La fecha vigencia no puede ser menor a la fecha de solicitud.");
                    }

                    esDenegacionAprobado = true; //indico que se esta denegando un aprobado

                    //crear nueva versión estado denegado
                    /*foreach (var fila in data)
                    {
                        fila.IdValorEstado = "D";
                    }
                    */
                    //seteo fechaVigencia
                    regEnvio.Ftenvfecvigencia = fechaVigencia.Value;
                }

                //Envio
                regEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoDesaprobado;
                regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                regEnvio.Ftenvfecmodificacion = fechaSistemaEnvio;
                regEnvio.Ftenvusumodificacion = usuarioIntranet;
                regEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaSistemaEnvio);
                regEnvio.Ftenvobs = mensaje;

                //Log               
                FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                logEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoDesaprobado;
                logEnvio.Ftelogusucreacion = usuarioIntranet;
                logEnvio.Ftelogfeccreacion = fechaSistemaEnvio.AddSeconds(1);
                logEnvio.Ftelogobs = "Envío Denegado. " + (mensaje != null ? (mensaje.Trim() != "" ? ("Mensaje al Agente: " + mensaje.Trim()) : "") : "");
                logEnvio.Ftelogcondicion = ObtenerCondicionLog(ConstantesFichaTecnica.EstadoDesaprobado, regEnvio, fechaSistemaEnvio);
                regEnvio.LogEnvioActual = logEnvio;

                FtExtEnvioVersionDTO regVersionTrabajo = esCasoEspecial ? regEnvio.VersionActual : regEnvio.VersionTemporalIntranet;

                //solo actualizar envio (cambiar carpeta), Version (pasar de temporal a oficial) y agregar log
                regVersionTrabajo.Fteverfeccreacion = fechaSistemaEnvio;
                regVersionTrabajo.Fteverusucreacion = usuarioIntranet;
                regVersionTrabajo.Ftevertipo = ConstantesFichaTecnica.GuardadoOficial;
                regVersionTrabajo.ListaEquipoEnvio = GetByCriteriaFtExtEnvioEqs(regVersionTrabajo.Ftevercodi.ToString());
                foreach (var item in regVersionTrabajo.ListaEquipoEnvio)
                {
                    item.Fteeqflagaprob = "D";
                }

                //Obtengo la revision para en envio
                List<FtExtEnvioRevisionDTO> listaRevisionBD = GetByCriteriaFtExtEnvioRevisionsXVersionYDato(regVersionTrabajo.Ftevercodi);
                foreach (var revision in listaRevisionBD)
                {
                    //para la etapa Modificación solo denegar los items que tienen cambios
                    if (regEnvio.Ftetcodi == ConstantesFichaTecnica.EtapaModificacion)
                    {
                        if (revision.Ftrevestado != null) revision.Ftrevestado = ConstantesFichaTecnica.OpcionDenegado;
                    }
                    else
                    {
                        revision.Ftrevestado = ConstantesFichaTecnica.OpcionDenegado;
                    }
                }
                regEnvio.ListaRevision = listaRevisionBD;

                regEnvio.VersionActual = regVersionTrabajo;
                ActualizarEnvioIntranetTransaccionalEspecial(regEnvio);

                //Eliminar los archivos residuales (no forman parte de los archivos activos)
                List<string> listaArchivoValido = ListarArchivoFisicoFromVersion(ftenvcodi, regVersionTrabajo.Ftevercodi);
                QuitarArchivosResidualesVersion(ftenvcodi, regVersionTrabajo.Ftevercodi, listaArchivoValido);

                //notificación a agente / COES
                FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(ftenvcodi);
                regEnvioGuardado.CorreosCCAgentes = ccAgentes;
                regEnvioGuardado.MensajeAlAgente = mensaje;
                regEnvioGuardado.EsDenegacionAprobados = esDenegacionAprobado;
                var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, new List<FTParametroModificacion>());
                EnvioCorreoExtranetFichaTecnica(ConstantesFichaTecnica.TipoCorreoNotificacionAutomatica, regEnvioGuardado, mapaVariable);

                //si el envio subsanado fue derivado y aun tiene revision pendiente para algunas areas, todos pasan a ATENDIDO
                CambiarAAtendidoEnvioDerivado(ConstantesFichaTecnica.EstadoDesaprobado, regEnvioInicial);
            }
            else
            {
                throw new ArgumentException("El envío no se puede denegar.");
            }

            return regEnvio;
        }

        #endregion

        #region Aprobar Envio

        /// <summary>
        /// Actualiza los estados de los equipos al aprobar envio
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="usuario"></param>
        public void ActualizarEstadosEquiposAlAprobar(int ftenvcodi, string usuario)
        {
            FtExtEnvioDTO envio = GetByIdFtExtEnvio(ftenvcodi);
            int version = envio.VersionActual.Ftevercodi;
            int etapa = envio.Ftetcodi;


            List<FtExtEnvioEqDTO> lstEnviosEq = GetByCriteriaFtExtEnvioEqs(version.ToString());

            //EQUIPOS DE GENERACIÓN
            string tareaCodiGen = "3,4,10,11,6";
            List<int> listaFamcodiGen = FactorySic.GetEqFamiliaRepository().ListarByTareaIds(tareaCodiGen).Select(x => x.Famcodi).ToList();
            //LÍNEAS DE TRANSMISIÓN Y SUBESTACIONES
            string tareaCodiTrans = "1,2";
            List<int> listaFamcodiTrans = FactorySic.GetEqFamiliaRepository().ListarByTareaIds(tareaCodiTrans).Select(x => x.Famcodi).ToList();

            foreach (var itemEq in lstEnviosEq)
            {
                int? equicodi = itemEq.Equicodi;
                int? famcodi = itemEq.Famcodi;

                if (equicodi != null)
                {
                    bool flagUpdateEstado = true;

                    //Verificar los casos especiales por equipo (Caso 1)
                    if (itemEq.Fteeqflagespecial == ConstantesFichaTecnica.CasoEspecial1)
                    {
                        //Caso 1. Si la central está en conexion o integracion entonces no se guarda en bd hasta que llegue a Operación comercial
                        if (etapa == ConstantesFichaTecnica.EtapaConexion || etapa == ConstantesFichaTecnica.EtapaIntegracion)
                        {
                            flagUpdateEstado = false;
                        }
                    }

                    //Verificar los casos especiales por equipo (Caso 2)
                    if (itemEq.Fteeqflagespecial == ConstantesFichaTecnica.CasoEspecial1)
                    {
                        //Caso . Si la central está en conexion entonces no se guarda en bd hasta que llegue a integracion
                        if (etapa == ConstantesFichaTecnica.EtapaConexion)
                        {
                            flagUpdateEstado = false;
                        }
                    }

                    //actualizar
                    if (flagUpdateEstado)
                    {
                        List<int> lstGen = listaFamcodiGen.Where(x => x == famcodi.Value).ToList();
                        List<int> lstTx = listaFamcodiTrans.Where(x => x == famcodi.Value).ToList();

                        EqPropequiDTO propiedadEstado = new EqPropequiDTO();
                        propiedadEstado.Equicodi = equicodi.Value;
                        propiedadEstado.Fechapropequi = envio.Ftenvfecvigencia;
                        propiedadEstado.Propequifeccreacion = DateTime.Now;
                        propiedadEstado.Propequiusucreacion = usuario;
                        propiedadEstado.Propcodi = ConstantesAppServicio.PropiedadAuditoriaEstado;

                        EqEquipoDTO equipo = GetByIdEqEquipo(equicodi.Value);

                        if (etapa == ConstantesFichaTecnica.EtapaConexion)
                        {
                            //si es equipo generacion
                            if (lstGen.Any())
                            {
                                equipo.Equiestado = ConstantesAppServicio.Proyecto;
                                FactorySic.GetEqEquipoRepository().Update(equipo);

                                propiedadEstado.Valor = ConstantesAppServicio.Proyecto;
                                FactorySic.GetEqPropequiRepository().Save(propiedadEstado);

                            }
                            else
                            {//si es equipo transmision
                                if (lstTx.Any())
                                {
                                    equipo.Equiestado = ConstantesAppServicio.Proyecto;
                                    FactorySic.GetEqEquipoRepository().Update(equipo);

                                    propiedadEstado.Valor = ConstantesAppServicio.Proyecto;
                                    FactorySic.GetEqPropequiRepository().Save(propiedadEstado);
                                }
                            }
                        }

                        if (etapa == ConstantesFichaTecnica.EtapaIntegracion)
                        {
                            //si es equipo generacion
                            if (lstGen.Any())
                            {
                                equipo.Equiestado = ConstantesAppServicio.FueraCOES;
                                FactorySic.GetEqEquipoRepository().Update(equipo);

                                propiedadEstado.Valor = ConstantesAppServicio.FueraCOES;
                                FactorySic.GetEqPropequiRepository().Save(propiedadEstado);

                            }
                            else
                            {//si es equipo transmision
                                if (lstTx.Any())
                                {
                                    equipo.Equiestado = ConstantesAppServicio.Activo;
                                    FactorySic.GetEqEquipoRepository().Update(equipo);

                                    propiedadEstado.Valor = ConstantesAppServicio.Activo;
                                    FactorySic.GetEqPropequiRepository().Save(propiedadEstado);
                                }
                            }
                        }

                        if (etapa == ConstantesFichaTecnica.EtapaOperacionComercial)
                        {
                            //si es equipo generacion
                            if (lstGen.Any())
                            {
                                equipo.Equiestado = ConstantesAppServicio.Activo;
                                FactorySic.GetEqEquipoRepository().Update(equipo);

                                propiedadEstado.Valor = ConstantesAppServicio.Activo;
                                FactorySic.GetEqPropequiRepository().Save(propiedadEstado);

                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Carga a BD de los parametros aprobados
        /// </summary>
        /// <param name="objGuardar"></param>
        public void ActualizarPropiedadesYConceptos(FTParametroGuardar objGuardar)
        {
            //guardar en PR_GRUPODAT
            MigracionesAppServicio servParame = new MigracionesAppServicio();
            servParame.CargaMasivaParametrosMop(objGuardar.ListaGrupodatNuevo, objGuardar.ListaGrupodatModificado, objGuardar.Usuario);

            //guardar en EQ_PROPEQUI
            var servEq = new EquipamientoAppServicio();
            DateTime fechaRegistro = DateTime.Now;

            #region Incidencia INC 2025-002295

            if (objGuardar.Ftenvcodi == 2)
            {
                objGuardar.Usuario = "diego.huenchi";
                fechaRegistro = new DateTime(2025, 6, 19, 18, 4, 37);
            }

            #endregion

            foreach (var item in objGuardar.ListaPropequi.GroupBy(x => x.Equicodi))
            {
                servEq.ActualizarListaPropiedades(item.ToList(), fechaRegistro, item.Key, "-1", "-1", objGuardar.Usuario);
            }
        }

        /// <summary>
        /// Listar propiedades y Conceptos, usa ENLACES
        /// </summary>
        /// <param name="lstTotalParametros"></param>
        /// <param name="opcionReemplazo"></param>
        /// <param name="fechaVigencia"></param>
        /// <param name="enlaceSI"></param>
        /// <param name="enlaceCarta"></param>
        /// <param name="enlaceOtro"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public FTParametroGuardar ListarPropiedadesYConceptosAActualizar(List<FtExtEnvioDatoDTO> lstTotalParametros, string opcionReemplazo,
                                                             DateTime fechaVigencia, string enlaceSI, string enlaceCarta, string enlaceOtro, string usuario)
        {
            //para archivos confidenciales que solo son accedidos a traves de la Intranet
            string urlIntranet = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyUrlIntranet] + "FileFT/DescargarConfidencial?archivo=";

            //para archivos que pueden ser accedidos desde el Portal Público
            string urlFileapp = FichaTecnicaAppServicio.GetUrlFileappFichaTecnica() + "FileFT/Descargar?archivo=";

            //Obtengo listado de propequis y gruposdat a guardar
            FTParametroGuardar objGuardar = new FTParametroGuardar();

            var listaXEnvioEq = lstTotalParametros.GroupBy(x => new { x.Fteeqcodi }).ToList();

            string valorAReemplazar = "";
            if ((opcionReemplazo ?? "").Trim() != "")
            {
                if (opcionReemplazo.Trim() == "V")
                    valorAReemplazar = ""; //mantener el valor vacío del agente
                if (opcionReemplazo.Trim() == "C")
                    valorAReemplazar = "0"; //cambiar el valor vacío del agente a cero
            }

            foreach (var envioeqkey in listaXEnvioEq)
            {
                List<EqPropequiDTO> lstPropequis = new List<EqPropequiDTO>();
                List<PrGrupodatDTO> lstGrupodat = new List<PrGrupodatDTO>();

                List<FtExtEnvioDatoDTO> lstTotalParametrosXEnvioEq = lstTotalParametros.Where(x => x.Fteeqcodi == envioeqkey.Key.Fteeqcodi).ToList();
                int? equicodiXEnvioEq = lstTotalParametrosXEnvioEq.First().Equicodi;
                int? grupocodiXEnvioEq = lstTotalParametrosXEnvioEq.First().Grupocodi;
                int? famcodiXEnvioEq = lstTotalParametrosXEnvioEq.First().Famcodi;

                int? grupofinal = null;
                //si es central termoelectrica
                if (equicodiXEnvioEq != null && famcodiXEnvioEq == ConstantesFichaTecnica.FamiliaCentralTermica)
                {
                    grupofinal = ObtenerGrupoCentral(equicodiXEnvioEq.Value);
                }
                else
                {
                    grupofinal = grupocodiXEnvioEq;
                }

                foreach (var parametro in lstTotalParametrosXEnvioEq)
                {
                    int? propcodi = parametro.Propcodi;
                    int? concepcodi = parametro.Concepcodi;
                    string tipo = parametro.Tipoelemento;
                    string valor = (parametro.Ftedatvalor ?? "").Trim();

                    //si la fila es posible que tenga numero por su "TIPO DE DATO"
                    bool esNumerico = false;
                    bool esVacioNumerico = false;
                    if (EsTipoNumero(tipo))
                    {
                        esNumerico = true;
                        if (valor == "-") valor = ""; //el guion ingresado por el agente se considera vacio
                        if (valor == "") esVacioNumerico = true;
                    }

                    //valor de check cero correcto
                    int? checkCero = null;
                    if (esNumerico)
                    {
                        if (esVacioNumerico)
                        {
                            //si es vacio manda lo del popup (para numericos y formula )
                            valor = valorAReemplazar;

                            //si el agente envia vacio colocar sin check para que se considere que el "0" no es correcto, que  no fue ingresado por el agente sino por el administrador para los procesos de los aplicativos
                            if (valor == "0") checkCero = 0;
                        }
                        else
                        {
                            //el agente ingresó cero "0" entonces se mostrará en el portal publico el valor de "0"
                            if (valor == "0") checkCero = 1;
                        }
                    }

                    //enlaces
                    GenerarUrlArchivoAGuardarFT(urlFileapp, urlIntranet, parametro, out string urlsDatoAguardar, out string urlsSustentoAguardar);

                    string urlsValor = urlsDatoAguardar;
                    string urlsSustento = (urlsSustentoAguardar + " " + enlaceSI + " " + enlaceCarta + " " + enlaceOtro).Trim();
                    if (EsTipoArchivo(tipo)) valor = urlsValor;

                    //crear propequi o grupodat
                    if (propcodi != null)
                    {
                        EqPropequiDTO objProp = new EqPropequiDTO();
                        objProp.Propcodi = propcodi.Value;
                        objProp.Equicodi = parametro.Equicodi.Value;
                        objProp.Fechapropequi = fechaVigencia;
                        objProp.FechapropequiDesc = fechaVigencia.ToString(ConstantesAppServicio.FormatoFecha);
                        objProp.Propequideleted = 0;
                        objProp.Propequicomentario = parametro.Ftedatcomentario;
                        objProp.Propequisustento = urlsSustento;
                        objProp.Lastuser = usuario;
                        objProp.Propequiusucreacion = usuario;
                        objProp.Propequifeccreacion = DateTime.Now;

                        objProp.Valor = valor;
                        objProp.Propequicheckcero = checkCero;
                        objProp.Propnomb = parametro.Propabrev;

                        lstPropequis.Add(objProp);
                    }

                    if (concepcodi != null)
                    {
                        PrGrupodatDTO objGrupo = new PrGrupodatDTO();

                        objGrupo.Concepcodi = concepcodi.Value;
                        objGrupo.Grupocodi = grupofinal.Value;
                        objGrupo.Fechadat = fechaVigencia;
                        objGrupo.Deleted = 0;
                        objGrupo.Gdatcomentario = parametro.Ftedatcomentario;
                        objGrupo.Gdatsustento = urlsSustento;
                        objGrupo.Fechaact = DateTime.Now;
                        objGrupo.Lastuser = usuario;

                        objGrupo.Formuladat = valor;
                        objGrupo.Gdatcheckcero = checkCero;
                        objGrupo.Concepabrev = parametro.Concepabrev;

                        lstGrupodat.Add(objGrupo);
                    }
                }

                List<FilaExcelParametrosGrupoMop> listaG = ObtenerParametrosGMO(lstGrupodat);

                if (listaG.Any())
                {
                    (new MigracionesAppServicio()).ValidarRegistrosMacro(DateTime.Now, listaG, usuario, out List<PrGrupodatDTO> lstRegparametrosCorrectos,
                        out List<PrGrupodatDTO> lstRegParametrosErroneos, out List<PrGrupodatDTO> listaNuevo, out List<PrGrupodatDTO> listaModificado);

                    //Ejecución de la grabación de parámetros de un archivo Excel
                    listaNuevo = listaNuevo.GroupBy(x => x.Concepcodi).Select(x => x.First()).ToList();
                    listaModificado = listaModificado.GroupBy(x => x.Concepcodi).Select(x => x.First()).ToList();

                    objGuardar.ListaGrupodatNuevo.AddRange(listaNuevo);
                    objGuardar.ListaGrupodatModificado.AddRange(listaModificado);
                }

                //guardamos las listas
                if (equicodiXEnvioEq != null)
                {
                    objGuardar.ListaPropequi.AddRange(lstPropequis);
                }
            }

            objGuardar.Usuario = usuario;
            return objGuardar;
        }

        private void GenerarUrlArchivoAGuardarFT(string urlPublico, string urlConf, FtExtEnvioDatoDTO itemDato, out string valor, out string sustento)
        {
            List<string> listaUrlValor = new List<string>();
            if (itemDato.ListaArchivoValorNoConf.Any()) listaUrlValor.Add(urlPublico + itemDato.NombFileZipValorNoConf);
            if (itemDato.ListaArchivoValorConf.Any()) listaUrlValor.Add(urlConf + itemDato.NombFileZipValorConf);
            valor = string.Join(" ", listaUrlValor);

            List<string> listaUrlSustento = new List<string>();
            if (itemDato.ListaArchivoSustentoNoConf.Any()) listaUrlSustento.Add(urlPublico + itemDato.NombFileZipSustentoNoConf);
            if (itemDato.ListaArchivoSustentoConf.Any()) listaUrlSustento.Add(urlConf + itemDato.NombFileZipSustentoConf);
            sustento = string.Join(" ", listaUrlSustento);
        }

        /// <summary>
        /// Castea una lista prgrupodat
        /// </summary>
        /// <param name="lstGrupodat"></param>
        /// <returns></returns>
        public List<FilaExcelParametrosGrupoMop> ObtenerParametrosGMO(List<PrGrupodatDTO> lstGrupodat)
        {
            List<FilaExcelParametrosGrupoMop> lstSalida = new List<FilaExcelParametrosGrupoMop>();

            foreach (var item in lstGrupodat)
            {
                var regpropequipo = new FilaExcelParametrosGrupoMop()
                {

                    //NumItem = numItem,
                    Formuladat = item.Formuladat,
                    StrFechadat = item.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha),
                    Gdatsustento = item.Gdatsustento,
                    Gdatcomentario = item.Gdatcomentario,
                    StrGdatcheckcero = item.Gdatcheckcero != null ? item.Gdatcheckcero.ToString() : "",
                    Concepcodi = item.Concepcodi,
                    Grupocodi = item.Grupocodi,
                    //Repcodi = repcodi,
                    Fechadat = item.Fechadat
                };

                lstSalida.Add(regpropequipo);
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve si es cero o no
        /// </summary>
        /// <param name="val"></param>
        /// <returns></returns>
        public bool EsCero(string val)
        {
            bool salida = false;

            if (int.TryParse(val, out int num1))
            {
                if (num1 == 0)
                    salida = true;
            }
            else
            {
                if (decimal.TryParse(val, out decimal num2))
                {
                    if (num2 == 0)
                        salida = true;
                }
            }

            return salida;
        }

        /// <summary>
        /// Realiza la aprobacion de un envio
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="fechaVigencia"></param>
        /// <param name="ccAgentes"></param>
        /// <param name="enlaceSI"></param>
        /// <param name="enlaceCarta"></param>
        /// <param name="enlaceOtro"></param>
        /// <param name="usuarioIntranet"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public FtExtEnvioDTO AprobarEnvioFT(int ftenvcodi, DateTime fechaVigencia, string ccAgentes,
                                        string enlaceSI, string enlaceCarta, string enlaceOtro, string usuarioIntranet)
        {
            DateTime fechaSistemaEnvio = ObtenerFechaSistemaFT(ftenvcodi);
            int estadoEnvio = ConstantesFichaTecnica.EstadoAprobado;
            bool enviarCorreo = true;
            bool permitirFechaAnterior = false;

            #region Incidencia INC 2025-002295

            if (ftenvcodi == 2)
            {
                enviarCorreo = false;
                permitirFechaAnterior = true;
                usuarioIntranet = "diego.huenchi";
                fechaSistemaEnvio = new DateTime(2025, 6, 19, 18, 4, 37);
            }

            #endregion

            //envio
            FtExtEnvioDTO regEnvio = GetByIdFtExtEnvio(ftenvcodi);
            FtExtEnvioDTO regEnvioInicial = GetByIdFtExtEnvio(ftenvcodi);
            regEnvio.VersionAnterior = regEnvio.VersionActual;

            int result = DateTime.Compare(regEnvio.Ftenvfecsolicitud, fechaVigencia);
            if (result > 0 && !permitirFechaAnterior)
            {
                throw new ArgumentException("La fecha vigencia no puede ser menor a la fecha de solicitud.");
            }

            //Solo los envio en estado solicitud pueden ser observados
            if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud || regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
            {
                regEnvio.Estenvcodi = estadoEnvio;
                regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                regEnvio.Ftenvfecmodificacion = fechaSistemaEnvio;
                regEnvio.Ftenvfecaprobacion = fechaSistemaEnvio;
                regEnvio.Ftenvfecvigencia = fechaVigencia;
                regEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaSistemaEnvio);
                regEnvio.Ftenvenlacesint = enlaceSI != null ? (enlaceSI.Trim() != "" ? enlaceSI.Trim() : null) : null;
                regEnvio.Ftenvenlacecarta = enlaceCarta != null ? (enlaceCarta.Trim() != "" ? enlaceCarta.Trim() : null) : null;
                regEnvio.Ftenvenlaceotro = enlaceOtro != null ? (enlaceOtro.Trim() != "" ? enlaceOtro.Trim() : null) : null;


                ////log               
                FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                logEnvio.Estenvcodi = estadoEnvio;
                logEnvio.Ftelogusucreacion = usuarioIntranet;
                logEnvio.Ftelogfeccreacion = fechaSistemaEnvio.AddSeconds(1);
                logEnvio.Ftelogobs = "Envío aprobado. Cuya Fecha Vigencia es: " + regEnvio.Ftenvfecvigencia.Value.ToString(ConstantesAppServicio.FormatoFechaFull) + ".";
                logEnvio.Ftelogcondicion = ObtenerCondicionLog(ConstantesFichaTecnica.EstadoAprobado, regEnvio, new DateTime());
                regEnvio.LogEnvioActual = logEnvio;

                //solo actualizar envio (cambiar carpeta), Version (pasar de temporal a oficial) y agregar log
                regEnvio.VersionTemporalIntranet.Fteverfeccreacion = fechaSistemaEnvio;
                regEnvio.VersionTemporalIntranet.Fteverusucreacion = usuarioIntranet;
                regEnvio.VersionTemporalIntranet.Ftevertipo = ConstantesFichaTecnica.GuardadoOficial;
                regEnvio.VersionTemporalIntranet.ListaEquipoEnvio = GetByCriteriaFtExtEnvioEqs(regEnvio.FtevercodiTemporalIntranet.ToString());
                foreach (var item in regEnvio.VersionTemporalIntranet.ListaEquipoEnvio)
                {
                    item.Fteeqflagaprob = "A";
                }
                ActualizarEnvioIntranetTransaccional(regEnvio);

                //Eliminar los archivos residuales (no forman parte de los archivos activos)
                List<string> listaArchivoValido = ListarArchivoFisicoFromVersion(ftenvcodi, regEnvio.VersionTemporalIntranet.Ftevercodi);
                QuitarArchivosResidualesVersion(ftenvcodi, regEnvio.VersionTemporalIntranet.Ftevercodi, listaArchivoValido);

                //notificación a agente / COES
                FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(ftenvcodi);
                regEnvioGuardado.CorreosCCAgentes = ccAgentes;
                var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, new List<FTParametroModificacion>());
                
                if (enviarCorreo)
                {
                    EnvioCorreoExtranetFichaTecnica(ConstantesFichaTecnica.TipoCorreoNotificacionAutomatica, regEnvioGuardado, mapaVariable);
                }

                //si el envio solicitado o subsanado fue derivado y aun tiene revision pendiente para algunas areas, todos pasan a ATENDIDO
                CambiarAAtendidoEnvioDerivado(ConstantesFichaTecnica.EstadoAprobado, regEnvioInicial);
            }
            else
            {
                throw new ArgumentException("El envío se encuentra en estado diferente a Solicitud o Subsanado. No se puede Aprobar.");
            }

            return regEnvio;
        }

        /// <summary>
        /// Realiza la aprobacion de un envio
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="data"></param>
        /// <param name="fechaVigencia"></param>
        /// <param name="ccAgentes"></param>
        /// <param name="hayParamaetrosVacios"></param>
        /// <param name="opcionReemplazo"></param>
        /// <param name="enlaceSI"></param>
        /// <param name="enlaceCarta"></param>
        /// <param name="enlaceOtro"></param>
        /// <param name="usuarioIntranet"></param>
        /// <returns></returns>
        public FtExtEnvioDTO AprobarParcialmenteEnvioFT(int ftenvcodi, DateTime fechaVigencia, string ccAgentes,
                                                     string enlaceSI, string enlaceCarta, string enlaceOtro, string fitcfgcodiAprobados, string fitcfgcodiDenegados, string usuarioIntranet)
        {
            DateTime fechaSistemaEnvio = ObtenerFechaSistemaFT(ftenvcodi);
            int estadoEnvio = ConstantesFichaTecnica.EstadoAprobadoParcialmente;

            //envio
            FtExtEnvioDTO regEnvio = GetByIdFtExtEnvio(ftenvcodi);
            FtExtEnvioDTO regEnvioInicial = GetByIdFtExtEnvio(ftenvcodi);
            regEnvio.VersionAnterior = regEnvio.VersionActual;
            int codigoVersionUltimo = regEnvio.VersionTemporalIntranet.Ftevercodi;
            int codigoVersionAnterior = regEnvio.FtevercodiTemporalFTVigente;

            int result = DateTime.Compare(regEnvio.Ftenvfecsolicitud, fechaVigencia);
            if (result > 0)
            {
                throw new ArgumentException("La fecha vigencia no puede ser menor a la fecha de solicitud.");
            }

            //Solo los envio en estado subsanados pueden ser aprobados parcialmente
            if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
            {
                int etapaEnvio = regEnvio.Ftetcodi;
                int tipoFormato = regEnvio.Ftenvtipoformato;

                if (etapaEnvio == ConstantesFichaTecnica.EtapaConexion || etapaEnvio == ConstantesFichaTecnica.EtapaIntegracion ||
                    (etapaEnvio == ConstantesFichaTecnica.EtapaModificacion && tipoFormato == ConstantesFichaTecnica.FormatoConexIntegModif))
                {
                    regEnvio.Estenvcodi = estadoEnvio;
                    regEnvio.Estenvnomb = GetDescripcionExtEstado(regEnvio.Estenvcodi);
                    regEnvio.Ftenvfecmodificacion = fechaSistemaEnvio;
                    regEnvio.Ftenvfecaprobacion = fechaSistemaEnvio;
                    regEnvio.Ftenvfecvigencia = fechaVigencia;
                    regEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaSistemaEnvio);
                    regEnvio.Ftenvenlacesint = enlaceSI != null ? (enlaceSI.Trim() != "" ? enlaceSI.Trim() : null) : null;
                    regEnvio.Ftenvenlacecarta = enlaceCarta != null ? (enlaceCarta.Trim() != "" ? enlaceCarta.Trim() : null) : null;
                    regEnvio.Ftenvenlaceotro = enlaceOtro != null ? (enlaceOtro.Trim() != "" ? enlaceOtro.Trim() : null) : null;


                    ////log               
                    FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                    logEnvio.Estenvcodi = estadoEnvio;
                    logEnvio.Ftelogusucreacion = usuarioIntranet;
                    logEnvio.Ftelogfeccreacion = fechaSistemaEnvio.AddSeconds(1);
                    logEnvio.Ftelogobs = "Envío aprobado parcialmente. Cuya Fecha Vigencia es: " + regEnvio.Ftenvfecvigencia.Value.ToString(ConstantesAppServicio.FormatoFechaFull) + ".";
                    logEnvio.Ftelogcondicion = ObtenerCondicionLog(ConstantesFichaTecnica.EstadoAprobadoParcialmente, regEnvio, new DateTime());
                    regEnvio.LogEnvioActual = logEnvio;

                    //solo actualizar envio (cambiar carpeta), Version (pasar de temporal a oficial) y agregar log
                    regEnvio.VersionTemporalIntranet.Fteverfeccreacion = fechaSistemaEnvio;
                    regEnvio.VersionTemporalIntranet.Fteverusucreacion = usuarioIntranet;
                    regEnvio.VersionTemporalIntranet.Ftevertipo = ConstantesFichaTecnica.GuardadoOficial;
                    regEnvio.VersionTemporalIntranet.ListaEquipoEnvio = GetByCriteriaFtExtEnvioEqs(regEnvio.FtevercodiTemporalIntranet.ToString());
                    foreach (var item in regEnvio.VersionTemporalIntranet.ListaEquipoEnvio)
                    {
                        item.Fteeqflagaprob = "A"; //se considera equipo aprobado así tenga parámetros denegados
                    }
                    ActualizarEnvioIntranetTransaccional(regEnvio);

                    //Eliminar los archivos residuales (no forman parte de los archivos activos)
                    List<string> listaArchivoValido = ListarArchivoFisicoFromVersion(ftenvcodi, regEnvio.VersionTemporalIntranet.Ftevercodi);
                    QuitarArchivosResidualesVersion(ftenvcodi, regEnvio.VersionTemporalIntranet.Ftevercodi, listaArchivoValido);

                    //notificación a agente / COES
                    string miTablaAprobados = "", miTablaDenegados = "";
                    if (ConstantesFichaTecnica.FormatoConexIntegModif == regEnvio.Ftenvtipoformato)
                    {
                        miTablaAprobados = ObtenerHtmlCorreoTablaParametrosModificadosAP(regEnvio.Ftenvcodi, codigoVersionUltimo, codigoVersionAnterior, fitcfgcodiAprobados, ConstantesFichaTecnica.TipoParametrosModificadosAprobados);
                        miTablaDenegados = ObtenerHtmlCorreoTablaParametrosModificadosAP(regEnvio.Ftenvcodi, codigoVersionUltimo, codigoVersionAnterior, fitcfgcodiDenegados, ConstantesFichaTecnica.TipoParametrosModificadosDenegados);
                    }

                    FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(ftenvcodi);
                    regEnvioGuardado.CorreosCCAgentes = ccAgentes;
                    regEnvioGuardado.HtmlTablaAprobados = miTablaAprobados;
                    regEnvioGuardado.HtmlTablaDenegados = miTablaDenegados;
                    var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, new List<FTParametroModificacion>());
                    EnvioCorreoExtranetFichaTecnica(ConstantesFichaTecnica.TipoCorreoNotificacionAutomatica, regEnvioGuardado, mapaVariable);

                    //si el envio solicitado o subsanado fue derivado y aun tiene revision pendiente para algunas areas, todos pasan a ATENDIDO
                    CambiarAAtendidoEnvioDerivado(ConstantesFichaTecnica.EstadoAprobadoParcialmente, regEnvioInicial);
                }
            }
            else
            {
                throw new ArgumentException("El envío se encuentra en estado diferente a Subsanado. No se puede Aprobar parcialmente.");
            }


            return regEnvio;
        }

        /// <summary>
        /// Devuelve el enlace del primer cuadro
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        public string ObtenerEnlaceSistemaIntranetFT(int idEnvio, int ftetcodi, int tipoFormato)
        {
            var urlConfig = FichaTecnicaAppServicio.GetUrlIntranet();
            string textoUrl = "";

            switch (ftetcodi)
            {
                case ConstantesFichaTecnica.EtapaConexion:
                case ConstantesFichaTecnica.EtapaIntegracion:
                    textoUrl = string.Format("Equipamiento/FTAdministrador/EnvioFormato?codigoEnvio={0}", idEnvio); break;
                case ConstantesFichaTecnica.EtapaOperacionComercial:
                    textoUrl = string.Format("Equipamiento/FTAdministrador/EnvioFormatoOperacionComercial?codigoEnvio={0}", idEnvio); break;
                case ConstantesFichaTecnica.EtapaModificacion:
                    if (tipoFormato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                        textoUrl = string.Format("Equipamiento/FTAdministrador/EnvioFormatoBajaModoOperacion?codigoEnvio={0}", idEnvio);
                    else
                        textoUrl = string.Format("Equipamiento/FTAdministrador/EnvioFormato?codigoEnvio={0}", idEnvio);
                    break;
            }
            var salida = urlConfig + textoUrl;

            return salida;
        }


        public string ObtenerHtmlCorreoTablaParametrosModificadosAP(int ftenvcodi, int codigoVersionUltimo, int codigoVersionAnterior, string strFitcfgcodisValidos, int tipo)
        {
            List<FTParametroModificacion> lstCambios = ObtenerListadoParametrosModificados(ftenvcodi, codigoVersionUltimo, codigoVersionAnterior, strFitcfgcodisValidos, tipo);

            StringBuilder strHtml = new StringBuilder();

            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                strHtml.Append("<table style='height: 37px; margin-left: auto; margin-right: auto; width: 1019px;' border='1'>");
            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                strHtml.Append("<table style='height: 37px; margin-left: auto; margin-right: auto; width: 1219px;' border='1'>");
            strHtml.Append("<tbody> ");
            strHtml.Append("<tr>");
            strHtml.Append("<td style='width: 101px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>&nbsp;Estado</span></td>");
            strHtml.Append("<td style='width: 106px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>C&oacute;digo</span></td>");
            strHtml.Append("<td style='width: 210px; background-color: #417aa7; height: 20px; text-align: center;'><span style='color: #ffffff;'>Nombre Equipo</span></td>");
            strHtml.Append("<td style='width: 139px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>&nbsp;Nombre Par&aacute;metro</span></td>");
            strHtml.Append("<td style='width: 139px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>&nbsp;Unidad Medida</span></td>");

            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
            {
                strHtml.Append("<td style='width: 139px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>&nbsp;Valor Actual</span></td>");
                strHtml.Append("<td style='width: 139px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>&nbsp;Valor Modificaci&oacute;n</span></td>");
            }
            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
            {
                strHtml.Append("<td style='width: 139px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>&nbsp;Valor Actual</span></td>");
                strHtml.Append("<td style='width: 139px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>&nbsp;Valor Denegado</span></td>");
                strHtml.Append("<td style='width: 200px; background-color: #417aa7; text-align: center;'><span style='color: #ffffff;'>&nbsp;Motivo</span></td>");
            }
            strHtml.Append("</tr>");

            foreach (var item in lstCambios)
            {
                if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                {
                    strHtml.Append("<tr>");
                    if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                        strHtml.Append("<td style='width: 101px; background-color: #66bf26; text-align: center;'>&nbsp;Aprobado</td>");
                    if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                        strHtml.Append("<td style='width: 101px; background-color: red; text-align: center;'>&nbsp;Denegado</td>");
                    strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.Codigo);
                    strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.NombreEquipo);
                    strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.NombreParametro);
                    strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.UnidadMedida);
                    if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                    {
                        strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.ValorExistente);
                        strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.ValorNuevo);
                    }
                    if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                    {
                        strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.ValorExistente);
                        strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.ValorDenegado);
                        strHtml.AppendFormat("<td style='width: 200px; text-align: center;'>&nbsp;{0}</td>", item.ValRptaCoes);
                    }
                    strHtml.Append("</tr>");
                }
                else
                {
                    if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                    {
                        if (item.ValEstado != ConstantesFichaTecnica.OpcionConforme)
                        {
                            strHtml.Append("<tr>");
                            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                                strHtml.Append("<td style='width: 101px; background-color: #66bf26; text-align: center;'>&nbsp;Aprobado</td>"); //caso especial de Conexión
                            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                                strHtml.Append("<td style='width: 101px; background-color: red; text-align: center;'>&nbsp;Denegado</td>");
                            strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.Codigo);
                            strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.NombreEquipo);
                            strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.NombreParametro);
                            strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.UnidadMedida);
                            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                            {
                                strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.ValorExistente);
                                strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.ValorNuevo);
                            }
                            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                            {
                                strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.ValorExistente);
                                strHtml.AppendFormat("<td style='width: 101px; text-align: center;'>&nbsp;{0}</td>", item.ValorDenegado);
                                strHtml.AppendFormat("<td style='width: 200px; text-align: center;'>&nbsp;{0}</td>", item.ValRptaCoes);
                            }
                            strHtml.Append("</tr>");
                        }

                    }
                }

            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }


        public string ObtenerHtmlTablaParametrosModificadosAP(int ftenvcodi, int codigoVersionUltimo, int codigoVersionAnterior, string strFitcfgcodisValidos, int tipo)
        {
            List<FTParametroModificacion> lstCambios = ObtenerListadoParametrosModificados(ftenvcodi, codigoVersionUltimo, codigoVersionAnterior, strFitcfgcodisValidos, tipo);

            StringBuilder strHtml = new StringBuilder();

            List<FTParametroModificacion> lst = lstCambios;

            string color = "";
            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                color = "green";
            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                color = "red";

            strHtml.Append("<table border='0' class='pretty tabla-icono' id='tablaModif_" + tipo + "' cellspacing='0'>");
            strHtml.Append("<tbody >");
            strHtml.Append("<tr style='height: 15px;'>");
            strHtml.Append("<td style='width: 68.0625px; background-color: " + color + "; height: 15px; border-color: #c7c7c7; text-align: center;'><strong><span style='color: #ffffff;'>Tipo Equipo o Categoria</span></strong></td>");
            strHtml.Append("<td style='width: 184.047px; background-color: " + color + "; height: 15px; text-align: center;'><span style='color: #ffffff;'><strong>Nombre Equipo</strong></span></td>");
            strHtml.Append("<td style='width: 201.562px; background-color: " + color + "; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Par&aacute;metro</span></strong></td>");
            strHtml.Append("<td style='width: 176.766px; background-color: " + color + "; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Unidad</span></strong></td>");
            strHtml.Append("<td style='width: 155.891px; background-color: " + color + "; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Valor existente</span></strong></td>");

            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                strHtml.Append("<td style='width: 196.672px; background-color: " + color + "; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Valor nuevo</span></strong></td>");
            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                strHtml.Append("<td style='width: 196.672px; background-color: " + color + "; height: 15px; text-align: center;'><strong><span style='color: #ffffff;'>Valor Denegado</span></strong></td>");

            strHtml.Append("</tr>");

            foreach (var item in lst)
            {
                strHtml.Append("<tr style='height: 13.4688px;'>");
                strHtml.AppendFormat("<td style='width: 68.0625px; height: 13.4688px; text-align: center;'>{0}</td>", item.TipoCategoria);
                strHtml.AppendFormat("<td style='width: 184.047px; height: 13.4688px; text-align: center;'>{0}</td>", item.NombreEquipo);
                strHtml.AppendFormat("<td style='width: 201.562px; height: 13.4688px; text-align: center;'>{0}</td>", item.NombreParametro);
                strHtml.AppendFormat("<td style='width: 176.766px; height: 13.4688px; text-align: center;'>{0}</td>", item.UnidadMedida);
                strHtml.AppendFormat("<td style='width: 155.891px; height: 13.4688px; text-align: center;'>{0}</td>", item.ValorExistente);
                if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                    strHtml.AppendFormat("<td style='width: 196.672px; height: 13.4688px; text-align: center;'>{0}</td>", item.ValorNuevo);
                if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                    strHtml.AppendFormat("<td style='width: 196.672px; height: 13.4688px; text-align: center;'>{0}</td>", item.ValorDenegado);

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Devuelve el listado de parametros modificados para aprobacion parcial
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="strFteeqcodisValidos"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public List<FTParametroModificacion> ObtenerListadoParametrosModificados(int ftenvcodi, int codigoVersionUltimo, int codigoVersionAnterior, string strFitcfgcodisValidos, int tipo)
        {
            List<FTParametroModificacion> lstSalida = new List<FTParametroModificacion>();

            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(ftenvcodi);
            int etapa = objEnvio.Ftetcodi;

            List<FtExtEnvioDatoDTO> lstTotalParametrosFinal = ListarParametrosEnvioFT(ftenvcodi, 0, codigoVersionUltimo, etapa, "");
            if (strFitcfgcodisValidos != "" && strFitcfgcodisValidos != null)
            {
                List<int> fitcfgcodiBuscados = strFitcfgcodisValidos.Split(',').Select(x => int.Parse(x)).ToList();
                lstTotalParametrosFinal = lstTotalParametrosFinal.Where(x => fitcfgcodiBuscados.Contains(x.Fitcfgcodi)).ToList();
            }

            List<FtExtEnvioDatoDTO> lstTotalParametrosAntes = ListarParametrosEnvioFT(ftenvcodi, 0, codigoVersionAnterior, etapa, "");

            //por fteeqcodi
            List<int> fteeqcodisBuscados = lstTotalParametrosFinal.GroupBy(x => x.Fteeqcodi).Select(x => x.Key).ToList();
            foreach (var fteeqcodi in fteeqcodisBuscados)
            {
                FtExtEnvioEqDTO objEnvioEq = GetByCriteriaFtExtEnvioEqsXId(fteeqcodi.ToString()).First();

                var listaRevisionParametrosAFT = ObtenerDatosRevisionParametrosAFT(fteeqcodi, ConstantesFichaTecnica.INTRANET);

                int? idFormato = objEnvioEq.Ftfmtcodi;
                var objEnvioEqAnt = lstTotalParametrosAntes.Find(x => x.Equicodi == objEnvioEq.Equicodi && x.Grupocodi == objEnvioEq.Grupocodi);
                int fteeqcodiAnterior = objEnvioEqAnt != null ? objEnvioEqAnt.Fteeqcodi : 0;

                if (idFormato != null)
                {
                    FtExtFormatoDTO formato = GetByIdFtExtFormato(idFormato.Value);
                    if (formato != null)
                    {
                        int fteqcodi = formato.Fteqcodi;

                        var lstItems = ListarItemsByFichaTecnica(fteqcodi);

                        int idPadre = ConstantesFichaTecnica.TipoRaiz;
                        ListarTreeItemsFichaTecnicaRecursivo(lstItems, new List<TreeItemFichaTecnica>(), new List<FtFictecItemDTO>(), new List<TreeItemFichaTecnica>(), idPadre, string.Empty, string.Empty, 1);

                        //////
                        List<int> lstFitcfgcodisFinalXFteeqcodi = lstTotalParametrosFinal.Where(x => x.Fteeqcodi == fteeqcodi).Select(x => x.Fitcfgcodi).Distinct().ToList();

                        List<int> lstFitcfgcodisTotalXFteeqcodi = new List<int>();
                        lstFitcfgcodisTotalXFteeqcodi.AddRange(lstFitcfgcodisFinalXFteeqcodi);

                        foreach (int fitcgfcodi in lstFitcfgcodisTotalXFteeqcodi)
                        {
                            FtExtEnvioDatoDTO odFin = lstTotalParametrosFinal.Find(x => x.Fteeqcodi == fteeqcodi && x.Fitcfgcodi == fitcgfcodi);
                            FtExtEnvioDatoDTO odIni = lstTotalParametrosAntes.Find(x => x.Fteeqcodi == fteeqcodiAnterior && x.Fitcfgcodi == fitcgfcodi);

                            FtFictecItemDTO objItem = odFin != null ? lstItems.Find(x => x.Ftitcodi == odFin.Ftitcodi) : new FtFictecItemDTO();
                            var objRevFila = listaRevisionParametrosAFT.Find(x => x.Ftitcodi == odFin.Ftitcodi) ?? new FTDatoRevisionParametrosAEnvio();

                            FTParametroModificacion objTabla = new FTParametroModificacion();
                            objTabla.Codigo = objEnvioEq.Idelemento;
                            objTabla.NombreEquipo = objEnvioEq != null ? objEnvioEq.Nombreelemento : "";
                            objTabla.TipoCategoria = objEnvioEq != null ? objEnvioEq.Tipoelemento : "";
                            objTabla.NombreParametro = objItem != null ? objItem.Orden + " " + objItem.Ftitnombre : "";
                            objTabla.UnidadMedida = objItem.ItemUnidad ?? "";
                            objTabla.Fteeqcodi = odFin.Fteeqcodi;
                            objTabla.Ftitcodi = odFin.Ftitcodi;
                            objTabla.ValEstado = objRevFila.ValEstado;
                            objTabla.ValRptaCoes = objRevFila.ValRptaCoes;

                            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosAprobados)
                            {
                                objTabla.ValorExistente = (odIni?.Ftedatvalor) ?? "";
                                objTabla.ValorNuevo = odFin.Ftedatvalor;
                            }

                            if (tipo == ConstantesFichaTecnica.TipoParametrosModificadosDenegados)
                            {
                                objTabla.ValorExistente = (odIni?.Ftedatvalor) ?? "";
                                objTabla.ValorDenegado = odFin.Ftedatvalor;
                            }

                            lstSalida.Add(objTabla);

                        }
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de parametros completos o solo modificados de un envio con su tipo de dato c/u
        /// </summary>
        /// <param name="ftenvtipocasoesp"></param>
        /// <param name="ftevercodi"></param>
        /// <param name="etapa"></param>
        /// <param name="tipoFormato"></param>
        /// <param name="lstFteeqcodisBuscados"></param>
        /// <returns></returns>
        public List<FtExtEnvioDatoDTO> ListarParametrosEnvioFT(int ftenvcodi, int ftenvtipocasoesp, int ftevercodi, int etapa, string lstFitcfgcodisBuscados)
        {
            List<FtExtEnvioDatoDTO> lstSalida = new List<FtExtEnvioDatoDTO>();

            List<FtExtEnvioEqDTO> listaEnvioEqXtVers = GetByCriteriaFtExtEnvioEqs(ftevercodi.ToString());
            List<FtExtEnvioArchivoDTO> listaArchivoXVers = ListByVersionYDatoFtExtEnvioArchivos(ftevercodi);

            if (listaEnvioEqXtVers.Any())
            {
                List<int> lstFteeqcodis = listaEnvioEqXtVers.Select(x => x.Fteeqcodi).Distinct().ToList();
                string strFteeqcodis = string.Join(",", lstFteeqcodis);

                List<FtExtEnvioDatoDTO> lstTemp = ListarParametrosFtExtEnvioDatos(strFteeqcodis);

                //Caso Aprobacion Parcial: Solo verifico los parametros de los equipos aprobados 
                if (lstFitcfgcodisBuscados != "" && lstFitcfgcodisBuscados != null)
                {
                    List<int> fitcfgcodisBuscados = lstFitcfgcodisBuscados.Split(',').Select(x => int.Parse(x)).ToList();
                    lstTemp = lstTemp.Where(x => fitcfgcodisBuscados.Contains(x.Fitcfgcodi)).ToList();
                }

                if (lstTemp.Any())
                {
                    //todos los equipos observados / subsanados en Operación comercial
                    List<FtExtEnvioDTO> listaEqYEnvioOpCom = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqNoSeleccionable("-1", ConstantesFichaTecnica.EtapaOperacionComercial)
                                                            .Where(x => x.Estenvcodi == ConstantesFichaTecnica.EstadoObservado || x.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                                                            .OrderByDescending(x => x.Ftevercodi).ToList();
                    listaEqYEnvioOpCom = listaEqYEnvioOpCom.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados

                    //buscar por cada equipo los elementos modificados. Cuando es conexion / integracion se consideran items modificados aquellos que son editables
                    foreach (var itemEq in listaEnvioEqXtVers)
                    {
                        //se toman solo los parametros modificados
                        List<FtExtEnvioDatoDTO> lstTempXEq = lstTemp.Where(x => x.Fteeqcodi == itemEq.Fteeqcodi && x.Ftedatflagmodificado == 1).ToList();

                        //Verificar los casos especiales por equipo (Caso 1)
                        if (ftenvtipocasoesp == ConstantesFichaTecnica.CasoEspecial1 && itemEq.Fteeqflagespecial == ConstantesFichaTecnica.CasoEspecial1)
                        {
                            //Caso 1. Si la central está en conexion o integracion entonces no se guarda en bd hasta que llegue a Operación comercial
                            if (etapa == ConstantesFichaTecnica.EtapaConexion || etapa == ConstantesFichaTecnica.EtapaIntegracion)
                            {
                                lstTempXEq = new List<FtExtEnvioDatoDTO>();
                            }

                            if (etapa == ConstantesFichaTecnica.EtapaModificacion)
                            {
                                //1. verificar que la central está en Op comercial y todavía no se aprueba entonces todavía no guardar en bd
                                FtExtEnvioDTO objEnvioOpCom = listaEqYEnvioOpCom.Find(x => x.Equicodi > 0 && x.Equicodi == itemEq.Equicodi);
                                if (objEnvioOpCom != null)
                                {
                                    lstTempXEq = new List<FtExtEnvioDatoDTO>();
                                }
                            }
                        }

                        //Verificar los casos especiales por equipo (Caso 2)
                        if (ftenvtipocasoesp == ConstantesFichaTecnica.CasoEspecial2 && itemEq.Fteeqflagespecial == ConstantesFichaTecnica.CasoEspecial2)
                        {
                            //Caso . Si la central está en conexion entonces no se guarda en bd hasta que llegue a integracion
                            if (etapa == ConstantesFichaTecnica.EtapaConexion)
                            {
                                lstTempXEq = new List<FtExtEnvioDatoDTO>();
                            }
                        }

                        //verificar que cada dato tenga archivos de valor y / o sustento 
                        string textoEqPr = itemEq.Equicodi > 0 ? "eq" + itemEq.Equicodi : "gr" + itemEq.Grupocodi;
                        foreach (var itemDato in lstTempXEq)
                        {
                            //validar el item duplicado de potencia efectiva, modo operación
                            var listaArchDato = listaArchivoXVers.Where(x => x.Ftedatcodi == itemDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteValorDato);
                            var listaArchSustento = listaArchivoXVers.Where(x => x.Ftedatcodi == itemDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteSustentoDato);

                            string textoItem = itemDato.Propcodi > 0 ? "prop" + itemDato.Propcodi : "cnp" + itemDato.Concepcodi;
                            string textoAbrev = ((itemDato.Propcodi > 0 ? itemDato.Propabrev : itemDato.Concepabrev) ?? "").Trim().ToUpper();
                            textoAbrev = textoAbrev.Length > 0 && textoAbrev != "." ? ("_" + textoAbrev) : "";
                            string prefijoNombre = string.Format("env{0}_{1}_{2}{3}", ftenvcodi, textoEqPr, textoItem, textoAbrev);
                            itemDato.FolderEnvio = "envio_" + ftenvcodi;
                            itemDato.SubfolderEqGr = textoEqPr;
                            itemDato.NombFileZipValorNoConf = prefijoNombre + ".zip";
                            itemDato.NombFileZipValorConf = prefijoNombre + "_conf.zip";
                            itemDato.NombFileZipSustentoNoConf = prefijoNombre + "_sustento.zip";
                            itemDato.NombFileZipSustentoConf = prefijoNombre + "_sustento_conf.zip";

                            itemDato.ListaArchivoValorNoConf = listaArchDato.Where(x => x.Ftearcflagsustentoconf != "S").ToList();
                            itemDato.ListaArchivoValorConf = listaArchDato.Where(x => x.Ftearcflagsustentoconf == "S").ToList();

                            itemDato.ListaArchivoSustentoNoConf = listaArchSustento.Where(x => x.Ftearcflagsustentoconf != "S").ToList();
                            itemDato.ListaArchivoSustentoConf = listaArchSustento.Where(x => x.Ftearcflagsustentoconf == "S").ToList();

                            itemDato.Equicodi = itemEq.Equicodi;
                            itemDato.Grupocodi = itemEq.Grupocodi;
                        }

                        lstSalida.AddRange(lstTempXEq);
                    }
                }
            }

            return lstSalida;
        }

        public List<FtExtEnvioDatoDTO> ListarParametrosEnvioOpComercial(int ftenvcodi, int ftenvtipocasoesp, int ftevercodi, int etapa)
        {
            List<FtExtEnvioDatoDTO> lstSalida = new List<FtExtEnvioDatoDTO>();

            //equipos del envio
            List<int> listaCentrales = new List<int>() { 39, 4, 37, 5 };
            List<FtExtEnvioEqDTO> listaEnvioEqXtVers = GetByCriteriaFtExtEnvioEqs(ftevercodi.ToString()).Where(x => listaCentrales.Contains(x.Famcodi ?? 0)).ToList();

            //todos los equipos aprobados en Integración
            List<FtExtEnvioDTO> listaEqYEnvioIntg = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqAprobado("-1", ConstantesFichaTecnica.EtapaIntegracion)
                                                    .OrderByDescending(x => x.Ftenvfecvigencia).ToList();
            listaEqYEnvioIntg = listaEqYEnvioIntg.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados

            //todos los equipos aprobados en Modificación
            List<FtExtEnvioDTO> listaEqYEnvioModif = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqAprobado("-1", ConstantesFichaTecnica.EtapaModificacion)
                                                    .OrderByDescending(x => x.Ftenvfecvigencia).ToList();
            listaEqYEnvioModif = listaEqYEnvioModif.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados


            //buscar por cada equipo los elementos modificados que se aprobaron en Integración o Modificación FT
            foreach (var itemEq in listaEnvioEqXtVers)
            {
                //1. verificar que la central está en Op comercial
                FtExtEnvioDTO objEnvioIntg = listaEqYEnvioIntg.Find(x => x.Equicodi > 0 && x.Equicodi == itemEq.Equicodi);

                //2. verificar que existe aprobado en Integracion
                FtExtEnvioDTO objEnvioModif = listaEqYEnvioModif.Find(x => x.Equicodi > 0 && x.Equicodi == itemEq.Equicodi);

                //copiar datos aprobados al nuevo envio [Obligatorio]
                int feeqcodiCentralAprob = 0;
                int ftenvcodiCentralAprob = 0;
                if (objEnvioModif != null)
                {
                    //si la central fue observado en op comercial y se realizó una modif entonces utilizar los parametros aprobados
                    feeqcodiCentralAprob = objEnvioModif.Fteeqcodi;
                    ftenvcodiCentralAprob = objEnvioModif.Ftenvcodi;
                }
                else
                {
                    if (objEnvioIntg != null)
                    {
                        //si la central NO fue observado en op comercial entonces utilizar los parametros aprobados en Integracion
                        feeqcodiCentralAprob = objEnvioIntg.Fteeqcodi;
                        ftenvcodiCentralAprob = objEnvioIntg.Ftenvcodi;
                    }
                }

                //si existe equipo aprobado en otra etapa entonces es el caso especial 1
                if (feeqcodiCentralAprob > 0)
                {
                    //info bd
                    List<FtExtEnvioDatoDTO> lstTemp = ListarParametrosFtExtEnvioDatos(feeqcodiCentralAprob.ToString());
                    FtExtEnvioEqDTO objEqenvbd = GetByIdFtExtEnvioEq(feeqcodiCentralAprob);
                    List<FtExtEnvioArchivoDTO> listaArchivoXVers = ListByVersionYDatoFtExtEnvioArchivos(objEqenvbd.Ftevercodi);

                    //se toman solo los parametros modificados
                    List<FtExtEnvioDatoDTO> lstTempXEq = lstTemp.Where(x => x.Fteeqcodi == feeqcodiCentralAprob && x.Ftedatflagmodificado == 1).ToList();

                    //verificar que cada dato tenga archivos de valor y / o sustento 
                    string textoEqPr = itemEq.Equicodi > 0 ? "eq" + itemEq.Equicodi : "gr" + itemEq.Grupocodi;
                    foreach (var itemDato in lstTempXEq)
                    {
                        //validar el item duplicado de potencia efectiva, modo operación
                        var listaArchDato = listaArchivoXVers.Where(x => x.Ftedatcodi == itemDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteValorDato);
                        var listaArchSustento = listaArchivoXVers.Where(x => x.Ftedatcodi == itemDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteSustentoDato);

                        string textoItem = itemDato.Propcodi > 0 ? "prop" + itemDato.Propcodi : "cnp" + itemDato.Concepcodi;
                        string textoAbrev = ((itemDato.Propcodi > 0 ? itemDato.Propabrev : itemDato.Concepabrev) ?? "").Trim().ToUpper();
                        textoAbrev = textoAbrev.Length > 0 && textoAbrev != "." ? ("_" + textoAbrev) : "";
                        string prefijoNombre = string.Format("env{0}_{1}_{2}{3}", ftenvcodi, textoEqPr, textoItem, textoAbrev);
                        itemDato.FolderEnvio = "envio_" + ftenvcodi;
                        itemDato.SubfolderEqGr = textoEqPr;
                        itemDato.NombFileZipValorNoConf = prefijoNombre + ".zip";
                        itemDato.NombFileZipValorConf = prefijoNombre + "_conf.zip";
                        itemDato.NombFileZipSustentoNoConf = prefijoNombre + "_sustento.zip";
                        itemDato.NombFileZipSustentoConf = prefijoNombre + "_sustento_conf.zip";

                        itemDato.ListaArchivoValorNoConf = listaArchDato.Where(x => x.Ftearcflagsustentoconf != "S").ToList();
                        itemDato.ListaArchivoValorConf = listaArchDato.Where(x => x.Ftearcflagsustentoconf == "S").ToList();

                        itemDato.ListaArchivoSustentoNoConf = listaArchSustento.Where(x => x.Ftearcflagsustentoconf != "S").ToList();
                        itemDato.ListaArchivoSustentoConf = listaArchSustento.Where(x => x.Ftearcflagsustentoconf == "S").ToList();

                        itemDato.Equicodi = itemEq.Equicodi;
                        itemDato.Grupocodi = itemEq.Grupocodi;
                    }

                    lstSalida.AddRange(lstTempXEq);

                    //copiar los archivos de Integración o Modificación FT a Op. Comercial
                    string pathAlternativo = GetPathPrincipal();
                    string pathOrigen = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + "envio_" + objEqenvbd.Ftenvcodi + "/version_" + objEqenvbd.Ftevercodi;
                    string pathDestino = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + "envio_" + ftenvcodi + "/version_" + ftevercodi;
                    FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo); //copiar todo al destino

                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve el listado de parametros (completos o solo modificados) cuyo valor sea nulo o vacio
        /// </summary>
        /// <param name="ftevercodi"></param>
        /// <param name="etapa"></param>
        /// <param name="tipoFormato"></param>
        /// <returns></returns>
        public List<FtExtEnvioDatoDTO> ListarParametrosVaciosEnvioFT(int ftenvcodi, int ftevercodi, int etapa, string lstFtedatcodisBuscados)
        {
            List<FtExtEnvioDatoDTO> lstSalida = new List<FtExtEnvioDatoDTO>();

            List<FtExtEnvioDatoDTO> lstTotalParametros = ListarParametrosEnvioFT(ftenvcodi, 0, ftevercodi, etapa, lstFtedatcodisBuscados);

            foreach (var item in lstTotalParametros)
            {
                string tipoDato = item.Tipoelemento != null ? item.Tipoelemento.Trim() : "";
                string valor = (item.Ftedatvalor ?? "").Trim();

                //si la celda tiene TIPO DE DATO numerico revisar que tenga vacio o guion
                if (EsTipoNumero(tipoDato))
                {
                    if (valor == "" || valor == "-")
                    {
                        lstSalida.Add(item);
                    }
                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Validación de enlace de sustento
        /// </summary>
        /// <param name="objParametrosGuardar"></param>
        /// <returns></returns>
        public string ObtenerMensajeValidacionEnlaceSustento(FTParametroGuardar objParametrosGuardar)
        {
            string msj = string.Empty;

            int tamanioMax = 400;
            var listaPropequi = objParametrosGuardar.ListaPropequi.Where(x => x.Propequisustento != null && x.Propequisustento.Length > tamanioMax)
                                                    .OrderByDescending(x => x.Propequisustento.Length).ToList();
            if (listaPropequi.Any())
            {
                var regProp = listaPropequi.First();
                msj += string.Format("Existe(n) {0} propiedad(es), por ejemplo, {1}: {2}. ", listaPropequi.Count, regProp.Propnomb, regProp.Propequisustento);
            }

            var listaGrupodat = new List<PrGrupodatDTO>();
            listaGrupodat.AddRange(objParametrosGuardar.ListaGrupodatNuevo);
            listaGrupodat.AddRange(objParametrosGuardar.ListaGrupodatModificado);
            listaGrupodat = listaGrupodat.Where(x => x.Gdatsustento != null && x.Gdatsustento.Length > tamanioMax)
                                                    .OrderByDescending(x => x.Gdatsustento.Length).ToList();

            if (listaGrupodat.Any())
            {
                var regProp = listaGrupodat.First();
                msj += string.Format("Existe(n) {0} concepto(s), por ejemplo, {1}: {2}. ", listaGrupodat.Count, regProp.Concepabrev, regProp.Gdatsustento);
            }

            return msj;
        }

        /// <summary>
        /// Actualizar equipos en etapas
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="usuario"></param>
        public void ActualizarEquiposEtapas(int ftenvcodi, string usuario)
        {
            FtExtEnvioDTO envio = GetByIdFtExtEnvio(ftenvcodi);
            int etapaOrigen = envio.Ftetcodi;
            int etapaDestino = 0;

            switch (etapaOrigen)
            {
                case ConstantesFichaTecnica.EtapaConexion:
                    etapaDestino = ConstantesFichaTecnica.EtapaIntegracion;
                    CrearAsignacionProyectosEq(envio, etapaOrigen, etapaDestino, usuario);
                    break;
                case ConstantesFichaTecnica.EtapaIntegracion:
                    etapaDestino = ConstantesFichaTecnica.EtapaOperacionComercial;
                    CrearAsignacionProyectosEq(envio, etapaOrigen, etapaDestino, usuario);
                    break;
                case ConstantesFichaTecnica.EtapaOperacionComercial:
                    etapaDestino = ConstantesFichaTecnica.EtapaModificacion;
                    CrearAsignacionProyectosEq(envio, etapaOrigen, etapaDestino, usuario);
                    break;
            }
        }

        /// <summary>
        /// crear la asignación de equipos según la etapa aprobada
        /// </summary>
        /// <param name="envio"></param>
        /// <param name="etapaOrigen"></param>
        /// <param name="etapaDestino"></param>
        /// <param name="usuario"></param>
        public void CrearAsignacionProyectosEq(FtExtEnvioDTO envio, int etapaOrigen, int etapaDestino, string usuario)
        {
            //FtExtEnvioDTO envio = GetByIdFtExtEnvio(ftenvcodi);
            int version = envio.VersionActual.Ftevercodi;
            int etapa = envio.Ftetcodi;

            List<FtExtEnvioEqDTO> lstEnviosEq = GetByCriteriaFtExtEnvioEqs(version.ToString());

            if (etapaOrigen == ConstantesFichaTecnica.EtapaConexion)
            {
                // crear en integración
                GuardarProyectoYRelacionesXEtapa(envio, lstEnviosEq, envio.Emprcodi, etapaOrigen, etapaDestino, usuario);
            }

            if (etapaOrigen == ConstantesFichaTecnica.EtapaIntegracion)
            {
                //EQUIPOS DE GENERACIÓN
                string tareaCodiGen = "3,4,10,11,6";
                List<int> listaFamcodiGen = FactorySic.GetEqFamiliaRepository().ListarByTareaIds(tareaCodiGen).Select(x => x.Famcodi).ToList();
                var listaEquiposFiltro = lstEnviosEq.Where(x => x.Famcodi != null).ToList(); // solo los que tienen famcodi

                List<FtExtEnvioEqDTO> lstEquiposGen = new List<FtExtEnvioEqDTO>();
                lstEquiposGen = listaEquiposFiltro.Where(x => listaFamcodiGen.Contains(x.Famcodi.Value)).ToList();
                if (lstEquiposGen.Any())
                {
                    // crear para operación comercial solo para equipos de generación
                    GuardarProyectoYRelacionesXEtapa(envio, lstEnviosEq, envio.Emprcodi, etapaOrigen, etapaDestino, usuario);
                }

                //crear para modificación
                GuardarProyectoYRelacionesXEtapa(envio, lstEnviosEq, envio.Emprcodi, etapaOrigen, ConstantesFichaTecnica.EtapaModificacion, usuario);
            }

            if (etapaOrigen == ConstantesFichaTecnica.EtapaOperacionComercial)
            {
                // crear para modificación ficha
                GuardarProyectoYRelacionesXEtapa(envio, lstEnviosEq, envio.Emprcodi, etapaOrigen, etapaDestino, usuario);
            }
        }

        /// <summary>
        /// Guardar o editar la relación de empresa y etapa egún la etapa destino
        /// </summary>
        /// <param name="envio"></param>
        /// <param name="lstEquipos"></param>
        /// <param name="codEmpresa"></param>
        /// <param name="etapaDestino"></param>
        /// <param name="usuario"></param>
        public void GuardarProyectoYRelacionesXEtapa(FtExtEnvioDTO envio, List<FtExtEnvioEqDTO> lstEquipos, int codEmpresa, int etapaOrigen, int etapaDestino, string usuario)
        {
            try
            {
                FtExtRelempetapaDTO objSalida = new FtExtRelempetapaDTO();

                int accion = 0;
                int emprcodi = codEmpresa;
                int idetapa = etapaDestino;
                List<FtExtEtempdetpryDTO> lstProyectos = new List<FtExtEtempdetpryDTO>();
                List<FTRelacionEGP> lstCambiosCIO = new List<FTRelacionEGP>();
                List<FTRelacionEGP> lstElementos = new List<FTRelacionEGP>();

                //Verificar que exista relacion empresa etapa
                FtExtRelempetapaDTO objEmpEtapa = FactorySic.GetFtExtRelempetapaRepository().GetByCriteriaProyAsigByFiltros(emprcodi.ToString(), idetapa).Find(x => x.Fetempestado == ConstantesFichaTecnica.EstadoStrActivo);

                if (idetapa == ConstantesFichaTecnica.EtapaConexion || idetapa == ConstantesFichaTecnica.EtapaIntegracion || idetapa == ConstantesFichaTecnica.EtapaOperacionComercial)
                {
                    List<FtExtEtempdetpryDTO> lstPy = new List<FtExtEtempdetpryDTO>();
                    List<FtExtEtempdetpryDTO> lstPys = objEmpEtapa != null ? FactorySic.GetFtExtEtempdetpryRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.EstadoStrActivo, objEmpEtapa.Fetempcodi) : new List<FtExtEtempdetpryDTO>();

                    if (objEmpEtapa != null) // si existe relación empresa etapa activa
                    {
                        accion = 2;
                        objSalida = GetByIdFtExtRelempetapa(objEmpEtapa.Fetempcodi);
                        objSalida.Fetempusumodificacion = usuario;
                        objSalida.Fetempfecmodificacion = DateTime.Now;
                        objSalida.ListaProyectosGuardar = new List<FtExtEtempdetpryDTO>();
                        objSalida.ListaProyectosActualizar = new List<FtExtEtempdetpryDTO>();
                        objSalida.ListaElementosGuardar = new List<FtExtEtempdeteqDTO>();
                        objSalida.ListaElementosActualizar = new List<FtExtEtempdeteqDTO>();
                        //verificar si existe el proyecto del envío aprobado
                        var proyBD = lstPys.Find(x => x.Ftprycodi == envio.Ftprycodi);
                        if (proyBD != null) // si existe el proyecto en dicha etapa
                        {
                            //accion = 2; // editar
                            //objSalida = GetByIdFtExtRelempetapa(objEmpEtapa.Fetempcodi);

                            FtExtEtempdetpryDTO proyActualizar = proyBD;
                            List<FtExtEtempdetpryeqDTO> lstGuardarDet = new List<FtExtEtempdetpryeqDTO>(); // para guardar nuevos equipos al proyecto
                            List<FtExtEtempdetpryeqDTO> lstActualizarDet = new List<FtExtEtempdetpryeqDTO>(); // para actualizar el flagotraetapa de equipos

                            List<FtExtEtempdetpryeqDTO> lstpyeq = FactorySic.GetFtExtEtempdetpryeqRepository().ListarDetallesPorRelEmpresaEtapaProyecto(ConstantesFichaTecnica.EstadoStrActivo, ConstantesFichaTecnica.EstadoStrActivo, proyBD.Feeprycodi);
                            if (lstpyeq.Any())
                            {
                                // si está el equipos, verificar flag
                                foreach (var equip in lstEquipos)
                                {
                                    var equipoBd = lstpyeq.Find(x => x.Equicodi == equip.Equicodi && x.Grupocodi == equip.Grupocodi);
                                    //var equipoBd = lstpyeq.Find(x => x.Equicodi.Value == equip.Equicodi);

                                    if (equipoBd != null)// si existe el equipo en el proyecto
                                    {
                                        //verificar flag y setear a "N"
                                        if (equipoBd.Feepeqflagotraetapa == "S")
                                        {
                                            equipoBd.Feepeqflagotraetapa = "N";
                                            lstActualizarDet.Add(equipoBd);
                                        }
                                    }
                                    else //Si el equipo no está , crear nuevo
                                    {
                                        FtExtEtempdetpryeqDTO objCa = new FtExtEtempdetpryeqDTO();
                                        objCa.Feeprycodi = proyBD.Feeprycodi;
                                        objCa.Equicodi = equip.Equicodi;
                                        objCa.Grupocodi = equip.Grupocodi;
                                        objCa.Feepeqestado = ConstantesFichaTecnica.EstadoStrActivo;
                                        objCa.Feepeqflagotraetapa = "N";
                                        objCa.Feepequsucreacion = usuario;
                                        objCa.Feepeqfeccreacion = DateTime.Now;

                                        lstGuardarDet.Add(objCa);
                                    }
                                }

                                proyActualizar.ListaCambiosActualizar = lstActualizarDet;
                                proyActualizar.ListaCambiosGuardar = lstGuardarDet;

                                objSalida.ListaProyectosActualizar.Add(proyActualizar);
                            }
                        }
                        else // agregar nuevo proyecto para dicha etapa
                        {
                            FtExtEtempdetpryDTO objP = new FtExtEtempdetpryDTO();
                            objP.Ftprycodi = envio.Ftprycodi.Value;
                            objP.Fetempcodi = objEmpEtapa.Fetempcodi;
                            objP.Feepryestado = ConstantesFichaTecnica.EstadoStrActivo;

                            List<FtExtEtempdetpryeqDTO> lstCmb = new List<FtExtEtempdetpryeqDTO>();
                            //agregar los equipos aprobados
                            foreach (var equip in lstEquipos)
                            {
                                FTRelacionEGP objCambio = new FTRelacionEGP();
                                FtExtEtempdetpryeqDTO objC = new FtExtEtempdetpryeqDTO();

                                objC.Equicodi = equip.Equicodi;
                                objC.Grupocodi = equip.Grupocodi;
                                objC.Feepeqestado = ConstantesFichaTecnica.EstadoStrActivo;
                                objC.Feepeqflagotraetapa = "N";
                                objC.Feepequsucreacion = usuario;
                                objC.Feepeqfeccreacion = DateTime.Now;

                                lstCmb.Add(objC);
                            }

                            objP.ListaCambiosGuardar = lstCmb;
                            lstPy.Add(objP);

                            objSalida.ListaProyectosGuardar = lstPy;
                        }
                    }
                    else // crear una nueva relacion
                    {
                        accion = 1; //guardar
                        objSalida.Emprcodi = emprcodi;
                        objSalida.Ftetcodi = idetapa;
                        objSalida.Fetempusucreacion = usuario;
                        objSalida.Fetempfeccreacion = DateTime.Now;
                        objSalida.Fetempestado = ConstantesFichaTecnica.EstadoStrActivo;

                        FtExtEtempdetpryDTO objP = new FtExtEtempdetpryDTO();
                        objP.Ftprycodi = envio.Ftprycodi.Value;
                        objP.Feepryestado = ConstantesFichaTecnica.EstadoStrActivo;

                        List<FtExtEtempdetpryeqDTO> lstCmb = new List<FtExtEtempdetpryeqDTO>();
                        //agregar los equipos aprobados
                        foreach (var equip in lstEquipos)
                        {
                            FtExtEtempdetpryeqDTO objC = new FtExtEtempdetpryeqDTO();

                            objC.Equicodi = equip.Equicodi;
                            objC.Grupocodi = equip.Grupocodi;
                            objC.Feepeqestado = ConstantesFichaTecnica.EstadoStrActivo;
                            objC.Feepeqflagotraetapa = "N";
                            objC.Feepequsucreacion = usuario;
                            objC.Feepeqfeccreacion = DateTime.Now;

                            lstCmb.Add(objC);
                        }

                        objP.ListaCambiosGuardar = lstCmb;
                        lstPy.Add(objP);

                        objSalida.ListaProyectosGuardar = lstPy;
                    }
                }
                else
                {
                    if (idetapa == ConstantesFichaTecnica.EtapaModificacion)
                    {
                        List<FtExtEtempdeteqDTO> lstEL = new List<FtExtEtempdeteqDTO>();

                        //Verifico cambios en los registros
                        List<FtExtEtempdeteqDTO> lstRegEq = objEmpEtapa != null ? FactorySic.GetFtExtEtempdeteqRepository().ListarPorRelEmpresaEtapa(ConstantesFichaTecnica.EstadoStrActivo, objEmpEtapa.Fetempcodi) : new List<FtExtEtempdeteqDTO>();

                        if (objEmpEtapa != null) // si existe relación empresa etapa activa
                        {
                            accion = 2; // editar
                            objSalida = GetByIdFtExtRelempetapa(objEmpEtapa.Fetempcodi);
                            objSalida.Fetempusumodificacion = usuario;
                            objSalida.Fetempfecmodificacion = DateTime.Now;
                            objSalida.ListaProyectosGuardar = new List<FtExtEtempdetpryDTO>();
                            objSalida.ListaProyectosActualizar = new List<FtExtEtempdetpryDTO>();
                            objSalida.ListaElementosGuardar = new List<FtExtEtempdeteqDTO>();
                            objSalida.ListaElementosActualizar = new List<FtExtEtempdeteqDTO>();

                            foreach (var equip in lstEquipos)
                            {
                                var equipoBd = lstRegEq.Find(x => x.Equicodi == equip.Equicodi && x.Grupocodi == equip.Grupocodi);
                                //var equipoBd = lstRegEq.Find(x => x.Equicodi.Value == equip.Equicodi);

                                if (equipoBd != null)// si existe el equipo en el proyecto
                                {
                                    //verificar flag estén desactivados
                                    if (equipoBd.Feeeqflagotraetapa == "S")
                                    {
                                        equipoBd.Feeeqflagotraetapa = "N";
                                        equipoBd.Feeequsumodificacion = usuario;
                                        equipoBd.Feeeqfecmodificacion = DateTime.Now;
                                    }

                                    if (etapaOrigen == ConstantesFichaTecnica.EtapaIntegracion)
                                    {
                                        //verificar flag estén desactivados
                                        if (equipoBd.Feeeqflagcentral == "S")
                                        {
                                            equipoBd.Feeeqflagcentral = "N";
                                            equipoBd.Feeequsumodificacion = usuario;
                                            equipoBd.Feeeqfecmodificacion = DateTime.Now;
                                        }
                                    }

                                    objSalida.ListaElementosActualizar.Add(equipoBd);
                                }
                                else // Los equipos que no estan en la BD
                                {
                                    FtExtEtempdeteqDTO objP = new FtExtEtempdeteqDTO();
                                    objP.Fetempcodi = objEmpEtapa.Fetempcodi;
                                    objP.Grupocodi = equip.Grupocodi;
                                    objP.Equicodi = equip.Equicodi;
                                    objP.Feeeqestado = ConstantesFichaTecnica.EstadoStrActivo;
                                    objP.Feeeqflagotraetapa = "N";
                                    if (etapaOrigen == ConstantesFichaTecnica.EtapaIntegracion)
                                        objP.Feeeqflagcentral = "N";

                                    objP.Feeequsucreacion = usuario;
                                    objP.Feeeqfeccreacion = DateTime.Now;

                                    objSalida.ListaElementosGuardar.Add(objP);
                                }
                            }
                        }
                        else // crea nuevo registro
                        {
                            accion = 1; // nuevo
                            objSalida.Emprcodi = emprcodi;
                            objSalida.Ftetcodi = idetapa;
                            objSalida.Fetempusucreacion = usuario;
                            objSalida.Fetempfeccreacion = DateTime.Now;
                            objSalida.Fetempestado = ConstantesFichaTecnica.EstadoStrActivo;

                            //agregar los equipos aprobados
                            foreach (var equip in lstEquipos)
                            {
                                FtExtEtempdeteqDTO objP = new FtExtEtempdeteqDTO();
                                objP.Grupocodi = equip.Grupocodi;
                                objP.Equicodi = equip.Equicodi;
                                objP.Feeeqestado = ConstantesFichaTecnica.EstadoStrActivo;
                                objP.Feeeqflagotraetapa = "N";
                                if (etapaOrigen == ConstantesFichaTecnica.EtapaIntegracion)
                                    objP.Feeeqflagcentral = "N";

                                objP.Feeequsucreacion = usuario;
                                objP.Feeeqfeccreacion = DateTime.Now;

                                lstEL.Add(objP);
                            }
                            objSalida.ListaElementosGuardar = lstEL;
                        }
                    }
                }

                GuardarActualizarDatosProyectoYRelacionesTransaccionalmente(accion, idetapa, objSalida);

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException(ex.Message);
            }

        }


        #endregion

        #region Derivar Envio
        /// <summary>
        /// Valida que todas las filas tengan asignados areas
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="data"></param>
        /// <returns></returns>
        public string ValidarFilasConAreasAsignados(FtExtEnvioDTO envio)
        {
            string salida = "";

            int formatoEnvio = envio.Ftenvtipoformato;

            switch (formatoEnvio)
            {
                //// PARAMETROS FICHA TECNICA ///
                case ConstantesFichaTecnica.FormatoConexIntegModif:
                    //obtener toda la lista de activos
                    List<FtExtRelareaitemcfgDTO> listaRelacion = ListFtExtRelareaitemcfgs().Where(x => x.Friaestado == "A").ToList();

                    List<FTDatoRevisionParametrosAEnvio> lstDatosRev = ListarRevisionParametrosFT(envio.Ftenvcodi, envio.FtevercodiActual, ConstantesFichaTecnica.INTRANET, out List<FtExtEnvioEqDTO> listaEnvioEq, out string strFteeqcodis);
                    List<FTDatoRevisionParametrosAEnvio> listaRevisionParametrosAFT = lstDatosRev;

                    List<int> lstFtitcodis = listaRevisionParametrosAFT.Select(x => x.Ftitcodi.Value).Distinct().ToList();
                    string strFtitcodis = string.Join(",", lstFtitcodis);
                    List<FtFictecItemDTO> lstFictecitem = strFtitcodis != "" ? FactorySic.GetFtFictecItemRepository().ListarPorIds(strFtitcodis) : new List<FtFictecItemDTO>();
                    var lstEquiposPorEnvio = listaRevisionParametrosAFT.GroupBy(x => x.Fteeqcodi.Value).ToList();

                    List<string> lstMensajes = new List<string>();
                    foreach (var equipo in lstEquiposPorEnvio)
                    {
                        int miFtteqcodi = equipo.Key;
                        string nomEquipo = "";

                        List<int> lstFtitcodisSinAreaPorEquipo = new List<int>();
                        List<string> lstNumeralesSinAsignacion = new List<string>();

                        foreach (var reg in equipo)
                        {
                            int miFtitcodi = reg.Ftitcodi.Value;
                            nomEquipo = reg.Elemento;
                            string numeral = reg.Numeral;
                            FtExtRelareaitemcfgDTO relacion = listaRelacion.Find(x => x.Ftitcodi == miFtitcodi);

                            if (relacion == null)
                            {
                                lstNumeralesSinAsignacion.Add(numeral);
                                lstFtitcodisSinAreaPorEquipo.Add(miFtitcodi);
                            }
                        }


                        if (lstFtitcodisSinAreaPorEquipo.Any())
                        {
                            lstNumeralesSinAsignacion = lstNumeralesSinAsignacion.OrderBy(x => x).ToList();
                            string strNumSinAsignacion = string.Join(", ", lstNumeralesSinAsignacion);
                            string msg = "<p> El(Los) siguiente(s) numeral(es) del equipo " + nomEquipo + " no tiene(n) registrado(s) área de revisión: " + strNumSinAsignacion + ".</p>";
                            lstMensajes.Add(msg);
                        }
                    }

                    if (lstMensajes.Any())
                    {
                        lstMensajes = lstMensajes.OrderBy(x => x).Distinct().ToList();
                        salida = string.Join(" ", lstMensajes);
                    }
                    int sdfsf = 0;


                    break;

                //// OPERACION COMERCIAL ///
                case ConstantesFichaTecnica.FormatoOperacionComercial:
                    //obtener toda la lista de activos
                    List<FtExtRelAreareqDTO> listaRelacionReq = ListFtExtRelAreareqs().Where(x => x.Frraestado == "A" && x.Fevrqcodi != -1).ToList(); // x.Fevrqcodi = -1 es para DAR BAJA

                    List<FTDatoRevisionParametrosAEnvio> listaRevisionContenido = ObtenerDatosRevisionContenidoReq(envio.FtevercodiTemporalIntranet, ConstantesFichaTecnica.INTRANET);
                    List<string> lstLiteralesSinAsignacion = new List<string>();


                    foreach (var evento in listaRevisionContenido)
                    {
                        int miFevrqcodi = evento.Fevrqcodi.Value;
                        string literal = evento.Literal;

                        FtExtRelAreareqDTO relacion = listaRelacionReq.Find(x => x.Fevrqcodi == miFevrqcodi);

                        if (relacion == null)
                        {
                            lstLiteralesSinAsignacion.Add(literal);
                        }
                    }

                    if (lstLiteralesSinAsignacion.Any())
                    {
                        lstLiteralesSinAsignacion = lstLiteralesSinAsignacion.OrderBy(x => x).ToList();
                        string strNumSinAsignacion = string.Join(", ", lstLiteralesSinAsignacion);
                        salida = "<p> El(Los) siguiente(s) literal(es) no tiene(n) registrado(s) área de revisión: " + strNumSinAsignacion + ".</p>";

                    }
                    break;


                //// MODIFICACION DAR DE BAJA ///
                case ConstantesFichaTecnica.FormatoBajaModoOperacion:
                    //obtener toda la lista de activos
                    List<FtExtRelAreareqDTO> listaRelacionBaja = ListFtExtRelAreareqs().Where(x => x.Frraestado == "A" && x.Fevrqcodi == -1).ToList(); // x.Fevrqcodi = -1 es para DAR BAJA                   

                    if (!listaRelacionBaja.Any())
                    {
                        salida = "<p> No se tiene registrado área de revisión para envío en etapa de Modificación de Ficha Técnica (Dar de Baja M.O.).</p>";

                    }
                    break;
            }

            return salida;
        }

        /// <summary>
        /// Devuelve los datos de la revision para parametros FT
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="ambiente"></param>
        /// <param name="listaEnvioEq"></param>
        /// <param name="strFteeqcodis"></param>
        /// <returns></returns>
        public List<FTDatoRevisionParametrosAEnvio> ListarRevisionParametrosFT(int ftenvcodi, int version, int ambiente, out List<FtExtEnvioEqDTO> listaEnvioEq, out string strFteeqcodis)
        {
            List<FTDatoRevisionParametrosAEnvio> listaRevisionParametrosAFT = new List<FTDatoRevisionParametrosAEnvio>();

            listaEnvioEq = ListFtExtEnvioEqsXEnvio(version);
            strFteeqcodis = listaEnvioEq.Any() ? string.Join(",", listaEnvioEq.Select(x => x.Fteeqcodi.ToString())) : "";

            List<int> fteeqcodis = strFteeqcodis.Split(',').Select(x => int.Parse(x)).ToList();
            foreach (var fteeqcodi in fteeqcodis)
            {
                var listaParametrosAFT = ObtenerDatosRevisionParametrosAFT(fteeqcodi, ConstantesFichaTecnica.INTRANET);
                listaRevisionParametrosAFT.AddRange(listaParametrosAFT);
            }

            return listaRevisionParametrosAFT;
        }

        /// <summary>
        /// Verifica si la version ya fue derivada o no (1:Si, 0:No)
        /// </summary>
        /// <param name="objEnvio"></param>
        /// <returns></returns>
        public int VerificarDerivacionDeVersion(FtExtEnvioDTO objEnvio)
        {
            int salida = 0;

            //FtExtEnvioVersionDTO version = objEnvio.VersionOficialActual;
            FtExtEnvioVersionDTO version = objEnvio.VersionTemporalIntranet;

            if (version != null)
            {
                List<FtExtEnvioAreaDTO> enviosAreaPorVersion = FactorySic.GetFtExtEnvioAreaRepository().ListarPorVersiones(version.Ftevercodi.ToString());

                if (enviosAreaPorVersion.Any())
                {
                    salida = 1;
                }
            }

            return salida;
        }

        /// <summary>
        /// Deriva una version
        /// </summary>
        /// <param name="envio"></param>
        /// <param name="data"></param>
        /// <param name="fechaMaxRpta"></param>
        /// <param name="usuario"></param>
        public void DerivarEnvioFT(FtExtEnvioDTO envio, DateTime fechaMaxRpta, string usuario)
        {
            //Solo los envio en estado subsanado y solicitado pueden ser derivados
            if (envio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud || envio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
            {
                FtExtEnvioVersionDTO versionEnvio = envio.VersionTemporalIntranet;
                DateTime fechaRegistro = ObtenerFechaSistemaFT(envio.Ftenvcodi);

                List<FtExtCorreoareaDTO> listaAreaCorreo = ObtenerAreasAsignadasPorVersion(versionEnvio.Ftevercodi);
                List<int> lstFaremcodis = listaAreaCorreo.Select(x => x.Faremcodi).Distinct().ToList();

                List<FtExtEnvioAreaDTO> lstGuardar = new List<FtExtEnvioAreaDTO>();
                foreach (var idCorreoArea in lstFaremcodis)
                {
                    FtExtEnvioAreaDTO objenvioArea = new FtExtEnvioAreaDTO();
                    objenvioArea.Ftevercodi = versionEnvio.Ftevercodi;
                    objenvioArea.Faremcodi = idCorreoArea;
                    objenvioArea.Envarfecmaxrpta = fechaMaxRpta;
                    objenvioArea.Envarestado = ConstantesFichaTecnica.EstadoStrPendiente;

                    lstGuardar.Add(objenvioArea);
                }

                FtExtEnvioLogDTO envioLog = new FtExtEnvioLogDTO();
                envioLog.Ftenvcodi = envio.Ftenvcodi;
                envioLog.Ftelogusucreacion = usuario;
                envioLog.Ftelogfeccreacion = fechaRegistro;
                envioLog.Ftelogobs = ConstantesFichaTecnica.MensajeLogDerivacionArea;
                envioLog.Estenvcodi = envio.Estenvcodi;
                envioLog.Ftelogcondicion = "";


                GuardarEnviosCorreoTransaccionalmente(lstGuardar, envioLog);

                envio.FechaMaxRptaDerivacionDesc = fechaMaxRpta.ToString(ConstantesAppServicio.FormatoFechaFull2);
                var mapaVariable = LlenarVariablesCorreos(envio, new List<FTParametroModificacion>());
                NotificarDerivacion(envio, mapaVariable);

            }
            else
            {
                throw new ArgumentException("El envío no se puede derivar. Solo los envíos solicitados o subsanados pueden hacerlo");
            }
        }

        /// <summary>
        ///  Guarda registros de envioCorreo a la BD 
        /// </summary>
        /// <param name="listaGuardar"></param>
        /// <param name="envioLog"></param>
        private void GuardarEnviosCorreoTransaccionalmente(List<FtExtEnvioAreaDTO> listaGuardar, FtExtEnvioLogDTO envioLog)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                foreach (var reg in listaGuardar)
                {
                    int envarcodi = SaveFtExtEnvioArea(reg, conn, tran);

                    //guardo un log por cada area derivada
                    envioLog.Envarcodi = envarcodi;
                    SaveFtExtEnvioLog(envioLog, conn, tran);
                }


                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        /// <summary>
        /// Devuelve las areas a las cuales se derivaran el envio de cierta versión
        /// </summary>
        /// <param name="ftvercodi"></param>
        /// <returns></returns>
        public List<FtExtCorreoareaDTO> ObtenerAreasAsignadasPorVersion(int ftvercodi)
        {
            List<FtExtCorreoareaDTO> lstSalida = new List<FtExtCorreoareaDTO>();

            FtExtEnvioVersionDTO version = GetByIdFtExtEnvioVersion(ftvercodi);
            FtExtEnvioDTO envio = GetByIdFtExtEnvio(version.Ftenvcodi);

            int estenvcodi = envio.Estenvcodi;
            int tipoFormato = envio.Ftenvtipoformato;

            if (estenvcodi == ConstantesFichaTecnica.EstadoSolicitud)
            {
                if (tipoFormato == ConstantesFichaTecnica.FormatoConexIntegModif)
                {
                    //Encuentro todas las areas 
                    //primero encuentro todos lo equipos del envio
                    List<FtExtEnvioEqDTO> listaEnvioEqPorVersion = GetByCriteriaFtExtEnvioEqs(ftvercodi.ToString());
                    string strLstFteeqcodis = string.Join(",", listaEnvioEqPorVersion.Select(x => x.Fteeqcodi));
                    List<FtExtEnvioDatoDTO> lstDatosPorEnvio = ListarParametrosFtExtEnvioDatos(strLstFteeqcodis);

                    //Encuentro los ftitcodis involucrados
                    string strListaFtitcodis = string.Join(",", lstDatosPorEnvio.Select(x => x.Ftitcodi).Distinct().ToList());

                    //encuentro las áreas
                    List<FtExtCorreoareaDTO> listaAreasPorFtitcodis = strListaFtitcodis != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorParametros(ConstantesFichaTecnica.EstadoStrActivo, strListaFtitcodis) : new List<FtExtCorreoareaDTO>();
                    string strListaFaremcodis = string.Join(",", listaAreasPorFtitcodis.Select(x => x.Faremcodi).Distinct().ToList());

                    lstSalida = strListaFaremcodis != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorIds(strListaFaremcodis) : new List<FtExtCorreoareaDTO>();
                }
                else
                {
                    if (tipoFormato == ConstantesFichaTecnica.FormatoOperacionComercial)
                    {
                        List<FtExtEnvioReqDTO> ListaRequisitosPorVersion = ListByVersionesFtExtEnvioReqs(ftvercodi);
                        string strListaFevrqcodis = string.Join(",", ListaRequisitosPorVersion.Select(x => x.Fevrqcodi).Distinct().ToList());

                        //encuentro las áreas
                        List<FtExtCorreoareaDTO> listaAreasPorFevrqcodis = strListaFevrqcodis != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorRequisitos(ConstantesFichaTecnica.EstadoStrActivo, strListaFevrqcodis) : new List<FtExtCorreoareaDTO>();
                        string strListaFaremcodis = string.Join(",", listaAreasPorFevrqcodis.Select(x => x.Faremcodi).Distinct().ToList());

                        lstSalida = strListaFaremcodis != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorIds(strListaFaremcodis) : new List<FtExtCorreoareaDTO>();
                    }
                    else
                    {
                        if (tipoFormato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                        {

                            //obtener toda la lista de activos
                            List<FtExtRelAreareqDTO> listaRelacionBaja = ListFtExtRelAreareqs().Where(x => x.Frraestado == "A" && x.Fevrqcodi == -1).ToList(); // x.Fevrqcodi = -1 es para DAR BAJA 

                            string strListaFaremcodis = string.Join(",", listaRelacionBaja.Select(x => x.Faremcodi).Distinct().ToList());

                            lstSalida = strListaFaremcodis != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorIds(strListaFaremcodis) : new List<FtExtCorreoareaDTO>();
                        }
                    }
                }
            }

            if (estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
            {
                if (tipoFormato == ConstantesFichaTecnica.FormatoConexIntegModif)
                {
                    //Solo encuentro areas para aquellos que tengan en su estado a SUBSANADO
                    List<FtExtEnvioRevisionDTO> lstDatosRev = GetByCriteriaFtExtEnvioRevisionsXVersionYDato(ftvercodi);


                    //primero encuentro todos lo equipos del envio
                    List<FtExtEnvioEqDTO> listaEnvioEqPorVersion = GetByCriteriaFtExtEnvioEqs(ftvercodi.ToString());
                    string strLstFteeqcodis = string.Join(",", listaEnvioEqPorVersion.Select(x => x.Fteeqcodi));
                    List<FtExtEnvioDatoDTO> lstDatosPorEnvio = ListarParametrosFtExtEnvioDatos(strLstFteeqcodis);

                    //Encuentro todos los ftitcodis involucrados
                    List<int> lstFtitcodisTotales = lstDatosPorEnvio.Select(x => x.Ftitcodi).Distinct().ToList();

                    //Encuentro todos los ftitcodis con estado revision en SUBSANADO
                    List<int> lstFtitcodisSubsanados = lstDatosRev.Where(x => x.Ftrevestado != null && x.Ftrevestado.Trim() == ConstantesFichaTecnica.OpcionSubsanado).Select(x => x.Ftitcodi).Distinct().ToList();
                    if (!lstFtitcodisSubsanados.Any()) throw new ArgumentException("No existen parámetros subsanados para derivar revisión a las áreas.");
                    string strListaFtitcodisSubsanados = string.Join(",", lstFtitcodisSubsanados);

                    //encuentro las áreas
                    List<FtExtCorreoareaDTO> listaAreasPorFtitcodis = strListaFtitcodisSubsanados != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorParametros(ConstantesFichaTecnica.EstadoStrActivo, strListaFtitcodisSubsanados) : new List<FtExtCorreoareaDTO>();
                    string strListaFaremcodis = string.Join(",", listaAreasPorFtitcodis.Select(x => x.Faremcodi).Distinct().ToList());

                    lstSalida = strListaFaremcodis != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorIds(strListaFaremcodis) : new List<FtExtCorreoareaDTO>();
                }
                else
                {
                    if (tipoFormato == ConstantesFichaTecnica.FormatoOperacionComercial)
                    {
                        //Solo encuentro areas para aquellos que tengan en su estado a SUBSANADO
                        List<FtExtEnvioRevisionDTO> lstDatosRev = GetByCriteriaFtExtEnvioRevisionsXVersionYReq(ftvercodi);

                        //Encuentro todos los fevrqcodis con estado revision en SUBSANADO
                        List<int> lstFevrqcodisSubsanados = lstDatosRev.Where(x => x.Ftrevestado != null && x.Ftrevestado.Trim() == ConstantesFichaTecnica.OpcionSubsanado).Select(x => x.Fevrqcodi).Distinct().ToList();
                        if (!lstFevrqcodisSubsanados.Any()) throw new ArgumentException("No existen requisitos subsanados para derivar revisión a las áreas.");
                        string strListaFevrqcodisSubsanados = string.Join(",", lstFevrqcodisSubsanados);

                        //encuentro las áreas
                        List<FtExtCorreoareaDTO> listaAreasPorFevrqcodis = strListaFevrqcodisSubsanados != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorRequisitos(ConstantesFichaTecnica.EstadoStrActivo, strListaFevrqcodisSubsanados) : new List<FtExtCorreoareaDTO>();
                        string strListaFaremcodis = string.Join(",", listaAreasPorFevrqcodis.Select(x => x.Faremcodi).Distinct().ToList());

                        lstSalida = strListaFaremcodis != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorIds(strListaFaremcodis) : new List<FtExtCorreoareaDTO>();
                    }
                    else
                    {
                        if (tipoFormato == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                        {

                            List<FtExtEnvioRevisionDTO> lstDatosRev = FactorySic.GetFtExtEnvioRevisionRepository().ListByVersionYReq(ftvercodi);

                            //Encuentro todos los fevrqcodis con estado revision en SUBSANADO
                            List<FtExtEnvioRevisionDTO> lstSubsanados = lstDatosRev.Where(x => x.Ftrevestado != null && x.Ftrevestado.Trim() == ConstantesFichaTecnica.OpcionSubsanado).Distinct().ToList();

                            if (lstSubsanados.Any())
                            {
                                //obtener toda la lista de activos para DAR DE BAJA
                                List<FtExtRelAreareqDTO> listaRelacionBaja = ListFtExtRelAreareqs().Where(x => x.Frraestado == "A" && x.Fevrqcodi == -1).ToList(); // x.Fevrqcodi = -1 es para DAR BAJA 

                                string strListaFaremcodisBaja = string.Join(",", listaRelacionBaja.Select(x => x.Faremcodi).Distinct().ToList());

                                lstSalida = strListaFaremcodisBaja != "" ? FactorySic.GetFtExtCorreoareaRepository().ListarPorIds(strListaFaremcodisBaja) : new List<FtExtCorreoareaDTO>();
                            }
                            else
                            {
                                throw new ArgumentException("No existe información subsanada para derivar revisión a las áreas.");
                            }

                        }
                    }
                }
            }
            return lstSalida;
        }
        #endregion

        #region General
        /// <summary>
        /// Genera lista de Reporte CV
        /// </summary>
        /// <returns></returns>
        public string GenerarHtmlListaCostosVariableFT(string sufijo)
        {
            List<PrRepcvDTO> lstCVariables = ObtenerCostosVariablesParaFT();

            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<table border='0' class='pretty tabla-icono' cellspacing='0' width='100%' id='tabla_CV'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th></th>");
            strHtml.Append("<th>Código</th>");
            strHtml.Append("<th>Fecha-Hora</th>");
            strHtml.Append("<th>Tipo</th>");
            strHtml.Append("<th>Nombre</th>");
            strHtml.Append("<th>Detalle</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");

            foreach (var item in lstCVariables)
            {
                strHtml.Append("<tr>");

                strHtml.AppendFormat("<td><input type='checkbox' name='chkCvariable_" + sufijo + "' id='chkbxCV_" + sufijo + "_{0}' value='{0}' /> <input type='hidden' id='fechaVigRepcodi_{0}' value='{1}' /> </td>", item.Repcodi, item.Repfecha.ToString(ConstantesAppServicio.FormatoFecha));
                strHtml.AppendFormat("<td>{0}</td>", item.Repcodi);
                strHtml.AppendFormat("<td>{0}</td>", item.RepfechaDesc);
                strHtml.AppendFormat("<td>{0}</td>", item.ReptipoDesc);
                strHtml.AppendFormat("<td>{0}</td>", item.Repnomb);
                strHtml.AppendFormat("<td style='text-align:left;padding-left:20px'>{0}</td>", item.Repdetalle);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Devuelve listado de CV
        /// </summary>
        /// <returns></returns>
        private List<PrRepcvDTO> ObtenerCostosVariablesParaFT()
        {
            var fechaInicio = DateTime.Today;
            var fechaFin = DateTime.Today.AddDays(30);

            //var lstCVariables = _appDespacho.GetByCriteriaPrRepcvs(ConstantesFichaTecnica.TipoProgramaTodos, fechaInicio, fechaFin).OrderByDescending(x => x.Repfecha).ToList();
            List<PrRepcvDTO> lstCVariables = GetByCriteriaPrRepcvs(ConstantesFichaTecnica.TipoProgramaTodos, fechaInicio, fechaFin).OrderByDescending(x => x.Repfecha).ToList();
            return lstCVariables;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PrRepcv
        /// </summary>
        public List<PrRepcvDTO> GetByCriteriaPrRepcvs(string tipoPrograma, DateTime dFechaInicio, DateTime dFechaFin)
        {
            List<PrRepcvDTO> l = FactorySic.GetPrRepcvRepository().GetByCriteria(dFechaInicio, dFechaFin);
            l = tipoPrograma == ConstantesFichaTecnica.TipoProgramaSemanal ? l.Where(x => x.Reptipo == ConstantesFichaTecnica.TipoProgramaSemanal).ToList() :
                 (tipoPrograma == ConstantesFichaTecnica.TipoProgramaDiario ? l.Where(x => x.Reptipo == ConstantesFichaTecnica.TipoProgramaDiario).ToList() : l);

            foreach (var reg in l)
            {
                reg.ReptipoDesc = reg.Reptipo == ConstantesFichaTecnica.TipoProgramaSemanal ? ConstantesFichaTecnica.TipoProgramaSemanalDesc : ConstantesFichaTecnica.TipoProgramaDiarioDesc;
                reg.RepfechaDesc = reg.Repfecha.ToString(ConstantesAppServicio.FormatoFechaHoraAMPM);
                reg.RepfechaemDesc = reg.Repfechaem != null ? reg.Repfechaem.Value.ToString(ConstantesAppServicio.FormatoFechaHoraAMPM) : string.Empty;
            }

            return l;
        }
        #endregion

        #region Fecha Sistema Manual

        /// <summary>
        /// Devuelve la hora del sistema configurado por el aplicativo 
        /// </summary>
        /// <returns></returns>
        public DateTime ObtenerFechaSistemaFT(int ftenvcodi)
        {
            DateTime salida = DateTime.Now;

            //S: usar fecha sistema manual
            var keyConfig = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyFlagFTHoraSistemaManual];
            if (keyConfig == "S")
            {
                if (ftenvcodi <= 0)
                {
                    salida = DateTime.Now;
                }
                else
                {
                    FtExtEnvioDTO envio = FactorySic.GetFtExtEnvioRepository().GetById(ftenvcodi); //NO USAR EL GetByIdCbEnvio (hay bucle)
                    salida = envio.Ftenvfecsistema != null ? envio.Ftenvfecsistema.Value : DateTime.Now;
                }
            }


            return salida;
        }

        /// <summary>
        /// Obtener fecha de sistema posterior a la última acción
        /// </summary>
        /// <returns></returns>
        public DateTime ObtenerFechaSistemaPosteriorFT(DateTime fechaSistemaManual)
        {
            DateTime salida = fechaSistemaManual;

            //S: usar fecha sistema manual
            var keyConfig = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyFlagFTHoraSistemaManual];
            if (keyConfig == "S")
            {
                var keyConfigMin = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyFlagFTHoraSistemaManualMinPosterior];
                int minutos = Convert.ToInt32(keyConfigMin);

                salida = fechaSistemaManual.AddMinutes(minutos);

            }

            return salida;
        }

        /// <summary>
        /// Actualiza el valor de fecha Sistema
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="userName"></param>
        /// <param name="fecha"></param>
        public void GuardarFechaSistema(int idEnvio, string userName, DateTime fecha)
        {
            try
            {
                FtExtEnvioDTO envio = GetByIdFtExtEnvio(idEnvio);
                envio.Ftenvfecsistema = fecha;

                IDbConnection conn = null;
                DbTransaction tran = null;
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                UpdateFtExtEnvio(envio, conn, tran);

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Ampliar plazo

        /// <summary>
        /// Actualiza el valor de fecha de Apliacion
        /// </summary>
        /// <param name="idEnvio"></param>
        /// <param name="userName"></param>
        /// <param name="fecha"></param>
        public void GuardarFechaAmplificar(int idEnvio, string usuarioIntranet, DateTime fechaFinPlazo)
        {
            try
            {
                //la lógica es similar a la acción "observar" del administrador
                FtExtEnvioDTO regEnvio = GetByIdFtExtEnvio(idEnvio);
                DateTime fechaRegistro = ObtenerFechaSistemaFT(regEnvio.Ftenvcodi); //incluye fechaSistema

                //solo para los envios subsanados
                if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    //Actualización de envio
                    regEnvio.Estenvcodi = ConstantesFichaTecnica.EstadoObservado; //pasa a estado observacion
                    regEnvio.Ftenvfecampliacion = fechaFinPlazo;
                    regEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaRegistro);

                    regEnvio.Ftenvfecmodificacion = fechaRegistro;
                    regEnvio.Ftenvusumodificacion = usuarioIntranet;
                    regEnvio.FlagUpdateEnvio = true;

                    //log
                    FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                    logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                    logEnvio.Ftelogusucreacion = usuarioIntranet;
                    logEnvio.Ftelogfeccreacion = fechaRegistro.AddSeconds(1);
                    logEnvio.Ftelogfecampliacion = fechaFinPlazo;
                    logEnvio.Ftelogobs = "Ampliación de Plazo para el levantamiento de observaciones del envío hasta la fecha: " + fechaFinPlazo.ToString(ConstantesAppServicio.FormatoFechaFull);
                    logEnvio.Ftelogcondicion = "";
                    regEnvio.LogEnvioActual = logEnvio;

                    //solo actualizar envio (cambiar carpeta), Version (pasar de temporal a oficial) y agregar log
                    regEnvio.VersionTemporalIntranet.Fteverfeccreacion = fechaRegistro;
                    regEnvio.VersionTemporalIntranet.Fteverusucreacion = usuarioIntranet;
                    regEnvio.VersionTemporalIntranet.Ftevertipo = ConstantesFichaTecnica.GuardadoOficial;
                    ActualizarEnvioIntranetTransaccional(regEnvio);

                    //enviar notificacion
                    FtExtEnvioDTO regEnvioGuardado = GetByIdFtExtEnvio(idEnvio);
                    regEnvioGuardado.EsAmpliacionPlazo = true;
                    var mapaVariable = LlenarVariablesCorreos(regEnvioGuardado, new List<FTParametroModificacion>());
                    EnvioCorreoExtranetFichaTecnica(ConstantesFichaTecnica.TipoCorreoNotificacionAutomatica, regEnvioGuardado, mapaVariable);
                }
                else
                {
                    throw new ArgumentException("El envío no se encuentra en estado de Subsanación de Observaciones. No se puede ampliar plazo.");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Habilitar revisión

        public void GuardarFechaInicioPlazoRevision(int idEnvio, string userName, DateTime fechaInicioPlazo)
        {
            try
            {
                FtExtEnvioDTO regEnvio = GetByIdFtExtEnvio(idEnvio);
                DateTime fechaRegistro = ObtenerFechaSistemaFT(regEnvio.Ftenvcodi); //incluye fechaSistema

                if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud || regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs)
                {
                    //Actualización de envio
                    if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud) regEnvio.Ftenvfecinirev1 = fechaInicioPlazo;
                    if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs) regEnvio.Ftenvfecinirev2 = fechaInicioPlazo;

                    regEnvio.Ftenvfecsistema = ObtenerFechaSistemaPosteriorFT(fechaRegistro);

                    regEnvio.Ftenvfecmodificacion = fechaRegistro;
                    regEnvio.Ftenvusumodificacion = userName;
                    regEnvio.FlagUpdateEnvio = true;

                    //log
                    FtExtEnvioLogDTO logEnvio = new FtExtEnvioLogDTO();
                    logEnvio.Estenvcodi = regEnvio.Estenvcodi;
                    logEnvio.Ftelogusucreacion = userName;
                    logEnvio.Ftelogfeccreacion = fechaRegistro.AddSeconds(1);
                    logEnvio.Ftelogobs = "Habilitación de plazo para revisión del envío";
                    if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud) logEnvio.Ftelogobs = "Habilitación de plazo para revisión del envío solicitado. El inicio del plazo para la revisión de la Solicitud es " + fechaInicioPlazo.ToString(ConstantesAppServicio.FormatoFecha);
                    if (regEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs) logEnvio.Ftelogobs = "Habilitación de plazo para revisión del envío subsanado. El inicio del plazo para la revisión de la Subsanación de Observaciones es " + fechaInicioPlazo.ToString(ConstantesAppServicio.FormatoFecha);
                    logEnvio.Ftelogcondicion = "";
                    regEnvio.LogEnvioActual = logEnvio;

                    regEnvio.VersionActual = null;
                    int ftenvcodi = GuardarEnvioFormatoFichaExtranetTransaccional(regEnvio);

                    //no enviar notificacion
                }
                else
                {
                    throw new ArgumentException("El envío no se encuentra en estado de Solicitud o Subsanación de Observaciones. No se puede habilitar plazo.");
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public bool ValidarEnvioNoTienePlazoRevision(FtExtEnvioDTO objEnvio)
        {
            if (objEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud && objEnvio.Ftenvfecinirev1 == null)
            {
                return true;
            }

            //si esta en subsanacion debe tener fecha de inicio de revisión
            if (objEnvio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs && objEnvio.Ftenvfecinirev2 == null)
            {
                return true;
            }

            return false;
        }

        #endregion

        #region Versiones y Autoguardado

        public void BuscarAutoguardado(int codigoEnvio, int codigoEmpresa, int codigoEtapa, int codigoProyecto, string codigoEquipos, int tipoFormato,
                                        out int codigoEnvioAUsar, out int codigoVersionTemporal, out bool existeEquipoAutoguardado)
        {
            codigoEnvioAUsar = 0;
            codigoVersionTemporal = 0;
            existeEquipoAutoguardado = false;

            if (codigoEnvio == 0) //solicitud
            {
                var listaEquipoEnvioMemoria = ListarEquipoEnvioConexIntegModif(codigoEmpresa, codigoEtapa, codigoProyecto, codigoEquipos);
                List<int> listaEquicodiMem = listaEquipoEnvioMemoria.Where(x => x.Equicodi > 0).Select(x => x.Equicodi.Value).ToList();
                List<int> listaGrupocodiMem = listaEquipoEnvioMemoria.Where(x => x.Grupocodi > 0).Select(x => x.Grupocodi.Value).ToList();

                //envios del formato seleccionado
                List<FtExtEnvioDTO> lstEnvioAutoguardados = ListarAutoguardados(codigoEmpresa, ConstantesFichaTecnica.EstadoSolicitud, codigoEtapa, codigoProyecto);
                lstEnvioAutoguardados = lstEnvioAutoguardados.Where(x => x.Ftenvtipoformato == tipoFormato).ToList();

                //buscar el ultimo autoguardado que tenga algun equipo del envio
                foreach (var regEnvioTmp in lstEnvioAutoguardados)
                {
                    //existe envio para la empresa, etapa y proyecto (la versión no necesariamente tiene los mismos equipos seleccionados)
                    codigoEnvioAUsar = regEnvioTmp.Ftenvcodi;
                    codigoVersionTemporal = regEnvioTmp.FtevercodiTemporalExtranet;

                    if (!existeEquipoAutoguardado)
                    {
                        //sobre la última versión temporal
                        var listaEnvioEq = GetByCriteriaFtExtEnvioEqsTodoEstado(regEnvioTmp.FtevercodiTemporalExtranet.ToString());

                        //al menos algún equipo de esa versión para determinar que hay información previamente cargada 
                        int totalCoincide = 0;
                        foreach (var eqEnvio in listaEnvioEq)
                        {
                            if (eqEnvio.Equicodi > 0 && listaEquicodiMem.Contains(eqEnvio.Equicodi.Value))
                            {
                                totalCoincide++;
                            }
                            if (eqEnvio.Grupocodi > 0 && listaGrupocodiMem.Contains(eqEnvio.Grupocodi.Value))
                            {
                                totalCoincide++;
                            }
                        }

                        if (totalCoincide > 0) existeEquipoAutoguardado = true; //detener el for
                    }
                }
            }
        }

        private List<FtExtEnvioDTO> ListarAutoguardados(int emprcodi, int estenvcodi, int ftetcodi, int? ftprycodi)
        {
            //obtenemos solo los envios autoguardados
            var lstTemp = FactorySic.GetFtExtEnvioRepository().ListarEnvioAutoguardado(emprcodi, estenvcodi, ftetcodi, ConstantesFichaTecnica.GuardadoTemporal);

            if (ftprycodi == null || ftprycodi == 0) lstTemp = lstTemp.Where(x => x.Ftprycodi == null).ToList();
            else lstTemp = lstTemp.Where(x => x.Ftprycodi == ftprycodi).ToList();

            //ordenamos del menor a mayor (como son negativos el menor es el más reciente)
            lstTemp = lstTemp.OrderBy(x => x.Ftenvcodi).ToList();

            //formatear envios
            if (lstTemp.Any())
            {
                foreach (var obj in lstTemp)
                {
                    List<int> lstEnvio = new List<int> { obj.Ftenvcodi };
                    List<FtExtEnvioEqDTO> listaEquiposTotal = ObtenerListadoDeEquiposPorEnvios(lstEnvio);
                    List<FtExtEnvioVersionDTO> listaVersion = GetByCriteriaFtExtEnvioVersions(obj.Ftenvcodi.ToString());

                    FormatearFtExtEnvio(obj, listaEquiposTotal, listaVersion);
                }
            }

            //solo considerar los que tienen al menos una versión temporal guardada  sin considerar el historial
            return lstTemp.Where(x => x.FtevercodiTemporalExtranet > 0).ToList();
        }

        private List<FtExtEnvioVersionDTO> ListarVersionExtranet(int codigoEnvio, int tipoVersion)
        {
            if (codigoEnvio == 0)
            { }
            List<FtExtEnvioVersionDTO> lstVers = GetByCriteriaFtExtEnvioVersions(codigoEnvio.ToString()).Where(x => x.Fteverusucreacion.Contains("@")
                            && x.Ftevertipo == tipoVersion).ToList(); //filtro solo los agentes

            if (ConstantesFichaTecnica.GuardadoLogRespaldo == tipoVersion)
            {
                //solo mostrar los autoguardados de solicitud u observado, no todos
                var objEnvioAct = GetByIdFtExtEnvio(codigoEnvio);
                lstVers = lstVers.Where(x => x.Estenvcodi == objEnvioAct.Estenvcodi).ToList();
            }

            int totalVersiones = lstVers.Count;
            foreach (var item in lstVers)
            {
                item.NumeroVersion = totalVersiones;
                totalVersiones--;
            }

            return lstVers;
        }

        public List<FtExtEnvioVersionDTO> ListarVersionOficialExtranet(int codigoEnvio)
        {
            return ListarVersionExtranet(codigoEnvio, ConstantesFichaTecnica.GuardadoOficial);
        }

        public List<FtExtEnvioVersionDTO> ListarVersionAutoguardadoExtranet(int codigoEnvio)
        {
            return ListarVersionExtranet(codigoEnvio, ConstantesFichaTecnica.GuardadoLogRespaldo);
        }

        public bool AutoguardarVersionTemporalExtranet(int ftenvcodi, int ftevercodi, string tipoAutoguardado,
                            bool hayPendiente1erAutoguardado, string mensajeLog, string mensajeNoConexion,
                            List<FTReporteExcel> listaModelWeb, bool flagActualizarArchivo, string usuarioExtranet)
        {
            FTObjetoEnvioTransaccional objEnvio = GetObjetoCambioVersionAutoguardado(ftenvcodi, ftevercodi, tipoAutoguardado,
                            hayPendiente1erAutoguardado, mensajeLog, mensajeNoConexion,
                            listaModelWeb, flagActualizarArchivo, usuarioExtranet);

            if (objEnvio != null)
            {
                //Guardar cambios bd
                ActualizarEnvioFormatoFichaExtranetTransaccional(objEnvio);

                //Actualizar flag de los cambios de los items de Modificación de Ficha técnica
                //ListarCambiosEtapaModificacionFT(ftenvcodi, ftevercodi, true, out List<FTParametroModificacion> lstCambios, out string msgVal);

                return true;
            }

            return false;
        }

        public bool ExisteCambioSinAutoguardar(int ftenvcodi, int ftevercodi, string tipoAutoguardado, List<FTReporteExcel> listaModelWeb)
        {
            FTObjetoEnvioTransaccional objEnvio = GetObjetoCambioVersionAutoguardado(ftenvcodi, ftevercodi, tipoAutoguardado, false, null, null,
                             listaModelWeb, true, null);

            return objEnvio != null;
        }

        private FTObjetoEnvioTransaccional GetObjetoCambioVersionAutoguardado(int ftenvcodi, int ftevercodi, string tipoAutoguardado,
                            bool hayPendiente1erAutoguardado, string mensajeLog, string mensajeNoConexion,
                            List<FTReporteExcel> listaModelWeb, bool flagActualizarArchivo, string usuarioExtranet)
        {
            //datos del formulario web
            List<FtExtEnvioDatoDTO> listaDatoUpdate = new List<FtExtEnvioDatoDTO>();
            List<FtExtEnvioReldatoarchivoDTO> listaRelDatoArchivo = new List<FtExtEnvioReldatoarchivoDTO>();
            List<FtExtEnvioRelreqarchivoDTO> listaRelReqArchivo = new List<FtExtEnvioRelreqarchivoDTO>();
            List<FtExtEnvioArchivoDTO> listaArchivoNuevo = new List<FtExtEnvioArchivoDTO>();
            List<FtExtEnvioArchivoDTO> listaArchivoUpdate = new List<FtExtEnvioArchivoDTO>();
            List<FtExtEnvioRevisionDTO> listaRevisionUpdate = new List<FtExtEnvioRevisionDTO>();

            //GUARDAR cuando haya cambios de datos, sustento
            var objEnvioAct = GetByIdFtExtEnvio(ftenvcodi);
            if (ConstantesFichaTecnica.FormatoConexIntegModif == objEnvioAct.Ftenvtipoformato)
            {
                foreach (var modelWeb in listaModelWeb)
                {
                    if (modelWeb.ListaTreeData != null) // ListaTreeData es null cuando no se abrió ningun formulario
                    {
                        //caso items dependientes
                        List<FtFictecItemDTO> listaDataExcelReplica = modelWeb.ListaTreeData.Where(x => x.FtitcodiDependiente > 0).ToList();

                        //Replica a items duplicado
                        foreach (var itemOrig in listaDataExcelReplica)
                        {
                            var itemReplica = modelWeb.ListaTreeData.Find(x => x.Ftitcodi == itemOrig.FtitcodiDependiente);
                            if (itemReplica != null)
                            {
                                itemReplica.EsFilaEditableExtranet = true; //el item replica no es editable en excel ni en web, pero se le pone "true" para que se guarde en bd
                                itemReplica.Valor = itemOrig.Valor ?? "";
                                itemReplica.Itemcomentario = itemOrig.Itemcomentario ?? "";
                                itemReplica.ItemValConfidencial = itemOrig.ItemValConfidencial ?? "";
                                itemReplica.ListaArchivoValor = itemOrig.ListaArchivoValor ?? new List<FtExtEnvioArchivoDTO>();
                                itemReplica.ListaArchivoAdjunto = itemOrig.ListaArchivoAdjunto ?? new List<FtExtEnvioArchivoDTO>();
                            }
                        }

                        //actualizar columna valor / archivos y sus archivos de sustento
                        ListarCambioFichaEnvioTemporalConexIntegModif(ftenvcodi, ftevercodi, modelWeb.Fteeqcodi, modelWeb, flagActualizarArchivo,
                                    out List<FtExtEnvioDatoDTO> listaDatoUpdate1, out List<FtExtEnvioReldatoarchivoDTO> listaRelDatoArchivo1,
                                    out List<FtExtEnvioArchivoDTO> listaArchivoNuevo1, out List<FtExtEnvioArchivoDTO> listaArchivoUpdate1);
                        listaDatoUpdate.AddRange(listaDatoUpdate1);
                        listaRelDatoArchivo.AddRange(listaRelDatoArchivo1);
                        listaArchivoNuevo.AddRange(listaArchivoNuevo1);
                        listaArchivoUpdate.AddRange(listaArchivoUpdate1);

                        //actualizar proceso de revisión y sus archivos
                        if (modelWeb.ListaRevision != null)
                        {
                            ListarCambioProcesoRevision(ftenvcodi, ftevercodi, modelWeb.Fteeqcodi, modelWeb.ListaRevision, true, out List<FtExtEnvioRevisionDTO> listaRevUp1);
                            listaRevisionUpdate.AddRange(listaRevUp1);
                        }
                    }
                }

            }
            if (ConstantesFichaTecnica.FormatoOperacionComercial == objEnvioAct.Ftenvtipoformato || ConstantesFichaTecnica.FormatoBajaModoOperacion == objEnvioAct.Ftenvtipoformato)
            {
                var modelWeb = listaModelWeb[0];

                //cambios en el formulario de requisitos
                ListarCambioFichaEnvioRequisito(ftevercodi, modelWeb.ListaReqEvento, flagActualizarArchivo,
                                                    out List<FtExtEnvioRelreqarchivoDTO> listaRelReqArchivo1,
                                                    out List<FtExtEnvioArchivoDTO> listaArchivoNuevo1, out List<FtExtEnvioArchivoDTO> listaArchivoUpdate1);

                listaRelReqArchivo.AddRange(listaRelReqArchivo1);
                listaArchivoNuevo.AddRange(listaArchivoNuevo1);
                listaArchivoUpdate.AddRange(listaArchivoUpdate1);

                //actualizar proceso de revisión y sus archivos
                if (modelWeb.ListaRevision != null)
                {
                    ListarCambioProcesoRevision(ftenvcodi, ftevercodi, 0, modelWeb.ListaRevision, true, out List<FtExtEnvioRevisionDTO> listaRevUp1);
                    listaRevisionUpdate.AddRange(listaRevUp1);
                }
            }

            //GUARDAR cuando haya cambios o mensaje
            if (string.IsNullOrEmpty(mensajeLog)) mensajeLog = "Se generó una copia de autoguardado exitosamente.";
            bool flagMensajeValido = !mensajeLog.Contains("autoguardado exitosamente");

            //log de autoguardado se guarda en la tabla de version
            FtExtEnvioVersionDTO logAutoguardado = new FtExtEnvioVersionDTO();
            logAutoguardado.Ftenvcodi = ftenvcodi;
            logAutoguardado.Ftevertipo = ConstantesFichaTecnica.GuardadoLogRespaldo; //3
            logAutoguardado.Fteveroperacion = ConstantesFichaTecnica.OperacionExistosa;
            logAutoguardado.Fteverconexion = ConstantesFichaTecnica.ConexionSiCOES;
            logAutoguardado.Fteverautoguardado = tipoAutoguardado;
            logAutoguardado.Fteverestado = ConstantesFichaTecnica.EstadoStrActivo;
            logAutoguardado.Fteverfeccreacion = DateTime.Now;
            logAutoguardado.Fteverusucreacion = usuarioExtranet;
            logAutoguardado.Fteverdescripcion = mensajeLog;
            logAutoguardado.Estenvcodi = objEnvioAct.Estenvcodi;

            //log  de perdida de conexion o error al autoguardar
            FtExtEnvioVersionDTO logErrorAutoguardado = null;
            if (!string.IsNullOrEmpty(mensajeNoConexion))
            {
                string msjlog = "";
                if (mensajeNoConexion == "G_NO_C") msjlog = "[Opción Guardar] Se perdió la conexión agente/servidor COES, no llegó la información al servidor.";
                if (mensajeNoConexion == "G_SI_C") msjlog = "[Opción Guardar] Llegó la información del agente al servidor COES, pero ocurrió un problema al guardarlo.";
                if (mensajeNoConexion == "E_NO_C") msjlog = "[Opción Enviar a COES] Se perdió la conexión agente/servidor COES, no llegó la información al servidor.";
                if (mensajeNoConexion == "E_SI_C") msjlog = "[Opción Enviar a COES] Llegó la información del agente al servidor COES, pero ocurrió un problema al guardarlo.";

                logErrorAutoguardado = new FtExtEnvioVersionDTO();
                logErrorAutoguardado.Ftenvcodi = ftenvcodi;
                logErrorAutoguardado.Ftevertipo = ConstantesFichaTecnica.GuardadoLogRespaldo; //3
                logErrorAutoguardado.Fteveroperacion = ConstantesFichaTecnica.OperacionConError;
                logErrorAutoguardado.Fteverconexion = mensajeNoConexion == "G_NO_C" || mensajeNoConexion == "E_NO_C" ? ConstantesFichaTecnica.ConexionNoCOES : ConstantesFichaTecnica.ConexionSiCOES;
                logErrorAutoguardado.Fteverautoguardado = mensajeNoConexion == "G_SI_C" || mensajeNoConexion == "E_SI_C" ? ConstantesFichaTecnica.RealizadoPorManual : ConstantesFichaTecnica.RealizadoPorSistema;
                logErrorAutoguardado.Fteverestado = ConstantesFichaTecnica.EstadoStrActivo;
                logErrorAutoguardado.Fteverfeccreacion = DateTime.Now;
                logErrorAutoguardado.Fteverusucreacion = usuarioExtranet;
                logErrorAutoguardado.Fteverdescripcion = msjlog;
                logErrorAutoguardado.Estenvcodi = objEnvioAct.Estenvcodi;
            }

            //insert / update
            if (listaDatoUpdate.Any() || listaRelDatoArchivo.Any() || listaArchivoNuevo.Any() || listaArchivoUpdate.Any() || listaRevisionUpdate.Any()
                || flagMensajeValido || hayPendiente1erAutoguardado || logErrorAutoguardado != null)
            {
                FTObjetoEnvioTransaccional obj = new FTObjetoEnvioTransaccional();
                obj.ListaDatoUpdate = listaDatoUpdate;
                obj.ListaRelDatoArchivo = listaRelDatoArchivo;
                obj.ListaRelReqArchivo = listaRelReqArchivo;
                obj.ListaArchivoNuevo = listaArchivoNuevo;
                obj.ListaArchivoUpdate = listaArchivoUpdate;
                obj.ListaRevisionUpdate = listaRevisionUpdate;
                obj.LogAutoguardado = logAutoguardado;
                obj.LogErrorAutoguardado = logErrorAutoguardado;

                return obj;
            }

            return null;
        }

        public bool RealizarAutoguardadoVersionTemporalIntranet(int ftenvcodi, int ftevercodi, List<FTReporteExcel> listaModelWeb, string usuarioExtranet, bool flagActualizarArchivo)
        {
            //datos del formulario web
            List<FtExtEnvioDatoDTO> listaDatoUpdate = new List<FtExtEnvioDatoDTO>();
            List<FtExtEnvioReldatoarchivoDTO> listaRelDatoArchivo = new List<FtExtEnvioReldatoarchivoDTO>();
            List<FtExtEnvioArchivoDTO> listaArchivoNuevo = new List<FtExtEnvioArchivoDTO>();
            List<FtExtEnvioArchivoDTO> listaArchivoUpdate = new List<FtExtEnvioArchivoDTO>();
            List<FtExtEnvioRevisionDTO> listaRevisionUpdate = new List<FtExtEnvioRevisionDTO>();
            string mensajeLog = "";

            foreach (var modelWeb in listaModelWeb)
            {
                //actualizar proceso de revisión y sus archivos
                if (modelWeb.ListaRevision != null)
                {
                    ListarCambioProcesoRevision(ftenvcodi, ftevercodi, modelWeb.Fteeqcodi, modelWeb.ListaRevision, flagActualizarArchivo, out List<FtExtEnvioRevisionDTO> listaRevUp1);
                    listaRevisionUpdate.AddRange(listaRevUp1);
                }
            }

            //GUARDAR cuando haya cambios o mensaje
            bool flagMensajeValido = !string.IsNullOrEmpty(mensajeLog) && !mensajeLog.Contains("autoguardado exitosamente");

            //log de autoguardado se guarda en la tabla de version
            FtExtEnvioVersionDTO logAutoguardado = new FtExtEnvioVersionDTO();
            logAutoguardado.Estenvcodi = GetByIdFtExtEnvio(ftenvcodi).Estenvcodi;
            logAutoguardado.Ftenvcodi = ftenvcodi;
            logAutoguardado.Ftevertipo = ConstantesFichaTecnica.GuardadoLogRespaldo; //3
            logAutoguardado.Fteveroperacion = ConstantesFichaTecnica.OperacionExistosa;
            logAutoguardado.Fteverconexion = ConstantesFichaTecnica.ConexionSiCOES;
            logAutoguardado.Fteverautoguardado = ConstantesFichaTecnica.RealizadoPorManual;
            logAutoguardado.Fteverestado = ConstantesFichaTecnica.EstadoStrActivo;
            logAutoguardado.Fteverfeccreacion = DateTime.Now;
            logAutoguardado.Fteverusucreacion = usuarioExtranet;
            logAutoguardado.Fteverdescripcion = mensajeLog;

            //insert / update
            if (listaDatoUpdate.Any() || listaRelDatoArchivo.Any() || listaArchivoNuevo.Any() || listaArchivoUpdate.Any() || listaRevisionUpdate.Any()
                || flagMensajeValido)
            {
                FTObjetoEnvioTransaccional obj = new FTObjetoEnvioTransaccional();
                obj.ListaDatoUpdate = listaDatoUpdate;
                obj.ListaRelDatoArchivo = listaRelDatoArchivo;
                obj.ListaRelReqArchivo = null;
                obj.ListaArchivoNuevo = listaArchivoNuevo;
                obj.ListaArchivoUpdate = listaArchivoUpdate;
                obj.ListaRevisionUpdate = listaRevisionUpdate;
                obj.LogAutoguardado = logAutoguardado;

                //Guardar cambios bd
                ActualizarEnvioFormatoFichaExtranetTransaccional(obj);

                return true;
            }

            return false;
        }

        public void ListarCambioFichaEnvioTemporalConexIntegModif(int ftenvcodi, int ftevercodi, int fteeqcodi, FTReporteExcel modelWeb, bool flagActualizarArchivo,
                    out List<FtExtEnvioDatoDTO> listaDatoUpdate, out List<FtExtEnvioReldatoarchivoDTO> listaRelDatoArchivo,
                    out List<FtExtEnvioArchivoDTO> listaArchivoNuevo, out List<FtExtEnvioArchivoDTO> listaArchivoUpdate)
        {
            List<FtFictecItemDTO> listaTreeDataWeb = modelWeb.ListaTreeData;

            //Objetos de bd
            FtExtEnvioDTO regEnvio = GetByIdFtExtEnvio(ftenvcodi);
            List<FtExtEnvioDatoDTO> listaDatoBD = GetByCriteriaFtExtEnvioDatos(fteeqcodi.ToString());
            List<FtExtEnvioArchivoDTO> listaArchivoEq = ListByVersionYDatoFtExtEnvioArchivos(ftevercodi).Where(x => x.Fteeqcodi == fteeqcodi).ToList();

            //Obtener cambios (Dato y archivos)
            listaDatoUpdate = new List<FtExtEnvioDatoDTO>();
            listaRelDatoArchivo = new List<FtExtEnvioReldatoarchivoDTO>();
            listaArchivoNuevo = new List<FtExtEnvioArchivoDTO>();
            listaArchivoUpdate = new List<FtExtEnvioArchivoDTO>();

            foreach (var regDatoBD in listaDatoBD)
            {
                var listaArcXDatoBD = listaArchivoEq.Where(x => x.Ftedatcodi == regDatoBD.Ftedatcodi).ToList();
                var regDatoWeb = listaTreeDataWeb.Find(x => x.Ftitcodi == regDatoBD.Ftitcodi);
                if (regDatoWeb != null && (regDatoWeb.EsFilaEditableExtranet))
                {
                    //Valor, comentario, check
                    string valorWeb = (regDatoWeb.Valor ?? "").Trim();
                    string valorBD = (regDatoBD.Ftedatvalor ?? "").Trim();

                    string comentarioWeb = (regDatoWeb.Itemcomentario ?? "").Trim();
                    string comentarioBD = (regDatoBD.Ftedatcomentario ?? "").Trim();

                    string confidencialidadWeb = (regDatoWeb.ItemValConfidencial ?? "").Trim();
                    string confidencialidadBD = (regDatoBD.Ftedatflagvalorconf ?? "").Trim();

                    if (valorWeb != valorBD || comentarioWeb != comentarioBD || confidencialidadWeb != confidencialidadBD)
                    {
                        regDatoBD.Ftedatvalor = valorWeb; // solo actualiza si la fila no tiene "conforme"
                        regDatoBD.Ftedatcomentario = comentarioWeb;
                        regDatoBD.Ftedatflagvalorconf = confidencialidadWeb;
                        listaDatoUpdate.Add(regDatoBD);
                    }

                    //Archivos
                    if (flagActualizarArchivo)
                    {
                        List<FtExtEnvioArchivoDTO> listaArchivoWeb = new List<FtExtEnvioArchivoDTO>();
                        if (regDatoWeb.ListaArchivoAdjunto != null) listaArchivoWeb.AddRange(regDatoWeb.ListaArchivoAdjunto);
                        if (regDatoWeb.ListaArchivoValor != null) listaArchivoWeb.AddRange(regDatoWeb.ListaArchivoValor);

                        foreach (var regArchWeb in listaArchivoWeb)
                        {
                            var regArchBD = listaArcXDatoBD.Find(x => x.Ftearcnombrefisico == regArchWeb.Ftearcnombrefisico);

                            if (regArchBD == null)
                            {
                                regArchWeb.Ftearcestado = 1;
                                regArchWeb.Ftearcflagsustentoconf = regArchWeb.Ftearcflagsustentoconf ?? "N";
                                //regArch.Ftearctipo = regArch.TipoArchivo == ConstantesFichaTecnica.STipoArchivoValorDato ? ConstantesFichaTecnica.TipoArchivoValorDato : ConstantesFichaTecnica.TipoArchivoSustentoDato;
                                listaRelDatoArchivo.Add(new FtExtEnvioReldatoarchivoDTO()
                                {
                                    Ftedatcodi = regDatoBD.Ftedatcodi,
                                    Archivo = regArchWeb
                                });

                                listaArchivoNuevo.Add(regArchWeb);
                            }
                        }

                        foreach (var regArchBD in listaArcXDatoBD)
                        {
                            var regArchWeb = listaArchivoWeb.Find(x => x.Ftearcnombrefisico == regArchBD.Ftearcnombrefisico);
                            if (regArchWeb == null)
                            {
                                regArchBD.Ftearcestado = 0; //eliminado lógico
                                listaArchivoUpdate.Add(regArchBD);
                            }
                            else
                            {
                                //cambio el check de confidencialidad
                                string confidencialidadArcWeb = (regArchWeb.Ftearcflagsustentoconf ?? "").Trim();
                                string confidencialidadArcBD = (regArchBD.Ftearcflagsustentoconf ?? "").Trim();
                                if (confidencialidadArcWeb != confidencialidadArcBD)
                                {
                                    regArchBD.Ftearcflagsustentoconf = confidencialidadArcWeb;
                                    listaArchivoUpdate.Add(regArchBD);
                                }
                            }
                        }
                    }
                }

            }

            //Los archivos no se mueven al FileServer hasta que se envie la solicitud al COES
        }

        public void ListarCambioFichaEnvioRequisito(int ftevercodi, List<FtExtEventoReqDTO> listaRequisitoEnvioWeb, bool flagActualizarArchivo,
                                                out List<FtExtEnvioRelreqarchivoDTO> listaRelReqArchivo,
                                                out List<FtExtEnvioArchivoDTO> listaArchivoNuevo, out List<FtExtEnvioArchivoDTO> listaArchivoUpdate)
        {
            //Objetos de bd
            List<FtExtEnvioReqDTO> listaReqBD = ListByVersionesFtExtEnvioReqs(ftevercodi);
            List<FtExtEnvioArchivoDTO> listaArchivoBD = ListByVersionYReqFtExtEnvioArchivos(ftevercodi);

            //Obtener cambios (Dato y archivos)
            listaRelReqArchivo = new List<FtExtEnvioRelreqarchivoDTO>();
            listaArchivoNuevo = new List<FtExtEnvioArchivoDTO>();
            listaArchivoUpdate = new List<FtExtEnvioArchivoDTO>();

            foreach (var reqBD in listaReqBD)
            {
                var listaArcXDatoBD = listaArchivoBD.Where(x => x.Ftereqcodi == reqBD.Ftereqcodi).ToList();
                var regReqWeb = listaRequisitoEnvioWeb.Find(x => x.Fevrqcodi == reqBD.Fevrqcodi);

                if (regReqWeb != null)
                {
                    //Archivos
                    if (flagActualizarArchivo)
                    {
                        List<FtExtEnvioArchivoDTO> listaArchivoWeb = regReqWeb.ListaArchivo ?? new List<FtExtEnvioArchivoDTO>();

                        //nuevos                        
                        foreach (var regArchWeb in listaArchivoWeb)
                        {
                            var regArchBD = listaArcXDatoBD.Find(x => x.Ftearcnombrefisico == regArchWeb.Ftearcnombrefisico);
                            if (regArchBD == null)
                            {
                                regArchWeb.Ftearcestado = 1;
                                regArchWeb.Ftearcflagsustentoconf = regArchWeb.Ftearcflagsustentoconf ?? "N";
                                regArchWeb.Ftearctipo = ConstantesFichaTecnica.TipoArchivoAgenteRequisito;
                                listaRelReqArchivo.Add(new FtExtEnvioRelreqarchivoDTO()
                                {
                                    Ftereqcodi = reqBD.Ftereqcodi,
                                    Archivo = regArchWeb
                                });

                                listaArchivoNuevo.Add(regArchWeb);
                            }
                        }

                        //update
                        foreach (var regArchBD in listaArcXDatoBD)
                        {
                            var regArchWeb = listaArchivoWeb.Find(x => x.Ftearcnombrefisico == regArchBD.Ftearcnombrefisico);
                            if (regArchWeb == null)
                            {
                                regArchBD.Ftearcestado = 0; //eliminado lógico
                                listaArchivoUpdate.Add(regArchBD);
                            }
                            else
                            {
                                //cambio el check de confidencialidad
                                string confidencialidadArcWeb = (regArchWeb.Ftearcflagsustentoconf ?? "").Trim();
                                string confidencialidadArcBD = (regArchBD.Ftearcflagsustentoconf ?? "").Trim();
                                if (confidencialidadArcWeb != confidencialidadArcBD)
                                {
                                    regArchBD.Ftearcflagsustentoconf = confidencialidadArcWeb;
                                    listaArchivoUpdate.Add(regArchBD);
                                }
                            }
                        }
                    }
                }
            }

            //Los archivos no se mueven al FileServer hasta que se envie la solicitud al COES
        }

        private void ActualizarEnvioFormatoFichaExtranetTransaccional(FTObjetoEnvioTransaccional obj)
        {
            FtExtEnvioVersionDTO objVersionLog = obj.LogAutoguardado;
            FtExtEnvioVersionDTO objVersionLogError = obj.LogErrorAutoguardado;
            List<FtExtEnvioDatoDTO> listaDatoUpdate = obj.ListaDatoUpdate;
            List<FtExtEnvioRevisionDTO> listaRevisionUpdate = obj.ListaRevisionUpdate;
            List<FtExtEnvioReldatoarchivoDTO> listaRelDatoArchivo = obj.ListaRelDatoArchivo;
            List<FtExtEnvioRelreqarchivoDTO> listaRelReqArchivo = obj.ListaRelReqArchivo;
            List<FtExtEnvioArchivoDTO> listaArchivoNuevo = obj.ListaArchivoNuevo;
            List<FtExtEnvioArchivoDTO> listaArchivoUpdate = obj.ListaArchivoUpdate;

            //Guardar en bd
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                //correlativos
                int correlativoFtevercodi = FactorySic.GetFtExtEnvioVersionRepository().GetMaxId();
                int correlativoFtearccodi = FactorySic.GetFtExtEnvioArchivoRepository().GetMaxId();
                int correlativoFterdacodi = FactorySic.GetFtExtEnvioReldatoarchivoRepository().GetMaxId();
                int correlativoFtrrvacodi = FactorySic.GetFtExtEnvioRelrevarchivoRepository().GetMaxId();
                int correlativoFterracodi = FactorySic.GetFtExtEnvioRelreqarchivoRepository().GetMaxId();

                //log error de autoguardado
                if (objVersionLogError != null)
                {
                    objVersionLogError.Ftevercodi = correlativoFtevercodi;
                    SaveFtExtEnvioVersion(objVersionLogError, conn, tran);
                    correlativoFtevercodi++;
                }

                //log de autoguardado
                objVersionLog.Ftevercodi = correlativoFtevercodi;
                SaveFtExtEnvioVersion(objVersionLog, conn, tran);
                correlativoFtevercodi++;

                //actualizar los datos
                if (listaDatoUpdate != null)
                {
                    foreach (var reg in listaDatoUpdate)
                    {
                        UpdateFtExtEnvioDato(reg, conn, tran);
                    }
                }

                //nuevos archivos
                if (listaArchivoNuevo != null)
                {
                    foreach (var regArch in listaArchivoNuevo)
                    {
                        regArch.Ftearccodi = correlativoFtearccodi;
                        SaveFtExtEnvioArchivo(regArch, conn, tran);
                        correlativoFtearccodi++;
                    }
                }

                //actualizar archivos
                if (listaArchivoUpdate != null)
                {
                    foreach (var regArch in listaArchivoUpdate)
                    {
                        UpdateFtExtEnvioArchivo(regArch, conn, tran);
                    }
                }

                //archivos de cada dato
                if (listaRelDatoArchivo != null)
                {
                    foreach (var regRelArch in listaRelDatoArchivo)
                    {
                        regRelArch.Ftearccodi = regRelArch.Archivo.Ftearccodi;
                        regRelArch.Fterdacodi = correlativoFterdacodi;
                        SaveFtExtEnvioReldatoarchivo(regRelArch, conn, tran);
                        correlativoFterdacodi++;
                    }
                }

                //archivos de cada requisito
                if (listaRelReqArchivo != null)
                {
                    foreach (var regRelArch in listaRelReqArchivo)
                    {
                        regRelArch.Ftearccodi = regRelArch.Archivo.Ftearccodi;
                        regRelArch.Fterracodi = correlativoFterracodi;
                        SaveFtExtEnvioRelreqarchivo(regRelArch, conn, tran);
                        correlativoFterracodi++;
                    }
                }

                //revision
                if (listaRevisionUpdate != null)
                {
                    foreach (var reg in listaRevisionUpdate)
                    {
                        UpdateFtExtEnvioRevision(reg, conn, tran);

                        //guardo su archivo y la relacion revision-archivo
                        if (reg.ListaArchivosRev != null)
                        {
                            foreach (var rg in reg.ListaArchivosRev)
                            {
                                //nuevos archivos
                                if (rg.Ftearccodi == 0)
                                {
                                    rg.Ftearccodi = correlativoFtearccodi;
                                    SaveFtExtEnvioArchivo(rg, conn, tran);

                                    //guardo relacion
                                    FtExtEnvioRelrevarchivoDTO relAR = new FtExtEnvioRelrevarchivoDTO();
                                    relAR.Ftearccodi = correlativoFtearccodi;
                                    relAR.Ftrevcodi = reg.Ftrevcodi;
                                    relAR.Ftrrvacodi = correlativoFtrrvacodi;
                                    SaveFtExtEnvioRelrevarchivo(relAR, conn, tran);
                                    correlativoFtrrvacodi++;

                                    correlativoFtearccodi++;
                                }
                                else
                                {
                                    //archivos eliminados o cambio de check de confidencial
                                    UpdateFtExtEnvioArchivo(rg, conn, tran);
                                }
                            }
                        }
                    }
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("Ocurrió un error al guardar datos. Error: " + ex.Message);
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        public FTReporteExcel ObtenerFichaTreeXEnvioEqLimpia(int fteeqcodi)
        {
            //formulario del equipo
            FTReporteExcel objRptEq = ObtenerFichaTreeXEnvioEq(fteeqcodi, ConstantesFichaTecnica.EXTRANET);

            FtExtEnvioEqDTO objEnvioEq = GetByIdFtExtEnvioEq(fteeqcodi);
            FtExtEnvioVersionDTO objVersion = GetByIdFtExtEnvioVersion(objEnvioEq.Ftevercodi);
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(objVersion.Ftenvcodi);

            FtExtEnvioEqDTO objEnvioEqTemp = null;

            //Solicitud que todavía no se envia al COES
            if (ConstantesFichaTecnica.EstadoSolicitud == objEnvio.Estenvcodi && objEnvioEq.Ftenvcodi < 0)
            {
                //obtener equipo con información de bd
                FtExtEnvioDTO objEnvioTemp = ClonarEstructuraEnvioFromBDConexIntegModif(objEnvio.Ftenvcodi, objEnvio.FtevercodiTemporalFTVigente, ConstantesFichaTecnica.EstadoSolicitud, -1, "", "");
                objEnvioEqTemp = objEnvioTemp.VersionActual.ListaEquipoEnvio.Find(x => (x.Equicodi > 0 && x.Equicodi == objEnvioEq.Equicodi)
                                                    || (x.Grupocodi > 0 && x.Grupocodi == objEnvioEq.Grupocodi));
            }

            //carpeta Observado
            if (ConstantesFichaTecnica.EstadoObservado == objEnvio.Estenvcodi)
            {
                //obtener equipo con información de la versión solicitud
                FtExtEnvioDTO objEnvioTemp = ClonarEstructuraEnvioFromBDConexIntegModif(objEnvio.Ftenvcodi, objEnvio.FtevercodiOficial, ConstantesFichaTecnica.EstadoSolicitud, -1, "", "");
                objEnvioEqTemp = objEnvioTemp.VersionActual.ListaEquipoEnvio.Find(x => (x.Equicodi > 0 && x.Equicodi == objEnvioEq.Equicodi)
                                                    || (x.Grupocodi > 0 && x.Grupocodi == objEnvioEq.Grupocodi));

                //cuando el equipo fue agregado en la carpeta observado
                if (objEnvioEqTemp == null)
                {
                    FtExtEnvioDTO objEnvioTemp2 = ClonarEstructuraEnvioFromBDConexIntegModif(objEnvio.Ftenvcodi, objEnvio.FtevercodiTemporalFTVigente, ConstantesFichaTecnica.EstadoSolicitud, -1, "", "");
                    objEnvioEqTemp = objEnvioTemp2.VersionActual.ListaEquipoEnvio.Find(x => (x.Equicodi > 0 && x.Equicodi == objEnvioEq.Equicodi)
                                                        || (x.Grupocodi > 0 && x.Grupocodi == objEnvioEq.Grupocodi));
                }
            }

            if (objEnvioEqTemp != null)
            {
                var listaDatoXEqTmp = objEnvioEqTemp.ListaDato;

                //ahora actualizar las celdas de datos de la versión temporal
                var listaTreeData = objRptEq.ListaTreeData;
                //actualizar grilla con bd
                foreach (var objItemFicha in listaTreeData)
                {
                    var objDatoTmp = listaDatoXEqTmp.Find(x => x.Ftitcodi == objItemFicha.Ftitcodi);
                    if (objDatoTmp != null)
                    {
                        objItemFicha.Valor = objDatoTmp.Ftedatvalor;
                        objItemFicha.Itemcomentario = objDatoTmp.Ftedatcomentario != null ? objDatoTmp.Ftedatcomentario : "";
                        objItemFicha.ItemValConfidencial = objDatoTmp.Ftedatflagvalorconf ?? "N";

                        objItemFicha.ListaArchivoValor = objDatoTmp.ListaRelDatoArchivo.Where(x => x.Archivo.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteValorDato).Select(x => x.Archivo).ToList();
                        objItemFicha.ListaArchivoAdjunto = objDatoTmp.ListaRelDatoArchivo.Where(x => x.Archivo.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteSustentoDato).Select(x => x.Archivo).ToList();
                    }
                }
            }

            return objRptEq;
        }

        #endregion

        #region Validaciones filas

        public FTValidacionEnvio ObtenerListadoErroresIntranet(int ftenvcodi, int version)
        {
            //si no es editable entonces no buscar errores
            var objEnvioAct = GetByIdFtExtEnvio(ftenvcodi);
            if (!objEnvioAct.EsEditableIntranet) return new FTValidacionEnvio();

            //evaluar errores por formulario de carga
            FTValidacionEnvio objVal = new FTValidacionEnvio();
            switch (objEnvioAct.Ftenvtipoformato)
            {
                case ConstantesFichaTecnica.FormatoConexIntegModif:
                    objVal = ObtenerListadoErroresIntranetFormatoExtranet(ftenvcodi, version, objEnvioAct.Ftetcodi);
                    break;
                case ConstantesFichaTecnica.FormatoOperacionComercial:
                case ConstantesFichaTecnica.FormatoBajaModoOperacion:
                    objVal = ObtenerListadoErroresIntranetReq(ftenvcodi, version);
                    break;
            }

            return objVal;
        }

        private FTValidacionEnvio ObtenerListadoErroresIntranetFormatoExtranet(int ftenvcodi, int version, int ftetcodi)
        {
            List<FTCeldaError> lstSalidaObs = new List<FTCeldaError>();
            List<FTCeldaError> lstSalidaApr = new List<FTCeldaError>();
            List<FTCeldaError> lstSalidaDng = new List<FTCeldaError>();
            List<FTCeldaError> lstSalidaPa = new List<FTCeldaError>();

            List<int> lParamApr = new List<int>();
            List<int> lParamDng = new List<int>();

            //Equipos del envio
            var listaEnvioEq = ListFtExtEnvioEqsXEnvio(version);
            List<FTDatoRevisionParametrosAEnvio> listaRevEnvio = new List<FTDatoRevisionParametrosAEnvio>();

            foreach (var envioEq in listaEnvioEq)
            {
                //revision por equipo
                var listaRevisionAll = ObtenerDatosRevisionParametrosAFT(envioEq.Fteeqcodi, ConstantesFichaTecnica.INTRANET);
                var listaRevisionParametrosAFT = listaRevisionAll.Where(x => x.FilaRevisable).ToList();
                listaRevEnvio.AddRange(listaRevisionParametrosAFT);

                foreach (var objItem in listaRevisionParametrosAFT)
                {
                    ValidarIntranetFilaAccionObservar(ref lstSalidaObs, objItem, envioEq);
                    ValidarIntranetFilaAccionAprobar(ref lstSalidaApr, objItem, envioEq);
                    ValidarIntranetFilaAccionDenegar(ref lstSalidaDng, objItem, envioEq);
                    ValidarIntranetFilaAccionDenegar(ref lstSalidaPa, objItem, envioEq); //aprobado parcial tiene la misma validación por fila                    
                }

                //para aprobacion parcial verificar por parámetros de los equipos                
                lParamApr.AddRange(listaRevisionAll.Where(x => x.IdValorEstado == "OK" && x.Fitcfgcodi > 0).Select(x => x.Fitcfgcodi.Value).ToList());
                lParamDng.AddRange(listaRevisionAll.Where(x => x.IdValorEstado == "NS" && x.Fitcfgcodi > 0).Select(x => x.Fitcfgcodi.Value).ToList());
            }

            //al menos un item con observado
            if (!listaRevEnvio.Any(x => x.IdValorEstado == "O"))
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Ubicacion = "",
                    NombreEquipo = "",
                    Celda = "",
                    TipoError = "No existe información 'Observada' en las fichas técnicas"
                };

                lstSalidaObs.Add(o1);
            }

            //al menos un item con observado
            if (!listaRevEnvio.Any(x => x.IdValorEstado == "NS"))
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Ubicacion = "",
                    NombreEquipo = "",
                    Celda = "",
                    TipoError = "No existe información 'No Subsanada' en las fichas técnicas"
                };

                lstSalidaDng.Add(o1);
            }

            //al menos 2 equipos para aprobar parcial
            if (ftetcodi == ConstantesFichaTecnica.EtapaModificacion)
            {
                if (!(lParamApr.Any() && lParamDng.Any()))
                {
                    FTCeldaError o1 = new FTCeldaError
                    {
                        Ubicacion = "",
                        NombreEquipo = "",
                        Celda = "",
                        TipoError = "Para aprobar parcialmente un envío se requiere que el envío tenga como mínimo 1 parámetro aprobado y otro denegado."
                    };

                    lstSalidaPa.Add(o1);
                }
            }
            bool tieneParametrosVacios = false;
            if (lParamApr.Any())
            {
                List<FtExtEnvioDatoDTO> listaParamVacios = ListarParametrosVaciosEnvioFT(ftenvcodi, version, ftetcodi, string.Join(",", lParamApr));

                tieneParametrosVacios = listaParamVacios.Any();
            }

            //salidas
            FTValidacionEnvio regVal = new FTValidacionEnvio();
            regVal.LstSalidaObservarEnvio = lstSalidaObs;
            regVal.LstSalidaAprobarEnvio = lstSalidaApr;
            regVal.LstSalidaDenegarEnvio = lstSalidaDng;
            regVal.LstSalidaParcialAprobarEnvio = lstSalidaPa;
            regVal.EnvioParamApr = string.Join(",", lParamApr);
            regVal.EnvioParamDng = string.Join(",", lParamDng);
            regVal.TieneParametrosVacios = tieneParametrosVacios;

            return regVal;
        }

        private FTValidacionEnvio ObtenerListadoErroresIntranetReq(int ftenvcodi, int version)
        {
            List<FTCeldaError> lstSalidaObs = new List<FTCeldaError>();
            List<FTCeldaError> lstSalidaApr = new List<FTCeldaError>();
            List<FTCeldaError> lstSalidaDng = new List<FTCeldaError>();

            //revision por equipo
            List<FTDatoRevisionParametrosAEnvio> listaRevEnvio = ObtenerDatosRevisionContenidoReq(version, ConstantesFichaTecnica.INTRANET);

            foreach (var objItem in listaRevEnvio)
            {
                if (objItem.TieneRevision)
                {
                    ValidarIntranetFilaAccionObservar(ref lstSalidaObs, objItem, null);
                    ValidarIntranetFilaAccionAprobar(ref lstSalidaApr, objItem, null);
                    ValidarIntranetFilaAccionDenegar(ref lstSalidaDng, objItem, null);
                }
            }

            //al menos un item con observado
            if (!listaRevEnvio.Any(x => x.IdValorEstado == "O"))
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Ubicacion = "",
                    NombreEquipo = "",
                    Celda = "",
                    TipoError = "No existe información 'Observada' en las fichas técnicas"
                };

                lstSalidaObs.Add(o1);
            }

            //al menos un item con observado
            if (!listaRevEnvio.Any(x => x.IdValorEstado == "NS"))
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Ubicacion = "",
                    NombreEquipo = "",
                    Celda = "",
                    TipoError = "No existe información 'No Subsanada' en las fichas técnicas"
                };

                lstSalidaDng.Add(o1);
            }

            //salidas
            FTValidacionEnvio regVal = new FTValidacionEnvio();
            regVal.LstSalidaObservarEnvio = lstSalidaObs;
            regVal.LstSalidaAprobarEnvio = lstSalidaApr;
            regVal.LstSalidaDenegarEnvio = lstSalidaDng;

            return regVal;
        }

        private void ValidarIntranetFilaAccionObservar(ref List<FTCeldaError> lstSalida, FTDatoRevisionParametrosAEnvio objItem, FtExtEnvioEqDTO envioEq)
        {
            if (string.IsNullOrEmpty(objItem.IdValorEstado))
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Celda = objItem.Numeral,
                    TipoError = "Requiere cambiar el estado a Conforme u Observado."
                };
                if (envioEq != null)
                {
                    o1.CodigoElemento = envioEq.Idelemento;
                    o1.Ubicacion = envioEq.Areaelemento;
                    o1.NombreEquipo = envioEq.Nombreelemento;
                }
                lstSalida.Add(o1);
            }
            else
            {
                if (objItem.NumcolumnaEditada == 1)
                {
                    if (objItem.IdValorEstado == "O" && string.IsNullOrEmpty(objItem.ValObsCoes))
                    {
                        FTCeldaError o1 = new FTCeldaError
                        {
                            Celda = objItem.Numeral,
                            TipoError = "No ingresó comentario en la columna 'Observación COES'."
                        };
                        if (envioEq != null)
                        {
                            o1.CodigoElemento = envioEq.Idelemento;
                            o1.Ubicacion = envioEq.Areaelemento;
                            o1.NombreEquipo = envioEq.Nombreelemento;
                        }
                        lstSalida.Add(o1);
                    }
                }
            }
        }

        private void ValidarIntranetFilaAccionAprobar(ref List<FTCeldaError> lstSalida, FTDatoRevisionParametrosAEnvio objItem, FtExtEnvioEqDTO envioEq)
        {
            if (objItem.IdValorEstado != "OK")
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Celda = objItem.Numeral,
                    TipoError = "El estado no es conforme."
                };
                if (envioEq != null)
                {
                    o1.CodigoElemento = envioEq.Idelemento;
                    o1.Ubicacion = envioEq.Areaelemento;
                    o1.NombreEquipo = envioEq.Nombreelemento;
                }
                lstSalida.Add(o1);
            }
        }

        private void ValidarExtranetFilaAccionSubsanar(ref List<FTCeldaError> lstSalida, FTDatoRevisionParametrosAEnvio objItem, FtExtEnvioEqDTO envioEq)
        {
            if (objItem.IdValorEstado != "OK" && objItem.IdValorEstado != "S")
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Celda = objItem.Numeral,
                    TipoError = "El estado no es subsanado."
                };
                if (envioEq != null)
                {
                    o1.CodigoElemento = envioEq.Idelemento;
                    o1.Ubicacion = envioEq.Areaelemento;
                    o1.NombreEquipo = envioEq.Nombreelemento;
                }
                lstSalida.Add(o1);
            }
        }

        private void ValidarIntranetFilaAccionDenegar(ref List<FTCeldaError> lstSalida, FTDatoRevisionParametrosAEnvio objItem, FtExtEnvioEqDTO envioEq)
        {
            if (string.IsNullOrEmpty(objItem.IdValorEstado) || (objItem.IdValorEstado == "O" || objItem.IdValorEstado == "S"))
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Celda = objItem.Numeral,
                    TipoError = "No ha sido revisado."
                };
                if (envioEq != null)
                {
                    o1.CodigoElemento = envioEq.Idelemento;
                    o1.Ubicacion = envioEq.Areaelemento;
                    o1.NombreEquipo = envioEq.Nombreelemento;
                }

                lstSalida.Add(o1);
            }
            else
            {
                if (objItem.NumcolumnaEditada == 3)
                {
                    if (objItem.IdValorEstado == "NS" && string.IsNullOrEmpty(objItem.ValRptaCoes))
                    {
                        FTCeldaError o1 = new FTCeldaError
                        {
                            Celda = objItem.Numeral,
                            TipoError = "No ingresó comentario en la columna 'Respuesta Subsanación de Observación (COES)'."
                        };
                        if (envioEq != null)
                        {
                            o1.CodigoElemento = envioEq.Idelemento;
                            o1.Ubicacion = envioEq.Areaelemento;
                            o1.NombreEquipo = envioEq.Nombreelemento;
                        }

                        lstSalida.Add(o1);
                    }
                }
            }
        }

        /// <summary>
        /// Devuelve los errores encontrados en el envio
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <returns></returns>
        public List<FTCeldaError> ObtenerListadoErroresExtranet(int ftenvcodi, int version)
        {
            List<FTCeldaError> lstSalida = new List<FTCeldaError>();

            //si no es editable entonces no buscar errores
            var objEnvioAct = GetByIdFtExtEnvio(ftenvcodi);
            if (!objEnvioAct.EsEditableExtranet && ftenvcodi > 0) return new List<FTCeldaError>();

            //evaluar errores por formulario de carga
            switch (objEnvioAct.Ftenvtipoformato)
            {
                case ConstantesFichaTecnica.FormatoConexIntegModif:
                    lstSalida = ObtenerListadoErroresExtranetFormatoExtranet(ftenvcodi, version);
                    break;
                case ConstantesFichaTecnica.FormatoOperacionComercial:
                case ConstantesFichaTecnica.FormatoBajaModoOperacion:
                    lstSalida = ObtenerListadoErroresExtranetReq(ftenvcodi, version);
                    break;
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve los errores encontrados en el envio
        /// </summary>
        /// <param name="ftenvcodi"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        private List<FTCeldaError> ObtenerListadoErroresExtranetFormatoExtranet(int ftenvcodi, int version)
        {
            List<FTCeldaError> lstSalida = new List<FTCeldaError>();

            List<FTReporteExcel> listaHojas = ListarHojaFormatoConexIntegModif(ConstantesFichaTecnica.PorDefecto.ToString(), ConstantesFichaTecnica.EXTRANET, version);
            List<FtExtEnvioRevisionDTO> lstDatosRev = GetByCriteriaFtExtEnvioRevisionsXVersionYDato(version);

            //Obtengo las propiedades y conceptos presentes
            List<int> idPropiedades = new List<int>();
            List<int> idConceptos = new List<int>();
            foreach (var hj in listaHojas)
            {
                List<int> lstHP = hj.ListaTreeData.Where(x => x.Propcodi != null).Select(x => x.Propcodi.Value).Distinct().ToList();
                if (lstHP.Any())
                    idPropiedades.AddRange(lstHP);

                List<int> lstHC = hj.ListaTreeData.Where(x => x.Concepcodi != null).Select(x => x.Concepcodi.Value).Distinct().ToList();
                if (lstHC.Any())
                    idConceptos.AddRange(lstHC);
            }

            idPropiedades = idPropiedades.Distinct().ToList();
            idConceptos = idConceptos.Distinct().ToList();

            //Obtengo la informacion de propiedades y conceptos
            string strIdsPropiedades = idPropiedades.Any() ? string.Join(",", idPropiedades) : "";
            string strIdsConceptos = idConceptos.Any() ? string.Join(",", idConceptos) : "";
            List<PrConceptoDTO> lstConceptos = strIdsConceptos != "" ? FactorySic.GetPrConceptoRepository().GetByCriteria(strIdsConceptos) : new List<PrConceptoDTO>();
            List<EqPropiedadDTO> lstPropiedad = strIdsPropiedades != "" ? FactorySic.GetEqPropiedadRepository().ListByIds(strIdsPropiedades) : new List<EqPropiedadDTO>();

            //Empiezo la validacion. Recorro cada hoja
            int numEquiposEnviados = 0;
            foreach (var hoja in listaHojas)
            {
                //recorro cada equipos de la hoja
                foreach (var equipo in hoja.ListaEnvioEqXFicha)
                {
                    List<FtFictecItemDTO> lstItems = hoja.ListaAllItems; //parte derecha
                    List<FtFictecItemDTO> treeData = hoja.ListaTreeData.Where(x => x.Fteeqcodi == equipo.Fteeqcodi).ToList(); //parte izqueirda
                    List<FtExtItemcfgDTO> lstConfiguraciones = hoja.ListaItemConfig;

                    List<FtExtEnvioDatoDTO> listaDatoAllXEqBD = GetByCriteriaFtExtEnvioDatos(equipo.Fteeqcodi.ToString());

                    //Verifico cada item
                    foreach (var item in treeData)
                    {
                        int idConfig = item.Fitcfgcodi;
                        FtExtItemcfgDTO objCnfg = lstConfiguraciones.Find(x => x.Fitcfgcodi == idConfig);
                        FtFictecItemDTO objIt = lstItems.Find(x => x.Ftitcodi == item.Ftitcodi);
                        FtExtEnvioDatoDTO envioDatoItem = listaDatoAllXEqBD.Find(x => x.Fitcfgcodi == objCnfg.Fitcfgcodi);
                        FtExtEnvioRevisionDTO filaRev = null;
                        if (envioDatoItem != null) filaRev = lstDatosRev.Find(x => x.Ftedatcodi == envioDatoItem.Ftedatcodi);
                        bool esItemEditable = envioDatoItem.EsFilaEditableExtranet;
                        bool esItemRevisable = envioDatoItem.EsFilaRevisableIntranet;

                        //hallo su propiedad y concepto
                        PrConceptoDTO concepto = item.Concepcodi != null ? lstConceptos.Find(x => x.Concepcodi == item.Concepcodi) : null;
                        EqPropiedadDTO propiedad = item.Propcodi != null ? lstPropiedad.Find(x => x.Propcodi == item.Propcodi) : null;

                        if (objCnfg != null)
                        {
                            if (esItemEditable)
                            {
                                ValidarConfiguracionObligatoriedad(ref lstSalida, equipo, objIt, objCnfg, item); //validamos VALOR OBLIGATORIO
                                ValidarTipoDato(ref lstSalida, equipo, objIt, item, concepto, propiedad);
                            }

                            if (esItemRevisable)
                            {
                                ValidarFilasObservadas(ref lstSalida, equipo, objIt, envioDatoItem, filaRev);
                            }
                        }
                    }
                }

                numEquiposEnviados += hoja.ListaEnvioEqXFicha.Count;
            }

            //obtener cambios 
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(ftenvcodi);
            if (objEnvio.Ftetcodi == ConstantesFichaTecnica.EtapaModificacion && ConstantesFichaTecnica.FormatoConexIntegModif == objEnvio.Ftenvtipoformato)
            {
                var lstCambios = ObtenerListaCambiosFTEnModificacion(ftenvcodi, version, objEnvio.FtevercodiTemporalFTVigente);
                ValidarExistenciaDeCambios(ref lstSalida, lstCambios, numEquiposEnviados);
            }

            return lstSalida;
        }

        private void ValidarExistenciaDeCambios(ref List<FTCeldaError> lstSalida, List<FTParametroModificacion> lstCambios, int numEquiposEnviados)
        {
            if (lstCambios.Any())
            {
                var lstCambiosXEquipo = lstCambios.GroupBy(x => x.Codigo).ToList();
                bool hayEquiposSinCambios = false;
                int numEquiposConCambios = lstCambiosXEquipo.Count();

                if (numEquiposConCambios != numEquiposEnviados)
                {
                    FTCeldaError o1 = new FTCeldaError
                    {
                        CodigoElemento = 0,
                        Ubicacion = "",
                        NombreEquipo = "",
                        Celda = "",
                        Valor = "",
                        TipoError = "No se puede realizar la solicitud, hay equipos que no presentan modificación  de la ficha técnica."
                    };

                    lstSalida.Add(o1);
                }
                else
                {
                    foreach (var item in lstCambiosXEquipo)
                    {
                        int idElemento = item.Key;
                        List<FTParametroModificacion> lstCambiosXE = lstCambios.Where(x => x.Codigo == idElemento).ToList();
                        if (!lstCambiosXE.Any())
                        {
                            hayEquiposSinCambios = true;
                        }
                    }

                    if (hayEquiposSinCambios)
                    {
                        FTCeldaError o1 = new FTCeldaError
                        {
                            CodigoElemento = 0,
                            Ubicacion = "",
                            NombreEquipo = "",
                            Celda = "",
                            Valor = "",
                            TipoError = "No se puede realizar la solicitud, debe existir al menos una modificación  de la ficha técnica en cada equipo"
                        };

                        lstSalida.Add(o1);
                    }
                }
            }
            else
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    CodigoElemento = 0,
                    Ubicacion = "",
                    NombreEquipo = "",
                    Celda = "",
                    Valor = "",
                    TipoError = "No se puede realizar la solicitud, debe existir al menos una modificación  de la ficha técnica en cada equipo."
                };

                lstSalida.Add(o1);
            }
        }

        private void ValidarFilasObservadas(ref List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt,
                                  FtExtEnvioDatoDTO envioDatoItem, FtExtEnvioRevisionDTO filaRev)
        {
            //Si la fila es revisable y tiene revisión
            if (envioDatoItem != null && filaRev != null)
            {
                var valEstado = filaRev.Ftrevestado != null ? filaRev.Ftrevestado.Trim() : "";
                var ValEstadoDesc = ObtenerDescripcionEstadoRev(valEstado);

                if (valEstado.Trim() == ConstantesFichaTecnica.OpcionObservado)
                {
                    FTCeldaError o1 = new FTCeldaError
                    {
                        CodigoElemento = equipo.Idelemento,
                        Ubicacion = equipo.Areaelemento,
                        NombreEquipo = equipo.Nombreelemento,
                        Celda = objIt.Orden,
                        Valor = "",
                        TipoError = "Requiere cambiar el estado a Subsanado"
                    };

                    lstSalida.Add(o1);
                }

            }
        }

        /// <summary>
        /// Valida todos los tipos de datos, incluye sus cantidad de cifras y limites
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void ValidarTipoDato(ref List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {

            string tipoDato = concepto != null ? (concepto.Conceptipo != null ? concepto.Conceptipo.Trim() : "") : (propiedad != null ? (propiedad.Proptipo != null ? propiedad.Proptipo.Trim() : "") : "");

            switch (tipoDato)
            {
                case "DECIMAL": ValidarTipoDecimal(lstSalida, equipo, objIt, item, concepto, propiedad); break;
                case "ENTERO": ValidarTipoEntero(lstSalida, equipo, objIt, item, concepto, propiedad); break;
                case "CARACTER": ValidarTipoCaracter(lstSalida, equipo, objIt, item, concepto, propiedad); break;
                case "FECHA": ValidarTipoFecha(lstSalida, equipo, objIt, item); break;
                case "AÑO": ValidarTipoAnio(lstSalida, equipo, objIt, item); break;
                case "FORMULA": ValidarTipoFormula(lstSalida, equipo, objIt, item, concepto, propiedad); break;
            }

        }

        /// <summary>
        /// Valido valores tipo FORMULA
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void ValidarTipoFormula(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {

            string valor = item.Valor != null ? item.Valor.Trim() : "";

            bool esNumero = decimal.TryParse(valor, out decimal numero);

            if (valor != "")
            {
                if (esNumero)
                {
                    //verifico limites
                    VerificarLimiteInferior(lstSalida, equipo, objIt, item, concepto, propiedad);
                    VerificarLimiteSuperior(lstSalida, equipo, objIt, item, concepto, propiedad);

                }
            }
            //el caso que sea valor == "" se valida con la columna DATO OBLIGATORIO de la configuracion por lo que aqui no se toma en cuenta
        }

        /// <summary>
        /// Valido valores tipo AÑO
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>        
        private void ValidarTipoAnio(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item)
        {

            string valor = item.Valor != null ? item.Valor.Trim() : "";

            bool esEntero = int.TryParse(valor, out int numero);
            bool tieneCaracterPermitido = EsCaracterPermitidoEnCelda(valor);

            if (valor != "")
            {
                if (esEntero)
                {
                    if (valor.Length != 4)
                    {
                        FTCeldaError o1 = new FTCeldaError();
                        o1.CodigoElemento = equipo.Idelemento;
                        o1.Ubicacion = equipo.Areaelemento;
                        o1.NombreEquipo = equipo.Nombreelemento;
                        o1.Celda = objIt.Orden;
                        o1.Valor = valor;
                        o1.TipoError = "Se requiere un valor de tipo 'Año': yyyy";

                        lstSalida.Add(o1);
                    }
                }
                else
                {
                    if (!tieneCaracterPermitido)
                    {
                        FTCeldaError o1 = new FTCeldaError();
                        o1.CodigoElemento = equipo.Idelemento;
                        o1.Ubicacion = equipo.Areaelemento;
                        o1.NombreEquipo = equipo.Nombreelemento;
                        o1.Celda = objIt.Orden;
                        o1.Valor = valor;
                        o1.TipoError = "Se requiere un valor de tipo 'Año': yyyy";

                        lstSalida.Add(o1);
                    }
                }
            }
            //el caso que sea valor == "" se valida con la columna DATO OBLIGATORIO de la configuracion por lo que aqui no se toma en cuenta
        }

        /// <summary>
        /// Valido valores tipo FECHA
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>        
        private void ValidarTipoFecha(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item)
        {

            string valor = item.Valor != null ? item.Valor.Trim() : "";

            bool esFecha = DateTime.TryParseExact(valor, "dd/MM/yyyy", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime dateValue);
            bool tieneCaracterPermitido = EsCaracterPermitidoEnCelda(valor);

            if (valor != "")
            {
                if (esFecha)
                {
                    //no es error
                }
                else
                {
                    if (!tieneCaracterPermitido)
                    {
                        FTCeldaError o1 = new FTCeldaError();
                        o1.CodigoElemento = equipo.Idelemento;
                        o1.Ubicacion = equipo.Areaelemento;
                        o1.NombreEquipo = equipo.Nombreelemento;
                        o1.Celda = objIt.Orden;
                        o1.Valor = valor;
                        o1.TipoError = "Se requiere un valor de tipo 'Fecha': dd/mm/yyyy";

                        lstSalida.Add(o1);
                    }
                }
            }
            //el caso que sea valor == "" se valida con la columna DATO OBLIGATORIO de la configuracion por lo que aqui no se toma en cuenta
        }

        /// <summary>
        /// Valido valores tipo CARACTER
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void ValidarTipoCaracter(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {

            string valor = item.Valor != null ? item.Valor.Trim() : "";

            int? numMaxCaracteres = concepto != null ? (concepto.Conceptipolong1) : (propiedad != null ? (propiedad.Proptipolong1) : null);

            if (valor != "")
            {
                if (numMaxCaracteres != null)
                {
                    if (valor.Length > numMaxCaracteres)
                    {
                        FTCeldaError o1 = new FTCeldaError();
                        o1.CodigoElemento = equipo.Idelemento;
                        o1.Ubicacion = equipo.Areaelemento;
                        o1.NombreEquipo = equipo.Nombreelemento;
                        o1.Celda = objIt.Orden;
                        o1.Valor = valor;
                        o1.TipoError = "La cantidad de caracteres del valor supera al máximo permitido (" + numMaxCaracteres + ")";

                        lstSalida.Add(o1);
                    }
                }
            }
            //el caso que sea valor == "" se valida con la columna DATO OBLIGATORIO de la configuracion por lo que aqui no se toma en cuenta
        }

        /// <summary>
        /// Valido valores tipo ENTERO
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void ValidarTipoEntero(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {

            string valor = item.Valor != null ? item.Valor.Trim() : "";

            bool esEntero = int.TryParse(valor, out int numero);
            bool tieneCaracterPermitido = EsCaracterPermitidoEnCelda(valor);

            if (valor != "")
            {
                //primero verifico si es un numero entero
                if (esEntero)
                {
                    //si es un entero correcto, verifico cantidad de cifras y limites

                    //verifico cantidad de cifras
                    VerificarCantidadCifrasEnteras(lstSalida, equipo, objIt, item, concepto, propiedad);

                    //verifico limites
                    VerificarLimiteInferior(lstSalida, equipo, objIt, item, concepto, propiedad);
                    VerificarLimiteSuperior(lstSalida, equipo, objIt, item, concepto, propiedad);


                }
                else
                {
                    if (!tieneCaracterPermitido)
                    {
                        FTCeldaError o1 = new FTCeldaError();
                        o1.CodigoElemento = equipo.Idelemento;
                        o1.Ubicacion = equipo.Areaelemento;
                        o1.NombreEquipo = equipo.Nombreelemento;
                        o1.Celda = objIt.Orden;
                        o1.Valor = valor;
                        o1.TipoError = "Se requiere un valor de tipo 'Entero'";

                        lstSalida.Add(o1);
                    }
                }
            }
            //el caso que sea valor == "" se valida con la columna DATO OBLIGATORIO de la configuracion por lo que aqui no se toma en cuenta
        }

        /// <summary>
        /// Valido valores tipo DECIMAL
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void ValidarTipoDecimal(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {

            string valor = item.Valor != null ? item.Valor.Trim() : "";

            bool esDecimal = decimal.TryParse(valor, out decimal numero);
            bool tieneCaracterPermitido = EsCaracterPermitidoEnCelda(valor);

            if (valor != "")
            {
                //primero verifico si es un numero decimal
                if (esDecimal)
                {
                    //Verifico si usa comas, dado que esDecimal admite comas y puntos
                    bool contieneComas = valor.Contains(",");
                    if (contieneComas)
                    {
                        FTCeldaError o1 = new FTCeldaError();
                        o1.CodigoElemento = equipo.Idelemento;
                        o1.Ubicacion = equipo.Areaelemento;
                        o1.NombreEquipo = equipo.Nombreelemento;
                        o1.Celda = objIt.Orden;
                        o1.Valor = valor;
                        o1.TipoError = "Se requiere un valor de tipo 'Decimal'";

                        lstSalida.Add(o1);
                    }
                    else //si es un decimal correcto, verifico cantidad de cifras y limites
                    {
                        //verifico cantidad de cifras
                        VerificarCantidadCifrasEnteras(lstSalida, equipo, objIt, item, concepto, propiedad);
                        VerificarCantidadCifrasDecimales(lstSalida, equipo, objIt, item, concepto, propiedad);

                        //verifico limites
                        VerificarLimiteInferior(lstSalida, equipo, objIt, item, concepto, propiedad);
                        VerificarLimiteSuperior(lstSalida, equipo, objIt, item, concepto, propiedad);
                    }

                }
                else
                {
                    if (!tieneCaracterPermitido)
                    {
                        FTCeldaError o1 = new FTCeldaError();
                        o1.CodigoElemento = equipo.Idelemento;
                        o1.Ubicacion = equipo.Areaelemento;
                        o1.NombreEquipo = equipo.Nombreelemento;
                        o1.Celda = objIt.Orden;
                        o1.Valor = valor;
                        o1.TipoError = "Se requiere un valor de tipo 'Decimal'";

                        lstSalida.Add(o1);
                    }
                }
            }
            //el caso que sea valor == "" se valida con la columna DATO OBLIGATORIO de la configuracion por lo que aqui no se toma en cuenta
        }

        /// <summary>
        /// Valida el limite inferior
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void VerificarLimiteInferior(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {
            string valor = item.Valor != null ? item.Valor.Trim() : "";
            decimal.TryParse(valor, out decimal valorDecimal);

            decimal? limiteInferior = concepto != null ? (concepto.Concepliminf) : (propiedad != null ? (propiedad.Propliminf) : null);

            string[] partes = valor.Split('.');
            string parteEntera = partes[0];

            if (limiteInferior != null)
            {
                if (valorDecimal < limiteInferior)
                {
                    FTCeldaError o1 = new FTCeldaError();
                    o1.CodigoElemento = equipo.Idelemento;
                    o1.Ubicacion = equipo.Areaelemento;
                    o1.NombreEquipo = equipo.Nombreelemento;
                    o1.Celda = objIt.Orden;
                    o1.Valor = valor;
                    o1.TipoError = "El valor es menor al límite inferior permitido (" + limiteInferior + ")";

                    lstSalida.Add(o1);
                }
            }
        }

        /// <summary>
        /// Valida el limite superior
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void VerificarLimiteSuperior(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {
            string valor = item.Valor != null ? item.Valor.Trim() : "";
            decimal.TryParse(valor, out decimal valorDecimal);

            decimal? limiteSuperior = concepto != null ? (concepto.Conceplimsup) : (propiedad != null ? (propiedad.Proplimsup) : null);

            string[] partes = valor.Split('.');
            string parteEntera = partes[0];

            if (limiteSuperior != null)
            {
                if (valorDecimal > limiteSuperior)
                {
                    FTCeldaError o1 = new FTCeldaError();
                    o1.CodigoElemento = equipo.Idelemento;
                    o1.Ubicacion = equipo.Areaelemento;
                    o1.NombreEquipo = equipo.Nombreelemento;
                    o1.Celda = objIt.Orden;
                    o1.Valor = valor;
                    o1.TipoError = "El valor es mayor al límite superior permitido (" + limiteSuperior + ")";

                    lstSalida.Add(o1);
                }
            }
        }

        /// <summary>
        /// Valida la cantidad de cifras enteras
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void VerificarCantidadCifrasEnteras(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {
            string valor = item.Valor != null ? item.Valor.Trim() : "";

            int? numCifrasEnteras = concepto != null ? (concepto.Conceptipolong1) : (propiedad != null ? (propiedad.Proptipolong1) : null);

            string[] partes = valor.Split('.');
            string parteEntera = partes[0];

            if (numCifrasEnteras != null)
            {
                if (parteEntera.Length > numCifrasEnteras)
                {
                    FTCeldaError o1 = new FTCeldaError();
                    o1.CodigoElemento = equipo.Idelemento;
                    o1.Ubicacion = equipo.Areaelemento;
                    o1.NombreEquipo = equipo.Nombreelemento;
                    o1.Celda = objIt.Orden;
                    o1.Valor = valor;
                    o1.TipoError = "La cantidad de cifras enteras del valor supera al máximo permitido (" + numCifrasEnteras + ")";

                    lstSalida.Add(o1);
                }
            }
        }

        /// <summary>
        /// Valida la cantidad de cifras decimales
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="item"></param>
        /// <param name="concepto"></param>
        /// <param name="propiedad"></param>
        private void VerificarCantidadCifrasDecimales(List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtFictecItemDTO item, PrConceptoDTO concepto, EqPropiedadDTO propiedad)
        {
            string valor = item.Valor != null ? item.Valor.Trim() : "";

            int? numCifrasDecimales = concepto != null ? (concepto.Conceptipolong2) : (propiedad != null ? (propiedad.Proptipolong2) : null);
            string[] partes = valor.Split('.');
            int? parteDecimal;
            if (partes.Length > 1)
            {
                int.TryParse(partes[1], out int parteDec);
                parteDecimal = parteDec;
            }
            else
                parteDecimal = null;

            if (numCifrasDecimales != null)
            {
                if (parteDecimal != null)
                {
                    if (parteDecimal.ToString().Length > numCifrasDecimales)
                    {
                        FTCeldaError o1 = new FTCeldaError();
                        o1.CodigoElemento = equipo.Idelemento;
                        o1.Ubicacion = equipo.Areaelemento;
                        o1.NombreEquipo = equipo.Nombreelemento;
                        o1.Celda = objIt.Orden;
                        o1.Valor = valor;
                        o1.TipoError = "La cantidad de cifras decimales del valor supera al máximo permitido (" + numCifrasDecimales + ")";

                        lstSalida.Add(o1);
                    }
                }
            }
        }

        private bool EsCaracterPermitidoEnCelda(string valorCelda)
        {
            //el guión o menos es permitido que el agente lo registre para indicar que todavía no se tiene valor.
            return valorCelda == "-";
        }

        /// <summary>
        /// Verifico la obligatoriedad del valor
        /// </summary>
        /// <param name="lstSalida"></param>
        /// <param name="equipo"></param>
        /// <param name="objIt"></param>
        /// <param name="objCnfg"></param>
        /// <param name="item"></param>
        private void ValidarConfiguracionObligatoriedad(ref List<FTCeldaError> lstSalida, FtExtEnvioEqDTO equipo, FtFictecItemDTO objIt, FtExtItemcfgDTO objCnfg, FtFictecItemDTO item)
        {
            string valor = (item.Valor ?? "").Trim();
            string comentario = (item.Itemcomentario ?? "").Trim();
            int totalArchivoValor = item.ListaArchivoValor != null ? item.ListaArchivoValor.Count : 0;
            int totalArchivoAdjunto = item.ListaArchivoAdjunto != null ? item.ListaArchivoAdjunto.Count : 0;

            if (objCnfg.Fitcfgflagvalorobligatorio == ConstantesFichaTecnica.Si)
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    CodigoElemento = equipo.Idelemento,
                    Ubicacion = equipo.Areaelemento,
                    NombreEquipo = equipo.Nombreelemento,
                    Celda = objIt.Orden,
                    Valor = valor,
                    TipoError = "Requiere ingresar valor. Campo obligatorio."
                };

                if (objIt.EsArchivo) //si es archivo
                {
                    if (totalArchivoValor == 0)
                    {
                        lstSalida.Add(o1);
                    }
                }
                else
                {
                    if (valor == "")
                    {
                        lstSalida.Add(o1);
                    }
                }
            }

            if (objCnfg.Fitcfgflagsustentoobligatorio == ConstantesFichaTecnica.Si)
            {
                if (totalArchivoAdjunto == 0)
                {
                    FTCeldaError o1 = new FTCeldaError
                    {
                        CodigoElemento = equipo.Idelemento,
                        Ubicacion = equipo.Areaelemento,
                        NombreEquipo = equipo.Nombreelemento,
                        Celda = objIt.Orden,
                        Valor = "",
                        TipoError = "Requiere ingresar sustento. Campo obligatorio."
                    };

                    lstSalida.Add(o1);
                }
            }
        }

        private List<FTCeldaError> ObtenerListadoErroresExtranetReq(int ftenvcodi, int ftevercodi)
        {
            FtExtEnvioDTO objEnvioAct = GetByIdFtExtEnvio(ftenvcodi);
            List<FtExtEventoReqDTO> listaReq = ListarRequisitoXEnvioVersion(objEnvioAct.Ftevcodi ?? 0, ftevercodi, ConstantesFichaTecnica.EXTRANET);
            List<FTDatoRevisionParametrosAEnvio> listaRevEnvio = new List<FTDatoRevisionParametrosAEnvio>();
            if (objEnvioAct.Estenvcodi != ConstantesFichaTecnica.EstadoSolicitud) listaRevEnvio = ObtenerDatosRevisionContenidoReq(ftevercodi, ConstantesFichaTecnica.EXTRANET);

            var lstSalida = ValidarErroresExtranetReq(objEnvioAct, listaReq, listaRevEnvio);

            return lstSalida;
        }

        public List<FTCeldaError> ValidarErroresExtranetReq(FtExtEnvioDTO objEnvioAct, List<FtExtEventoReqDTO> listaReq, List<FTDatoRevisionParametrosAEnvio> listaRevEnvio)
        {
            List<FTCeldaError> lstSalida = new List<FTCeldaError>();

            //validar cada requisito
            if (objEnvioAct.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud)
            {
                List<FtExtEnvioArchivoDTO> listaArchivo = new List<FtExtEnvioArchivoDTO>();
                foreach (var objReq in listaReq)
                {
                    if (objReq.EsFilaEditableExtranet)
                    {
                        ValidarExtranetFilaRequisito(ref lstSalida, objReq);
                    }
                    listaArchivo.AddRange(objReq.ListaArchivo ?? new List<FtExtEnvioArchivoDTO>());
                }

                //siempre debe haber al menos un archivo para realizar la solicitud
                if (!listaArchivo.Any())
                {
                    FTCeldaError o1 = new FTCeldaError
                    {
                        Valor = "",
                        TipoError = "No existe ningun archivo cargado."
                    };

                    lstSalida.Add(o1);
                }
            }
            else
            {
                foreach (var objReq in listaRevEnvio)
                {
                    if (objReq.TieneRevision)
                    {
                        ValidarExtranetFilaAccionSubsanar(ref lstSalida, objReq, null);
                    }
                }
            }

            return lstSalida;
        }

        private void ValidarExtranetFilaRequisito(ref List<FTCeldaError> lstSalida, FtExtEventoReqDTO objReq)
        {
            if (!objReq.ListaArchivo.Any())
            {
                FTCeldaError o1 = new FTCeldaError
                {
                    Celda = objReq.Fevrqliteral,
                    TipoError = "No ha cargado archivo"
                };

                lstSalida.Add(o1);
            }
        }

        #endregion

        #region Habilitar ediciión quipos

        public void ActualizarEdiciónEquipos(int idEnvio, string flag)
        {
            try
            {
                FtExtEnvioDTO envio = GetByIdFtExtEnvio(idEnvio);
                envio.Ftenvflaghabeq = flag;

                IDbConnection conn = null;
                DbTransaction tran = null;
                conn = FactorySic.GetFtExtEnvioRepository().BeginConnection();
                tran = FactorySic.GetFtExtEnvioRepository().StartTransaction(conn);

                UpdateFtExtEnvio(envio, conn, tran);

                tran.Commit();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }
        #endregion

        #endregion

        #region Envío de Formato Intranet para Conexión, Integración y Modificación de Ficha Técnica

        public List<FTReporteExcel> ListarHojaFormatoConexIntegModifConRevision(int ftenvcodi, string fteeqcodis, string fteeqcodisLimpiar, int ambiente, int versionEnvio,
                                        string faremcodis, int idAreaRevision, bool esHistorico, bool esAdmin)
        {
            //Equipos seleccionados de la última versión del envio
            List<int> listaFteeqcodi = fteeqcodis.Split(',').Select(x => int.Parse(x)).ToList();
            List<FtExtEnvioEqDTO> listaEnvioEq = ListFtExtEnvioEqsXEnvio(versionEnvio);
            FtExtEnvioDTO envio = GetByIdFtExtEnvio(ftenvcodi);
            if (ConstantesAppServicio.ParametroDefecto != fteeqcodis)
                listaEnvioEq = listaEnvioEq.Where(x => listaFteeqcodi.Contains(x.Fteeqcodi)).ToList();

            //Datos de equipo seleccionado
            string strEnviosEq = string.Join(",", listaEnvioEq.Select(x => x.Fteeqcodi));
            List<FtExtEnvioDatoDTO> listaDatoAllXEq = GetByCriteriaFtExtEnvioDatos(strEnviosEq);

            //Archivos de los datos
            List<FtExtEnvioArchivoDTO> listaArchivoXDato = ListByVersionYDatoFtExtEnvioArchivos(listaEnvioEq[0].Ftevercodi).ToList();

            //revision de los datos
            List<FtExtEnvioRevisionDTO> listaRevisionXDato = GetByCriteriaFtExtEnvioRevisionsXVersionYDato(listaEnvioEq[0].Ftevercodi);

            //Lista de fichas
            List<FtExtFormatoDTO> listaRelFichaEtapa = GetByCriteriaFtExtFormatos();
            List<int> listaFtfmtcodi = listaEnvioEq.Where(x => x.Ftfmtcodi > 0).Select(x => x.Ftfmtcodi.Value).Distinct().ToList();
            listaRelFichaEtapa = listaRelFichaEtapa.Where(x => listaFtfmtcodi.Contains(x.Ftfmtcodi)).ToList();

            //si el equipo ya estaba guardado y el usuario NO seleccionó la opción "precargar"
            //entonces mantener la versión limpia
            List<int> listaFteeqcodis = (!string.IsNullOrEmpty(fteeqcodisLimpiar)) ? fteeqcodisLimpiar.Split(',').Select(x => int.Parse(x)).ToList() : new List<int>();

            //
            List<FTReporteExcel> listaHoja = new List<FTReporteExcel>();

            foreach (var item in listaEnvioEq)
            {
                var relFicha = listaRelFichaEtapa.Find(x => x.Ftfmtcodi == item.Ftfmtcodi);

                List<int> listaIdElemento = new List<int>();
                if (item.Catecodi > 0) listaIdElemento.Add(item.Grupocodi.Value);
                if (item.Famcodi > 0) listaIdElemento.Add(item.Equicodi.Value);

                List<FtExtEnvioEqDTO> envioEq = new List<FtExtEnvioEqDTO>();
                envioEq.Add(item);
                FTReporteExcel objRpt = GetReporteDatosExcelFormatoConexIntegModiRevision(relFicha.Fteqcodi, item.Ftfmtcodi.Value, envioEq,
                                listaIdElemento, listaDatoAllXEq, listaArchivoXDato, listaRevisionXDato, envio, versionEnvio, ambiente, faremcodis, idAreaRevision, esHistorico, esAdmin);

                if (listaFteeqcodis.Contains(item.Fteeqcodi))
                {
                    var repExcelLimpio = ObtenerFichaTreeXEnvioEqLimpia(item.Fteeqcodi);

                    objRpt.ListaTreeData = repExcelLimpio.ListaTreeData;
                }

                objRpt.Fteeqcodi = item.Fteeqcodi;
                objRpt.Equicodi = item.Equicodi;
                objRpt.Grupocodi = item.Grupocodi;
                objRpt.IdAreaRevision = idAreaRevision;

                listaHoja.Add(objRpt);
            }

            return listaHoja;
        }

        private FTReporteExcel GetReporteDatosExcelFormatoConexIntegModiRevision(int fteqcodi, int ftfmtcodi,
                             List<FtExtEnvioEqDTO> listaEnvioEqXFicha, List<int> listaIdElemento, List<FtExtEnvioDatoDTO> listaDatoAllXEq,
                             List<FtExtEnvioArchivoDTO> listaArchivoXDato, List<FtExtEnvioRevisionDTO> listaRevisionXDato, FtExtEnvioDTO envio, int versionEnvio, int ambiente, string faremcodis, int idAreaRevision, bool esHistorico, bool esAdmin)
        {
            FtFictecXTipoEquipoDTO fichaTecnica = GetFichaTecnica(fteqcodi);

            string nombreSheet = "";
            if (fichaTecnica.Famcodi > 0)
            {
                switch (fichaTecnica.Famcodi)
                {
                    case 36: nombreSheet = "COMPONENTE CENTRAL SOLAR"; break;
                    case 38: nombreSheet = "COMPONENTE CENTRAL EÓLICA"; break;
                    case 3: nombreSheet = "UNIDAD TERMOELÉCTRICA"; break;
                    case 2: nombreSheet = "UNIDAD HIDROELÉCTRICA"; break;
                    default: nombreSheet = fichaTecnica.Famnomb.Trim(); break;
                }
            }
            else
            {
                switch (fichaTecnica.Catecodi)
                {
                    case 2: nombreSheet = "MODOS DE OPERACIÓN"; break;
                    default: nombreSheet = fichaTecnica.Catenomb.Trim(); break;
                }
            }
            if (nombreSheet.Length > 24) nombreSheet = nombreSheet.Substring(0, 24);
            nombreSheet += "_" + listaIdElemento.First(); //el codigo son máximo 5 digitos

            //Obtengo todos los registros de configuracion asociados a treeData
            List<FtExtItemcfgDTO> lstConfiguraciones = FactorySic.GetFtExtItemcfgRepository().ListarPorFormato(ftfmtcodi);

            //Estructura arbol
            List<FtFictecItemDTO> listaTreeItems, listaAllItems;
            List<TreeItemFichaTecnica> listaItemsJson;

            FTFiltroReporteExcel objFiltro1 = GetFichaYDatosXEquipoOModo(fichaTecnica.Fteqcodi, 0, false, ambiente, DateTime.Today);
            ListarTreeItemsFichaTecnica(objFiltro1, out listaAllItems, out listaTreeItems, out listaItemsJson);
            foreach (var regItem in listaAllItems)
            {
                var objCfgItem = lstConfiguraciones.Find(x => x.Ftitcodi == regItem.Ftitcodi);
                if (objCfgItem != null)
                {
                    regItem.Fitcfginstructivo = objCfgItem.Fitcfginstructivo;
                    regItem.FtitcodiDependiente = GetFtitcodiDependiente(regItem, objCfgItem, listaAllItems);
                }
            }

            //Data
            List<FtFictecItemDTO> listaTreeData = new List<FtFictecItemDTO>();
            List<DatoRevisionAreasFT> listaRevisionAreasFT = new List<DatoRevisionAreasFT>();
            foreach (var objEnvioEq in listaEnvioEqXFicha)
            {
                int idElemento = objEnvioEq.Equicodi > 0 ? objEnvioEq.Equicodi.Value : objEnvioEq.Grupocodi.Value;
                FTFiltroReporteExcel objFiltro2 = GetFichaYDatosXEquipoOModo(fteqcodi, idElemento, false, ambiente, DateTime.Today);

                //obtener estructura
                ListarTreeItemsFichaTecnica(objFiltro2, out List<FtFictecItemDTO> listaAllItemsTmp, out List<FtFictecItemDTO> listaTreeItemsTmp, out List<TreeItemFichaTecnica> listaItemsJsonTmp);

                //actualizar grilla con bd
                List<FtExtEnvioDatoDTO> listaDatoXEq = listaDatoAllXEq.Where(x => x.Fteeqcodi == objEnvioEq.Fteeqcodi).ToList();
                List<FtExtEnvioRevisionDTO> lstRevXEq = listaRevisionXDato.Where(x => x.Fteeqcodi == objEnvioEq.Fteeqcodi).ToList();

                //>>>>>>>>>
                ListarRelaciones(listaAllItemsTmp);

                List<DatoRevisionAreasFT> listaderivacion = new List<DatoRevisionAreasFT>();

                // la sección derivación no se leerá si es para importación(pantalla de administrador de ficha)  o extranet
                if (faremcodis.Length > 0)
                {
                    if (idAreaRevision == 0) //para el caso de envios en pantalla de administrador de ficha (varias áreas y agruparlas)
                        listaderivacion = ObtenerDatosRevisionAreasCOESFT(objEnvioEq.Fteeqcodi, faremcodis);
                    else
                        listaderivacion = ObtenerDatosRevisionAreasFT(objEnvioEq.Fteeqcodi, faremcodis, "", idAreaRevision, "");
                }

                foreach (var objItemFicha in listaAllItemsTmp)
                {
                    var objDato = listaDatoXEq.Find(x => x.Ftitcodi == objItemFicha.Ftitcodi);
                    var objCfgItem = lstConfiguraciones.Find(x => x.Ftitcodi == objItemFicha.Ftitcodi);

                    objItemFicha.EnvioRevision = new FtExtEnvioRevisionDTO();
                    objItemFicha.EnvioRevisionAreas = new FtExtEnvioRevareaDTO();
                    if (objDato != null)
                    {
                        objItemFicha.Valor = objDato.Ftedatvalor;
                        objItemFicha.Itemcomentario = objDato.Ftedatcomentario;
                        //objItemFicha.ItemSustento = objDato.Ftedatflagsustentoconf;
                        //objItemFicha.ItemValConfidencial = objDato.Ftedatflagvalorconf ?? "N";
                        objItemFicha.Ftedatcodi = objDato.Ftedatcodi;
                        objItemFicha.Fitcfgcodi = objDato.Fitcfgcodi;

                        if (objCfgItem != null)
                        {
                            if (objCfgItem.Fitcfgflagvalorconf == "S")
                                objItemFicha.ItemValConfidencial = (objDato.Ftedatflagvalorconf ?? "").Trim();
                        }

                        objItemFicha.Fteeqcodi = objDato.Fteeqcodi;
                        objItemFicha.ListaArchivoValor = listaArchivoXDato.Where(x => x.Ftedatcodi == objDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteValorDato).ToList();
                        objItemFicha.ListaArchivoAdjunto = listaArchivoXDato.Where(x => x.Ftedatcodi == objDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteSustentoDato).ToList();

                        objItemFicha.Estenvcodi = envio.Estenvcodi;

                        objItemFicha.EsFilaEditableExtranet = objDato.EsFilaEditableExtranet; //para lectura en extranet

                        if (ambiente == ConstantesFichaTecnica.INTRANET && objItemFicha.EsArchivo && objItemFicha.ListaArchivoValor.Any())
                        {
                            var urlConfig = FichaTecnicaAppServicio.GetUrlIntranet();
                            string urlConfidencial = "";
                            string urlNoCondifencial = "";
                            string urlValor = "";
                            var confidencialesValor = objItemFicha.ListaArchivoValor.Where(x => x.Ftearcflagsustentoconf == "S").ToList();
                            var noConfidencialesValor = objItemFicha.ListaArchivoValor.Where(x => x.Ftearcflagsustentoconf == "N").ToList();

                            if (confidencialesValor.Any())
                            {
                                objItemFicha.ItemValConfidencial = "S";
                                urlConfidencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtValorConf?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);

                                if (noConfidencialesValor.Any())
                                    urlNoCondifencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtValor?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);
                            }
                            else
                            {
                                if (noConfidencialesValor.Any())
                                {
                                    objItemFicha.ItemValConfidencial = "N";
                                    urlNoCondifencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtValor?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);
                                }
                            }

                            urlValor = urlConfidencial + " " + urlNoCondifencial;
                            objItemFicha.Valor = urlValor;
                        }

                        FtExtEnvioRevisionDTO fila = lstRevXEq.Find(x => x.Ftedatcodi == objDato.Ftedatcodi);

                        objItemFicha.Ambiente = ambiente;
                        if (fila != null)
                        {
                            //objItemFicha.Ambiente = ambiente;
                            objItemFicha.EnvioRevision = fila;
                            objItemFicha.Ftetcodi = envio.Ftetcodi;

                            objItemFicha.EsFilaRevisableIntranet = objDato.EsFilaRevisableIntranet; //para lectura en intranet
                        }

                        if (ambiente == ConstantesFichaTecnica.INTRANET && objItemFicha.ListaArchivoAdjunto.Any())
                        {
                            var urlConfig = FichaTecnicaAppServicio.GetUrlIntranet();
                            string urlConfidencial = "";
                            string urlNoCondifencial = "";
                            string urlSustento = "";
                            var confidenciales = objItemFicha.ListaArchivoAdjunto.Where(x => x.Ftearcflagsustentoconf == "S").ToList();
                            var noConfidenciales = objItemFicha.ListaArchivoAdjunto.Where(x => x.Ftearcflagsustentoconf == "N").ToList();

                            if (confidenciales.Any())
                            {
                                objItemFicha.ItemSustentoConfidencial = "S";
                                urlConfidencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtSustentoConf?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);

                                if (noConfidenciales.Any())
                                    urlNoCondifencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtSustento?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);
                            }
                            else
                            {
                                if (noConfidenciales.Any())
                                {
                                    objItemFicha.ItemSustentoConfidencial = "N";
                                    urlNoCondifencial = urlConfig + string.Format("Equipamiento/FTAdministrador/DescargarFmtExtSustento?idEnvio={0}&ftitcodi={1}&codEquipo={2}", objEnvioEq.Ftenvcodi, objItemFicha.Ftitcodi, objItemFicha.Fteeqcodi);
                                }
                            }

                            urlSustento = urlConfidencial + " " + urlNoCondifencial;
                            objItemFicha.UrlItemSustento = urlSustento;
                        }
                    }
                }

                listaTreeData.AddRange(listaAllItemsTmp);
                //>>>
                listaRevisionAreasFT.AddRange(listaderivacion);
            }

            //Ficha
            List<FtFictecItemDTO> listaDataXNivel = listaTreeItems.Where(x => x.Nivel == 1).ToList();
            int colspan = ProfundidadHorizontalRecursivo(listaDataXNivel);
            int colIniData = colspan + 1;
            int rowIniItem = 7;

            FTReporteExcel objRpt = new FTReporteExcel();
            objRpt.FichaTecnica = fichaTecnica;
            objRpt.Ambiente = ConstantesFichaTecnica.INTRANET;
            objRpt.NombreSheet = nombreSheet;

            objRpt.IncluirColumnaComentario = lstConfiguraciones.Any(x => x.Fitcfgflagcomentario == "S");
            objRpt.IncluirColumnaInstructivo = false;

            //sustento
            if (ambiente == ConstantesFichaTecnica.INTRANET)
            {
                objRpt.IncluirColumnaSustento = lstConfiguraciones.Any(x => x.Fitcfgflagsustento == "S"); //TODO solo para Intranet

                //para histórico
                if (esHistorico)
                {
                    objRpt.EsHistorico = true;
                    objRpt.EsAdmin = esAdmin;
                    objRpt.IncluirColumnaComentario = true;
                    objRpt.IncluirColumnaSustento = true;
                }
            }

            objRpt.IncluirColumnaProcesoRevision = false;
            objRpt.IncluirColumnaProcesoDerivacion = false;
            if (ambiente == ConstantesFichaTecnica.EXTRANET)
            {
                if (envio.Estenvcodi == ConstantesFichaTecnica.EstadoObservado || envio.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs
                    || envio.Estenvcodi == ConstantesFichaTecnica.EstadoAprobado || envio.Estenvcodi == ConstantesFichaTecnica.EstadoAprobadoParcialmente
                    || envio.Estenvcodi == ConstantesFichaTecnica.EstadoDesaprobado)
                    objRpt.IncluirColumnaProcesoRevision = true;
            }
            else
            {
                objRpt.IncluirColumnaProcesoRevision = true;
                objRpt.IncluirColumnaProcesoDerivacion = true;
            }

            objRpt.ListaIdElemento = listaIdElemento;
            objRpt.ListaEnvioEqXFicha = listaEnvioEqXFicha;

            objRpt.ListaTreeItems = listaTreeItems;
            objRpt.ListaAllItems = listaAllItems; //parte izquierda
            objRpt.ListaTreeData = listaTreeData; // parte derecha (contiene FITCFGCODI)
            objRpt.ListaDerivacion = listaRevisionAreasFT;
            objRpt.ColIniData = colIniData;
            objRpt.RowIniItem = rowIniItem;

            objRpt.ListaItemConfig = lstConfiguraciones;

            objRpt.Fteeqcodi = 0;
            objRpt.Ftenvcodi = envio.Ftenvcodi;
            objRpt.Ftevercodi = versionEnvio;

            return objRpt;
        }

        private string GenerarTextoSinHtml(string html)
        {
            string formatedo = "";

            var htmlSinEtiquetas = Regex.Replace(html, @"<[^>]+>|&nbsp;", " ").Trim();
            formatedo = System.Net.WebUtility.HtmlDecode(htmlSinEtiquetas);
            return formatedo;
        }

        public void GenerarFormatoRevisionContenido(string rutaCarpeta, string pathLogo, int ftenvcodi, int tipo, string faremcodis, int idAreaRevision, out string fileName)
        {
            FTRevisionContenidoExcel reporteHoja = ListarHojaFormatoRevisionContenido(ftenvcodi, tipo, faremcodis, idAreaRevision, false, false);

            //Exportación a Excel
            DateTime fechaConsulta = DateTime.Now;
            fileName = string.Format("RevisiónContenido_{0}_{1}.xlsx", ftenvcodi.ToString(), fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaYMDHora));

            string file = rutaCarpeta + fileName;
            FileInfo newFile = new FileInfo(file);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                reporteHoja.FechaConsulta = fechaConsulta;

                if (tipo == ConstantesFichaTecnica.FormatoOperacionComercial)
                    GenerarArchivoExcelRevisionContenido(xlPackage, pathLogo, reporteHoja, idAreaRevision);
                else
                    GenerarArchivoExcelRevisionContenidoBajaMO(xlPackage, pathLogo, reporteHoja, idAreaRevision);

                xlPackage.Save();
            }
        }

        public FTRevisionContenidoExcel ListarHojaFormatoRevisionContenido(int codigoEnvio, int tipo, string faremcodis, int idAreaRevision, bool esHistorico, bool esAdmin)
        {
            FTRevisionContenidoExcel reporte = new FTRevisionContenidoExcel();

            //envio realizado
            FtExtEnvioDTO objEnvio = GetByIdFtExtEnvio(codigoEnvio);
            List<FtExtEnvioEqDTO> listaEquipoEnvio = GetByCriteriaFtExtEnvioEqs(objEnvio.VersionActual.Ftevercodi.ToString());

            if (tipo == ConstantesFichaTecnica.FormatoOperacionComercial || tipo == ConstantesFichaTecnica.FormatoBajaModoOperacion)
            {
                string urlDescarga1 = tipo == ConstantesFichaTecnica.FormatoOperacionComercial ? "DescargarOpComSustentoConf" : "DescargarBajaMopSustentoConf";
                string urlDescarga2 = tipo == ConstantesFichaTecnica.FormatoOperacionComercial ? "DescargarOpComSustento" : "DescargarBajaMopSustento";

                int versionEnv = 0; //pongo cero xq solo se usa en intranet y para que tome VersionActual
                FtExtEventoDTO objEventoVigente = GetByIdFtExtEvento(objEnvio.Ftevcodi ?? 0);
                //List<FtExtEventoReqDTO> listaReq = GetByCriteriaFtExtEventoReqsxIdFTExtEvento(objEnvio.Ftevcodi ?? 0);

                versionEnv = GetVersionSegunAmbiente(objEnvio, ConstantesFichaTecnica.INTRANET);
                var listaReqEvento = ListarRequisitoXEnvioVersion(objEnvio.Ftevcodi ?? 0, versionEnv, ConstantesFichaTecnica.INTRANET);

                reporte.lstRevision = ObtenerDatosRevisionContenidoReq(versionEnv, ConstantesFichaTecnica.INTRANET);
                //
                List<DatoRevisionAreasContenido> listaderivacion = new List<DatoRevisionAreasContenido>();
                if (tipo == ConstantesFichaTecnica.FormatoOperacionComercial || tipo == ConstantesFichaTecnica.FormatoBajaModoOperacion)
                {
                    if (faremcodis.Length > 0)
                    {
                        if (idAreaRevision == 0) //para el caso de envios en pantalla de administrador de ficha (varias áreas y agruparlas)
                            listaderivacion = ObtenerDatosRevisionAreasContenidoCOESFT(versionEnv, faremcodis);
                        else
                            listaderivacion = ObtenerDatosRevisionAreasContenido(versionEnv, faremcodis, "", idAreaRevision, "");
                    }
                }
                reporte.ListaDerivacion = listaderivacion;
                //
                reporte.Evento = objEventoVigente;
                reporte.ListaReqEvento = listaReqEvento;

                foreach (var seccion in reporte.ListaReqEvento)
                {

                    if (seccion.ListaArchivo.Any())
                    {
                        var urlConfig = FichaTecnicaAppServicio.GetUrlIntranet();
                        string urlConfidencial = "";
                        string urlNoCondifencial = "";
                        string urlSustento = "";
                        var confidenciales = seccion.ListaArchivo.Where(x => x.Ftearcflagsustentoconf == "S").ToList();
                        var noConfidenciales = seccion.ListaArchivo.Where(x => x.Ftearcflagsustentoconf == "N").ToList();

                        if (confidenciales.Any())
                        {
                            seccion.ItemSustentoConfidencial = "S";
                            urlConfidencial = urlConfig + string.Format("Equipamiento/FTAdministrador/{2}?idEnvio={0}&idReq={1}", codigoEnvio, seccion.Fevrqcodi, urlDescarga1);

                            if (noConfidenciales.Any())
                                urlNoCondifencial = urlConfig + string.Format("Equipamiento/FTAdministrador/{2}?idEnvio={0}&idReq={1}", codigoEnvio, seccion.Fevrqcodi, urlDescarga2);
                        }
                        else
                        {
                            if (noConfidenciales.Any())
                            {
                                seccion.ItemSustentoConfidencial = "N";
                                urlNoCondifencial = urlConfig + string.Format("Equipamiento/FTAdministrador/{2}?idEnvio={0}&idReq={1}", codigoEnvio, seccion.Fevrqcodi, urlDescarga2);
                            }
                        }

                        urlSustento = urlConfidencial + " " + urlNoCondifencial;
                        seccion.UrlSustento = urlSustento;
                    }
                }

            }

            //para histórico
            if (esHistorico)
            {
                reporte.EsHistorico = true;
                reporte.EsAdmin = esAdmin;
            }

            reporte.Emprcodi = objEnvio.Emprcodi;
            reporte.Emprnomb = objEnvio.Emprnomb;
            reporte.Ftetcodi = objEnvio.Ftetcodi;
            reporte.Ftetnombre = objEnvio.Ftetnombre;
            reporte.Ftprycodi = objEnvio.Ftprycodi ?? 0;
            reporte.Ftprynombre = objEnvio.Ftprynombre;

            reporte.NombreEquipos = string.Join(", ", listaEquipoEnvio.Select(x => string.Format("{0} ({1})", x.Nombreelemento != null ? x.Nombreelemento.Trim() : "", x.Areaelemento != null ? x.Areaelemento.Trim() : "")));

            return reporte;
        }

        private void GenerarArchivoExcelRevisionContenido(ExcelPackage xlPackage, string pathLogo, FTRevisionContenidoExcel objRpt, int idarea)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();

            string nombreArea = "REVISIÓN ÁREAS COES";
            if (idarea > 0)
            {
                var areaDesc = GetByIdFtExtCorreoarea(idarea).Faremnombre;
                nombreArea = "REVISIÓN " + areaDesc.ToUpper();
            }

            string nameWS = "REPORTE";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            //logo
            UtilExcel.AddImageLocal(ws, 0, 0, pathLogo, 120, 70);
            ws.Protection.IsProtected = true;

            int row = 5;
            int column = 2;

            #region  Filtros y Cabecera

            int columnIniFiltro = column;
            int rowIniFiltro = row;

            int rowIniEmpresa = rowIniFiltro + 1;
            int rowIniProyecto = rowIniEmpresa + 1;
            int rowIniEqsProyecto = rowIniProyecto + 1;
            int rowIniFechaConsulta = rowIniEqsProyecto + 1;

            ws.Cells[rowIniEmpresa, columnIniFiltro].Value = "Empresa:";
            ws.Cells[rowIniEmpresa, columnIniFiltro + 1].Value = objRpt.Emprnomb;
            ws.Cells[rowIniProyecto, columnIniFiltro].Value = "Proyecto:";
            ws.Cells[rowIniProyecto, columnIniFiltro + 1].Value = objRpt.Ftprynombre;
            ws.Cells[rowIniEqsProyecto, columnIniFiltro].Value = "Equipos Proyecto:";
            ws.Cells[rowIniEqsProyecto, columnIniFiltro + 1].Value = objRpt.NombreEquipos.Trim();
            ws.Cells[rowIniFechaConsulta, columnIniFiltro].Value = "Fecha de consulta:";
            ws.Cells[rowIniFechaConsulta, columnIniFiltro + 1].Value = objRpt.FechaConsulta.ToString(ConstantesAppServicio.FormatoFechaHora);

            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEmpresa, columnIniFiltro, rowIniFechaConsulta, columnIniFiltro, "#000000", true, true);
            UtilExcel.SetFormatoCelda(ws, rowIniEmpresa, columnIniFiltro, rowIniFechaConsulta, columnIniFiltro, "Centro", "Derecha", "#FFFFFF", "#227ABE", "Calibri", 11, true);
            UtilExcel.SetFormatoCelda(ws, rowIniEmpresa, columnIniFiltro + 1, rowIniFechaConsulta, columnIniFiltro + 1, "Centro", "Izquierda", "#000000", "#FFFFFF", "Calibri", 11, false);

            ws.Column(columnIniFiltro).AutoFit();
            ws.Column(columnIniFiltro + 1).Width = 10;
            ws.Column(columnIniFiltro + 2).Width = 50;
            ws.Column(columnIniFiltro + 3).Width = 50;

            ws.Column(columnIniFiltro + 3).Style.WrapText = true;
            //cabecera
            int rowCabecera = 11;
            int colIniData = 3;
            int colFinData = 0;
            int colIniRevision = 6;

            ws.Cells[rowCabecera, colIniData].Value = "Requisito";
            ws.Cells[rowCabecera + 1, colIniData].Value = "Item";
            ws.Cells[rowCabecera + 1, colIniData + 1].Value = "Descripción";
            ws.Cells[rowCabecera + 1, colIniData + 2].Value = "Sustento";
            colFinData = colIniData + 2;

            if (objRpt.EsHistorico)
            {
                ws.Column(colFinData + 1).Width = 15;
                ws.Cells[rowCabecera + 1, colFinData + 1].Value = "Confidencial Sustento";
                ws.Column(colFinData + 1).Style.WrapText = true;
                colFinData++;
            }


            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniData, rowCabecera + 1, colFinData, "Centro", "Centro", "#FFFFFF", "#227ABE", "Calibri", 11, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniData, rowCabecera + 1, colFinData, "#000000", true, true);
            //Agrupar celdas revisión
            ws.Cells[rowCabecera, colIniData, rowCabecera, colFinData].Merge = true;
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniData, rowCabecera, colFinData, "#000000");
            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniData, rowCabecera, colFinData, "Centro", "Centro", "#FFFFFF", "#227ABE", "Calibri", 11, false);

            if (objRpt.EsHistorico)
                colIniRevision++;

            ws.Cells[rowCabecera, colIniRevision].Value = "ADMINISTRACIÓN FICHA TÉCNICA";
            ws.Cells[rowCabecera + 1, colIniRevision].Value = "Observación COES";
            ws.Cells[rowCabecera + 1, colIniRevision + 1].Value = "Respuesta Subsanación de Observación (Agente)";
            ws.Cells[rowCabecera + 1, colIniRevision + 2].Value = "Respuesta Subsanación de Observación (COES)";
            ws.Cells[rowCabecera + 1, colIniRevision + 3].Value = "Estado";
            ws.Column(colIniRevision).Width = 30;
            ws.Column(colIniRevision + 1).Width = 30;
            ws.Column(colIniRevision + 2).Width = 30;
            ws.Column(colIniRevision + 3).Width = 30;

            UtilExcel.SetFormatoCelda(ws, rowCabecera + 1, colIniRevision, rowCabecera + 1, colIniRevision + 3, "Centro", "Centro", "#000000", "#ffff00", "Calibri", 11, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera + 1, colIniRevision, rowCabecera + 1, colIniRevision + 3, "#000000", true, true);
            //Agrupar celdas revisión
            ws.Cells[rowCabecera, colIniRevision, rowCabecera, colIniRevision + 3].Merge = true;
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniRevision, rowCabecera, colIniRevision + 3, "#000000");
            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniRevision, rowCabecera, colIniRevision + 3, "Centro", "Centro", "#000000", "#ffff00", "Calibri", 11, false);
            ws.Cells[rowCabecera + 1, colIniRevision, rowCabecera + 1, colIniRevision + 3].Style.WrapText = true;

            //Derivación
            int colIniDerivacion = colIniRevision + 4;
            ws.Cells[rowCabecera, colIniDerivacion].Value = nombreArea;
            ws.Cells[rowCabecera + 1, colIniDerivacion].Value = "Áreas";
            ws.Cells[rowCabecera + 1, colIniDerivacion + 1].Value = "Revisión solicitud";
            ws.Cells[rowCabecera + 1, colIniDerivacion + 2].Value = "Estado solicitud";
            ws.Cells[rowCabecera + 1, colIniDerivacion + 3].Value = "Revisión subsanación";
            ws.Cells[rowCabecera + 1, colIniDerivacion + 4].Value = "Estado subsanación";
            ws.Column(colIniDerivacion).Width = 30;
            ws.Column(colIniDerivacion + 1).Width = 30;
            ws.Column(colIniDerivacion + 2).Width = 30;
            ws.Column(colIniDerivacion + 3).Width = 30;
            ws.Column(colIniDerivacion + 4).Width = 30;

            UtilExcel.SetFormatoCelda(ws, rowCabecera + 1, colIniDerivacion, rowCabecera + 1, colIniDerivacion + 4, "Centro", "Centro", "#FFFFFF", "#3366FF", "Calibri", 11, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera + 1, colIniDerivacion, rowCabecera + 1, colIniDerivacion + 4, "#000000", true, true);

            ws.Column(colIniDerivacion).Style.WrapText = true;
            //Agrupar celdas revisión
            ws.Cells[rowCabecera, colIniDerivacion, rowCabecera, colIniDerivacion + 4].Merge = true;
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniDerivacion, rowCabecera, colIniDerivacion + 4, "#000000");
            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniDerivacion, rowCabecera, colIniDerivacion + 4, "Centro", "Centro", "#FFFFFF", "#3366FF", "Calibri", 11, false);
            ws.Cells[rowCabecera + 1, colIniDerivacion, rowCabecera + 1, colIniDerivacion + 4].Style.WrapText = true;

            #endregion

            #region Cuerpo Principal

            int rowData = rowCabecera + 2;

            foreach (var seccion in objRpt.ListaReqEvento)
            {
                ws.Cells[rowData, colIniData].Value = seccion.Fevrqliteral;
                ws.Cells[rowData, colIniData + 1].Value = seccion.Fevrqdesc;
                UtilExcel.CeldasExcelWrapText(ws, rowData, colIniData + 1, rowData, colIniData + 1);

                GenerarExcelItemValor(ws, seccion.UrlSustento, false, rowData, colIniData + 2);

                if (objRpt.EsHistorico)
                    ws.Cells[rowData, colFinData].Value = seccion.ItemSustentoConfidencial == ConstantesFichaTecnica.Si ? "Sí" : seccion.ItemSustentoConfidencial == ConstantesFichaTecnica.No ? "No" : string.Empty;

                var revision = objRpt.lstRevision.Find(x => x.Fevrqcodi == seccion.Fevrqcodi);
                var txthtmlobscoes = GenerarTextoSinHtml(revision.ValObsCoes ?? "");
                GenerarExcelItemValor(ws, txthtmlobscoes, true, rowData, colIniRevision);
                var txthtmlrptaagente = GenerarTextoSinHtml(revision.ValRptaAgente ?? "");
                GenerarExcelItemValor(ws, txthtmlrptaagente, true, rowData, colIniRevision + 1);
                var txthtmlrptacoes = GenerarTextoSinHtml(revision.ValRptaCoes ?? "");
                GenerarExcelItemValor(ws, txthtmlrptacoes, true, rowData, colIniRevision + 2);

                List<FTOpcionEstado> lstEstados = revision.ListaEstados;

                string nombreEstado = ObtenerDescripcionEstadoRev(revision.ValEstado ?? "");
                ws.Cells[rowData, colIniRevision + 3].Value = nombreEstado;

                UtilExcel.SetFormatoCelda(ws, rowData, colIniData, rowData, colIniRevision + 3, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colIniData, rowData, colIniRevision + 3, "#000000", true, true);

                if (!revision.FilaBloqueada)
                {
                    if (revision.CeldaObsCoesEstaBloqueada)
                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision, rowData, colIniRevision, ConstantesFichaTecnica.ColorBloqueado);
                    else
                        ws.Cells[rowData, colIniRevision].Style.Locked = false;
                    if (revision.CeldaRptaAgenteEstaBloqueada)
                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision + 1, rowData, colIniRevision + 1, ConstantesFichaTecnica.ColorBloqueado);
                    else
                        ws.Cells[rowData, colIniRevision + 1].Style.Locked = false;
                    if (revision.CeldaRptaCoesEstaBloqueada)
                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision + 2, rowData, colIniRevision + 2, ConstantesFichaTecnica.ColorBloqueado);
                    else
                        ws.Cells[rowData, colIniRevision + 2].Style.Locked = false;
                    if (revision.CeldaEstadoEstaBloqueada)
                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision + 3, rowData, colIniRevision + 3, ConstantesFichaTecnica.ColorBloqueado);
                    else
                    {
                        if (lstEstados.Any())
                        {
                            // agregar combo de estados en excel
                            AgregarComboEstadosExcel(ws, rowData, colIniRevision + 3, lstEstados);
                        }
                        ws.Cells[rowData, colIniRevision + 3].Style.Locked = false;
                    }
                }
                else
                    UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision, rowData, colIniRevision + 3, ConstantesFichaTecnica.ColorBloqueado);

                //derivación
                var derivacion = objRpt.ListaDerivacion.Find(x => x.Fevrqcodi == seccion.Fevrqcodi);
                List<FTOpcionEstado> lstEstadosAreas = ObtenerListaEstadosAreas();

                var txthtmtAreas = GenerarTextoSinHtml(derivacion.AreasNombAsignadas ?? "");
                GenerarExcelItemValor(ws, txthtmtAreas, true, rowData, colIniDerivacion);
                var txthtmlMsgSolicitud = GenerarTextoSinHtml(derivacion.MsgSolicitud ?? "");
                GenerarExcelItemValor(ws, txthtmlMsgSolicitud, true, rowData, colIniDerivacion + 1);

                if (derivacion.EsParaAdminFT)
                {
                    string nombreEstado1 = GenerarTextoSinHtml(derivacion.IdValorEstadoSolicitado ?? "");
                    ws.Cells[rowData, colIniDerivacion + 2].Value = nombreEstado1;
                }
                else
                {
                    string nombreEstado1 = ObtenerDescripcionEstadoRev(derivacion.IdValorEstadoSolicitado ?? "");
                    ws.Cells[rowData, colIniDerivacion + 2].Value = nombreEstado1;
                }


                var txthtmlMsgSubsanacion = GenerarTextoSinHtml(derivacion.MsgSubsanacion ?? "");
                GenerarExcelItemValor(ws, txthtmlMsgSubsanacion, true, rowData, colIniDerivacion + 3);

                if (derivacion.EsParaAdminFT)
                {
                    string nombreEstado2 = GenerarTextoSinHtml(derivacion.IdValorEstadoSubsanado ?? "");
                    ws.Cells[rowData, colIniDerivacion + 4].Value = nombreEstado2;
                }
                else
                {
                    string nombreEstado2 = ObtenerDescripcionEstadoRev(derivacion.IdValorEstadoSubsanado ?? "");
                    ws.Cells[rowData, colIniDerivacion + 4].Value = nombreEstado2;
                }

                UtilExcel.SetFormatoCelda(ws, rowData, colIniDerivacion, rowData, colIniDerivacion + 4, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colIniDerivacion, rowData, colIniDerivacion + 4, "#000000", true, true);

                //pintar de color bloqueado a los nombres de áreas y la sección de administrador
                if (derivacion.EsParaAdminFT)
                    servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion, rowData, colIniDerivacion, ConstantesFichaTecnica.ColorBloqueado);
                else
                    servFormato.CeldasExcelColorFondo(ws, rowData, colIniRevision, rowData, colIniDerivacion, ConstantesFichaTecnica.ColorBloqueado);


                if (derivacion.EsFilaRevisable && derivacion.TipoEstado == ConstantesFichaTecnica.EstadoStrPendiente)
                {
                    if (derivacion.CeldaRevSolicitudEstaBloqueada)
                        servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 1, rowData, colIniDerivacion + 1, ConstantesFichaTecnica.ColorBloqueado);
                    else
                        ws.Cells[rowData, colIniDerivacion + 1].Style.Locked = false;
                    if (derivacion.CeldaEstadoSolicitudEstaBloqueada)
                        servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 2, rowData, colIniDerivacion + 2, ConstantesFichaTecnica.ColorBloqueado);
                    else
                    {
                        if (lstEstadosAreas.Any() && !derivacion.EsParaAdminFT)
                        {
                            // agregar combo de estados en excel
                            AgregarComboEstadosExcel(ws, rowData, colIniDerivacion + 2, lstEstadosAreas);
                        }
                        ws.Cells[rowData, colIniDerivacion + 2].Style.Locked = false;
                    }
                    if (derivacion.CeldaRevSubsanadoEstaBloqueada)
                        servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 3, rowData, colIniDerivacion + 3, ConstantesFichaTecnica.ColorBloqueado);
                    else
                        ws.Cells[rowData, colIniDerivacion + 3].Style.Locked = false;
                    if (derivacion.CeldaEstadoSubsanadoEstaBloqueada)
                        servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 4, rowData, colIniDerivacion + 4, ConstantesFichaTecnica.ColorBloqueado);
                    else
                    {
                        if (lstEstadosAreas.Any() && !derivacion.EsParaAdminFT)
                        {
                            // agregar combo de estados en excel
                            AgregarComboEstadosExcel(ws, rowData, colIniDerivacion + 4, lstEstadosAreas);
                        }
                        ws.Cells[rowData, colIniDerivacion + 4].Style.Locked = false;
                    }
                }
                else
                    servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 1, rowData, colIniDerivacion + 4, ConstantesFichaTecnica.ColorBloqueado);


                rowData++;
            }

            #endregion

            //desbloquear parte izquierda
            ws.Cells[rowCabecera + 2, colIniData, rowData, colFinData].Style.Locked = false;
            //pintar de color plomo
            var roWColorSoloLectura = ws.Cells[rowCabecera + 2, colIniData, rowData - 1, colFinData];
            UtilExcel.BackgroundColor(roWColorSoloLectura, ColorTranslator.FromHtml("#D3D3D3"));

            if (objRpt.EsHistorico)
                ws.View.FreezePanes(13, 7);
            else
                ws.View.FreezePanes(13, 6);

        }

        private void GenerarArchivoExcelRevisionContenidoBajaMO(ExcelPackage xlPackage, string pathLogo, FTRevisionContenidoExcel objRpt, int idarea)
        {
            PR5ReportesAppServicio servFormato = new PR5ReportesAppServicio();

            string nombreArea = "REVISIÓN ÁREAS COES";
            if (idarea > 0)
            {
                var areaDesc = GetByIdFtExtCorreoarea(idarea).Faremnombre;
                nombreArea = "REVISIÓN " + areaDesc.ToUpper();
            }

            string nameWS = "REPORTE";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            //logo
            UtilExcel.AddImageLocal(ws, 0, 0, pathLogo, 120, 70);
            ws.Protection.IsProtected = true;

            int row = 5;
            int column = 2;

            #region  Filtros y Cabecera

            int columnIniFiltro = column;
            int rowIniFiltro = row;

            int rowIniEmpresa = rowIniFiltro + 1;
            int rowIniEqsProyecto = rowIniEmpresa + 1;
            int rowIniFechaConsulta = rowIniEqsProyecto + 1;

            ws.Cells[rowIniEmpresa, columnIniFiltro].Value = "Empresa:";
            ws.Cells[rowIniEmpresa, columnIniFiltro + 1].Value = objRpt.Emprnomb;
            ws.Cells[rowIniEqsProyecto, columnIniFiltro].Value = "Equipos Proyecto:";
            ws.Cells[rowIniEqsProyecto, columnIniFiltro + 1].Value = objRpt.NombreEquipos.Trim();
            ws.Cells[rowIniFechaConsulta, columnIniFiltro].Value = "Fecha de consulta:";
            ws.Cells[rowIniFechaConsulta, columnIniFiltro + 1].Value = objRpt.FechaConsulta.ToString(ConstantesAppServicio.FormatoFechaHora);

            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEmpresa, columnIniFiltro, rowIniFechaConsulta, columnIniFiltro, "#000000", true, true);
            UtilExcel.SetFormatoCelda(ws, rowIniEmpresa, columnIniFiltro, rowIniFechaConsulta, columnIniFiltro, "Centro", "Derecha", "#FFFFFF", "#227ABE", "Calibri", 11, true);
            UtilExcel.SetFormatoCelda(ws, rowIniEmpresa, columnIniFiltro + 1, rowIniFechaConsulta, columnIniFiltro + 1, "Centro", "Izquierda", "#000000", "#FFFFFF", "Calibri", 11, false);

            ws.Column(columnIniFiltro).AutoFit();
            ws.Column(columnIniFiltro + 1).Width = 30;
            ws.Column(columnIniFiltro + 1).Style.WrapText = true;

            //cabecera
            int rowCabecera = 11;
            int colIniData = 3;
            int colFinData = 0;
            int colIniRevision = colIniData + 1;

            ws.Cells[rowCabecera, colIniData].Value = "Sustento";
            colFinData = colIniData;

            if (objRpt.EsHistorico)
            {
                ws.Column(colFinData + 1).Width = 15;
                ws.Cells[rowCabecera, colFinData + 1].Value = "Confidencial Sustento";
                ws.Column(colFinData + 1).Style.WrapText = true;
                colFinData++;
            }

            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniData, rowCabecera, colFinData, "Centro", "Centro", "#FFFFFF", "#227ABE", "Calibri", 11, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniData, rowCabecera, colFinData, "#000000", true, true);

            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniData, rowCabecera, colFinData, "#000000");
            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniData, rowCabecera, colFinData, "Centro", "Centro", "#000000", "#227ABE", "Calibri", 11, false);

            if (objRpt.EsHistorico)
                colIniRevision++;

            ws.Cells[rowCabecera, colIniRevision].Value = "ADMINISTRACIÓN FICHA TÉCNICA";
            ws.Cells[rowCabecera + 1, colIniRevision].Value = "Observación COES";
            ws.Cells[rowCabecera + 1, colIniRevision + 1].Value = "Respuesta Subsanación de Observación (Agente)";
            ws.Cells[rowCabecera + 1, colIniRevision + 2].Value = "Respuesta Subsanación de Observación (COES)";
            ws.Cells[rowCabecera + 1, colIniRevision + 3].Value = "Estado";
            ws.Column(colIniRevision).Width = 30;
            ws.Column(colIniRevision + 1).Width = 30;
            ws.Column(colIniRevision + 2).Width = 30;
            ws.Column(colIniRevision + 3).Width = 30;

            UtilExcel.SetFormatoCelda(ws, rowCabecera + 1, colIniRevision, rowCabecera + 1, colIniRevision + 3, "Centro", "Centro", "#000000", "#ffff00", "Calibri", 11, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera + 1, colIniRevision, rowCabecera + 1, colIniRevision + 3, "#000000", true, true);

            //Agrupar sustento
            ws.Cells[rowCabecera, colIniData, rowCabecera + 1, colIniData].Merge = true;
            if (objRpt.EsHistorico)
                ws.Cells[rowCabecera, colFinData, rowCabecera + 1, colFinData].Merge = true;

            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniData, rowCabecera + 1, colFinData, "#000000");
            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniData, rowCabecera + 1, colFinData, "Centro", "Centro", "#FFFFFF", "#227ABE", "Calibri", 11, false);


            //Agrupar celdas revisión
            ws.Cells[rowCabecera, colIniRevision, rowCabecera, colIniRevision + 3].Merge = true;
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniRevision, rowCabecera, colIniRevision + 3, "#000000");
            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniRevision, rowCabecera, colIniRevision + 3, "Centro", "Centro", "#000000", "#ffff00", "Calibri", 11, false);
            ws.Cells[rowCabecera + 1, colIniRevision, rowCabecera + 1, colIniRevision + 3].Style.WrapText = true;

            //Derivación
            int colIniDerivacion = colIniRevision + 4;
            ws.Cells[rowCabecera, colIniDerivacion].Value = nombreArea;
            ws.Cells[rowCabecera + 1, colIniDerivacion].Value = "Áreas";
            ws.Cells[rowCabecera + 1, colIniDerivacion + 1].Value = "Revisión solicitud";
            ws.Cells[rowCabecera + 1, colIniDerivacion + 2].Value = "Estado solicitud";
            ws.Cells[rowCabecera + 1, colIniDerivacion + 3].Value = "Revisión subsanación";
            ws.Cells[rowCabecera + 1, colIniDerivacion + 4].Value = "Estado subsanación";
            ws.Column(colIniDerivacion).Width = 30;
            ws.Column(colIniDerivacion + 1).Width = 30;
            ws.Column(colIniDerivacion + 2).Width = 30;
            ws.Column(colIniDerivacion + 3).Width = 30;
            ws.Column(colIniDerivacion + 4).Width = 30;

            UtilExcel.SetFormatoCelda(ws, rowCabecera + 1, colIniDerivacion, rowCabecera + 1, colIniDerivacion + 4, "Centro", "Centro", "#FFFFFF", "#3366FF", "Calibri", 11, false);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera + 1, colIniDerivacion, rowCabecera + 1, colIniDerivacion + 4, "#000000", true, true);

            ws.Column(colIniDerivacion).Style.WrapText = true;

            //Agrupar celdas revisión
            ws.Cells[rowCabecera, colIniDerivacion, rowCabecera, colIniDerivacion + 4].Merge = true;
            UtilExcel.BorderCeldasLineaDelgada(ws, rowCabecera, colIniDerivacion, rowCabecera, colIniDerivacion + 4, "#000000");
            UtilExcel.SetFormatoCelda(ws, rowCabecera, colIniDerivacion, rowCabecera, colIniDerivacion + 4, "Centro", "Centro", "#FFFFFF", "#3366FF", "Calibri", 11, false);
            ws.Cells[rowCabecera + 1, colIniDerivacion, rowCabecera + 1, colIniDerivacion + 4].Style.WrapText = true;

            #endregion

            #region Cuerpo Principal

            int rowData = rowCabecera + 2;

            if (objRpt.ListaReqEvento.Any())
            {
                var seccion = objRpt.ListaReqEvento.First();

                GenerarExcelItemValor(ws, seccion.UrlSustento, false, rowData, colIniData);

                if (objRpt.EsHistorico)
                    ws.Cells[rowData, colFinData].Value = seccion.ItemSustentoConfidencial == ConstantesFichaTecnica.Si ? "Sí" : seccion.ItemSustentoConfidencial == ConstantesFichaTecnica.No ? "No" : string.Empty;

                //var revision = objRpt.lstRevision.Find(x => x.Fevrqcodi == seccion.Fevrqcodi);
                var revision = objRpt.lstRevision.First();

                if (revision != null)
                {
                    var txthtmlobscoes = GenerarTextoSinHtml(revision.ValObsCoes ?? "");
                    GenerarExcelItemValor(ws, txthtmlobscoes, true, rowData, colIniRevision);
                    var txthtmlrptaagente = GenerarTextoSinHtml(revision.ValRptaAgente ?? "");
                    GenerarExcelItemValor(ws, txthtmlrptaagente, true, rowData, colIniRevision + 1);
                    var txthtmlrptacoes = GenerarTextoSinHtml(revision.ValRptaCoes ?? "");
                    GenerarExcelItemValor(ws, txthtmlrptacoes, true, rowData, colIniRevision + 2);

                    List<FTOpcionEstado> lstEstados = revision.ListaEstados;

                    string nombreEstado = ObtenerDescripcionEstadoRev(revision.ValEstado ?? "");
                    ws.Cells[rowData, colIniRevision + 3].Value = nombreEstado;

                    UtilExcel.SetFormatoCelda(ws, rowData, colIniData, rowData, colIniRevision + 3, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colIniData, rowData, colIniRevision + 3, "#000000", true, true);

                    if (!revision.FilaBloqueada)
                    {
                        if (revision.CeldaObsCoesEstaBloqueada)
                            UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision, rowData, colIniRevision, ConstantesFichaTecnica.ColorBloqueado);
                        else
                            ws.Cells[rowData, colIniRevision].Style.Locked = false;
                        if (revision.CeldaRptaAgenteEstaBloqueada)
                            UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision + 1, rowData, colIniRevision + 1, ConstantesFichaTecnica.ColorBloqueado);
                        else
                            ws.Cells[rowData, colIniRevision + 1].Style.Locked = false;
                        if (revision.CeldaRptaCoesEstaBloqueada)
                            UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision + 2, rowData, colIniRevision + 2, ConstantesFichaTecnica.ColorBloqueado);
                        else
                            ws.Cells[rowData, colIniRevision + 2].Style.Locked = false;
                        if (revision.CeldaEstadoEstaBloqueada)
                            UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision + 3, rowData, colIniRevision + 3, ConstantesFichaTecnica.ColorBloqueado);
                        else
                        {
                            if (lstEstados.Any())
                            {
                                // agregar combo de estados en excel
                                AgregarComboEstadosExcel(ws, rowData, colIniRevision + 3, lstEstados);
                            }
                            ws.Cells[rowData, colIniRevision + 3].Style.Locked = false;
                        }
                    }
                    else
                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniRevision, rowData, colIniRevision + 3, ConstantesFichaTecnica.ColorBloqueado);

                    //derivación
                    var derivacion = objRpt.ListaDerivacion.Find(x => x.Fevrqcodi == seccion.Fevrqcodi);
                    List<FTOpcionEstado> lstEstadosAreas = ObtenerListaEstadosAreas();

                    var txthtmtAreas = GenerarTextoSinHtml(derivacion.AreasNombAsignadas ?? "");
                    GenerarExcelItemValor(ws, txthtmtAreas, true, rowData, colIniDerivacion);
                    var txthtmlMsgSolicitud = GenerarTextoSinHtml(derivacion.MsgSolicitud ?? "");
                    GenerarExcelItemValor(ws, txthtmlMsgSolicitud, true, rowData, colIniDerivacion + 1);

                    if (derivacion.EsParaAdminFT)
                    {
                        string nombreEstado1 = GenerarTextoSinHtml(derivacion.IdValorEstadoSolicitado ?? "");
                        ws.Cells[rowData, colIniDerivacion + 2].Value = nombreEstado1;
                    }
                    else
                    {
                        string nombreEstado1 = ObtenerDescripcionEstadoRev(derivacion.IdValorEstadoSolicitado ?? "");
                        ws.Cells[rowData, colIniDerivacion + 2].Value = nombreEstado1;
                    }


                    var txthtmlMsgSubsanacion = GenerarTextoSinHtml(derivacion.MsgSubsanacion ?? "");
                    GenerarExcelItemValor(ws, txthtmlMsgSubsanacion, true, rowData, colIniDerivacion + 3);

                    if (derivacion.EsParaAdminFT)
                    {
                        string nombreEstado2 = GenerarTextoSinHtml(derivacion.IdValorEstadoSubsanado ?? "");
                        ws.Cells[rowData, colIniDerivacion + 4].Value = nombreEstado2;
                    }
                    else
                    {
                        string nombreEstado2 = ObtenerDescripcionEstadoRev(derivacion.IdValorEstadoSubsanado ?? "");
                        ws.Cells[rowData, colIniDerivacion + 4].Value = nombreEstado2;
                    }

                    UtilExcel.SetFormatoCelda(ws, rowData, colIniDerivacion, rowData, colIniDerivacion + 4, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 10, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colIniDerivacion, rowData, colIniDerivacion + 4, "#000000", true, true);

                    //pintar de color bloqueado a los nombres de áreas y la sección de administrador
                    if (derivacion.EsParaAdminFT)
                        servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion, rowData, colIniDerivacion, ConstantesFichaTecnica.ColorBloqueado);
                    else
                        servFormato.CeldasExcelColorFondo(ws, rowData, colIniRevision, rowData, colIniDerivacion, ConstantesFichaTecnica.ColorBloqueado);


                    if (derivacion.EsFilaRevisable && derivacion.TipoEstado == ConstantesFichaTecnica.EstadoStrPendiente)
                    {
                        if (derivacion.CeldaRevSolicitudEstaBloqueada)
                            servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 1, rowData, colIniDerivacion + 1, ConstantesFichaTecnica.ColorBloqueado);
                        else
                            ws.Cells[rowData, colIniDerivacion + 1].Style.Locked = false;
                        if (derivacion.CeldaEstadoSolicitudEstaBloqueada)
                            servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 2, rowData, colIniDerivacion + 2, ConstantesFichaTecnica.ColorBloqueado);
                        else
                        {
                            if (lstEstadosAreas.Any() && !derivacion.EsParaAdminFT)
                            {
                                // agregar combo de estados en excel
                                AgregarComboEstadosExcel(ws, rowData, colIniDerivacion + 2, lstEstadosAreas);
                            }
                            ws.Cells[rowData, colIniDerivacion + 2].Style.Locked = false;
                        }
                        if (derivacion.CeldaRevSubsanadoEstaBloqueada)
                            servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 3, rowData, colIniDerivacion + 3, ConstantesFichaTecnica.ColorBloqueado);
                        else
                            ws.Cells[rowData, colIniDerivacion + 3].Style.Locked = false;
                        if (derivacion.CeldaEstadoSubsanadoEstaBloqueada)
                            servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 4, rowData, colIniDerivacion + 4, ConstantesFichaTecnica.ColorBloqueado);
                        else
                        {
                            if (lstEstadosAreas.Any() && !derivacion.EsParaAdminFT)
                            {
                                // agregar combo de estados en excel
                                AgregarComboEstadosExcel(ws, rowData, colIniDerivacion + 4, lstEstadosAreas);
                            }
                            ws.Cells[rowData, colIniDerivacion + 4].Style.Locked = false;
                        }
                    }
                    else
                        servFormato.CeldasExcelColorFondo(ws, rowData, colIniDerivacion + 1, rowData, colIniDerivacion + 4, ConstantesFichaTecnica.ColorBloqueado);

                    rowData++;
                }
            }

            #endregion

            //desbloquear parte izquierda
            ws.Cells[rowCabecera + 2, colIniData, rowData, colFinData].Style.Locked = false;

            var roWColorSoloLectura = ws.Cells[rowCabecera + 2, colIniData, rowData - 1, colFinData];
            UtilExcel.BackgroundColor(roWColorSoloLectura, ColorTranslator.FromHtml("#D3D3D3"));

            if (objRpt.EsHistorico)
                ws.View.FreezePanes(13, 5);
            else
                ws.View.FreezePanes(13, 4);
        }

        public void ExportarSustentos(string currentUserSession, int idEnvio, int idElemento, int codequipo, string tipoArchivo, bool confidencial, out string nameFile)
        {
            nameFile = "";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesFichaTecnica.ModuloArchivosSustentoXEnvio;
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal_" + modulo) + currentUserSession;
                string pathZip = GetPathSubcarpeta("Temporal_" + modulo) + "/" + ConstantesFichaTecnica.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                if (idEnvio > 0)
                {
                    var envio = GetByIdFtExtEnvio(idEnvio);
                    //int idVersion = envio.FtevercodiActual;
                    int idVersion = GetVersionSegunAmbiente(envio, ConstantesFichaTecnica.INTRANET);

                    //string pathOrigen = GetPathSubcarpeta(ConstantesFichaTecnica.SubcarpetaSolicitud) + GetSubcarpetaEnvio(idEnvio, idVersion, idElemento, tipoArchivo);
                    CopiarArchivosSustentosATemporalXEnvio(idEnvio, idVersion, idElemento, tipoArchivo, modulo, currentUserSession);

                    //obtenemos la lista de archivos según el tipo
                    List<FtExtEnvioArchivoDTO> listaArchivo = new List<FtExtEnvioArchivoDTO>();
                    switch (tipoArchivo)
                    {
                        case ConstantesFichaTecnica.STipoArchivoSustentoDato:
                            List<FtExtEnvioDatoDTO> listaDatoXEq = GetByCriteriaFtExtEnvioDatos(codequipo.ToString());
                            List<FtExtEnvioArchivoDTO> listaArchivoXDato = ListByVersionYDatoFtExtEnvioArchivos(idVersion).Where(x => x.Fteeqcodi == codequipo).ToList();
                            var objDato = listaDatoXEq.Find(x => x.Ftitcodi == idElemento);
                            listaArchivo = listaArchivoXDato.Where(x => x.Ftedatcodi == objDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteSustentoDato).ToList();

                            if (confidencial)
                                listaArchivo = listaArchivo.Where(x => x.Ftearcflagsustentoconf == "S").ToList();
                            else
                                listaArchivo = listaArchivo.Where(x => x.Ftearcflagsustentoconf != "S").ToList();
                            break;
                        case ConstantesFichaTecnica.STipoArchivoRequisito:
                            listaArchivo = ListByVersionYReqFtExtEnvioArchivos(idVersion).Where(x => x.Fevrqcodi == idElemento).ToList();
                            if (confidencial)
                                listaArchivo = listaArchivo.Where(x => x.Ftearcflagsustentoconf == "S").ToList();
                            else
                                listaArchivo = listaArchivo.Where(x => x.Ftearcflagsustentoconf != "S").ToList();
                            break;
                    }

                    //quitamos los archivos que no deben ser copiados
                    var patTrabajo = "Temporal_" + modulo + "/" + currentUserSession;
                    string pathDestino = GetPathSubcarpeta(patTrabajo);
                    var documentos = FileServer.ListarArhivos(pathDestino + "\\", pathAlternativo);

                    //var documentos = FileServer.ListarArhivos(pathTemporalUsuario + "\\", pathAlternativo);
                    foreach (var item in documentos)
                    {
                        var archivo = listaArchivo.Find(x => x.Ftearcnombrefisico == item.FileName);

                        if (archivo == null)
                        {
                            FileServer.DeleteBlob(pathDestino + "\\" + item.FileName, pathAlternativo);
                        }
                        else
                        {
                            //renombar
                            FileServer.RenameBlob("", pathDestino + "/" + item.FileName, pathDestino + "/" + archivo.Ftearcnombreoriginal, pathAlternativo);
                        }
                    }

                    // creamos el zip
                    string nombreComprimido = string.Format("archivosSustentatorio_{0}", idEnvio);
                    var nombreZip = nombreComprimido + ".zip";
                    var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                    if (File.Exists(rutaZip)) File.Delete(rutaZip);
                    FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                    nameFile = nombreZip;
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void CopiarArchivosSustentosATemporalXEnvio(int idEnvio, int idVersion, int idConcepto, string tipoArchivo, string moduloDestino, string currentUserSession)
        {
            //eliminar carpeta temporal
            string pathAlternativo = GetPathPrincipal();

            try
            {
                if (idEnvio > 0)
                {
                    string moduloOrigen = ConstantesFichaTecnica.SubcarpetaSolicitud;
                    string pathOrigen = GetPathSubcarpeta(moduloOrigen) + GetSubcarpetaEnvio(idEnvio, idVersion, idConcepto, tipoArchivo);
                    var patTrabajo = "Temporal_" + moduloDestino + "/" + currentUserSession;
                    string pathDestino = GetPathSubcarpeta(patTrabajo);

                    //eliminar carpeta temporal existente
                    FileServer.DeleteFolderAlter(pathDestino, pathAlternativo);

                    FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }


        public void ExportarValor(string currentUserSession, int idEnvio, int idElemento, int codequipo, string tipoArchivo, bool confidencial, out string nameFile)
        {
            nameFile = "";
            try
            {
                string pathAlternativo = GetPathPrincipal();
                string modulo = ConstantesFichaTecnica.ModuloArchivosValorXEnvido;
                string pathTemporalUsuario = GetPathSubcarpeta("Temporal_" + modulo) + currentUserSession;
                string pathZip = GetPathSubcarpeta("Temporal_" + modulo) + "/" + ConstantesFichaTecnica.NombreArchivosZip;

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathTemporalUsuario + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathTemporalUsuario + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathTemporalUsuario + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathTemporalUsuario + "/", pathAlternativo);
                }

                //borrar carpeta temporal cuando existan registros
                FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                if (FileServer.VerificarExistenciaDirectorio(pathZip + "/", pathAlternativo))
                {
                    FileServer.DeleteFolderAlter(pathZip + "/", pathAlternativo);
                    FileServer.CreateFolder("", pathZip + "//", pathAlternativo);
                }

                if (idEnvio > 0)
                {
                    var envio = GetByIdFtExtEnvio(idEnvio);
                    //int idVersion = envio.FtevercodiActual;
                    int idVersion = GetVersionSegunAmbiente(envio, ConstantesFichaTecnica.INTRANET);

                    CopiarArchivosValorATemporalXEnvio(idEnvio, idVersion, idElemento, tipoArchivo, modulo, currentUserSession);

                    //obtenemos la lista de archivos según el tipo
                    List<FtExtEnvioArchivoDTO> listaArchivo = new List<FtExtEnvioArchivoDTO>();
                    List<FtExtEnvioDatoDTO> listaDatoXEq = GetByCriteriaFtExtEnvioDatos(codequipo.ToString());
                    List<FtExtEnvioArchivoDTO> listaArchivoXDato = ListByVersionYDatoFtExtEnvioArchivos(idVersion).Where(x => x.Fteeqcodi == codequipo).ToList();
                    var objDato = listaDatoXEq.Find(x => x.Ftitcodi == idElemento);
                    listaArchivo = listaArchivoXDato.Where(x => x.Ftedatcodi == objDato.Ftedatcodi && x.Ftearctipo == ConstantesFichaTecnica.TipoArchivoAgenteValorDato).ToList();

                    if (confidencial)
                        listaArchivo = listaArchivo.Where(x => x.Ftearcflagsustentoconf == "S").ToList();
                    else
                        listaArchivo = listaArchivo.Where(x => x.Ftearcflagsustentoconf != "S").ToList();

                    //quitamos los archivos que no deben ser copiados
                    var patTrabajo = "Temporal_" + modulo + "/" + currentUserSession;
                    string pathDestino = GetPathSubcarpeta(patTrabajo);
                    var documentos = FileServer.ListarArhivos(pathDestino + "\\", pathAlternativo);

                    //var documentos = FileServer.ListarArhivos(pathTemporalUsuario + "\\", pathAlternativo);
                    foreach (var item in documentos)
                    {
                        var archivo = listaArchivo.Find(x => x.Ftearcnombrefisico == item.FileName);

                        if (archivo == null)
                        {
                            FileServer.DeleteBlob(pathDestino + "\\" + item.FileName, pathAlternativo);
                        }
                        else
                        {
                            //renombar
                            FileServer.RenameBlob("", pathDestino + "/" + item.FileName, pathDestino + "/" + archivo.Ftearcnombreoriginal, pathAlternativo);
                        }
                    }

                    // creamos el zip
                    string nombreComprimido = string.Format("archivosValor_{0}", idEnvio);
                    var nombreZip = nombreComprimido + ".zip";
                    var rutaZip = pathAlternativo + pathZip + "/" + nombreZip;

                    if (File.Exists(rutaZip)) File.Delete(rutaZip);
                    FileServer.CreateZipFromDirectory(pathTemporalUsuario, rutaZip, pathAlternativo);
                    nameFile = nombreZip;
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        public void CopiarArchivosValorATemporalXEnvio(int idEnvio, int idVersion, int idConcepto, string tipoArchivo, string moduloDestino, string currentUserSession)
        {
            //eliminar carpeta temporal
            string pathAlternativo = GetPathPrincipal();

            try
            {
                if (idEnvio > 0)
                {
                    string moduloOrigen = ConstantesFichaTecnica.SubcarpetaSolicitud;
                    string pathOrigen = GetPathSubcarpeta(moduloOrigen) + GetSubcarpetaEnvio(idEnvio, idVersion, idConcepto, tipoArchivo);
                    var patTrabajo = "Temporal_" + moduloDestino + "/" + currentUserSession;
                    string pathDestino = GetPathSubcarpeta(patTrabajo);

                    //eliminar carpeta temporal existente
                    FileServer.DeleteFolderAlter(pathDestino, pathAlternativo);

                    FileServer.CopiarDirectoryAlter(pathOrigen, pathDestino, pathAlternativo);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo obtener los archivos del servidor.", ex);
            }
        }

        public void AgregarComboEstadosExcel(ExcelWorksheet ws, int row, int col, List<FTOpcionEstado> lstEstados)
        {
            // add a validation and set values
            string posicion = UtilExcel.GetCellAddress(row, col); // POSIICON CELDA
            var validation = ws.DataValidations.AddListValidation(posicion);
            validation.ShowErrorMessage = true;
            validation.ErrorStyle = ExcelDataValidationWarningStyle.warning;
            validation.ErrorTitle = "Se ingresó un valor no válido";
            validation.Error = "Selecciona un valor de la lista";

            foreach (var item in lstEstados)
            {
                validation.Formula.Values.Add(item.Texto);
            }
        }

        #endregion

        #region Urls de ambiente

        public static string GetUrlIntranet()
        {
            var urlConfig = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyUrlIntranet];
            if (!urlConfig.EndsWith("/")) urlConfig = urlConfig + "/";

            return urlConfig;
        }

        public static string GetUrlExtranet()
        {
            var urlConfig = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyUrlExtranet];
            if (!urlConfig.EndsWith("/")) urlConfig = urlConfig + "/";

            return urlConfig;
        }

        public static string GetUrlFileappFichaTecnica()
        {
            var urlConfig = ConfigurationManager.AppSettings[ConstantesFichaTecnica.KeyUrlFileAppFichaTecnica];
            if (!urlConfig.EndsWith("/")) urlConfig = urlConfig + "/";

            return urlConfig;
        }

        #endregion

        #region Generador de Reporte histórico FT

        /// <summary>
        /// Listar empresas por ficha tecnica
        /// </summary>
        /// <param name="idFT"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaByFichaTecnicaTTIE(int idFT)
        {
            List<SiEmpresaDTO> lista = new List<SiEmpresaDTO>();

            FtFictecXTipoEquipoDTO reg = GetFichaTecnica(idFT);
            if (reg.Famcodi != null)
            {
                lista = FactorySic.GetSiEmpresaRepository().ListarEmpresasxTipoEquipos(reg.Famcodi.ToString(), ConstantesAppServicio.ParametroDefecto);
            }
            else
            {

                lista = FactorySic.GetSiEmpresaRepository().ListarEmpresasxTipoEquipos(ConstantesHorasOperacion.IdTipoTermica.ToString(), ConstantesAppServicio.ParametroDefecto);
            }

            return lista;
        }

        public FTReporteExcel ListarElementoReporteHistoricoFT(int idEtapa, string idFT, string idEmpresa, string tipocodis,
                                                        bool historico, bool flagFormulaEnValor, DateTime fechaVigIni, DateTime fechaVigFin, string estado, bool incluirData, bool esReporteExcel)
        {
            List<int> lFteqcodi = new List<int>();
            if (!string.IsNullOrEmpty(idFT)) lFteqcodi = idFT.Split(',').Select(x => Convert.ToInt32(x)).ToList();

            List<FtFictecXTipoEquipoDTO> listaFichaTmp = FactorySic.GetFtFictecXTipoEquipoRepository().List().Where(x => lFteqcodi.Contains(x.Fteqcodi)).ToList();
            foreach (var item in listaFichaTmp)
            {
                if (item.Famcodi == 1) idEmpresa = "-1"; //si la ficha seleccionada es de tipo "subestación" entonces traer todas las empresas
            }

            List<int> lFamcodi = listaFichaTmp.Where(x => x.Famcodi > 0).Select(x => x.Famcodi.Value).ToList();
            List<int> lCatecodi = listaFichaTmp.Where(x => x.Catecodi > 0).Select(x => x.Catecodi.Value).ToList();
            if (lFamcodi.Contains(ConstantesHorasOperacion.IdTipoTermica)) lCatecodi.Add((int)ConstantesMigraciones.Catecodi.CentralTermico);

            List<int> lPropcodi = new List<int>();
            List<int> lConcepcodi = new List<int>();
            foreach (var objFicha in listaFichaTmp)
            {
                List<FtFictecItemDTO> listaAllData = ListarItemsByFichaTecnica(objFicha.Fteqcodi).OrderBy(x => x.Ftitcodi).ToList();
                lPropcodi.AddRange(listaAllData.Where(x => x.Propcodi > 0).Select(x => x.Propcodi.Value).ToList());
                lConcepcodi.AddRange(listaAllData.Where(x => x.Concepcodi > 0).Select(x => x.Concepcodi.Value).ToList());
            }

            string famcodis = string.Join(",", lFamcodi.Distinct());
            string catecodis = string.Join(",", lCatecodi.Distinct());
            string propcodis = string.Join(",", lPropcodi.Distinct());
            string concepcodis = string.Join(",", lConcepcodi.Distinct());

            //Obtener datos
            FTReporteExcel objRpt = ListarReporteDatoHistoricoParam(-1, idEtapa, idEmpresa, famcodis, catecodis, propcodis, concepcodis, tipocodis,
                                                        historico, flagFormulaEnValor, fechaVigIni, fechaVigFin, estado, incluirData, true, esReporteExcel);

            //asignar id ficha para cada equipo columna
            foreach (var item in objRpt.ListaEqRpt)
            {
                var objFicha = listaFichaTmp.Find(x => x.Famcodi == item.EqColumna.Famcodi && x.Catecodi == item.EqColumna.Catecodi);
                if (objFicha != null)
                {
                    item.IdFT = objFicha.Fteqcodi;
                }
                else
                {
                }
            }

            return objRpt;
        }

        public void GenerarReporteHistoricoFTExcel(int idEtapa, string idFT, string idEmpresa, string tipocodis,
                                                        bool historico, bool flagFormulaEnValor, DateTime fechaVigIni, DateTime fechaVigFin, string estado,
                                                        string pathLogo, out string ruta, out string fileName)
        {
            //Obtener datos
            FTReporteExcel objRpt = ListarElementoReporteHistoricoFT(idEtapa, idFT, idEmpresa, tipocodis,
                                                                    historico, flagFormulaEnValor, fechaVigIni, fechaVigFin, estado, true, true);

            List<FTReporteExcel> listaRpt = ListarReporteXHojaHistoricoParam(objRpt, true);
            AgregarDetalleReporteHistoricoFTExcel(listaRpt);

            //validar datos
            if (!listaRpt.Any()) throw new ArgumentException("No existen datos para exportar el reporte.");

            //Generar archivo excel
            DateTime fechaConsulta = DateTime.Now;
            ruta = "";

            using (ExcelPackage xlPackage = new ExcelPackage())
            {
                foreach (var objRptHoja in listaRpt)
                {
                    objRptHoja.FechaConsulta = fechaConsulta;
                    objRptHoja.Modulo = ConstantesFichaTecnica.ModuloReporteHistoricoFT; // revision derivación
                    GenerarHojaExcelFichaTecnicaDetalle(xlPackage, pathLogo, objRptHoja);
                }

                ruta = System.IO.Path.GetTempFileName();
                xlPackage.SaveAs(new FileInfo(ruta));
            }

            fileName = string.Format("ReporteHistórico_FichaTécnica_{0}.xlsx", fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaYMDHora));
        }

        private void AgregarDetalleReporteHistoricoFTExcel(List<FTReporteExcel> listaRpt)
        {
            foreach (var objRpt in listaRpt)
            {
                FtFictecXTipoEquipoDTO fichaTecnica = GetFichaTecnica(objRpt.IdFT);

                //Estructura arbol
                List<FtFictecItemDTO> listaTreeItems, listaAllItems;
                List<TreeItemFichaTecnica> listaItemsJson;

                FTFiltroReporteExcel objFiltro1 = GetFichaYDatosXEquipoOModo(objRpt.IdFT, 0, false, ConstantesFichaTecnica.INTRANET, DateTime.Today);
                ListarTreeItemsFichaTecnica(objFiltro1, out listaAllItems, out listaTreeItems, out listaItemsJson);

                //Data
                foreach (var objEqRpt in objRpt.ListaEqRpt)
                {
                    var objEqColumna = objEqRpt.EqColumna;

                    //datos que no son de propequi ni grupodat
                    FTFiltroReporteExcel objFiltro2 = GetFichaYDatosXEquipoOModo(objRpt.IdFT, objEqColumna.Idelemento, false, ConstantesFichaTecnica.INTRANET, DateTime.Today);
                    ActualizarEmpresaTTIE(objFiltro2, objEqColumna.Idempresaelemento);

                    //obtener estructura
                    ListarTreeItemsFichaTecnica(objFiltro2, out List<FtFictecItemDTO> listaAllItemsTmp, out List<FtFictecItemDTO> listaTreeItemsTmp, out List<TreeItemFichaTecnica> listaItemsJsonTmp);

                    //actualizar grilla con bd
                    if (objEqColumna != null)
                    {
                        var listaDatoXEq = objEqRpt.ListaDataRptHist;
                        foreach (var objItemFicha in listaAllItemsTmp)
                        {
                            var objDato = listaDatoXEq.Find(x => x.CodParam == objItemFicha.Propcodi || x.CodParam == objItemFicha.Concepcodi);
                            if (objDato != null)
                            {
                                objDato.CheckCeroDesc = "";
                                if (EsTipoNumero(objDato.Tipo) && objDato.Valor == "0") objDato.CheckCeroDesc = (objDato.CheckCero == 1 ? "SÍ" : "NO");

                                objItemFicha.EsValorVigente = objDato.EsValorVigente;
                                objItemFicha.Valor = objDato.Valor;
                                objItemFicha.ValorFormula = objDato.ValorFormula;
                                objItemFicha.FechaVigenciaDesc = objDato.FechaVigenciaDesc;
                                objItemFicha.Itemcomentario = objDato.Comentario;
                                objItemFicha.CheckCeroCorrecto = objDato.CheckCero;
                                objItemFicha.CheckCeroCorrectoDesc = objDato.CheckCeroDesc;
                                objItemFicha.ItemSustento = objDato.Sustento;
                                objItemFicha.ItemUsuariomodif = objDato.Usuariomodif;
                                objItemFicha.ItemFechamodif = objDato.Fechamodif;
                            }
                            else
                            {
                                objItemFicha.EsValorVigente = true;
                                /*objItemFicha.Valor = "";
                                objItemFicha.Itemcomentario = "";
                                objItemFicha.CheckCeroCorrecto = 0;
                                objItemFicha.ItemSustento = "";
                                objItemFicha.ItemUsuariomodif = "";
                                objItemFicha.ItemFechamodif = "";*/
                            }
                        }
                    }

                    objEqRpt.ListaTreeData = listaAllItemsTmp; // parte derecha (contiene FITCFGCODI)
                }

                //Ficha
                List<FtFictecItemDTO> listaDataXNivel = listaTreeItems.Where(x => x.Nivel == 1).ToList();
                int colspan = ProfundidadHorizontalRecursivo(listaDataXNivel);
                int colIniData = colspan + 1;
                int rowIniItem = 7;

                objRpt.FichaTecnica = fichaTecnica;
                objRpt.Ambiente = ConstantesFichaTecnica.INTRANET;

                objRpt.ListaTreeItems = listaTreeItems;
                objRpt.ListaAllItems = listaAllItems; //parte izquierda
                objRpt.ListaTreeData = new List<FtFictecItemDTO>();
                objRpt.ColIniData = colIniData;
                objRpt.RowIniItem = rowIniItem;
            }
        }

        public void GenerarReporteConexIntegModifXEnvioHistorico(string rutaCarpeta, string pathLogo, int ftenvcodi, string fteeqcodis, int estado, int ambiente, int versionEnvio, string faremcodis, bool esHistorico, bool esAdmin, out string fileName)
        {
            List<FTReporteExcel> listaHoja = ListarHojaFormatoConexIntegModifConRevision(ftenvcodi, fteeqcodis, null, ambiente, versionEnvio, faremcodis, 0, esHistorico, esAdmin);

            //Exportación a Excel
            DateTime fechaConsulta = DateTime.Now;
            fileName = string.Format("ReporteHistórico_{0}_{1}.xlsx", ftenvcodi.ToString(), fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaYMDHora));

            string file = rutaCarpeta + fileName;
            FileInfo newFile = new FileInfo(file);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                foreach (var objRpt in listaHoja)
                {
                    objRpt.FechaConsulta = fechaConsulta;
                    objRpt.Modulo = ConstantesFichaTecnica.ModuloEnviosHistorico; //reportes histórico de envios de ficha
                    GenerarHojaExcelFichaTecnicaDetalle(xlPackage, pathLogo, objRpt);
                }

                xlPackage.Save();
            }
        }

        public void GenerarFormatoRevisionContenidoHistorico(string rutaCarpeta, string pathLogo, int ftenvcodi, int tipo, string faremcodis, int idAreaRevision, bool esHistorico, bool esAdmin, out string fileName)
        {
            FTRevisionContenidoExcel reporteHoja = ListarHojaFormatoRevisionContenido(ftenvcodi, tipo, faremcodis, idAreaRevision, esHistorico, esAdmin);

            //Exportación a Excel
            DateTime fechaConsulta = DateTime.Now;
            fileName = string.Format("ReporteHistórico_{0}_{1}.xlsx", ftenvcodi.ToString(), fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaYMDHora));

            string file = rutaCarpeta + fileName;
            FileInfo newFile = new FileInfo(file);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                reporteHoja.FechaConsulta = fechaConsulta;

                if (tipo == ConstantesFichaTecnica.FormatoOperacionComercial)
                    GenerarArchivoExcelRevisionContenido(xlPackage, pathLogo, reporteHoja, idAreaRevision);
                else
                    GenerarArchivoExcelRevisionContenidoBajaMO(xlPackage, pathLogo, reporteHoja, idAreaRevision);

                xlPackage.Save();
            }
        }

        #endregion

        #region Generador de Reporte Histórico por parámetros 

        public void ListarFiltroReporteParametroHist(int tipoEmpresaFT, int idEtapa, out List<SiEmpresaDTO> listaEmp)
        {
            //equipos
            List<FtExtEnvioDTO> listaEqYEnvio = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqAprobado("-1", idEtapa);
            listaEqYEnvio = listaEqYEnvio.GroupBy(x => new { x.Emprcodi, x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados
            /*
            //filtro tipo de empresa FT
            List<int> lFamcodi = new List<int>();
            List<int> lCatecodi = new List<int>();
            if (tipoEmpresaFT == 10)  //Generación
            {
                lFamcodi = new List<int>() { 2, 3, 38, 36, 39, 4, 37, 5 };
                lCatecodi = new List<int>() { 2, 3, 4, 9, 5, 6 };
            }
            if (tipoEmpresaFT == 11) //Transmisión (Subestación)
            {
                lFamcodi = new List<int>() { 1, 16, 51, 28, 24, 26, 27, 47, 10, 9 };
            }
            if (tipoEmpresaFT == 12) //Transmisión (Líneas)
            {
                lFamcodi = new List<int>() { 8 };
            }
            if (tipoEmpresaFT == 13) //Transmisión (Equipos de compensación)
            {
                lFamcodi = new List<int>() { 1, 14, 11, 12, 13, 15 };
            }
            */
            //empresas
            if (idEtapa == ConstantesFichaTecnica.EtapaModificacion)
            {
                listaEmp = ListarEmpresasxFamilia("-1", "-1");
            }
            else
            {
                //equipos
                listaEmp = listaEqYEnvio.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO()
                {
                    Emprcodi = x.Key,
                    Emprnomb = x.First().Emprnomb
                }).ToList();
            }
        }

        public void ListarConceptoYPropiedadXAgrupacion(int agrupcodi, string famcodis, string catecodis,
            out List<EqPropiedadDTO> listaProp, out List<PrConceptoDTO> listaCnp)
        {
            listaProp = new List<EqPropiedadDTO>();
            listaCnp = new List<PrConceptoDTO>();

            //propiedades y conceptos
            if (agrupcodi > 0)
            {
                var listaAgrupacionConcepto = (new MigracionesAppServicio()).GetByCriteriaPrAgrupacionConceptos(ConstantesMigraciones.Activo, agrupcodi);

                listaProp = listaAgrupacionConcepto.Where(x => x.Propcodi > 0).Select(x => new EqPropiedadDTO()
                {
                    Propcodi = x.Propcodi ?? 0,
                    Propnomb = x.Concepdesc,
                    Famcodi = x.Famcodi ?? 0,
                }).ToList();

                listaCnp = listaAgrupacionConcepto.Where(x => x.Concepcodi > 0).Select(x => new PrConceptoDTO()
                {
                    Concepcodi = x.Concepcodi ?? 0,
                    Concepdesc = x.Concepdesc,
                    Catecodi = x.Catecodi ?? 0,
                }).ToList();
            }
            else
            {
                listaProp = FactorySic.GetEqPropiedadRepository().List().Where(x => x.Propactivo == 1).ToList();
                listaCnp = FactorySic.GetPrConceptoRepository().List().Where(x => x.Concepactivo == "1").ToList();
            }

            //aplicar filtro
            List<int> lFamcodi = new List<int>();
            if (!string.IsNullOrEmpty(famcodis)) lFamcodi = famcodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();
            List<int> lCatecodi = new List<int>();
            if (!string.IsNullOrEmpty(catecodis)) lCatecodi = catecodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();

            var listaFamilia = FactorySic.GetEqFamiliaRepository().List();
            var listaCategoria = FactorySic.GetPrCategoriaRepository().GetByCriteria().ToList();

            listaProp = listaProp.Where(x => lFamcodi.Contains(x.Famcodi)).OrderBy(x => x.Propnomb).ToList();
            listaCnp = listaCnp.Where(x => lCatecodi.Contains(x.Catecodi)).OrderBy(x => x.Concepdesc).ToList();

            foreach (var item in listaProp)
            {
                var regFam = listaFamilia.Find(x => x.Famcodi == item.Famcodi) ?? new EqFamiliaDTO();
                item.Propnomb = item.Propnomb + "_" + (regFam.Famabrev ?? "").Trim() + "_" + item.Propcodi;
            }
            foreach (var item in listaCnp)
            {
                var regCnp = listaCategoria.Find(x => x.Catecodi == item.Catecodi) ?? new PrCategoriaDTO();
                item.Concepdesc = item.Concepdesc + "_" + (regCnp.Cateabrev ?? "").Trim() + "_" + item.Concepcodi;
            }
        }

        private List<FtExtEnvioDTO> ListarEqEnvioFromPropequi(DateTime fechaIni, DateTime fechaFin, string propcodis, string famcodis)
        {
            //consulta a base de datos
            var listaPropequi = new List<EqPropequiDTO>();
            if (!string.IsNullOrEmpty(propcodis) && !string.IsNullOrEmpty(famcodis))
            {
                List<int> lPropcodi = new List<int>();
                if (!string.IsNullOrEmpty(propcodis)) lPropcodi = propcodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                List<int> lFamcodi = new List<int>();
                if (!string.IsNullOrEmpty(famcodis)) lFamcodi = famcodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();

                if (lPropcodi.Count + lFamcodi.Count > 500) throw new ArgumentException("Debe reducir la cantidad de filtros seleccionados.");

                listaPropequi = FactorySic.GetEqPropequiRepository().ListarEquipoConValorModificado(fechaIni, fechaFin, propcodis, famcodis);

                //agregar propiedades vacías
                if (lPropcodi.Any())
                {
                    var listaPropiedad = FactorySic.GetEqPropiedadRepository().ListByIds(string.Join(",", lPropcodi)).Where(x => x.Famcodi > 0).ToList();
                    var listaTipoFamilia = listaPropiedad.Select(x => x.Famcodi).Distinct().ToList();
                    var listaEqBD = FactorySic.GetEqEquipoRepository().ListarEquipoXAreasXTipoEquipos(string.Join(",", listaTipoFamilia), "-1");

                    //buscar datos faltantes
                    foreach (var itemProp in listaPropiedad)
                    {
                        var listaEqXTipo = listaEqBD.Where(x => x.Famcodi == itemProp.Famcodi).ToList();

                        foreach (var itemEq in listaEqXTipo)
                        {
                            //si el equipo no tiene esa propiedad en BD entonces crear un vacio
                            var propequiExiste = listaPropequi.Find(x => x.Equicodi == itemEq.Equicodi && x.Propcodi == itemProp.Propcodi);
                            if (propequiExiste == null)
                            {
                                var regPropequiFicticio = new EqPropequiDTO()
                                {
                                    Equicodi = itemEq.Equicodi,
                                    Famcodi = itemProp.Famcodi,
                                    Propcodi = itemProp.Propcodi,
                                    Emprcodi = itemEq.Emprcodi ?? 0,
                                    Emprnomb = itemEq.Emprnomb,
                                    Areanomb = itemEq.Areanomb,
                                    Equinomb = itemEq.Equinomb,
                                    Equiestado = itemEq.Equiestado,
                                    Fechapropequi = null,
                                };
                                listaPropequi.Add(regPropequiFicticio);
                            }
                        }
                    }
                }
            }

            //generar envios eq
            List<FtExtEnvioDTO> listaEqYEnvio = new List<FtExtEnvioDTO>();
            int correlativo = 1;
            foreach (var item in listaPropequi)
            {
                listaEqYEnvio.Add(new FtExtEnvioDTO()
                {
                    Fteeqcodi = correlativo,
                    Equicodi = item.Equicodi,
                    Famcodi = item.Famcodi,
                    Emprcodi = item.Emprcodi,
                    Emprnomb = item.Emprnomb,
                    Idelemento = item.Equicodi,
                    Areaelemento = item.Areanomb,
                    Nombreelemento = item.Equinomb,
                    Estadoelemento = item.Equiestado,
                    Ftenvfecvigencia = item.Fechapropequi,
                    EstadoelementoDesc = EquipamientoHelper.EstadoDescripcion(item.Equiestado)
                });

                correlativo++;
            }

            return listaEqYEnvio;
        }

        private List<FtExtEnvioDTO> ListarEqEnvioFromGrupodat(DateTime fechaIni, DateTime fechaFin, string concepcodis, string catecodis, bool formulaEnValor)
        {
            //consulta a base de datos
            var listaGrupodat = new List<PrGrupodatDTO>();
            if (!string.IsNullOrEmpty(concepcodis) && !string.IsNullOrEmpty(catecodis))
            {
                List<int> lConcepcodi = new List<int>();
                if (!string.IsNullOrEmpty(concepcodis)) lConcepcodi = concepcodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();
                List<int> lCatecodi = new List<int>();
                if (!string.IsNullOrEmpty(catecodis)) lCatecodi = catecodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();

                if (lConcepcodi.Count + lCatecodi.Count > 500) throw new ArgumentException("Debe reducir la cantidad de filtros seleccionados.");

                listaGrupodat = FactorySic.GetPrGrupodatRepository().ListarGrupoConValorModificado(fechaIni, fechaFin, concepcodis, catecodis);

                //agregar conceptos vacíos
                if (lConcepcodi.Any())
                {
                    var listaConcepto = FactorySic.GetPrConceptoRepository().GetByCriteria(string.Join(",", lConcepcodi)).Where(x => x.Catecodi > 1).ToList();
                    var listaCategoria = listaConcepto.Select(x => x.Catecodi).Distinct().ToList();
                    if (listaCategoria.Any())
                    {
                        var listaGrBD = FactorySic.GetPrGrupoRepository().List(string.Join(",", listaCategoria));

                        //buscar datos faltantes
                        foreach (var itemCnp in listaConcepto)
                        {
                            var listaGrXTipo = listaGrBD.Where(x => x.Catecodi == itemCnp.Catecodi).ToList();

                            foreach (var itemGr in listaGrXTipo)
                            {
                                //si el grupo no tiene ese concepto en BD entonces crear un vacio
                                var propequiExiste = listaGrupodat.Find(x => x.Grupocodi == itemGr.Grupocodi && x.Concepcodi == itemCnp.Concepcodi);
                                if (propequiExiste == null)
                                {
                                    var regGrupodatFicticio = new PrGrupodatDTO()
                                    {
                                        Grupocodi = itemGr.Grupocodi,
                                        Catecodi = itemCnp.Catecodi,
                                        Concepcodi = itemCnp.Concepcodi,
                                        ConcepTipo = itemCnp.Conceptipo,
                                        Emprcodi = itemGr.Emprcodi ?? 0,
                                        Emprnomb = itemGr.Emprnomb,
                                        Areanomb = itemGr.Areanomb,
                                        GrupoNomb = itemGr.Gruponomb,
                                        Grupoestado = itemGr.GrupoEstado,
                                        Fechadat = null,
                                    };
                                    listaGrupodat.Add(regGrupodatFicticio);
                                }
                            }
                        }
                    }
                }
            }

            //cambiar fecha de vigencia
            if (formulaEnValor)
            {
                //grupos con data
                var listaGrupocodi = listaGrupodat.Select(x => x.Grupocodi).Distinct().ToList();
                foreach (var grupocodi in listaGrupocodi)
                {
                    var listaDatXGr = listaGrupodat.Where(x => x.Grupocodi == grupocodi && x.Fechadat != null).ToList();

                    //conceptos que son formula
                    var listaConcepcodiConFormula = listaDatXGr.Where(x => x.ConcepTipo == "FORMULA").Select(x => x.Concepcodi).Distinct().ToList();

                    //fechas por grupo
                    var listaFecha = listaDatXGr.Select(x => x.Fechadat).Distinct();
                    foreach (var fecha in listaFecha)
                    {
                        var objDatDefault = listaGrupodat.FirstOrDefault(x => x.Grupocodi == grupocodi && x.Fechadat == fecha);

                        var listaDatXGrXFec = listaDatXGr.Where(x => x.Grupocodi == grupocodi && x.Fechadat <= fecha).OrderByDescending(x => x.Fechadat).ToList();

                        foreach (var concepcodi in listaConcepcodiConFormula)
                        {
                            var objExiste = listaDatXGrXFec.Find(x => x.Concepcodi == concepcodi && x.Fechadat == fecha);
                            var objVigente = listaDatXGrXFec.Find(x => x.Concepcodi == concepcodi);
                            if (objExiste == null && objVigente != null)
                            {
                                //si para la fecha no hay formula entonces agregarle
                                var regGrupodatFicticio = new PrGrupodatDTO()
                                {
                                    Grupocodi = objDatDefault.Grupocodi,
                                    Catecodi = objDatDefault.Catecodi,
                                    Concepcodi = objDatDefault.Concepcodi,
                                    ConcepTipo = objDatDefault.ConcepTipo,
                                    Emprcodi = objDatDefault.Emprcodi,
                                    Emprnomb = objDatDefault.Emprnomb,
                                    Areanomb = objDatDefault.Areanomb,
                                    GrupoNomb = objDatDefault.GrupoNomb,
                                    Grupoestado = objDatDefault.Grupoestado,
                                    Fechadat = fecha,
                                    Formuladat = objVigente.Formuladat,
                                };
                                listaGrupodat.Add(regGrupodatFicticio);
                            }
                        }
                    }
                }
            }

            //generar envios eq
            List<FtExtEnvioDTO> listaEqYEnvio = new List<FtExtEnvioDTO>();
            int correlativo = 500000;
            foreach (var item in listaGrupodat)
            {
                listaEqYEnvio.Add(new FtExtEnvioDTO()
                {
                    Fteeqcodi = correlativo,
                    Grupocodi = item.Grupocodi,
                    Emprcodi = item.Emprcodi,
                    Catecodi = item.Catecodi,
                    Emprnomb = item.Emprnomb,
                    Idelemento = item.Grupocodi,
                    Areaelemento = item.Areanomb,
                    Nombreelemento = item.GrupoNomb,
                    Estadoelemento = item.Grupoestado,
                    Ftenvfecvigencia = item.Fechadat,
                    EstadoelementoDesc = EquipamientoHelper.EstadoDescripcion(item.Grupoestado),
                });

                correlativo++;
            }

            return listaEqYEnvio;
        }

        private void EvaluarFormulaEnValor(List<FTFilaReporteHistParametro> listaDataCompleto)
        {
            //parámetros que tienen fórmulas
            var listaDataGr = listaDataCompleto.Where(x => x.FechaVigencia != null && x.Grupocodi > 0).Where(x => x.Tipo == "FORMULA").ToList();

            //fechas
            var listaFechaData = listaDataGr.Select(x => x.FechaVigencia.Value).Distinct().OrderBy(x => x).ToList();
            foreach (var fechaVig in listaFechaData)
            {
                List<PrGrupoDTO> listaModoXFecha = FactorySic.GetPrGrupoRepository().ListadoModosFuncionalesCostosVariables(fechaVig, ConstantesAppServicio.SI);
                List<PrGrupodatDTO> lParametrosGenerales = FactorySic.GetPrGrupodatRepository().ParametrosGeneralesPorFecha(fechaVig);
                List<PrGrupodatDTO> lParametrosFuncionales = FactorySic.GetPrGrupodatRepository().ParametrosPorFecha(fechaVig); //parametros de todos los modos, grupos termicos y central

                //grupos por cada fecha
                var listaGrupocodiXFecha = listaDataGr.Where(x => x.FechaVigencia == fechaVig).Select(x => x.Grupocodi.Value).Distinct().ToList();
                foreach (var grupocodi in listaGrupocodiXFecha)
                {
                    PrGrupoDTO oGrupoFunc = listaModoXFecha.Find(x => x.Grupocodi == grupocodi);
                    if (oGrupoFunc == null) oGrupoFunc = GetByIdPrGrupo(grupocodi);

                    //parametros del grupo seleccionado para la fecha
                    var listaDataXFechaXGr = listaDataGr.Where(x => x.FechaVigencia == fechaVig && x.Grupocodi == grupocodi).ToList();
                    if (oGrupoFunc != null)
                    {
                        int grupoCodi = oGrupoFunc.Grupocodi; //codigo modo
                        int grupoPadre = oGrupoFunc.Grupopadre.GetValueOrDefault(-100) > 0 ? oGrupoFunc.Grupopadre.Value : -101; //codigo grupo termico
                        int grupoCentral = oGrupoFunc.GrupoCentral > 0 ? oGrupoFunc.GrupoCentral : -100; //codigo central

                        Base.Tools.n_parameter paramXModo = new Base.Tools.n_parameter();

                        //Necesita conocer los parametros generales que posiblemente seran usados en los parametos funcionales
                        foreach (PrGrupodatDTO drParam in lParametrosGenerales)
                        {
                            paramXModo.SetData(drParam.Concepabrev.Trim(), drParam.Formuladat.Trim());
                        }

                        List<PrGrupodatDTO> lParametrosFuncionalesParaElModo = lParametrosFuncionales.Where(x => x.Grupocodi == grupoCodi || x.Grupocodi == grupoPadre || x.Grupocodi == grupoCentral).ToList();
                        foreach (PrGrupodatDTO drLast in lParametrosFuncionalesParaElModo)
                        {
                            paramXModo.SetData(drLast.Concepabrev.Trim(), drLast.Formuladat.Trim());
                        }

                        foreach (var itemParam in listaDataXFechaXGr)
                        {
                            if (paramXModo.Contains(itemParam.AbrevParam))
                            {
                                //valor
                                itemParam.Valor = Convert.ToDecimal(paramXModo.GetEvaluate(itemParam.AbrevParam)).ToString();
                                //valor con formula
                                itemParam.ValorFormula = paramXModo.EvaluateFormula(itemParam.AbrevParam);
                            }
                        }
                    }

                }
            }

        }

        public FTReporteExcel ListarReporteDatoHistoricoParam(int tipoEmpresaFT, int idEtapa, string idEmpresas, string famcodis, string catecodis,
                                                        string propcodis, string concepcodis, string tipocodis,
                                                        bool historico, bool flagFormulaEnValor, DateTime fechaVigIni, DateTime fechaVigFin, string estado,
                                                        bool incluirData, bool esReporteFichaTecnica, bool esReporteExcel)
        {
            List<int> lEmprcodi = new List<int>();
            if (!string.IsNullOrEmpty(idEmpresas)) lEmprcodi = idEmpresas.Split(',').Select(x => Convert.ToInt32(x)).ToList();

            List<int> lFamcodi = new List<int>();
            if (!string.IsNullOrEmpty(famcodis)) lFamcodi = famcodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();
            List<int> lCatecodi = new List<int>();
            if (!string.IsNullOrEmpty(catecodis)) lCatecodi = catecodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();

            List<int> lPropcodi = new List<int>();
            if (!string.IsNullOrEmpty(propcodis)) lPropcodi = propcodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();
            List<int> lConcepcodi = new List<int>();
            if (!string.IsNullOrEmpty(concepcodis)) lConcepcodi = concepcodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();

            List<int> lstColumVisibles = new List<int>();
            if (!string.IsNullOrEmpty(tipocodis)) lstColumVisibles = tipocodis.Split(',').Select(x => Convert.ToInt32(x)).ToList();

            if (lPropcodi.Count + lConcepcodi.Count > 500) throw new ArgumentException("Debe reducir la cantidad de filtros seleccionados.");

            //data maestra
            var listaFamilia = FactorySic.GetEqFamiliaRepository().List();
            var listaCategoria = FactorySic.GetPrCategoriaRepository().GetByCriteria();

            //equipos o grupos segun los filtros
            List<FtExtEnvioDTO> listaEqYEnvio = new List<FtExtEnvioDTO>();

            //filtrar por fecha
            DateTime fechaConsulta = fechaVigIni; //cuando es consulta fechaVigIni es igual a fechaVigFin
            if (idEtapa == ConstantesFichaTecnica.EtapaModificacion)
            {
                //datos
                if (historico)
                {
                    listaEqYEnvio.AddRange(ListarEqEnvioFromPropequi(fechaVigIni, fechaVigFin, propcodis, famcodis));
                    listaEqYEnvio.AddRange(ListarEqEnvioFromGrupodat(fechaVigIni, fechaVigFin, concepcodis, catecodis, flagFormulaEnValor));
                }
                else
                {
                    listaEqYEnvio.AddRange(ListarEqEnvioFromPropequi(new DateTime(1990, 1, 1), fechaConsulta, propcodis, famcodis));
                    listaEqYEnvio.AddRange(ListarEqEnvioFromGrupodat(new DateTime(1990, 1, 1), fechaConsulta, concepcodis, catecodis, flagFormulaEnValor));
                }

                //caso especial
                if (esReporteFichaTecnica)
                {
                    if (famcodis == ConstantesHorasOperacion.IdTipoTermica.ToString())
                    {
                        //1. a los equipos buscarles su grupocentral
                        List<GenericoDTO> listaEqCentral = new List<GenericoDTO>();
                        foreach (var item in listaEqYEnvio.GroupBy(x => x.Equicodi))
                        {
                            if (item.Key > 0)
                            {
                                var grupocodiCentral = ObtenerGrupoCentral(item.Key ?? 0);
                                listaEqCentral.Add(new GenericoDTO() { Entero1 = item.Key ?? 0, Entero2 = grupocodiCentral });
                            }
                        }

                        //2. a los grupos setearles su equicodi
                        foreach (var item in listaEqYEnvio.Where(x => x.Grupocodi > 0).ToList())
                        {
                            var regCentral = listaEqCentral.Find(x => x.Entero2 == item.Grupocodi);
                            if (regCentral != null)
                            {
                                item.Equicodi = regCentral.Entero1;

                                var regDatosEquipo = listaEqYEnvio.Find(x => x.Equicodi == item.Equicodi);
                                if (regDatosEquipo != null)
                                {
                                    item.Idelemento = regDatosEquipo.Idelemento;
                                    item.Areaelemento = regDatosEquipo.Areaelemento;
                                    item.Nombreelemento = regDatosEquipo.Nombreelemento;
                                    item.Emprnomb = regDatosEquipo.Emprnomb;
                                    item.EstadoelementoDesc = regDatosEquipo.EstadoelementoDesc;
                                }
                            }
                        }

                        //3. setear nulo a los grupos
                        foreach (var item in listaEqYEnvio)
                        {
                            item.Famcodi = ConstantesHorasOperacion.IdTipoTermica;
                            item.Catecodi = null;
                            item.Grupocodi = 0; //luego se asignará el grupo central
                        }
                    }
                }

                //columnas
                if (historico)
                {
                    listaEqYEnvio = listaEqYEnvio.Where(x => x.Ftenvfecvigencia >= fechaVigIni && x.Ftenvfecvigencia <= fechaVigFin).ToList();

                    //si se repite el equipo, definir el vigente para pintar en blanco y los demmás en celeste
                    foreach (var itemLista in listaEqYEnvio.OrderByDescending(x => x.Ftenvfecvigencia).GroupBy(x => new { x.Equicodi, x.Grupocodi }))
                    {
                        var objPrimero = itemLista.First();
                        objPrimero.EsEqVigente = true;
                    }
                }
                else
                {
                    listaEqYEnvio = listaEqYEnvio.Where(x => x.Ftenvfecvigencia <= fechaVigIni || x.Ftenvfecvigencia == null).OrderByDescending(x => x.Ftenvfecvigencia)
                                    .GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados
                    foreach (var item in listaEqYEnvio)
                    {
                        item.EsEqVigente = true;
                    }
                }

                listaEqYEnvio = listaEqYEnvio.Where(x => x.Estadoelemento != ConstantesAppServicio.Proyecto).ToList(); //no se considera a los equipos en proyecto
            }
            else
            {
                listaEqYEnvio = FactorySic.GetFtExtEnvioRepository().ListarEnviosYEqAprobado("-1", idEtapa)
                                                        .Where(x => x.Ftenvfecvigencia != null).ToList();
                foreach (var item in listaEqYEnvio)
                {
                    FormatearFtExtEnvio(item, new List<FtExtEnvioEqDTO>(), new List<FtExtEnvioVersionDTO>());
                    item.EstadoelementoDesc = EquipamientoHelper.EstadoDescripcion(item.Estadoelemento);
                    item.EsEqVigente = true;
                }

                listaEqYEnvio = listaEqYEnvio.OrderByDescending(x => x.Ftenvfecvigencia.Value)
                                .GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.First()).ToList(); //quitar duplicados
            }

            //filtros
            listaEqYEnvio = listaEqYEnvio.Where(x => estado == "-1" || x.Estadoelemento == estado).ToList(); //estado
            listaEqYEnvio = listaEqYEnvio.Where(x => lFamcodi.Contains(x.Famcodi.GetValueOrDefault(0))
                                                    || lCatecodi.Contains(x.Catecodi.GetValueOrDefault(0))).ToList(); //tipos de equipo o categoria de grupos

            //datos TTIE
            bool soloMostrarEmpresaActual = !historico && idEtapa == ConstantesFichaTecnica.EtapaModificacion;
            ListarTTIEEmpresaEquipoGrupo(listaEqYEnvio, out List<SiHisempeqDataDTO> listaHistEq, out List<SiHisempgrupoDataDTO> listaHistGr);

            //setear empresa vigente para el equipo
            ActualizarEmpresaListaEqEnvio(listaEqYEnvio, listaHistEq, listaHistGr, soloMostrarEmpresaActual, fechaConsulta);
            listaEqYEnvio = listaEqYEnvio.Where(x => idEmpresas == "-1" || lEmprcodi.Contains(x.Emprcodi)).ToList(); //empresa

            //cuando es ficha tecnica no se consideran los grupos térmicos a excepción del modo de operación
            if (esReporteFichaTecnica)
            {
                if (famcodis == ConstantesHorasOperacion.IdTipoTermica.ToString())
                {
                    foreach (var item in listaEqYEnvio.GroupBy(x => x.Equicodi))
                    {
                        if (item.Key > 0)
                        {
                            var grupocodiCentral = ObtenerGrupoCentral(item.Key ?? 0);
                            var sublista = item.ToList();
                            foreach (var itemE in sublista)
                            {
                                itemE.Grupocodi = grupocodiCentral;
                                //itemE.Catecodi = 4; //C_TERMICA	CENTRAL TERMICA
                            }
                        }
                    }
                }
            }

            List<int> lEquicodi = listaEqYEnvio.Select(x => x.Equicodi.GetValueOrDefault(0)).Distinct().ToList();
            List<int> lGrupocodi = listaEqYEnvio.Select(x => x.Grupocodi.GetValueOrDefault(0)).Distinct().ToList();

            //obtener data
            List<PrConceptoDTO> listaConcepto = new List<PrConceptoDTO>();

            if (lGrupocodi.Any() && lConcepcodi.Any())
            {
                listaConcepto = FactorySic.GetPrConceptoRepository().GetByCriteria(string.Join(",", lConcepcodi));
            }

            List<EqPropiedadDTO> listaPropiedad = new List<EqPropiedadDTO>();
            if (lEquicodi.Any() && lPropcodi.Any())
            {
                listaPropiedad = FactorySic.GetEqPropiedadRepository().ListByIds(string.Join(",", lPropcodi));
            }

            //generar reporte
            List<FTFiltroReporteExcel> listaEqRpt = new List<FTFiltroReporteExcel>();
            foreach (var reg in listaEqYEnvio) //agrupamiento de equicodi, grupocodi, fechavigencia
            {
                var listaReporte = new List<FTFilaReporteHistParametro>();

                //fecha para obtener datos
                DateTime? fechaVigEq = reg.Ftenvfecvigencia;

                //formatear datos
                reg.Emprnomb = (reg.Emprnomb ?? "").Trim();
                if (reg.Emprcodi <= 0) reg.Emprnomb = "";

                reg.Areaelemento = (reg.Areaelemento ?? "").Trim();
                if (reg.Areaelemento == "(NO-DEF)" || reg.Areaelemento == "(TODOS)") reg.Areaelemento = "";

                reg.Nombreelemento = (reg.Nombreelemento ?? "").Trim();
                if (reg.Idelemento <= 0) reg.Nombreelemento = "";

                if (incluirData)
                {
                    //equipos
                    if (reg.Equicodi >= 0 && listaPropiedad.Any())
                    {
                        var listaPropequiXEq = new List<EqPropequiDTO>();
                        if (fechaVigEq != null) listaPropequiXEq = FactorySic.GetEqPropequiRepository().ListarValoresVigentesPropiedades(fechaVigEq.Value, reg.Equicodi.Value.ToString(), "-1", "-1", string.Join(",", lPropcodi), string.Empty, "-1");

                        //si es reporte web y tiene check histórico, entonces solo mostrar las modificaciones.
                        //Cuando es excel y tiene check histórico, entonces mostrar las modificaciones y la data vigente para la fecha de consulta.
                        if (!esReporteExcel && historico)
                        {
                            listaPropequiXEq = listaPropequiXEq.Where(x => x.Fechapropequi >= fechaVigIni && x.Fechapropequi <= fechaVigFin).ToList();
                        }

                        foreach (var item in listaPropequiXEq) EquipamientoAppServicio.FormatearPropequi(item);


                        foreach (var regProp in listaPropiedad.Where(x => x.Famcodi == reg.Famcodi).ToList())
                        {
                            var dat = listaPropequiXEq.Find(x => x.Equicodi == reg.Equicodi && x.Propcodi == regProp.Propcodi);

                            //caso 1: sí hay data
                            if (dat != null)
                            {
                                ObtenerEmpresaVigenteXEquipo(reg.Equicodi.Value, dat.Fechapropequi.Value, reg.Emprcodi, reg.Emprnomb, listaHistEq,
                                                        soloMostrarEmpresaActual, fechaConsulta, out int emprcodiVigente, out string emprnombVigente);

                                var objDato = new FTFilaReporteHistParametro()
                                {
                                    Empresa = (emprnombVigente ?? "").Trim(),
                                    Central = (reg.Areaelemento ?? "").Trim(),
                                    Fteeqcodi = reg.Fteeqcodi,
                                    Elemento = (reg.Nombreelemento ?? "").Trim(),
                                    CodParam = regProp.Propcodi,
                                    NombParam = (regProp.Propnomb ?? "").Trim(),
                                    NombParamFT = (regProp.Propnombficha ?? "").Trim(),
                                    Unidad = (regProp.Propunidad ?? "").Trim(),
                                    Tipo = (regProp.Proptipo ?? "").Trim(),
                                    FechaVigencia = dat.Fechapropequi.Value,
                                    FechaVigenciaDesc = dat.FechapropequiDesc,
                                    Valor = dat.Valor,
                                    CheckCero = dat.Propequicheckcero ?? 0,
                                    Comentario = dat.Propequicomentario,
                                    Sustento = dat.Propequisustento,
                                    Usuariomodif = dat.UltimaModificacionUsuarioDesc,
                                    Fechamodif = dat.UltimaModificacionFechaDesc,
                                    EsArchivoValor = EsTipoArchivo(regProp.Proptipo),
                                    Equicodi = reg.Equicodi,
                                };

                                objDato.CheckCeroDesc = "";
                                if (EsTipoNumero(objDato.Tipo) && objDato.Valor == "0") objDato.CheckCeroDesc = (objDato.CheckCero == 1 ? "SÍ" : "NO");

                                listaReporte.Add(objDato);
                            }
                            else
                            {
                                var objDato = new FTFilaReporteHistParametro()
                                {
                                    Empresa = (reg.Emprnomb ?? "").Trim(),
                                    Central = (reg.Areaelemento ?? "").Trim(),
                                    Fteeqcodi = reg.Fteeqcodi,
                                    Elemento = (reg.Nombreelemento ?? "").Trim(),
                                    CodParam = regProp.Propcodi,
                                    NombParam = (regProp.Propnomb ?? "").Trim(),
                                    NombParamFT = (regProp.Propnombficha ?? "").Trim(),
                                    Unidad = (regProp.Propunidad ?? "").Trim(),
                                    Tipo = (regProp.Proptipo ?? "").Trim(),
                                    FechaVigencia = null,
                                    FechaVigenciaDesc = "",
                                    Valor = "",
                                    CheckCero = 0,
                                    Comentario = "",
                                    Sustento = "",
                                    Usuariomodif = "",
                                    Fechamodif = "",
                                    EsArchivoValor = EsTipoArchivo(regProp.Proptipo),
                                    Equicodi = reg.Equicodi,
                                };

                                objDato.CheckCeroDesc = "";
                                if (EsTipoNumero(objDato.Tipo) && objDato.Valor == "0") objDato.CheckCeroDesc = (objDato.CheckCero == 1 ? "SÍ" : "NO");

                                listaReporte.Add(objDato);
                            }

                        }
                    }

                    //modos de operación
                    if (reg.Grupocodi >= 0 && listaConcepto.Any())
                    {
                        var listaGrupodatXModo = new List<PrGrupodatDTO>();
                        if (fechaVigEq != null) listaGrupodatXModo = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fechaVigEq.Value, reg.Grupocodi.Value.ToString(), string.Join(",", lConcepcodi));
                        foreach (var item in listaGrupodatXModo) MigracionesAppServicio.FormatearPrGrupodat(item);

                        //si es reporte web y tiene check histórico, entonces solo mostrar las modificaciones.
                        //Cuando es excel y tiene check histórico, entonces mostrar las modificaciones y la data vigente para la fecha de consulta.
                        if (!esReporteExcel && historico)
                        {
                            listaGrupodatXModo = listaGrupodatXModo.Where(x => x.Fechadat >= fechaVigIni && x.Fechadat <= fechaVigFin).ToList();
                        }

                        int? catecodiEq = reg.Famcodi == ConstantesHorasOperacion.IdTipoTermica ? 4 : reg.Catecodi;
                        foreach (var regCnp in listaConcepto.Where(x => x.Catecodi == catecodiEq).ToList())
                        {
                            var dat = listaGrupodatXModo.Find(x => x.Grupocodi == reg.Grupocodi && x.Concepcodi == regCnp.Concepcodi);

                            //caso 1: sí hay data
                            if (dat != null)
                            {
                                ObtenerEmpresaVigenteXGrupo(reg.Grupocodi.Value, dat.Fechadat.Value, reg.Emprcodi, reg.Emprnomb, listaHistGr,
                                                        soloMostrarEmpresaActual, fechaConsulta, out int emprcodiVigente, out string emprnombVigente);

                                string central = (reg.Areaelemento ?? "").Trim();
                                if (reg.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralTermico)
                                    central = (reg.Nombreelemento ?? "").Trim();

                                var objDato = new FTFilaReporteHistParametro()
                                {
                                    Empresa = (emprnombVigente ?? "").Trim(),
                                    Central = central,
                                    Fteeqcodi = reg.Fteeqcodi,
                                    Elemento = (reg.Nombreelemento ?? "").Trim(),
                                    CodParam = regCnp.Concepcodi,
                                    NombParam = (regCnp.Concepdesc ?? "").Trim(),
                                    NombParamFT = (regCnp.Concepnombficha ?? "").Trim(),
                                    AbrevParam = (regCnp.Concepabrev ?? "").Trim(),
                                    Unidad = (regCnp.Concepunid ?? "").Trim(),
                                    Tipo = (regCnp.Conceptipo ?? "").Trim(),
                                    FechaVigencia = dat.Fechadat.Value,
                                    FechaVigenciaDesc = dat.FechadatDesc,
                                    Valor = dat.Formuladat,
                                    CheckCero = dat.Gdatcheckcero ?? 0,
                                    Comentario = dat.Gdatcomentario,
                                    Sustento = dat.Gdatsustento,
                                    Usuariomodif = dat.Lastuser,
                                    Fechamodif = dat.FechaactDesc,
                                    EsArchivoValor = EsTipoArchivo(regCnp.Conceptipo),
                                    Grupocodi = reg.Grupocodi
                                };

                                if (regCnp.Conceptipo == "FORMULA" && flagFormulaEnValor && fechaVigEq != null)
                                {
                                    if (historico)
                                    {
                                        objDato.FechaVigencia = fechaVigEq.Value;
                                        //objDato.FechaVigenciaDesc = fechaVigEq.Value.ToString(ConstantesAppServicio.FormatoFecha);
                                    }
                                    else
                                    {
                                        objDato.FechaVigencia = fechaConsulta;
                                        //objDato.FechaVigenciaDesc = fechaConsulta.ToString(ConstantesAppServicio.FormatoFecha);
                                    }
                                }

                                objDato.CheckCeroDesc = "";
                                if (EsTipoNumero(objDato.Tipo) && objDato.Valor == "0") objDato.CheckCeroDesc = (objDato.CheckCero == 1 ? "SÍ" : "NO");

                                listaReporte.Add(objDato);
                            }
                            else
                            {
                                //caso 2: no hay data
                                var objDato = new FTFilaReporteHistParametro()
                                {
                                    Empresa = (reg.Emprnomb ?? "").Trim(),
                                    Central = reg.Areaelemento,
                                    Fteeqcodi = reg.Fteeqcodi,
                                    Elemento = (reg.Nombreelemento ?? "").Trim(),
                                    CodParam = regCnp.Concepcodi,
                                    NombParam = (regCnp.Concepdesc ?? "").Trim(),
                                    NombParamFT = (regCnp.Concepnombficha ?? "").Trim(),
                                    AbrevParam = (regCnp.Concepabrev ?? "").Trim(),
                                    Unidad = (regCnp.Concepunid ?? "").Trim(),
                                    Tipo = (regCnp.Conceptipo ?? "").Trim(),
                                    FechaVigencia = null,
                                    FechaVigenciaDesc = "",
                                    Valor = "",
                                    CheckCero = 0,
                                    Comentario = "",
                                    Sustento = "",
                                    Usuariomodif = "",
                                    Fechamodif = "",
                                    EsArchivoValor = EsTipoArchivo(regCnp.Conceptipo),
                                    Grupocodi = reg.Grupocodi
                                };

                                objDato.CheckCeroDesc = "";
                                if (EsTipoNumero(objDato.Tipo) && objDato.Valor == "0") objDato.CheckCeroDesc = (objDato.CheckCero == 1 ? "SÍ" : "NO");

                                listaReporte.Add(objDato);
                            }
                        }
                    }
                }

                //nombre hoja
                string famnomb = (listaFamilia.Find(x => x.Famcodi == reg.Famcodi) ?? new EqFamiliaDTO()).Famnomb;
                string catenomb = (listaCategoria.Find(x => x.Catecodi == reg.Catecodi) ?? new PrCategoriaDTO()).Catenomb;

                //columna
                FTFiltroReporteExcel objTmp = new FTFiltroReporteExcel();
                objTmp.EqColumna = new FtExtEnvioEqDTO()
                {
                    Fteeqcodi = reg.Fteeqcodi,
                    Idelemento = reg.Idelemento,
                    Idempresaelemento = reg.Emprcodi,
                    Nombempresaelemento = (reg.Emprnomb ?? "").Trim(),
                    Areaelemento = (reg.Areaelemento ?? "").Trim(),
                    Nombreelemento = (reg.Nombreelemento ?? "").Trim(),
                    Ftenvfecvigencia = reg.Ftenvfecvigencia,
                    EsEqVigente = reg.EsEqVigente,
                    Catecodi = reg.Catecodi,
                    Famcodi = reg.Famcodi,
                    Famnomb = (famnomb ?? "").Trim(),
                    Catenomb = (catenomb ?? "").Trim(),
                    EstadoelementoDesc = reg.EstadoelementoDesc,
                };
                objTmp.ListaDataRptHist = listaReporte;
                listaEqRpt.Add(objTmp);
            }

            //primera columna
            List<FTFilaReporteHistParametro> listaParametroPivote = new List<FTFilaReporteHistParametro>();
            listaParametroPivote.AddRange(listaPropiedad.
                        Select(x => new FTFilaReporteHistParametro() { CodParam = x.Propcodi, NombParam = x.Propnomb, Unidad = x.Propunidad, Famcodi = x.Famcodi, Tipo = x.Proptipo }).ToList());
            listaParametroPivote.AddRange(listaConcepto.
                        Select(x => new FTFilaReporteHistParametro() { CodParam = x.Concepcodi, NombParam = x.Concepdesc, Unidad = x.Concepunid, Catecodi = x.Catecodi, Tipo = x.Conceptipo }).ToList());

            //lista de equipos

            //convertir 
            List<ElementoFichaTecnica> listaElementoWeb = new List<ElementoFichaTecnica>();
            foreach (var objBD in listaEqRpt.Select(x => x.EqColumna).GroupBy(x => new { x.Idelemento, x.Catecodi, x.Famcodi }).Select(x => x.First()).ToList())
            {
                ElementoFichaTecnica reg = new ElementoFichaTecnica();

                reg.Codigo = objBD.Idelemento;
                reg.TipoId = objBD.Catecodi > 0 ? objBD.Catecodi.GetValueOrDefault(0) : objBD.Famcodi.GetValueOrDefault(0);
                reg.Nombre = (objBD.Nombreelemento ?? "").Trim();
                reg.Abreviatura = (objBD.Nombreelemento ?? "").Trim();
                reg.Empresa = (objBD.Nombempresaelemento ?? "").Trim();
                reg.Ubicacion = (objBD.Areaelemento ?? "").Trim();
                reg.Estado = EquipamientoHelper.EstadoDescripcion(objBD.Estadoelemento);
                reg.Existe = ConstantesFichaTecnica.FichaMaestraPrincipal;
                reg.Tipo = ConstantesFichaTecnica.OrigenTipoEquipo;
                //reg.Areacodi = eq.Areacodi;
                //reg.Emprcodi = objBD.Emprcodi;

                listaElementoWeb.Add(reg);
            }
            listaElementoWeb = listaElementoWeb.OrderBy(x => x.Nombre).ThenBy(x => x.Empresa).ThenBy(x => x.Ubicacion).ToList();

            //salida
            FTReporteExcel objRpt = new FTReporteExcel();
            objRpt.ListaEqRpt = listaEqRpt.OrderBy(x => x.EqColumna.Estadoelemento).ThenBy(x => x.EqColumna.Idelemento).ThenByDescending(x => x.EqColumna.Ftenvfecvigencia).ToList();
            objRpt.ListaParametro = listaParametroPivote;
            objRpt.NombreEtapa = GetByIdFtExtEtapa(idEtapa).Ftetnombre;
            objRpt.FechaIniConsulta = fechaVigIni;
            objRpt.FechaFinConsulta = fechaVigFin;
            objRpt.EsHistorico = historico;
            objRpt.TipoEmpresa = tipoEmpresaFT;
            objRpt.ListaElementoWeb = listaElementoWeb;

            foreach (var item in lstColumVisibles)
            {
                switch (item)
                {
                    case 1: // columna fecha vigencia
                        objRpt.TieneColFechaVigencia = true;
                        break;
                    case 2: // columna valor
                        objRpt.TieneColValor = true;
                        break;
                    case 3: // columna valor cero correcto
                        objRpt.TieneColCheckcero = true;
                        break;
                    case 4: // columna comentario
                        objRpt.TieneColComentario = true;
                        break;
                    case 5: // columna sustento
                        objRpt.TieneColSustento = true;
                        break;
                    case 6:// columna usuario modif
                        objRpt.TieneColFechamodif = true;
                        break;
                    case 7:// columna fecha modif
                        objRpt.TieneColUsuariomodif = true;
                        break;
                }
            }

            //cantidad de columnas por equipo
            var numColXEq = 0;
            if (objRpt.TieneColFechaVigencia) numColXEq++;
            if (objRpt.TieneColValor) numColXEq++;
            if (objRpt.TieneColCheckcero) numColXEq++;
            if (objRpt.TieneColComentario) numColXEq++;
            if (objRpt.TieneColSustento) numColXEq++;
            if (objRpt.TieneColUsuariomodif) numColXEq++;
            if (objRpt.TieneColFechamodif) numColXEq++;
            if (numColXEq == 0) numColXEq = 1;
            objRpt.NumColXEq = numColXEq;

            List<FTFilaReporteHistParametro> listaData = new List<FTFilaReporteHistParametro>();
            foreach (var item in objRpt.ListaEqRpt)
            {
                listaData.AddRange(item.ListaDataRptHist);
            }

            objRpt.ListaDataCompleto = listaData.GroupBy(x => new { x.Equicodi, x.Grupocodi, x.CodParam, x.FechaVigencia }).Select(x => x.First()).ToList();
            objRpt.ListaDataCompleto = objRpt.ListaDataCompleto.OrderBy(x => x.CodParam).ThenBy(x => x.Empresa).ThenBy(x => x.Central).ThenBy(x => x.Elemento).ThenBy(x => x.FechaVigencia).ToList();

            //Evaluar fórmula
            if (flagFormulaEnValor)
            {
                EvaluarFormulaEnValor(objRpt.ListaDataCompleto);
            }

            return objRpt;
        }

        private List<FTReporteExcel> ListarReporteXHojaHistoricoParam(FTReporteExcel objRpt, bool tieneFT)
        {
            List<FTReporteExcel> lista = new List<FTReporteExcel>();

            //si no tiene ficha, entonces asignarle cualquiera
            if (!tieneFT)
            {
                //Lista de fichas
                List<FtExtFormatoDTO> listaRelFichaEtapa = GetByCriteriaFtExtFormatos();

                //a cada equipo asignarle un formato "referencial"
                foreach (var itemEq in objRpt.ListaEqRpt)
                {
                    var objFmt = listaRelFichaEtapa.Find(x => x.Famcodi == itemEq.EqColumna.Famcodi && x.Catecodi == itemEq.EqColumna.Catecodi);
                    if (objFmt != null) itemEq.IdFT = objFmt.Fteqcodi;
                    else
                    {
                    }
                }
            }

            //agrupar por ficha
            foreach (var item in objRpt.ListaEqRpt.GroupBy(x => new { x.EqColumna.Famcodi, x.EqColumna.Catecodi }))
            {
                FtFictecXTipoEquipoDTO fichaTecnica = new FtFictecXTipoEquipoDTO()
                {
                    Famcodi = item.First().EqColumna.Famcodi,
                    Catecodi = item.First().EqColumna.Catecodi,
                    Famnomb = item.First().EqColumna.Famnomb,
                    Catenomb = item.First().EqColumna.Catenomb,
                    Fteqcodi = item.First().IdFT,
                };

                string nombreSheet = "";
                List<FTFilaReporteHistParametro> listaParam = new List<FTFilaReporteHistParametro>();
                if (fichaTecnica.Famcodi > 0)
                {
                    switch (fichaTecnica.Famcodi)
                    {
                        case 36: nombreSheet = "COMPONENTE DE CENTRAL SOLAR"; break;
                        case 38: nombreSheet = "COMPONENTE DE CENTRAL EÓLICA"; break;
                        case 3: nombreSheet = "UNIDAD TERMOELÉCTRICA"; break;
                        case 2: nombreSheet = "UNIDAD HIDROELÉCTRICA"; break;
                        case 22: nombreSheet = "GENERADORES DE VAPOR"; break;
                        default: nombreSheet = fichaTecnica.Famnomb; break;
                    }

                    listaParam = objRpt.ListaParametro.Where(x => x.Famcodi == fichaTecnica.Famcodi || x.Famcodi == 0).ToList();
                    if (fichaTecnica.Famcodi == 5)
                    {
                        listaParam.AddRange(objRpt.ListaParametro.Where(x => x.Catecodi == 4).ToList());
                    }
                }
                else
                {
                    switch (fichaTecnica.Catecodi)
                    {
                        case 2: nombreSheet = "MODOS DE OPERACIÓN"; break;
                        default: nombreSheet = fichaTecnica.Catenomb; break;
                    }

                    listaParam = objRpt.ListaParametro.Where(x => x.Catecodi == fichaTecnica.Catecodi || x.Catecodi == 0).ToList();
                }

                FTReporteExcel objHoja = new FTReporteExcel();
                objHoja.NombreSheet = nombreSheet;
                objHoja.NombreEtapa = objRpt.NombreEtapa;
                objHoja.ListaEqRpt = item.ToList();
                objHoja.ListaParametro = listaParam;
                objHoja.TieneColFechaVigencia = objRpt.TieneColFechaVigencia;
                objHoja.TieneColValor = objRpt.TieneColValor;
                objHoja.TieneColCheckcero = objRpt.TieneColCheckcero;
                objHoja.TieneColComentario = objRpt.TieneColComentario;
                objHoja.TieneColSustento = objRpt.TieneColSustento;
                objHoja.TieneColUsuariomodif = objRpt.TieneColUsuariomodif;
                objHoja.TieneColFechamodif = objRpt.TieneColFechamodif;
                objHoja.FechaIniConsulta = objRpt.FechaIniConsulta;
                objHoja.FechaFinConsulta = objRpt.FechaFinConsulta;
                objHoja.EsHistorico = objRpt.EsHistorico;
                objHoja.NumColXEq = objRpt.NumColXEq;
                objHoja.IdFT = fichaTecnica.Fteqcodi;

                //completar datos faltantes
                foreach (var eqRpt in objHoja.ListaEqRpt)
                {
                    foreach (var objParam in objHoja.ListaParametro)
                    {
                        var objFilaExiste = eqRpt.ListaDataRptHist.Find(x => x.CodParam == objParam.CodParam);
                        if (objFilaExiste == null)
                        {
                            eqRpt.ListaDataRptHist.Add(new FTFilaReporteHistParametro()
                            {
                                Fteeqcodi = eqRpt.EqColumna.Fteeqcodi,
                                CodParam = objParam.CodParam,
                                Famcodi = objParam.Famcodi,
                                Catecodi = objParam.Catecodi,
                                Tipo = objParam.Tipo,
                                FechaVigenciaDesc = "",
                                Valor = "",
                                CheckCero = 0,
                                CheckCeroDesc = "",
                                Comentario = "",
                                Sustento = "",
                                Usuariomodif = "",
                                Fechamodif = "",
                            });
                        }
                    }
                }

                //determinar valor vigente
                foreach (var objParam in objHoja.ListaParametro)
                {
                    if (objParam.CodParam == 215)
                    { }
                    foreach (var subLista in objHoja.ListaEqRpt.Select(x => x.EqColumna).GroupBy(x => new { x.Idelemento }))
                    {
                        var sublistaEq = subLista.ToList();
                        var eqVigente = sublistaEq.Find(x => x.EsEqVigente);
                        List<FTFilaReporteHistParametro> listaParamXEqVigente = new List<FTFilaReporteHistParametro>();
                        if (eqVigente != null) listaParamXEqVigente = objHoja.ListaEqRpt.Find(x => x.EqColumna.Fteeqcodi == eqVigente.Fteeqcodi).ListaDataRptHist;

                        string valorVigente = listaParamXEqVigente.Find(x => x.CodParam == objParam.CodParam)?.Valor;
                        foreach (var eq in sublistaEq)
                        {
                            List<FTFilaReporteHistParametro> listaParamXEqColumna = objHoja.ListaEqRpt.Find(x => x.EqColumna.Fteeqcodi == eq.Fteeqcodi).ListaDataRptHist;

                            var objFilaDato = listaParamXEqColumna.Find(x => x.CodParam == objParam.CodParam);
                            if (objFilaDato.Valor == valorVigente)
                            {
                                objFilaDato.EsValorVigente = true;
                            }
                        }
                    }
                }

                //salida
                lista.Add(objHoja);
            }

            return lista;
        }

        public void GenerarExcelReporteParametroHist(int tipoEmpresaFT, int idEtapa, string idEmpresa, string famcodis, string catecodis,
                                                        string propcodis, string concepcodis, string tipocodis,
                                                        bool historico, bool flagFormulaEnValor, DateTime fechaVigIni, DateTime fechaVigFin, string estado,
                                                        string pathLogo, out string ruta, out string fileName)
        {
            //Obtener datos
            FTReporteExcel objRpt = ListarReporteDatoHistoricoParam(tipoEmpresaFT, idEtapa, idEmpresa, famcodis, catecodis, propcodis, concepcodis, tipocodis,
                                                        historico, flagFormulaEnValor, fechaVigIni, fechaVigFin, estado, true, false, true);

            List<FTReporteExcel> listaRpt = new List<FTReporteExcel>();
            if (historico) listaRpt = ListarReporteXHojaHistoricoParam(objRpt, false);

            //validar existencia de data
            if (historico)
            {
                if (!listaRpt.Any()) throw new ArgumentException("No existen datos para exportar el reporte.");
            }
            else
            {
                if (!objRpt.ListaDataCompleto.Any()) throw new ArgumentException("No existen datos para exportar el reporte.");
            }

            //Generar archivo excel
            DateTime fechaConsulta = DateTime.Now;
            ruta = "";

            using (ExcelPackage xlPackage = new ExcelPackage())
            {
                if (historico)
                {
                    foreach (var objRptHoja in listaRpt)
                    {
                        GenerarHojaExcelReporteParametroHist(xlPackage, pathLogo, objRptHoja.NombreSheet, objRptHoja);
                    }
                }
                else
                    GenerarHojaExcelReporteParametro(xlPackage, pathLogo, "Reporte", objRpt);

                ruta = System.IO.Path.GetTempFileName();
                xlPackage.SaveAs(new FileInfo(ruta));
            }

            fileName = string.Format("ReporteHistórico_Parametros_{0}.xlsx", fechaConsulta.ToString(ConstantesAppServicio.FormatoFechaYMDHora));
        }

        private void GenerarHojaExcelReporteParametroHist(ExcelPackage xlPackage, string pathLogo, string nombreSheet, FTReporteExcel objRpt)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nombreSheet);
            ws.View.ShowGridLines = false;

            //Logo
            UtilExcel.AddImageLocal(ws, 0, 0, pathLogo);

            int row = 4;
            int column = 1;

            #region filtros
            int columnIniFiltro = column;

            ws.Cells[row, columnIniFiltro].Value = "Desde:";
            ws.Cells[row, columnIniFiltro + 1].Value = objRpt.FechaIniConsulta.Value.ToString(ConstantesAppServicio.FormatoFecha);

            ws.Cells[row + 1, columnIniFiltro].Value = "Hasta:";
            ws.Cells[row + 1, columnIniFiltro + 1].Value = objRpt.FechaFinConsulta.Value.ToString(ConstantesAppServicio.FormatoFecha);

            UtilExcel.BorderCeldasLineaDelgada(ws, row, columnIniFiltro, row + 1, columnIniFiltro, "#000000", true, true);
            UtilExcel.SetFormatoCelda(ws, row, columnIniFiltro, row + 1, columnIniFiltro, "Centro", "Derecha", "#FFFFFF", "#227ABE", "Calibri", 11, true);
            UtilExcel.SetFormatoCelda(ws, row, columnIniFiltro + 1, row + 1, columnIniFiltro + 1, "Centro", "Izquierda", "#000000", "#FFFFFF", "Calibri", 11, false);

            if (!string.IsNullOrEmpty(objRpt.NombreEtapa))
            {
                ws.Cells[1, columnIniFiltro + 2].Value = "Etapa - " + objRpt.NombreEtapa;
                ws.Cells[1, columnIniFiltro + 2].Style.Font.Bold = true;
            }

            #endregion

            row += 2;

            int rowIni = row;
            int colIni = column;
            int colFin = column;

            ws.Column(1).Width = 7;//primera columna no visible

            //tabla de parametros, equipos y valores
            GenerarTablaExcelReporteParametroHist(ws, rowIni + 2, colIni, objRpt);

            ws.View.FreezePanes(rowIni + 3, colIni + 3);
        }

        private void GenerarTablaExcelReporteParametroHist(ExcelWorksheet ws, int rowIni, int colIni, FTReporteExcel objRpt)
        {
            int row = rowIni;

            //cabecera
            int colCodigo = colIni;
            int colNomb = colCodigo + 1;
            int colUnidad = colNomb + 1;
            ws.Cells[row, colCodigo].Value = "Código";
            ws.Cells[row, colNomb].Value = "Nombre Parámetro";
            ws.Cells[row, colUnidad].Value = "Unidad";

            ws.Column(colCodigo).Width = 7;
            ws.Column(colNomb).Width = 55;
            ws.Column(colUnidad).Width = 18;

            int rowIniData = row + 1;
            int rowFinData = rowIniData + objRpt.ListaParametro.Count - 1;
            if (rowFinData < rowIniData) rowFinData = rowIniData;

            UtilExcel.BorderCeldasLineaDelgada(ws, row, colCodigo, row, colUnidad, "#000000", true, true);
            UtilExcel.SetFormatoCelda(ws, row, colCodigo, row, colUnidad, "Centro", "Centro", "#000000", "#CBFBE6", "Calibri", 11, true, true);

            int rowEstado = rowIni - 5;
            int rowFechaVig = rowEstado + 1;
            int rowIdElemento = rowFechaVig + 1;
            int rowNombElemento = rowIdElemento + 1;
            int rowEmpresa = rowNombElemento + 1;

            ws.Cells[rowEstado, colUnidad].Value = "Estado";
            ws.Cells[rowFechaVig, colUnidad].Value = "Fecha de Vigencia Modificación";
            ws.Cells[rowIdElemento, colUnidad].Value = "Código";
            ws.Cells[rowNombElemento, colUnidad].Value = "Nombre";
            ws.Cells[rowEmpresa, colUnidad].Value = "Empresa";
            UtilExcel.SetFormatoCelda(ws, rowEstado, colUnidad, rowEmpresa, colUnidad, "Centro", "Centro", "#000000", "#FFFFFF", "Calibri", 11, true, true);

            //columnas de datos
            int numColXEq = objRpt.NumColXEq;
            int contador = 1;
            foreach (var itemEqCol in objRpt.ListaEqRpt)
            {
                var item = itemEqCol.EqColumna;

                int colIniEq = colUnidad + 1 + (contador - 1) * numColXEq;

                ws.Cells[rowEstado, colIniEq].Value = item.EstadoelementoDesc;
                ws.Cells[rowFechaVig, colIniEq].Value = item.Ftenvfecvigencia != null ? item.Ftenvfecvigencia.Value.ToString(ConstantesAppServicio.FormatoFecha) : "";
                ws.Cells[rowIdElemento, colIniEq].Value = item.Idelemento;
                ws.Cells[rowNombElemento, colIniEq].Value = item.Nombreelemento;
                ws.Cells[rowEmpresa, colIniEq].Value = item.Nombempresaelemento;
                int colIniTmp = colIniEq;
                int colFinTmp = colIniEq + numColXEq - 1;

                if (objRpt.TieneColFechaVigencia)
                {
                    ws.Cells[row, colIniEq].Value = "Fecha de vigencia";
                    ws.Column(colIniEq).Width = 13;
                    UtilExcel.SetFormatoCelda(ws, rowIniData, colIniEq, rowFinData, colIniEq, "Centro", "Centro", "#0000F7", "#FFFFFF", "Calibri", 11, false);
                    colIniEq++;
                }
                if (objRpt.TieneColValor)
                {
                    ws.Cells[row, colIniEq].Value = "Valor";
                    ws.Column(colIniEq).Width = 23;
                    UtilExcel.SetFormatoCelda(ws, rowIniData, colIniEq, rowFinData, colIniEq, "Centro", "Centro", "#0000F7", "#FFFFFF", "Calibri", 11, false);
                    colIniEq++;
                }
                if (objRpt.TieneColCheckcero)
                {
                    ws.Cells[row, colIniEq].Value = "Valor cero(0) correcto";
                    colIniEq++;
                }
                if (objRpt.TieneColComentario)
                {
                    ws.Cells[row, colIniEq].Value = "Comentario";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }
                if (objRpt.TieneColSustento)
                {
                    ws.Cells[row, colIniEq].Value = "Sustento";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }
                if (objRpt.TieneColUsuariomodif)
                {
                    ws.Cells[row, colIniEq].Value = "Usuario modificación";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }
                if (objRpt.TieneColFechamodif)
                {
                    ws.Cells[row, colIniEq].Value = "Fecha modificación";
                    ws.Column(colIniEq).Width = 23;
                    colIniEq++;
                }

                UtilExcel.CeldasExcelAgrupar(ws, rowEstado, colIniTmp, rowEstado, colFinTmp);
                UtilExcel.CeldasExcelAgrupar(ws, rowFechaVig, colIniTmp, rowFechaVig, colFinTmp);
                UtilExcel.CeldasExcelAgrupar(ws, rowIdElemento, colIniTmp, rowIdElemento, colFinTmp);
                UtilExcel.CeldasExcelAgrupar(ws, rowNombElemento, colIniTmp, rowNombElemento, colFinTmp);
                UtilExcel.CeldasExcelAgrupar(ws, rowEmpresa, colIniTmp, rowEmpresa, colFinTmp);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowEstado, colIniTmp, rowEmpresa, colFinTmp, "Centro");

                contador++;
            }
            int colFinEq = colUnidad + 1 + objRpt.ListaEqRpt.Count * numColXEq - 1;
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEstado, colUnidad + 1, row, colFinEq, "#000000", true, true);
            UtilExcel.SetFormatoCelda(ws, row, colUnidad + 1, row, colFinEq, "Centro", "Centro", "#000000", "#00B0F0", "Calibri", 11, true, true);

            //cuerpo
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniData, colCodigo, rowFinData, colFinEq, "#000000", true, true);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniData, colCodigo, rowFinData, colFinEq, "Centro");
            UtilExcel.CeldasExcelWrapText(ws, rowIniData, colCodigo, rowFinData, colFinEq);

            int rowData = row + 1;
            foreach (var itemParam in objRpt.ListaParametro)
            {
                ws.Cells[rowData, colCodigo].Value = itemParam.CodParam;
                ws.Cells[rowData, colNomb].Value = itemParam.NombParam;
                ws.Cells[rowData, colUnidad].Value = itemParam.Unidad;

                //columnas de datos
                contador = 1;
                foreach (var itemEqCol in objRpt.ListaEqRpt)
                {
                    int colIniEq = colUnidad + 1 + (contador - 1) * numColXEq;

                    var item = itemEqCol.EqColumna;
                    var objDatoEq = itemEqCol.ListaDataRptHist.Find(x => x.CodParam == itemParam.CodParam); //siempre hay dato

                    if (objRpt.TieneColFechaVigencia)
                    {
                        ws.Cells[rowData, colIniEq].Value = objDatoEq.FechaVigenciaDesc;
                        colIniEq++;
                    }
                    if (objRpt.TieneColValor)
                    {
                        if (string.IsNullOrEmpty(objDatoEq.ValorFormula))
                        {
                            GenerarExcelItemValor(ws, objDatoEq.Valor, objDatoEq.EsArchivoValor, rowData, colIniEq);
                        }
                        else
                        {
                            try
                            {
                                ws.Cells[rowData, colIniEq].FormulaR1C1 = "=" + objDatoEq.ValorFormula;
                            }
                            catch (Exception)
                            {
                                ws.Cells[rowData, colIniEq].Value = objDatoEq.Valor;
                            }
                        }

                        //si el valor no es vigente entonces pintarlo de celeste claro
                        if (!objDatoEq.EsValorVigente)
                            UtilExcel.CeldasExcelColorFondo(ws, rowData, colIniEq, rowData, colIniEq, "#CCFFFF");

                        colIniEq++;
                    }
                    if (objRpt.TieneColCheckcero)
                    {
                        ws.Cells[rowData, colIniEq].Value = objDatoEq.CheckCeroDesc;
                        colIniEq++;
                    }
                    if (objRpt.TieneColComentario)
                    {
                        ws.Cells[rowData, colIniEq].Value = objDatoEq.Comentario;
                        colIniEq++;
                    }
                    if (objRpt.TieneColSustento)
                    {
                        GenerarExcelItemValor(ws, objDatoEq.Sustento, true, rowData, colIniEq);
                        colIniEq++;
                    }
                    if (objRpt.TieneColUsuariomodif)
                    {
                        ws.Cells[rowData, colIniEq].Value = objDatoEq.Usuariomodif;
                        colIniEq++;
                    }
                    if (objRpt.TieneColFechamodif)
                    {
                        ws.Cells[rowData, colIniEq].Value = objDatoEq.Fechamodif;
                        colIniEq++;
                    }

                    contador++;
                }

                rowData++;
            }

        }

        private void GenerarHojaExcelReporteParametro(ExcelPackage xlPackage, string pathLogo, string nombreSheet, FTReporteExcel objRpt)
        {

            List<FTFilaReporteHistParametro> listaData = objRpt.ListaDataCompleto;

            string nameWS = nombreSheet;

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;

            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            bool ocultarColCentral = objRpt.TipoEmpresa == 12;

            int colIniTitulo = 2;
            int rowIniTitulo = 1;

            ws.Cells[rowIniTitulo, colIniTitulo].Value = "Etapa: " + objRpt.NombreEtapa;
            ws.Cells[rowIniTitulo + 1, colIniTitulo + 2].Value = "Fecha de consulta:";
            ws.Cells[rowIniTitulo + 1, colIniTitulo + 3].Value = objRpt.FechaIniConsulta.Value.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.SetFormatoCelda(ws, rowIniTitulo + 1, colIniTitulo + 2, rowIniTitulo + 1, colIniTitulo + 2, "Centro", "Derecha", "#FFFFFF", "#227ABE", "Calibri", 11, true);

            int colIniFecha = colIniTitulo + 1;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo + 1;
            int rowIniTabla = rowIniTitulo + 4;

            int colEmpresa = colIniTable;
            int colCentral = colEmpresa + 1;
            int colUnidadMod = ocultarColCentral ? colEmpresa + 1 : colCentral + 1;
            int colCodParametro = colUnidadMod + 1;
            int colNombParametro = colCodParametro + 1;
            int colNombFT = colNombParametro + 1;
            int colUnidadMed = colNombFT + 1;
            int colUltima = colUnidadMed;

            int colFechaVig = objRpt.TieneColFechaVigencia ? ++colUltima : colUltima;
            int colValor = objRpt.TieneColValor ? ++colUltima : colUltima;
            int colValorCero = objRpt.TieneColCheckcero ? ++colUltima : colUltima;
            int colComentario = objRpt.TieneColComentario ? ++colUltima : colUltima;
            int colSustento = objRpt.TieneColSustento ? ++colUltima : colUltima;
            int colUsuModif = objRpt.TieneColUsuariomodif ? ++colUltima : colUltima;
            int colFechaModif = objRpt.TieneColFechamodif ? ++colUltima : colUltima;

            ws.Row(rowIniTabla).Height = 40;
            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Column(colEmpresa).Width = 20;

            switch (objRpt.TipoEmpresa)
            {
                case 10:
                    ws.Cells[rowIniTabla, colCentral].Value = "Central";
                    ws.Cells[rowIniTabla, colUnidadMod].Value = "Unidad / Modo Operación";
                    ws.Column(colCentral).Width = 20;
                    ws.Column(colUnidadMod).Width = 25;
                    break;
                case 11:
                    ws.Cells[rowIniTabla, colCentral].Value = "Subestación";
                    ws.Cells[rowIniTabla, colUnidadMod].Value = "Equipo";
                    ws.Column(colCentral).Width = 20;
                    ws.Column(colUnidadMod).Width = 15;
                    break;
                case 12:
                    ws.Cells[rowIniTabla, colCentral].Value = "";
                    ws.Cells[rowIniTabla, colUnidadMod].Value = "Línea";
                    ws.Column(colUnidadMod).Width = 15;
                    break;
                case 13:
                    ws.Cells[rowIniTabla, colCentral].Value = "Equipo de Compensación";
                    ws.Cells[rowIniTabla, colUnidadMod].Value = "Equipo";
                    ws.Column(colCentral).Width = 25;
                    ws.Column(colUnidadMod).Width = 15;
                    break;
            }

            ws.Cells[rowIniTabla, colCodParametro].Value = "Cod. Parámetro";
            ws.Cells[rowIniTabla, colNombParametro].Value = "Nombre del Parámetro";
            ws.Cells[rowIniTabla, colNombFT].Value = "Nombre Ficha Técnica";
            ws.Cells[rowIniTabla, colUnidadMed].Value = "Unidad de medida";
            ws.Column(colCodParametro).Width = 10;
            ws.Column(colNombParametro).Width = 25;
            ws.Column(colNombFT).Width = 20;
            ws.Column(colUnidadMed).Width = 10;

            if (objRpt.TieneColFechaVigencia)
            {
                ws.Cells[rowIniTabla, colFechaVig].Value = "Fecha de vigencia";
                ws.Column(colFechaVig).Width = 15;
                colUltima = colFechaVig;
            }
            if (objRpt.TieneColValor)
            {
                ws.Cells[rowIniTabla, colValor].Value = "Valor";
                ws.Column(colValor).Width = 25;
                colUltima = colValor;
            }
            if (objRpt.TieneColCheckcero)
            {
                ws.Cells[rowIniTabla, colValorCero].Value = "Valor cero(0) correcto";
                ws.Column(colValorCero).Width = 15;
                colUltima = colValorCero;
            }
            if (objRpt.TieneColComentario)
            {
                ws.Cells[rowIniTabla, colComentario].Value = "Comentario";
                ws.Column(colComentario).Width = 15;
                colUltima = colComentario;
            }
            if (objRpt.TieneColSustento)
            {
                ws.Cells[rowIniTabla, colSustento].Value = "Sustento";
                ws.Column(colSustento).Width = 15;
                colUltima = colSustento;
            }
            if (objRpt.TieneColUsuariomodif)
            {
                ws.Cells[rowIniTabla, colUsuModif].Value = "Usuario modificación";
                ws.Column(colUsuModif).Width = 15;
                colUltima = colUsuModif;
            }
            if (objRpt.TieneColFechamodif)
            {
                ws.Cells[rowIniTabla, colFechaModif].Value = "Fecha modificación";
                ws.Column(colFechaModif).Width = 15;
                colUltima = colFechaModif;
            }

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 2, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima, "#000000");

            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (var item in listaData)
            {
                ws.Cells[rowData, colEmpresa].Value = item.Empresa;
                ws.Cells[rowData, colCentral].Value = item.Central;
                ws.Cells[rowData, colUnidadMod].Value = item.Elemento;
                ws.Cells[rowData, colCodParametro].Value = item.CodParam;
                ws.Cells[rowData, colNombParametro].Value = item.NombParam;
                ws.Cells[rowData, colNombFT].Value = item.NombParamFT;
                ws.Cells[rowData, colUnidadMed].Value = item.Unidad;

                if (objRpt.TieneColFechaVigencia)
                {
                    ws.Cells[rowData, colFechaVig].Value = item.FechaVigenciaDesc;
                }
                if (objRpt.TieneColValor)
                {
                    if (string.IsNullOrEmpty(item.ValorFormula))
                    {
                        ws.Cells[rowData, colValor].Value = item.Valor;
                    }
                    else
                    {
                        try
                        {
                            ws.Cells[rowData, colValor].FormulaR1C1 = "=" + item.ValorFormula;
                        }
                        catch (Exception)
                        {
                            ws.Cells[rowData, colValor].Value = item.Valor;
                        }
                    }
                }
                if (objRpt.TieneColCheckcero)
                {
                    ws.Cells[rowData, colValorCero].Value = item.CheckCeroDesc;
                }
                if (objRpt.TieneColComentario)
                {
                    ws.Cells[rowData, colComentario].Value = item.Comentario;
                }
                if (objRpt.TieneColSustento)
                {
                    ws.Cells[rowData, colSustento].Value = item.Sustento;
                }
                if (objRpt.TieneColUsuariomodif)
                {
                    ws.Cells[rowData, colUsuModif].Value = item.Usuariomodif;
                }
                if (objRpt.TieneColFechamodif)
                {
                    ws.Cells[rowData, colFechaModif].Value = item.Fechamodif;
                }

                rowData++;
            }

            int rowFinData = rowIniTabla + 1 + listaData.Count - 1;
            if (rowFinData < rowIniTabla + 1) rowFinData = rowIniTabla + 1;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colEmpresa, rowFinData, colUltima, "Calibri", 8);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colEmpresa, rowFinData, colUltima, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colEmpresa, rowFinData, colUltima, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowFinData, colUltima, "Centro");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowFinData, colUltima, "Centro");

            #endregion

            UtilExcel.CeldasExcelWrapText(ws, rowIniTabla, colIniTable, rowData, colUltima);

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        #endregion

        #region TTIE

        /// <summary>
        /// obtener historico de relación de equipos y grupos con sus empresas
        /// </summary>
        /// <param name="listaEqYEnvio"></param>
        /// <param name="listaHistEq"></param>
        /// <param name="listaHistGr"></param>
        private void ListarTTIEEmpresaEquipoGrupo(List<FtExtEnvioDTO> listaEqYEnvio, out List<SiHisempeqDataDTO> listaHistEq, out List<SiHisempgrupoDataDTO> listaHistGr)
        {
            listaHistEq = new List<SiHisempeqDataDTO>();
            listaHistGr = new List<SiHisempgrupoDataDTO>();

            //equipos
            List<int> lEquicodi = listaEqYEnvio.Where(x => x.Equicodi > 0).Select(x => x.Equicodi.GetValueOrDefault(0)).Distinct().ToList();
            if (lEquicodi.Count > 0)
            {
                listaHistEq = ListarEmpresaEqEnvioXEquicodis(lEquicodi, listaEqYEnvio);
            }

            //modos de operación
            List<int> lGrupocodi = listaEqYEnvio.Where(x => x.Grupocodi > 0).Select(x => x.Grupocodi.GetValueOrDefault(0)).Distinct().ToList();
            if (lGrupocodi.Count > 0)
            {
                listaHistGr = ListarEmpresaEqEnvioXGrupocodis(lGrupocodi, listaEqYEnvio);
            }
        }

        private void ActualizarEmpresaListaEqEnvio(List<FtExtEnvioDTO> listaEqYEnvio, List<SiHisempeqDataDTO> listaHistEq, List<SiHisempgrupoDataDTO> listaHistGr,
                                            bool soloMostrarEmpresaActual, DateTime fechaConsulta)
        {
            foreach (var itemEq in listaEqYEnvio)
            {
                if (itemEq.Equicodi > 0 && itemEq.Ftenvfecvigencia != null)
                {
                    ObtenerEmpresaVigenteXEquipo(itemEq.Equicodi.Value, itemEq.Ftenvfecvigencia.Value, itemEq.Emprcodi, itemEq.Emprnomb, listaHistEq,
                                            soloMostrarEmpresaActual, fechaConsulta, out int emprcodiVigente, out string emprnombVigente);

                    itemEq.Emprcodi = emprcodiVigente;
                    itemEq.Emprnomb = emprnombVigente;
                }

                if (itemEq.Grupocodi > 0 && itemEq.Ftenvfecvigencia != null)
                {
                    ObtenerEmpresaVigenteXGrupo(itemEq.Grupocodi.Value, itemEq.Ftenvfecvigencia.Value, itemEq.Emprcodi, itemEq.Emprnomb, listaHistGr,
                                            soloMostrarEmpresaActual, fechaConsulta, out int emprcodiVigente, out string emprnombVigente);

                    itemEq.Emprcodi = emprcodiVigente;
                    itemEq.Emprnomb = emprnombVigente;
                }
            }
        }

        private void ObtenerEmpresaVigenteXEquipo(int equicodi, DateTime fechaVig, int emprcodiActual, string emprnombActual, List<SiHisempeqDataDTO> listaHist,
                        bool soloMostrarEmpresaActual, DateTime fechaConsulta,
                        out int emprcodiVigente, out string emprnombVigente)
        {
            //fecha
            DateTime fechaCorte = soloMostrarEmpresaActual ? fechaConsulta : fechaVig;

            //buscar dato vigente
            var listaHistXEq = listaHist.Where(x => x.Equicodi == equicodi && x.Heqdatfecha <= fechaCorte).ToList();
            var regHist = listaHistXEq.OrderByDescending(x => x.Heqdatfecha).ThenByDescending(x => x.Heqdatestado).FirstOrDefault(); //no modificar el ordenamiento

            //vigente
            emprcodiVigente = emprcodiActual;
            emprnombVigente = emprnombActual;
            if (regHist != null)
            {
                emprcodiVigente = regHist.Emprcodi;
                emprnombVigente = regHist.Emprnomb;
            }
        }

        private void ObtenerEmpresaVigenteXGrupo(int grupocodi, DateTime fechaVig, int emprcodiActual, string emprnombActual, List<SiHisempgrupoDataDTO> listaHist,
                        bool soloMostrarEmpresaActual, DateTime fechaConsulta,
                        out int emprcodiVigente, out string emprnombVigente)
        {
            //fecha
            DateTime fechaCorte = soloMostrarEmpresaActual ? fechaConsulta : fechaVig;

            //buscar dato vigente
            var listaHistXEq = listaHist.Where(x => x.Grupocodi == grupocodi && x.Hgrdatfecha <= fechaCorte).ToList();
            var regHist = listaHistXEq.OrderByDescending(x => x.Hgrdatfecha).ThenByDescending(x => x.Hgrdatestado).FirstOrDefault(); //no modificar el ordenamiento

            //vigente
            emprcodiVigente = emprcodiActual;
            emprnombVigente = emprnombActual;
            if (regHist != null)
            {
                emprcodiVigente = regHist.Emprcodi;
                emprnombVigente = regHist.Emprnomb;
            }
        }

        private List<SiHisempeqDataDTO> ListarEmpresaEqEnvioXEquicodis(List<int> lEquicodi, List<FtExtEnvioDTO> listaEqYEnvio)
        {
            List<List<int>> listadelista = new List<List<int>>();  // lista de listas
            int maxElementosPorSublista = 400;

            for (int i = 0; i < lEquicodi.Count; i += maxElementosPorSublista)
            {
                List<int> sublista = lEquicodi.GetRange(i, Math.Min(maxElementosPorSublista, lEquicodi.Count - i));
                listadelista.Add(sublista);
            }

            TitularidadAppServicio servTitEmp = new TitularidadAppServicio();

            //Consulta el histórico de relación entre los equipos y las empresas
            List<SiHisempeqDataDTO> listaHist = new List<SiHisempeqDataDTO>();
            foreach (var sublista in listadelista)
            {
                listaHist.AddRange(servTitEmp.ListSiHisempeqDatas(string.Join(",", sublista)));
            }
            listaHist = listaHist.OrderBy(x => x.Equicodi).ThenBy(x => x.Heqdatfecha).ToList();

            return listaHist;
        }

        private List<SiHisempgrupoDataDTO> ListarEmpresaEqEnvioXGrupocodis(List<int> lGrupocodi, List<FtExtEnvioDTO> listaEqYEnvio)
        {
            List<List<int>> listadelista = new List<List<int>>();  // lista de listas
            int maxElementosPorSublista = 400;

            for (int i = 0; i < lGrupocodi.Count; i += maxElementosPorSublista)
            {
                List<int> sublista = lGrupocodi.GetRange(i, Math.Min(maxElementosPorSublista, lGrupocodi.Count - i));
                listadelista.Add(sublista);
            }

            TitularidadAppServicio servTitEmp = new TitularidadAppServicio();

            //Consulta el histórico de relación entre los equipos y las empresas
            List<SiHisempgrupoDataDTO> listaHist = new List<SiHisempgrupoDataDTO>();
            foreach (var sublista in listadelista)
            {
                listaHist.AddRange(servTitEmp.ListSiHisempgrupoDatas(string.Join(",", sublista)));
            }
            listaHist = listaHist.OrderBy(x => x.Grupocodi).ThenBy(x => x.Hgrdatfecha).ToList();

            return listaHist;
        }

        /// <summary>
        /// por defecto se muestra la empresa actual del equipo, con el TTIE debe mostrar la empresa del envio
        /// </summary>
        /// <param name="objFiltro2"></param>
        /// <param name="idEmpresa"></param>
        private void ActualizarEmpresaTTIE(FTFiltroReporteExcel objFiltro2, int idEmpresa)
        {
            var objEmpresa = GetByIdSiEmpresa(idEmpresa) ?? new SiEmpresaDTO();

            foreach (var item in objFiltro2.ListaDataPropiedadFicha)
            {
                if (item.Ftpropcodi == ConstantesFichaTecnica.PropEmpresa)
                {
                    item.Valor = (objEmpresa.Emprnomb ?? "").Trim();
                }
            }
        }

        #endregion

        #region Generador del Reporte de Ampliaciones de plazo

        /// <summary>
        /// Devuelve el listado de ampliaciones
        /// </summary>
        /// <param name="emprcodis"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="ftetcodi"></param>
        /// <returns></returns>
        public List<FtExtEnvioDTO> ObtenerListadoReporteAmpliacionPlazo(string emprcodis, DateTime fechaInicio, DateTime fechaFin, string ftetcodi)
        {
            List<FtExtEnvioDTO> lstSalida = new List<FtExtEnvioDTO>();
            List<FtExtEnvioDTO> lstTemp = new List<FtExtEnvioDTO>();

            lstTemp = FactorySic.GetFtExtEnvioRepository().ObtenerEnviosEtapas(emprcodis, ConstantesFichaTecnica.PorDefecto, fechaInicio, fechaFin, ftetcodi);
            lstSalida = lstTemp.OrderByDescending(x => x.Ftenvcodi).ToList();

            //Obtenemos el listado de equipos
            List<int> lstIdEnvios = lstSalida.Select(x => x.Ftenvcodi).Distinct().ToList();
            lstSalida = lstSalida.Where(x => x.Ftenvfecampliacion != null).ToList(); // envios solo los que fueron ampliados

            //Obtenemos los envio_log de las ampliaciones 
            List<FtExtEnvioLogDTO> enviosLogAmpliados = FactorySic.GetFtExtEnvioLogRepository().ListarLogsEnviosAmpliados(ConstantesFichaTecnica.PorDefecto.ToString());
            foreach (var log in enviosLogAmpliados)
            {
                FormatearFtExtEnvioLog(log);
            }

            foreach (FtExtEnvioDTO envio in lstSalida)
            {
                FormatearFtExtEnvioParaAmpliaciones(envio);

                //obtengo los amplidos del envio
                List<FtExtEnvioLogDTO> ampliacionesEnvio = enviosLogAmpliados.Where(x => x.Ftenvcodi == envio.Ftenvcodi).OrderBy(x => x.Ftelogfeccreacion).ToList();

                if (ampliacionesEnvio.Any())
                {
                    envio.NumeroAmpliaciones = ampliacionesEnvio.Count();
                    envio.ListaLog = ampliacionesEnvio;
                }
                else
                {
                    envio.NumeroAmpliaciones = 1; //1 por defecto para que pinte vacios (para evitar que caiga en envios anteriores al cambio)
                    List<FtExtEnvioLogDTO> lstLogDefecto = new List<FtExtEnvioLogDTO>();
                    FtExtEnvioLogDTO regLog = new FtExtEnvioLogDTO();
                    regLog.FtelogfecampliacionDesc = "";
                    regLog.FtelogfeccreacionDesc = "";
                    regLog.Ftelogusucreacion = "";
                    lstLogDefecto.Add(regLog);
                    envio.ListaLog = lstLogDefecto;
                }

            }

            return lstSalida;
        }

        /// <summary>
        /// Da formato a registro de envioLog
        /// </summary>
        /// <param name="item"></param>
        private void FormatearFtExtEnvioLog(FtExtEnvioLogDTO item)
        {
            item.FtelogfecampliacionDesc = item.Ftelogfecampliacion != null ? item.Ftelogfecampliacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FtelogfeccreacionDesc = item.Ftelogfeccreacion != null ? item.Ftelogfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;

        }

        /// <summary>
        ///  Da formato a los registros de envios para las ampliaciones
        /// </summary>
        /// <param name="item"></param>
        /// <param name="habilitadoEditarInformacionSegunRol"></param>
        private void FormatearFtExtEnvioParaAmpliaciones(FtExtEnvioDTO item)
        {
            item.FtenvfecsolicitudDesc = item.Ftenvfecsolicitud.ToString(ConstantesAppServicio.FormatoFechaFull2);
            item.FtenvfecfinsubsanarobsDesc = item.Ftenvfecfinsubsanarobs != null ? item.Ftenvfecfinsubsanarobs.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
            item.FtenvfecampliacionDesc = item.Ftenvfecampliacion != null ? item.Ftenvfecampliacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;

        }
        #endregion

        #region Generador de Reporte de Cumplimiento

        /// <summary>
        /// Devuelve el listado de registros del reporte de cumplimiento para la administracion FT
        /// </summary>
        /// <param name="emprcodis"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="idProyecto"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<RegistroCumplimientoAdminFT> ObtenerListadoReporteCumplimientoAdmin(string emprcodis, int ftetcodi, int idProyecto, DateTime fechaInicio, DateTime fechaFin)
        {
            List<RegistroCumplimientoAdminFT> lstSalida = new List<RegistroCumplimientoAdminFT>();

            //Obtengo envios para el filtro ingresado
            List<FtExtEnvioDTO> lstEnviosFiltroTemp = FactorySic.GetFtExtEnvioRepository().ObtenerEnviosEtapas(emprcodis, ConstantesFichaTecnica.PorDefecto, fechaInicio, fechaFin, ftetcodi.ToString()).OrderByDescending(x => x.Ftenvcodi).ToList();
            List<FtExtEnvioDTO> lstEnviosFiltro = idProyecto != -1 ? lstEnviosFiltroTemp.Where(x => x.Ftprycodi == idProyecto).ToList() : lstEnviosFiltroTemp;

            if (lstEnviosFiltro.Any())
            {
                //Obtenemos insumos para obtener Nombre equipos y proyecto para cada registro
                List<int> lstIdEnvios = lstEnviosFiltro.Select(x => x.Ftenvcodi).Distinct().ToList();
                List<FtExtEnvioEqDTO> listaEquiposTotal = ObtenerListadoDeEquiposPorEnvios(lstIdEnvios);
                List<FtExtEnvioVersionDTO> listaVersion = GetByCriteriaFtExtEnvioVersions(string.Join(",", lstIdEnvios));

                string strIdEnvios = string.Join(",", lstIdEnvios);
                List<FtExtEnvioLogDTO> lstEnvioLogs = lstIdEnvios.Any() ? FactorySic.GetFtExtEnvioLogRepository().GetByIdsEnvio(strIdEnvios) : new List<FtExtEnvioLogDTO>();
                List<FtExtEnvioLogDTO> lstEnvioLogsAdminFT = lstEnvioLogs.Where(x => x.Envarcodi == null).ToList();
                foreach (FtExtEnvioDTO regEnvio in lstEnviosFiltro)
                {
                    FormatearFtExtEnvioCumplimiento(regEnvio, listaEquiposTotal, listaVersion);

                    List<CumplimientoDetallesAdminFT> lstAcciones = new List<CumplimientoDetallesAdminFT>();
                    RegistroCumplimientoAdminFT objReg = new RegistroCumplimientoAdminFT();
                    objReg.Ftenvcodi = regEnvio.Ftenvcodi;
                    objReg.Empresa = regEnvio.Emprnomb;
                    objReg.Etapa = regEnvio.Ftetnombre;
                    objReg.NombreProyecto = regEnvio.Ftprynombre;
                    objReg.EquiposProyecto = regEnvio.EquiposProyecto;
                    objReg.NombreEquipos = regEnvio.NombreEquipos;
                    objReg.EquiposProyectoUnico = regEnvio.EquiposProyectoUnico;
                    objReg.NombreEquiposUnico = regEnvio.NombreEquiposUnico;


                    List<FtExtEnvioLogDTO> lstLogXEnvio = lstEnvioLogsAdminFT.Where(p => p.Ftenvcodi == regEnvio.Ftenvcodi).OrderBy(x => x.Ftelogfeccreacion).ThenBy(x => x.Ftelogcodi).ToList();

                    foreach (FtExtEnvioLogDTO log in lstLogXEnvio)
                    {
                        log.Ftelogusucreacion = log.Ftelogusucreacion ?? "";

                        CumplimientoDetallesAdminFT regAccion = new CumplimientoDetallesAdminFT();
                        regAccion.Accion = log.Ftelogobs != null ? (log.Ftelogobs.Trim() != "" ? log.Ftelogobs.Trim() : log.Estenvnomb) : log.Estenvnomb;
                        regAccion.UsuarioRegistroNomb = log.Ftelogusucreacion.Contains("@") ? "AGENTE" : (log.Ftelogusucreacion.Contains("SISTEMA") ? "Sistema COES" : "COES");
                        regAccion.UsuarioRegistroCorreo = log.Ftelogusucreacion;
                        regAccion.FechaHora = log.Ftelogfeccreacion != null ? log.Ftelogfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                        regAccion.Condicion = log.Ftelogcondicion != null ? ObtenerDescripcionCondicion(log.Ftelogcondicion) : "";

                        lstAcciones.Add(regAccion);
                    }

                    objReg.NumAcciones = lstAcciones.Count();
                    objReg.ListaAcciones = lstAcciones;

                    lstSalida.Add(objReg);

                }
            }

            return lstSalida;
        }

        /// <summary>
        /// Devuelve la descripcion de la condicion
        /// </summary>
        /// <param name="idCondicion"></param>
        /// <returns></returns>
        public string ObtenerDescripcionCondicion(string idCondicion)
        {
            string salida = "";

            switch (idCondicion)
            {
                case ConstantesFichaTecnica.CondicionEnPlazo:
                    salida = "En Plazo"; break;
                case ConstantesFichaTecnica.CondicionFueraPlazo:
                    salida = "Fuera de Plazo"; break;
                case ConstantesFichaTecnica.CondicionNoAtendido:
                    salida = "No Atendido por el área"; break;
            }

            return salida;
        }

        /// <summary>
        /// Completa los campos puntuales para el envio
        /// </summary>
        /// <param name="item"></param>
        /// <param name="listaEquiposTotal"></param>
        /// <param name="listaVersion"></param>
        private void FormatearFtExtEnvioCumplimiento(FtExtEnvioDTO item, List<FtExtEnvioEqDTO> listaEquiposTotal, List<FtExtEnvioVersionDTO> listaVersion)
        {
            #region Versiones

            //solo considerar las versiones que tienen la misma carpeta que el envio
            var listaHist = listaVersion.Where(x => x.Ftenvcodi == item.Ftenvcodi).OrderByDescending(x => x.Ftevercodi).ToList();

            //ultimo temporal (son autoguardado pero no log)
            var objTmpExt = listaHist.Where(x => x.Estenvcodi == item.Estenvcodi && x.Ftevertipo == ConstantesFichaTecnica.GuardadoTemporal && x.Fteverusucreacion.Contains("@")).FirstOrDefault();
            if (objTmpExt != null)
            {
                item.FtevercodiTemporalExtranet = objTmpExt.Ftevercodi;
                item.VersionTemporalExtranet = objTmpExt;
            }

            var objTmpInt = listaHist.Where(x => x.Estenvcodi == item.Estenvcodi && x.Ftevertipo == ConstantesFichaTecnica.GuardadoTemporal && !x.Fteverusucreacion.Contains("@")).FirstOrDefault();
            if (objTmpInt != null)
            {
                item.FtevercodiTemporalIntranet = objTmpInt.Ftevercodi;
                item.VersionTemporalIntranet = objTmpInt;
            }

            //version actual
            var objUltimaVersionOficial = listaHist.Where(x => x.Ftevertipo == ConstantesFichaTecnica.GuardadoOficial).FirstOrDefault();
            if (objUltimaVersionOficial != null)
            {
                item.FtevercodiOficial = objUltimaVersionOficial.Ftevercodi;
                item.VersionOficialActual = objUltimaVersionOficial;

                item.VersionActual = objUltimaVersionOficial;
                item.FtevercodiActual = objUltimaVersionOficial.Ftevercodi;
            }

            //version para comparar cambios en Modificación de Ficha técnica

            var objModif = listaVersion.Where(x => x.Ftevertipo == ConstantesFichaTecnica.GuardadoTemporalFTVigente).OrderByDescending(x => x.Ftevercodi).FirstOrDefault();
            if (objModif != null)
            {
                item.FtevercodiTemporalFTVigente = objModif.Ftevercodi;
            }

            #endregion


            #region Equipos Proyecto y Nombre Equipos

            List<string> lstNombEquiposArea = new List<string>();
            List<FtExtEnvioEqDTO> lstEquiposPorEnvio = listaEquiposTotal.Where(x => x.Ftevercodi == item.FtevercodiOficial).OrderBy(x => x.Nombreelemento).ToList();
            foreach (var reg in lstEquiposPorEnvio)
            {
                string nombE = reg.Nombreelemento != null ? reg.Nombreelemento.Trim() : "";
                string nombU = reg.Areaelemento != null ? reg.Areaelemento.Trim() : "";
                string cad = nombE + " (" + nombU + ")";
                lstNombEquiposArea.Add(cad);
            }

            if (item.Ftetcodi == ConstantesFichaTecnica.EtapaModificacion)
            {
                item.Ftprynombre = "";
                item.EquiposProyecto = "";
                item.EquiposProyectoUnico = "";
                item.NombreEquipos = lstNombEquiposArea.Any() ? string.Join(", ", lstNombEquiposArea) : "";
                item.NombreEquiposUnico = lstNombEquiposArea.Any() ? lstNombEquiposArea.First() : "";
            }
            else
            {
                if (item.Ftetcodi == ConstantesFichaTecnica.EtapaConexion || item.Ftetcodi == ConstantesFichaTecnica.EtapaIntegracion || item.Ftetcodi == ConstantesFichaTecnica.EtapaOperacionComercial)
                {

                    item.NombreEquipos = lstNombEquiposArea.Any() ? string.Join(", ", lstNombEquiposArea) : "";
                    item.NombreEquiposUnico = lstNombEquiposArea.Any() ? lstNombEquiposArea.First() : "";
                    item.EquiposProyecto = item.NombreEquipos;
                    item.EquiposProyectoUnico = item.NombreEquiposUnico;
                }
            }

            #endregion

        }

        /// <summary>
        /// Genera el reporte del listado de envios
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pathLogo"></param>
        /// <param name="empresas"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="idProyecto"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoCumplimientoAdminFT(string ruta, string pathLogo, string empresas, DateTime fechaInicio, DateTime fechaFin, int idProyecto, int ftetcodi, string nameFile)
        {
            List<RegistroCumplimientoAdminFT> listaEnviosTotales = ObtenerListadoReporteCumplimientoAdmin(empresas, ftetcodi, idProyecto, fechaInicio, fechaFin);

            string empresasDesc = "TODOS";
            string etapasDesc = "TODOS";
            string proyectosDesc = "TODOS";

            if (empresas != "-1")
            {
                List<int> lstIdEmpresas = empresas.Split(',').Select(x => int.Parse(x)).ToList();
                List<EmpresaCoes> listaEmpresas = ListarEmpresasExtranetFT();
                List<EmpresaCoes> listaEmpresasFiltro = listaEmpresas.Where(x => lstIdEmpresas.Contains(x.Emprcodi)).OrderBy(x => x.Emprnomb).ToList();
                empresasDesc = listaEmpresasFiltro.Any() ? string.Join(", ", listaEmpresasFiltro.Where(x => x.Emprnomb != null).Select(x => x.Emprnomb.Trim()).ToList()) : "";
            }

            if (ftetcodi != -1)
            {
                List<FtExtEtapaDTO> listaEtapas = ListFtExtEtapas();
                FtExtEtapaDTO etapa = listaEtapas.Find(x => x.Ftetcodi == ftetcodi);
                etapasDesc = etapa != null ? etapa.Ftetnombre : "";
            }

            if (idProyecto != -1)
            {
                List<FtExtProyectoDTO> listaProyectos = GetProyectosByEstado(ConstantesFichaTecnica.EstadoStrActivo).OrderBy(x => x.Ftprynombre).ToList();
                FtExtProyectoDTO proyecto = listaProyectos.Find(x => x.Ftprycodi == idProyecto);
                proyectosDesc = proyecto != null ? (proyecto.Ftprynombre != null ? proyecto.Ftprynombre.Trim() : "") : "";
            }



            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelCumplimientoAdminFT(xlPackage, pathLogo, listaEnviosTotales, fechaInicio, fechaFin, empresasDesc, etapasDesc, proyectosDesc);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera la estructura del reporte del listado de envios a exportar
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="listaEnviosTotales"></param>
        /// <param name="idProyecto"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="empresasDesc"></param>
        /// <param name="etapasDesc"></param>
        /// <param name="proyectosDesc"></param>
        private void GenerarArchivoExcelCumplimientoAdminFT(ExcelPackage xlPackage, string pathLogo, List<RegistroCumplimientoAdminFT> listaEnviosTotales, DateTime fechaInicio, DateTime fechaFin, string empresasDesc, string etapasDesc, string proyectosDesc)
        {

            string nameWS = "REPORTE";
            string titulo = "REPORTE DE CUMPLIMIENTO DE PLAZOS";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;



            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniFecha = colIniTitulo + 1;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo + 1;
            int rowIniTabla = rowIniTitulo + 10;

            int colEmpresa = colIniTable + 1;
            int colEtapa = colIniTable + 2;
            int colNombProyecto = colIniTable + 3;
            int colEquiProyecto = colIniTable + 4;
            int colNombEquipos = colIniTable + 5;
            int colNroRegistro = colIniTable + 6;

            int colAcciones = colIniTable + 7;
            int colUsuario = colIniTable + 8;
            int colCorreoUsuario = colIniTable + 9;
            int colFechaHora = colIniTable + 10;
            int colCondicion = colIniTable + 11;

            int colUltima = colCondicion + 1;

            ws.Column(colEmpresa).Width = 20;
            ws.Column(colEtapa).Width = 15;
            ws.Column(colNombProyecto).Width = 20;
            ws.Column(colEquiProyecto).Width = 20;
            ws.Column(colNombEquipos).Width = 20;
            ws.Column(colNroRegistro).Width = 10;
            ws.Column(colAcciones).Width = 60;
            ws.Column(colUsuario).Width = 20;
            ws.Column(colCorreoUsuario).Width = 35;
            ws.Column(colFechaHora).Width = 18;
            ws.Column(colCondicion).Width = 15;

            ws.Row(rowIniTabla).Height = 25;


            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
            ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

            ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Empresa(s):";
            ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = empresasDesc;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Etapa(s):";
            ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = etapasDesc;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 3, colIniFecha].Value = "Proyecto(s):";
            ws.Cells[rowIniFecha + 3, colIniFecha + 1].Value = proyectosDesc;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 3, colIniFecha, rowIniFecha + 3, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 3, colIniFecha, rowIniFecha + 3, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 4, colIniFecha].Value = "Desde:";
            ws.Cells[rowIniFecha + 4, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 4, colIniFecha, rowIniFecha + 4, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 4, colIniFecha, rowIniFecha + 4, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 5, colIniFecha].Value = "Hasta:";
            ws.Cells[rowIniFecha + 5, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 5, colIniFecha, rowIniFecha + 5, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 5, colIniFecha, rowIniFecha + 5, colIniFecha + 1, "Calibri", 10);

            ws.Row(rowIniTabla).Height = 40;

            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colEtapa].Value = "Etapa";
            ws.Cells[rowIniTabla, colNombProyecto].Value = "Nombre Proyecto";
            ws.Cells[rowIniTabla, colEquiProyecto].Value = "Equipo(s) Proyecto";
            ws.Cells[rowIniTabla, colNombEquipos].Value = "Nombre Equipo(s)";
            ws.Cells[rowIniTabla, colNroRegistro].Value = "Código de Envío";
            ws.Cells[rowIniTabla, colAcciones].Value = "Acciones";
            ws.Cells[rowIniTabla, colUsuario].Value = "Usuario Registro";
            ws.Cells[rowIniTabla, colCorreoUsuario].Value = "Correo Usuario Registro";
            ws.Cells[rowIniTabla, colFechaHora].Value = "Fecha Hora";
            ws.Cells[rowIniTabla, colCondicion].Value = "Condición";

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima, "Centro");


            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 5, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "#000000");
            UtilExcel.CeldasExcelWrapText(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1);
            #endregion

            #region Cuerpo Principal

            int rowData = rowIniTabla + 1;

            foreach (RegistroCumplimientoAdminFT item in listaEnviosTotales)
            {
                ws.Cells[rowData, colEmpresa].Value = item.Empresa.Trim();
                ws.Cells[rowData, colEtapa].Value = item.Etapa.Trim();
                ws.Cells[rowData, colNombProyecto].Value = item.NombreProyecto.Trim();
                ws.Cells[rowData, colEquiProyecto].Value = item.EquiposProyecto.Trim();
                ws.Cells[rowData, colNombEquipos].Value = item.NombreEquipos.Trim();
                ws.Cells[rowData, colNroRegistro].Value = item.Ftenvcodi;

                int rowAIni = rowData;
                foreach (CumplimientoDetallesAdminFT log in item.ListaAcciones)
                {
                    ws.Cells[rowData, colAcciones].Value = log.Accion;
                    ws.Cells[rowData, colUsuario].Value = log.UsuarioRegistroNomb;
                    ws.Cells[rowData, colCorreoUsuario].Value = log.UsuarioRegistroCorreo;
                    ws.Cells[rowData, colFechaHora].Value = log.FechaHora;
                    ws.Cells[rowData, colCondicion].Value = log.Condicion;

                    rowData++;
                }

                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colEmpresa, rowData - 1, colEmpresa);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colEtapa, rowData - 1, colEtapa);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colNombProyecto, rowData - 1, colNombProyecto);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colEquiProyecto, rowData - 1, colEquiProyecto);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colNombEquipos, rowData - 1, colNombEquipos);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colNroRegistro, rowData - 1, colNroRegistro);

            }

            if (!listaEnviosTotales.Any()) rowData++;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Calibri", 8);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelWrapText(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1);

            #endregion

            //filter            
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        /// <summary>
        /// Genera el reporte del listado de envios del reporte de cumplimiento de areas
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pathLogo"></param>
        /// <param name="empresas"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="idEstado"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoCumplimientoAreas(string ruta, string pathLogo, string empresas, DateTime fechaInicio, DateTime fechaFin, int idProyecto, int idArea, int ftetcodi, string nameFile)
        {
            List<RegistroCumplimientoRevAreas> listaEnviosTotales = ObtenerListadoReporteCumplimientoRevisionAreas(empresas, ftetcodi, idProyecto, idArea, fechaInicio, fechaFin);


            string empresasDesc = "TODOS";
            string etapasDesc = "TODOS";
            string proyectosDesc = "TODOS";
            string areasDesc = "TODOS";

            if (empresas != "-1")
            {
                List<int> lstIdEmpresas = empresas.Split(',').Select(x => int.Parse(x)).ToList();
                List<EmpresaCoes> listaEmpresas = ListarEmpresasExtranetFT();
                List<EmpresaCoes> listaEmpresasFiltro = listaEmpresas.Where(x => lstIdEmpresas.Contains(x.Emprcodi)).OrderBy(x => x.Emprnomb).ToList();
                empresasDesc = listaEmpresasFiltro.Any() ? string.Join(", ", listaEmpresasFiltro.Where(x => x.Emprnomb != null).Select(x => x.Emprnomb.Trim()).ToList()) : "";
            }

            if (ftetcodi != -1)
            {
                List<FtExtEtapaDTO> listaEtapas = ListFtExtEtapas();
                FtExtEtapaDTO etapa = listaEtapas.Find(x => x.Ftetcodi == ftetcodi);
                etapasDesc = etapa != null ? etapa.Ftetnombre : "";
            }

            if (idProyecto != -1)
            {
                List<FtExtProyectoDTO> listaProyectos = GetProyectosByEstado(ConstantesFichaTecnica.EstadoStrActivo).OrderBy(x => x.Ftprynombre).ToList();
                FtExtProyectoDTO proyecto = listaProyectos.Find(x => x.Ftprycodi == idProyecto);
                proyectosDesc = proyecto != null ? (proyecto.Ftprynombre != null ? proyecto.Ftprynombre.Trim() : "") : "";
            }

            if (idArea != -1)
            {
                List<FtExtCorreoareaDTO> listaAreas = ListFtExtCorreoareas().Where(x => x.Faremestado == ConstantesFichaTecnica.EstadoStrActivo && x.Faremcodi != ConstantesFichaTecnica.IdAreaAdminFT).ToList();
                FtExtCorreoareaDTO area = listaAreas.Find(x => x.Faremcodi == idArea);
                areasDesc = area != null ? (area.Faremnombre != null ? area.Faremnombre.Trim() : "") : "";
            }


            ////Descargo archivo segun requieran
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarArchivoExcelCumplimientoAreas(xlPackage, pathLogo, listaEnviosTotales, idProyecto, idArea, fechaInicio, fechaFin, empresasDesc, etapasDesc, proyectosDesc, areasDesc);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera la estructura del reporte de cumplimiento para areas a exportar
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="pathLogo"></param>
        /// <param name="listaEnviosTotales"></param>
        /// <param name="idProyecto"></param>
        /// <param name="idArea"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="empresasDesc"></param>
        /// <param name="etapasDesc"></param>
        /// <param name="proyectosDesc"></param>
        /// <param name="areasDesc"></param>
        private void GenerarArchivoExcelCumplimientoAreas(ExcelPackage xlPackage, string pathLogo, List<RegistroCumplimientoRevAreas> listaEnviosTotales, int idProyecto, int idArea, DateTime fechaInicio, DateTime fechaFin, string empresasDesc, string etapasDesc, string proyectosDesc, string areasDesc)
        {

            string nameWS = "REPORTE";
            string titulo = "REPORTE DE SEGUIMIENTO DE RESPUESTAS DE ÁREAS";

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            ws.Row(1).Height = 25;
            ws.Row(2).Height = 25;



            UtilExcel.AddImageLocal(ws, 1, 0, pathLogo, 120, 70);

            #region  Filtros y Cabecera

            int colIniTitulo = 2;
            int rowIniTitulo = 4;

            int colIniFecha = colIniTitulo + 1;
            int rowIniFecha = rowIniTitulo + 2;

            int colIniTable = colIniTitulo + 1;
            int rowIniTabla = rowIniTitulo + 11;

            int colEmpresa = colIniTable + 1;
            int colEtapa = colIniTable + 2;
            int colNombProyecto = colIniTable + 3;
            int colEquiProyecto = colIniTable + 4;
            int colNombEquipos = colIniTable + 5;
            int colNroRegistro = colIniTable + 6;

            int colAcciones = colIniTable + 7;
            int colAreasAsignadas = colIniTable + 8;
            int colUsuario = colIniTable + 9;
            int colPlazoLimite = colIniTable + 10;
            int colCorreoUsuario = colIniTable + 11;
            int colFechaHora = colIniTable + 12;
            int colCondicion = colIniTable + 13;

            int colUltima = colCondicion + 1;

            ws.Column(colEmpresa).Width = 20;
            ws.Column(colEtapa).Width = 15;
            ws.Column(colNombProyecto).Width = 20;
            ws.Column(colEquiProyecto).Width = 20;
            ws.Column(colNombEquipos).Width = 20;
            ws.Column(colNroRegistro).Width = 10;
            ws.Column(colAcciones).Width = 60;
            ws.Column(colAreasAsignadas).Width = 60;
            ws.Column(colUsuario).Width = 20;
            ws.Column(colPlazoLimite).Width = 18;
            ws.Column(colCorreoUsuario).Width = 35;
            ws.Column(colFechaHora).Width = 18;
            ws.Column(colCondicion).Width = 15;

            ws.Row(rowIniTabla).Height = 25;


            ws.Cells[rowIniTitulo, colIniTitulo].Value = titulo;
            ws.Cells[rowIniFecha, colIniFecha].Value = "Fecha de consulta:";
            ws.Cells[rowIniFecha, colIniFecha + 1].Value = DateTime.Now.ToString(ConstantesAppServicio.FormatoFechaHora);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha + 2, rowIniFecha, colIniFecha + 2, "Calibri", 10);

            ws.Cells[rowIniFecha + 1, colIniFecha].Value = "Empresa(s):";
            ws.Cells[rowIniFecha + 1, colIniFecha + 1].Value = empresasDesc;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 1, colIniFecha, rowIniFecha + 1, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 2, colIniFecha].Value = "Etapa(s):";
            ws.Cells[rowIniFecha + 2, colIniFecha + 1].Value = etapasDesc;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 2, colIniFecha, rowIniFecha + 2, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 3, colIniFecha].Value = "Proyecto(s):";
            ws.Cells[rowIniFecha + 3, colIniFecha + 1].Value = proyectosDesc;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 3, colIniFecha, rowIniFecha + 3, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 3, colIniFecha, rowIniFecha + 3, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 4, colIniFecha].Value = "Área(s):";
            ws.Cells[rowIniFecha + 4, colIniFecha + 1].Value = areasDesc;
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 4, colIniFecha, rowIniFecha + 4, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 4, colIniFecha, rowIniFecha + 4, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 5, colIniFecha].Value = "Desde:";
            ws.Cells[rowIniFecha + 5, colIniFecha + 1].Value = fechaInicio.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 5, colIniFecha, rowIniFecha + 5, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 5, colIniFecha, rowIniFecha + 5, colIniFecha + 1, "Calibri", 10);

            ws.Cells[rowIniFecha + 6, colIniFecha].Value = "Hasta:";
            ws.Cells[rowIniFecha + 6, colIniFecha + 1].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniFecha + 6, colIniFecha, rowIniFecha + 6, colIniFecha, "Derecha");
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha + 6, colIniFecha, rowIniFecha + 6, colIniFecha + 1, "Calibri", 10);

            ws.Row(rowIniTabla).Height = 40;

            ws.Cells[rowIniTabla, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniTabla, colEtapa].Value = "Etapa";
            ws.Cells[rowIniTabla, colNombProyecto].Value = "Nombre Proyecto";
            ws.Cells[rowIniTabla, colEquiProyecto].Value = "Equipo(s) Proyecto";
            ws.Cells[rowIniTabla, colNombEquipos].Value = "Nombre Equipo(s)";
            ws.Cells[rowIniTabla, colNroRegistro].Value = "Código de Envío";
            ws.Cells[rowIniTabla, colAcciones].Value = "Acciones";
            ws.Cells[rowIniTabla, colAreasAsignadas].Value = "Área(s) COES asignada(s)";
            ws.Cells[rowIniTabla, colUsuario].Value = "Usuario Registro";
            ws.Cells[rowIniTabla, colPlazoLimite].Value = "Plazo límite de respuesta (Área(s) COES)";
            ws.Cells[rowIniTabla, colCorreoUsuario].Value = "Correo Usuario Registro";
            ws.Cells[rowIniTabla, colFechaHora].Value = "Fecha Hora";
            ws.Cells[rowIniTabla, colCondicion].Value = "Condición";

            //Estilos titulo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo, "Calibri", 16);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colIniTitulo);
            UtilExcel.CeldasExcelAgrupar(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTitulo, colIniTitulo, rowIniTitulo, colUltima, "Centro");


            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniFecha, colIniFecha, rowIniFecha, colIniFecha + 1, "Calibri", 10);
            UtilExcel.CeldasExcelEnNegrita(ws, rowIniFecha, colIniFecha, rowIniFecha + 5, colIniFecha);

            //Estilos cabecera
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "Calibri", 11);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelColorFondo(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "#2980B9");
            UtilExcel.CeldasExcelColorTexto(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "#FFFFFF");
            UtilExcel.BorderCeldasHair(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1, "#000000");
            UtilExcel.CeldasExcelWrapText(ws, rowIniTabla, colEmpresa, rowIniTabla, colUltima - 1);
            #endregion

            #region Cuerpo Principal  

            int rowData = rowIniTabla + 1;

            foreach (RegistroCumplimientoRevAreas item in listaEnviosTotales)
            {
                ws.Cells[rowData, colEmpresa].Value = item.Empresa.Trim();
                ws.Cells[rowData, colEtapa].Value = item.Etapa.Trim();
                ws.Cells[rowData, colNombProyecto].Value = item.NombreProyecto.Trim();
                ws.Cells[rowData, colEquiProyecto].Value = item.EquiposProyecto.Trim();
                ws.Cells[rowData, colNombEquipos].Value = item.NombreEquipos.Trim();
                ws.Cells[rowData, colNroRegistro].Value = item.Ftenvcodi;

                int rowAIni = rowData;
                foreach (CumplimientoDetallesAreas log in item.ListaAcciones)
                {
                    ws.Cells[rowData, colAcciones].Value = log.Accion;
                    ws.Cells[rowData, colAreasAsignadas].Value = log.AreasCOESAsignadas;
                    ws.Cells[rowData, colUsuario].Value = log.UsuarioRegistroNomb;
                    ws.Cells[rowData, colPlazoLimite].Value = log.PlazoLimiteRpta;
                    ws.Cells[rowData, colCorreoUsuario].Value = log.UsuarioRegistroCorreo;
                    ws.Cells[rowData, colFechaHora].Value = log.FechaHora;
                    ws.Cells[rowData, colCondicion].Value = log.Condicion;

                    rowData++;
                }

                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colEmpresa, rowData - 1, colEmpresa);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colEtapa, rowData - 1, colEtapa);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colNombProyecto, rowData - 1, colNombProyecto);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colEquiProyecto, rowData - 1, colEquiProyecto);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colNombEquipos, rowData - 1, colNombEquipos);
                UtilExcel.CeldasExcelAgrupar(ws, rowAIni, colNroRegistro, rowData - 1, colNroRegistro);

            }

            if (!listaEnviosTotales.Any()) rowData++;

            //Estilos registros
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Calibri", 8);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.BorderCeldasThin(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "#000000");
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1, "Centro");
            UtilExcel.CeldasExcelWrapText(ws, rowIniTabla + 1, colEmpresa, rowData - 1, colUltima - 1);

            #endregion

            //filter

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 100;
            ws.View.FreezePanes(rowIniTabla + 1, 1);
        }

        /// <summary>
        /// Devuelve el listado de registros del reporte de cumplimiento para la revisiond e areas
        /// </summary>
        /// <param name="emprcodis"></param>
        /// <param name="ftetcodi"></param>
        /// <param name="idProyecto"></param>
        /// <param name="idArea"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<RegistroCumplimientoRevAreas> ObtenerListadoReporteCumplimientoRevisionAreas(string emprcodis, int ftetcodi, int idProyecto, int idArea, DateTime fechaInicio, DateTime fechaFin)
        {

            //Obtengo envios para el filtro ingresado
            List<FtExtEnvioDTO> lstEnviosFiltroTemp = FactorySic.GetFtExtEnvioRepository().ObtenerEnviosEtapas(emprcodis, ConstantesFichaTecnica.PorDefecto, fechaInicio, fechaFin, ftetcodi.ToString()).OrderByDescending(x => x.Ftenvcodi).ToList();
            List<FtExtEnvioDTO> lstEnviosFiltro = idProyecto != -1 ? lstEnviosFiltroTemp.Where(x => x.Ftprycodi == idProyecto).ToList() : lstEnviosFiltroTemp;

            return ListarLogCumplimientoRevisionAreas(lstEnviosFiltro, idArea);
        }

        private List<RegistroCumplimientoRevAreas> ListarLogCumplimientoRevisionAreas(List<FtExtEnvioDTO> lstEnviosFiltro, int idArea)
        {
            List<RegistroCumplimientoRevAreas> lstSalida = new List<RegistroCumplimientoRevAreas>();

            if (lstEnviosFiltro.Any())
            {
                //Obtenemos insumos para obtener Nombre equipos y proyecto para cada registro
                List<int> lstIdEnvios = lstEnviosFiltro.Select(x => x.Ftenvcodi).Distinct().ToList();
                List<FtExtEnvioEqDTO> listaEquiposTotal = ObtenerListadoDeEquiposPorEnvios(lstIdEnvios);
                List<FtExtEnvioVersionDTO> listaVersion = GetByCriteriaFtExtEnvioVersions(string.Join(",", lstIdEnvios));

                string strIdEnvios = string.Join(",", lstIdEnvios);
                List<FtExtEnvioLogDTO> lstEnvioLogsDerivados = lstIdEnvios.Any() ? FactorySic.GetFtExtEnvioLogRepository().GetByIdsEnvioRevisionAreas(strIdEnvios) : new List<FtExtEnvioLogDTO>();


                foreach (FtExtEnvioDTO regEnvio in lstEnviosFiltro)
                {

                    FormatearFtExtEnvioCumplimiento(regEnvio, listaEquiposTotal, listaVersion);

                    //Encuentro el log del envio
                    List<FtExtEnvioLogDTO> lstLogXEnvio = lstEnvioLogsDerivados.Where(p => p.Ftenvcodi == regEnvio.Ftenvcodi).OrderBy(x => x.Ftelogfeccreacion).ThenBy(x => x.Ftelogcodi).ToList();
                    List<FtExtEnvioLogDTO> lstLogXEnvioSolicitados = lstLogXEnvio.Where(x => x.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud).ToList();
                    List<FtExtEnvioLogDTO> lstLogXEnvioSubsanados = lstLogXEnvio.Where(x => x.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs).ToList();
                    List<FtExtEnvioLogDTO> lstLogXEnvioNotificado = lstLogXEnvio.Where(x => x.Estenvcodi == ConstantesFichaTecnica.EstadoNotificado).ToList();

                    List<CumplimientoDetallesAreas> lstAcciones = new List<CumplimientoDetallesAreas>();

                    #region Acciones solicitados
                    List<FtExtEnvioLogDTO> lstLogXEnvioAlDerivarSolicitados = lstLogXEnvioSolicitados.Where(x => x.Ftelogobs == ConstantesFichaTecnica.MensajeLogDerivacionArea).ToList();
                    List<int> idFaremcodisAlDerivarSolicitados = lstLogXEnvioAlDerivarSolicitados.Select(x => x.Faremcodi).ToList();
                    FtExtEnvioLogDTO objLogAlDerivarSolicitados = lstLogXEnvioAlDerivarSolicitados.Any() ? lstLogXEnvioAlDerivarSolicitados.First() : new FtExtEnvioLogDTO();
                    string areasAsignadasSol = string.Join(", ", lstLogXEnvioAlDerivarSolicitados.Select(x => x.Faremnombre).OrderBy(x => x).ToList());
                    List<FtExtEnvioLogDTO> lstLogXEnvioOtrosAlRevisarSolicitados = (List<FtExtEnvioLogDTO>)lstLogXEnvioSolicitados.Except(lstLogXEnvioAlDerivarSolicitados).OrderBy(x => x.Ftelogfeccreacion).ThenBy(x => x.Ftelogcodi).ToList();

                    /*
                    RegistroCumplimientoRevAreas objReg = new RegistroCumplimientoRevAreas();
                    objReg.Ftenvcodi = regEnvio.Ftenvcodi;
                    objReg.Empresa = regEnvio.Emprnomb;
                    objReg.Etapa = regEnvio.Ftetnombre;
                    objReg.NombreProyecto = regEnvio.Ftprynombre;
                    objReg.EquiposProyecto = regEnvio.EquiposProyecto;
                    objReg.NombreEquipos = regEnvio.NombreEquipos;
                    objReg.EquiposProyectoUnico = regEnvio.EquiposProyectoUnico;
                    objReg.NombreEquiposUnico = regEnvio.NombreEquiposUnico;
                    */
                    if (lstLogXEnvioAlDerivarSolicitados.Any())
                    {
                        bool incluirGlobalSolicitados = true;
                        if (idArea != ConstantesFichaTecnica.PorDefecto)
                        {
                            incluirGlobalSolicitados = idFaremcodisAlDerivarSolicitados.Contains(idArea);
                        }

                        if (incluirGlobalSolicitados)
                        {
                            string nombCarpeta = objLogAlDerivarSolicitados != null ? (objLogAlDerivarSolicitados.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud ? ConstantesFichaTecnica.CarpetaAreasRCSolicitud : (objLogAlDerivarSolicitados.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs ? ConstantesFichaTecnica.CarpetaAreasRCSubsanacíon : "")) : "";
                            //Primera accion al realizar la derivación
                            CumplimientoDetallesAreas regAccionIni = new CumplimientoDetallesAreas();
                            regAccionIni.Accion = nombCarpeta + ": Se derivó el envío para la revisión de las áreas";
                            regAccionIni.AreasCOESAsignadas = areasAsignadasSol;
                            regAccionIni.UsuarioRegistroNomb = "Administrador de la Ficha Técnica";
                            regAccionIni.PlazoLimiteRpta = objLogAlDerivarSolicitados != null ? objLogAlDerivarSolicitados.Envarfecmaxrpta.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                            regAccionIni.UsuarioRegistroCorreo = objLogAlDerivarSolicitados != null ? objLogAlDerivarSolicitados.Ftelogusucreacion : "";
                            regAccionIni.FechaHora = objLogAlDerivarSolicitados != null ? (objLogAlDerivarSolicitados.Ftelogfeccreacion != null ? objLogAlDerivarSolicitados.Ftelogfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2) : "") : "";
                            regAccionIni.Condicion = "";
                            lstAcciones.Add(regAccionIni);
                        }
                    }

                    //Ahora los log de las revisiones
                    int numArea = 1;
                    foreach (FtExtEnvioLogDTO log in lstLogXEnvioOtrosAlRevisarSolicitados)
                    {
                        bool incluirRegSolicitados = true;
                        if (idArea != ConstantesFichaTecnica.PorDefecto)
                        {
                            incluirRegSolicitados = log.Faremcodi == idArea ? true : false;
                        }

                        if (incluirRegSolicitados)
                        {
                            CumplimientoDetallesAreas regAccion = new CumplimientoDetallesAreas();
                            regAccion.Accion = log.Ftelogobs != null ? log.Ftelogobs.Trim() : "";
                            regAccion.AreasCOESAsignadas = log.Faremnombre != null ? log.Faremnombre : "";
                            regAccion.UsuarioRegistroNomb = log.Ftelogusucreacion.Contains("SISTEMA") ? "Sistema COES" : ("Área COES " + numArea);
                            regAccion.PlazoLimiteRpta = log != null ? log.Envarfecmaxrpta.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                            regAccion.UsuarioRegistroCorreo = log != null ? log.Ftelogusucreacion : "";
                            regAccion.FechaHora = log.Ftelogfeccreacion != null ? log.Ftelogfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                            regAccion.Condicion = log.Ftelogcondicion != null ? ObtenerDescripcionCondicion(log.Ftelogcondicion) : "";
                            lstAcciones.Add(regAccion);

                            numArea++;
                        }
                    }

                    foreach (var log in lstLogXEnvioNotificado)
                    {
                        CumplimientoDetallesAreas regAccion = new CumplimientoDetallesAreas();
                        regAccion.Accion = log.Ftelogobs != null ? log.Ftelogobs.Trim() : "";
                        regAccion.AreasCOESAsignadas = log.Faremnombre != null ? log.Faremnombre : "";
                        regAccion.UsuarioRegistroNomb = log.Ftelogusucreacion.Contains("SISTEMA") ? "Sistema COES" : ("Área COES " + numArea);
                        regAccion.PlazoLimiteRpta = log != null ? log.Envarfecmaxrpta.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                        regAccion.UsuarioRegistroCorreo = log != null ? log.Ftelogusucreacion : "";
                        regAccion.FechaHora = log.Ftelogfeccreacion != null ? log.Ftelogfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                        regAccion.Condicion = log.Ftelogcondicion != null ? ObtenerDescripcionCondicion(log.Ftelogcondicion) : "";
                        lstAcciones.Add(regAccion);

                        numArea++;
                    }

                    #endregion

                    #region Acciones subsanados
                    List<FtExtEnvioLogDTO> lstLogXEnvioAlDerivarSubsanados = lstLogXEnvioSubsanados.Where(x => x.Ftelogobs == ConstantesFichaTecnica.MensajeLogDerivacionArea).ToList();
                    List<int> idFaremcodisAlDerivarSubsanados = lstLogXEnvioAlDerivarSubsanados.Select(x => x.Faremcodi).ToList();
                    FtExtEnvioLogDTO objLogAlDerivarSubsanado = lstLogXEnvioAlDerivarSubsanados.Any() ? lstLogXEnvioAlDerivarSubsanados.First() : new FtExtEnvioLogDTO();
                    string areasAsignadasSub = string.Join(", ", lstLogXEnvioAlDerivarSubsanados.Select(x => x.Faremnombre).OrderBy(x => x).ToList());
                    List<FtExtEnvioLogDTO> lstLogXEnvioOtrosAlRevisarSubsanados = (List<FtExtEnvioLogDTO>)lstLogXEnvioSubsanados.Except(lstLogXEnvioAlDerivarSubsanados).OrderBy(x => x.Ftelogfeccreacion).ThenBy(x => x.Ftelogcodi).ToList();

                    RegistroCumplimientoRevAreas objRegSB = new RegistroCumplimientoRevAreas();
                    objRegSB.Ftenvcodi = regEnvio.Ftenvcodi;
                    objRegSB.Empresa = regEnvio.Emprnomb;
                    objRegSB.Etapa = regEnvio.Ftetnombre;
                    objRegSB.NombreProyecto = regEnvio.Ftprynombre;
                    objRegSB.EquiposProyecto = regEnvio.EquiposProyecto;
                    objRegSB.NombreEquipos = regEnvio.NombreEquipos;
                    objRegSB.EquiposProyectoUnico = regEnvio.EquiposProyectoUnico;
                    objRegSB.NombreEquiposUnico = regEnvio.NombreEquiposUnico;

                    if (lstLogXEnvioAlDerivarSubsanados.Any())
                    {
                        bool incluirGlobalSubsanados = true;
                        if (idArea != ConstantesFichaTecnica.PorDefecto)
                        {
                            incluirGlobalSubsanados = idFaremcodisAlDerivarSubsanados.Contains(idArea);
                        }

                        if (incluirGlobalSubsanados)
                        {
                            string nombCarpeta = objLogAlDerivarSubsanado != null ? (objLogAlDerivarSubsanado.Estenvcodi == ConstantesFichaTecnica.EstadoSolicitud ? ConstantesFichaTecnica.CarpetaAreasRCSolicitud : (objLogAlDerivarSubsanado.Estenvcodi == ConstantesFichaTecnica.EstadoSubsanacionObs ? ConstantesFichaTecnica.CarpetaAreasRCSubsanacíon : "")) : "";
                            //Primera accion al realizar la derivación
                            CumplimientoDetallesAreas regAccionIni = new CumplimientoDetallesAreas();
                            regAccionIni.Accion = nombCarpeta + ": Se derivó el envío para la revisión de las áreas";
                            regAccionIni.AreasCOESAsignadas = areasAsignadasSub;
                            regAccionIni.UsuarioRegistroNomb = "Administrador de la Ficha Técnica";
                            regAccionIni.PlazoLimiteRpta = objLogAlDerivarSubsanado != null ? objLogAlDerivarSubsanado.Envarfecmaxrpta.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                            regAccionIni.UsuarioRegistroCorreo = objLogAlDerivarSubsanado != null ? objLogAlDerivarSubsanado.Ftelogusucreacion : "";
                            regAccionIni.FechaHora = objLogAlDerivarSubsanado != null ? (objLogAlDerivarSubsanado.Ftelogfeccreacion != null ? objLogAlDerivarSubsanado.Ftelogfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2) : "") : "";
                            regAccionIni.Condicion = "";
                            lstAcciones.Add(regAccionIni);
                        }
                    }

                    //Ahora los log de las revisiones
                    int numAreaSB = 1;
                    foreach (FtExtEnvioLogDTO log in lstLogXEnvioOtrosAlRevisarSubsanados)
                    {
                        bool incluirRegSubsanados = true;
                        if (idArea != ConstantesFichaTecnica.PorDefecto)
                        {
                            incluirRegSubsanados = log.Faremcodi == idArea ? true : false;
                        }

                        if (incluirRegSubsanados)
                        {
                            CumplimientoDetallesAreas regAccion = new CumplimientoDetallesAreas();
                            regAccion.Accion = log.Ftelogobs != null ? log.Ftelogobs.Trim() : "";
                            regAccion.AreasCOESAsignadas = log.Faremnombre != null ? log.Faremnombre : "";
                            regAccion.UsuarioRegistroNomb = log.Ftelogusucreacion.Contains("SISTEMA") ? "Sistema COES" : ("Área COES " + numAreaSB);
                            regAccion.PlazoLimiteRpta = log != null ? log.Envarfecmaxrpta.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                            regAccion.UsuarioRegistroCorreo = log != null ? log.Ftelogusucreacion : "";
                            regAccion.FechaHora = log.Ftelogfeccreacion != null ? log.Ftelogfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2) : "";
                            regAccion.Condicion = log.Ftelogcondicion != null ? ObtenerDescripcionCondicion(log.Ftelogcondicion) : "";
                            lstAcciones.Add(regAccion);

                            numAreaSB++;
                        }
                    }
                    #endregion

                    objRegSB.NumAcciones = lstAcciones.Count();
                    objRegSB.ListaAcciones = lstAcciones;

                    lstSalida.Add(objRegSB);

                }
            }

            lstSalida = lstSalida.Where(x => x.NumAcciones > 0).ToList();

            return lstSalida;
        }

        #endregion

        #region Procesos Automaticos

        /// <summary>
        /// Devuelve la plantilla respectiva para la notificacion automatica
        /// </summary>
        /// <param name="prcscodi"></param>
        /// <param name="etapa"></param>
        /// <returns></returns>
        public int ObtenerPlantillaCorreoSegunProceso(int prcscodi, out int etapa)
        {
            int plantillacodi = -1;
            int eConexion = ConstantesFichaTecnica.EtapaConexion;
            int eIntegracion = ConstantesFichaTecnica.EtapaIntegracion;
            int eOpComercial = ConstantesFichaTecnica.EtapaOperacionComercial;
            int eModificacion = ConstantesFichaTecnica.EtapaModificacion;
            etapa = 0;

            switch (prcscodi)
            {
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoSubsanacion_Conexion:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesConexion;
                    etapa = eConexion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoSubsanacion_Integracion:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesIntegracion;
                    etapa = eIntegracion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoSubsanacion_OperacionComercial:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesOpComercial;
                    etapa = eOpComercial;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoSubsanacion_Modif:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesModifTecnica;
                    etapa = eModificacion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoSubsanacion_ModifBaja:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoSubsanarObservacionesModifTecnicaBaja;
                    etapa = eModificacion;
                    break;

                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitud_Conexion:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudConexion;
                    etapa = eConexion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitud_Integracion:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudIntegracion;
                    etapa = eIntegracion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitud_OpComercial:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudOperacionComercial;
                    etapa = eOpComercial;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitud_Modif:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnica;
                    etapa = eModificacion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitud_ModifBaja:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudModifTecnicaBaja;
                    etapa = eModificacion;
                    break;

                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacion_Conexion:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionConexion;
                    etapa = eConexion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacion_Integracion:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionIntegracion;
                    etapa = eIntegracion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacion_OpComercial:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionOperacionComercial;
                    etapa = eOpComercial;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacion_Modif:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnica;
                    etapa = eModificacion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacion_ModifBaja:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionModifTecnicaBaja;
                    etapa = eModificacion;
                    break;

                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitudAreas_Conexion:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasConexion;
                    etapa = eConexion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitudAreas_Integracion:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasIntegracion;
                    etapa = eIntegracion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitudAreas_OpComercial:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasOperacionComercial;
                    etapa = eOpComercial;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitudAreas_Modif:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnica;
                    etapa = eModificacion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSolicitudAreas_ModifBaja:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSolicitudAreasModifTecnicaBaja;
                    etapa = eModificacion;
                    break;

                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSolicitud_Conexion:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasConexion;
                    etapa = eConexion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSolicitud_Integracion:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasIntegracion;
                    etapa = eIntegracion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSolicitud_OpComercial:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasOpComercial;
                    etapa = eOpComercial;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSolicitud_Modif:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasModifTecnica;
                    etapa = eModificacion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSolicitud_ModifBaja:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSolicitudAreasModifTecnicaBaja;
                    etapa = eModificacion;
                    break;

                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacionAreas_Conexion:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasConexion;
                    etapa = eConexion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacionAreas_Integracion:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasIntegracion;
                    etapa = eIntegracion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacionAreas_OpComercial:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasOperacionComercial;
                    etapa = eOpComercial;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacionAreas_Modif:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnica;
                    etapa = eModificacion;
                    break;
                case ConstantesFichaTecnica.PrcscodiRecordatorioVencPlazoParaRevisarSubsanacionAreas_ModifBaja:
                    plantillacodi = ConstantesFichaTecnica.RecordatorioVencimientoPlazoSubsanacionAreasModifTecnicaBaja;
                    etapa = eModificacion;
                    break;

                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSubsanacion_Conexion:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasConexion;
                    etapa = eConexion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSubsanacion_Integracion:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasIntegracion;
                    etapa = eIntegracion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSubsanacion_OpComercial:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasOpComercial;
                    etapa = eOpComercial;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSubsanacion_Modif:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasModifTecnica;
                    etapa = eModificacion;
                    break;
                case ConstantesFichaTecnica.PrcscodiNotificacionCulminacionPlazoRevisarAreasSubsanacion_ModifBaja:
                    plantillacodi = ConstantesFichaTecnica.PlantcodiNotificacionCambiosCulminacionPlazoRevisarSubsanacionAreasModifTecnicaBaja;
                    etapa = eModificacion;
                    break;
            }

            return plantillacodi;
        }
        #endregion
    }

    #region Clases Ficha Tecnica 2023

    public class RegistroCumplimientoRevAreas
    {
        public int NumAcciones { get; set; }
        public int Ftenvcodi { get; set; }
        public string Empresa { get; set; }
        public string Etapa { get; set; }
        public string NombreProyecto { get; set; }
        public string EquiposProyectoUnico { get; set; }
        public string EquiposProyecto { get; set; }
        public string NombreEquiposUnico { get; set; }
        public string NombreEquipos { get; set; }
        public List<CumplimientoDetallesAreas> ListaAcciones { get; set; }
    }

    public class CumplimientoDetallesAreas
    {
        public string Accion { get; set; }
        public string AreasCOESAsignadas { get; set; }
        public string UsuarioRegistroNomb { get; set; }
        public string PlazoLimiteRpta { get; set; }
        public string UsuarioRegistroCorreo { get; set; }
        public string FechaHora { get; set; }
        public string Condicion { get; set; }
    }
    public class RegistroCumplimientoAdminFT
    {
        public int NumAcciones { get; set; }
        public int Ftenvcodi { get; set; }
        public string Empresa { get; set; }
        public string Etapa { get; set; }
        public string NombreProyecto { get; set; }
        public string EquiposProyectoUnico { get; set; }
        public string EquiposProyecto { get; set; }
        public string NombreEquiposUnico { get; set; }
        public string NombreEquipos { get; set; }
        public List<CumplimientoDetallesAdminFT> ListaAcciones { get; set; }
    }

    public class CumplimientoDetallesAdminFT
    {
        public string Accion { get; set; }
        public string UsuarioRegistroNomb { get; set; }
        public string UsuarioRegistroCorreo { get; set; }
        public string FechaHora { get; set; }
        public string Condicion { get; set; }
    }
    public class CarpetaArea
    {
        public int Codigo { get; set; }
        public string StrCodigo { get; set; }
        public string Nombre { get; set; }
        public int Orden { get; set; }
        public int Total { get; set; }
    }
    public class FTValidacionEnvio
    {
        public List<FTCeldaError> LstSalidaObservarEnvio { get; set; }
        public List<FTCeldaError> LstSalidaAprobarEnvio { get; set; }
        public List<FTCeldaError> LstSalidaDenegarEnvio { get; set; }
        public List<FTCeldaError> LstSalidaParcialAprobarEnvio { get; set; }
        public string EnvioParamApr { get; set; }
        public string EnvioParamDng { get; set; }
        public bool TieneParametrosVacios { get; set; }
    }

    public class FTDatoRevisionParametrosAEnvio
    {
        public string MsgColumnaEditada { get; set; }
        public string IdValorEstado { get; set; }
        public string NombElemento { get; set; }
        public int? NumcolumnaEditada { get; set; }
        public bool EsFilaBloqueada { get; set; }
        public int? Fevrqcodi { get; set; }
        public string Literal { get; set; }
        public int Estenvcodi { get; set; }

        public bool FilaRevisable { get; set; }
        public int? Ftedatcodi { get; set; }
        public int? Fitcfgcodi { get; set; }
        public int? Fteeqcodi { get; set; }
        public int? Ftitcodi { get; set; }

        public int? Equicodi { get; set; } //
        public int? Grupocodi { get; set; } //

        public int? Propcodi { get; set; } //
        public int? Concepcodi { get; set; } //

        public bool TieneRevision { get; set; }

        public string Numeral { get; set; }
        public string Elemento { get; set; }

        public string ValObsCoes { get; set; }
        public string ValRptaAgente { get; set; }
        public string ValRptaCoes { get; set; }
        public string ValEstado { get; set; }

        public List<FtExtEnvioArchivoDTO> ListaArchivosObsCoes { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivosRptaAgente { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivosRptaCoes { get; set; }
        public string ValEstadoDesc { get; set; }
        public List<FTOpcionEstado> ListaEstados { get; set; }

        public bool FilaBloqueada { get; set; } //Si tiene CONFORME en una revision previa
        public bool CeldaObsCoesEstaBloqueada { get; set; }
        public bool CeldaRptaAgenteEstaBloqueada { get; set; }
        public bool CeldaRptaCoesEstaBloqueada { get; set; }
        public bool CeldaEstadoEstaBloqueada { get; set; }

        public string ColorValEstado { get; set; }
    }

    public class ErrorRevisionAreas
    {
        public int? Ftedatcodi { get; set; }
        public int? Fteeqcodi { get; set; }
        public int? Ftitcodi { get; set; }
        public string NombEquipo { get; set; }
        public string Numeral { get; set; }
        public string Literal { get; set; }
        public string Mensaje { get; set; }
    }

    public class FTObjetoEnvioTransaccional
    {
        public FtExtEnvioVersionDTO LogAutoguardado { get; set; }
        public FtExtEnvioVersionDTO LogErrorAutoguardado { get; set; }
        public List<FtExtEnvioDatoDTO> ListaDatoUpdate { get; set; }
        public List<FtExtEnvioReldatoarchivoDTO> ListaRelDatoArchivo { get; set; }
        public List<FtExtEnvioRelreqarchivoDTO> ListaRelReqArchivo { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivoNuevo { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivoUpdate { get; set; }
        public List<FtExtEnvioRevisionDTO> ListaRevisionUpdate { get; set; }
    }

    public class DatoRevisionAreasContenido
    {
        public int Estenvcodi { get; set; }
        public int AreaIdEnRevision { get; set; }
        public string AreaNombEnRevision { get; set; }
        public string AreasIdsStrAsignadas { get; set; }
        public string AreasNombAsignadas { get; set; }
        public string MsgSolicitud { get; set; }
        public string MsgSubsanacion { get; set; }
        public string IdValorEstadoSolicitado { get; set; }
        public string IdValorEstadoSubsanado { get; set; }
        public string ColorValEstadoSolicitado { get; set; }
        public string ColorValEstadoSubsanado { get; set; }

        public List<FTOpcionEstado> ListaEstadosSolicitado { get; set; }
        public List<FTOpcionEstado> ListaEstadosSubsanado { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivosSolicitados { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivosSubsanados { get; set; }
        public List<RevisionAreas> LstFilaRevision { get; set; } = new List<RevisionAreas>();

        public int? Fevrqcodi { get; set; }
        public int? Ftereqcodi { get; set; }
        public string Literal { get; set; }

        public bool EsFilaRevisable { get; set; }
        public bool CeldaNombAreasEstaBloqueada { get; set; }
        public bool CeldaRevSolicitudEstaBloqueada { get; set; }
        public bool CeldaEstadoSolicitudEstaBloqueada { get; set; }
        public bool CeldaRevSubsanadoEstaBloqueada { get; set; }
        public bool CeldaEstadoSubsanadoEstaBloqueada { get; set; }

        public bool EsParaAdminFT { get; set; }
        public string TipoEstado { get; set; }
    }
    public class DatoRevisionAreasFT
    {
        public int Estenvcodi { get; set; }//
        public int AreaIdEnRevision { get; set; }//
        public string AreaNombEnRevision { get; set; }//
        public string AreasIdsStrAsignadas { get; set; }//
        public string AreasNombAsignadas { get; set; }//
        public string MsgSolicitud { get; set; }//
        public string MsgSubsanacion { get; set; }//
        public string IdValorEstadoSolicitado { get; set; }//
        public string IdValorEstadoSubsanado { get; set; }//
        public string ColorValEstadoSolicitado { get; set; }//
        public string ColorValEstadoSubsanado { get; set; }//

        public List<FTOpcionEstado> ListaEstadosSolicitado { get; set; }//
        public List<FTOpcionEstado> ListaEstadosSubsanado { get; set; }//
        public List<FtExtEnvioArchivoDTO> ListaArchivosSolicitados { get; set; }//
        public List<FtExtEnvioArchivoDTO> ListaArchivosSubsanados { get; set; }//
        public List<RevisionAreas> LstFilaRevision { get; set; } = new List<RevisionAreas>();

        public bool EsFilaRevisable { get; set; }//
        public int? Ftedatcodi { get; set; }//
        public int? Fteeqcodi { get; set; }//
        public int? Ftitcodi { get; set; }//
        public string Numeral { get; set; }//
        public int? Equicodi { get; set; }//
        public int? Grupocodi { get; set; }//
        public int? Propcodi { get; set; }//
        public int? Concepcodi { get; set; }//

        public string Elemento { get; set; }//
        public bool CeldaNombAreasEstaBloqueada { get; set; }//
        public bool CeldaRevSolicitudEstaBloqueada { get; set; }//
        public bool CeldaEstadoSolicitudEstaBloqueada { get; set; }//
        public bool CeldaRevSubsanadoEstaBloqueada { get; set; }//
        public bool CeldaEstadoSubsanadoEstaBloqueada { get; set; }//

        public bool EsParaAdminFT { get; set; }
        public string TipoEstado { get; set; }
    }

    public class RevisionAreas
    {
        public string Nombre { get; set; }
        public string MsgSolicitado { get; set; }
        public string MsgSubsanado { get; set; }
        public string MsgHtmlSolicitado { get; set; }
        public string MsgHtmlSubsanado { get; set; }
        public string EstadoSolicitado { get; set; }
        public string EstadoSubsanado { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivosSolicitados { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivosSubsanados { get; set; }
    }

    public class FTReporteExcelAreas
    {
        public List<DatoRevisionAreasFT> ListaRevisionFT { get; set; }
        public List<DatoRevisionAreasContenido> ListaRevisionContenido { get; set; }
        public int Faremcodi { get; set; }
        public int Ftenvcodi { get; set; }
        public int Ftevercodi { get; set; }
        public int Fteeqcodi { get; set; }
    }

    public class FTOpcionEstado
    {
        public string Codigo { get; set; }
        public string Texto { get; set; }
        public string ValColor { get; set; }

    }

    public class FTFormatoExtranet
    {
        public int Fteqcodi { get; set; }
        public int Ftetcodi { get; set; }
        public List<FtExtItemcfgDTO> ListaDataFila { get; set; }
    }

    public class FTArchivoDescargado
    {
        public bool ArchivoEstaDescargado { get; set; }
        public string NombreArchivoFisico { get; set; }
        public string NombreOriginal { get; set; }
    }

    public class FTNotificacionCambio
    {
        public int Codigo { get; set; }
        public string TipoFicha { get; set; }
        public string NombreFicha { get; set; }
        public string Parametro { get; set; }
        public string NombFlag { get; set; }
        public string ValAntes { get; set; }
        public string ValDespues { get; set; }
        public string Usuario { get; set; }
        public string Fecha { get; set; }
    }

    public class FTParametroModificacion
    {
        public int Codigo { get; set; }
        public string NombreEquipo { get; set; }
        public string NombreParametro { get; set; }
        public string UnidadMedida { get; set; }
        public string ValorActual { get; set; }
        public string ValorSolicitudMod { get; set; }
        public string ValorExistente { get; set; } //usado solo en aprob parcial
        public string ValorNuevo { get; set; }//usado solo en aprob parcial
        public string ValorDenegado { get; set; }//usado solo en aprob parcial

        public string TipoCategoria { get; set; }//usado solo en aprob parcial
        public int? Fteeqcodi { get; set; }//usado solo en aprob parcial
        public int? Ftitcodi { get; set; }//usado solo en aprob parcial
        public int Ftedatcodi { get; set; }

        public string ValObsCoes { get; set; }
        public string ValRptaAgente { get; set; }
        public string ValRptaCoes { get; set; }
        public string ValEstado { get; set; }
    }

    public class FTParametroGuardar
    {
        public int Ftenvcodi { get; set; }
        public string Usuario { get; set; }
        public List<PrGrupodatDTO> ListaGrupodatNuevo { get; set; } = new List<PrGrupodatDTO>();
        public List<PrGrupodatDTO> ListaGrupodatModificado { get; set; } = new List<PrGrupodatDTO>();
        public List<EqPropequiDTO> ListaPropequi { get; set; } = new List<EqPropequiDTO>();
    }

    public class FTRelacionEGP
    {
        public int Feeeqcodi { get; set; }  //usado solo para Etapa Modificacion
        public int Ftprycodi { get; set; }
        public int Emprcodi { get; set; }
        public int Areacodi { get; set; }

        public int? Equicodi { get; set; }
        public int? Grupocodi { get; set; }
        public int? Famcodi { get; set; }
        public int? Catecodi { get; set; }
        public int IdEmpresa { get; set; }
        public int? IdEmpresaCo { get; set; }

        public string Codigo { get; set; }
        public string TipoYCodigo { get; set; }
        public string EmpresaNomb { get; set; }
        public string EmpresaCoNomb { get; set; }
        public string Tipo { get; set; }
        public string EquipoNomb { get; set; }
        public string Ubicacion { get; set; }
        public string EstadoDesc { get; set; }
        public string FlagEquipoOtroEtapa { get; set; }
        public string FlagCentralCOES { get; set; }
        public int TieneCambios { get; set; }
        public string EstadoReg { get; set; }
        public string EditoFlag { get; set; }

        public string Ftprynomb { get; set; }
        public bool CheckSeleccionableEnNuevo { get; set; }
        public bool FueAprobado { get; set; } = false; //para conocer si cierto equipo fue aprobado o no en cierta etapa
        public bool DebeMostrarse { get; set; } = false; //para conocer si cierto equipo debe mostrarse o no en cierta etapa (solo los aprobados en etapas anteriores pueden ser visualizados)

        public int? Ftfmtcodi { get; set; }
    }

    public class FTReporteExcel
    {
        public FtFictecXTipoEquipoDTO FichaTecnica { get; set; }
        public List<int> ListaIdElemento { get; set; }
        public List<FtExtEnvioEqDTO> ListaEnvioEqXFicha { get; set; }

        public int Modulo { get; set; }
        public int Ambiente { get; set; }
        public bool EsHistorico { get; set; }
        public bool EsAdmin { get; set; }
        public bool IncluirColumnaComentario { get; set; }
        public bool IncluirColumnaInstructivo { get; set; }
        public bool IncluirColumnaProcesoRevision { get; set; }
        public bool IncluirColumnaProcesoDerivacion { get; set; }
        public bool IncluirColumnaSustento { get; set; }
        public string NombreSheet { get; set; }
        public string NombreEtapa { get; set; }
        public DateTime FechaConsulta { get; set; }

        public List<FtFictecItemDTO> ListaTreeItems { get; set; }
        public List<FtFictecItemDTO> ListaAllItems { get; set; }
        public List<FtFictecItemDTO> ListaTreeData { get; set; }
        public List<FtFictecNotaDTO> ListaNota { get; set; }
        public List<FtExtItemcfgDTO> ListaItemConfig { get; set; }

        public List<FtExtEventoReqDTO> ListaReqEvento { get; set; }
        public List<FTDatoRevisionParametrosAEnvio> ListaRevision { get; set; }
        public List<DatoRevisionAreasFT> ListaDerivacion { get; set; }

        public int Ftenvcodi { get; set; }
        public int Ftevercodi { get; set; }
        public string TipoAutoguardado { get; set; }
        public string MensajeAutoguardado { get; set; }
        public string MensajeNoConexion { get; set; }
        public string FteeqcodisLimpiar { get; set; }
        public bool HayPendiente1erAutoguardado { get; set; }

        public int IdFT { get; set; }
        public int Fteeqcodi { get; set; }
        public int? Equicodi { get; set; }
        public int? Grupocodi { get; set; }
        public int ColIniData { get; set; }
        public int RowIniItem { get; set; }

        public int IdAreaRevision { get; set; }

        //reporte historico
        public int TipoEmpresa { get; set; }
        public DateTime FechaVigencia { get; set; }
        public DateTime? FechaIniConsulta { get; set; }
        public DateTime? FechaFinConsulta { get; set; }
        public List<FTFiltroReporteExcel> ListaEqRpt { get; set; }

        public List<FTFilaReporteHistParametro> ListaParametro { get; set; }
        public List<FTFilaReporteHistParametro> ListaDataCompleto { get; set; }
        public List<ElementoFichaTecnica> ListaElementoWeb { get; set; }

        public int NumColXEq { get; set; }
        public bool TieneColValor { get; set; }
        public bool TieneColFechaVigencia { get; set; }
        public bool TieneColCheckcero { get; set; }
        public bool TieneColComentario { get; set; }
        public bool TieneColSustento { get; set; }
        public bool TieneColFechamodif { get; set; }
        public bool TieneColUsuariomodif { get; set; }
    }

    public class FTFiltroReporteExcel
    {
        public int IdFT { get; set; }
        public int Codigo { get; set; }
        public bool IncluirData { get; set; }
        public int Ambiente { get; set; }

        public FtExtEnvioEqDTO EqColumna { get; set; }

        public List<EqPropequiDTO> ListaDataPropiedad { get; set; }
        public List<PrGrupodatDTO> ListaDataGrupo { get; set; }
        public List<FtFictecPropiedadValor> ListaDataPropiedadFicha { get; set; }

        public List<FtFictecItemDTO> ListaAllData { get; set; }
        public List<FtFictecItemDTO> ListaTreeData { get; set; }

        public List<FTFilaReporteHistParametro> ListaDataRptHist { get; set; }
    }

    public class FTCeldaError
    {
        public int CodigoElemento { get; set; }
        public string Ubicacion { get; set; } = string.Empty;
        public string NombreEquipo { get; set; } = string.Empty;
        public string Celda { get; set; } = string.Empty;
        public string Valor { get; set; } = string.Empty;
        public int Row { get; set; }
        public int Col { get; set; }
        public string TipoError { get; set; }
    }

    public class FTRevisionContenidoExcel
    {
        public string NombreSheet { get; set; }
        public int Emprcodi { get; set; }
        public string Emprnomb { get; set; }
        public int Ftetcodi { get; set; }
        public string Ftetnombre { get; set; }
        public int Ftprycodi { get; set; }
        public string Ftprynombre { get; set; }
        public string NombreEquipos { get; set; }
        public string UrlSustento { get; set; }
        public DateTime FechaConsulta { get; set; }
        public FtExtEventoDTO Evento { get; set; }
        public List<FtExtEventoReqDTO> ListaReqEvento { get; set; }
        public List<FTDatoRevisionParametrosAEnvio> lstRevision { get; set; }
        public List<DatoRevisionAreasContenido> ListaDerivacion { get; set; }
        public List<FtExtEnvioArchivoDTO> ListaArchivo { get; set; }
        public bool EsHistorico { get; set; }
        public bool EsAdmin { get; set; }
    }

    public class FTFilaReporteHistParametro
    {
        public string Empresa { get; set; }
        public string Central { get; set; }
        public int Fteeqcodi { get; set; }
        public string Elemento { get; set; }
        public int CodParam { get; set; }
        public string NombParam { get; set; }
        public string NombParamFT { get; set; }
        public string AbrevParam { get; set; }
        public string Unidad { get; set; }
        public string Tipo { get; set; }
        public DateTime? FechaVigencia { get; set; }
        public string FechaVigenciaDesc { get; set; }
        public string Valor { get; set; }
        public string ValorFormula { get; set; }
        public int CheckCero { get; set; }
        public string CheckCeroDesc { get; set; }
        public string Comentario { get; set; }
        public string Sustento { get; set; }
        public string Usuariomodif { get; set; }
        public string Fechamodif { get; set; }

        public bool EsArchivoValor { get; set; }
        public bool EsValorVigente { get; set; }

        public int? Famcodi { get; set; }
        public int? Catecodi { get; set; }
        public int? Equicodi { get; set; }
        public int? Grupocodi { get; set; }
    }

    #endregion

    #region Clases Parametros Grupos/Mop

    public class FilaExcelParametrosGrupoMop
    {
        public int Row { get; set; }
        public int NumItem { get; set; }
        public string Formuladat { get; set; }
        public string StrFechadat { get; set; }
        public string Gdatsustento { get; set; }
        public string Gdatcomentario { get; set; }
        public string StrGdatcheckcero { get; set; }
        public string StrFechaact { get; set; }
        public string Lastuser { get; set; }

        public DateTime? Fechadat { get; set; }
        public int? Gdatcheckcero { get; set; }
        public int Concepcodi { get; set; }
        public int Grupocodi { get; set; }
        public int? Repcodi { get; set; }
    }

    #endregion

}
