using COES.Base.Core;
using COES.Dominio.DTO.Sic;
using COES.Framework.Base.Core;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.FormatoMedicion;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.Interconexiones.Helper;
using COES.Servicios.Aplicacion.Mediciones;
using COES.Servicios.Aplicacion.Mediciones.Helper;
using COES.Servicios.Aplicacion.Migraciones;
using COES.Servicios.Aplicacion.SIOSEIN;
using COES.Servicios.Aplicacion.Siosein2;
using COES.Servicios.Aplicacion.Siosein2.Helper;
using OfficeOpenXml;
using OfficeOpenXml.Drawing.Chart;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Data;
using System.Globalization;
using System.Linq;
using System.Text;

namespace COES.Servicios.Aplicacion.IEOD
{
    /// <summary>
    /// Clase que genera los reportes html y hojas excel
    /// </summary>
    public static class UtilSemanalPR5
    {
        /// <summary>
        /// Selecciona el texto de los titulo y subtitulos segun el item del reporte y el tipo de la exportacion
        /// </summary>
        /// <param name="ordenReporte"></param>
        /// <param name="ordenSubtitulo"></param>
        /// <param name="tipoVistaReporte"></param>
        /// <param name="tipoDoc"></param>
        /// <param name="listaItem"></param>
        /// <returns></returns>
        public static string EscogerTitulosSubtitulos(string ordenReporte, int ordenSubtitulo, string tipoVistaReporte, int tipoDoc, List<ItemMenuNumeral> listaItem)
        {
            string texto = "";
            int idMenureporcodi = 0;
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal)
            {
                switch (ordenReporte)
                {
                    case "2":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiOfertaGeneracion;//"OFERTA DE GENERACIÓN ELÉCTRICA DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemIngresoOpComercSEIN;//"INGRESO EN OPERACIÓN COMERCIAL AL SEIN";
                        if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemRetiroOpComercSEIN;//"RETIRO DE OPERACIÓN COMERCIAL DEL SEIN";
                        break;
                    case "3":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiProduccionEnergia;//"PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemProdTipoGen;//"PRODUCCIÓN POR TIPO DE GENERACIÓN (GWh)";
                        break;
                    case "4":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiProduccionEnergia;//"PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemProdTipoRecurso;//"PRODUCCIÓN POR TIPO DE RECURSO ENERGÉTICO (GWh)";
                        break;
                    case "5":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiProduccionEnergia;//"PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemProdRER;//"PRODUCCIÓN POR RECURSOS ENERGÉTICOS RENOVABLES (GWh)";
                        break;
                    case "6":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiProduccionEnergia;//"PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemFactorPlantaRER;//"FACTOR DE PLANTA DE LAS CENTRALES RER DEL SEIN";
                        break;
                    case "7":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiProduccionEnergia;//"PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemParticipacionEmpresas;//"PARTICIPACIÓN DE LA PRODUCCIÓN (GWh) POR EMPRESAS INTEGRANTES";
                        break;
                    case "8":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiMDCoincidente;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexMaximaDemandaTipoGeneracionSemanal;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)";
                        break;
                    case "9":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiMDCoincidente;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexMaximaDemandaXEmpresaSemanal;//"PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)";
                        break;
                    case "10":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiMDCoincidente;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexDemandaXAreaOpeSemanal;//"EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)";
                        break;
                    case "11":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiDemandaGU;//"EVOLUCIÓN DE LA DEMANDA DE ENERGÍA Y POTENCIA DE LOS PRINCIPALES GRANDES USUARIOS DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexDemandaGUMaximaDemandaSemanal;//"DEMANDA COINCIDENTE DE LOS PRINCIPALES GRANDES USUARIOS EN EL DÍA DE MÁXIMA DEMANDA SEMANAL (MW)";
                        break;

                    case "12":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiDemandaGU;//"EVOLUCIÓN DE LA DEMANDA DE ENERGÍA Y POTENCIA DE LOS PRINCIPALES GRANDES USUARIOS DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexDiagramaCargaGURangoPotencia;//"DEMANDA COINCIDENTE DE LOS PRINCIPALES GRANDES USUARIOS EN EL DÍA DE MÁXIMA DEMANDA SEMANAL (MW)";
                        break;
                    case "13":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiDemandaGU;//"EVOLUCIÓN DE LA DEMANDA DE ENERGÍA Y POTENCIA DE LOS PRINCIPALES GRANDES USUARIOS DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexDemandaGUXAreaOperativa;//"DEMANDA DE ENERGÍA ELÉCTRICA POR ÁREA OPERATIVA DE LOS PRINCIPALES GRANDES USUARIOS (GWh)";
                        break;
                    case "14":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiHidrologia;//"HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemVolUtilEmbLag;//"VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)";
                        if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeSemanalPR5.IndexEvolucionVolEmbLagSem;//"EVOLUCIÓN DE VOLUMENES DE LOS EMBALSES Y LAGUNAS";
                        break;
                    case "16":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiHidrologia;//"HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemPromCaudales;//"PROMEDIO SEMANAL DE LOS CAUDALES (m3/s)";
                        if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeSemanalPR5.IndexEvolucionCaudalesSem;//"EVOLUCIÓN DE LOS CAUDALES";
                        break;
                    case "18":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiCombustibles;//"CONSUMO DE COMBUSTIBLES EN EL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexConsumoCombustibleSemanal;//"POR TIPO DE COMBUSTIBLE";
                        break;
                    case "19":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiCostoOperacion;//"COSTOS DE OPERACIÓN EJECUTADO ACUMULADO SEMANAL DEL SEIN (Millones de S/.)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosOperacionEjecutados;//"EVOLUCIÓN DE LOS COSTOS DE OPERACIÓN ACUMULADO SEMANAL (Millones de S/.)";
                        break;
                    case "20":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiCostoMarginal;//"COSTOS MARGINALES NODALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesProm;//"EVOLUCIÓN DE LOS COSTOS MARGINALES NODALES PROMEDIO SEMANAL (US$/MWh)";
                        break;
                    case "21":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiCostoMarginal;//"COSTOS MARGINALES NODALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesPorArea;//"EVOLUCIÓN DE LOS COSTOS MARGINALES NODALES PROMEDIO SEMANAL POR ÁREA OPERATIVA (US$/MWh)";
                        break;
                    case "22":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiTensionBarra;//"PERFIL DE TENSIONES EN BARRAS DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexTensionBarras500Semanal;//"PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 500kV";
                        break;
                    case "23":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiTensionBarra;//"PERFIL DE TENSIONES EN BARRAS DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexTensionBarras220Semanal;//"PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 220kV";
                        break;
                    case "24":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiTensionBarra;//"PERFIL DE TENSIONES EN BARRAS DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexTensionBarras138Semanal;//"PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 138kV";
                        break;
                    case "25":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiFlujoInterconexion;//"FLUJOS DE INTERCONEXIONES EN ÁREAS OPERATIVAS DEL SEIN";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexFlujoMaximoInterconexiones;//"FLUJOS MÁXIMO DE INTERCONEXIONES EN LOS ENLACES CENTRO NORTE Y CENTRO SUR ";
                        break;
                    case "26":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiHoraCongestion;//"HORAS DE CONGESTIÓN DE LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexHorasCongestionAreaOpeSemanal;//"HORAS DE CONGESTION POR ÁREA OPERATIVA";
                        break;
                    case "27":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiIntercambioInternacionales;//"INTERCAMBIOS INTERNACIONALES DE ELECTRICIDAD";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexIntercambioInternacionalesSemanal;//"INTERCAMBIOS DE ELECTRICIDAD DE ENERGÍA Y POTENCIA";
                        break;
                    case "28":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiEventoFallas;//"EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexEventoFallaSuministroEnerg;//"FALLAS POR TIPO DE EQUIPO Y CAUSA SEGÚN CLASIFICACION CIER";
                        break;
                    case "29":
                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeSemanalPR5.CatecodiEventoFallas;//"EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";
                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeSemanalPR5.IndexDetalleEventos;//"DETALLE DE EVENTOS";
                        break;
                    default:
                        break;
                }

                if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaGrupal)
                {
                    switch (ordenReporte)
                    {
                        case "2":
                            if (ordenSubtitulo == 0) texto = "1. ";   // "1. OFERTA DE GENERACIÓN ELÉCTRICA DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "1.1. ";// "1.1. INGRESO EN OPERACIÓN COMERCIAL AL SEIN";
                            if (ordenSubtitulo == 2) texto = "1.2. ";// "1.2. RETIRO DE OPERACIÓN COMERCIAL DEL SEIN";
                            break;
                        case "3":
                            if (ordenSubtitulo == 0) texto = "2.";// "2.PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                            if (ordenSubtitulo == 1) texto = "2.1. ";// "2.1. PRODUCCIÓN POR TIPO DE GENERACIÓN (GWh)";
                            break;
                        case "4":
                            if (ordenSubtitulo == 0) texto = "2. ";// "2.PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                            if (ordenSubtitulo == 1) texto = "2.2. ";// "2.2. PRODUCCIÓN POR TIPO DE RECURSO ENERGÉTICO (GWh)";
                            break;
                        case "5":
                            if (ordenSubtitulo == 0) texto = "2.";// "2.PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                            if (ordenSubtitulo == 1) texto = "2.3. ";// "2.3. PRODUCCIÓN POR RECURSOS ENERGÉTICOS RENOVABLES (GWh)";
                            break;
                        case "6":
                            if (ordenSubtitulo == 0) texto = "2. ";// "2.PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                            if (ordenSubtitulo == 1) texto = "2.4. ";// "2.4. FACTOR DE PLANTA DE LAS CENTRALES RER DEL SEIN";
                            break;
                        case "7":
                            if (ordenSubtitulo == 0) texto = "2.";// "2.PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh)";
                            if (ordenSubtitulo == 1) texto = "2.5. ";// "2.5. PARTICIPACIÓN DE LA PRODUCCIÓN (GWh) POR EMPRESAS INTEGRANTES";
                            break;
                        case "8":
                            if (ordenSubtitulo == 0) texto = "3. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                            if (ordenSubtitulo == 1) texto = "3.1. ";// "3.1. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)";
                            break;
                        case "9":
                            if (ordenSubtitulo == 0) texto = "3. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                            if (ordenSubtitulo == 1) texto = "3.2. ";// "3.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)";
                            break;
                        case "10":
                            if (ordenSubtitulo == 0) texto = "3. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                            if (ordenSubtitulo == 1) texto = "3.3. ";// "3.3. EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)";
                            break;
                        case "11":
                            if (ordenSubtitulo == 0) texto = "4. ";// "4. EVOLUCIÓN DE LA DEMANDA DE ENERGÍA Y POTENCIA DE LOS PRINCIPALES GRANDES USUARIOS DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "4.1. ";// "4.1. DEMANDA COINCIDENTE DE LOS PRINCIPALES GRANDES USUARIOS EN EL DÍA DE MÁXIMA DEMANDA SEMANAL (MW)";
                            break;
                        case "12":
                            if (ordenSubtitulo == 0) texto = "4. ";// "4. EVOLUCIÓN DE LA DEMANDA DE ENERGÍA Y POTENCIA DE LOS PRINCIPALES GRANDES USUARIOS DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "4.2. ";// "4.2. DIAGRAMA DE CARGA POR RANGOS DE POTENCIA EN GRANDES USUARIOS (MW)";
                            break;
                        case "13":
                            if (ordenSubtitulo == 0) texto = "4. ";// "4. EVOLUCIÓN DE LA DEMANDA DE ENERGÍA Y POTENCIA DE LOS PRINCIPALES GRANDES USUARIOS DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "4.3. ";// "4.3. DEMANDA DE ENERGÍA ELÉCTRICA POR ÁREA OPERATIVA DE LOS PRINCIPALES GRANDES USUARIOS (GWh)";
                            break;
                        case "14":
                            if (ordenSubtitulo == 0) texto = "5. ";// "5. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "5.1. ";// "5.1. VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)";
                            if (ordenSubtitulo == 2) texto = "5.2. ";// "5.2. EVOLUCIÓN DE VOLUMENES DE LOS EMBALSES Y LAGUNAS";
                            break;
                        case "16":
                            if (ordenSubtitulo == 0) texto = "5. ";// "5. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "5.3. ";// "5.3. PROMEDIO MENSUAL DE LOS CAUDALES (m3/s)";
                            if (ordenSubtitulo == 2) texto = "5.4. ";// "5.4. EVOLUCIÓN DE LOS CAUDALES";
                            break;
                        case "18":
                            if (ordenSubtitulo == 0) texto = "6. ";// "6. CONSUMO DE COMBUSTIBLES EN EL SEIN";
                            if (ordenSubtitulo == 1) texto = "6.1. ";// "6.1. POR TIPO DE COMBUSTIBLE";
                            break;
                        case "19":
                            if (ordenSubtitulo == 0) texto = "7. ";// "7. COSTOS DE OPERACIÓN EJECUTADO ACUMULADO SEMANAL DEL SEIN (Millones de S/.)";
                            if (ordenSubtitulo == 1) texto = "7.1. ";// "7.1. EVOLUCIÓN DE LOS COSTOS DE OPERACIÓN ACUMULADO SEMANAL (Millones de S/.)";
                            break;
                        case "20":
                            if (ordenSubtitulo == 0) texto = "8. ";// "8. COSTOS MARGINALES NODALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";
                            if (ordenSubtitulo == 1) texto = "8.1. ";// "8.1. EVOLUCIÓN DE LOS COSTOS MARGINALES NODALES PROMEDIO SEMANAL (US$/MWh)";
                            break;
                        case "21":
                            if (ordenSubtitulo == 0) texto = "8. ";// "8. COSTOS MARGINALES NODALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";
                            if (ordenSubtitulo == 1) texto = "8.2. ";// "8.2. EVOLUCIÓN DE LOS COSTOS MARGINALES NODALES PROMEDIO SEMANAL POR ÁREA OPERATIVA (US$/MWh)";
                            break;
                        case "22":
                            if (ordenSubtitulo == 0) texto = "9. ";// "9. PERFIL DE TENSIONES EN BARRAS DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "9.1. ";// "9.1. PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 500kV";
                            break;
                        case "23":
                            if (ordenSubtitulo == 0) texto = "9. ";// "9. PERFIL DE TENSIONES EN BARRAS DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "9.2. ";// "9.2. PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 220kV";
                            break;
                        case "24":
                            if (ordenSubtitulo == 0) texto = "9. ";// "9. PERFIL DE TENSIONES EN BARRAS DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "9.3. ";// "9.3. PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 138kV";
                            break;
                        case "25":
                            if (ordenSubtitulo == 0) texto = "10. ";// "10. FLUJOS DE INTERCONEXIONES EN ÁREAS OPERATIVAS DEL SEIN";
                            if (ordenSubtitulo == 1) texto = "10.1. ";// "10.1. FLUJOS MÁXIMO DE INTERCONEXIONES EN LOS ENLACES CENTRO NORTE Y CENTRO SUR ";
                            break;
                        case "26":
                            if (ordenSubtitulo == 0) texto = "11. ";// "11. HORAS DE CONGESTIÓN DE LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)";
                            if (ordenSubtitulo == 1) texto = "11.1. ";// "11.1. HORAS DE CONGESTION POR ÁREA OPERATIVA";
                            break;
                        case "27":
                            if (ordenSubtitulo == 0) texto = "12. ";// "12. INTERCAMBIOS INTERNACIONALES DE ELECTRICIDAD";
                            if (ordenSubtitulo == 1) texto = "12.1. ";// "12.1. INTERCAMBIOS DE ELECTRICIDAD DE ENERGÍA Y POTENCIA";
                            break;
                        case "28":
                            if (ordenSubtitulo == 0) texto = "13. ";// "13. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";
                            if (ordenSubtitulo == 1) texto = "13.1. ";// "13.1. FALLAS POR TIPO DE EQUIPO Y CAUSA SEGÚN CLASIFICACION CIER";
                            break;
                        case "29":
                            if (ordenSubtitulo == 0) texto = "13. ";// "13. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";
                            if (ordenSubtitulo == 1) texto = "13.2. ";// "13.2. DETALLE DE EVENTOS
                            break;

                        default:
                            break;
                    }
                }
            }
            else
            {
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal)
                {
                    switch (ordenReporte)
                    {
                        case "2":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiOfertaGeneracion;//"OFERTA DE GENERACIÓN ELÉCTRICA DEL SEIN";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexIngresoOpComercSEIN;//"INGRESO EN OPERACIÓN COMERCIAL AL SEIN";//
                            if (ordenSubtitulo == 2) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexRetiroOpComercSEIN;//"RETIRO DE OPERACIÓN COMERCIAL DEL SEIN";//

                            break;
                        case "3":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiProduccionEnergia;//"MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexProdTipoGen;//"PRODUCCIÓN POR TIPO DE GENERACIÓN (GWh)";//

                            break;
                        case "4":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiProduccionEnergia;//"MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexProdTipoRecurso;//"PRODUCCIÓN POR TIPO DE RECURSO ENERGÉTICO (GWh)";//

                            break;
                        case "5":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiProduccionEnergia;//"MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexProdRER;//"PRODUCCIÓN POR RECURSOS ENERGÉTICOS RENOVABLES (GWh)";//

                            break;
                        case "6":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiProduccionEnergia;//"MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexFactorPlantaRER;//"FACTOR DE PLANTA DE LAS CENTRALES RER DEL SEIN";//

                            break;
                        case "7":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiProduccionEnergia;//"MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexParticipacionEmpresas;//"PARTICIPACIÓN DE LA PRODUCCIÓN (GWh) POR EMPRESAS INTEGRANTES";//

                            break;
                        case "8":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiMDCoincidente;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaTipoGeneracionEjecut;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)";//

                            break;
                        case "9":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiMDCoincidente;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaXEmpresaEjecut;//"PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)";//

                            break;
                        case "10":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiMDCoincidente;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexDemandaXAreaOpeEjecut;//"EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)";//

                            break;
                        case "11":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiHidrologia;//"HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexVolUtilEmbLag;//"VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)";//
                            if (ordenSubtitulo == 2) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexEvolucionVolEmbLag;//"EVOLUCIÓN DE VOLUMENES DE LOS EMBALSES Y LAGUNAS";//

                            break;
                        case "13":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiHidrologia;//"HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexPromCaudales;//"PROMEDIO MENSUAL DE LOS CAUDALES (m3/s)";//
                            if (ordenSubtitulo == 2) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexEvolucionCaudalesEjecut;//"EVOLUCIÓN DE LOS CAUDALES";//

                            break;
                        case "15":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiCostoOperacion;//"COSTOS DE OPERACIÓN EJECUTADO ACUMULADO SEMANAL DEL SEIN (Millones de S/.)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexEvolCostosOperacionEjecutados;//"EVOLUCIÓN DE LOS COSTOS DE OPERACIÓN ACUMULADO SEMANAL (Millones de S/.)";//

                            break;
                        case "16":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiCostoMarginal;//"COSTOS MARGINALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm;//"EVOLUCIÓN DE LOS COSTOS MARGINALES PROMEDIO SEMANAL (US$/MWh)";//

                            break;
                        case "17":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiFlujoInterconexion;//"FLUJOS DE INTERCONEXIONES EN ÁREAS OPERATIVAS DEL SEIN";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexFlujoMaximoInterconexionesEjecut;//"FLUJOS MÁXIMO DE INTERCONEXIONES EN LOS ENLACES CENTRO NORTE Y CENTRO SUR ";//

                            break;
                        case "18":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiHoraCongestion;//"HORAS DE CONGESTIÓN DE LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexHorasCongestionAreaOpeEjecut;//"HORAS DE CONGESTION POR ÁREA OPERATIVA";//

                            break;
                        case "19":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiCombustibles;//"CONSUMO DE COMBUSTIBLES EN EL SEIN";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexConsumoCombustibleEjecut;//"POR TIPO DE COMBUSTIBLE";//

                            break;
                        case "20":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiIntercambioInternacionales;//"INTERCAMBIOS INTERNACIONALES DE ELECTRICIDAD";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexIntercambioInternacionalesEjecut;//"INTERCAMBIOS DE ELECTRICIDAD DE ENERGÍA Y POTENCIA";//

                            break;
                        case "21":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiEventoFallas;//"EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexEventoFallaSuministroEnergEjecut;//"FALLAS POR TIPO DE EQUIPO Y CAUSA SEGÚN CLASIFICACION CIER";//
                            break;
                        case "22":
                            if (ordenSubtitulo == 0) idMenureporcodi = ConstantesEjecutivoSemanalPR5.CatecodiEventoFallas;//"EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";//
                            if (ordenSubtitulo == 1) idMenureporcodi = ConstantesEjecutivoSemanalPR5.IndexEventoDetalleEvento;//"DETALLE DE EVENTOS";//
                            break;



                        default:
                            break;
                    }


                    if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaGrupal)
                    {
                        switch (ordenReporte)
                        {
                            case "2":
                                if (ordenSubtitulo == 0) texto = "1. ";// "1. OFERTA DE GENERACIÓN ELÉCTRICA DEL SEIN";
                                if (ordenSubtitulo == 1) texto = "1.1. ";// "1.1. INGRESO EN OPERACIÓN COMERCIAL AL SEIN";
                                if (ordenSubtitulo == 2) texto = "1.2. ";// "1.2. RETIRO DE OPERACIÓN COMERCIAL DEL SEIN";
                                break;

                            case "3":
                                if (ordenSubtitulo == 0) texto = "2. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                if (ordenSubtitulo == 1) texto = "2.1. ";// "2.1. PRODUCCIÓN POR TIPO DE GENERACIÓN (GWh)";
                                break;

                            case "4":
                                if (ordenSubtitulo == 0) texto = "2. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                if (ordenSubtitulo == 1) texto = "2.2. ";// "2.2. PRODUCCIÓN POR TIPO DE RECURSO ENERGÉTICO (GWh)";
                                break;

                            case "5":
                                if (ordenSubtitulo == 0) texto = "2. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                if (ordenSubtitulo == 1) texto = "2.3. ";// "2.3. PRODUCCIÓN POR RECURSOS ENERGÉTICOS RENOVABLES (GWh)";
                                break;

                            case "6":
                                if (ordenSubtitulo == 0) texto = "2. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                if (ordenSubtitulo == 1) texto = "2.4. ";// "2.4. FACTOR DE PLANTA DE LAS CENTRALES RER DEL SEIN";
                                break;

                            case "7":
                                if (ordenSubtitulo == 0) texto = "2. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                if (ordenSubtitulo == 1) texto = "2.5. ";// "2.5. PARTICIPACIÓN DE LA PRODUCCIÓN (GWh) POR EMPRESAS INTEGRANTES";
                                break;

                            case "8":
                                if (ordenSubtitulo == 0) texto = "3. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                                if (ordenSubtitulo == 1) texto = "3.1. ";// "3.1. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)";
                                break;

                            case "9":
                                if (ordenSubtitulo == 0) texto = "3. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                                if (ordenSubtitulo == 1) texto = "3.2. ";// "3.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)";
                                break;

                            case "10":
                                if (ordenSubtitulo == 0) texto = "3. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                                if (ordenSubtitulo == 1) texto = "3.3. ";// "3.3. EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)";
                                break;

                            case "11":
                                if (ordenSubtitulo == 0) texto = "4. ";// "4. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                                if (ordenSubtitulo == 1) texto = "4.1. ";// "4.1. VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)";
                                if (ordenSubtitulo == 2) texto = "4.2. ";// "4.2. EVOLUCIÓN DE VOLUMENES DE LOS EMBALSES Y LAGUNAS";
                                break;

                            case "13":
                                if (ordenSubtitulo == 0) texto = "4. ";// "4. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                                if (ordenSubtitulo == 1) texto = "4.3. ";// "4.3. PROMEDIO MENSUAL DE LOS CAUDALES (m3/s)";
                                if (ordenSubtitulo == 2) texto = "4.4. ";// "4.4. EVOLUCIÓN DE LOS CAUDALES";
                                break;

                            case "15":
                                if (ordenSubtitulo == 0) texto = "5. ";// "5. COSTOS DE OPERACIÓN EJECUTADO ACUMULADO SEMANAL DEL SEIN (Millones de S/.)";
                                if (ordenSubtitulo == 1) texto = "5.1. ";// "5.1. EVOLUCIÓN DE LOS COSTOS DE OPERACIÓN ACUMULADO SEMANAL (Millones de S/.)";
                                break;

                            case "16":
                                if (ordenSubtitulo == 0) texto = "6. ";// "6. COSTOS MARGINALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";
                                if (ordenSubtitulo == 1) texto = "6.1. ";// "6.1. EVOLUCIÓN DE LOS COSTOS MARGINALES PROMEDIO SEMANAL (US$/MWh)";
                                break;

                            case "17":
                                if (ordenSubtitulo == 0) texto = "7. ";// "7. FLUJOS DE INTERCONEXIONES EN ÁREAS OPERATIVAS DEL SEIN";
                                if (ordenSubtitulo == 1) texto = "7.1. ";// "7.1. FLUJOS MÁXIMO DE INTERCONEXIONES EN LOS ENLACES CENTRO NORTE Y CENTRO SUR ";
                                break;

                            case "18":
                                if (ordenSubtitulo == 0) texto = "8. ";// "8. HORAS DE CONGESTIÓN DE LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)";
                                if (ordenSubtitulo == 1) texto = "8.1. ";// "8.1. HORAS DE CONGESTION POR ÁREA OPERATIVA";
                                break;

                            case "19":
                                if (ordenSubtitulo == 0) texto = "9. ";// "9. CONSUMO DE COMBUSTIBLES EN EL SEIN";
                                if (ordenSubtitulo == 1) texto = "9.1. ";// "9.1. POR TIPO DE COMBUSTIBLE";
                                break;

                            case "20":
                                if (ordenSubtitulo == 0) texto = "10. ";// "10. INTERCAMBIOS INTERNACIONALES DE ELECTRICIDAD";
                                if (ordenSubtitulo == 1) texto = "10.1. ";// "10.1. INTERCAMBIOS DE ELECTRICIDAD DE ENERGÍA Y POTENCIA";
                                break;

                            case "21":
                                if (ordenSubtitulo == 0) texto = "11. ";// "11. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";
                                if (ordenSubtitulo == 1) texto = "11.1. ";// "11.1. FALLAS POR TIPO DE EQUIPO Y CAUSA SEGÚN CLASIFICACION CIER";
                                break;

                            case "22":
                                if (ordenSubtitulo == 0) texto = "11. ";// "11. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";
                                if (ordenSubtitulo == 1) texto = "11.2. ";// "11.1. FALLAS POR TIPO DE EQUIPO Y CAUSA SEGÚN CLASIFICACION CIER";
                                break;



                            default:
                                break;
                        }
                    }

                }
                else
                {
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                    {
                        switch (ordenReporte)
                        {
                            case "2":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualOfertaGeneracion;//1. OFERTA DE GENERACIÓN ELÉCTRICA EN EL SEIN//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualIngresoOpComercSEIN;//1.1 Ingreso en Operación Comercial al SEIN//
                                if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeMensual.IndexMensualRetiroOpComercSEIN;//1.2 Retiro de Operación Comercial;//
                                if (ordenSubtitulo == 3) idMenureporcodi = ConstantesInformeMensual.IndexMensualPotenciaInstaladaSEIN;//1.3 Potencia instalada sein;//
                                break;

                            case "3":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualProduccionEnergia;//2. PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh);//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualProdTipoGen;//2.1 Producción por tipo de Generación;//
                                break;

                            case "4":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualProduccionEnergia;//2. PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh);//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualProdTipoRecurso;//2.2 Producción por tipo de Recurso Energético;//
                                break;

                            case "5":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualProduccionEnergia;//2. PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh);//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualProdRER;//"2.3 Producción por Recursos Energéticos Renovables;//
                                break;

                            case "6":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualProduccionEnergia;//2. PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh);//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualFactorPlantaRER;//2.4 Factor de planta de las centrales RER;//
                                break;

                            case "7":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualProduccionEnergia;//2. PRODUCCIÓN DE ENERGÍA ELÉCTRICA EN EL SEIN (GWh);//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualParticipacionEmpresas;//2.5 Participación de la producción por empresas Integrantes;//
                                break;

                            case "8":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualMDCoincidente;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualMaximaDemandaTipoGeneracion;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)";//
                                break;

                            case "9":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualMDCoincidente;//"MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualMaximaDemandaXEmpresa;//"PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)";//
                                break;

                            case "10":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualHidrologia;//4. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualVolUtilEmbLag;//4.1 Volumen útil de los embalses y lagunas (Mm3)//
                                if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeMensual.IndexMensualEvolucionVolEmbLag;//4.2 Evolución de volúmenes de embalses y lagunas//
                                break;

                            case "12":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualHidrologia;//4. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualPromMensualCaudales;//4.3 Promedio mensual de los caudales (m3/s)//
                                if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeMensual.IndexMensualEvolucionCaudales;//4.4 Evolución de los caudales//
                                break;

                            case "14":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualCostoMarginal;//"COSTOS MARGINALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualCostosMarginalesProm;//"EVOLUCIÓN DE LOS COSTOS MARGINALES PROMEDIO SEMANAL (US$/MWh)";//
                                break;

                            case "15":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualHoraCongestion;//"HORAS DE CONGESTIÓN DE LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)";//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualHorasCongestionAreaOpe;//"HORAS DE CONGESTION POR ÁREA OPERATIVA";//
                                break;


                            case "16":
                                if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeMensual.CatecodiMensualEventoFallas;//"EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";//
                                if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeMensual.IndexMensualEventoFallaSuministroEnerg;//"FALLAS POR TIPO DE EQUIPO Y CAUSA SEGÚN CLASIFICACION CIER";//
                                break;




                            default:
                                break;
                        }


                        if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaGrupal)
                        {
                            switch (ordenReporte)
                            {
                                case "2":
                                    if (ordenSubtitulo == 0) texto = "2. ";// "1. OFERTA DE GENERACIÓN ELÉCTRICA DEL SEIN";
                                    if (ordenSubtitulo == 1) texto = "2.1. ";// "1.1. INGRESO EN OPERACIÓN COMERCIAL AL SEIN";
                                    if (ordenSubtitulo == 2) texto = "2.2. ";// "1.2. RETIRO DE OPERACIÓN COMERCIAL DEL SEIN";
                                    if (ordenSubtitulo == 3) texto = "2.3. ";// "1.3. POTENCIA INSTALADA EN E SEIN";
                                    break;

                                case "3":
                                    if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                    if (ordenSubtitulo == 1) texto = "3.1. ";// "2.1. PRODUCCIÓN POR TIPO DE GENERACIÓN (GWh)";
                                    break;

                                case "4":
                                    if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                    if (ordenSubtitulo == 1) texto = "3.2. ";// "2.2. PRODUCCIÓN POR TIPO DE RECURSO ENERGÉTICO (GWh)";
                                    break;

                                case "5":
                                    if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                    if (ordenSubtitulo == 1) texto = "3.3. ";// "2.3. PRODUCCIÓN POR RECURSOS ENERGÉTICOS RENOVABLES (GWh)";
                                    break;

                                case "6":
                                    if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                    if (ordenSubtitulo == 1) texto = "3.4. ";// "2.4. FACTOR DE PLANTA DE LAS CENTRALES RER DEL SEIN";
                                    break;

                                case "7":
                                    if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                    if (ordenSubtitulo == 1) texto = "3.5. ";// "2.5. PARTICIPACIÓN DE LA PRODUCCIÓN (GWh) POR EMPRESAS INTEGRANTES";
                                    break;

                                case "8":
                                    if (ordenSubtitulo == 0) texto = "4. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                                    if (ordenSubtitulo == 1) texto = "4.1. ";// "3.1. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)";
                                    break;

                                case "9":
                                    if (ordenSubtitulo == 0) texto = "4. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                                    if (ordenSubtitulo == 1) texto = "4.2. ";// "3.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)";
                                    break;

                                case "10":
                                    if (ordenSubtitulo == 0) texto = "5. ";// "4. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                                    if (ordenSubtitulo == 1) texto = "5.1. ";// "4.1. VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)";
                                    if (ordenSubtitulo == 2) texto = "5.2. ";// "4.2. EVOLUCIÓN DE VOLUMENES DE LOS EMBALSES Y LAGUNAS";
                                    break;

                                case "12":
                                    if (ordenSubtitulo == 0) texto = "5. ";// "4. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                                    if (ordenSubtitulo == 1) texto = "5.3. ";// "4.3. PROMEDIO MENSUAL DE LOS CAUDALES (m3/s)";
                                    if (ordenSubtitulo == 2) texto = "5.4. ";// "4.4. EVOLUCIÓN DE LOS CAUDALES";
                                    break;

                                case "14":
                                    if (ordenSubtitulo == 0) texto = "6. ";// "5. COSTOS MARGINALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";
                                    if (ordenSubtitulo == 1) texto = "6.1. ";// "5.1. EVOLUCIÓN DE LOS COSTOS MARGINALES PROMEDIO SEMANAL (US$/MWh)";
                                    break;

                                case "15":
                                    if (ordenSubtitulo == 0) texto = "7. ";// "6. HORAS DE CONGESTIÓN DE LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)";
                                    if (ordenSubtitulo == 1) texto = "7.1. ";// "6.1. HORAS DE CONGESTION POR ÁREA OPERATIVA";
                                    break;

                                case "16":
                                    if (ordenSubtitulo == 0) texto = "8. ";// "11. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO";
                                    if (ordenSubtitulo == 1) texto = "8.1. ";// "11.1. FALLAS POR TIPO DE EQUIPO Y CAUSA SEGÚN CLASIFICACION CIER";
                                    break;




                                default:
                                    break;
                            }
                        }

                    }
                    else
                    {
                        if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                        {
                            switch (ordenReporte)
                            {
                                case "2":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualProduccionEnergia;//2. OFERTA DE GENERACIÓN ELÉCTRICA EN EL SEIN//
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualIngresoOpComercSEIN;//2.1 Ingreso en Operación Comercial al SEIN//
                                    if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeAnual.IndexAnualRetiroOpComercSEIN;//2.2 Retiro de Operación Comercial;//
                                    if (ordenSubtitulo == 3) idMenureporcodi = ConstantesInformeAnual.IndexAnualPotenciaInstSEIN;//1.3 Potencia Instalada en el SEIN;//
                                    break;

                                case "3":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualProduccionEnergia;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualProdTipoGen;
                                    break;

                                case "4":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualProduccionEnergia;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualProdTipoRecurso;
                                    break;

                                case "5":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualProduccionEnergia;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualProdRER;
                                    break;

                                case "6":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualProduccionEnergia;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualProduccionEmpresas;
                                    break;

                                case "7":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualMDCoincidente;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualMaxDemandaTipoGeneracion;
                                    break;

                                case "8":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualMDCoincidente;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualMaxDemandaPorEmpresa;
                                    break;

                                case "9":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualHidrologia;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualEvolVolAlmacenados;
                                    if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeAnual.IndexAnualEvolCaudales;
                                    break;

                                case "11":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualHidrologia;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualEvolCaudales;
                                    break;

                                case "13":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualCostosMarginales;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualEvolCostosMarginales;
                                    break;

                                case "14":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualHoraCongestion;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualHorasCongestionAreaOpe;
                                    break;


                                case "16":
                                    if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeAnual.CatecodiAnualProduccionEnergia;
                                    if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeAnual.IndexAnualFactorPlantaRER;
                                    break;




                                default:
                                    break;
                            }


                            if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaGrupal)
                            {
                                switch (ordenReporte)
                                {
                                    case "2":
                                        if (ordenSubtitulo == 0) texto = "2. ";// "2. OFERTA DE GENERACIÓN ELÉCTRICA DEL SEIN";
                                        if (ordenSubtitulo == 1) texto = "2.1. ";// "2.1. INGRESO EN OPERACIÓN COMERCIAL AL SEIN";
                                        if (ordenSubtitulo == 2) texto = "2.2. ";// "2.2. RETIRO DE OPERACIÓN COMERCIAL DEL SEIN";
                                        if (ordenSubtitulo == 3) texto = "2.3. ";// "2.3. POTENCIA INSTALADA EN EL SEIN";
                                        break;

                                    case "3":
                                        if (ordenSubtitulo == 0) texto = "3. ";// "3. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                        if (ordenSubtitulo == 1) texto = "3.1. ";// "3.1. PRODUCCIÓN POR TIPO DE GENERACIÓN (GWh)";
                                        break;

                                    case "4":
                                        if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                        if (ordenSubtitulo == 1) texto = "3.3. ";// "2.2. PRODUCCIÓN POR TIPO DE RECURSO ENERGÉTICO (GWh)";
                                        break;

                                    case "5":
                                        if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                        if (ordenSubtitulo == 1) texto = "3.4. ";// "2.3. PRODUCCIÓN POR RECURSOS ENERGÉTICOS RENOVABLES (GWh)";
                                        break;

                                    case "6":
                                        if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                        if (ordenSubtitulo == 1) texto = "3.6. ";// "2.5. PARTICIPACIÓN DE LA PRODUCCIÓN (GWh) POR EMPRESAS INTEGRANTES";
                                        break;

                                    case "7":
                                        if (ordenSubtitulo == 0) texto = "4. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                                        if (ordenSubtitulo == 1) texto = "4.1. ";// "3.1. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)";
                                        break;

                                    case "8":
                                        if (ordenSubtitulo == 0) texto = "4. ";// "3. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA DEL SEIN (MW)";
                                        if (ordenSubtitulo == 1) texto = "4.2. ";// "3.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)";
                                        break;

                                    case "9":
                                        if (ordenSubtitulo == 0) texto = "5. ";// "4. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                                        if (ordenSubtitulo == 1) texto = "5.1. ";// "4.1. VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)";
                                        break;

                                    case "11":
                                        if (ordenSubtitulo == 0) texto = "5. ";// "4. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                                        if (ordenSubtitulo == 1) texto = "5.2. ";// "4.3. PROMEDIO MENSUAL DE LOS CAUDALES (m3/s)";
                                        break;

                                    case "13":
                                        if (ordenSubtitulo == 0) texto = "6. ";// "5. COSTOS MARGINALES PROMEDIO SEMANAL DEL SEIN (US$/MWh)";
                                        if (ordenSubtitulo == 1) texto = "6.1. ";// "5.1. EVOLUCIÓN DE LOS COSTOS MARGINALES PROMEDIO SEMANAL (US$/MWh)";
                                        break;

                                    case "14":
                                        if (ordenSubtitulo == 0) texto = "7. ";// "6. HORAS DE CONGESTIÓN DE LOS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)";
                                        if (ordenSubtitulo == 1) texto = "7.1. ";// "6.1. HORAS DE CONGESTION POR ÁREA OPERATIVA";
                                        break;

                                    case "16":
                                        if (ordenSubtitulo == 0) texto = "3. ";// "2. MATRIZ ELÉCTRICA DE GENERACIÓN EN EL SEIN (GWh)";
                                        if (ordenSubtitulo == 1) texto = "3.5. ";// "2.5. PARTICIPACIÓN DE LA PRODUCCIÓN (GWh) POR EMPRESAS INTEGRANTES";                                        
                                        break;
                                    default:
                                        break;
                                }
                            }

                        }
                        else
                        {
                            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoMensual)
                            {
                                switch (ordenReporte)
                                {
                                    case "2":
                                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeEjecutivoMensual.CatecodiEjecMensualProduccionPotencia;//1. PRODUCCIÓN Y POTENCIA COINCIDENTE EN BORNES DE GENERACIÓN DEL SEIN
                                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexProdEmpresaGeneradora;//1.1. Producción por empresa generadora
                                        if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexTotalCentralesGeneracion;//1.2.Producción total de centrales de generación eléctrica con exportación a ecuador
                                        if (ordenSubtitulo == 3) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexParticEmpProduccionMes;//1.3.Participación por empresas en la producción total de energía del mes
                                        if (ordenSubtitulo == 4) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexCrecimientoMensualMaxPotencia;//1.4.Evolución del crecimiento mensual de la máxima potencia coincidente sin exportación a ecuador
                                        if (ordenSubtitulo == 5) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexComparacionCoberturaMaxDemanda;//1.5.Comparación de la cobertura de la máxima demanda por tipo de generación
                                        if (ordenSubtitulo == 6) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexDespachoMaxPotenciaCoincidente;//1.6.Despacho en el día de máxima potencia coincidente
                                        if (ordenSubtitulo == 7) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexCobMaxPotCoincidenteTecnologia;//1.7.Cobertura de la máxima potencia coincidente por tipo de tecnología
                                        if (ordenSubtitulo == 8) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexUtilizacionRecursosEnergeticos;//1.8.Utilización de los recursos energéticos
                                        if (ordenSubtitulo == 9) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexUtilizacionRecEnergeticosProdElec;//1.9.Participación de la utilización de los recursos energéticos en la producción de energía eléctrica
                                        break;


                                    case "3":

                                        break;

                                    case "4":

                                        break;

                                    case "5":

                                        break;

                                    case "6":

                                        break;

                                    case "7":

                                        break;

                                    case "8":

                                        break;

                                    case "9":
                                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeEjecutivoMensual.CatecodiEjecMensualHidrologia; //3. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN
                                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexVolumenEmbLag;//3.1. VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)
                                        if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexEvolucionVolumenes;//3.2. EVOLUCIÓN DE LOS VOLÚMENES DE EMBALSES Y LAGUNAS
                                        break;

                                    case "12":
                                        if (ordenSubtitulo == 0) idMenureporcodi = ConstantesInformeEjecutivoMensual.CatecodiEjecMensualHidrologia;//3. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN
                                        if (ordenSubtitulo == 1) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexPromedioCaudales;//3.3. PROMEDIO MENSUAL DE LOS CAUDALES (m3/s)
                                        if (ordenSubtitulo == 2) idMenureporcodi = ConstantesInformeEjecutivoMensual.IndexEvolucionCaudales;//3.4. EVOLUCIÓN DE LOS CAUDALES
                                        break;



                                    default:
                                        break;
                                }


                                if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaGrupal)
                                {
                                    switch (ordenReporte)
                                    {
                                        case "2":
                                            if (ordenSubtitulo == 0) texto = "1. ";//1. PRODUCCIÓN Y POTENCIA COINCIDENTE EN BORNES DE GENERACIÓN DEL SEIN
                                            if (ordenSubtitulo == 1) texto = "1.1. ";//1.1. Producción por empresa generadora
                                            if (ordenSubtitulo == 2) texto = "1.2. ";//1.2.Producción total de centrales de generación eléctrica con exportación a ecuador
                                            if (ordenSubtitulo == 3) texto = "1.3. ";//1.3.Participación por empresas en la producción total de energía del mes                                            
                                            if (ordenSubtitulo == 4) texto = "1.4. "; //1.4.Evolución del crecimiento mensual de la máxima potencia coincidente sin exportación a ecuador
                                            if (ordenSubtitulo == 5) texto = "1.5. "; //1.5.Comparación de la cobertura de la máxima demanda por tipo de generación
                                            if (ordenSubtitulo == 6) texto = "1.6. "; //1.6.Despacho en el día de máxima potencia coincidente
                                            if (ordenSubtitulo == 7) texto = "1.7. "; //1.7.Cobertura de la máxima potencia coincidente por tipo de tecnología
                                            if (ordenSubtitulo == 8) texto = "1.8. "; //1.8.Utilización de los recursos energéticos
                                            if (ordenSubtitulo == 9) texto = "1.9. "; //1.9.Participación de la utilización de los recursos energéticos en la producción de energía eléctrica

                                            break;

                                        case "3":

                                            break;

                                        case "4":

                                            break;

                                        case "5":

                                            break;

                                        case "6":

                                            break;

                                        case "7":

                                            break;

                                        case "8":

                                            break;

                                        case "9":
                                            if (ordenSubtitulo == 0) texto = "3. ";// "3. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN;
                                            if (ordenSubtitulo == 1) texto = "3.1. ";// "3.1. VOLÚMEN UTIL DE LOS EMBALSES Y LAGUNAS (Millones de m3)";
                                            if (ordenSubtitulo == 2) texto = "3.2. ";// "3.2. EVOLUCIÓN DE LOS VOLÚMENES DE EMBALSES Y LAGUNAS";
                                            break;

                                        case "12":
                                            if (ordenSubtitulo == 0) texto = "3. ";// "3. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN";
                                            if (ordenSubtitulo == 1) texto = "3.3. ";// "3.3. PROMEDIO MENSUAL DE LOS CAUDALES (m3/s)";
                                            if (ordenSubtitulo == 2) texto = "3.4. ";// "3.4. EVOLUCIÓN DE LOS CAUDALES";CargarReporteIngresoOperacionSem
                                            break;

                                        case "13":

                                            break;

                                        case "14":

                                            break;

                                        default:
                                            break;
                                    }
                                }

                            }
                        }
                    }
                }
            }

            ItemMenuNumeral objItemReporte = listaItem.Find(x => x.Codigo == idMenureporcodi);//GetByIdMenuReporte(idMenureporcodi);
            texto = objItemReporte != null ? texto + objItemReporte.NombreExcel : string.Empty;

            return texto;
        }

        /// <summary>
        /// Metodo que retorna fechas actuales y anteriores apartir de un rango de fechas para el Informe Semanal
        /// </summary>
        /// <param name="fechaActualInicial"></param>
        /// <param name="fechaActualFinal"></param>
        /// <param name="tipoVistaReporte"></param>
        /// <returns></returns>
        public static FechasPR5 ObtenerFechasInformeSemanal(DateTime fechaActualInicial, DateTime fechaActualFinal, string tipoVistaReporte = "")
        {
            FechasPR5 objFecha = new FechasPR5();
            objFecha.TipoReporte = ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal;
            objFecha.TipoVistaReporte = tipoVistaReporte;

            objFecha.FechaInicial = fechaActualInicial;
            objFecha.FechaFinal = fechaActualFinal;
            objFecha.AnioAct = new PR5DatoAnio();
            objFecha.Anio1Ant = new PR5DatoAnio();
            objFecha.Anio2Ant = new PR5DatoAnio();
            objFecha.Anio3Ant = new PR5DatoAnio();

            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(fechaActualFinal);
            int anioActual = anioSemIni.Item2;
            int numSemanaActual = anioSemIni.Item1;

            int nroSemanaIniRango = EPDate.f_numerosemana_y_anho(fechaActualInicial).Item1;
            int nroAnioIniRango = EPDate.f_numerosemana_y_anho(fechaActualInicial).Item2;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // AÑO ACTUAL
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //fechas esta semana
            DateTime fechaIniSemanaFinalAnioActual = EPDate.f_fechainiciosemana(anioActual, numSemanaActual);
            DateTime fechaFinSemanaFinalAnioActual = fechaIniSemanaFinalAnioActual.AddDays(6);

            //fechas 1 semana anterior
            DateTime fechaIniSemanaAnteriorAnioActual = fechaIniSemanaFinalAnioActual.AddDays(-7);
            DateTime fechaFinSemanaAnteriorAnioActual = fechaIniSemanaAnteriorAnioActual.AddDays(6);

            //fechas 2 semana anterior
            DateTime fechaIniSemanaTrasAnteriorAnioActual = fechaIniSemanaFinalAnioActual.AddDays(-7 * 2);
            DateTime fechaFinSemanaTrasAnteriorAnioActual = fechaIniSemanaTrasAnteriorAnioActual.AddDays(6);

            //1 de enero de año actual
            DateTime fecha01EneroAnioActual = new DateTime(anioActual, 1, 1);
            DateTime fecha31DiciembreAnioActual = new DateTime(anioActual, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnioActSem01 = EPDate.f_fechainiciosemana(anioActual, 1);

            //primer dia y último día del mes actual
            int mesActual = fechaIniSemanaFinalAnioActual.Month;
            DateTime fecha01MesAnioActual = new DateTime(anioActual, mesActual, 1);
            DateTime fechaFinMesAnioActual = fecha01MesAnioActual.AddMonths(1).AddDays(-1);

            //pasamos valores al objeto FechasPR5
            objFecha.AnioAct.RangoAct_FechaIni = fechaIniSemanaFinalAnioActual;
            objFecha.AnioAct.RangoAct_FechaFin = fechaFinSemanaFinalAnioActual;
            objFecha.AnioAct.Rango1Ant_FechaIni = fechaIniSemanaAnteriorAnioActual;
            objFecha.AnioAct.Rango1Ant_FechaFin = fechaFinSemanaAnteriorAnioActual;
            objFecha.AnioAct.Rango2Ant_FechaIni = fechaIniSemanaTrasAnteriorAnioActual;
            objFecha.AnioAct.Rango2Ant_FechaFin = fechaFinSemanaTrasAnteriorAnioActual;

            objFecha.AnioAct.Fecha_01Enero = fecha01EneroAnioActual;
            objFecha.AnioAct.Fecha_Inicial = fechaIniSemanaFinalAnioActual;
            objFecha.AnioAct.Fecha_Final = fechaFinSemanaFinalAnioActual;
            objFecha.AnioAct.Fecha_31Diciembre = fecha31DiciembreAnioActual;

            objFecha.AnioAct.Sem01_FechaIni = fechaAnioActSem01;
            objFecha.AnioAct.SemAct_FechaIni = objFecha.AnioAct.RangoAct_FechaIni;
            objFecha.AnioAct.SemAct_FechaFin = objFecha.AnioAct.RangoAct_FechaFin;

            objFecha.AnioAct.MesAct_FechaIni = fecha01MesAnioActual;
            objFecha.AnioAct.MesAct_FechaFin = fechaFinMesAnioActual;

            objFecha.AnioAct.Max_Num_Sem = numSemanaActual;
            objFecha.AnioAct.RangoAct_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            objFecha.AnioAct.RangoAct_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            objFecha.AnioAct.RangoAct_DiaYMesYAnio = UtilAnexoAPR5.GetDescripcionPeriodoSemanal(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            objFecha.AnioAct.Rango1Ant_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
            objFecha.AnioAct.Rango1Ant_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
            objFecha.AnioAct.Rango2Ant_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
            objFecha.AnioAct.Rango2Ant_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
            objFecha.AnioAct.NumAnio = anioActual;
            objFecha.AnioAct.NumSem = numSemanaActual;

            objFecha.AnioAct.Ini_Data = objFecha.AnioAct.Sem01_FechaIni < objFecha.AnioAct.Fecha_01Enero ? objFecha.AnioAct.Sem01_FechaIni : objFecha.AnioAct.Fecha_01Enero; //escoger la fecha más antigua
            objFecha.AnioAct.Ini_Data = objFecha.AnioAct.SemAct_FechaIni < objFecha.AnioAct.Ini_Data ? objFecha.AnioAct.SemAct_FechaIni : objFecha.AnioAct.Ini_Data;
            objFecha.AnioAct.Ini_Data = objFecha.AnioAct.RangoAct_FechaIni < objFecha.AnioAct.Ini_Data ? objFecha.AnioAct.RangoAct_FechaIni : objFecha.AnioAct.Ini_Data;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 1 AÑO ATRAS
            int anio1Anterior = anioActual - 1;
            DateTime fechaInicialIgualSemanaAnioAnt = EPDate.f_fechainiciosemana(anio1Anterior, numSemanaActual);

            int anio1AnteriorDeNroSemIniRango = nroAnioIniRango - 1;
            DateTime fecIniIgualSemIniRangoAnioAnt = EPDate.f_fechainiciosemana(anio1AnteriorDeNroSemIniRango, nroSemanaIniRango);

            //fechas en el rango
            DateTime fechaIniIgualSemIniRangoAnioAnt = fecIniIgualSemIniRangoAnioAnt;

            //fechas esta semana
            DateTime fechaIniSemanaActualAnioAnt = fechaInicialIgualSemanaAnioAnt;

            //1 de enero de año actual
            DateTime fecha01EneroAnio1Anterior = new DateTime(anio1Anterior, 1, 1);
            DateTime fechaInicialAnio1Anterior = objFecha.AnioAct.Fecha_Inicial.AddYears(-1);
            DateTime fechaFinalAnio1Anterior = objFecha.AnioAct.Fecha_Final.AddYears(-1);
            DateTime fecha31DiciembreAnio1Anterior = new DateTime(anio1Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnioAntSem01 = EPDate.f_fechainiciosemana(anio1Anterior, 1);

            //pasamos valores al objeto FechasPR5
            objFecha.Anio1Ant.RangoAct_FechaIni = fechaIniSemanaActualAnioAnt; //CUANDO fechaActualFinal, fechaActualInicial PERTENECEN  A LA MISMA SEMANA
            objFecha.Anio1Ant.RangoAct_FechaFin = objFecha.Anio1Ant.RangoAct_FechaIni.AddDays(6);

            objFecha.Anio1Ant.Fecha_01Enero = fecha01EneroAnio1Anterior;
            objFecha.Anio1Ant.Fecha_Inicial = fechaInicialAnio1Anterior;
            objFecha.Anio1Ant.Fecha_Final = fechaFinalAnio1Anterior;
            objFecha.Anio1Ant.Fecha_31Diciembre = fecha31DiciembreAnio1Anterior;

            objFecha.Anio1Ant.Sem01_FechaIni = fechaAnioAntSem01;
            objFecha.Anio1Ant.SemAct_FechaIni = fechaIniIgualSemIniRangoAnioAnt; //Cuando fechaActualFinal, fechaActualInicial Pueden pertenecer a semanas diferentes
            objFecha.Anio1Ant.SemAct_FechaFin = objFecha.Anio1Ant.SemAct_FechaIni.AddDays(6);

            objFecha.Anio1Ant.RangoAct_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            objFecha.Anio1Ant.RangoAct_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            objFecha.Anio1Ant.NumAnio = anio1Anterior;

            objFecha.Anio1Ant.Ini_Data = objFecha.Anio1Ant.Sem01_FechaIni < objFecha.Anio1Ant.Fecha_01Enero ? objFecha.Anio1Ant.Sem01_FechaIni : objFecha.Anio1Ant.Fecha_01Enero; //escoger la fecha más antigua
            objFecha.Anio1Ant.Ini_Data = objFecha.Anio1Ant.SemAct_FechaIni < objFecha.Anio1Ant.Ini_Data ? objFecha.Anio1Ant.SemAct_FechaIni : objFecha.Anio1Ant.Ini_Data;
            objFecha.Anio1Ant.Ini_Data = objFecha.Anio1Ant.RangoAct_FechaIni < objFecha.Anio1Ant.Ini_Data ? objFecha.Anio1Ant.RangoAct_FechaIni : objFecha.Anio1Ant.Ini_Data;

            #endregion

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 2 AÑOS ATRAS
            int anio2Anterior = anio1Anterior - 1;
            DateTime fechaInicialIgualSemanaHaceDosAnios = EPDate.f_fechainiciosemana(anio2Anterior, numSemanaActual);

            int anio2AnteriorDeNroSemIniRango = anio1AnteriorDeNroSemIniRango - 1;
            DateTime fecIniIgualSemIniRangoHaceDosAnios = EPDate.f_fechainiciosemana(anio2AnteriorDeNroSemIniRango, nroSemanaIniRango);

            //fechas en el rango
            DateTime fechaIniIgualSemIniRangoHaceDosAnios = fecIniIgualSemIniRangoHaceDosAnios;

            //fechas esta semana
            DateTime fechaIniSemanaActualHaceDosAnios = fechaInicialIgualSemanaHaceDosAnios;

            //1 de enero de año actual
            DateTime fecha01EneroAnio2Anterior = new DateTime(anio2Anterior, 1, 1);
            DateTime fechaFinalAnio2Anterior = objFecha.Anio1Ant.Fecha_Final.AddYears(-1);
            DateTime fecha31DiciembreAnio2Anterior = new DateTime(anio2Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnio2AntSem01 = EPDate.f_fechainiciosemana(anio2Anterior, 1);

            //pasamos valores al objeto FechasPR5
            objFecha.Anio2Ant.RangoAct_FechaIni = fechaIniSemanaActualHaceDosAnios;//CUANDO fechaActualFinal, fechaActualInicial PERTENECEN  A LA MISMA SEMANA
            objFecha.Anio2Ant.RangoAct_FechaFin = objFecha.Anio2Ant.RangoAct_FechaIni.AddDays(6);

            objFecha.Anio2Ant.Fecha_01Enero = fecha01EneroAnio2Anterior;
            objFecha.Anio2Ant.Fecha_Final = fechaFinalAnio2Anterior;
            objFecha.Anio2Ant.Fecha_31Diciembre = fecha31DiciembreAnio2Anterior;

            objFecha.Anio2Ant.Sem01_FechaIni = fechaAnio2AntSem01;
            objFecha.Anio2Ant.SemAct_FechaIni = fechaIniIgualSemIniRangoHaceDosAnios; //Cuando fechaActualFinal, fechaActualInicial Pueden pertenecer a semanas diferentes
            objFecha.Anio2Ant.SemAct_FechaFin = objFecha.Anio2Ant.SemAct_FechaIni.AddDays(6);

            objFecha.Anio2Ant.RangoAct_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            objFecha.Anio2Ant.RangoAct_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            objFecha.Anio2Ant.NumAnio = anio2Anterior;

            #endregion

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 3 AÑOS ATRAS
            int anio3Anterior = anio2Anterior - 1;
            DateTime fechaInicialIgualSemanaHaceTresAnios = EPDate.f_fechainiciosemana(anio3Anterior, numSemanaActual);

            int anio3AnteriorDeNroSemIniRango = anio2AnteriorDeNroSemIniRango - 1;
            DateTime fecIniIgualSemIniRangoHaceTresAnios = EPDate.f_fechainiciosemana(anio3AnteriorDeNroSemIniRango, nroSemanaIniRango);

            //fechas en el rango
            DateTime fechaIniIgualSemIniRangoHaceTresAnios = fecIniIgualSemIniRangoHaceTresAnios;

            //fechas esta semana
            DateTime fechaIniSemanaActualHaceTresAnios = fechaInicialIgualSemanaHaceTresAnios;

            //1 de enero de año actual
            DateTime fecha01EneroAnio3Anterior = new DateTime(anio3Anterior, 1, 1);
            DateTime fechaFinalAnio3Anterior = objFecha.Anio2Ant.Fecha_Final.AddYears(-1);
            DateTime fecha31DiciembreAnio3Anterior = new DateTime(anio3Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnio3AntSem01 = EPDate.f_fechainiciosemana(anio3Anterior, 1);

            //pasamos valores al objeto FechasPR5
            objFecha.Anio3Ant.RangoAct_FechaIni = fechaIniSemanaActualHaceTresAnios; //CUANDO fechaActualFinal, fechaActualInicial PERTENECEN  A LA MISMA SEMANA
            objFecha.Anio3Ant.RangoAct_FechaFin = objFecha.Anio3Ant.RangoAct_FechaIni.AddDays(6);

            objFecha.Anio3Ant.Fecha_01Enero = fecha01EneroAnio3Anterior;
            objFecha.Anio3Ant.Fecha_Final = fechaFinalAnio3Anterior;
            objFecha.Anio3Ant.Fecha_31Diciembre = fecha31DiciembreAnio3Anterior;

            objFecha.Anio3Ant.Sem01_FechaIni = fechaAnio3AntSem01;
            objFecha.Anio3Ant.SemAct_FechaIni = fechaIniIgualSemIniRangoHaceTresAnios; //Cuando fechaActualFinal, fechaActualInicial Pueden pertenecer a semanas diferentes
            objFecha.Anio3Ant.SemAct_FechaFin = objFecha.Anio3Ant.SemAct_FechaIni.AddDays(6);

            objFecha.Anio3Ant.NumAnio = anio3Anterior;
            #endregion

            objFecha.ListaFechaBisiesto = UtilAnexoAPR5.ListarFechasBisiestoEnRango(objFecha.Anio3Ant.RangoAct_FechaIni.AddYears(-2), objFecha.AnioAct.RangoAct_FechaFin.AddYears(2));

            return objFecha;
        }

        /// <summary>
        /// Metodo que retorna fechas actuales y anteriores apartir de un rango de fechas para el Ejecutivo Semanal
        /// </summary>
        /// <param name="fechaActualInicial"></param>
        /// <param name="fechaActualFinal"></param>
        /// <param name="tipoVistaReporte"></param>
        /// <returns></returns>
        public static FechasPR5 ObtenerFechasEjecutivoSemanal(DateTime fechaActualInicial, DateTime fechaActualFinal, string tipoVistaReporte = "")
        {
            FechasPR5 objFecha = new FechasPR5();
            objFecha.TipoReporte = ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal;
            objFecha.TipoVistaReporte = tipoVistaReporte;

            objFecha.EsReporteEjecutivoSemanal = true;

            objFecha.FechaInicial = fechaActualInicial;
            objFecha.FechaFinal = fechaActualFinal;
            objFecha.AnioAct = new PR5DatoAnio();
            objFecha.Anio1Ant = new PR5DatoAnio();
            objFecha.Anio2Ant = new PR5DatoAnio();
            objFecha.Anio3Ant = new PR5DatoAnio();

            fechaActualInicial = fechaActualInicial.Date;
            fechaActualFinal = fechaActualFinal.Date;

            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(fechaActualFinal);
            int anioActual = anioSemIni.Item2;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // AÑO ACTUAL
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            // Difference in days.
            TimeSpan ts = fechaActualFinal.Date - fechaActualInicial.Date;
            int difDias = ts.Days;
            int difSemana = difDias / 7 + (difDias % 7 == 0 ? 0 : 1);

            //fechas esta semana
            DateTime fechaIniSemanaFinalAnioActual = fechaActualInicial;
            DateTime fechaFinSemanaFinalAnioActual = fechaActualFinal;

            //fechas 1 semana anterior
            DateTime fechaIniSemanaAnteriorAnioActual = fechaIniSemanaFinalAnioActual.AddDays(-difSemana * 7);

            //fechas 2 semana anterior
            DateTime fechaIniSemanaTrasAnteriorAnioActual = fechaIniSemanaFinalAnioActual.AddDays(-(difSemana * 2) * 7);

            //1 de enero de año actual
            DateTime fecha01EneroAnioActual = new DateTime(anioActual, 1, 1);
            DateTime fecha31DiciembreAnioActual = new DateTime(anioActual, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnioActSem01 = EPDate.f_fechainiciosemana(anioActual, 1);

            //primer dia y último día del mes actual
            int mesActual = fechaIniSemanaFinalAnioActual.Month;
            DateTime fecha01MesAnioActual = new DateTime(anioActual, mesActual, 1);
            DateTime fechaFinMesAnioActual = fecha01MesAnioActual.AddMonths(1).AddDays(-1);

            //Máximo Numero de semana que tiene data para el año actual
            int numeroMaximoSemanaDataActual;
            Tuple<int, int> anioSemFinTmp = EPDate.f_numerosemana_y_anho(fechaFinSemanaFinalAnioActual);

            DateTime fechaIniTmp = EPDate.f_fechainiciosemana(anioSemFinTmp.Item2, anioSemFinTmp.Item1);
            DateTime fechaFinTmp = fechaIniTmp.AddDays(6);
            if (fechaFinTmp == fechaFinSemanaFinalAnioActual)
            { numeroMaximoSemanaDataActual = anioSemFinTmp.Item1; }
            else
            {
                anioSemFinTmp = EPDate.f_numerosemana_y_anho(fechaFinSemanaFinalAnioActual.AddDays(-7));
                numeroMaximoSemanaDataActual = anioSemFinTmp.Item1;
            }

            //pasamos valores al objeto FechasPR5
            objFecha.AnioAct.RangoAct_FechaIni = fechaIniSemanaFinalAnioActual;
            objFecha.AnioAct.RangoAct_FechaFin = objFecha.AnioAct.RangoAct_FechaIni.AddDays(6);
            objFecha.AnioAct.Rango1Ant_FechaIni = fechaIniSemanaAnteriorAnioActual;
            objFecha.AnioAct.Rango1Ant_FechaFin = objFecha.AnioAct.Rango1Ant_FechaIni.AddDays(6);
            objFecha.AnioAct.Rango2Ant_FechaIni = fechaIniSemanaTrasAnteriorAnioActual;
            objFecha.AnioAct.Rango2Ant_FechaFin = objFecha.AnioAct.Rango2Ant_FechaIni.AddDays(6);

            objFecha.AnioAct.Fecha_01Enero = fecha01EneroAnioActual;
            objFecha.AnioAct.Fecha_Inicial = objFecha.FechaInicial;
            objFecha.AnioAct.Fecha_Final = objFecha.FechaFinal;
            objFecha.AnioAct.Fecha_31Diciembre = fecha31DiciembreAnioActual;

            objFecha.AnioAct.Sem01_FechaIni = fechaAnioActSem01;
            objFecha.AnioAct.SemAct_FechaIni = objFecha.AnioAct.RangoAct_FechaFin.DayOfWeek == DayOfWeek.Friday ? EPDate.f_fechainiciosemana(objFecha.AnioAct.RangoAct_FechaFin) : EPDate.f_fechainiciosemana(objFecha.AnioAct.RangoAct_FechaFin.AddDays(-7));
            objFecha.AnioAct.SemAct_FechaFin = objFecha.AnioAct.SemAct_FechaIni.AddDays(6);

            objFecha.AnioAct.MesAct_FechaIni = fecha01MesAnioActual;
            objFecha.AnioAct.MesAct_FechaFin = fechaFinMesAnioActual;

            objFecha.AnioAct.Max_Num_Sem = numeroMaximoSemanaDataActual;
            objFecha.AnioAct.RangoAct_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            objFecha.AnioAct.RangoAct_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            objFecha.AnioAct.RangoAct_DiaYMesYAnio = UtilAnexoAPR5.GetDescripcionPeriodoSemanal(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            objFecha.AnioAct.Rango1Ant_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
            objFecha.AnioAct.Rango1Ant_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.AnioAct.Rango1Ant_FechaIni, objFecha.AnioAct.Rango1Ant_FechaFin);
            objFecha.AnioAct.Rango2Ant_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
            objFecha.AnioAct.Rango2Ant_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.AnioAct.Rango2Ant_FechaIni, objFecha.AnioAct.Rango2Ant_FechaFin);
            objFecha.AnioAct.NumAnio = anioActual;

            objFecha.AnioAct.Ini_Data = objFecha.AnioAct.Sem01_FechaIni < objFecha.AnioAct.Fecha_01Enero ? objFecha.AnioAct.Sem01_FechaIni : objFecha.AnioAct.Fecha_01Enero; //escoger la fecha más antigua
            objFecha.AnioAct.Ini_Data = objFecha.AnioAct.SemAct_FechaIni < objFecha.AnioAct.Ini_Data ? objFecha.AnioAct.SemAct_FechaIni : objFecha.AnioAct.Ini_Data;
            objFecha.AnioAct.Ini_Data = objFecha.AnioAct.RangoAct_FechaIni < objFecha.AnioAct.Ini_Data ? objFecha.AnioAct.RangoAct_FechaIni : objFecha.AnioAct.Ini_Data;

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 1 AÑO ATRAS
            int anio1Anterior = anioActual - 1;

            //fechas esta semana
            var fechaAnioAntes = fechaIniSemanaFinalAnioActual.AddYears(-1);
            int diaSemanaAnioAct = (int)fechaIniSemanaFinalAnioActual.DayOfWeek;//domingo es 0, miercoles 4, sabado es 6
            int diaSemanaAnio1Ant = (int)fechaAnioAntes.DayOfWeek;
            int numDiasAgregar = diaSemanaAnio1Ant <= 5 ? (diaSemanaAnioAct - diaSemanaAnio1Ant) : (diaSemanaAnioAct + 7 - diaSemanaAnio1Ant);

            DateTime fechaIniSemanaActualAnioAnt = fechaAnioAntes.AddDays(numDiasAgregar); //al año actual (jueves) se le quita un año y termina siendo miércoles por ello se le agrega 1 días más para que se compare el jueves de este año con el jueves del año pasado, caso especial el bisiesto
            DateTime fechaFinSemanaActualAnioAnt = fechaIniSemanaActualAnioAnt.AddDays(difDias);

            //1 de enero de año actual
            DateTime fecha01EneroAnio1Anterior = new DateTime(anio1Anterior, 1, 1);
            DateTime fechaInicialAnio1Anterior = objFecha.AnioAct.Fecha_Inicial.AddYears(-1);
            DateTime fechaFinalAnio1Anterior = objFecha.AnioAct.Fecha_Final.AddYears(-1);
            DateTime fecha31DiciembreAnio1Anterior = new DateTime(anio1Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnioAntSem01 = EPDate.f_fechainiciosemana(anio1Anterior, 1);

            //pasamos valores al objeto FechasPR5
            objFecha.Anio1Ant.RangoAct_FechaIni = fechaIniSemanaActualAnioAnt; //CUANDO fechaActualFinal, fechaActualInicial PERTENECEN  A LA MISMA SEMANA
            objFecha.Anio1Ant.RangoAct_FechaFin = objFecha.Anio1Ant.RangoAct_FechaIni.AddDays(6);

            objFecha.Anio1Ant.Fecha_01Enero = fecha01EneroAnio1Anterior;
            objFecha.Anio1Ant.Fecha_Inicial = fechaInicialAnio1Anterior;
            objFecha.Anio1Ant.Fecha_Final = fechaFinalAnio1Anterior;
            objFecha.Anio1Ant.Fecha_31Diciembre = fecha31DiciembreAnio1Anterior;

            objFecha.Anio1Ant.Sem01_FechaIni = fechaAnioAntSem01;
            objFecha.Anio1Ant.SemAct_FechaIni = objFecha.Anio1Ant.RangoAct_FechaFin.DayOfWeek == DayOfWeek.Friday ? EPDate.f_fechainiciosemana(objFecha.Anio1Ant.RangoAct_FechaFin) : EPDate.f_fechainiciosemana(objFecha.Anio1Ant.RangoAct_FechaFin.AddDays(-7));
            objFecha.Anio1Ant.SemAct_FechaFin = objFecha.Anio1Ant.SemAct_FechaIni.AddDays(6);

            objFecha.Anio1Ant.RangoAct_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            objFecha.Anio1Ant.RangoAct_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            objFecha.Anio1Ant.NumAnio = anio1Anterior;

            objFecha.Anio1Ant.Ini_Data = objFecha.Anio1Ant.Sem01_FechaIni < objFecha.Anio1Ant.Fecha_01Enero ? objFecha.Anio1Ant.Sem01_FechaIni : objFecha.Anio1Ant.Fecha_01Enero; //escoger la fecha más antigua
            objFecha.Anio1Ant.Ini_Data = objFecha.Anio1Ant.SemAct_FechaIni < objFecha.Anio1Ant.Ini_Data ? objFecha.Anio1Ant.SemAct_FechaIni : objFecha.Anio1Ant.Ini_Data;
            objFecha.Anio1Ant.Ini_Data = objFecha.Anio1Ant.RangoAct_FechaIni < objFecha.Anio1Ant.Ini_Data ? objFecha.Anio1Ant.RangoAct_FechaIni : objFecha.Anio1Ant.Ini_Data;

            #endregion

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 2 AÑOS ATRAS
            int anio2Anterior = anio1Anterior - 1;

            //fechas esta semana
            fechaAnioAntes = fechaFinSemanaActualAnioAnt.AddYears(-1);
            diaSemanaAnioAct = (int)fechaFinSemanaActualAnioAnt.DayOfWeek;//domingo es 0, miercoles 4, sabado es 6
            diaSemanaAnio1Ant = (int)fechaAnioAntes.DayOfWeek;
            numDiasAgregar = diaSemanaAnio1Ant <= 5 ? (diaSemanaAnioAct - diaSemanaAnio1Ant) : (diaSemanaAnioAct + 7 - diaSemanaAnio1Ant);

            DateTime fechaIniSemanaActualHaceDosAnios = fechaAnioAntes.AddDays(numDiasAgregar); //al año actual (jueves) se le quita un año y termina siendo miércoles por ello se le agrega 1 días más para que se compare el jueves de este año con el jueves del año pasado, caso especial el bisiesto
            DateTime fechaFinSemanaActualHaceDosAnios = fechaIniSemanaActualHaceDosAnios.AddDays(difDias);

            //1 de enero de año actual
            DateTime fecha01EneroAnio2Anterior = new DateTime(anio2Anterior, 1, 1);
            DateTime fechaFinalAnio2Anterior = objFecha.Anio1Ant.Fecha_Final.AddYears(-1);
            DateTime fecha31DiciembreAnio2Anterior = new DateTime(anio2Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnio2AntSem01 = EPDate.f_fechainiciosemana(anio2Anterior, 1);

            //pasamos valores al objeto FechasPR5
            objFecha.Anio2Ant.RangoAct_FechaIni = fechaIniSemanaActualHaceDosAnios;//CUANDO fechaActualFinal, fechaActualInicial PERTENECEN  A LA MISMA SEMANA
            objFecha.Anio2Ant.RangoAct_FechaFin = objFecha.Anio2Ant.RangoAct_FechaIni.AddDays(6);

            objFecha.Anio2Ant.Fecha_01Enero = fecha01EneroAnio2Anterior;
            objFecha.Anio2Ant.Fecha_Final = fechaFinalAnio2Anterior;
            objFecha.Anio2Ant.Fecha_31Diciembre = fecha31DiciembreAnio2Anterior;

            objFecha.Anio2Ant.Sem01_FechaIni = fechaAnio2AntSem01;
            objFecha.Anio2Ant.SemAct_FechaIni = objFecha.Anio2Ant.RangoAct_FechaFin.DayOfWeek == DayOfWeek.Friday ? EPDate.f_fechainiciosemana(objFecha.Anio2Ant.RangoAct_FechaFin) : EPDate.f_fechainiciosemana(objFecha.Anio2Ant.RangoAct_FechaFin.AddDays(-7));
            objFecha.Anio2Ant.SemAct_FechaFin = objFecha.Anio2Ant.SemAct_FechaIni.AddDays(6);

            objFecha.Anio2Ant.RangoAct_Num = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanalSinAnio(objFecha.TipoReporte, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            objFecha.Anio2Ant.RangoAct_NumYAnio = UtilAnexoAPR5.GetNumeroSemanaPeriodoSemanal(objFecha.TipoReporte, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            objFecha.Anio2Ant.NumAnio = anio2Anterior;

            #endregion

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////            
            #region 3 AÑOS ATRAS
            int anio3Anterior = anio2Anterior - 1;

            //fechas esta semana
            fechaAnioAntes = fechaFinSemanaActualHaceDosAnios.AddYears(-1);
            diaSemanaAnioAct = (int)fechaFinSemanaActualHaceDosAnios.DayOfWeek;//domingo es 0, miercoles 4, sabado es 6
            diaSemanaAnio1Ant = (int)fechaAnioAntes.DayOfWeek;
            numDiasAgregar = diaSemanaAnio1Ant <= 5 ? (diaSemanaAnioAct - diaSemanaAnio1Ant) : (diaSemanaAnioAct + 7 - diaSemanaAnio1Ant);

            DateTime fechaIniSemanaActualHaceTresAnios = fechaAnioAntes.AddDays(numDiasAgregar); //al año actual (jueves) se le quita un año y termina siendo miércoles por ello se le agrega 1 días más para que se compare el jueves de este año con el jueves del año pasado, caso especial el bisiesto

            //1 de enero de año actual
            DateTime fecha01EneroAnio3Anterior = new DateTime(anio3Anterior, 1, 1);
            DateTime fechaFinalAnio3Anterior = objFecha.Anio2Ant.Fecha_Final.AddYears(-1);
            DateTime fecha31DiciembreAnio3Anterior = new DateTime(anio3Anterior, 12, 31);

            //primer día de la primera semana del año actual
            DateTime fechaAnio3AntSem01 = EPDate.f_fechainiciosemana(anio3Anterior, 1);

            //pasamos valores al objeto FechasPR5
            objFecha.Anio3Ant.RangoAct_FechaIni = fechaIniSemanaActualHaceTresAnios; //CUANDO fechaActualFinal, fechaActualInicial PERTENECEN  A LA MISMA SEMANA
            objFecha.Anio3Ant.RangoAct_FechaFin = objFecha.Anio3Ant.RangoAct_FechaIni.AddDays(6);

            objFecha.Anio3Ant.Fecha_01Enero = fecha01EneroAnio3Anterior;
            objFecha.Anio3Ant.Fecha_Final = fechaFinalAnio3Anterior;
            objFecha.Anio3Ant.Fecha_31Diciembre = fecha31DiciembreAnio3Anterior;

            objFecha.Anio3Ant.Sem01_FechaIni = fechaAnio3AntSem01;
            objFecha.Anio3Ant.SemAct_FechaIni = objFecha.Anio3Ant.RangoAct_FechaIni.DayOfWeek == DayOfWeek.Friday ? EPDate.f_fechainiciosemana(objFecha.Anio3Ant.RangoAct_FechaIni) : EPDate.f_fechainiciosemana(objFecha.Anio3Ant.RangoAct_FechaIni.AddDays(-7));
            objFecha.Anio3Ant.SemAct_FechaFin = objFecha.Anio3Ant.SemAct_FechaIni.AddDays(6);

            objFecha.Anio3Ant.NumAnio = anio3Anterior;

            #endregion

            objFecha.ListaFechaBisiesto = UtilAnexoAPR5.ListarFechasBisiestoEnRango(objFecha.Anio3Ant.RangoAct_FechaIni.AddYears(-2), objFecha.AnioAct.RangoAct_FechaFin.AddYears(2));

            return objFecha;
        }

        #region Resumen e Interconexion

        /// <summary>
        /// GenerarHojaResumenProduccionGeneracion
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="fechaMD"></param>
        /// <param name="listaDetalleProduccion"></param>
        /// <param name="incluirMD"></param>
        public static void GenerarHojaResumenProduccionGeneracion(ExcelPackage xlPackage, string nameWS, DateTime fechaIni, DateTime fechaFin, DateTime fechaMD,
                                        List<MeDespachoProdgenDTO> listaDetalleProduccion, bool incluirMD)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            int colIniTabla = 1;
            int rowIniTabla = 6;

            string font = "Calibri";
            string colorCeldaFijo = "#0070C0";
            string colorTextoFijo = "#ffffff";

            string colorCeldaCuerpo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";

            string colorLinea = "#000000";

            #region  Filtros y Cabecera

            int colEmpresa = colIniTabla;
            int colCentral = colEmpresa + 1;
            int colGrupo = colCentral + 1;
            int colTipo = colGrupo + 1;
            int colEnergiaH = colTipo + 1;
            int colEnergiaT = colEnergiaH + 1;
            int colEnergiaE = colEnergiaT + 1;
            int colEnergiaS = colEnergiaE + 1;
            int colMD = colEnergiaS + 1;

            int colUltimo = incluirMD ? colMD : colEnergiaS;

            int rowTitulo = 1;
            ws.Cells[rowTitulo, colCentral].Value = "Tabla Resumen";
            int rowFecha = rowTitulo + 2;
            ws.Cells[rowFecha, colCentral].Value = "INICIO";
            ws.Cells[rowFecha, colGrupo].Value = "FIN";
            ws.Cells[rowFecha + 1, colEmpresa].Value = "Rango de consulta";
            ws.Cells[rowFecha + 1, colCentral].Value = fechaIni.ToString(ConstantesAppServicio.FormatoFecha);
            ws.Cells[rowFecha + 1, colGrupo].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);

            if (incluirMD)
            {
                ws.Cells[rowFecha + 1, colEnergiaH].Value = "Máxima Demanda";
                ws.Cells[rowFecha + 1, colEnergiaT].Value = fechaMD.ToString(ConstantesAppServicio.FormatoFechaFull);
            }

            UtilExcel.SetFormatoCelda(ws, rowTitulo, colCentral, rowTitulo, colCentral, "Centro", "Izquierda", "#000000", "#FFFFFF", font, 18, true, true);
            UtilExcel.SetFormatoCelda(ws, rowFecha, colCentral, rowFecha, colGrupo, "Centro", "Centro", "#000000", "#FFFFFF", font, 12, true, true);

            int rowEmpresa = rowIniTabla + 1;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colGrupo].Value = "GRUPO DESPACHO";
            ws.Cells[rowEmpresa, colTipo].Value = "TIPO COMBUSTIBLE";
            ws.Cells[rowEmpresa, colEnergiaH].Value = "E. Hidráulica \n MWh";
            ws.Cells[rowEmpresa, colEnergiaT].Value = "E. Térmica \n MWh";
            ws.Cells[rowEmpresa, colEnergiaE].Value = "E. Eolica \n MWh";
            ws.Cells[rowEmpresa, colEnergiaS].Value = "E. Solar \n MWh";
            if (incluirMD) ws.Cells[rowEmpresa, colMD].Value = "MW";

            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colUltimo, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colEmpresa, rowEmpresa, colUltimo, colorLinea, true);

            //ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 3;
            ws.Column(colEmpresa).Width = 40;
            ws.Column(colCentral).Width = 30;
            ws.Column(colGrupo).Width = 40;
            ws.Column(colTipo).Width = 40;
            ws.Column(colEnergiaH).Width = 20;
            ws.Column(colEnergiaT).Width = 20;
            ws.Column(colEnergiaE).Width = 20;
            ws.Column(colEnergiaS).Width = 20;
            ws.Column(colMD).Width = 20;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa;

            for (int i = 0; i < listaDetalleProduccion.Count; i++)
            {
                var reg = listaDetalleProduccion[i];

                rowData++;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                ws.Cells[rowData, colCentral].Value = reg.Central;
                ws.Cells[rowData, colGrupo].Value = reg.Gruponomb;
                ws.Cells[rowData, colTipo].Value = reg.Fenergnomb;
                ws.Cells[rowData, colEnergiaH].Value = reg.EnergiaH;
                ws.Cells[rowData, colEnergiaT].Value = reg.EnergiaT;
                ws.Cells[rowData, colEnergiaE].Value = reg.EnergiaE;
                ws.Cells[rowData, colEnergiaS].Value = reg.EnergiaS;
                if (incluirMD) ws.Cells[rowData, colMD].Value = reg.PotenciaMD;

                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colUltimo, "Centro", "Izquierda", colorTextoCuerpo, colorCeldaCuerpo, font, 12, false);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowData, colEmpresa, rowData, colUltimo, "Centro");

                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colEmpresa, rowData, colUltimo, colorLinea, true);
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colUltimo].AutoFilter = true;

            ws.View.ZoomScale = 90;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        /// <summary>
        /// GenerarHojaDetalleInterconexion
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="fechaMD"></param>
        /// <param name="listaDetalleInterconexion"></param>
        /// <param name="incluirMD"></param>
        public static void GenerarHojaDetalleInterconexion(ExcelPackage xlPackage, string nameWS, DateTime fechaIni, DateTime fechaFin, DateTime fechaMD,
                                                List<InfSGIFilaResumenInterc> listaDetalleInterconexion, bool incluirMD)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            int colIniTabla = 1;
            int rowIniTabla = 6;

            string font = "Calibri";
            string colorCeldaFijo = "#0070C0";
            string colorTextoFijo = "#ffffff";

            string colorCeldaCuerpo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";

            string colorLinea = "#000000";

            #region  Filtros y Cabecera

            int colFecha = colIniTabla;
            int colPto1 = colFecha + 1;
            int colPto2 = colPto1 + 1;
            int colPto3 = colPto2 + 1;
            int colPto4 = colPto3 + 1;

            int rowTitulo = 1;
            ws.Cells[rowTitulo, colPto1].Value = "Consulta Interconexión Perú-Ecuador";
            int rowFecha = rowTitulo + 2;
            ws.Cells[rowFecha, colPto1].Value = "INICIO";
            ws.Cells[rowFecha, colPto2].Value = "FIN";
            ws.Cells[rowFecha + 1, colFecha].Value = "Rango de consulta";
            ws.Cells[rowFecha + 1, colPto1].Value = fechaIni.ToString(ConstantesAppServicio.FormatoFecha);
            ws.Cells[rowFecha + 1, colPto2].Value = fechaFin.ToString(ConstantesAppServicio.FormatoFecha);

            if (incluirMD)
            {
                ws.Cells[rowFecha, colPto4].Value = "Máxima Demanda";
                ws.Cells[rowFecha + 1, colPto4].Value = fechaMD.ToString(ConstantesAppServicio.FormatoFechaFull);
            }

            UtilExcel.SetFormatoCelda(ws, rowTitulo, colPto1, rowTitulo, colPto1, "Centro", "Izquierda", "#000000", "#FFFFFF", font, 18, true);
            UtilExcel.SetFormatoCelda(ws, rowFecha, colPto1, rowFecha, colPto2, "Centro", "Centro", "#000000", "#FFFFFF", font, 12, true, true);

            int rowExp = rowIniTabla + 1;
            int rowLinea = rowExp + 1;
            int rowMedida = rowLinea + 1;
            ws.Cells[rowExp, colFecha].Value = "FECHA HORA";

            ws.Cells[rowExp, colPto1].Value = "EXPORTACIÓN";
            ws.Cells[rowExp, colPto2].Value = "IMPORTACIÓN";
            ws.Cells[rowExp, colPto3].Value = "EXPORTACIÓN";
            ws.Cells[rowExp, colPto4].Value = "IMPORTACIÓN";

            ws.Cells[rowLinea, colPto1].Value = "L-2280\n(ZORRITOS)";
            ws.Cells[rowLinea, colPto2].Value = "L-2280\n(ZORRITOS)";
            ws.Cells[rowLinea, colPto3].Value = "L-2280\n(ZORRITOS)";
            ws.Cells[rowLinea, colPto4].Value = "L-2280\n(ZORRITOS)";

            ws.Cells[rowMedida, colPto1].Value = "MWh";
            ws.Cells[rowMedida, colPto2].Value = "MWh";
            ws.Cells[rowMedida, colPto3].Value = "MVarh";
            ws.Cells[rowMedida, colPto4].Value = "MVarh";

            UtilExcel.CeldasExcelAgrupar(ws, rowExp, colFecha, rowMedida, colFecha);
            UtilExcel.SetFormatoCelda(ws, rowExp, colFecha, rowMedida, colPto4, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 12, true, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowExp, colFecha, rowMedida, colPto4, colorLinea, true, true);

            //ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 3;
            ws.Column(colFecha).Width = 40;
            ws.Column(colPto1).Width = 25;
            ws.Column(colPto2).Width = 25;
            ws.Column(colPto3).Width = 25;
            ws.Column(colPto4).Width = 25;

            #endregion

            #region Cuerpo

            int rowData = rowMedida;

            for (int i = 0; i < listaDetalleInterconexion.Count; i++)
            {
                var reg = listaDetalleInterconexion[i];

                rowData++;

                ws.Cells[rowData, colFecha].Value = reg.FechaHoraDesc;
                ws.Cells[rowData, colPto1].Value = reg.EnergiaExp;
                ws.Cells[rowData, colPto2].Value = reg.EnergiaImp;
                ws.Cells[rowData, colPto3].Value = reg.ReactivaExp;
                ws.Cells[rowData, colPto4].Value = reg.ReactivaImp;

                string colorFila = incluirMD && reg.TieneMD ? "#93c4ff" : colorCeldaCuerpo;
                UtilExcel.SetFormatoCelda(ws, rowData, colFecha, rowData, colPto4, "Centro", "Izquierda", colorTextoCuerpo, colorFila, font, 12, false);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, rowData, colFecha, rowData, colPto4, "Centro");

                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colFecha, rowData, colPto4, colorLinea, true);
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            ws.View.ZoomScale = 90;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        #endregion

        #region Log

        /// <summary>
        /// ObtenerDataTablaLog
        /// </summary>
        /// <param name="texto1"></param>
        /// <param name="texto2"></param>
        /// <param name="texto3"></param>
        /// <param name="texto4"></param>
        /// <param name="listaKey"></param>
        /// <param name="listaTotal"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaLog(string texto1, string texto2, string texto3, string texto4,
                                                List<GenericoDTO> listaKey, List<ResultadoTotalGeneracion> listaTotal)
        {
            TablaReporte tabla = new TablaReporte();
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[1, 4];

            matrizCabecera[0, 0] = texto1;
            matrizCabecera[0, 1] = texto2;
            matrizCabecera[0, 2] = texto3;
            matrizCabecera[0, 3] = texto4;

            cabRepo.CabeceraData = matrizCabecera;
            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            //Por tipo de Generación
            foreach (var regFila in listaKey)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();

                List<ResultadoTotalGeneracion> listaXFiltro = listaTotal.Where(x => x.Codigo == regFila.Entero1).ToList();

                ResultadoTotalGeneracion regAA = listaXFiltro.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAA_SemAct);
                ResultadoTotalGeneracion regSem = listaXFiltro.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorSem_SemAct);
                ResultadoTotalGeneracion regDif = listaXFiltro.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Resta);

                datos.Add(regAA.Meditotal);
                datos.Add(regSem.Meditotal);
                datos.Add(regDif.Meditotal);

                registro.EsFilaResumen = regFila.Entero1 == 1000;
                registro.Nombre = regFila.String1;
                registro.ListaData = datos;

                registros.Add(registro);
            }

            #endregion

            tabla.ListaRegistros = registros;

            return tabla;
        }

        /// <summary>
        /// GenerarTablaExcelLog
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIniTabla"></param>
        /// <param name="tablaData"></param>
        public static void GenerarTablaExcelLog(ExcelWorksheet ws, int filaIniTabla, TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int filaIniCab = filaIniTabla;
            int coluIniData = 4;

            #region cabecera

            ws.Cells[filaIniCab, coluIniData + 0].Value = dataCab[0, 0];
            ws.Cells[filaIniCab, coluIniData + 1].Value = dataCab[0, 1];
            ws.Cells[filaIniCab, coluIniData + 2].Value = dataCab[0, 2];
            ws.Cells[filaIniCab, coluIniData + 3].Value = dataCab[0, 3];

            UtilExcel.SetFormatoCelda(ws, filaIniCab, coluIniData, filaIniCab, coluIniData + 3, "Centro", "Centro", "#FFFFFF", ConstantesPR5ReportesServicio.ColorInfSGI, "Arial", 10, true, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, filaIniCab, coluIniData, filaIniCab, coluIniData + 3, "#000000", true, true);

            //ws.Row(filaIniCab).Height = 35;
            ws.Column(coluIniData + 0).Width = 50;
            ws.Column(coluIniData + 1).Width = 20;
            ws.Column(coluIniData + 2).Width = 20;
            ws.Column(coluIniData + 3).Width = 20;

            #endregion

            #region cuerpo

            int filaX = filaIniCab + 1;
            foreach (var reg in registros)
            {
                int colX = 0;

                ws.Cells[filaX, coluIniData + colX].Value = reg.Nombre;
                colX++;

                foreach (decimal? numValor in reg.ListaData)
                {
                    ws.Cells[filaX, coluIniData + colX].Value = numValor;
                    ws.Cells[filaX, coluIniData + colX].Style.Numberformat.Format = ConstantesPR5ReportesServicio.FormatoNumero2Digito;

                    colX++;
                }

                UtilExcel.SetFormatoCelda(ws, filaX, coluIniData, filaX, coluIniData, "Centro", "Izquierda", "#000000", "#FFFFFF", "Arial", 10, reg.EsFilaResumen, true);
                UtilExcel.SetFormatoCelda(ws, filaX, coluIniData + 1, filaX, coluIniData + 3, "Centro", "Derecha", "#000000", "#FFFFFF", "Arial", 10, reg.EsFilaResumen, true);
                UtilExcel.CeldasExcelColorFondo(ws, filaX, coluIniData + 3, filaX, coluIniData + 3, "#FFC000");
                UtilExcel.BorderCeldasLineaDelgada(ws, filaX, coluIniData, filaX, coluIniData + 3, "#000000", true, true);

                filaX++;
            }

            #endregion

        }

        #endregion

        #region Resumenes

        #region Portada

        /// <summary>
        /// Genera el texto de la portada del reporte
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="version"></param>
        public static void GenerarExcelTextoPortadaReporte(ExcelWorksheet ws, FechasPR5 objFecha, int version)
        {
            DateTime Fecha = objFecha.FechaInicial;

            int filaIniEncabezado = 7;
            int coluIni = 2;

            //Encabezado
            ws.Cells[filaIniEncabezado, coluIni].Value = string.Format("INFSGI-MES-{0}-{1}", string.Format("{0:D2}", Fecha.Month), Fecha.Year);
            ws.Cells[filaIniEncabezado + 1, coluIni].Value = string.Format("Versión:{0}", version);

            //Fecha
            ws.Cells[filaIniEncabezado + 20, coluIni + 7].Value = string.Format("{0} {1}", EPDate.f_NombreMes(Fecha.Month), Fecha.Year);
            ws.Cells[filaIniEncabezado + 36, coluIni + 7].Value = string.Format("Lima, {0} de {1} del {2}", string.Format("{0:D2}", DateTime.Now.Day), EPDate.f_NombreMes(DateTime.Now.Month), DateTime.Now.Year);
        }

        #region Portada

        /// <summary>
        /// Genera el texto de la portada del reporte anual
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="version"></param>
        public static void GenerarExcelTextoPortadaReporteAnual(ExcelWorksheet ws, FechasPR5 objFecha, int version)
        {
            DateTime Fecha = objFecha.FechaInicial;

            int filaIniEncabezado = 14;
            int coluIni = 11;

            //Encabezado
            ws.Cells[filaIniEncabezado, coluIni].Value = string.Format("INFSGI-ANUAL{0}", Fecha.Year);
            ws.Cells[filaIniEncabezado + 1, coluIni].Value = string.Format("Versión:{0}", version);

            //Fecha
            ws.Cells[filaIniEncabezado + 25, coluIni].Value = string.Format("{0}", Fecha.Year);
            ws.Cells[filaIniEncabezado + 54, coluIni - 1].Value = string.Format("Lima, {0} de {1} del {2}", string.Format("{0:D2}", DateTime.Now.Day), EPDate.f_NombreMes(DateTime.Now.Month), DateTime.Now.Year);
        }

        #endregion

        #endregion

        #region Resumen Relevante

        /// <summary>
        /// Genera los graficos en el reporte Resumen Relevante
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="orden"></param>
        /// <param name="graficoPie"></param>
        /// <param name="filaIniGrafico"></param>
        public static void GenerarCharExcelGraficoResumenRelevante(ExcelWorksheet ws, FechasPR5 objFecha, int orden, GraficoWeb graficoPie, int filaIniGrafico)
        {
            GraficoWeb graficoWeb = graficoPie;

            int filaIniDataG = 30;
            int coluIniDataG = 0;
            int filaFinDataG;
            int filaFinGrafico = filaIniGrafico + 21;

            if (orden == 1) coluIniDataG = 27;
            if (orden == 2) coluIniDataG = 30;

            string nombreGrafico = "";
            int coluIniG = 0;
            switch (orden)
            {
                case 1:
                    nombreGrafico = "grafico1";
                    coluIniG = 1;
                    break;
                case 2:
                    nombreGrafico = "grafico2";
                    coluIniG = 11;
                    break;
            }
            var miChart = ws.Drawings[nombreGrafico] as ExcelChart;

            if (graficoWeb != null)
            {



                //crear tabla a usar en grafico
                int filaX = 0;
                ws.Cells[filaIniDataG, coluIniDataG].Value = graficoWeb.TitleText;
                foreach (var serie in graficoWeb.Series)
                {
                    ws.Cells[filaIniDataG + 1 + filaX, coluIniDataG].Value = serie.Name;
                    ws.Cells[filaIniDataG + 1 + filaX, coluIniDataG + 1].Value = serie.Acumulado;
                    filaX++;
                }
                filaFinDataG = filaIniDataG + filaX;

                //conexion tabla creada con el grafico                
                miChart.SetPosition(filaIniGrafico, 0, coluIniG, 0);
                miChart.Title.Text = graficoWeb.TitleText;

                ws.Cells[filaFinGrafico + 1, coluIniG + 3].Value = graficoWeb.Subtitle;
                UtilExcel.CeldasExcelAgrupar(ws, filaFinGrafico + 1, coluIniG + 3, filaFinGrafico + 1, coluIniG + 5);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaFinGrafico + 1, coluIniG + 3, filaFinGrafico + 1, coluIniG + 5, "Centro");
                UtilExcel.CeldasExcelEnNegrita(ws, filaFinGrafico + 1, coluIniG + 3, filaFinGrafico + 1, coluIniG + 5);

                miChart.Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1, filaFinDataG, coluIniDataG + 1);
                miChart.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, filaFinDataG, coluIniDataG);

                UtilExcel.BorrarCeldasExcel(ws, filaFinDataG + 1, coluIniDataG, filaFinDataG + 20, coluIniDataG + 1);


            }
            else
            {
                miChart.SetSize(0, 0);
                UtilExcel.BorrarCeldasExcel(ws, filaIniDataG, coluIniDataG, filaIniDataG + 20, coluIniDataG + 1);
            }
        }

        /// <summary>
        /// Genera el texto del reporte Resumen Relevante
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="objTexto"></param>
        /// <param name="filaFinTexto"></param>
        public static void GenerarExcelTextoResumenRelevanteSemanal(ExcelWorksheet ws, FechasPR5 objFecha, ReporteResumenRelevante objTexto, out int filaFinTexto)
        {
            filaFinTexto = 7;

            if (objTexto != null)
            {
                string tituloReporte = objTexto.TituloReporte;
                string semanaReporte = objTexto.ListaFechaTituloReporte[0];
                string periodoReporte = objTexto.ListaFechaTituloReporte[1];
                string subtituloReporte = objTexto.Subtitulo;
                string subtituloReporte2 = objTexto.Subtitulo2;
                string tituloParrafo1 = objTexto.TituloParrafo1;
                string parrafo1Reporte = objTexto.Parrafo1;
                string parrafoItem1Reporte = objTexto.ListaItemParrafo1[0];
                string parrafoItem2Reporte = objTexto.ListaItemParrafo1[1];
                string parrafoItem3Reporte = objTexto.ListaItemParrafo1[2];

                int filaIniTitulo = 5;
                int coluIniTitulo = 3;

                ws.Cells[filaIniTitulo, coluIniTitulo].Value = tituloReporte;
                ws.Cells[filaIniTitulo + 2, coluIniTitulo].Value = semanaReporte;
                ws.Cells[filaIniTitulo + 3, coluIniTitulo].Value = periodoReporte;
                ws.Cells[filaIniTitulo + 6, coluIniTitulo].Value = subtituloReporte;
                ws.Cells[filaIniTitulo + 7, coluIniTitulo].Value = subtituloReporte2;
                ws.Cells[filaIniTitulo + 11, coluIniTitulo].Value = tituloParrafo1;
                ws.Cells[filaIniTitulo + 12, coluIniTitulo].Value = parrafo1Reporte;
                ws.Cells[filaIniTitulo + 14, coluIniTitulo + 1].Value = parrafoItem1Reporte;
                ws.Cells[filaIniTitulo + 16, coluIniTitulo + 1].Value = parrafoItem2Reporte;
                ws.Cells[filaIniTitulo + 18, coluIniTitulo + 1].Value = parrafoItem3Reporte;

                filaFinTexto = 24;
            }
            else
            {
                UtilExcel.BorrarCeldasExcel(ws, 6, 3, 25, 20);
            }
        }

        /// <summary>
        /// Devuelve la vista de la tabla con el resumen temporal
        /// </summary>
        /// <param name="objTexto"></param>
        /// <returns></returns>
        public static string ReporteResumenSemanalHtml(ReporteResumenRelevante objTexto)
        {

            //INFORME EJECUTIVO DE OPERACIÓN 																
            //																
            //SEMANA N° 35-(36) - 2017
            //PERIODO: DEL 26 DE AGOSTO AL 02 DE SETIEMBRE DE 2017																
            //																
            //RESUMEN RELEVANTE
            //
            //Producción de energía durante la semana operativa N° 35-36(2017) 2017 en comparación a la misma semana operativa del año anterior																
            //La energía generada correspondiente al periodo del sábado 26 de agosto al sábado 02 de setiembre de 2017 fue de 1 042,7 GWh, lo que representa una variación de 0,40% con respecto al periodo del 27 de agosto al 03 de setiembre de 2016 (semana 35-(36)); mientras que la producción acumulada hasta el 02 de setiembre de 2017 presentó una variación del orden de 2,28% con respecto al mismo periodo del año anterior.																
            //																
            //-	La máxima demanda del SEIN en el periodo alcanzó los 6 261,65 MW y se presentó a las 19:30 h del lunes 28 de agosto, siendo 1,23 % mayor a la máxima demanda del periodo del año anterior.															
            //																
            //-	Con relación a los recursos totales utilizados en la producción de energía para el periodo en evaluación, la generación hidroeléctrica presentó una participación del 43,78 %, el gas natural  dentro de la matriz energética del SEIN, con una participación de 45,61 %,  biogás y bagazo participaron con 0,20%, solar con 0,49% y eólico con 3,04%, la participación de petróleo residual y diésel fue de 4,47%, y la del carbón 2,41%.															
            //																
            //-	El costo marginal promedio de corto plazo (de acuerdo al DU-049-2008) de este periodo fue  12,19 US$/MWh. El costo total de operación ejecutado fue 10,02 Millones US$. 23,86 % mayor que el correspondiente al periodo de año 2016.															

            string plantillaHtml = @"
                        <!-Titulo-->
                        <h1 style='text-align: center;margin-top: 0px;'>{0}</h1>

                        <div style='    margin-top: 30px;    font-weight: bold;    text-align: center;    margin-bottom: 30px;'>
                        {1}
                        </div>

                        <h2 style='text-align: center; margin-bottom: 60px;'>{2}</h2>

                        <!--Parrafo-->
                        <div>
                        <h3>{3}</h3>
                        </div>

                        <div>
                        {4}
                        </div>
                        <br/>
                        
                        <!--Lista de parrafo1-->
                        <ul>
                            {5}
                        </ul>
            ";

            string strFechaTitulo = string.Join("<br/>", objTexto.ListaFechaTituloReporte);
            string strItemsParrafo = string.Join("</li><li style='padding-bottom: 15px;padding-top: 15px;'>", objTexto.ListaItemParrafo1);
            strItemsParrafo = "<li>" + strItemsParrafo + "</li>";

            StringBuilder strHtml = new StringBuilder();
            strHtml.AppendFormat(plantillaHtml, objTexto.TituloReporte, strFechaTitulo, objTexto.Subtitulo
                , objTexto.TituloParrafo1, objTexto.Parrafo1, strItemsParrafo);

            return strHtml.ToString();
        }

        /// <summary>
        /// GetTextoResumenRelevanteInformeSemanal
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaMDPotGenData"></param>
        /// <param name="listaParticipacionRecursosEnergeticos"></param>
        /// <param name="listaPotGenData"></param>
        /// <param name="listaCMg"></param>
        /// <param name="listaCostoEjec"></param>
        /// <returns></returns>
        public static ReporteResumenRelevante GetTextoResumenRelevanteInformeSemanal(FechasPR5 objFecha
                        , List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<ResultadoTotalGeneracion> listaMDPotGenData
                        , List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticos, List<ResultadoTotalGeneracion> listaPotGenData
                        , List<ResultadoTotalGeneracion> listaCMg, List<ResultadoTotalGeneracion> listaCostoEjec)
        {
            NumberFormatInfo nfi3 = UtilAnexoAPR5.GenerarNumberFormatInfo3();

            string descPeriodo2 = UtilAnexoAPR5.GetDescripcionPeriodoSemanalConNombreDia(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            string energiaSemAct = UtilAnexoAPR5.ImprimirValorTotalYRedondeoHtml(listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).Meditotal, nfi3, 3);
            string varenergiaSemAct = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var).Meditotal, nfi3, 3);
            string descPeriodo3 = UtilAnexoAPR5.GetDescripcionPeriodoSemanalConNombreDia(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            string descFechaFin = objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("00") + " de " + objFecha.AnioAct.RangoAct_FechaFin.ToString("MMMM", new CultureInfo("es-Pe")).ToLower() + " de " + objFecha.AnioAct.RangoAct_FechaFin.Year;
            string varenergiaAnioActAcum = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).Meditotal, nfi3, 3);

            string mdSemAct = UtilAnexoAPR5.ImprimirValorTotalYRedondeoHtml(listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).Meditotal, nfi3, 3);
            var regMD = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            string mdHora = regMD.FechaOnlyHora;
            string mdDia = regMD.FechaHora.ToString("dddd", new CultureInfo("es-PE")) + " " + regMD.FechaHora.Day.ToString("00") + " de " + regMD.FechaHora.ToString("MMMM", new CultureInfo("es-Pe")).ToLower();
            string varmd = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var).Meditotal, nfi3, 3);
            string varmddesccomparacion = varmd.Contains("-") ? "menor" : "mayor";

            string partHidro = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua).Meditotal.GetValueOrDefault(0), nfi3, 3);
            string partGas = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas).Meditotal.GetValueOrDefault(0), nfi3, 3);
            string partFenergBiogasBagazo = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Fenergcodi == ConstantesSiosein2.FenergcodiRelevanteBiogasBagazo).Meditotal.GetValueOrDefault(0), nfi3, 3);
            string partSolar = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiSolar).Meditotal.GetValueOrDefault(0), nfi3, 3);
            string partEolica = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiEolica).Meditotal.GetValueOrDefault(0), nfi3, 3);
            string partFenergDieselResidual = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Fenergcodi == ConstantesSiosein2.FenergcodiRelevanteResidualYDiesel).Meditotal.GetValueOrDefault(0), nfi3, 3);
            string partCarbon = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml(listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiCarbon).Meditotal.GetValueOrDefault(0), nfi3, 3);

            var regCMgSemAct = listaCMg.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            if (regCMgSemAct == null) regCMgSemAct = listaCMg.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct); //si no existe registro debe estar en el año pasado
            string costoMg = UtilAnexoAPR5.ImprimirValorTotalYRedondeoHtml(regCMgSemAct != null ? regCMgSemAct.Meditotal : null, nfi3, 3);

            var regCostoSemAct = listaCostoEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            if (regCostoSemAct == null) regCostoSemAct = listaCostoEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            var regCostoVarSemAct = listaCostoEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);
            if (regCostoSemAct == null) regCostoVarSemAct = listaCostoEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Total_Var);
            string costoOP = UtilAnexoAPR5.ImprimirValorTotalYRedondeoHtml(regCostoSemAct != null ? regCostoSemAct.Meditotal : null, nfi3, 3);
            string varcostoOP = UtilAnexoAPR5.ImprimirVariacionYRedondeoHtml((regCostoVarSemAct != null ? regCostoVarSemAct.Meditotal : null).GetValueOrDefault(0), nfi3, 3);
            string varcostoOPcomparacion = varcostoOP.Contains("-") ? "menor" : "mayor";
            string anioAnterior = objFecha.Anio1Ant.NumAnio.ToString();

            //
            ReporteResumenRelevante obj = new ReporteResumenRelevante();

            obj.TituloReporte = objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal ? "Informe Semanal de la Operación del SEIN" : "Informe Ejecutivo de Operación";

            obj.ListaFechaTituloReporte = new List<string>();
            obj.ListaFechaTituloReporte.Add(string.Format("SEMANA N° {0}", objFecha.AnioAct.RangoAct_NumYAnio));//35-2017
            obj.ListaFechaTituloReporte.Add(string.Format("PERIODO: DEL {0}", objFecha.AnioAct.RangoAct_DiaYMesYAnio));// 26 DE AGOSTO AL 02 DE SETIEMBRE DE 2017

            obj.Subtitulo = "RESUMEN RELEVANTE";

            obj.TituloParrafo1 = string.Format("Producción de energía durante la semana operativa N° {0} en comparación a la misma semana operativa del año anterior", objFecha.AnioAct.RangoAct_NumYAnio);//35-2017

            obj.Parrafo1 = string.Format(@"La energía generada correspondiente al periodo del {0} fue de {1} GWh, lo que representa una variación de {2} con respecto al periodo del {3}; mientras que la producción acumulada hasta el {4} presentó una variación del orden de {5} con respecto al mismo periodo del año anterior."
                , descPeriodo2
                , energiaSemAct //1 042,7 GWh
                , varenergiaSemAct //0,40%
                , descPeriodo3 //27 de agosto al 03 de setiembre de 2016
                , descFechaFin //02 de setiembre de 2017
                , varenergiaAnioActAcum //2,28%
                );

            obj.ListaItemParrafo1 = new List<string>();
            obj.ListaItemParrafo1.Add(string.Format("La máxima demanda del SEIN en el periodo alcanzó los {0} MW y se presentó a las {1} h del {2}, siendo {3} {4} a la máxima demanda del periodo del año anterior."
               , mdSemAct //6 261,65 MW 
                , mdHora //19:30 h
                , mdDia //lunes 28 de agosto
                , varmd //1, 23 %
                , varmddesccomparacion //mayor
                ));

            obj.ListaItemParrafo1.Add(string.Format(@"Con relación a los recursos totales utilizados en la producción de energía para el periodo en evaluación, la generación hidroeléctrica presentó una participación del {0}, el gas natural  dentro de la matriz energética del SEIN, con una participación de {1},  biogás y bagazo participaron con {2}, solar con {3} y eólico con {4}, la participación de petróleo residual y diésel fue de {5}, y la del carbón {6}.            "
                , partHidro  //43,78 %
                , partGas //45,61 %
                , partFenergBiogasBagazo //0,20%
                , partSolar //0,49%
                , partEolica //3,04%
                , partFenergDieselResidual //4,47%
                , partCarbon //2,41%
                ));

            obj.ListaItemParrafo1.Add(string.Format(@"El costo marginal promedio de corto plazo de este periodo fue {0} S/./MWh. El costo total de operación ejecutado fue {1} Millones de Nuevos Soles {2} {3} que el correspondiente al periodo de año {4}."
                , costoMg //12,19
                , costoOP //10,02
                , varcostoOP //23,86 %
                , varcostoOPcomparacion //mayor
                , anioAnterior //2016
            ));
            return obj;
        }

        /// <summary>
        /// Genera los graficos Pie web para el resumen relevante
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaPotGenData"></param>
        /// <param name="listaParticipacionRecursosEnergeticosYRer"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoPieParticipacionRecursosEnergeticosResumenRelevante(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaPotGenData, List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosYRer, int tipoResultadoFecha)
        {
            TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;
            NumberFormatInfo nfi2 = UtilAnexoAPR5.GenerarNumberFormatInfo2();
            NumberFormatInfo nfi3 = UtilAnexoAPR5.GenerarNumberFormatInfo3();

            string titulo = string.Empty;
            string subtitulo = string.Empty;

            switch (tipoResultadoFecha)
            {
                case PR5ConstanteFecha.ValorAnioAct_SemAct:
                    if (objFecha.EsReporteAnual)
                        titulo = string.Format("{0}", objFecha.AnioAct.RangoAct_FechaIni.Year);
                    else if (objFecha.TipoReporte == ConstantesSioSein.ReptipcodiMensual)
                        titulo = string.Format("{0} {1}", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month), objFecha.AnioAct.RangoAct_FechaIni.Year);
                    else
                        titulo = string.Format("SEMANA N° {0}", objFecha.AnioAct.RangoAct_NumYAnio);
                    break;
                case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                    if (objFecha.EsReporteAnual)
                        titulo = string.Format("{0}", objFecha.Anio1Ant.RangoAct_FechaIni.Year);
                    else if (objFecha.TipoReporte == ConstantesSioSein.ReptipcodiMensual)
                        titulo = string.Format("{0} {1}", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month), (objFecha.Anio1Ant.RangoAct_FechaIni.Year));
                    else
                        titulo = string.Format("SEMANA N° {0}", objFecha.Anio1Ant.RangoAct_NumYAnio);
                    break;
            }
            string generacionTotal = UtilAnexoAPR5.ImprimirValorTotalHtml(listaPotGenData.Find(x => x.TipoResultadoFecha == tipoResultadoFecha).Meditotal, nfi3);
            subtitulo = string.Format("Total = {0} GWh", generacionTotal);
            List<ResultadoTotalGeneracion> listaData = listaParticipacionRecursosEnergeticosYRer.Where(x => x.TipoResultadoFecha == tipoResultadoFecha).ToList();

            GraficoWeb grafico = new GraficoWeb();

            grafico.TitleText = titulo;
            grafico.Subtitle = subtitulo;

            List<RegistroSerie> listaSerie = new List<RegistroSerie>();
            foreach (var cat in listaData)
            {
                RegistroSerie regSerie = new RegistroSerie();
                regSerie.Name = textInfo.ToTitleCase(cat.Fenergnomb.ToLower());
                regSerie.Acumulado = cat.Meditotal;
                regSerie.Color = cat.Fenergcolor;

                listaSerie.Add(regSerie);
            }

            grafico.Series = listaSerie;

            return grafico;
        }

        #endregion

        #region Resumen de Producción

        /// <summary>
        /// ResumenProduccionObtenerDataMWhTotal
        /// </summary>
        /// <param name="listaData48"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <param name="fechaIniConsulta"></param>
        /// <param name="fechaFinConsulta"></param>
        /// <param name="tgenercodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="tipoSemanaRelProd"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion ResumenProduccionObtenerDataMWhTotal(List<MeMedicion48DTO> listaData48, int tipoResultadoFecha, DateTime fechaProceso, DateTime fechaIniConsulta, DateTime fechaFinConsulta,
            int tgenercodi, int emprcodi, int grupocodi, int tipoSemanaRelProd = 0)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaProceso;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Meditotal = 0;

            m.Tgenercodi = tgenercodi;
            m.Emprcodi = emprcodi;
            m.Grupocodi = grupocodi;
            m.TipoSemanaRelProd = tipoSemanaRelProd;

            if (listaData48.Count > 0)
            {
                decimal total = 0;
                foreach (var aux in listaData48)
                {
                    total += aux.Meditotal.GetValueOrDefault(0);
                }

                m.Meditotal = total / 2.0m;
            }

            m.FiltroCeldaDato = new FiltroCeldaDato()
            {
                FechaIni = fechaIniConsulta,
                FechaFin = fechaFinConsulta,
            };

            return m;
        }

        /// <summary>
        /// Obtener la maxima demanda y guardarlo en la variable meditotal
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="emprcodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="tipoSemanaRelProd"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GenerarM48ValorMDResumenProdFromListaByFecha(List<MeMedicion48DTO> lista, DateTime fechaMD,
                    int tipoResultadoFecha, int emprcodi, int grupocodi, int tipoSemanaRelProd = 0)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;

            m.Emprcodi = emprcodi;
            m.Grupocodi = grupocodi;
            m.TipoSemanaRelProd = tipoSemanaRelProd;

            int mediaHora = fechaMD.Hour * 2 + fechaMD.Minute / 30;
            if (mediaHora == 0) mediaHora = 48; //las 00:00

            decimal total = 0;
            foreach (var regMD in lista.Where(x => x.Medifecha == fechaMD.Date))
            {
                total += ((decimal?)regMD.GetType().GetProperty(ConstantesAppServicio.CaracterH + mediaHora.ToString()).GetValue(regMD, null)).GetValueOrDefault(0);
            }
            m.Meditotal = total;
            return m;
        }

        #region Servicio

        /// <summary>
        /// ObtenerDataTablaResumenProduccion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaGrupoDespacho"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaTgen"></param>
        /// <param name="listaEnergEjec"></param>
        /// <param name="listaEnergProg"></param>
        /// <param name="listaMDEjec"></param>
        /// <param name="listaTotalTgen"></param>
        /// <param name="listaTotalEnergEjec"></param>
        /// <param name="listaTotalEnergProg"></param>
        /// <param name="listaTotalMDEjec"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaResumenProduccion(FechasPR5 objFecha, List<SiEmpresaDTO> listaEmpresa, List<PrGrupoDTO> listaGrupoDespacho, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                List<ResultadoTotalGeneracion> listaTgen, List<ResultadoTotalGeneracion> listaEnergEjec, List<ResultadoTotalGeneracion> listaEnergProg,
                List<ResultadoTotalGeneracion> listaMDEjec,
                List<ResultadoTotalGeneracion> listaTotalTgen, List<ResultadoTotalGeneracion> listaTotalEnergEjec, List<ResultadoTotalGeneracion> listaTotalEnergProg,
                List<ResultadoTotalGeneracion> listaTotalMDEjec)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[4, 12];

            var regMDAct = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regMDAnt = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            matrizCabecera[0, 0] = "EMPRESAS";
            matrizCabecera[0, 1] = "CENTRALES";
            matrizCabecera[0, 2] = string.Format("ENERGÍA PRODUCIDA SEMANA N° {0}", regMDAct.SemanaFechaDesc);
            matrizCabecera[0, 6] = "ENERGÍA \nPROGRAMADA";
            matrizCabecera[0, 7] = "DESV.";
            matrizCabecera[0, 8] = "ENERGÍA \nACUMULADA (***)";
            matrizCabecera[0, 9] = "MÁXIMA DEMANDA (MW)";

            matrizCabecera[1, 2] = "GENERACIÓN";
            matrizCabecera[1, 5] = "TOTAL";
            matrizCabecera[1, 6] = "TOTAL";
            matrizCabecera[1, 7] = "EJEC / \nPROG";
            matrizCabecera[1, 8] = "TOTAL";
            matrizCabecera[1, 9] = regMDAct.Anio.ToString();
            matrizCabecera[1, 10] = regMDAnt.Anio.ToString();
            matrizCabecera[1, 11] = string.Format("{0} / {1}", regMDAct.Anio, regMDAnt.Anio);

            matrizCabecera[2, 2] = "HIDROELÉCTRICA";
            matrizCabecera[2, 3] = "TERMOELÉCTRICA";
            matrizCabecera[2, 4] = "RER(***)";
            matrizCabecera[2, 9] = regMDAct.FechaOnlyDia;
            matrizCabecera[2, 10] = regMDAnt.FechaOnlyDia;

            matrizCabecera[3, 2] = "MWh";
            matrizCabecera[3, 3] = "MWh";
            matrizCabecera[3, 4] = "MWh";
            matrizCabecera[3, 5] = "MWh";
            matrizCabecera[3, 6] = "MWh";
            matrizCabecera[3, 7] = "%";
            matrizCabecera[3, 8] = "MWh";
            matrizCabecera[3, 9] = string.Format("HORA: {0}", regMDAct.FechaOnlyHora);
            matrizCabecera[3, 10] = string.Format("HORA: {0}", regMDAnt.FechaOnlyHora);
            matrizCabecera[3, 11] = "%";

            cabRepo.CabeceraData = matrizCabecera;
            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            var listaFila = new List<PrGrupoDTO>();
            foreach (var regEmp in listaEmpresa)
            {
                var listaGrXEmp = listaGrupoDespacho.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                foreach (var regGr in listaGrXEmp)
                {
                    listaFila.Add(new PrGrupoDTO() { Emprcodi = 0, Grupocodi = regGr.Grupocodi, Emprnomb = regEmp.Emprnomb, Gruponomb = regGr.Gruponomb });
                }
                listaFila.Add(new PrGrupoDTO() { Emprcodi = regEmp.Emprcodi, Grupocodi = 0, Emprnomb = string.Format("{0} Total", regEmp.Emprnomb), Gruponomb = "" });
            }

            //Por tipo de Generación
            foreach (var regFila in listaFila)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();

                var listaXTgen = listaTgen.Where(x => x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi).ToList();

                ResultadoTotalGeneracion regTgenHidro = listaXTgen.Find(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro);
                ResultadoTotalGeneracion regTgenTermo = listaXTgen.Find(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo);
                ResultadoTotalGeneracion regTgenRER = listaXTgen.Find(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiRER);

                ResultadoTotalGeneracion regEnergEjecAnio0 = listaEnergEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi);
                ResultadoTotalGeneracion regEnergProgAnio0 = listaEnergProg.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi);
                ResultadoTotalGeneracion regEnergVarAnio0 = listaEnergEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi);
                ResultadoTotalGeneracion regEnergAcumAnio0 = listaEnergEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum && x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi);

                ResultadoTotalGeneracion regMDAnio0 = listaMDEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi);
                ResultadoTotalGeneracion regMDAnio1 = listaMDEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct && x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi);
                ResultadoTotalGeneracion regMDVarAnio0 = listaMDEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi);

                datos.Add(regTgenHidro.Meditotal);
                datos.Add(regTgenTermo.Meditotal);
                datos.Add(regTgenRER.Meditotal);

                datos.Add(regEnergEjecAnio0.Meditotal);
                datos.Add(regEnergProgAnio0.Meditotal);
                datos.Add(regEnergVarAnio0.Meditotal);
                datos.Add(regEnergAcumAnio0.Meditotal);

                datos.Add(regMDAnio0.Meditotal);
                datos.Add(regMDAnio1.Meditotal);
                datos.Add(regMDVarAnio0.Meditotal);

                registro.Nombre = regFila.Emprnomb;
                registro.Nombre2 = regFila.Gruponomb;
                registro.ListaData = datos;

                registros.Add(registro);
            }

            //Tipo TOTAL con / sin interconexion
            var listaTotal = new[] {
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE, Nombre = string.Format("TOTAL SEMANA N° {0}-{1}", objFecha.AnioAct.RangoAct_Num, objFecha.AnioAct.NumAnio) },
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE, Nombre = string.Format("TOTAL SEMANA N° {0}-{1} CON TIE", objFecha.AnioAct.RangoAct_Num, objFecha.AnioAct.NumAnio) }
                                }.ToList();
            foreach (var regTotal in listaTotal)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();

                var listaXTgen = listaTotalTgen.Where(x => x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd).ToList();

                ResultadoTotalGeneracion regTgenHidro = listaXTgen.Find(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro);
                ResultadoTotalGeneracion regTgenTermo = listaXTgen.Find(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo);
                ResultadoTotalGeneracion regTgenRER = listaXTgen.Find(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiRER);

                ResultadoTotalGeneracion regEnergEjecAnio0 = listaTotalEnergEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd);
                ResultadoTotalGeneracion regEnergProgAnio0 = listaTotalEnergProg.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd);
                ResultadoTotalGeneracion regEnergVarAnio0 = listaTotalEnergEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd);
                ResultadoTotalGeneracion regEnergAcumAnio0 = listaTotalEnergEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum && x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd);

                ResultadoTotalGeneracion regMDAnio0 = listaTotalMDEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd);
                ResultadoTotalGeneracion regMDAnio1 = listaTotalMDEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct && x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd);
                ResultadoTotalGeneracion regMDVarAnio0 = listaTotalMDEjec.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd);

                datos.Add(regTgenHidro.Meditotal);
                datos.Add(regTgenTermo.Meditotal);
                datos.Add(regTgenRER.Meditotal);

                datos.Add(regEnergEjecAnio0.Meditotal);
                datos.Add(regEnergProgAnio0.Meditotal);
                datos.Add(regEnergVarAnio0.Meditotal);
                datos.Add(regEnergAcumAnio0.Meditotal);

                datos.Add(regMDAnio0.Meditotal);
                datos.Add(regMDAnio1.Meditotal);
                datos.Add(regMDVarAnio0.Meditotal);

                registro.EsFilaResumen = true;
                registro.Nombre = regTotal.Nombre;
                registro.ListaData = datos;

                registros.Add(registro);
            }

            #endregion

            tabla.ListaRegistros = registros;

            return tabla;
        }

        /// <summary>
        /// ObtenerDataTablaResumenXTgenProduccion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaTgen"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaResumenXTgenProduccion(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                List<ResultadoTotalGeneracion> listaTgen)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[2, 5];

            var regMDAct = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regMDAnt = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            matrizCabecera[0, 0] = "GENERACIÓN";
            matrizCabecera[0, 1] = string.Format("SEMANA N° {0}", regMDAct.SemanaFechaDesc);
            matrizCabecera[0, 2] = string.Format("SEMANA N° {0}", regMDAnt.SemanaFechaDesc);
            matrizCabecera[0, 3] = "VARIACIÓN";

            matrizCabecera[1, 3] = "ENERGÍA";
            matrizCabecera[1, 4] = "%";

            cabRepo.CabeceraData = matrizCabecera;
            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            var listaFila = new[] {
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiHidro, Nombre = "GENERACIÓN HIDROELÉCTRICAS"},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiTermo, Nombre = "GENERACIÓN TERMOELÉCTRICAS"},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiRER, Nombre = "GENERACIÓN RENOVABLES"},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiTotal, Nombre = "TOTAL"},
                                }.ToList();
            //Por tipo de Generación
            foreach (var regFila in listaFila)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();

                var listaXTgen = listaTgen.Where(x => x.TipoSemanaRelProd == regFila.TipoSemanaRelProd).ToList();

                ResultadoTotalGeneracion regTotalAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regTotalAnio1 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regDifEnerg = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Resta);
                ResultadoTotalGeneracion regTotalVarAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                datos.Add(regTotalAnio0.Meditotal);
                datos.Add(regTotalAnio1.Meditotal);
                datos.Add(regDifEnerg.Meditotal);
                datos.Add(regTotalVarAnio0.Meditotal);

                registro.Nombre = regFila.Nombre;
                registro.ListaData = datos;

                registros.Add(registro);
            }

            #endregion

            tabla.ListaRegistros = registros;

            return tabla;
        }

        /// <summary>
        /// ObtenerDataTablaResumenXTIEProduccion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaTgen"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaResumenXTIEProduccion(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                List<ResultadoTotalGeneracion> listaTgen)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[2, 5];

            var regMDAct = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regMDAnt = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            matrizCabecera[0, 0] = "";
            matrizCabecera[0, 1] = string.Format("SEMANA N° {0}", regMDAct.SemanaFechaDesc);
            matrizCabecera[0, 2] = string.Format("SEMANA N° {0}", regMDAnt.SemanaFechaDesc);
            matrizCabecera[0, 3] = "VARIACIÓN";

            matrizCabecera[1, 3] = "ENERGÍA";
            matrizCabecera[1, 4] = "%";

            cabRepo.CabeceraData = matrizCabecera;
            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            var listaFila = new[] {
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp, Nombre = "IMPORTACIÓN" },
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp, Nombre = "EXPORTACIÓN" }
                                }.ToList();
            //Por tipo de Generación
            foreach (var regFila in listaFila)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();

                var listaXTgen = listaTgen.Where(x => x.TipoSemanaRelProd == regFila.TipoSemanaRelProd).ToList();

                ResultadoTotalGeneracion regTotalAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regTotalAnio1 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regDifEnerg = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Resta);
                ResultadoTotalGeneracion regTotalVarAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                datos.Add(regTotalAnio0.Meditotal);
                datos.Add(regTotalAnio1.Meditotal);
                datos.Add(regDifEnerg.Meditotal);
                datos.Add(regTotalVarAnio0.Meditotal);

                registro.Nombre = regFila.Nombre;
                registro.ListaData = datos;

                registros.Add(registro);
            }

            #endregion

            tabla.ListaRegistros = registros;

            return tabla;
        }

        #endregion

        /// <summary>
        /// ListarResumenProduccionSemanalHtml
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="textoResumen"></param>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ListarResumenProduccionSemanalHtml(FechasPR5 objFecha, string textoResumen, TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi1 = UtilAnexoAPR5.GenerarNumberFormatInfo1();
            NumberFormatInfo nfi2 = UtilAnexoAPR5.GenerarNumberFormatInfo2();
            var tamTabla = 1170;

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: " + tamTabla + "px;'>");

            strHtml.AppendFormat(textoResumen);

            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: " + (tamTabla - 30) + "px;'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='4' style='width: 285px;'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th rowspan='4' style='width: 285px;'>{0}</th>", dataCab[0, 1]);
            strHtml.AppendFormat("<th colspan='4'>{0}</th>", dataCab[0, 2]);
            strHtml.AppendFormat("<th>{0}</th>", dataCab[0, 6].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th>{0}</th>", dataCab[0, 7]);
            strHtml.AppendFormat("<th>{0}</th>", dataCab[0, 8].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th colspan='3'>{0}</th>", dataCab[0, 9]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='3'>{0}</th>", dataCab[1, 2]);
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 5]);
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 6]);
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 7].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 8]);
            strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 9]);
            strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 10]);
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 11]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 2]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 3]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 4]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 9]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 10]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 2]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 3]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 4]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 5]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 6]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 7]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 8]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 9]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 10]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 11]);
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            int f = 0;
            foreach (var reg in registros)
            {
                if (!reg.EsFilaResumen)
                {
                    string styleTotalEmp = !string.IsNullOrEmpty(reg.Nombre) && string.IsNullOrEmpty(reg.Nombre2) ? "background-color: #B7DEE8;" : "";

                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;font-weight:bold;{1}'>{0}</td>", reg.Nombre, styleTotalEmp);
                    strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;{1}'>{0}</td>", reg.Nombre2, styleTotalEmp);

                    int c = 0;
                    foreach (decimal? col in reg.ListaData)
                    {

                        if (c == 5 || c == 9) //con signo  de %
                            strHtml.AppendFormat("<td class='alignValorRight' style='{1}'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi1), styleTotalEmp);
                        else
                            strHtml.AppendFormat("<td class='alignValorRight' style='{1}'>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(col.HasValue ? col : null, nfi2), styleTotalEmp);

                        c++;
                    }
                }
                strHtml.Append("</tr>");
                f++;
            }
            strHtml.Append("</tbody>");

            strHtml.Append("<thead>");
            foreach (var reg in registros)
            {
                if (reg.EsFilaResumen)
                {
                    strHtml.Append("<tr>");
                    strHtml.AppendFormat("<th style='padding-left: 5px;text-align: left;font-weight:bold;' colspan='2'>{0}</th>", reg.Nombre);

                    int c = 0;
                    foreach (decimal? col in reg.ListaData)
                    {

                        if (c == 5 || c == 9) //con signo  de %
                            strHtml.AppendFormat("<th class='alignValorRight' >{0}</th>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi1));
                        else
                            strHtml.AppendFormat("<th class='alignValorRight' >{0}</th>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(col.HasValue ? col : null, nfi2));

                        c++;
                    }

                    strHtml.Append("</tr>");
                }
            }
            strHtml.Append("</thead>");
            strHtml.Append("</table>");

            #endregion

            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarResumenProduccionXTgenSemanalHtml
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ListarResumenProduccionXTgenSemanalHtml(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi1 = UtilAnexoAPR5.GenerarNumberFormatInfo1();
            NumberFormatInfo nfi2 = UtilAnexoAPR5.GenerarNumberFormatInfo2();
            var tamTabla = 1170;

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: " + tamTabla + "px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: " + (tamTabla - 30) + "px;'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='2' style='width: 285px;'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th rowspan='2' style='width: 285px;'>{0}</th>", dataCab[0, 1]);
            strHtml.AppendFormat("<th rowspan='2' style='width: 285px;'>{0}</th>", dataCab[0, 2]);
            strHtml.AppendFormat("<th colspan='2' style='width: 285px;'>{0}</th>", dataCab[0, 3]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[1, 3]);
            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[1, 4]);
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            int f = 0;
            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;font-weight:bold;'>{0}</td>", reg.Nombre);

                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {

                    if (c == 4) //con signo  de %
                        strHtml.AppendFormat("<td class='alignValorRight' style='font-weight:bold;'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi1));
                    else
                        strHtml.AppendFormat("<td class='alignValorRight' style=''>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(col.HasValue ? col : null, nfi2));

                    c++;
                }
                strHtml.Append("</tr>");
                f++;
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        #region Excel

        /// <summary>
        /// Resumen Produccion
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="ultimaFilaTabla"></param>
        public static void GenerarCharExcelResumenProduccion(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, out int ultimaFilaTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registrosGrupo = tablaData.ListaRegistros.Where(x => !x.EsFilaResumen).ToList();
            var registrosTotal = tablaData.ListaRegistros.Where(x => x.EsFilaResumen).ToList();

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            //ws.Cells[4, 2].Value = EscogerTitulosSubtitulos("6", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //titulo
            #endregion

            int coluIniEmpresa = 3;
            ultimaFilaTabla = 0;

            //iterar por cada subcuadro
            var lista1 = registrosGrupo.GetRange(0, 65);
            var lista2 = registrosGrupo.GetRange(65, 68);
            var lista3 = registrosGrupo.GetRange(133, 68);
            var lista4 = registrosGrupo.GetRange(201, registrosGrupo.Count - 201);
            var listaSubcuadro = new[] {
                                    new { Subcuadro = 1, Total = 0, FilaIniEmpresa = 7, Registros = lista1},
                                    new { Subcuadro = 2,Total = 0,FilaIniEmpresa  = 89 , Registros = lista2 },
                                    new { Subcuadro = 3,Total = 0,FilaIniEmpresa  = 174 , Registros = lista3 },
                                    new { Subcuadro = 4,Total = lista4.Count(),FilaIniEmpresa  = 259 , Registros = lista4 },
                                }.ToList();

            foreach (var objSubcuadro in listaSubcuadro)
            {

                int filaIniEmpresa = objSubcuadro.FilaIniEmpresa;
                int filaIniData = filaIniEmpresa + 4;
                int coluIniData = coluIniEmpresa;

                int ultimaFila = 0;
                int ultimaColu = 0;

                #region cabecera
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 0].Value = dataCab[0, 0];
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 2].Value = dataCab[0, 2];
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 6].Value = dataCab[0, 6];
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 7].Value = dataCab[0, 7];
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 8].Value = dataCab[0, 8];
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 9].Value = dataCab[0, 9];

                ws.Cells[filaIniEmpresa + 1, coluIniEmpresa + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniEmpresa + 1, coluIniEmpresa + 5].Value = dataCab[1, 5];
                ws.Cells[filaIniEmpresa + 1, coluIniEmpresa + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniEmpresa + 1, coluIniEmpresa + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniEmpresa + 1, coluIniEmpresa + 8].Value = dataCab[1, 8];
                ws.Cells[filaIniEmpresa + 1, coluIniEmpresa + 9].Value = dataCab[1, 9];
                ws.Cells[filaIniEmpresa + 1, coluIniEmpresa + 10].Value = dataCab[1, 10];
                ws.Cells[filaIniEmpresa + 1, coluIniEmpresa + 11].Value = dataCab[1, 11];

                ws.Cells[filaIniEmpresa + 2, coluIniEmpresa + 2].Value = dataCab[2, 2];
                ws.Cells[filaIniEmpresa + 2, coluIniEmpresa + 3].Value = dataCab[2, 3];
                ws.Cells[filaIniEmpresa + 2, coluIniEmpresa + 4].Value = dataCab[2, 4];
                ws.Cells[filaIniEmpresa + 2, coluIniEmpresa + 9].Value = dataCab[2, 9];
                ws.Cells[filaIniEmpresa + 2, coluIniEmpresa + 10].Value = dataCab[2, 10];

                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 2].Value = dataCab[3, 2];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 3].Value = dataCab[3, 3];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 4].Value = dataCab[3, 4];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 5].Value = dataCab[3, 5];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 6].Value = dataCab[3, 6];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 7].Value = dataCab[3, 7];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 8].Value = dataCab[3, 8];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 9].Value = dataCab[3, 9];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 10].Value = dataCab[3, 10];
                ws.Cells[filaIniEmpresa + 3, coluIniEmpresa + 11].Value = dataCab[3, 11];

                #endregion

                ultimaColu = coluIniEmpresa + 11;

                #region cuerpo

                if (objSubcuadro.Registros.Any())
                {
                    ultimaFila = filaIniData + objSubcuadro.Registros.Count() - 1;
                    ultimaFilaTabla = ultimaFila;

                    #region Formato Cuerpo
                    UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultimaFila, coluIniData);
                    UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 0, ultimaFila, coluIniData + 1, "Izquierda");
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 2, ultimaFila, ultimaColu, "Derecha");
                    UtilExcel.CeldasExcelEnNegrita(ws, filaIniData, coluIniData + 0, ultimaFila, coluIniData + 0);
                    UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo2);

                    UtilExcel.CeldasExcelColorTexto(ws, filaIniData, coluIniData - 1, ultimaFila, coluIniData - 1, "#FFFFFF");
                    UtilExcel.CeldasExcelColorFondo(ws, filaIniData, coluIniData - 1, ultimaFila, coluIniData - 1, "#FFFFFF");

                    UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

                    #endregion

                    int filaX = 0;
                    foreach (var reg in objSubcuadro.Registros)
                    {
                        int colX = 0;

                        ws.Cells[filaIniData + filaX, coluIniData + colX].Value = reg.Nombre;
                        colX++;
                        ws.Cells[filaIniData + filaX, coluIniData + colX].Value = reg.Nombre2;
                        colX++;

                        if (!string.IsNullOrEmpty(reg.Nombre) && string.IsNullOrEmpty(reg.Nombre2))
                        {
                            string colorTotalEmp = "#B7DEE8";
                            UtilExcel.CeldasExcelColorFondo(ws, filaIniData + filaX, coluIniData + 0, filaIniData + filaX, ultimaColu, colorTotalEmp);
                        }

                        foreach (decimal? numValor in reg.ListaData)
                        {
                            string strFormat = string.Empty;

                            bool tieneTextoPorcentaje = colX == (5 + 2) || colX == (9 + 2);
                            if (numValor != null)
                            {
                                var numValor2 = tieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor2;
                            }
                            strFormat = tieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;

                            colX++;
                        }

                        filaX++;
                    }

                }
                else
                {
                    ultimaFilaTabla = filaIniData;
                }
                #endregion

                #region Texto_Anotacion_3

                //ultimaFila++;
                //UtilExcel.FormatoNotaNegrita(ws, ultimaFila, coluIniData, tablaData.Leyenda.ListaDescripcion);

                #endregion
            }

            //Filas resumen
            if (registrosTotal.Any())
            {
                int filaRes1 = listaSubcuadro.Last().FilaIniEmpresa + 4 + listaSubcuadro.Last().Total;
                int filaX = filaRes1;
                int coluIniData = coluIniEmpresa;
                int ultimaColu = coluIniEmpresa + 11;

                foreach (var reg in registrosTotal)
                {
                    int colX = 0;

                    ws.Cells[filaX, coluIniData + colX].Value = reg.Nombre;
                    colX += 2; ;

                    foreach (decimal? numValor in reg.ListaData)
                    {
                        string strFormat = string.Empty;

                        bool tieneTextoPorcentaje = colX == (5 + 2) || colX == (9 + 2);
                        if (numValor != null && numValor != 0)
                        {
                            var numValor2 = tieneTextoPorcentaje ? numValor / 100 : numValor;
                            ws.Cells[filaX, coluIniData + colX].Value = numValor2;
                        }
                        strFormat = tieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                        ws.Cells[filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;

                        colX++;
                    }
                    filaX++;
                }

                #region Formato Cuerpo
                UtilExcel.CeldasExcelWrapText(ws, filaRes1, coluIniData, filaRes1 + 1, ultimaColu);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaRes1, coluIniData, filaRes1 + 1, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaRes1, coluIniData, filaRes1 + 1, coluIniData + 1, "Izquierda");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaRes1, coluIniData + 2, filaRes1 + 1, ultimaColu, "Derecha");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaRes1, coluIniData, filaRes1 + 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo2);

                UtilExcel.CeldasExcelColorTexto(ws, filaRes1, coluIniData, filaRes1 + 1, ultimaColu, "#FFFFFF");
                UtilExcel.CeldasExcelColorFondo(ws, filaRes1, coluIniData, filaRes1 + 1, ultimaColu, "#0077A5");

                UtilExcel.BorderCeldas2(ws, filaRes1, coluIniData, filaRes1 + 1, ultimaColu);

                UtilExcel.CeldasExcelEnNegrita(ws, filaRes1, coluIniData, filaRes1 + 1, ultimaColu);

                #endregion
            }
        }

        /// <summary>
        /// GenerarCharExcelResumenProduccionC2YC3
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIniTabla"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        public static void GenerarCharExcelResumenProduccionC2YC3(ExcelWorksheet ws, int filaIniTabla, FechasPR5 objFecha, TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int filaIniCab = filaIniTabla;
            int filaIniData = filaIniCab + 2;
            int coluIniData = 4;

            #region cabecera

            ws.Cells[filaIniCab, coluIniData + 0].Value = dataCab[0, 0];
            ws.Cells[filaIniCab, coluIniData + 2].Value = dataCab[0, 1];
            ws.Cells[filaIniCab, coluIniData + 3].Value = dataCab[0, 2];
            ws.Cells[filaIniCab, coluIniData + 4].Value = dataCab[0, 3];

            #endregion

            #region cuerpo

            int filaX = 0;
            foreach (var reg in registros)
            {
                int colX = 0;

                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = reg.Nombre;
                colX++;
                colX++;
                foreach (decimal? numValor in reg.ListaData)
                {
                    string strFormat = string.Empty;

                    bool tieneTextoPorcentaje = colX == 5;
                    if (numValor != null)
                    {
                        var numValor2 = tieneTextoPorcentaje ? numValor / 100 : numValor;
                        ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor2;
                    }
                    strFormat = tieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                    ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;

                    colX++;
                }

                filaX++;
            }

            #endregion

        }

        #endregion

        #endregion

        #endregion

        #region A. OFERTA DE GENERACIÓN ELÉCTRICA EN EL SEIN

        #region Metodos RegionA

        #endregion

        #region A.1. Ingreso en Operación Comercial al SEIN

        /// <summary>
        /// Genera el listado (tabla) web para el ingreso/retiro de operaciones en el SEIN
        /// </summary>
        /// <param name="tablaData"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public static string GenerarListadoIngresoRetiroOpComercialSeinHtml(TablaReporte tablaData, int tipoOperacion)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int numReg = registros.Count;
            var regPie = registros.Last();
            registros.RemoveAt(numReg - 1);

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            int aumC = 0;
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:295px;'>" + dataCab[0, 0] + "</th>");
            strHtml.Append("<th style='width:125px;'>" + dataCab[0, 1] + "</th>");
            strHtml.Append("<th style='width:120px;'>" + dataCab[0, 2] + "</th>");
            strHtml.Append("<th style='width:150px;'>" + dataCab[0, 3] + "</th>");
            if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                strHtml.Append("<th style='width:150px;'>" + dataCab[0, 4] + "</th>");
                aumC = 1;
            }
            strHtml.Append("<th style='width:150px;'>" + dataCab[0, 4 + aumC] + "</th>");
            strHtml.Append("<th style='width:270px;max-width: 270px;'>" + dataCab[0, 5 + aumC] + "</th>");
            strHtml.Append("<th style='width:70px;'>" + dataCab[0, 6 + aumC].Replace("\n", "<br>") + "</th>");
            strHtml.Append("<th style='width:70px;'>" + dataCab[0, 7 + aumC].Replace("\n", "<br>") + "</th>");
            strHtml.Append("<th style='width:70px;'>" + dataCab[0, 8 + aumC].Replace("\n", "<br>") + "</th>");
            strHtml.Append("<th style='width:120px;'>" + dataCab[0, 9 + aumC].Replace("\n", "<br>") + "</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo


            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            int aum = tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual ? 1 : 0;
            foreach (var fila in registros)
            {
                var datosTexto = fila.ListaPropiedades;
                var datosDecimal = fila.ListaData;

                strHtml.Append("<td>" + datosTexto[0] + " </td>");
                strHtml.Append("<td>" + datosTexto[1] + " </td>");
                strHtml.Append("<td>" + datosTexto[2] + " </td>");
                strHtml.Append("<td>" + datosTexto[3] + " </td>");
                if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                {
                    strHtml.Append("<td>" + datosTexto[4] + " </td>");

                }
                strHtml.Append("<td>" + datosTexto[4 + aum] + " </td>");
                strHtml.Append("<td style='max-width: 270px;'>\n" + datosTexto[5 + aum] + " </td>");
                //strHtml.Append("<td>" + datosTexto[5] + " </td>");
                strHtml.Append("<td> " + datosDecimal[0].FormatoDecimal(2) + "</td>");
                strHtml.Append("<td>" + datosDecimal[1].FormatoDecimal(2) + " </td>");
                strHtml.Append("<td>" + datosDecimal[2].FormatoDecimal(2) + " </td>");
                strHtml.Append("<td>" + datosTexto[6 + aum] + " </td>");

                strHtml.Append("</tr>");
            }

            int colspan = 7 + aum;
            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td style='text-align:left' colspan='" + colspan + "'>" + regPie.ListaPropiedades[0] + "</td>");
            strHtml.Append("<td style='text-align:center' colspan=''>" + regPie.ListaData[0].FormatoDecimal(2) + "</td>");
            strHtml.Append("<td style='text-align:center' colspan=''>" + regPie.ListaData[1].FormatoDecimal(2) + "</td>");
            strHtml.Append("<td style='text-align:center' colspan=''></td>");
            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            foreach (var descripcion in tablaData.Leyenda.ListaDescripcion)
            {
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", descripcion);
                strHtml.Append("</div>");
            }

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera la data para el listado de los Ingresos y Salidas de operacion de equipos
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="lstData"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaIngresoSalidaOperacion(int tipoReporte, List<OperacionComercialSein> lstData, DateTime fechaFinal, int tipoOperacion)
        {
            lstData = lstData.OrderBy(x => x.FechaOperacion).ThenBy(x => x.Empresa).ToList();

            TablaReporte tabla = new TablaReporte();

            tabla.ReptiCodiTabla = tipoReporte;

            #region Cabecera
            int aumC = 0;
            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                aumC = 1;

            CabeceraReporte cabRepo = new CabeceraReporte();

            var operacion = "";
            if (tipoOperacion == 1)
                operacion = "Fecha de Ingreso \n en Operación Comercial";
            if (tipoOperacion == 2)
                operacion = "Fecha de Retiro \n en Operación Comercial";

            int dig = 10 + aumC;
            string[,] matrizCabecera = new string[1, dig];
            matrizCabecera[0, 0] = "Empresa";
            matrizCabecera[0, 1] = "Tipo de Generación";
            matrizCabecera[0, 2] = "Recurso Energético";
            matrizCabecera[0, 3] = "Tipo de Tecnologia";
            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                matrizCabecera[0, 4] = "Otra Clasificación de Tipo de Central";
            }
            matrizCabecera[0, 4 + aumC] = "Central";
            matrizCabecera[0, 5 + aumC] = "Unidad";
            matrizCabecera[0, 6 + aumC] = "Tensión de conexión \n(kV)";
            matrizCabecera[0, 7 + aumC] = "Potencia Efectiva \n(MW)";
            matrizCabecera[0, 8 + aumC] = "Potencia Instalada \n(MW)";
            matrizCabecera[0, 9 + aumC] = operacion;

            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #endregion            

            #region Cuerpo

            List<RegistroReporte> filaReporte = new List<RegistroReporte>();
            RegistroReporte registroTabla;
            List<decimal?> lstDatos;
            List<string> lstDescripciones;

            decimal? SumaPotEfectiva = 0.0m;
            decimal? SumaPotenciaInstalada = 0.0m;

            foreach (var registro in lstData)
            {
                registroTabla = new RegistroReporte();
                lstDatos = new List<decimal?>();
                lstDescripciones = new List<string>();

                var pe = registro.PotEfectiva != null ? registro.PotEfectiva : null;
                var pi = registro.PotInstalada != null ? registro.PotInstalada : null;
                var fo = registro.FechaOperacion != null ? registro.FechaOperacion.Value.ToString("dd/MM/yyyy") : null;

                //data fila
                lstDescripciones.Add(registro.Empresa);
                lstDescripciones.Add(registro.Generacion);
                lstDescripciones.Add(registro.Recurso);
                lstDescripciones.Add(registro.Tecnologia);
                if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                {
                    lstDescripciones.Add(registro.Tiporer);
                }
                lstDescripciones.Add(registro.Central);
                lstDescripciones.Add(registro.Unidades);
                //lstDescripciones.Add(registro.Equicodi);
                lstDatos.Add(registro.Tension);
                lstDatos.Add(pe);
                lstDatos.Add(pi);
                lstDescripciones.Add(fo);

                registroTabla.ListaPropiedades = lstDescripciones;
                registroTabla.ListaData = lstDatos;
                filaReporte.Add(registroTabla);

                //data para ultima fila
                SumaPotEfectiva = pe != null ? SumaPotEfectiva + pe.Value : SumaPotEfectiva;
                SumaPotenciaInstalada = pi != null ? SumaPotenciaInstalada + pi.Value : SumaPotenciaInstalada;

            }

            #endregion

            #region Pie


            registroTabla = new RegistroReporte();
            lstDatos = new List<decimal?>();
            lstDescripciones = new List<string>();

            lstDescripciones.Add("TOTAL");
            lstDatos.Add(SumaPotEfectiva);
            lstDatos.Add(SumaPotenciaInstalada);

            registroTabla.ListaPropiedades = lstDescripciones;
            registroTabla.ListaData = lstDatos;
            filaReporte.Add(registroTabla);

            #endregion

            tabla.ListaRegistros = filaReporte;

            // Adicionamos los pie de pagina
            var textoPie = "";
            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();

            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                //sin descripcion
            }
            else
            {
                if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                {
                    if (tipoOperacion == 1) textoPie = NotasPieWebInformeMensual.Cuadro1_Reporte_1p1;
                    if (tipoOperacion == 2) textoPie = NotasPieWebInformeMensual.Cuadro1_Reporte_1p2;

                    lstPie.Add(string.Format(textoPie, EPDate.f_NombreMes(fechaFinal.Month), fechaFinal.Year));
                }
                else
                {
                    if (tipoOperacion == 1) textoPie = NotasPieWebInformeSemanal.Cuadro1_Reporte_1p1;
                    if (tipoOperacion == 2) textoPie = NotasPieWebInformeSemanal.Cuadro1_Reporte_1p2;

                    lstPie.Add(string.Format(textoPie, fechaFinal.Day + " de " + fechaFinal.NombreMes().ToLower() + " del año " + fechaFinal.Year));
                }
            }


            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;



            return tabla;

        }

        /// <summary>
        /// Genrea el grafico web del reporte Ingreso retiro operacion sein
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="lstData"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public static GraficoWeb GenerarGWebIngresoOpComercialSeinHtml(int tipoReporte, List<OperacionComercialSein> lstData, DateTime fechaFinal, int tipoOperacion)
        {

            var ListaGrafico = lstData.GroupBy(x => new { x.Recurso, x.Tecnologia }).Select(y => new OperacionComercialSein() { Recurso = y.Key.Recurso, Tecnologia = y.Key.Tecnologia, PotInstalada = y.Sum(n => n.PotInstalada) }).ToList();
            var lstRecursos = ListaGrafico.Select(x => x.Recurso).Distinct().ToList();
            var lstTecnologia = ListaGrafico.Select(x => x.Tecnologia).Distinct().ToList();

            string textoPieG = "";
            var subtitulo = "";
            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                //sin descripcion
            }
            else
            {
                if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                {
                    if (tipoOperacion == 1) { textoPieG = NotasPieWebInformeMensual.Grafico1_Reporte_1p1; }
                    if (tipoOperacion == 2) { textoPieG = NotasPieWebInformeMensual.Grafico1_Reporte_1p2; }

                    subtitulo = string.Format(textoPieG, EPDate.f_NombreMes(fechaFinal.Month), fechaFinal.Year);
                }
                else
                {
                    if (tipoOperacion == 1) { textoPieG = NotasPieWebInformeSemanal.Grafico1_Reporte_1p1; }
                    if (tipoOperacion == 2) { textoPieG = NotasPieWebInformeSemanal.Grafico1_Reporte_1p2; }

                    subtitulo = string.Format(textoPieG, fechaFinal.Day + " de " + fechaFinal.NombreMes().ToLower() + " del año " + fechaFinal.Year);
                }
            }



            var graficoWeb = new GraficoWeb
            {
                Subtitle = subtitulo,
                Type = "column",
                TitleText = "POTENCIA INSTALADA AL " + fechaFinal.Day + " DE " + fechaFinal.NombreMesAnho().ToUpper() + " = " + lstData.Sum(x => x.PotInstalada).FormatoDecimal(2),
                XAxisCategories = lstRecursos,
                YaxixTitle = "MW",
                TooltipValueSuffix = " MW",
                YaxixLabelsFormat = "",
                SerieData = new DatosSerie[lstTecnologia.Count()]
            };

            int indexS = 0;

            foreach (var tecnologia in lstTecnologia)
            {
                graficoWeb.SerieData[indexS] = new DatosSerie { Name = tecnologia, Data = new decimal?[lstRecursos.Count()] };
                int indexD = 0;

                foreach (var recurso in lstRecursos)
                {
                    var reg = ListaGrafico.Where(x => x.Recurso == recurso && x.Tecnologia == tecnologia);
                    decimal? valPotenciaEf = reg.Any() ? reg.First().PotInstalada : 0;
                    graficoWeb.SerieData[indexS].Data[indexD] = valPotenciaEf;
                    indexD++;

                }
                indexS++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// Genera el listado en excel del reporte Retiro de operaciones
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="RowIni"></param>
        /// <param name="ultFila"></param>
        public static void GenerarCharExcelListadoSalidaOpeComercial(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, int RowIni, out int ultFila)
        {
            string tipoVistaReporte = ConstantesPR5ReportesServicio.TipoVistaGrupal;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniEmpresa = 8 + RowIni;
            int coluIniEmpresa = 3;

            int filaIniData = filaIniEmpresa + 1;
            int coluIniData = coluIniEmpresa;

            int ultimaFila;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[filaIniEmpresa - 2, 3].Value = EscogerTitulosSubtitulos("2", 2, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //subtitulo
            UtilAnexoAPR5.FormatoSubtituloExcel(ws, filaIniEmpresa - 2, 3);

            #endregion

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int numReg = registros.Count;
            var regPie = registros.Last();
            registros.RemoveAt(numReg - 1);

            int aumC = tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual ? 1 : 0;
            #region Cabecera
            ws.Cells[filaIniEmpresa, coluIniEmpresa].Value = dataCab[0, 0];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 1].Value = dataCab[0, 1];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 2].Value = dataCab[0, 2];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 3].Value = dataCab[0, 3];
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 4].Value = dataCab[0, 4];
            }
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 4 + aumC].Value = dataCab[0, 4 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 5 + aumC].Value = dataCab[0, 5 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 6 + aumC].Value = dataCab[0, 6 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 7 + aumC].Value = dataCab[0, 7 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 8 + aumC].Value = dataCab[0, 8 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 9 + aumC].Value = dataCab[0, 9 + aumC];

            #region Formato Cabecera
            ws.Row(filaIniEmpresa).Height = 47;
            ws.Column(coluIniEmpresa).Width = 44;
            ws.Column(coluIniEmpresa + 1).Width = 18;
            ws.Column(coluIniEmpresa + 2).Width = 14;
            ws.Column(coluIniEmpresa + 3).Width = 22;
            ws.Column(coluIniEmpresa + 4).Width = 21;

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                ws.Column(coluIniEmpresa + 5).Width = 20;
                ws.Column(coluIniEmpresa + 6).Width = 18;
                ws.Column(coluIniEmpresa + 7).Width = 12;
                ws.Column(coluIniEmpresa + 8).Width = 11;
                ws.Column(coluIniEmpresa + 9).Width = 11;
                ws.Column(coluIniEmpresa + 10).Width = 18;
            }
            else
            {
                ws.Column(coluIniEmpresa + 5).Width = 18;
                ws.Column(coluIniEmpresa + 6).Width = 12;
                ws.Column(coluIniEmpresa + 7).Width = 11;
                ws.Column(coluIniEmpresa + 8).Width = 11;
                ws.Column(coluIniEmpresa + 9).Width = 18;
            }

            int ultColuCab = coluIniEmpresa + 9 + aumC;
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, "Centro");
            UtilExcel.CeldasExcelEnNegrita(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab);
            UtilExcel.CeldasExcelWrapText(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab);
            UtilExcel.CeldasExcelColorFondo(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
            UtilExcel.CeldasExcelColorTexto(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, "#FFFFFF");
            UtilExcel.BorderCeldas2(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab);



            #endregion
            #endregion

            #region cuerpo

            if (registros.Any())
            {

                //***************************      CUERPO DE LA TABLA         ***********************************//     
                int filaX = 0;
                int aum = tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual ? 1 : 0;
                foreach (var fila in registros)
                {
                    var datosTexto = fila.ListaPropiedades;
                    var datosDecimal = fila.ListaData;

                    ws.Cells[filaIniData + filaX, coluIniData].Value = datosTexto[0];
                    ws.Cells[filaIniData + filaX, coluIniData + 1].Value = datosTexto[1];
                    ws.Cells[filaIniData + filaX, coluIniData + 2].Value = datosTexto[2];
                    ws.Cells[filaIniData + filaX, coluIniData + 3].Value = datosTexto[3];
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                    {
                        ws.Cells[filaIniData + filaX, coluIniData + 4].Value = datosTexto[4];
                    }
                    ws.Cells[filaIniData + filaX, coluIniData + 4 + aum].Value = datosTexto[4 + aum];
                    ws.Cells[filaIniData + filaX, coluIniData + 5 + aum].Value = datosTexto[5 + aum];

                    ws.Cells[filaIniData + filaX, coluIniData + 6 + aum].Value = datosDecimal[0];
                    ws.Cells[filaIniData + filaX, coluIniData + 6 + aum].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[filaIniData + filaX, coluIniData + 7 + aum].Value = datosDecimal[1];
                    ws.Cells[filaIniData + filaX, coluIniData + 7 + aum].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[filaIniData + filaX, coluIniData + 8 + aum].Value = datosDecimal[2];
                    ws.Cells[filaIniData + filaX, coluIniData + 8 + aum].Style.Numberformat.Format = "#,##0.00";

                    ws.Cells[filaIniData + filaX, coluIniData + 9 + aum].Value = datosTexto[6 + aum];

                    filaX++;
                }

                ultimaColu = coluIniData + 9 + aum;
                ultimaFila = filaIniData + filaX;


                ws.Cells[ultimaFila, coluIniData].Value = regPie.ListaPropiedades[0];
                ws.Cells[ultimaFila, coluIniData + 7 + aum].Value = regPie.ListaData[0];
                ws.Cells[ultimaFila, coluIniData + 7 + aum].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[ultimaFila, coluIniData + 8 + aum].Value = regPie.ListaData[1];
                ws.Cells[ultimaFila, coluIniData + 8 + aum].Style.Numberformat.Format = "#,##0.00";

                #region Formato Cuerpo
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaFila, coluIniData, "Izquierdo");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelAgrupar(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu - 3);
                UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "#FFFFFF");

                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                #endregion

                ultFila = ultimaFila;

                #region Texto_Anotacion_3

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                {
                    string texto = "";
                    if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaIndividual) texto = UtilAnexoAPR5.EscogerAnotacion("1.2", 1, tipoVistaReporte, tipoDoc);
                    if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaGrupal) texto = UtilAnexoAPR5.EscogerAnotacion("1.2", 3, tipoVistaReporte, tipoDoc);

                    UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + tablaData.Leyenda.ListaDescripcion[0]);
                }
                #endregion


            }
            else
            {
                ultFila = filaIniEmpresa + 1;
            }

            #endregion

        }

        /// <summary>
        /// Genera el Grafico Excel para el reporte de ingreso y salida de operaciones
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="tipoOperacion"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoOp"></param>
        /// <param name="ultFilaT"></param>
        /// <param name="ultFilaGrafico"></param>
        public static void GenerarCharExcelGraficosOpComercial(ExcelWorksheet ws, int tipoOperacion, FechasPR5 objFecha, GraficoWeb graficoOp, int ultFilaT, out int ultFilaGrafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaIndividual)
            {
                var miChart1 = ws.Drawings["graficoPotenciaIns"] as ExcelChart;

                if (miChart1 != null)
                    miChart1.SetSize(0, 0);
            }

            int filaIniTabla = 20;
            int coluIniTabla = 27; //AA

            int ultimaColuData;
            ultFilaGrafico = 0;

            GraficoWeb miGrafico = graficoOp;
            var miChart = ws.Drawings["graficoIngresoOpSein"] as ExcelChart;

            if (miGrafico.SerieData.Count() > 0)
            {

                //creamos la tabla a usar
                int colu1 = 0;
                foreach (var recursos in miGrafico.XAxisCategories)
                {
                    ws.Cells[filaIniTabla + 1, coluIniTabla + 1 + colu1].Value = recursos;
                    colu1++;
                }
                int numR = 0;
                int filaX = 0;
                foreach (var item in miGrafico.SerieData)
                {
                    ws.Cells[filaIniTabla + 2 + filaX, coluIniTabla].Value = item.Name;

                    numR = item.Data.Count();
                    int coluX = 0;
                    foreach (var valor in item.Data)
                    {
                        ws.Cells[filaIniTabla + 2 + filaX, coluIniTabla + 1 + coluX].Value = valor != 0 ? valor : null;
                        coluX++;
                    }

                    filaX++;
                }

                //setear valores
                miChart.SetPosition(ultFilaT + 5, 0, 2, 0); //antes de 2 era 6
                ultFilaGrafico = ultFilaT + 5 + 17;
                miChart.Title.Text = miGrafico.TitleText;

                ultimaColuData = coluIniTabla + 1 + numR - 1;
                //Set series
                miChart.Series.Delete(0);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < (filaX - 1); i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                //ingresamos rangos a las series
                for (int serie = 0; serie < filaX; serie++)
                {
                    miChart.Series[serie].Header = (string)ws.Cells[filaIniTabla + 2 + serie, coluIniTabla, filaIniTabla + 2 + serie, coluIniTabla].Value;
                    miChart.Series[serie].Series = ExcelRange.GetAddress(filaIniTabla + 2 + serie, coluIniTabla + 1, filaIniTabla + 2 + serie, ultimaColuData);
                    miChart.Series[serie].XSeries = ExcelRange.GetAddress(filaIniTabla + 1, coluIniTabla + 1, filaIniTabla + 1, ultimaColuData);
                }

                #region Texto_Anotacion_3
                string texto = "";
                if (tipoOperacion == 1) { texto = UtilAnexoAPR5.EscogerAnotacion("1.1", 2, tipoVistaReporte, tipoDoc); }
                if (tipoOperacion == 2) { texto = UtilAnexoAPR5.EscogerAnotacion("1.2", 2, tipoVistaReporte, tipoDoc); }
                if (tipoOperacion == -1) { texto = UtilAnexoAPR5.EscogerAnotacion("1.1", 2, tipoVistaReporte, tipoDoc); }

                UtilExcel.FormatoNotaNegrita(ws, ultFilaGrafico + 1, 3, texto + miGrafico.Subtitle);

                #endregion

            }
            else
            {
                miChart.SetSize(0, 0);
                UtilExcel.BorrarCeldasExcel(ws, filaIniTabla, coluIniTabla, filaIniTabla + 6, coluIniTabla + 8);
            }

        }

        /// <summary>
        /// GenerarCharExcelGraficoPieOpComercialAnual
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="tipoOperacion"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoPieOp"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="ultFilaT"></param>
        /// <param name="ultFilaGrafico"></param>
        public static void GenerarCharExcelGraficoPieOpComercialAnual(ExcelWorksheet ws, int tipoOperacion, FechasPR5 objFecha, GraficoWeb graficoPieOp, DateTime fechaFinal, int ultFilaT, out int ultFilaGrafico)
        {
            int filaIniTabla = 20;
            int coluIniTabla = 23; //AA

            int ultimaFilaData;
            ultFilaGrafico = 0;

            GraficoWeb miGrafico = graficoPieOp;
            var chartXCausa = ws.Drawings["graficoIngresoOpTipoGener"] as ExcelPieChart;

            int numRegistros = miGrafico.SerieData.Count();
            if (numRegistros > 0)
            {
                //creamos la tabla a usar
                int filaX = 0;
                foreach (var data in miGrafico.SerieData)
                {
                    ws.Cells[filaIniTabla + filaX, coluIniTabla].Value = data.Name;
                    ws.Cells[filaIniTabla + filaX, coluIniTabla + 1].Value = data.Y;
                    filaX++;
                }
                ultimaFilaData = filaIniTabla + filaX - 1;

                //setear valores
                chartXCausa.SetPosition(ultFilaT + 5, 0, 2, 0);
                ultFilaGrafico = ultFilaT + 5 + 17;
                chartXCausa.Title.Text = miGrafico.TitleText;


                //ingresamos rangos a las series
                chartXCausa.Series[0].Series = ExcelRange.GetAddress(filaIniTabla, coluIniTabla + 1, ultimaFilaData, coluIniTabla + 1);
                chartXCausa.Series[0].XSeries = ExcelRange.GetAddress(filaIniTabla, coluIniTabla, ultimaFilaData, coluIniTabla);

            }
            else
            {
                chartXCausa.SetSize(0, 0);
            }

        }

        /// <summary>
        /// Genera el listado excel  para el reporte de ingreso de operaciones
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="RowIni"></param>
        /// <param name="ultFila"></param>
        public static void GenerarCharExcelListadoIngresoOpeComercial(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, int RowIni, out int ultFila)
        {
            int tipoDoc = objFecha.TipoReporte;
            string tipoVistaReporte = ConstantesPR5ReportesServicio.TipoVistaGrupal;

            int filaIniEmpresa = 8 + RowIni;
            int coluIniEmpresa = 3;

            int filaIniData = filaIniEmpresa + 1;
            int coluIniData = coluIniEmpresa;

            int ultimaFila;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos("2", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos("2", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //subtitulo
            #endregion

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int numReg = registros.Count;
            var regPie = registros.Last();
            registros.RemoveAt(numReg - 1);

            int aumC = tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual ? 1 : 0;
            #region Cabecera
            ws.Cells[filaIniEmpresa, coluIniEmpresa].Value = dataCab[0, 0];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 1].Value = dataCab[0, 1];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 2].Value = dataCab[0, 2];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 3].Value = dataCab[0, 3];
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                ws.Cells[filaIniEmpresa, coluIniEmpresa + 4].Value = dataCab[0, 4];
            }
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 4 + aumC].Value = dataCab[0, 4 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 5 + aumC].Value = dataCab[0, 5 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 6 + aumC].Value = dataCab[0, 6 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 7 + aumC].Value = dataCab[0, 7 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 8 + aumC].Value = dataCab[0, 8 + aumC];
            ws.Cells[filaIniEmpresa, coluIniEmpresa + 9 + aumC].Value = dataCab[0, 9 + aumC];

            #region Formato Cabecera
            ws.Row(filaIniEmpresa).Height = 47;
            ws.Column(coluIniEmpresa).Width = 44;
            ws.Column(coluIniEmpresa + 1).Width = 21;
            ws.Column(coluIniEmpresa + 2).Width = 15;
            ws.Column(coluIniEmpresa + 3).Width = 22;
            ws.Column(coluIniEmpresa + 4).Width = 21;

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                ws.Column(coluIniEmpresa + 5).Width = 20;
                ws.Column(coluIniEmpresa + 6).Width = 18;
                ws.Column(coluIniEmpresa + 7).Width = 12;
                ws.Column(coluIniEmpresa + 8).Width = 11;
                ws.Column(coluIniEmpresa + 9).Width = 11;
                ws.Column(coluIniEmpresa + 10).Width = 18;
            }
            else
            {
                ws.Column(coluIniEmpresa + 5).Width = 18;
                ws.Column(coluIniEmpresa + 6).Width = 12;
                ws.Column(coluIniEmpresa + 7).Width = 11;
                ws.Column(coluIniEmpresa + 8).Width = 11;
                ws.Column(coluIniEmpresa + 9).Width = 18;
            }


            int ultColuCab = coluIniEmpresa + 9 + aumC;
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, "Centro");
            UtilExcel.CeldasExcelEnNegrita(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab);
            UtilExcel.CeldasExcelWrapText(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab);
            UtilExcel.CeldasExcelColorFondo(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
            UtilExcel.CeldasExcelColorTexto(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab, "#FFFFFF");
            UtilExcel.BorderCeldas2(ws, filaIniEmpresa, coluIniEmpresa, filaIniEmpresa, ultColuCab);

            #endregion
            #endregion

            #region cuerpo

            if (registros.Any())
            {
                //string texto = UtilAnexoAPR5.EscogerAnotacion("1.1", 1, tipoVistaReporte, tipoDoc);
                //ws.Cells[ultimaFila + 1, coluIniData].Value = texto +  UtilAnexoAPR5.CompletarAnotacion(NotasPieWebInformeSemanal., fechaFinal.Day + " de " + fechaFinal.NombreMes().ToLower() + " del año " + fechaFinal.Year);
                //UtilExcel.FormatoNota(ws, ultimaFila + 1, coluIniData);

                //***************************      CUERPO DE LA TABLA         ***********************************//     
                int filaX = 0;
                int aum = tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual ? 1 : 0;
                foreach (var fila in registros)
                {
                    var datosTexto = fila.ListaPropiedades;
                    var datosDecimal = fila.ListaData;

                    ws.Cells[filaIniData + filaX, coluIniData].Value = datosTexto[0];
                    ws.Cells[filaIniData + filaX, coluIniData + 1].Value = datosTexto[1];
                    ws.Cells[filaIniData + filaX, coluIniData + 2].Value = datosTexto[2];
                    ws.Cells[filaIniData + filaX, coluIniData + 3].Value = datosTexto[3];
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                    {
                        ws.Cells[filaIniData + filaX, coluIniData + 4].Value = datosTexto[4];
                    }
                    ws.Cells[filaIniData + filaX, coluIniData + 4 + aum].Value = datosTexto[4 + aum];
                    ws.Cells[filaIniData + filaX, coluIniData + 5 + aum].Value = datosTexto[5 + aum];

                    ws.Cells[filaIniData + filaX, coluIniData + 6 + aum].Value = datosDecimal[0];
                    ws.Cells[filaIniData + filaX, coluIniData + 6 + aum].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[filaIniData + filaX, coluIniData + 7 + aum].Value = datosDecimal[1];
                    ws.Cells[filaIniData + filaX, coluIniData + 7 + aum].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[filaIniData + filaX, coluIniData + 8 + aum].Value = datosDecimal[2];
                    ws.Cells[filaIniData + filaX, coluIniData + 8 + aum].Style.Numberformat.Format = "#,##0.00";

                    ws.Cells[filaIniData + filaX, coluIniData + 9 + aum].Value = datosTexto[6 + aum];

                    filaX++;
                }

                ultimaColu = coluIniData + 9 + aum;
                ultimaFila = filaIniData + filaX;

                ws.Cells[ultimaFila, coluIniData].Value = regPie.ListaPropiedades[0];
                ws.Cells[ultimaFila, coluIniData + 7 + aum].Value = regPie.ListaData[0];
                ws.Cells[ultimaFila, coluIniData + 7 + aum].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[ultimaFila, coluIniData + 8 + aum].Value = regPie.ListaData[1];
                ws.Cells[ultimaFila, coluIniData + 8 + aum].Style.Numberformat.Format = "#,##0.00";

                #region Formato Cuerpo
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaFila, coluIniData, "Izquierdo");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelAgrupar(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu - 3);
                UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "#FFFFFF");

                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                #endregion

                ultFila = ultimaFila;

                #region Texto_Anotacion_3
                string texto = "";

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                {
                    if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaIndividual) texto = UtilAnexoAPR5.EscogerAnotacion("1.1", 1, tipoVistaReporte, tipoDoc);
                    if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaGrupal) texto = UtilAnexoAPR5.EscogerAnotacion("1.1", 1, tipoVistaReporte, tipoDoc);

                    UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + tablaData.Leyenda.ListaDescripcion[0]);
                }


                #endregion


            }
            else
            {
                ultFila = filaIniEmpresa + 1;
            }

            #endregion
        }

        #endregion

        #endregion

        #region B. MATRIZ ELÉCTRICA DE GENERACIÓN DEL SEIN (GWh)

        #region util

        /// <summary>
        /// GetObjParticipacion
        /// </summary>
        /// <param name="objTotal"></param>
        /// <param name="objParte"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="day"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GetObjParticipacion(ResultadoTotalGeneracion objTotal, ResultadoTotalGeneracion objParte, int tipoResultadoFecha, DateTime day)
        {
            ResultadoTotalGeneracion regParticipacion = new ResultadoTotalGeneracion();
            regParticipacion.Medifecha = day;
            regParticipacion.TipoResultadoFecha = tipoResultadoFecha;

            if (objTotal.Meditotal != 0)
                regParticipacion.Meditotal = (objParte.Meditotal / objTotal.Meditotal) * 100.0m;

            return regParticipacion;
        }

        /// <summary>
        /// GetFactorPlantaByCentralRER
        /// </summary>
        /// <param name="regProd"></param>
        /// <param name="regPE"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GetFactorPlantaByCentralRER(ResultadoTotalGeneracion regProd, ResultadoTotalGeneracion regPE, int tipoResultadoFecha, DateTime fechaIni, DateTime fechaFin)
        {
            TimeSpan tsmes = fechaFin.Subtract(fechaIni);
            int totalDia = (int)tsmes.TotalDays + 1;

            decimal? fp = null;
            if (regPE.Meditotal > 0)
            {
                //Convertir GWh a MWh
                fp = (regProd.Meditotal * ConstantesPR5ReportesServicio.FactorGW) / (regPE.Meditotal * totalDia * 24);
                //fp = fp * 100;
            }

            ResultadoTotalGeneracion peCentral = new ResultadoTotalGeneracion();
            peCentral.TipoResultadoFecha = tipoResultadoFecha;
            peCentral.Meditotal = fp.GetValueOrDefault(0);

            return peCentral;
        }

        /// <summary>
        /// ProdGenObtenerDataGWhTotal
        /// </summary>
        /// <param name="listaData48"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <param name="fechaIniConsulta"></param>
        /// <param name="fechaFinConsulta"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion ProdGenObtenerDataGWhTotal(List<MeMedicion48DTO> listaData48, int tipoResultadoFecha, DateTime fechaProceso,
                                                                DateTime fechaIniConsulta, DateTime fechaFinConsulta)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaProceso;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Meditotal = 0;

            if (listaData48.Count > 0)
            {
                decimal total = 0;
                foreach (var aux in listaData48)
                {
                    total += aux.Meditotal.GetValueOrDefault(0);
                }

                m.Meditotal = total / (ConstantesPR5ReportesServicio.FactorGW * 2);
            }

            m.FiltroCeldaDato = new FiltroCeldaDato()
            {
                FechaIni = fechaIniConsulta,
                FechaFin = fechaFinConsulta,
            };

            return m;
        }

        /// <summary>
        /// ProdGenObtenerDataGWhTotal
        /// </summary>
        /// <param name="listaData96"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <param name="fechaIniConsulta"></param>
        /// <param name="fechaFinConsulta"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion ProdGenObtenerDataGWhTotal(List<MeMedicion96DTO> listaData96, int tipoResultadoFecha, DateTime fechaProceso,
                                                        DateTime fechaIniConsulta, DateTime fechaFinConsulta)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaProceso;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Meditotal = 0;

            if (listaData96.Count > 0)
            {
                decimal total = 0;
                foreach (var aux in listaData96)
                {
                    total += aux.Meditotal.GetValueOrDefault(0);
                }

                m.Meditotal = total / (ConstantesPR5ReportesServicio.FactorGW * 4);
            }

            m.FiltroCeldaDato = new FiltroCeldaDato()
            {
                FechaIni = fechaIniConsulta,
                FechaFin = fechaFinConsulta,
            };

            return m;
        }

        /// <summary>
        /// ProdGenObtenerDataMWTotal
        /// </summary>
        /// <param name="listaData96"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion ProdGenObtenerDataMWTotal(List<MeMedicion96DTO> listaData96, int tipoResultadoFecha, DateTime fechaProceso)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaProceso;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Meditotal = 0;

            if (listaData96.Count > 0)
            {
                decimal total = 0;
                foreach (var aux in listaData96.Where(x => x.Medifecha == fechaProceso))
                {
                    total += aux.Meditotal.GetValueOrDefault(0);
                }

                m.Meditotal = total;
            }

            return m;
        }

        /// <summary>
        /// ProdGenGenerarVariacionGWhTotal
        /// </summary>
        /// <param name="regAct"></param>
        /// <param name="regAnt"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion ProdGenGenerarVariacionGWhTotal(ResultadoTotalGeneracion regAct, ResultadoTotalGeneracion regAnt, int tipoResultadoFecha, DateTime fechaProceso)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaProceso;
            m.TipoResultadoFecha = tipoResultadoFecha;

            if (regAnt.Meditotal != null && regAnt.Meditotal != 0)
            {
                m.Meditotal = regAnt.Meditotal != 0 ? ((regAct.Meditotal / regAnt.Meditotal) - 1.0m) : 0.0m;
                m.Meditotal = m.Meditotal * 100;
            }

            return m;
        }

        /// <summary>
        /// ListarFilaCuadroRecursoEnergetico
        /// </summary>
        /// <returns></returns>
        public static List<SiFuenteenergiaDTO> ListarFilaCuadroRecursoEnergetico()
        {
            List<SiFuenteenergiaDTO> listaFenerg = new List<SiFuenteenergiaDTO>();
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiAgua, Fenergnomb = "Agua", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasCamisea, Fenergnomb = "Gas Natural de Camisea", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasMalacas, Fenergnomb = "Gas Natural de Malacas", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasMalacas });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasAguaytia, Fenergnomb = "Gas Natural de Aguaytía", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasAguaytia });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasLaIsla, Fenergnomb = "Gas Natural de La Isla", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasLaIsla, ValidarDatoObligatorio = true });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiCarbon, Fenergnomb = "Carbón", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiDiesel, Fenergnomb = "Diesel", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiResidual, Fenergnomb = "Residual", ValidarDatoObligatorio = true });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiR500, Fenergnomb = "Residual 500", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiR6, Fenergnomb = "Residual 6", ValidarDatoObligatorio = true });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiBagazo, Fenergnomb = "Bagazo", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiBiogas, Fenergnomb = "Biogás", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiSolar, Fenergnomb = "Solar", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiEolica, Fenergnomb = "Eólico", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiNoAplica, Fenergnomb = "No aplica", ValidarDatoObligatorio = true });

            return listaFenerg;
        }

        /// <summary>
        /// ListarFilaCuadroRecursoEnergeticoResumenRelevante
        /// </summary>
        /// <returns></returns>
        public static List<SiFuenteenergiaDTO> ListarFilaCuadroRecursoEnergeticoResumenRelevante()
        {
            List<SiFuenteenergiaDTO> listaFenerg = new List<SiFuenteenergiaDTO>();
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiAgua, Fenergnomb = "Agua", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiGas, Fenergnomb = "Gas Natural" });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiRelevanteBiogasBagazo, Fenergnomb = "Bagazo/Biogas", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiRelevanteResidualYDiesel, Fenergnomb = "Diesel2/Residual500/Residual6", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiCarbon, Fenergnomb = "Carbón", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiSolar, Fenergnomb = "Solar", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiEolica, Fenergnomb = "Eólico", });

            return listaFenerg;
        }

        /// <summary>
        /// ListarFilaCuadroRecursoEnergeticoEjecutivoSemanal
        /// </summary>
        /// <returns></returns>
        public static List<SiFuenteenergiaDTO> ListarFilaCuadroRecursoEnergeticoEjecutivoSemanal()
        {
            List<SiFuenteenergiaDTO> listaFenerg = new List<SiFuenteenergiaDTO>();
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiPasada, Fenergnomb = "Pasada", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoAguaPasada });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiRegulacion, Fenergnomb = "Regulación", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoAguaRegulacion });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasCamisea, Fenergnomb = "Gas Natural de Camisea", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasMalacas, Fenergnomb = "Gas Natural de Malacas", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasMalacas });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasAguaytia, Fenergnomb = "Gas Natural de Aguaytía", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasAguaytia });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasLaIsla, Fenergnomb = "Gas Natural de La Isla", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasLaIsla, ValidarDatoObligatorio = true });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiCarbon, Fenergnomb = "Carbón", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiDiesel, Fenergnomb = "Diesel", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiResidual, Fenergnomb = "Residual", ValidarDatoObligatorio = true });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiR500, Fenergnomb = "Residual 500", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiR6, Fenergnomb = "Residual 6", ValidarDatoObligatorio = true });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiBagazo, Fenergnomb = "Bagazo", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiBiogas, Fenergnomb = "Biogás", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiSolar, Fenergnomb = "Solar", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiEolica, Fenergnomb = "Eólico", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiNoAplica, Fenergnomb = "No aplica", ValidarDatoObligatorio = true });

            return listaFenerg;
        }

        /// <summary>
        /// ListarFilaCuadroRecursoEnergeticoSinRERSemanal
        /// </summary>
        /// <returns></returns>
        public static List<SiFuenteenergiaDTO> ListarFilaCuadroRecursoEnergeticoSinRERSemanal()
        {
            List<SiFuenteenergiaDTO> listaFenerg = new List<SiFuenteenergiaDTO>();
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiAgua, Fenergnomb = "Agua", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiGas, Fenergnomb = "Gas Natural" });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiCarbon, Fenergnomb = "Carbón", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiDiesel, Fenergnomb = "Diesel", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiResidual, Fenergnomb = "Residual", ValidarDatoObligatorio = true });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiR500, Fenergnomb = "Residual 500", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiR6, Fenergnomb = "Residual 6", ValidarDatoObligatorio = true });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiNoAplica, Fenergnomb = "No aplica", ValidarDatoObligatorio = true });

            return listaFenerg;
        }

        /// <summary>
        /// ListarFilaCuadroRecursoEnergeticoRER
        /// </summary>
        /// <returns></returns>
        public static List<SiFuenteenergiaDTO> ListarFilaCuadroRecursoEnergeticoRER()
        {
            List<SiFuenteenergiaDTO> listaFenerg = new List<SiFuenteenergiaDTO>();
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiAgua, Fenergnomb = "Agua", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiEolica, Fenergnomb = "Eólico", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiSolar, Fenergnomb = "Solar", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiBagazo, Fenergnomb = "Bagazo", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiBiogas, Fenergnomb = "Biogás", });

            return listaFenerg;
        }

        /// <summary>
        /// ListarFilaCuadroRecursoEnergeticoResumenRelevanteMensualTexto
        /// </summary>
        /// <returns></returns>
        public static List<SiFuenteenergiaDTO> ListarFilaCuadroRecursoEnergeticoResumenRelevanteMensualTexto()
        {
            List<SiFuenteenergiaDTO> listaFenerg = new List<SiFuenteenergiaDTO>();
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiAgua, Fenergnomb = "Agua" });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiTermoelectrico, Fenergnomb = "Centrales Termoeléctricas" });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasCamisea, Fenergnomb = "Gas Natural de Camisea", Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiGasNoCamisea, Fenergnomb = "Gas Natural de Malacas, Aguaytia, La Isla" });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiCarbon, Fenergnomb = "Carbón", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiDiesel, Fenergnomb = "Diesel", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesSiosein2.FenergcodiRelevanteResidual, Fenergnomb = "Residual" });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiBagazo, Fenergnomb = "Bagazo", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiBiogas, Fenergnomb = "Biogás", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiSolar, Fenergnomb = "Solar", });
            listaFenerg.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiEolica, Fenergnomb = "Eólico", });

            return listaFenerg;
        }

        #endregion

        #region B.1. Producción por tipo de Generación

        /// <summary>
        /// Genera el grafico comparacion de la produccion del reporte Produccion por tipo de generacion
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoComp"></param>
        /// <param name="numRecursos"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="ultimaFilaGrafico"></param>
        public static void GenerarCharExcelGraficoComparacionProduccionGen(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoComp, int numRecursos, int filaIniGrafico, out int ultimaFilaGrafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniLista = 10;
            int filaFinLista = filaIniLista + numRecursos - 1;
            int coluIniLista = 3;

            ExcelChart miChart = ws.Drawings["graficoProdTipoGen"] as ExcelChart;

            if (numRecursos > 0)
            {
                miChart.SetPosition(filaIniGrafico, 0, 2, 0);
                int col = 0;
                for (int pto = 0; pto < 3; pto++)
                {
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
                    {
                        if (pto == 0) col = coluIniLista + 7;
                        if (pto == 1) col = coluIniLista + 5;
                        if (pto == 2) col = coluIniLista + 4;
                    }
                    else
                    {
                        if (pto == 0) col = coluIniLista + 9;
                        if (pto == 1) col = coluIniLista + 7;
                        if (pto == 2) col = coluIniLista + 6;
                    }

                    miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniLista, col, filaFinLista, col);
                    miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniLista, coluIniLista, filaFinLista, coluIniLista);
                    miChart.Series[pto].Header = (string)ws.Cells[filaIniLista - 1, col].Value;
                }

                int filaPie = filaIniGrafico + 21;

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
                {
                    #region Texto_Anotacion_3

                    string texto = UtilAnexoAPR5.EscogerAnotacion("2.1", 2, tipoVistaReporte, tipoDoc);
                    UtilExcel.FormatoNotaNegrita(ws, filaPie, 3, texto + graficoComp.Subtitle);

                    #endregion

                    UtilExcel.CeldasExcelAgrupar(ws, filaPie, 3, filaPie, 13);
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaPie, 3, filaPie, 13, "Centro");
                }


                ultimaFilaGrafico = filaPie - 1;
            }
            else
            {
                miChart.SetSize(0, 0);
                ultimaFilaGrafico = 0;
            }
        }

        /// <summary>
        /// Genera el listado (tabla) en excel del reporte Produccion por tipo de generacion
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="numRecursos"></param>
        /// <param name="ultimaFilaTabla"></param>
        public static void GenerarCharExcelListadoProduccionTipoGeneracion(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, out int numRecursos, out int ultimaFilaTabla)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniRecurso = 8;
            int coluIniRecurso = 3;

            int filaIniData = filaIniRecurso + 2;
            int coluIniData = coluIniRecurso;

            int ultimaFila = filaIniData + registros.Count - 1;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion            

            #region Titulo y subtitulo

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos("3", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos("3", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //subtitulo
            #endregion

            #region cabecera

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // hay menos columnas
            {

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 3].Value = dataCab[1, 3];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 4].Value = dataCab[1, 4];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 5].Value = dataCab[1, 5];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 8].Value = dataCab[1, 8];

                ultimaColu = coluIniRecurso + 8;
            }
            else
            {
                ws.Cells[filaIniRecurso, coluIniRecurso + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniRecurso, coluIniRecurso + 6].Value = dataCab[0, 6];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 3].Value = dataCab[1, 3];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 4].Value = dataCab[1, 4];

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 8].Value = dataCab[1, 8];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 9].Value = dataCab[1, 9];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 10].Value = dataCab[1, 10];

                ultimaColu = coluIniRecurso + 10;
            }



            #endregion

            #region cuerpo

            numRecursos = registros.Count - 4;

            int filaX = 0;
            int filaProdTotal = filaIniData + numRecursos;
            foreach (var reg in registros)
            {
                ws.Cells[filaIniData + filaX, coluIniData + 0].Value = reg.Nombre;
                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                    {
                        if (c == 5 || c == 7) //con signo  de %
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col / 100;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00%";
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00";
                        }
                    }
                    else // reporte mensual, informe semanal y ejecutivo semanal
                    {
                        if (c == 4 || c == 7 || c == 9) //con signo  de %
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col / 100;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00%";
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00";
                        }
                    }


                    c++;
                }

                filaX++;
            }

            #region Formato Cuerpo

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila - 2, coluIniData, ultimaFila - 2, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.BorderCeldas5_1(ws, ultimaFila - 2, coluIniData, ultimaFila - 2, ultimaColu);
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila - 2, coluIniData, ultimaFila - 2, ultimaColu);
                ws.Row(ultimaFila).Height = 30;
                UtilExcel.CeldasExcelWrapText(ws, ultimaFila, coluIniData, ultimaFila, coluIniData);

            }

            ws.Column(coluIniRecurso).Width = 40;

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.BorderCeldas5_1(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);
            UtilExcel.CeldasExcelEnNegrita(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.BorderCeldas5_1(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
            UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);

            UtilExcel.BorderCeldas5_1(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

            UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso, coluIniRecurso + 1, ultimaFila, coluIniData + 3);
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
                UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso, coluIniRecurso + 4, ultimaFila, coluIniData + 6);
            else
                UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso, coluIniRecurso + 4, ultimaFila, coluIniData + 5);
            UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso + 1, coluIniRecurso + 6, ultimaFila, coluIniData + 8);
            #endregion

            ultimaFilaTabla = ultimaFila;

            #region Texto_Anotacion_3
            if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                string texto = UtilAnexoAPR5.EscogerAnotacion("2.1", 1, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + tablaData.Leyenda.ListaDescripcion[0]);
            }
            #endregion

            #endregion

        }

        /// <summary>
        /// Genera el grafico Evolución de energia para  el reporte Producción por tipo generación
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoEvoSem"></param>
        public static void GenerarCharExcelGraficoEvolucionGen(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoEvoSem)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;
            DateTime fechaInicial = objFecha.FechaInicial;
            DateTime fechaFinal = objFecha.FechaFinal;

            GraficoWeb graficoWeb = graficoEvoSem;
            var miChart2 = ws.Drawings["graficoEvolSemEnergia"] as ExcelChart;


            if (graficoWeb != null)
            {
                #region tablaUsar
                int filaIniDataG = 20;
                int coluIniDataG = 27;
                int ultimaFilaSerie = 0;

                int fi = 0;

                foreach (var lstAnios in graficoWeb.Categorias)
                {
                    var lstSemanas = lstAnios.Categories;
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = lstAnios.Name;

                    foreach (var semana in lstSemanas)
                    {
                        ws.Cells[filaIniDataG + 1 + fi, coluIniDataG + 1].Value = semana;
                        fi++;
                    }

                }

                int col = 0;
                //Header y Series
                List<int> lstTam = new List<int>();
                foreach (var serie in graficoWeb.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 2 + col].Value = serie.Name;

                    int fila = 0;

                    for (int val = 0; val < graficoWeb.SeriesData[col].Count(); val++)
                    {
                        if (col < 2)
                            ws.Cells[filaIniDataG + 1 + fila, coluIniDataG + 2 + col].Value = graficoWeb.SeriesData[col][val];
                        else
                            ws.Cells[filaIniDataG + 1 + fila, coluIniDataG + 2 + col].Value = graficoWeb.SeriesData[col][val] / 100;

                        fila++;
                    }
                    lstTam.Add(graficoWeb.SeriesData[col].Count());
                    col++;

                }
                ultimaFilaSerie = filaIniDataG + lstTam.Max(x => x);

                //conectamos data con el grafico
                for (int serie = 0; serie < 2; serie++)
                {
                    miChart2.Series[serie].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 2 + serie, ultimaFilaSerie, coluIniDataG + 2 + serie);
                    miChart2.Series[serie].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultimaFilaSerie, coluIniDataG + 1);
                }

                for (int serie = 2; serie < 4; serie++)
                {
                    miChart2.PlotArea.ChartTypes[2].Series[serie - 2].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 2 + serie, ultimaFilaSerie, coluIniDataG + 2 + serie);
                    miChart2.PlotArea.ChartTypes[2].Series[serie - 2].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultimaFilaSerie, coluIniDataG + 1);
                }



                miChart2.Title.Text = graficoWeb.TitleText;

                #endregion

                #region Texto_Anotacion_3

                string texto = UtilAnexoAPR5.EscogerAnotacion("2.1", 3, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, 71, 3, texto + graficoWeb.Subtitle);

                #endregion

                UtilExcel.CeldasExcelAgrupar(ws, 71, 3, 71, 12);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, 71, 3, 71, 12, "Centro");
            }
            else
            {
                miChart2.SetSize(0, 0);
                UtilExcel.BorrarCeldasExcel(ws, 20, 27, 40, 35);
            }
        }

        /// <summary>
        /// Genera el grafico Evolución de energia para  el reporte Producción por tipo generación
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoEvoSem"></param>
        public static void GenerarCharExcelGraficoEvolucionGenEjec(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoEvoSem)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;
            DateTime fechaInicial = objFecha.FechaInicial;
            DateTime fechaFinal = objFecha.FechaFinal;

            GraficoWeb graficoWeb = graficoEvoSem;
            var miChart2 = ws.Drawings["graficoEvolSemEnergia"] as ExcelChart;


            if (graficoWeb != null)
            {
                #region tablaUsar
                int filaIniDataG = 20;
                int coluIniDataG = 29; //27
                int ultimaFilaSerie = 0;


                int fi = 0;
                foreach (var semana in graficoWeb.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = semana;
                    fi++;
                }

                int col = 0;
                //Header y Series
                List<int> lstTam = new List<int>();
                foreach (var serie in graficoWeb.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col].Value = serie.Name;

                    int fila = 0;

                    for (int val = 0; val < graficoWeb.SeriesData[col].Count(); val++)
                    {
                        if (col < 1)
                            ws.Cells[filaIniDataG + 1 + fila, coluIniDataG + 1 + col].Value = graficoWeb.SeriesData[col][val];
                        else
                            ws.Cells[filaIniDataG + 1 + fila, coluIniDataG + 1 + col].Value = graficoWeb.SeriesData[col][val] / 100;

                        fila++;
                    }
                    lstTam.Add(graficoWeb.SeriesData[col].Count());
                    col++;

                }
                ultimaFilaSerie = filaIniDataG + lstTam.Max(x => x);

                //conectamos data con el grafico
                for (int serie = 0; serie < 1; serie++)
                {
                    miChart2.Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + 0, ultimaFilaSerie, coluIniDataG + 1 + 0);
                    miChart2.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultimaFilaSerie, coluIniDataG);
                }

                for (int serie = 0; serie < 2; serie++)
                {
                    miChart2.PlotArea.ChartTypes[2].Series[serie].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 2 + serie, ultimaFilaSerie, coluIniDataG + 2 + serie);
                    miChart2.PlotArea.ChartTypes[2].Series[serie].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultimaFilaSerie, coluIniDataG);
                }


                miChart2.Title.Text = graficoWeb.TitleText;

                #endregion

                #region Texto_Anotacion_3

                string texto = UtilAnexoAPR5.EscogerAnotacion("2.1", 3, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, 71, 3, texto + graficoWeb.Subtitle);

                #endregion
                UtilExcel.CeldasExcelAgrupar(ws, 71, 3, 71, 12);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, 71, 3, 71, 12, "Centro");
            }
            else
            {
                miChart2.SetSize(0, 0);
                UtilExcel.BorrarCeldasExcel(ws, 20, 27, 40, 35);
            }
        }

        /// <summary>
        /// Genera el grafico de comparacion de producción para el reporte de Generaacion por Recurso
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="numRecursos"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="ultimaFilaGrafico"></param>
        public static void GenerarCharExcelGraficoComparacionProduccionGen(ExcelWorksheet ws, FechasPR5 objFecha, int numRecursos, int filaIniGrafico, out int ultimaFilaGrafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniLista = 10;
            int filaFinLista = filaIniLista + numRecursos - 1;
            int coluIniLista = 3;

            ExcelChart miChart = ws.Drawings["graficoProdTipoGen"] as ExcelChart;

            if (numRecursos > 0)
            {
                miChart.SetPosition(filaIniGrafico, 0, 2, 0);
                int col = 0;
                for (int pto = 0; pto < 3; pto++)
                {
                    if (pto == 0) col = coluIniLista + 9;
                    if (pto == 1) col = coluIniLista + 7;
                    if (pto == 2) col = coluIniLista + 6;
                    miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniLista, col, filaFinLista, col);
                    miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniLista, coluIniLista, filaFinLista, coluIniLista);
                    miChart.Series[pto].Header = (string)ws.Cells[filaIniLista - 1, col].Value;
                }

                #region Texto_Anotacion
                int filaPie = filaIniGrafico + 21;
                string texto = UtilAnexoAPR5.EscogerAnotacion("2.1", 2, tipoVistaReporte, tipoDoc);
                ws.Cells[filaPie, 3].Value = UtilAnexoAPR5.CompletarAnotacion(texto, objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2") + " de " + EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));
                UtilExcel.FormatoNota(ws, filaPie, 3);

                #endregion
                UtilExcel.CeldasExcelAgrupar(ws, filaPie, 3, filaPie, 13);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaPie, 3, filaPie, 13, "Centro");

                ultimaFilaGrafico = filaPie - 1;
            }
            else
            {
                miChart.SetSize(0, 0);
                ultimaFilaGrafico = 0;
            }
        }

        /// <summary>
        /// Método que genera el detalle de la lista de Reporte de la Producción por tipo de Generación
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ListaReporteProduccionTipoGenHTML(TablaReporte tablaData)
        {

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 1130px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 1100px;'>");

            #region cabecera
            if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //solo para reporte anual no incluye 2 columnas
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th rowspan='2' style='width: 350px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan='3'>{0}</th>", dataCab[0, 4]);
                strHtml.AppendFormat("<th colspan='2' style=''>{0}</th>", dataCab[0, 7]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 1]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 2]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 3]);


                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 5]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 6].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 7]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.Append("</tr>");
                strHtml.Append("</thead>");
            }
            else // paralos otros casos (reportes semanales y mensual)
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th rowspan='2' style='width: 240px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan='2'>{0}</th>", dataCab[0, 4]);
                strHtml.AppendFormat("<th colspan='5' style=''>{0}</th>", dataCab[0, 6]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 1]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 2]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 3]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 5]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 6]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 7]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 9]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 10].Replace("\n", "<br>"));
                strHtml.Append("</tr>");
                strHtml.Append("</thead>");
            }

            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            int f = 0;
            foreach (var reg in registros)
            {
                if (f == 4 || f == 7 || f == 8)  // en negrita
                    strHtml.Append("<tr style = 'font-weight:bold; height: 32px;'>");
                else
                    strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;'>{0}</td>", reg.Nombre);

                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //solo para reporte anual no incluye 2 columnas
                    {
                        string eventoJs = "";
                        if (reg.ListaFiltroData != null && !string.IsNullOrEmpty(reg.ListaFiltroData[c]))
                            eventoJs = string.Format(" onclick=\"{0};\" ", reg.ListaFiltroData[c]);

                        if (c == 5 || c == 7) //con signo  de %

                            strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi));
                        else
                            strHtml.AppendFormat("<td class='alignValorRight' {1}>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(col.HasValue ? col : null, nfi), eventoJs);
                    }
                    else
                    {
                        string eventoJs = "";
                        if (reg.ListaFiltroData != null && !string.IsNullOrEmpty(reg.ListaFiltroData[c]))
                            eventoJs = string.Format(" onclick=\"{0};\" ", reg.ListaFiltroData[c]);

                        if (c == 4 || c == 7 || c == 9) //con signo  de %

                            strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi));
                        else
                            strHtml.AppendFormat("<td class='alignValorRight' {1}>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(col.HasValue ? col : null, nfi), eventoJs);
                    }

                    c++;
                }

                strHtml.Append("</tr>");
                f++;
            }
            strHtml.Append("</tbody>");


            strHtml.Append("</table>");

            #endregion

            foreach (var descripcion in tablaData.Leyenda.ListaDescripcion)
            {
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", descripcion);
                strHtml.Append("</div>");
            }

            return strHtml.ToString();
        }

        /// <summary>
        /// Devuelve todos los datos del Listado (tabla) del reporte Prod por tipo de produccion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaMDTgeneracionData"></param>
        /// <param name="listaMDPotGenData"></param>
        /// <param name="listaInterTipoData"></param>
        /// <param name="listaInterTotalData"></param>
        /// <param name="listaTgeneracion"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaProdTipoGen(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                        List<ResultadoTotalGeneracion> listaMDTgeneracionData, List<ResultadoTotalGeneracion> listaMDPotGenData,
                        List<ResultadoTotalGeneracion> listaInterTipoData, List<ResultadoTotalGeneracion> listaInterTotalData, List<SiTipogeneracionDTO> listaTgeneracion)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[2, 11];

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
            {
                matrizCabecera[0, 0] = "Por tipo de Generación";
                matrizCabecera[0, 1] = "Últimos 3 meses";
                matrizCabecera[0, 4] = "Año anterior";
                matrizCabecera[0, 6] = string.Format("Generación Acumulada de Enero a {0} ", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));

                matrizCabecera[1, 1] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango2Ant_FechaFin.Month), (objFecha.AnioAct.Rango2Ant_FechaFin.Year).ToString().Substring(2));
                matrizCabecera[1, 2] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango1Ant_FechaFin.Month), (objFecha.AnioAct.Rango1Ant_FechaFin.Year).ToString().Substring(2));
                matrizCabecera[1, 3] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));

                matrizCabecera[1, 4] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.AddYears(-1).Year).ToString().Substring(2));
                matrizCabecera[1, 5] = "Var(%)";

                matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                matrizCabecera[1, 8] = string.Format("Var(%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                matrizCabecera[1, 10] = string.Format("Var(%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual
                {
                    matrizCabecera[0, 0] = "Por tipo de Generación";
                    matrizCabecera[0, 1] = "Últimos 3 meses";
                    matrizCabecera[0, 4] = "Acumulado Anual";
                    matrizCabecera[0, 7] = "Hace 2 años";

                    matrizCabecera[1, 1] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango2Ant_FechaFin.Month), (objFecha.AnioAct.Rango2Ant_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 2] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango1Ant_FechaFin.Month), (objFecha.AnioAct.Rango1Ant_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 3] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));

                    //matrizCabecera[1, 4] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.SemAct_FechaFin.Month), (objFecha.AnioAct.SemAct_FechaFin.AddYears(-1).Year).ToString().Substring(2));
                    //matrizCabecera[1, 5] = "Var(%)";

                    matrizCabecera[1, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 5] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 6] = string.Format("Var(%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                    matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 8] = string.Format("Var(%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);
                }
                else //reportes semanales
                {
                    matrizCabecera[0, 0] = "Por tipo de Generación";
                    matrizCabecera[0, 1] = string.Format("Semana operativa {0}", objFecha.AnioAct.RangoAct_Num);
                    matrizCabecera[0, 4] = "Semana operativa año anterior";
                    matrizCabecera[0, 6] = string.Format("Generación Acumulada del 01 de enero al {0} de {1}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));

                    matrizCabecera[1, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).SemanaFechaDesc;

                    matrizCabecera[1, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 5] = "Var(%)";

                    matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 8] = string.Format("Var(%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                    matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 10] = string.Format("Var(%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);
                }
            }

            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();
            foreach (var tgen in listaTgeneracion)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();
                List<string> filtroDatos = new List<string>();

                var listaXTgen = listaMDTgeneracionData.Where(x => x.Tgenercodi == tgen.Tgenercodi).ToList();

                ResultadoTotalGeneracion regProdGenxTgAnio3 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regProdGenxTgAnio2 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regProdGenxTgAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenxTgAnio1 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenxTgTotalVarAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

                ResultadoTotalGeneracion regProdGenxTgAcum0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenxTgAcum1 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regProdGenxTgAcumVarAnio0 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regProdGenxTgAcum2 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regProdGenxTgAcumVarAnio1 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                datos.Add(regProdGenxTgAnio3.Meditotal);
                datos.Add(regProdGenxTgAnio2.Meditotal);
                datos.Add(regProdGenxTgAnio0.Meditotal);
                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual no incluye ambas columnas
                {
                    datos.Add(regProdGenxTgAnio1.Meditotal);
                    datos.Add(regProdGenxTgTotalVarAnio0.Meditotal);
                }

                datos.Add(regProdGenxTgAcum0.Meditotal);
                datos.Add(regProdGenxTgAcum1.Meditotal);
                datos.Add(regProdGenxTgAcumVarAnio0.Meditotal);

                datos.Add(regProdGenxTgAcum2.Meditotal);
                datos.Add(regProdGenxTgAcumVarAnio1.Meditotal);

                filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}',{2})", regProdGenxTgAnio3.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio3.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}',{2})", regProdGenxTgAnio2.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio2.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}',{2})", regProdGenxTgAnio0.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio0.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio3.FiltroCeldaDato.Tgenercodi));

                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual no incluye ambas columnas
                {
                    filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}',{2})", regProdGenxTgAnio1.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio1.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio3.FiltroCeldaDato.Tgenercodi));
                }

                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}',{2})", regProdGenxTgAcum0.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAcum0.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}',{2})", regProdGenxTgAcum1.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAcum1.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}',{2})", regProdGenxTgAcum2.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAcum2.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regProdGenxTgAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add("");

                registro.Nombre = tgen.Tgenernomb;
                registro.ListaData = datos;
                registro.ListaFiltroData = filtroDatos;

                registros.Add(registro);
            }

            //Potencia generada en el  SEIN
            ResultadoTotalGeneracion regProdGenAnio3 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio2 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regProdGenAnio1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

            ResultadoTotalGeneracion regProdGenAcum0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regProdGenAcum1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regProdGenAcum2 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);


            RegistroReporte registro0 = new RegistroReporte();
            List<decimal?> datos0 = new List<decimal?>();
            List<string> filtroDatos0 = new List<string>();

            datos0.Add(regProdGenAnio3.Meditotal);
            datos0.Add(regProdGenAnio2.Meditotal);
            datos0.Add(regProdGenAnio0.Meditotal);
            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual no incluye ambas columnas
            {
                datos0.Add(regProdGenAnio1.Meditotal);
                datos0.Add(regProdGenTotalVarAnio0.Meditotal);
            }

            datos0.Add(regProdGenAcum0.Meditotal);
            datos0.Add(regProdGenAcum1.Meditotal);
            datos0.Add(regProdGenAcumVarAnio0.Meditotal);

            datos0.Add(regProdGenAcum2.Meditotal);
            datos0.Add(regProdGenAcumVarAnio1.Meditotal);

            registro0.Nombre = objFecha.EsReporteXMes ? "Producción Total" : "Producción Total del SEIN";
            registro0.ListaData = datos0;
            registro0.EsFilaResumen = true;

            registros.Add(registro0);

            //Tipo de interconexion
            var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" },
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" }
                                }.ToList();

            foreach (var tinter in listaTinter)
            {
                RegistroReporte registro1 = new RegistroReporte();
                datos0 = new List<decimal?>();
                filtroDatos0 = new List<string>();

                var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                ResultadoTotalGeneracion regInterAnio3 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regInterAnio2 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regInterAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regInterAnio1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regInterTotalVarAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regInterAcum0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regInterAcum1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regInterAcumVarAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regInterAcum2 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regInterAcumVarAnio1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                datos0.Add(regInterAnio3.Meditotal);
                datos0.Add(regInterAnio2.Meditotal);
                datos0.Add(regInterAnio0.Meditotal);
                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual no incluye ambas columnas
                {
                    datos0.Add(regInterAnio1.Meditotal);
                    datos0.Add(regInterTotalVarAnio0.Meditotal);
                }

                datos0.Add(regInterAcum0.Meditotal);
                datos0.Add(regInterAcum1.Meditotal);
                datos0.Add(regInterAcumVarAnio0.Meditotal);

                datos0.Add(regInterAcum2.Meditotal);
                datos0.Add(regInterAcumVarAnio1.Meditotal);

                filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAnio3.FiltroCeldaDato.FechaIni, regInterAnio3.FiltroCeldaDato.FechaFin));
                filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAnio2.FiltroCeldaDato.FechaIni, regInterAnio2.FiltroCeldaDato.FechaFin));
                filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAnio0.FiltroCeldaDato.FechaIni, regInterAnio0.FiltroCeldaDato.FechaFin));

                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual no incluye ambas columnas
                {
                    filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAnio1.FiltroCeldaDato.FechaIni, regInterAnio1.FiltroCeldaDato.FechaFin));
                }


                filtroDatos0.Add("");

                filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAcum0.FiltroCeldaDato.FechaIni, regInterAcum0.FiltroCeldaDato.FechaFin));
                filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAcum1.FiltroCeldaDato.FechaIni, regInterAcum1.FiltroCeldaDato.FechaFin));
                filtroDatos0.Add("");

                filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAcum2.FiltroCeldaDato.FechaIni, regInterAcum2.FiltroCeldaDato.FechaFin));
                filtroDatos0.Add("");

                registro1.Nombre = tinter.Nombre;
                registro1.ListaData = datos0;
                registro1.ListaFiltroData = filtroDatos0;

                registros.Add(registro1);
            }

            //Intercambios Internacionales
            ResultadoTotalGeneracion regInterTotalAnio3 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalAnio2 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regInterTotalAnio1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalTotalVarAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regInterTotalAcum0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regInterTotalAcum1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAcumVarAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regInterTotalAcum2 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAcumVarAnio1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            RegistroReporte registro2 = new RegistroReporte();
            datos0 = new List<decimal?>();

            datos0.Add(regInterTotalAnio3.Meditotal);
            datos0.Add(regInterTotalAnio2.Meditotal);
            datos0.Add(regInterTotalAnio0.Meditotal);
            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual no incluye ambas columnas
            {
                datos0.Add(regInterTotalAnio1.Meditotal);
                datos0.Add(regInterTotalTotalVarAnio0.Meditotal);
            }


            datos0.Add(regInterTotalAcum0.Meditotal);
            datos0.Add(regInterTotalAcum1.Meditotal);
            datos0.Add(regInterTotalAcumVarAnio0.Meditotal);

            datos0.Add(regInterTotalAcum2.Meditotal);
            datos0.Add(regInterTotalAcumVarAnio1.Meditotal);

            registro2.Nombre = "Intercambios Internacionales";
            registro2.ListaData = datos0;
            registro2.EsFilaResumen = true;

            registros.Add(registro2);

            //Prod total con intercambios            
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual
            {
                RegistroReporte registroUlt = new RegistroReporte();
                datos0 = new List<decimal?>();

                var dataOct = regProdGenAnio3.Meditotal + regInterTotalAnio3.Meditotal;
                var dataNov = regProdGenAnio2.Meditotal + regInterTotalAnio2.Meditotal;
                var dataDic = regProdGenAnio0.Meditotal + regInterTotalAnio0.Meditotal;

                var tot0 = regProdGenAcum0.Meditotal + regInterTotalAcum0.Meditotal;
                var tot1 = regProdGenAcum1.Meditotal + regInterTotalAcum1.Meditotal;
                var var1 = tot1 != null && tot1 != 0 ? (tot0 / tot1 - 1) * 100 : null;
                var tot2 = regProdGenAcum2.Meditotal + regInterTotalAcum2.Meditotal;
                var var2 = tot2 != null && tot2 != 0 ? (tot1 / tot2 - 1) * 100 : null;

                datos0.Add(dataOct);
                datos0.Add(dataNov);
                datos0.Add(dataDic);

                datos0.Add(tot0);
                datos0.Add(tot1);
                datos0.Add(var1);

                datos0.Add(tot2);
                datos0.Add(var2);

                registroUlt.Nombre = "PRODUCCION TOTAL CONSIDERANDO INTERCAMBIOS INTERNACIONALES";
                registroUlt.ListaData = datos0;
                registroUlt.EsFilaResumen = true;

                registros.Add(registroUlt);
            }

            tabla.ListaRegistros = registros;

            // Adicionamos los pie de pagina
            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();
            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el anual
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                    lstPie.Add(NotasPieWebInformeMensual.Cuadro1_Reporte_2p1);
                else
                    lstPie.Add(NotasPieWebInformeSemanal.Cuadro1_Reporte_2p1);
            }

            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;

            #endregion

            return tabla;
        }

        /// <summary>
        /// Devuelve la data de las interconexiones
        /// </summary>
        /// <param name="listarMD"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> GenerarDatosInterconexion48ProdGenTotal(List<MeMedicion48DTO> listarMD, DateTime fechaIni, DateTime fechaFin, int tipoResultadoFecha)
        {
            decimal valorExportacion = 0;
            decimal valorImportacion = 0;

            for (var day = fechaIni.Date; day <= fechaFin; day = day.AddDays(1))
            {
                var regMD = listarMD.Find(x => x.Medifecha == day);
                if (regMD != null)
                {
                    valorExportacion += Math.Abs(regMD.Exp);
                    valorImportacion += Math.Abs(regMD.Imp);
                }
            }

            //Convertirlo a reporte
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaIni.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Meditotal = (valorExportacion - valorImportacion) / (ConstantesPR5ReportesServicio.FactorGW * 2); //exportacion - importacion
            m.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };

            l.Add(m);

            //Importación
            ResultadoTotalGeneracion imp = new ResultadoTotalGeneracion();
            imp.Medifecha = fechaIni.Date;
            imp.TipoResultadoFecha = tipoResultadoFecha;
            imp.Meditotal = valorImportacion / (ConstantesPR5ReportesServicio.FactorGW * 2);
            imp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh;
            imp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };
            l.Add(imp);

            //Exportacion
            ResultadoTotalGeneracion exp = new ResultadoTotalGeneracion();
            exp.Medifecha = fechaIni.Date;
            exp.TipoResultadoFecha = tipoResultadoFecha;
            exp.Meditotal = valorExportacion / (ConstantesPR5ReportesServicio.FactorGW * 2);
            exp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
            exp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };
            l.Add(exp);

            return l;
        }

        /// <summary>
        /// GenerarDatosInterconexion48ProdGenTotalCargaMasiva
        /// </summary>
        /// <param name="listarMD"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> GenerarDatosInterconexion48ProdGenTotalCargaMasiva(List<MeMedicion48DTO> listarMD, DateTime fechaIni, DateTime fechaFin, int tipoResultadoFecha)
        {
            decimal valorExportacion = 0;
            decimal valorImportacion = 0;

            for (var day = fechaIni.Date; day <= fechaFin; day = day.AddDays(1))
            {
                var regMD = listarMD.Find(x => x.Medifecha == day);
                if (regMD != null)
                {
                    decimal valorHExportacion = regMD.Exp > 0 ? regMD.Exp : 0;
                    decimal valorHImportacion = regMD.Imp < 0 ? regMD.Exp * -1 : 0;

                    valorExportacion += valorHExportacion;
                    valorImportacion += valorHImportacion;
                }
            }

            //Convertirlo a reporte
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaIni.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Meditotal = (valorExportacion - valorImportacion) / (ConstantesPR5ReportesServicio.FactorGW * 2); //exportacion - importacion
            m.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };

            l.Add(m);

            //Importación
            ResultadoTotalGeneracion imp = new ResultadoTotalGeneracion();
            imp.Medifecha = fechaIni.Date;
            imp.TipoResultadoFecha = tipoResultadoFecha;
            imp.Meditotal = valorImportacion / (ConstantesPR5ReportesServicio.FactorGW * 2);
            imp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh;
            imp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };
            l.Add(imp);

            //Exportacion
            ResultadoTotalGeneracion exp = new ResultadoTotalGeneracion();
            exp.Medifecha = fechaIni.Date;
            exp.TipoResultadoFecha = tipoResultadoFecha;
            exp.Meditotal = valorExportacion / (ConstantesPR5ReportesServicio.FactorGW * 2);
            exp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
            exp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };
            l.Add(exp);

            return l;
        }

        /// <summary>
        /// Devuelve la data de las interconexiones
        /// </summary>
        /// <param name="listarMD"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> GenerarDatosInterconexion96ProdGenTotal(List<MeMedicion96DTO> listarMD, DateTime fechaIni, DateTime fechaFin, int tipoResultadoFecha)
        {
            decimal valorExportacion = 0;
            decimal valorImportacion = 0;

            for (var day = fechaIni.Date; day <= fechaFin; day = day.AddDays(1))
            {
                var regMD = listarMD.Find(x => x.Medifecha == day);
                if (regMD != null)
                {
                    valorExportacion += Math.Abs(regMD.Exp);
                    valorImportacion += Math.Abs(regMD.Imp);
                }
            }

            //Convertirlo a reporte
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaIni.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Meditotal = (valorExportacion - valorImportacion) / (ConstantesPR5ReportesServicio.FactorGW * 4); //exportacion - importacion
            m.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };

            l.Add(m);

            //Importación
            ResultadoTotalGeneracion imp = new ResultadoTotalGeneracion();
            imp.Medifecha = fechaIni.Date;
            imp.TipoResultadoFecha = tipoResultadoFecha;
            imp.Meditotal = valorImportacion / (ConstantesPR5ReportesServicio.FactorGW * 4);
            imp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh;
            imp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };
            l.Add(imp);

            //Exportacion
            ResultadoTotalGeneracion exp = new ResultadoTotalGeneracion();
            exp.Medifecha = fechaIni.Date;
            exp.TipoResultadoFecha = tipoResultadoFecha;
            exp.Meditotal = valorExportacion / (ConstantesPR5ReportesServicio.FactorGW * 4);
            exp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
            exp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, EsInterconexion = true };
            l.Add(exp);

            return l;
        }

        /// <summary>
        /// Comparación de la producción de energía eléctrica acumulada por tipo de generación periodo 01 de enero al fecha fin
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaMDTgeneracionData"></param>
        /// <param name="listaTgeneracion"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoComparacionProduccionEnergiaAcumulada(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            List<ResultadoTotalGeneracion> listaMDTgeneracionData, List<SiTipogeneracionDTO> listaTgeneracion)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            GraficoWeb grafico = new GraficoWeb();

            var subtitulo = "";
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                subtitulo = "";
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                    subtitulo = string.Format(NotasPieWebInformeMensual.Grafico1_Reporte_2p1, EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToLower());
                else
                    subtitulo = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_2p1, objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));
            }


            grafico.Subtitle = subtitulo;
            grafico.SeriesData = new decimal?[listaTgeneracion.Count()][];

            grafico.XAxisCategories = listaTgeneracion.Select(x => x.Tgenernomb).ToList();
            grafico.YaxixTitle = "GWh";

            List<RegistroSerie> seriesData = new List<RegistroSerie>();

            //Data para los ultimos 3 años
            for (int cc = 0; cc <= 2; cc++)
            {
                int tipoFecha = 0;

                RegistroSerie serieProd = new RegistroSerie();
                switch (cc)
                {
                    case 0:
                        serieProd.Color = "#46B054"; //verde
                        tipoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                        break;
                    case 1:
                        serieProd.Color = "#C0504D";
                        tipoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                        break;
                    case 2:
                        serieProd.Color = "#19569C"; //azul
                        tipoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        break;
                }

                List<ResultadoTotalGeneracion> listaXAcum = listaMDTgeneracionData.Where(x => x.TipoResultadoFecha == tipoFecha).ToList();

                serieProd.Name = listaAnio[cc];
                serieProd.Data = new List<DatosSerie>();

                foreach (var tgen in listaTgeneracion)
                {
                    DatosSerie serie = new DatosSerie();
                    serie.Y = listaXAcum.Find(x => x.Tgenercodi == tgen.Tgenercodi).Meditotal;
                    serieProd.Data.Add(serie);
                }

                seriesData.Add(serieProd);
            }
            grafico.Series = seriesData;

            return grafico;
        }

        /// <summary>
        /// Genera data para el grafico de la produccion de energia anual por tipo de generacion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaEvolucionSemanal"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoEvolucionSemanalEnergia(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<ResultadoTotalGeneracion> listaEvolucionSemanal)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            int nroSemanasAnioAnterior = EPDate.TotalSemanasEnAnho(Int32.Parse(listaAnio[0]), 6);
            int nroSemanasAnioActual = EPDate.TotalSemanasEnAnho(Int32.Parse(listaAnio[1]), 6);

            List<string> listaSemanas1 = new List<string>();
            List<string> listaSemanas2 = new List<string>();
            List<List<string>> lstSemana = new List<List<string>>();
            for (int i = 1; i <= nroSemanasAnioAnterior; i++)
            {
                string sem = i.ToString();
                listaSemanas1.Add(i.ToString());
            }
            for (int i = 1; i <= nroSemanasAnioActual; i++)
            {
                listaSemanas2.Add(i.ToString());
            }
            lstSemana.Add(listaSemanas1);
            lstSemana.Add(listaSemanas2);

            /////////////////////////////////
            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = string.Format("EVOLUCIÓN SEMANAL DE ENERGÍA {0}/{1}", listaAnio[0], listaAnio[1]);
            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_2p1, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc, listaAnio[0], listaAnio[1]);
            grafico.SeriesData = new decimal?[4][];
            grafico.Categorias = new Categorias[lstSemana.Count];

            int indexC = 0;
            foreach (var item in lstSemana)
            {
                grafico.Categorias[indexC] = new Categorias() { Name = listaAnio[indexC], Categories = new string[item.Count] };

                var indexX = 0;
                foreach (var sem in item)
                {
                    grafico.Categorias[indexC].Categories[indexX] = sem;
                    indexX++;
                }
                indexC++;
            }

            List<RegistroSerie> seriesData = new List<RegistroSerie>();

            grafico.Series = new List<RegistroSerie>();
            grafico.Series.Add(new RegistroSerie());
            grafico.Series.Add(new RegistroSerie());
            grafico.Series.Add(new RegistroSerie());
            grafico.Series.Add(new RegistroSerie());

            decimal? yAxisMinimo = 0;

            //Número de series
            for (var i = 0; i < 4; i++)
            {
                int tipoResultadoFecha = 0;
                switch (i)
                {
                    case 0: //Energía Programada
                        tipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct2;
                        grafico.Series[i].Name = "Programado";
                        grafico.Series[i].Type = "column";
                        grafico.Series[i].Color = "#499AF6"; // Celeste                               
                        grafico.Series[i].YAxis = 0;
                        grafico.Series[i].YAxisTitle = "Energía \n(GWh)";
                        break;
                    case 1: //Energía Ejecutada
                        tipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        grafico.Series[i].Name = "Ejecutado";
                        grafico.Series[i].Type = "column";
                        grafico.Series[i].Color = "#BE4B48"; // rojo                               
                        grafico.Series[i].YAxis = 0;
                        grafico.Series[i].YAxisTitle = "Energía \n(GWh)";
                        break;
                    case 2: // Desviacion
                        tipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Desv;
                        grafico.Series[i].Name = "Desviación ";
                        grafico.Series[i].Type = "spline";
                        grafico.Series[i].Color = "#002248"; // azul 
                        grafico.Series[i].YAxis = 1;
                        grafico.Series[i].YAxisTitle = "Desviación y \nVariación";
                        break;
                    case 3://variación Anual
                        tipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                        grafico.Series[i].Name = "Variación Anual";
                        grafico.Series[i].Type = "spline";
                        grafico.Series[i].Color = "#138F24"; // verde
                        grafico.Series[i].YAxis = 1;
                        grafico.Series[i].YAxisTitle = "Desviación y \nVariación";
                        break;
                }

                List<ResultadoTotalGeneracion> listaXTipo = listaEvolucionSemanal.Where(x => x.TipoResultadoFecha == tipoResultadoFecha).ToList();

                var ultimaSemanaAnioActual = EPDate.f_numerosemana(objFecha.AnioAct.RangoAct_FechaFin);
                int numSemanasGrafico = nroSemanasAnioAnterior + ultimaSemanaAnioActual;

                grafico.SeriesData[i] = new decimal?[numSemanasGrafico];

                var day = objFecha.Anio1Ant.Sem01_FechaIni;
                for (var j = 1; j <= numSemanasGrafico; j++)
                {
                    ResultadoTotalGeneracion regData = listaXTipo.Find(x => x.Medifecha == day);
                    decimal? valor = regData != null ? regData.Meditotal : null;
                    if (i == 0 && j == 1) yAxisMinimo = valor; //seteo unica vez
                    if (yAxisMinimo > valor) yAxisMinimo = valor;//busco el menor
                    grafico.SeriesData[i][j - 1] = valor;

                    day = day.AddDays(7);
                }
            }

            grafico.YaxixMin = 800;
            return grafico;
        }

        /// <summary>
        /// Genera el grafico excel de variacion semanal de lamax demanda
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaEnergiaYVarAnualData"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraEnergiayEvolucionAnual(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<ResultadoTotalGeneracion> listaEnergiaYVarAnualData)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);

            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            List<string> listaSemana = new List<string>();
            int numSemanasAnio = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6);
            for (int numSemana = 1; numSemana <= numSemanasAnio; numSemana++)
            {
                listaSemana.Add(numSemana.ToString());
            }

            List<string> listaSerie = new List<string>();
            listaSerie.Add(string.Format("ENERGÍA {0}", listaAnio[2]));
            listaSerie.Add(string.Format("Variación anual {0}/{1}", listaAnio[2], listaAnio[1]));
            listaSerie.Add(string.Format("Variación anual {0}/{1}", listaAnio[1], listaAnio[0]));

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = "PRODUCCIÓN SEMANAL Y VARIACIÓN ANUAL";

            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico3_Reporte_3p1, listaAnio[0], listaAnio[1], listaAnio[2]);

            grafico.XAxisCategories = listaSemana;
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaSerie.Count][];
            grafico.YaxixMin = 500;

            for (int cc = 0; cc < listaSerie.Count; cc++)
            {
                DateTime fIniAnioActual = new DateTime(objFecha.AnioAct.Sem01_FechaIni.Year, objFecha.AnioAct.Sem01_FechaIni.Month, objFecha.AnioAct.Sem01_FechaIni.Day).Date;

                int tipoFecha = 0;
                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = listaSerie[cc];
                switch (cc)
                {
                    case 0: //Energía 
                        tipoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        grafico.Series[cc].Type = "column";
                        grafico.Series[cc].Color = "#BE4B48";
                        grafico.Series[cc].YAxis = 0;
                        grafico.Series[cc].YAxisTitle = "GWh";
                        break;
                    case 1: //Variacion anual
                        tipoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                        grafico.Series[cc].Type = "spline";
                        grafico.Series[cc].Color = "#002248";
                        grafico.Series[cc].YAxis = 1;
                        grafico.Series[cc].YAxisTitle = string.Empty;
                        break;
                    case 2: //Variacion anual
                        tipoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                        grafico.Series[cc].Type = "spline";
                        grafico.Series[cc].Color = "#46B054";
                        grafico.Series[cc].YAxis = 1;
                        grafico.Series[cc].YAxisTitle = string.Empty;
                        break;
                }

                grafico.SeriesData[cc] = new decimal?[listaSemana.Count];
                for (int numSemana = 1; numSemana <= listaSemana.Count; numSemana++)
                {
                    List<ResultadoTotalGeneracion> listaXSem = listaEnergiaYVarAnualData.Where(x => x.Medifecha == fIniAnioActual).ToList();

                    ResultadoTotalGeneracion reg = listaXSem.Find(x => x.TipoResultadoFecha == tipoFecha && x.Medifecha.Date == fIniAnioActual);
                    grafico.SeriesData[cc][numSemana - 1] = reg != null ? reg.Meditotal : null;

                    fIniAnioActual = fIniAnioActual.AddDays(7);
                }
            }

            return grafico;
        }

        #endregion

        #region B.2. Producción por tipo de Recurso Energético

        /// <summary>
        /// Genera la data para el listado (tabla) de la prod de energia por tipo  recurso energetico
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaMDTipoRecursoEnergeticoData"></param>
        /// <param name="listaMDPotGenData"></param>
        /// <param name="listaInterTipoData"></param>
        /// <param name="listaInterTotalData"></param>
        /// <param name="listaFenergCtg"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaProdTipoRecurso(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData, List<ResultadoTotalGeneracion> listaMDPotGenData,
            List<ResultadoTotalGeneracion> listaInterTipoData, List<ResultadoTotalGeneracion> listaInterTotalData, List<SiFuenteenergiaDTO> listaFenergCtg)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);

            #region cabecera
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[2, 11];

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) //reporte anual
            {
                matrizCabecera[0, 0] = "Por tipo de Generación";
                matrizCabecera[0, 1] = "Últimos 3 meses";
                matrizCabecera[0, 4] = "Acumulada Anual";
                matrizCabecera[0, 7] = "Hace dos años";

                matrizCabecera[1, 1] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango2Ant_FechaFin.Month), (objFecha.AnioAct.Rango2Ant_FechaFin.Year).ToString().Substring(2));
                matrizCabecera[1, 2] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango1Ant_FechaFin.Month), (objFecha.AnioAct.Rango1Ant_FechaFin.Year).ToString().Substring(2));
                matrizCabecera[1, 3] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));



                matrizCabecera[1, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                matrizCabecera[1, 5] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                matrizCabecera[1, 6] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                matrizCabecera[1, 8] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);

            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
                {
                    matrizCabecera[0, 0] = "Por tipo de Generación";
                    matrizCabecera[0, 1] = "Últimos 3 meses";
                    matrizCabecera[0, 4] = "Año anterior";
                    matrizCabecera[0, 6] = string.Format("Generación Acumulada de Enero a {0} ", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));

                    matrizCabecera[1, 1] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango2Ant_FechaFin.Month), (objFecha.AnioAct.Rango2Ant_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 2] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango1Ant_FechaFin.Month), (objFecha.AnioAct.Rango1Ant_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 3] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));

                    matrizCabecera[1, 4] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.AddYears(-1).Year).ToString().Substring(2));
                    matrizCabecera[1, 5] = "Var(%)";

                    matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 8] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                    matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 10] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);
                }
                else // Reportes semanales
                {
                    matrizCabecera[0, 0] = "Por tipo de Recurso Energético";
                    matrizCabecera[0, 1] = string.Format("Semana operativa {0}", anioSemIni.Item1);
                    matrizCabecera[0, 4] = "Semana operativa año anterior";
                    matrizCabecera[0, 6] = string.Format("Generación Acumulada del 01 de enero al {0} de {1}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));

                    matrizCabecera[1, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).SemanaFechaDesc;

                    matrizCabecera[1, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 5] = "Var (%)";

                    matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 8] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                    matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 10] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);
                }
            }



            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            foreach (var regFE in listaFenergCtg)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();
                List<string> filtroDatos = new List<string>();

                var listaXFe = listaMDTipoRecursoEnergeticoData.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();

                ResultadoTotalGeneracion regProdGenXFeAnio3 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenXFeAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeTotalVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcum1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                datos.Add(regProdGenXFeAnio3.Meditotal);
                datos.Add(regProdGenXFeAnio2.Meditotal);
                datos.Add(regProdGenXFeAnio0.Meditotal);
                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo en reporte anual
                {
                    datos.Add(regProdGenXFeAnio1.Meditotal);
                    datos.Add(regProdGenXFeTotalVarAnio0.Meditotal);
                }

                datos.Add(regProdGenXFeAcum0.Meditotal);
                datos.Add(regProdGenXFeAcum1.Meditotal);
                datos.Add(regProdGenXFeAcumVarAnio0.Meditotal);

                datos.Add(regProdGenXFeAcum2.Meditotal);
                datos.Add(regProdGenXFeAcumVarAnio1.Meditotal);

                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAnio3.FiltroCeldaDato.FechaIni, regProdGenXFeAnio3.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAnio2.FiltroCeldaDato.FechaIni, regProdGenXFeAnio2.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAnio0.FiltroCeldaDato.FechaIni, regProdGenXFeAnio0.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));

                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAnio1.FiltroCeldaDato.FechaIni, regProdGenXFeAnio1.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAcum0.FiltroCeldaDato.FechaIni, regProdGenXFeAcum0.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAcum1.FiltroCeldaDato.FechaIni, regProdGenXFeAcum1.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAcum2.FiltroCeldaDato.FechaIni, regProdGenXFeAcum2.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add("");

                registro.Nombre = regFE.Fenergnomb;
                registro.ListaData = datos;
                registro.ListaFiltroData = filtroDatos;

                registros.Add(registro);
            }

            //Potencia generada en el  SEIN
            ResultadoTotalGeneracion regProdGenAnio3 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio2 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regProdGenAnio1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

            ResultadoTotalGeneracion regProdGenAcum0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regProdGenAcum1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regProdGenAcum2 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            RegistroReporte registro0 = new RegistroReporte();
            List<decimal?> datos0 = new List<decimal?>();
            List<string> filtroDatos0 = new List<string>();

            datos0.Add(regProdGenAnio3.Meditotal);
            datos0.Add(regProdGenAnio2.Meditotal);
            datos0.Add(regProdGenAnio0.Meditotal);

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo en reporte anual
            {
                datos0.Add(regProdGenAnio1.Meditotal);
                datos0.Add(regProdGenTotalVarAnio0.Meditotal);
            }

            datos0.Add(regProdGenAcum0.Meditotal);
            datos0.Add(regProdGenAcum1.Meditotal);
            datos0.Add(regProdGenAcumVarAnio0.Meditotal);

            datos0.Add(regProdGenAcum2.Meditotal);
            datos0.Add(regProdGenAcumVarAnio1.Meditotal);

            registro0.Nombre = objFecha.EsReporteXMes ? "Producción Total" : "Potencia generada en el  SEIN";
            registro0.ListaData = datos0;
            registro0.EsFilaResumen = true;

            registros.Add(registro0);

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo en reporte anual
            {

                //Tipo de interconexion
                var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" },
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" }
                                }.ToList();

                foreach (var tinter in listaTinter)
                {
                    RegistroReporte registro1 = new RegistroReporte();
                    datos0 = new List<decimal?>();
                    filtroDatos0 = new List<string>();

                    var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                    ResultadoTotalGeneracion regInterAnio3 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                    ResultadoTotalGeneracion regInterAnio2 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                    ResultadoTotalGeneracion regInterAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                    ResultadoTotalGeneracion regInterAnio1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                    ResultadoTotalGeneracion regInterTotalVarAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                    ResultadoTotalGeneracion regInterAcum0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                    ResultadoTotalGeneracion regInterAcum1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                    ResultadoTotalGeneracion regInterAcumVarAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                    ResultadoTotalGeneracion regInterAcum2 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                    ResultadoTotalGeneracion regInterAcumVarAnio1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                    datos0.Add(regInterAnio3.Meditotal);
                    datos0.Add(regInterAnio2.Meditotal);
                    datos0.Add(regInterAnio0.Meditotal);

                    datos0.Add(regInterAnio1.Meditotal);
                    datos0.Add(regInterTotalVarAnio0.Meditotal);

                    datos0.Add(regInterAcum0.Meditotal);
                    datos0.Add(regInterAcum1.Meditotal);
                    datos0.Add(regInterAcumVarAnio0.Meditotal);

                    datos0.Add(regInterAcum2.Meditotal);
                    datos0.Add(regInterAcumVarAnio1.Meditotal);

                    filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAnio3.FiltroCeldaDato.FechaIni, regInterAnio3.FiltroCeldaDato.FechaFin));
                    filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAnio2.FiltroCeldaDato.FechaIni, regInterAnio2.FiltroCeldaDato.FechaFin));
                    filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAnio0.FiltroCeldaDato.FechaIni, regInterAnio0.FiltroCeldaDato.FechaFin));

                    filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAnio1.FiltroCeldaDato.FechaIni, regInterAnio1.FiltroCeldaDato.FechaFin));
                    filtroDatos0.Add("");

                    filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAcum0.FiltroCeldaDato.FechaIni, regInterAcum0.FiltroCeldaDato.FechaFin));
                    filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAcum1.FiltroCeldaDato.FechaIni, regInterAcum1.FiltroCeldaDato.FechaFin));
                    filtroDatos0.Add("");

                    filtroDatos0.Add(string.Format("verTablaInterconexion('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}')", regInterAcum2.FiltroCeldaDato.FechaIni, regInterAcum2.FiltroCeldaDato.FechaFin));
                    filtroDatos0.Add("");

                    registro1.Nombre = tinter.Nombre;
                    registro1.ListaData = datos0;
                    registro1.ListaFiltroData = filtroDatos0;

                    registros.Add(registro1);

                }

                //Intercambios Internacionales
                ResultadoTotalGeneracion regInterTotalAnio3 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regInterTotalAnio2 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regInterTotalAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regInterTotalAnio1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regInterTotalTotalVarAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regInterTotalAcum0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regInterTotalAcum1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regInterTotalAcumVarAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regInterTotalAcum2 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regInterTotalAcumVarAnio1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                RegistroReporte registro2 = new RegistroReporte();
                datos0 = new List<decimal?>();

                datos0.Add(regInterTotalAnio3.Meditotal);
                datos0.Add(regInterTotalAnio2.Meditotal);
                datos0.Add(regInterTotalAnio0.Meditotal);

                datos0.Add(regInterTotalAnio1.Meditotal);
                datos0.Add(regInterTotalTotalVarAnio0.Meditotal);

                datos0.Add(regInterTotalAcum0.Meditotal);
                datos0.Add(regInterTotalAcum1.Meditotal);
                datos0.Add(regInterTotalAcumVarAnio0.Meditotal);

                datos0.Add(regInterTotalAcum2.Meditotal);
                datos0.Add(regInterTotalAcumVarAnio1.Meditotal);

                registro2.Nombre = "Intercambios Internacionales";
                registro2.ListaData = datos0;
                registro2.EsFilaResumen = true;

                registros.Add(registro2);
            }

            tabla.ListaRegistros = registros;

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                // Adicionamos los pie de pagina
                PieReporte pie = new PieReporte();
                List<string> lstPie = new List<string>();
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
                    lstPie.Add(NotasPieWebInformeMensual.Cuadro1_Reporte_2p2);
                else
                {
                    lstPie.Add(NotasPieWebInformeSemanal.Cuadro1_Reporte_2p2);
                    if (DateTime.IsLeapYear(objFecha.AnioAct.NumAnio))
                        lstPie.Add(string.Format(NotasPieWebInformeSemanal.Cuadro1_Reporte_2p2_1, objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month)));
                }
                pie.ListaDescripcion = lstPie;
                tabla.Leyenda = pie;
            }

            #endregion

            return tabla;
        }

        /// <summary>
        /// Genera el grafico de la participacion general de los RER para reporte Produccion por RER
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoWeb"></param>
        /// <param name="filaIniGrafico"></param>
        public static void GenerarCharExcelGraficoProdTipolRER(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoWeb, int filaIniGrafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var miChart = ws.Drawings["graficoProdTipoRec"] as ExcelChart;

            if (graficoWeb.Series.Count() > 0)
            {
                miChart.SetPosition(filaIniGrafico, 0, 2, 0);

                int filaIniDataG = 100;
                int coluIniDataG = 20;
                int ultimaFilaSerie = filaIniDataG + graficoWeb.Series.Count - 1;

                graficoWeb.Series = graficoWeb.Series.OrderByDescending(x => x.Acumulado).ToList();

                for (int i = 0; i < graficoWeb.Series.Count; i++)
                {
                    ws.Cells[filaIniDataG + i, coluIniDataG].Value = graficoWeb.Series[i].Name;
                    ws.Cells[filaIniDataG + i, coluIniDataG + 1].Value = graficoWeb.Series[i].Acumulado;
                }

                //conectamos data con el grafico Pie
                miChart.Series[0].Series = ExcelRange.GetAddress(filaIniDataG, coluIniDataG + 1, ultimaFilaSerie, coluIniDataG + 1);
                miChart.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG, coluIniDataG, ultimaFilaSerie, coluIniDataG);

                #region Texto_Anotacion_3

                int filaPie = filaIniGrafico + 20;
                string texto = UtilAnexoAPR5.EscogerAnotacion("2.2", 4, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaPie, 3, texto + graficoWeb.Subtitle);

                #endregion

                UtilExcel.CeldasExcelAgrupar(ws, filaPie, 3, filaPie, 13);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaPie, 3, filaPie, 13, "Centro");
            }
            else
            {
                miChart.SetSize(0, 0);
            }

        }

        /// <summary>
        /// Genera el grafico de de Generacion por semana para el reporte de Generaacion por Recurso
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="grafico"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="filaIniGrafico"></param>        
        public static void GenerarCharExcelGrafGeneracionSemana(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb grafico, int tipoResultadoFecha, int filaIniGrafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            GraficoWeb miGraficoWeb = grafico;

            string titulo = miGraficoWeb.TitleText;

            string nombreGrafico = string.Empty;
            int posicionX = 0;
            int coluIniTabla = 0;
            int miWrap = 0;
            int numG = 0;
            int posicionY = filaIniGrafico;

            switch (tipoResultadoFecha)
            {
                case PR5ConstanteFecha.ValorAnioAct_SemAct:
                    nombreGrafico = "graficoGeneracionSemana";
                    posicionX = 2;
                    coluIniTabla = 18;
                    miWrap = 4;
                    numG = 4;
                    break;
                case PR5ConstanteFecha.ValorAnioAct_Acum:
                    nombreGrafico = "graficoGeneracionAcumulada";
                    posicionX = 7;
                    coluIniTabla = 21;
                    miWrap = 7;
                    numG = 5;
                    break;
            }

            ExcelChart miChart = ws.Drawings[nombreGrafico] as ExcelChart;
            if (miGraficoWeb.Series.Count > 0)
            {

                miChart.SetPosition(posicionY, 0, posicionX, 0);
                miChart.Title.Text = titulo;
                miChart.Title.Font.Bold = true;
                miChart.Title.Font.Size = 11;

                int filaX = 0;
                foreach (var serie in miGraficoWeb.Series)
                {
                    ws.Cells[80 + filaX, coluIniTabla].Value = serie.Name;
                    ws.Cells[80 + filaX, coluIniTabla + 1].Value = serie.Acumulado;
                    filaX++;
                }


                miChart.Series[0].Series = ExcelRange.GetAddress(80, coluIniTabla + 1, 80 + miGraficoWeb.Series.Count - 1, coluIniTabla + 1);
                miChart.Series[0].XSeries = ExcelRange.GetAddress(80, coluIniTabla, 80 + miGraficoWeb.Series.Count - 1, coluIniTabla);

                #region Texto_Anotacion_3

                string texto = UtilAnexoAPR5.EscogerAnotacion("2.2", numG, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaIniGrafico + 20, posicionX + 1, texto + miGraficoWeb.Subtitle);

                #endregion

                UtilExcel.CeldasExcelAgrupar(ws, filaIniGrafico + 20, posicionX + 1, filaIniGrafico + 20, posicionX + 1 + miWrap - 1);
                UtilExcel.CeldasExcelWrapText(ws, filaIniGrafico + 20, posicionX + 1, filaIniGrafico + 20, posicionX + 1 + miWrap - 1);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniGrafico + 20, posicionX + 1, filaIniGrafico + 20, posicionX + 1 + miWrap - 1, "Centro");
                ws.Row(filaIniGrafico + 20).Height = 30;

            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el grafico de evolucion Semanal para el reporte de Generaacion por Recurso
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoEvoSem"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="ultimaFilaGraf2"></param>
        public static void GenerarCharExcelGraficoEvolSemanalEjec(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoEvoSem, int filaIniGrafico, out int ultimaFilaGraf2)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            ultimaFilaGraf2 = 0;

            int filaAnio = 40;
            int coluAnio = 27;
            int ultFila;

            GraficoWeb miGraficoWeb = graficoEvoSem;

            int numSeries = miGraficoWeb.Series.Count();


            int fil = 0;
            foreach (var numSem in miGraficoWeb.XAxisCategories)
            {
                ws.Cells[filaAnio + 1 + fil, coluAnio + 1].Value = numSem;
                fil++;
            }

            int coluX = 0;
            foreach (var recurso in miGraficoWeb.Series)
            {
                ws.Cells[filaAnio, coluAnio + 2 + coluX].Value = recurso.Name;

                int filaX = 0;


                foreach (var dataRec in miGraficoWeb.SeriesData[coluX])
                {
                    ws.Cells[filaAnio + 1 + filaX, coluAnio + 2 + coluX].Value = dataRec / 100;
                    ws.Cells[filaAnio + 1 + filaX, coluAnio + 2 + coluX].Style.Numberformat.Format = "#,##0.00%";
                    filaX++;
                }
                coluX++;
            }

            ultFila = miGraficoWeb.SeriesData.First().Count();


            ExcelChart miChart = ws.Drawings["graficoEvolucionSemanal"] as ExcelChart;


            miChart.Title.Text = miGraficoWeb.TitleText;


            if (miGraficoWeb.Series.Count > 0)
            {

                miChart.SetPosition(filaIniGrafico, 0, 2, 0);
                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < numSeries; i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                for (int pto = 0; pto < miChart.Series.Count; pto++)
                {

                    miChart.Series[pto].Series = ExcelRange.GetAddress(filaAnio + 1, coluAnio + 2 + pto, filaAnio + ultFila, coluAnio + 2 + pto);
                    miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaAnio + 1, coluAnio + 1, filaAnio + ultFila, coluAnio + 1);
                    miChart.Series[pto].Header = (string)ws.Cells[filaAnio, coluAnio + 2 + pto].Value;
                }

                #region Texto_Anotacion_3

                string texto = UtilAnexoAPR5.EscogerAnotacion("2.2", 3, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaIniGrafico + 26, 2, texto + miGraficoWeb.Subtitle);

                #endregion

                UtilExcel.CeldasExcelAgrupar(ws, filaIniGrafico + 26, 2, filaIniGrafico + 26, 13);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniGrafico + 26, 2, filaIniGrafico + 26, 13, "Centro");

                ultimaFilaGraf2 = filaIniGrafico + 26;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el grafico de evolucion Semanal para el reporte de Generaacion por Recurso
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoEvoSem"></param>
        /// <param name="listaFenerg"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="ultimaFilaGraf2"></param>
        public static void GenerarCharExcelGraficoEvolSemanal(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoEvoSem, List<SiFuenteenergiaDTO> listaFenerg, int filaIniGrafico, out int ultimaFilaGraf2)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            ultimaFilaGraf2 = 0;

            int filaAnio = 40;
            int coluAnio = 27;
            int ultFila;

            GraficoWeb miGraficoWeb = graficoEvoSem;

            int fil = 0;
            foreach (var anio in miGraficoWeb.Categorias)
            {
                ws.Cells[filaAnio + 1 + fil, coluAnio].Value = anio.Name;

                foreach (var semanas in anio.Categories)
                {
                    ws.Cells[filaAnio + 1 + fil, coluAnio + 1].Value = semanas;
                    fil++;
                }
            }

            int coluX = 0;
            foreach (var recurso in miGraficoWeb.Series)
            {
                ws.Cells[filaAnio, coluAnio + 2 + coluX].Value = recurso.Name;

                int filaX = 0;


                foreach (var dataRec in miGraficoWeb.SeriesData[coluX])
                {
                    ws.Cells[filaAnio + 1 + filaX, coluAnio + 2 + coluX].Value = dataRec / 100;
                    ws.Cells[filaAnio + 1 + filaX, coluAnio + 2 + coluX].Style.Numberformat.Format = "#,##0.00%";
                    filaX++;
                }
                coluX++;
            }

            ultFila = miGraficoWeb.SeriesData.First().Count();


            ExcelChart miChart = ws.Drawings["graficoEvolucionSemanal"] as ExcelChart;


            miChart.Title.Text = miGraficoWeb.TitleText;


            if (miGraficoWeb.Series.Count > 0)
            {

                miChart.SetPosition(filaIniGrafico, 0, 2, 0);
                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < listaFenerg.Count(); i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                for (int pto = 0; pto < miChart.Series.Count; pto++)
                {

                    miChart.Series[pto].Series = ExcelRange.GetAddress(filaAnio + 1, coluAnio + 2 + pto, filaAnio + ultFila, coluAnio + 2 + pto);
                    miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaAnio + 1, coluAnio, filaAnio + ultFila, coluAnio + 1);
                    miChart.Series[pto].Header = (string)ws.Cells[filaAnio, coluAnio + 2 + pto].Value;
                }

                #region Texto_Anotacion_3

                string texto = UtilAnexoAPR5.EscogerAnotacion("2.2", 3, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaIniGrafico + 26, 2, texto + miGraficoWeb.Subtitle);

                #endregion

                UtilExcel.CeldasExcelAgrupar(ws, filaIniGrafico + 26, 2, filaIniGrafico + 26, 13);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniGrafico + 26, 2, filaIniGrafico + 26, 13, "Centro");

                ultimaFilaGraf2 = filaIniGrafico + 26;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el grafico de comparacion de producción para el reporte de Generaacion por Recurso
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoCompProd"></param>
        /// <param name="numRecursos"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="ultimaFilaGrafico"></param>
        public static void GenerarCharExcelGraficoComparacionProdRecEnergetico(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoCompProd, int numRecursos, int filaIniGrafico, out int ultimaFilaGrafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniLista = 10;
            int filaFinLista = filaIniLista + numRecursos - 1;
            int coluIniLista = 3;

            ExcelChart miChart = ws.Drawings["graficoProdTipoRecurso"] as ExcelChart;

            if (numRecursos > 0)
            {
                miChart.SetPosition(filaIniGrafico, 0, 2, 0);
                int col = 0;
                for (int pto = 0; pto < 3; pto++)
                {
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo en reporte anual
                    {
                        if (pto == 0) col = -2;
                        if (pto == 1) col = -1;
                        if (pto == 2) col = 1;
                    }
                    else // los demas reportes
                    {
                        if (pto == 1) col = 1;
                        if (pto == 2) col = 3;
                    }

                    miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniLista, coluIniLista + 6 + col, filaFinLista, coluIniLista + 6 + col);
                    miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniLista, coluIniLista, filaFinLista, coluIniLista);
                    miChart.Series[pto].Header = (string)ws.Cells[filaIniLista - 1, coluIniLista + 6 + col].Value;
                }

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
                {
                    #region Texto_Anotacion_3

                    string texto = UtilAnexoAPR5.EscogerAnotacion("2.2", 2, tipoVistaReporte, tipoDoc);
                    UtilExcel.FormatoNotaNegrita(ws, filaIniGrafico + 31, 3, texto + graficoCompProd.Subtitle);

                    #endregion

                    UtilExcel.CeldasExcelAgrupar(ws, filaIniGrafico + 31, 3, filaIniGrafico + 31, 13);
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniGrafico + 31, 3, filaIniGrafico + 31, 13, "Centro");
                }
                ultimaFilaGrafico = filaIniGrafico + 31 - 1;
            }
            else
            {
                miChart.SetSize(0, 0);
                ultimaFilaGrafico = 0;
            }
        }

        /// <summary>
        /// Genera la tabla del  excel para el reporte de Generaacion por Recurso
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="numRecursos"></param>
        /// <param name="ultimaFilaTabla"></param>
        public static void GenerarCharExcelListadoProdTipoRecursoEnergetico(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, out int numRecursos, out int ultimaFilaTabla)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniRecurso = 8;
            int coluIniRecurso = 3;

            int filaIniData = filaIniRecurso + 2;
            int coluIniData = coluIniRecurso;

            int ultimaFila = filaIniData + registros.Count - 1;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos("4", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos("4", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            #region cabecera

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual, tiene menos columnas
            {
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 3].Value = dataCab[1, 3];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 4].Value = dataCab[1, 4];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 5].Value = dataCab[1, 5];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 8].Value = dataCab[1, 8];

                ultimaColu = coluIniRecurso + 8;
            }
            else
            {
                ws.Cells[filaIniRecurso, coluIniRecurso + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniRecurso, coluIniRecurso + 6].Value = dataCab[0, 6];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 3].Value = dataCab[1, 3];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 4].Value = dataCab[1, 4];

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 8].Value = dataCab[1, 8];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 9].Value = dataCab[1, 9];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 10].Value = dataCab[1, 10];


                ultimaColu = coluIniRecurso + 10;
            }

            #endregion

            #region cuerpo

            numRecursos = registros.Count - 4;

            int filaX = 0;
            int filaProdTotal = filaIniData + numRecursos;
            foreach (var reg in registros)
            {
                ws.Cells[filaIniData + filaX, coluIniData + 0].Value = reg.Nombre;
                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
                    {
                        if (c == 5 || c == 7) //con signo  de %
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col / 100;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00%";
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00";
                        }
                    }
                    else
                    {
                        if (c == 4 || c == 7 || c == 9) //con signo  de %
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col / 100;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00%";
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00";
                        }
                    }


                    c++;
                }

                filaX++;
            }

            #region Formato Cuerpo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.BorderCeldas5_1(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);
            UtilExcel.CeldasExcelEnNegrita(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.BorderCeldas5_1(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
            UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);

            UtilExcel.BorderCeldas5_1(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

            UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso, coluIniRecurso + 1, ultimaFila, coluIniData + 3);
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
                UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso, coluIniRecurso + 4, ultimaFila, coluIniData + 6);
            else
                UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso, coluIniRecurso + 4, ultimaFila, coluIniData + 5);
            UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso + 1, coluIniRecurso + 6, ultimaFila, coluIniData + 8);
            #endregion

            ultimaFilaTabla = ultimaFila;

            if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                #region Texto_Anotacion_3
                string texto = UtilAnexoAPR5.EscogerAnotacion("2.2", 1, tipoVistaReporte, tipoDoc);
                tablaData.Leyenda.ListaDescripcion[0] = texto + tablaData.Leyenda.ListaDescripcion[0];

                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, tablaData.Leyenda.ListaDescripcion);

                #endregion
            }

            #endregion
        }

        /// <summary>
        /// Método que genera el detalle de la lista de Reporte de la Producción por tipo de Generación
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ReporteProdXTipoRecursoEnergeticoHtml(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 980px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 950px;'>");
            #region cabecera

            if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo para el caso de informe anual
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th rowspan='2' style='width: 240px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan='3'>{0}</th>", dataCab[0, 4]);
                strHtml.AppendFormat("<th colspan='2' style=''>{0}</th>", dataCab[0, 7]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 1]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 2]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 3]);


                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 5]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 6].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 7]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");
            }
            else // para los demas informes
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th rowspan='2' style='width: 240px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan='2'>{0}</th>", dataCab[0, 4]);
                strHtml.AppendFormat("<th colspan='5' style=''>{0}</th>", dataCab[0, 6]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 1]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 2]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 3]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 5]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 6]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 7]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 9]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 10].Replace("\n", "<br>"));
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");
            }


            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            int fila = 0;
            foreach (var reg in registros)
            {
                if (reg.EsFilaResumen)  // en negrita
                    strHtml.Append("<tr style = 'font-weight:bold; height: 32px;'>");
                else
                    strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;'>{0}</td>", reg.Nombre);

                int columna = 0;
                foreach (decimal? colData in reg.ListaData)
                {
                    string eventoJs = "";
                    if (reg.ListaFiltroData != null && !string.IsNullOrEmpty(reg.ListaFiltroData[columna]))
                        eventoJs = string.Format(" onclick=\"{0};\" ", reg.ListaFiltroData[columna]);

                    if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo para el caso de informe anual
                    {
                        if (columna == 5 || columna == 7) //con signo  de %
                            strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(colData.HasValue ? colData : null, nfi));
                        else
                            strHtml.AppendFormat("<td class='alignValorRight' {1}>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(colData.HasValue ? colData : null, nfi), eventoJs);
                    }
                    else // reportes semanales y reporte mensual
                    {
                        if (columna == 4 || columna == 7 || columna == 9) //con signo  de %
                            strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(colData.HasValue ? colData : null, nfi));
                        else
                            strHtml.AppendFormat("<td class='alignValorRight' {1}>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(colData.HasValue ? colData : null, nfi), eventoJs);
                    }

                    columna++;
                }

                strHtml.Append("</tr>");
                fila++;
            }
            strHtml.Append("</tbody>");


            strHtml.Append("</table>");

            #endregion

            if (tablaData.ReptiCodiTabla != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                var contador = 0;
                foreach (var descripcion in tablaData.Leyenda.ListaDescripcion)
                {
                    strHtml.AppendFormat("<div style='margin-top: {1}px;'>{0}</div>", descripcion, contador > 0 ? 5 : 15);
                    contador++;
                }
            }
            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Comparación de la producción de energía eléctrica acumulada por tipo de generación periodo 01 de enero al fecha fin
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaMDTipoRecursoEnergeticoData"></param>
        /// <param name="listaFenergCtgInput"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoComparacionProduccionEnergiaAcumuladaXTipoRecursoEnergetico(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                    List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData, List<SiFuenteenergiaDTO> listaFenergCtgInput)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            var listaFenergCtg = listaFenergCtgInput.OrderByDescending(x => x.Fenergorden).ToList();

            var subtitulo = "";
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                subtitulo = string.Format(NotasPieWebInformeMensual.Grafico1_Reporte_2p2, EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToLower());
            else
                subtitulo = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_2p2, objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));

            GraficoWeb grafico = new GraficoWeb();
            grafico.Subtitle = subtitulo;
            grafico.SeriesData = new decimal?[listaFenergCtg.Count()][];

            grafico.XAxisCategories = listaFenergCtg.Select(x => x.Fenergnomb).ToList();
            grafico.YaxixTitle = "GWh";

            List<RegistroSerie> seriesData = new List<RegistroSerie>();

            //Data para los ultimos 3 años
            for (int cc = 0; cc <= 2; cc++)
            {
                int tipoFecha = 0;

                RegistroSerie serieProd = new RegistroSerie();
                switch (cc)
                {
                    case 0:
                        serieProd.Color = "#46B054"; //verde
                        tipoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                        break;
                    case 1:
                        serieProd.Color = "#C0504D";
                        tipoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                        break;
                    case 2:
                        serieProd.Color = "#19569C"; //azul
                        tipoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        break;
                }

                List<ResultadoTotalGeneracion> listaXAcum = listaMDTipoRecursoEnergeticoData.Where(x => x.TipoResultadoFecha == tipoFecha).ToList();

                serieProd.Name = listaAnio[cc];
                serieProd.Data = new List<DatosSerie>();

                foreach (var fenerg in listaFenergCtg)
                {
                    DatosSerie serie = new DatosSerie();
                    serie.Y = listaXAcum.Find(x => x.Fenergcodi == fenerg.Fenergcodi).Meditotal;
                    serieProd.Data.Add(serie);
                }

                seriesData.Add(serieProd);
            }
            grafico.Series = seriesData;

            return grafico;
        }

        /// <summary>
        /// Grafico de barra de la participacion de Recursos Energeticos
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaEvolucionSemanal"></param>
        /// <param name="listaFenerg"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoEvolucionSemanalRecursosEnergeticos(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                List<ResultadoTotalGeneracion> listaEvolucionSemanal, List<SiFuenteenergiaDTO> listaFenerg)
        {
            //
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            int nroSemanasAnioActual = EPDate.f_numerosemana(objFecha.AnioAct.RangoAct_FechaFin);
            int nroSemanasAnioAnterior = EPDate.TotalSemanasEnAnho(Int32.Parse(listaAnio[0]), 6);

            List<string> listaSemanas1 = new List<string>();
            List<string> listaSemanas2 = new List<string>();
            List<List<string>> lstSemana = new List<List<string>>();
            for (int i = 1; i <= nroSemanasAnioAnterior; i++)
            {
                string sem = i.ToString();
                listaSemanas1.Add(i.ToString());
            }
            for (int i = 1; i <= nroSemanasAnioActual; i++)
            {
                listaSemanas2.Add(i.ToString());
            }
            lstSemana.Add(listaSemanas1);
            lstSemana.Add(listaSemanas2);

            /////////////////////////////////
            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = string.Format("EVOLUCIÓN SEMANAL DE LA UTILIZACIÓN DE LOS RECURSOS ENERGÉTICOS {0}/{1}", listaAnio[0], listaAnio[1]);
            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_2p2);
            grafico.YaxixMax = 100;
            grafico.SeriesData = new decimal?[listaFenerg.Count()][];
            grafico.Series = new List<RegistroSerie>();
            grafico.Categorias = new Categorias[lstSemana.Count];

            int indexC = 0;
            foreach (var item in lstSemana)
            {
                grafico.Categorias[indexC] = new Categorias() { Name = listaAnio[indexC], Categories = new string[item.Count] };

                var indexX = 0;
                foreach (var sem in item)
                {
                    grafico.Categorias[indexC].Categories[indexX] = sem;
                    indexX++;
                }
                indexC++;
            }

            //Número de series
            for (var i = 0; i < listaFenerg.Count(); i++)
            {
                var regFE = listaFenerg[i];
                grafico.Series.Add(new RegistroSerie());

                grafico.Series[i].Name = regFE.Fenergnomb;
                grafico.Series[i].Type = "column";
                grafico.Series[i].Color = regFE.Fenergcolor;
                grafico.Series[i].YAxis = 0;
                grafico.Series[i].YAxisTitle = "Participación";

                List<ResultadoTotalGeneracion> listaXFE = listaEvolucionSemanal.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();

                var ultimaSemanaAnioActual = EPDate.f_numerosemana(objFecha.AnioAct.RangoAct_FechaFin);
                int numSemanasGrafico = nroSemanasAnioAnterior + ultimaSemanaAnioActual;

                grafico.SeriesData[i] = new decimal?[numSemanasGrafico];

                var day = objFecha.Anio1Ant.Sem01_FechaIni;
                for (var j = 1; j <= numSemanasGrafico; j++)
                {
                    var reg = listaXFE.Find(x => x.Medifecha == day);
                    decimal? valor = reg != null ? reg.Meditotal : null;
                    grafico.SeriesData[i][j - 1] = valor;

                    day = day.AddDays(7);
                }
            }

            return grafico;
        }

        /// <summary>
        /// Genra grafico Pie con laparticipacion de recursos
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaParticipacionRecursosEnergeticosYRer"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoPieParticipacionRecursosEnergeticos(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosYRer, int tipoResultadoFecha)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);
            string strSemanaMD = anioSemIni.Item1 + " - " + anioSemIni.Item2;

            string titulo = string.Empty;
            string subtitulo = string.Empty;

            List<ResultadoTotalGeneracion> listaData = new List<ResultadoTotalGeneracion>();
            switch (tipoResultadoFecha)
            {
                case PR5ConstanteFecha.ValorAnioAct_SemAct:
                    titulo = string.Format("GENERACIÓN SEMANA N° {0}", strSemanaMD);
                    subtitulo = string.Format(NotasPieWebInformeSemanal.Grafico3_Reporte_2p2, strSemanaMD);
                    listaData = listaParticipacionRecursosEnergeticosYRer.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).ToList();
                    break;
                case PR5ConstanteFecha.ValorAnioAct_Acum:
                    titulo = string.Format("GENERACIÓN ACUMULADA ANUAL A LA SEMANA N° {0}", strSemanaMD);
                    subtitulo = string.Format(NotasPieWebInformeSemanal.Grafico4_Reporte_2p2, objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));
                    listaData = listaParticipacionRecursosEnergeticosYRer.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).ToList();
                    break;
            }

            GraficoWeb grafico = new GraficoWeb();

            grafico.TitleText = titulo;
            grafico.Subtitle = subtitulo;

            List<RegistroSerie> listaSerie = new List<RegistroSerie>();
            foreach (var cat in listaData)
            {
                RegistroSerie regSerie = new RegistroSerie();
                regSerie.Name = cat.Fenergnomb;
                regSerie.Acumulado = cat.Meditotal;
                //regSerie.Porcentaje = total > 0 ? regSerie.Acumulado / total * 100 : null;

                listaSerie.Add(regSerie);
            }

            grafico.Series = listaSerie;

            return grafico;
        }

        /// <summary>
        /// Grafico de barra de la participacion de Recursos Energeticos Ejecutivo
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaEvolucionSemanal"></param>
        /// <param name="listaFenerg"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoEvolucionSemanalRecursosEnergeticosEjecutivo(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaEvolucionSemanal, List<SiFuenteenergiaDTO> listaFenerg)
        {
            int nroSemanasAnioActual = objFecha.AnioAct.Max_Num_Sem;

            List<string> listaSemanas1 = new List<string>();
            for (int i = 1; i <= nroSemanasAnioActual; i++)
            {
                listaSemanas1.Add(i.ToString());
            }

            /////////////////////////////////
            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = string.Format("EVOLUCIÓN SEMANAL DE LA UTILIZACIÓN DE LOS RECURSOS ENERGÉTICOS");
            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_2p2);
            grafico.SeriesData = new decimal?[listaFenerg.Count()][];
            grafico.Series = new List<RegistroSerie>();
            grafico.YaxixTitle = "Participación";
            grafico.XAxisTitle = "Semanas";
            grafico.XAxisCategories = listaSemanas1;
            grafico.YaxixMax = 100;

            //Número de series
            for (var i = 0; i < listaFenerg.Count(); i++)
            {
                var regFE = listaFenerg[i];
                grafico.Series.Add(new RegistroSerie());

                grafico.Series[i].Name = regFE.Fenergnomb;
                grafico.Series[i].Type = "column";
                grafico.Series[i].Color = regFE.Fenergcolor;
                grafico.Series[i].YAxis = 0;

                List<ResultadoTotalGeneracion> listaXFE = listaEvolucionSemanal.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();

                grafico.SeriesData[i] = new decimal?[nroSemanasAnioActual];

                var day = objFecha.AnioAct.Sem01_FechaIni;
                for (var j = 1; j <= nroSemanasAnioActual; j++)
                {
                    var reg = listaXFE.Find(x => x.Medifecha == day);
                    decimal? valor = reg != null ? reg.Meditotal : null;
                    grafico.SeriesData[i][j - 1] = valor;

                    day = day.AddDays(7);
                }
            }

            return grafico;
        }

        /// <summary>
        /// Genra grafico Pie con laparticipacion de recursos
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaParticipacionRecursosEnergeticos"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoPieParticipacionRecursosEnergeticos(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticos)
        {
            GraficoWeb grafico = new GraficoWeb();

            grafico.TitleText = "PRODUCCIÓN DE ENERGÍA POR TIPO DE RECURSO SEMANA OPERATIVA";
            grafico.Subtitle = string.Format("Participación de la producción de energía eléctrica por tipo recurso energético durante la semana operativa {0}", objFecha.AnioAct.RangoAct_NumYAnio);

            List<RegistroSerie> listaSerie = new List<RegistroSerie>();
            foreach (var cat in listaParticipacionRecursosEnergeticos)
            {
                RegistroSerie regSerie = new RegistroSerie();
                regSerie.Name = cat.Fenergnomb;
                regSerie.Acumulado = cat.Meditotal;

                listaSerie.Add(regSerie);
            }

            grafico.Series = listaSerie;

            return grafico;
        }

        #endregion

        #region B.3. Producción RER

        #region Excel

        /// <summary>
        /// Genera el listado sobre la produccion por RER para el reporte Produccion por RER
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="numRecursos"></param>
        /// <param name="ultimaFilaTabla"></param>
        public static void GenerarCharExcelListadoProduccionPorRER(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, out int numRecursos, out int ultimaFilaTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            numRecursos = registros.Where(x => !x.EsFilaResumen).Count();

            int filaIniRecurso = 8;
            int coluIniRecurso = 3;

            int filaIniData = filaIniRecurso + 2;
            int coluIniData = coluIniRecurso;

            int ultimaFila = 0;
            int ultimaColu = 0;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos("5", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos("5", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            #region cabecera

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
            {

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 3].Value = dataCab[1, 3];

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 4].Value = dataCab[1, 4];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 5].Value = dataCab[1, 5];

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 8].Value = dataCab[1, 8];

                ultimaColu = coluIniRecurso + 8;
            }
            else // reporte mensual, y semanales
            {
                ws.Cells[filaIniRecurso, coluIniRecurso + 0].Value = dataCab[0, 0];
                ws.Cells[filaIniRecurso, coluIniRecurso + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniRecurso, coluIniRecurso + 4].Value = dataCab[0, 4];
                ws.Cells[filaIniRecurso, coluIniRecurso + 6].Value = dataCab[0, 6];

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 3].Value = dataCab[1, 3];

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 4].Value = dataCab[1, 4];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 5].Value = dataCab[1, 5];

                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 8].Value = dataCab[1, 8];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 9].Value = dataCab[1, 9];
                ws.Cells[filaIniRecurso + 1, coluIniRecurso + 10].Value = dataCab[1, 10];

                ultimaColu = coluIniRecurso + 10;
            }


            #endregion

            #region cuerpo

            //Fuente de energía categoria

            int filaProdTotal = 0;
            int filaX = 0;
            foreach (var reg in registros)
            {
                int colX = 0;
                foreach (var celda in reg.ListaCelda)
                {
                    decimal? numValor = null;
                    string strFormat = string.Empty;

                    if (celda.EsNumero)
                    {
                        numValor = celda.Valor;
                        if (numValor != null)
                        {
                            numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                        }
                        strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                        ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                    }
                    else
                    {
                        ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;
                    }
                    colX++;
                }

                filaProdTotal = filaProdTotal == 0 && reg.EsFilaResumen ? filaX : filaProdTotal;

                filaX++;
            }

            filaProdTotal = filaIniData + filaProdTotal;

            ultimaFila = filaIniData + filaX - 1;
            #region Formato Cuerpo
            ws.Row(filaProdTotal).Height = 22;
            ws.Row(ultimaFila).Height = 22;

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
            //UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
            //UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultFEmpresas, coluIniData);

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.BorderCeldas5_1(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);
            UtilExcel.CeldasExcelEnNegrita(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.BorderCeldas5_1(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
            UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);

            UtilExcel.BorderCeldas5_1(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

            //UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniRecurso, coluIniRecurso + 1, ultimaFila, coluIniData + 3);
            UtilExcel.BorderCeldas5_1(ws, filaIniRecurso, coluIniRecurso + 1, ultimaFila, coluIniData + 3);
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual                
                UtilExcel.BorderCeldas5_1(ws, filaIniRecurso, coluIniRecurso + 4, ultimaFila, coluIniData + 6);
            else
                UtilExcel.BorderCeldas5_1(ws, filaIniRecurso, coluIniRecurso + 4, ultimaFila, coluIniData + 5);
            UtilExcel.BorderCeldas5_1(ws, filaIniRecurso + 1, coluIniRecurso + 6, ultimaFila, coluIniData + 8);
            UtilExcel.BorderCeldas5_1(ws, filaIniRecurso, coluIniRecurso, ultimaFila, coluIniData);
            #endregion

            ultimaFilaTabla = ultimaFila;

            if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                #region Texto_Anotacion_3

                ultimaFila++;

                UtilExcel.FormatoNotaNegrita(ws, ultimaFila, coluIniData, tablaData.Leyenda.ListaDescripcion);

                #endregion
            }

            #endregion
        }

        /// <summary>
        /// Genera el grafico de la comparacion de produccion de los RER para reporte Produccion por RER
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="miGraficoWeb"></param>
        /// <param name="tipoDoc"></param>
        /// <param name="numRecursos"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="ultimaFilaGrafico"></param>
        public static void GenerarCharExcelGraficoComparacionProduccionProdRER(ExcelWorksheet ws, GraficoWeb miGraficoWeb, int tipoDoc, int numRecursos, int filaIniGrafico, out int ultimaFilaGrafico)
        {
            int filaIniLista = 10;
            int filaFinLista = filaIniLista + numRecursos - 1;
            int coluIniLista = 3;

            ExcelChart miChart = ws.Drawings["graficoComProdRER"] as ExcelChart;

            if (numRecursos > 0)
            {
                miChart.SetPosition(filaIniGrafico, 0, 2, 0);
                int col = 0;
                for (int pto = 0; pto < 3; pto++)
                {
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
                    {
                        if (pto == 0) col = coluIniLista + 7;
                        if (pto == 1) col = coluIniLista + 5;
                        if (pto == 2) col = coluIniLista + 4;
                    }
                    else // reporte mensual y semanales
                    {
                        if (pto == 0) col = coluIniLista + 9;
                        if (pto == 1) col = coluIniLista + 7;
                        if (pto == 2) col = coluIniLista + 6;
                    }
                    miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniLista, col, filaFinLista, col);
                    miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniLista, coluIniLista, filaFinLista, coluIniLista);
                    miChart.Series[pto].Header = (string)ws.Cells[filaIniLista - 1, col].Value;
                }

                #region Texto_Anotacion_3
                int filaPie = filaIniGrafico + 16;
                UtilExcel.FormatoNotaNegrita(ws, filaPie, 3, miGraficoWeb.Subtitle);

                #endregion
                ws.Row(filaPie).Height = 30;
                UtilExcel.CeldasExcelAgrupar(ws, filaPie, 3, filaPie, 13);

                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaPie, 3, filaPie, 13, "Centro");

                ultimaFilaGrafico = filaPie - 1;
            }
            else
            {
                miChart.SetSize(0, 0);
                ultimaFilaGrafico = filaIniGrafico;
            }
        }

        /// <summary>
        /// Genera el grafico de la participacion detallada de los RER para reporte Produccion por RER
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numRecursos"></param>
        /// <param name="graficoWeb"></param>
        /// <param name="filaInicialGrafico"></param>
        /// <param name="ultimaFilaGrafico"></param>
        public static void GenerarCharExcelGraficoParticipacionRER(ExcelWorksheet ws, int numRecursos, GraficoWeb graficoWeb, int filaInicialGrafico, out int ultimaFilaGrafico)
        {
            var miChart2 = ws.Drawings["graficoParticipacionRER"] as ExcelChart;
            ultimaFilaGrafico = filaInicialGrafico;

            if (graficoWeb != null && numRecursos > 0)
            {
                miChart2.SetPosition(filaInicialGrafico, 0, 2, 0);
                miChart2.SetSize(1000, 600);
                miChart2.Title.Text = graficoWeb.TitleText;
                miChart2.Title.Font.Size = 12;

                int filaIniDataG = 40;
                int coluIniDataG = 27;
                int ultimaFilaSerie;

                //Header y Series
                int fila = 0;
                foreach (var serie in graficoWeb.Series)
                {

                    foreach (var item in serie.Data)
                    {
                        if (item.Name != "RER")
                        {
                            ws.Cells[filaIniDataG + fila, coluIniDataG].Value = item.Name;
                            ws.Cells[filaIniDataG + fila, coluIniDataG + 1].Value = item.Y;

                            fila++;
                        }
                    }
                }
                ultimaFilaSerie = filaIniDataG + fila - 1;

                //conectamos data con el grafico
                miChart2.Series[0].Series = ExcelRange.GetAddress(filaIniDataG, coluIniDataG + 1, ultimaFilaSerie, coluIniDataG + 1);
                miChart2.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG, coluIniDataG, ultimaFilaSerie, coluIniDataG);

                #region Texto_Anotacion_3
                int filaPie = filaInicialGrafico + 32;
                UtilExcel.FormatoNotaNegrita(ws, filaPie, 3, graficoWeb.Subtitle);

                #endregion
                UtilExcel.CeldasExcelAgrupar(ws, filaPie, 3, filaPie, 13);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaPie, 3, filaPie, 13, "Centro");

                ultimaFilaGrafico = filaPie;
            }
            else
            {
                miChart2.SetSize(0, 0);
                UtilExcel.BorrarCeldasExcel(ws, 20, 27, 40, 35);
            }
        }

        /// <summary>
        /// Genera el grafico de la participacion general de los RER para reporte Produccion por RER
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="numRecursos"></param>
        /// <param name="graficoWeb"></param>
        /// <param name="filaIniGrafico"></param>
        public static void GenerarCharExcelGraficoParticipacionGeneralRER(ExcelWorksheet ws, int numRecursos, GraficoWeb graficoWeb, int filaIniGrafico)
        {
            var miChart = ws.Drawings["graficoParticipacionGralRER"] as ExcelChart;

            if (graficoWeb != null && numRecursos > 0)
            {
                miChart.SetPosition(filaIniGrafico, 0, 2, 0);

                int filaIniDataG = 60;
                int coluIniDataG = 27;
                int ultimaFilaSerie = filaIniDataG + graficoWeb.Series.Count - 1;

                graficoWeb.Series = graficoWeb.Series.OrderByDescending(x => x.Acumulado).ToList();

                for (int i = 0; i < graficoWeb.Series.Count; i++)
                {
                    ws.Cells[filaIniDataG + i, coluIniDataG].Value = graficoWeb.Series[i].Name;
                    ws.Cells[filaIniDataG + i, coluIniDataG + 1].Value = graficoWeb.Series[i].Acumulado;
                }

                //conectamos data con el grafico Pie
                miChart.Series[0].Series = ExcelRange.GetAddress(filaIniDataG, coluIniDataG + 1, ultimaFilaSerie, coluIniDataG + 1);
                miChart.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG, coluIniDataG, ultimaFilaSerie, coluIniDataG);

                #region Texto_Anotacion_3
                int filaPie = filaIniGrafico + 20;
                UtilExcel.FormatoNotaNegrita(ws, filaPie, 3, graficoWeb.Subtitle);
                #endregion
                UtilExcel.CeldasExcelAgrupar(ws, filaPie, 3, filaPie, 13);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaPie, 3, filaPie, 13, "Centro");
            }
            else
            {
                miChart.SetSize(0, 0);
            }

        }

        #endregion

        #region Servicio

        /// <summary>
        /// Genera la data para el listado (tabla) de la prod de energia por tipo  recurso energetico
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaRERData"></param>
        /// <param name="listaRERTotalData"></param>
        /// <param name="listaPartRERData"></param>
        /// <param name="listaFenergRER"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaProduccionRER(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<ResultadoTotalGeneracion> listaRERData,
            List<ResultadoTotalGeneracion> listaRERTotalData, List<ResultadoTotalGeneracion> listaPartRERData, List<SiFuenteenergiaDTO> listaFenergRER)
        {
            #region cabecera
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[2, 11];

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
            {
                matrizCabecera[0, 0] = "Por Recursos Energéticos Renovables (RER)";
                matrizCabecera[0, 1] = "Últimos 3 Meses";
                matrizCabecera[0, 4] = "Acumulado Anual";
                matrizCabecera[0, 7] = "Hace 2 años";

                matrizCabecera[1, 1] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango2Ant_FechaFin.Month), (objFecha.AnioAct.Rango2Ant_FechaFin.Year).ToString().Substring(2));
                matrizCabecera[1, 2] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango1Ant_FechaFin.Month), (objFecha.AnioAct.Rango1Ant_FechaFin.Year).ToString().Substring(2));
                matrizCabecera[1, 3] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));


                matrizCabecera[1, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                matrizCabecera[1, 5] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                matrizCabecera[1, 6] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                matrizCabecera[1, 8] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
                {

                    matrizCabecera[0, 0] = "Por Recursos Energéticos Renovables (RER)";
                    matrizCabecera[0, 1] = "Últimos 3 Meses";
                    matrizCabecera[0, 4] = "Año anterior";
                    matrizCabecera[0, 6] = string.Format("Generación Acumulada de Enero a {0} ", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));

                    matrizCabecera[1, 1] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango2Ant_FechaFin.Month), (objFecha.AnioAct.Rango2Ant_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 2] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango1Ant_FechaFin.Month), (objFecha.AnioAct.Rango1Ant_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 3] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));

                    matrizCabecera[1, 4] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.AddYears(-1).Year).ToString().Substring(2));
                    matrizCabecera[1, 5] = "Var(%)";

                    matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 8] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                    matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 10] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);
                }
                else //Reportes semanales
                {

                    matrizCabecera[0, 0] = "Por Recursos Energéticos Renovables (RER)";
                    matrizCabecera[0, 1] = string.Format("Semana operativa {0}", objFecha.AnioAct.RangoAct_Num);
                    matrizCabecera[0, 4] = "Semana operativa \naño anterior";
                    matrizCabecera[0, 6] = string.Format("Generación Acumulada del 01 de enero al {0} de {1}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));

                    matrizCabecera[1, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).SemanaFechaDesc;

                    matrizCabecera[1, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).SemanaFechaDesc;
                    matrizCabecera[1, 5] = "Var (%)";

                    matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 8] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var).SemanaFechaDesc);
                    matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 10] = string.Format("Var (%) \n {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var).SemanaFechaDesc);
                }
            }



            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            foreach (var regFE in listaFenergRER)
            {
                RegistroReporte registro = new RegistroReporte();
                List<CeldaReporte> datos = new List<CeldaReporte>();
                List<string> filtroDatos = new List<string>();

                var listaXFe = listaRERData.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();

                ResultadoTotalGeneracion regProdGenXFeAnio3 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenXFeAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeTotalVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcum1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                datos.Add(new CeldaReporte(regFE.Fenergnomb.Trim(), false));

                datos.Add(new CeldaReporte(regProdGenXFeAnio3.Meditotal, false, false));
                datos.Add(new CeldaReporte(regProdGenXFeAnio2.Meditotal, false, false));
                datos.Add(new CeldaReporte(regProdGenXFeAnio0.Meditotal, false, false));

                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
                {
                    datos.Add(new CeldaReporte(regProdGenXFeAnio1.Meditotal, false, false));
                    datos.Add(new CeldaReporte(regProdGenXFeTotalVarAnio0.Meditotal, true, true));
                }

                datos.Add(new CeldaReporte(regProdGenXFeAcum0.Meditotal, false, false));
                datos.Add(new CeldaReporte(regProdGenXFeAcum1.Meditotal, false, false));
                datos.Add(new CeldaReporte(regProdGenXFeAcumVarAnio0.Meditotal, true, true));

                datos.Add(new CeldaReporte(regProdGenXFeAcum2.Meditotal, false, false));
                datos.Add(new CeldaReporte(regProdGenXFeAcumVarAnio1.Meditotal, true, true));

                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAnio3.FiltroCeldaDato.FechaIni, regProdGenXFeAnio3.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAnio2.FiltroCeldaDato.FechaIni, regProdGenXFeAnio2.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAnio0.FiltroCeldaDato.FechaIni, regProdGenXFeAnio0.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));

                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAnio1.FiltroCeldaDato.FechaIni, regProdGenXFeAnio1.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAcum0.FiltroCeldaDato.FechaIni, regProdGenXFeAcum0.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAcum1.FiltroCeldaDato.FechaIni, regProdGenXFeAcum1.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaResumenProd('{0:dd/MM/yyyy}','{1:dd/MM/yyyy}',{2})", regProdGenXFeAcum2.FiltroCeldaDato.FechaIni, regProdGenXFeAcum2.FiltroCeldaDato.FechaFin, regProdGenXFeAnio3.FiltroCeldaDato.Tgenercodi));
                filtroDatos.Add("");

                registro.ListaCelda = datos;
                registro.ListaFiltroData = filtroDatos;

                registros.Add(registro);
            }

            //Potencia generada en el  SEIN
            ResultadoTotalGeneracion regProdGenAnio3 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio2 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regProdGenAnio1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

            ResultadoTotalGeneracion regProdGenAcum0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regProdGenAcum1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regProdGenAcum2 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            RegistroReporte registro0 = new RegistroReporte();
            List<CeldaReporte> datos0 = new List<CeldaReporte>();

            datos0.Add(new CeldaReporte("Producción Total RER (*)", true));

            datos0.Add(new CeldaReporte(regProdGenAnio3.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regProdGenAnio2.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regProdGenAnio0.Meditotal, false, true));

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                datos0.Add(new CeldaReporte(regProdGenAnio1.Meditotal, false, true));
                datos0.Add(new CeldaReporte(regProdGenTotalVarAnio0.Meditotal, true, true));
            }

            datos0.Add(new CeldaReporte(regProdGenAcum0.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regProdGenAcum1.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regProdGenAcumVarAnio0.Meditotal, true, true));

            datos0.Add(new CeldaReporte(regProdGenAcum2.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regProdGenAcumVarAnio1.Meditotal, true, true));

            registro0.ListaCelda = datos0;
            registro0.EsFilaResumen = true;

            registros.Add(registro0);


            //Participación RER en el SEIN (%)
            ResultadoTotalGeneracion regPartRERAnio3 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regPartRERAnio2 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regPartRERAnio0 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regPartRERAnio1 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regPartRERAcum0 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regPartRERAcum1 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);

            ResultadoTotalGeneracion regPartRERAcum2 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);

            RegistroReporte registro1 = new RegistroReporte();
            List<CeldaReporte> datos1 = new List<CeldaReporte>();

            datos1.Add(new CeldaReporte("Participación RER en el SEIN (%)", true));

            datos1.Add(new CeldaReporte(regPartRERAnio3.Meditotal, true, true));
            datos1.Add(new CeldaReporte(regPartRERAnio2.Meditotal, true, true));
            datos1.Add(new CeldaReporte(regPartRERAnio0.Meditotal, true, true));

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                datos1.Add(new CeldaReporte(regPartRERAnio1.Meditotal, true, true));
                datos1.Add(new CeldaReporte(null, true, true));
            }

            datos1.Add(new CeldaReporte(regPartRERAcum0.Meditotal, true, true));
            datos1.Add(new CeldaReporte(regPartRERAcum1.Meditotal, true, true));
            datos1.Add(new CeldaReporte(null, true, true));

            datos1.Add(new CeldaReporte(regPartRERAcum2.Meditotal, true, true));
            datos1.Add(new CeldaReporte(null, true, true));

            registro1.ListaCelda = datos1;
            registro1.EsFilaResumen = true;

            registros.Add(registro1);


            tabla.ListaRegistros = registros;

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                // Adicionamos los pie de pagina
                string texto = UtilAnexoAPR5.EscogerAnotacion("2.3", 1, objFecha.TipoVistaReporte, objFecha.TipoReporte);

                PieReporte pie = new PieReporte();
                List<string> lstPie = new List<string>();

                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                {
                    lstPie.Add(texto + NotasPieWebInformeMensual.Cuadro1_Reporte_2p3);
                    lstPie.Add("");
                }
                else
                {
                    lstPie.Add(texto + NotasPieWebInformeSemanal.Cuadro1_Reporte_2p3);
                    lstPie.Add(NotasPieWebInformeSemanal.Cuadro1_Reporte_2p3_1);
                }


                pie.ListaDescripcion = lstPie;

                //
                tabla.Leyenda = pie;
            }
            #endregion

            return tabla;
        }

        /// <summary>
        /// Comparación de la producción de energía eléctrica acumulada por tipo de generación periodo 01 de enero al fecha fin
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaRERTotalData"></param>
        /// <param name="listaFenergRER"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoComparacionProduccionRERAcumulada(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                    List<ResultadoTotalGeneracion> listaRERTotalData, List<SiFuenteenergiaDTO> listaFenergRER)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            string itemR = "";
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "2.3"; }
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "2.3"; }
            string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 2, objFecha.TipoVistaReporte, objFecha.TipoReporte);

            var subtitulo = "";

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
            {
                subtitulo = texto + string.Format(NotasPieWebInformeMensual.Grafico1_Reporte_2p3, EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToLower(), listaAnio[0], listaAnio[1], listaAnio[2]);
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                    subtitulo = "";
                else
                    subtitulo = texto + string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_2p3, objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), listaAnio[0], listaAnio[1], listaAnio[2]);
            }

            GraficoWeb grafico = new GraficoWeb();
            grafico.Subtitle = subtitulo;
            grafico.SeriesData = new decimal?[listaFenergRER.Count()][];

            grafico.XAxisCategories = listaFenergRER.Select(x => x.Fenergnomb).ToList();
            grafico.YaxixTitle = "GWh";

            List<RegistroSerie> seriesData = new List<RegistroSerie>();

            //Data para los ultimos 3 años
            for (int cc = 0; cc <= 2; cc++)
            {
                int tipoFecha = 0;

                RegistroSerie serieProd = new RegistroSerie();
                switch (cc)
                {
                    case 0:
                        serieProd.Color = "#46B054"; //verde
                        tipoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                        break;
                    case 1:
                        serieProd.Color = "#C0504D";
                        tipoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                        break;
                    case 2:
                        serieProd.Color = "#19569C"; //azul
                        tipoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        break;
                }

                List<ResultadoTotalGeneracion> listaXAcum = listaRERTotalData.Where(x => x.TipoResultadoFecha == tipoFecha).ToList();

                serieProd.Name = listaAnio[cc];
                serieProd.Data = new List<DatosSerie>();

                foreach (var tgen in listaFenergRER)
                {
                    DatosSerie serie = new DatosSerie();
                    serie.Y = listaXAcum.Find(x => x.Fenergcodi == tgen.Fenergcodi).Meditotal;
                    serieProd.Data.Add(serie);
                }

                seriesData.Add(serieProd);
            }
            grafico.Series = seriesData;

            return grafico;
        }

        /// <summary>
        /// GraficoPieParticipacionMatrizGeneracionSEIN
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaRERTotalData"></param>
        /// <param name="listaPotGenData"></param>
        /// <param name="listaPartRERData"></param>
        /// <param name="listaPartSEINAcum"></param>
        /// <param name="listaPartRERAcumActual"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoPieParticipacionMatrizGeneracionSEIN(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaRERTotalData, List<ResultadoTotalGeneracion> listaPotGenData, List<ResultadoTotalGeneracion> listaPartRERData
            , List<ResultadoTotalGeneracion> listaPartSEINAcum, List<ResultadoTotalGeneracion> listaPartRERAcumActual)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);

            //
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();
            ResultadoTotalGeneracion regProdGenAcum0 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regProdGenRERAcum0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regPartRERAcum0 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

            string texto = UtilAnexoAPR5.EscogerAnotacion("2.3", 3, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            var subtitulo = "";
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
            {
                subtitulo = texto + string.Format(NotasPieWebInformeMensual.Grafico2_Reporte_2p3, EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToLower(), objFecha.AnioAct.RangoAct_FechaIni.Year);
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
                    subtitulo = "";
                else
                    subtitulo = texto + string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_2p3, objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), anioSemIni.Item2);
            }
            GraficoWeb grafico = new GraficoWeb();

            grafico.TitleText = string.Format("PRODUCCIÓN TOTAL SEIN {0} = {1} GWh \nPRODUCCIÓN TOTAL RER {0} = {2} GWh ({3})"
               , anioSemIni.Item2, UtilAnexoAPR5.ImprimirValorTotalHtml(regProdGenAcum0.Meditotal, nfi), UtilAnexoAPR5.ImprimirValorTotalHtml(regProdGenRERAcum0.Meditotal, nfi), UtilAnexoAPR5.ImprimirVariacionHtml(regPartRERAcum0.Meditotal, nfi));

            grafico.Subtitle = subtitulo;

            List<RegistroSerie> listaSerie = new List<RegistroSerie>();

            //primer grafico
            RegistroSerie regSerieSein = new RegistroSerie();
            regSerieSein.Name = "Producción";
            regSerieSein.Center = "30%";
            regSerieSein.Data = new List<DatosSerie>();
            foreach (var reg in listaPartSEINAcum)
            {
                DatosSerie dato = new DatosSerie();
                dato.Name = reg.Fenergnomb;
                dato.Color = reg.Fenergcolor;
                dato.Y = Convert.ToDecimal(Math.Round(reg.Meditotal.GetValueOrDefault(0), 2));
                regSerieSein.Data.Add(dato);
            }
            listaSerie.Add(regSerieSein);

            //segundo grafico
            RegistroSerie regSerieRER = new RegistroSerie();
            regSerieRER.Name = "RER";
            regSerieRER.Center = "80%";
            regSerieRER.Data = new List<DatosSerie>();
            foreach (var reg in listaPartRERAcumActual)
            {
                DatosSerie dato = new DatosSerie();
                dato.Name = reg.Fenergnomb;
                dato.Color = reg.Fenergcolor;
                dato.Y = Convert.ToDecimal(Math.Round(reg.Meditotal.GetValueOrDefault(0), 2));
                regSerieRER.Data.Add(dato);
            }
            listaSerie.Add(regSerieRER);

            grafico.Series = listaSerie;

            return grafico;
        }

        /// <summary>
        /// Grafico web de participacion delRER en el SEIN
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaPartRERSemanaActual"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoPieParticipacionRER(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaPartRERSemanaActual)
        {
            GraficoWeb grafico = new GraficoWeb();

            grafico.TitleText = string.Format("PARTICIPACIÓN DE LAS RER EN EL SEIN");
            string texto = UtilAnexoAPR5.EscogerAnotacion("2.3", 4, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico3_Reporte_2p3, objFecha.AnioAct.RangoAct_NumYAnio);

            List<RegistroSerie> listaSerie = new List<RegistroSerie>();
            foreach (var cat in listaPartRERSemanaActual)
            {
                RegistroSerie regSerie = new RegistroSerie();
                regSerie.Name = cat.Tgenernomb;
                regSerie.Acumulado = Convert.ToDecimal(Math.Round(cat.Meditotal.GetValueOrDefault(0), 0));
                regSerie.Color = cat.Tgenercolor;

                listaSerie.Add(regSerie);
            }

            grafico.Series = listaSerie;

            return grafico;
        }

        #endregion

        /// <summary>
        /// Método que genera el Reporte de la Producción RER
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ReporteProduccionRERHTML(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 980px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 950px;'>");
            #region cabecera

            if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th rowspan='2' style='width: 202px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan='3'>{0}</th>", dataCab[0, 4].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th colspan='2' style=''>{0}</th>", dataCab[0, 7]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 1]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 2]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 3]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 5]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 6].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 7]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");
            }
            else // reporte mensual y semanales
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th rowspan='2' style='width: 202px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan='2'>{0}</th>", dataCab[0, 4].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th colspan='5' style=''>{0}</th>", dataCab[0, 6]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 1]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 2]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 3]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 5]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 6]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 7]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 9]);
                strHtml.AppendFormat("<th style='width:60px;' >{0}</th>", dataCab[1, 10].Replace("\n", "<br>"));
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");
            }


            #endregion

            #region cuerpo

            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                int columna = 0;
                foreach (var celda in reg.ListaCelda)
                {
                    string strValor = string.Empty;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "padding-left: 5px;text-align: left;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";

                    if (celda.EsNumero) strClass += "alignValorRight";

                    string eventoJs = "";
                    if (reg.ListaFiltroData != null && reg.ListaFiltroData.Count > 0 && !string.IsNullOrEmpty(reg.ListaFiltroData[columna]))
                        eventoJs = string.Format(" onclick=\"{0};\" ", reg.ListaFiltroData[columna]);

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalHtml(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}' {3}>{0}</td>", strValor, strStyle, strClass, eventoJs);

                    columna++;
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            strHtml.Append("</table>");

            if (tablaData.ReptiCodiTabla != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);
                strHtml.AppendFormat("<div style='margin-top: 5px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[1]);
            }

            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        #endregion

        #region B.4. Factor de planta de las centrales RER

        #region Excel

        /// <summary>
        /// Genera el grafico con los acumulados de las centrales RER excel para el reporte Factor Planta  de las centrales RER
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="graficoWeb"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="ultimaFilaBloque"></param>
        public static void GenerarCharExcelGraficoFactorPlantaAcumuladoRER(ExcelWorksheet ws, GraficoWeb graficoWeb, int filaIniGrafico, int ultimaFilaBloque)
        {
            int filaIniDataG = 10;
            int coluIniDataG = 3;
            int filaFinDataG = ultimaFilaBloque;

            var miChart = ws.Drawings["graficoFPAcumuladoRER"] as ExcelChart;

            if (filaFinDataG > filaIniDataG) // existe listado
            {

                miChart.SetPosition(filaIniGrafico, 0, 2, 0);
                miChart.Title.Text = graficoWeb.TitleText;
                int colu = 0;
                for (int i = 0; i < miChart.Series.Count; i++)
                {
                    if (i == 0) colu = coluIniDataG + 10;
                    if (i == 1) colu = coluIniDataG + 8;
                    miChart.Series[i].Header = graficoWeb.Series[i].Name;
                    miChart.Series[i].Series = ExcelRange.GetAddress(filaIniDataG, colu, filaFinDataG, colu);
                    miChart.Series[i].XSeries = ExcelRange.GetAddress(filaIniDataG, coluIniDataG - 1, filaFinDataG, coluIniDataG);
                }

                #region Texto_Anotacion_3

                UtilExcel.FormatoNotaNegrita(ws, filaIniGrafico + 19, 3, graficoWeb.Subtitle);

                #endregion
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el grafico excel con los tipos de generacion de las centrales RER para el reporte Factor Planta  de las centrales RER
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="graficoWeb"></param>
        /// <param name="filaIniBloqueGraficos"></param>
        /// <param name="lstUltimaFilaGraficosBloque"></param>
        public static void GenerarCharExcelGraficoFactorPlantaXTgeneracionRER(ExcelWorksheet ws, GraficoWeb graficoWeb, int filaIniBloqueGraficos, ref List<int> lstUltimaFilaGraficosBloque)
        {
            lstUltimaFilaGraficosBloque.Add(filaIniBloqueGraficos);

            string nombreChart = "";
            int filaIniG = 0;
            int coluIniG = 0;

            switch (graficoWeb.IdGrafico)
            {
                case 1: //hidro
                    nombreChart = "graficoCH";
                    lstUltimaFilaGraficosBloque.Add(filaIniBloqueGraficos + 16);
                    filaIniG = filaIniBloqueGraficos;
                    coluIniG = 2;
                    break;
                case 2: //termodinamico
                    nombreChart = "graficoCT";
                    lstUltimaFilaGraficosBloque.Add(filaIniBloqueGraficos + 16);
                    filaIniG = filaIniBloqueGraficos;
                    coluIniG = 2 + 4;
                    break;
                case 3: //solar
                    nombreChart = "graficoCS";
                    filaIniG = filaIniBloqueGraficos + 16;
                    lstUltimaFilaGraficosBloque.Add(filaIniBloqueGraficos + 32);
                    coluIniG = 2;
                    break;
                case 4: //eolico
                    nombreChart = "graficoCE";
                    filaIniG = filaIniBloqueGraficos + 16;
                    lstUltimaFilaGraficosBloque.Add(filaIniBloqueGraficos + 32);
                    coluIniG = 2 + 4;
                    break;
                default:
                    break;
            }


            var miChar = ws.Drawings[nombreChart] as ExcelChart;

            if (graficoWeb != null)
            {
                int tamBloqueSerie = 0;
                int filaIniDataG = filaIniBloqueGraficos;
                int coluIniDataG = 0;

                switch (graficoWeb.IdGrafico)
                {
                    case 1: //hidro
                        coluIniDataG = 27;
                        break;
                    case 2: //termodinamico
                        coluIniDataG = 31;
                        break;
                    case 3: //solar
                        coluIniDataG = 35;
                        break;
                    case 4: //eolico
                        coluIniDataG = 39;
                        break;
                }

                //Creamos area con la data
                ws.Cells[filaIniDataG - 1, coluIniDataG].Value = graficoWeb.NameGrafico;

                for (int i = 0; i < graficoWeb.Series.Count; i++) //tipo centrales
                {
                    ws.Cells[filaIniDataG - 1, coluIniDataG + 1 + i].Value = graficoWeb.Series[i].Name;
                }
                for (int m = 0; m < graficoWeb.XAxisCategories.Count; m++)// nomb centrales
                {
                    ws.Cells[filaIniDataG + m, coluIniDataG].Value = graficoWeb.XAxisCategories[m].Trim();
                }
                for (int i = 0; i < graficoWeb.SeriesData.Count(); i++) // prod y fp
                {
                    for (int k = 0; k < graficoWeb.SeriesData[i].Count(); k++)
                    {
                        ws.Cells[filaIniDataG + k, coluIniDataG + 1 + i].Value = graficoWeb.SeriesData[i][k];
                        tamBloqueSerie++;
                    }
                }
                tamBloqueSerie = tamBloqueSerie / 2;
                int ultFilaBloqueSerie = filaIniDataG + tamBloqueSerie - 1;
                ws.Cells[filaIniDataG + tamBloqueSerie + 1, coluIniDataG].Value = tamBloqueSerie;

                //Conectamos area creada con el grafico

                miChar.SetPosition(filaIniG, 0, coluIniG, 0);

                miChar.Series[0].Header = (string)ws.Cells[filaIniDataG - 1, coluIniDataG + 1 + 0].Value;
                miChar.Series[0].Series = ExcelRange.GetAddress(filaIniDataG, coluIniDataG + 1 + 0, ultFilaBloqueSerie, coluIniDataG + 1 + 0);
                miChar.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG, coluIniDataG, ultFilaBloqueSerie, coluIniDataG);

                miChar.PlotArea.ChartTypes[2].Series[0].Series = ExcelRange.GetAddress(filaIniDataG, coluIniDataG + 1 + 1, ultFilaBloqueSerie, coluIniDataG + 1 + 1);

                #region Texto_Anotacion_3

                UtilExcel.FormatoNotaNegrita(ws, lstUltimaFilaGraficosBloque.Max() + 1, 3, graficoWeb.Subtitle);

                #endregion
            }
            else
            {
                miChar.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Generar el Listado (tabla) excel para el reporte Factor Planta  de las centrales RER
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="ultimaFilaTabla"></param>
        /// <param name="repcodi"></param>
        public static void GenerarCharExcelListadoFactorPlantaRER(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, out int ultimaFilaTabla, int repcodi = 0)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            string ordenReporte = "6";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual)
            {
                if (repcodi == ConstantesInformeAnual.IndexAnualFactorPlantaRER)
                {
                    ordenReporte = "16";
                }
            }


            #region Titulo y subtitulo
            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(ordenReporte, 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(ordenReporte, 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem);  //subtitulo
            #endregion


            int filaIniCentral = 8;
            int coluIniCentral = 3;
            int filaIniData = filaIniCentral + 2;
            int coluIniData = coluIniCentral;

            int ultimaFila;
            int ultimaColu;

            #region cabecera
            ws.Cells[filaIniCentral, coluIniCentral + 0].Value = dataCab[0, 0];
            ws.Cells[filaIniCentral, coluIniCentral + 1].Value = dataCab[0, 1];
            ws.Cells[filaIniCentral, coluIniCentral + 2].Value = dataCab[0, 2];
            ws.Cells[filaIniCentral, coluIniCentral + 3].Value = dataCab[0, 3];
            ws.Cells[filaIniCentral, coluIniCentral + 5].Value = dataCab[0, 5];
            ws.Cells[filaIniCentral, coluIniCentral + 7].Value = dataCab[0, 7];
            ws.Cells[filaIniCentral, coluIniCentral + 9].Value = dataCab[0, 9];

            ws.Cells[filaIniCentral + 1, coluIniCentral + 3].Value = dataCab[1, 3];
            ws.Cells[filaIniCentral + 1, coluIniCentral + 4].Value = dataCab[1, 4];
            ws.Cells[filaIniCentral + 1, coluIniCentral + 5].Value = dataCab[1, 5];
            ws.Cells[filaIniCentral + 1, coluIniCentral + 6].Value = dataCab[1, 6];
            ws.Cells[filaIniCentral + 1, coluIniCentral + 7].Value = dataCab[1, 7];
            ws.Cells[filaIniCentral + 1, coluIniCentral + 8].Value = dataCab[1, 8];
            ws.Cells[filaIniCentral + 1, coluIniCentral + 9].Value = dataCab[1, 9];
            ws.Cells[filaIniCentral + 1, coluIniCentral + 10].Value = dataCab[1, 10];

            #endregion
            ultimaColu = coluIniCentral + 10;

            #region cuerpo

            if (registros.Any())
            {
                //CENTRAL
                int filaX = 0;
                string tipo = "";
                foreach (var reg in registros)
                {
                    int colX = 0;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            //pinta una sola vez por cada tipo
                            if (colX == 1 && tipo != celda.Texto) //tipo
                            {
                                ws.Cells[filaIniData + filaX, coluIniData - 1].Value = celda.Texto;
                                tipo = celda.Texto;
                            }
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;

                        }
                        colX++;
                    }

                    filaX++;
                }
                ultimaFila = filaIniData + filaX - 1;
                ultimaFilaTabla = ultimaFila;

                #region Formato Cuerpo
                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultimaFila, coluIniData);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);

                UtilExcel.CeldasExcelColorTexto(ws, filaIniData, coluIniData - 1, ultimaFila, coluIniData - 1, "#FFFFFF");
                UtilExcel.CeldasExcelColorFondo(ws, filaIniData, coluIniData - 1, ultimaFila, coluIniData - 1, "#FFFFFF");

                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

                #endregion

                #region Texto_Anotacion_3

                ultimaFila++;
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila, coluIniData, tablaData.Leyenda.ListaDescripcion);

                #endregion
            }
            else
            {
                ultimaFilaTabla = filaIniData;
            }
            #endregion
        }

        #endregion

        #region Servicio

        /// <summary>
        /// ObtenerDataTablaFactorPlantaCentralesRER
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaCentralRER"></param>
        /// <param name="listaGeneracionCentralRER"></param>
        /// <param name="listaPECentralRER"></param>
        /// <param name="listaFPCentralRER"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaFactorPlantaCentralesRER(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<EqEquipoDTO> listaCentralRER
            , List<ResultadoTotalGeneracion> listaGeneracionCentralRER, List<ResultadoTotalGeneracion> listaPECentralRER, List<ResultadoTotalGeneracion> listaFPCentralRER)
        {
            #region cabecera
            TablaReporte tabla = new TablaReporte();
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[2, 11];

            if (objFecha.TipoReporte == 6) //reporte mensual
            {
                matrizCabecera[0, 0] = "CENTRAL";
                matrizCabecera[0, 1] = "TIPO";
                matrizCabecera[0, 2] = string.Format("Potencia efectiva al {0} (MW)", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);
                matrizCabecera[0, 3] = string.Format("{0} {1} ", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), objFecha.AnioAct.RangoAct_FechaFin.Year);
                matrizCabecera[0, 5] = string.Format("{0} {1} ", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), objFecha.Anio1Ant.RangoAct_FechaFin.Year);
                matrizCabecera[0, 7] = string.Format("ACUMULADO AL {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);
                matrizCabecera[0, 9] = string.Format("ACUMULADO AL {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);

                matrizCabecera[1, 3] = "Producción (GWh)";
                matrizCabecera[1, 4] = "Factor de planta";
                matrizCabecera[1, 5] = "Producción (GWh)";
                matrizCabecera[1, 6] = "Factor de planta";
                matrizCabecera[1, 7] = "Producción (GWh)";
                matrizCabecera[1, 8] = "Factor de planta";
                matrizCabecera[1, 9] = "Producción (GWh)";
                matrizCabecera[1, 10] = "Factor de planta";
            }
            else // reportes semanales
            {
                matrizCabecera[0, 0] = "CENTRAL";
                matrizCabecera[0, 1] = "TIPO";
                matrizCabecera[0, 2] = string.Format("Potencia efectiva al {0} (MW)", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);
                matrizCabecera[0, 3] = string.Format("SEM {0}", objFecha.AnioAct.RangoAct_NumYAnio);
                matrizCabecera[0, 5] = string.Format("SEM {0}", objFecha.Anio1Ant.RangoAct_NumYAnio);
                matrizCabecera[0, 7] = string.Format("ACUMULADO AL {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);
                matrizCabecera[0, 9] = string.Format("ACUMULADO AL {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);

                matrizCabecera[1, 3] = "Producción (GWh)";
                matrizCabecera[1, 4] = "Factor de planta";
                matrizCabecera[1, 5] = "Producción (GWh)";
                matrizCabecera[1, 6] = "Factor de planta";
                matrizCabecera[1, 7] = "Producción (GWh)";
                matrizCabecera[1, 8] = "Factor de planta";
                matrizCabecera[1, 9] = "Producción (GWh)";
                matrizCabecera[1, 10] = "Factor de planta";
            }


            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            //CENTRAL
            foreach (var regCentral in listaCentralRER)
            {
                RegistroReporte registro = new RegistroReporte();
                List<CeldaReporte> datos = new List<CeldaReporte>();

                var listaXPE = listaPECentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();
                var listaXGen = listaGeneracionCentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();
                var listaXFP = listaFPCentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();

                ResultadoTotalGeneracion regPExCentralSemActAnioAct = listaXPE.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regProdGenxCentralSemActAnioAct = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regFPxCentralSemActAnioAct = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenxCentralSemActAnio1Ant = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regFPxCentralSemActAnio1Ant = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

                ResultadoTotalGeneracion regProdGenxCentralAcumAnioAct = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regFPxCentralAcumAnioAct = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

                ResultadoTotalGeneracion regProdGenxCentralAcumAnio1Ant = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regFPxCentralAcumAnio1Ant = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);

                datos.Add(new CeldaReporte(regCentral.Central.Trim(), false, false, true));
                datos.Add(new CeldaReporte(regCentral.Tgenernomb.Trim(), false, true, false));

                datos.Add(new CeldaReporte(regPExCentralSemActAnioAct.Meditotal, false, false));
                datos.Add(new CeldaReporte(regProdGenxCentralSemActAnioAct.Meditotal, false, false));
                datos.Add(new CeldaReporte(regFPxCentralSemActAnioAct.Meditotal, false, false));

                datos.Add(new CeldaReporte(regProdGenxCentralSemActAnio1Ant.Meditotal, false, false));
                datos.Add(new CeldaReporte(regFPxCentralSemActAnio1Ant.Meditotal, false, false));

                datos.Add(new CeldaReporte(regProdGenxCentralAcumAnioAct.Meditotal, false, false));
                datos.Add(new CeldaReporte(regFPxCentralAcumAnioAct.Meditotal, false, false));

                datos.Add(new CeldaReporte(regProdGenxCentralAcumAnio1Ant.Meditotal, false, false));
                datos.Add(new CeldaReporte(regFPxCentralAcumAnio1Ant.Meditotal, false, false));

                registro.ListaCelda = datos;

                registros.Add(registro);
            }

            //
            tabla.ListaRegistros = registros;

            // Adicionamos los pie de pagina
            string texto = UtilAnexoAPR5.EscogerAnotacion("2.4", 1, objFecha.TipoVistaReporte, objFecha.TipoReporte);

            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                lstPie.Add(texto + NotasPieWebInformeMensual.Cuadro1_Reporte_2p4);
            else
                lstPie.Add(texto + NotasPieWebInformeSemanal.Cuadro1_Reporte_2p4);
            pie.ListaDescripcion = lstPie;

            //
            tabla.Leyenda = pie;

            #endregion

            return tabla;
        }

        /// <summary>
        /// Genera el grafico web de la prod energia y FP con RER
        /// </summary>
        /// <param name="tgenercodi"></param>
        /// <param name="objFecha"></param>
        /// <param name="regTg"></param>
        /// <param name="listaCentralRERTotal"></param>
        /// <param name="listaGeneracionCentralRER"></param>
        /// <param name="listaFPCentralRER"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoProdGenyFactorPlantaXTgeneracionRER(int tgenercodi, FechasPR5 objFecha, SiTipogeneracionDTO regTg, List<EqEquipoDTO> listaCentralRERTotal, List<ResultadoTotalGeneracion> listaGeneracionCentralRER, List<ResultadoTotalGeneracion> listaFPCentralRER)
        {
            TextInfo textInfo = new CultureInfo("en-US", false).TextInfo;

            List<EqEquipoDTO> listaCentralRER = listaCentralRERTotal.Where(x => x.Tgenercodi == tgenercodi).ToList();

            List<string> listaSerie = new List<string>();
            listaSerie.Add("Producción (GWh)");
            listaSerie.Add("Factor de planta");


            var subtitulo = "";
            string texto = UtilAnexoAPR5.EscogerAnotacion("2.4", 2, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                subtitulo = texto + string.Format(NotasPieWebInformeMensual.Grafico1_Reporte_2p4, EPDate.f_NombreMes(objFecha.AnioAct.MesAct_FechaIni.Month).ToLower(), objFecha.AnioAct.MesAct_FechaIni.Year);
            else
                subtitulo = texto + string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_2p4, objFecha.AnioAct.RangoAct_Num, objFecha.AnioAct.NumAnio);

            GraficoWeb grafico = new GraficoWeb();
            grafico.IdGrafico = tgenercodi;
            grafico.NameGrafico = regTg.Tgenernomb;
            grafico.TitleText = "Centrales " + regTg.Tgenernomb;
            grafico.TitleText = textInfo.ToTitleCase(grafico.TitleText.ToLower());

            grafico.Subtitle = subtitulo;

            grafico.XAxisCategories = listaCentralRER.Select(x => x.Central).ToList();
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaSerie.Count][];

            for (int cc = 0; cc < listaSerie.Count; cc++)
            {
                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = listaSerie[cc];
                grafico.Series[cc].Type = (cc == 0 ? "column" : "line");
                grafico.Series[cc].YAxis = (cc == 0 ? 0 : 1);
                grafico.Series[cc].YAxisTitle = (cc == 0 ? "GWh" : "Factor de Planta");
                grafico.Series[cc].Color = (cc == 0 ? regTg.Tgenercolor : "#000000");

                grafico.SeriesData[cc] = new decimal?[listaCentralRER.Count];
                //Obtener las centrales ordenadas por GWh
                //listaGeneracionCentralRER = listaGeneracionCentralRER.OrderByDescending(x => x.Meditotal).ToList();
                for (int i = 0; i < listaCentralRER.Count; i++)
                {
                    var central = listaCentralRER[i];
                    ResultadoTotalGeneracion progGen = listaGeneracionCentralRER.Find(x => x.Equipadre == central.Equipadre && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                    ResultadoTotalGeneracion fp = listaFPCentralRER.Find(x => x.Equipadre == central.Equipadre && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                    decimal? valor = cc == 0 ? progGen.Meditotal : fp.Meditotal;
                    grafico.SeriesData[cc][i] = Convert.ToDecimal(Math.Round(valor.GetValueOrDefault(0), 2));
                }
            }

            return grafico;
        }

        /// <summary>
        /// Genera grafico web para el FP en el periodo acumulado
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaCentralRER"></param>
        /// <param name="listaFPCentralRER"></param>
        /// <param name="listaTgeneracion"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraFactorPlantaAcumuladoCentralRER(FechasPR5 objFecha, List<EqEquipoDTO> listaCentralRER, List<ResultadoTotalGeneracion> listaFPCentralRER, List<SiTipogeneracionDTO> listaTgeneracion)
        {
            List<SiTipogeneracionDTO> listaTgen = listaTgeneracion.OrderBy(x => x.Tgenernomb).ToList();

            List<string> listaCateg = new List<string>();
            listaCateg.Add(objFecha.Anio1Ant.NumAnio.ToString());
            listaCateg.Add(objFecha.AnioAct.NumAnio.ToString());

            string texto = UtilAnexoAPR5.EscogerAnotacion("2.4", 3, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            var subtitulo = "";
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                subtitulo = texto + string.Format(NotasPieWebInformeMensual.Grafico2_Reporte_2p4, EPDate.f_NombreMes(objFecha.AnioAct.MesAct_FechaIni.Month).ToLower(), listaCateg[0], listaCateg[1]);
            else
                subtitulo = texto + string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_2p4, objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), listaCateg[0], listaCateg[1]);

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = string.Format("Factor de planta de las centrales RER  Acumulado al {0} de {1}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));

            grafico.Subtitle = subtitulo;

            grafico.SerieData = new DatosSerie[listaCentralRER.Count];

            //Categorias
            int cctg = 0;
            grafico.Categorias = new Categorias[listaTgen.Count()];
            foreach (var reg in listaTgen)
            {
                var listaCentralxTgen = listaCentralRER.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList();

                grafico.Categorias[cctg] = new Categorias();
                grafico.Categorias[cctg].Name = reg.Tgenernomb;
                grafico.Categorias[cctg].Categories = new string[listaCentralxTgen.Count];

                int cpto = 0;
                foreach (var regCentral in listaCentralxTgen)
                {
                    grafico.Categorias[cctg].Categories[cpto] = regCentral.Central;
                    cpto++;
                }
                cctg++;
            }

            //Data x categoria
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaCateg.Count][];

            int cc = 0;
            foreach (var cat in listaCateg)
            {
                grafico.SeriesData[cc] = new decimal?[listaCentralRER.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = cat;
                grafico.Series[cc].Type = "column";
                grafico.Series[cc].Color = (cc == 0 ? "#C0504D" : "#4F81BD");
                grafico.Series[cc].YAxisTitle = "Factor de Planta";
                grafico.Series[cc].YAxis = 0;

                int contPto = 0;
                foreach (var reg in listaCentralRER)
                {
                    var regAnioAct = listaFPCentralRER.Find(x => x.Equipadre == reg.Equipadre && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                    var regAnio1Ant = listaFPCentralRER.Find(x => x.Equipadre == reg.Equipadre && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                    decimal? valor = (cc == 0 ? regAnio1Ant.Meditotal : regAnioAct.Meditotal);

                    grafico.SeriesData[cc][contPto] = Convert.ToDecimal(Math.Round(valor.GetValueOrDefault(0), 2));
                    contPto++;
                }

                cc++;
            }

            return grafico;
        }

        /// <summary>
        /// GetPotenciaEfectivaByCentralRER
        /// </summary>
        /// <param name="regCentral"></param>
        /// <param name="listaEqPe"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GetPotenciaEfectivaByCentralRER(EqEquipoDTO regCentral, List<EqEquipoDTO> listaEqPe
                , int tipoResultadoFecha, DateTime fechaPeriodo)
        {
            ResultadoTotalGeneracion peCentral = new ResultadoTotalGeneracion();
            decimal pe = 0;

            var objCentralPe = listaEqPe.Where(x => x.Equicodi == regCentral.Equipadre || x.Equipadre == regCentral.Equipadre).ToList();
            if (objCentralPe.Any()) pe = objCentralPe.Sum(x => x.Pe ?? 0);

            peCentral.TipoResultadoFecha = tipoResultadoFecha;
            peCentral.Meditotal = pe;
            peCentral.Medifecha = fechaPeriodo;

            return peCentral;
        }

        #endregion

        /// <summary>
        /// Método que genera el Reporte Factor de Planta de las Centrales RER del SEIN
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ReporteFactorPlantaCentralesRERHtml(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 980px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='table-layout: fixed;width: 950px;'>");
            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='2' style='width: 202px;'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th rowspan='2' style='width: 110px;'>{0}</th>", dataCab[0, 1]);
            strHtml.AppendFormat("<th rowspan='2' style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[0, 2]);
            strHtml.AppendFormat("<th colspan='2' style='word-wrap: break-word; white-space: normal;width: 140px;height:36px'>{0}</th>", dataCab[0, 3]);
            strHtml.AppendFormat("<th colspan='2' style='word-wrap: break-word; white-space: normal;width: 140px'>{0}</th>", dataCab[0, 5]);
            strHtml.AppendFormat("<th colspan='2' style='word-wrap: break-word; white-space: normal;width: 140px'>{0}</th>", dataCab[0, 7]);
            strHtml.AppendFormat("<th colspan='2' style='word-wrap: break-word; white-space: normal;width: 140px'>{0}</th>", dataCab[0, 9]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[1, 3]);
            strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[1, 4]);
            strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[1, 5]);
            strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[1, 6]);
            strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[1, 7]);
            strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[1, 8]);
            strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[1, 9]);
            strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;width: 70px'>{0}</th>", dataCab[1, 10]);
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //CENTRAL
            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                foreach (var celda in reg.ListaCelda)
                {
                    string strValor;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto && celda.TieneTextoIzquierdo) strStyle += "padding-left: 5px;text-align: left;";

                    if (celda.EsNumero)
                    {
                        strValor = UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}'>{0}</td>", strValor, strStyle, strClass);
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            strHtml.Append("</table>");

            strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);

            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        #endregion

        #region B.5. Participación de la producción por empresas Integrantes

        #region Excel

        /// <summary>
        /// Genera el grafico Producción empresas integrantes
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="pintarExcell"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellProduccionEmpresasIntegrantes(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb pintarExcell, ref int finalPosTabla)
        {
            ExcelChart miChart = ws.Drawings["grafico1"] as ExcelChart;

            if (pintarExcell.XAxisCategories.Any())
            {
                miChart.Title.Text = pintarExcell.TitleText;

                #region tablaUsar

                int filaIniDataG = 8;
                int coluIniDataG = 27;
                int ultFila = 0;

                int fi = 0;
                foreach (var cat in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat.Trim();
                    fi++;
                }

                int col1 = 0;
                int cc = 0;

                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name.Trim();
                    int fila1 = 0;

                    for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                    {
                        ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                        fila1++;
                    }
                    cc++;
                    ultFila = filaIniDataG + fila1;
                    col1++;
                }

                #endregion

                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < pintarExcell.Series.Count; i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                #region Grafico

                for (int val = 0; val < pintarExcell.Series.Count; val++)
                {
                    miChart.Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + val, ultFila, coluIniDataG + 1 + val);
                    miChart.Series[val].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                    miChart.Series[val].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + val].Value;
                }

                //miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);
                miChart.SetPosition(8, 0, 7, 0);
                #endregion

                //finalPosTabla = finalPosTabla + 54;
                finalPosTabla = 60;

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 8, pintarExcell.Subtitle);
                #endregion

                UtilExcel.CeldasExcelAgrupar(ws, finalPosTabla + 1, 8, finalPosTabla + 1, 8 + 8);
                UtilExcel.CeldasExcelWrapText(ws, finalPosTabla + 1, 8, finalPosTabla + 1, 8 + 3);
                ws.Row(finalPosTabla + 1).Height = 25;

                finalPosTabla += 1;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera la tabla del  excel para el reporte Producción de las Empresas Intergrantes
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarListarReporteProduccionEmpresasIntegrantes(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, ref int finalPosTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int filaIniCab = 8;
            int coluIniCab = 3;

            int filaIniData = filaIniCab + 2;
            int coluIniData = coluIniCab;

            int ultimaFila;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            var ordenRep = "7";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual  
                ordenRep = "6";

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(ordenRep, 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(ordenRep, 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            #region cabecera

            ws.Cells[filaIniCab, coluIniCab + 0].Value = dataCab[0, 0];
            ws.Cells[filaIniCab, coluIniCab + 1].Value = dataCab[0, 1];

            ws.Cells[filaIniCab + 1, coluIniCab + 1].Value = dataCab[1, 1];
            ws.Cells[filaIniCab + 1, coluIniCab + 2].Value = dataCab[1, 2];
            ws.Cells[filaIniCab + 1, coluIniCab + 3].Value = dataCab[1, 3];
            #endregion

            #region cuerpo

            if (registros.Any())
            {
                int filaProdTotal = 0;
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colX = 0;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;
                        }
                        colX++;
                    }

                    filaProdTotal = filaProdTotal == 0 && reg.EsFilaResumen ? filaX : filaProdTotal;

                    filaX++;
                }

                ultimaFila = filaIniData + filaX - 1;
                ultimaColu = coluIniData + 3;

                #region Formato Cuerpo

                ws.Column(coluIniData).Width = 55;
                ws.Row(ultimaFila).Height = 20;

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultimaFila, coluIniData);
                UtilExcel.CeldasExcelEnNegrita(ws, filaIniData, ultimaColu, ultimaFila - 1, ultimaColu);
                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

                UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "#FFFFFF");
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);

                #endregion

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual   
                {
                    #region Texto_Anotacion_3
                    UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, tablaData.Leyenda.ListaDescripcion[0]);

                    #endregion

                    UtilExcel.CeldasExcelAgrupar(ws, ultimaFila + 1, coluIniData, ultimaFila + 1, coluIniData + 3);
                    UtilExcel.CeldasExcelWrapText(ws, ultimaFila + 1, coluIniData, ultimaFila + 1, coluIniData + 3);
                    ws.Row(ultimaFila + 1).Height = 25;
                }

                finalPosTabla = ultimaFila + 1;
            }
            #endregion

        }

        #endregion

        #region Servicio

        /// <summary>
        /// Genera la data para el listado (tabla) de produccion de la Energia por empresa
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaDataXEmpresa"></param>
        /// <param name="listaDataTotal"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaProduccionEmpresasIntegrantes(FechasPR5 objFecha, List<SiEmpresaDTO> listaEmpresa, List<ResultadoTotalGeneracion> listaDataXEmpresa, List<ResultadoTotalGeneracion> listaDataTotal)
        {
            #region cabecera
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[2, 4];

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
            {
                matrizCabecera[0, 0] = "Por Empresas Integrantes";
                matrizCabecera[0, 1] = "Acumulado Anual";

                matrizCabecera[1, 1] = string.Format("{0}", objFecha.AnioAct.NumAnio);
                matrizCabecera[1, 2] = string.Format("{0}", objFecha.Anio1Ant.NumAnio);
                matrizCabecera[1, 3] = "Var (%)";
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
                {
                    matrizCabecera[0, 0] = "Por Empresa Integrante (GWh)";
                    matrizCabecera[0, 1] = EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month);

                    matrizCabecera[1, 1] = string.Format("{0}", objFecha.AnioAct.NumAnio);
                    matrizCabecera[1, 2] = string.Format("{0}", objFecha.Anio1Ant.NumAnio);
                    matrizCabecera[1, 3] = "Var (%)";
                }
                else // reportes semanales
                {
                    matrizCabecera[0, 0] = "Por Empresa Integrante (GWh)";
                    matrizCabecera[0, 1] = "SEMANA OPERATIVA";

                    matrizCabecera[1, 1] = string.Format("{0}\n{1}", objFecha.AnioAct.RangoAct_Num, objFecha.AnioAct.NumAnio);
                    matrizCabecera[1, 2] = string.Format("{0}\n{1}", objFecha.AnioAct.RangoAct_Num, objFecha.Anio1Ant.NumAnio);
                    matrizCabecera[1, 3] = "Var (%)";
                }
            }




            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            foreach (var obj in listaEmpresa)
            {
                RegistroReporte registro = new RegistroReporte();
                List<CeldaReporte> datos = new List<CeldaReporte>();
                List<string> filtroDatos = new List<string>();

                var regSem1 = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Emprcodi == obj.Emprcodi);
                var regSem2 = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct && x.Emprcodi == obj.Emprcodi);
                var regSemVar = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.Emprcodi == obj.Emprcodi);

                datos.Add(new CeldaReporte(obj.Emprnomb.Trim(), false));

                datos.Add(new CeldaReporte(regSem1.Meditotal, false, false));
                datos.Add(new CeldaReporte(regSem2.Meditotal, false, false));
                datos.Add(new CeldaReporte(regSemVar.Meditotal, true, true));

                filtroDatos.Add("");
                filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}')", regSem1.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regSem1.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha)));
                filtroDatos.Add(string.Format("verTablaResumenProd('{0}','{1}')", regSem2.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regSem2.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha)));
                filtroDatos.Add("");

                registro.ValorAnioActual = regSem1.Meditotal;
                registro.ListaCelda = datos;
                registro.ListaFiltroData = filtroDatos;

                registros.Add(registro);
            }

            registros = registros.OrderByDescending(x => x.ValorAnioActual).ToList();


            var regSem1Total = listaDataTotal.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regSem2Total = listaDataTotal.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            var regSemVarTotal = listaDataTotal.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);


            RegistroReporte registro0 = new RegistroReporte();
            registro0.EsFilaResumen = true;
            List<CeldaReporte> datos0 = new List<CeldaReporte>();

            datos0.Add(new CeldaReporte("Producción Total del SEIN", true));

            datos0.Add(new CeldaReporte(regSem1Total.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regSem2Total.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regSemVarTotal.Meditotal, true, true));

            registro0.ListaCelda = datos0;

            registros.Add(registro0);


            tabla.ListaRegistros = registros;

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                // Adicionamos los pie de pagina
                string texto = UtilAnexoAPR5.EscogerAnotacion("2.5", 1, objFecha.TipoVistaReporte, objFecha.TipoReporte);

                PieReporte pie = new PieReporte();
                List<string> lstPie = new List<string>();

                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                    lstPie.Add(string.Format(texto + NotasPieWebInformeMensual.Cuadro1_Reporte_2p5, EPDate.f_NombreMes(objFecha.AnioAct.MesAct_FechaIni.Month).ToLower(), objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio));
                else
                    lstPie.Add(string.Format(texto + NotasPieWebInformeSemanal.Cuadro1_Reporte_2p5, objFecha.AnioAct.RangoAct_Num, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio));
                pie.ListaDescripcion = lstPie;

                //
                tabla.Leyenda = pie;
            }
            #endregion

            return tabla;
        }

        /// <summary>
        /// Comparación de producción energética (GWh) de las empresas generadoras del COES en la semana operativa
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaDataXEmpresa"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoProduccionEmpresasIntegrantes(FechasPR5 objFecha, List<SiEmpresaDTO> listaEmpresa, List<ResultadoTotalGeneracion> listaDataXEmpresa)
        {
            List<string> listaCateg = new List<string>();
            listaCateg.Add(objFecha.AnioAct.NumAnio.ToString());
            listaCateg.Add(objFecha.Anio1Ant.NumAnio.ToString());

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = string.Format("Variación {0}/{1} (GWh)", objFecha.AnioAct.NumAnio, objFecha.Anio1Ant.NumAnio);

            string texto = UtilAnexoAPR5.EscogerAnotacion("2.5", 2, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            var subtitulo = "";


            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                subtitulo = texto + string.Format(NotasPieWebInformeMensual.Grafico1_Reporte_2p5, EPDate.f_NombreMes(objFecha.AnioAct.MesAct_FechaIni.Month).ToLower(), objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio);
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual
                    subtitulo = "";
                else
                    subtitulo = texto + string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_2p5, objFecha.AnioAct.RangoAct_Num, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio);
            }

            List<SiEmpresaDTO> emrpesasordenadas = new List<SiEmpresaDTO>();
            List<ResultadoTotalGeneracion> listOrdenada = listaDataXEmpresa.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).OrderByDescending(x => x.Meditotal).ToList();

            foreach (ResultadoTotalGeneracion item in listOrdenada)
            {
                emrpesasordenadas.Add(listaEmpresa.Where(x => x.Emprcodi == item.Emprcodi).First());
            }

            grafico.Subtitle = subtitulo;

            grafico.XAxisCategories = emrpesasordenadas.Select(x => x.Emprnomb).ToList();
            grafico.XAxisTitle = string.Empty;
            grafico.YaxixTitle = "GWh";

            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaCateg.Count][];



            int cc = 0;
            foreach (var cat in listaCateg)
            {
                grafico.SeriesData[cc] = new decimal?[listaEmpresa.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = cat;
                grafico.Series[cc].Color = (cc == 0 ? "#C0504D" : "#4F81BD");




                int contPto = 0;
                foreach (var reg in emrpesasordenadas)
                {
                    var regSem1 = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Emprcodi == reg.Emprcodi);
                    var regSem2 = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct && x.Emprcodi == reg.Emprcodi);

                    decimal h = (cc == 0 ? regSem1.Meditotal.Value : regSem2.Meditotal.Value);
                    grafico.SeriesData[cc][contPto] = h;
                    contPto++;
                }

                cc++;
            }
            return grafico;
        }

        /// <summary>
        /// Convertir data a GWh
        /// </summary>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaData"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> ProdGenConvertDataEmpresaMW48ToGWh(List<SiEmpresaDTO> listaEmpresa, List<MeMedicion48DTO> listaData, int tipoResultadoFecha,
                                DateTime fechaProceso, DateTime fechaIni, DateTime fechaFin)
        {
            List<ResultadoTotalGeneracion> lista = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaEmpresa)
            {
                ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
                m.Medifecha = fechaProceso;
                m.Emprcodi = reg.Emprcodi;
                m.Emprnomb = reg.Emprnomb;

                m.TipoResultadoFecha = tipoResultadoFecha;
                m.Meditotal = 0;

                var listaTmp = listaData.Where(x => x.Emprcodi == reg.Emprcodi).ToList();
                if (listaTmp.Count > 0)
                {
                    decimal? total = 0;
                    foreach (var aux in listaTmp)
                    {
                        total += aux.Meditotal.GetValueOrDefault(0);
                    }

                    m.Meditotal = total / (ConstantesPR5ReportesServicio.FactorGW * 2);
                }

                m.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin };

                lista.Add(m);
            }

            return lista;
        }

        /// <summary>
        /// Convertir data a GWh
        /// </summary>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaData"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> ProdGenConvertDataEmpresaMW96ToGWh(List<SiEmpresaDTO> listaEmpresa, List<MeMedicion96DTO> listaData, int tipoResultadoFecha,
                                DateTime fechaProceso, DateTime fechaIni, DateTime fechaFin)
        {
            List<ResultadoTotalGeneracion> lista = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaEmpresa)
            {
                ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
                m.Medifecha = fechaProceso;
                m.Emprcodi = reg.Emprcodi;
                m.Emprnomb = reg.Emprnomb;

                m.TipoResultadoFecha = tipoResultadoFecha;
                m.Meditotal = 0;

                var listaTmp = listaData.Where(x => x.Emprcodi == reg.Emprcodi).ToList();
                if (listaTmp.Count > 0)
                {
                    decimal? total = 0;
                    foreach (var aux in listaTmp)
                    {
                        total += aux.Meditotal.GetValueOrDefault(0);
                    }

                    m.Meditotal = total / (ConstantesPR5ReportesServicio.FactorGW * 4);
                }

                m.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin };

                lista.Add(m);
            }

            return lista;
        }

        /// <summary>
        /// Generar variacion
        /// </summary>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaDataAct"></param>
        /// <param name="listaDataAnt"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> ProdGenGenerarVariacionGWh(List<SiEmpresaDTO> listaEmpresa, List<ResultadoTotalGeneracion> listaDataAct, List<ResultadoTotalGeneracion> listaDataAnt, int tipoResultadoFecha, DateTime fechaProceso)
        {
            List<ResultadoTotalGeneracion> lista = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaEmpresa)
            {
                ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
                m.Medifecha = fechaProceso;
                m.Emprcodi = reg.Emprcodi;
                m.Emprnomb = reg.Emprnomb;

                m.TipoResultadoFecha = tipoResultadoFecha;

                var regAct = listaDataAct.Find(x => x.Emprcodi == reg.Emprcodi);
                var regAnt = listaDataAnt.Find(x => x.Emprcodi == reg.Emprcodi);

                if (regAnt.Meditotal != null && regAnt.Meditotal != 0)
                {
                    m.Meditotal = regAnt.Meditotal != 0 ? ((regAct.Meditotal / regAnt.Meditotal) - 1.0m) : 0.0m;
                    m.Meditotal = m.Meditotal * 100;
                }

                lista.Add(m);
            }

            return lista;
        }

        #endregion

        /// <summary>
        /// Genera vista html del reporte Producción de las Empresas Intergrantes
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ReporteProduccionEmpresasIntegrantesHtml(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 580px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 550px;'>");
            strHtml.Append("<thead>");
            #region cabecera

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:400px;' rowspan='2'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th style='width:150px;' colspan='3'>{0}</th></tr>", dataCab[0, 1]);
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[1, 1].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[1, 2].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[1, 3]);
            strHtml.Append("</tr>");

            #endregion
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");
            #region cuerpo

            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                int c = 0;
                foreach (var celda in reg.ListaCelda)
                {
                    string strValor = string.Empty;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "text-align: left; padding-left: 5px;";
                    if (celda.EsNumero) strStyle += "text-align: right; padding-right: 5px;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";
                    if (reg.EsFilaResumen) strStyle += "background: #2980B9;color: #ffffff; height: 25px;";

                    string eventoJs = "";
                    if (reg.ListaFiltroData != null && !string.IsNullOrEmpty(reg.ListaFiltroData[c]))
                        eventoJs = string.Format(" onclick=\"{0};\" ", reg.ListaFiltroData[c]);

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalHtml(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}' {3}>{0}</td>", strValor, strStyle, strClass, eventoJs);
                    c++;
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            #endregion
            strHtml.Append("</table>");

            if (tablaData.ReptiCodiTabla != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual            
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);

            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region C. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA EN EL SEIN (MW)

        #region Útil

        /// <summary>
        /// ListarM48ValorMDFromListaByFechaCargaMasiva
        /// </summary>
        /// <param name="lista48"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> ListarM48ValorMDFromListaByFechaCargaMasiva(List<MeMedicion48DTO> lista48, DateTime fechaMD, int tipoResultadoFecha)
        {
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            foreach (var regMD in lista48)
            {
                ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
                m.Medifecha = fechaMD.Date;
                m.TipoResultadoFecha = tipoResultadoFecha;
                m.Tgenercodi = regMD.Tgenercodi;
                m.Tgenernomb = regMD.Tgenernomb;
                m.Meditotal = regMD.Meditotal;

                l.Add(m);
            }

            return l;
        }

        /// <summary>
        /// ListarM96ValorMDFromListaByFechaCargaMasiva
        /// </summary>
        /// <param name="lista96"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> ListarM96ValorMDFromListaByFechaCargaMasiva(List<MeMedicion96DTO> lista96, DateTime fechaMD, int tipoResultadoFecha)
        {
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            foreach (var regMD in lista96)
            {
                ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
                m.Medifecha = fechaMD.Date;
                m.TipoResultadoFecha = tipoResultadoFecha;
                m.Tgenercodi = regMD.Tgenercodi;
                m.Tgenernomb = regMD.Tgenernomb;
                m.Meditotal = regMD.Meditotal;

                l.Add(m);
            }

            return l;
        }

        /// <summary>
        /// Obtener la maxima demanda y guardarlo en la variable meditotal
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="emprcodi"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GenerarM96ValorMDFromListaByFecha(List<MeMedicion96DTO> lista, DateTime fechaMD, int tipoResultadoFecha, int emprcodi, DateTime fechaIni, DateTime fechaFin)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;

            m.Emprcodi = emprcodi;

            int cuartoHora = fechaMD.Hour * 4 + fechaMD.Minute / 15;
            if (cuartoHora == 0) cuartoHora = 96; //las 00:00

            var listaRegXMD = lista.Where(x => x.Medifecha == fechaMD.Date);
            if (listaRegXMD.Any())
            {
                decimal total = 0;
                foreach (var regMD in listaRegXMD)
                {
                    total += ((decimal?)regMD.GetType().GetProperty(ConstantesAppServicio.CaracterH + cuartoHora.ToString()).GetValue(regMD, null)).GetValueOrDefault(0);
                }
                m.Meditotal = total;
                m.Tgenercodi = listaRegXMD.First().Tgenercodi;
            }

            m.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, FechaMD = fechaMD };

            return m;
        }

        /// <summary>
        /// GenerarM96ValorMDFromListaByFechaCargaMasiva
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoSemanaRelProd"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GenerarM96ValorMDFromListaByFechaCargaMasiva(List<MeMedicion96DTO> lista, DateTime fechaMD, int tipoResultadoFecha, DateTime fechaIni, DateTime fechaFin, int tipoSemanaRelProd = 0)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.TipoSemanaRelProd = tipoSemanaRelProd;

            var regMD = lista.Find(x => x.Medifecha == fechaMD.Date);
            if (regMD != null)
            {
                m.Meditotal = regMD.Meditotal ?? 0;
                m.Tgenercodi = regMD.Tgenercodi;
            }

            m.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, FechaMD = fechaMD };

            return m;
        }

        /// <summary>
        /// Obtener la maxima demanda y guardarlo en la variable meditotal
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GenerarM48ValorMDFromListaByFecha(List<MeMedicion48DTO> lista, DateTime fechaMD, int tipoResultadoFecha, DateTime fechaIni, DateTime fechaFin)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;

            int mediaHora = fechaMD.Hour * 2 + fechaMD.Minute / 30;
            if (mediaHora == 0) mediaHora = 48; //las 00:00

            var regMD = lista.Find(x => x.Medifecha == fechaMD.Date);
            if (regMD != null)
            {
                m.Meditotal = ((decimal?)regMD.GetType().GetProperty(ConstantesAppServicio.CaracterH + mediaHora.ToString()).GetValue(regMD, null)).GetValueOrDefault(0);
                m.Tgenercodi = regMD.Tgenercodi;
            }

            m.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, FechaMD = fechaMD };

            return m;
        }

        /// <summary>
        /// GenerarM48ValorMDFromListaByFechaCargaMasiva
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="tipoSemanaRelProd"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GenerarM48ValorMDFromListaByFechaCargaMasiva(List<MeMedicion48DTO> lista, DateTime fechaMD, int tipoResultadoFecha, int tipoSemanaRelProd = 0)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.TipoSemanaRelProd = tipoSemanaRelProd;

            var regMD = lista.Find(x => x.Medifecha == fechaMD.Date);
            if (regMD != null)
            {
                m.Meditotal = regMD.Meditotal ?? 0;
                m.Tgenercodi = regMD.Tgenercodi;
            }

            return m;
        }

        /// <summary>
        /// GenerarVariacionByTotalGeneracion
        /// </summary>
        /// <param name="regAct"></param>
        /// <param name="regAnt"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GenerarVariacionByTotalGeneracion(ResultadoTotalGeneracion regAct, ResultadoTotalGeneracion regAnt, int tipoResultadoFecha, DateTime fechaProceso)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaProceso;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Codigo = regAct.Codigo;

            m.Tptomedicodi = regAct.Tptomedicodi;
            m.Ptomedicodi = regAct.Ptomedicodi;

            m.Emprcodi = regAct.Emprcodi;
            m.Grupocodi = regAct.Grupocodi;
            m.TipoSemanaRelProd = regAct.TipoSemanaRelProd;

            if (regAnt.Meditotal != 0)
            {
                m.Meditotal = regAnt.Meditotal != 0 ? ((regAct.Meditotal / regAnt.Meditotal) - 1.0m) : 0.0m;
                m.Meditotal = m.Meditotal * 100;
            }

            return m;
        }

        /// <summary>
        /// GenerarDiferenciaByTotalGeneracion
        /// </summary>
        /// <param name="regAct"></param>
        /// <param name="regAnt"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GenerarDiferenciaByTotalGeneracion(ResultadoTotalGeneracion regAct, ResultadoTotalGeneracion regAnt, int tipoResultadoFecha, DateTime fechaProceso)
        {
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaProceso;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Tptomedicodi = regAct.Tptomedicodi;
            m.Ptomedicodi = regAct.Ptomedicodi;

            m.Emprcodi = regAct.Emprcodi;
            m.Grupocodi = regAct.Grupocodi;
            m.TipoSemanaRelProd = regAct.TipoSemanaRelProd;
            m.Tgenercodi = regAct.Tgenercodi;
            m.Codigo = regAct.Codigo;

            m.Meditotal = regAct.Meditotal.GetValueOrDefault(0) - regAnt.Meditotal.GetValueOrDefault(0);

            return m;
        }

        /// <summary>
        /// Convertir lista de objeto Medicion48 a lista de objeto ResultadoTotalGeneracion
        /// </summary>
        /// <param name="lista48"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> ConvertirListaM48toListaResultadoTotal(List<MeMedicion48DTO> lista48)
        {
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();
            foreach (var reg in lista48)
            {
                l.Add(ConvertirM48toResultadoTotal(reg));
            }
            return l;
        }

        /// <summary>
        /// Convertir objeto Medicion48 a objeto ResultadoTotalGeneracion
        /// </summary>
        /// <param name="reg"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion ConvertirM48toResultadoTotal(MeMedicion48DTO reg)
        {
            ResultadoTotalGeneracion obj = new ResultadoTotalGeneracion();
            obj.Medifecha = reg.Medifecha;
            obj.TipoResultadoFecha = reg.TipoResultadoFecha;
            obj.Meditotal = reg.Meditotal;
            obj.Tgenercodi = reg.Tgenercodi;
            obj.Tgenernomb = reg.Tgenernomb;

            return obj;
        }

        #endregion

        #region C.1. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)

        /// <summary>
        /// Genera el grafico excel para el crecimiento acumulado del reporte maxima demanda por tipo generacion
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="graficoMDCrecMensual"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellCrecimientoAcumuladoSemanal(ExcelWorksheet ws, GraficoWeb graficoMDCrecMensual, ref int finalPosTabla)
        {
            ExcelChart miChart = ws.Drawings["grafico4"] as ExcelChart;

            if (graficoMDCrecMensual.XAxisCategories.Count() > 0)
            {
                GraficoWeb pintarExcell = graficoMDCrecMensual;

                #region tablaUsar

                int filaIniDataG = 100;
                int coluIniDataG = 20;
                int ultFila = 0;

                int fi = 0;
                foreach (var fecha in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = fecha;
                    fi++;
                }

                int col1 = 0;
                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name.Trim();

                    int fila1 = 0;
                    for (int val = 0; val < pintarExcell.SeriesData[col1].Count(); val++)
                    {
                        if (col1 == 1)
                        {
                            ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[col1][val] / 100;
                            ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Style.Numberformat.Format = "#,##0.0%";
                        }
                        else
                        {
                            ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[col1][val];
                            ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Style.Numberformat.Format = "#,##0.0";
                        }

                        fila1++;
                    }
                    //cc++;
                    ultFila = filaIniDataG + fila1;
                    col1++;
                }
                #endregion

                #region Grafico

                miChart.Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 2, ultFila, coluIniDataG + 2);
                miChart.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                miChart.Series[0].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 2].Value;

                miChart.PlotArea.ChartTypes[2].Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1, ultFila, coluIniDataG + 1);
                miChart.PlotArea.ChartTypes[2].Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                miChart.PlotArea.ChartTypes[2].Series[0].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1].Value;


                miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);

                #endregion

                finalPosTabla = finalPosTabla + 38;

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 3, pintarExcell.Subtitle);
                #endregion

                finalPosTabla += 1;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        #region Excel

        /// <summary>
        /// Genera la tabla del  excel para el reporte Maxima demanda por tipo de generación
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="finalPosTabla"></param>
        public static void ListarMaximaDemandaTipoGeneracionSemanal(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, ref int finalPosTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniCab = 8;
            int coluIniCab = 3;

            int filaIniData = filaIniCab + 4;
            int coluIniData = coluIniCab;

            int ultimaFila;
            int ultimaColu;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            var ordenRep = "8";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                ordenRep = "7";
            ws.Cells[filaIniCab - 4, coluIniCab - 1].Value = EscogerTitulosSubtitulos(ordenRep, 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[filaIniCab - 2, coluIniCab].Value = EscogerTitulosSubtitulos(ordenRep, 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            #region cabecera

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
            {
                ws.Cells[filaIniCab + 1, coluIniCab + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniCab + 1, coluIniCab + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniCab + 1, coluIniCab + 3].Value = dataCab[1, 3];
                ws.Cells[filaIniCab + 1, coluIniCab + 4].Value = dataCab[1, 4];
                ws.Cells[filaIniCab + 1, coluIniCab + 5].Value = dataCab[1, 5];
                ws.Cells[filaIniCab + 1, coluIniCab + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniCab + 1, coluIniCab + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniCab + 1, coluIniCab + 8].Value = dataCab[1, 8];

                ws.Cells[filaIniCab + 2, coluIniCab + 1].Value = dataCab[2, 1];
                ws.Cells[filaIniCab + 2, coluIniCab + 2].Value = dataCab[2, 2];
                ws.Cells[filaIniCab + 2, coluIniCab + 3].Value = dataCab[2, 3];
                ws.Cells[filaIniCab + 2, coluIniCab + 4].Value = dataCab[2, 4];
                ws.Cells[filaIniCab + 2, coluIniCab + 5].Value = dataCab[2, 5];
                ws.Cells[filaIniCab + 2, coluIniCab + 7].Value = dataCab[2, 7];

                ws.Cells[filaIniCab + 3, coluIniCab + 1].Value = dataCab[3, 1];
                ws.Cells[filaIniCab + 3, coluIniCab + 2].Value = dataCab[3, 2];
                ws.Cells[filaIniCab + 3, coluIniCab + 3].Value = dataCab[3, 3];
                ws.Cells[filaIniCab + 3, coluIniCab + 4].Value = dataCab[3, 4];
                ws.Cells[filaIniCab + 3, coluIniCab + 5].Value = dataCab[3, 5];
                ws.Cells[filaIniCab + 3, coluIniCab + 7].Value = dataCab[3, 7];

                ultimaColu = coluIniCab + 8;
            }
            else  // reporte mensual y reportes semanales
            {
                ws.Cells[filaIniCab, coluIniCab + 0].Value = dataCab[0, 0];
                ws.Cells[filaIniCab, coluIniCab + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniCab, coluIniCab + 4].Value = dataCab[0, 4];
                ws.Cells[filaIniCab, coluIniCab + 6].Value = dataCab[0, 6];

                ws.Cells[filaIniCab + 1, coluIniCab + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniCab + 1, coluIniCab + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniCab + 1, coluIniCab + 3].Value = dataCab[1, 3];
                ws.Cells[filaIniCab + 1, coluIniCab + 4].Value = dataCab[1, 4];
                ws.Cells[filaIniCab + 1, coluIniCab + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniCab + 1, coluIniCab + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniCab + 1, coluIniCab + 8].Value = dataCab[1, 8];
                ws.Cells[filaIniCab + 1, coluIniCab + 9].Value = dataCab[1, 9];
                ws.Cells[filaIniCab + 1, coluIniCab + 10].Value = dataCab[1, 10];

                ws.Cells[filaIniCab + 2, coluIniCab + 1].Value = dataCab[2, 1];
                ws.Cells[filaIniCab + 2, coluIniCab + 2].Value = dataCab[2, 2];
                ws.Cells[filaIniCab + 2, coluIniCab + 3].Value = dataCab[2, 3];
                ws.Cells[filaIniCab + 2, coluIniCab + 4].Value = dataCab[2, 4];
                ws.Cells[filaIniCab + 2, coluIniCab + 6].Value = dataCab[2, 6];
                ws.Cells[filaIniCab + 2, coluIniCab + 7].Value = dataCab[2, 7];
                ws.Cells[filaIniCab + 2, coluIniCab + 9].Value = dataCab[2, 9];

                ws.Cells[filaIniCab + 3, coluIniCab + 1].Value = dataCab[3, 1];
                ws.Cells[filaIniCab + 3, coluIniCab + 2].Value = dataCab[3, 2];
                ws.Cells[filaIniCab + 3, coluIniCab + 3].Value = dataCab[3, 3];
                ws.Cells[filaIniCab + 3, coluIniCab + 4].Value = dataCab[3, 4];
                ws.Cells[filaIniCab + 3, coluIniCab + 6].Value = dataCab[3, 6];
                ws.Cells[filaIniCab + 3, coluIniCab + 7].Value = dataCab[3, 7];
                ws.Cells[filaIniCab + 3, coluIniCab + 9].Value = dataCab[3, 9];

                ultimaColu = coluIniCab + 10;
            }


            #endregion

            #region cuerpo
            if (registros.Any())
            {
                int filaX = 0;
                int filaProdTotal = 0;
                foreach (var reg in registros)
                {
                    if (reg.Nombre.Contains("SEIN") || reg.Nombre.Contains("sin considerar")) // obtener fila total
                    {
                        filaProdTotal = filaIniData + filaX;

                    }

                    if (reg.Nombre.Contains("considerando intercambios") || reg.Nombre.Contains("Intercambios") || reg.Nombre.Contains("Importación"))
                        filaX++;

                    ws.Cells[filaIniData + filaX, coluIniData + 0].Value = reg.Nombre;
                    int c = 0;
                    foreach (decimal? col in reg.ListaData)
                    {
                        if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                        {
                            if (c == 7 || c == 5) //con signo  de %
                            {
                                ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col / 100;
                                ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00%";
                            }
                            else
                            {
                                ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col;
                                ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00";
                            }
                        }
                        else
                        {
                            if (c == 4 || c == 7 || c == 9) //con signo  de %
                            {
                                ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col / 100;
                                ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00%";
                            }
                            else
                            {
                                ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col;
                                ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00";
                            }
                        }


                        c++;
                    }

                    filaX++;
                }

                ultimaFila = filaIniData + filaX - 1;

                //ultimaColu = coluIniData + 10;


                #region Formato Cuerpo



                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.BorderCeldas5_1(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);
                UtilExcel.CeldasExcelEnNegrita(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.BorderCeldas5_1(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);

                UtilExcel.BorderCeldas5_1(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

                UtilExcel.BorderCeldas5_1(ws, filaIniData - 4, coluIniData + 1, ultimaFila, coluIniData + 3);
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual                     
                    UtilExcel.BorderCeldas5_1(ws, filaIniData - 4, coluIniData + 4, ultimaFila, coluIniData + 6);
                else
                    UtilExcel.BorderCeldas5_1(ws, filaIniData - 4, coluIniData + 4, ultimaFila, coluIniData + 5);
                UtilExcel.BorderCeldas5_1(ws, filaIniData - 4, coluIniData + 6, ultimaFila, coluIniData + 8);
                UtilExcel.BorderCeldas5_1(ws, filaIniData - 4, coluIniData, ultimaFila, coluIniData);

                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                {
                    ws.Row(ultimaFila).Height = 30;
                    UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila - 2, coluIniData, ultimaFila - 2, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                    UtilExcel.BorderCeldas5_1(ws, ultimaFila - 2, coluIniData, ultimaFila - 2, ultimaColu);
                    UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila - 2, coluIniData, ultimaFila - 2, ultimaColu);
                    UtilExcel.CeldasExcelEnNegrita(ws, filaProdTotal, coluIniData, filaProdTotal, coluIniData);

                    UtilExcel.CeldasExcelWrapText(ws, filaProdTotal, coluIniData, filaProdTotal, coluIniData);
                    UtilExcel.CeldasExcelWrapText(ws, ultimaFila, coluIniData, ultimaFila, coluIniData);
                }
                #endregion

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos menos  reporte anual 
                {
                    #region Texto_Anotacion_3
                    UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, tablaData.Leyenda.ListaDescripcion);

                    #endregion

                    #region Nota
                    ws.Cells[ultimaFila + 3, coluIniData].Value = "Nota";
                    UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila + 3, coluIniData, ultimaFila + 3, coluIniData);
                    ws.Cells[ultimaFila + 4, coluIniData].Value = "-Los valores de potencia generada corresponden a los registrados en los bornes de generación.";
                    UtilExcel.FormatoNota(ws, ultimaFila + 4, coluIniData);
                    #endregion
                }


                finalPosTabla = ultimaFila + 4;
            }
            #endregion
        }

        /// <summary>
        /// Genera el grafico de Carga de Evolución Semanal Sin Interconexión.
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="pintarExcell"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellCargaEvolucionSemanalSinInterconexion(ExcelWorksheet ws, GraficoWeb pintarExcell, ref int finalPosTabla)
        {

            ExcelChart miChart = ws.Drawings["grafico4"] as ExcelChart;

            if (pintarExcell != null)
            {
                miChart.Title.Text = pintarExcell.TitleText;

                #region tablaUsar

                int filaIniDataG = 140;
                int coluIniDataG = 27;
                int ultFila = 0;

                int fi = 0;
                foreach (var cat in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat;
                    fi++;
                }

                int col1 = 0;
                int cc = 0;

                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name.Trim();
                    int fila1 = 0;

                    for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                    {
                        ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                        fila1++;
                    }
                    cc++;
                    ultFila = filaIniDataG + fila1;
                    col1++;
                }

                #endregion

                #region Grafico

                for (int val = 0; val < pintarExcell.Series.Count; val++)
                {
                    miChart.Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + val, ultFila, coluIniDataG + 1 + val);

                    miChart.Series[val].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                    miChart.Series[val].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + val].Value;
                }

                miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);

                #endregion

                finalPosTabla = finalPosTabla + 29;

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 3, pintarExcell.Subtitle);
                #endregion

                finalPosTabla += 1;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el grafico de evolucíón semanal para el reporte Producción por tipo generación
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="graficoVarSem"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellBarraMDyEvolucionSemanal(ExcelWorksheet ws, GraficoWeb graficoVarSem, ref int finalPosTabla)
        {
            ExcelChart miChart = ws.Drawings["grafico3"] as ExcelChart;

            if (graficoVarSem != null)
            {
                GraficoWeb pintarExcell = graficoVarSem;

                miChart.Title.Text = pintarExcell.TitleText;

                #region tablaUsar

                int filaIniDataG = 80;
                int coluIniDataG = 27;
                int ultFila = 0;

                int fi = 0;
                foreach (var cat in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat;
                    fi++;
                }

                int col1 = 0;
                int cc = 0;

                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name.Trim();
                    int fila1 = 0;

                    for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                    {
                        ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                        fila1++;
                    }
                    cc++;
                    ultFila = filaIniDataG + fila1;
                    col1++;
                }



                #endregion

                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < pintarExcell.Series.Count - 2; i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                #region Grafico

                for (int val = 0; val < pintarExcell.Series.Count - 2; val++)
                {
                    miChart.Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + val, ultFila, coluIniDataG + 1 + val);
                    miChart.Series[val].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                    miChart.Series[val].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + val].Value;
                }

                for (int val = 0; val < pintarExcell.Series.Count - 1; val++)
                {
                    miChart.PlotArea.ChartTypes[2].Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 2 + val, ultFila, coluIniDataG + 2 + val);
                    miChart.PlotArea.ChartTypes[2].Series[val].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 2 + val].Value;
                }

                miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);

                #endregion

                finalPosTabla = finalPosTabla + 25;

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 3, pintarExcell.Subtitle);
                #endregion

                finalPosTabla += 1;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el grafico de Carga Despacho para el reporte Producción por tipo generación
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="graficoCargaDespacho"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellDiagramaCargaDespacho(ExcelWorksheet ws, GraficoWeb graficoCargaDespacho, ref int finalPosTabla)
        {
            ExcelChart miChart = ws.Drawings["grafico2"] as ExcelChart;

            if (graficoCargaDespacho != null)
            {
                GraficoWeb pintarExcell = graficoCargaDespacho;

                #region tablaUsar

                int filaIniDataG = 25;
                int coluIniDataG = 27;
                int ultFila = 0;

                int fi = 0;
                foreach (var cat in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat;
                    fi++;
                }

                int col1 = 0;
                int cc = 0;

                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name.Trim();
                    int fila1 = 0;

                    for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                    {
                        ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                        fila1++;
                    }
                    cc++;
                    ultFila = filaIniDataG + fila1;
                    col1++;
                }

                #endregion

                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < pintarExcell.Series.Count - 1; i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                #region Grafico

                for (int val = 0; val < pintarExcell.Series.Count - 1; val++)
                {
                    miChart.Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + pintarExcell.Series.Count - 1 - val, ultFila, coluIniDataG + pintarExcell.Series.Count - 1 - val);
                    miChart.Series[val].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                    miChart.Series[val].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + pintarExcell.Series.Count - 1 - val].Value;
                }

                miChart.PlotArea.ChartTypes[2].Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + pintarExcell.Series.Count, ultFila, coluIniDataG + pintarExcell.Series.Count);

                miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);

                #endregion

                finalPosTabla = finalPosTabla + 26;

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 3, pintarExcell.Subtitle);
                #endregion

                finalPosTabla += 1;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el grafico de comparación para  el reporte Producción por tipo generación
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="graficoCompMD"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellBarraComparacionMDxTgeneracion(ExcelWorksheet ws, GraficoWeb graficoCompMD, ref int finalPosTabla)
        {
            ExcelChart miChart = ws.Drawings["grafico1"] as ExcelChart;

            if (graficoCompMD != null)
            {
                GraficoWeb pintarExcell = graficoCompMD;

                #region tablaUsar

                int filaIniDataG = 8;
                int coluIniDataG = 27;
                int ultFila;

                int fi = 0;
                foreach (var cat in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + fi].Value = cat;
                    fi++;
                }

                int fil1 = 0;
                int cc = 0;

                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG + 1 + fil1, coluIniDataG].Value = serie.Name;
                    int col1 = 0;

                    for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                    {
                        ws.Cells[filaIniDataG + 1 + fil1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                        col1++;
                    }
                    cc++;
                    ultFila = filaIniDataG + pintarExcell.Series.Count;
                    fil1++;
                }


                #endregion

                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < pintarExcell.Series.Count; i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                #region Grafico

                for (int val = 0; val < pintarExcell.Series.Count; val++)
                {
                    miChart.Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1 + val, coluIniDataG + 1, filaIniDataG + 1 + val, coluIniDataG + 3);
                    miChart.Series[val].XSeries = ExcelRange.GetAddress(filaIniDataG, coluIniDataG + 1, filaIniDataG, coluIniDataG + 3);
                    miChart.Series[val].Header = (string)ws.Cells[filaIniDataG + 1 + val, coluIniDataG].Value;
                }

                miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);

                #endregion

                finalPosTabla = finalPosTabla + 26;

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 3, pintarExcell.Subtitle);
                #endregion

                finalPosTabla += 1;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        #endregion

        #region Servicio

        /// <summary>
        /// GenerarDatosInterconexion48ReporteMDCoincidente
        /// </summary>
        /// <param name="regMD"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> GenerarDatosInterconexion48ReporteMDCoincidente(MeMedicion48DTO regMD, DateTime fechaMD, int tipoResultadoFecha)
        {
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            //data de la interconexion
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;

            int mediaHora = fechaMD.Hour * 2 + fechaMD.Minute / 30;
            if (mediaHora == 0) mediaHora = 48; //las 00:00

            if (regMD != null)
            {
                m.Meditotal = ((decimal?)regMD.GetType().GetProperty(ConstantesAppServicio.CaracterH + mediaHora.ToString()).GetValue(regMD, null)).GetValueOrDefault(0);
                m.Tgenercodi = regMD.Tgenercodi;
            }

            //Convertirlo a reporte
            decimal valorExportacion = m.Meditotal > 0 ? m.Meditotal.GetValueOrDefault(0) : 0;
            decimal valorImportacion = m.Meditotal < 0 ? m.Meditotal.GetValueOrDefault(0) * -1 : 0;

            m.Meditotal = valorImportacion - valorExportacion;
            l.Add(m);

            //Importación
            ResultadoTotalGeneracion imp = new ResultadoTotalGeneracion();
            imp.Medifecha = fechaMD.Date;
            imp.TipoResultadoFecha = tipoResultadoFecha;
            imp.Meditotal = valorImportacion;
            imp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh;
            l.Add(imp);

            //Exportacion
            ResultadoTotalGeneracion exp = new ResultadoTotalGeneracion();
            exp.Medifecha = fechaMD.Date;
            exp.TipoResultadoFecha = tipoResultadoFecha;
            exp.Meditotal = valorExportacion;
            exp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
            l.Add(exp);

            return l;
        }

        /// <summary>
        /// GenerarDatosInterconexion48ReporteMDCargaMasiva
        /// </summary>
        /// <param name="regMD"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> GenerarDatosInterconexion48ReporteMDCargaMasiva(MeMedicion48DTO regMD, DateTime fechaMD, int tipoResultadoFecha, DateTime fechaIni, DateTime fechaFin)
        {
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            //data de la interconexion
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;

            if (regMD != null)
            {
                m.Meditotal = regMD.Meditotal;
                m.Tgenercodi = regMD.Tgenercodi;
            }


            //Convertirlo a reporte
            decimal valorExportacion = m.Meditotal > 0 ? m.Meditotal.GetValueOrDefault(0) : 0;
            decimal valorImportacion = m.Meditotal < 0 ? m.Meditotal.GetValueOrDefault(0) * -1 : 0;

            m.Meditotal = valorImportacion - valorExportacion;
            l.Add(m);

            //Importación
            ResultadoTotalGeneracion imp = new ResultadoTotalGeneracion();
            imp.Medifecha = fechaMD.Date;
            imp.TipoResultadoFecha = tipoResultadoFecha;
            imp.Meditotal = valorImportacion;
            imp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh;
            imp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, FechaMD = fechaMD };
            l.Add(imp);

            //Exportacion
            ResultadoTotalGeneracion exp = new ResultadoTotalGeneracion();
            exp.Medifecha = fechaMD.Date;
            exp.TipoResultadoFecha = tipoResultadoFecha;
            exp.Meditotal = valorExportacion;
            exp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
            exp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, FechaMD = fechaMD };
            l.Add(exp);

            return l;
        }

        /// <summary>
        /// GenerarDatosInterconexion96ReporteMDCoincidente
        /// </summary>
        /// <param name="regMD"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> GenerarDatosInterconexion96ReporteMDCoincidente(MeMedicion96DTO regMD, DateTime fechaMD, int tipoResultadoFecha)
        {
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            //data de la interconexion
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;

            int cuartoHora = fechaMD.Hour * 4 + fechaMD.Minute / 15;
            if (cuartoHora == 0) cuartoHora = 96; //las 00:00

            if (regMD != null)
            {
                m.Meditotal = ((decimal?)regMD.GetType().GetProperty(ConstantesAppServicio.CaracterH + cuartoHora.ToString()).GetValue(regMD, null)).GetValueOrDefault(0);
                m.Tgenercodi = regMD.Tgenercodi;
            }

            //Convertirlo a reporte
            decimal valorExportacion = m.Meditotal > 0 ? m.Meditotal.GetValueOrDefault(0) : 0;
            decimal valorImportacion = m.Meditotal < 0 ? m.Meditotal.GetValueOrDefault(0) * -1 : 0;

            m.Meditotal = valorImportacion - valorExportacion;
            l.Add(m);

            //Importación
            ResultadoTotalGeneracion imp = new ResultadoTotalGeneracion();
            imp.Medifecha = fechaMD.Date;
            imp.TipoResultadoFecha = tipoResultadoFecha;
            imp.Meditotal = valorImportacion;
            imp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh;
            l.Add(imp);

            //Exportacion
            ResultadoTotalGeneracion exp = new ResultadoTotalGeneracion();
            exp.Medifecha = fechaMD.Date;
            exp.TipoResultadoFecha = tipoResultadoFecha;
            exp.Meditotal = valorExportacion;
            exp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
            l.Add(exp);

            return l;
        }

        /// <summary>
        /// GenerarDatosInterconexion96ReporteMDCargaMasiva
        /// </summary>
        /// <param name="regMD"></param>
        /// <param name="fechaMD"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> GenerarDatosInterconexion96ReporteMDCargaMasiva(MeMedicion96DTO regMD, DateTime fechaMD, int tipoResultadoFecha, DateTime fechaIni, DateTime fechaFin)
        {
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            //data de la interconexion
            ResultadoTotalGeneracion m = new ResultadoTotalGeneracion();
            m.Medifecha = fechaMD.Date;
            m.TipoResultadoFecha = tipoResultadoFecha;

            if (regMD != null)
            {
                m.Meditotal = regMD.Meditotal;
                m.Tgenercodi = regMD.Tgenercodi;
            }

            //Convertirlo a reporte
            decimal valorExportacion = m.Meditotal > 0 ? m.Meditotal.GetValueOrDefault(0) : 0;
            decimal valorImportacion = m.Meditotal < 0 ? m.Meditotal.GetValueOrDefault(0) * -1 : 0;

            m.Meditotal = valorImportacion - valorExportacion;
            l.Add(m);

            //Importación
            ResultadoTotalGeneracion imp = new ResultadoTotalGeneracion();
            imp.Medifecha = fechaMD.Date;
            imp.TipoResultadoFecha = tipoResultadoFecha;
            imp.Meditotal = valorImportacion;
            imp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh;
            imp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, FechaMD = fechaMD };
            l.Add(imp);

            //Exportacion
            ResultadoTotalGeneracion exp = new ResultadoTotalGeneracion();
            exp.Medifecha = fechaMD.Date;
            exp.TipoResultadoFecha = tipoResultadoFecha;
            exp.Meditotal = valorExportacion;
            exp.Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
            exp.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaIni, FechaFin = fechaFin, FechaMD = fechaMD };
            l.Add(exp);

            return l;
        }

        /// <summary>
        /// Generar variacion para exportacion, importacion y total de interconexion
        /// </summary>
        /// <param name="listaRegAct"></param>
        /// <param name="listaRegAnt"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static List<ResultadoTotalGeneracion> GenerarVariacionByListaInterconexion(List<ResultadoTotalGeneracion> listaRegAct, List<ResultadoTotalGeneracion> listaRegAnt, int tipoResultadoFecha, DateTime fechaProceso)
        {
            List<ResultadoTotalGeneracion> l = new List<ResultadoTotalGeneracion>();

            ResultadoTotalGeneracion varExp = GenerarVariacionByTotalGeneracion(listaRegAct.Find(x => x.Tptomedicodi == ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh), listaRegAnt.Find(x => x.Tptomedicodi == ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh)
             , tipoResultadoFecha, fechaProceso);
            ResultadoTotalGeneracion varImp = GenerarVariacionByTotalGeneracion(listaRegAct.Find(x => x.Tptomedicodi == ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh), listaRegAnt.Find(x => x.Tptomedicodi == ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh)
                , tipoResultadoFecha, fechaProceso);
            ResultadoTotalGeneracion varInter = GenerarVariacionByTotalGeneracion(listaRegAct.Find(x => x.Tptomedicodi == null), listaRegAnt.Find(x => x.Tptomedicodi == null)
                , tipoResultadoFecha, fechaProceso);

            l.Add(varExp);
            l.Add(varImp);
            l.Add(varInter);

            return l;
        }

        /// <summary>
        /// ObtenerDataTablaMDTipoGen
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaMDTgeneracionData"></param>
        /// <param name="listaMDPotGenData"></param>
        /// <param name="listaInterTipoData"></param>
        /// <param name="listaInterTotalData"></param>
        /// <param name="listaMDTotalData"></param>
        /// <param name="listaTgeneracion"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaMDTipoGen(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<ResultadoTotalGeneracion> listaMDTgeneracionData,
            List<ResultadoTotalGeneracion> listaMDPotGenData, List<ResultadoTotalGeneracion> listaInterTipoData, List<ResultadoTotalGeneracion> listaInterTotalData,
            List<ResultadoTotalGeneracion> listaMDTotalData, List<SiTipogeneracionDTO> listaTgeneracion)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[4, 11];

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual        
            {
                matrizCabecera[0, 0] = "Por tipo de Generación";
                matrizCabecera[0, 1] = "Últimos tres meses";
                matrizCabecera[0, 4] = "Máxima Anual";

                matrizCabecera[1, 1] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango2Ant_FechaFin.Month), (objFecha.AnioAct.Rango2Ant_FechaFin.Year).ToString().Substring(2));
                matrizCabecera[1, 2] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango1Ant_FechaFin.Month), (objFecha.AnioAct.Rango1Ant_FechaFin.Year).ToString().Substring(2));
                matrizCabecera[1, 3] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));

                matrizCabecera[1, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                matrizCabecera[1, 5] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                matrizCabecera[1, 6] = string.Format("Var (%) \n {0}/{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
                matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                matrizCabecera[1, 8] = string.Format("Var (%) \n {0}/{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);

                matrizCabecera[2, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).FechaOnlyDia;
                matrizCabecera[2, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant).FechaOnlyDia;
                matrizCabecera[2, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyDia;
                matrizCabecera[2, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).FechaOnlyDia;
                matrizCabecera[2, 5] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).FechaOnlyDia;
                matrizCabecera[2, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).FechaOnlyDia;

                matrizCabecera[3, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).FechaOnlyHora;
                matrizCabecera[3, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant).FechaOnlyHora;
                matrizCabecera[3, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyHora;
                matrizCabecera[3, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).FechaOnlyHora;
                matrizCabecera[3, 5] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).FechaOnlyHora;
                matrizCabecera[3, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).FechaOnlyHora;
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
                {
                    matrizCabecera[0, 0] = "Por tipo de Generación";
                    matrizCabecera[0, 1] = "Últimos tres meses";
                    matrizCabecera[0, 4] = "Año Anterior";
                    matrizCabecera[0, 6] = string.Format("Máxima Demanda en el periodo Enero a {0}", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month));


                    matrizCabecera[1, 1] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango2Ant_FechaFin.Month), (objFecha.AnioAct.Rango2Ant_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 2] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.Rango1Ant_FechaFin.Month), (objFecha.AnioAct.Rango1Ant_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 3] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.Year).ToString().Substring(2));
                    matrizCabecera[1, 4] = string.Format(" {0}-{1} ", EPDate.f_NombreMesCorto(objFecha.AnioAct.RangoAct_FechaFin.Month), (objFecha.AnioAct.RangoAct_FechaFin.AddYears(-1).Year).ToString().Substring(2));
                    matrizCabecera[1, 5] = "Var \n (%)";
                    matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 8] = string.Format("Var (%) \n {0}/{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
                    matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 10] = string.Format("Var (%) \n {0}/{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);

                    matrizCabecera[2, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).FechaOnlyDia;
                    matrizCabecera[2, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant).FechaOnlyDia;
                    matrizCabecera[2, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyDia;
                    matrizCabecera[2, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyDia;
                    matrizCabecera[2, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).FechaOnlyDia;
                    matrizCabecera[2, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).FechaOnlyDia;
                    matrizCabecera[2, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).FechaOnlyDia;

                    matrizCabecera[3, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).FechaOnlyHora;
                    matrizCabecera[3, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant).FechaOnlyHora;
                    matrizCabecera[3, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyHora;
                    matrizCabecera[3, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyHora;
                    matrizCabecera[3, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).FechaOnlyHora;
                    matrizCabecera[3, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).FechaOnlyHora;
                    matrizCabecera[3, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).FechaOnlyHora;
                }
                else  // reportes semanales
                {
                    matrizCabecera[0, 0] = "Por tipo de Generación";
                    matrizCabecera[0, 1] = "Últimas tres Semanas Operativas";
                    matrizCabecera[0, 4] = "Año Anterior";
                    matrizCabecera[0, 6] = string.Format("Máxima Demanda en el periodo al {0}", objFecha.AnioAct.Fecha_Final.ToString(ConstantesAppServicio.FormatoFecha));

                    matrizCabecera[1, 1] = string.Format("SEM {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).SemanaFechaDesc);
                    matrizCabecera[1, 2] = string.Format("SEM {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant).SemanaFechaDesc);
                    matrizCabecera[1, 3] = string.Format("SEM {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).SemanaFechaDesc);
                    matrizCabecera[1, 4] = string.Format("SEM {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).SemanaFechaDesc);
                    matrizCabecera[1, 5] = "Var \n (%)";
                    matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 8] = string.Format("Var (%) \n {0}/{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
                    matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
                    matrizCabecera[1, 10] = string.Format("Var (%) \n {0}/{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);

                    matrizCabecera[2, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).FechaOnlyDia;
                    matrizCabecera[2, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant).FechaOnlyDia;
                    matrizCabecera[2, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyDia;
                    matrizCabecera[2, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyDia;
                    matrizCabecera[2, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).FechaOnlyDia;
                    matrizCabecera[2, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).FechaOnlyDia;
                    matrizCabecera[2, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).FechaOnlyDia;

                    matrizCabecera[3, 1] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).FechaOnlyHora;
                    matrizCabecera[3, 2] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant).FechaOnlyHora;
                    matrizCabecera[3, 3] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyHora;
                    matrizCabecera[3, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyHora;
                    matrizCabecera[3, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).FechaOnlyHora;
                    matrizCabecera[3, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).FechaOnlyHora;
                    matrizCabecera[3, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).FechaOnlyHora;
                }
            }

            cabRepo.CabeceraData = matrizCabecera;
            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            //Por tipo de Generación
            foreach (var tgen in listaTgeneracion)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();
                List<string> filtroDatos = new List<string>();

                var listaXTgen = listaMDTgeneracionData.Where(x => x.Tgenercodi == tgen.Tgenercodi).ToList();

                ResultadoTotalGeneracion regMDSem2MD48 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
                ResultadoTotalGeneracion regMDSem1MD48 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
                ResultadoTotalGeneracion regMDSem0MD48 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regMDSem0AnioAntMD48 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

                ResultadoTotalGeneracion regMDSem0VarMD48 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regMDAnio2MD96 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regMDAnio1MD96 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regMDAnio0MD96 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

                ResultadoTotalGeneracion regMDAnio0VarMD48 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
                ResultadoTotalGeneracion regMDAnio1VarMD48 = listaXTgen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                datos.Add(regMDSem2MD48.Meditotal);
                datos.Add(regMDSem1MD48.Meditotal);
                datos.Add(regMDSem0MD48.Meditotal);
                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
                {
                    datos.Add(regMDSem0AnioAntMD48.Meditotal);
                    datos.Add(regMDSem0VarMD48.Meditotal);
                }

                datos.Add(regMDAnio0MD96.Meditotal);
                datos.Add(regMDAnio1MD96.Meditotal);
                datos.Add(regMDAnio0VarMD48.Meditotal);

                datos.Add(regMDAnio2MD96.Meditotal);
                datos.Add(regMDAnio1VarMD48.Meditotal);

                filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regMDSem2MD48.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDSem2MD48.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDSem2MD48.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regMDSem1MD48.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDSem1MD48.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDSem1MD48.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regMDSem0MD48.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDSem0MD48.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDSem0MD48.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));

                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
                {
                    filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regMDSem0AnioAntMD48.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDSem0AnioAntMD48.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDSem0AnioAntMD48.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                    filtroDatos.Add("");
                }

                filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regMDAnio0MD96.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio0MD96.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio0MD96.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regMDAnio1MD96.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio1MD96.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio1MD96.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regMDAnio2MD96.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio2MD96.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio2MD96.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add("");

                registro.Nombre = tgen.Tgenernomb;
                registro.ListaData = datos;
                registro.ListaFiltroData = filtroDatos;

                registros.Add(registro);

            }

            //Potencia generada en el  SEIN
            ResultadoTotalGeneracion regMDPotGenSem2MD48 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regMDPotGenSem1MD48 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regMDPotGenSem0MD48 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDPotGenSem0AnioAntMD48 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regMDPotGenSem0VarMD48 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regMDPotGenAnio2MD96 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio1MD96 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio0MD96 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

            ResultadoTotalGeneracion regMDPotGenAnio0VarMD48 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
            ResultadoTotalGeneracion regMDPotGenAnio1VarMD48 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            RegistroReporte registro0 = new RegistroReporte();
            List<decimal?> datos0 = new List<decimal?>();

            datos0.Add(regMDPotGenSem2MD48.Meditotal);
            datos0.Add(regMDPotGenSem1MD48.Meditotal);
            datos0.Add(regMDPotGenSem0MD48.Meditotal);
            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
            {
                datos0.Add(regMDPotGenSem0AnioAntMD48.Meditotal);
                datos0.Add(regMDPotGenSem0VarMD48.Meditotal);
            }

            datos0.Add(regMDPotGenAnio0MD96.Meditotal);
            datos0.Add(regMDPotGenAnio1MD96.Meditotal);
            datos0.Add(regMDPotGenAnio0VarMD48.Meditotal);

            datos0.Add(regMDPotGenAnio2MD96.Meditotal);
            datos0.Add(regMDPotGenAnio1VarMD48.Meditotal);

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual    
                registro0.Nombre = "Máxima Potencia sin considerar intercambios internacionales";
            else
                registro0.Nombre = "Potencia generada en el SEIN";
            registro0.ListaData = datos0;

            registros.Add(registro0);


            //Tipo de interconexion
            var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" },
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" }
                                }.ToList();

            foreach (var tinter in listaTinter)
            {
                RegistroReporte registro1 = new RegistroReporte();
                datos0 = new List<decimal?>();
                List<string> filtroDatos = new List<string>();

                var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                ResultadoTotalGeneracion regMDSem2MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
                ResultadoTotalGeneracion regMDSem1MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
                ResultadoTotalGeneracion regMDSem0MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regMDSem0AnioAntMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

                ResultadoTotalGeneracion regMDSem0VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regMDAnio2MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regMDAnio1MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regMDAnio0MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

                ResultadoTotalGeneracion regMDAnio0VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
                ResultadoTotalGeneracion regMDAnio1VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                datos0.Add(regMDSem2MD48.Meditotal);
                datos0.Add(regMDSem1MD48.Meditotal);
                datos0.Add(regMDSem0MD48.Meditotal);
                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
                {
                    datos0.Add(regMDSem0AnioAntMD48.Meditotal);
                    datos0.Add(regMDSem0VarMD48.Meditotal);
                }

                datos0.Add(regMDAnio0MD96.Meditotal);
                datos0.Add(regMDAnio1MD96.Meditotal);
                datos0.Add(regMDAnio0VarMD48.Meditotal);

                datos0.Add(regMDAnio2MD96.Meditotal);
                datos0.Add(regMDAnio1VarMD48.Meditotal);

                filtroDatos.Add(string.Format("verTablaInterconexionMaximaDemanda('{0}','{1}','{2}')", regMDSem2MD48.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDSem2MD48.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDSem2MD48.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add(string.Format("verTablaInterconexionMaximaDemanda('{0}','{1}','{2}')", regMDSem1MD48.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDSem1MD48.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDSem1MD48.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add(string.Format("verTablaInterconexionMaximaDemanda('{0}','{1}','{2}')", regMDSem0MD48.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDSem0MD48.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDSem0MD48.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));

                if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
                {
                    filtroDatos.Add(string.Format("verTablaInterconexionMaximaDemanda('{0}','{1}','{2}')", regMDSem0AnioAntMD48.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDSem0AnioAntMD48.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDSem0AnioAntMD48.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                    filtroDatos.Add("");
                }

                filtroDatos.Add(string.Format("verTablaInterconexionMaximaDemanda('{0}','{1}','{2}')", regMDAnio0MD96.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio0MD96.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio0MD96.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add(string.Format("verTablaInterconexionMaximaDemanda('{0}','{1}','{2}')", regMDAnio1MD96.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio1MD96.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio1MD96.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add("");

                filtroDatos.Add(string.Format("verTablaInterconexionMaximaDemanda('{0}','{1}','{2}')", regMDAnio2MD96.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio2MD96.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regMDAnio2MD96.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add("");

                registro1.Nombre = tinter.Nombre;
                registro1.ListaData = datos0;
                registro1.ListaFiltroData = filtroDatos;

                registros.Add(registro1);
            }

            //Intercambios Internacionales
            ResultadoTotalGeneracion regInterTotalSem2MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regInterTotalSem1MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regInterTotalSem0MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regInterTotalSem0AnioAntMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regInterTotalSem0VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regInterTotalAnio2MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAnio1MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAnio0MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

            ResultadoTotalGeneracion regInterTotalAnio0VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
            ResultadoTotalGeneracion regInterTotalAnio1VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            registro0 = new RegistroReporte();
            datos0 = new List<decimal?>();

            datos0.Add(regInterTotalSem2MD48.Meditotal);
            datos0.Add(regInterTotalSem1MD48.Meditotal);
            datos0.Add(regInterTotalSem0MD48.Meditotal);
            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
            {
                datos0.Add(regInterTotalSem0AnioAntMD48.Meditotal);
                datos0.Add(regInterTotalSem0VarMD48.Meditotal);
            }

            datos0.Add(regInterTotalAnio0MD96.Meditotal);
            datos0.Add(regInterTotalAnio1MD96.Meditotal);
            datos0.Add(regInterTotalAnio0VarMD48.Meditotal);

            datos0.Add(regInterTotalAnio2MD96.Meditotal);
            datos0.Add(regInterTotalAnio1VarMD48.Meditotal);


            registro0.Nombre = "Intercambios Internacionales";
            registro0.ListaData = datos0;

            registros.Add(registro0);



            //Total Máxima Demanda
            ResultadoTotalGeneracion regMDTotalSem2MD48 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regMDTotalSem1MD48 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regMDTotalSem0MD48 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDTotalSem0AnioAntMD48 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regMDTotalSem0VarMD48 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regMDTotalAnio2MD96 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regMDTotalAnio1MD96 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regMDTotalAnio0MD96 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

            ResultadoTotalGeneracion regMDTotalAnio0VarMD48 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
            ResultadoTotalGeneracion regMDTotalAnio1VarMD48 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            registro0 = new RegistroReporte();
            datos0 = new List<decimal?>();

            datos0.Add(regMDTotalSem2MD48.Meditotal);
            datos0.Add(regMDTotalSem1MD48.Meditotal);
            datos0.Add(regMDTotalSem0MD48.Meditotal);
            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
            {
                datos0.Add(regMDTotalSem0AnioAntMD48.Meditotal);
                datos0.Add(regMDTotalSem0VarMD48.Meditotal);
            }

            datos0.Add(regMDTotalAnio0MD96.Meditotal);
            datos0.Add(regMDTotalAnio1MD96.Meditotal);
            datos0.Add(regMDTotalAnio0VarMD48.Meditotal);

            datos0.Add(regMDTotalAnio2MD96.Meditotal);
            datos0.Add(regMDTotalAnio1VarMD48.Meditotal);

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual    
                registro0.Nombre = "Total Máxima Potencia considerando intercambios internacionales";
            else
                registro0.Nombre = "Total Máxima Demanda";
            registro0.ListaData = datos0;

            registros.Add(registro0);

            tabla.ListaRegistros = registros;

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
            {
                // Adicionamos los pie de pagina
                string texto = UtilAnexoAPR5.EscogerAnotacion("3.1", 1, objFecha.TipoVistaReporte, objFecha.TipoReporte);

                PieReporte pie = new PieReporte();
                List<string> lstPie = new List<string>();

                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                    lstPie.Add(texto + NotasPieWebInformeMensual.Cuadro1_Reporte_3p1);
                else
                    lstPie.Add(texto + NotasPieWebInformeSemanal.Cuadro1_Reporte_3p1);

                pie.ListaDescripcion = lstPie;
                tabla.Leyenda = pie;

            }
            #endregion

            return tabla;
        }

        /// <summary>
        /// Grafico web de la comparacion de la MD por tipo de generacion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaMDTgeneracionData"></param>
        /// <param name="listaTgeneracion"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraComparacionMDxTgeneracionMensual(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            List<ResultadoTotalGeneracion> listaMDTgeneracionData, List<SiTipogeneracionDTO> listaTgeneracion)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            GraficoWeb grafico = new GraficoWeb();
            string subtitulo = "";
            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos menos el reporte anual 
            {
                var texto = UtilAnexoAPR5.EscogerAnotacion("3.1", 2, objFecha.TipoVistaReporte, objFecha.TipoReporte);
                subtitulo = texto + string.Format(NotasPieWebInformeMensual.Grafico1_Reporte_3p1, EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToLower(), listaAnio[0], listaAnio[1], listaAnio[2]);
            }

            grafico.Subtitle = subtitulo;

            grafico.XAxisCategories = listaAnio;
            grafico.XAxisTitle = "Año";

            grafico.YaxixTitle = "MW";

            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaTgeneracion.Count()][];

            int cc = 0;
            foreach (var cat in listaTgeneracion)
            {
                grafico.SeriesData[cc] = new decimal?[listaAnio.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = cat.Tgenernomb;
                grafico.Series[cc].Color = cat.Tgenercolor;
                grafico.Series[cc].Type = "column";

                var lista = listaMDTgeneracionData.Where(x => x.Tgenercodi == cat.Tgenercodi).OrderBy(x => x.Medifecha).ToList();

                var regAnio2Ant = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                decimal? h = regAnio2Ant != null ? regAnio2Ant.Meditotal : null;
                grafico.SeriesData[cc][0] = h;

                var regAnio1Ant = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                h = regAnio1Ant != null ? regAnio1Ant.Meditotal : null;
                grafico.SeriesData[cc][1] = h;

                var regAnioActual = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                h = regAnioActual != null ? regAnioActual.Meditotal : null;
                grafico.SeriesData[cc][2] = h;

                cc++;
            }
            return grafico;
        }

        /// <summary>
        /// Grafico WEB de la comparacion de la MD por tipo de generacion
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaTgeneracionData"></param>
        /// <param name="listaTgeneracion"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraComparacionMDxTgeneracion(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            List<ResultadoTotalGeneracion> listaTgeneracionData, List<SiTipogeneracionDTO> listaTgeneracion)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            GraficoWeb grafico = new GraficoWeb();

            string texto = UtilAnexoAPR5.EscogerAnotacion("3.1", 2, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_3p1, objFecha.AnioAct.RangoAct_Num, listaAnio[0], listaAnio[1], listaAnio[2]);

            grafico.XAxisCategories = listaAnio;
            grafico.XAxisTitle = "Año";

            grafico.YaxixTitle = "MW";

            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaTgeneracion.Count()][];

            int cc = 0;
            foreach (var cat in listaTgeneracion)
            {
                grafico.SeriesData[cc] = new decimal?[listaAnio.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = cat.Tgenernomb;
                grafico.Series[cc].Color = cat.Tgenercolor;
                grafico.Series[cc].Type = "column";

                var lista = listaTgeneracionData.Where(x => x.Tgenercodi == cat.Tgenercodi).OrderBy(x => x.Medifecha).ToList();

                var regAnio2Ant = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                decimal? h = regAnio2Ant != null ? regAnio2Ant.Meditotal : null;
                grafico.SeriesData[cc][0] = h;

                var regAnio1Ant = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                h = regAnio1Ant != null ? regAnio1Ant.Meditotal : null;
                grafico.SeriesData[cc][1] = h;

                var regAnioActual = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                h = regAnioActual != null ? regAnioActual.Meditotal : null;
                grafico.SeriesData[cc][2] = h;

                cc++;
            }
            return grafico;
        }

        /// <summary>
        /// Diagrama de carga Despacho
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaMDTotalData"></param>
        /// <param name="listaReporteFenerg"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoDiagramaCargaDespacho(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<ResultadoTotalGeneracion> listaMDTotalData, List<MeMedicion48DTO> listaReporteFenerg)
        {
            //
            List<MeMedicion48DTO> listaReporte = listaReporteFenerg.OrderByDescending(x => x.Orden).ToList();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();
            ResultadoTotalGeneracion regMDTotalSem0MD48 = listaMDTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regMD = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            string diaMD = regMD.FechaHora.Day.ToString("00") + " de " + regMD.FechaHora.ToString("MMMM", new CultureInfo("es-Pe")) + " de " + regMD.FechaHora.Year;

            //
            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = string.Format("MÁXIMA DEMANDA = {0} MW \n{1} \nHORA: {2}"
                                       , UtilAnexoAPR5.ImprimirValorTotalHtml(regMDTotalSem0MD48.Meditotal, nfi), diaMD, regMD.FechaOnlyHora);

            string texto = UtilAnexoAPR5.EscogerAnotacion("3.1", 3, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_3p1, objFecha.AnioAct.RangoAct_NumYAnio);
            grafico.YaxixTitle = "MW";

            DateTime horas = DateTime.Now.Date;
            List<string> listaHora = new List<string>();
            for (int i = 0; i < 48; i++)
            {
                horas = horas.AddMinutes(30);
                listaHora.Add(horas.ToString(ConstantesAppServicio.FormatoOnlyHora));
            }
            grafico.XAxisCategories = listaHora;

            decimal total = listaReporte.Sum(x => x.Meditotal.GetValueOrDefault(0));

            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaReporte.Count() + 1][];

            int cc = 0;
            foreach (var item in listaReporte)
            {
                grafico.SeriesData[cc] = new decimal?[48];

                RegistroSerie regSerie = new RegistroSerie();
                regSerie.Name = item.Fenergnomb;
                regSerie.Color = item.Fenercolor;
                regSerie.Type = "area";

                for (var j = 1; j <= 48; j++)
                {
                    decimal? valor = (decimal?)item.GetType().GetProperty(ConstantesAppServicio.CaracterH + j).GetValue(item, null);
                    grafico.SeriesData[cc][j - 1] = valor;
                }
                regSerie.Porcentaje = total > 0 ? item.Meditotal.GetValueOrDefault(0) / total : 0;

                grafico.Series.Add(regSerie);

                cc++;
            }

            RegistroSerie regSerieMD = new RegistroSerie();
            regSerieMD.Name = "MÁXIMA DEMANDA DEL DIA";
            regSerieMD.Color = "#97ABCF";
            regSerieMD.Type = "column";
            regSerieMD.NotShowInLegend = true;
            grafico.Series.Add(regSerieMD);

            grafico.SeriesData[cc] = new decimal?[48];
            grafico.SeriesData[cc][regMD.HDemanda] = regMDTotalSem0MD48.Meditotal;

            return grafico;
        }

        /// <summary>
        /// Genera el grafico excel de variacion semanal de lamax demanda
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDVarSemanalData"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraMDyEvolucionSemanal(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaMDVarSemanalData)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(objFecha.Anio2Ant.NumAnio.ToString());
            listaAnio.Add(objFecha.Anio1Ant.NumAnio.ToString());
            listaAnio.Add(objFecha.AnioAct.NumAnio.ToString());

            List<string> listaSemana = new List<string>();
            for (int numSemana = 1; numSemana <= 53; numSemana++)
            {
                listaSemana.Add(numSemana.ToString());
            }

            List<string> listaSerie = new List<string>();
            listaSerie.Add(string.Format("Máxima Demanda {0}", listaAnio[2]));
            listaSerie.Add(string.Format("Variación {0}/{1}", listaAnio[1], listaAnio[0]));
            listaSerie.Add(string.Format("Variación {0}/{1}", listaAnio[2], listaAnio[1]));

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = "MÁXIMA DEMANDA Y VARIACIÓN SEMANAL";

            string texto = UtilAnexoAPR5.EscogerAnotacion("3.1", 4, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico3_Reporte_3p1, listaAnio[0], listaAnio[1], listaAnio[2]);

            grafico.XAxisCategories = listaSemana;
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaSerie.Count][];
            grafico.YaxixMin = 5000;

            for (int cc = 0; cc < listaSerie.Count; cc++)
            {
                DateTime fIniAnioActual = new DateTime(objFecha.AnioAct.Sem01_FechaIni.Year, objFecha.AnioAct.Sem01_FechaIni.Month, objFecha.AnioAct.Sem01_FechaIni.Day).Date;

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = listaSerie[cc];
                int tipoFecha = 0;
                switch (cc)
                {
                    case 0:
                        tipoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        grafico.Series[cc].Type = "column";
                        grafico.Series[cc].YAxis = 0;
                        grafico.Series[cc].YAxisTitle = "MW";
                        grafico.Series[cc].Color = "#9BBB59";
                        break;
                    case 1:
                        tipoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                        grafico.Series[cc].Type = "spline";
                        grafico.Series[cc].YAxis = 1;
                        grafico.Series[cc].YAxisTitle = "Variación";
                        grafico.Series[cc].Color = "#002060";
                        break;
                    case 2:
                        tipoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                        grafico.Series[cc].Name = listaSerie[cc];
                        grafico.Series[cc].Type = "spline";
                        grafico.Series[cc].YAxis = 1;
                        grafico.Series[cc].YAxisTitle = "Variación";
                        grafico.Series[cc].Color = "#FF0000";
                        break;
                }

                grafico.SeriesData[cc] = new decimal?[listaSemana.Count];
                for (int numSemana = 1; numSemana <= listaSemana.Count; numSemana++)
                {
                    List<ResultadoTotalGeneracion> listaXSem = listaMDVarSemanalData.Where(x => x.Medifecha == fIniAnioActual).ToList();

                    ResultadoTotalGeneracion reg = listaXSem.Find(x => x.TipoResultadoFecha == tipoFecha && x.Medifecha.Date == fIniAnioActual);
                    grafico.SeriesData[cc][numSemana - 1] = reg != null ? reg.Meditotal : null;

                    fIniAnioActual = fIniAnioActual.AddDays(7);
                }
            }

            return grafico;
        }

        /// <summary>
        /// INFORME SEMANAL - Grafico Maxima Demanda
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDSemanalSinInterconexion"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoDiagramaCargaEvolucionSemanalSinInterconexion(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaMDSemanalSinInterconexion)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(objFecha.Anio3Ant.NumAnio.ToString());
            listaAnio.Add(objFecha.Anio2Ant.NumAnio.ToString());
            listaAnio.Add(objFecha.Anio1Ant.NumAnio.ToString());
            listaAnio.Add(objFecha.AnioAct.NumAnio.ToString());

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = "MÁXIMA DEMANDA SIN EXPORTACIÓN A ECUADOR";

            string texto = UtilAnexoAPR5.EscogerAnotacion("3.1", 5, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico4_Reporte_3p1, listaAnio[0], listaAnio[1], listaAnio[2], listaAnio[3]);

            //medias horas
            List<string> listaSemana = new List<string>();
            for (int numSemana = 1; numSemana <= 53; numSemana++)
            {
                listaSemana.Add(numSemana.ToString());
            }
            grafico.XAxisCategories = listaSemana;

            grafico.YaxixTitle = "Potencia \n(MW)";
            grafico.YaxixMin = 5000.0m;

            //
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaAnio.Count][];

            for (int cc = 0; cc < listaAnio.Count; cc++)
            {
                DateTime fIniAnioActual = new DateTime(objFecha.AnioAct.Sem01_FechaIni.Year, objFecha.AnioAct.Sem01_FechaIni.Month, objFecha.AnioAct.Sem01_FechaIni.Day).Date;

                grafico.SeriesData[cc] = new decimal?[listaSemana.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = listaAnio[cc];
                int tipoFecha = 0;
                switch (cc)
                {
                    case 0:
                        tipoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct;
                        grafico.Series[cc].Color = "#00B050";
                        break;
                    case 1:
                        tipoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct;
                        grafico.Series[cc].Color = "#7030A0";
                        break;
                    case 2:
                        tipoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        grafico.Series[cc].Color = "#C00000";
                        break;
                    case 3:
                        tipoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        grafico.Series[cc].Color = "#0070C0";
                        break;
                }

                grafico.SeriesData[cc] = new decimal?[listaSemana.Count];
                for (int numSemana = 1; numSemana <= listaSemana.Count; numSemana++)
                {
                    List<ResultadoTotalGeneracion> listaXSem = listaMDSemanalSinInterconexion.Where(x => x.Medifecha.Date == fIniAnioActual).ToList();

                    ResultadoTotalGeneracion reg = listaXSem.Find(x => x.TipoResultadoFecha == tipoFecha && x.Medifecha.Date == fIniAnioActual);
                    grafico.SeriesData[cc][numSemana - 1] = reg != null ? reg.Meditotal : null;

                    fIniAnioActual = fIniAnioActual.AddDays(7);
                }
            }

            return grafico;
        }

        #endregion

        /// <summary>
        /// Genera vista html del reporte Máxima demanda por tipo de generacion semanal
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ListarMaximaDemandaTipoGeneracionSemanalHtml(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();
            var tamTabla = 980;
            var tamColu1 = 285;
            if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
            {
                tamTabla = 1180;
                tamColu1 = 420;
            }

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: " + tamTabla + "px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: " + (tamTabla - 30) + "px;'>");

            #region cabecera

            if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual    
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th rowspan='4' style='width: " + tamColu1 + "px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan='5' style=''>{0}</th>", dataCab[0, 4]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 1]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 2]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 3]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 5]);
                strHtml.AppendFormat("<th style='width:60px;word-wrap: break-word; white-space: nowrap;' rowspan='3'>{0}</th>", dataCab[1, 6].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 7]);
                strHtml.AppendFormat("<th style='width:60px;word-wrap: break-word; white-space: nowrap;' rowspan='3'>{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 1]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 2]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 3]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 4]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 5]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 7]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 1]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 2]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 3]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 4]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 5]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 7]);
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");
            }
            else // reportes semanales y reporte mensual
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th rowspan='4' style='width: 285px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan='2'>{0}</th>", dataCab[0, 4]);
                strHtml.AppendFormat("<th colspan='5' style=''>{0}</th>", dataCab[0, 6]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 1]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 2]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 3]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
                strHtml.AppendFormat("<th style='width:100px;' rowspan='3'>{0}</th>", dataCab[1, 5]);

                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 6]);
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 7]);
                strHtml.AppendFormat("<th style='width:60px;word-wrap: break-word; white-space: nowrap;' rowspan='3'>{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 9]);
                strHtml.AppendFormat("<th style='width:60px;word-wrap: break-word; white-space: nowrap;' rowspan='3'>{0}</th>", dataCab[1, 10].Replace("\n", "<br>"));
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 1]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 2]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 3]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 4]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 6]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 7]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 9]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 1]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 2]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 3]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 4]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 6]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 7]);
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[3, 9]);
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");
            }


            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            int f = 0;
            foreach (var reg in registros)
            {
                if (reg.Nombre.Contains("SEIN") || reg.Nombre.Contains("Intercambios") || reg.Nombre.Contains("intercambios") || reg.Nombre.Contains("Total"))  // en negrita
                {
                    strHtml.Append("<tr style = 'font-weight:bold; height: 32px;'>");
                }
                else
                {
                    strHtml.Append("<tr>");
                }
                strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;'>{0}</td>", reg.Nombre);

                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    string eventoJs = "";
                    if (reg.ListaFiltroData != null && !string.IsNullOrEmpty(reg.ListaFiltroData[c]))
                        eventoJs = string.Format(" onclick=\"{0};\" ", reg.ListaFiltroData[c]);

                    if (tablaData.ReptiCodiTabla == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // reporte anual    
                    {
                        if (c == 5 || c == 7) //con signo  de %
                            strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi));
                        else
                            strHtml.AppendFormat("<td class='alignValorRight' {1}>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(col.HasValue ? col : null, nfi), eventoJs);
                    }
                    else
                    {
                        if (c == 4 || c == 7 || c == 9) //con signo  de %
                            strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi));
                        else
                            strHtml.AppendFormat("<td class='alignValorRight' {1}>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(col.HasValue ? col : null, nfi), eventoJs);
                    }
                    c++;
                }

                strHtml.Append("</tr>");
                f++;
            }
            strHtml.Append("</tbody>");


            strHtml.Append("</table>");

            #endregion

            if (tablaData.ReptiCodiTabla != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual  
            {
                foreach (var descripcion in tablaData.Leyenda.ListaDescripcion)
                {
                    strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", descripcion);
                }
            }
            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        #endregion

        #region C.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)

        #region Excel

        /// <summary>
        /// Genera el grafico de Maxima demanda por empresa semanal 
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="pintarExcell"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellMaximaDemandaXEmpresaSemanal(ExcelWorksheet ws, GraficoWeb pintarExcell, ref int finalPosTabla)
        {
            ExcelChart miChart = ws.Drawings["grafico1"] as ExcelChart;

            if (pintarExcell.Series.Any())
            {
                miChart.Title.Text = pintarExcell.TitleText;

                #region tablaUsar

                int filaIniDataG = 8;
                int coluIniDataG = 27;
                int ultFila = 0;

                int fi = 0;
                foreach (var cat in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat.Trim();
                    fi++;
                }

                int col1 = 0;
                int cc = 0;

                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name.Trim();
                    int fila1 = 0;

                    for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                    {
                        ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                        fila1++;
                    }
                    cc++;
                    ultFila = filaIniDataG + fila1;
                    col1++;
                }



                #endregion

                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < pintarExcell.Series.Count; i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                #region Grafico

                for (int val = 0; val < pintarExcell.Series.Count; val++)
                {
                    miChart.Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + val, ultFila, coluIniDataG + 1 + val);
                    miChart.Series[val].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                    miChart.Series[val].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + val].Value;
                }

                miChart.SetPosition(10, 0, 8, 0);

                #endregion

                finalPosTabla = finalPosTabla + 54;

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, 10 + 54, 9, pintarExcell.Subtitle);
                #endregion

                ws.Row(10 + 54).Height = 33;
                UtilExcel.CeldasExcelAgrupar(ws, 10 + 54, 9, 10 + 54, 9 + 9);
                UtilExcel.CeldasExcelWrapText(ws, 10 + 54, 9, 10 + 54, 9 + 9);

                finalPosTabla += 1;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera la tabla del  excel para el reporte Maxima demanda por empresas semanal
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="finalPosTabla"></param>
        public static void ListarGrafMaximaDemandaXEmpresaSemanal(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, ref int finalPosTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int filaIniCab = 8;
            int coluIniCab = 3;

            int filaIniData = filaIniCab + 4;
            int coluIniData = coluIniCab;

            int ultimaFila;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            var ordenRep = "9"; // reporte mensual y reportes semanales

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                ordenRep = "8";
            ws.Cells[filaIniCab - 4, coluIniCab - 1].Value = EscogerTitulosSubtitulos(ordenRep, 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[filaIniCab - 2, coluIniCab].Value = EscogerTitulosSubtitulos(ordenRep, 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            #region cabecera
            ws.Cells[filaIniCab, coluIniCab + 0].Value = dataCab[0, 0];
            ws.Cells[filaIniCab, coluIniCab + 1].Value = dataCab[0, 1];

            ws.Cells[filaIniCab + 1, coluIniCab + 1].Value = dataCab[1, 1];
            ws.Cells[filaIniCab + 1, coluIniCab + 2].Value = dataCab[1, 2];
            ws.Cells[filaIniCab + 1, coluIniCab + 3].Value = dataCab[1, 3];

            ws.Cells[filaIniCab + 2, coluIniCab + 1].Value = dataCab[2, 1];
            ws.Cells[filaIniCab + 2, coluIniCab + 2].Value = dataCab[2, 2];

            ws.Cells[filaIniCab + 3, coluIniCab + 1].Value = dataCab[3, 1];
            ws.Cells[filaIniCab + 3, coluIniCab + 2].Value = dataCab[3, 2];

            #endregion

            #region cuerpo

            if (registros.Any())
            {
                int filaProdTotal = 0;
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colX = 0;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;
                        }
                        colX++;
                    }

                    filaProdTotal = filaProdTotal == 0 && reg.EsFilaResumen ? filaX : filaProdTotal;

                    filaX++;
                }

                ultimaFila = filaIniData + filaX - 1;
                ultimaColu = coluIniData + 3;

                #region Formato Cuerpo


                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultimaFila, coluIniData);
                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "#FFFFFF");
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);

                #endregion

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual  
                {
                    #region Texto_Anotacion_3
                    UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, tablaData.Leyenda.ListaDescripcion[0]);

                    #endregion

                    ws.Row(ultimaFila + 1).Height = 33;
                    UtilExcel.CeldasExcelAgrupar(ws, ultimaFila + 1, coluIniData, ultimaFila + 1, coluIniData + 3);
                    UtilExcel.CeldasExcelWrapText(ws, ultimaFila + 1, coluIniData, ultimaFila + 1, coluIniData + 3);

                }
                finalPosTabla = ultimaFila + 1;
            }
            #endregion
        }

        #endregion

        #region Servicio

        /// <summary>
        /// AgruparListaM48XEmpresa
        /// </summary>
        /// <param name="listaM48Rango"></param>
        /// <returns></returns>
        public static List<MeMedicion48DTO> AgruparListaM48XEmpresa(List<MeMedicion48DTO> listaM48Rango)
        {
            List<MeMedicion48DTO> listGeneracion = (from t in listaM48Rango
                                                    group t by new { t.Medifecha, t.Emprcodi, t.Emprnomb }
                                                        into destino
                                                    select new MeMedicion48DTO()
                                                    {
                                                        Medifecha = destino.Key.Medifecha,
                                                        Emprcodi = destino.Key.Emprcodi,
                                                        Emprnomb = destino.Key.Emprnomb,
                                                        H1 = destino.Sum(t => t.H1),
                                                        H2 = destino.Sum(t => t.H2),
                                                        H3 = destino.Sum(t => t.H3),
                                                        H4 = destino.Sum(t => t.H4),
                                                        H5 = destino.Sum(t => t.H5),
                                                        H6 = destino.Sum(t => t.H6),
                                                        H7 = destino.Sum(t => t.H7),
                                                        H8 = destino.Sum(t => t.H8),
                                                        H9 = destino.Sum(t => t.H9),
                                                        H10 = destino.Sum(t => t.H10),

                                                        H11 = destino.Sum(t => t.H11),
                                                        H12 = destino.Sum(t => t.H12),
                                                        H13 = destino.Sum(t => t.H13),
                                                        H14 = destino.Sum(t => t.H14),
                                                        H15 = destino.Sum(t => t.H15),
                                                        H16 = destino.Sum(t => t.H16),
                                                        H17 = destino.Sum(t => t.H17),
                                                        H18 = destino.Sum(t => t.H18),
                                                        H19 = destino.Sum(t => t.H19),
                                                        H20 = destino.Sum(t => t.H20),

                                                        H21 = destino.Sum(t => t.H21),
                                                        H22 = destino.Sum(t => t.H22),
                                                        H23 = destino.Sum(t => t.H23),
                                                        H24 = destino.Sum(t => t.H24),
                                                        H25 = destino.Sum(t => t.H25),
                                                        H26 = destino.Sum(t => t.H26),
                                                        H27 = destino.Sum(t => t.H27),
                                                        H28 = destino.Sum(t => t.H28),
                                                        H29 = destino.Sum(t => t.H29),
                                                        H30 = destino.Sum(t => t.H30),

                                                        H31 = destino.Sum(t => t.H31),
                                                        H32 = destino.Sum(t => t.H32),
                                                        H33 = destino.Sum(t => t.H33),
                                                        H34 = destino.Sum(t => t.H34),
                                                        H35 = destino.Sum(t => t.H35),
                                                        H36 = destino.Sum(t => t.H36),
                                                        H37 = destino.Sum(t => t.H37),
                                                        H38 = destino.Sum(t => t.H38),
                                                        H39 = destino.Sum(t => t.H39),
                                                        H40 = destino.Sum(t => t.H40),

                                                        H41 = destino.Sum(t => t.H41),
                                                        H42 = destino.Sum(t => t.H42),
                                                        H43 = destino.Sum(t => t.H43),
                                                        H44 = destino.Sum(t => t.H44),
                                                        H45 = destino.Sum(t => t.H45),
                                                        H46 = destino.Sum(t => t.H46),
                                                        H47 = destino.Sum(t => t.H47),
                                                        H48 = destino.Sum(t => t.H48)
                                                    }).ToList();

            return listGeneracion;
        }

        /// <summary>
        /// AgruparListaM96XEmpresa
        /// </summary>
        /// <param name="listaM48Rango"></param>
        /// <returns></returns>
        public static List<MeMedicion96DTO> AgruparListaM96XEmpresa(List<MeMedicion96DTO> listaM48Rango)
        {
            List<MeMedicion96DTO> listGeneracion = (from t in listaM48Rango
                                                    group t by new { t.Medifecha, t.Emprcodi, t.Emprnomb }
                                                        into destino
                                                    select new MeMedicion96DTO()
                                                    {
                                                        Medifecha = destino.Key.Medifecha.Value,
                                                        Emprcodi = destino.Key.Emprcodi,
                                                        Emprnomb = destino.Key.Emprnomb,
                                                        H1 = destino.Sum(t => t.H1),
                                                        H2 = destino.Sum(t => t.H2),
                                                        H3 = destino.Sum(t => t.H3),
                                                        H4 = destino.Sum(t => t.H4),
                                                        H5 = destino.Sum(t => t.H5),
                                                        H6 = destino.Sum(t => t.H6),
                                                        H7 = destino.Sum(t => t.H7),
                                                        H8 = destino.Sum(t => t.H8),
                                                        H9 = destino.Sum(t => t.H9),
                                                        H10 = destino.Sum(t => t.H10),

                                                        H11 = destino.Sum(t => t.H11),
                                                        H12 = destino.Sum(t => t.H12),
                                                        H13 = destino.Sum(t => t.H13),
                                                        H14 = destino.Sum(t => t.H14),
                                                        H15 = destino.Sum(t => t.H15),
                                                        H16 = destino.Sum(t => t.H16),
                                                        H17 = destino.Sum(t => t.H17),
                                                        H18 = destino.Sum(t => t.H18),
                                                        H19 = destino.Sum(t => t.H19),
                                                        H20 = destino.Sum(t => t.H20),

                                                        H21 = destino.Sum(t => t.H21),
                                                        H22 = destino.Sum(t => t.H22),
                                                        H23 = destino.Sum(t => t.H23),
                                                        H24 = destino.Sum(t => t.H24),
                                                        H25 = destino.Sum(t => t.H25),
                                                        H26 = destino.Sum(t => t.H26),
                                                        H27 = destino.Sum(t => t.H27),
                                                        H28 = destino.Sum(t => t.H28),
                                                        H29 = destino.Sum(t => t.H29),
                                                        H30 = destino.Sum(t => t.H30),

                                                        H31 = destino.Sum(t => t.H31),
                                                        H32 = destino.Sum(t => t.H32),
                                                        H33 = destino.Sum(t => t.H33),
                                                        H34 = destino.Sum(t => t.H34),
                                                        H35 = destino.Sum(t => t.H35),
                                                        H36 = destino.Sum(t => t.H36),
                                                        H37 = destino.Sum(t => t.H37),
                                                        H38 = destino.Sum(t => t.H38),
                                                        H39 = destino.Sum(t => t.H39),
                                                        H40 = destino.Sum(t => t.H40),

                                                        H41 = destino.Sum(t => t.H41),
                                                        H42 = destino.Sum(t => t.H42),
                                                        H43 = destino.Sum(t => t.H43),
                                                        H44 = destino.Sum(t => t.H44),
                                                        H45 = destino.Sum(t => t.H45),
                                                        H46 = destino.Sum(t => t.H46),
                                                        H47 = destino.Sum(t => t.H47),
                                                        H48 = destino.Sum(t => t.H48),

                                                        H49 = destino.Sum(t => t.H49),
                                                        H50 = destino.Sum(t => t.H50),
                                                        H51 = destino.Sum(t => t.H51),
                                                        H52 = destino.Sum(t => t.H52),
                                                        H53 = destino.Sum(t => t.H53),
                                                        H54 = destino.Sum(t => t.H54),
                                                        H55 = destino.Sum(t => t.H55),
                                                        H56 = destino.Sum(t => t.H56),
                                                        H57 = destino.Sum(t => t.H57),
                                                        H58 = destino.Sum(t => t.H58),

                                                        H59 = destino.Sum(t => t.H59),
                                                        H60 = destino.Sum(t => t.H60),
                                                        H61 = destino.Sum(t => t.H61),
                                                        H62 = destino.Sum(t => t.H62),
                                                        H63 = destino.Sum(t => t.H63),
                                                        H64 = destino.Sum(t => t.H64),
                                                        H65 = destino.Sum(t => t.H65),
                                                        H66 = destino.Sum(t => t.H66),
                                                        H67 = destino.Sum(t => t.H67),
                                                        H68 = destino.Sum(t => t.H68),

                                                        H69 = destino.Sum(t => t.H69),
                                                        H70 = destino.Sum(t => t.H70),
                                                        H71 = destino.Sum(t => t.H71),
                                                        H72 = destino.Sum(t => t.H72),
                                                        H73 = destino.Sum(t => t.H73),
                                                        H74 = destino.Sum(t => t.H74),
                                                        H75 = destino.Sum(t => t.H75),
                                                        H76 = destino.Sum(t => t.H76),
                                                        H77 = destino.Sum(t => t.H77),
                                                        H78 = destino.Sum(t => t.H78),

                                                        H79 = destino.Sum(t => t.H79),
                                                        H80 = destino.Sum(t => t.H80),
                                                        H81 = destino.Sum(t => t.H81),
                                                        H82 = destino.Sum(t => t.H82),
                                                        H83 = destino.Sum(t => t.H83),
                                                        H84 = destino.Sum(t => t.H84),
                                                        H85 = destino.Sum(t => t.H85),
                                                        H86 = destino.Sum(t => t.H86),
                                                        H87 = destino.Sum(t => t.H87),
                                                        H88 = destino.Sum(t => t.H88),

                                                        H89 = destino.Sum(t => t.H89),
                                                        H90 = destino.Sum(t => t.H90),
                                                        H91 = destino.Sum(t => t.H91),
                                                        H92 = destino.Sum(t => t.H92),
                                                        H93 = destino.Sum(t => t.H93),
                                                        H94 = destino.Sum(t => t.H94),
                                                        H95 = destino.Sum(t => t.H95),
                                                        H96 = destino.Sum(t => t.H96)
                                                    }).ToList();

            return listGeneracion;
        }

        /// <summary>
        /// Listar empresas a partir de data de m48
        /// </summary>
        /// <param name="listaData"></param>
        /// <returns></returns>
        public static List<SiEmpresaDTO> ListarEmpresaFromResultadoTotalGeneracion(List<ResultadoTotalGeneracion> listaData)
        {
            return listaData.GroupBy(x => new { x.Emprnomb, x.Emprcodi })
                .Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Emprcodi, Emprnomb = x.Key.Emprnomb }).ToList();
        }

        /// <summary>
        /// ObtenerDataTablaMaximaDemandaXEmpresaSemanal
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaDataXEmpresa"></param>
        /// <param name="listaDataTotal"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaMaximaDemandaXEmpresaSemanal(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<SiEmpresaDTO> listaEmpresa, List<ResultadoTotalGeneracion> listaDataXEmpresa, List<ResultadoTotalGeneracion> listaDataTotal)
        {
            #region cabecera
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[4, 4];


            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual     
            {
                matrizCabecera[0, 0] = "Por Empresa Integrante (MW)";
                matrizCabecera[0, 1] = "Máxima Potencia Anual";

                matrizCabecera[1, 1] = string.Format("{0}", objFecha.AnioAct.NumAnio);
                matrizCabecera[1, 2] = string.Format("{0}", objFecha.Anio1Ant.NumAnio);
                matrizCabecera[1, 3] = "Var (%)";

                matrizCabecera[2, 1] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyDia);
                matrizCabecera[2, 2] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyDia);

                matrizCabecera[3, 1] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyHora);
                matrizCabecera[3, 2] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyHora);
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
                {
                    matrizCabecera[0, 0] = "Por Empresa Integrante (MW)";
                    matrizCabecera[0, 1] = string.Format("Máxima Demanda de {0}", EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month));

                    matrizCabecera[1, 1] = string.Format("{0}", objFecha.AnioAct.NumAnio);
                    matrizCabecera[1, 2] = string.Format("{0}", objFecha.Anio1Ant.NumAnio);
                    matrizCabecera[1, 3] = "Var (%)";

                    matrizCabecera[2, 1] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyDia);
                    matrizCabecera[2, 2] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyDia);

                    matrizCabecera[3, 1] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyHora);
                    matrizCabecera[3, 2] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyHora);
                }
                else // reportes semanales
                {
                    matrizCabecera[0, 0] = "Por Empresa Integrante (MW)";
                    matrizCabecera[0, 1] = string.Format("Máxima Demanda durante Semana Operativa {0}", objFecha.AnioAct.RangoAct_Num);

                    matrizCabecera[1, 1] = string.Format("{0}", objFecha.AnioAct.NumAnio);
                    matrizCabecera[1, 2] = string.Format("{0}", objFecha.Anio1Ant.NumAnio);
                    matrizCabecera[1, 3] = "Var (%)";

                    matrizCabecera[2, 1] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyDia);
                    matrizCabecera[2, 2] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyDia);

                    matrizCabecera[3, 1] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).FechaOnlyHora);
                    matrizCabecera[3, 2] = string.Format("{0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).FechaOnlyHora);
                }
            }




            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            foreach (var obj in listaEmpresa)
            {
                RegistroReporte registro = new RegistroReporte();
                List<CeldaReporte> datos = new List<CeldaReporte>();
                List<string> filtroDatos = new List<string>();

                var regSem1 = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Emprcodi == obj.Emprcodi);
                var regSem2 = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct && x.Emprcodi == obj.Emprcodi);
                var regSemVar = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.Emprcodi == obj.Emprcodi);

                datos.Add(new CeldaReporte(obj.Emprnomb.Trim(), false));

                datos.Add(new CeldaReporte(regSem1.Meditotal, false, false));
                datos.Add(new CeldaReporte(regSem2.Meditotal, false, false));
                datos.Add(new CeldaReporte(regSemVar.Meditotal, true, true));

                filtroDatos.Add("");
                filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regSem1.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regSem1.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regSem1.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add(string.Format("verTablaMaximaDemanda('{0}','{1}','{2}')", regSem2.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha), regSem2.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha), regSem2.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull)));
                filtroDatos.Add("");

                registro.ListaCelda = datos;
                registro.ListaFiltroData = filtroDatos;

                registros.Add(registro);
            }

            var regSem1Total = listaDataTotal.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regSem2Total = listaDataTotal.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            var regSemVarTotal = listaDataTotal.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);


            RegistroReporte registro0 = new RegistroReporte();
            registro0.EsFilaResumen = true;
            List<CeldaReporte> datos0 = new List<CeldaReporte>();

            datos0.Add(new CeldaReporte("Potencia generada en el  SEIN", true));

            datos0.Add(new CeldaReporte(regSem1Total.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regSem2Total.Meditotal, false, true));
            datos0.Add(new CeldaReporte(regSemVarTotal.Meditotal, true, true));

            registro0.ListaCelda = datos0;

            registros.Add(registro0);


            tabla.ListaRegistros = registros;

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual 
            {
                // Adicionamos los pie de pagina
                string texto = UtilAnexoAPR5.EscogerAnotacion("3.2", 1, objFecha.TipoVistaReporte, objFecha.TipoReporte);

                PieReporte pie = new PieReporte();
                List<string> lstPie = new List<string>();
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                    lstPie.Add(texto + string.Format(NotasPieWebInformeMensual.Cuadro1_Reporte_3p2, EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToLower(), objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio));
                else
                    lstPie.Add(texto + string.Format(NotasPieWebInformeSemanal.Cuadro1_Reporte_3p2, objFecha.AnioAct.RangoAct_Num, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio));
                pie.ListaDescripcion = lstPie;


                tabla.Leyenda = pie;
            }
            #endregion

            return tabla;
        }

        /// <summary>
        /// Genera el grafico de max demanda por empresa
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaDataXEmpresa"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoMaximaDemandaXEmpresaSemanal(FechasPR5 objFecha, List<SiEmpresaDTO> listaEmpresa, List<ResultadoTotalGeneracion> listaDataXEmpresa)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(objFecha.AnioAct.NumAnio.ToString());
            listaAnio.Add(objFecha.Anio1Ant.NumAnio.ToString());

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = string.Format("Variación {0}/{1} (MW)", listaAnio[0], listaAnio[1]);

            string texto = UtilAnexoAPR5.EscogerAnotacion("3.2", 2, objFecha.TipoVistaReporte, objFecha.TipoReporte);

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                grafico.Subtitle = "";
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                    grafico.Subtitle = texto + string.Format(NotasPieWebInformeMensual.Grafico1_Reporte_3p2, EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToLower(), listaAnio[1], listaAnio[0]);
                else
                    grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_3p2, objFecha.AnioAct.RangoAct_Num, listaAnio[1], listaAnio[0]);
            }

            grafico.XAxisCategories = listaEmpresa.Select(x => x.Emprnomb).ToList();
            grafico.XAxisTitle = string.Empty;

            grafico.YaxixTitle = "MW";

            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaAnio.Count][];

            int cc = 0;
            foreach (var cat in listaAnio)
            {
                grafico.SeriesData[cc] = new decimal?[listaEmpresa.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = cat;
                grafico.Series[cc].Color = (cc == 0 ? "#C0504D" : "#4F81BD");

                int contPto = 0;
                foreach (var reg in listaEmpresa)
                {
                    var regSem0AnioAct = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Emprcodi == reg.Emprcodi);
                    var regSem0Anio1Ant = listaDataXEmpresa.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct && x.Emprcodi == reg.Emprcodi);

                    decimal? h = (cc == 0 ? regSem0AnioAct.Meditotal : regSem0Anio1Ant.Meditotal);
                    grafico.SeriesData[cc][contPto] = h;
                    contPto++;
                }

                cc++;
            }
            return grafico;
        }

        #endregion

        /// <summary>
        /// Genera vista html del reporte Máxima demanda por empresa semanal 
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ReporteMaximaDemandaXEmpresaSemanalHtml(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 580px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 550px;'>");
            strHtml.Append("<thead>");
            #region cabecera

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:500px;' rowspan='4'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th style='width:150px;height: 32px' colspan='3'>{0}</th>", dataCab[0, 1]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[1, 1]);
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[1, 2]);
            strHtml.AppendFormat("<th style='width:50px;' rowspan='3'>{0}</th>", dataCab[1, 3]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[2, 1]);
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[2, 2]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[3, 1]);
            strHtml.AppendFormat("<th style='width:50px;'>{0}</th>", dataCab[3, 2]);
            strHtml.Append("</tr>");

            #endregion
            strHtml.Append("</thead>");

            strHtml.Append("<tbody>");
            #region cuerpo

            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                int c = 0;
                foreach (var celda in reg.ListaCelda)
                {
                    string strValor = string.Empty;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "text-align: left; padding-left: 5px;";
                    if (celda.EsNumero) strStyle += "text-align: right; padding-right: 5px;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";
                    if (reg.EsFilaResumen) strStyle += "background: #2980B9;color: #ffffff; height: 25px;";

                    string eventoJs = "";
                    if (reg.ListaFiltroData != null && !string.IsNullOrEmpty(reg.ListaFiltroData[c]))
                        eventoJs = string.Format(" onclick=\"{0};\" ", reg.ListaFiltroData[c]);

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalHtml(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}' {3} >{0}</td>", strValor, strStyle, strClass, eventoJs);
                    c++;
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            #endregion
            strHtml.Append("</table>");

            if (tablaData.ReptiCodiTabla != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual    
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);

            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        #endregion

        #region C.3. EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)

        #region Excel

        /// <summary>
        /// Genera el grafico demanda variación semanal acumulada por área operativa
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="graficoVarXAreas"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellDemandaVariacionEvoSemanalAcumXAreaOpe(ExcelWorksheet ws, GraficoWeb graficoVarXAreas, ref int finalPosTabla)
        {
            ExcelChart miChart = ws.Drawings["grafico2"] as ExcelChart;

            if (graficoVarXAreas.Series.Count() > 0)
            {
                GraficoWeb pintarExcell = graficoVarXAreas;

                miChart.Title.Text = pintarExcell.TitleText;
                #region tablaUsar

                int filaIniDataG = 25;
                int coluIniDataG = 27;
                int ultFila = 0;

                int fi = 0;
                foreach (var cat in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat;
                    fi++;
                }

                int col1 = 0;
                int cc = 0;

                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name.Trim();
                    int fila1 = 0;

                    for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                    {
                        ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val] / 100;
                        fila1++;
                    }
                    cc++;
                    ultFila = filaIniDataG + fila1;
                    col1++;
                }



                #endregion


                #region Grafico

                for (int val = 0; val < pintarExcell.Series.Count; val++)
                {
                    miChart.Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + val, ultFila, coluIniDataG + 1 + val);
                    miChart.Series[val].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                    miChart.Series[val].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + val].Value;
                }

                miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);
                if (graficoVarXAreas == null)
                {
                    miChart.SetSize(0, 0);
                }
                #endregion

                finalPosTabla = finalPosTabla + 31;

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 3, pintarExcell.Subtitle);
                #endregion

                finalPosTabla += 1;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el grafico de compración para reprote Demanda por área operativa
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="graficoCompMDXArea"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellBarraComparacionDemandaXAreaOpe(ExcelWorksheet ws, GraficoWeb graficoCompMDXArea, ref int finalPosTabla)
        {
            ExcelChart miChart = ws.Drawings["grafico1"] as ExcelChart;

            GraficoWeb pintarExcell = graficoCompMDXArea;

            #region tablaUsar

            int filaIniDataG = 8;
            int coluIniDataG = 27;
            int ultFila;

            int fi = 0;
            foreach (var cat in pintarExcell.XAxisCategories)
            {
                ws.Cells[filaIniDataG, coluIniDataG + 1 + fi].Value = cat;
                fi++;
            }

            int fil1 = 0;
            int cc = 0;

            foreach (var serie in pintarExcell.Series)
            {
                ws.Cells[filaIniDataG + 1 + fil1, coluIniDataG].Value = serie.Name;
                int col1 = 0;

                for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                {
                    ws.Cells[filaIniDataG + 1 + fil1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                    col1++;
                }
                cc++;
                ultFila = filaIniDataG + pintarExcell.Series.Count;
                fil1++;
            }

            #endregion

            UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

            var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
            var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
            for (int i = 0; i < pintarExcell.Series.Count; i++) //creamos series
            {
                miChart.Series.Add(ran1, ran2);
            }

            #region Grafico

            for (int val = 0; val < pintarExcell.Series.Count; val++)
            {
                miChart.Series[val].Series = ExcelRange.GetAddress(filaIniDataG + 1 + val, coluIniDataG + 1, filaIniDataG + 1 + val, coluIniDataG + 3);
                miChart.Series[val].XSeries = ExcelRange.GetAddress(filaIniDataG, coluIniDataG + 1, filaIniDataG, coluIniDataG + 3);
                miChart.Series[val].Header = (string)ws.Cells[filaIniDataG + 1 + val, coluIniDataG].Value;
            }

            miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);
            if (graficoCompMDXArea == null)
            {
                miChart.SetSize(0, 0);
            }
            #endregion

            finalPosTabla = finalPosTabla + 27;

            #region Texto_Anotacion_3
            UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 3, pintarExcell.Subtitle);
            #endregion

            finalPosTabla += 1;
        }

        /// <summary>
        /// Genera la tabla del  excel para el reporte Demanda por área operativa semanal
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="finalPosTabla"></param>
        public static void ListarReporteDemandaXAreaOpSemanal(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, ref int finalPosTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniCab = 8;
            int coluIniCab = 3;

            int filaIniData = filaIniCab + 3;
            int coluIniData = coluIniCab;

            int ultimaFila;
            int ultimaColu;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos("10", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos("10", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            #region cabecera
            ws.Cells[filaIniCab, coluIniCab + 1].Value = dataCab[0, 1];
            ws.Cells[filaIniCab + 1, coluIniCab + 1].Value = dataCab[1, 1];
            ws.Cells[filaIniCab + 1, coluIniCab + 2].Value = dataCab[1, 2];
            ws.Cells[filaIniCab + 1, coluIniCab + 3].Value = dataCab[1, 3];

            ws.Cells[filaIniCab + 1, coluIniCab + 4].Value = dataCab[1, 4];

            ws.Cells[filaIniCab + 1, coluIniCab + 6].Value = dataCab[1, 6];
            ws.Cells[filaIniCab + 1, coluIniCab + 7].Value = dataCab[1, 7];

            ws.Cells[filaIniCab + 1, coluIniCab + 8].Value = dataCab[1, 8];
            ws.Cells[filaIniCab + 1, coluIniCab + 9].Value = dataCab[1, 9];
            ws.Cells[filaIniCab + 1, coluIniCab + 10].Value = dataCab[1, 10];


            ws.Cells[filaIniCab + 2, coluIniCab + 4].Value = dataCab[2, 4];

            #endregion

            #region cuerpo
            if (registros.Any())
            {
                int filaX = 0;
                int filaProdTotal = 0;
                foreach (var reg in registros)
                {
                    if (reg.Nombre.Contains("SEIN"))  // en negrita
                    {
                        filaProdTotal = filaIniData + filaX;

                    }

                    if (reg.Nombre.Contains("Intercambios") || reg.Nombre.Contains("Importación"))
                        filaX++;

                    ws.Cells[filaIniData + filaX, coluIniData + 0].Value = reg.Nombre;
                    int c = 0;
                    foreach (decimal? col in reg.ListaData)
                    {
                        if (c == 4 || c == 7 || c == 9) //con signo  de %
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col / 100;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00%";
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Value = col;
                            ws.Cells[filaIniData + filaX, coluIniData + 1 + c].Style.Numberformat.Format = "#,##0.00";
                        }

                        c++;
                    }

                    filaX++;
                }

                ultimaFila = filaIniData + filaX - 1;

                ultimaColu = coluIniData + 10;

                #region Formato Cuerpo

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.BorderCeldas5_1(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);
                UtilExcel.CeldasExcelEnNegrita(ws, filaProdTotal, coluIniData, filaProdTotal, ultimaColu);

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.BorderCeldas5_1(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);

                UtilExcel.BorderCeldas5_1(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

                //UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData - 3, coluIniData + 1, ultimaFila, coluIniData + 3);
                UtilExcel.BorderCeldas5_1(ws, filaIniData - 3, coluIniData + 1, ultimaFila, coluIniData + 3);
                //UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData - 3, coluIniData + 4, ultimaFila, coluIniData + 5);
                UtilExcel.BorderCeldas5_1(ws, filaIniData - 3, coluIniData + 4, ultimaFila, coluIniData + 5);
                //UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData - 3 + 1, coluIniData + 6, ultimaFila, coluIniData + 8);
                UtilExcel.BorderCeldas5_1(ws, filaIniData - 3 + 1, coluIniData + 6, ultimaFila, coluIniData + 8);
                //UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData - 3, coluIniData, ultimaFila, coluIniData);
                UtilExcel.BorderCeldas5_1(ws, filaIniData - 3, coluIniData, ultimaFila, coluIniData);

                #endregion

                #region Texto_Anotacion_3
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, tablaData.Leyenda.ListaDescripcion[0]);

                #endregion

                #region Nota
                ws.Cells[ultimaFila + 3, coluIniData].Value = "Nota";
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila + 3, coluIniData, ultimaFila + 3, coluIniData);
                ws.Cells[ultimaFila + 4, coluIniData].Value = "-" + tablaData.Leyenda.ListaDescripcion[1];
                UtilExcel.FormatoNota(ws, ultimaFila + 4, coluIniData);
                ws.Cells[ultimaFila + 5, coluIniData].Value = "-" + tablaData.Leyenda.ListaDescripcion[2];
                UtilExcel.FormatoNota(ws, ultimaFila + 5, coluIniData);

                #endregion

                finalPosTabla = ultimaFila + 5;
            }
            #endregion
        }

        #endregion

        #region Servicio

        /// <summary>
        /// ObtenerDataTablaMDAreaOperativa
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaDemandaXAreaData"></param>
        /// <param name="listaPotGenData"></param>
        /// <param name="listaPotGenTotalData"></param>
        /// <param name="listaInterTipoData"></param>
        /// <param name="listaInterTotalData"></param>
        /// <param name="listaArea"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaMDAreaOperativa(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            List<ResultadoTotalGeneracion> listaDemandaXAreaData, List<ResultadoTotalGeneracion> listaPotGenData,
            List<ResultadoTotalGeneracion> listaPotGenTotalData, List<ResultadoTotalGeneracion> listaInterTipoData, List<ResultadoTotalGeneracion> listaInterTotalData,
            List<MeReporptomedDTO> listaArea)
        {
            TablaReporte tabla = new TablaReporte();
            CabeceraReporte cabRepo = new CabeceraReporte();

            #region Cabecera
            string[,] matrizCabecera = new string[4, 11];
            matrizCabecera[0, 0] = "Área operativa";
            matrizCabecera[0, 1] = string.Format("Últimas tres Semanas Operativas {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);
            matrizCabecera[0, 4] = "Año Anterior";
            matrizCabecera[0, 6] = "Demanda acumulada Anual";

            matrizCabecera[1, 1] = string.Format("SEM {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).SemanaFechaDesc);
            matrizCabecera[1, 2] = string.Format("SEM {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant).SemanaFechaDesc);
            matrizCabecera[1, 3] = string.Format("SEM {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).SemanaFechaDesc);
            matrizCabecera[1, 4] = string.Format("SEM {0}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).SemanaFechaDesc);
            matrizCabecera[1, 5] = "Var \n (%)";
            matrizCabecera[1, 6] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc;
            matrizCabecera[1, 7] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;
            matrizCabecera[1, 8] = string.Format("Var (%) \n {0}/{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            matrizCabecera[1, 9] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc;
            matrizCabecera[1, 10] = string.Format("Var (%) \n {0}/{1}", listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc, listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);


            matrizCabecera[2, 4] = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc;

            cabRepo.CabeceraData = matrizCabecera;
            tabla.Cabecera = cabRepo;
            #endregion

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();
            foreach (var regArea in listaArea)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();

                var listaXArea = listaDemandaXAreaData.Where(x => x.Ptomedicodi == regArea.Ptomedicodi).ToList();

                ResultadoTotalGeneracion regMDSem2MD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
                ResultadoTotalGeneracion regMDSem1MD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
                ResultadoTotalGeneracion regMDSem0MD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regMDSem0AnioAntMD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

                ResultadoTotalGeneracion regMDSem0VarMD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regMDAnio2MD96 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regMDAnio1MD96 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regMDAnio0MD96 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

                ResultadoTotalGeneracion regMDAnio0VarMD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
                ResultadoTotalGeneracion regMDAnio1VarMD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                datos.Add(regMDSem2MD48.Meditotal);
                datos.Add(regMDSem1MD48.Meditotal);
                datos.Add(regMDSem0MD48.Meditotal);
                datos.Add(regMDSem0AnioAntMD48.Meditotal);
                datos.Add(regMDSem0VarMD48.Meditotal);

                datos.Add(regMDAnio0MD96.Meditotal);
                datos.Add(regMDAnio1MD96.Meditotal);
                datos.Add(regMDAnio0VarMD48.Meditotal);

                datos.Add(regMDAnio2MD96.Meditotal);
                datos.Add(regMDAnio1VarMD48.Meditotal);

                registro.Nombre = regArea.Ptomedibarranomb;
                registro.ListaData = datos;

                registros.Add(registro);

            }

            //Potencia generada en el  SEIN
            ResultadoTotalGeneracion regMDPotGenSem2MD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regMDPotGenSem1MD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regMDPotGenSem0MD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDPotGenSem0AnioAntMD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regMDPotGenSem0VarMD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regMDPotGenAnio2MD96 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio1MD96 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio0MD96 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

            ResultadoTotalGeneracion regMDPotGenAnio0VarMD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
            ResultadoTotalGeneracion regMDPotGenAnio1VarMD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            RegistroReporte registro0 = new RegistroReporte();
            List<decimal?> datos0 = new List<decimal?>();

            datos0.Add(regMDPotGenSem2MD48.Meditotal);
            datos0.Add(regMDPotGenSem1MD48.Meditotal);
            datos0.Add(regMDPotGenSem0MD48.Meditotal);
            datos0.Add(regMDPotGenSem0AnioAntMD48.Meditotal);
            datos0.Add(regMDPotGenSem0VarMD48.Meditotal);

            datos0.Add(regMDPotGenAnio0MD96.Meditotal);
            datos0.Add(regMDPotGenAnio1MD96.Meditotal);
            datos0.Add(regMDPotGenAnio0VarMD48.Meditotal);

            datos0.Add(regMDPotGenAnio2MD96.Meditotal);
            datos0.Add(regMDPotGenAnio1VarMD48.Meditotal);


            registro0.Nombre = "Demanda de Energía del SEIN";
            registro0.ListaData = datos0;

            registros.Add(registro0);



            //Tipo de interconexion
            var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" },
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" }
                                }.ToList();

            foreach (var tinter in listaTinter)
            {
                RegistroReporte registro1 = new RegistroReporte();
                datos0 = new List<decimal?>();

                var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                ResultadoTotalGeneracion regMDSem2MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
                ResultadoTotalGeneracion regMDSem1MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
                ResultadoTotalGeneracion regMDSem0MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regMDSem0AnioAntMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

                ResultadoTotalGeneracion regMDSem0VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regMDAnio2MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regMDAnio1MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regMDAnio0MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

                ResultadoTotalGeneracion regMDAnio0VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
                ResultadoTotalGeneracion regMDAnio1VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                datos0.Add(regMDSem2MD48.Meditotal);
                datos0.Add(regMDSem1MD48.Meditotal);
                datos0.Add(regMDSem0MD48.Meditotal);
                datos0.Add(regMDSem0AnioAntMD48.Meditotal);
                datos0.Add(regMDSem0VarMD48.Meditotal);

                datos0.Add(regMDAnio0MD96.Meditotal);
                datos0.Add(regMDAnio1MD96.Meditotal);
                datos0.Add(regMDAnio0VarMD48.Meditotal);

                datos0.Add(regMDAnio2MD96.Meditotal);
                datos0.Add(regMDAnio1VarMD48.Meditotal);

                registro1.Nombre = tinter.Nombre;
                registro1.ListaData = datos0;

                registros.Add(registro1);


            }

            //Intercambios Internacionales
            ResultadoTotalGeneracion regInterTotalSem2MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regInterTotalSem1MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regInterTotalSem0MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regInterTotalSem0AnioAntMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regInterTotalSem0VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regInterTotalAnio2MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAnio1MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAnio0MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

            ResultadoTotalGeneracion regInterTotalAnio0VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
            ResultadoTotalGeneracion regInterTotalAnio1VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            registro0 = new RegistroReporte();
            datos0 = new List<decimal?>();

            datos0.Add(regInterTotalSem2MD48.Meditotal);
            datos0.Add(regInterTotalSem1MD48.Meditotal);
            datos0.Add(regInterTotalSem0MD48.Meditotal);
            datos0.Add(regInterTotalSem0AnioAntMD48.Meditotal);
            datos0.Add(regInterTotalSem0VarMD48.Meditotal);

            datos0.Add(regInterTotalAnio0MD96.Meditotal);
            datos0.Add(regInterTotalAnio1MD96.Meditotal);
            datos0.Add(regInterTotalAnio0VarMD48.Meditotal);

            datos0.Add(regInterTotalAnio2MD96.Meditotal);
            datos0.Add(regInterTotalAnio1VarMD48.Meditotal);


            registro0.Nombre = "Intercambios Internacionales";
            registro0.ListaData = datos0;

            registros.Add(registro0);


            //Total Máxima Demanda
            ResultadoTotalGeneracion regMDTotalSem2MD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regMDTotalSem1MD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regMDTotalSem0MD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDTotalSem0AnioAntMD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regMDTotalSem0VarMD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regMDTotalAnio2MD96 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regMDTotalAnio1MD96 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regMDTotalAnio0MD96 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);

            ResultadoTotalGeneracion regMDTotalAnio0VarMD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
            ResultadoTotalGeneracion regMDTotalAnio1VarMD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            registro0 = new RegistroReporte();
            datos0 = new List<decimal?>();

            datos0.Add(regMDTotalSem2MD48.Meditotal);
            datos0.Add(regMDTotalSem1MD48.Meditotal);
            datos0.Add(regMDTotalSem0MD48.Meditotal);
            datos0.Add(regMDTotalSem0AnioAntMD48.Meditotal);
            datos0.Add(regMDTotalSem0VarMD48.Meditotal);

            datos0.Add(regMDTotalAnio0MD96.Meditotal);
            datos0.Add(regMDTotalAnio1MD96.Meditotal);
            datos0.Add(regMDTotalAnio0VarMD48.Meditotal);

            datos0.Add(regMDTotalAnio2MD96.Meditotal);
            datos0.Add(regMDTotalAnio1VarMD48.Meditotal);

            registro0.Nombre = "Total Demanda del SEIN";
            registro0.ListaData = datos0;

            registros.Add(registro0);

            tabla.ListaRegistros = registros;

            // Adicionamos los pie de pagina
            string texto = UtilAnexoAPR5.EscogerAnotacion("3.3", 1, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();
            lstPie.Add(texto + NotasPieWebInformeSemanal.Cuadro1_Reporte_3p3);
            lstPie.Add(NotasPieWebInformeSemanal.Cuadro1_Reporte_3p3_Nota1);
            lstPie.Add(NotasPieWebInformeSemanal.Cuadro1_Reporte_3p3_Nota2);
            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;

            #endregion

            return tabla;
        }

        /// <summary>
        /// Grafico web de la comparacion de la demanda por area operativa
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaDemandaXAreaData"></param>
        /// <param name="listaArea"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraComparacionDemandaXAreaOp(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, List<ResultadoTotalGeneracion> listaDemandaXAreaData, List<MeReporptomedDTO> listaArea)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            GraficoWeb grafico = new GraficoWeb();

            string texto = UtilAnexoAPR5.EscogerAnotacion("3.3", 2, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_3p3, objFecha.AnioAct.RangoAct_Num, listaAnio[0], listaAnio[1], listaAnio[2]);

            grafico.XAxisCategories = listaAnio;
            grafico.XAxisTitle = "Año";

            grafico.YaxixTitle = "MWh";

            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaArea.Count()][];

            int cc = 0;
            foreach (var cat in listaArea)
            {
                grafico.SeriesData[cc] = new decimal?[listaAnio.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = cat.Ptomedibarranomb;
                grafico.Series[cc].Type = "column";
                switch (cc)
                {
                    case 0:
                        grafico.Series[cc].Color = "#356EB3";
                        break;
                    case 1:
                        grafico.Series[cc].Color = "#BE3936";
                        break;
                    case 2:
                        grafico.Series[cc].Color = "#8CB040";
                        break;
                }

                var lista = listaDemandaXAreaData.Where(x => x.Ptomedicodi == cat.Ptomedicodi).OrderBy(x => x.Medifecha).ToList();

                var regAnio2Ant = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                decimal? h = regAnio2Ant.Meditotal;
                grafico.SeriesData[cc][0] = h;

                var regAnio1Ant = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                h = regAnio1Ant.Meditotal;
                grafico.SeriesData[cc][1] = h;

                var regAnioActual = lista.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                h = regAnioActual.Meditotal;
                grafico.SeriesData[cc][2] = h;

                cc++;
            }
            return grafico;
        }

        /// <summary>
        /// Grafico Web de la variacion semanal acumulada por areas operativas
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaVarSemanalData"></param>
        /// <param name="listaArea"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraDemandaVariacionEvoSemanalAcumXAreaOp(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            List<ResultadoTotalGeneracion> listaVarSemanalData, List<MeReporptomedDTO> listaArea)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            List<string> listaSemana = new List<string>();
            for (int numSemana = 1; numSemana <= 53; numSemana++)
            {
                listaSemana.Add(numSemana.ToString());
            }

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = "VARIACIÓN ACUMULADA POR ÁREAS";
            string texto = UtilAnexoAPR5.EscogerAnotacion("3.3", 3, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_3p3, listaAnio[0], listaAnio[1]);

            grafico.XAxisCategories = listaSemana;
            grafico.YaxixTitle = "Variación";
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaArea.Count][];

            for (int cc = 0; cc < listaArea.Count; cc++)
            {
                List<ResultadoTotalGeneracion> listaXArea = listaVarSemanalData.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.Ptomedicodi == listaArea[cc].Ptomedicodi).ToList();
                DateTime fIniAnioActual = new DateTime(objFecha.AnioAct.Sem01_FechaIni.Year, objFecha.AnioAct.Sem01_FechaIni.Month, objFecha.AnioAct.Sem01_FechaIni.Day).Date;

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = listaAnio[1] + "/" + listaAnio[0] + " " + listaArea[cc].Ptomedibarranomb;
                grafico.Series[cc].Type = "spline";
                grafico.Series[cc].YAxis = 0;
                switch (cc)
                {
                    case 0:
                        grafico.Series[cc].Color = "#00B0F0";
                        break;
                    case 1:
                        grafico.Series[cc].Color = "#92D050";
                        break;
                    case 2:
                        grafico.Series[cc].Color = "#FF0000";
                        break;
                }
                grafico.SeriesData[cc] = new decimal?[listaSemana.Count];
                for (int numSemana = 1; numSemana <= listaSemana.Count; numSemana++)
                {
                    ResultadoTotalGeneracion regXSem = listaXArea.Find(x => x.Medifecha == fIniAnioActual);
                    if (regXSem != null)
                        grafico.SeriesData[cc][numSemana - 1] = Convert.ToDecimal(Math.Round(regXSem.Meditotal.GetValueOrDefault(0), 2));

                    fIniAnioActual = fIniAnioActual.AddDays(7);
                }
            }

            return grafico;
        }

        /// <summary>
        /// Grafico Web de la variacion semanal acumulada por areas operativas
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaVarSemanalData"></param>
        /// <param name="listaArea"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraDemandaVariacionEvoSemanalAcumXAreaOp2Anio(FechasPR5 objFecha, List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                List<ResultadoTotalGeneracion> listaVarSemanalData, List<MeReporptomedDTO> listaArea)
        {
            List<string> listaAnio = new List<string>();
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
            listaAnio.Add(listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

            List<string> listaSemana = new List<string>();
            for (int numSemana = 1; numSemana <= 53; numSemana++)
            {
                listaSemana.Add(numSemana.ToString());
            }

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = "VARIACIÓN ACUMULADA POR ÁREAS";
            string texto = UtilAnexoAPR5.EscogerAnotacion("3.3", 3, objFecha.TipoVistaReporte, objFecha.TipoReporte);
            grafico.Subtitle = texto + string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_3p3_Ejec, listaAnio[0], listaAnio[1], listaAnio[2]);

            grafico.XAxisCategories = listaSemana;
            grafico.YaxixTitle = string.Empty;
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaArea.Count * 2][];

            int contSerie = 0;
            for (int numAnio = 0; numAnio < 2; numAnio++)
            {
                int tipoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                DateTime fechaIniAnio = numAnio == 0 ? objFecha.Anio1Ant.Sem01_FechaIni : objFecha.AnioAct.Sem01_FechaIni;
                string descAnio = numAnio == 0 ? (listaAnio[1] + "/" + listaAnio[0]) : (listaAnio[2] + "/" + listaAnio[1]);

                for (int cc = 0; cc < listaArea.Count; cc++)
                {
                    List<ResultadoTotalGeneracion> listaXArea = listaVarSemanalData.Where(x => x.TipoResultadoFecha == tipoFecha && x.Ptomedicodi == listaArea[cc].Ptomedicodi).ToList();
                    DateTime fIniAnioActual = new DateTime(fechaIniAnio.Year, fechaIniAnio.Month, fechaIniAnio.Day).Date;

                    grafico.Series.Add(new RegistroSerie());
                    grafico.Series[contSerie].Name = descAnio + " " + listaArea[cc].Ptomedibarranomb;
                    grafico.Series[contSerie].Type = "spline";
                    grafico.Series[contSerie].YAxis = 0;
                    switch (contSerie)
                    {
                        case 0:
                            grafico.Series[contSerie].Color = "#4F81BD";
                            grafico.Series[contSerie].DashStyle = "Solid";
                            break;
                        case 1:
                            grafico.Series[contSerie].Color = "#C0504D";
                            grafico.Series[contSerie].DashStyle = "LongDashDot";
                            break;
                        case 2:
                            grafico.Series[contSerie].Color = "#96B851";
                            grafico.Series[contSerie].DashStyle = "LongDashDot";
                            break;
                        case 3:
                            grafico.Series[contSerie].Color = "#7A5C9D";
                            grafico.Series[contSerie].DashStyle = "Solid";
                            break;
                        case 4:
                            grafico.Series[contSerie].Color = "#4BACC6";
                            grafico.Series[contSerie].DashStyle = "Solid";
                            break;
                        case 5:
                            grafico.Series[contSerie].Color = "#F79443";
                            grafico.Series[contSerie].DashStyle = "Solid";
                            break;
                    }
                    grafico.SeriesData[contSerie] = new decimal?[listaSemana.Count];
                    for (int numSemana = 1; numSemana <= listaSemana.Count; numSemana++)
                    {
                        ResultadoTotalGeneracion regXSem = listaXArea.Find(x => x.Medifecha == fIniAnioActual);
                        if (regXSem != null)
                            grafico.SeriesData[contSerie][numSemana - 1] = Convert.ToDecimal(Math.Round(regXSem.Meditotal.GetValueOrDefault(0), 2));

                        fIniAnioActual = fIniAnioActual.AddDays(7);
                    }
                    contSerie++;
                }
            }

            return grafico;
        }

        #endregion

        /// <summary>
        /// genera vista html del reporte Demanda por area operativa semanal
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ReporteDemandaXAreaOperSemanalHtml(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo1();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 980px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 950px;'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='3' style='width: 285px;'>Área operativa</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th colspan='3' style='height: 32px;'>{0}</th>", dataCab[0, 1]);
            strHtml.AppendFormat("<th colspan='2'>{0}</th>", dataCab[0, 4]);
            strHtml.AppendFormat("<th colspan='5' style=''>{0}</th>", dataCab[0, 6]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 1]);
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 2]);
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 3]);

            strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, 4]);
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;' rowspan='3'>{0}</th>", dataCab[1, 5]);

            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 6]);
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 7]);
            strHtml.AppendFormat("<th rowspan='2' style='width:60px; word-wrap: break-word; white-space: nowrap;' rowspan='3'>{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th rowspan='2' style='width:100px;'>{0}</th>", dataCab[1, 9]);
            strHtml.AppendFormat("<th rowspan='2' style='width:60px; word-wrap: break-word; white-space: nowrap;' rowspan='3'>{0}</th>", dataCab[1, 10].Replace("\n", "<br>"));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");

            strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[2, 4]);
            strHtml.Append("</tr>");


            strHtml.Append("</thead>");

            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            int f = 0;
            foreach (var reg in registros)
            {
                if (reg.Nombre.Contains("SEIN") || reg.Nombre.Contains("Intercambios") || reg.Nombre.Contains("Total"))  // en negrita
                {
                    strHtml.Append("<tr style = 'font-weight:bold; height: 32px;'>");
                }
                else
                {
                    strHtml.Append("<tr>");
                }
                strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;'>{0}</td>", reg.Nombre);

                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    if (c == 4 || c == 7 || c == 9) //con signo  de %
                        strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(col.HasValue ? col : null, nfi));
                    else
                        strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(col.HasValue ? col : null, nfi));
                    c++;
                }

                strHtml.Append("</tr>");
                f++;
            }
            strHtml.Append("</tbody>");


            strHtml.Append("</table>");

            #endregion

            strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);
            strHtml.AppendFormat("<div style='margin-top: 5px;margin-bottom: 18px;'><b>Nota:</b><br/>");
            strHtml.AppendFormat("<ul><li>{0}</li>", tablaData.Leyenda.ListaDescripcion[1]);
            strHtml.AppendFormat("<li>{0}</li></ul>", tablaData.Leyenda.ListaDescripcion[2]);
            strHtml.AppendFormat("</div>");
            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region D. EVOLUCIÓN DE LA DEMANDA DE ENERGÍA Y POTENCIA DE LOS PRINCIPALES GRANDES USUARIOS DEL SEIN        

        #region Útil

        /// <summary>
        /// Listar todos los reportes para Grandes usuarios Libres
        /// </summary>
        /// <returns></returns>
        public static List<MeReporteDTO> GetListaReporteUL(bool incluirSEIN)
        {
            List<MeReporteDTO> listaReporte = new List<MeReporteDTO>();

            MeReporteDTO m1 = new MeReporteDTO
            {
                AreaOperativa = ConstantesPR5ReportesServicio.AreaNorte,
                Repornombre = "GRANDES USUARIOS LIBRES DEL ÁREA NORTE",
                Orden = 1,
                Reporcolor = ConstantesPR5ReportesServicio.ColorReporteDemandaGrandesUsuariosNorte
            };

            MeReporteDTO m2 = new MeReporteDTO
            {
                AreaOperativa = ConstantesPR5ReportesServicio.AreaCentro,
                Repornombre = "GRANDES USUARIOS LIBRES DEL ÁREA CENTRO",
                Orden = 2,
                Reporcolor = ConstantesPR5ReportesServicio.ColorReporteDemandaGrandesUsuariosCentro
            };

            MeReporteDTO m3 = new MeReporteDTO
            {
                AreaOperativa = ConstantesPR5ReportesServicio.AreaSur,
                Repornombre = "GRANDES USUARIOS LIBRES DEL ÁREA SUR",
                Orden = 3,
                Reporcolor = ConstantesPR5ReportesServicio.ColorReporteDemandaGrandesUsuariosSur
            };

            listaReporte.Add(m1);
            listaReporte.Add(m2);
            listaReporte.Add(m3);

            if (incluirSEIN)
            {
                listaReporte.Add(new MeReporteDTO() { AreaOperativa = "SEIN", Orden = 4 });
            }

            return listaReporte;
        }

        /// <summary>
        /// Data sumarizada para varios dias
        /// </summary>
        /// <param name="listaEmpresaArea"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaDataXPto"></param>
        /// <returns></returns>
        public static List<MeMedicion48DTO> CalcularDataGU(List<SiEmpresaDTO> listaEmpresaArea, DateTime fechaIni, DateTime fechaFin, List<MeMedicion48DTO> listaDataXPto)
        {
            List<MeMedicion48DTO> listaData = new List<MeMedicion48DTO>();

            for (var day = fechaIni; day <= fechaFin; day = day.AddDays(1))
            {
                var listaTmpXDia = listaDataXPto.Where(x => x.Medifecha == day).ToList();

                foreach (var reg in listaEmpresaArea)
                {
                    MeMedicion48DTO m = new MeMedicion48DTO();
                    m.Emprcodi = reg.Emprcodi;
                    m.Emprnomb = reg.Emprnomb;
                    m.AreaOperativa = reg.AreaOperativa;
                    m.Meditotal = 0;
                    m.Medifecha = day;

                    var listaTmp = listaTmpXDia.Where(x => x.Emprcodi == reg.Emprcodi && x.AreaOperativa == reg.AreaOperativa).ToList();
                    if (listaTmp.Count > 0)
                    {
                        decimal? total = 0, totalH = null, valor = null;
                        for (int i = 1; i <= 48; i++)
                        {
                            totalH = null;
                            foreach (var aux in listaTmp)
                            {
                                valor = (decimal?)aux.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(aux, null);
                                if (valor != null)
                                {
                                    totalH = totalH.GetValueOrDefault(0) + valor.Value;
                                    total += valor.Value;
                                }
                            }

                            m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i.ToString()).SetValue(m, totalH);
                        }

                        m.Meditotal = total;
                    }

                    listaData.Add(m);
                }
            }

            return listaData;
        }

        #endregion

        #region D.1. Demanda de Grandes Usuarios en el día de máxima demanda semanal (MW)

        /// <summary>
        /// Genera el grafico Comparacion de la maxima demanda para el reporte Demanda de grandes usuarios en el dia de maxima demanda
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaULByPto"></param>
        /// <param name="objHFP_HP"></param>
        /// <param name="objMDFromRango"></param>
        public static void GenerarCharExcelGraficosDemandaGUMaximaDemandaSemanal(ExcelWorksheet ws, FechasPR5 objFecha, List<SiEmpresaDTO> listaULByPto,
                            DemandadiaDTO objHFP_HP, DemandadiaDTO objMDFromRango)
        {
            DateTime fechaFin = objFecha.FechaFinal;
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var miChart = ws.Drawings["grafico1"] as ExcelChart;
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objMDFromRango.Medifecha);

            GraficoWeb pintarExcell = GraficoBarraDemandaGUMaximaDemandaSemanal(listaULByPto, objHFP_HP, objMDFromRango);

            var lstData = listaULByPto.OrderBy(x => x.HFP).ToList();

            #region  Tabla Usar
            int filaIniDataG = 171;
            int coluIniDataG = 27;
            int ultFila = 0;

            int fi = 0;
            pintarExcell.XAxisCategories.Reverse();
            foreach (var cat in pintarExcell.XAxisCategories)
            {
                ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat.TrimEnd();
                fi++;
            }

            int col1 = 0;
            int cc = 1;
            pintarExcell.Series.Reverse();
            foreach (var serie in pintarExcell.Series)
            {
                ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name;
                int fila1 = 0;
                int posicioncanttotal = pintarExcell.SeriesData[cc].Count() - 1;
                for (int contPto = 0; contPto < pintarExcell.SeriesData[cc].Count(); contPto++)
                {
                    ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][posicioncanttotal - (contPto)];
                    fila1++;
                }
                cc--;
                ultFila = filaIniDataG + 1 + fila1 - 1;
                col1++;
            }

            #region Formato Tabla Usada
            UtilExcel.CeldasExcelColorTexto(ws, filaIniDataG, coluIniDataG, ultFila, coluIniDataG + pintarExcell.Series.Count, "#FFFFFF");
            UtilExcel.CeldasExcelColorFondo(ws, filaIniDataG, coluIniDataG, ultFila, coluIniDataG + pintarExcell.Series.Count, "#FFFFFF");
            #endregion

            #endregion

            #region Grafico
            /*
            miChart.SetPosition(ultFila + 10, 0, 1, 0);
            if (lstData.Count() == 0)
            {
                miChart.SetSize(0, 0);
            }
            */
            #endregion

            for (int pto = 0; pto < pintarExcell.Series.Count; pto++)
            {
                miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + pto, ultFila, coluIniDataG + 1 + pto);
                miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                miChart.Series[pto].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + pto].Value;
            }

            #region Texto_Anotacion_3

            string texto = UtilAnexoAPR5.EscogerAnotacion("4.1", 2, tipoVistaReporte, tipoDoc);
            //UtilExcel.FormatoNotaNegrita(ws, filaIniDataG + 61, 3, texto + pintarExcell.Subtitle);
            UtilExcel.FormatoNotaNegrita(ws, 61, 9, texto + pintarExcell.Subtitle);

            #endregion


        }

        /// <summary>
        /// Genera el grafico Carga de grandes usuarios por area para el reporte Demanda de grandes usuarios en el dia de maxima demanda
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="lstData"></param>
        /// <param name="objHFP_HP"></param>
        /// <param name="objMDFromRango"></param>
        public static void GenerarCharExcelGraficosCargaDemandaGUMaximaDemandaSemanal(ExcelWorksheet ws, FechasPR5 objFecha, List<MeMedicion48DTO> lstData, DemandadiaDTO objHFP_HP, DemandadiaDTO objMDFromRango)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            //grafico proyecto nuevo
            var miChart = ws.Drawings["grafico2"] as ExcelChart;

            GraficoWeb pintarExcell = GraficoDiagramaCargaDemandaGUMaximaDemandaSemanal(lstData, objMDFromRango);

            #region  Tabla Usar
            int filaIniDataG = 85;
            int coluIniDataG = 27;
            int ultFila;

            int fi = 0;
            foreach (var cat in pintarExcell.XAxisCategories)
            {
                ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat.TrimEnd();
                fi++;
            }

            int col1 = 0;
            int cc = 0;

            foreach (var serie in pintarExcell.Series)
            {
                ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name;
                int fila1 = 0;

                for (int val = 0; val < 48; val++)
                {
                    ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                    fila1++;
                }
                cc++;
                ultFila = filaIniDataG + 1 + fila1 - 1;
                col1++;
            }

            #region Formato Tabla Usada
            //UtilExcel.CeldasExcelColorTexto(ws, filaIniDataG, coluIniDataG, ultFila, coluIniDataG + pintarExcell.Series.Count, "#FFFFFF");
            //UtilExcel.CeldasExcelColorFondo(ws, filaIniDataG, coluIniDataG, ultFila, coluIniDataG + pintarExcell.Series.Count, "#FFFFFF");
            #endregion

            #endregion

            #region Grafico

            //miChart.SetPosition(ultFila - 5, 0, 1, 0);
            if (lstData.Count() == 0)
            {
                miChart.SetSize(0, 0);
            }

            #endregion

            #region Texto_Anotacion_3

            string texto = UtilAnexoAPR5.EscogerAnotacion("4.1", 3, tipoVistaReporte, tipoDoc);
            //UtilExcel.FormatoNotaNegrita(ws, ultFila + 20 - 1, 3, texto + pintarExcell.Subtitle);
            UtilExcel.FormatoNotaNegrita(ws, 85, 9, texto + pintarExcell.Subtitle);

            #endregion
        }

        /// <summary>
        /// Genera el listado (tabla) excel para el reporte Demanda de grandes usuarios en el dia de maxima demanda
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaULByPto"></param>
        /// <param name="objHFP_HP"></param>
        /// <param name="objMDFromRango"></param>
        /// <param name="listaItem"></param>
        public static void GenerarCharExcelListadoDemandaGUMaximaDemandaSemanal(ExcelWorksheet ws, FechasPR5 objFecha, List<SiEmpresaDTO> listaULByPto,
                            DemandadiaDTO objHFP_HP, DemandadiaDTO objMDFromRango, List<ItemMenuNumeral> listaItem)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniCab = 8;
            int coluIniCab = 3;
            int ultimaFila = 0;
            int filaIniData = filaIniCab + 3;
            int coluIniData = coluIniCab;

            int resumenFila = 0;
            int resumenColu = 0;
            //int ultimaFila = 0;
            int ultimaColu = 0;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[filaIniCab - 4, coluIniCab - 1].Value = EscogerTitulosSubtitulos("11", 0, tipoVistaReporte, tipoDoc, listaItem); //titulo
            ws.Cells[filaIniCab - 2, coluIniCab].Value = EscogerTitulosSubtitulos("11", 1, tipoVistaReporte, tipoDoc, listaItem);  //subtitulo
            #endregion

            coluIniCab = coluIniCab - 1;
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objMDFromRango.Medifecha);
            string strSemanaMD = "SEM " + anioSemIni.Item1 + " - " + anioSemIni.Item2;

            #region cabecera
            ws.Cells[filaIniCab, coluIniCab + 1].Value = "N°";
            ws.Cells[filaIniCab, coluIniCab + 2].Value = "PRINCIPALES GRANDES USUARIOS ";
            ws.Cells[filaIniCab, coluIniCab + 3].Value = "ÁREA OPERATIVA ";
            ws.Cells[filaIniCab, coluIniCab + 4].Value = "Demanda de los Grandes Usuarios \n" + strSemanaMD;
            ws.Cells[filaIniCab + 1, coluIniCab + 4].Value = objMDFromRango.FechaMD;
            ws.Cells[filaIniCab + 2, coluIniCab + 4].Value = objMDFromRango.HoraMD;
            ws.Cells[filaIniCab + 3, coluIniCab + 4].Value = "HFP (" + objHFP_HP.MedifechaHFP + "h)";
            ws.Cells[filaIniCab + 3, coluIniCab + 5].Value = "HP (" + objHFP_HP.MedifechaHP + "h)";
            #endregion

            ultimaColu = coluIniCab + 10;
            #region Cuerpo
            if (listaULByPto.Any())
            {
                NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();
                int cc = 1;
                var lstData = listaULByPto.OrderBy(x => x.OrdenArea).ThenByDescending(x => x.Total).ToList();

                foreach (var d in lstData)
                {
                    ws.Cells[filaIniData + cc, coluIniData].Value = cc;
                    ws.Cells[filaIniData + cc, coluIniData + 1].Value = d.Emprnomb;
                    ws.Cells[filaIniData + cc, coluIniData + 2].Value = d.AreaOperativa;

                    ws.Cells[filaIniData + cc, coluIniData + 3].Value = d.HFP;
                    ws.Cells[filaIniData + cc, coluIniData + 3].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[filaIniData + cc, coluIniData + 4].Value = d.HP;
                    ws.Cells[filaIniData + cc, coluIniData + 4].Style.Numberformat.Format = "#,##0.00";
                    cc++;
                }

                resumenFila = filaIniData + cc;
                resumenColu = coluIniData;

                #region resumen
                ws.Cells[resumenFila, resumenColu].Value = "Máxima Demanda de Grandes Usuarios Libres (MW)";
                ws.Cells[resumenFila, resumenColu + 3].Value = objHFP_HP.ValorHFPUL;
                ws.Cells[resumenFila, resumenColu + 3].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[resumenFila, resumenColu + 4].Value = objHFP_HP.ValorHPUL;
                ws.Cells[resumenFila, resumenColu + 4].Style.Numberformat.Format = "#,##0.00";

                ws.Cells[resumenFila + 1, resumenColu].Value = "Máxima Demanda del SEIN -" + strSemanaMD + " (MW)";
                ws.Cells[resumenFila + 1, resumenColu + 3].Value = objHFP_HP.ValorHFP;
                ws.Cells[resumenFila + 1, resumenColu + 3].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[resumenFila + 1, resumenColu + 4].Value = objHFP_HP.ValorHP;
                ws.Cells[resumenFila + 1, resumenColu + 4].Style.Numberformat.Format = "#,##0.00";

                ws.Cells[resumenFila + 2, resumenColu].Value = "Participación Grandes UL en el día de Máxima Demanda del SEIN - " + strSemanaMD;
                if (objHFP_HP.ValorHFP > 0)
                    ws.Cells[resumenFila + 2, resumenColu + 3].Value = ((objHFP_HP.ValorHFPUL / objHFP_HP.ValorHFP) * 100) / 100;
                ws.Cells[resumenFila + 2, resumenColu + 3].Style.Numberformat.Format = "#,##0.00%";
                if (objHFP_HP.ValorHP > 0)
                    ws.Cells[resumenFila + 2, resumenColu + 4].Value = ((objHFP_HP.ValorHPUL / objHFP_HP.ValorHP) * 100) / 100;
                ws.Cells[resumenFila + 2, resumenColu + 4].Style.Numberformat.Format = "#,##0.00%";


                #endregion

                ultimaFila = resumenFila + 3;

                #region Formato Cuerpo
                UtilExcel.CeldasExcelAgrupar(ws, resumenFila, resumenColu, resumenFila, resumenColu + 2);
                UtilExcel.CeldasExcelAgrupar(ws, resumenFila + 1, resumenColu, resumenFila + 1, resumenColu + 2);
                UtilExcel.CeldasExcelAgrupar(ws, resumenFila + 2, resumenColu, resumenFila + 2, resumenColu + 2);

                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, resumenFila, coluIniData + 4);
                UtilExcel.CeldasExcelColorFondo(ws, resumenFila, resumenColu, resumenFila + 2, resumenColu + 4, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                UtilExcel.CeldasExcelEnNegrita(ws, resumenFila, resumenColu, resumenFila + 2, resumenColu + 4);
                UtilExcel.CeldasExcelColorTexto(ws, resumenFila, resumenColu, resumenFila + 2, resumenColu + 4, "#FFFFFF");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, resumenFila - 1, coluIniData + 4, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, resumenFila - 1, coluIniData + 4, "Centro");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, resumenFila - 1, coluIniData + 1, "Izquierda");
                UtilExcel.BorderCeldas2(ws, filaIniData + 1, coluIniData, resumenFila + 2, resumenColu + 4);
                #endregion

                #region Texto_Anotacion_3

                string texto = UtilAnexoAPR5.EscogerAnotacion("4.1", 1, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila, coluIniData, texto + UtilAnexoAPR5.CompletarAnotacion(NotasPieWebInformeSemanal.Cuadro1_Reporte_4p1, anioSemIni.Item1, anioSemIni.Item2));

                #endregion
            }
            #endregion
        }

        /// <summary>
        /// genera vista html del preporte de Demanda Grandes Usuarios
        /// </summary>
        /// <param name="listaULByPto"></param>
        /// <param name="objHFP_HP"></param>
        /// <param name="objDiaMD"></param>
        /// <returns></returns>
        public static string DemandaGUMaximaDemandaSemanalHtml(List<SiEmpresaDTO> listaULByPto, DemandadiaDTO objHFP_HP, DemandadiaDTO objDiaMD)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objDiaMD.Medifecha);
            string strSemanaMD = "SEM " + anioSemIni.Item1 + " - " + anioSemIni.Item2;

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 780px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 750px;'>");

            #region cabecera


            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='4' style='width: 25px;'>N°</th>");
            strHtml.Append("<th rowspan='4' style='width: 400px;'>PRINCIPALES GRANDES USUARIOS</th>");
            strHtml.Append("<th rowspan='4' style='width: 120px;'>ÁREA OPERATIVA</th>");
            strHtml.AppendFormat("<th colspan='2' style='width: 200px;'>Demanda de los Grandes Usuarios <br> {0} </th>", strSemanaMD);
            strHtml.Append("</tr>");

            strHtml.Append("<tr><th colspan='2'>" + objDiaMD.FechaMD + "</th></tr>");
            strHtml.Append("<tr><th colspan='2'>" + objDiaMD.HoraMD + "</th></tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>HFP (" + objHFP_HP.MedifechaHFP + "h)</th>");
            strHtml.Append("<th>HP (" + objHFP_HP.MedifechaHP + "h)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            int cc = 1;

            var listaDataUL = listaULByPto.OrderBy(x => x.OrdenArea).ThenByDescending(x => x.Total).ToList();
            foreach (var d in listaDataUL)
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + cc + "</td>");
                strHtml.Append("<td style='text-align:left; padding-left: 10px;'>" + d.Emprnomb + "</td>");
                strHtml.Append("<td>" + d.AreaOperativa + "</td>");

                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(d.HFP, nfi));
                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(d.HP, nfi));
                strHtml.Append("</tr>");

                cc++;
            }
            strHtml.Append("</tbody>");
            #endregion

            #region resumen
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='3' style='text-align: left;'>Máxima Demanda de Grandes Usuarios Libres (MW)</th>");
            strHtml.AppendFormat("<th>{0}</th>", objHFP_HP.ValorHFPUL.ToString("N", nfi));
            strHtml.AppendFormat("<th>{0}</th>", objHFP_HP.ValorHPUL.ToString("N", nfi));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='3' style='text-align: left;'>Máxima Demanda del SEIN - {0} (MW)</th>", strSemanaMD);
            strHtml.AppendFormat("<th>{0}</th>", objHFP_HP.ValorHFP.ToString("N", nfi));
            strHtml.AppendFormat("<th>{0}</th>", objHFP_HP.ValorHP.ToString("N", nfi));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='3' style='text-align: left;'>Participación Grandes UL en el día de Máxima Demanda del SEIN - {0} </th>", strSemanaMD);
            strHtml.AppendFormat("<th>{0}</th>", (objHFP_HP.ValorHFP > 0 ? string.Format("{0:0.0}%", (objHFP_HP.ValorHFPUL / objHFP_HP.ValorHFP) * 100) : string.Empty));
            strHtml.AppendFormat("<th>{0}</th>", (objHFP_HP.ValorHP > 0 ? string.Format("{0:0.0}%", (objHFP_HP.ValorHPUL / objHFP_HP.ValorHP) * 100) : string.Empty));
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            strHtml.Append("</table>");

            strHtml.AppendFormat("<div style='margin-top: 15px;'>" + NotasPieWebInformeSemanal.Cuadro1_Reporte_4p1 + "</div>", anioSemIni.Item1, anioSemIni.Item2);

            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        /// <summary>
        /// INFORME SEMANAL - Grafico Maxima Demanda
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="objDiaMD"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoDiagramaCargaDemandaGUMaximaDemandaSemanal(List<MeMedicion48DTO> lista, DemandadiaDTO objDiaMD)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objDiaMD.Medifecha);
            string strSemanaMD = anioSemIni.Item1 + " - " + anioSemIni.Item2;

            GraficoWeb grafico = new GraficoWeb();
            grafico.Subtitle = NotasPieWebInformeSemanal.Grafico2_Reporte_4p1 + strSemanaMD;

            //medias horas
            List<string> listaCateg = new List<string>();
            DateTime f_ = DateTime.MinValue;
            for (int x = 1; x <= 48; x++) { listaCateg.Add(f_.AddMinutes(30 * x).ToString("HH:mm")); }
            grafico.XAxisCategories = listaCateg;

            grafico.YaxixTitle = "Potencia\n (MW)";

            //
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[lista.Count][];

            int cc = 0;
            foreach (var reg in lista)
            {
                grafico.SeriesData[cc] = new decimal?[listaCateg.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = reg.Ptomedidesc;
                grafico.Series[cc].Color = (cc == 0 ? "green" : (cc == 1 ? "#C0504D" : (cc == 2 ? "#4F81BD" : "black")));

                for (int h = 1; h <= 48; h++)
                {
                    decimal? valH = (decimal?)reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h.ToString()).GetValue(reg, null);
                    grafico.SeriesData[cc][h - 1] = valH;
                }

                cc++;
            }

            return grafico;
        }

        /// <summary>
        /// Grafico de Barra de Grandes Usuarios Libres
        /// </summary>
        /// <param name="listaULByPto"></param>
        /// <param name="objHFP_HP"></param>
        /// <param name="objDiaMD"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraDemandaGUMaximaDemandaSemanal(List<SiEmpresaDTO> listaULByPto, DemandadiaDTO objHFP_HP, DemandadiaDTO objDiaMD)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objDiaMD.Medifecha);
            string strSemanaMD = anioSemIni.Item1 + " - " + anioSemIni.Item2;
            int anioAct = anioSemIni.Item2;

            var lista = listaULByPto.OrderByDescending(x => x.HFP).ToList();

            List<string> listaCateg = new List<string>();
            listaCateg.Add("HP (" + objHFP_HP.MedifechaHP + "h)");
            listaCateg.Add("HFP (" + objHFP_HP.MedifechaHFP + "h)");

            GraficoWeb grafico = new GraficoWeb();
            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_4p1, anioSemIni.Item1, anioAct - 2, anioAct - 1, anioAct);

            grafico.XAxisCategories = lista.Select(x => x.Emprnomb).ToList();
            grafico.XAxisTitle = "Grandes Usuarios Libres";

            grafico.YaxixTitle = "MW";

            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[2][];

            int cc = 0;
            foreach (var cat in listaCateg)
            {
                grafico.SeriesData[cc] = new decimal?[lista.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = cat;
                grafico.Series[cc].Color = (cc == 0 ? "#C0504D" : "#4F81BD");

                int contPto = 0;
                foreach (var reg in lista)
                {
                    decimal? h = (cc == 0 ? reg.HP : reg.HFP);
                    grafico.SeriesData[cc][contPto] = h;
                    contPto++;
                }

                cc++;
            }
            return grafico;
        }

        #endregion

        #region D.2. Diagrama de Carga por rangos de potencia en Grandes Usuarios (MW)

        /// <summary>
        /// Genera el grafico de Rangos de Potencia 
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaULByPto"></param>
        /// <param name="listaDataUL30min"></param>
        /// <param name="objHFP_HP"></param>
        /// <param name="objMDFromRango"></param>
        /// <param name="listaItem"></param>
        /// <param name="tipoGrafico"></param>
        /// <param name="finalPosGrafico"></param>
        public static void GenerarGraficoCharExcellGULRangoPotencia(ExcelWorksheet ws, FechasPR5 objFecha, List<SiEmpresaDTO> listaULByPto, List<MeMedicion48DTO> listaDataUL30min,
                     DemandadiaDTO objHFP_HP, DemandadiaDTO objMDFromRango, List<ItemMenuNumeral> listaItem, int tipoGrafico, ref int finalPosGrafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            ExcelChart miChart = ws.Drawings["grafico1"] as ExcelChart;
            int posicionGrafico = 0;
            int ordenanotacion = 0;
            switch (tipoGrafico)
            {
                case ConstantesPR5ReportesServicio.TipoRangoMayor100:
                    miChart = ws.Drawings["grafico1"] as ExcelChart;
                    posicionGrafico = 9;
                    ordenanotacion = 1;
                    break;
                case ConstantesPR5ReportesServicio.TipoRangoEntre30y100:
                    miChart = ws.Drawings["grafico2"] as ExcelChart;
                    posicionGrafico = 47;
                    ordenanotacion = 2;
                    break;
                case ConstantesPR5ReportesServicio.TipoRangoEntre20y30:
                    miChart = ws.Drawings["grafico3"] as ExcelChart;
                    posicionGrafico = 84;
                    ordenanotacion = 3;
                    break;
                case ConstantesPR5ReportesServicio.TipoRangoMenor20:
                    miChart = ws.Drawings["grafico4"] as ExcelChart;
                    posicionGrafico = 121;
                    ordenanotacion = 4;
                    break;
            }

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos("12", 0, tipoVistaReporte, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos("12", 1, tipoVistaReporte, tipoDoc, listaItem); //subtitulo
            #endregion

            GraficoWeb pintarExcell = GraficoGULRangoPotencia(tipoGrafico, listaULByPto, listaDataUL30min, objMDFromRango);

            if (pintarExcell.Series.Count() > 0)
            {
                #region tablaUsar

                int filaIniDataG = 11 + finalPosGrafico;
                int coluIniDataG = 26;
                int ultFila = 0;

                int fi = 0;
                foreach (var cat in pintarExcell.XAxisCategories)
                {
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat.TrimEnd();
                    fi++;
                }

                int col1 = 0;
                int cc = 0;


                foreach (var serie in pintarExcell.Series)
                {
                    ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name;
                    int fila1 = 0;

                    for (int val = 0; val < 48; val++)
                    {
                        ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                        fila1++;
                    }
                    cc++;
                    ultFila = filaIniDataG + 1 + fila1 - 1;
                    col1++;
                }

                #region Formato Tabla Usada
                UtilExcel.CeldasExcelColorTexto(ws, filaIniDataG - 1, coluIniDataG, ultFila + 1, coluIniDataG + pintarExcell.Series.Count, "#FFFFFF");
                UtilExcel.CeldasExcelColorFondo(ws, filaIniDataG - 1, coluIniDataG, ultFila + 1, coluIniDataG + pintarExcell.Series.Count, "#FFFFFF");
                #endregion

                #endregion

                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
                for (int i = 0; i < pintarExcell.Series.Count; i++) //creamos series
                {
                    miChart.Series.Add(ran1, ran2);
                }

                #region Grafico

                for (int pto = 0; pto < pintarExcell.Series.Count; pto++)
                {
                    miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + pto, ultFila, coluIniDataG + 1 + pto);
                    miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                    miChart.Series[pto].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + pto].Value;
                }

                miChart.SetPosition(posicionGrafico, 0, 1, 0);
                /*if (lstData.Count() == 0)
                {
                    miChart.SetSize(0, 0);
                }*/
                #endregion

                #region Texto_Anotacion_3

                string texto = UtilAnexoAPR5.EscogerAnotacion("4.2", ordenanotacion, tipoVistaReporte, tipoDoc);

                UtilExcel.FormatoNotaNegrita(ws, posicionGrafico + 35, 3, texto + pintarExcell.Subtitle);

                #endregion

                finalPosGrafico = ultFila - 6;
            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// INFORME SEMANAL - Grafico Rango Potencia
        /// </summary>
        /// <param name="tipoRangoUL"></param>
        /// <param name="listaULByPto"></param>
        /// <param name="listaAllUL"></param>
        /// <param name="objDiaMD"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoGULRangoPotencia(int tipoRangoUL, List<SiEmpresaDTO> listaULByPto, List<MeMedicion48DTO> listaAllUL, DemandadiaDTO objDiaMD)
        {
            string subtitulo = string.Empty;
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objDiaMD.Medifecha);
            string strSemanaMD = anioSemIni.Item1 + " - " + anioSemIni.Item2;

            switch (tipoRangoUL)
            {
                case ConstantesPR5ReportesServicio.TipoRangoMayor100:
                    subtitulo = "mayores a 100 MW ";
                    break;
                case ConstantesPR5ReportesServicio.TipoRangoEntre30y100:
                    subtitulo = "en el rango de 30 a 100 MW";
                    break;
                case ConstantesPR5ReportesServicio.TipoRangoEntre20y30:
                    subtitulo = "en el rango de 20 a 30 MW";
                    break;
                case ConstantesPR5ReportesServicio.TipoRangoMenor20:
                    subtitulo = "menor de 20";
                    break;
            }

            //
            var lista = listaULByPto.Where(x => x.TipoRango == tipoRangoUL).OrderByDescending(x => x.Maximo).ToList();

            GraficoWeb grafico = new GraficoWeb();
            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_4p2, subtitulo, strSemanaMD);

            List<string> listaCateg = new List<string>();
            DateTime f_ = DateTime.MinValue;
            for (int x = 1; x <= 48; x++) { listaCateg.Add(f_.AddMinutes(30 * x).ToString("HH:mm")); }
            grafico.XAxisCategories = listaCateg;
            grafico.YaxixTitle = "Potencia\n (MW)";

            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[lista.Count][];

            int cc = 0;
            foreach (var reg in lista)
            {
                grafico.SeriesData[cc] = new decimal?[listaCateg.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = reg.Emprnomb;

                var reg48 = listaAllUL.Find(x => x.Emprcodi == reg.Emprcodi && x.AreaOperativa == reg.AreaOperativa) ?? new MeMedicion48DTO();
                for (int h = 1; h <= 48; h++)
                {
                    decimal? valH = (decimal?)reg48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h.ToString()).GetValue(reg48, null);
                    grafico.SeriesData[cc][h - 1] = valH;
                }

                cc++;
            }

            return grafico;
        }

        #endregion

        #region D.3. Demanda de energía por área operativa de los Principales Grandes Usuarios (GWh)

        /// <summary>
        /// Convertir data a GWh
        /// </summary>
        /// <param name="listaEmpresaArea"></param>
        /// <param name="listaData"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static List<MeMedicion48DTO> GULConvertDataPtoMW48ToGWh(List<SiEmpresaDTO> listaEmpresaArea, List<MeMedicion48DTO> listaData, int tipoResultadoFecha, DateTime fechaProceso)
        {
            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();
            foreach (var reg in listaEmpresaArea)
            {
                MeMedicion48DTO m = new MeMedicion48DTO();
                m.Medifecha = fechaProceso;
                m.Emprcodi = reg.Emprcodi;
                m.AreaOperativa = reg.AreaOperativa;
                m.TipoResultadoFecha = tipoResultadoFecha;
                m.Meditotal = 0;

                var listaTmp = listaData.Where(x => x.Emprcodi == reg.Emprcodi && x.AreaOperativa == reg.AreaOperativa).ToList();
                if (listaTmp.Count > 0)
                {
                    decimal? total = 0, totalH = null, valor = null;
                    for (int i = 1; i <= 48; i++)
                    {
                        totalH = null;
                        foreach (var aux in listaTmp)
                        {
                            valor = (decimal?)aux.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(aux, null);
                            if (valor != null)
                            {
                                totalH = totalH.GetValueOrDefault(0) + valor.Value;
                                total += valor.Value;
                            }
                        }

                        m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i.ToString()).SetValue(m, totalH);
                    }

                    m.Meditotal = total / (ConstantesPR5ReportesServicio.FactorGW * 2);
                }

                lista.Add(m);
            }

            return lista;
        }

        /// <summary>
        /// Genera la variacion que hubo entre diferentes fechas
        /// </summary>
        /// <param name="listaEmpresaArea"></param>
        /// <param name="listaDataAct"></param>
        /// <param name="listaDataAnt"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static List<MeMedicion48DTO> GULGenerarVariacionGWh(List<SiEmpresaDTO> listaEmpresaArea, List<MeMedicion48DTO> listaDataAct, List<MeMedicion48DTO> listaDataAnt, int tipoResultadoFecha, DateTime fechaProceso)
        {
            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();
            foreach (var reg in listaEmpresaArea)
            {
                MeMedicion48DTO m = new MeMedicion48DTO();
                m.Medifecha = fechaProceso;
                m.Emprcodi = reg.Emprcodi;
                m.AreaOperativa = reg.AreaOperativa;
                m.TipoResultadoFecha = tipoResultadoFecha;

                var regAct = listaDataAct.Find(x => x.Emprcodi == reg.Emprcodi && x.AreaOperativa == reg.AreaOperativa) ?? new MeMedicion48DTO();
                var regAnt = listaDataAnt.Find(x => x.Emprcodi == reg.Emprcodi && x.AreaOperativa == reg.AreaOperativa) ?? new MeMedicion48DTO();

                if (regAnt.Meditotal != 0)
                {
                    m.Meditotal = regAnt.Meditotal != 0 ? ((regAct.Meditotal / regAnt.Meditotal) - 1.0m) : 0.0m;
                    m.Meditotal = m.Meditotal * 100;
                }

                lista.Add(m);
            }

            return lista;
        }

        /// <summary>
        /// Obtiene la data de demanda en GWh por reporcodi
        /// </summary>
        /// <param name="areaop"></param>
        /// <param name="listaData"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static MeMedicion48DTO GULObtenerDataGWhXReporcodi(string areaop, List<MeMedicion48DTO> listaData, int tipoResultadoFecha, DateTime fechaProceso)
        {
            MeMedicion48DTO m = new MeMedicion48DTO();
            m.Medifecha = fechaProceso;
            m.AreaOperativa = areaop;
            m.TipoResultadoFecha = tipoResultadoFecha;
            m.Meditotal = 0;

            var listaTmp = listaData.Where(x => x.AreaOperativa == areaop || "SEIN" == areaop).ToList();
            if (listaTmp.Count > 0)
            {
                decimal total = 0;
                foreach (var aux in listaTmp)
                {
                    total += aux.Meditotal.GetValueOrDefault(0);
                }

                m.Meditotal = total;
            }

            return m;
        }

        /// <summary>
        /// Obtiene la variacion de demanda en GWh por reporcodi
        /// </summary>
        /// <param name="areaop"></param>
        /// <param name="regAct"></param>
        /// <param name="regAnt"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static MeMedicion48DTO GULGenerarVariacionGWhXReporcodi(string areaop, MeMedicion48DTO regAct, MeMedicion48DTO regAnt, int tipoResultadoFecha, DateTime fechaProceso)
        {
            MeMedicion48DTO m = new MeMedicion48DTO();
            m.Medifecha = fechaProceso;
            m.AreaOperativa = areaop;
            m.TipoResultadoFecha = tipoResultadoFecha;

            if (regAnt.Meditotal != 0)
            {
                m.Meditotal = regAnt.Meditotal != 0 ? ((regAct.Meditotal / regAnt.Meditotal) - 1.0m) : 0.0m;
                m.Meditotal = m.Meditotal * 100;
            }

            return m;
        }

        /// <summary>
        /// INFORME SEMANAL - Demanda Area Operativa
        /// </summary>
        /// <param name="listaEmpresaArea"></param>
        /// <param name="listaReporteXPto"></param>
        /// <param name="listaReporteXArea"></param>
        /// <param name="objFecha"></param>
        /// <returns></returns>
        public static string DemandaGUareaOperativaHtml(List<SiEmpresaDTO> listaEmpresaArea, List<MeMedicion48DTO> listaReporteXPto, List<MeMedicion48DTO> listaReporteXArea, FechasPR5 objFecha)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);
            string strSemanaMD = anioSemIni.Item1 + " - " + anioSemIni.Item2;

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();
            NumberFormatInfo nfi1 = UtilAnexoAPR5.GenerarNumberFormatInfo1();

            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<div id='reporte_data' style='height: auto; width: 980px;'>");
            strHtml.AppendFormat("<table id='reporte' class='pretty tabla-icono' style='width: 950px;margin-bottom: 10px;'>");

            #region cabecera
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2' style='width: 400px;'>Gran Usuario</th>");
            strHtml.Append("<th rowspan='2' style='width: 120px;'>Área Operativa</th>");
            strHtml.AppendFormat("<th colspan='3' style='width: 250px; height: 25px;'>Semana Operativa  N°{0}</th>", anioSemIni.Item1);
            strHtml.Append("<th colspan='3' style='width: 250px;'>Demanda acumulada Anual</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th>{0}</th>", objFecha.AnioAct.Fecha_01Enero.Year);
            strHtml.AppendFormat("<th>{0}</th>", objFecha.Anio1Ant.Fecha_01Enero.Year);
            strHtml.Append("<th>Var <br/>(%)</th>");
            strHtml.AppendFormat("<th>{0}</th>", objFecha.AnioAct.Fecha_01Enero.Year);
            strHtml.AppendFormat("<th>{0}</th>", objFecha.Anio1Ant.Fecha_01Enero.Year);
            strHtml.AppendFormat("<th>Var (%)<br/>{0}/{1}</th>", objFecha.AnioAct.Fecha_01Enero.Year, objFecha.Anio1Ant.Fecha_01Enero.Year);
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");

            var listaArea = GetListaReporteUL(true);

            int cont = 0;
            foreach (var r in listaArea)
            {
                var listaPtosXArea = listaEmpresaArea.Where(x => x.AreaOperativa == r.AreaOperativa).ToList();
                foreach (var d in listaPtosXArea)
                {
                    var listaDataXPto = listaReporteXPto.Where(x => x.Emprcodi == d.Emprcodi && x.AreaOperativa == d.AreaOperativa).ToList();
                    var regSem1 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                    var regSem2 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                    var regSemVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
                    var regAcum1 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                    var regAcum2 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                    var regAcumVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                    string classFila = cont % 2 == 0 ? "odd" : "even";

                    strHtml.AppendFormat("<tr class='{0}'>", classFila);

                    strHtml.AppendFormat("<td style='text-align:left; padding-left: 10px;'>{0}</td>", d.Emprnomb);
                    strHtml.AppendFormat("<td>{0}</td>", d.AreaOperativa);

                    strHtml.AppendFormat("<td>{0}</td>", regSem1.Meditotal.Value.ToString("N", nfi));
                    strHtml.AppendFormat("<td>{0}</td>", regSem2.Meditotal.Value.ToString("N", nfi));
                    strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(regSemVar.Meditotal, nfi1));

                    strHtml.AppendFormat("<td>{0}</td>", regAcum1.Meditotal.Value.ToString("N", nfi));
                    strHtml.AppendFormat("<td>{0}</td>", regAcum2.Meditotal.Value.ToString("N", nfi));
                    strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(regAcumVar.Meditotal, nfi1));

                    strHtml.Append("</tr>");

                    cont++;
                }
            }
            #endregion

            #region resumen

            for (var i = 0; i < 4; i++)
            {
                strHtml.Append("<tr>");
                if (i == 0)
                    strHtml.Append("<td rowspan='3' style='font-weight: bold;'>Demanda de Energía Eléctrica</td>");
                if (i >= 0 && i <= 2)
                    strHtml.AppendFormat("<td style='font-weight: bold;height: 30px;'>{0}</td>", listaArea[i].AreaOperativa);
                if (i == 3)
                    strHtml.Append("<td colspan='2' style='font-weight: bold;height: 40px;'>Total Demanda de energía del Gran Usuario en el SEIN</td>");

                var listaDataXArea = listaReporteXArea.Where(x => x.AreaOperativa == listaArea[i].AreaOperativa).ToList();
                var regSem1 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                var regSem2 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                var regSemVar = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
                var regAcum1 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                var regAcum2 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                var regAcumVar = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                strHtml.AppendFormat("<td style='font-weight: bold;'>{0}</td>", regSem1.Meditotal.Value.ToString("N", nfi));
                strHtml.AppendFormat("<td style='font-weight: bold;'>{0}</td>", regSem2.Meditotal.Value.ToString("N", nfi));
                strHtml.AppendFormat("<td style='font-weight: bold;'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(regSemVar.Meditotal, nfi1));

                strHtml.AppendFormat("<td style='font-weight: bold;'>{0}</td>", regAcum1.Meditotal.Value.ToString("N", nfi));
                strHtml.AppendFormat("<td style='font-weight: bold;'>{0}</td>", regAcum2.Meditotal.Value.ToString("N", nfi));
                strHtml.AppendFormat("<td style='font-weight: bold;'>{0}</td>", UtilAnexoAPR5.ImprimirVariacionHtml(regAcumVar.Meditotal, nfi1));

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            #endregion

            strHtml.Append("</table>");
            strHtml.Append("<div style='margin-top: 15px;'>" + NotasPieWebInformeSemanal.Cuadro1_Reporte_4p3 + "</div>");
            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera el grafico web de Evolucion de la demanda de los GU
        /// </summary>
        /// <param name="listaEmpresaArea"></param>
        /// <param name="listaReporteXPto"></param>
        /// <param name="objFecha"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraDemandaGUEvolucionXPto(List<SiEmpresaDTO> listaEmpresaArea, List<MeMedicion48DTO> listaReporteXPto, FechasPR5 objFecha)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);

            var listaArea = GetListaReporteUL(true);
            listaArea[3].Repornombre = "Var (%)";

            List<string> listaCateg = new List<string>();
            listaCateg.Add("Semana " + anioSemIni.Item1 + "- " + anioSemIni.Item2);
            listaCateg.Add("Semana " + anioSemIni.Item1 + "- " + (anioSemIni.Item2 - 1));
            listaCateg.Add("Var (%)");

            GraficoWeb grafico = new GraficoWeb();
            grafico.Subtitle = NotasPieWebInformeSemanal.Grafico1_Reporte_4p3;

            grafico.SerieData = new DatosSerie[listaEmpresaArea.Count];
            int cctg = 0;
            grafico.Categorias = new Categorias[3];
            foreach (var reg in listaArea.Where(x => x.AreaOperativa != "SEIN").ToList())
            {
                var listaPtoxArea = listaEmpresaArea.Where(x => x.AreaOperativa == reg.AreaOperativa).ToList();

                grafico.Categorias[cctg] = new Categorias();
                grafico.Categorias[cctg].Name = reg.AreaOperativa;
                grafico.Categorias[cctg].Categories = new string[listaPtoxArea.Count];

                int cpto = 0;
                foreach (var regPto in listaPtoxArea)
                {
                    grafico.Categorias[cctg].Categories[cpto] = regPto.Emprnomb;
                    cpto++;
                }
                cctg++;
            }


            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaCateg.Count][];

            int cc = 0;
            foreach (var cat in listaCateg)
            {
                grafico.SeriesData[cc] = new decimal?[listaEmpresaArea.Count];

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = cat;
                grafico.Series[cc].Type = (cc == 2 ? "spline" : "column");
                grafico.Series[cc].Color = (cc == 0 ? "#C0504D" : (cc == 1 ? "#4F81BD" : "#C0504D"));
                grafico.Series[cc].YAxisTitle = (cc == 2 ? "Var (%)" : "Energía\n (GWh)");
                grafico.Series[cc].YAxis = cc == 2 ? 1 : 0;

                int contPto = 0;
                foreach (var reg in listaEmpresaArea)
                {
                    var listaDataXPto = listaReporteXPto.Where(x => x.Emprcodi == reg.Emprcodi && x.AreaOperativa == reg.AreaOperativa).ToList();

                    var regSem1 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                    var regSem2 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                    var regSemVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
                    decimal? valor = null;
                    switch (cc)
                    {
                        case 0:
                            valor = regSem1.Meditotal;
                            break;
                        case 1:
                            valor = regSem2.Meditotal;
                            break;
                        case 2:
                            valor = regSemVar.Meditotal;
                            break;
                    }

                    grafico.SeriesData[cc][contPto] = valor;
                    contPto++;
                }

                cc++;
            }

            return grafico;
        }

        /// <summary>
        /// Genera el grafico web de la participacion de la demanda de los GU
        /// </summary>
        /// <param name="listaReporteXArea"></param>
        /// <param name="fechaSem"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoPieDemandaGU(List<MeMedicion48DTO> listaReporteXArea, DateTime fechaSem, int tipoResultadoFecha)
        {
            var listaArea = UtilSemanalPR5.GetListaReporteUL(true);
            List<MeMedicion48DTO> listaData = listaReporteXArea.Where(x => x.TipoResultadoFecha == tipoResultadoFecha).ToList();
            decimal total = listaData.Find(x => x.AreaOperativa == "SEIN").Meditotal.Value;
            listaArea = listaArea.Where(x => x.AreaOperativa != "SEIN").ToList();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2(); ;

            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(fechaSem);
            string strSemanaMD = "Semana N° " + anioSemIni.Item1 + " - " + anioSemIni.Item2;

            string subtitulo = string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_4p3, anioSemIni.Item1, (anioSemIni.Item2 - 1), anioSemIni.Item2);

            GraficoWeb grafico = new GraficoWeb();

            grafico.TitleText = strSemanaMD;
            grafico.XAxisTitle = subtitulo;

            List<RegistroSerie> listaSerie = new List<RegistroSerie>();
            foreach (var cat in listaArea)
            {
                RegistroSerie regSerie = new RegistroSerie();
                regSerie.Name = cat.AreaOperativa;
                regSerie.Acumulado = listaData.Find(x => x.AreaOperativa == cat.AreaOperativa).Meditotal;
                regSerie.Porcentaje = total > 0 ? regSerie.Acumulado / total * 100 : null;

                listaSerie.Add(regSerie);
            }

            grafico.Series = listaSerie;
            grafico.Subtitle = "Total = " + total.ToString("N", nfi) + "GWh";

            return grafico;
        }

        /// <summary>
        /// Genera el grafico web de Evolucion semanal en el año
        /// </summary>
        /// <param name="listaReporteEvolSemanal"></param>
        /// <param name="objFecha"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoBarraDemandaGUEvolucionSemanal(List<MeMedicion48DTO> listaReporteEvolSemanal, FechasPR5 objFecha)
        {
            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);

            var listaArea = UtilSemanalPR5.GetListaReporteUL(true);
            listaArea[3].Repornombre = "Var (%)";

            List<string> listaCateg = new List<string>();
            for (int c = 1; c <= anioSemIni.Item1; c++)
            {
                listaCateg.Add(c.ToString());
            }

            GraficoWeb grafico = new GraficoWeb();
            grafico.TitleText = "EVOLUCIÓN SEMANAL DE LA DEMANDA DE ENERGÍA DE LOS GRANDES USUARIOS";
            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico3_Reporte_4p3, anioSemIni.Item2);
            grafico.XAxisCategories = listaCateg;
            grafico.XAxisTitle = "Semana";
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[listaArea.Count][];

            for (int cc = 0; cc < listaArea.Count; cc++)
            {
                grafico.SeriesData[cc] = new decimal?[listaCateg.Count];
                grafico.Series.Add(new RegistroSerie());
                grafico.Series[cc].Name = listaArea[cc].Repornombre;
                grafico.Series[cc].Type = (cc == 3 ? "spline" : "column");
                grafico.Series[cc].YAxis = (cc == 3 ? 1 : 0);
                grafico.Series[cc].YAxisTitle = (cc == 3 ? "Var (%)" : "Energía\n (GWh)");

                for (int c = 1; c <= listaCateg.Count; c++)
                {
                    DateTime fechaProceso = objFecha.AnioAct.Sem01_FechaIni.AddDays(7 * (c - 1));
                    var regDataXAreaXSem = listaReporteEvolSemanal.Find(x => x.AreaOperativa == listaArea[cc].AreaOperativa && x.Medifecha == fechaProceso);
                    decimal? valor = null;
                    if (regDataXAreaXSem?.Meditotal != null)
                        valor = decimal.Round(regDataXAreaXSem.Meditotal.Value, 2);
                    grafico.SeriesData[cc][c - 1] = valor;
                }
            }

            return grafico;
        }

        /// <summary>
        /// Genera el grafico Barras Demanda de  grandes usuarios Evolución semanal
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="listaReporteEvolSemanal"></param>
        /// <param name="objFecha"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcelBarraDemandaGUEvolucionSemanal(ExcelWorksheet ws, FechasPR5 objFecha, List<MeMedicion48DTO> listaReporteEvolSemanal, int finalPosTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            ExcelChart miChart = ws.Drawings["grafico4"] as ExcelChart;

            GraficoWeb pintarExcell = GraficoBarraDemandaGUEvolucionSemanal(listaReporteEvolSemanal, objFecha);

            #region tablaUsar

            int filaIniDataG = 200;
            int coluIniDataG = 27;
            int ultFila = 0;

            for (int fi = 0; fi < pintarExcell.SeriesData[0].Count(); fi++)
            {
                ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = fi + 1;
            }

            int col1 = 0;
            int cc = 0;

            foreach (var serie in pintarExcell.Series)
            {
                ws.Cells[filaIniDataG, coluIniDataG + 1 + col1].Value = serie.Name;
                int fila1 = 0;

                for (int val = 0; val < pintarExcell.SeriesData[0].Count(); val++)
                {
                    ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 1 + col1].Value = pintarExcell.SeriesData[cc][val];
                    fila1++;
                }
                cc++;
                ultFila = filaIniDataG + 1 + fila1 - 1;
                col1++;
            }


            #endregion

            UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

            miChart.Title.Text = pintarExcell.TitleText;

            var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
            var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
            for (int i = 0; i < pintarExcell.Series.Count - 1; i++) //creamos series
            {
                miChart.Series.Add(ran1, ran2);
            }

            #region Grafico

            for (int pto = 0; pto < 3; pto++)
            {
                miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1 + pto, ultFila, coluIniDataG + 1 + pto);
                miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG);
                miChart.Series[pto].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1 + pto].Value;
            }

            miChart.PlotArea.ChartTypes[2].Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 4, ultFila, coluIniDataG + 4);
            /*
            miChart.SetPosition(finalPosTabla + 25, 0, 1, 0);
            if (listaReporteEvolSemanal.Count() == 0)
            {
                miChart.SetSize(0, 0);
            }*/
            #endregion

            #region Texto_Anotacion_3

            string texto = UtilAnexoAPR5.EscogerAnotacion("4.3", 4, tipoVistaReporte, tipoDoc);

            //UtilExcel.FormatoNotaNegrita(ws, 227, 3, texto + pintarExcell.Subtitle);
            UtilExcel.FormatoNotaNegrita(ws, 108, 12, texto + pintarExcell.Subtitle);

            #endregion
        }

        /// <summary>
        /// Genera el grafico Demanda de grandes usuarios
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaReporteXArea"></param>
        /// <param name="fechaSem"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="col"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcelLPieDemandaGU(ExcelWorksheet ws, FechasPR5 objFecha, List<MeMedicion48DTO> listaReporteXArea, DateTime fechaSem, int tipoResultadoFecha, int col, int finalPosTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            ExcelChart miChart = ws.Drawings["grafico2"] as ExcelChart;
            if (col == 1)
            {
                miChart = ws.Drawings["grafico2"] as ExcelChart;
            }
            if (col == 2)
            {
                miChart = ws.Drawings["grafico3"] as ExcelChart;
            }

            GraficoWeb pintarExcell = GraficoPieDemandaGU(listaReporteXArea, fechaSem, tipoResultadoFecha);

            #region tablaUsar

            int filaIniDataG = 170;
            int coluIniDataG = 27;
            int ultFila = 0;

            int fi = 0;

            if (col == 1)
            {
                ws.Cells[filaIniDataG, coluIniDataG + 1].Value = pintarExcell.TitleText;
                miChart.Title.Text = pintarExcell.TitleText;
            }

            if (col == 2)
            {
                ws.Cells[filaIniDataG, coluIniDataG + 2].Value = pintarExcell.TitleText;
                miChart.Title.Text = pintarExcell.TitleText;
            }

            foreach (var cat in pintarExcell.Series)
            {
                ws.Cells[filaIniDataG + 1 + fi, coluIniDataG].Value = cat.Name;
                if (col == 1)
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG + 1].Value = cat.Acumulado;
                if (col == 2)
                    ws.Cells[filaIniDataG + 1 + fi, coluIniDataG + 2].Value = cat.Acumulado;
                fi++;
                ultFila = filaIniDataG + 1 + fi;
            }

            #endregion

            #region Grafico
            //finalPosTabla = 187;
            finalPosTabla = 71;
            if (col == 1)
            {
                miChart.Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 1, ultFila - 1, coluIniDataG + 1);
                miChart.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila - 1, coluIniDataG);
                miChart.Series[0].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 1].Value;

                ws.Cells[finalPosTabla, 16].Value = pintarExcell.Subtitle;
            }
            if (col == 2)
            {
                miChart.Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 2, ultFila - 1, coluIniDataG + 2);
                miChart.Series[0].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila - 1, coluIniDataG);
                miChart.Series[0].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 2].Value;

                ws.Cells[finalPosTabla, 23].Value = pintarExcell.Subtitle;
            }
            /*
            if (col == 1) miChart.SetPosition(finalPosTabla + 2, 0, 1, 0);
            if (col == 2) miChart.SetPosition(finalPosTabla + 2, 0, 4, 0);

            if (listaReporteXArea.Count() == 0)
            {
                miChart.SetSize(0, 0);
            }*/
            #endregion

            #region Texto_Anotacion_3

            if (col == 2)
            {
                string texto = UtilAnexoAPR5.EscogerAnotacion("4.3", 3, tipoVistaReporte, tipoDoc);

                //UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 5, 3, texto + pintarExcell.XAxisTitle);
                UtilExcel.FormatoNotaNegrita(ws, 72, 12, texto + pintarExcell.XAxisTitle);
            }
            #endregion
        }

        /// <summary>
        /// Genera el grafico Demanda de grandes usuarios por punto
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaEmpresaArea"></param>
        /// <param name="listaReporteXPto"></param>
        /// <param name="finalPosTabla"></param>
        public static void GenerarGraficoCharExcellDemandaGUEvolucionXPto(ExcelWorksheet ws, FechasPR5 objFecha, List<SiEmpresaDTO> listaEmpresaArea,
                            List<MeMedicion48DTO> listaReporteXPto, ref int finalPosTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            ExcelChart miChart = ws.Drawings["grafico1"] as ExcelChart;

            GraficoWeb pintarExcell = GraficoBarraDemandaGUEvolucionXPto(listaEmpresaArea, listaReporteXPto, objFecha);

            #region tablaUsar

            int filaIniDataG = 8;
            int coluIniDataG = 27;
            int ultFila = 0;

            int fi = 0;
            foreach (var cat in pintarExcell.Categorias)
            {
                ws.Cells[filaIniDataG + fi + 1, coluIniDataG].Value = cat.Name;

                int cpto = 0;
                foreach (var gu in cat.Categories)
                {
                    ws.Cells[filaIniDataG + 1 + fi + cpto, coluIniDataG + 1].Value = gu;
                    cpto++;
                }
                fi = fi + cpto;
            }

            int col1 = 0;
            int cc = 0;

            foreach (var serie in pintarExcell.Series)
            {
                ws.Cells[filaIniDataG, coluIniDataG + 2 + col1].Value = serie.Name;
                int fila1 = 0;

                for (int val = 0; val < pintarExcell.SeriesData[cc].Count(); val++)
                {
                    ws.Cells[filaIniDataG + 1 + fila1, coluIniDataG + 2 + col1].Value = pintarExcell.SeriesData[cc][val];
                    fila1++;
                }
                cc++;
                ultFila = filaIniDataG + 1 + fila1;
                col1++;
            }

            #region Formato Tabla Usada
            //UtilExcel.CeldasExcelColorTexto(ws, filaIniDataG - 1, coluIniDataG, ultFila + 1, coluIniDataG + pintarExcell.Series.Count, "#FFFFFF");
            //UtilExcel.CeldasExcelColorFondo(ws, filaIniDataG - 1, coluIniDataG, ultFila + 1, coluIniDataG + pintarExcell.Series.Count, "#FFFFFF");
            #endregion

            #endregion

            UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

            var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
            var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
            for (int i = 0; i < pintarExcell.Series.Count - 1; i++) //creamos series
            {
                miChart.Series.Add(ran1, ran2);
            }

            #region Grafico

            for (int pto = 0; pto < 2; pto++)
            {
                miChart.Series[pto].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 2 + pto, ultFila, coluIniDataG + 2 + pto);
                miChart.Series[pto].XSeries = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG, ultFila, coluIniDataG + 1);
                miChart.Series[pto].Header = (string)ws.Cells[filaIniDataG, coluIniDataG + 2 + pto].Value;
            }

            miChart.PlotArea.ChartTypes[2].Series[0].Series = ExcelRange.GetAddress(filaIniDataG + 1, coluIniDataG + 2 + 2, ultFila, coluIniDataG + 2 + 2);
            /*
            miChart.SetPosition(ultFila + 10, 0, 1, 0);
            if (listaEmpresaArea.Count() == 0)
            {
                miChart.SetSize(0, 0);
            }*/
            #endregion

            finalPosTabla = ultFila + 50;

            #region Texto_Anotacion_3

            string texto = UtilAnexoAPR5.EscogerAnotacion("4.3", 2, tipoVistaReporte, tipoDoc);

            //UtilExcel.FormatoNotaNegrita(ws, finalPosTabla + 1, 3, texto + pintarExcell.Subtitle);
            UtilExcel.FormatoNotaNegrita(ws, 46, 12, texto + pintarExcell.Subtitle);

            #endregion
        }

        /// <summary>
        /// Genera la tabla del  excel para el reporte Demanda por área operativa de los principales grandes usuarios 
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaEmpresaArea"></param>
        /// <param name="listaReporteXPto"></param>
        /// <param name="listaReporteXArea"></param>
        /// <param name="listaItem"></param>
        /// <param name="finalPosTabla"></param>
        public static void ListarDemandaGUareaOperativa(ExcelWorksheet ws, FechasPR5 objFecha, List<SiEmpresaDTO> listaEmpresaArea, List<MeMedicion48DTO> listaReporteXPto,
            List<MeMedicion48DTO> listaReporteXArea, List<ItemMenuNumeral> listaItem, ref int finalPosTabla)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniCab = 8;
            int coluIniCab = 3;

            int filaIniData = filaIniCab + 2;
            int coluIniData = coluIniCab;

            int resumenFila = 0;
            int resumenColu = 0;
            int ultimaFila = 0;
            int ultimaColu = 0;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[filaIniCab - 4, coluIniCab - 1].Value = EscogerTitulosSubtitulos("13", 0, tipoVistaReporte, tipoDoc, listaItem);  //titulo
            ws.Cells[filaIniCab - 2, coluIniCab].Value = EscogerTitulosSubtitulos("13", 1, tipoVistaReporte, tipoDoc, listaItem);  //subtitulo
            #endregion

            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);
            string strSemanaMD = anioSemIni.Item1 + " - " + anioSemIni.Item2;

            #region cabecera
            ws.Cells[filaIniCab, coluIniCab + 2].Value = "Semana Operativa  N°" + anioSemIni.Item1;

            ws.Cells[filaIniCab + 1, coluIniCab + 2].Value = objFecha.AnioAct.Fecha_01Enero.Year;
            ws.Cells[filaIniCab + 1, coluIniCab + 3].Value = objFecha.Anio1Ant.Fecha_01Enero.Year;
            ws.Cells[filaIniCab + 1, coluIniCab + 5].Value = objFecha.AnioAct.Fecha_01Enero.Year;
            ws.Cells[filaIniCab + 1, coluIniCab + 6].Value = objFecha.Anio1Ant.Fecha_01Enero.Year;
            ws.Cells[filaIniCab + 1, coluIniCab + 7].Value = "Var (%)\n " + objFecha.AnioAct.Fecha_01Enero.Year + "/" + objFecha.Anio1Ant.Fecha_01Enero.Year;
            #endregion
            ultimaColu = coluIniCab + 7;
            #region Cuerpo

            var listaArea = GetListaReporteUL(true);
            if (listaArea.Any() && listaEmpresaArea.Any())
            {
                NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();
                NumberFormatInfo nfi1 = UtilAnexoAPR5.GenerarNumberFormatInfo1();

                int cc = 0;

                foreach (var r in listaArea)
                {
                    var listaPtosXArea = listaEmpresaArea.Where(x => x.AreaOperativa == r.AreaOperativa).ToList();
                    int filaIniX = filaIniData + cc;
                    bool entro = false;
                    foreach (var d in listaPtosXArea)
                    {
                        entro = true;
                        var listaDataXPto = listaReporteXPto.Where(x => x.Emprcodi == d.Emprcodi && x.AreaOperativa == d.AreaOperativa).ToList();
                        var regSem1 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                        var regSem2 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                        var regSemVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
                        var regAcum1 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                        var regAcum2 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                        var regAcumVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                        ws.Cells[filaIniData + cc, coluIniData].Value = d.Emprnomb;
                        ws.Cells[filaIniData + cc, coluIniData + 1].Value = d.AreaOperativa;


                        ws.Cells[filaIniData + cc, coluIniData + 2].Value = regSem1.Meditotal.Value;
                        ws.Cells[filaIniData + cc, coluIniData + 2].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + cc, coluIniData + 3].Value = regSem2.Meditotal.Value;
                        ws.Cells[filaIniData + cc, coluIniData + 3].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + cc, coluIniData + 4].Value = regSemVar.Meditotal / 100;
                        ws.Cells[filaIniData + cc, coluIniData + 4].Style.Numberformat.Format = "#,##0.00%";

                        ws.Cells[filaIniData + cc, coluIniData + 5].Value = regAcum1.Meditotal.Value;
                        ws.Cells[filaIniData + cc, coluIniData + 5].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + cc, coluIniData + 6].Value = regAcum2.Meditotal.Value;
                        ws.Cells[filaIniData + cc, coluIniData + 6].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + cc, coluIniData + 7].Value = regAcumVar.Meditotal / 100;
                        ws.Cells[filaIniData + cc, coluIniData + 7].Style.Numberformat.Format = "#,##0.00%";

                        cc++;
                    }
                    if (entro)
                        UtilExcel.BorderCeldas5_1(ws, filaIniX, coluIniData, filaIniData + cc - 1, coluIniData + 7);
                }

                resumenFila = filaIniData + cc;
                resumenColu = coluIniData;

                #region resumen

                for (var i = 0; i < 4; i++)
                {
                    if (i == 0)
                        ws.Cells[resumenFila, resumenColu].Value = "Demanda de Energía Eléctrica";
                    if (i >= 0 && i <= 2)
                        ws.Cells[resumenFila + i, resumenColu + 1].Value = listaArea[i].AreaOperativa;
                    if (i == 3)
                        ws.Cells[resumenFila + i, resumenColu].Value = "Total Demanda de energía del Gran Usuario en el SEIN";

                    var listaDataXArea = listaReporteXArea.Where(x => x.AreaOperativa == listaArea[i].AreaOperativa).ToList();
                    var regSem1 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                    var regSem2 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                    var regSemVar = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
                    var regAcum1 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                    var regAcum2 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                    var regAcumVar = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                    ws.Cells[resumenFila + i, resumenColu + 2].Value = regSem1.Meditotal.Value;
                    ws.Cells[resumenFila + i, resumenColu + 2].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[resumenFila + i, resumenColu + 3].Value = regSem2.Meditotal.Value;
                    ws.Cells[resumenFila + i, resumenColu + 3].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[resumenFila + i, resumenColu + 4].Value = regSemVar.Meditotal / 100;
                    ws.Cells[resumenFila + i, resumenColu + 4].Style.Numberformat.Format = "#,##0.00%";

                    ws.Cells[resumenFila + i, resumenColu + 5].Value = regAcum1.Meditotal.Value;
                    ws.Cells[resumenFila + i, resumenColu + 5].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[resumenFila + i, resumenColu + 6].Value = regAcum2.Meditotal.Value;
                    ws.Cells[resumenFila + i, resumenColu + 6].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[resumenFila + i, resumenColu + 7].Value = regAcumVar.Meditotal / 100;
                    ws.Cells[resumenFila + i, resumenColu + 7].Style.Numberformat.Format = "#,##0.00%";
                }
                ultimaFila = resumenFila + 5;
                #endregion


                #region Formato Cuerpo
                int ultFEmpresas = resumenFila - 1;

                ws.Column(coluIniData).Width = 45;

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultFEmpresas, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, ultFEmpresas, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultFEmpresas, ultimaColu, "Centro");
                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultFEmpresas, coluIniData);
                UtilExcel.BorderCeldas5_1(ws, filaIniData, coluIniData, ultFEmpresas, coluIniData);
                UtilExcel.CeldasExcelEnNegrita(ws, filaIniData, coluIniData + 4, ultFEmpresas, coluIniData + 4);
                UtilExcel.CeldasExcelEnNegrita(ws, filaIniData, coluIniData + 7, ultFEmpresas, coluIniData + 7);

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultFEmpresas + 1, coluIniData, ultFEmpresas + 3, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultFEmpresas + 1, coluIniData, ultFEmpresas + 3, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, ultFEmpresas + 1, coluIniData, ultFEmpresas + 3, ultimaColu, "Centro");
                UtilExcel.CeldasExcelEnNegrita(ws, ultFEmpresas + 1, coluIniData, ultFEmpresas + 3, ultimaColu);
                UtilExcel.BorderCeldas2(ws, ultFEmpresas + 1, coluIniData, ultFEmpresas + 3, ultimaColu);

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultFEmpresas + 4, coluIniData, ultFEmpresas + 4, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultFEmpresas + 4, coluIniData + 1, ultFEmpresas + 4, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, ultFEmpresas + 4, coluIniData, ultFEmpresas + 4, ultimaColu, "Centro");
                UtilExcel.CeldasExcelEnNegrita(ws, ultFEmpresas + 4, coluIniData, ultFEmpresas + 4, ultimaColu);
                UtilExcel.BorderCeldas2(ws, ultFEmpresas + 4, coluIniData, ultFEmpresas + 4, ultimaColu);
                UtilExcel.CeldasExcelColorFondo(ws, ultFEmpresas + 4, coluIniData, ultFEmpresas + 4, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                UtilExcel.CeldasExcelColorTexto(ws, ultFEmpresas + 4, coluIniData, ultFEmpresas + 4, ultimaColu, "#FFFFFF");

                UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData - 2, coluIniData + 2, ultimaFila - 2, coluIniData + 4);
                UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData, coluIniData + 3, ultimaFila - 2, coluIniData + 3);
                UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData, coluIniData + 6, ultimaFila - 2, coluIniData + 6);

                UtilExcel.CeldasExcelAgrupar(ws, resumenFila, resumenColu, resumenFila + 2, resumenColu);
                UtilExcel.CeldasExcelAgrupar(ws, resumenFila + 3, resumenColu, resumenFila + 3, resumenColu + 1);
                #endregion

                #region Texto_Anotacion_3
                string texto = UtilAnexoAPR5.EscogerAnotacion("4.3", 1, tipoVistaReporte, tipoDoc);

                UtilExcel.FormatoNotaNegrita(ws, ultimaFila - 1, coluIniData, texto + NotasPieWebInformeSemanal.Cuadro1_Reporte_4p3);

                #endregion

                finalPosTabla = ultimaFila + 1;
            }
            #endregion

        }

        #endregion

        #endregion

        #region E. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN

        #region MetodosE

        /// <summary>
        /// CalcularEmbalsesDiarios
        /// </summary>
        /// <param name="listaPuntos"></param>
        /// <param name="listaData"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static List<MeReporptomedDTO> CalcularEmbalsesDiarios(List<MeReporptomedDTO> listaPuntos, List<IMeMedicion> listaData, DateTime fechaInicio, DateTime fechaFin)
        {
            List<MeReporptomedDTO> lstVolumenEmbalses = new List<MeReporptomedDTO>();

            foreach (var agrpPuntos in listaPuntos.GroupBy(x => x.Ptomedicodi))
            {
                MeReporptomedDTO first = agrpPuntos.First();
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    var lstPtomedicodi = agrpPuntos.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                    List<IMeMedicion> lstVolUtil = listaData.Where(x => lstPtomedicodi.Contains(x.Ptomedicodi) & x.Medifecha == fecha).ToList();
                    decimal valor = UtilSemanalPR5.ObtenerValorVolumenUtil(agrpPuntos.ToList(), lstVolUtil);

                    lstVolumenEmbalses.Add(new MeReporptomedDTO()
                    {
                        Ptomedicodi = agrpPuntos.Key,
                        Repptonomb = first.Repptonomb,
                        Medifecha = fecha,
                        Meditotal = valor,
                        Osicodi = first.Osicodi,
                        CodigoOsinergmin = first.CodigoOsinergmin,      //SIOSEIN-PRIE-2021
                        Codref = first.Codref,
                    });
                }
            }
            return lstVolumenEmbalses;
        }

        public static List<IMeMedicion> ReplicarDataUltimoDiaAlSiguienteMes(List<IMeMedicion> listaData, List<MeReporptomedDTO> lstReporte)
        {
            //puntos que tienen el check mes
            var listaPuntoAgrp = lstReporte.Select(x => new
            {
                Ptomedicodi = x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado,
                x.PtomediCalculado,
                x.Relptofactor,
                x.Repptoindcopiado
            }).ToList();

            List<int> listaPtomedicodiReplicarMes = listaPuntoAgrp.Where(x => x.Repptoindcopiado == ConstantesAppServicio.SI).Select(x => x.Ptomedicodi).ToList();

            //filtrar data
            var listaMed24 = listaData.Where(x => x.GetType().Equals(typeof(MeMedicion24DTO))).Select(x => (MeMedicion24DTO)x).OrderBy(x => x.Medifecha).ToList();
            var listaMed1 = listaData.Where(x => x.GetType().Equals(typeof(MeMedicion1DTO))).Select(x => (MeMedicion1DTO)x).OrderBy(x => x.Medifecha).ToList();

            //replica del dia 1 del mes a los otros dias sabados
            var listaM1Repl = new List<MeMedicion1DTO>();
            foreach (var ptomedicodi in listaPtomedicodiReplicarMes)
            {
                if (ptomedicodi == 40205)
                { }
                var listaM1xPto = listaMed1.Where(x => x.Ptomedicodi == ptomedicodi).OrderBy(x => x.Medifecha).ToList();
                foreach (var regM1 in listaM1xPto)
                {
                    if (regM1.Medifecha.Year == 2023 && regM1.Medifecha.Month == 3)
                    { }
                    DateTime fechaIniCalculo = new DateTime(regM1.Medifecha.Year, regM1.Medifecha.Month, 1).AddMonths(1).AddDays(-1);
                    DateTime fechaFinCalculo = new DateTime(regM1.Medifecha.Year, regM1.Medifecha.Month, 1).AddMonths(2).AddDays(-2);
                    DateTime fechaIniSemMes = EPDate.f_fechainiciosemana(fechaIniCalculo);
                    DateTime fechaFinSemMes = EPDate.f_fechainiciosemana(fechaFinCalculo);

                    //en BD es el día 1 del mes, pero para los cálculos significa que es el último día del mes.
                    regM1.Medifecha = fechaIniSemMes;

                    //replicar para los dias sabados del siguiente mes
                    for (var day = fechaIniSemMes.AddDays(7); day <= fechaFinSemMes; day = day.AddDays(7))
                    {
                        listaM1Repl.Add(new MeMedicion1DTO()
                        {
                            Ptomedicodi = regM1.Ptomedicodi,
                            Medifecha = day,
                            Tipoinfocodi = regM1.Tipoinfocodi,
                            H1 = regM1.H1,
                            Lectcodi = regM1.Lectcodi
                        });
                    }
                }
            }

            //replica del dia 1 del mes a los otros dias sabados
            var listaM24Repl = new List<MeMedicion24DTO>();
            foreach (var ptomedicodi in listaPtomedicodiReplicarMes)
            {
                var listaM24xPto = listaMed24.Where(x => x.Ptomedicodi == ptomedicodi).OrderBy(x => x.Medifecha).ToList();
                foreach (var regM24 in listaM24xPto)
                {
                    DateTime fechaIniCalculo = new DateTime(regM24.Medifecha.Year, regM24.Medifecha.Month, 1).AddMonths(1).AddDays(-1);
                    DateTime fechaFinCalculo = new DateTime(regM24.Medifecha.Year, regM24.Medifecha.Month, 1).AddMonths(2).AddDays(-2);
                    DateTime fechaIniSemMes = EPDate.f_fechainiciosemana(fechaIniCalculo);
                    DateTime fechaFinSemMes = EPDate.f_fechainiciosemana(fechaFinCalculo);

                    //en BD es el día 1 del mes, pero para los cálculos significa que es el último día del mes.
                    regM24.Medifecha = fechaIniSemMes;

                    //replicar para los dias sabados del mes
                    for (var day = fechaIniSemMes.AddDays(7); day <= fechaFinSemMes; day = day.AddDays(7))
                    {
                        listaM24Repl.Add(new MeMedicion24DTO()
                        {
                            Ptomedicodi = regM24.Ptomedicodi,
                            Medifecha = day,
                            Tipoinfocodi = regM24.Tipoinfocodi,
                            Meditotal = regM24.Meditotal,
                            Lectcodi = regM24.Lectcodi
                        });
                    }
                }
            }

            //salidas
            var lista = new List<IMeMedicion>();
            lista.AddRange(listaData);
            lista.AddRange(listaM1Repl);
            lista.AddRange(listaM24Repl);

            return lista;
        }

        public static List<IMeMedicion> ObtenerUltimoDiaDataHidrologia(DateTime fechaIni, DateTime fechaFin, List<IMeMedicion> listaDataXRango)
        {
            DateTime fechaIniSemMes = EPDate.f_fechainiciosemana(fechaIni);
            DateTime fechaFinSemMes = EPDate.f_fechainiciosemana(fechaFin);

            List<IMeMedicion> listaData = new List<IMeMedicion>();
            for (var day = fechaIniSemMes; day <= fechaFinSemMes; day = day.AddDays(7))
            {
                var listaSem = listaDataXRango.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList();
                listaData.AddRange(AgruparXUltimoDiaSemanaDataHidrologia(listaSem));
            }

            return listaData;
        }

        public static List<IMeMedicion> AgruparXUltimoDiaSemanaDataHidrologia(List<IMeMedicion> listaDataXRango)
        {
            var listaInput24 = listaDataXRango.Where(x => x.GetType().Equals(typeof(MeMedicion24DTO))).Select(x => (MeMedicion24DTO)x).OrderBy(x => x.Medifecha).ToList();
            var listaInput1 = listaDataXRango.Where(x => x.GetType().Equals(typeof(MeMedicion1DTO))).Select(x => (MeMedicion1DTO)x).OrderBy(x => x.Medifecha).ToList();

            var lista = new List<IMeMedicion>();
            lista.AddRange(listaInput24.GroupBy(x => x.Ptomedicodi).Select(x => x.Last()).ToList());
            lista.AddRange(listaInput1.GroupBy(x => x.Ptomedicodi).Select(x => x.Last()).ToList());

            return lista;
        }



        /// <summary>
        /// Funcion para generar el constructor
        /// </summary>
        /// <param name="tipoResultado"></param>
        /// <param name="medifecha"></param>
        /// <param name="ptomedicodi"></param>
        /// <param name="valor"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GetObjetoResultado(int tipoResultado, DateTime medifecha, int ptomedicodi, decimal? valor)
        {
            ResultadoTotalGeneracion obj = new ResultadoTotalGeneracion();
            obj.Medifecha = medifecha;
            obj.TipoResultadoFecha = tipoResultado;
            obj.Ptomedicodi = ptomedicodi;
            obj.Meditotal = valor;

            return obj;
        }

        /// <summary> EJECUTIVO SEMANAL - 
        /// Calcula el Valor Semanal de datos de M1
        /// </summary>
        /// <param name="anho"></param>
        /// <param name="nrosemana"></param>
        /// <param name="lista"></param>
        /// <returns></returns>
        public static decimal CalculaValorSemanalM1(int anho, int nrosemana, List<MeMedicion1DTO> lista)
        {
            decimal total = 0.0m;
            DateTime finicio = EPDate.f_fechainiciosemana(anho, nrosemana);
            DateTime ffin = finicio.AddDays(6);
            var listasemanal = lista.Where(x => x.Medifecha >= finicio && x.Medifecha <= ffin).ToList();

            foreach (var obj in listasemanal)
            {
                if (obj.H1 != null)
                {
                    total += (decimal)obj.H1;
                }

            }
            return total;
        }

        /// <summary>
        /// ObtenerValorVolumenUtil
        /// </summary>
        /// <param name="volUtil"></param>
        /// <returns></returns>
        public static decimal ObtenerValorVolumenUtil(IMeMedicion volUtil)
        {
            var valorH = 0M;
            if (volUtil.GetType().Equals(typeof(MeMedicion1DTO)))
            {
                valorH = ((MeMedicion1DTO)volUtil).H1 ?? 0;
            }

            if (volUtil.GetType().Equals(typeof(MeMedicion24DTO)))
            {
                for (int hx = 24; hx >= 1; hx--)
                {
                    var obj = ((MeMedicion24DTO)volUtil);
                    var valHx = (decimal?)obj.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(obj, null);
                    if (valHx.HasValue)
                    {
                        valorH = valHx.Value;
                        break;
                    }
                }
            }
            return valorH;
        }

        /// <summary>
        /// ObtenerValorVolumenUtil
        /// </summary>
        /// <param name="item"></param>
        /// <param name="lstVolUtilAct"></param>
        /// <returns></returns>
        public static decimal ObtenerValorVolumenUtil(List<MeReporptomedDTO> item, List<IMeMedicion> lstVolUtilAct)
        {
            var listaPuntoAgrp = item.Select(x => new { Ptomedicodi = x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado, x.PtomediCalculado, x.Relptofactor }).ToList();
            decimal valorAct = 0M;
            foreach (var vol in lstVolUtilAct)
            {
                var punto = listaPuntoAgrp.Find(x => x.Ptomedicodi == vol.Ptomedicodi);
                var valorUtil = ObtenerValorVolumenUtil(vol);
                valorAct += punto.PtomediCalculado == ConstantesAppServicio.NO ? valorUtil : valorUtil * punto.Relptofactor ?? 0;
            }

            return valorAct;
        }

        /// <summary>
        /// ObtenerValorCapacidadLagunaXPto
        /// </summary>
        /// <param name="item"></param>
        /// <param name="listaCapacidad"></param>
        /// <returns></returns>
        public static decimal? ObtenerValorCapacidadLagunaXPto(List<MeReporptomedDTO> item, List<EqPropequiDTO> listaCapacidad)
        {
            List<IMeMedicion> listaM1Capacidad = new List<IMeMedicion>();
            foreach (var reg in item)
            {
                var regPropequi = listaCapacidad.Find(x => x.Equicodi == reg.Equicodi);
                if (regPropequi != null)
                {
                    MeMedicion1DTO m1 = new MeMedicion1DTO();
                    m1.Ptomedicodi = reg.PtomediCalculado == ConstantesAppServicio.SI ? reg.PtomedicodiCalculado : reg.Ptomedicodi;
                    m1.H1 = regPropequi.ValorDecimal;
                    listaM1Capacidad.Add(m1);
                }
            }

            return ObtenerValorVolumenUtil(item, listaM1Capacidad);
        }

        /// <summary>
        /// ObtenerDataTablaVolumenUtilEmbalsesLagunas
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="lstRepPto"></param>
        /// <param name="listaDataXPto"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaVolumenUtilEmbalsesLagunas(FechasPR5 objFecha, List<MeReporptomedDTO> lstRepPto, List<ResultadoTotalGeneracion> listaDataXPto)
        {
            #region cabecera
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[0, 0];

            if (objFecha.EsReporteXMes)
            {
                matrizCabecera = new string[1, 4];
                matrizCabecera[0, 0] = "LAGUNA / EMBALSE";
                matrizCabecera[0, 1] = string.Format("VOLUMEN ÚTIL \n{0}", objFecha.AnioAct.Fecha_Final.ToString(ConstantesAppServicio.FormatoFecha));
                matrizCabecera[0, 2] = string.Format("VOLUMEN ÚTIL \n{0}", objFecha.Anio1Ant.Fecha_Final.ToString(ConstantesAppServicio.FormatoFecha));
                matrizCabecera[0, 3] = string.Format("Variación \n%");
            }
            else
            {
                matrizCabecera = new string[2, 11];
                matrizCabecera[0, 0] = "LAGUNA / EMBALSE";
                matrizCabecera[0, 1] = string.Format("{0}", objFecha.AnioAct.NumAnio);
                matrizCabecera[0, 6] = string.Format("{0}", objFecha.Anio1Ant.NumAnio);

                matrizCabecera[1, 1] = string.Format("VOLUMEN ÚTIL \n{0}", objFecha.AnioAct.Fecha_Inicial.ToString(ConstantesAppServicio.FormatoFecha));
                matrizCabecera[1, 2] = "% Llenado \nInicio Semana";
                matrizCabecera[1, 3] = string.Format("VOLUMEN ÚTIL \n{0}", objFecha.AnioAct.Fecha_Final.ToString(ConstantesAppServicio.FormatoFecha));
                matrizCabecera[1, 4] = "% Llenado \nFin Semana";
                matrizCabecera[1, 5] = "Capacidad de \nLaguna/Embalse \nHm3";

                matrizCabecera[1, 6] = string.Format("VOLUMEN ÚTIL \n{0}", objFecha.Anio1Ant.Fecha_Inicial.ToString(ConstantesAppServicio.FormatoFecha));
                matrizCabecera[1, 7] = "% Llenado \nInicio Semana";
                matrizCabecera[1, 8] = string.Format("VOLUMEN ÚTIL \n{0}", objFecha.Anio1Ant.Fecha_Final.ToString(ConstantesAppServicio.FormatoFecha));
                matrizCabecera[1, 9] = "% Llenado \nFin Semana";
                matrizCabecera[1, 10] = "Capacidad de \nLaguna/Embalse \nHm3";
            }

            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            foreach (var obj in lstRepPto)
            {
                RegistroReporte registro = new RegistroReporte();
                List<CeldaReporte> datos = new List<CeldaReporte>();

                var descrip = obj.Repptonomb;

                var regSemIni = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaInicial && x.Ptomedicodi == obj.Ptomedicodi);
                var regSemIniVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaInicial_Var && x.Ptomedicodi == obj.Ptomedicodi);
                var regSemFin = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaFinal && x.Ptomedicodi == obj.Ptomedicodi);
                var regSemFinVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaFinal_Var && x.Ptomedicodi == obj.Ptomedicodi);
                var regSemCap = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total && x.Ptomedicodi == obj.Ptomedicodi);

                var reg1AntIni = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaInicial && x.Ptomedicodi == obj.Ptomedicodi);
                var reg1AntIniVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaInicial_Var && x.Ptomedicodi == obj.Ptomedicodi);
                var reg1AntFin = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaFinal && x.Ptomedicodi == obj.Ptomedicodi);
                var reg1AntFinVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaFinal_Var && x.Ptomedicodi == obj.Ptomedicodi);
                var reg1AntCap = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Total && x.Ptomedicodi == obj.Ptomedicodi);

                var regRangActVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.Ptomedicodi == obj.Ptomedicodi);

                datos.Add(new CeldaReporte(descrip, false));

                if (objFecha.EsReporteXMes)
                {
                    datos.Add(new CeldaReporte(regSemFin.Meditotal, false, false));
                    datos.Add(new CeldaReporte(reg1AntFin.Meditotal, false, false));
                    datos.Add(new CeldaReporte(regRangActVar.Meditotal, true, false));
                }
                else
                {
                    datos.Add(new CeldaReporte(regSemIni.Meditotal, false, false));
                    datos.Add(new CeldaReporte(regSemIniVar.Meditotal, true, false));
                    datos.Add(new CeldaReporte(regSemFin.Meditotal, false, false));
                    datos.Add(new CeldaReporte(regSemFinVar.Meditotal, true, false));
                    datos.Add(new CeldaReporte(regSemCap.Meditotal, false, false));

                    datos.Add(new CeldaReporte(reg1AntIni.Meditotal, false, false));
                    datos.Add(new CeldaReporte(reg1AntIniVar.Meditotal, true, false));
                    datos.Add(new CeldaReporte(reg1AntFin.Meditotal, false, false));
                    datos.Add(new CeldaReporte(reg1AntFinVar.Meditotal, true, false));
                    datos.Add(new CeldaReporte(reg1AntCap.Meditotal, false, false));
                }

                registro.ListaCelda = datos;

                registros.Add(registro);
            }

            tabla.ListaRegistros = registros;

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                // Adicionamos los pie de pagina
                string texto = UtilAnexoAPR5.EscogerAnotacion("5.1", 1, objFecha.TipoVistaReporte, objFecha.TipoReporte);

                PieReporte pie = new PieReporte();
                List<string> lstPie = new List<string>();

                lstPie.Add(string.Format(texto + NotasPieWebInformeSemanal.Cuadro1_Reporte_5p1, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio));
                pie.ListaDescripcion = lstPie;

                //
                tabla.Leyenda = pie;
            }
            #endregion

            return tabla;
        }

        /// <summary>
        /// Genera graficos web del volumen de lagunas y embalses
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaData"></param>
        /// <param name="nomGrafico"></param>
        /// <param name="titulo"></param>
        /// <param name="descripcionHidro"></param>
        /// <param name="reporcodi"></param>
        /// <returns></returns>
        public static GraficoWeb GenerarGWebVolumenUtilLagunasEmbalses(FechasPR5 objFecha, List<MeMedicion1DTO> listaData
             , string nomGrafico, string titulo, string descripcionHidro, int reporcodi)
        {
            int tipoReporte = objFecha.TipoReporte;

            List<int> listaAnio = listaData.Select(x => x.Anio).Distinct().OrderBy(x => x).ToList();

            List<string> listaSemana = new List<string>();
            for (int numSemana = 1; numSemana <= 53; numSemana++)
            {
                listaSemana.Add(numSemana.ToString());
            }

            GraficoWeb graficoWeb = new GraficoWeb
            {
                IdGrafico = reporcodi,
                NameGrafico = nomGrafico,
                XAxisCategories = new List<string>(),
                SerieData = new DatosSerie[listaAnio.Count()],
                TitleText = titulo,
                YAxixTitle = new List<string> { "Hm3" },
                XAxisTitle = "Semanas",
                TooltipValueSuffix = " ",
                YaxixLabelsFormat = " ",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom"
            };

            string descripcion = "";

            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual      
            {
                graficoWeb.Subtitle = "";
            }
            else
            {
                if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                {
                    graficoWeb.Subtitle = string.Format(NotasPieWebInformeMensual.GraficoX_Reporte_4p2, descripcion, objFecha.Anio3Ant.NumAnio, objFecha.AnioAct.NumAnio);
                }
                else
                    graficoWeb.Subtitle = string.Format(NotasPieWebInformeSemanal.GraficoX_Reporte_5p2, descripcion, objFecha.Anio3Ant.NumAnio, objFecha.AnioAct.NumAnio);
            }

            //
            graficoWeb.XAxisCategories = listaSemana;

            var indexSerie = 0;

            foreach (var anio in listaAnio)
            {
                var dataXAnio = listaData.Where(x => x.Anio == anio).ToList();
                var maxSem = dataXAnio.Any() ? dataXAnio.Max(x => x.Semana) : 1;

                graficoWeb.SerieData[indexSerie] = new DatosSerie()
                {
                    Name = anio.ToString(),
                    Data = new decimal?[maxSem]
                };
                switch (indexSerie)
                {
                    case 0:
                        graficoWeb.SerieData[indexSerie].Color = "#E46C0A";
                        break;
                    case 1:
                        graficoWeb.SerieData[indexSerie].Color = "#0000FF";
                        break;
                    case 2:
                        graficoWeb.SerieData[indexSerie].Color = "#00B050";
                        break;
                    case 3:
                        graficoWeb.SerieData[indexSerie].Color = "#C00000";
                        break;
                }

                foreach (var semana in dataXAnio.OrderBy(x => x.Semana))
                {
                    graficoWeb.SerieData[indexSerie].Data[semana.Semana - 1] = semana.H1;
                }
                indexSerie++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// Genera el gráfico del excel del reporte Volumen Util Embalses y Lagunas
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoWeb"></param>
        /// <param name="filaIniData"></param>
        /// <param name="coluIniData"></param>
        public static void GenerarCharExcelGraficoVolUtilEmbalsesLagunas(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoWeb
            , int filaIniData, int coluIniData)
        {
            int filaIniAnios = filaIniData;
            int coluIniAnios = coluIniData;

            ws.Cells[filaIniAnios - 1, coluIniAnios].Value = graficoWeb.TitleText;
            ws.Cells[filaIniAnios - 1, coluIniAnios + 4].Value = graficoWeb.YAxixTitle.First();
            ws.Cells[filaIniAnios - 1, coluIniAnios + 5].Value = graficoWeb.XAxisTitle;

            //obtener el total de semanas por anio
            int numSemMax = 1;
            foreach (var reg in graficoWeb.SerieData)
            {
                int totalSemXAnio = reg.Data.Count();
                numSemMax = totalSemXAnio > numSemMax ? totalSemXAnio : numSemMax;
            }

            for (int numSem = 1; numSem <= numSemMax; numSem++)
            {
                ws.Cells[filaIniAnios + numSem, coluIniAnios].Value = numSem;
            }

            int colAnio = 0;

            foreach (var reg in graficoWeb.SerieData)
            {
                var maxSem = reg.Data.Count() > 0 ? reg.Data.Count() : 1;
                ws.Cells[filaIniAnios, coluIniAnios + 1 + colAnio].Value = reg.Name; //YYYY

                int filaSem = 0;
                foreach (var datoXSem in reg.Data)
                {
                    ws.Cells[filaIniAnios + 1 + filaSem, coluIniAnios + 1 + colAnio].Value = datoXSem;
                    filaSem++;
                }
                colAnio++;
            }
        }

        #endregion

        #region E.1. Volumen útil de los embalses y lagunas (Mm3)

        /// <summary>
        /// Genera el listado (tabla) para el reporte volumen util de embalses y lagunas
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string GenerarRHtmlVolumenUtilEmbalsesLagunas(FechasPR5 objFecha, TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            if (objFecha.EsReporteXMes) // reporte mensual y anual
            {
                strHtml.Append("<table class='pretty tabla-icono' style='width: 700px;'>");
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:600px;'>{0}</th>", dataCab[0, 0]);
                strHtml.AppendFormat("<th style='width:260px;'>{0}</th>", dataCab[0, 1].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:260px;'>{0}</th>", dataCab[0, 2].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width:300px;'>{0}</th>", dataCab[0, 3].Replace("\n", "<br>"));

                strHtml.Append("</tr>");
                strHtml.Append("</thead>");
            }
            else  // reportes semanales
            {
                strHtml.Append("<table class='pretty tabla-icono' style='width: 1200px;'>");
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width:600px;' rowspan=2>{0}</th>", dataCab[0, 0].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='' colspan=5>{0}</th>", dataCab[0, 1]);
                strHtml.AppendFormat("<th colspan=5 style='background: #1F497D;'>{0}</th>", dataCab[0, 6]);
                strHtml.Append("</tr>");

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[1, 1].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[1, 2].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[1, 3].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[1, 4].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style=''>{0}</th>", dataCab[1, 5].Replace("\n", "<br>"));

                strHtml.AppendFormat("<th style='background: #1F497D;'>{0}</th>", dataCab[1, 6].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='background: #1F497D;'>{0}</th>", dataCab[1, 7].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='background: #1F497D;'>{0}</th>", dataCab[1, 8].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='background: #1F497D;'>{0}</th>", dataCab[1, 9].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='background: #1F497D;'>{0}</th>", dataCab[1, 10].Replace("\n", "<br>"));

                strHtml.Append("</tr>");
                strHtml.Append("</thead>");
            }

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            #region cuerpo

            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                foreach (var celda in reg.ListaCelda)
                {
                    string strValor;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "text-align: left; padding-left: 5px;";
                    if (celda.EsNumero) strStyle += "text-align: right; padding-right: 5px;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";
                    if (reg.EsFilaResumen) strStyle += "background: #2980B9;color: #ffffff; height: 25px;";

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalHtml(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}'>{0}</td>", strValor, strStyle, strClass);
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            #endregion
            strHtml.Append("</table>");

            if (tablaData.ReptiCodiTabla != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual            
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);

            strHtml.Append("</div>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Generar el listado (tabla) excel para el reporte Volumen util Embalses y lagunas
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="ultimaFilaTabla"></param>
        public static void GenerarCharExcelListadoVolUtilEmbalsesLagunas(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, out int ultimaFilaTabla)
        {
            int tipoDoc = objFecha.TipoReporte;
            ultimaFilaTabla = 10;

            int filaIniData = (objFecha.EsReporteXMes) ? 9 : 10;
            int coluIniData = 4;

            int ultimaFila;
            int ultimaColu;

            #region Cabecera

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            if (objFecha.EsReporteXMes)
            {
                ws.Cells[filaIniData - 1, coluIniData].Value = dataCab[0, 0];
                ws.Cells[filaIniData - 1, coluIniData + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniData - 1, coluIniData + 2].Value = dataCab[0, 2];
                ws.Cells[filaIniData - 1, coluIniData + 3].Value = dataCab[0, 3];
            }
            else // reportes semanales
            {
                ws.Cells[filaIniData - 2, coluIniData + 0].Value = dataCab[0, 0];
                ws.Cells[filaIniData - 2, coluIniData + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniData - 2, coluIniData + 6].Value = dataCab[0, 6];

                ws.Cells[filaIniData - 1, coluIniData + 1].Value = dataCab[1, 1];
                ws.Cells[filaIniData - 1, coluIniData + 2].Value = dataCab[1, 2];
                ws.Cells[filaIniData - 1, coluIniData + 3].Value = dataCab[1, 3];
                ws.Cells[filaIniData - 1, coluIniData + 4].Value = dataCab[1, 4];
                ws.Cells[filaIniData - 1, coluIniData + 5].Value = dataCab[1, 5];

                ws.Cells[filaIniData - 1, coluIniData + 6].Value = dataCab[1, 6];
                ws.Cells[filaIniData - 1, coluIniData + 7].Value = dataCab[1, 7];
                ws.Cells[filaIniData - 1, coluIniData + 8].Value = dataCab[1, 8];
                ws.Cells[filaIniData - 1, coluIniData + 9].Value = dataCab[1, 9];
                ws.Cells[filaIniData - 1, coluIniData + 10].Value = dataCab[1, 10];
            }

            #endregion

            #region cuerpo

            if (registros.Any())
            {
                int filaProdTotal = 0;
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colX = 0;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;
                        }
                        colX++;
                    }

                    filaProdTotal = filaProdTotal == 0 && reg.EsFilaResumen ? filaX : filaProdTotal;

                    filaX++;
                }

                ultimaFila = filaIniData + filaX - 1;
                ultimaColu = coluIniData + (objFecha.EsReporteXMes ? 3 : 10);

                #region Formato Cabecera
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                #endregion

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual   
                {
                    UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, tablaData.Leyenda.ListaDescripcion[0]);
                }

                ultimaFilaTabla = ultimaFila + 1;
            }
            #endregion

        }

        #endregion

        #region E.2. Evolucion de volumenes de embalses y lagunas (Mm3)


        #endregion

        #region E.3. Promedio mensual de los caudales (m3/s)

        /// <summary>
        /// Genera la lista con los promedios caudales x rango de tiempo
        /// </summary>
        /// <param name="listaPuntos"></param>
        /// <param name="lstDataCaudalesAct"></param>
        /// <param name="lstDataCaudalesAnt"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static List<Tuple<int, decimal?, decimal?>> ObtenerDataPromedioXFechaCaudalesXPunto(List<MeReporptomedDTO> listaPuntos, List<IMeMedicion> lstDataCaudalesAct, List<IMeMedicion> lstDataCaudalesAnt, DateTime fechaInicio, DateTime fechaFin)
        {
            var lista = new List<Tuple<int, decimal?, decimal?>>();
            foreach (var item in listaPuntos.GroupBy(x => x.Ptomedicodi))
            {
                decimal? valorAct = 0M;
                decimal? valorAnt = 0M;
                foreach (var med in item)
                {
                    List<IMeMedicion> lstCaudalesAct = lstDataCaudalesAct.Where(x => x.Ptomedicodi == (med.PtomediCalculado == ConstantesAppServicio.NO ? med.Ptomedicodi : med.PtomedicodiCalculado)).ToList();
                    List<IMeMedicion> lstCaudalesAnt = lstDataCaudalesAnt.Where(x => x.Ptomedicodi == (med.PtomediCalculado == ConstantesAppServicio.NO ? med.Ptomedicodi : med.PtomedicodiCalculado)).ToList();

                    var valPromedioAct = ObtenerPromedioCaudales(lstCaudalesAct, med.Repptotabmed);
                    var valPromedioAnt = ObtenerPromedioCaudales(lstCaudalesAnt, med.Repptotabmed);

                    valorAct += (med.PtomediCalculado == ConstantesAppServicio.NO ? valPromedioAct : valPromedioAct * med.Relptofactor);
                    valorAnt += (med.PtomediCalculado == ConstantesAppServicio.NO ? valPromedioAnt : valPromedioAnt * med.Relptofactor);
                }
                lista.Add(new Tuple<int, decimal?, decimal?>(item.Key, valorAct, valorAnt));
            }
            return lista;
        }

        public static List<MeReporptomedDTO> CalcularCaudalesDiarios(List<MeReporptomedDTO> listaPuntos, List<IMeMedicion> listaData, DateTime fechaInicio, DateTime fechaFin)
        {
            List<MeReporptomedDTO> lstCaudalEjecDiarioXPtoreporte = new List<MeReporptomedDTO>();

            foreach (var agrpPuntos in listaPuntos.GroupBy(x => x.Ptomedicodi))
            {
                IMeMedicion dataCaudal;
                MeReporptomedDTO first = agrpPuntos.First();
                for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {

                    List<decimal> lstCaudalFinal = new List<decimal>();
                    foreach (var med in agrpPuntos)
                    {
                        dataCaudal = listaData.Find(x => x.Ptomedicodi == (med.PtomediCalculado == ConstantesAppServicio.NO ? med.Ptomedicodi : med.PtomedicodiCalculado) && x.Medifecha == fecha);
                        if (med.Funptocodi == ConstantesSiosein2.FunptocodiDiaAnterior)
                            dataCaudal = listaData.Find(x => x.Ptomedicodi == (med.PtomediCalculado == ConstantesAppServicio.NO ? med.Ptomedicodi : med.PtomedicodiCalculado) && x.Medifecha == fecha.AddDays(-1));

                        decimal? valorCaudal = UtilSemanalPR5.ObtenerPromedioCaudales(dataCaudal, med.Repptotabmed);
                        if (!valorCaudal.HasValue) continue;

                        lstCaudalFinal.Add(med.PtomediCalculado == ConstantesAppServicio.NO ? valorCaudal.Value : valorCaudal.Value * (med.Relptofactor ?? 1));
                    }

                    lstCaudalEjecDiarioXPtoreporte.Add(new MeReporptomedDTO()
                    {
                        Ptomedicodi = agrpPuntos.Key,
                        Repptonomb = first.Repptonomb,
                        Medifecha = fecha,
                        Meditotal = lstCaudalFinal.Any() ? lstCaudalFinal.Sum() : default(decimal?),
                        Osicodi = first.Osicodi,
                        Codref = first.Codref,
                    });
                }
            }
            return lstCaudalEjecDiarioXPtoreporte;
        }

        /// <summary>
        /// Genera el listado  (tabla) en excel con los promedios de los caudales para el reporte Promedio y evolucion Caudales
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="filaIniData"></param>
        /// <param name="ultimaFilaTabla"></param>
        public static void GenerarCharExcelListadoPromedioSemanalCaudales(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, int filaIniData, out int ultimaFilaTabla)
        {
            int tipoDoc = objFecha.TipoReporte;
            ultimaFilaTabla = 10;

            int coluIniData = 5;

            int ultimaFila;
            int ultimaColu;

            #region Cabecera

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            ws.Cells[filaIniData - 1, coluIniData + 0].Value = dataCab[0, 0];
            ws.Cells[filaIniData - 1, coluIniData + 1].Value = dataCab[0, 1];
            ws.Cells[filaIniData - 1, coluIniData + 2].Value = dataCab[0, 2];
            ws.Cells[filaIniData - 1, coluIniData + 3].Value = dataCab[0, 3];

            #endregion

            #region cuerpo

            if (registros.Any())
            {
                int filaProdTotal = 0;
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colX = 0;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;
                        }
                        colX++;
                    }

                    filaProdTotal = filaProdTotal == 0 && reg.EsFilaResumen ? filaX : filaProdTotal;

                    filaX++;
                }

                ultimaFila = filaIniData + filaX - 1;
                ultimaColu = coluIniData + 3;//(objFecha.EsReporteXMes ? 3 : 10);

                #region Formato Cabecera
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData + 1, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelWrapText(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                #endregion

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual   
                {
                    UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, tablaData.Leyenda.ListaDescripcion[0]);
                }

                ultimaFilaTabla = ultimaFila + 1;
            }
            #endregion

        }

        /// <summary>
        /// ObtenerDataTablaPromedioCaudalEmbalsesLagunas
        /// </summary>
        /// <param name="esNatural"></param>
        /// <param name="objFecha"></param>
        /// <param name="lstRepPto"></param>
        /// <param name="listaDataXPto"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaPromedioCaudalEmbalsesLagunas(bool esNatural, FechasPR5 objFecha, List<MeReporptomedDTO> lstRepPto, List<ResultadoTotalGeneracion> listaDataXPto)
        {
            #region cabecera
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[0, 0];

            matrizCabecera = new string[1, 4];
            matrizCabecera[0, 0] = "Caudal Promedio";
            if (objFecha.EsReporteXMes)
            {
                matrizCabecera[0, 1] = string.Format("{0}", objFecha.AnioAct.RangoAct_NumYAnio);
                matrizCabecera[0, 2] = string.Format("{0}", objFecha.Anio1Ant.RangoAct_NumYAnio);
            }
            else
            {
                matrizCabecera[0, 1] = string.Format("SEM {0}", objFecha.AnioAct.RangoAct_NumYAnio);
                matrizCabecera[0, 2] = string.Format("SEM {0}", objFecha.Anio1Ant.RangoAct_NumYAnio);
            }
            matrizCabecera[0, 3] = string.Format("Variación \n%");

            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            foreach (var obj in lstRepPto)
            {
                RegistroReporte registro = new RegistroReporte();
                List<CeldaReporte> datos = new List<CeldaReporte>();

                var descrip = obj.Repptonomb;

                var regSemFin = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaFinal && x.Ptomedicodi == obj.Ptomedicodi);
                var reg1AntFin = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaFinal && x.Ptomedicodi == obj.Ptomedicodi);
                var regRangActVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var && x.Ptomedicodi == obj.Ptomedicodi);

                datos.Add(new CeldaReporte(descrip, false));

                datos.Add(new CeldaReporte(regSemFin.Meditotal, false, false));
                datos.Add(new CeldaReporte(reg1AntFin.Meditotal, false, false));
                datos.Add(new CeldaReporte(regRangActVar.Meditotal, true, false));

                registro.CodigoFila = obj.Ptomedicodi;
                registro.ListaCelda = datos;

                registros.Add(registro);
            }

            tabla.ListaRegistros = registros;

            if (objFecha.TipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual
            {
                // Adicionamos los pie de pagina
                string texto = UtilAnexoAPR5.EscogerAnotacion("5.1", esNatural ? 1 : 2, objFecha.TipoVistaReporte, objFecha.TipoReporte);

                PieReporte pie = new PieReporte();
                List<string> lstPie = new List<string>();

                lstPie.Add(string.Format(texto + NotasPieWebInformeSemanal.Cuadro1_Reporte_5p3, objFecha.AnioAct.RangoAct_Num, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio));
                pie.ListaDescripcion = lstPie;

                //
                tabla.Leyenda = pie;
            }
            #endregion

            return tabla;
        }

        /// <summary>
        /// Genera el listado con los caudales para el reporte promedio caudales
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string GenerarRHtmlPromedioMensualCaudalesSemanal(FechasPR5 objFecha, TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' style='width: 1000px;'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:700px;'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[0, 1].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[0, 2].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[0, 3].Replace("\n", "<br>"));

            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            #region cuerpo

            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                foreach (var celda in reg.ListaCelda)
                {
                    string strValor;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "text-align: left; padding-left: 5px;";
                    if (celda.EsNumero) strStyle += "text-align: right; padding-right: 5px;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";
                    if (reg.EsFilaResumen) strStyle += "background: #2980B9;color: #ffffff; height: 25px;";

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalHtml(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}'>{0}</td>", strValor, strStyle, strClass);
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            #endregion
            strHtml.Append("</table>");

            if (tablaData.ReptiCodiTabla != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos los reportes, menos el anual            
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);

            strHtml.Append("</div>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Devuelve, si encuentra,  el valor solicitado, si no devuelve nulo
        /// </summary>
        /// <param name="lstValor"></param>
        /// <param name="itemX"></param>
        /// <returns></returns>
        public static decimal? ObtenerTotalValor(List<Tuple<int, decimal?, decimal?>> lstValor, int itemX)
        {
            decimal? total = 0;
            bool hayValor = false;
            foreach (var reg in lstValor)
            {
                decimal? valor = null;

                if (itemX == 2) valor = reg.Item2;
                if (itemX == 3) valor = reg.Item3;
                if (valor != null)
                {
                    total = total + valor;
                    hayValor = true;
                }
            }
            if (total == 0 && hayValor == false) total = null;

            return total;
        }

        /// <summary>
        /// Permite obtener el valor del caudal 
        /// </summary>
        /// <param name="dataCaudal"></param>
        /// <param name="repptotabmed"></param>
        /// <returns></returns>
        public static decimal? ObtenerPromedioCaudales(IMeMedicion dataCaudal, int repptotabmed)
        {
            decimal? valPromedio = null;
            if (dataCaudal == null) return valPromedio;

            if (repptotabmed == 24)//MeMedicion24
            {
                var lstValHx = new List<decimal>();
                var obtMe24 = (MeMedicion24DTO)dataCaudal;

                decimal? valHx;
                for (int hx = 1; hx <= 24; hx++)
                {
                    valHx = (decimal?)obtMe24.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(obtMe24, null);
                    if (!valHx.HasValue) continue;
                    lstValHx.Add(valHx.Value);
                }
                valPromedio = lstValHx.Any() ? lstValHx.Average() : default(decimal?);
            }

            if (repptotabmed == 1)//MeMedicion1
            {
                valPromedio = ((MeMedicion1DTO)dataCaudal).H1;
            }
            return valPromedio;
        }

        /// <summary>
        /// Permite obtener el valor del caudal 
        /// </summary>
        /// <param name="lstData"></param>
        /// <param name="repptotabmed"></param>
        /// <returns></returns>
        public static decimal? ObtenerPromedioCaudales(IEnumerable<IMeMedicion> lstData, int repptotabmed)
        {
            decimal? valPromedio = null;
            if (!lstData.Any()) return valPromedio;

            if (repptotabmed == 24)//MeMedicion24
            {
                var lstValHx = new List<decimal>();
                foreach (var data in lstData)
                {
                    for (int hx = 1; hx <= 24; hx++)
                    {
                        var obtMe24 = ((MeMedicion24DTO)data);
                        var valHx = (decimal?)obtMe24.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(obtMe24, null);
                        if (valHx.HasValue) lstValHx.Add(valHx.Value);
                    }
                }
                if (lstValHx.Any()) valPromedio = lstValHx.Average();
            }

            if (repptotabmed == 1)//MeMedicion1
            {
                var listaMeditotal = lstData.Select(x => ((MeMedicion1DTO)x).H1);
                var listVal = listaMeditotal.Where(x => x.HasValue).Select(x => x.Value);
                if (listVal.Any()) valPromedio = listVal.Average();

            }
            return valPromedio;
        }

        #endregion

        #region E.4. Evolución de los caudales

        /// <summary>
        /// Generar Grafico de lso caudales naturales para el reporte promedio caudales
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaData"></param>
        /// <param name="nomGrafico"></param>
        /// <param name="titulo"></param>
        /// <param name="descripcionHidro"></param>
        /// <param name="reporcodi"></param>
        /// <returns></returns>
        public static GraficoWeb GenerarGWebPromedioSemanalCaudales(FechasPR5 objFecha, List<MeMedicion1DTO> listaData
             , string nomGrafico, string titulo, string descripcionHidro, int reporcodi)
        {
            int tipoReporte = objFecha.TipoReporte;

            List<int> listaAnio = listaData.Select(x => x.Anio).Distinct().OrderBy(x => x).ToList();

            List<string> listaSemana = new List<string>();
            for (int numSemana = 1; numSemana <= 53; numSemana++)
            {
                listaSemana.Add(numSemana.ToString());
            }

            GraficoWeb graficoWeb = new GraficoWeb
            {
                IdGrafico = reporcodi,
                NameGrafico = nomGrafico,
                XAxisCategories = new List<string>(),
                SerieData = new DatosSerie[listaAnio.Count()],
                TitleText = titulo,
                YAxixTitle = new List<string> { "Caudal m3/s" },
                XAxisTitle = "Semanas",
                TooltipValueSuffix = " m3/s",
                YaxixLabelsFormat = " ",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom"
            };

            string descripcion = "";

            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual      
            {
                graficoWeb.Subtitle = "";
            }
            else
            {
                if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                {
                    graficoWeb.Subtitle = string.Format(NotasPieWebInformeMensual.GraficoX_Reporte_4p2, descripcion, objFecha.Anio3Ant.NumAnio, objFecha.AnioAct.NumAnio);
                }
                else
                    graficoWeb.Subtitle = string.Format(NotasPieWebInformeSemanal.GraficoX_Reporte_5p2, descripcion, objFecha.Anio3Ant.NumAnio, objFecha.AnioAct.NumAnio);
            }

            //
            graficoWeb.XAxisCategories = listaSemana;

            var indexSerie = 0;

            foreach (var anio in listaAnio)
            {
                var dataXAnio = listaData.Where(x => x.Anio == anio).ToList();
                var maxSem = dataXAnio.Any() ? dataXAnio.Max(x => x.Semana) : 1;

                graficoWeb.SerieData[indexSerie] = new DatosSerie()
                {
                    Name = anio.ToString(),
                    Data = new decimal?[maxSem]
                };
                switch (indexSerie)
                {
                    case 0:
                        graficoWeb.SerieData[indexSerie].Color = "#E46C0A";
                        break;
                    case 1:
                        graficoWeb.SerieData[indexSerie].Color = "#0000FF";
                        break;
                    case 2:
                        graficoWeb.SerieData[indexSerie].Color = "#00B050";
                        break;
                    case 3:
                        graficoWeb.SerieData[indexSerie].Color = "#C00000";
                        break;
                }

                foreach (var semana in dataXAnio.OrderBy(x => x.Semana))
                {
                    graficoWeb.SerieData[indexSerie].Data[semana.Semana - 1] = semana.H1;
                }
                indexSerie++;
            }

            return graficoWeb;
        }

        #endregion

        #endregion

        #region F. COSTO DE OPERACIÓN EJECUTADO ACUMULADO SEMANAL DEL SEIN(Millones de S/.)

        /// <summary>
        /// GraficoEvolucionCostosEjecAcum
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="listaCostosOper"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoEvolucionCostosEjecAcum(FechasPR5 objFecha, int mrepcodi, List<ResultadoTotalGeneracion> listaCostosOper)
        {
            GraficoWeb grafico = new GraficoWeb();

            grafico.SeriesData = new decimal?[3][];
            List<string> listaSemanas = new List<string>();

            DateTime fIniAnioActual = objFecha.AnioAct.RangoAct_FechaIni.AddDays(-11 * 7);
            for (int contador = 1; contador <= 12; contador++)
            {
                Tuple<int, int> anioSem1 = EPDate.f_numerosemana_y_anho(fIniAnioActual);
                Tuple<int, int> anioSem2 = EPDate.f_numerosemana_y_anho(fIniAnioActual.AddDays(6));

                string semana = anioSem1.Item1.ToString();
                if (mrepcodi == ConstantesEjecutivoSemanalPR5.IndexEvolCostosOperacionEjecutados || mrepcodi == ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm)
                    semana = string.Format("{0}({1})", anioSem1.Item1, anioSem2.Item1);

                listaSemanas.Add(semana);

                fIniAnioActual = fIniAnioActual.AddDays(7);
            }

            grafico.TitleText = " Evolución de los Costos de Operación Semanal del SEIN";
            grafico.XAxisCategories = listaSemanas;
            grafico.XAxisTitle = "Semanas";

            grafico.Series = new List<RegistroSerie>();
            grafico.Series.Add(new RegistroSerie());
            grafico.Series.Add(new RegistroSerie());
            grafico.Series.Add(new RegistroSerie());
            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_7p1, objFecha.Anio2Ant.NumAnio, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio);

            for (var i = 0; i < 3; i++)
            {
                switch (i) //0: anioactual, 1= hace 1 anio, 2=hace 2 anios
                {
                    case 0:
                        grafico.Series[i].Name = objFecha.AnioAct.NumAnio.ToString();
                        grafico.Series[i].Type = "column";
                        grafico.Series[i].Color = "#376092";
                        grafico.Series[i].YAxis = 0;
                        grafico.Series[i].YAxisTitle = "Millones de S/.";
                        break;
                    case 1:
                        grafico.Series[i].Name = objFecha.Anio1Ant.NumAnio.ToString();
                        grafico.Series[i].Type = "spline";
                        grafico.Series[i].Color = "#000000";
                        grafico.Series[i].YAxis = 0;
                        grafico.Series[i].YAxisTitle = "Millones de S/.";
                        break;
                    case 2:
                        grafico.Series[i].Name = objFecha.Anio2Ant.NumAnio.ToString();
                        grafico.Series[i].Type = "spline";
                        grafico.Series[i].Color = "#DC143C";
                        grafico.Series[i].YAxis = 0;
                        grafico.Series[i].YAxisTitle = "Millones de S/.";
                        break;
                }
            }

            grafico.SeriesData[0] = new decimal?[listaSemanas.Count];
            grafico.SeriesData[1] = new decimal?[listaSemanas.Count];
            grafico.SeriesData[2] = new decimal?[listaSemanas.Count];

            int nSem = 0;
            fIniAnioActual = objFecha.AnioAct.RangoAct_FechaIni.AddDays(-11 * 7);
            for (int contador = 1; contador <= 12; contador++)
            {
                var listaXSem = listaCostosOper.Where(x => x.Medifecha == fIniAnioActual).ToList();

                var anioActRegECOE = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                var anio1AntRegECOE = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                var anio2AntRegECOE = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);

                //Costo Operacion Año Actual
                grafico.SeriesData[0][nSem] = anioActRegECOE != null ? anioActRegECOE.Meditotal : null;

                //Costo Operacion Hace un año
                grafico.SeriesData[1][nSem] = anio1AntRegECOE != null ? anio1AntRegECOE.Meditotal : null;

                //Costo Operacion Hace dos año
                grafico.SeriesData[2][nSem] = anio2AntRegECOE != null ? anio2AntRegECOE.Meditotal : null;

                fIniAnioActual = fIniAnioActual.AddDays(7);
                nSem++;
            }

            return grafico;
        }

        /// <summary>
        /// ObtenerDataTablaEvolucionCOE
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaCostosOper"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaEvolucionCOE(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaCostosOper)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[1, 6];

            //Cabecera
            matrizCabecera[0, 0] = "Semana Operativa";
            matrizCabecera[0, 1] = objFecha.AnioAct.NumAnio.ToString();
            matrizCabecera[0, 2] = objFecha.Anio1Ant.NumAnio.ToString();
            matrizCabecera[0, 3] = objFecha.Anio2Ant.NumAnio.ToString();

            matrizCabecera[0, 4] = string.Format("Var(%) \n {0}/{1}", objFecha.AnioAct.NumAnio, objFecha.Anio1Ant.NumAnio);
            matrizCabecera[0, 5] = string.Format("Var(%) \n {0}/{1}", objFecha.Anio1Ant.NumAnio, objFecha.Anio2Ant.NumAnio);

            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            DateTime fIniAnioActual = objFecha.AnioAct.SemAct_FechaIni.AddDays(-11 * 7);
            for (int contador = 1; contador <= 12; contador++)
            {
                Tuple<int, int> anioSem = EPDate.f_numerosemana_y_anho(fIniAnioActual);

                var listaXSem = listaCostosOper.Where(x => x.Medifecha == fIniAnioActual).ToList();

                string semana = "Sem " + anioSem.Item1.ToString("00");
                ResultadoTotalGeneracion regSemanalAnioActual = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regSemanalHaceUnAnio = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regSemanalHacwDosAnios = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);

                ResultadoTotalGeneracion regTotalVarAnio0 = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);
                ResultadoTotalGeneracion regTotalVarAnio1 = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Total_Var);

                RegistroReporte registro = new RegistroReporte();
                List<CeldaReporte> datos = new List<CeldaReporte>();

                datos.Add(new CeldaReporte(semana, false, true, false));
                datos.Add(new CeldaReporte(regSemanalAnioActual != null ? regSemanalAnioActual.Meditotal : null, false, false));
                datos.Add(new CeldaReporte(regSemanalHaceUnAnio != null ? regSemanalHaceUnAnio.Meditotal : null, false, false));
                datos.Add(new CeldaReporte(regSemanalHacwDosAnios != null ? regSemanalHacwDosAnios.Meditotal : null, false, false));

                datos.Add(new CeldaReporte(regTotalVarAnio0 != null ? regTotalVarAnio0.Meditotal : null, true, false));
                datos.Add(new CeldaReporte(regTotalVarAnio1 != null ? regTotalVarAnio1.Meditotal : null, true, false));

                registro.ListaCelda = datos;
                registros.Add(registro);

                fIniAnioActual = fIniAnioActual.AddDays(7);
            }

            tabla.ListaRegistros = registros;

            // Adicionamos los pie de pagina
            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();

            string piePagina = string.Format(NotasPieWebInformeSemanal.Cuadro1_Reporte_7p1, objFecha.Anio2Ant.NumAnio, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio);
            lstPie.Add(piePagina);
            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;
            #endregion

            return tabla;
        }

        /// <summary>
        /// ObtenerDataTablaEvolucionCOEjecutivo
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaCostosOper"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaEvolucionCOEjecutivo(FechasPR5 objFecha, List<ResultadoTotalGeneracion> listaCostosOper)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[1, 7];

            //Cabecera
            matrizCabecera[0, 0] = "Evaluación semanal";
            matrizCabecera[0, 1] = "Semana Operativa";
            matrizCabecera[0, 2] = objFecha.AnioAct.NumAnio.ToString();
            matrizCabecera[0, 3] = objFecha.Anio1Ant.NumAnio.ToString();
            matrizCabecera[0, 4] = objFecha.Anio2Ant.NumAnio.ToString();

            matrizCabecera[0, 5] = string.Format("Var(%) \n {0}/{1}", objFecha.AnioAct.NumAnio, objFecha.Anio1Ant.NumAnio);
            matrizCabecera[0, 6] = string.Format("Var(%) \n {0}/{1}", objFecha.Anio1Ant.NumAnio, objFecha.Anio2Ant.NumAnio);

            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            DateTime fIniAnioActual = objFecha.AnioAct.RangoAct_FechaIni.AddDays(-11 * 7);
            for (int contador = 1; contador <= 12; contador++)
            {
                Tuple<int, int> anioSem1 = EPDate.f_numerosemana_y_anho(fIniAnioActual);
                Tuple<int, int> anioSem2 = EPDate.f_numerosemana_y_anho(fIniAnioActual.AddDays(6));

                var listaXSem = listaCostosOper.Where(x => x.Medifecha == fIniAnioActual).ToList();

                string dias = string.Format("Jueves {0} - Miércoles {1}", fIniAnioActual.ToString(ConstantesAppServicio.FormatoFechaEjecutivo), fIniAnioActual.AddDays(6).ToString(ConstantesAppServicio.FormatoFechaEjecutivo));
                string semana = string.Format("Sem {0}({1})", anioSem1.Item1.ToString("00"), anioSem2.Item1.ToString("00"));
                ResultadoTotalGeneracion regSemanalAnioActual = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regSemanalHaceUnAnio = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regSemanalHacwDosAnios = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);

                ResultadoTotalGeneracion regTotalVarAnio0 = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);
                ResultadoTotalGeneracion regTotalVarAnio1 = listaXSem.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Total_Var);

                RegistroReporte registro = new RegistroReporte();
                List<CeldaReporte> datos = new List<CeldaReporte>();

                datos.Add(new CeldaReporte(dias, false, true, false));
                datos.Add(new CeldaReporte(semana, false, true, false));
                datos.Add(new CeldaReporte(regSemanalAnioActual != null ? regSemanalAnioActual.Meditotal : null, false, false));
                datos.Add(new CeldaReporte(regSemanalHaceUnAnio != null ? regSemanalHaceUnAnio.Meditotal : null, false, false));
                datos.Add(new CeldaReporte(regSemanalHacwDosAnios != null ? regSemanalHacwDosAnios.Meditotal : null, false, false));

                datos.Add(new CeldaReporte(regTotalVarAnio0 != null ? regTotalVarAnio0.Meditotal : null, true, false));
                datos.Add(new CeldaReporte(regTotalVarAnio1 != null ? regTotalVarAnio1.Meditotal : null, true, false));

                registro.ListaCelda = datos;
                registros.Add(registro);

                fIniAnioActual = fIniAnioActual.AddDays(7);
            }

            tabla.ListaRegistros = registros;

            // Adicionamos los pie de pagina
            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();

            string piePagina = string.Format(NotasPieWebInformeSemanal.Cuadro1_Reporte_7p1, objFecha.Anio2Ant.NumAnio, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio);
            lstPie.Add(piePagina);
            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;
            #endregion

            return tabla;
        }

        /// <summary>
        /// ListarReporteEvolucionCOEHTML
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ListarReporteEvolucionCOEHTML(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='table-layout: fixed;width: 750px;'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 1]);
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 2]);
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 3]);

            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 4].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 5].Replace("\n", "<br>"));
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                foreach (var celda in reg.ListaCelda)
                {
                    string strValor;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "text-align: center; padding-left: 5px;";
                    if (celda.EsNumero) strStyle += "text-align: center; padding-right: 5px;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";
                    if (reg.EsFilaResumen) strStyle += "background: #2980B9;color: #ffffff; height: 25px;";

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}'>{0}</td>", strValor, strStyle, strClass);
                }

                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            foreach (var descripcion in tablaData.Leyenda.ListaDescripcion)
            {
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", descripcion);
            }

            return strHtml.ToString();
        }

        /// <summary>
        /// ListarReporteEvolucionCOEjecutivoHTML
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ListarReporteEvolucionCOEjecutivoHTML(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='table-layout: fixed;width: 750px;'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th style='width:250px;'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 1]);
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 2]);
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 3]);
            strHtml.AppendFormat("<th style='width:150px;'>{0}</th>", dataCab[0, 4]);

            strHtml.AppendFormat("<th style='width:70px;'>{0}</th>", dataCab[0, 5].Replace("\n", "<br>"));
            strHtml.AppendFormat("<th style='width:70px;'>{0}</th>", dataCab[0, 6].Replace("\n", "<br>"));
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                foreach (var celda in reg.ListaCelda)
                {
                    string strValor;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "text-align: center; padding-left: 5px;";
                    if (celda.EsNumero) strStyle += "text-align: center; padding-right: 5px;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";
                    if (reg.EsFilaResumen) strStyle += "background: #2980B9;color: #ffffff; height: 25px;";

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}'>{0}</td>", strValor, strStyle, strClass);
                }

                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            foreach (var descripcion in tablaData.Leyenda.ListaDescripcion)
            {
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", descripcion);
            }

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera el listado (tabla) y grafico Excel para el reporte costos de operacion
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="grafico"></param>
        public static void GenerarCharExcelListadoCostoOperEjecutadoAcumulado(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, GraficoWeb grafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int filaIniData = 9;
            int coluIniData = 4;
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) coluIniData -= 1;

            int ultimaFila;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "19"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "15"; }

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            if (registros.Any())
            {
                #region cabecera
                //***************************      CABECERA DE LA TABLA         ***********************************//

                ws.Cells[filaIniData - 1, coluIniData + 0].Value = dataCab[0, 0];
                ws.Cells[filaIniData - 1, coluIniData + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniData - 1, coluIniData + 2].Value = dataCab[0, 2];
                ws.Cells[filaIniData - 1, coluIniData + 3].Value = dataCab[0, 3];
                ws.Cells[filaIniData - 1, coluIniData + 4].Value = dataCab[0, 4];
                ws.Cells[filaIniData - 1, coluIniData + 5].Value = dataCab[0, 5];
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal)
                    ws.Cells[filaIniData - 1, coluIniData + 6].Value = dataCab[0, 6];
                #endregion

                #region cuerpo
                //***************************      CUERPO DE LA TABLA         ***********************************//
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colX = 0;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;
                        }
                        colX++;
                    }

                    filaX++;
                }
                ultimaFila = filaIniData + filaX - 1;
                ultimaColu = coluIniData + 5;
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) ultimaColu += 1;

                #region Formato Cuerpo
                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                #endregion

                #endregion

                #region Texto_Anotacion_3
                string itemR = "";
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "7.1"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "5.1"; }

                string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 1, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + tablaData.Leyenda.ListaDescripcion[0]);

                string texto1 = UtilAnexoAPR5.EscogerAnotacion(itemR, 2, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, 50, 3, texto1 + grafico.Subtitle);

                #endregion
            }
            else
            {
                var miChar = ws.Drawings["graficoCostoOperacion"] as ExcelChart;
                miChar.SetSize(0, 0);
            }
        }

        /// <summary>
        /// ObtenerListaFinalM1
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="indexReporte"></param>
        /// <param name="listaData"></param>
        /// <param name="listaResul"></param>
        public static void ObtenerListaFinalM1(FechasPR5 objFecha, int indexReporte, List<MeMedicion1DTO> listaData, out List<ResultadoTotalGeneracion> listaResul)
        {
            listaResul = new List<ResultadoTotalGeneracion>();

            int anioAct = objFecha.AnioAct.NumAnio;
            int anio1Ant = objFecha.Anio1Ant.NumAnio;
            int anio2Ant = objFecha.Anio2Ant.NumAnio;

            DateTime fechaAnioAct_SemAct = objFecha.AnioAct.RangoAct_FechaIni.AddDays(-11 * 7);
            DateTime fechaAnio1Ant_SemAct = objFecha.Anio1Ant.RangoAct_FechaIni.AddDays(-11 * 7);
            DateTime fechaAnio2Ant_SemAct = objFecha.Anio2Ant.RangoAct_FechaIni.AddDays(-11 * 7);
            for (int contador = 1; contador <= 12; contador++)
            {
                var tuplaActual = EPDate.f_numerosemana_y_anho(fechaAnioAct_SemAct);
                int semAct = tuplaActual.Item1;
                if (tuplaActual.Item2 != anioAct) //verifica si la semana es válida para el año actual
                    semAct = 0;

                ResultadoTotalGeneracion regSemanalAnioActual = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regSemanalHaceUnAnio = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regSemanalHaceDosAnios = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regTotalVarAnio0 = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regTotalVarAnio1 = new ResultadoTotalGeneracion();

                if (ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesProm == indexReporte
                    || ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm == indexReporte
                      || ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesPorArea == indexReporte
                        || ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm == indexReporte)
                {
                    regSemanalAnioActual = semAct > 0 ? GetListaPromedioCMgXSemana(listaData.Where(x => x.Medifecha >= fechaAnioAct_SemAct && x.Medifecha <= fechaAnioAct_SemAct.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaAnioAct_SemAct) : null;
                    regSemanalHaceUnAnio = GetListaPromedioCMgXSemana(listaData.Where(x => x.Medifecha >= fechaAnio1Ant_SemAct && x.Medifecha <= fechaAnio1Ant_SemAct.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaAnioAct_SemAct);
                    regSemanalHaceDosAnios = GetListaPromedioCMgXSemana(listaData.Where(x => x.Medifecha >= fechaAnio2Ant_SemAct && x.Medifecha <= fechaAnio2Ant_SemAct.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaAnioAct_SemAct);
                }
                else
                {
                    regSemanalAnioActual = semAct > 0 ? GetCostoOperacionXSemanas(listaData.Where(x => x.Medifecha >= fechaAnioAct_SemAct && x.Medifecha <= fechaAnioAct_SemAct.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaAnioAct_SemAct) : null;
                    regSemanalHaceUnAnio = GetCostoOperacionXSemanas(listaData.Where(x => x.Medifecha >= fechaAnio1Ant_SemAct && x.Medifecha <= fechaAnio1Ant_SemAct.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaAnioAct_SemAct);
                    regSemanalHaceDosAnios = GetCostoOperacionXSemanas(listaData.Where(x => x.Medifecha >= fechaAnio2Ant_SemAct && x.Medifecha <= fechaAnio2Ant_SemAct.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaAnioAct_SemAct);
                }

                if (tuplaActual.Item1 == 53)
                {
                    regSemanalAnioActual = EPDate.TotalSemanasEnAnho(anioAct, 6) == 53 ? regSemanalAnioActual : null;
                    regSemanalHaceUnAnio = EPDate.TotalSemanasEnAnho(anio1Ant, 6) == 53 ? regSemanalHaceUnAnio : null;
                    regSemanalHaceDosAnios = EPDate.TotalSemanasEnAnho(anio2Ant, 6) == 53 ? regSemanalHaceDosAnios : null;
                }

                regTotalVarAnio0 = GetVariacionCostOpXSemana(regSemanalAnioActual, regSemanalHaceUnAnio, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaAnioAct_SemAct);
                regTotalVarAnio1 = GetVariacionCostOpXSemana(regSemanalHaceUnAnio, regSemanalHaceDosAnios, PR5ConstanteFecha.ValorAnio1Ant_Total_Var, fechaAnioAct_SemAct);

                listaResul.Add(regSemanalAnioActual);
                listaResul.Add(regSemanalHaceUnAnio);
                listaResul.Add(regSemanalHaceDosAnios);
                listaResul.Add(regTotalVarAnio0);
                listaResul.Add(regTotalVarAnio1);

                fechaAnioAct_SemAct = fechaAnioAct_SemAct.AddDays(7);
                fechaAnio1Ant_SemAct = fechaAnio1Ant_SemAct.AddDays(7);
                fechaAnio2Ant_SemAct = fechaAnio2Ant_SemAct.AddDays(7);
            }

            listaResul = listaResul.Where(x => x != null).ToList();
        }

        /// <summary>
        /// GetCostoOperacionXSemanas
        /// </summary>
        /// <param name="lstSemanalAnio"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GetCostoOperacionXSemanas(List<MeMedicion1DTO> lstSemanalAnio, int tipoResultadoFecha, DateTime fechaProceso)
        {
            ResultadoTotalGeneracion costoOE = new ResultadoTotalGeneracion();
            costoOE.Medifecha = fechaProceso;
            costoOE.TipoResultadoFecha = tipoResultadoFecha;

            decimal? coeAcumActual = lstSemanalAnio.Sum(x => x.H1);
            costoOE.Meditotal = coeAcumActual != 0 ? coeAcumActual / 1000000 : null;

            return costoOE;
        }

        /// <summary>
        /// GetVariacionCostOpXSemana
        /// </summary>
        /// <param name="regAct"></param>
        /// <param name="regAnt"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GetVariacionCostOpXSemana(ResultadoTotalGeneracion regAct, ResultadoTotalGeneracion regAnt, int tipoResultadoFecha, DateTime fechaProceso)
        {
            ResultadoTotalGeneracion costoOE = new ResultadoTotalGeneracion();
            costoOE.Medifecha = fechaProceso;
            costoOE.TipoResultadoFecha = tipoResultadoFecha;

            decimal? var1 = null;
            if (regAct != null && regAnt != null)
                var1 = regAnt.Meditotal != 0 && regAnt.Meditotal != null ? (regAct.Meditotal == null ? 0 : regAct.Meditotal / regAnt.Meditotal) - 1 : null;

            costoOE.Meditotal = var1 != null ? var1 * 100 : var1;

            return costoOE;
        }

        /// <summary>
        /// GetListaPromedioCMgXSemana
        /// </summary>
        /// <param name="lstSemanalAnio"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="fechaProceso"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GetListaPromedioCMgXSemana(List<MeMedicion1DTO> lstSemanalAnio, int tipoResultadoFecha, DateTime fechaProceso)
        {
            ResultadoTotalGeneracion regCosto = new ResultadoTotalGeneracion();
            regCosto.Medifecha = fechaProceso;
            regCosto.TipoResultadoFecha = tipoResultadoFecha;

            var listaCosMarx = lstSemanalAnio.Select(x => x.H1).Where(x => x != null).ToList();
            decimal? valCMGPromedio = listaCosMarx.Any() ? listaCosMarx.Average() : null;

            regCosto.Meditotal = valCMGPromedio;

            return regCosto;
        }

        #endregion

        #region G. COSTOS MARGINALES NODALES PROMEDIO DEL SEIN(US$/MWh)

        #region G.1. Evolución de los Costos Marginales Nodales Promedio semanal del SEIN (US$/MWh)

        /// <summary>
        /// Genera la tabla web para el reporte de costos marginales promedios 
        /// </summary>
        /// <param name="tablaData"></param>
        /// <param name="mrepcodi"></param>
        /// <returns></returns>
        public static string GenerarRHtmlEvolucionCMGbarra(TablaReporte tablaData, int mrepcodi)
        {
            if (ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm == mrepcodi)
                return ListarReporteEvolucionCOEjecutivoHTML(tablaData);

            return ListarReporteEvolucionCOEHTML(tablaData);
        }

        /// <summary>
        /// ObtenerDataTablaEvolucionCMg
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="listaCMg"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaEvolucionCMg(FechasPR5 objFecha, int mrepcodi, List<ResultadoTotalGeneracion> listaCMg)
        {
            TablaReporte tabla;
            if (ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm == mrepcodi)
                tabla = ObtenerDataTablaEvolucionCOEjecutivo(objFecha, listaCMg);
            else
                tabla = ObtenerDataTablaEvolucionCOE(objFecha, listaCMg);

            // Adicionamos los pie de pagina
            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();

            string piePagina = string.Format(NotasPieWebInformeSemanal.Cuadro1_Reporte_8p1, objFecha.Anio2Ant.NumAnio, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio);
            lstPie.Add(piePagina);
            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;

            return tabla;
        }

        /// <summary>
        /// Genera el grafico web para rpt costos marginales prom
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="listaCMg"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoWebEvolucionCostosMarginalesPromIS(FechasPR5 objFecha, int mrepcodi, List<ResultadoTotalGeneracion> listaCMg)
        {
            GraficoWeb grafico = GraficoEvolucionCostosEjecAcum(objFecha, mrepcodi, listaCMg);
            grafico.TitleText = "Evolución de los Costos Marginales Promedio Semanal del SEIN";
            grafico.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_8p1, objFecha.Anio2Ant.NumAnio, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio);

            for (var i = 0; i < 3; i++)
            {
                grafico.Series[i].YAxisTitle = "S/./MWh";
            }

            return grafico;
        }

        /// <summary>
        /// Genera elexcel completo para elreporte de costos marginales Barra StaRosa
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="grafico"></param>
        public static void GenerarCharExcelListadoCostoMarginalPromedioSem(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, GraficoWeb grafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int filaIniData = 9;
            int coluIniData = 4;
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) coluIniData -= 1;

            int ultimaFila;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "20"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "16"; }

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            var miChar = ws.Drawings["graficoCostoMarginal1"] as ExcelChart;

            if (registros.Any())
            {
                #region cabecera
                //***************************      CABECERA DE LA TABLA         ***********************************//

                ws.Cells[filaIniData - 1, coluIniData + 0].Value = dataCab[0, 0];
                ws.Cells[filaIniData - 1, coluIniData + 1].Value = dataCab[0, 1];
                ws.Cells[filaIniData - 1, coluIniData + 2].Value = dataCab[0, 2];
                ws.Cells[filaIniData - 1, coluIniData + 3].Value = dataCab[0, 3];
                ws.Cells[filaIniData - 1, coluIniData + 4].Value = dataCab[0, 4];
                ws.Cells[filaIniData - 1, coluIniData + 5].Value = dataCab[0, 5];
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal)
                    ws.Cells[filaIniData - 1, coluIniData + 6].Value = dataCab[0, 6];

                #endregion

                #region cuerpo
                //***************************      CUERPO DE LA TABLA         ***********************************//
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colX = 0;
                    foreach (var celda in reg.ListaCelda)
                    {
                        decimal? numValor = null;
                        string strFormat = string.Empty;

                        if (celda.EsNumero)
                        {
                            numValor = celda.Valor;
                            if (numValor != null)
                            {
                                numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                                ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                            }
                            strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                        }
                        else
                        {
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;
                        }
                        colX++;
                    }

                    filaX++;
                }
                ultimaFila = filaIniData + filaX - 1;
                ultimaColu = coluIniData + 5;
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) ultimaColu += 1;

                #region Formato Cuerpo
                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);
                #endregion

                #endregion

                #region Texto_Anotacion_3

                string itemR = "";
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "8.1"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "6.1"; }

                string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 1, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + tablaData.Leyenda.ListaDescripcion[0]);

                string texto1 = UtilAnexoAPR5.EscogerAnotacion(itemR, 2, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, 52, 3, texto1 + grafico.Subtitle);

                #endregion
            }
            else
            {
                miChar.SetSize(0, 0);
            }
        }

        #endregion

        #region G.2. Evolución  de los Costos Marginales Nodales Promedio semanal por área operativa (US$/MWh)

        /// <summary>
        /// Genera el listado excel con los costos marginales por areas operativas para las ultimas 12 semanas
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        public static void GenerarCharExcelListadoCostoMarginalPorAreaOp(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int filaIniSemOp = 8;
            int coluIniSemOp = 3;

            int filaIniData = filaIniSemOp + 3;
            int coluIniData = coluIniSemOp;

            int ultimaFila;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos("21", 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos("21", 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            #region cabecera

            //***************************      CABECERA DE LA TABLA         ***********************************//

            ws.Cells[filaIniSemOp, coluIniSemOp].Value = dataCab[0, 0];
            ws.Cells[filaIniSemOp, coluIniSemOp + 1].Value = dataCab[0, 1].Split(',')[0];

            int numBarrasNorte = Int32.Parse(dataCab[1, 1].Split(',')[1]);
            int numBarrasCentro = Int32.Parse(dataCab[1, 2].Split(',')[1]);
            int numBarrasSur = Int32.Parse(dataCab[1, 3].Split(',')[1]);
            ws.Cells[filaIniSemOp + 1, coluIniSemOp + 1].Value = dataCab[1, 1].Split(',')[0];
            ws.Cells[filaIniSemOp + 1, coluIniSemOp + 1 + numBarrasNorte].Value = dataCab[1, 2].Split(',')[0];
            ws.Cells[filaIniSemOp + 1, coluIniSemOp + 1 + numBarrasNorte + numBarrasCentro].Value = dataCab[1, 3].Split(',')[0];
            int col1 = 0;

            int numcolumns = dataCab.GetLength(1);
            for (int cont = 1; cont < numcolumns; cont++)
            {
                ws.Cells[filaIniSemOp + 2, coluIniSemOp + 1 + col1].Value = dataCab[2, cont];
                col1++;
            }
            ultimaColu = coluIniSemOp + 1 + col1 - 1;

            #region Formato Cabecera
            for (int i = coluIniSemOp + 1; i <= ultimaColu; i++)
            {
                ws.Column(i).Width = 13;
            }

            ws.Row(filaIniSemOp).Height = 23;
            ws.Row(filaIniSemOp + 1).Height = 23;
            ws.Row(filaIniSemOp + 2).Height = 35;


            UtilExcel.CeldasExcelAgrupar(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, coluIniSemOp);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniSemOp, coluIniSemOp + 1, filaIniSemOp, ultimaColu);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniSemOp + 1, coluIniSemOp + 1, filaIniSemOp + 1, coluIniSemOp + numBarrasNorte); //norte
            UtilExcel.CeldasExcelAgrupar(ws, filaIniSemOp + 1, coluIniSemOp + numBarrasNorte + 1, filaIniSemOp + 1, coluIniSemOp + numBarrasNorte + numBarrasCentro); //centro
            UtilExcel.CeldasExcelAgrupar(ws, filaIniSemOp + 1, coluIniSemOp + numBarrasNorte + numBarrasCentro + 1, filaIniSemOp + 1, coluIniSemOp + numBarrasNorte + numBarrasCentro + numBarrasSur); //centro

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniSemOp + 2, coluIniSemOp + 1, filaIniSemOp + 2, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, 7);

            UtilExcel.CeldasExcelEnNegrita(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, ultimaColu);

            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, ultimaColu, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, ultimaColu, "Centro");

            UtilExcel.CeldasExcelWrapText(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, ultimaColu);

            UtilExcel.CeldasExcelColorFondo(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
            UtilExcel.CeldasExcelColorTexto(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, ultimaColu, "#FFFFFF");

            UtilExcel.BorderCeldas2(ws, filaIniSemOp, coluIniSemOp, filaIniSemOp + 2, ultimaColu);
            #endregion

            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//

            int filaX = 0;
            foreach (var reg in registros)
            {
                int colX = 0;
                foreach (var celda in reg.ListaCelda)
                {
                    decimal? numValor = null;
                    string strFormat = string.Empty;

                    if (celda.EsNumero)
                    {
                        numValor = celda.Valor;
                        if (numValor != null)
                        {
                            numValor = celda.TieneTextoPorcentaje ? numValor / 100 : numValor;
                            ws.Cells[filaIniData + filaX, coluIniData + colX].Value = numValor;
                        }
                        strFormat = celda.TieneTextoPorcentaje ? ConstantesPR5ReportesServicio.FormatoNumero2DigitoPorcentaje : ConstantesPR5ReportesServicio.FormatoNumero2Digito;
                        ws.Cells[filaIniData + filaX, coluIniData + colX].Style.Numberformat.Format = strFormat;
                    }
                    else
                    {
                        ws.Cells[filaIniData + filaX, coluIniData + colX].Value = celda.Texto;
                    }
                    colX++;
                }

                filaX++;
            }

            ultimaFila = filaIniData + filaX - 1;

            #region Formato Cuerpo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
            UtilExcel.CeldasExcelEnNegrita(ws, filaIniData, coluIniData, ultimaFila, coluIniData);

            for (int i = filaIniData; i <= ultimaFila; i++)
            {
                UtilExcel.BorderCeldas5_1(ws, i, coluIniData, i, ultimaColu);
            }
            UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, coluIniData);
            UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData - 2, coluIniData + 1, ultimaFila, coluIniData + numBarrasNorte);//norte
            UtilExcel.BorderCeldasDobleSoloLateralDerecha(ws, filaIniData - 2, coluIniData + numBarrasNorte + 1, ultimaFila, coluIniData + numBarrasNorte + numBarrasCentro);//centro

            #endregion
            #endregion

            #region Texto_Anotacion_3

            string texto = UtilAnexoAPR5.EscogerAnotacion("8.2", 1, tipoVistaReporte, tipoDoc);

            UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + tablaData.Leyenda.ListaDescripcion[0]);

            #endregion
        }

        /// <summary>
        /// ObtenerDataTablaCostoMarginalPorAreaOp
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaBarras"></param>
        /// <param name="listaCMg"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaCostoMarginalPorAreaOp(FechasPR5 objFecha, List<IeeBarrazonaDTO> listaBarras, List<ResultadoTotalGeneracion> listaCMg)
        {
            List<IeeBarrazonaDTO> barrasNorte = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaNorte).ToList();
            List<IeeBarrazonaDTO> barrasCentro = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaCentro).ToList();
            List<IeeBarrazonaDTO> barrasSur = listaBarras.Where(x => x.Barrzarea == ConstantesPR5ReportesServicio.BarrzareaSur).ToList();

            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[3, 1 + listaBarras.Count()];

            //Cabecera
            matrizCabecera[0, 0] = "Semana Operativa";
            matrizCabecera[0, 1] = "PROMEDIO SEMANAL POR ÁREA OPERATIVA," + listaBarras.Count();

            matrizCabecera[1, 1] = "NORTE," + barrasNorte.Count();
            matrizCabecera[1, 2] = "CENTRO," + barrasCentro.Count();
            matrizCabecera[1, 3] = "SUR," + barrasSur.Count();

            int cont = 1;
            foreach (var regBarra in listaBarras)
            {
                matrizCabecera[2, cont] = regBarra.Barrnombre;
                cont++;
            }

            cabRepo.CabeceraData = matrizCabecera;

            tabla.Cabecera = cabRepo;

            #region cuerpo
            List<RegistroReporte> registros = new List<RegistroReporte>();

            int anioAct = objFecha.AnioAct.NumAnio;
            DateTime fechaAnioAct_SemAct = objFecha.AnioAct.RangoAct_FechaIni.AddDays(-11 * 7);
            for (int contador = 1; contador <= 12; contador++)
            {
                var tuplaActual = EPDate.f_numerosemana_y_anho(fechaAnioAct_SemAct);
                int semAct = tuplaActual.Item1;

                if (tuplaActual.Item2 != anioAct) //verifica si la semana es válida para el año actual
                    semAct = 0;

                if (semAct > 0)
                {
                    var listaXSem = listaCMg.Where(x => x.Medifecha == fechaAnioAct_SemAct).ToList();

                    RegistroReporte registro = new RegistroReporte();
                    List<CeldaReporte> datos = new List<CeldaReporte>();

                    string semana = "Sem " + tuplaActual.Item1.ToString("00");
                    datos.Add(new CeldaReporte(semana, false, true, false));

                    foreach (var regBarra in listaBarras)
                    {
                        ResultadoTotalGeneracion regSemanalAnioActual = listaXSem.Find(x => x.Barrcodi == regBarra.Barrcodi && x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                        datos.Add(new CeldaReporte(regSemanalAnioActual != null ? regSemanalAnioActual.Meditotal : null, false, false));
                    }

                    registro.ListaCelda = datos;
                    registros.Add(registro);
                }

                fechaAnioAct_SemAct = fechaAnioAct_SemAct.AddDays(7);
            }

            tabla.ListaRegistros = registros;

            // Adicionamos los pie de pagina
            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();

            string piePagina = string.Format(NotasPieWebInformeSemanal.Cuadro1_Reporte_8p2, objFecha.AnioAct.NumAnio);
            lstPie.Add(piePagina);
            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;
            #endregion

            return tabla;
        }

        /// <summary>
        /// Genera el listado web con el costo marginal por area operativa de las principales barras
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string GenerarRHtmlEvolucionCMGbarraPorArea(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            #region cabecera

            int numcolumns = dataCab.GetLength(1);
            int padding = 20;
            int anchoTotal = (100 + padding) + numcolumns * (50 + padding);

            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<div class='freeze_table' id='resultado' style='height: auto;'>");
            strHtml.AppendFormat("<table id='reporte' class='pretty tabla-icono' style='table-layout: fixed; width: {0}px;' >", anchoTotal);
            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='3' style='word-wrap: break-word; white-space: normal;min-width:80px'>{0}</th>", dataCab[0, 0]);
            strHtml.AppendFormat("<th colspan='{1}'>{0}</th>", dataCab[0, 1].Split(',')[0], dataCab[0, 1].Split(',')[1]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='{1}'>{0}</th>", dataCab[1, 1].Split(',')[0], dataCab[1, 1].Split(',')[1]);
            strHtml.AppendFormat("<th colspan='{1}'>{0}</th>", dataCab[1, 2].Split(',')[0], dataCab[1, 2].Split(',')[1]);
            strHtml.AppendFormat("<th colspan='{1}'>{0}</th>", dataCab[1, 3].Split(',')[0], dataCab[1, 3].Split(',')[1]);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int cont = 1; cont < numcolumns; cont++)
            {
                strHtml.AppendFormat("<th style='word-wrap: break-word; white-space: normal;min-width:90px; font-size: 10px'>{0}</th>", dataCab[2, cont]);
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");
            strHtml.Append("</div>");

            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//

            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                foreach (var celda in reg.ListaCelda)
                {
                    string strValor;
                    string strStyle = string.Empty;
                    string strClass = string.Empty;

                    if (celda.EsTexto) strStyle += "text-align: center; padding-left: 5px;";
                    if (celda.EsNumero) strStyle += "text-align: center; padding-right: 5px;";
                    if (celda.TieneTextoNegrita) strStyle += "font-weight:bold;";
                    if (reg.EsFilaResumen) strStyle += "background: #2980B9;color: #ffffff; height: 25px;";

                    if (celda.EsNumero)
                    {
                        strValor = celda.TieneTextoPorcentaje ? UtilAnexoAPR5.ImprimirVariacionHtml(celda.Valor, nfi) : UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(celda.Valor, nfi);
                    }
                    else
                    {
                        strValor = celda.Texto;
                    }

                    strHtml.AppendFormat("<td style='{1}' class='{2}'>{0}</td>", strValor, strStyle, strClass);
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            strHtml.Append("</table>");

            strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", tablaData.Leyenda.ListaDescripcion[0]);

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region H. FLUJOS DE INTERCONEXIÓN EN ÁREAS OPERATIVAS DEL SEIN (MW)

        /// <summary>
        /// GenerarGwebPotenciaMaxTransmitida
        /// </summary>
        /// <param name="tituloGrafico"></param>
        /// <param name="subtituloGrafico"></param>
        /// <param name="listaPunto"></param>
        /// <param name="listaDetalle48"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static GraficoWeb GenerarGwebPotenciaMaxTransmitida(string tituloGrafico, string subtituloGrafico, List<MeReporptomedDTO> listaPunto,
                    List<MeMedicion48DTO> listaDetalle48, DateTime fechaInicio, DateTime fechaFin)
        {
            List<DateTime> listaFechas = new List<DateTime>();
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                listaFechas.Add(fecha);
            }

            var lstDiasNom = listaFechas.Select(x => String.Format("{0:m}", x)).ToList();

            GraficoWeb graficoWeb = new GraficoWeb
            {
                Subtitle = subtituloGrafico,
                TitleText = tituloGrafico,
                XAxisCategories = lstDiasNom,
                YAxixTitle = new List<string> { "MW" },
                YaxixLabelsFormat = "{value}",
                TooltipValueSuffix = " MW",
                PlotOptionsDataLabels = false,
                SerieData = new DatosSerie[listaPunto.Count()]
            };

            var indexS = 0;
            foreach (var regPto in listaPunto)
            {
                graficoWeb.SerieData[indexS] = new DatosSerie { Name = regPto.Repptonomb, Data = new decimal?[listaFechas.Count], TooltipValueSuffix = "" };

                var indexD = 0;
                foreach (var fecha in listaFechas)
                {
                    decimal? objMaxDemPto = listaDetalle48.FirstOrDefault(x => x.Medifecha == fecha && x.Ptomedicodi == regPto.Ptomedicodi)?.Maximo;

                    graficoWeb.SerieData[indexS].Data[indexD] = objMaxDemPto;
                    indexD++;
                }

                indexS++;
            }

            return graficoWeb;
        }

        /// <summary>
        /// Genera los graficos del excel para el reporte Flujo de Interconexiones
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="area"></param>
        /// <param name="subtitulo"></param>
        /// <param name="nColumnas"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaIniTabla"></param>
        /// <param name="filaIniGrafico"></param>
        public static void GenerarCharExcelGraficosFlujoMaxInterconexiones(ExcelWorksheet ws, FechasPR5 objFecha, string area, string subtitulo, int nColumnas, int coluIni,
                                        int filaIniTabla, int filaIniGrafico)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int coluIniTabla = coluIni;

            string nombreChar = "graficoFlujo" + area;
            var miChart = ws.Drawings[nombreChar] as ExcelChart;

            miChart.SetPosition(filaIniGrafico, 0, 2, 0); //tam 20 grafico

            UtilAnexoAPR5.EliminarAllSeriesDelGrafico(miChart);

            var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
            var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio
            for (int i = 0; i < nColumnas; i++) //creamos series
            {
                miChart.Series.Add(ran1, ran2);
            }

            //ingresamos rangos a las series
            for (int serie = 0; serie < nColumnas; serie++) //iterar por serie
            {
                miChart.Series[serie].Header = (string)ws.Cells[filaIniTabla, coluIniTabla + serie + 1, filaIniTabla, coluIniTabla + serie + 1].Value; //nombre de punto
                miChart.Series[serie].Series = ExcelRange.GetAddress(filaIniTabla + 1, coluIniTabla + serie + 1, filaIniTabla + 7, coluIniTabla + serie + 1); //celdas numericas de la celda
                miChart.Series[serie].XSeries = ExcelRange.GetAddress(filaIniTabla + 1, 4 - 1, filaIniTabla + 7, 4 - 1); //fechas
            }

            #region Texto_Anotacion_3

            int nr2 = 0;
            if (area == "NORTE") { nr2 = 2; }
            if (area == "SUR") { nr2 = 3; }


            string itemR = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "10.1"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "7.1"; }

            string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, nr2, tipoVistaReporte, tipoDoc);
            UtilExcel.FormatoNotaNegrita(ws, filaIniGrafico + 22, 3, texto + subtitulo);

            #endregion

        }

        /// <summary>
        /// Genera el listado (tabla) excel para el reporte de flujo max de interconexiones
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="titulo"></param>
        /// <param name="piePagina"></param>
        /// <param name="filaIniTabla"></param>
        /// <param name="listaPunto"></param>
        /// <param name="listaMaxDemanda"></param>
        /// <param name="listaDetalle48"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaItem"></param>
        public static void GenerarCharExcelListadoFlujoMaxInterconexiones(ExcelWorksheet ws, FechasPR5 objFecha, string titulo, string piePagina, int filaIniTabla, List<MeReporptomedDTO> listaPunto,
                    List<MeMedicion48DTO> listaMaxDemanda, List<MeMedicion48DTO> listaDetalle48, DateTime fechaInicio, DateTime fechaFin, List<ItemMenuNumeral> listaItem)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniDia = filaIniTabla;
            int coluIniDia = 3;

            int filaIniData = filaIniDia + 2;
            int coluIniData = coluIniDia;

            int ultimaFila = 0;
            int ultimaColu = coluIniDia + listaPunto.Count() + 1;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "25"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "17"; }

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoVistaReporte, tipoDoc, listaItem); //subtitulo
            #endregion

            #region Cabecera
            ws.Cells[filaIniDia, coluIniDia].Value = titulo;

            int c1 = 0;
            ws.Cells[filaIniDia + 1, coluIniDia].Value = "FECHA Y HORA";
            foreach (var lstPuntos in listaPunto)
            {
                ws.Cells[filaIniDia + 1, coluIniDia + 1 + c1].Value = lstPuntos.Repptonomb;
                c1++;
            }
            ws.Cells[filaIniDia + 1, coluIniDia + 1 + c1].Value = "TOTAL \nCOINCIDENTE";

            #region Formato Cabecera

            ws.Row(filaIniDia).Height = 35;
            ws.Row(filaIniDia + 1).Height = 35;

            ws.Column(coluIniDia).Width = 25;
            for (int i = 0; i < listaPunto.Count() + 2; i++)
            {
                ws.Column(coluIniDia + 1 + i).Width = 25;
            }

            UtilExcel.SetFormatoCelda(ws, filaIniDia, coluIniDia, filaIniDia + 1, ultimaColu, "Centro", "Centro", "#FFFFFF", ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo, true, true);

            UtilExcel.CeldasExcelAgrupar(ws, filaIniDia, coluIniDia, filaIniDia, ultimaColu);

            UtilExcel.BorderCeldas2(ws, filaIniDia, coluIniDia, filaIniDia + 1, ultimaColu);

            #endregion

            #endregion

            #region Cuerpo

            int filaX = 0;
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var objMaxDem = listaMaxDemanda.Find(x => x.Medifecha == fecha);
                ws.Cells[filaIniData + filaX, coluIniData].Value = objMaxDem.TiempoMaximaDemanda;

                int colX1 = 0;
                foreach (var regPto in listaPunto)
                {
                    decimal? objMaxDemPto = listaDetalle48.FirstOrDefault(x => x.Medifecha == fecha && x.Ptomedicodi == regPto.Ptomedicodi)?.Maximo;

                    ws.Cells[filaIniData + filaX, coluIniData + 1 + colX1].Value = objMaxDemPto;
                    ws.Cells[filaIniData + filaX, coluIniData + 1 + colX1].Style.Numberformat.Format = "#,##0.00";
                    colX1++;
                }

                ws.Cells[filaIniData + filaX, coluIniData + 1 + colX1].Value = objMaxDem.Maximo;
                ws.Cells[filaIniData + filaX, coluIniData + 1 + colX1].Style.Numberformat.Format = "#,##0.00";

                filaX++;
            }

            ultimaFila = filaIniData + 7 - 1;

            UtilExcel.SetFormatoCelda(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro", "Centro", "#000000", "#FFFFFF", ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo, false);
            UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

            #endregion

            #region Formato Pie
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila + 1, coluIniData, ultimaFila + 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila + 1, coluIniData, ultimaFila + 1, ultimaColu);
            #endregion

            #region Texto_Anotacion_3

            string itemR = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "10.1"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "7.1"; }

            string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 1, tipoVistaReporte, tipoDoc);
            UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + piePagina);

            #endregion

        }

        /// <summary>
        /// Genera el listado web para el reporte de flujos maximos de interconexiones
        /// </summary>
        /// <param name="tituloTabla"></param>
        /// <param name="piePagina"></param>
        /// <param name="listaPunto"></param>
        /// <param name="listaMaxDemanda"></param>
        /// <param name="listaDetalle48"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static string GenerarRHtmlFlujoMaximoInterconexiones(string tituloTabla, string piePagina, List<MeReporptomedDTO> listaPunto,
                    List<MeMedicion48DTO> listaMaxDemanda, List<MeMedicion48DTO> listaDetalle48, DateTime fechaInicio, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            strHtml.Append("<table class='pretty tabla-icono' style='width: 100%;'>");

            #region cabecera

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th colspan='{0}'>{1}</th>", 1 + listaPunto.Count() + 1, tituloTabla);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>FECHA Y HORA</th>");
            foreach (var regPto in listaPunto)
            {
                strHtml.AppendFormat("<th>{0}</th>", regPto.Repptonomb);
            }
            strHtml.Append("<th>TOTAL </BR> COINCIDENTE</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region Cuerpo

            strHtml.Append("<tbody>");

            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var objMaxDem = listaMaxDemanda.Find(x => x.Medifecha == fecha);
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='text'> {0}</td>", objMaxDem.TiempoMaximaDemanda);
                foreach (var regPto in listaPunto)
                {
                    decimal? valMaxDemPto = listaDetalle48.FirstOrDefault(x => x.Medifecha == fecha && x.Ptomedicodi == regPto.Ptomedicodi)?.Maximo;
                    strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(valMaxDemPto, nfi));
                }
                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(objMaxDem.Maximo, nfi));

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");

            #endregion

            strHtml.Append("</table>");

            strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", piePagina);

            return strHtml.ToString();
        }

        /// <summary>
        /// Retorna el dia hora de maxima transmision encontrado en listMedicion48(pasado por parametro)
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="lstDataMedicion48"></param>
        /// <param name="listaPuntosX"></param>
        /// <param name="listaMaxDemanda"></param>
        /// <param name="listaDetalle48"></param>
        public static void ObtenerMaxTransDiario(DateTime fechaInicio, DateTime fechaFin, List<MeMedicion48DTO> lstDataMedicion48, List<MeReporptomedDTO> listaPuntosX,
                                out List<MeMedicion48DTO> listaMaxDemanda, out List<MeMedicion48DTO> listaDetalle48)
        {
            listaMaxDemanda = new List<MeMedicion48DTO>();
            listaDetalle48 = new List<MeMedicion48DTO>();

            //calculo
            for (DateTime fecha = fechaInicio; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                List<MeMedicion48DTO> lista48XDia = new List<MeMedicion48DTO>();

                var lstAgpPuntosX = listaPuntosX.GroupBy(x => x.Ptomedicodi);
                foreach (var lstPuntos in lstAgpPuntosX)
                {
                    MeMedicion48DTO obj48 = new MeMedicion48DTO()
                    {
                        Medifecha = fecha,
                        Ptomedicodi = lstPuntos.Key
                    };

                    var lstPtomedicodi = lstPuntos.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);

                    var data = lstDataMedicion48.Where(x => lstPtomedicodi.Contains(x.Ptomedicodi) && x.Medifecha == fecha).ToList();

                    for (var hx = 1; hx <= 48; hx++)
                    {
                        decimal? valHx = data.Sum(x => (decimal?)x.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(x, null));//Sumar las Hx de todos los puntos

                        obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).SetValue(obj48, Math.Abs(valHx.GetValueOrDefault(0)));
                    }

                    lista48XDia.Add(obj48);
                }

                //maxima demanda de los flujos
                MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoMaximaTodoDia, fecha, lista48XDia, null, null,
                                                out decimal maxVal, out int hResultado, out DateTime fechaHora);

                //resumen dia
                MeMedicion48DTO obj48Dia = new MeMedicion48DTO()
                {
                    Medifecha = fecha,
                    FechaMD = fechaHora,
                    Maximo = maxVal,
                    TiempoMaximaDemanda = string.Format("{0} - {1}h", fechaHora.ToString(ConstantesAppServicio.FormatoFecha), fechaHora.ToString(ConstantesAppServicio.FormatoHora)),
                };
                listaMaxDemanda.Add(obj48Dia);

                //maximo por punto
                foreach (var obj48 in lista48XDia)
                {
                    decimal valorH = ((decimal?)obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + hResultado).GetValue(obj48, null)).GetValueOrDefault(0);
                    //obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + hResultado).SetValue(obj48, valorH);
                    obj48.Maximo = valorH;
                }
                listaDetalle48.AddRange(lista48XDia);

            }

        }

        #endregion

        #region I. HORAS DE CONGESTIÓN EN LAS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)

        /// <summary>
        /// HorasCongestionAreaOpeHtml
        /// </summary>
        /// <param name="listaFinal"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public static string HorasCongestionAreaOpeHtml(List<PrCongestionDTO> listaFinal, DateTime fechaInicial, DateTime fechaFinal)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>AREA OPERATIVA</th>");
            strHtml.Append("<th>EQUIPOS DE TRANSMISION</th>");
            strHtml.Append("<th>DESCRIPCION</th>");
            strHtml.Append("<th>SEM " + COES.Base.Tools.Util.ObtenerNroSemanasxAnho(fechaInicial, FirstDayOfWeek.Saturday) + "<br>" + fechaFinal.Year + "</th>");
            strHtml.Append("<th>SEM " + COES.Base.Tools.Util.ObtenerNroSemanasxAnho(fechaInicial.AddYears(-1), FirstDayOfWeek.Saturday) + "<br>" + fechaFinal.AddYears(-1).Year + "</th>");
            strHtml.Append("<th>SEM " + COES.Base.Tools.Util.ObtenerNroSemanasxAnho(fechaInicial.AddYears(-2), FirstDayOfWeek.Saturday) + "<br>" + fechaFinal.AddYears(-2).Year + "</th>");
            strHtml.Append("<th>Var. <br>(" + fechaFinal.AddYears(-1).Year + "/" + fechaFinal.AddYears(-2).Year + ")</th>");
            strHtml.Append("<th>Var. <br>(" + fechaFinal.Year + "/" + fechaFinal.AddYears(-1).Year + ")</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var d in listaFinal)
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + (d.Areanomb != null ? d.Areanomb.Trim() : "NO DEFINIDO") + "</td>");
                strHtml.Append("<td>" + d.Equinomb.Trim() + "</td>");
                strHtml.Append("<td>" + d.Grulinnombre.Trim() + "</td>");

                var d_1 = listaFinal.Find(c => c.Grulincodi == d.Grulincodi && c.Orden == 0);
                if (d.Grulincodi == null) { d_1 = listaFinal.Find(x => x.Configcodi == d.Configcodi && x.Orden == 0); }
                double d1 = (d_1 != null ? d_1.Horatonumber : 0);
                strHtml.Append("<td>" + d1 + "</td>");

                var d_2 = listaFinal.Find(c => c.Grulincodi == d.Grulincodi && c.Orden == 1);
                if (d.Grulincodi == null) { d_2 = listaFinal.Find(x => x.Configcodi == d.Configcodi && x.Orden == 1); }
                double d2 = (d_2 != null ? d_2.Horatonumber : 0);
                strHtml.Append("<td>" + d2 + "</td>");

                var d_3 = listaFinal.Find(c => c.Grulincodi == d.Grulincodi && c.Orden == 2);
                if (d.Grulincodi == null) { d_3 = listaFinal.Find(x => x.Configcodi == d.Configcodi && x.Orden == 2); }
                double d3 = (d_3 != null ? d_3.Horatonumber : 0);
                strHtml.Append("<td>" + d3 + "</td>");

                strHtml.Append("<td>" + string.Format("{0:0.00}%", (d3 > 0 && d2 > 0 ? ((d2 - d3) / d3) : 0)) + "</td>");
                strHtml.Append("<td>" + string.Format("{0:0.00}%", (d2 > 0 && d1 > 0 ? (d1 / (d2 - 1)) : 0)) + "</td>");
            }

            strHtml.Append("</tbody>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='3'>TOTAL HORAS DE CONGESTION EN EL SEIN</th>");

            {
                var d_1 = listaFinal.Where(c => c.Orden == 0).ToList();
                double d1 = (d_1.Count > 0 ? d_1.Sum(x => x.Horatonumber) : 0);
                strHtml.Append("<th>" + d1 + "</th>");

                var d_2 = listaFinal.Where(c => c.Orden == 1).ToList();
                double d2 = (d_2.Count > 0 ? d_2.Sum(x => x.Horatonumber) : 0);
                strHtml.Append("<th>" + d2 + "</th>");

                var d_3 = listaFinal.Where(c => c.Orden == 2).ToList();
                double d3 = (d_3.Count > 0 ? d_3.Sum(x => x.Horatonumber) : 0);
                strHtml.Append("<th>" + d3 + "</th>");

                strHtml.Append("<th>" + string.Format("{0:0.00}%", (d3 > 0 && d2 > 0 ? ((d2 - d3) / d3) : 0)) + "</th>");
                strHtml.Append("<th>" + string.Format("{0:0.00}%", (d2 > 0 && d1 > 0 ? (d1 / (d2 - 1)) : 0)) + "</th>");
            }
            strHtml.Append("</thead>");

            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera el grafico excel para el reporte de Horas de Congestion
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="graficoHCxArea"></param>
        /// <param name="numRegistros"></param>
        public static void GenerarCharExcelGraficoHorasCongestionAreaOp(ExcelWorksheet ws, FechasPR5 objFecha, int filaIniGrafico, GraficoWeb graficoHCxArea, int numRegistros)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            int filaIniData = 8;
            int coluIniData = 3;

            //var anioActual = EPDate.f_numerosemana_y_anho(fechaFinal).Item2;

            GraficoWeb miGraficoWeb = graficoHCxArea;

            int numeroSeries = 3;  // reportes semanales y reporte mensual
            int distancia = 5;
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
            {
                numeroSeries = 2;
                distancia = 4;
            }



            var miChart = ws.Drawings["graficoHorasCongestion"] as ExcelChart;

            if (numRegistros > 0)
            {
                miChart.SetPosition(filaIniGrafico, 0, 1, 0);

                //conectamos data con el grafico

                for (int serie = 0; serie < numeroSeries; serie++)
                {
                    miChart.Series[serie].Header = (string)ws.Cells[filaIniData, coluIniData + distancia - serie].Value;
                    miChart.Series[serie].Series = ExcelRange.GetAddress(filaIniData + 1, coluIniData + distancia - serie, filaIniData + numRegistros, coluIniData + distancia - serie);
                    miChart.Series[serie].XSeries = ExcelRange.GetAddress(filaIniData + 1, coluIniData, filaIniData + numRegistros, coluIniData + 2);

                }

                #region Texto_Anotacion_3
                string itemR = "";
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "11.1"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "8.1"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) { itemR = "6.1"; }

                string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 2, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaIniGrafico + 34, 1, texto + miGraficoWeb.Subtitle);

                #endregion

            }
            else
            {
                miChart.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera el listado (tabla) excel para el reporte de Horas de Congestion
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="ultimaFilaTabla"></param>
        /// <param name="numRegistros"></param>
        public static void GeneraCharExcelListadoHorasCongestionAreaOp(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, out int ultimaFilaTabla, out int numRegistros)
        {
            DateTime fechaInicial = objFecha.FechaInicial;
            DateTime fechaFinal = objFecha.FechaFinal;

            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int filaIniArea = 8;
            int coluIniArea = 3;

            int ultimaFila;
            int ultimaColu;

            if (registros.Any())
            {
                #region Encabezado_Reporte
                UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
                #endregion

                #region Titulo y subtitulo
                string orden = "";
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "26"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "18"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) { orden = "15"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) { orden = "14"; }

                ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
                ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
                #endregion

                int numReg = registros.Count;
                var regPie = registros.Last();
                registros.RemoveAt(numReg - 1);
                numRegistros = registros.Count();

                #region cabecera

                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                {
                    ws.Cells[filaIniArea, coluIniArea + 3].Value = dataCab[0, 3];
                    ws.Cells[filaIniArea, coluIniArea + 4].Value = dataCab[0, 4];
                    ws.Cells[filaIniArea, coluIniArea + 5].Value = dataCab[0, 5];


                    ultimaColu = coluIniArea + 5;
                }
                else
                {
                    ws.Cells[filaIniArea, coluIniArea + 3].Value = dataCab[0, 3];
                    ws.Cells[filaIniArea, coluIniArea + 4].Value = dataCab[0, 4];
                    ws.Cells[filaIniArea, coluIniArea + 5].Value = dataCab[0, 5];

                    ws.Cells[filaIniArea, coluIniArea + 6].Value = dataCab[0, 6];
                    ws.Cells[filaIniArea, coluIniArea + 7].Value = dataCab[0, 7];

                    ultimaColu = coluIniArea + 7;
                }



                #endregion

                #region cuerpo

                int agrupFilaI = 0;

                string areaPintada = "";
                int filaX = 0;
                foreach (var reg in registros)
                {
                    int colP = 0;
                    foreach (string propiedad in reg.ListaPropiedades)
                    {
                        if (colP == 0) //area Operativa
                        {
                            if (propiedad != areaPintada)
                            {
                                if (agrupFilaI != 0)
                                {
                                    UtilExcel.CeldasExcelAgrupar(ws, agrupFilaI, coluIniArea + colP, filaIniArea + 1 + filaX - 1, coluIniArea + colP); //agrupa cada vez que encuentre diferente area operativa
                                }

                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP].Value = propiedad;
                                agrupFilaI = filaIniArea + 1 + filaX;
                            }
                            else
                            {
                                if (filaX == registros.Count() - 1) // sin hay repeticion al final de la lista, debe agruparlo   : (si area es repetida y es ultimo registro)                            
                                    UtilExcel.CeldasExcelAgrupar(ws, agrupFilaI, coluIniArea + colP, filaIniArea + 1 + filaX, coluIniArea + colP);
                            }
                            areaPintada = propiedad;
                        }
                        else
                        {
                            ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP].Value = propiedad;
                        }
                        colP++;
                    }


                    int colD = 0;
                    foreach (decimal? col in reg.ListaData)
                    {
                        if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                        {
                            if (colD == 2) //con signo  de %
                            {
                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP + colD].Value = col;
                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP + colD].Style.Numberformat.Format = "#,##0.00%";
                            }

                            else
                            {
                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP + colD].Value = col;
                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP + colD].Style.Numberformat.Format = "#,##0.00";
                            }
                        }
                        else
                        {
                            if (colD == 3 || colD == 4) //con signo  de %
                            {
                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP + colD].Value = col;
                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP + colD].Style.Numberformat.Format = "#,##0.00%";
                            }

                            else
                            {
                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP + colD].Value = col;
                                ws.Cells[filaIniArea + 1 + filaX, coluIniArea + colP + colD].Style.Numberformat.Format = "#,##0.00";
                            }
                        }



                        colD++;
                    }

                    filaX++;
                }

                ultimaFila = filaIniArea + 1 + filaX;
                ultimaFilaTabla = ultimaFila;

                #region FormatoCuerpo
                if (filaX > 0)
                {
                    UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniArea + 1, coluIniArea, ultimaFila - 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                    UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniArea + 1, coluIniArea, ultimaFila - 1, ultimaColu, "Centro");
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniArea + 1, coluIniArea + 3, ultimaFila - 1, ultimaColu, "Centro");
                    UtilExcel.CeldasExcelWrapText(ws, filaIniArea + 1, coluIniArea, ultimaFila - 1, ultimaColu);
                    UtilExcel.BorderCeldas2(ws, filaIniArea + 1, coluIniArea, ultimaFila - 1, ultimaColu);
                }
                #endregion

                #endregion

                #region Pie

                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                {
                    ws.Cells[ultimaFila, coluIniArea].Value = regPie.ListaPropiedades[0];
                    ws.Cells[ultimaFila, coluIniArea + 3].Value = regPie.ListaData[0];
                    ws.Cells[ultimaFila, coluIniArea + 3].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[ultimaFila, coluIniArea + 4].Value = regPie.ListaData[1];
                    ws.Cells[ultimaFila, coluIniArea + 4].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[ultimaFila, coluIniArea + 5].Value = regPie.ListaData[2];
                    ws.Cells[ultimaFila, coluIniArea + 5].Style.Numberformat.Format = "#,##0.00%";
                }
                else
                {
                    ws.Cells[ultimaFila, coluIniArea].Value = regPie.ListaPropiedades[0];
                    ws.Cells[ultimaFila, coluIniArea + 3].Value = regPie.ListaData[0];
                    ws.Cells[ultimaFila, coluIniArea + 3].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[ultimaFila, coluIniArea + 4].Value = regPie.ListaData[1];
                    ws.Cells[ultimaFila, coluIniArea + 4].Style.Numberformat.Format = "#,##0.00";
                    ws.Cells[ultimaFila, coluIniArea + 5].Value = regPie.ListaData[2];
                    ws.Cells[ultimaFila, coluIniArea + 5].Style.Numberformat.Format = "#,##0.00";

                    ws.Cells[ultimaFila, coluIniArea + 6].Value = regPie.ListaData[3];
                    ws.Cells[ultimaFila, coluIniArea + 6].Style.Numberformat.Format = "#,##0.00%";
                    ws.Cells[ultimaFila, coluIniArea + 7].Value = regPie.ListaData[4];
                    ws.Cells[ultimaFila, coluIniArea + 7].Style.Numberformat.Format = "#,##0.00%";
                }




                #region Formato Pie
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniArea, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, ultimaFila, coluIniArea, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultimaFila, coluIniArea + 3, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAgrupar(ws, ultimaFila, coluIniArea, ultimaFila, coluIniArea + 2);
                UtilExcel.BorderCeldas2(ws, ultimaFila, coluIniArea, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniArea, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniArea, ultimaFila, ultimaColu, "#FFFFFF");
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniArea, ultimaFila, ultimaColu);
                #endregion

                #endregion

                if (tipoDoc != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual  
                {
                    if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual)
                    {
                        int anioAct = fechaInicial.Year;
                        var textoDesc = UtilAnexoAPR5.CompletarAnotacion(NotasPieWebInformeMensual.Cuadro1_Reporte_6p1, EPDate.f_NombreMes(fechaInicial.Month).ToLower(), anioAct - 2, anioAct - 1, anioAct);
                        string texto = UtilAnexoAPR5.EscogerAnotacion("6.1", 1, tipoVistaReporte, tipoDoc);
                        UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniArea, texto + textoDesc);
                    }
                    else
                    {
                        string val1_0, val2_0;
                        UtilAnexoAPR5.ObtenerSemanasEnRango(fechaInicial, fechaFinal, out val1_0, out val2_0);
                        string v1 = "";
                        string v2 = "";
                        string v3 = "";
                        string v4 = "";

                        if (val1_0.Length <= 2) { v1 = val1_0; v2 = " en los años " + (int.Parse(val2_0) - 2).ToString(); v3 = (int.Parse(val2_0) - 1).ToString(); v4 = (int.Parse(val2_0) - 0).ToString(); }
                        if (val1_0.Length <= 6) { v1 = val1_0; v2 = " en los años " + (int.Parse(val2_0) - 2).ToString(); v3 = (int.Parse(val2_0) - 1).ToString(); v4 = (int.Parse(val2_0) - 0).ToString(); }
                        if (val1_0.Length > 6)
                        {
                            string[] semAnio1 = val1_0.Split('(');
                            var semI = semAnio1[0];
                            var anioI = int.Parse(semAnio1[1].Replace(")", ""));
                            string[] semAnio2 = val2_0.Split('(');
                            var semF = semAnio2[0];
                            var anioF = int.Parse(semAnio2[1].Replace(")", ""));

                            if (EPDate.f_numerosemana_y_anho(fechaInicial).Item1 == 53)
                            {
                                anioI = anioF;
                                semI = 1 + "";
                            }

                            v1 = val1_0 + "-" + val2_0;
                            v2 = semI + "(" + (anioI - 1) + ")-" + semF + "(" + (anioF - 1) + ")";
                            v3 = semI + "(" + (anioI - 2) + ")-" + semF + "(" + (anioF - 2) + ")";
                            v4 = "";
                        }

                        #region Texto_Anotacion_3
                        string itemR = "";
                        if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "11.1"; }
                        if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "8.1"; }

                        string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 1, tipoVistaReporte, tipoDoc);
                        UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniArea, texto + UtilAnexoAPR5.CompletarAnotacion(NotasPieWebInformeSemanal.Cuadro1_Reporte_11p1, v1, v2, v3, v4));
                        #endregion
                    }

                }


            }
            else
            {
                numRegistros = 0;
                ultimaFilaTabla = 10;
            }
        }

        /// <summary>
        /// Genera el listado con los equipos para el reporte de horas de congestion por area operativa
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string ListaHorasCongestionDeEquiposTransmisioHTML(FechasPR5 objFecha, TablaReporte tablaData)
        {
            int tipoReporte = objFecha.TipoReporte;
            DateTime fechaInicial = objFecha.FechaInicial;
            DateTime fechaFinal = objFecha.FechaFinal;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;

            int numReg = registros.Count;
            var regPie = registros.Last();
            registros.RemoveAt(numReg - 1);

            StringBuilder strHtml = new StringBuilder();

            strHtml.Append("<div id='listado_reporte' style='margin:0px auto; width: 1120px;'>");
            strHtml.Append("<table class='pretty tabla-icono' id=''>");

            #region cabecera
            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width: 160px;'>{0}</th>", "ÁREA OPERATIVA");
                strHtml.AppendFormat("<th style='width: 200px;'>{0}</th>", "EQUIPO DE TRANSMISIÓN");
                strHtml.AppendFormat("<th style='width: 360px;'>{0}</th>", "DESCRIPCIÓN");
                strHtml.AppendFormat("<th style='width: 80px;'>{0}</th>", dataCab[0, 3]);
                strHtml.AppendFormat("<th style='width: 80px;'>{0}</th>", dataCab[0, 4]);
                strHtml.AppendFormat("<th style='width: 80px;'>{0}</th>", dataCab[0, 5]);
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");
            }
            else  //reportes semanales y reporte mensual
            {
                strHtml.Append("<thead>");
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<th style='width: 160px;'>{0}</th>", "ÁREA OPERATIVA");
                strHtml.AppendFormat("<th style='width: 200px;'>{0}</th>", "EQUIPO DE TRANSMISIÓN");
                strHtml.AppendFormat("<th style='width: 360px;'>{0}</th>", "DESCRIPCIÓN");
                strHtml.AppendFormat("<th style='width: 80px;'>{0}</th>", dataCab[0, 3]);
                strHtml.AppendFormat("<th style='width: 80px;'>{0}</th>", dataCab[0, 4]);
                strHtml.AppendFormat("<th style='width: 80px;'>{0}</th>", dataCab[0, 5]);

                strHtml.AppendFormat("<th style='width: 80px;'>{0}</th>", dataCab[0, 6].Replace("\n", "<br>"));
                strHtml.AppendFormat("<th style='width: 80px;'>{0}</th>", dataCab[0, 7].Replace("\n", "<br>"));
                strHtml.Append("</tr>");

                strHtml.Append("</thead>");
            }


            #endregion

            #region cuerpo
            strHtml.Append("<tbody>");
            int f = 0;
            foreach (var reg in registros)
            {

                foreach (string propiedad in reg.ListaPropiedades)
                {
                    strHtml.AppendFormat("<td >{0}</td>", propiedad != null ? propiedad : "");

                }


                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual    
                    {
                        if (c == 2) //con signo  de %
                            strHtml.AppendFormat("<td class='alignValorCenter'>{0}</td>", col.HasValue ? col.Value.ToString("P") : "");
                        else
                            strHtml.AppendFormat("<td class='alignValorCenter'>{0}</td>", col.HasValue ? col.Value.ToString("N") : "");
                    }
                    else // reportes semanales y reporte mensual
                    {
                        if (c == 3 || c == 4) //con signo  de %
                            strHtml.AppendFormat("<td class='alignValorCenter'>{0}</td>", col.HasValue ? col.Value.ToString("P") : "");
                        else
                            strHtml.AppendFormat("<td class='alignValorCenter'>{0}</td>", col.HasValue ? col.Value.ToString("N") : "");
                    }


                    c++;
                }

                strHtml.Append("</tr>");
                f++;
            }
            strHtml.Append("</tbody>");




            #endregion

            #region Pie
            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual   
            {
                strHtml.Append("<tfoot>");
                strHtml.Append("<tr>");
                strHtml.Append("<td colspan='3' style='text-align:center'>" + regPie.ListaPropiedades[0] + "</td>");
                strHtml.AppendFormat("<td class='alignValorCenter' style='text-align:center'> {0} </td>", regPie.ListaData[0].HasValue ? regPie.ListaData[0].Value.ToString("N") : "");
                strHtml.AppendFormat("<td class='alignValorCenter' style='text-align:center'> {0} </td>", regPie.ListaData[1].HasValue ? regPie.ListaData[1].Value.ToString("N") : "");
                strHtml.AppendFormat("<td class='alignValorCenter' style='text-align:center'> {0} </td>", regPie.ListaData[2].HasValue ? regPie.ListaData[2].Value.ToString("P") : "");

                strHtml.Append("</tr>");
                strHtml.Append("</tfoot>");
            }
            else
            {
                strHtml.Append("<tfoot>");
                strHtml.Append("<tr>");
                strHtml.Append("<td colspan='3' style='text-align:center'>" + regPie.ListaPropiedades[0] + "</td>");
                strHtml.AppendFormat("<td class='alignValorCenter' style='text-align:center'> {0} </td>", regPie.ListaData[0].HasValue ? regPie.ListaData[0].Value.ToString("N") : "");
                strHtml.AppendFormat("<td class='alignValorCenter' style='text-align:center'> {0} </td>", regPie.ListaData[1].HasValue ? regPie.ListaData[1].Value.ToString("N") : "");
                strHtml.AppendFormat("<td class='alignValorCenter' style='text-align:center'> {0} </td>", regPie.ListaData[2].HasValue ? regPie.ListaData[2].Value.ToString("N") : "");

                strHtml.AppendFormat("<td class='alignValorCenter' style='text-align:center'>{0}</td>", regPie.ListaData[3].HasValue ? regPie.ListaData[3].Value.ToString("P") : "");
                strHtml.AppendFormat("<td class='alignValorCenter' style='text-align:center'>{0}</td>", regPie.ListaData[4].HasValue ? regPie.ListaData[4].Value.ToString("P") : "");

                strHtml.Append("</tr>");
                strHtml.Append("</tfoot>");
            }


            #endregion

            strHtml.Append("</table>");

            strHtml.Append("</div>");

            if (tipoReporte != ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // todos, menos el reporte anual    
            {
                if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
                {
                    var descripcion = NotasPieWebInformeMensual.Cuadro1_Reporte_6p1;
                    var mesConsultado = EPDate.f_NombreMes(fechaInicial.Month).ToLower();
                    var anioActual = fechaInicial.Year;
                    strHtml.AppendFormat("<div style='margin-top: 15px;'>" + descripcion + "</div>", mesConsultado, (anioActual - 2), (anioActual - 1), (anioActual));
                }
                else  // reportes semanales
                {
                    string val1_0, val2_0;
                    UtilAnexoAPR5.ObtenerSemanasEnRango(fechaInicial, fechaFinal, out val1_0, out val2_0);
                    string v1 = "";
                    string v2 = "";
                    string v3 = "";
                    string v4 = "";
                    var nr1 = NotasPieWebInformeSemanal.Cuadro1_Reporte_11p1;
                    // fechaInicial y fechaFinal estan dentro de una misma semana, mismo año
                    if (val1_0.Length <= 2) { v1 = val1_0; v2 = " en los años " + (int.Parse(val2_0) - 2).ToString(); v3 = (int.Parse(val2_0) - 1).ToString(); v4 = (int.Parse(val2_0) - 0).ToString(); }

                    // fechaInicial y fechaFinal esten en distintas semanas semanas, mismo año
                    if (val1_0.Length <= 6) { v1 = val1_0; v2 = " en los años " + (int.Parse(val2_0) - 2).ToString(); v3 = (int.Parse(val2_0) - 1).ToString(); v4 = (int.Parse(val2_0) - 0).ToString(); }

                    // fechaInicial y fechaFinal esten en distintas semanas semanas, ademas de diferentes años
                    if (val1_0.Length > 6)
                    {
                        nr1 = NotasPieWebInformeSemanal.Cuadro1_Reporte_11p1_;
                        string[] semAnio1 = val1_0.Split('(');
                        var semI = semAnio1[0];
                        var anioI = int.Parse(semAnio1[1].Replace(")", ""));
                        string[] semAnio2 = val2_0.Split('(');
                        var semF = semAnio2[0];
                        var anioF = int.Parse(semAnio2[1].Replace(")", ""));

                        if (EPDate.f_numerosemana_y_anho(fechaInicial).Item1 == 53)
                        {
                            anioI = anioF;
                            semI = 1 + "";
                        }

                        v1 = val1_0 + "-" + val2_0;
                        v2 = semI + "(" + (anioI - 1) + ")-" + semF + "(" + (anioF - 1) + ")";
                        v3 = semI + "(" + (anioI - 2) + ")-" + semF + "(" + (anioF - 2) + ")";
                        v4 = "";
                    }

                    strHtml.AppendFormat("<div style='margin-top: 15px;'>" + nr1 + "</div>", v1, v2, v3, v4);
                }
            }




            return strHtml.ToString();
        }

        /// <summary>
        /// Devuelve el grafico de barras para el reporte horas decongestion
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaGrupolinea"></param>
        /// <param name="listaDataTotal"></param>
        /// <returns></returns>
        public static GraficoWeb ObtenerGraficoHorasCongestionAreaOpe(int tipoReporte, FechasPR5 objFecha, List<EqGrupoLineaDTO> listaGrupolinea, List<ResultadoTotalGeneracion> listaDataTotal)
        {
            GraficoWeb grafico = new GraficoWeb();

            //Obtencion se nombres series
            var listaDeAreas = listaGrupolinea.Select(x => x.Areaoperativa).Distinct().OrderBy(x => x);

            //Categorias, agrupamos segun area y nombre equipos
            grafico.Categorias = new Categorias[listaDeAreas.Count()];

            int categ = 0;
            foreach (var area in listaDeAreas)
            {
                var listaGrupolineaXArea = listaGrupolinea.Where(x => x.Areaoperativa == area).ToList();

                grafico.Categorias[categ] = new Categorias();
                grafico.Categorias[categ].Name = area;
                grafico.Categorias[categ].Categories = new string[listaGrupolineaXArea.Count()];

                int n = 0;
                foreach (var equiposTransmision in listaGrupolineaXArea)
                {
                    grafico.Categorias[categ].Categories[n] = equiposTransmision.Areanomb + " " + equiposTransmision.Equipo;
                    n++;

                }
                categ++;
            }

            //obtenemos rotacion, segun el numero de registros
            int numeroBloques = listaGrupolinea.Count();
            var rotacion = 0;
            if (numeroBloques > 10) rotacion = -90;
            grafico.XAxisLabelsRotation = rotacion;
            grafico.XAxisTitle = "Horas";

            //obtenemos el pie de pagina    
            string subtitulo = "";
            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
            {
                subtitulo = "";
            }
            else
            {
                if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) //reporte mensual
                {
                    var descripcion = NotasPieWebInformeMensual.Grafico1_Reporte_6p1;
                    var mesConsultado = EPDate.f_NombreMes(objFecha.AnioAct.NumMes).ToLower();
                    var anioActual = objFecha.AnioAct.NumAnio;
                    subtitulo = string.Format(descripcion, mesConsultado, (anioActual - 2), (anioActual - 1), (anioActual));
                }
                else
                {
                    subtitulo = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_11p1, objFecha.Anio2Ant.NumAnio, objFecha.Anio1Ant.NumAnio, objFecha.AnioAct.NumAnio);
                }
            }
            grafico.Subtitle = subtitulo;

            grafico.Series = new List<RegistroSerie>();

            int numeroSeries = 3;  // para reportes semanales y reporte mensual
            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual 
                numeroSeries = 2;  // solo para reporte anual

            grafico.SeriesData = new decimal?[numeroSeries][];

            var listaDataXAnio = new List<ResultadoTotalGeneracion>();

            int nSerie = 0;
            string color = "";

            for (int i = 0; i < numeroSeries; i++)
            {
                if (nSerie == 0)
                {
                    listaDataXAnio = listaDataTotal.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).ToList();
                    color = "#1F497D";
                }
                if (nSerie == 1)
                {
                    listaDataXAnio = listaDataTotal.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct).ToList();
                    color = "red";
                }
                if (nSerie == 2)
                {
                    listaDataXAnio = listaDataTotal.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct).ToList();
                    color = "#59983A";
                }

                var name = "";
                if (objFecha.EsReporteAnual)
                {
                    if (i == 0) name = objFecha.AnioAct.NumAnio.ToString();
                    if (i == 1) name = objFecha.Anio1Ant.NumAnio.ToString();
                }
                else
                {
                    if (i == 0) name = (objFecha.EsReporteXMes ? "" : "SEM ") + objFecha.AnioAct.RangoAct_NumYAnio;
                    if (i == 1) name = (objFecha.EsReporteXMes ? "" : "SEM ") + objFecha.Anio1Ant.RangoAct_NumYAnio;
                    if (i == 2) name = (objFecha.EsReporteXMes ? "" : "SEM ") + objFecha.Anio2Ant.RangoAct_NumYAnio;
                }

                grafico.Series.Add(new RegistroSerie());
                grafico.Series[nSerie].Name = name;
                grafico.Series[nSerie].Type = "column";
                grafico.Series[nSerie].Color = color;
                grafico.Series[nSerie].YAxis = 0;

                grafico.SeriesData[nSerie] = new decimal?[numeroBloques];

                int h = 0;

                foreach (var equiposTransmision in listaGrupolinea)
                {
                    var objEqData = listaDataXAnio.Find(x => x.Codigo == equiposTransmision.Grulincodi);
                    decimal valor = objEqData?.Meditotal ?? 0;

                    grafico.SeriesData[nSerie][h] = valor;
                    h++;

                }

                nSerie++;

            }

            return grafico;
        }

        /// <summary>
        /// Devuelve todos los datos para generar la tabla de horas de congestion por area
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaGrupolinea"></param>
        /// <param name="listaDataXArea"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaHCxArea(int tipoReporte, FechasPR5 objFecha, List<EqGrupoLineaDTO> listaGrupolinea,
                            List<ResultadoTotalGeneracion> listaDataXArea)
        {
            #region Cabecera

            var anioActual = objFecha.AnioAct.NumAnio;

            TablaReporte tabla = new TablaReporte();
            CabeceraReporte cabRepo = new CabeceraReporte();

            string[,] matrizCabecera = new string[1, 8];

            if (tipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) // solo reporte anual      
            {
                matrizCabecera[0, 3] = string.Format("{0}", anioActual);
                matrizCabecera[0, 4] = string.Format("{0}", (anioActual - 1));
                matrizCabecera[0, 5] = "Var.";
            }
            else
            {
                matrizCabecera[0, 3] = (objFecha.EsReporteXMes ? "" : "SEM ") + objFecha.AnioAct.RangoAct_NumYAnio;
                matrizCabecera[0, 4] = (objFecha.EsReporteXMes ? "" : "SEM ") + objFecha.Anio1Ant.RangoAct_NumYAnio;
                matrizCabecera[0, 5] = (objFecha.EsReporteXMes ? "" : "SEM ") + objFecha.Anio2Ant.RangoAct_NumYAnio;
                matrizCabecera[0, 6] = string.Format("Var. \n ({0}/{1})", (anioActual), (anioActual - 1));
                matrizCabecera[0, 7] = string.Format("Var. \n ({0}/{1})", (anioActual - 1), (anioActual - 2));
            }


            cabRepo.CabeceraData = matrizCabecera;
            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo

            List<RegistroReporte> registros = new List<RegistroReporte>();

            var listaGrupolineaTmp = new List<EqGrupoLineaDTO>();
            listaGrupolineaTmp.AddRange(listaGrupolinea);
            listaGrupolineaTmp.Add(new EqGrupoLineaDTO() { Grulincodi = -1, Areaoperativa = "TOTAL HORAS DE CONGESTÍON EN EL SEIN", Equipo = "", Areanomb = "" });

            foreach (var objAreaGeo in listaGrupolineaTmp)
            {
                var listaXAreageo = listaDataXArea.Where(x => x.Codigo == objAreaGeo.Grulincodi).ToList();

                RegistroReporte registro = new RegistroReporte();

                List<string> propiedades = new List<string>();
                List<decimal?> datos = new List<decimal?>();

                propiedades.Add(objAreaGeo.Areaoperativa); //area
                propiedades.Add(objAreaGeo.Equipo); //lineas
                propiedades.Add(objAreaGeo.Areanomb); //nombre

                ResultadoTotalGeneracion regAnio0 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regAnio1 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regAnio2 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);

                ResultadoTotalGeneracion regVarAnio0 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);
                ResultadoTotalGeneracion regVarAnio1 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Total_Var);

                datos.Add(regAnio0.Meditotal);
                datos.Add(regAnio1.Meditotal);
                if (!objFecha.EsReporteAnual) datos.Add(regAnio2.Meditotal);

                datos.Add(regVarAnio0.Meditotal != null ? (decimal?)(regVarAnio0.Meditotal / 100.0m) : null);
                if (!objFecha.EsReporteAnual) datos.Add(regVarAnio1.Meditotal != null ? (decimal?)(regVarAnio1.Meditotal / 100.0m) : null);

                registro.ListaData = datos;
                registro.ListaPropiedades = propiedades;
                registro.EsFilaResumen = objAreaGeo.Grulincodi == -1;

                registros.Add(registro);
            }

            #endregion

            tabla.ListaRegistros = registros;

            return tabla;
        }

        /// <summary>
        /// Obtiene la hora congestion de un equipo de transmision para cierto año
        /// </summary>
        /// <param name="listaCongestion"></param>
        /// <returns></returns>
        public static decimal? ObtenerHoraCongestionXAnio(List<PrCongestionDTO> listaCongestion)
        {
            decimal? resultado = null;

            if (listaCongestion.Any())
            {
                //decimal horasCongestion = Convert.ToDecimal(listaCongestion.Sum(x => x.Congesfecfin.Value.Subtract(x.Congesfecinicio.Value).TotalHours));
                var listaHorasTraslape = EPDate.GetPeriodosCombinadosXInterceccion(listaCongestion.Select(x => new Periodo() { FechaInicio = x.Congesfecinicio.Value, FechaFin = x.Congesfecfin.Value }));

                double horasCongestion = listaHorasTraslape.Sum(x => x.Duracion.TotalHours);
                resultado = (decimal)horasCongestion;
            }

            return resultado;
        }

        /// <summary>
        /// GetResultadoCongestionXTipo
        /// </summary>
        /// <param name="codigo"></param>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaCongestionXFecha"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public static ResultadoTotalGeneracion GetResultadoCongestionXTipo(int codigo, DateTime fechaPeriodo, List<ResultadoTotalGeneracion> listaCongestionXFecha, int tipo)
        {
            ResultadoTotalGeneracion reg = new ResultadoTotalGeneracion();
            reg.Codigo = codigo;
            reg.Medifecha = fechaPeriodo;
            reg.TipoResultadoFecha = tipo;

            var listaDataArea = listaCongestionXFecha.Where(x => (codigo == -1 || x.Codigo == codigo) && x.Medifecha == fechaPeriodo);
            if (listaDataArea.Any()) reg.Meditotal = listaDataArea.Sum(x => x.Meditotal ?? 0);

            return reg;
        }

        #endregion

        #region J. CONSUMO DE COMBUSTIBLE EN EL SEIN

        /// <summary>
        /// Calcular el consumo del comb en el periodo y  modifica las unidades segun su fuente de energia (ejm: m3 a Mm3)
        /// </summary>
        /// <param name="listaReporte"></param>
        public static List<MeMedicionxintervaloDTO> CalcularConsumoCombParaIntervalo2(List<MeMedicionxintervaloDTO> listaReporte)
        {
            List<MeMedicionxintervaloDTO> listaInterv = new List<MeMedicionxintervaloDTO>();
            if (listaReporte.Count > 0)
            {
                for (int i = 0; i < listaReporte.Count; i++)
                {
                    decimal h1 = 0;
                    var det = listaReporte.Where(x => x.Medintfechaini == listaReporte[i].Medintfechaini && x.Fenergcodi == listaReporte[i].Fenergcodi).ToList();
                    if (det.Count > 0)
                    {
                        foreach (var upd in det) { h1 += (decimal)upd.Medinth1; }
                        if (det[i].Fenergcodi == 2 || det[i].Fenergcodi == 7)
                            det[i].Medinth1 = h1 / 1000; // m3 a Mm3
                        else
                            det[i].Medinth1 = h1;
                        listaInterv.Add(det[i]);
                        foreach (var del in det) { listaReporte.Remove(del); i = -1; }
                    }
                }
            }

            return listaInterv;
        }

        /// <summary>
        /// Calcular el consumo del comb en el periodo y  modifica las unidades segun su fuente de energia (ejm: m3 a Mm3)
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="listaRptDia"></param>
        /// <param name="listaTotal"></param>
        public static void CalcularConsumoCombParaIntervalo(List<MeMedicionxintervaloDTO> listaData, out List<MeMedicionxintervaloDTO> listaRptDia, out List<MeMedicionxintervaloDTO> listaTotal)
        {
            listaRptDia = new List<MeMedicionxintervaloDTO>();
            listaTotal = new List<MeMedicionxintervaloDTO>();

            //totalizar por fuente de energia y dia
            foreach (var agrup in listaData.GroupBy(x => new { x.Medintfechaini, x.Fenergcodi }))
            {
                decimal h1 = agrup.Sum(x => x.Medinth1 ?? 0);
                if (agrup.Key.Fenergcodi == 2 || agrup.Key.Fenergcodi == 7)
                    h1 = h1 / 1000; // m3 a Mm3

                listaRptDia.Add(new MeMedicionxintervaloDTO()
                {
                    Medintfechaini = agrup.Key.Medintfechaini,
                    Fenergcodi = agrup.Key.Fenergcodi,
                    Medinth1 = h1
                });
            }

            //totalizar por fuente de energia
            foreach (var agrup in listaData.GroupBy(x => new { x.Fenergcodi }))
            {
                decimal h1 = agrup.Sum(x => x.Medinth1 ?? 0);
                if (agrup.Key.Fenergcodi == 2 || agrup.Key.Fenergcodi == 7)
                    h1 = h1 / 1000; // m3 a Mm3

                listaTotal.Add(new MeMedicionxintervaloDTO()
                {
                    Fenergcodi = agrup.Key.Fenergcodi,
                    Medinth1 = h1
                });
            }
        }

        /// <summary>
        /// Grafico de Med Intervalo Consumo Combustible Semanal
        /// </summary>
        /// <param name="listaTotalXDia"></param>
        /// <param name="estcomcodi"></param>
        /// <param name="listaFenerg"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="lstGrafico"></param>
        /// <param name="titu"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoMedIntervaloConsumoCombustibleSemanal(List<MeMedicionxintervaloDTO> listaTotalXDia, int estcomcodi,
                                            List<SiFuenteenergiaDTO> listaFenerg, DateTime fechaIni, DateTime fechaFin,
                                            out List<SerieDuracionCarga> lstGrafico, out string titu)
        {
            List<int> lFenergcodiXEstado = listaFenerg.Where(x => x.Estcomcodi == estcomcodi).Select(x => x.Fenergcodi).ToList();
            List<MeMedicionxintervaloDTO> lista = listaTotalXDia.Where(x => lFenergcodiXEstado.Contains(x.Fenergcodi)).ToList();

            lstGrafico = new List<SerieDuracionCarga>();
            titu = "";

            GraficoWeb grafico = new GraficoWeb();
            DateTime fechaIniAux = fechaIni;
            DateTime fechaFinAux = fechaFin;
            string name = string.Empty, name1 = string.Empty, type = string.Empty, type1 = string.Empty, yAxisTitle = string.Empty, yAxisTitle1 = string.Empty;

            string tituloPie = "";
            string titulo1 = "Consumo diario de combustibles ";
            string titulo2 = string.Empty;
            string titulo3 = " en el SEIN";

            int totalIntervalos = lista.Count;
            grafico.SeriesData = new decimal?[2][];
            if (lista.Count > 0)
            {
                var listaFechas = lista.Select(x => x.Medintfechaini).Distinct().ToList();
                totalIntervalos = listaFechas.Count;
                if (listaFechas.Count > 0)
                {
                    fechaIni = listaFechas.Min();
                    fechaFin = listaFechas.Max();
                }

                grafico.XAxisTitle = "Dia";

                string val1_0, val2_0;
                UtilAnexoAPR5.ObtenerSemanasEnRango(fechaIni, fechaFin, out val1_0, out val2_0);

                // titulo el reporte               
                switch (estcomcodi)
                {
                    case ConstantesPR5ReportesServicio.EstcomcodiGaseoso: tituloPie = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_6p1, val1_0, val2_0); titulo2 = "gaseosos"; name = "Biogas (Mm3)"; name1 = "Gas Natural (Mm3)"; type = "column"; type1 = "spline"; yAxisTitle = "Biogas (Mm3)"; yAxisTitle1 = "Gas Natural (Mm3)"; break;
                    case ConstantesPR5ReportesServicio.EstcomcodiLiquido: tituloPie = string.Format(NotasPieWebInformeSemanal.Grafico2_Reporte_6p1, val1_0, val2_0); titulo2 = "líquidos"; name = "Diesel (m3)"; name1 = "Residual 500 (m3)"; type = "column"; type1 = "column"; yAxisTitle = "m3"; yAxisTitle1 = "m3"; break;
                    case ConstantesPR5ReportesServicio.EstcomcodiSolido: tituloPie = string.Format(NotasPieWebInformeSemanal.Grafico3_Reporte_6p1, val1_0, val2_0); titulo2 = "sólidos"; name = "Carbon (Ton)"; name1 = "Bagazo (Ton)"; type = "column"; type1 = "spline"; yAxisTitle = "Carbon (Ton)"; yAxisTitle1 = "Bagazo (Ton)"; break;
                }
                grafico.TitleText = titulo1 + titulo2 + titulo3;


                var listaFuenteEnergia = listaFenerg;
                SiFuenteenergiaDTO regFenerg = null;
                if (estcomcodi == ConstantesPR5ReportesServicio.EstcomcodiLiquido) //LIQUIDOS
                {
                    List<SerieDuracionCarga> series = new List<SerieDuracionCarga>();

                    regFenerg = listaFuenteEnergia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiDiesel);
                    SerieDuracionCarga serieDiesel = new SerieDuracionCarga();
                    serieDiesel.SerieColor = regFenerg.Fenergcolor;
                    serieDiesel.SerieName = "DIESEL (m3)";
                    serieDiesel.ListaValores = lista.Where(x => x.Fenergcodi == 3).Select(x => (decimal)x.Medinth1).ToList();
                    series.Add(serieDiesel);

                    if (lista.Find(x => x.Fenergcodi == 10) != null) //RESIDUAL R500
                    {
                        regFenerg = listaFuenteEnergia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual);
                        SerieDuracionCarga sereResidual500 = new SerieDuracionCarga();
                        sereResidual500.SerieColor = regFenerg.Fenergcolor;
                        sereResidual500.SerieName = regFenerg.Fenergnomb + " 500 (m3)";
                        sereResidual500.ListaValores = lista.Where(x => x.Fenergcodi == 10).Select(x => (decimal)x.Medinth1).ToList();
                        series.Add(sereResidual500);
                    }

                    if (lista.Find(x => x.Fenergcodi == 11) != null) //RESIDUAL R6
                    {
                        regFenerg = listaFuenteEnergia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual);
                        SerieDuracionCarga sereResidual6 = new SerieDuracionCarga();
                        sereResidual6.SerieColor = "red";
                        sereResidual6.SerieName = regFenerg.Fenergnomb + " 6 (m3)";
                        sereResidual6.ListaValores = lista.Where(x => x.Fenergcodi == 11).Select(x => (decimal)x.Medinth1).ToList();
                        series.Add(sereResidual6);
                    }

                    lstGrafico = series;
                    titu = titulo1 + titulo2 + titulo3;

                    grafico.Subtitle = tituloPie;
                    grafico.XAxisCategories = listaFechas.Select(x => x.Date.ToString("dd/MM/yyyy")).ToList();
                }
                else
                {
                    string colorBX = "";
                    string colorLX = "";
                    switch (estcomcodi)
                    {
                        case ConstantesPR5ReportesServicio.EstcomcodiGaseoso: colorBX = "#8064A2"; colorLX = "#E46C0A"; break; //color barras
                        case ConstantesPR5ReportesServicio.EstcomcodiSolido: colorBX = "#4A452A"; colorLX = "#FF0000"; break; // color lineas
                    }

                    grafico.YaxixTitle = "(MWh)";

                    grafico.XAxisCategories = new List<string>();
                    grafico.SeriesName = new List<string>();
                    grafico.SeriesType = new List<string>();
                    grafico.SeriesYAxis = new List<int>();
                    List<MeMedicionxintervaloDTO> ListaAux = new List<MeMedicionxintervaloDTO>();

                    // Obtener lista de intervalos categoria del grafico   
                    grafico.XAxisCategories = listaFechas.Select(x => x.Date.ToString("dd/MM/yyyy")).ToList();

                    // Obtener lista de valores para las series del grafico
                    grafico.Series = new List<RegistroSerie>();
                    grafico.Series.Add(new RegistroSerie());
                    grafico.Series.Add(new RegistroSerie());
                    grafico.Subtitle = tituloPie;
                    for (var i = 0; i < 2; i++)
                    {
                        switch (i)
                        {
                            case 0:
                                grafico.Series[i].Name = name;
                                grafico.Series[i].Type = type;
                                //model.Grafico.Series[i].Color = "#3498DB";
                                grafico.Series[i].Color = colorBX;
                                grafico.Series[i].YAxis = 0;
                                grafico.Series[i].YAxisTitle = yAxisTitle;
                                ListaAux = lista.Where(x => x.Fenergcodi == 5 || x.Fenergcodi == 7).ToList(); //CARBON(5) Y BIOGAS(7)                                
                                break;
                            case 1:
                                grafico.Series[i].Name = name1;
                                grafico.Series[i].Type = type1;
                                //model.Grafico.Series[i].Color = "#DC143C";
                                grafico.Series[i].Color = colorLX;
                                grafico.Series[i].YAxis = 1;
                                grafico.Series[i].YAxisTitle = yAxisTitle1;
                                //factor = 1;
                                ListaAux = lista.Where(x => x.Fenergcodi == 6 || x.Fenergcodi == 2).ToList();  // BAGASO(6) Y GAS(2)                              
                                break;
                        }
                        grafico.SeriesData[i] = new decimal?[totalIntervalos];

                        for (var j = 1; j <= listaFechas.Count; j++)
                        {
                            decimal? valor = 0;
                            var obj = ListaAux.Find(x => x.Medintfechaini == listaFechas[j - 1].Date);
                            if (obj != null)
                            {
                                valor = (decimal)obj.Medinth1;
                            }
                            grafico.SeriesData[i][j - 1] = valor;// *factor;
                        }
                    }
                }


            }// end del if 
            return grafico;
        }

        /// <summary>
        /// Gráfico 3 de Med Intervalo Consumo Combustible Semanal Combustible Solidos
        /// </summary>
        /// <param name="listaTotalXDia"></param>
        /// <param name="estcomcodi"></param>
        /// <param name="listaFenerg"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoMedIntervaloConsumoCombustibleSemanal3(List<MeMedicionxintervaloDTO> listaTotalXDia, int estcomcodi,
                                            List<SiFuenteenergiaDTO> listaFenerg, DateTime fechaIni, DateTime fechaFin)
        {
            List<int> lFenergcodiXEstado = listaFenerg.Where(x => x.Estcomcodi == estcomcodi).Select(x => x.Fenergcodi).ToList();
            List<MeMedicionxintervaloDTO> lista = listaTotalXDia.Where(x => lFenergcodiXEstado.Contains(x.Fenergcodi)).ToList();

            GraficoWeb graficoWeb = new GraficoWeb
            {
                XAxisCategories = new List<string>(),
                SerieData = new DatosSerie[1],
                TitleText = "Consumo diario de combustibles sólidos en el SEIN",
                YAxixTitle = new List<string> { "Bagazo(Ton)" },
                TooltipValueSuffix = " ",
                YaxixLabelsFormat = " ",
                LegendLayout = "horizontal",
                LegendAlign = "center",
                LegendVerticalAlign = "bottom"
            };

            DateTime fechaIniAux = fechaIni;
            DateTime fechaFinAux = fechaFin;
            if (lista.Count > 0)
            {
                var listaFechas = lista.Select(x => x.Medintfechaini).Distinct().ToList();
                if (listaFechas.Count > 0)
                {
                    fechaIni = listaFechas.Min();
                    fechaFin = listaFechas.Max();
                }
                string val1_0, val2_0;
                UtilAnexoAPR5.ObtenerSemanasEnRango(fechaIni, fechaFin, out val1_0, out val2_0);
                graficoWeb.Subtitle = string.Format(NotasPieWebInformeSemanal.Grafico3_Reporte_6p1, val1_0, val2_0);
                graficoWeb.XAxisCategories = new List<string>();
                // Obtener lista de intervalos categoria del grafico   
                graficoWeb.XAxisCategories = listaFechas.Select(x => x.Date.ToString("dd/MM/yyyy")).ToList();
                var indexSerie = 0;
                graficoWeb.SerieData[indexSerie] = new DatosSerie()
                {
                    Name = "Bagazo(Ton)",
                    Data = new decimal?[listaFechas.Count]
                };
                graficoWeb.SerieData[indexSerie].Color = "#C00000";

                List<MeMedicionxintervaloDTO> ListaAux = new List<MeMedicionxintervaloDTO>();
                ListaAux = lista.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo).ToList();  // BAGASO(6)                
                for (var j = 1; j <= listaFechas.Count; j++)
                {
                    decimal? valor = 0;
                    var obj = ListaAux.Find(x => x.Medintfechaini == listaFechas[j - 1].Date);
                    if (obj != null)
                    {
                        valor = (decimal)obj.Medinth1;
                    }
                    graficoWeb.SerieData[indexSerie].Data[j - 1] = valor;// *factor;
                }

            }

            return graficoWeb;
        }

        /// <summary>
        /// Genera el listado excel y, desde esa tabla, lo graficos del reporte Consumo de Combustible
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="data"></param>
        /// <param name="listaFenerg"></param>
        /// <param name="listaItem"></param>
        public static void GenerarCharExcelListadoConsumoCombustible(ExcelWorksheet ws, FechasPR5 objFecha, List<MeMedicionxintervaloDTO> data,
                            List<SiFuenteenergiaDTO> listaFenerg, List<ItemMenuNumeral> listaItem)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            DateTime fechaInicio = objFecha.FechaInicial;
            DateTime fechaFin = objFecha.FechaFinal;

            int filaIniData = 9;
            int coluIniData = 3;

            int ultimaFila = 0;
            int ultimaColu = 0;

            int numDias = 0;
            List<int> lstSemanas = new List<int>();

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo

            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "18"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "19"; }

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoVistaReporte, tipoDoc, listaItem); //subtitulo

            #endregion

            var miChartG = ws.Drawings["graficoCombGaseosos"] as ExcelChart;
            var miChartL = ws.Drawings["graficoCombLiquidos"] as ExcelChart;
            var miChartS = ws.Drawings["graficoCombSolidos"] as ExcelChart;

            List<SerieDuracionCarga> lstGrafico;
            string titu;
            GraficoWeb grafG = GraficoMedIntervaloConsumoCombustibleSemanal(data, ConstantesPR5ReportesServicio.EstcomcodiGaseoso, listaFenerg, fechaInicio, fechaFin, out lstGrafico, out titu);
            GraficoWeb grafL = GraficoMedIntervaloConsumoCombustibleSemanal(data, ConstantesPR5ReportesServicio.EstcomcodiLiquido, listaFenerg, fechaInicio, fechaFin, out lstGrafico, out titu);
            GraficoWeb grafS = GraficoMedIntervaloConsumoCombustibleSemanal(data, ConstantesPR5ReportesServicio.EstcomcodiSolido, listaFenerg, fechaInicio, fechaFin, out lstGrafico, out titu);

            if (data.Any())
            {
                #region cuerpo

                //***************************      CUERPO DE LA TABLA         ***********************************//            
                decimal gas = 0, bagazo = 0, biogas = 0, diesel = 0, residual500 = 0, residual6 = 0;
                decimal tgas = 0, tbagazo = 0, tbiogas = 0, tdiesel = 0, tresidual500 = 0, tresidual6 = 0;

                int filaX = 0;
                for (int z = 0; z < data.Count; z++)
                {
                    var det = data.Where(d => d.Medintfechaini == data[z].Medintfechaini).ToList();
                    if (det.Count > 0)
                    {
                        int semN = EPDate.f_numerosemana_y_anho(det[z].Medintfechaini).Item1;
                        numDias++;
                        ws.Cells[filaIniData + filaX, coluIniData].Value = semN;
                        lstSemanas.Add(semN);
                        ws.Cells[filaIniData + filaX, coluIniData + 1].Value = det[z].Medintfechaini.ToString(ConstantesBase.FormatoFechaPE);

                        foreach (var list in det)
                        {
                            switch (list.Fenergcodi)
                            {
                                case 2: gas = (decimal)list.Medinth1; tgas += gas; break;
                                case 3: diesel = (decimal)list.Medinth1; tdiesel += diesel; break;
                                case 6: bagazo = (decimal)list.Medinth1; tbagazo += bagazo; break;
                                case 7: biogas = (decimal)list.Medinth1; tbiogas += biogas; break;
                                case 10: residual500 = (decimal)list.Medinth1; tresidual500 += residual500; break;
                                case 11: residual6 = (decimal)list.Medinth1; tresidual6 += residual6; break;
                            }
                        }
                        ws.Cells[filaIniData + filaX, coluIniData + 2].Value = gas;
                        ws.Cells[filaIniData + filaX, coluIniData + 2].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + filaX, coluIniData + 3].Value = bagazo;
                        ws.Cells[filaIniData + filaX, coluIniData + 3].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + filaX, coluIniData + 4].Value = biogas;
                        ws.Cells[filaIniData + filaX, coluIniData + 4].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + filaX, coluIniData + 5].Value = diesel;
                        ws.Cells[filaIniData + filaX, coluIniData + 5].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + filaX, coluIniData + 6].Value = residual500;
                        ws.Cells[filaIniData + filaX, coluIniData + 6].Style.Numberformat.Format = "#,##0.00";
                        ws.Cells[filaIniData + filaX, coluIniData + 7].Value = residual6;
                        ws.Cells[filaIniData + filaX, coluIniData + 7].Style.Numberformat.Format = "#,##0.00";

                        foreach (var del in det) { data.Remove(del); }
                        z = -1;
                        filaX++;
                    }
                }
                ultimaFila = filaIniData + numDias;
                int ultuFilaData = ultimaFila - 1;
                ultimaColu = coluIniData + 7;

                ws.Cells[ultimaFila, coluIniData].Value = "TOTAL";
                ws.Cells[ultimaFila, coluIniData + 2].Value = tgas;
                ws.Cells[ultimaFila, coluIniData + 2].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[ultimaFila, coluIniData + 3].Value = tbagazo;
                ws.Cells[ultimaFila, coluIniData + 3].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[ultimaFila, coluIniData + 4].Value = tbiogas;
                ws.Cells[ultimaFila, coluIniData + 4].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[ultimaFila, coluIniData + 5].Value = tdiesel;
                ws.Cells[ultimaFila, coluIniData + 5].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[ultimaFila, coluIniData + 6].Value = tresidual500;
                ws.Cells[ultimaFila, coluIniData + 6].Style.Numberformat.Format = "#,##0.00";
                ws.Cells[ultimaFila, coluIniData + 7].Value = tresidual6;
                ws.Cells[ultimaFila, coluIniData + 7].Style.Numberformat.Format = "#,##0.00";

                #region Formato Cuerpo

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila - 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "#FFFFFF");
                UtilExcel.CeldasExcelWrapText(ws, ultimaFila, coluIniData, ultimaFila, coluIniData + 1);
                UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

                #endregion

                #endregion

                #region Grafico



                #region Gaseosos
                var col = 0;
                col = coluIniData + 4;
                miChartG.Series[0].Header = (string)ws.Cells[filaIniData - 1, col, filaIniData - 1, col].Value;
                miChartG.Series[0].Series = ExcelRange.GetAddress(filaIniData, col, ultuFilaData, col);
                miChartG.Series[0].XSeries = ExcelRange.GetAddress(filaIniData, coluIniData + 1, ultuFilaData, coluIniData + 1);

                col = coluIniData + 2;
                miChartG.PlotArea.ChartTypes[2].Series[0].Header = (string)ws.Cells[filaIniData - 1, col, filaIniData - 1, col].Value;
                miChartG.PlotArea.ChartTypes[2].Series[0].Series = ExcelRange.GetAddress(filaIniData, col, ultuFilaData, col);
                miChartG.PlotArea.ChartTypes[2].Series[0].XSeries = ExcelRange.GetAddress(filaIniData, coluIniData + 1, ultuFilaData, coluIniData + 1);
                #endregion

                #region Liquidos

                var colL = 0;

                for (int serie = 0; serie < miChartL.Series.Count; serie++)
                {
                    if (serie == 0) colL = coluIniData + 5;
                    if (serie == 1) colL = coluIniData + 6;
                    if (serie == 2) colL = coluIniData + 7;
                    miChartL.Series[serie].Header = (string)ws.Cells[filaIniData - 1, colL, filaIniData - 1, colL].Value;
                    miChartL.Series[serie].Series = ExcelRange.GetAddress(filaIniData, colL, ultuFilaData, colL);
                    miChartL.Series[serie].XSeries = ExcelRange.GetAddress(filaIniData, coluIniData + 1, ultuFilaData, coluIniData + 1);
                }

                #endregion

                #region Graf Solidos

                var colS = 0;

                colS = coluIniData + 3;
                miChartS.Series[0].Header = (string)ws.Cells[filaIniData - 1, colS, filaIniData - 1, colS].Value;
                miChartS.Series[0].Series = ExcelRange.GetAddress(filaIniData, colS, ultuFilaData, colS);
                miChartS.Series[0].XSeries = ExcelRange.GetAddress(filaIniData, coluIniData + 1, ultuFilaData, coluIniData + 1);

                #endregion

                //ubicaciones
                int filaIniG1 = ultimaFila + 4;
                miChartG.SetPosition(filaIniG1, 0, 1, 0);
                int filaIniG2 = filaIniG1 + 24 + 4;
                miChartL.SetPosition(filaIniG2, 0, 1, 0);
                int filaIniG3 = filaIniG2 + 24 + 4;
                miChartS.SetPosition(filaIniG3, 0, 1, 0);

                #endregion

                #region Texto_Anotacion_3
                string itemR = "";
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "6.1"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "9.1"; }


                string val1_0, val2_0;
                UtilAnexoAPR5.ObtenerSemanasEnRango(fechaInicio, fechaFin, out val1_0, out val2_0);

                string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 1, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + UtilAnexoAPR5.CompletarAnotacion(NotasPieWebInformeSemanal.Cuadro1_Reporte_6p1, val1_0, val2_0));



                string texto1 = UtilAnexoAPR5.EscogerAnotacion(itemR, 2, tipoVistaReporte, tipoDoc);
                int filaTIniG1 = filaIniG1 + 24;
                UtilExcel.FormatoNotaNegrita(ws, filaTIniG1, coluIniData, texto1 + grafG.Subtitle);


                string texto2 = UtilAnexoAPR5.EscogerAnotacion(itemR, 3, tipoVistaReporte, tipoDoc);
                int filaTIniG2 = filaIniG2 + 24;
                UtilExcel.FormatoNotaNegrita(ws, filaTIniG2, coluIniData, texto2 + grafL.Subtitle);


                string texto3 = UtilAnexoAPR5.EscogerAnotacion(itemR, 4, tipoVistaReporte, tipoDoc);
                int filaTIniG3 = filaIniG3 + 24;
                UtilExcel.FormatoNotaNegrita(ws, filaTIniG3, coluIniData, texto3 + grafS.Subtitle);

                #endregion

            }
            else
            {
                miChartG.SetSize(0, 0);
                miChartL.SetSize(0, 0);
                miChartS.SetSize(0, 0);
            }
        }

        /// <summary>
        /// Genera reporte de Consummo de Combustible del SEIN 
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="listaRptDia"></param>
        /// <param name="listaTotal"></param>
        /// <returns></returns>
        public static string ListarReporteConsumoCombustibleSemanalHtml(DateTime fechaInicial, DateTime fechaFinal,
                                        List<MeMedicionxintervaloDTO> listaRptDia, List<MeMedicionxintervaloDTO> listaTotal)
        {
            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table border='1' class='pretty tabla-icono' cellspacing='0' id='tabla'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:60px;'>Semana <br>Operativa</th>");
            strHtml.Append("<th style='width:100px;'>Dia</th>");
            strHtml.Append("<th style='width:100px;'>Gas Natural<br>(Mm3)</th>");
            strHtml.Append("<th style='width:100px;'>Bagazo<br>(Ton)</th>");
            strHtml.Append("<th style='width:100px;'>Biogas<br>(Mm3)</th>");
            strHtml.Append("<th style='width:100px;'>Diesel<br>(m3)</th>");
            strHtml.Append("<th style='width:100px;'>Residual 500<br>(m3)</th>");
            strHtml.Append("<th style='width:100px;'>Residual 6<br>(m3)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            for (var day = fechaInicial; day <= fechaFinal; day = day.AddDays(1))
            {
                var listaFenergXDia = listaRptDia.Where(x => x.Medintfechaini == day).ToList();

                int semN = EPDate.f_numerosemana_y_anho(day).Item1;
                strHtml.Append("<tr>");

                strHtml.AppendFormat("<td>{0}</td>", semN);
                strHtml.AppendFormat("<td>{0}</td>", day.ToString(ConstantesBase.FormatoFechaPE));
                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaFenergXDia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas)?.Medinth1, nfi));
                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaFenergXDia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo)?.Medinth1, nfi));
                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaFenergXDia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas)?.Medinth1, nfi));
                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaFenergXDia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiDiesel)?.Medinth1, nfi));
                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaFenergXDia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500)?.Medinth1, nfi));
                strHtml.AppendFormat("<td>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaFenergXDia.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6)?.Medinth1, nfi));

                strHtml.Append("</tr>");
            }

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th colspan='2'>TOTAL</th>");
            strHtml.AppendFormat("<th>{0}</th>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaTotal.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas)?.Medinth1, nfi));
            strHtml.AppendFormat("<th>{0}</th>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaTotal.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo)?.Medinth1, nfi));
            strHtml.AppendFormat("<th>{0}</th>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaTotal.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas)?.Medinth1, nfi));
            strHtml.AppendFormat("<th>{0}</th>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaTotal.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiDiesel)?.Medinth1, nfi));
            strHtml.AppendFormat("<th>{0}</th>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaTotal.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500)?.Medinth1, nfi));
            strHtml.AppendFormat("<th>{0}</th>", UtilAnexoAPR5.ImprimirValorTotalHtml(listaTotal.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6)?.Medinth1, nfi));
            strHtml.Append("</thead>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            string val1_0, val2_0;
            UtilAnexoAPR5.ObtenerSemanasEnRango(fechaInicial, fechaFinal, out val1_0, out val2_0);
            strHtml.AppendFormat("<div style='margin-top: 15px;'>" + NotasPieWebInformeSemanal.Cuadro1_Reporte_6p1 + "</div>", val1_0, val2_0);

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region K. INTERCAMBIOS INTERNACIONALES

        /// <summary>
        /// Grafico Med96 Intercambio Internacionales Semanal
        /// </summary>
        /// <param name="dataTabla"></param>
        /// <param name="listaFenerg"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoIntercambioInternacionalesSemanal(TablaReporte dataTabla, List<SiFuenteenergiaDTO> listaFenerg)
        {

            GraficoWeb Grafico = new GraficoWeb();

            string titulo1, subtitulo, col1_name, lin1_name, col2_name, lin2_name, columna1, lineas1, columna2, lineas2, yAxisTitle, yAxisTitle1;

            titulo1 = "Intercambios internacionales diarios de energía y potencia";

            string semOp = dataTabla.Leyenda.ListaDescripcion[0].Substring(62);
            subtitulo = NotasPieWebInformeSemanal.Grafico1_Reporte_13p1 + semOp;

            col1_name = "Energía Exportada (MWh)";
            col2_name = "Energía Importada (MWh)";
            lin1_name = "Máxima Demanda Exportada (MW)";
            lin2_name = "Máxima Demanda Importada(MW)";

            columna1 = "column";
            columna2 = "column";
            lineas1 = "spline";
            lineas2 = "spline";

            yAxisTitle = string.Empty;
            yAxisTitle1 = string.Empty;



            Grafico.SeriesData = new decimal?[4][];

            if (dataTabla.ListaRegistros.Count > 0)
            {
                var listaRegistros = dataTabla.ListaRegistros;
                int numRegTotalInterc = listaRegistros.Count() - 1;

                List<string> listaFechas = new List<string>();
                int f = 1;
                foreach (var item in listaRegistros)
                {
                    if (f <= numRegTotalInterc)
                        listaFechas.Add(item.ListaPropiedades[1]);
                    f++;
                }

                Grafico.TitleText = titulo1;
                Grafico.Subtitle = subtitulo;

                Grafico.XAxisTitle = "Dia";
                Grafico.YaxixTitle = "(MWh)";
                Grafico.YaxixTitle2 = "(MW)";

                Grafico.XAxisCategories = new List<string>();
                Grafico.SeriesName = new List<string>();
                Grafico.SeriesType = new List<string>();
                Grafico.SeriesYAxis = new List<int>();

                // Obtener lista de intervalos categoria del grafico  
                var listaDias = listaFechas.Select(x => x).ToList();
                Grafico.XAxisCategories = listaDias;

                // Obtener lista de valores para las series del grafico
                Grafico.Series = new List<RegistroSerie>();
                Grafico.Series.Add(new RegistroSerie());
                Grafico.Series.Add(new RegistroSerie());
                Grafico.Series.Add(new RegistroSerie());
                Grafico.Series.Add(new RegistroSerie());

                var listaFuenteEnergia = listaFenerg;

                for (var nSerie = 0; nSerie < 4; nSerie++)
                {
                    switch (nSerie)
                    {
                        case 0: //Energia Exportada

                            Grafico.Series[nSerie].Name = col1_name;
                            Grafico.Series[nSerie].Type = columna1;
                            Grafico.Series[nSerie].Color = "#C00000";
                            Grafico.Series[nSerie].YAxis = 0;
                            Grafico.Series[nSerie].YAxisTitle = yAxisTitle;
                            Grafico.Series[nSerie].ZIndex = 1;
                            break;
                        case 1: // Máxima Demanda Exportada

                            Grafico.Series[nSerie].Name = lin1_name;
                            Grafico.Series[nSerie].Type = lineas1;
                            Grafico.Series[nSerie].Color = "#0000FF";
                            Grafico.Series[nSerie].YAxis = 1;
                            Grafico.Series[nSerie].YAxisTitle = yAxisTitle1;
                            Grafico.Series[nSerie].ZIndex = 2;
                            break;
                        case 2: // Energía Importada

                            Grafico.Series[nSerie].Name = col2_name;
                            Grafico.Series[nSerie].Type = columna2;
                            Grafico.Series[nSerie].Color = "#00B050";
                            Grafico.Series[nSerie].YAxis = 0;
                            Grafico.Series[nSerie].YAxisTitle = yAxisTitle1;
                            Grafico.Series[nSerie].ZIndex = 1;
                            break;
                        case 3: // Máxima Demanda Importada

                            Grafico.Series[nSerie].Name = lin2_name;
                            Grafico.Series[nSerie].Type = lineas2;
                            Grafico.Series[nSerie].Color = "#D96100";
                            Grafico.Series[nSerie].YAxis = 1;
                            Grafico.Series[nSerie].YAxisTitle = yAxisTitle1;
                            Grafico.Series[nSerie].ZIndex = 2;
                            break;
                    }

                    //Grafico.SeriesData[nSerie] = new decimal?[listaDias.Count];
                    Grafico.SeriesData[nSerie] = new decimal?[listaRegistros.Count - 1];

                    int filaX = 0;
                    foreach (var registro in listaRegistros)
                    {
                        if (filaX < numRegTotalInterc)
                        {
                            decimal? valor = 0;

                            if (nSerie == 0) valor = registro.ListaData[0];
                            if (nSerie == 1) valor = registro.ListaData[1];
                            if (nSerie == 2) valor = registro.ListaData[2];
                            if (nSerie == 3) valor = registro.ListaData[3];

                            Grafico.SeriesData[nSerie][filaX] = valor;

                        }
                        filaX++;
                    }

                }
            }
            return Grafico;
        }

        /// <summary>
        /// Genera el listado web del reporte intercambios internacionales
        /// </summary>
        /// <param name="tablaData"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public static string ListarIntercambioInternacionalesHtml(TablaReporte tablaData, DateTime fechaInicial, DateTime fechaFinal)
        {
            //var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;
            int numReg = registros.Count;
            var regPie = registros.Last();
            registros.RemoveAt(numReg - 1);

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:70px;'>Semana <br>Operativa</th>");
            strHtml.Append("<th style='width:100px;'>Dia</th>");
            strHtml.Append("<th style='width:100px;'>Energía Exportada (MWh)</th>");
            strHtml.Append("<th style='width:100px;'>Máxima Demanda Exportada (MW)</th>");
            strHtml.Append("<th style='width:100px;'>Energía Importada (MWh)</th>");
            strHtml.Append("<th style='width:100px;'>Máxima Demanda Importada(MW)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");
            int f = 0;
            foreach (var reg in registros)
            {
                strHtml.Append("<tr>");

                int m = 0;
                foreach (string propiedad in reg.ListaPropiedades)
                {

                    strHtml.AppendFormat("<td >{0}</td>", propiedad != null ? propiedad : "");
                    m++;
                }

                int c = 0;
                foreach (decimal? col in reg.ListaData)
                {

                    strHtml.AppendFormat("<td class='alignValorCenter'>{0}</td>", col.HasValue ? col.Value.ToString("N") : "");

                    c++;
                }

                strHtml.Append("</tr>");
                f++;


            }

            strHtml.Append("</tbody>");

            #endregion

            #region Pie

            strHtml.Append("<tfoot>");
            strHtml.Append("<tr>");
            strHtml.Append("<td colspan='2'>" + regPie.ListaPropiedades[0] + "</td>");
            strHtml.AppendFormat("<td style='text-align:center;' > {0} </td>", regPie.ListaData[0].HasValue ? regPie.ListaData[0].Value.ToString("N") : "");
            strHtml.AppendFormat("<td style='text-align:center;' > {0} </td>", regPie.ListaData[1].HasValue ? regPie.ListaData[1].Value.ToString("N") : "");
            strHtml.AppendFormat("<td style='text-align:center;' > {0} </td>", regPie.ListaData[2].HasValue ? regPie.ListaData[2].Value.ToString("N") : "");
            strHtml.AppendFormat("<td style='text-align:center;' > {0} </td>", regPie.ListaData[3].HasValue ? regPie.ListaData[3].Value.ToString("N") : "");

            strHtml.Append("</tr>");
            strHtml.Append("</tfoot>");

            #endregion

            strHtml.Append("</table>");

            foreach (var descripcion in tablaData.Leyenda.ListaDescripcion)
            {
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", descripcion);

            }

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera la tabla excel para el reporte de intercambios internacionales
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="tablaData"></param>
        /// <param name="ultimaFilaTabla"></param>
        /// <param name="filaIniD"></param>
        /// <param name="coluIniD"></param>
        public static void GenerarCharExcelReporteIntercambiosInternacionales(ExcelWorksheet ws, FechasPR5 objFecha, TablaReporte tablaData, out int ultimaFilaTabla, out int filaIniD, out int coluIniD)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            ultimaFilaTabla = 0;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo 
            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "27"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "20"; }

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoVistaReporte, tipoDoc, tablaData.ListaItem); //subtitulo
            #endregion

            int filaIniData = 9;
            int coluIniData = 4;

            int ultimaFila;
            int ultimaColu = coluIniData + 5;

            filaIniD = filaIniData - 1;
            coluIniD = coluIniData + 1;

            #region cuerpo

            var registros = tablaData.ListaRegistros;
            int numReg = registros.Count;
            var regPie = registros.Last();
            registros.RemoveAt(numReg - 1);

            int filaX = 0;
            foreach (var reg in registros)
            {
                int colP = 0;
                foreach (string propiedad in reg.ListaPropiedades)
                {
                    ws.Cells[filaIniData + filaX, coluIniData + colP].Value = propiedad;
                    colP++;
                }

                int colD = 0;
                foreach (decimal? col in reg.ListaData)
                {
                    ws.Cells[filaIniData + filaX, coluIniData + colP + colD].Value = col;
                    ws.Cells[filaIniData + filaX, coluIniData + colP + colD].Style.Numberformat.Format = "#,##0.00";

                    colD++;
                }
                filaX++;
            }

            #endregion

            ultimaFila = filaIniData + filaX;

            #region Pie

            ws.Cells[ultimaFila, coluIniData].Value = regPie.ListaPropiedades[0];
            ws.Cells[ultimaFila, coluIniData + 2].Value = regPie.ListaData[0];
            ws.Cells[ultimaFila, coluIniData + 2].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[ultimaFila, coluIniData + 3].Value = regPie.ListaData[1];
            ws.Cells[ultimaFila, coluIniData + 3].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[ultimaFila, coluIniData + 4].Value = regPie.ListaData[2];
            ws.Cells[ultimaFila, coluIniData + 4].Style.Numberformat.Format = "#,##0.00";
            ws.Cells[ultimaFila, coluIniData + 5].Value = regPie.ListaData[3];
            ws.Cells[ultimaFila, coluIniData + 5].Style.Numberformat.Format = "#,##0.00";

            #endregion

            ultimaFilaTabla = ultimaFila;


            #region Formato Cuerpo
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila - 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaFila - 1, ultimaColu, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila - 1, ultimaColu, "Centro");

            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "Centro");

            UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
            UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
            UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "#FFFFFF");
            UtilExcel.CeldasExcelAgrupar(ws, ultimaFila, coluIniData, ultimaFila, coluIniData + 1);

            UtilExcel.BorderCeldas2(ws, filaIniData, coluIniData, ultimaFila, ultimaColu);

            #endregion

            #region Texto_Anotacion_3
            string itemR = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "13.1"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "10.1"; }

            string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 1, tipoVistaReporte, tipoDoc);
            UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniData, texto + tablaData.Leyenda.ListaDescripcion[0]);

            #endregion





        }

        /// <summary>
        /// Genera el grafico en excel para el reporte Intercambios Internacionales
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="graficoIntercambiosInternacionales"></param>
        /// <param name="filaIniGrafico"></param>
        /// <param name="filaIniData"></param>
        /// <param name="coluIniData"></param>
        public static void GenerarCharExcelGraficoIntercambiosInternacionales(ExcelWorksheet ws, FechasPR5 objFecha, GraficoWeb graficoIntercambiosInternacionales, int filaIniGrafico, int filaIniData, int coluIniData)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            var miChart = ws.Drawings["graficoIntercambiosInt"] as ExcelChart;

            GraficoWeb graficoWeb = graficoIntercambiosInternacionales;

            if (graficoWeb.XAxisCategories.Count() > 0)
            {
                int numDias = graficoWeb.XAxisCategories.Count();


                miChart.SetPosition(filaIniGrafico, 0, 2, 0);
                miChart.Title.Text = graficoWeb.TitleText;

                //conectamos data con el grafico
                int avance = 0;
                for (int serie = 0; serie < 2; serie++)
                {
                    if (serie == 0) avance = 0;
                    if (serie == 1) avance = 2;

                    miChart.Series[serie].Header = (string)ws.Cells[filaIniData, coluIniData + 1 + avance].Value;
                    miChart.Series[serie].Series = ExcelRange.GetAddress(filaIniData + 1, coluIniData + 1 + avance, filaIniData + numDias, coluIniData + 1 + avance);
                    miChart.Series[serie].XSeries = ExcelRange.GetAddress(filaIniData + 1, coluIniData, filaIniData + numDias, coluIniData);
                }

                for (int serie = 2; serie < 4; serie++)
                {
                    if (serie == 2) avance = 1;
                    if (serie == 3) avance = 3;

                    miChart.PlotArea.ChartTypes[2].Series[serie - 2].Header = (string)ws.Cells[filaIniData, coluIniData + 1 + avance].Value;
                    miChart.PlotArea.ChartTypes[2].Series[serie - 2].Series = ExcelRange.GetAddress(filaIniData + 1, coluIniData + 1 + avance, filaIniData + numDias, coluIniData + 1 + avance);
                    miChart.PlotArea.ChartTypes[2].Series[serie - 2].XSeries = ExcelRange.GetAddress(filaIniData + 1, coluIniData, filaIniData + numDias, coluIniData);
                }

                #region Texto_Anotacion_3
                string itemR = "";
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "13.1"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "10.1"; }

                string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 2, tipoVistaReporte, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaIniGrafico + 26 + 5, coluIniData - 1, texto + graficoWeb.Subtitle);

                #endregion
            }
            else
            {
                miChart.SetSize(0, 0);
            }

        }

        #endregion

        #region L. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO

        /// <summary>
        /// ObtenerReporteEventoYFalla
        /// </summary>
        /// <param name="listaEventos"></param>
        /// <param name="lstCausas"></param>
        /// <param name="listaFamilia"></param>
        /// <param name="listaFallaXFamilia"></param>
        public static void ObtenerReporteEventoYFalla(List<EventoDTO> listaEventos, ref List<EveCausaeventoDTO> lstCausas,
                                            out List<EqFamiliaDTO> listaFamilia, out List<GenericoDTO> listaFallaXFamilia)
        {
            //grafico Fallas por Tipo de Causa
            foreach (var causas in lstCausas)
            {
                var eventos = listaEventos.Where(x => x.Causaevencodi == causas.Causaevencodi);
                causas.Total = eventos.Count();
            }

            //grafico ENERGIA INTERRUMPIDA APROXIMADA POR TIPO DE EQUIPO (MWh)
            listaFamilia = listaEventos.GroupBy(x => x.FAMCODI)
                                .Select(x => new EqFamiliaDTO()
                                {
                                    Famcodi = x.Key.Value,
                                    Famnomb = x.First().FAMNOMB,
                                    TotalXFamcodi = x.Count(),
                                    TotalEnergia = x.Sum(y => y.ENERGIAINTERRUMPIDA)
                                }).OrderBy(x => x.Famnomb).ToList();

            var regFamTotal = new EqFamiliaDTO() { Famcodi = 0, Famnomb = "TOTAL" };
            regFamTotal.TotalXFamcodi = listaEventos.Count;
            regFamTotal.TotalEnergia = listaEventos.Sum(y => y.ENERGIAINTERRUMPIDA);
            listaFamilia.Add(regFamTotal);

            //gráfico 
            listaFallaXFamilia = new List<GenericoDTO>();

            foreach (var itemCausa in lstCausas)
            {
                foreach (var itemFam in listaFamilia)
                {
                    var total = listaEventos.Count(x => x.FAMCODI == itemFam.Famcodi && x.Causaevencodi == itemCausa.Causaevencodi);
                    if (itemFam.Famcodi == 0) total = listaEventos.Count(x => x.Causaevencodi == itemCausa.Causaevencodi);
                    listaFallaXFamilia.Add(new GenericoDTO()
                    {
                        Entero1 = itemCausa.Causaevencodi,
                        Entero2 = itemFam.Famcodi,
                        Entero3 = total
                    });
                }
            }
        }

        /// <summary>
        /// Genera el listado de numero de fallas y energia interrumpida para el reporte FallasCier
        /// </summary>
        /// <param name="tablaData"></param>
        /// <returns></returns>
        public static string GenerarRHtmlFallasXFamiliaYCausa(TablaReporte tablaData)
        {
            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;
            int numcolumns = dataCab.GetLength(1);

            StringBuilder strHtml = new StringBuilder();
            NumberFormatInfo nfi0 = UtilAnexoAPR5.GenerarNumberFormatInfo0();
            NumberFormatInfo nfi2 = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 1190px;'>");
            strHtml.Append("<table id='reporte' class='pretty tabla-icono' style='width: 1190px;'>");

            #region cabecera

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.AppendFormat("<th rowspan='2' style='width: 300px;'>{0}</th>", dataCab[0, 0]);
            for (int i = 1; i < numcolumns - 2; i++)
            {
                strHtml.AppendFormat("<th style='width: 75px; height: 30px; word-wrap: break-word; white-space: normal'>{0}</th>", dataCab[0, i]);
            }
            strHtml.AppendFormat("<th rowspan='2' style=''>{0}</th>", dataCab[0, numcolumns - 2]);
            strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[0, numcolumns - 1].Replace("\n", "<br>"));
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int i = 1; i < numcolumns - 2; i++)
            {
                strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, i]);
            }
            strHtml.AppendFormat("<th style='width:100px;'>{0}</th>", dataCab[1, numcolumns - 1]);
            strHtml.Append("</tr>");

            #endregion

            #region cuerpo

            strHtml.Append("<tbody>");
            int f = 0;
            foreach (var reg in registros.Where(x => !x.EsFilaResumen).ToList())
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;'>{0}</td>", reg.Nombre);

                int c = 1;
                foreach (decimal? col in reg.ListaData)
                {
                    if (c != numcolumns - 1)
                        strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(col > 0 ? col : null, nfi0));
                    else
                        strHtml.AppendFormat("<td class='alignValorRight' >{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(col.HasValue ? col : null, nfi2));

                    c++;
                }

                strHtml.Append("</tr>");
                f++;
            }
            strHtml.Append("</tbody>");

            strHtml.Append("<tfoot>");
            f = 0;
            foreach (var reg in registros.Where(x => x.EsFilaResumen).ToList())
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='padding-left: 5px;text-align: left;'>{0}</td>", reg.Nombre);

                int c = 1;
                foreach (decimal? col in reg.ListaData)
                {
                    if (c != numcolumns - 1)
                        strHtml.AppendFormat("<td class='alignValorRight'>{0}</td>", UtilAnexoAPR5.ImprimirValorTotalOcultar0Html(col > 0 ? col : null, nfi0));
                    else
                        strHtml.AppendFormat("<td class='alignValorRight' >{0}</td>", UtilAnexoAPR5.ImprimirValorTotalHtml(col.HasValue ? col : null, nfi2));

                    c++;
                }

                strHtml.Append("</tr>");
                f++;
            }
            strHtml.Append("</tfoot>");

            strHtml.Append("</table>");

            #endregion

            foreach (var descripcion in tablaData.Leyenda.ListaDescripcion)
            {
                strHtml.AppendFormat("<div style='margin-top: 15px;'>{0}</div>", descripcion);
            }
            strHtml.Append("</div>");

            return strHtml.ToString();
        }

        /// <summary>
        /// ObtenerDataTablaFalla
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="lstCausas"></param>
        /// <param name="listaFamilia"></param>
        /// <param name="listaFallaXFamilia"></param>
        /// <returns></returns>
        public static TablaReporte ObtenerDataTablaFalla(FechasPR5 objFecha, List<EveCausaeventoDTO> lstCausas, List<EqFamiliaDTO> listaFamilia, List<GenericoDTO> listaFallaXFamilia)
        {
            TablaReporte tabla = new TablaReporte();
            tabla.ReptiCodiTabla = objFecha.TipoReporte;
            CabeceraReporte cabRepo = new CabeceraReporte();

            int numCol = 1 + lstCausas.Count + 1 + 1;
            int numFil = 1 + 1 + listaFamilia.Count + 1;
            string[,] matrizCabecera = new string[numFil, numCol];

            #region cabecera

            var col = 0;
            matrizCabecera[0, col] = "TIPO DE EQUIPO";
            col++;
            foreach (var causas in lstCausas)
            {
                matrizCabecera[0, col] = causas.Causaevendesc;
                matrizCabecera[1, col] = causas.Causaevenabrev;
                col++;
            }
            matrizCabecera[0, col] = "TOTAL";
            col++;
            matrizCabecera[0, col] = "ENERGÍA INTERRUMPIDA \n APROXIMADA";
            matrizCabecera[1, col] = "MWh";

            cabRepo.CabeceraData = matrizCabecera;
            tabla.Cabecera = cabRepo;

            #endregion

            #region cuerpo

            List<RegistroReporte> registros = new List<RegistroReporte>();

            foreach (var familia in listaFamilia)
            {
                RegistroReporte registro = new RegistroReporte();
                List<decimal?> datos = new List<decimal?>();

                foreach (var causas in lstCausas)
                {
                    var regTotal = listaFallaXFamilia.Find(x => x.Entero2 == familia.Famcodi && x.Entero1 == causas.Causaevencodi);
                    datos.Add(regTotal?.Entero3);
                }
                datos.Add(familia.TotalXFamcodi);
                datos.Add(familia.TotalEnergia);

                registro.Nombre = familia.Famnomb;
                registro.ListaData = datos;
                registro.EsFilaResumen = familia.Famcodi == 0;

                registros.Add(registro);
            }


            #endregion

            #region Pie

            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();

            if (objFecha.EsReporteXMes) // reporte  mensual
            {
                var nomMes = EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaIni.Month).ToLower();
                var anio = objFecha.AnioAct.RangoAct_FechaIni.Year;
                lstPie.Add(string.Format(NotasPieWebInformeMensual.Cuadro1_Reporte_7p1, objFecha.AnioAct.RangoAct_NumYAnio.ToLower()));
            }
            else // reportes semanales
            {
                lstPie.Add(string.Format(NotasPieWebInformeSemanal.Cuadro1_Reporte_14p1, objFecha.AnioAct.RangoAct_NumYAnio));
            }

            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;

            #endregion

            tabla.ListaRegistros = registros;

            return tabla;
        }

        /// <summary>
        /// Genera grafico web de fallas segun sus causas
        /// </summary>
        /// <param name="lstCausas"></param>
        /// <returns></returns>
        public static GraficoWeb GenerarGWebFallasXCausa(List<EveCausaeventoDTO> lstCausas)
        {
            GraficoWeb graficoWeb = new GraficoWeb();

            if (lstCausas.Any())
            {
                graficoWeb = new GraficoWeb
                {
                    Subtitle = NotasPieWebInformeSemanal.Grafico1_Reporte_14p1,
                    TitleText = "FALLAS  POR TIPO DE CAUSA",
                    Type = "pie",
                    TooltipPointFormat = "{series.name}'",
                    PlotOptionsFormat = "{point.name}"
                };

                var serieData = new DatosSerie[lstCausas.Count];

                var indexS = 0;
                foreach (var causas in lstCausas)
                {
                    serieData[indexS] = new DatosSerie()
                    {
                        Name = causas.Causaevenabrev,
                        Y = causas.Total
                    };
                    indexS++;
                }
                graficoWeb.SerieData = serieData.OrderByDescending(x => x.Y).ToArray();
            }

            return graficoWeb;
        }

        /// <summary>
        /// Genera grafico web de fallas segun familia
        /// </summary>
        /// <param name="lstCausas"></param>
        /// <param name="listaFamilia"></param>
        /// <param name="listaFallaXFamilia"></param>
        /// <returns></returns>
        public static GraficoWeb GenerarGWebFallasXFamilia(List<EveCausaeventoDTO> lstCausas, List<EqFamiliaDTO> listaFamilia, List<GenericoDTO> listaFallaXFamilia)
        {
            GraficoWeb graficoWeb = new GraficoWeb();
            if (listaFallaXFamilia.Any())
            {
                graficoWeb = new GraficoWeb
                {
                    Subtitle = NotasPieWebInformeSemanal.Grafico2_Reporte_14p1,
                    TitleText = "FALLAS POR TIPO  DE EQUIPO",
                    XAxisCategories = listaFamilia.Select(x => x.Famnomb).ToList(),
                    YAxixTitle = new List<string> { "N Fallas" },
                    YaxixLabelsFormat = "{value}",
                    TooltipValueSuffix = "",
                    PlotOptionsDataLabelsDigit = 0,
                    SerieData = new DatosSerie[lstCausas.Count()]
                };

                var indexS = 0;
                foreach (var causa in lstCausas)
                {
                    graficoWeb.SerieData[indexS] = new DatosSerie { Name = causa.Causaevenabrev, Data = new decimal?[listaFamilia.Count()] };
                    var indexD = 0;
                    foreach (var familia in listaFamilia)
                    {
                        var regTotal = listaFallaXFamilia.Find(x => x.Entero2 == familia.Famcodi && x.Entero1 == causa.Causaevencodi);
                        graficoWeb.SerieData[indexS].Data[indexD] = regTotal?.Entero3;
                        indexD++;
                    }

                    indexS++;
                }
            }
            return graficoWeb;
        }

        /// <summary>
        /// Genera grafico web de energia interrumpida agrupados por familia
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaFamilia"></param>
        /// <returns></returns>
        public static GraficoWeb GenerarGWebEnergiaInterrumpidaXFamilia(FechasPR5 objFecha, List<EqFamiliaDTO> listaFamilia)
        {
            GraficoWeb graficoWeb = new GraficoWeb();
            if (listaFamilia.Any())
            {
                var subtitulo = "";

                if (objFecha.EsReporteXMes) // reporte  mensual
                {
                    subtitulo = string.Format(NotasPieWebInformeMensual.Grafico3_Reporte_7p1, objFecha.AnioAct.RangoAct_NumYAnio);
                }
                else // reportes semanales
                {
                    subtitulo = string.Format(NotasPieWebInformeSemanal.Grafico3_Reporte_14p1, objFecha.AnioAct.RangoAct_NumYAnio);
                }

                graficoWeb = new GraficoWeb
                {

                    Subtitle = subtitulo,
                    Type = "column",
                    TitleText = "ENERGIA INTERRUMPIDA APROXIMADA POR TIPO DE EQUIPO (MWh)",
                    XAxisCategories = listaFamilia.Select(x => x.Famnomb).ToList(),
                    YaxixTitle = "ENERGIA INTERRUMPIDA MWh",
                    TooltipValueSuffix = " MWh",
                    YaxixLabelsFormat = " MWh",
                    SerieData = new DatosSerie[1]
                };

                graficoWeb.SerieData[0] = new DatosSerie { Name = "Energia Interrumpida", Data = new decimal?[listaFamilia.Count()] };
                int indexD = 0;
                foreach (var familia in listaFamilia)
                {
                    graficoWeb.SerieData[0].Data[indexD] = familia.TotalEnergia;
                    indexD++;
                }
            }

            return graficoWeb;
        }

        /// <summary>
        /// Generar el listado y los graficos para el excel del reporte FllasCier
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaItem"></param>
        /// <param name="tablaData"></param>
        /// <param name="graficoEveFallaXTipo"></param>
        /// <param name="graficoEveFallaXFam"></param>
        /// <param name="graficoEveEnergXFam"></param>
        public static void GenerarChartExcelListadoYGraficoFallaTipoEquipoCausa(ExcelWorksheet ws, FechasPR5 objFecha, List<ItemMenuNumeral> listaItem,
                                                    TablaReporte tablaData, GraficoWeb graficoEveFallaXTipo, GraficoWeb graficoEveFallaXFam, GraficoWeb graficoEveEnergXFam)
        {
            string tipoExportacion = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo            
            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "28"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "21"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) { orden = "16"; }


            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoExportacion, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoExportacion, tipoDoc, listaItem); //subtitulo

            #endregion

            int filaIniTipoEquipo = 8;
            int coluIniTipoEquipo = 3;

            int ultimaFila;
            int ultimaColu;

            var dataCab = tablaData.Cabecera.CabeceraData;
            var registros = tablaData.ListaRegistros;
            int numcolumns = dataCab.GetLength(1);
            int totalFamilia = tablaData.ListaRegistros.Count - 1;
            int totalCausa = numcolumns - 3;

            #region cabecera            

            ws.Cells[filaIniTipoEquipo, coluIniTipoEquipo].Value = dataCab[0, 0];
            int nCausa = 0;
            for (int i = 1; i < numcolumns - 2; i++)
            {
                ws.Cells[filaIniTipoEquipo, coluIniTipoEquipo + 1 + nCausa].Value = dataCab[0, i];
                nCausa++;
            }
            ws.Cells[filaIniTipoEquipo, coluIniTipoEquipo + 1 + nCausa].Value = dataCab[0, numcolumns - 2];
            ws.Cells[filaIniTipoEquipo, coluIniTipoEquipo + 1 + nCausa + 1].Value = dataCab[0, numcolumns - 1];
            nCausa = 0;
            for (int i = 1; i < numcolumns - 2; i++)
            {
                ws.Cells[filaIniTipoEquipo + 1, coluIniTipoEquipo + 1 + nCausa].Value = dataCab[1, i];
                nCausa++;
            }
            ws.Cells[filaIniTipoEquipo + 1, coluIniTipoEquipo + 1 + nCausa + 1].Value = dataCab[1, numcolumns - 1];
            ultimaColu = coluIniTipoEquipo + 1 + nCausa + 1;

            #region Formato Cabecera
            ws.Row(filaIniTipoEquipo).Height = 65;
            ws.Row(filaIniTipoEquipo + 1).Height = 25;
            ws.Column(coluIniTipoEquipo).Width = 28;
            for (int i = coluIniTipoEquipo + 1; i <= coluIniTipoEquipo + numcolumns - 1; i++)
            {
                ws.Column(i).Width = 16;
            }
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, 9);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, coluIniTipoEquipo);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniTipoEquipo, coluIniTipoEquipo + 1 + nCausa, filaIniTipoEquipo + 1, coluIniTipoEquipo + 1 + nCausa);
            UtilExcel.CeldasExcelWrapText(ws, filaIniTipoEquipo, coluIniTipoEquipo + 1, filaIniTipoEquipo, ultimaColu - 2);
            UtilExcel.CeldasExcelWrapText(ws, filaIniTipoEquipo, ultimaColu, filaIniTipoEquipo, ultimaColu);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "Centro");
            UtilExcel.CeldasExcelEnNegrita(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu);
            UtilExcel.CeldasExcelColorFondo(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "#4472C4");
            UtilExcel.CeldasExcelColorTexto(ws, filaIniTipoEquipo, coluIniTipoEquipo, filaIniTipoEquipo + 1, ultimaColu, "#FFFFFF");
            #endregion

            #endregion

            //al menos un tipo de equipo además de la fila total
            if (registros.Count > 1)
            {
                #region Cuerpo

                int filaX = 0;
                foreach (var reg in registros)
                {
                    ws.Cells[filaIniTipoEquipo + 2 + filaX, coluIniTipoEquipo].Value = reg.Nombre;

                    int coluX = 0;
                    foreach (decimal? col in reg.ListaData)
                    {
                        if (col > 0)
                            ws.Cells[filaIniTipoEquipo + 2 + filaX, coluIniTipoEquipo + 1 + coluX].Value = col;

                        coluX++;
                    }
                    ws.Cells[filaIniTipoEquipo + 2 + filaX, coluIniTipoEquipo + 1 + coluX].Style.Numberformat.Format = "#,##0.00";

                    filaX++;
                }

                ultimaFila = filaIniTipoEquipo + 2 + registros.Count - 1;

                #region Formato Cuerpo
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniTipoEquipo + 2, coluIniTipoEquipo, ultimaFila - 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, 8);
                UtilExcel.CeldasExcelEnNegrita(ws, filaIniTipoEquipo + 2, coluIniTipoEquipo, ultimaFila - 1, coluIniTipoEquipo);
                UtilExcel.CeldasExcelEnNegrita(ws, filaIniTipoEquipo + 2, ultimaColu - 1, ultimaFila - 1, ultimaColu);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniTipoEquipo + 2, coluIniTipoEquipo + 1, ultimaFila - 1, ultimaColu, "Centro");
                #endregion

                #endregion

                #region Pie

                #region Formato Pie

                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniTipoEquipo, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, 9);
                UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniTipoEquipo, ultimaFila, ultimaColu);
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, ultimaFila, coluIniTipoEquipo + 1, ultimaFila, ultimaColu, "Centro");
                #endregion

                #endregion

                UtilExcel.BorderCeldas2(ws, filaIniTipoEquipo, coluIniTipoEquipo, ultimaFila, ultimaColu);


                string itemR = "";
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { itemR = "14.1"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { itemR = "11.1"; }
                if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) { itemR = "7.1"; }

                #region Texto_Anotacion_3


                string texto = UtilAnexoAPR5.EscogerAnotacion(itemR, 1, tipoExportacion, tipoDoc);
                string textoDesc = tablaData.Leyenda.ListaDescripcion[0];
                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniTipoEquipo, texto + textoDesc);

                #endregion

                //Gráficos

                int filaInicialGraficos = ultimaFila + 4;

                string textoDesc1 = graficoEveFallaXTipo.Subtitle;
                string textoDesc2 = graficoEveFallaXFam.Subtitle;
                string textoDesc3 = graficoEveEnergXFam.Subtitle;

                var chartXCausa = ws.Drawings["grafFallasPorCausa"] as ExcelPieChart;
                var chartXEquipo = ws.Drawings["grafFallasPorEquipo"] as ExcelChart;
                var chartEnergiaAp = ws.Drawings["grafEnergiaAprox"] as ExcelChart;

                chartXCausa.SetPosition(filaInicialGraficos, 0, 2, 0);
                chartXCausa.SetSize(530, 320);

                #region Texto_Anotacion_3
                string texto1 = UtilAnexoAPR5.EscogerAnotacion(itemR, 2, tipoExportacion, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaInicialGraficos + 17, 3, texto1 + textoDesc1);
                #endregion

                chartXEquipo.SetPosition(filaInicialGraficos, 0, 7, 0);
                chartXEquipo.SetSize(530, 320);

                #region Texto_Anotacion_3
                string texto2 = UtilAnexoAPR5.EscogerAnotacion(itemR, 3, tipoExportacion, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaInicialGraficos + 17, 8, texto2 + textoDesc2);
                #endregion

                chartEnergiaAp.SetPosition(filaInicialGraficos + 20, 0, 2, 0);
                chartEnergiaAp.SetSize(1200, 320);

                #region Texto_Anotacion_3
                string texto3 = UtilAnexoAPR5.EscogerAnotacion(itemR, 4, tipoExportacion, tipoDoc);
                UtilExcel.FormatoNotaNegrita(ws, filaInicialGraficos + 20 + 17, 3, texto3 + textoDesc3);
                #endregion

                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(chartXCausa);
                var ran1 = ws.Cells[5, 5, 6, 6]; //aleatorio
                var ran2 = ws.Cells[5, 5, 6, 6]; //aleatorio            
                chartXCausa.Series.Add(ran1, ran2);
                chartXCausa.Series[0].Series = ExcelRange.GetAddress(filaIniTipoEquipo + 2 + totalFamilia, coluIniTipoEquipo + 1, filaIniTipoEquipo + 2 + totalFamilia, ultimaColu - 2);
                chartXCausa.Series[0].XSeries = ExcelRange.GetAddress(filaIniTipoEquipo + 1, coluIniTipoEquipo + 1, filaIniTipoEquipo + 1, ultimaColu - 2);
                chartXCausa.DataLabel.ShowLeaderLines = true;
                chartXCausa.DataLabel.ShowLegendKey = true;


                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(chartXEquipo);
                for (int i = 0; i < totalCausa; i++) //creamos series
                {
                    chartXEquipo.Series.Add(ran1, ran2);
                }
                for (int anio = 0; anio < totalCausa; anio++)
                {
                    chartXEquipo.Series[anio].Series = ExcelRange.GetAddress(filaIniTipoEquipo + 2, coluIniTipoEquipo + 1 + anio, ultimaFila - 1, coluIniTipoEquipo + 1 + anio);
                    chartXEquipo.Series[anio].XSeries = ExcelRange.GetAddress(filaIniTipoEquipo + 2, coluIniTipoEquipo, ultimaFila - 1, coluIniTipoEquipo);
                    chartXEquipo.Series[anio].Header = (string)ws.Cells[filaIniTipoEquipo + 1, coluIniTipoEquipo + 1 + anio].Value;
                }


                UtilAnexoAPR5.EliminarAllSeriesDelGrafico(chartEnergiaAp);
                chartEnergiaAp.Series.Add(ran1, ran2);
                chartEnergiaAp.Series[0].Series = ExcelRange.GetAddress(filaIniTipoEquipo + 2, ultimaColu, ultimaFila - 1, ultimaColu);
                chartEnergiaAp.Series[0].XSeries = ExcelRange.GetAddress(filaIniTipoEquipo + 2, coluIniTipoEquipo, ultimaFila - 1, coluIniTipoEquipo);
            }
            else
            {
                var chartXCausa = ws.Drawings["grafFallasPorCausa"] as ExcelPieChart;
                var chartXEquipo = ws.Drawings["grafFallasPorEquipo"] as ExcelChart;
                var chartEnergiaAp = ws.Drawings["grafEnergiaAprox"] as ExcelChart;

                chartXCausa.SetSize(0, 0);
                chartXEquipo.SetSize(0, 0);
                chartEnergiaAp.SetSize(0, 0);
            }

        }

        #endregion

        #region M. PERFIL DE TENSIONES EN BARRAS DEL SEIN

        /// <summary>
        /// Generar Grafico en el excel para el reporte Tension Barras
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="lista"></param>
        /// <param name="red"></param>
        public static void GenerarCharExcelGraficoTensionBarras(ExcelWorksheet ws, FechasPR5 objFecha, List<TensionBarras> lista, int red)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;
            DateTime fecIni = objFecha.FechaInicial;
            DateTime fecFin = objFecha.FechaFinal;

            int filaIniPerfil = 8;
            int coluIniPerfil = 3;

            var numPtos = lista.Count;
            string nombChar = "";
            switch (red)
            {
                case 500: nombChar = "graficoTB500"; break;
                case 220: nombChar = "graficoTB220"; break;
                case 138: nombChar = "graficoTB138"; break;
            }
            var miChart = ws.Drawings[nombChar] as ExcelChart;
            //miChart.SetPosition(17, 0, 2, 0);
            //miChart.SetSize(1900, 420);
            if (numPtos > 0)
            {

                for (int serie = 0; serie < 3; serie++)
                {
                    miChart.Series[serie].Header = (string)ws.Cells[filaIniPerfil + 2 + serie, coluIniPerfil, filaIniPerfil + 2 + serie, coluIniPerfil].Value;
                    miChart.Series[serie].Series = ExcelRange.GetAddress(filaIniPerfil + 2 + serie, coluIniPerfil + 1, filaIniPerfil + 2 + serie, coluIniPerfil + 1 + numPtos - 1);
                    miChart.Series[serie].XSeries = ExcelRange.GetAddress(filaIniPerfil + 1 + serie, coluIniPerfil + 1, filaIniPerfil + 1 + serie, coluIniPerfil + 1 + numPtos - 1);
                }

                #region Texto_Anotacion_3
                string nr1 = "";
                string nr2 = "";
                if (red == 500) { nr1 = "9.1"; nr2 = NotasPieWebInformeSemanal.Grafico1_Reporte_9p1; }
                if (red == 220) { nr1 = "9.2"; nr2 = NotasPieWebInformeSemanal.Grafico1_Reporte_9p2; }
                if (red == 138) { nr1 = "9.3"; nr2 = NotasPieWebInformeSemanal.Grafico1_Reporte_9p3; }
                string semI, semF;
                UtilAnexoAPR5.ObtenerSemanasEnRango(fecIni, fecFin, out semI, out semF);

                string texto = UtilAnexoAPR5.EscogerAnotacion(nr1, 2, tipoVistaReporte, tipoDoc);

                UtilExcel.FormatoNotaNegrita(ws, 41, coluIniPerfil, texto + UtilAnexoAPR5.CompletarAnotacion(nr2, semI, semF));

                #endregion

            }
            else
            {

                miChart.SetSize(0, 0);
            }

        }

        /// <summary>
        /// Generar Tabla del excel para el reporte Tension  Barras 
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="lista"></param>
        /// <param name="red"></param>
        /// <param name="listaItem"></param>
        public static void GenerarCharExcelListadoTensionBarras(ExcelWorksheet ws, FechasPR5 objFecha, List<TensionBarras> lista, int red, List<ItemMenuNumeral> listaItem)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            DateTime fecIni = objFecha.FechaInicial;
            DateTime fecFin = objFecha.FechaFinal;

            int filaIniPerfil = 8;
            int coluIniPerfil = 3;

            int ultimaFila;
            int ultimaColu;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region Titulo y subtitulo
            string nr = "";
            if (red == 500) nr = "22";
            if (red == 220) nr = "23";
            if (red == 138) nr = "24";

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(nr, 0, tipoVistaReporte, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(nr, 1, tipoVistaReporte, tipoDoc, listaItem); //subtitulo
            #endregion

            #region Cabecera

            //ws.Cells[filaIniPerfil + 1, coluIniPerfil + 1].Value = " MÁXIMA ";
            var numPtos = lista.Count;
            for (int i = 0; i < numPtos; i++)
            {
                ws.Cells[filaIniPerfil + 1, coluIniPerfil + 1 + i].Value = " " + lista[i].Ptomedidesc;

            }
            ultimaColu = numPtos == 0 ? coluIniPerfil + 1 : coluIniPerfil + 1 + numPtos - 1;

            #region Formato Cabecera
            if (numPtos > 1)
            {
                int c = 0;
                foreach (var item in lista)
                {
                    ws.Column(coluIniPerfil + 1 + c).Width = 20;
                    c++;
                }
                for (int i = 1; i < numPtos; i++)
                {
                    //ws.Cells[filaIniPerfil + 1, coluIniPerfil + 1 + i].Value = lista[i].Ptomedidesc;
                    UtilExcel.CeldasExcelColorFondo(ws, filaIniPerfil + 1, coluIniPerfil + 1 + i, filaIniPerfil + 1, coluIniPerfil + 1 + i, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
                    UtilExcel.CeldasExcelColorTexto(ws, filaIniPerfil + 1, coluIniPerfil + 1 + i, filaIniPerfil + 1, coluIniPerfil + 1 + i, "#FFFFFF");
                }
            }

            UtilExcel.BorderCeldas2(ws, filaIniPerfil, coluIniPerfil + 1, filaIniPerfil + 1, ultimaColu);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniPerfil, coluIniPerfil, filaIniPerfil + 1, ultimaColu, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniPerfil, coluIniPerfil, filaIniPerfil + 1, ultimaColu, "Centro");
            UtilExcel.CeldasExcelEnNegrita(ws, filaIniPerfil, coluIniPerfil, filaIniPerfil + 1, ultimaColu);
            UtilExcel.CeldasExcelWrapText(ws, filaIniPerfil, coluIniPerfil, filaIniPerfil + 1, ultimaColu);
            UtilExcel.CeldasExcelAgrupar(ws, filaIniPerfil, coluIniPerfil + 1, filaIniPerfil, ultimaColu);

            #endregion

            #endregion

            if (lista.Any())
            {
                #region cuerpo

                ws.Cells[filaIniPerfil + 2, coluIniPerfil].Value = "Máxima";
                int col = 0;
                foreach (var arr in lista)
                {
                    ws.Cells[filaIniPerfil + 2, coluIniPerfil + 1 + col].Value = arr.ValorMax;
                    ws.Cells[filaIniPerfil + 2, coluIniPerfil + 1 + col].Style.Numberformat.Format = "#,##0.00";
                    col++;
                }
                ws.Cells[filaIniPerfil + 3, coluIniPerfil].Value = "Media";
                col = 0;
                foreach (var arr in lista)
                {
                    ws.Cells[filaIniPerfil + 3, coluIniPerfil + 1 + col].Value = arr.ValorMed;
                    ws.Cells[filaIniPerfil + 3, coluIniPerfil + 1 + col].Style.Numberformat.Format = "#,##0.00";
                    col++;
                }
                ws.Cells[filaIniPerfil + 4, coluIniPerfil].Value = "Mínima";
                col = 0;
                foreach (var arr in lista)
                {
                    ws.Cells[filaIniPerfil + 4, coluIniPerfil + 1 + col].Value = arr.ValorMin;
                    ws.Cells[filaIniPerfil + 4, coluIniPerfil + 1 + col].Style.Numberformat.Format = "#,##0.00";
                    col++;
                }
                ultimaFila = filaIniPerfil + 4;

                #region Formato Cuerpo
                UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniPerfil + 2, coluIniPerfil, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniPerfil + 2, coluIniPerfil, ultimaFila, ultimaColu, "Centro");
                UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniPerfil + 2, coluIniPerfil, ultimaFila, ultimaColu, "Arial", 12);
                UtilExcel.CeldasExcelEnNegrita(ws, filaIniPerfil + 2, coluIniPerfil, ultimaFila, coluIniPerfil);
                UtilExcel.BorderCeldas2(ws, filaIniPerfil + 2, coluIniPerfil, ultimaFila, ultimaColu);
                #endregion

                #region Texto_Anotacion_3
                string nr2 = "";
                string nr1 = "";
                string semI, semF;

                if (red == 500) { nr2 = "9.1"; nr1 = NotasPieWebInformeSemanal.Cuadro1_Reporte_9p1; }
                if (red == 220) { nr2 = "9.2"; nr1 = NotasPieWebInformeSemanal.Cuadro1_Reporte_9p2; }
                if (red == 138) { nr2 = "9.3"; nr1 = NotasPieWebInformeSemanal.Cuadro1_Reporte_9p3; }

                UtilAnexoAPR5.ObtenerSemanasEnRango(fecIni, fecFin, out semI, out semF);

                string texto = UtilAnexoAPR5.EscogerAnotacion(nr2, 1, tipoVistaReporte, tipoDoc);

                UtilExcel.FormatoNotaNegrita(ws, ultimaFila + 1, coluIniPerfil, texto + UtilAnexoAPR5.CompletarAnotacion(nr1, semI, semF));

                #endregion

                #endregion
            }
        }

        #region M.  PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 500kV, 22KV Y 138KV

        /// <summary>
        /// Grafico Med48 Tension Barra Semanal
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="red"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="lstGrafico"></param>
        /// <returns></returns>
        public static GraficoWeb GraficoMedi48TensionBarraSemanal(List<TensionBarras> lista, int red, DateTime fechaInicial, DateTime fechaFinal, out List<SerieDuracionCarga> lstGrafico)
        {
            lstGrafico = new List<SerieDuracionCarga>();
            GraficoWeb grafico = new GraficoWeb();
            string titulo1;
            //grafico = grafico;

            #region grafico 01



            List<string> categories = new List<string>();
            List<SerieDuracionCarga> series = new List<SerieDuracionCarga>();
            if (lista.Any())
            {
                string nr2 = "";
                if (red == 500) nr2 = NotasPieWebInformeSemanal.Grafico1_Reporte_9p1;
                if (red == 220) nr2 = NotasPieWebInformeSemanal.Grafico1_Reporte_9p2;
                if (red == 138) nr2 = NotasPieWebInformeSemanal.Grafico1_Reporte_9p3;
                string semI, semF;
                UtilAnexoAPR5.ObtenerSemanasEnRango(fechaInicial, fechaFinal, out semI, out semF);

                for (int i = 0; i < lista.Count; i++)
                {
                    categories.Add(lista[i].Ptomedidesc);
                }
                grafico.XAxisCategories = categories;
                grafico.Subtitle = string.Format(nr2, semI, semF);

                List<decimal?> lstMax = new List<decimal?>();
                List<decimal?> lstMed = new List<decimal?>();
                List<decimal?> lstMin = new List<decimal?>();
                foreach (var pto in lista)
                {
                    lstMax.Add(pto.ValorMax);
                    lstMed.Add(pto.ValorMed);
                    lstMin.Add(pto.ValorMin);
                }

                series.Add(AddSerieTensionBarraSemanalGraf01(lstMax, "blue", "Maxima"));
                series.Add(AddSerieTensionBarraSemanalGraf01(lstMed, "red", "Media"));
                series.Add(AddSerieTensionBarraSemanalGraf01(lstMin, "green", "Minimo"));

                lstGrafico = series;
                titulo1 = "PERFIL DE TENSIÓN EN BARRAS DE LA RED DE " + red + " kV";
                grafico.TitleText = titulo1;
            }
            #endregion

            return grafico;
        }

        /// <summary>
        /// AddSerie Tension Barra Semanal Graf01
        /// </summary>
        /// <param name="valores"></param>
        /// <param name="color"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        public static SerieDuracionCarga AddSerieTensionBarraSemanalGraf01(List<decimal?> valores, string color, string name)
        {
            SerieDuracionCarga serie = new SerieDuracionCarga();

            serie.SerieColor = color;
            serie.SerieName = name;
            serie.ListaVal = valores;
            return serie;
        }

        /// <summary>
        /// genera vista html del reporte tension de barras semanal
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="red"></param>
        /// <param name="fecIni"></param>
        /// <param name="fecFin"></param>
        /// <returns></returns>
        public static string ListarTensionBarraSemanalHtml(List<TensionBarras> lista, int red, DateTime fecIni, DateTime fecFin)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2'>PERFIL DE TENSIÓN</th>");
            strHtml.Append("<th colspan='" + ((lista.Count == 0) ? 1 : lista.Count) + "'>PRINCIPALES BARRAS DE LA RED DE " + red + " kV</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            for (int i = 0; i < lista.Count; i++)
            {
                strHtml.Append("<th>" + lista[i].Ptomedidesc + "</th>");
            }
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");
            #endregion
            if (lista.Any())
            {
                #region cuerpo
                //***************************      CUERPO DE LA TABLA         ***********************************//   
                strHtml.Append("<tr>");
                strHtml.Append("<td>Maxima</td>");
                foreach (var arr in lista) { strHtml.AppendFormat("<td>{0}</td>", arr.ValorMax.FormatoDecimal(2)); }
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<td>Media</td>");
                foreach (var arr in lista) { strHtml.AppendFormat("<td>{0}</td>", arr.ValorMed.FormatoDecimal(2)); }
                strHtml.Append("</tr>");
                strHtml.Append("<tr>");
                strHtml.Append("<td>Minima</td>");
                foreach (var arr in lista) { strHtml.AppendFormat("<td>{0}</td>", arr.ValorMin.FormatoDecimal(2)); }
                strHtml.Append("</tr>");

                strHtml.Append("</table>");

                string nr2 = "";
                if (red == 500) nr2 = NotasPieWebInformeSemanal.Cuadro1_Reporte_9p1;
                if (red == 220) nr2 = NotasPieWebInformeSemanal.Cuadro1_Reporte_9p2;
                if (red == 138) nr2 = NotasPieWebInformeSemanal.Cuadro1_Reporte_9p3;

                string semI, semF;
                UtilAnexoAPR5.ObtenerSemanasEnRango(fecIni, fecFin, out semI, out semF);

                strHtml.AppendFormat("<div style='margin-top: 15px;'>" + nr2 + "</div>", semI, semF);

                #endregion
            }
            return strHtml.ToString();
        }
        #endregion

        #endregion

        #region Eventos

        /// <summary>
        /// Genera reporte de Consummo de Combustible del SEIN 
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="list"></param>
        /// <returns></returns>
        public static string ListarReporteDetalleEventos(DateTime fechaInicial, DateTime fechaFinal,
                                        List<EventoDTO> list)
        {
            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table border='1' class='pretty tabla-icono' cellspacing='0' id='tabla'>");

            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th>Empresa</th>");
            strHtml.Append("<th>Equipo</th>");
            strHtml.Append("<th>Fecha</th>");
            strHtml.Append("<th>Descripción del evento</th>");
            strHtml.Append("<th>Interrupción (MW)</th>");
            strHtml.Append("<th>Disminución (MW)</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (EventoDTO entity in list)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td>{0}</td>", entity.EMPRNOMB);
                strHtml.AppendFormat("<td>{0}</td>", entity.EQUIABREV);
                strHtml.AppendFormat("<td>{0}</td>", ((DateTime)entity.EVENINI).ToString(ConstantesAppServicio.FormatoFechaFull2));
                strHtml.AppendFormat("<td>{0}</td>", entity.EVENDESC);
                strHtml.AppendFormat("<td>{0}</td>", (entity.INTERRMW != null) ? entity.INTERRMW.ToString() : string.Empty);
                strHtml.AppendFormat("<td>{0}</td>", (entity.BAJOMW != null) ? entity.BAJOMW.ToString() : string.Empty);
                strHtml.Append("</tr>");
            }


            strHtml.Append("</tbody>");
            strHtml.Append("</table>");


            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera el listado excel y, desde esa tabla, lo graficos del reporte Consumo de Combustible
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="data"></param>
        /// <param name="listaItem"></param>
        public static void GenerarExcelDetalleEventos(ExcelWorksheet ws, FechasPR5 objFecha, List<EventoDTO> data, List<ItemMenuNumeral> listaItem)
        {
            string tipoExportacion = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            string orden = "29";

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoExportacion, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoExportacion, tipoDoc, listaItem); //subtitulo

            int filaIniData = 10;
            int coluIniData = 3;

            int ultimaFila;
            int ultimaColu;

            int numDias = 0;

            #region Encabezado_Reporte
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region cuerpo

            foreach (EventoDTO item in data)
            {
                ws.Cells[filaIniData, 3].Value = item.EMPRNOMB;
                ws.Cells[filaIniData, 4].Value = item.EQUIABREV;
                ws.Cells[filaIniData, 5].Value = ((DateTime)item.EVENINI).ToString(ConstantesAppServicio.FormatoFechaFull2);
                ws.Cells[filaIniData, 6].Value = item.EVENDESC;
                ws.Cells[filaIniData, 7].Value = item.INTERRMW;
                ws.Cells[filaIniData, 8].Value = item.BAJOMW;

                ws.Cells[filaIniData, 7].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[filaIniData, 8].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                filaIniData++;
                numDias++;
            }

            ultimaFila = filaIniData - 1;
            ultimaColu = coluIniData + 5;

            #region Formato Cuerpo

            /*UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila - 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
            UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
            UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
            UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "#FFFFFF");
            UtilExcel.CeldasExcelWrapText(ws, ultimaFila, coluIniData, ultimaFila, coluIniData + 1);*/
            if (10 > ultimaFila) ultimaFila = 10;
            UtilExcel.BorderCeldas2(ws, 10, coluIniData, ultimaFila, ultimaColu);

            #endregion

            #endregion
        }

        /// <summary>
        /// GenerarExcelDetalleEventosMensual
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="data"></param>
        /// <param name="aumentados"></param>
        public static void GenerarExcelDetalleEventosMensual(ExcelPackage xlPackage, ExcelWorksheet ws, FechasPR5 objFecha, List<EventoDTO> data, out int aumentados)
        {
            int nroElementos = 12;
            int nroPaginas = (data.Count % nroElementos == 0) ? (int)(data.Count() / nroElementos) - 1 : (int)(data.Count() / nroElementos);

            for (int nroPagina = 0; nroPagina < nroPaginas; nroPagina++)
            {
                string sheetName = string.Format("{0}.ANEXO III -{1}", 25 + (nroPagina + 1), 2 + nroPagina);
                ExcelWorksheet wsNew = xlPackage.Workbook.Worksheets.Add(sheetName, ws);
                CargarEventosIndividualMensual(wsNew, data.Skip((nroPagina + 1) * nroElementos).Take(nroElementos).ToList());
            }

            CargarEventosIndividualMensual(ws, data.Take(nroElementos).ToList());
            xlPackage.Workbook.Worksheets.MoveToEnd("Contraportada");
            aumentados = nroPaginas;
        }

        /// <summary>
        /// CargarEventosIndividualMensual
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="data"></param>
        public static void CargarEventosIndividualMensual(ExcelWorksheet ws, List<EventoDTO> data)
        {
            int filaIniData = 3;
            int coluIniData = 1;

            int ultimaFila;
            int ultimaColu;

            int numDias = 0;

            #region Encabezado_Reporte
            //UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);
            #endregion

            #region cuerpo

            foreach (EventoDTO item in data)
            {
                ws.Cells[filaIniData, coluIniData].Value = item.EMPRNOMB;
                ws.Cells[filaIniData, coluIniData + 1].Value = item.EQUIABREV;
                ws.Cells[filaIniData, coluIniData + 2].Value = ((DateTime)item.EVENINI).ToString(ConstantesAppServicio.FormatoFechaFull2);
                ws.Cells[filaIniData, coluIniData + 3].Value = item.EVENDESC;
                var interrupciones = item.Interrnivel != "S" ? item.MWINTERRUMPIDOS : (decimal?)null;
                var disminucion = item.Interrnivel == "S" ? item.MWINTERRUMPIDOS : (decimal?)null;
                ws.Cells[filaIniData, coluIniData + 4].Value = item.INTERRMW;
                ws.Cells[filaIniData, coluIniData + 5].Value = item.BAJOMW;
                filaIniData++;
                numDias++;
            }

            ultimaFila = filaIniData - 1;
            ultimaColu = coluIniData + 5;

            #region Formato Cuerpo

            /*UtilExcel.CeldasExcelTipoYTamanioLetra(ws, filaIniData, coluIniData, ultimaFila - 1, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCuerpo, ConstantesPR5ReportesServicio.TamLetraCuerpo);
            UtilExcel.CeldasExcelTipoYTamanioLetra(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.TipoLetraCabecera, ConstantesPR5ReportesServicio.TamLetraCabecera);
            UtilExcel.CeldasExcelAlinearHorizontalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
            UtilExcel.CeldasExcelAlinearVerticalmente(ws, filaIniData, coluIniData, ultimaFila, ultimaColu, "Centro");
            UtilExcel.CeldasExcelEnNegrita(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu);
            UtilExcel.CeldasExcelColorFondo(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, ConstantesPR5ReportesServicio.ColorFondoCabInformeEjecutivoSem);
            UtilExcel.CeldasExcelColorTexto(ws, ultimaFila, coluIniData, ultimaFila, ultimaColu, "#FFFFFF");
            UtilExcel.CeldasExcelWrapText(ws, ultimaFila, coluIniData, ultimaFila, coluIniData + 1);*/
            if (10 > ultimaFila) ultimaFila = 10;
            UtilExcel.BorderCeldas2(ws, 10, coluIniData, ultimaFila, ultimaColu);

            #endregion

            #endregion
        }

        /// <summary>
        /// Genera el listado excel y, desde esa tabla, lo graficos del reporte Consumo de Combustible
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="objFecha"></param>
        /// <param name="data"></param>
        /// <param name="listaItem"></param>
        /// <param name="nroHojas"></param>
        public static void GenerarExcelDetalleEventosEjecutivo(ExcelWorksheet ws, ExcelPackage xlPackage, FechasPR5 objFecha, List<EventoDTO> data,
            List<ItemMenuNumeral> listaItem, out int nroHojas)
        {
            nroHojas = 0;

            if (data.Count > 0)
            {
                int nroPaginas = (data.Count % 4 == 0) ? (int)(data.Count() / 4) - 1 : (int)(data.Count() / 4);

                for (int nroPagina = 0; nroPagina < nroPaginas; nroPagina++)
                {
                    ExcelWorksheet wsNew = xlPackage.Workbook.Worksheets.Add("Detalle de Eventos" + " - " + (nroPagina + 1).ToString(), ws);
                    GenerarHojaEventoEjecutivoSemanal(wsNew, objFecha, data.Skip((nroPagina + 1) * 4).Take(4).ToList(), listaItem, nroPagina + 1);
                }

                GenerarHojaEventoEjecutivoSemanal(ws, objFecha, data.Take(4).ToList(), listaItem, 0);

                nroHojas = nroPaginas;
            }
        }

        /// <summary>
        /// GenerarHojaEventoEjecutivoSemanal
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="listaEvento"></param>
        /// <param name="listaItem"></param>
        /// <param name="nroHoja"></param>
        public static void GenerarHojaEventoEjecutivoSemanal(ExcelWorksheet ws, FechasPR5 objFecha, List<EventoDTO> listaEvento, List<ItemMenuNumeral> listaItem, int nroHoja)
        {
            string tipoExportacion = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            string orden = "22";

            ws.Cells[4, 2].Value = EscogerTitulosSubtitulos(orden, 0, tipoExportacion, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = EscogerTitulosSubtitulos(orden, 1, tipoExportacion, tipoDoc, listaItem); //subtitulo


            int filaIniNum = 9;
            int coluIniNum = 2;

            int filaIniDetalleEvento = filaIniNum;
            int coluIniDetalleEvento = coluIniNum + 2;

            // **************  CUERPO DE LA TABLA **************//       
            int cc = 1 + nroHoja * 4;
            int numReporte = 0;


            foreach (var evento in listaEvento)
            {
                //ws.Column(3).Width = 100;

                UtilEjecMensual.CeldasExcelTipoYTamanioLetra(ws, filaIniNum + numReporte, coluIniNum, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento - 1 + 1 + 2, "Arial", 11);

                ws.Cells[filaIniNum + numReporte, coluIniNum].Value = cc++;
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte, coluIniNum);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte + 11, coluIniNum);
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte + 11, coluIniNum, "Arriba");
                UtilEjecMensual.CeldasExcelAlinearHorizontalmente(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte + 11, coluIniNum, "Centro");
                UtilEjecMensual.CeldasExcelBordear1(ws, filaIniNum + numReporte, coluIniNum, filaIniNum + numReporte + 11, coluIniNum);


                ws.Cells[filaIniDetalleEvento + 1 + numReporte, coluIniDetalleEvento].Value = "Empresa : " + evento.EMPRNOMB;
                ws.Cells[filaIniDetalleEvento + 2 + numReporte, coluIniDetalleEvento].Value = "Equipo : " + evento.EQUIABREV;
                ws.Cells[filaIniDetalleEvento + 3 + numReporte, coluIniDetalleEvento].Value = "Tipo de Causa de Falla (CIER): " + evento.SUBCAUSAABREV;
                ws.Cells[filaIniDetalleEvento + 4 + numReporte, coluIniDetalleEvento].Value = "Tipo Equipo : " + evento.FAMNOMB;
                ws.Cells[filaIniDetalleEvento + 5 + numReporte, coluIniDetalleEvento].Value = "Inicio : " + evento.EVENINI.Value.ToString(ConstantesBase.FormatFechaFull);
                ws.Cells[filaIniDetalleEvento + 6 + numReporte, coluIniDetalleEvento].Value = "Fin : " + evento.EVENFIN.Value.ToString(ConstantesBase.FormatFechaFull);
                ws.Cells[filaIniDetalleEvento + 7 + numReporte, coluIniDetalleEvento].Value = "Duración (min) : " + evento.Interrminu;

                var interrupciones = evento.Interrnivel != "S" ? evento.MWINTERRUMPIDOS : (decimal?)null;
                var disminucion = evento.Interrnivel == "S" ? evento.MWINTERRUMPIDOS : (decimal?)null;

                ws.Cells[filaIniDetalleEvento + 8 + numReporte, coluIniDetalleEvento].Value = "Interrupción (MW) : " + evento.INTERRMW;
                ws.Cells[filaIniDetalleEvento + 9 + numReporte, coluIniDetalleEvento].Value = "Disminución (MW) : " + evento.BAJOMW;
                ws.Cells[filaIniDetalleEvento + 10 + numReporte, coluIniDetalleEvento].Value = "Energía Interrumpida (MWh) : " + evento.ENERGIAINTERRUMPIDA;
                ws.Cells[filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento].Value = "\n" + evento.EVENDESC + "\n";


                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento - 1, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento - 1 + 1 + 2, "Centro");
                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento + 2);

                UtilEjecMensual.CeldasExcelBordear1(ws, filaIniDetalleEvento + numReporte, coluIniDetalleEvento - 1, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento - 1 + 1 + 2);
                ws.Cells[filaIniDetalleEvento + numReporte, coluIniDetalleEvento].Value = evento.EVENASUNTO;
                UtilEjecMensual.CeldasExcelWrapText(ws, filaIniDetalleEvento + 11 + numReporte, coluIniDetalleEvento);
                UtilEjecMensual.CeldasExcelEnNegrita(ws, filaIniDetalleEvento + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAlinearVerticalmente(ws, filaIniDetalleEvento + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + numReporte, coluIniDetalleEvento + 2, "Centro");

                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 1 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 1 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 2 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 2 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 3 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 3 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 4 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 4 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 5 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 5 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 6 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 6 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 7 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 7 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 8 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 8 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 9 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 9 + numReporte, coluIniDetalleEvento + 2);
                UtilEjecMensual.CeldasExcelAgrupar(ws, filaIniDetalleEvento + 10 + numReporte, coluIniDetalleEvento, filaIniDetalleEvento + 10 + numReporte, coluIniDetalleEvento + 2);

                numReporte = numReporte + 12;
            }
            (new MigracionesAppServicio()).AddImage(ws, 0, 97, 46);
            //ws.Column(4).Width = 12;
            //ws.Row(1).Height = 45;
        }

        /// <summary>
        /// Genera el listado de numero de fallas y energia interrumpida para el reporte FallasCier
        /// </summary>
        /// <param name="tipoReporte"></param>
        /// <param name="listaEve"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public static string GenerarHTMLDetalleEventos(int tipoReporte, List<EventoDTO> listaEve, DateTime fechaInicial, DateTime fechaFinal)
        {
            StringBuilder strHtml = new StringBuilder();


            strHtml.Append("<div id='listado_reporte' style='height: auto; width: 1190px;'>");

            strHtml.Append("<table class='pretty tabla-adicional'>");
            strHtml.Append("    <thead>");
            strHtml.Append("        <tr>");
            strHtml.Append("            <th>Nro</th>");
            strHtml.Append("            <th>Detalle del Evento</th>");
            strHtml.Append("        </tr>");
            strHtml.Append("    </thead>");
            strHtml.Append("    <tbody>");

            int index = 1;
            foreach (EventoDTO item in listaEve)
            {
                StringBuilder strDetalle = new StringBuilder();
                strDetalle.AppendFormat("<br /><br /><div class='header-evento'>{0}</div><br /><br />", item.EVENASUNTO);
                strDetalle.Append("<table border='0' class='table-det-evento'>");
                strDetalle.AppendFormat("<tr><td>Empresa</td><td>:</td><td> {0}</td></tr>", item.EMPRNOMB);
                strDetalle.AppendFormat("<tr><td>Equipo</td><td>:</td><td>{0}</td></tr>", item.EQUIABREV);
                strDetalle.AppendFormat("<tr><td>Tipod de Causa CIER</td><td>:</td><td>{0}</td></tr>", item.SUBCAUSAABREV);
                strDetalle.AppendFormat("<tr><td>Tipo de Equipo</td><td>:</td><td>{0}</td></tr>", item.FAMNOMB);
                strDetalle.AppendFormat("<tr><td>Inicio</td><td>:</td><td>{0}</td></tr>", ((DateTime)item.EVENINI).ToString(ConstantesAppServicio.FormatoFechaFull2));
                strDetalle.AppendFormat("<tr><td>Final</td><td>:</td><td>{0}</td></tr>", ((DateTime)item.EVENFIN).ToString(ConstantesAppServicio.FormatoFechaFull2));
                strDetalle.AppendFormat("<tr><td>Duración (min)</td><td>:</td><td>{0}</td></tr>", item.Interrminu);
                strDetalle.AppendFormat("<tr><td>Interrupción (MW)</td><td>:</td><td>{0}</td></tr>", item.INTERRMW);
                strDetalle.AppendFormat("<tr><td>Disminución (MW)</td><td>:</td><td>{0}</td></tr>", item.BAJOMW);
                strDetalle.AppendFormat("<tr><td>Energía Interrumpida (MWh)</td><td>:</td><td>{0}</td></tr>", item.ENERGIAINTERRUMPIDA);
                strDetalle.Append("</table>");
                strDetalle.AppendFormat("<br /><div class='header-evento-det'>{0}</div>", item.EVENDESC);

                strHtml.Append("        <tr>");
                strHtml.AppendFormat("            <td>{0}</td>", index);
                strHtml.AppendFormat("            <td>{0}<br /><br /></td>", strDetalle.ToString());
                strHtml.Append("        </tr>");

                index++;
            }
            strHtml.Append("    </tbody>");
            strHtml.Append("</table>");

            strHtml.Append("</div>");
            return strHtml.ToString();
        }

        #endregion

    }
}