using COES.Base.Core;
using COES.Dominio.DTO.Scada;
using COES.Dominio.DTO.Sic;
using COES.Dominio.DTO.Transferencias;
using COES.Framework.Base.Core;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.CortoPlazo;
using COES.Servicios.Aplicacion.CortoPlazo.Helper;
using COES.Servicios.Aplicacion.Equipamiento;
using COES.Servicios.Aplicacion.Eventos;
using COES.Servicios.Aplicacion.Eventos.Helper;
using COES.Servicios.Aplicacion.Factory;
using COES.Servicios.Aplicacion.General;
using COES.Servicios.Aplicacion.General.Helper;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.Hidrologia;
using COES.Servicios.Aplicacion.IEOD.Helper;
using COES.Servicios.Aplicacion.Indisponibilidades;
using COES.Servicios.Aplicacion.Interconexiones.Helper;
using COES.Servicios.Aplicacion.Intervenciones;
using COES.Servicios.Aplicacion.Intervenciones.Helper;
using COES.Servicios.Aplicacion.Mediciones;
using COES.Servicios.Aplicacion.Mediciones.Helper;
using COES.Servicios.Aplicacion.Migraciones;
using COES.Servicios.Aplicacion.Migraciones.Helper;
using COES.Servicios.Aplicacion.ReportesFrecuencia;
using COES.Servicios.Aplicacion.ReportesMedicion;
using COES.Servicios.Aplicacion.ReportesMedicion.Helper;
using COES.Servicios.Aplicacion.SIOSEIN;
using COES.Servicios.Aplicacion.Siosein2;
using COES.Servicios.Aplicacion.Siosein2.Helper;
using COES.Servicios.Aplicacion.StockCombustibles;
using COES.Servicios.Aplicacion.TiempoReal;
using COES.Servicios.Aplicacion.Titularidad;
using log4net;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Runtime.Serialization.Formatters.Binary;
using System.Text;
using System.Threading.Tasks;

namespace COES.Servicios.Aplicacion.IEOD
{
    /// <summary>
    /// Clase de lógica de negocio del proyecto PR05
    /// </summary>
    public class PR5ReportesAppServicio : AppServicioBase
    {
        /// <summary>
        /// Instancia para el manejo de logs
        /// </summary>
        private static readonly ILog Logger = LogManager.GetLogger(typeof(PR5ReportesAppServicio));

        readonly EventoAppServicio servicioEvento = new EventoAppServicio();
        readonly ParametroAppServicio servParametro = new ParametroAppServicio();
        readonly EjecutadoAppServicio servEjec = new EjecutadoAppServicio();
        readonly HidrologiaAppServicio servHidrologia = new HidrologiaAppServicio();
        readonly StockCombustiblesAppServicio servStockCombustible = new StockCombustiblesAppServicio();
        readonly RsfAppServicio servRsf = new RsfAppServicio();
        readonly LecturaAppServicio servLectura = new LecturaAppServicio();
        readonly IndicadorAppServicio servIndicador = new IndicadorAppServicio();
        readonly FormatoReporteAppServicio servFormatoRep = new FormatoReporteAppServicio();
        readonly HorasOperacionAppServicio servHO = new HorasOperacionAppServicio();
        readonly IEODAppServicio servIEOD = new IEODAppServicio();
        readonly EquipamientoAppServicio servEquipamiento = new EquipamientoAppServicio();
        readonly TitularidadAppServicio servTitEmp = new TitularidadAppServicio();

        #region Metodos Tablas

        #region Métodos Tabla EQ_AREA

        /// <summary>
        /// Devuelve entidad EqAreaDTO buscado por id
        /// </summary>
        /// <param name="areacodi"></param>
        /// <returns></returns>
        public EqAreaDTO GetByIdEqArea(int areacodi)
        {
            return FactorySic.GetEqAreaRepository().GetById(areacodi);
        }

        /// <summary>
        /// ListarAreaXEmpresas
        /// </summary>
        /// <param name="sEmprcodi"></param>
        /// <returns></returns>
        public List<EqAreaDTO> ListarAreaXEmpresas(string sEmprcodi)
        {
            return FactorySic.GetEqAreaRepository().ListarAreaPorEmpresas(sEmprcodi, "'A', 'P'").Where(x => x.Areacodi > 0).ToList();
        }

        #endregion

        #region Métodos Tabla EQ_EQUIPO
        /// <summary>
        /// Listado de Equipos filtrado por varias familias y empresas.
        /// Datos de Equipo, Familia, Empresa y Area
        /// </summary>
        /// <param name="iCodFamilias">Código de Familias</param>
        /// <param name="iEmpresas">Código de Empresas</param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarEquipoxFamiliasxEmpresas(int[] iCodFamilias, int[] iEmpresas)
        {
            return FactorySic.GetEqEquipoRepository().ListarEquipoxFamiliasEmpresas(iCodFamilias, iEmpresas);
        }

        /// <summary>
        /// Listado de equipos por areas y empresas 
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idUbicacion"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarEquipos(string idEmpresa, string idUbicacion)
        {
            List<EqEquipoDTO> entitys;
            try
            {
                entitys = FactorySic.GetEqEquipoRepository().ListarEquipoXAreasXEmpresa(idEmpresa, idUbicacion);
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return entitys;
        }

        /// <summary>
        /// Lista el detalle de un equipo por su equicodi
        /// </summary>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public EqEquipoDTO GetListaEquipo(int equicodi)
        {
            return FactorySic.GetEqEquipoRepository().GetById(equicodi);
        }

        /// <summary>
        /// Lista Centrales por Empresa
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListEqEquipoEmpresaGEN(string emprcodi)
        {
            return FactorySic.GetEqEquipoRepository().ListarCentralesXEmpresaGEN(emprcodi);
        }

        /// <summary>
        /// Lista Centrales por Empresa
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarCentralesXEmpresaXFamiliaGEN2(string emprcodi, string famcodi)
        {
            return FactorySic.GetEqEquipoRepository().ListarCentralesXEmpresaXFamiliaGEN2(emprcodi, famcodi, ConstantesAppServicio.ParametroDefecto);
        }

        /// <summary>
        /// GetByIdEquipo
        /// </summary>
        /// <param name="idEquipo"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> GetByIdEquipo(string idEquipo)
        {
            if (string.IsNullOrEmpty(idEquipo))
                return new List<EqEquipoDTO>();

            return FactorySic.GetEqEquipoRepository().ListByIdEquipo(idEquipo);
        }

        #endregion

        #region Métodos Tabla PR_GRUPO

        /// <summary>
        /// Listar los modos de operación por tipo de central, empresa y tipo de combustible
        /// </summary>
        /// <param name="idTipoCentral"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="idTCombustible"></param>
        /// <returns></returns>
        public List<ModoOperacionPR5> ListarModoOpe(string idTipoCentral, string idEmpresa, string idTCombustible)
        {
            List<ModoOperacionPR5> listaModosOperacion = new List<ModoOperacionPR5>();
            List<ModoOperacionPR5> listaGrupos = new List<ModoOperacionPR5>();

            if (idTipoCentral.Contains("4")) //los generadores: "2" son parte de las centrales hidroelectricas, deben incluirse
            {
                idTipoCentral = "2," + idTipoCentral;
            }

            int[] empresas = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] tipocentrales = idTipoCentral.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] tipocombustible = idTCombustible.Split(',').Select(x => int.Parse(x)).ToArray();

            if (tipocentrales.Contains(3) || tipocentrales.Contains(5))
            {
                //Modos de operacion
                listaModosOperacion = servHO.ListarModoOperacionXCentralYEmpresa(-2, Int32.Parse(ConstantesHorasOperacion.ParamEmpresaTodos))
                                .Where(y => (idEmpresa == "-1" || empresas.Contains((int)y.Emprcodi))
                                        && tipocombustible.Contains(y.Fenergcodi.GetValueOrDefault(0))
                                        && y.Catecodi == 2)
                                .Select(y => new ModoOperacionPR5() { IdModoOpeOGrupo = y.Grupocodi, Tipo = "MO", Valor = y.Gruponomb, Equicodi = y.Equicodi })
                                .ToList();
            }

            if (tipocentrales.Contains(2) || tipocentrales.Contains(4) || tipocentrales.Contains(37) || tipocentrales.Contains(39))
            {
                //Grupos
                listaGrupos = servIEOD.ListarCentralesXEmpresaGener2(idEmpresa, idTipoCentral)
                                .Where(x => (x.Famcodi != 5 && x.Famcodi != 3) && tipocombustible.Contains(x.Fenergcodi))
                                .Select(y => new ModoOperacionPR5() { IdModoOpeOGrupo = Convert.ToInt32(y.Equicodi), Tipo = "GR", Valor = y.Equinomb, Equicodi = y.Equicodi })
                                .Where(x => x.IdModoOpeOGrupo > 0).ToList();

                listaModosOperacion.AddRange(listaGrupos);
            }

            listaModosOperacion = listaModosOperacion.GroupBy(x => new { x.IdModoOpeOGrupo, x.Valor })
                .Select(x => new ModoOperacionPR5() { IdModoOpeOGrupo = x.Key.IdModoOpeOGrupo, Valor = x.Key.Valor }).ToList();

            return listaModosOperacion;
        }

        /// <summary>
        /// Listado de Modos de operacion por empresa y familia
        /// </summary>
        /// <param name="iCodFamilias"></param>
        /// <param name="iEmpresas"></param>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarModoOperacionXFamiliaAndEmpresa(string iCodFamilias, string iEmpresas)
        {
            return FactorySic.GetPrGrupoRepository().ListarModoOperacionXFamiliaAndEmpresa(iCodFamilias, iEmpresas);
        }

        /// <summary>
        /// Listar todos los grupos de generacion RER
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarAllGrupoRER(DateTime fechaPeriodo)
        {
            var lista = FactorySic.GetPrGrupoRepository().ListarAllGrupoRER(fechaPeriodo);
            foreach (var grupo in lista)
            {
                grupo.Emprnomb = grupo.Emprnomb != null ? grupo.Emprnomb.Trim() : string.Empty;
            }
            return lista;
        }

        /// <summary>
        /// Listar todos los grupos de generacion RER
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarAllGrupoCoGeneracion(DateTime fechaPeriodo)
        {
            var lista = FactorySic.GetPrGrupoRepository().ListarAllGrupoCoGeneracion(fechaPeriodo);
            foreach (var grupo in lista)
            {
                grupo.Emprnomb = grupo.Emprnomb != null ? grupo.Emprnomb.Trim() : string.Empty;
            }
            return lista;
        }

        /// <summary>
        /// ListarGrupoValido
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarGrupoValido()
        {
            List<PrGrupoDTO> listaGrupo = FactorySic.GetPrGrupoRepository().List();
            listaGrupo = listaGrupo.Where(x => x.GrupoEstado != ConstantesAppServicio.Anulado).ToList();

            foreach (var reg in listaGrupo)
            {
                reg.Gruponomb = (reg.Gruponomb ?? "").Trim();
                reg.Grupoabrev = (reg.Grupoabrev ?? "").Trim();
            }

            return listaGrupo;
        }

        /// <summary>
        /// GetPrGrupoByIdGrupo
        /// </summary>
        /// <param name="idgrupocodi"></param>
        /// <returns></returns>
        public List<PrGrupoDTO> ListPrGrupoByIdGrupo(string idgrupocodi)
        {
            return !string.IsNullOrEmpty(idgrupocodi) ? FactorySic.GetPrGrupoRepository().ListByIds(idgrupocodi) : new List<PrGrupoDTO>();
        }

        #endregion

        #region Métodos Tabla PR_TIPOGRUPO
        /// <summary>
        /// Listado de PrTipogrupo
        /// </summary>
        /// <returns></returns>
        public List<PrTipogrupoDTO> ListarPrTipoGrupo()
        {
            return FactorySic.GetPrTipogrupoRepository().List();
        }
        #endregion

        #region Métodos Tabla SI_FUENTEENERGIA
        /// <summary>
        /// Lista Tipo de Combustibles por Central o Equipo
        /// </summary>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public List<SiFuenteenergiaDTO> ListTipoCombustibleXEquipo(string equicodi)
        {
            List<SiFuenteenergiaDTO> entitys = FactorySic.GetSiFuenteenergiaRepository().ListTipoCombustibleXEquipo(equicodi);
            var find = entitys.Find(x => x.Fenergcodi == 4);
            if (find != null)
            {
                if (entitys.Find(x => x.Grupocomb != null && x.Grupocomb.Trim().ToUpper() == "R500") != null)
                {
                    var reg = new SiFuenteenergiaDTO() { Fenergcodi = 10, Fenergnomb = "R500" };
                    entitys.Add(reg);
                }

                if (entitys.Find(x => x.Grupocomb != null && x.Grupocomb.Trim().ToUpper() == "R6") != null)
                {
                    var reg = new SiFuenteenergiaDTO() { Fenergcodi = 11, Fenergnomb = "R6" };
                    entitys.Add(reg);
                }
            }

            return entitys.GroupBy(x => new { x.Fenergcodi, x.Fenergnomb })
                .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Fenergcodi, Fenergnomb = x.Key.Fenergnomb }).ToList();
        }

        /// <summary>
        /// Lista de recursos por tipo de central
        /// </summary>
        /// <param name="idTipoCentral"></param>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<SiFuenteenergiaDTO> ListTipoCombustibleXTipoCentral(string idTipoCentral, string idEmpresa)
        {
            return FactorySic.GetSiFuenteenergiaRepository().ListTipoCombustibleXTipoCentral(idTipoCentral, idEmpresa);
        }

        /// <summary>
        /// Listado de registros de la tabla SI_Fuenteenergia
        /// </summary>
        /// <returns></returns>
        public List<SiFuenteenergiaDTO> ListarFuenteEnergia()
        {
            List<SiFuenteenergiaDTO> lista = FactorySic.GetSiFuenteenergiaRepository().List().Where(x => x.Fenergcodi > 0).ToList();

            foreach (var reg in lista)
            {
                switch (reg.Fenergcodi)
                {
                    case ConstantesPR5ReportesServicio.FenergcodiAgua:
                        reg.Fenergorden = 1;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiGas:
                        reg.Fenergorden = 2;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                        reg.Fenergorden = 3;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                        reg.Fenergorden = 4;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiResidual:
                        reg.ValidarDatoObligatorio = true;
                        reg.Fenergorden = 5;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiR500:
                        reg.Fenergorden = 6;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiR6:
                        reg.ValidarDatoObligatorio = true;
                        reg.Fenergorden = 7;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiBagazo:
                        reg.Fenergorden = 8;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiBiogas:
                        reg.Fenergorden = 9;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiSolar:
                        reg.Fenergorden = 10;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiEolica:
                        reg.Fenergorden = 11;
                        break;
                    default:
                        reg.ValidarDatoObligatorio = true;
                        break;
                }
            }

            return lista;
        }

        /// <summary>
        /// Lista de fuente de energía utilizado por el IDCOS
        /// </summary>
        /// <returns></returns>
        public List<SiFuenteenergiaDTO> ListarFuenteEnergiaIDCOS()
        {
            var lista = this.ListarFuenteEnergia();

            foreach (var reg in lista)
            {
                switch (reg.Fenergcodi)
                {
                    case ConstantesPR5ReportesServicio.FenergcodiSolar:
                        reg.Fenergorden = 1;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiEolica:
                        reg.Fenergorden = 2;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiBagazo:
                        reg.Fenergorden = 3;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiBiogas:
                        reg.Fenergorden = 4;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiAgua:
                        reg.Fenergnomb = "Hídrico";
                        reg.Fenergorden = 5;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiGas:
                        reg.Fenergorden = 6;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                        reg.Fenergorden = 7;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                        reg.Fenergorden = 8;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiR500:
                        reg.Fenergorden = 9;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiR6:
                        reg.Fenergorden = 10;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiResidual:
                        reg.Fenergorden = 11;
                        break;
                    default:
                        reg.Fenergorden = 100;
                        break;
                }
            }

            return lista;
        }

        /// <summary>
        /// Lista Tipo de Combustibles por Central o Equipo
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idModo"></param>
        /// <returns></returns>
        public List<SiFuenteenergiaDTO> ListTipoCombustibleXModo(string idEmpresa, string idModo)
        {
            int[] grupocodis = idModo.Split(',').Select(x => int.Parse(x)).ToArray();

            List<PrGrupoDTO> listaModo = ListarModoOperacionXFamiliaAndEmpresa("5", idEmpresa);
            listaModo = listaModo.Where(x => grupocodis.Contains(x.Grupocodi)).ToList();

            return listaModo.Where(x => x.Fenergcodi > 0).GroupBy(x => new { x.Fenergcodi, x.Fenergnomb })
                .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Fenergcodi.Value, Fenergnomb = x.Key.Fenergnomb })
                .OrderBy(x => x.Fenergnomb).ToList();
        }

        #endregion

        #region Métodos Tabla SI_EMPRESA

        /// <summary>
        /// Permite obtener las empresa por tipo
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ObtenerEmpresasGeneradoras()
        {
            return servIEOD.ListarEmpresasTienenCentralGenxTipoEmpresa(ConstantesAppServicio.ParametroDefecto);
        }

        /// <summary>
        /// Devuelve lista de empresas que poseen centrales Hidraulicas
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ObtenerEmpresasHidro()
        {
            return FactorySic.GetSiEmpresaRepository().ObtenerEmpresasHidro();
        }

        /// <summary>
        /// Devuelve lista de empresa por id formato
        /// </summary>
        /// <param name="idFormato"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> GetListaEmpresaFormato(int idFormato)
        {
            return FactorySic.GetSiEmpresaRepository().ObtenerEmpresaFormato(idFormato);
        }

        /// <summary>
        /// Lista de Empresas por id de formato
        /// </summary>
        /// <param name="idFormato"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListaEmpresasByFormato(int idFormato)
        {
            var empresas = FactorySic.GetSiEmpresaRepository().ObtenerEmpresaFormato(idFormato);
            List<SiEmpresaDTO> listaEmpresas;

            if (empresas.Count > 0)
                listaEmpresas = empresas;
            else
            {
                listaEmpresas = new List<SiEmpresaDTO>(){
                         new SiEmpresaDTO(){
                             Emprcodi = 0,
                             Emprnomb = "No Existe"
                         }
                     };
            }
            return listaEmpresas;
        }

        /// <summary>
        /// Listado de empresas por emprcodi de empresa
        /// </summary>
        /// <param name="strTipoempresa"></param>
        /// <returns></returns>
        public List<Si_EmpresaDTO> GetListaCriteria(string strTipoempresa)
        {
            var list = FactorySic.GetSiEmpresaRepository().GetByCriteria(strTipoempresa);
            List<Si_EmpresaDTO> lista = this.ConvertSiempresaBySi_empresa(list);

            return lista;
        }

        private List<Si_EmpresaDTO> ConvertSiempresaBySi_empresa(List<SiEmpresaDTO> list)
        {
            return list.Select(x => new Si_EmpresaDTO()
            {
                Emprcodi = x.Emprcodi,
                Emprnomb = x.Emprnomb,
                Tipoemprcodi = x.Tipoemprcodi,
                Emprdire = x.Emprdire,
                Emprtele = x.Emprtele,
                Emprnumedocu = x.Emprnumedocu,
                Tipodocucodi = x.Tipodocucodi,
                Emprruc = x.Emprruc,
                Emprabrev = x.Emprabrev,
                Emprorden = x.Emprorden,
                Emprdom = x.Emprdom,
                Emprsein = x.Emprsein,
                Emprrazsocial = x.Emprrazsocial,
                Emprcoes = x.Emprcoes,
                Lastuser = x.Lastuser,
                Lastdate = x.Lastdate,
                Inddemanda = x.Inddemanda,
                Emprestado = x.Emprestado,
                Emprdomiciliada = x.Emprdomiciliada,
                Emprambito = x.Emprambito,
                Emprrubro = x.Emprrubro,
                Empragente = x.Empragente,
                Emprnombcomercial = x.Emprnombcomercial,
                Emprdomiciliolegal = x.Emprdomiciliolegal,
                Emprsigla = x.Emprsigla,
                Emprnumpartidareg = x.Emprnumpartidareg,
                Emprtelefono = x.Emprtelefono,
                Emprfax = x.Emprfax,
                Emprpagweb = x.Emprpagweb,
                Emprcartadjunto = x.Emprcartadjunto,
                Emprestadoregistro = x.Emprestadoregistro,
                Emprfechacreacion = x.Emprfechacreacion,
                Emprcartadjuntofilename = x.Emprcartadjuntofilename,
                Emprcondicion = x.Emprcondicion,
                Emprnroconstancia = x.Emprnroconstancia
            }).ToList();
        }

        /// <summary>
        /// ConvertSi_empresaBySiempresa
        /// </summary>
        /// <param name="list"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ConvertSi_empresaBySiempresa(List<Si_EmpresaDTO> list)
        {
            return list.Select(x => new SiEmpresaDTO()
            {
                Emprcodi = x.Emprcodi,
                Emprnomb = x.Emprnomb,
                Tipoemprcodi = x.Tipoemprcodi,
                Emprdire = x.Emprdire,
                Emprtele = x.Emprtele,
                Emprnumedocu = x.Emprnumedocu,
                Tipodocucodi = x.Tipodocucodi,
                Emprruc = x.Emprruc,
                Emprabrev = x.Emprabrev,
                Emprorden = x.Emprorden,
                Emprdom = x.Emprdom,
                Emprsein = x.Emprsein,
                Emprrazsocial = x.Emprrazsocial,
                Emprcoes = x.Emprcoes,
                Lastuser = x.Lastuser,
                Lastdate = x.Lastdate,
                Inddemanda = x.Inddemanda,
                Emprestado = x.Emprestado,
                Emprdomiciliada = x.Emprdomiciliada,
                Emprambito = x.Emprambito,
                Emprrubro = x.Emprrubro,
                Empragente = x.Empragente,
                Emprnombcomercial = x.Emprnombcomercial,
                Emprdomiciliolegal = x.Emprdomiciliolegal,
                Emprsigla = x.Emprsigla,
                Emprnumpartidareg = x.Emprnumpartidareg,
                Emprtelefono = x.Emprtelefono,
                Emprfax = x.Emprfax,
                Emprpagweb = x.Emprpagweb,
                Emprcartadjunto = x.Emprcartadjunto,
                Emprestadoregistro = x.Emprestadoregistro,
                Emprfechacreacion = x.Emprfechacreacion,
                Emprcartadjuntofilename = x.Emprcartadjuntofilename,
                Emprcondicion = x.Emprcondicion,
                Emprnroconstancia = x.Emprnroconstancia
            }).ToList();
        }

        /// <summary>
        /// Permite listar empresas por tipo de negocio (Distribuidoas, Generadoras .. etc)
        /// </summary>
        /// <param name="idsEmpresas"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresasXID(List<int> idsEmpresas)
        {
            if (idsEmpresas.Count == 0) return new List<SiEmpresaDTO>();
            return FactorySic.GetSiEmpresaRepository().ListarEmpresasXID(string.Join(",", idsEmpresas));
        }

        /// <summary>
        /// Devuelve el registro de la empresas por su emprcodi
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public SiEmpresaDTO GetByIdEmpresa(int emprcodi)
        {
            return FactorySic.GetSiEmpresaRepository().GetById(emprcodi);
        }

        /// <summary>
        /// ListarEmpresaTodo
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaTodo()
        {
            return FactorySic.GetSiEmpresaRepository().ListGeneral();
        }

        /// <summary>
        /// Permite listar las empresas
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListaEmpresa()
        {
            return FactorySic.GetSiEmpresaRepository().ObtenerEmpresasSEIN();
        }

        #endregion

        #region Métodos Tabla ME_PTOMEDICION

        /// <summary>
        /// ObtenerPuntosMedicionReporte
        /// </summary>
        /// <param name="idReporte"></param>
        /// <param name="tipoinfocodi"></param>
        /// <returns></returns>
        public List<MePtomedicionDTO> ObtenerPuntosMedicionReporte(int idReporte, int tipoinfocodi)
        {
            //en Anexo A ordenado por posicion en reporte, no por empresa 
            var lista = FactorySic.GetMePtomedicionRepository().ObtenerPuntosMedicionReporte(idReporte, tipoinfocodi).OrderBy(x => x.Orden).ToList();

            foreach (var reg in lista)
            {
                //solo mostrar la primera letra del area operativa
                reg.AreaOperativa = reg.AreaOperativa != null && reg.AreaOperativa.Length > 1 ? reg.AreaOperativa.Substring(0, 1) : string.Empty;

                //subestación
                reg.Subestacion = reg.Ptomedielenomb ?? "";
                if (ConstantesPR5ReportesServicio.IdReporteTension == idReporte) reg.Subestacion = reg.Areanomb ?? "";
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla EVE_TIPOEVENTO

        /// <summary>
        /// Permite obtener los tipos de evento
        /// </summary>
        /// <returns></returns>
        public List<EveTipoeventoDTO> ListarTipoEvento()
        {
            return FactorySic.GetEveTipoeventoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla EVE_INTERRUPCION

        /// <summary>
        /// Permite realizar búsquedas en la tabla EveInterrupcion
        /// </summary>
        public List<EveInterrupcionDTO> GetByCriteriaEveInterrupcions(string idEvento)
        {
            return FactorySic.GetEveInterrupcionRepository().GetByCriteria(idEvento);
        }

        #endregion

        #region Métodos Tabla EVE_EVENEQUIPO

        /// <summary>
        /// Permite obtener los equipos involucrados en un evento
        /// </summary>
        /// <param name="idEvento"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> GetEquiposPorEvento(string idEvento)
        {
            return FactorySic.GetEveEvenequipoRepository().GetEquiposPorEvento(idEvento);
        }

        #endregion

        #region Métodos Tabla EVE_MANTTO

        /// <summary>
        /// Lista indisponibilidades de unidades de generacion
        /// </summary>
        /// <param name="idsTipoMantenimiento"></param>
        /// <param name="indispo"></param>
        /// <param name="idsTipoEmpresa"></param>
        /// <param name="idsEmpresa"></param>
        /// <param name="idsTipoEquipo"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EveManttoDTO> ListarGetIndispUniGeneracion(string idsTipoMantenimiento, string indispo, string idsTipoEmpresa, string idsEmpresa, string idsTipoEquipo, DateTime fechaInicio, DateTime fechaFin)
        {
            return FactorySic.GetEveManttoRepository().GetIndispUniGeneracion(idsTipoMantenimiento, indispo, idsTipoEmpresa, idsEmpresa, idsTipoEquipo, fechaInicio, fechaFin);
        }

        #endregion

        #region Métodos Tabla ME_MEDICIONXINTERVALO

        private List<MeMedicionxintervaloDTO> GetListarCantidadCombustibleCentralTermica(string idEmpresa, string idCentral, string idTipoComb, DateTime fechaInicial, DateTime fechaFinal)
        {
            string idsEstado = "-1", idsRecurso = "-1", idsEquipo = "-1";
            List<MeMedicionxintervaloDTO> listaMedxintervStock = this.servStockCombustible.GetListaReporteStock("-1", "-1", idsRecurso, idEmpresa, idsEstado, fechaInicial.ToString(ConstantesAppServicio.FormatoFecha), fechaFinal.ToString(ConstantesAppServicio.FormatoFecha), idsEquipo, "-1");

            foreach (var reg in listaMedxintervStock)
            {
                reg.Emprnomb = reg.Emprnomb != null ? reg.Emprnomb.Trim() : string.Empty;
                reg.Equinomb = reg.Emprnomb != null ? reg.Equinomb.Trim() : string.Empty;
                reg.Emprnomb = reg.Emprnomb != null ? reg.Emprnomb.Trim() : string.Empty;
                reg.Fenergnomb = reg.Fenergnomb != null ? reg.Fenergnomb.Trim() : string.Empty;
                reg.Tipoinfoabrev = reg.Tipoinfoabrev != null ? reg.Tipoinfoabrev.Trim() : string.Empty;
            }

            return listaMedxintervStock;
        }

        private List<MeMedicionxintervaloDTO> GetListarConsumoCombustibleSemanal(string idEmpresa, string idCentral, string idTipoComb, string ptomedicodi, DateTime fechaInicial, DateTime fechaFinal)
        {
            List<MeMedicionxintervaloDTO> listaMedxintervStock = FactorySic.GetMeMedicionxintervaloRepository().GetListaMedxintervConsumo(ConstantesStockCombustibles.LectCodiConsumo,
                ConstantesStockCombustibles.Origlectcodi, idEmpresa, fechaInicial, fechaFinal, "", idTipoComb, idCentral, ptomedicodi);



            return listaMedxintervStock;
        }

        #endregion

        #region Métodos Tabla SI_COSTOMARGINAL

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiCostomarginal
        /// </summary>
        public List<SiCostomarginalDTO> GetByCriteriaSiCostomarginals(DateTime fechaIni, DateTime fechaFin, string barrcodi = ConstantesAppServicio.ParametroDefecto)
        {
            return FactorySic.GetSiCostomarginalRepository().GetByCriteria(fechaIni, fechaFin, barrcodi);
        }

        #endregion

        #region Métodos Tabla ME_GPS

        /// <summary>
        /// Permite realizar búsquedas en la tabla MeGps por gps
        /// </summary>
        /// <param name="gps"></param>
        /// <param name="soloIEOD"></param>
        /// <returns></returns>
        public List<MeGpsDTO> ListarGpsxFiltro(string gps, bool soloIEOD = false)
        {
            List<int> listaGpscodi = gps.Split(',').Select(Int32.Parse).ToList();

            List<MeGpsDTO> lista = FactorySic.GetMeGpsRepository().List().OrderBy(x => x.Gpsestado).ThenBy(x => x.Nombre).ToList();
            if (gps != ConstantesAppServicio.ParametroDefecto) lista = lista.Where(x => listaGpscodi.Contains(x.Gpscodi)).ToList();
            if (soloIEOD) lista = lista.Where(x => x.Gpsindieod == ConstantesAppServicio.SI).ToList();

            foreach (var reg in lista)
            {
                reg.Nombre = reg.Nombre != null ? reg.Nombre.Trim() : string.Empty;
                reg.NombreYEstado = reg.Nombre + (reg.Gpsestado == "B" ? " (Baja)" : "");
            }

            return lista;
        }

        /// <summary>
        /// Permite actualizar listado de gps
        /// </summary>
        /// <param name="list"></param>
        /// <returns></returns>
        public int ActualizarListadoGPS(string list)
        {
            try
            {
                List<string> items = list.Split('#').ToList();

                foreach (string item in items)
                {
                    string[] cad = item.Split('@');

                    if (cad.Length == 2)
                    {
                        int idGps = int.Parse(cad[0]);
                        string estado = cad[1];
                        FactorySic.GetMeGpsRepository().ActualizarGPSIEOD(idGps, estado);
                    }
                }
                return 1;
            }
            catch
            {
                return -1;
            }
        }

        #endregion

        #region Métodos Tabla EVE_GPSAISLADO

        /// <summary>
        /// Permite realizar búsquedas en la tabla EveGpsaislado
        /// </summary>
        public List<EveGpsaisladoDTO> GetByCriteriaEveGpsaislados(int iccodi)
        {
            return FactorySic.GetEveGpsaisladoRepository().GetByCriteria(iccodi);
        }

        #endregion

        #region Métodos Tabla SI_MENUREPORTE

        /// <summary>
        /// Lista del menu reporte por tipo de reporte 
        /// </summary>
        /// <param name="tmrepcodi"></param>
        /// <returns></returns>
        public List<SiMenureporteDTO> GetListaAdmReporte(int tmrepcodi)
        {
            return FactorySic.GetSiMenureporteRepository().GetListaAdmReporte(tmrepcodi);
        }

        /// <summary>
        /// Actualiza estado de registro de reporte 
        /// </summary>
        /// <param name="repcodi"></param>
        public void UpdItemAdmReporte(int repcodi)
        {
            SiMenureporteDTO entity = FactorySic.GetSiMenureporteRepository().GetById(repcodi);
            entity.Repstado = (entity.Repstado.Equals(1)) ? 0 : 1;

            FactorySic.GetSiMenureporteRepository().Update(entity);
        }

        /// <summary>
        /// Obtener registro de SiMenureporte segun id
        /// </summary>
        /// <param name="repcodi"></param>
        /// <returns></returns>
        public SiMenureporteDTO GetByIdMenuReporte(int repcodi)
        {
            return FactorySic.GetSiMenureporteRepository().GetById(repcodi);
        }

        /// <summary>
        /// ListarItemFromSiMenureporte
        /// </summary>
        /// <returns></returns>
        public List<ItemMenuNumeral> ListarItemFromSiMenureporte()
        {
            var listaItemBD = FactorySic.GetSiMenureporteRepository().List();

            List<ItemMenuNumeral> lista = new List<ItemMenuNumeral>();
            foreach (var objItem in listaItemBD)
            {
                lista.Add(new ItemMenuNumeral()
                {
                    Codigo = objItem.Repcodi,
                    Nombre = objItem.Repdescripcion,
                    NombreExcel = objItem.Mreptituloexcel
                });
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla SI_MENUREPORTE_HOJA

        /// <summary>
        /// Inserta un registro de la tabla SI_MENUREPORTE_HOJA
        /// </summary>
        public void SaveSiMenureporteHoja(SiMenureporteHojaDTO entity)
        {
            try
            {
                FactorySic.GetSiMenureporteHojaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_MENUREPORTE_HOJA
        /// </summary>
        public void UpdateSiMenureporteHoja(SiMenureporteHojaDTO entity)
        {
            try
            {
                FactorySic.GetSiMenureporteHojaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_MENUREPORTE_HOJA
        /// </summary>
        public void DeleteSiMenureporteHoja(int mrephcodi)
        {
            try
            {
                FactorySic.GetSiMenureporteHojaRepository().Delete(mrephcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_MENUREPORTE_HOJA
        /// </summary>
        public SiMenureporteHojaDTO GetByIdSiMenureporteHoja(int mrephcodi)
        {
            return FactorySic.GetSiMenureporteHojaRepository().GetById(mrephcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_MENUREPORTE_HOJA
        /// </summary>
        public List<SiMenureporteHojaDTO> ListSiMenureporteHojas()
        {
            return FactorySic.GetSiMenureporteHojaRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiMenureporteHoja
        /// </summary>
        public List<SiMenureporteHojaDTO> GetByCriteriaSiMenureporteHojas(int tmrepcodi)
        {
            return FactorySic.GetSiMenureporteHojaRepository().GetByCriteria(tmrepcodi);
        }

        #endregion

        #region Métodos Tabla SI_MENUREPORTE_GRAFICO

        /// <summary>
        /// Inserta un registro de la tabla SI_MENUREPORTE_GRAFICO
        /// </summary>
        public void SaveSiMenureporteGrafico(SiMenureporteGraficoDTO entity)
        {
            try
            {
                FactorySic.GetSiMenureporteGraficoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_MENUREPORTE_GRAFICO
        /// </summary>
        public void UpdateSiMenureporteGrafico(SiMenureporteGraficoDTO entity)
        {
            try
            {
                FactorySic.GetSiMenureporteGraficoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_MENUREPORTE_GRAFICO
        /// </summary>
        public void DeleteSiMenureporteGrafico(int mrgrcodi)
        {
            try
            {
                FactorySic.GetSiMenureporteGraficoRepository().Delete(mrgrcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_MENUREPORTE_GRAFICO
        /// </summary>
        public SiMenureporteGraficoDTO GetByIdSiMenureporteGrafico(int mrgrcodi)
        {
            return FactorySic.GetSiMenureporteGraficoRepository().GetById(mrgrcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_MENUREPORTE_GRAFICO
        /// </summary>
        public List<SiMenureporteGraficoDTO> ListSiMenureporteGraficos()
        {
            return FactorySic.GetSiMenureporteGraficoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiMenureporteGrafico
        /// </summary>
        public List<SiMenureporteGraficoDTO> GetByCriteriaSiMenureporteGraficos(int tmrepcodi)
        {
            return FactorySic.GetSiMenureporteGraficoRepository().GetByCriteria(tmrepcodi);
        }

        #endregion

        #region Métodos Tabla SI_NOTA
        /// <summary>
        /// Inserta un registro de la tabla SI_NOTA
        /// </summary>
        public void SaveSiNota(SiNotaDTO entity)
        {
            try
            {
                int maxSinotaorden = FactorySic.GetSiNotaRepository().GetMaxSinotaorden(entity.Sinotaperiodo, entity.Mrepcodi, entity.Verscodi);
                entity.Sinotaorden = maxSinotaorden;

                FactorySic.GetSiNotaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_NOTA
        /// </summary>
        public void UpdateSiNota(SiNotaDTO entity)
        {
            try
            {
                FactorySic.GetSiNotaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_NOTA
        /// </summary>
        public void DeleteSiNota(int sinotacodi)
        {
            try
            {
                FactorySic.GetSiNotaRepository().Delete(sinotacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_NOTA
        /// </summary>
        public SiNotaDTO GetByIdSiNota(int sinotacodi)
        {
            return FactorySic.GetSiNotaRepository().GetById(sinotacodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiNota
        /// </summary>
        public List<SiNotaDTO> GetByCriteriaSiNotas(DateTime periodo, int mrepcodi, int verscodi)
        {
            var lista = FactorySic.GetSiNotaRepository().GetByCriteria(periodo, mrepcodi, verscodi);
            int orden = 1;
            foreach (var reg in lista)
            {
                reg.UltimaModificacionUsuarioDesc = reg.Sinotafecmodificacion != null ? reg.Sinotausumodificacion : reg.Sinotausucreacion;
                reg.UltimaModificacionFechaDesc = reg.Sinotafecmodificacion != null ? reg.Sinotafecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : reg.Sinotafeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull);
                if (reg.Sinotaorden != orden)
                {
                    reg.Sinotaorden = orden;
                    this.UpdateSiNotaOrden(reg); //Actualizar el orden
                }
                orden++;
            }

            if (ConstantesAnexoAPR5.IndexRecomendacionConclusion == mrepcodi)
            {
                SiNotaDTO nota = new SiNotaDTO();
                nota.Sinotaorden = lista.Count() + 1;
                nota.Sinotadesc = "En caso hubiera observaciones al presente informe, favor de enviarlo al correo electrónico revisionieod@coes.org.pe";
                nota.Sinotatipo = 1;
                lista.Add(nota);
            }

            return lista;
        }

        /// <summary>
        /// UPdate de orden de las notas
        /// </summary>
        /// <param name="sinota"></param>
        public void UpdateSiNotaOrden(SiNotaDTO sinota)
        {
            try
            {
                FactorySic.GetSiNotaRepository().UpdateOrden(sinota);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        #endregion

        #region Métodos Tabla EVE_EVENTO

        private List<EventoDTO> ObtenerDetalleEventos(DateTime fechaInicio, DateTime fechaFin)
        {
            var lista = ObtenerEventosFallas(fechaInicio, fechaFin.AddDays(1));

            foreach (var item in lista)
            {
                item.EQUIABREV = item.AREADESC + " - " + item.FAMABREV + " " + item.EQUIABREV;
                item.SUBCAUSAABREV = item.Causaevendesc;
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla EQ_FAMILIA
        /// <summary>
        /// Lista los tipos de equipos que existen 
        /// </summary>
        /// <returns></returns>
        public List<EqFamiliaDTO> ListarTiposEquipo()
        {
            List<EqFamiliaDTO> entitys;
            try
            {
                entitys = FactorySic.GetEqFamiliaRepository().List();
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message, ex);
            }
            return entitys;

        }

        /// <summary>
        /// Listar todos los tipos de centrales y generadores
        /// </summary>
        /// <returns></returns>
        public List<EqFamiliaDTO> ListarTipoCentralGenerador()
        {
            return this.ListarTiposEquipo().Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica
                || x.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica
                || x.Famcodi == ConstantesHorasOperacion.IdTipoSolar
                || x.Famcodi == ConstantesHorasOperacion.IdTipoEolica
                || x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico
                || x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico
                || x.Famcodi == ConstantesHorasOperacion.IdGeneradorSolar
                || x.Famcodi == ConstantesHorasOperacion.IdGeneradorEolica
                ).ToList();
        }

        #endregion

        #region Métodos Tabla SI_TIPOGENERACION

        /// <summary>
        /// Listar lista de SiTipogeneracionDTO utilizados en el aplicativo
        /// </summary>
        /// <returns></returns>
        public List<SiTipogeneracionDTO> ListarSiTipogeneracion()
        {
            List<SiTipogeneracionDTO> lista = FactorySic.GetSiTipogeneracionRepository().List().Where(x => x.Tgenercodi >= 1 && x.Tgenercodi <= 4).OrderBy(x => x.Tgenercodi).ToList();
            return lista;
        }

        /// <summary>
        /// Get by id SiTipogeneracionDTO
        /// </summary>
        /// <param name="tgenercodi"></param>
        /// <returns></returns>
        public SiTipogeneracionDTO GetTipoGeneracion(int tgenercodi)
        {
            return FactorySic.GetSiTipogeneracionRepository().GetById(tgenercodi);
        }

        /// <summary>
        /// Lista SiTipogeneracionDTO por central
        /// </summary>
        /// <param name="equicodi"></param>
        /// <returns></returns>
        public List<SiTipogeneracionDTO> TipoGeneracionxCentral(string equicodi)
        {
            return FactorySic.GetSiTipogeneracionRepository().TipoGeneracionxCentral(equicodi);
        }

        #endregion

        #region Métodos Tabla ME_REPORTE
        /// <summary>
        /// Obtener Reporte segun id
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public MeReporteDTO GetByIdReporte(int id)
        {
            return FactorySic.GetMeReporteRepository().GetById(id);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla ME_REPORTE
        /// </summary>
        public List<MeReporteDTO> ListMeReportes()
        {
            return FactorySic.GetMeReporteRepository().List();
        }

        #endregion

        #region Métodos Tabla EQ_PROPEQUI

        /// <summary>
        /// Calulo de la potencia ef ectiva por centrales
        /// </summary>
        /// <param name="equicodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="tipoprop"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string CalcularPotenciaEfectivaCentrales(int equicodi, int famcodi, int tipoprop, DateTime fechaFin)
        {
            int propCodi = 0;
            switch (famcodi)
            {
                case ConstantesPR5ReportesServicio.FamcodiCtralTermo:
                    if (tipoprop == ConstantesPR5ReportesServicio.PropPortenciaEfectiva)
                    {
                        propCodi = ConstantesPR5ReportesServicio.PropPotEfectTermo;
                    }
                    else // Potencia Instalada
                    {
                        propCodi = ConstantesPR5ReportesServicio.PropPotInstaladaTermo;
                    }
                    break;
                case ConstantesPR5ReportesServicio.FamcodiCtralHidro:
                    if (tipoprop == ConstantesPR5ReportesServicio.PropPortenciaEfectiva)
                    {
                        propCodi = ConstantesPR5ReportesServicio.PropPotEfecHidro;
                    }
                    else
                    {
                        propCodi = ConstantesPR5ReportesServicio.PropPotInstaladaHidro;
                    }

                    break;
                case ConstantesPR5ReportesServicio.FamcodiCtralSolar:
                    if (tipoprop == ConstantesPR5ReportesServicio.PropPortenciaEfectiva)
                    {
                        propCodi = ConstantesPR5ReportesServicio.PropPotEfectSolar;
                    }
                    else
                    {
                        propCodi = ConstantesPR5ReportesServicio.PropPotInstaladaSolar;
                    }
                    break;
                case ConstantesPR5ReportesServicio.FamcodiCtralEolica:
                    if (tipoprop == ConstantesPR5ReportesServicio.PropPortenciaEfectiva)
                    {
                        propCodi = ConstantesPR5ReportesServicio.PropPotEfecEolica;
                    }
                    else
                    {
                        propCodi = ConstantesPR5ReportesServicio.PropPotInstaladaEolica;
                    }
                    break;
            }
            return FactorySic.GetEqPropequiRepository().ObtenerValorPropiedadEquipoFecha(propCodi, equicodi, fechaFin.ToString("dd/MM/yyyy"));
        }

        /// <summary>
        /// Listar la capacidad de los embalses HM3
        /// </summary>
        /// <param name="fechaConsulta"></param>
        /// <returns></returns>
        public List<EqPropequiDTO> ListarCapacidadEmbalseLaguna(DateTime fechaConsulta)
        {
            var listaDataPropiedad = FactorySic.GetEqPropequiRepository().ListarValoresVigentesPropiedades(fechaConsulta, "-1", "-1", "-1", ConstantesPR5ReportesServicio.PropCapacidadEmbalseLaguna.ToString(), string.Empty, ConstantesAppServicio.ParametroDefecto);
            foreach (var reg in listaDataPropiedad)
            {
                decimal valor = 0;
                Decimal.TryParse(reg.Valor, out valor);
                reg.ValorDecimal = valor;
            }

            return listaDataPropiedad;
        }

        #endregion

        #region Métodos Tabla ME_AMPLIACIONFECHA

        /// <summary>
        /// Inserta un registro de la tabla ME_AMPLIACIONFECHA
        /// </summary>
        public void SaveMeAmpliacionfecha(MeAmpliacionfechaDTO entity)
        {
            try
            {
                FactorySic.GetMeAmpliacionfechaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla ME_AMPLIACIONFECHA
        /// </summary>
        public void UpdateMeAmpliacionfecha(MeAmpliacionfechaDTO entity)
        {
            try
            {
                FactorySic.GetMeAmpliacionfechaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla ME_AMPLIACIONFECHA
        /// </summary>
        public MeAmpliacionfechaDTO GetByIdMeAmpliacionfecha(DateTime fecha, int empresa, int formato)
        {
            return FactorySic.GetMeAmpliacionfechaRepository().GetById(fecha, empresa, formato);
        }

        /// <summary>
        /// Devuelve lista de ampliacion de fechas para listado multiple
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="sEmpresa"></param>
        /// <param name="sFormato"></param>
        /// <returns></returns>
        public List<MeAmpliacionfechaDTO> ObtenerListaMultipleMeAmpliacionfechas(DateTime fechaIni, DateTime fechaFin, string sEmpresa, string sFormato)
        {
            if (string.IsNullOrEmpty(sEmpresa)) sEmpresa = ConstantesAppServicio.ParametroDefecto;
            if (string.IsNullOrEmpty(sFormato)) sFormato = ConstantesAppServicio.ParametroDefecto;
            return FactorySic.GetMeAmpliacionfechaRepository().GetListaMultiple(fechaIni, fechaFin, sEmpresa, sFormato);
        }

        #endregion

        #region Métodos Tabla ME_REPORTE_GRAFICO

        private List<MeReporteGraficoDTO> GetByCriteriaMeReporteGrafico(int reporcodi)
        {
            return FactorySic.GetMeReporteGraficoRepository().GetByCriteria(reporcodi);
        }

        #endregion

        #region Métodos Tabla EVE_IEODCUADRO

        /// <summary>
        /// ReporteOperacionesVariasDataReporte
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="clase"></param>
        /// <param name="subcausa"></param>
        /// <param name="flagIncluirGps"></param>
        /// <returns></returns>
        public List<EveIeodcuadroDTO> ReporteOperacionesVariasDataReporte(DateTime fechaInicio, DateTime fechaFin, string clase, string subcausa, bool flagIncluirGps)
        {
            var lista = FactorySic.GetEveIeodcuadroRepository().ListarReporteOperacionVaria(fechaInicio, fechaFin, clase, subcausa);
            foreach (var reg in lista)
            {
                reg.Emprabrev = (reg.Emprabrev ?? "").Trim();
                reg.Emprnomb = reg.Emprnomb != null ? reg.Emprnomb.Trim() : string.Empty;
                reg.Areanomb = reg.Areanomb != null ? reg.Areanomb.Trim() : string.Empty;
                reg.Equiabrev = reg.Equiabrev != null ? reg.Equiabrev.Trim() : string.Empty;
                reg.HoraIni = reg.Ichorini != null ? reg.Ichorini.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
                reg.HoraFin = reg.Ichorfin != null ? reg.Ichorfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
                reg.Icdescrip1 = reg.Icdescrip1 != null ? reg.Icdescrip1.Trim() : string.Empty;
                reg.Icdescrip2 = reg.Icdescrip2 != null ? reg.Icdescrip2.Trim() : string.Empty;
                reg.Icdescrip3 = reg.Icdescrip3 != null ? reg.Icdescrip3.Trim() : string.Empty;

                if (flagIncluirGps)
                {
                    this.GetGpsPrincipal(reg.Iccodi, out int? gpscodiPpal, out string gpsnombre, out string listaGpsNombre);
                    reg.Gpscodi = gpscodiPpal.GetValueOrDefault(0);
                    reg.Gpsnombre = gpsnombre;
                    reg.ListaNombreGps = listaGpsNombre;
                }
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla SI_VERSION

        /// <summary>
        /// SaveSiVersion
        /// </summary>
        /// <param name="version"></param>
        /// <returns></returns>
        public int SaveSiVersion(SiVersionDTO version)
        {
            int nroVersion = FactorySic.GetSiVersionRepository().MaximoXFecha(version.Versfechaperiodo, version.Tmrepcodi);
            version.Verscorrelativo = nroVersion + 1;
            return FactorySic.GetSiVersionRepository().Save(version);
        }

        /// <summary>
        /// GetByIdSiVersion
        /// </summary>
        /// <param name="verscodi"></param>
        /// <returns></returns>
        public SiVersionDTO GetByIdSiVersion(int verscodi)
        {
            return FactorySic.GetSiVersionRepository().GetById(verscodi);
        }

        /// <summary>
        /// Listar las versiones por fecha y tipo de proyecto
        /// </summary>
        /// <param name="dFecha"></param>
        /// <param name="tmrepcodi"></param>
        /// <returns></returns>
        public List<SiVersionDTO> ListaVersionByFecha(DateTime dFecha, int tmrepcodi)
        {
            var lista = FactorySic.GetSiVersionRepository().GetByCriteria(dFecha, tmrepcodi).OrderByDescending(x => x.Verscodi).ToList();

            foreach (var v in lista)
            {
                //IEOD
                v.VersfechaperiodoDesc = v.Versfechaperiodo.ToString(ConstantesAppServicio.FormatoFecha);

                //INFORME SEMANAL
                if (ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal == tmrepcodi)
                {
                    Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(v.Versfechaperiodo);
                    v.VersfechaperiodoDesc = string.Format("Sem{0}-{1}", anioSemIni.Item1, anioSemIni.Item2);
                }

                //EJECUTIVO SEMANAL
                if (ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal == tmrepcodi)
                {
                    DateTime dtfechaIniSem = v.Versfechaperiodo;
                    DateTime dtfechaFinSem = dtfechaIniSem.AddDays(6);

                    Tuple<int, int> anioSem1 = EPDate.f_numerosemana_y_anho(dtfechaIniSem);
                    Tuple<int, int> anioSem2 = EPDate.f_numerosemana_y_anho(dtfechaFinSem);

                    v.VersfechaperiodoDesc = string.Format("Sem{0}({1})-{2}", anioSem1.Item1, anioSem2.Item1, anioSem1.Item2);
                }

                //MENSUAL
                if (ConstantesPR5ReportesServicio.ReptipcodiInformeMensual == tmrepcodi)
                {
                    DateTime dtfechaIniMes = v.Versfechaperiodo;
                    v.VersfechaperiodoDesc = string.Format("{0}-{1}", EPDate.f_NombreMes(dtfechaIniMes.Month), dtfechaIniMes.Year);
                }

                //EJECUTIVO MENSUAL
                if (ConstantesPR5ReportesServicio.ReptipcodiEjecutivoMensual == tmrepcodi)
                {
                    DateTime dtfechaIniMes = v.Versfechaperiodo;
                    v.VersfechaperiodoDesc = string.Format("{0}-{1}", EPDate.f_NombreMes(dtfechaIniMes.Month), dtfechaIniMes.Year);
                }

                //ANUAL
                if (ConstantesPR5ReportesServicio.ReptipcodiInformeAnual == tmrepcodi)
                {
                    DateTime dtfechaIniMes = v.Versfechaperiodo;
                    v.VersfechaperiodoDesc = string.Format("{0}", dtfechaIniMes.Year);
                }
                v.VerscorrelativoDesc = v.Verscorrelativo + string.Empty;
                v.VerscodiDesc = v.Verscodi.ToString();
                v.VersionTituloWeb = "Versión N° " + v.Verscorrelativo;
                v.VersfeccreacionDesc = v.Versfeccreacion != null ? v.Versfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla SI_VERSION_DET

        private SiVersionDTO GetByVersionDetIEOD(string verscodi, decimal reporte)
        {
            return FactorySic.GetSiVersionDetRepository().GetByVersionDetIEOD(Int32.Parse(verscodi), reporte);
        }

        /// <summary>
        /// Inserta un registro de la tabla SI_VERSION_DET
        /// </summary>
        public int SaveSiVersionDet(SiVersionDetDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetSiVersionDetRepository().SaveTransaccional(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_VERSION_DET
        /// </summary>
        public SiVersionDetDTO GetByIdSiVersionDet(int verscodi, int mrepcodi)
        {
            return FactorySic.GetSiVersionDetRepository().GetByIdVersionYNumeral(verscodi, mrepcodi);
        }

        #endregion

        #region Métodos Tabla SI_VERSION_DAT

        /// <summary>
        /// Inserta un registro de la tabla SI_VERSION_DAT
        /// </summary>
        public int SaveSiVersionDat(SiVersionDatDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetSiVersionDatRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_VERSION_DAT
        /// </summary>
        public void UpdateSiVersionDat(SiVersionDatDTO entity)
        {
            try
            {
                FactorySic.GetSiVersionDatRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_VERSION_DAT
        /// </summary>
        public void DeleteSiVersionDat(int verdatcodi)
        {
            try
            {
                FactorySic.GetSiVersionDatRepository().Delete(verdatcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_VERSION_DAT
        /// </summary>
        public SiVersionDatDTO GetByIdSiVersionDat(int verdatcodi)
        {
            return FactorySic.GetSiVersionDatRepository().GetById(verdatcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_VERSION_DAT
        /// </summary>
        public List<SiVersionDatDTO> ListSiVersionDats()
        {
            return FactorySic.GetSiVersionDatRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiVersionDat
        /// </summary>
        public List<SiVersionDatDTO> GetByCriteriaSiVersionDats(int versdtcodi)
        {
            var lista = FactorySic.GetSiVersionDatRepository().GetByCriteria(versdtcodi);

            foreach (var obj in lista)
                FormatearSiVersionDat(obj);

            return lista;
        }

        private void FormatearSiVersionDat(SiVersionDatDTO obj)
        {
            if (!string.IsNullOrEmpty(obj.Verdatvalor))
            {
                if (obj.Vercnpcodi == 1)
                {
                    Int32.TryParse(obj.Verdatvalor, out int valorEntero);
                    obj.CodigoEntero = valorEntero;
                }
            }
        }

        #endregion

        #region Métodos Tabla SI_VERSION_DATDET

        /// <summary>
        /// Inserta un registro de la tabla SI_VERSION_DATDET
        /// </summary>
        public void SaveSiVersionDatdet(SiVersionDatdetDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetSiVersionDatdetRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_VERSION_DATDET
        /// </summary>
        public void UpdateSiVersionDatdet(SiVersionDatdetDTO entity)
        {
            try
            {
                FactorySic.GetSiVersionDatdetRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_VERSION_DATDET
        /// </summary>
        public void DeleteSiVersionDatdet(int vdatdtcodi)
        {
            try
            {
                FactorySic.GetSiVersionDatdetRepository().Delete(vdatdtcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_VERSION_DATDET
        /// </summary>
        public SiVersionDatdetDTO GetByIdSiVersionDatdet(int vdatdtcodi)
        {
            return FactorySic.GetSiVersionDatdetRepository().GetById(vdatdtcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_VERSION_DATDET
        /// </summary>
        public List<SiVersionDatdetDTO> ListSiVersionDatdets()
        {
            return FactorySic.GetSiVersionDatdetRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiVersionDatdet
        /// </summary>
        public List<SiVersionDatdetDTO> GetByCriteriaSiVersionDatdets(int versdtcodi)
        {
            var lista = FactorySic.GetSiVersionDatdetRepository().GetByCriteria(versdtcodi);

            foreach (var obj in lista)
                FormatearSiVersionDatdetDTO(obj);

            return lista;
        }

        private void FormatearSiVersionDatdetDTO(SiVersionDatdetDTO obj)
        {
            if (!string.IsNullOrEmpty(obj.Vdatdtvalor))
            {
                if (obj.Vercnpcodi == 100 || obj.Vercnpcodi == 101 || obj.Vercnpcodi == 102 || obj.Vercnpcodi == 103 || obj.Vercnpcodi == 104 ||
                    obj.Vercnpcodi == 105 || obj.Vercnpcodi == 106 || obj.Vercnpcodi == 107 || obj.Vercnpcodi == 108 || obj.Vercnpcodi == 109 ||
                    obj.Vercnpcodi == 110 || obj.Vercnpcodi == 111 || obj.Vercnpcodi == 112 || obj.Vercnpcodi == 113 || obj.Vercnpcodi == 114 ||
                    obj.Vercnpcodi == 13 || obj.Vercnpcodi == 14 || obj.Vercnpcodi == 15 || obj.Vercnpcodi == 116 || obj.Vercnpcodi == 117 ||
                    obj.Vercnpcodi == 118 || obj.Vercnpcodi == 119 || obj.Vercnpcodi == 120 || obj.Vercnpcodi == 121 || obj.Vercnpcodi == 122 ||
                    obj.Vercnpcodi == 123 || obj.Vercnpcodi == 124 || obj.Vercnpcodi == 125 || obj.Vercnpcodi == 126 || obj.Vercnpcodi == 127 ||
                    obj.Vercnpcodi == 128 || obj.Vercnpcodi == 129 || obj.Vercnpcodi == 130 || obj.Vercnpcodi == 131 || obj.Vercnpcodi == 132 ||
                     obj.Vercnpcodi == 133 || obj.Vercnpcodi == 134 || obj.Vercnpcodi == 135 || obj.Vercnpcodi == 136 || obj.Vercnpcodi == 137)
                {
                    decimal.TryParse(obj.Vdatdtvalor, out decimal valorDecimal);
                    obj.ValorDecimal = valorDecimal;
                }
            }
        }

        #endregion

        #region Métodos Tabla SI_VERSION_CONCEPTO

        /// <summary>
        /// Inserta un registro de la tabla SI_VERSION_CONCEPTO
        /// </summary>
        public void SaveSiVersionConcepto(SiVersionConceptoDTO entity)
        {
            try
            {
                FactorySic.GetSiVersionConceptoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_VERSION_CONCEPTO
        /// </summary>
        public void UpdateSiVersionConcepto(SiVersionConceptoDTO entity)
        {
            try
            {
                FactorySic.GetSiVersionConceptoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla SI_VERSION_CONCEPTO
        /// </summary>
        public void DeleteSiVersionConcepto(int vercnpcodi)
        {
            try
            {
                FactorySic.GetSiVersionConceptoRepository().Delete(vercnpcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla SI_VERSION_CONCEPTO
        /// </summary>
        public SiVersionConceptoDTO GetByIdSiVersionConcepto(int vercnpcodi)
        {
            return FactorySic.GetSiVersionConceptoRepository().GetById(vercnpcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla SI_VERSION_CONCEPTO
        /// </summary>
        public List<SiVersionConceptoDTO> ListSiVersionConceptos()
        {
            return FactorySic.GetSiVersionConceptoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla SiVersionConcepto
        /// </summary>
        public List<SiVersionConceptoDTO> GetByCriteriaSiVersionConceptos()
        {
            return FactorySic.GetSiVersionConceptoRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla EVE_MAILS

        private List<EveMailsDTO> BuscarOperacionesDelTipoReProgramaPorFecha(string fecha)
        {
            return FactorySic.GetEveMailsRepository().BuscarOperacionesDelTipoReProgramaPorFecha(fecha);
        }

        /// <summary>
        /// Obtiene la fecha máx (LASTDATE) de programa emitido
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public EveMailsDTO GetFechaMaxProgramaEmitido(DateTime fecha)
        {
            return FactorySic.GetEveMailsRepository().GetFechaMaxProgramaEmitido(fecha);
        }

        private List<EveMailsDTO> ListarReprogramaXDia(DateTime fecha)
        {
            string sFecha = fecha.ToString(ConstantesAppServicio.FormatoFechaYMD2);
            List<EveMailsDTO> entitys = BuscarOperacionesDelTipoReProgramaPorFecha(sFecha).OrderBy(x => x.Mailbloquehorario).ToList();
            int li_letra = 65;

            foreach (var elem in entitys)
            {
                elem.Hora = elem.Mailfecha.AddMinutes(elem.Mailbloquehorario.GetValueOrDefault(0) * 30).ToString(ConstantesAppServicio.FormatoOnlyHora);
                elem.Reprograma = "SCO - " + GetNumeroIeod(fecha) + "-" + ((char)li_letra) + " / Sem " + EPDate.f_numerosemana(fecha);
                li_letra++;
            }

            return entitys;
        }

        #endregion

        #region Métodos Tabla ME_DESPACHO_PRODGEN

        /// <summary>
        /// Permite obtener un registro de la tabla ME_DESPACHO_PRODGEN
        /// </summary>
        public MeDespachoProdgenDTO GetByIdMeDespachoProdgen(int dpgencodi)
        {
            return FactorySic.GetMeDespachoProdgenRepository().GetById(dpgencodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla ME_DESPACHO_PRODGEN
        /// </summary>
        public List<MeDespachoProdgenDTO> ListMeDespachoProdgens(int tipoDato, DateTime fechaIni, DateTime fechaFin, string flagRER)
        {
            return FactorySic.GetMeDespachoProdgenRepository().ListResumen(tipoDato, fechaIni, fechaFin, flagRER);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MeDespachoProdgen
        /// </summary>
        public List<MeDespachoProdgenDTO> GetByCriteriaMeDespachoProdgens(int tipoDato, DateTime fechaIni, DateTime fechaFin, string flagIntegrante, string flagRER)
        {
            return FactorySic.GetMeDespachoProdgenRepository().GetByCriteria(tipoDato, fechaIni, fechaFin, flagIntegrante, flagRER);
        }

        #endregion

        #region Métodos Tabla ME_DESPACHO_RESUMEN

        /// <summary>
        /// Permite obtener un registro de la tabla ME_DESPACHO_RESUMEN
        /// </summary>
        public MeDespachoResumenDTO GetByIdMeDespachoResumen(int dregencodi)
        {
            return FactorySic.GetMeDespachoResumenRepository().GetById(dregencodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla ME_DESPACHO_RESUMEN
        /// </summary>
        public List<MeDespachoResumenDTO> ListMeDespachoResumens()
        {
            return FactorySic.GetMeDespachoResumenRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MeDespachoResumen
        /// </summary>
        public List<MeDespachoResumenDTO> GetByCriteriaMeDespachoResumens(int tipoDato, DateTime fechaIni, DateTime fechaFin)
        {
            return FactorySic.GetMeDespachoResumenRepository().GetByCriteria(tipoDato, fechaIni, fechaFin);
        }

        #endregion

        #endregion

        #region Anexo A

        #region INFORMACIÓN GENERAL

        // 3.13.2.1.	Reporte de Eventos: fallas, interrupciones, restricciones y otros de carácter operativo.
        #region REPORTE_EVENTOS

        /// <summary>
        /// ReporteEventosDataReporte
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="esSuministro"></param>
        /// <param name="indInterrupcion"></param>
        /// <param name="listaEvento"></param>
        /// <param name="listaInterrup"></param>
        /// <param name="listaEquipo"></param>
        public void ReporteEventosDataReporte(DateTime fechaInicial, DateTime fechaFinal, string esSuministro, string indInterrupcion, out List<EventoDTO> listaEvento, out List<EveInterrupcionDTO> listaInterrup, out List<EqEquipoDTO> listaEquipo)
        {
            int idTipoEvento = 0;
            string version = "-1";
            string turno = string.Empty;
            int idTipoEmpresa = 0;
            int idFamilia = 0;

            //esta query trae inclusive aquellos eventos que han iniciado antes de la fecha de consulta pero continuan
            List<EventoDTO> lista = this.servicioEvento.ExportarEventos(idTipoEvento, fechaInicial, fechaFinal.AddDays(1), version, turno, idTipoEmpresa, 0, idFamilia, indInterrupcion, 0, ConstantesAppServicio.ParametroDefecto);

            //solo considerar aquellos que inician a partir de las 00:00 de la fecha de consulta
            lista = lista.Where(x => x.EVENINI >= fechaInicial.Date).ToList();

            if (esSuministro == string.Empty) lista = lista.Where(x => x.EVENPRELIMINAR == "N").ToList();
            listaEvento = lista;

            listaInterrup = new List<EveInterrupcionDTO>();
            if (lista.Any()) listaInterrup = this.GetByCriteriaEveInterrupcions(string.Join(",", lista.Select(x => x.EVENCODI).ToList()));

            listaEquipo = new List<EqEquipoDTO>();
            if (lista.Any()) listaEquipo = this.GetEquiposPorEvento(string.Join(",", lista.Select(x => x.EVENCODI).ToList()));

            //columna descripción
            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo2();
            nfi.NumberDecimalSeparator = ".";
            foreach (var item in listaEvento)
            {
                var listaIntXEvento = listaInterrup.Where(x => x.Evencodi == item.EVENCODI).ToList();
                var listaIntXEventoInterr = listaIntXEvento.Where(x => x.Interrnivel != "S").ToList();
                var listaIntXEventoBajaMW = listaIntXEvento.Where(x => x.Interrnivel == "S").ToList();

                // Subtabla Interrupciones/Reducciones
                decimal acumI = listaIntXEventoInterr.Sum(x => x.Interrmw ?? 0);

                // Subtabla por Reducciones de carga
                decimal acumB = listaIntXEventoBajaMW.Sum(x => x.Interrmw ?? 0);

                List<string> listaMsj = new List<string>();
                if (acumI > 0) listaMsj.Add(string.Format("Se interrumpió {0} MW.", acumI.ToString("N", nfi)));
                if (acumB > 0) listaMsj.Add(string.Format("Se bajó carga {0} MW.", acumB.ToString("N", nfi)));
                if (!listaMsj.Any()) listaMsj.Add("---");

                item.EVENCOMENTARIOS = string.Join("\n", listaMsj);
            }
        }

        /// <summary>
        /// Listar los eventos del reporte Anexo A
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idUbicacion"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaInterrup"></param>
        /// <param name="listaInterrupVersion"></param>
        /// <param name="listaEq"></param>
        /// <param name="listaEqVersion"></param>
        public void ReporteEventosDataVersionada(string idEmpresa, string idUbicacion, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<EventoDTO> lista, out List<EventoDTO> listaVersion, out List<EveInterrupcionDTO> listaInterrup, out List<EveInterrupcionDTO> listaInterrupVersion, out List<EqEquipoDTO> listaEq, out List<EqEquipoDTO> listaEqVersion)
        {
            lista = new List<EventoDTO>();
            listaVersion = new List<EventoDTO>();

            listaInterrup = new List<EveInterrupcionDTO>();
            listaInterrupVersion = new List<EveInterrupcionDTO>();

            listaEq = new List<EqEquipoDTO>();
            listaEqVersion = new List<EqEquipoDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idUbicacion = string.IsNullOrEmpty(idUbicacion) ? ConstantesAppServicio.ParametroDefecto : idUbicacion;

            int[] ubicaciones = idUbicacion.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] empresas = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<EventoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteEventos);
                listaVersion = GetDataSerializedPreviousVersion<List<EventoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteEventos);

                listaInterrup = GetDataSerializedVersion<List<EveInterrupcionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteEventosInterrup);
                listaInterrupVersion = GetDataSerializedPreviousVersion<List<EveInterrupcionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteEventosInterrup);

                listaEq = GetDataSerializedVersion<List<EqEquipoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteEventosEquipo);
                listaEqVersion = GetDataSerializedPreviousVersion<List<EqEquipoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteEventosEquipo);
            }
            else
            {
                this.ReporteEventosDataReporte(fechaInicial, fechaFinal, string.Empty, ConstantesAppServicio.ParametroDefecto, out lista, out listaInterrup, out listaEq);
            }

            lista = lista.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains((int)x.EMPRCODI))
                                                && (idUbicacion == ConstantesAppServicio.ParametroDefecto || ubicaciones.Contains((int)x.AREACODI))).ToList();
            listaVersion = listaVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains((int)x.EMPRCODI))
                                                && (idUbicacion == ConstantesAppServicio.ParametroDefecto || ubicaciones.Contains((int)x.AREACODI))).ToList();

            lista = lista.OrderBy(x => x.EMPRNOMB).ThenBy(x => x.AREADESC).ThenBy(x => x.EVENINI).ThenBy(x => x.EQUIABREV).ToList();
            listaVersion = listaVersion.OrderBy(x => x.EMPRNOMB).ThenBy(x => x.AREADESC).ThenBy(x => x.EVENINI).ThenBy(x => x.EQUIABREV).ToList();
        }

        private void ReporteEventosExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo
            , string idEmpresa, string idUbicacion, DateTime fechaInicial, DateTime fechaFinal, string versionAnexoA)
        {
            this.ReporteEventosDataVersionada(idEmpresa, idUbicacion, fechaInicial, fechaFinal, versionAnexoA, out List<EventoDTO> lista, out List<EventoDTO> listaVersion, out List<EveInterrupcionDTO> listaInterrup, out List<EveInterrupcionDTO> listaInterrupVersion, out List<EqEquipoDTO> listaEq, out List<EqEquipoDTO> listaEqVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "EVENTOS", fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptEventos(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fechaInicial, fechaFinal.AddDays(1), lista, listaVersion, listaEq, listaEqVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.2.	Reporte de las principales restricciones operativas y mantenimiento de las Unidades de Generación y de los equipos del Sistema de Transmisión.
        #region REPORTE_RESTRICCIONES_OPERATIVAS

        private void ReporteRestriccionesOperativasDataReporte(DateTime fechaInicial, DateTime fechaFinal, out List<EveIeodcuadroDTO> listaRestricOp, out List<EveManttoDTO> listaMantto)
        {
            listaRestricOp = ReporteOperacionesVariasDataReporte(fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.EvenclaseEjecutado,
                                                               ConstantesOperacionesVarias.RestriccionesOperativas.ToString(), false);

            string tiposMantenimiento = ConstantesPR5ReportesServicio.EvenclaseEjecutado, tiposEmpresa = "-1", tiposEquipo = "-1", tiposMantto = "-1", indispo = "-1", interrupcion = "-1", idEmpresa = "-1";
            //listaMantto = this.servicioEvento.GenerarReportesGrafico(tiposMantenimiento, fechaInicial, fechaFinal.AddDays(1), indispo, tiposEmpresa, idEmpresa, tiposEquipo, interrupcion, tiposMantto);

            //obtener la información de intervenciones y convertirlo a EvemanttoDTO
            List<InIntervencionDTO> listaInterv = FactorySic.GetInIntervencionRepository().ListarIntervencionesGrafico(tiposMantenimiento, fechaInicial, fechaFinal.AddDays(1), indispo,
                                                tiposEmpresa, idEmpresa, tiposEquipo, interrupcion, tiposMantto);

            listaMantto = new List<EveManttoDTO>();
            foreach (var regIn in listaInterv)
            {
                var objMantto = IntervencionesAppServicio.ConvertirManto(regIn);
                objMantto.Evenindispo = objMantto.Evenindispo == "F" ? "F/S" : "E/S";
                listaMantto.Add(objMantto);
            }
        }

        /// <summary>
        /// Listar las  manttos de restricciones operativas
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idUbicacion"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="listaRestricOp"></param>
        /// <param name="listaRestricOpVersion"></param>
        /// <param name="listaMantto"></param>
        /// <param name="listaManttoVersion"></param>
        public void ReporteRestriccionesOperativasDataVersionada(string idEmpresa, string idUbicacion, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<EveIeodcuadroDTO> listaRestricOp, out List<EveIeodcuadroDTO> listaRestricOpVersion, out List<EveManttoDTO> listaMantto, out List<EveManttoDTO> listaManttoVersion)
        {
            listaRestricOp = new List<EveIeodcuadroDTO>();
            listaRestricOpVersion = new List<EveIeodcuadroDTO>();

            listaMantto = new List<EveManttoDTO>();
            listaManttoVersion = new List<EveManttoDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idUbicacion = string.IsNullOrEmpty(idUbicacion) ? ConstantesAppServicio.ParametroDefecto : idUbicacion;

            int[] ubicaciones = idUbicacion.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] empresas = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                listaRestricOp = GetDataSerializedVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRestriccionesOperativasRestricOp);
                listaRestricOpVersion = GetDataSerializedPreviousVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRestriccionesOperativasRestricOp);

                listaMantto = GetDataSerializedVersion<List<EveManttoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRestriccionesOperativasMantto);
                listaManttoVersion = GetDataSerializedPreviousVersion<List<EveManttoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRestriccionesOperativasMantto);
            }
            else
            {
                this.ReporteRestriccionesOperativasDataReporte(fechaInicial, fechaFinal, out listaRestricOp, out listaMantto);
            }

            listaRestricOp = listaRestricOp.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                                && (idUbicacion == ConstantesAppServicio.ParametroDefecto || ubicaciones.Contains(x.Areacodi))).ToList();
            listaRestricOpVersion = listaRestricOpVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                                && (idUbicacion == ConstantesAppServicio.ParametroDefecto || ubicaciones.Contains(x.Areacodi))).ToList();

            listaRestricOp = listaRestricOp.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Ichorini).ThenBy(x => x.Equiabrev).ToList();
            listaRestricOpVersion = listaRestricOpVersion.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Ichorini).ThenBy(x => x.Equiabrev).ToList();

            //
            listaMantto = listaMantto.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                                && (idUbicacion == ConstantesAppServicio.ParametroDefecto || ubicaciones.Contains(x.Areacodi))).ToList();
            listaManttoVersion = listaManttoVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                                && (idUbicacion == ConstantesAppServicio.ParametroDefecto || ubicaciones.Contains(x.Areacodi))).ToList();
            listaMantto = listaMantto.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Evenini).ThenBy(x => x.Equiabrev).ToList();
            listaManttoVersion = listaManttoVersion.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Evenini).ThenBy(x => x.Equiabrev).ToList();
        }

        private void ReporteManttoEjecutadoExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string idUbicacion, DateTime fechaInicial, DateTime fechaFinal, string versionAnexoA)
        {
            this.ReporteRestriccionesOperativasDataVersionada(idEmpresa, idUbicacion, fechaInicial, fechaFinal, versionAnexoA, out List<EveIeodcuadroDTO> listaRestricOp, out List<EveIeodcuadroDTO> listaRestricOpVersion, out List<EveManttoDTO> listaMantto, out List<EveManttoDTO> listaManttoVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "MANTENIMIENTO EJECUTADOS", fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptManttoEjecutado(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fechaInicial, fechaFinal, listaMantto, listaManttoVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        private void ReporteRestriccionesOperativasExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string idUbicacion, DateTime fechaInicial, DateTime fechaFinal, string versionAnexoA)
        {
            this.ReporteRestriccionesOperativasDataVersionada(idEmpresa, idUbicacion, fechaInicial, fechaFinal, versionAnexoA, out List<EveIeodcuadroDTO> listaRestricOp, out List<EveIeodcuadroDTO> listaRestricOpVersion, out List<EveManttoDTO> listaMantto, out List<EveManttoDTO> listaManttoVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "RESTRIC_OPE", fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptRestriccionesOperativas(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fechaInicial, fechaFinal, listaRestricOp, listaRestricOpVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.3.	Reporte de ingreso a operación comercial de unidades o centrales de generación, así como de la conexión e integración al SEIN de instalaciones de transmisión.
        #region  REPORTE_INGRESO_OPERACION_CI_SEIN

        private List<EveEventoEquipoDTO> ReporteIngresoConexionIntegracionDataReporte(DateTime fechaInicial, DateTime fechaFinal)
        {
            List<EveEventoEquipoDTO> entitys = new List<EveEventoEquipoDTO>(); /*FactorySic.GetEveEventoEquipoRepository()
                .ListarDetalleEquiposSEIN02(ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto,                    fechaInicial, fechaFinal);
            */
            //Ingreso operacion comercial
            List<EveEventoEquipoDTO> leqIngCom = new List<EveEventoEquipoDTO>();
            List<EqEquipoDTO> listaEquipoIngOpComercial = servEquipamiento.ListarEquiposTienenOpComercial(fechaInicial, fechaFinal, ConstantesHorasOperacion.CodFamilias + "," + ConstantesHorasOperacion.CodFamiliasGeneradores, out List<ResultadoValidacionAplicativo> listaMsjEq);
            listaEquipoIngOpComercial = listaEquipoIngOpComercial.Where(x => x.TieneNuevoIngresoOpComercial).ToList();

            foreach (var l in listaEquipoIngOpComercial)
            {
                EveEventoEquipoDTO reg = new EveEventoEquipoDTO();
                reg.Eeqfechaini = l.Equifechiniopcom.Value;
                reg.Subcausacodi = ConstantesPR5ReportesServicio.SubCausaEquipoOperacionIng;
                reg.Equinomb = l.Equinomb;
                reg.Equicodi = l.Equicodi;
                reg.Emprcodi = l.Emprcodi.Value;
                reg.Emprnomb = l.Emprnomb;
                reg.Areacodi = l.Areacodi;
                reg.Areanomb = l.Areanomb;
                reg.Famcodi = l.Famcodi.GetValueOrDefault(0);
                reg.Famnomb = l.Famnomb;

                leqIngCom.Add(reg);
            }

            entitys.AddRange(leqIngCom);

            return entitys;
        }

        /// <summary>
        /// Devuelve lista de los equipos en SEIN
        /// </summary>
        /// <param name="empresas"></param>
        /// <param name="sTipoEquipo"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteIngresoConexionIntegracionDataVersionada(string empresas, string sTipoEquipo, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<EveEventoEquipoDTO> lista, out List<EveEventoEquipoDTO> listaVersion)
        {
            lista = new List<EveEventoEquipoDTO>();
            listaVersion = new List<EveEventoEquipoDTO>();

            empresas = string.IsNullOrEmpty(empresas) ? ConstantesAppServicio.ParametroDefecto : empresas;
            sTipoEquipo = string.IsNullOrEmpty(sTipoEquipo) ? ConstantesAppServicio.ParametroDefecto : sTipoEquipo;

            int[] empresas_param = empresas.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] sTipoEquipo_param = sTipoEquipo.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<EveEventoEquipoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteIngresoOperacionCISEIN);
                listaVersion = GetDataSerializedPreviousVersion<List<EveEventoEquipoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteIngresoOperacionCISEIN);
            }
            else
            {
                lista = this.ReporteIngresoConexionIntegracionDataReporte(fechaInicial, fechaFinal.AddDays(1));
            }

            lista = lista.Where(x => (empresas == ConstantesAppServicio.ParametroDefecto || empresas_param.Contains(x.Emprcodi))
                                        && (sTipoEquipo == ConstantesAppServicio.ParametroDefecto || sTipoEquipo_param.Contains(x.Famcodi))).ToList();
            listaVersion = listaVersion.Where(x => (empresas == ConstantesAppServicio.ParametroDefecto || empresas_param.Contains(x.Emprcodi))
                                        && (sTipoEquipo == ConstantesAppServicio.ParametroDefecto || sTipoEquipo_param.Contains(x.Famcodi))).ToList();

            lista = lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Eeqfechaini).ThenBy(x => x.Equinomb).ToList();
            listaVersion = listaVersion.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Eeqfechaini).ThenBy(x => x.Equinomb).ToList();
        }

        private void ReporteIngresoConexionIntegracionExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo
           , string empresas, string sTipoEquipo, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            this.ReporteIngresoConexionIntegracionDataVersionada(empresas, sTipoEquipo, fecha1, fecha2, versionAnexoA, out List<EveEventoEquipoDTO> lista, out List<EveEventoEquipoDTO> listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "INGRESO OC", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooter1);
            UtilAnexoAPR5.GeneraRptIngresoConexionIntegracion(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTitulo1, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooter1);
        }

        #endregion

        #endregion

        #region PRODUCCIÓN Y DEMANDA

        // 3.13.2.4.	Despacho registrado cada 30 minutos de las Unidades de Generación de los Integrantes del COES, asimismo, se incluye las Unidades de Generación con potencia superior a 5 MW conectadas al SEIN de empresas no Integrantes del COES (MW, MVAr).
        #region DESPACHO_REGISTRADO

        private void ReporteDespachoRegistradoDataReporte(int lectcodi, int tipoinfocodi, DateTime fechaInicial, DateTime fechaFinal,
            string idEmpresa, string idtipoGeneracion, int soloRecursosRER, out List<MeMedicion48DTO> listaData48, out List<MePtomedicionDTO> listaPto48, out List<string> listaMensaje48)
        {
            //Datos cada 30 minutos
            List<MeMedicion48DTO> listaData = this.servEjec.ListaDataGeneracion48(fechaInicial, fechaFinal, ConstantesMedicion.IdTipogrupoTodos
                , idtipoGeneracion, idEmpresa, ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, tipoinfocodi, lectcodi);
            FormatearDataDespacho(listaData);

            CDespachoInput regInput = new CDespachoInput()
            {
                FechaIni = fechaInicial,
                FechaFin = fechaFinal,
                Lectcodi = lectcodi,
                ListaAllMe48 = listaData,
            };

            var regCDespacho = new CDespachoGlobal();

            //Consultas a BD para obtener los insumos
            (new MigracionesAppServicio()).CargarInsumoPlantillaGeneracionCDispatch(regInput, ref regCDespacho);
            UtilCdispatch.AsignarVariablesPlantillaCDispatch(regInput, ref regCDespacho);
            List<MePtomedicionDTO> listaAllPtoPlantilla = regCDespacho.ListaAllPtoPlantillaExcel;

            //Filtrar solo RER
            if (soloRecursosRER == 1)
            {
                listaData = listaData.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();
                listaAllPtoPlantilla = listaAllPtoPlantilla.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();
            }

            //Solo para obtener la configuracion de Area geografica
            List<MeReporptomedDTO> listaPtos = new List<MeReporptomedDTO>();
            List<MeMedicion48DTO> listaDataTmp = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaDatan = new List<MeMedicion48DTO>();

            List<MePtomedicionDTO> listaPto1 = new List<MePtomedicionDTO>();
            var nor = this.servFormatoRep.GetListaCabyDatos48MeReporteConDataParametro(ConstantesPR5ReportesServicio.ReporcodiMaxGeneNorHisto, lectcodi, fechaInicial, fechaInicial, ref listaPto1, ref listaDatan, ref listaDataTmp);
            foreach (var reg in listaPto1) { reg.AreaOperativa = "NORTE"; }

            List<MePtomedicionDTO> listaPto2 = new List<MePtomedicionDTO>();
            var cen = this.servFormatoRep.GetListaCabyDatos48MeReporteConDataParametro(ConstantesPR5ReportesServicio.ReporcodiMaxGeneCenHisto, lectcodi, fechaInicial, fechaInicial, ref listaPto2, ref listaDatan, ref listaDataTmp);
            foreach (var reg in listaPto2) { reg.AreaOperativa = "CENTRO"; }

            List<MePtomedicionDTO> listaPto3 = new List<MePtomedicionDTO>();
            var sur = this.servFormatoRep.GetListaCabyDatos48MeReporteConDataParametro(ConstantesPR5ReportesServicio.ReporcodiMaxGeneSurHisto, lectcodi, fechaInicial, fechaInicial, ref listaPto3, ref listaDatan, ref listaDataTmp);
            foreach (var reg in listaPto3) { reg.AreaOperativa = "SUR"; }

            List<MePtomedicionDTO> listaConfigPto = new List<MePtomedicionDTO>();
            listaConfigPto.AddRange(listaPto1);
            listaConfigPto.AddRange(listaPto2);
            listaConfigPto.AddRange(listaPto3);

            //por cada registro asignarle area operativa
            foreach (var reg in listaAllPtoPlantilla)
            {
                var regPto = listaConfigPto.Find(x => x.PtomedicodiOrigen == reg.Ptomedicodi);
                if (regPto != null)
                    reg.AreaOperativa = regPto.AreaOperativa;
            }

            //mensajes de validación
            List<string> listaMensaje = regCDespacho.ListaMensajeValidacion.Select(x => x.Descripcion).ToList();
            foreach (var regDia in regCDespacho.ListaCDespachoDiario)
            {
                listaMensaje.AddRange(regDia.ListaMensajeValidacionXDia.Select(x => x.Descripcion).ToList());
            }

            foreach (var item in listaAllPtoPlantilla)
            {
                if (item.Grupocodi <= 0) listaMensaje.Add(string.Format("El punto {0} {1} no tiene asociado un grupo despacho.", item.Ptomedicodi, item.Ptomedidesc));
                if (string.IsNullOrEmpty(item.AreaOperativa)) listaMensaje.Add(string.Format("El punto {0} {1} no tiene asociado un área.", item.Ptomedicodi, item.Ptomedidesc));
                if (item.Fenergcodi <= 0) listaMensaje.Add(string.Format("El punto {0} {1} no tiene asociado una fuente de energía.", item.Ptomedicodi, item.Ptomedidesc));
            }

            listaMensaje = listaMensaje.Distinct().ToList();

            //salida
            listaData48 = listaData;
            listaPto48 = listaAllPtoPlantilla;
            listaMensaje48 = listaMensaje;
        }

        private void FormatearDataDespacho(List<MeMedicion48DTO> lista)
        {
            foreach (var m48 in lista)
            {
                m48.Emprnomb = m48.Emprnomb == null ? string.Empty : m48.Emprnomb.Trim();
                m48.Equinomb = m48.Equinomb == null ? string.Empty : m48.Equinomb.Trim();
                m48.Gruponomb = m48.Gruponomb == null ? string.Empty : m48.Gruponomb.Trim();
                m48.Emprorden = m48.Emprorden != null ? m48.Emprorden.Value : 9999999;
                m48.Grupoorden = m48.Grupoorden != null ? m48.Grupoorden.Value : 9999999;

                decimal? valor = 0;
                decimal total = 0;
                for (int h = 1; h <= 48; h++)
                {
                    valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                    total += valor != null ? valor.Value : 0;
                }

                m48.Meditotal = total;
            }
        }

        /// <summary>
        /// ReporteDespachoRegistradoDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="idPotencia"></param>
        /// <param name="tipoDato48"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaPtoVersion"></param>
        /// <param name="listaMensaje"></param>
        public void ReporteDespachoRegistradoDataVersionada(string idEmpresa, string idCentral, int idPotencia, int tipoDato48
                , DateTime fechaInicial, DateTime fechaFinal, string idtipoGeneracion, int soloRecursosRER
                , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion, out List<MePtomedicionDTO> listaPto, out List<MePtomedicionDTO> listaPtoVersion
                , out List<string> listaMensaje)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();
            listaPto = new List<MePtomedicionDTO>();
            listaPtoVersion = new List<MePtomedicionDTO>();
            listaMensaje = new List<string>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idCentral = string.IsNullOrEmpty(idCentral) ? ConstantesAppServicio.ParametroDefecto : idCentral;

            int[] empresas = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] centrales = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();

            int tipoinf = (idPotencia == 1) ? ConstantesPR5ReportesServicio.TipoinfoMW : ConstantesPR5ReportesServicio.TipoinfoMVAR;
            int lectcodi = (tipoDato48 == ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho) ? ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto : ConstantesPR5ReportesServicio.LectDespachoEjecutado;

            if (versionAnexoA != "")
            {
                if (tipoinf == ConstantesPR5ReportesServicio.TipoinfoMW)
                {
                    lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexDespachoRegistradoMW);
                    listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexDespachoRegistradoMW);
                }
                else
                {
                    lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexDespachoRegistradoMvar);
                    listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexDespachoRegistradoMvar);
                }
            }
            else
            {
                ReporteDespachoRegistradoDataReporte(lectcodi, tipoinf, fechaInicial, fechaFinal, idEmpresa, idtipoGeneracion, soloRecursosRER,
                                    out lista, out listaPto, out listaMensaje);

                var listaCentralesData = lista.Select(x => x.Equipadre).ToList();
                var listaNoEncontrada = listaCentralesData.Where(x => !centrales.Contains(x)).Select(x => x).ToList();
            }
            lista = lista.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                                  && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
            listaVersion = listaVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                                  && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();

            listaPtoVersion = listaPtoVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi.Value))
                                                  && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
            listaPto = listaPto.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi.Value))
                                                  && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
        }

        private void ReporteDespachoRegistradoExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, bool flagVisiblePtomedicodi,
                    string idEmpresa, string idCentral, int idPotencia, int tipoData48, DateTime fecha1, DateTime fecha2, string idtipoGeneracion, int soloRecursosRER, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            List<MePtomedicionDTO> listaPto, listaPtoVersion;
            this.ReporteDespachoRegistradoDataVersionada(idEmpresa, idCentral, idPotencia, tipoData48, fecha1, fecha2, idtipoGeneracion, soloRecursosRER, versionAnexoA,
                                        out lista, out listaVersion, out listaPto, out listaPtoVersion, out List<string> listaMensaje);

            if (idPotencia == ConstantesTipoInformacion.TipoinfoMW)
            {
                UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "DESPACHO_EJECUTADO", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                UtilAnexoAPR5.GeneraRptDespachoRegistrado(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTitulo1, flagVisiblePtomedicodi
                                            , ConstantesTipoInformacion.TipoinfoMW, fecha1, fecha2, lista, listaVersion, listaPto, listaPtoVersion, tipoData48);
                UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            }
            if (idPotencia == ConstantesTipoInformacion.TipoinfoMVar)
            {
                UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "REACTIVA", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                UtilAnexoAPR5.GeneraRptDespachoRegistrado(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTitulo1, flagVisiblePtomedicodi
                                            , ConstantesTipoInformacion.TipoinfoMVar, fecha1, fecha2, lista, listaVersion, listaPto, listaPtoVersion, tipoData48);
                UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            }
        }

        private List<MeMedicion48DTO> ListarDemandaEjecutadaYProgramadaCOES(DateTime fecha)
        {
            //Despacho
            ReporteDesviacionesProduccionUGDataReporte("-1", fecha, fecha, out List<MeMedicion48DTO> lista48BD, out List<MePtomedicionDTO> listaPto48);

            //Interconexiones
            servEjec.ListaFlujo30minInterconexion48(ConstantesInterconexiones.FuenteTIEFlujoNewAnexoA, fecha, fecha, out List<MeMedicion48DTO> listaInterconexion48,
                        out List<MeMedicion48DTO> listaTotalExp, out List<MeMedicion48DTO> listaTotalImp);

            //Total
            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();

            MeMedicion48DTO objEjecSinEcu = new MeMedicion48DTO();
            UtilAnexoAPR5.SetMeditotalXLista(objEjecSinEcu, lista48BD.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto).ToList());

            MeMedicion48DTO objEjecConEcu = new MeMedicion48DTO();
            UtilAnexoAPR5.SetMeditotalXLista(objEjecConEcu, lista48BD.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto).ToList());
            UtilAnexoAPR5.SetMeditotalXListaResta(objEjecConEcu, listaInterconexion48);

            MeMedicion48DTO objReprogSinEcu = new MeMedicion48DTO();
            UtilAnexoAPR5.SetMeditotalXLista(objReprogSinEcu, lista48BD.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectDespachoReprogramado).ToList());

            MeMedicion48DTO objProgSinEcu = new MeMedicion48DTO();
            UtilAnexoAPR5.SetMeditotalXLista(objProgSinEcu, lista48BD.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectDespachoProgramadoDiario).ToList());

            lista.Add(objEjecSinEcu);
            lista.Add(objEjecConEcu);
            lista.Add(objReprogSinEcu);
            lista.Add(objProgSinEcu);

            return lista;
        }

        #endregion

        // 3.13.2.5.	Reporte de la demanda por áreas (MW).
        #region REPORTE_DEMANDA_POR_AREA

        /// <summary>
        /// ReporteDemandaPorAreaYSubareaDataReporte
        /// </summary>
        /// <param name="lectcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ReporteDemandaPorAreaYSubareaDataReporte(int lectcodi, DateTime fechaInicio, DateTime fechaFin)
        {
            //Datos 30 minutos (grupos despacho o equipos)
            List<MeMedicion48DTO> listaData = this.servEjec.ListaDataGeneracion48(fechaInicio, fechaFin, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesTipoInformacion.TipoinfoMW, lectcodi);

            //Interconexiones Internacionales
            servEjec.ListaFlujo30minInterconexion48(ConstantesInterconexiones.FuenteTIEFlujoNewAnexoA, fechaInicio, fechaFin, out List<MeMedicion48DTO> listaInterconexion48,
                        out List<MeMedicion48DTO> listaTotalExp, out List<MeMedicion48DTO> listaTotalImp);

            //Flujos de potencia
            List<MeMedicion48DTO> listaFlujo = ListarDataReporteM48FromCargaDatos(ConstantesPR5ReportesServicio.LectcodiFlujoPotencia, ConstantesPR5ReportesServicio.TipoinfoMW, ConstantesAppServicio.ParametroDefecto, fechaInicio, fechaFin);
            listaData.AddRange(listaFlujo);

            //Resumen en Areas (calculado)
            List<MePtomedicionDTO> listaPto = new List<MePtomedicionDTO>();
            List<MeMedicion48DTO> listaDatan = new List<MeMedicion48DTO>();
            var areas_ = this.servFormatoRep.GetListaCabyDatos48MeReporteConDataParametro(ConstantesPR5ReportesServicio.ReporcodiDemandaAreas, lectcodi, fechaInicio, fechaFin, ref listaPto, ref listaDatan, ref listaData);
            var subareas_ = this.servFormatoRep.GetListaCabyDatos48MeReporteConDataParametro(ConstantesPR5ReportesServicio.ReporcodiDemandaSubareas, lectcodi, fechaInicio, fechaFin, ref listaPto, ref listaDatan, ref listaData);

            foreach (var d in areas_)
            {
                if (d.Ptomedidesc.Contains("NORTE")) { d.Repptoorden = 1; }
                if (d.Ptomedidesc.Contains("CENTRO")) { d.Repptoorden = 2; }
                if (d.Ptomedidesc.Contains("SUR")) { d.Repptoorden = 3; }
            }

            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();
            decimal? valor, acumulado, valorII;

            #region data importacion medicion48
            MeMedicion48DTO me48Import = new MeMedicion48DTO();

            for (int i = 1; i <= 48; i++)
            {
                List<decimal> listaH = new List<decimal>();
                foreach (var m in listaInterconexion48)
                {
                    valor = (decimal?)m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(m, null);
                    if (valor != null)
                    {
                        listaH.Add(valor.Value);
                    }
                }

                if (listaH.Count > 0)
                {
                    decimal sumaH = listaH.Sum(x => x);
                    me48Import.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i).ToString()).SetValue(me48Import, sumaH);
                }
            }

            lista.Add(me48Import);
            #endregion

            #region data sein
            MeMedicion48DTO me48Sein = new MeMedicion48DTO();
            var dat_t = listaDatan.Where(x => areas_.Select(y => y.Ptomedicodi).Contains(x.Ptomedicodi)).ToList();
            foreach (var d in dat_t)
            {
                for (int h = 1; h <= 48; h++)
                {
                    acumulado = (decimal?)me48Sein.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(me48Sein, null);
                    valor = (decimal?)d.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(d, null);
                    if (valor != null)
                    {
                        acumulado = acumulado.GetValueOrDefault(0) + valor;
                    }

                    me48Sein.GetType().GetProperty(ConstantesAppServicio.CaracterH + (h).ToString()).SetValue(me48Sein, acumulado);
                }
            }

            if (lectcodi == 93)
            {
                for (int h = 1; h <= 48; h++)
                {
                    acumulado = (decimal?)me48Sein.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(me48Sein, null);
                    valor = (decimal?)me48Import.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(me48Import, null);
                    if (valor != null)
                    {
                        if (valor > 0)
                        {
                            acumulado = acumulado.GetValueOrDefault(0) + valor;
                        }
                        else
                        {
                            acumulado = acumulado.GetValueOrDefault(0) - valor;
                        }
                    }

                    me48Sein.GetType().GetProperty(ConstantesAppServicio.CaracterH + (h).ToString()).SetValue(me48Sein, acumulado);
                }
            }

            lista.Add(me48Sein);
            #endregion

            #region data areas
            foreach (var a in areas_.OrderBy(x => x.Ptomedicodi).OrderBy(x => x.Repptoorden).ToList())
            {
                var dat_ = listaDatan.Find(x => x.Ptomedicodi == a.Ptomedicodi);
                if (dat_ != null)
                {
                    dat_.Ptomedinomb = a.Ptomedibarranomb;

                    if (lectcodi == 93 && a.Ptomedicodi == 44975)
                    {
                        for (int h = 1; h <= 48; h++)
                        {
                            valor = (decimal?)dat_.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(dat_, null);
                            valorII = (decimal?)me48Import.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(me48Import, null);
                            if (valorII != null)
                            {
                                if (valorII > 0)
                                {
                                    valor = valor.GetValueOrDefault(0) + valorII;
                                }
                                else
                                {
                                    valor = valor.GetValueOrDefault(0) - valorII;
                                }
                            }

                            dat_.GetType().GetProperty(ConstantesAppServicio.CaracterH + (h).ToString()).SetValue(dat_, valor);
                        }
                    }

                    lista.Add(dat_);
                }
                else
                {
                    var me48 = new MeMedicion48DTO();
                    me48.Ptomedicodi = a.Ptomedicodi;
                    me48.Ptomedinomb = a.Ptomedibarranomb;
                    me48.Reporcodi = a.Reporcodi;
                    me48.Repptoorden = a.Repptoorden;
                    lista.Add(me48);
                }


            }
            #endregion

            #region data subareas
            foreach (var a in subareas_.OrderBy(x => x.Ptomedicodi))
            {
                var dat_ = listaDatan.Find(x => x.Ptomedicodi == a.Ptomedicodi);
                if (dat_ != null) { lista.Add(dat_); }
                else
                {
                    var me48 = new MeMedicion48DTO();
                    me48.Ptomedicodi = a.Ptomedicodi;
                    lista.Add(me48);
                }
            }
            #endregion

            foreach (var m48 in lista)
            {
                //calcular minimo, maximo, promedio
                decimal minimo = 0, maximo = 0, promedio = 0, total = 0;
                List<decimal> listaH = new List<decimal>();

                for (int h = 1; h <= 48; h++)
                {
                    valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                    if (valor != null)
                    {
                        listaH.Add(valor.Value);
                    }
                }

                if (listaH.Count > 0)
                {
                    minimo = listaH.Min(x => x);
                    maximo = listaH.Max(x => x);
                    promedio = listaH.Average(x => x);
                    total = listaH.Sum(x => x);
                }

                m48.Minimo = minimo;
                m48.Maximo = maximo;
                m48.Promedio = promedio;
                m48.Meditotal = total;
            }

            return lista;
        }

        /// <summary>
        /// Listar reporte demanda por area
        /// </summary>
        /// <param name="tipoDato48"></param>
        /// <param name="idArea"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaAreas"></param>
        /// <param name="listaSubareas"></param>
        /// <param name="objRpt"></param>
        /// <param name="listaConfGraf"></param>
        public void ReporteDemandaPorAreaYSubareaDataVersionada(int tipoDato48, string idArea, DateTime fechaInicial, DateTime fechaFinal
             , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion
            , out List<MeReporptomedDTO> listaAreas, out List<MeReporptomedDTO> listaSubareas, out MeReporteDTO objRpt, out List<MeReporteGraficoDTO> listaConfGraf)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();

            idArea = string.IsNullOrEmpty(idArea) ? ConstantesAppServicio.ParametroDefecto : idArea;
            int lectcodi = (tipoDato48 == ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho) ? ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto : ConstantesPR5ReportesServicio.LectDespachoEjecutado;

            int[] areas = idArea.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteDemandaPorArea);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteDemandaPorArea);
            }
            else
            {
                lista = this.ReporteDemandaPorAreaYSubareaDataReporte(lectcodi, fechaInicial, fechaFinal);
            }

            //
            var listaTemp = new List<MeMedicion48DTO>();
            listaTemp.AddRange(lista.Where(x => x.Ptomedicodi == 0).ToList());

            var lista_ = lista.Where(x => x.Ptomedicodi > 0 && (idArea == ConstantesAppServicio.ParametroDefecto || areas.Contains(x.Ptomedicodi))).ToList();

            lista = new List<MeMedicion48DTO>();
            lista.AddRange(listaTemp);
            lista.AddRange(lista_);

            //
            var listaVersionTemp = new List<MeMedicion48DTO>();
            if (listaVersion.Count > 0)
            {
                listaVersionTemp.Add(listaVersion[0]);
                listaVersionTemp.Add(listaVersion[1]);
            }

            var listaVersion_ = listaVersion.Where(x => areas.Contains(x.Ptomedicodi)).ToList();

            listaVersion = new List<MeMedicion48DTO>();
            listaVersion.AddRange(listaVersionTemp);
            listaVersion.AddRange(listaVersion_);

            //Cabecera MeReporte
            listaAreas = this.servFormatoRep.GetListaPuntoFromMeReporptomed(ConstantesPR5ReportesServicio.ReporcodiDemandaAreas, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);
            listaSubareas = this.servFormatoRep.GetListaPuntoFromMeReporptomed(ConstantesPR5ReportesServicio.ReporcodiDemandaSubareas, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);

            objRpt = GetByIdReporte(listaAreas[0].Reporcodi);
            listaConfGraf = GetByCriteriaMeReporteGrafico(listaAreas[0].Reporcodi);
        }

        private void ReporteDemandaPorAreaYSubareaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, int tipoDato48, string idArea, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            this.ReporteDemandaPorAreaYSubareaDataVersionada(tipoDato48, idArea, fecha1, fecha2, versionAnexoA, out lista, out listaVersion
                                        , out List<MeReporptomedDTO> listaAreas, out List<MeReporptomedDTO> listaSubareas, out MeReporteDTO objRpt, out List<MeReporteGraficoDTO> listaConfGraf);

            int nfil = 0, ncol1 = 0, ncol2 = 0, ncol3 = 0;
            int tipoGrafico = 1;
            string xAxisTitle = string.Empty, yAxisTitle = string.Empty, titulo = string.Empty;

            int ultimaFilaDPA;
            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "DEMANDA_AREAS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptDemandaPorAreaSEIN(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2
                , ref nfil, ref ncol1, ref ncol2, ref ncol3, tipoGrafico, out ultimaFilaDPA, lista, listaVersion, listaAreas, listaSubareas);

            xAxisTitle = "MW ÁREA NORTE Y SUR";
            yAxisTitle = "MW ÁREA CENTRO";
            titulo = "DEMANDA POR AREAS SEIN";
            UtilAnexoAPR5.AddGraficoDemandaPorAreaSEIN(ws, nfil, ncol1, ncol2, xAxisTitle, yAxisTitle, titulo, 1, 0, ultimaFilaDPA + 5);

            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.6.	Reporte de Demanda de Grandes Usuarios (MW).
        #region REPORTE_DEMANDA_GRANDES_USUARIOS

        private void ReporteDemandaGrandesUsuariosDataReporte(DateTime fechaInicial, DateTime fechaFinal, out List<SiEmpresaDTO> listaEmpresaArea, out List<MeMedicion48DTO> listaData)
        {
            MigracionesAppServicio servMigr = new MigracionesAppServicio();

            var listaArea = UtilSemanalPR5.GetListaReporteUL(false);

            //empresas de usuario libre con Demanda Mayor o Igual a 10 MW
            var listaEmpresa = servMigr.ListarEmpresasDemandaBarrra(ConstantesPR5ReportesServicio.TipoEmpresaUsuarioLibre).Where(x => x.Inddemanda == "S").ToList();

            //Puntos de medición
            string emprcodis = string.Join(",", listaEmpresa.Select(x => x.Emprcodi).Where(x => x > 0));
            List<MePtomedicionDTO> listaPuntosMedicion = servMigr.GetListaPuntoMedicionDemandaBarra(emprcodis, fechaInicial, fechaInicial).OrderBy(x => x.Ptomedielenomb).ToList();
            foreach (var objPto in listaPuntosMedicion)
            {
                objPto.AreaOperativa = (objPto.AreaOperativa ?? "").Trim().ToUpper();
                if (objPto.AreaOperativa == "ELECTROANDES") objPto.AreaOperativa = "SUR";

                var objArea = listaArea.Find(x => x.AreaOperativa == objPto.AreaOperativa);
                if (objArea != null) objPto.Orden = objArea.Orden;
            }

            //lectcodi Demanda Histórica Diaria
            string lectcodi = "45";
            if (fechaInicial >= new DateTime(2020, 7, 1)) lectcodi = "103";

            //data
            var listaDemandaBarras = servMigr.GetListaDemandaBarras(string.Join(",", listaPuntosMedicion.Select(x => x.Ptomedicodi).ToList()), lectcodi, fechaInicial, fechaFinal);
            foreach (var item in listaDemandaBarras)
            {
                var objPto = listaPuntosMedicion.Find(x => x.Ptomedicodi == item.Ptomedicodi);
                if (objPto != null) item.AreaOperativa = objPto.AreaOperativa;
            }

            //puntos con data
            var listaMePtos = servMigr.ListarPuntosDemandaBarraSegunDataReporte(listaPuntosMedicion, listaDemandaBarras);

            //obtener empresas con area operativa
            List<string> listaAreaOperativa = listaArea.Select(x => x.AreaOperativa).ToList();
            listaEmpresaArea = listaMePtos.Where(x => x.Emprcodi > 0 && listaAreaOperativa.Contains(x.AreaOperativa))
                .GroupBy(x => new { x.Emprcodi, x.AreaOperativa })
                .Select(x => new SiEmpresaDTO()
                {
                    Emprcodi = x.Key.Emprcodi.Value,
                    AreaOperativa = x.Key.AreaOperativa,
                    Emprnomb = (x.First().Emprnomb ?? "").Trim(),
                    OrdenArea = x.First().Orden ?? 0,
                }).OrderBy(x => x.OrdenArea).ThenBy(x => x.Emprnomb).ToList();

            //Data sumarizada para varios dias
            listaData = UtilSemanalPR5.CalcularDataGU(listaEmpresaArea, fechaInicial, fechaFinal, listaDemandaBarras);
        }

        /// <summary>
        /// Lista reporte demanda grandes usuarios
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaEmpresaArea"></param>
        public void ReporteDemandaGrandesUsuariosDataVersionada(DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion, out List<SiEmpresaDTO> listaEmpresaArea)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();
            listaEmpresaArea = new List<SiEmpresaDTO>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteDemandaGrandesUsuarios);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteDemandaGrandesUsuarios);
            }
            else
            {
                ReporteDemandaGrandesUsuariosDataReporte(fechaInicial, fechaFinal, out listaEmpresaArea, out lista);
            }
        }

        private void ReporteDemandaGrandesUsuariosExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            this.ReporteDemandaGrandesUsuariosDataVersionada(fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out List<SiEmpresaDTO> listaEmpresaArea);

            int nfil = 0, ncol1 = 0, ncol2 = 0, ncol3 = 0;
            int tipoGrafico = 1;
            string xAxisTitle = string.Empty, yAxisTitle = string.Empty, titulo = string.Empty;

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "DEMANDA_UL", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            List<int> ListaSeries = new List<int>();
            UtilAnexoAPR5.GeneraRptDemandaGrandesUsuarios(ws, fecha1, fecha2, ref nfil, ref ncol1, ref ncol2, ref ncol3, tipoGrafico, ref ListaSeries, lista, listaVersion, listaEmpresaArea);

            titulo = "GRANDES USUARIO AREA ";

            int ultimaFilaDGU = nfil;
            int filaIniRptDGU = ncol2;
            int coluIniRptDGU = ncol3;
            UtilAnexoAPR5.AddGraficoLineasDemandaGrandesUsuarios(ws, ListaSeries, xAxisTitle, yAxisTitle, titulo + "NORTE", 1, ultimaFilaDGU + 11, coluIniRptDGU, filaIniRptDGU + 2, coluIniRptDGU + 1, filaIniRptDGU + 2, coluIniRptDGU);
            UtilAnexoAPR5.AddGraficoLineasDemandaGrandesUsuarios(ws, ListaSeries, xAxisTitle, yAxisTitle, titulo + "CENTRO 1", 2, ultimaFilaDGU + 11, coluIniRptDGU + 12, filaIniRptDGU + 2, coluIniRptDGU + 1 + ListaSeries[0], filaIniRptDGU + 2, coluIniRptDGU);
            UtilAnexoAPR5.AddGraficoLineasDemandaGrandesUsuarios(ws, ListaSeries, xAxisTitle, yAxisTitle, titulo + "CENTRO 2", 3, ultimaFilaDGU + 11, coluIniRptDGU + 24, filaIniRptDGU + 2, coluIniRptDGU + 1 + ListaSeries[0] + ListaSeries[1] / 2 + 1, filaIniRptDGU + 2, coluIniRptDGU);
            UtilAnexoAPR5.AddGraficoLineasDemandaGrandesUsuarios(ws, ListaSeries, xAxisTitle, yAxisTitle, titulo + "SUR", 4, ultimaFilaDGU + 11, coluIniRptDGU + 36, filaIniRptDGU + 2, coluIniRptDGU + 1 + ListaSeries[0] + ListaSeries[1], filaIniRptDGU + 2, coluIniRptDGU);

            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.7.	Recursos energéticos y diagrama de duración de demanda del SEIN.
        #region REPORTE_RECURSOS_ENERGETICOS_DEMANDASEIN

        private List<SiFuenteenergiaDTO> ListarTipoRecursoEnergetico(string idtiporecurso, bool categorizarHidro, bool categorizarGas)
        {
            List<SiFuenteenergiaDTO> lista = new List<SiFuenteenergiaDTO>();

            //Data
            List<SiFuenteenergiaDTO> listaTipoRecurso = this.ListarFuenteEnergia().Where(x => x.Fenergcodi > 0).OrderBy(x => x.Tgenercodi).ThenBy(x => x.Fenergcodi).ToList();
            if (idtiporecurso != ConstantesAppServicio.ParametroDefecto)
            {
                int[] lFenergcodi = idtiporecurso.Split(',').Select(x => int.Parse(x)).ToArray();
                listaTipoRecurso = listaTipoRecurso.Where(x => lFenergcodi.Contains(x.Fenergcodi)).ToList();
            }

            List<EqCategoriaDetDTO> listaHidro = FactorySic.GetEqCategoriaDetalleRepository().ListByCategoriaAndEstado(ConstantesPR5ReportesServicio.CategoriaRecursoAgua, ConstantesAppServicio.Activo)
                .OrderBy(x => x.Ctgdetnomb).ToList();
            List<EqCategoriaDetDTO> listaGas = FactorySic.GetEqCategoriaDetalleRepository().ListByCategoriaAndEstado(ConstantesPR5ReportesServicio.CategoriaRecursoGas, ConstantesAppServicio.Activo)
                .OrderBy(x => x.TotalEquipo).ThenBy(x => x.Ctgdetnomb).ToList();

            //Generar el orden para el reporte
            EqCategoriaDetDTO ctg;
            SiFuenteenergiaDTO fteEnerg;

            //Recurso Agua
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua);

            if (categorizarHidro)
            {
                ctg = listaHidro.Find(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoAguaPasada);
                if (fteEnerg != null && ctg != null) { lista.Add(this.GenerarObjFenergFromCategoria(fteEnerg, ctg)); }
                ctg = listaHidro.Find(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoAguaRegulacion);
                if (fteEnerg != null && ctg != null) { lista.Add(this.GenerarObjFenergFromCategoria(fteEnerg, ctg)); }
            }
            else
            {
                if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            }

            //Recurso Gas
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas);
            if (categorizarGas)
            {
                ctg = listaGas.Find(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural);
                if (fteEnerg != null && ctg != null) { lista.Add(this.GenerarObjFenergFromCategoria(fteEnerg, ctg)); }
                ctg = listaGas.Find(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasMalacas);
                if (fteEnerg != null && ctg != null) { lista.Add(this.GenerarObjFenergFromCategoria(fteEnerg, ctg)); }
                ctg = listaGas.Find(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasAguaytia);
                if (fteEnerg != null && ctg != null) { lista.Add(this.GenerarObjFenergFromCategoria(fteEnerg, ctg)); }
                ctg = listaGas.Find(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasLaIsla);
                if (fteEnerg != null && ctg != null) { lista.Add(this.GenerarObjFenergFromCategoria(fteEnerg, ctg)); }
            }
            else
            {
                if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            }

            //Demás fuentes de energias
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiCarbon);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiDiesel);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }

            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual);
            if (fteEnerg != null)
            {
                lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg));
            }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500);
            if (fteEnerg != null)
            {
                fteEnerg.CtgdetFicticio = true;
                fteEnerg.Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoResidualR500;
                fteEnerg.Fenergnomb = ConstantesPR5ReportesServicio.GrupocombR500; //GrupocombR500
                lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg));
            }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6);
            if (fteEnerg != null)
            {
                fteEnerg.CtgdetFicticio = true;
                fteEnerg.Ctgdetcodi = ConstantesPR5ReportesServicio.SubCategoriaRecursoResidualR6;
                fteEnerg.Fenergnomb = ConstantesPR5ReportesServicio.GrupocombR6; //GrupocombR6
                lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg));
            }

            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiSolar);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiEolica);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiNoAplica);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiTodos);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }
            fteEnerg = listaTipoRecurso.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiNoDefinido);
            if (fteEnerg != null) { lista.Add(this.GenerarObjFenergFromFuenteEnergia(fteEnerg)); }

            int orden = 1;
            foreach (var reg in lista)
            {
                reg.Fenergorden = orden;
                orden++;
            }

            return lista;
        }

        /// <summary>
        /// Listar tipo de generacion ordenadas para reporte de RER
        /// </summary>
        /// <returns></returns>
        public List<SiTipogeneracionDTO> ListarTipoGeneracionRER()
        {
            List<SiTipogeneracionDTO> lista = this.ListarSiTipogeneracion();

            foreach (var reg in lista)
            {
                reg.ColorLetra = "#ffffff";

                switch (reg.Tgenercodi)
                {
                    case ConstantesPR5ReportesServicio.TgenercodiHidro:
                        reg.Orden = 2;
                        break;
                    case ConstantesPR5ReportesServicio.TgenercodiTermo:
                        reg.Orden = 1;
                        break;
                    case ConstantesPR5ReportesServicio.TgenercodiSolar:
                        reg.ColorLetra = "#000000";
                        reg.Orden = 3;
                        break;
                    case ConstantesPR5ReportesServicio.TgenercodiEolica:
                        reg.Orden = 4;
                        break;
                }
            }
            return lista.OrderBy(x => x.Orden).ToList();
        }

        private SiFuenteenergiaDTO GenerarObjFenergFromCategoria(SiFuenteenergiaDTO fteEnerg, EqCategoriaDetDTO ctg)
        {
            SiFuenteenergiaDTO m = new SiFuenteenergiaDTO();
            m.Fenergcodi = fteEnerg.Fenergcodi;
            m.Fenergnomb = fteEnerg.Fenergnomb;
            m.Fenergcolor = fteEnerg.Fenergcolor;

            m.Ctgdetcodi = ctg.Ctgdetcodi;
            m.Ctgdetnomb = ctg.Ctgdetnomb;

            return m;
        }

        private SiFuenteenergiaDTO GenerarObjFenergFromFuenteEnergia(SiFuenteenergiaDTO fteEnerg)
        {
            SiFuenteenergiaDTO m = new SiFuenteenergiaDTO();
            m.Fenergcodi = fteEnerg.Fenergcodi;
            m.Fenergnomb = fteEnerg.Fenergnomb;
            m.Fenergcolor = fteEnerg.Fenergcolor;
            m.Ctgdetnomb = fteEnerg.Fenergnomb;
            m.Ctgdetcodi = fteEnerg.Ctgdetcodi;
            m.CtgdetFicticio = fteEnerg.CtgdetFicticio;

            m.ValidarDatoObligatorio = fteEnerg.ValidarDatoObligatorio;

            return m;
        }

        private void ReportePotenciaXTipoRecursoDataReporte(int lectcodi, string idempresa, string idCentral, string idtiporecurso, DateTime fcdesde, DateTime fchasta
             , bool esFuenteEnergiaCategorizada, out List<MeMedicion48DTO> listaTotal, out List<MeMedicion48DTO> listaTotalRER, out List<string> listaMensaje)
        {
            List<MeMedicion48DTO> listaReporteFE, listaReporteFEctg, listaReporteFEsinRER, listaReporteRER, listaFEctgHidro, listaFEctgGas;
            this.ListaReportePotenciaXTipoRecursoTotal48PorLectcodi(idempresa, idCentral, idtiporecurso, fcdesde, fchasta
                , out listaReporteFE, out listaReporteFEctg, out listaReporteFEsinRER, out listaReporteRER, out listaFEctgHidro, out listaFEctgGas, out listaMensaje, lectcodi, false, false);

            listaTotal = esFuenteEnergiaCategorizada ? listaReporteFEctg : listaReporteFE;
            listaTotalRER = listaReporteRER;
        }

        /// <summary>
        /// Listado de portencia generada por tipo de recurso por empresas y centrales para un rango de fechas agrupadas por tipo de recurso, incluye filtro de RER
        /// </summary>
        /// <param name="idempresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="idtiporecurso"></param>
        /// <param name="fcdesde"></param>
        /// <param name="fchasta"></param>
        /// <param name="listaTotalFE"></param>
        /// <param name="listaTotalFEctg"></param>
        /// <param name="listaTotalFEsinRER"></param>
        /// <param name="listaTotalRER"></param>
        /// <param name="listaTotalFEctgHidro"></param>
        /// <param name="listaTotalFEctgGas"></param>
        /// <param name="listaMensaje"></param>
        /// <param name="lectcodi"></param>
        /// <param name="categorizarSoloHidro"></param>
        /// <param name="categorizarSoloGas"></param>
        public void ListaReportePotenciaXTipoRecursoTotal48PorLectcodi(string idempresa, string idCentral, string idtiporecurso, DateTime fcdesde, DateTime fchasta
            , out List<MeMedicion48DTO> listaTotalFE, out List<MeMedicion48DTO> listaTotalFEctg, out List<MeMedicion48DTO> listaTotalFEsinRER,
            out List<MeMedicion48DTO> listaTotalRER, out List<MeMedicion48DTO> listaTotalFEctgHidro, out List<MeMedicion48DTO> listaTotalFEctgGas
            , out List<string> listaMensaje, int lectcodi, bool categorizarSoloHidro, bool categorizarSoloGas)
        {
            List<MeMedicion48DTO> lista48FinalFE = new List<MeMedicion48DTO>(), lista48FinalFEctg = new List<MeMedicion48DTO>(), lista48FinalRER = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> lista48TmpFE = new List<MeMedicion48DTO>(), lista48TmpFEctg = new List<MeMedicion48DTO>(), lista48TmpRER = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaReporteFE = new List<MeMedicion48DTO>(), listaReporteFEctg = new List<MeMedicion48DTO>(), listaReporteFEctgSoloHidro = new List<MeMedicion48DTO>(), listaReporteFEctgSoloGas = new List<MeMedicion48DTO>(), listaReporteFEsinRER = new List<MeMedicion48DTO>(), listaReporteRER = new List<MeMedicion48DTO>();
            listaMensaje = new List<string>();

            idempresa = !string.IsNullOrEmpty(idempresa) ? idempresa : ConstantesAppServicio.ParametroDefecto;
            idCentral = !string.IsNullOrEmpty(idCentral) ? idCentral : ConstantesAppServicio.ParametroDefecto;
            idtiporecurso = !string.IsNullOrEmpty(idtiporecurso) ? idtiporecurso : ConstantesAppServicio.ParametroDefecto;

            //La data cruzada con Hop que determina que Tipo de Fuente Energia tuvo para tal Tipo de Generacion
            List<MeMedicion48DTO> lista48Data = this.servEjec.ListaDataMDGeneracionConsolidado48(fcdesde, fchasta, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, true, lectcodi);

            if (idCentral != ConstantesAppServicio.ParametroDefecto)
            {
                int[] listaCentral = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();
                lista48Data = lista48Data.Where(x => listaCentral.Contains(x.Equipadre)).ToList();
            }

            List<int> listaTipoGeneracion = idtiporecurso.Split(',').Select(x => int.Parse(x)).ToList();
            #region Data de Fuente de Energia con Categorias
            //HIDRO
            if (listaTipoGeneracion.Contains(ConstantesPR5ReportesServicio.FenergcodiAgua) || idtiporecurso.Equals(ConstantesAppServicio.ParametroDefecto))
            {
                List<EqCategoriaDetDTO> listaCtgHidro = FactorySic.GetEqCategoriaDetalleRepository().ListByCategoriaAndEstado(ConstantesPR5ReportesServicio.CategoriaRecursoAgua, ConstantesAppServicio.Activo);
                this.ListarCategoriaDetalleToMedicion48(listaCtgHidro, ConstantesPR5ReportesServicio.FenergcodiAgua, lista48Data, out List<MeMedicion48DTO> listaCategorizadaHidro, out List<MeMedicion48DTO> listaSinCategorizarHidro);

                lista48TmpFEctg.AddRange(listaCategorizadaHidro);
                lista48TmpFEctg.AddRange(listaSinCategorizarHidro);

                listaTipoGeneracion.Remove(ConstantesPR5ReportesServicio.FenergcodiAgua);

                #region Validación de centrales sin categorización

                List<int> lequipadreSinCtgHidro = listaSinCategorizarHidro.Select(x => x.Equipadre).Distinct().ToList();
                List<EqEquipoDTO> lEqSinCtgHidro = GetByIdEquipo(string.Join(",", lequipadreSinCtgHidro));
                foreach (var item in lEqSinCtgHidro)
                {
                    listaMensaje.Add(string.Format("La central hidraulica no tiene categorización H. Pasada o H. Regulación. Empresa {0} - {1}.", item.Emprnomb, item.Equinomb));
                }

                #endregion
            }

            //TERMO
            if (listaTipoGeneracion.Contains(ConstantesPR5ReportesServicio.FenergcodiGas) || idtiporecurso.Equals(ConstantesAppServicio.ParametroDefecto))
            {
                List<EqCategoriaDetDTO> listaCtgGas = FactorySic.GetEqCategoriaDetalleRepository().ListByCategoriaAndEstado(ConstantesPR5ReportesServicio.CategoriaRecursoGas, ConstantesAppServicio.Activo);
                this.ListarCategoriaDetalleToMedicion48(listaCtgGas, ConstantesPR5ReportesServicio.FenergcodiGas, lista48Data, out List<MeMedicion48DTO> listaCategorizadaGas, out List<MeMedicion48DTO> listaSinCategorizarGas);

                lista48TmpFEctg.AddRange(listaCategorizadaGas);
                lista48TmpFEctg.AddRange(listaSinCategorizarGas);

                listaTipoGeneracion.Remove(ConstantesPR5ReportesServicio.FenergcodiGas);
            }

            //RESTANTES
            if (listaTipoGeneracion.Count > 1 || idtiporecurso.Equals(ConstantesAppServicio.ParametroDefecto))
            {
                lista48TmpFEctg.AddRange(lista48Data.Where(x => x.Fenergcodi != ConstantesPR5ReportesServicio.FenergcodiAgua
                                                                && x.Fenergcodi != ConstantesPR5ReportesServicio.FenergcodiGas
                                                                && x.Fenergcodi != ConstantesPR5ReportesServicio.FenergcodiResidual
                                                                && x.Fenergcodi != ConstantesPR5ReportesServicio.FenergcodiR500
                                                                && x.Fenergcodi != ConstantesPR5ReportesServicio.FenergcodiR6
                                                        && (idtiporecurso.Equals(ConstantesAppServicio.ParametroDefecto) || listaTipoGeneracion.Contains(x.Fenergcodi))).ToList());
            }

            //Generar data para reporte
            var listaFenergCtg = this.ListarTipoRecursoEnergetico(idtiporecurso, true, true);
            listaReporteFEctg = this.ListarDataXFuenteEnergiaCategorizada(lista48TmpFEctg, listaFenergCtg);

            if (categorizarSoloHidro)
            {
                var listaFenergCtgHidro = this.ListarTipoRecursoEnergetico(idtiporecurso, true, false);
                listaReporteFEctgSoloHidro = this.ListarDataXFuenteEnergiaCategorizada(lista48TmpFEctg, listaFenergCtgHidro);
            }

            if (categorizarSoloGas)
            {
                var listaFenergCtgGas = this.ListarTipoRecursoEnergetico(idtiporecurso, false, true);
                listaReporteFEctgSoloGas = this.ListarDataXFuenteEnergiaCategorizada(lista48TmpFEctg, listaFenergCtgGas);
            }

            #endregion

            #region Data Recursos Energeticos

            var listaFenerg = this.ListarFuenteEnergia();
            listaReporteFE = this.ListarDataXFuenteEnergia(idtiporecurso, lista48Data, listaFenerg);

            #endregion

            #region Data Recursos Energeticos Sin RER

            listaReporteFEsinRER = this.ListarDataXFuenteEnergia(idtiporecurso, lista48Data.Where(x => x.Tipogenerrer != ConstantesMedicion.TipoGenerrer).ToList(), listaFenerg);

            #endregion

            #region Data Recursos Energeticos RER
            lista48TmpFE = lista48Data.Where(x => x.Tipogenerrer == ConstantesMedicion.TipoGenerrer).ToList();

            //Todo los recursos energeticos
            lista48FinalRER = (from t in lista48TmpFE
                               group t by new { t.Medifecha, t.Fenergcodi }
                                    into destino
                               select new MeMedicion48DTO()
                               {
                                   Medifecha = destino.Key.Medifecha,
                                   Fenergcodi = destino.Key.Fenergcodi,
                                   H1 = destino.Sum(t => t.H1),
                                   H2 = destino.Sum(t => t.H2),
                                   H3 = destino.Sum(t => t.H3),
                                   H4 = destino.Sum(t => t.H4),
                                   H5 = destino.Sum(t => t.H5),
                                   H6 = destino.Sum(t => t.H6),
                                   H7 = destino.Sum(t => t.H7),
                                   H8 = destino.Sum(t => t.H8),
                                   H9 = destino.Sum(t => t.H9),
                                   H10 = destino.Sum(t => t.H10),
                                   H11 = destino.Sum(t => t.H11),
                                   H12 = destino.Sum(t => t.H12),
                                   H13 = destino.Sum(t => t.H13),
                                   H14 = destino.Sum(t => t.H14),
                                   H15 = destino.Sum(t => t.H15),
                                   H16 = destino.Sum(t => t.H16),
                                   H17 = destino.Sum(t => t.H17),
                                   H18 = destino.Sum(t => t.H18),
                                   H19 = destino.Sum(t => t.H19),
                                   H20 = destino.Sum(t => t.H20),
                                   H21 = destino.Sum(t => t.H21),
                                   H22 = destino.Sum(t => t.H22),
                                   H23 = destino.Sum(t => t.H23),
                                   H24 = destino.Sum(t => t.H24),
                                   H25 = destino.Sum(t => t.H25),
                                   H26 = destino.Sum(t => t.H26),
                                   H27 = destino.Sum(t => t.H27),
                                   H28 = destino.Sum(t => t.H28),
                                   H29 = destino.Sum(t => t.H29),
                                   H30 = destino.Sum(t => t.H30),
                                   H31 = destino.Sum(t => t.H31),
                                   H32 = destino.Sum(t => t.H32),
                                   H33 = destino.Sum(t => t.H33),
                                   H34 = destino.Sum(t => t.H34),
                                   H35 = destino.Sum(t => t.H35),
                                   H36 = destino.Sum(t => t.H36),
                                   H37 = destino.Sum(t => t.H37),
                                   H38 = destino.Sum(t => t.H38),
                                   H39 = destino.Sum(t => t.H39),
                                   H40 = destino.Sum(t => t.H40),
                                   H41 = destino.Sum(t => t.H41),
                                   H42 = destino.Sum(t => t.H42),
                                   H43 = destino.Sum(t => t.H43),
                                   H44 = destino.Sum(t => t.H44),
                                   H45 = destino.Sum(t => t.H45),
                                   H46 = destino.Sum(t => t.H46),
                                   H47 = destino.Sum(t => t.H47),
                                   H48 = destino.Sum(t => t.H48),
                                   Meditotal = destino.Sum(t => t.Meditotal)
                               }).ToList();

            var listaFenergRER = UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoRER();
            foreach (var regFE in listaFenergRER)
            {
                var lista48FE = lista48FinalRER.Where(x => x.Fenergcodi == regFE.Fenergcodi);
                foreach (var m48 in lista48FE)
                {
                    MeMedicion48DTO reg = new MeMedicion48DTO();
                    reg.Fenergcodi = regFE.Fenergcodi;
                    reg.Tgenercodi = regFE.Tgenercodi.GetValueOrDefault(0);
                    reg.Medifecha = m48.Medifecha;

                    if (m48 != null)
                    {
                        decimal? valor = null;
                        List<decimal> listaH = new List<decimal>();

                        for (int h = 1; h <= 48; h++)
                        {
                            valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                            reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).SetValue(reg, valor);
                            if (valor != null)
                            {
                                listaH.Add(valor.Value);
                            }
                        }

                        reg.Meditotal = m48.Meditotal; //listaH.Sum(x => x);
                    }
                    listaReporteRER.Add(reg);
                }
            }

            #endregion

            listaTotalFE = listaReporteFE;
            listaTotalFEctg = listaReporteFEctg;
            listaTotalFEctgHidro = listaReporteFEctgSoloHidro;
            listaTotalFEctgGas = listaReporteFEctgSoloGas;
            listaTotalFEsinRER = listaReporteFEsinRER;
            listaTotalRER = listaReporteRER;
        }

        private List<MeMedicion48DTO> ListarDataXFuenteEnergia(string idtiporecurso, List<MeMedicion48DTO> lista48Data, List<SiFuenteenergiaDTO> listaFenerg)
        {
            List<MeMedicion48DTO> listaReporteFE = new List<MeMedicion48DTO>();

            //Todo los recursos energeticos
            List<MeMedicion48DTO> lista48FinalFE = (from t in lista48Data
                                                    group t by new { t.Medifecha, t.Fenergcodi }
                                into destino
                                                    select new MeMedicion48DTO()
                                                    {
                                                        Medifecha = destino.Key.Medifecha,
                                                        Fenergcodi = destino.Key.Fenergcodi,
                                                        H1 = destino.Sum(t => t.H1),
                                                        H2 = destino.Sum(t => t.H2),
                                                        H3 = destino.Sum(t => t.H3),
                                                        H4 = destino.Sum(t => t.H4),
                                                        H5 = destino.Sum(t => t.H5),
                                                        H6 = destino.Sum(t => t.H6),
                                                        H7 = destino.Sum(t => t.H7),
                                                        H8 = destino.Sum(t => t.H8),
                                                        H9 = destino.Sum(t => t.H9),
                                                        H10 = destino.Sum(t => t.H10),
                                                        H11 = destino.Sum(t => t.H11),
                                                        H12 = destino.Sum(t => t.H12),
                                                        H13 = destino.Sum(t => t.H13),
                                                        H14 = destino.Sum(t => t.H14),
                                                        H15 = destino.Sum(t => t.H15),
                                                        H16 = destino.Sum(t => t.H16),
                                                        H17 = destino.Sum(t => t.H17),
                                                        H18 = destino.Sum(t => t.H18),
                                                        H19 = destino.Sum(t => t.H19),
                                                        H20 = destino.Sum(t => t.H20),
                                                        H21 = destino.Sum(t => t.H21),
                                                        H22 = destino.Sum(t => t.H22),
                                                        H23 = destino.Sum(t => t.H23),
                                                        H24 = destino.Sum(t => t.H24),
                                                        H25 = destino.Sum(t => t.H25),
                                                        H26 = destino.Sum(t => t.H26),
                                                        H27 = destino.Sum(t => t.H27),
                                                        H28 = destino.Sum(t => t.H28),
                                                        H29 = destino.Sum(t => t.H29),
                                                        H30 = destino.Sum(t => t.H30),
                                                        H31 = destino.Sum(t => t.H31),
                                                        H32 = destino.Sum(t => t.H32),
                                                        H33 = destino.Sum(t => t.H33),
                                                        H34 = destino.Sum(t => t.H34),
                                                        H35 = destino.Sum(t => t.H35),
                                                        H36 = destino.Sum(t => t.H36),
                                                        H37 = destino.Sum(t => t.H37),
                                                        H38 = destino.Sum(t => t.H38),
                                                        H39 = destino.Sum(t => t.H39),
                                                        H40 = destino.Sum(t => t.H40),
                                                        H41 = destino.Sum(t => t.H41),
                                                        H42 = destino.Sum(t => t.H42),
                                                        H43 = destino.Sum(t => t.H43),
                                                        H44 = destino.Sum(t => t.H44),
                                                        H45 = destino.Sum(t => t.H45),
                                                        H46 = destino.Sum(t => t.H46),
                                                        H47 = destino.Sum(t => t.H47),
                                                        H48 = destino.Sum(t => t.H48),
                                                        Meditotal = destino.Sum(t => t.Meditotal)
                                                    }).ToList();

            if (idtiporecurso != ConstantesAppServicio.ParametroDefecto)
            {
                int[] listaTipoRecurso = idtiporecurso.Split(',').Select(x => int.Parse(x)).ToArray();
                listaFenerg = listaFenerg.Where(x => listaTipoRecurso.Contains(x.Fenergcodi)).ToList();
            }

            foreach (var regFE in listaFenerg)
            {
                var lista48FE = lista48FinalFE.Where(x => x.Fenergcodi == regFE.Fenergcodi);
                foreach (var m48 in lista48FE)
                {
                    MeMedicion48DTO reg = new MeMedicion48DTO();
                    reg.Fenergcodi = regFE.Fenergcodi;
                    reg.Fenergnomb = regFE.Fenergnomb;
                    reg.Fenercolor = regFE.Fenergcolor;
                    reg.Orden = regFE.Fenergorden;

                    decimal? valor = null;
                    List<decimal> listaH = new List<decimal>();

                    for (int h = 1; h <= 48; h++)
                    {
                        valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                        reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).SetValue(reg, valor);
                        if (valor != null)
                        {
                            listaH.Add(valor.Value);
                        }
                    }

                    reg.Medifecha = m48.Medifecha;
                    reg.Meditotal = m48.Meditotal; //listaH.Sum(x => x);
                    listaReporteFE.Add(reg);
                }
            }

            return listaReporteFE;
        }

        private List<MeMedicion48DTO> ListarDataXFuenteEnergiaCategorizada(List<MeMedicion48DTO> lista48Data, List<SiFuenteenergiaDTO> listaFenerg)
        {
            List<MeMedicion48DTO> listaReporteFEctg = new List<MeMedicion48DTO>();

            List<SiFuenteenergiaDTO> listaFenergCtg = new List<SiFuenteenergiaDTO>();
            listaFenergCtg.AddRange(listaFenerg);

            List<MeMedicion48DTO> listaTotalFEctg = (from t in lista48Data
                                                     group t by new { t.Medifecha, t.Fenergcodi, t.Ctgdetcodi }
                                into destino
                                                     select new MeMedicion48DTO()
                                                     {
                                                         Medifecha = destino.Key.Medifecha,
                                                         Fenergcodi = destino.Key.Fenergcodi,
                                                         Ctgdetcodi = destino.Key.Ctgdetcodi,
                                                         H1 = destino.Sum(t => t.H1),
                                                         H2 = destino.Sum(t => t.H2),
                                                         H3 = destino.Sum(t => t.H3),
                                                         H4 = destino.Sum(t => t.H4),
                                                         H5 = destino.Sum(t => t.H5),
                                                         H6 = destino.Sum(t => t.H6),
                                                         H7 = destino.Sum(t => t.H7),
                                                         H8 = destino.Sum(t => t.H8),
                                                         H9 = destino.Sum(t => t.H9),
                                                         H10 = destino.Sum(t => t.H10),
                                                         H11 = destino.Sum(t => t.H11),
                                                         H12 = destino.Sum(t => t.H12),
                                                         H13 = destino.Sum(t => t.H13),
                                                         H14 = destino.Sum(t => t.H14),
                                                         H15 = destino.Sum(t => t.H15),
                                                         H16 = destino.Sum(t => t.H16),
                                                         H17 = destino.Sum(t => t.H17),
                                                         H18 = destino.Sum(t => t.H18),
                                                         H19 = destino.Sum(t => t.H19),
                                                         H20 = destino.Sum(t => t.H20),
                                                         H21 = destino.Sum(t => t.H21),
                                                         H22 = destino.Sum(t => t.H22),
                                                         H23 = destino.Sum(t => t.H23),
                                                         H24 = destino.Sum(t => t.H24),
                                                         H25 = destino.Sum(t => t.H25),
                                                         H26 = destino.Sum(t => t.H26),
                                                         H27 = destino.Sum(t => t.H27),
                                                         H28 = destino.Sum(t => t.H28),
                                                         H29 = destino.Sum(t => t.H29),
                                                         H30 = destino.Sum(t => t.H30),
                                                         H31 = destino.Sum(t => t.H31),
                                                         H32 = destino.Sum(t => t.H32),
                                                         H33 = destino.Sum(t => t.H33),
                                                         H34 = destino.Sum(t => t.H34),
                                                         H35 = destino.Sum(t => t.H35),
                                                         H36 = destino.Sum(t => t.H36),
                                                         H37 = destino.Sum(t => t.H37),
                                                         H38 = destino.Sum(t => t.H38),
                                                         H39 = destino.Sum(t => t.H39),
                                                         H40 = destino.Sum(t => t.H40),
                                                         H41 = destino.Sum(t => t.H41),
                                                         H42 = destino.Sum(t => t.H42),
                                                         H43 = destino.Sum(t => t.H43),
                                                         H44 = destino.Sum(t => t.H44),
                                                         H45 = destino.Sum(t => t.H45),
                                                         H46 = destino.Sum(t => t.H46),
                                                         H47 = destino.Sum(t => t.H47),
                                                         H48 = destino.Sum(t => t.H48),
                                                         Meditotal = destino.Sum(t => t.Meditotal)
                                                     }).ToList();

            foreach (var regFE in listaFenergCtg)
            {
                var lista48FE = listaTotalFEctg.Where(x => (x.Fenergcodi == regFE.Fenergcodi || regFE.CtgdetFicticio) && (x.Ctgdetcodi == regFE.Ctgdetcodi || 0 == regFE.Ctgdetcodi)).ToList();
                foreach (var m48 in lista48FE)
                {
                    MeMedicion48DTO reg = new MeMedicion48DTO();
                    reg.Fenergcodi = regFE.Fenergcodi;
                    reg.Fenergnomb = m48.Ctgdetcodi > 0 ? regFE.Ctgdetnomb : regFE.Fenergnomb;
                    reg.Ctgdetcodi = regFE.Ctgdetcodi;
                    reg.Ctgdetnomb = regFE.Ctgdetnomb;
                    //reg.Fenercolor = regFE.Fenergcolor;
                    reg.Orden = regFE.Fenergorden;

                    decimal? valor = null;
                    List<decimal> listaH = new List<decimal>();

                    for (int h = 1; h <= 48; h++)
                    {
                        valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                        reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).SetValue(reg, valor);
                        if (valor != null)
                        {
                            listaH.Add(valor.Value);
                        }
                    }

                    reg.Medifecha = m48.Medifecha;
                    reg.Meditotal = m48.Meditotal;

                    if (regFE.ValidarDatoObligatorio)
                    {
                        //solo agregar a la tabla web cuando exista al menos un dato en algun periodo de tiempo
                        bool visibleEnReporte = reg.Meditotal > 0;
                        if (visibleEnReporte) listaReporteFEctg.Add(reg);
                    }
                    else
                    {
                        listaReporteFEctg.Add(reg);
                    }
                }
            }

            return listaReporteFEctg;
        }

        private void ListarCategoriaDetalleToMedicion48(List<EqCategoriaDetDTO> listaCtg, int fenergcodi, List<MeMedicion48DTO> data, out List<MeMedicion48DTO> listaCategorizada, out List<MeMedicion48DTO> listaSinCategorizar)
        {
            List<int> listaEquicodisCategorizados = new List<int>();

            //data por fuente de energia
            List<MeMedicion48DTO> dataTmp = data.Where(x => x.Fenergcodi == fenergcodi).ToList();

            listaCategorizada = new List<MeMedicion48DTO>();
            foreach (var regCtg in listaCtg)
            {
                List<EqCategoriaEquipoDTO> listaEquipo = FactorySic.GetEqCategoriaEquipoRepository().ListaClasificacionByCategoriaDetalle(regCtg.Ctgdetcodi);
                List<int> listaEquicodi = listaEquipo.Select(x => x.Equicodi).Where(x => x > 0).Distinct().ToList();

                foreach (var reg in dataTmp)
                {
                    if (listaEquicodi.Contains(reg.Equipadre) || listaEquicodi.Contains(reg.Equicodi))
                    {
                        reg.Ctgdetcodi = regCtg.Ctgdetcodi;
                        listaCategorizada.Add(reg);
                    }
                }

                listaEquicodisCategorizados.AddRange(listaEquicodi);
            }

            listaSinCategorizar = dataTmp.Where(x => !listaEquicodisCategorizados.Contains(x.Equipadre) && !listaEquicodisCategorizados.Contains(x.Equicodi)).ToList();
        }

        private List<MeMedicion48DTO> ListaReportePotenciaXTipoHidro(int lectcodi, string idEmpresa, string idCentral, string idTipoRecurso, DateTime fcdesde, DateTime fchasta)
        {
            List<MeMedicion48DTO> lista48Tmp = new List<MeMedicion48DTO>();

            if (idTipoRecurso != ConstantesAppServicio.ParametroDefecto)
            {
                int[] listaTipoRecurso = idTipoRecurso.Split(',').Select(x => int.Parse(x)).ToArray();
                if (!listaTipoRecurso.Contains(ConstantesPR5ReportesServicio.FenergcodiAgua))
                    return lista48Tmp;
            }

            //La data cruzada con Hop que determina que TipoFuenteEnergia tuvo para tal TipoGeneracion
            List<MeMedicion48DTO> lista48Data = this.servEjec.ListaDataMDGeneracionConsolidado48(fcdesde, fchasta, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), idEmpresa, ConstanteValidacion.EstadoTodos, ConstantesPR5ReportesServicio.FenergcodiAgua.ToString(), false, lectcodi);

            if (idCentral != ConstantesAppServicio.ParametroDefecto)
            {
                int[] listaCentral = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();
                lista48Data = lista48Data.Where(x => listaCentral.Contains(x.Equipadre)).ToList();
            }

            //HIDRO
            List<EqCategoriaDetDTO> listaCtgHidro = FactorySic.GetEqCategoriaDetalleRepository().ListByCategoriaAndEstado(ConstantesPR5ReportesServicio.CategoriaRecursoAgua, ConstantesAppServicio.Activo);
            this.ListarCategoriaDetalleToMedicion48(listaCtgHidro, ConstantesPR5ReportesServicio.FenergcodiAgua, lista48Data, out List<MeMedicion48DTO> listaCategorizadaHidro, out List<MeMedicion48DTO> listaSinCategorizarHidro);
            lista48Tmp.AddRange(listaCategorizadaHidro);

            return lista48Tmp;
        }

        private void ListarGeneracionElectricaxCentralesRER(int lectcodi, DateTime fcdesde, DateTime fchasta, string idEmpresa, string idCentral, string idTipoRecurso,
            out List<MeMedicion48DTO> listaData, out List<PrGrupoDTO> listaGrupoData)
        {
            List<PrGrupoDTO> listaAllGrupo = ListarGrupoValido();
            //Grupos RER
            List<PrGrupoDTO> listaRER = this.ListarAllGrupoRER(fchasta);

            listaData = ListarGeneracionElectricaxCentrales(listaRER, listaAllGrupo, lectcodi, fcdesde, fchasta, idEmpresa, idCentral, idTipoRecurso, true, false, out listaGrupoData);
        }

        private void ListarGeneracionElectricaxCentralesCogeneracion(int lectcodi, DateTime fcdesde, DateTime fchasta, string idEmpresa, string idCentral, string idTipoRecurso,
             out List<MeMedicion48DTO> listaData, out List<PrGrupoDTO> listaGrupoData)
        {
            List<PrGrupoDTO> listaAllGrupo = ListarGrupoValido();
            //Grupos Cogeneración
            List<PrGrupoDTO> listaCog = this.ListarAllGrupoCoGeneracion(fchasta);

            listaData = ListarGeneracionElectricaxCentrales(listaCog, listaAllGrupo, lectcodi, fcdesde, fchasta, idEmpresa, idCentral, idTipoRecurso, false, true, out listaGrupoData);
        }

        private List<MeMedicion48DTO> ListarGeneracionElectricaxCentrales(List<PrGrupoDTO> listaGrupo, List<PrGrupoDTO> listaAllGrupo, int lectcodi, DateTime fcdesde, DateTime fchasta, string idEmpresa,
                    string idCentral, string idTipoRecurso, bool filtrarRER, bool filtrarCogen, out List<PrGrupoDTO> listaGrupoData)
        {
            //Grupo Centrales
            List<int> lGrupocodiFromCentral = new List<int>();
            foreach (var item in listaGrupo)
            {
                lGrupocodiFromCentral.Add(INDAppServicio.GrupocodiCentralFromListaGrupo(item.Grupocodi, listaAllGrupo));
            }
            lGrupocodiFromCentral = lGrupocodiFromCentral.Distinct().ToList();
            List<PrGrupoDTO> listaGrupoCentral = listaAllGrupo.Where(x => lGrupocodiFromCentral.Contains(x.Grupocodi)).ToList();

            //Centrales
            List<EqEquipoDTO> listaEq = this.ListarCentralesXEmpresaXFamiliaGEN2(idEmpresa, ConstantesPR5ReportesServicio.FamcodiTipoCentrales).ToList();

            //Data BD
            List<MeMedicion48DTO> listaTmp = new List<MeMedicion48DTO>(), listaFinal = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaData = new List<MeMedicion48DTO>();

            if (lectcodi == 6)
            {
                listaData = this.servEjec.ListaDataGeneracion48(fcdesde, fchasta, ConstantesMedicion.IdTipogrupoCOES, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), idEmpresa,
                    ConstanteValidacion.EstadoTodos, idTipoRecurso, true, ConstantesMedicion.IdTipoInfoPotenciaActiva, lectcodi);
            }
            else
            {
                listaData = this.servEjec.ListaDataMDGeneracionConsolidado48(fcdesde, fchasta, ConstantesMedicion.IdTipogrupoCOES
               , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), idEmpresa, ConstanteValidacion.EstadoTodos, idTipoRecurso, true, lectcodi);
            }

            if (filtrarRER) listaData = listaData.Where(x => x.Tipogenerrer == ConstantesAppServicio.SI).ToList();
            if (filtrarCogen) listaData = listaData.Where(x => x.Grupotipocogen == ConstantesAppServicio.SI).ToList();

            //Filtros
            if (idCentral != ConstantesAppServicio.ParametroDefecto)
            {
                int[] listaCentral = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();
                listaData = listaData.Where(x => listaCentral.Contains(x.Equipadre)).ToList();

                List<int> lGrupocodiFromData = listaEq.Where(x => x.Grupocodi > 0).Select(x => x.Grupocodi.Value).ToList();
                List<int> lGrupocodiFromCentralData = new List<int>();
                foreach (var grupocodi in lGrupocodiFromData)
                {
                    lGrupocodiFromCentralData.Add(INDAppServicio.GrupocodiCentralFromListaGrupo(grupocodi, listaAllGrupo));
                }

                listaGrupoCentral = listaGrupoCentral.Where(x => lGrupocodiFromCentralData.Contains(x.Grupocodi)).ToList();
            }

            if (idTipoRecurso != ConstantesAppServicio.ParametroDefecto)
            {
                int[] listaTipoRecurso = idTipoRecurso.Split(',').Select(x => int.Parse(x)).ToArray();
                //listaGrupo = listaGrupo.Where(x => listaTipoRecurso.Contains(x.Fenergcodi.Value)).ToList();
            }

            //Completar data
            List<int> listaPadreData;
            for (var f = fcdesde.Date; f <= fchasta.Date; f = f.AddDays(1))
            {
                List<MeMedicion48DTO> ltmp = listaData.Where(x => x.Medifecha.Date == f).ToList();
                listaPadreData = new List<int>();
                foreach (var reg in ltmp)
                {
                    reg.Emprnomb = reg.Emprnomb != null ? reg.Emprnomb.Trim() : string.Empty;
                    int grupoCentral = INDAppServicio.GrupocodiCentralFromListaGrupo(reg.Grupocodi, listaAllGrupo);
                    PrGrupoDTO central = listaGrupoCentral.Find(x => x.Grupocodi == grupoCentral);
                    if (central != null)
                    {
                        reg.Grupocodi = central.Grupocodi;
                        reg.Gruponomb = central.Gruponomb;
                        reg.Emprcodi = central.Emprcodi.Value;
                        reg.Emprnomb = central.Emprnomb;
                        listaPadreData.Add(reg.Grupocodi);
                    }
                }

                //agregar las centrales faltantes que estan activos (Visibles en CDispatch)
                var listaGrupoSinData = listaGrupoCentral.Where(x => !listaPadreData.Contains(x.Grupocodi) && x.Grupoactivo == ConstantesAppServicio.SI).ToList();
                foreach (var gruporer in listaGrupoSinData)
                {
                    MeMedicion48DTO m = new MeMedicion48DTO();
                    m.Medifecha = f;
                    m.Grupocodi = gruporer.Grupocodi;
                    m.Gruponomb = gruporer.Gruponomb;
                    m.Emprcodi = gruporer.Emprcodi.Value;
                    m.Emprnomb = gruporer.Emprnomb;
                    m.Fenergcodi = gruporer.Fenergcodi.Value;
                    m.Tgenercodi = gruporer.Tgenercodi;

                    ltmp.Add(m);
                }

                listaTmp.AddRange(ltmp);
            }

            //La data final agruparla por grupopadre
            listaFinal = (from t in listaTmp
                          group t by new { t.Tgenercodi, t.Medifecha, t.Emprcodi, t.Grupocodi }
                              into destino
                          select new MeMedicion48DTO()
                          {
                              Tgenercodi = destino.Key.Tgenercodi,
                              Medifecha = destino.Key.Medifecha,
                              Emprcodi = destino.Key.Emprcodi,
                              Grupocodi = destino.Key.Grupocodi,
                              Emprnomb = destino.First().Emprnomb,
                              Gruponomb = destino.First().Gruponomb,
                              H1 = destino.Sum(t => t.H1),
                              H2 = destino.Sum(t => t.H2),
                              H3 = destino.Sum(t => t.H3),
                              H4 = destino.Sum(t => t.H4),
                              H5 = destino.Sum(t => t.H5),
                              H6 = destino.Sum(t => t.H6),
                              H7 = destino.Sum(t => t.H7),
                              H8 = destino.Sum(t => t.H8),
                              H9 = destino.Sum(t => t.H9),
                              H10 = destino.Sum(t => t.H10),
                              H11 = destino.Sum(t => t.H11),
                              H12 = destino.Sum(t => t.H12),
                              H13 = destino.Sum(t => t.H13),
                              H14 = destino.Sum(t => t.H14),
                              H15 = destino.Sum(t => t.H15),
                              H16 = destino.Sum(t => t.H16),
                              H17 = destino.Sum(t => t.H17),
                              H18 = destino.Sum(t => t.H18),
                              H19 = destino.Sum(t => t.H19),
                              H20 = destino.Sum(t => t.H20),
                              H21 = destino.Sum(t => t.H21),
                              H22 = destino.Sum(t => t.H22),
                              H23 = destino.Sum(t => t.H23),
                              H24 = destino.Sum(t => t.H24),
                              H25 = destino.Sum(t => t.H25),
                              H26 = destino.Sum(t => t.H26),
                              H27 = destino.Sum(t => t.H27),
                              H28 = destino.Sum(t => t.H28),
                              H29 = destino.Sum(t => t.H29),
                              H30 = destino.Sum(t => t.H30),
                              H31 = destino.Sum(t => t.H31),
                              H32 = destino.Sum(t => t.H32),
                              H33 = destino.Sum(t => t.H33),
                              H34 = destino.Sum(t => t.H34),
                              H35 = destino.Sum(t => t.H35),
                              H36 = destino.Sum(t => t.H36),
                              H37 = destino.Sum(t => t.H37),
                              H38 = destino.Sum(t => t.H38),
                              H39 = destino.Sum(t => t.H39),
                              H40 = destino.Sum(t => t.H40),
                              H41 = destino.Sum(t => t.H41),
                              H42 = destino.Sum(t => t.H42),
                              H43 = destino.Sum(t => t.H43),
                              H44 = destino.Sum(t => t.H44),
                              H45 = destino.Sum(t => t.H45),
                              H46 = destino.Sum(t => t.H46),
                              H47 = destino.Sum(t => t.H47),
                              H48 = destino.Sum(t => t.H48)
                          }).ToList();

            var listaTipoGen = this.ListarTipoGeneracionRER();

            foreach (var reg in listaFinal)
            {
                var tgen = listaTipoGen.Find(x => x.Tgenercodi == reg.Tgenercodi);
                reg.Meditotal = 0;
                reg.Tgenernomb = tgen?.Tgenernomb;
                reg.Tgenercolor = tgen?.Tgenercolor;
                reg.Orden = (tgen?.Orden) ?? 0;

                var m48 = listaTmp.Find(x => x.Tgenercodi == reg.Tgenercodi);
                if (m48 != null)
                {
                    decimal? valor = null;
                    List<decimal> listaH = new List<decimal>();

                    for (int h = 1; h <= 48; h++)
                    {
                        valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                        if (valor != null)
                        {
                            listaH.Add(valor.Value);
                        }
                    }

                    reg.Meditotal = listaH.Sum(x => x);
                }
            }

            listaGrupoData = listaFinal.GroupBy(x => new { x.Grupocodi, x.Emprcodi })
                .Select(x => new PrGrupoDTO()
                {
                    Grupocodi = x.Key.Grupocodi,
                    Emprcodi = x.Key.Emprcodi,
                    Gruponomb = x.First().Gruponomb,
                    Emprnomb = x.First().Emprnomb,
                    Tgenercodi = x.First().Tgenercodi,
                    Tgenernomb = x.First().Tgenernomb,
                }).OrderBy(x => x.Emprnomb).ThenBy(x => x.Gruponomb).ToList();

            return listaFinal;
        }

        private List<MeMedicion48DTO> ListarGeneracionElectricaRERXTipoGeneracion(List<MeMedicion48DTO> lista)
        {
            List<MeMedicion48DTO> listaFinal = new List<MeMedicion48DTO>(), listaTmp;
            var listaTipogen = this.ListarTipoGeneracionRER();

            listaTmp = (from t in lista
                        group t by new { t.Tgenercodi }
                            into destino
                        select new MeMedicion48DTO()
                        {
                            Tgenercodi = destino.Key.Tgenercodi,
                            H1 = destino.Sum(t => t.H1),
                            H2 = destino.Sum(t => t.H2),
                            H3 = destino.Sum(t => t.H3),
                            H4 = destino.Sum(t => t.H4),
                            H5 = destino.Sum(t => t.H5),
                            H6 = destino.Sum(t => t.H6),
                            H7 = destino.Sum(t => t.H7),
                            H8 = destino.Sum(t => t.H8),
                            H9 = destino.Sum(t => t.H9),
                            H10 = destino.Sum(t => t.H10),
                            H11 = destino.Sum(t => t.H11),
                            H12 = destino.Sum(t => t.H12),
                            H13 = destino.Sum(t => t.H13),
                            H14 = destino.Sum(t => t.H14),
                            H15 = destino.Sum(t => t.H15),
                            H16 = destino.Sum(t => t.H16),
                            H17 = destino.Sum(t => t.H17),
                            H18 = destino.Sum(t => t.H18),
                            H19 = destino.Sum(t => t.H19),
                            H20 = destino.Sum(t => t.H20),
                            H21 = destino.Sum(t => t.H21),
                            H22 = destino.Sum(t => t.H22),
                            H23 = destino.Sum(t => t.H23),
                            H24 = destino.Sum(t => t.H24),
                            H25 = destino.Sum(t => t.H25),
                            H26 = destino.Sum(t => t.H26),
                            H27 = destino.Sum(t => t.H27),
                            H28 = destino.Sum(t => t.H28),
                            H29 = destino.Sum(t => t.H29),
                            H30 = destino.Sum(t => t.H30),
                            H31 = destino.Sum(t => t.H31),
                            H32 = destino.Sum(t => t.H32),
                            H33 = destino.Sum(t => t.H33),
                            H34 = destino.Sum(t => t.H34),
                            H35 = destino.Sum(t => t.H35),
                            H36 = destino.Sum(t => t.H36),
                            H37 = destino.Sum(t => t.H37),
                            H38 = destino.Sum(t => t.H38),
                            H39 = destino.Sum(t => t.H39),
                            H40 = destino.Sum(t => t.H40),
                            H41 = destino.Sum(t => t.H41),
                            H42 = destino.Sum(t => t.H42),
                            H43 = destino.Sum(t => t.H43),
                            H44 = destino.Sum(t => t.H44),
                            H45 = destino.Sum(t => t.H45),
                            H46 = destino.Sum(t => t.H46),
                            H47 = destino.Sum(t => t.H47),
                            H48 = destino.Sum(t => t.H48)
                        }).ToList();

            foreach (var reg in listaTipogen)
            {
                MeMedicion48DTO regTgen = new MeMedicion48DTO();
                regTgen.Tgenercodi = reg.Tgenercodi;
                regTgen.Tgenernomb = reg.Tgenernomb;
                regTgen.Tgenercolor = reg.Tgenercolor;
                regTgen.Orden = reg.Orden;
                regTgen.Meditotal = 0;

                var m48 = listaTmp.Find(x => x.Tgenercodi == reg.Tgenercodi);
                if (m48 != null)
                {
                    decimal? valor = null;
                    List<decimal> listaH = new List<decimal>();

                    for (int h = 1; h <= 48; h++)
                    {
                        valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                        if (valor != null)
                        {
                            listaH.Add(valor.Value);
                        }
                    }

                    regTgen.Meditotal = listaH.Sum(x => x);
                }

                listaFinal.Add(regTgen);
            }

            return listaFinal.OrderByDescending(x => x.Meditotal).ToList();
        }

        /// <summary>
        /// Data para item 7 
        /// </summary>
        /// <param name="tipoDato48"></param>
        /// <param name="idempresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="idtiporecurso"></param>
        /// <param name="tipoReporteRecurso"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista1"></param>
        /// <param name="lista2"></param>
        /// <param name="listaVersion1"></param>
        /// <param name="listaVersion2"></param>
        /// <param name="listaTipoGen"></param>
        /// <param name="listaGrupoData"></param>
        /// <param name="listaMensaje"></param>
        public void ReportePotenciaXTipoRecursoDataVersionada(int tipoDato48, string idempresa, string idCentral, string idtiporecurso, int tipoReporteRecurso, DateTime fechaInicio, DateTime fechaFinal
           , string versionAnexoA, out List<MeMedicion48DTO> lista1, out List<MeMedicion48DTO> lista2, out List<MeMedicion48DTO> listaVersion1, out List<MeMedicion48DTO> listaVersion2
           , out List<SiTipogeneracionDTO> listaTipoGen, out List<PrGrupoDTO> listaGrupoData, out List<string> listaMensaje)
        {
            lista1 = new List<MeMedicion48DTO>();
            lista2 = new List<MeMedicion48DTO>();
            listaVersion1 = new List<MeMedicion48DTO>();
            listaVersion2 = new List<MeMedicion48DTO>();
            listaGrupoData = new List<PrGrupoDTO>();
            listaMensaje = new List<string>();

            idempresa = !string.IsNullOrEmpty(idempresa) ? idempresa : ConstantesAppServicio.ParametroDefecto;
            idCentral = !string.IsNullOrEmpty(idCentral) ? idCentral : ConstantesAppServicio.ParametroDefecto;
            idtiporecurso = !string.IsNullOrEmpty(idtiporecurso) ? idtiporecurso : ConstantesAppServicio.ParametroDefecto;

            int lectcodi = (tipoDato48 == ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho) ? ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto : ConstantesPR5ReportesServicio.LectDespachoEjecutado;

            if (versionAnexoA != "")
            {
                if (tipoReporteRecurso == 1)
                {
                    listaVersion1 = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEINRer1);
                    lista1 = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEINRer1);

                    listaVersion2 = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEINRer2);
                    lista2 = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEINRer2);
                }
                else
                {
                    listaVersion1 = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEIN1);
                    lista1 = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEIN1);

                    listaVersion2 = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEIN2);
                    lista2 = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEIN2);
                }
            }
            else
            {
                if (tipoReporteRecurso == 1) //Solo Recursos Energéticos RER
                {
                    ListarGeneracionElectricaxCentralesRER(lectcodi, fechaInicio, fechaFinal, idempresa, idCentral, idtiporecurso, out lista1, out listaGrupoData);
                    lista2 = ListarGeneracionElectricaRERXTipoGeneracion(lista1);
                }

                if (tipoReporteRecurso == 3) //Solo Recursos Energéticos Cogeneración
                {
                    ListarGeneracionElectricaxCentralesCogeneracion(lectcodi, fechaInicio, fechaFinal, idempresa, idCentral, idtiporecurso, out lista1, out listaGrupoData);
                    lista2 = ListarGeneracionElectricaRERXTipoGeneracion(lista1);
                }

                if (tipoReporteRecurso == 2) //Todos los recursos energéticos
                {
                    List<MeMedicion48DTO> lista3;
                    ReportePotenciaXTipoRecursoDataReporte(lectcodi, idempresa, idCentral, idtiporecurso, fechaInicio, fechaFinal, true, out lista1, out lista3, out listaMensaje);
                    lista2 = ListaReportePotenciaXTipoHidro(lectcodi, idempresa, idCentral, idtiporecurso, fechaInicio, fechaFinal);
                }
            }

            listaTipoGen = this.ListarTipoGeneracionRER();
        }

        private void ReportePotenciaXTipoRecursoExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, int tipoDato48, string idempresa, string idCentral,
                             string idtiporecurso, int tipoReporteRecurso, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, lista2;
            List<MeMedicion48DTO> listaVersion1, listaVersion2;
            ReportePotenciaXTipoRecursoDataVersionada(tipoDato48, idempresa, idCentral, idtiporecurso, tipoReporteRecurso, fecha1, fecha2, versionAnexoA
                        , out lista, out lista2, out listaVersion1, out listaVersion2, out List<SiTipogeneracionDTO> listaTipoGen, out List<PrGrupoDTO> listaGrupoData, out List<string> listaMensaje);

            int nfil = 0, ncol1 = 0, ncol2 = 0, ncol3 = 0, nfil2 = 0;
            int tipoGrafico = 1;
            string xAxisTitle = string.Empty, yAxisTitle = string.Empty, titulo = string.Empty;

            if (tipoReporteRecurso == 2) //Todos los recursos energéticos
            {
                UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "TIPO_RECURSO", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                int numRecursos;
                UtilAnexoAPR5.GeneraRptPotenciaXTipoRecursoTotal(ws, fecha1, fecha2, ref nfil, ref ncol1, ref ncol2, ref ncol3, tipoGrafico, out numRecursos, lista, lista2, listaVersion1, listaVersion2);

                int ultimaFilaTabla1 = nfil;
                int filaInicialTab1 = ncol1;
                int coluInicialTab1 = ncol2;
                titulo = "DIAGRAMA DE CARGA DE SEIN POR TIPO DE RECURSO";
                UtilAnexoAPR5.AddGraficoPotenciaXTipoRecursoTotal(ws, xAxisTitle, "MW", titulo, 1, ultimaFilaTabla1 + 8, coluInicialTab1, filaInicialTab1 + 1, coluInicialTab1 + 1, filaInicialTab1 + 1, coluInicialTab1, numRecursos);
                titulo = "PARTICIPACION TIPO DE RECURSO";
                UtilAnexoAPR5.AddGraficoPiePotenciaXTipoRecursoTotal(ws, xAxisTitle, xAxisTitle, titulo, 1, ultimaFilaTabla1 + 8 + 30, coluInicialTab1, ultimaFilaTabla1 - 1, coluInicialTab1 + 1, filaInicialTab1, coluInicialTab1 + 1, numRecursos);

                UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            }

            if (tipoReporteRecurso == 1) //Solo Recursos Energéticos RER
            {
                UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "GENERACION RER", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                nfil = ncol1 = ncol2 = 0;
                int numCentrales;
                List<MeMedicion48DTO> listaGenXTipoGeneracion;
                UtilAnexoAPR5.GeneraRptGeneracionElectricaCentralesRERTotal(ws, fecha1, fecha2, "GENERACIÓN ELÉCTRICA DE LAS CENTRALES RER (MW)", "TOTAL RER", ref nfil, ref ncol1, ref nfil2, ref ncol2, tipoGrafico
                            , out numCentrales, out listaGenXTipoGeneracion, lista, lista2, listaVersion1, listaVersion2, listaTipoGen, listaGrupoData);
                int ultimaFilaTabla2 = nfil2;
                int filaInicialTab2 = nfil;
                int coluInicialTab2 = ncol1;

                titulo = "GENERACIÓN ELÉCTRICA DE LAS CENTRALES RER (MWh)";
                UtilAnexoAPR5.AddGraficoGeneracionElectricaCentralesRER(ws, "Centrales", "MWh", titulo, ultimaFilaTabla2 + 9, coluInicialTab2, ultimaFilaTabla2, coluInicialTab2 + 1, filaInicialTab2 + 2, coluInicialTab2 + 1, numCentrales);
                titulo = "GENERACIÓN ELÉCTRICA RER POR TIPO DE GENERACIÓN EN EL SEIN";
                UtilAnexoAPR5.AddGraficoPieGeneracionElectricaCentralesRER(ws, listaGenXTipoGeneracion, xAxisTitle, xAxisTitle, titulo, ultimaFilaTabla2 + 9, coluInicialTab2 + 8, ultimaFilaTabla2 - 1, coluInicialTab2 + 1, filaInicialTab2, coluInicialTab2 + 1, numCentrales);

                UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            }

            if (tipoReporteRecurso == 3) //Solo Recursos Energéticos Cogeneración
            {
                UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "COGENERACIÓN", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                nfil = ncol1 = ncol2 = nfil2 = 0;
                int numCentrales;
                titulo = "CENTRALES DE COGENERACIÓN DEL SEIN";
                UtilAnexoAPR5.GeneraRptGeneracionElectricaCentralesRERTotal(ws, fecha1, fecha2, titulo, "TOTAL\r\nCOGENERACION\r\n", ref nfil, ref ncol1, ref nfil2, ref ncol2, tipoGrafico
                            , out numCentrales, out List<MeMedicion48DTO> listaGenXTipoGeneracion, lista, lista2, listaVersion1, listaVersion2, listaTipoGen, listaGrupoData);
                int filaInicialTab2 = nfil;
                int ultimaFilaTabla2 = nfil2;
                int coluInicialTab2 = ncol1;
                int coluFinalTab2 = ncol2;
                UtilAnexoAPR5.AddGraficoGeneracionSEIN(ws, xAxisTitle, "MW", titulo, 4, filaInicialTab2 + 4, coluFinalTab2 + 4,
                                filaInicialTab2 + 3, coluInicialTab2 + 1, filaInicialTab2 + 3, coluInicialTab2, listaGrupoData.Count);

                UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            }
        }

        #endregion

        // 3.13.2.8.	Evolución de la producción de energía diaria.
        #region REPORTE_PRODUCCION_ENERGIA_DIARIA

        private void ReporteProduccionEnergiaDiariaDataReporte(string idEmpresa, string idCentral, DateTime fechaInicio, DateTime fechaFin,
                    out List<MeMedicion48DTO> listaData48, out List<MePtomedicionDTO> listaPto48)
        {
            List<MeMedicion48DTO> lista = this.servEjec.ListaDataGeneracion48(fechaInicio, fechaFin, ConstantesMedicion.IdTipogrupoTodos
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString()
                , false, ConstantesPR5ReportesServicio.TipoinfoMW, ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto);

            CDespachoInput regInput = new CDespachoInput()
            {
                FechaIni = fechaInicio,
                FechaFin = fechaFin,
                Lectcodi = ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto,
                ListaAllMe48 = lista,
            };

            var regCDespacho = new CDespachoGlobal();

            //Consultas a BD para obtener los insumos
            (new MigracionesAppServicio()).CargarInsumoPlantillaGeneracionCDispatch(regInput, ref regCDespacho);
            UtilCdispatch.AsignarVariablesPlantillaCDispatch(regInput, ref regCDespacho);
            List<MePtomedicionDTO> listaAllPtoPlantilla = regCDespacho.ListaAllPtoPlantillaExcel;

            if (idCentral != "-1")
            {
                var centrales = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();
                lista = lista.Where(x => centrales.Contains(x.Equipadre)).ToList();
            }
            if (idEmpresa != "-1")
            {
                var empresas = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
                lista = lista.Where(x => empresas.Contains(x.Emprcodi)).ToList();
            }

            foreach (var reg in lista)
            {
                reg.Meditotal = reg.Meditotal.GetValueOrDefault(0) / 2; //obtener MWh por día
            }

            //el ordenamiento es alfabetico, no como es en CDispatch
            listaAllPtoPlantilla = listaAllPtoPlantilla.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ToList();

            //salidas
            listaData48 = lista;
            listaPto48 = listaAllPtoPlantilla;
        }

        /// <summary>
        /// Obtner las listas que usaremos en e la produccion del reporte Produccion Energia Diaria
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="idGeneracion"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="listaDataCoes"></param>
        /// <param name="listaDataNoCoes"></param>
        /// <param name="listaVersionCoes"></param>
        /// <param name="listaVersionNoCoes"></param>
        public void ReporteProduccionEnergiaDiariaDataVersionada(string idEmpresa, string idCentral, string idGeneracion, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<MeMedicion48DTO> listaDataCoes, out List<MeMedicion48DTO> listaDataNoCoes
            , out List<MePtomedicionDTO> listaPto48Coes, out List<MePtomedicionDTO> listaPto48NoCoes
            , out List<MeMedicion48DTO> listaVersionCoes, out List<MeMedicion48DTO> listaVersionNoCoes)
        {
            List<MeMedicion48DTO> listaDC = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaDNC = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaVC = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaVNC = new List<MeMedicion48DTO>();

            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaVersion = new List<MeMedicion48DTO>();
            List<MePtomedicionDTO> listaPto48 = new List<MePtomedicionDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idCentral = string.IsNullOrEmpty(idCentral) ? ConstantesAppServicio.ParametroDefecto : idCentral;
            idGeneracion = string.IsNullOrEmpty(idGeneracion) ? ConstantesAppServicio.ParametroDefecto : idGeneracion;

            int[] empresas = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] centrales = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] tipgeneracion = idGeneracion.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteProduccionEnergiaDiaria);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteProduccionEnergiaDiaria);
            }
            else
            {
                this.ReporteProduccionEnergiaDiariaDataReporte(idEmpresa, idCentral, fechaInicial, fechaFinal,
                    out lista, out listaPto48);
            }

            lista = lista.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                            && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))
                                            && (idGeneracion == ConstantesAppServicio.ParametroDefecto || tipgeneracion.Contains(x.Tgenercodi))).ToList();
            listaVersion = listaVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                            && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))
                                            && (idGeneracion == ConstantesAppServicio.ParametroDefecto || tipgeneracion.Contains(x.Tgenercodi))).ToList();

            listaDataCoes = lista.Where(x => x.Grupointegrante == ConstantesPR5ReportesServicio.EmpresacoesSi).ToList();
            listaDataNoCoes = lista.Where(x => x.Grupointegrante == ConstantesPR5ReportesServicio.EmpresacoesNo).ToList();
            listaPto48Coes = listaPto48.Where(x => x.Grupointegrante == ConstantesPR5ReportesServicio.EmpresacoesSi).ToList();
            listaPto48NoCoes = listaPto48.Where(x => x.Grupointegrante == ConstantesPR5ReportesServicio.EmpresacoesNo).ToList();

            listaVersionCoes = listaVersion.Where(x => x.Grupointegrante == ConstantesPR5ReportesServicio.EmpresacoesSi).ToList();
            listaVersionNoCoes = listaVersion.Where(x => x.Grupointegrante == ConstantesPR5ReportesServicio.EmpresacoesNo).ToList();
        }

        private void ReporteProduccionEnergiaDiariaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string idCentral, string idGeneracion, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            this.ReporteProduccionEnergiaDiariaDataVersionada(idEmpresa, idCentral, idGeneracion, fecha1, fecha2, versionAnexoA,
                            out List<MeMedicion48DTO> listaDC, out List<MeMedicion48DTO> listaDNC,
                            out List<MePtomedicionDTO> listaPto48Coes, out List<MePtomedicionDTO> listaPto48NoCoes,
                            out List<MeMedicion48DTO> listaVC, out List<MeMedicion48DTO> listaVNC);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "EVO_PRO_ENE", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptTodoEvoProdEnDiaria(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2,
                                listaDC, listaDNC, listaPto48Coes, listaPto48NoCoes, listaVC, listaVNC);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.9.	Máxima generación instantánea del SEIN (MW).
        #region REPORTE_MAX_GENERACION_DEL_SEIN

        private List<MeMedicion48DTO> ReporteMaxGeneracionInstSEINDataReporte(int lectcodi, DateTime fechaInicio, DateTime fechaFin)
        {
            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();

            //input
            int orden = 0;
            List<MeMedicion48DTO> listaData = this.servEjec.ListaDataGeneracion48(fechaInicio, fechaFin, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesTipoInformacion.TipoinfoMW, lectcodi);

            string[] listaIdTipoGeneracion = ConstantesPR5ReportesServicio.TipoFteEnergiaTodos.Split(',');
            List<SiTipogeneracionDTO> listaTipoGen = FactorySic.GetSiTipogeneracionRepository().List().Where(x => listaIdTipoGeneracion.Contains(x.Tgenercodi.ToString())).ToList().OrderBy(x => x.Tgenercodi).ToList();
            foreach (var reg in listaTipoGen)
            {
                switch (reg.Tgenercodi)
                {
                    case ConstantesPR5ReportesServicio.TgenercodiHidro:
                        reg.Orden = 1;
                        break;
                    case ConstantesPR5ReportesServicio.TgenercodiTermo:
                        reg.Orden = 2;
                        break;
                    case ConstantesPR5ReportesServicio.TgenercodiSolar:
                        reg.Orden = 3;
                        break;
                    case ConstantesPR5ReportesServicio.TgenercodiEolica:
                        reg.Orden = 4;
                        break;
                }
            }

            //Get Datos Formula MeReporte
            List<MeReporptomedDTO> listaPtos = new List<MeReporptomedDTO>();
            List<MeMedicion48DTO> listaDatan = new List<MeMedicion48DTO>();
            List<MePtomedicionDTO> listaPto = new List<MePtomedicionDTO>();
            var nor = this.servFormatoRep.GetListaCabyDatos48MeReporteConDataParametro(ConstantesPR5ReportesServicio.ReporcodiMaxGeneNorHisto, lectcodi, fechaInicio, fechaFin, ref listaPto, ref listaDatan, ref listaData);
            var cen = this.servFormatoRep.GetListaCabyDatos48MeReporteConDataParametro(ConstantesPR5ReportesServicio.ReporcodiMaxGeneCenHisto, lectcodi, fechaInicio, fechaFin, ref listaPto, ref listaDatan, ref listaData);
            var sur = this.servFormatoRep.GetListaCabyDatos48MeReporteConDataParametro(ConstantesPR5ReportesServicio.ReporcodiMaxGeneSurHisto, lectcodi, fechaInicio, fechaFin, ref listaPto, ref listaDatan, ref listaData);

            foreach (var d in nor) { d.Areacodi = 1; d.Areanomb = "NORTE"; }
            foreach (var d in cen) { d.Areacodi = 2; d.Areanomb = "CENTRO"; }
            foreach (var d in sur) { d.Areacodi = 3; d.Areanomb = "SUR"; }

            listaPtos.AddRange(nor);
            listaPtos.AddRange(cen);
            listaPtos.AddRange(sur);

            foreach (var reg in listaPtos)
            {
                if (reg.Ptomedibarranomb.Contains("HIDRO")) reg.Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiHidro;
                if (reg.Ptomedibarranomb.Contains("TERMO")) reg.Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiTermo;
                if (reg.Ptomedibarranomb.Contains("SOLAR")) reg.Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiSolar;
                if (reg.Ptomedibarranomb.Contains("LICA")) reg.Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiEolica;
            }

            //transform
            List<MeMedicion48DTO> lista48Tmp = new List<MeMedicion48DTO>();
            MeMedicion48DTO m48tmp = null;
            decimal? valor = null;

            #region RESUMEN DE GENERACIÓN POR ÁREAS DEL SEIN
            // NORTE,CENTRO,SUR

            foreach (var me in listaPtos.OrderBy(x => x.Areacodi).ThenBy(x => x.Tgenercodi))
            {
                orden++;
                lista48Tmp = listaDatan.Where(x => x.Ptomedicodi == me.Ptomedicodi && x.Tgenercodi == me.Tgenercodi).ToList();

                //Ejm: Generación Eólico Sur
                m48tmp = new MeMedicion48DTO();

                for (int i = 1; i <= 48; i++)
                {
                    List<decimal> listaH = new List<decimal>();
                    foreach (var m in lista48Tmp)
                    {
                        valor = (decimal?)m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(m, null);
                        if (valor != null)
                        {
                            listaH.Add(valor.Value);
                        }
                    }

                    if (listaH.Count > 0)
                    {
                        decimal sumaH = listaH.Sum(x => x);
                        m48tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i).ToString()).SetValue(m48tmp, sumaH);
                    }
                }

                m48tmp.Orden = orden;
                m48tmp.Ptomedicodi = me.Ptomedicodi;
                m48tmp.Tgenercodi = me.Tgenercodi;
                m48tmp.Areacodi = me.Areacodi;
                m48tmp.Areanomb = me.Areanomb;
                lista.Add(m48tmp);
            }

            //GENERACIÓN INTEGRANTES COES
            foreach (var me in listaPtos.GroupBy(x => x.Reporcodi).ToList())
            {
                string nomb_ = string.Empty;
                switch (me.FirstOrDefault().Reporcodi)
                {
                    case ConstantesPR5ReportesServicio.ReporcodiMaxGeneNorHisto: nomb_ = "Norte"; lista48Tmp = listaDatan.Where(x => nor.Select(y => y.Ptomedicodi).Contains(x.Ptomedicodi)).ToList(); break;
                    case ConstantesPR5ReportesServicio.ReporcodiMaxGeneCenHisto: nomb_ = "Centro"; lista48Tmp = listaDatan.Where(x => cen.Select(y => y.Ptomedicodi).Contains(x.Ptomedicodi)).ToList(); break;
                    case ConstantesPR5ReportesServicio.ReporcodiMaxGeneSurHisto: nomb_ = "Sur"; lista48Tmp = listaDatan.Where(x => sur.Select(y => y.Ptomedicodi).Contains(x.Ptomedicodi)).ToList(); break;
                }

                m48tmp = new MeMedicion48DTO();
                orden++;
                for (int i = 1; i <= 48; i++)
                {
                    List<decimal> listaH = new List<decimal>();
                    foreach (var m in lista48Tmp)
                    {
                        valor = (decimal?)m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(m, null);
                        if (valor != null)
                        {
                            listaH.Add(valor.Value);
                        }
                    }

                    if (listaH.Count > 0)
                    {
                        decimal sumaH = listaH.Sum(x => x);
                        m48tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i).ToString()).SetValue(m48tmp, sumaH);
                    }
                }
                m48tmp.Descripcion = "Generación COES " + nomb_;
                m48tmp.Orden = orden;
                lista.Add(m48tmp);
            }

            orden++;
            lista48Tmp = listaDatan;

            //Ejm:TOTAL GENERACIÓN COES
            m48tmp = new MeMedicion48DTO();
            for (int i = 1; i <= 48; i++)
            {
                List<decimal> listaH = new List<decimal>();
                foreach (var m in lista48Tmp)
                {
                    valor = (decimal?)m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(m, null);
                    if (valor != null)
                    {
                        listaH.Add(valor.Value);
                    }
                }

                if (listaH.Count > 0)
                {
                    decimal sumaH = listaH.Sum(x => x);
                    m48tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i).ToString()).SetValue(m48tmp, sumaH);
                }
            }

            m48tmp.Orden = orden;
            lista.Add(m48tmp);
            #endregion

            #region GENERACIÓN POR TIPO DE GENERACIÓN
            List<MeMedicion48DTO> listaGeneracionCOES = listaData;
            foreach (var tipogen in listaTipoGen)
            {
                orden++;
                lista48Tmp = listaGeneracionCOES.Where(x => x.Tgenercodi == tipogen.Tgenercodi).ToList();

                //Ejm: EÓLICO
                m48tmp = new MeMedicion48DTO();
                for (int i = 1; i <= 48; i++)
                {
                    List<decimal> listaH = new List<decimal>();
                    foreach (var m in lista48Tmp)
                    {
                        valor = (decimal?)m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(m, null);
                        if (valor != null)
                        {
                            listaH.Add(valor.Value);
                        }
                    }

                    if (listaH.Count > 0)
                    {
                        decimal sumaH = listaH.Sum(x => x);
                        m48tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i).ToString()).SetValue(m48tmp, sumaH);
                    }
                }

                m48tmp.Descripcion = tipogen.Tgenernomb;
                m48tmp.Orden = orden;
                lista.Add(m48tmp);
            }

            //
            orden++;
            lista48Tmp = listaGeneracionCOES;

            //Ejm:TOTAL GENERACIÓN COES
            m48tmp = new MeMedicion48DTO();
            for (int i = 1; i <= 48; i++)
            {
                List<decimal> listaH = new List<decimal>();
                foreach (var m in lista48Tmp)
                {
                    valor = (decimal?)m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(m, null);
                    if (valor != null)
                    {
                        listaH.Add(valor.Value);
                    }
                }

                if (listaH.Count > 0)
                {
                    decimal sumaH = listaH.Sum(x => x);
                    m48tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i).ToString()).SetValue(m48tmp, sumaH);
                }
            }

            m48tmp.Orden = orden;
            lista.Add(m48tmp);
            #endregion

            #region GENERACIÓN POR TIPO DE GENERACIÓN COES RER
            List<MeMedicion48DTO> listaGeneracionCOESRER = listaData.Where(x => x.Tipogenerrer == ConstantesPR5ReportesServicio.TipoGenRER).ToList();
            foreach (var tipogen in listaTipoGen)
            {
                orden++;
                lista48Tmp = listaGeneracionCOESRER.Where(x => x.Tgenercodi == tipogen.Tgenercodi).ToList();

                //Ejm: EÓLICO
                m48tmp = new MeMedicion48DTO();
                for (int i = 1; i <= 48; i++)
                {
                    List<decimal> listaH = new List<decimal>();
                    foreach (var m in lista48Tmp)
                    {
                        valor = (decimal?)m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(m, null);
                        if (valor != null)
                        {
                            listaH.Add(valor.Value);
                        }
                    }

                    if (listaH.Count > 0)
                    {
                        decimal sumaH = listaH.Sum(x => x);
                        m48tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i).ToString()).SetValue(m48tmp, sumaH);
                    }
                }

                m48tmp.Descripcion = tipogen.Tgenernomb;
                m48tmp.Orden = orden;
                lista.Add(m48tmp);
            }

            //
            orden++;
            lista48Tmp = listaGeneracionCOESRER;

            //Ejm:TOTAL GENERACIÓN COES
            m48tmp = new MeMedicion48DTO();
            for (int i = 1; i <= 48; i++)
            {
                List<decimal> listaH = new List<decimal>();
                foreach (var m in lista48Tmp)
                {
                    valor = (decimal?)m.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(m, null);
                    if (valor != null)
                    {
                        listaH.Add(valor.Value);
                    }
                }

                if (listaH.Count > 0)
                {
                    decimal sumaH = listaH.Sum(x => x);
                    m48tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i).ToString()).SetValue(m48tmp, sumaH);
                }
            }

            m48tmp.Orden = orden;
            lista.Add(m48tmp);
            #endregion

            //total
            valor = null;
            foreach (var m48 in lista)
            {
                //calcular minimo, maximo, promedio, total
                decimal total = 0;
                List<decimal> listaH = new List<decimal>();

                for (int h = 1; h <= 48; h++)
                {
                    valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                    if (valor != null)
                    {
                        listaH.Add(valor.Value);
                    }
                }

                if (listaH.Count > 0)
                {
                    total = listaH.Sum(x => x);
                }

                m48.Meditotal = total;
            }

            return lista;
        }

        /// <summary>
        /// Obtiene las listas que se usarán para llenar el reporte Generacion del SEIN
        /// </summary>
        /// <param name="tipoDato48"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteMaxGeneracionInstSEINDataVersionada(int tipoDato48, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();

            int lectcodi = (tipoDato48 == ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho) ? ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto : ConstantesPR5ReportesServicio.LectDespachoEjecutado;

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteGeneracionDelSEIN);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteGeneracionDelSEIN);
            }
            else
            {
                lista = this.ReporteMaxGeneracionInstSEINDataReporte(lectcodi, fechaInicial, fechaFinal);
            }
        }

        private void ReporteMaxGeneracionInstSEINExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, int tipoDato48, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            ReporteMaxGeneracionInstSEINDataVersionada(tipoDato48, fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            int nfil = 0, ncol1 = 0, ncol2 = 0, ncol3 = 0;
            int tipoGrafico = 1;
            string xAxisTitle = string.Empty, yAxisTitle = string.Empty, titulo = string.Empty;

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "G_AREAS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptGeneracionSEIN(ws, versionAnexoA, fecha1, fecha2, ref nfil, ref ncol1, ref ncol2, ref ncol3, tipoGrafico, lista, listaVersion);

            titulo = "GENERACION ELECTRICA DEL SEIN POR ";
            int ultimaFila = nfil;
            int filaIniRep = ncol2;
            int coluIniRep = ncol3;
            UtilAnexoAPR5.AddGraficoGeneracionSEIN(ws, xAxisTitle, "MW", titulo + "AREAS OPERATIVAS", 1, ultimaFila + 10, coluIniRep, filaIniRep + 3, coluIniRep + 13, filaIniRep + 3, coluIniRep, 0);
            UtilAnexoAPR5.AddGraficoGeneracionSEIN(ws, xAxisTitle, "MW", titulo + "TIPO DE GENERACION", 2, ultimaFila + 10, coluIniRep + 8, filaIniRep + 3, coluIniRep + 18, filaIniRep + 3, coluIniRep, 0);
            UtilAnexoAPR5.AddGraficoGeneracionSEIN(ws, xAxisTitle, "MW", titulo + "TIPO DE GENERACION - RER", 3, ultimaFila + 10, coluIniRep + 16, filaIniRep + 3, coluIniRep + 24, filaIniRep + 3, coluIniRep, 0);

            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        #endregion

        #region INFORMACIÓN DE LAS UNIDADES DE GENERACIÓN

        // 3.13.2.10.	Horas de orden de arranque y parada, así como las horas de ingreso y salida de las Unidades de Generación del SEIN.
        #region REPORTE_HORAS_ORDEN_APISGENERACIONSEIN

        /// <summary>
        /// listar tipo de operacion
        /// </summary>
        /// <returns></returns>
        public List<EveSubcausaeventoDTO> GetSubCausaEventCriteria()
        {
            return FactorySic.GetEveSubcausaeventoRepository().List();
        }

        /// <summary>
        /// listar tipo de operacion
        /// </summary>
        /// <returns></returns>
        public List<EveSubcausaeventoDTO> ListarTipoOperacionHO()
        {
            return this.servHO.ListarTipoOperacionHO();
        }

        private List<EveHoraoperacionDTO> ReporteHorasOrdenAPISDataReporte(DateTime fechaInicial, DateTime fechaFinal)
        {
            List<EveSubcausaeventoDTO> listaSubcausa = this.ListarTipoOperacionHO();

            List<EveHoraoperacionDTO> lista = this.servHO.GetListaHorasOperacionByCriteria(Int32.Parse(ConstantesHorasOperacion.ParamEmpresaTodos), ConstantesHorasOperacion.ParamTipoOperacionTodos, fechaInicial, fechaFinal, ConstantesHorasOperacion.IdTipoCentralTodos, Int32.Parse(ConstantesHorasOperacion.ParamCentralTodos));

            foreach (var reg in lista)
            {
                var regSub = listaSubcausa.Find(x => x.Subcausacodi == reg.Subcausacodi);
                reg.Subcausacolor = regSub != null ? regSub.Subcausacolor : ConstantesSubcausaEvento.SubcausaDefaultColor;
            }

            return lista;
        }

        /// <summary>
        /// ReporteHorasOrdenAPISDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="modoOpe"></param>
        /// <param name="idTCentral"></param>
        /// <param name="idTCombustible"></param>
        /// <param name="idTOperacion"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteHorasOrdenAPISDataVersionada(string idEmpresa, string modoOpe, string idTCentral, string idTCombustible, string idTOperacion, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<EveHoraoperacionDTO> lista, out List<EveHoraoperacionDTO> listaVersion)
        {
            lista = new List<EveHoraoperacionDTO>();
            listaVersion = new List<EveHoraoperacionDTO>();

            fechaFinal = fechaFinal.AddDays(1);

            if (string.IsNullOrEmpty(idEmpresa)) idEmpresa = ConstantesAppServicio.ParametroDefecto;
            if (string.IsNullOrEmpty(idTCentral)) idTCentral = ConstantesAppServicio.ParametroDefecto;
            if (string.IsNullOrEmpty(modoOpe)) modoOpe = ConstantesAppServicio.ParametroDefecto;
            if (string.IsNullOrEmpty(idTCombustible)) idTCombustible = ConstantesAppServicio.ParametroDefecto;

            //los generadores: "2" son parte de las centrales hidroelectricas, deben incluirse           
            idTCentral = idTCentral.Contains("4") ? "2," + idTCentral : idTCentral;

            int[] empresas = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] tipocentral = idTCentral.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] modos = modoOpe.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] tipocomb = idTCombustible.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] tipoOp = idTOperacion.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<EveHoraoperacionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHorasOrdenAPIS);
                listaVersion = GetDataSerializedPreviousVersion<List<EveHoraoperacionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHorasOrdenAPIS);
            }
            else
            {
                lista = this.ReporteHorasOrdenAPISDataReporte(fechaInicial, fechaFinal);
            }

            lista = lista.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi)).ToList();
            lista = lista.Where(x => idTCentral == ConstantesAppServicio.ParametroDefecto || tipocentral.Contains(x.Famcodi)).ToList();
            lista = lista.Where(x => modoOpe == ConstantesAppServicio.ParametroDefecto
                || (x.Famcodi == ConstantesHorasOperacion.IdTipoTermica && modos.Contains(x.Grupocodi.GetValueOrDefault(-1)))
                || (x.Famcodi != ConstantesHorasOperacion.IdTipoTermica && modos.Contains(x.Equicodi.GetValueOrDefault(-1)))).ToList();
            lista = lista.Where(x => idTCombustible == ConstantesAppServicio.ParametroDefecto || tipocomb.Contains(x.Fenergcodi)).ToList();
            lista = lista.Where(x => idTOperacion == ConstantesHorasOperacion.ParamTipoOperacionTodos || tipoOp.Contains(x.Subcausacodi.GetValueOrDefault(-1))).ToList();

            listaVersion = listaVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi)).ToList();
            listaVersion = listaVersion.Where(x => idTCentral == ConstantesAppServicio.ParametroDefecto || tipocentral.Contains(x.Famcodi)).ToList();
            listaVersion = listaVersion.Where(x => modoOpe == ConstantesAppServicio.ParametroDefecto
                || (x.Famcodi == ConstantesHorasOperacion.IdTipoTermica && modos.Contains(x.Grupocodi.GetValueOrDefault(-1)))
                || (x.Famcodi != ConstantesHorasOperacion.IdTipoTermica && modos.Contains(x.Equicodi.GetValueOrDefault(-1)))).ToList();
            listaVersion = listaVersion.Where(x => idTCombustible == ConstantesAppServicio.ParametroDefecto || tipocomb.Contains(x.Fenergcodi)).ToList();
            listaVersion = listaVersion.Where(x => idTOperacion == ConstantesHorasOperacion.ParamTipoOperacionTodos || tipoOp.Contains(x.Subcausacodi.GetValueOrDefault(-1))).ToList();

            //
            lista = lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.PadreNombre).ThenBy(x => x.Hophorini).ToList();
            listaVersion = listaVersion.OrderBy(x => x.Emprnomb).ThenBy(x => x.PadreNombre).ThenBy(x => x.Hophorini).ToList();
        }

        private void ReporteHorasOrdenAPISExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string modoOpe, string idTCentral, string idTCombustible, string idTOperacion, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<EveHoraoperacionDTO> lista, listaVersion;
            this.ReporteHorasOrdenAPISDataVersionada(idEmpresa, modoOpe, idTCentral, idTCombustible, idTOperacion, fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "HOP", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptHorasOrdenAPIS(ws, ConstantesHorasOperacion.TituloHojaHOP, false, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.11.	Hora de inicio y fin de las Indisponibilidades de las Unidades de Generación del SEIN y su respectivo motivo.
        #region REPORTE_HORA_INICIO_FIN_DISPONIBILIDAD

        private List<EveManttoDTO> ReporteHoraIndisponibilidadesDataReporte(DateTime fechaInicial, DateTime fechaFinal)
        {
            string tiposEquipo = ConstantesHorasOperacion.CodFamilias + "," + ConstantesHorasOperacion.CodFamiliasGeneradores;
            string tiposMantenimiento = ConstantesPR5ReportesServicio.EvenclaseEjecutado, tiposEmpresa = "-1", tiposMantto = "-1", indispo = "F", interrupcion = "-1", idEmpresa = "-1";

            //obtener la información de intervenciones Fuera de servicio y convertirlo a EvemanttoDTO
            List<InIntervencionDTO> listaInterv = FactorySic.GetInIntervencionRepository().ListarIntervencionesGrafico(tiposMantenimiento, fechaInicial, fechaFinal.AddDays(1), indispo,
                                                tiposEmpresa, idEmpresa, tiposEquipo, interrupcion, tiposMantto);

            var listaMantto = new List<EveManttoDTO>();
            foreach (var regIn in listaInterv)
            {
                var objMantto = IntervencionesAppServicio.ConvertirManto(regIn);
                objMantto.Evenindispo = "F/S";
                listaMantto.Add(objMantto);
            }

            return listaMantto;
        }

        /// <summary>
        /// Devuelve las listas a usar en el reporte Horas indisponibilidad
        /// </summary>
        /// <param name="empresas"></param>
        /// <param name="tipoCentral"></param>
        /// <param name="fechaI"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteHoraIndisponibilidadesDataVersionada(string empresas, string tipoCentral, DateTime fechaI, DateTime fechaFinal
            , string versionAnexoA, out List<EveManttoDTO> lista, out List<EveManttoDTO> listaVersion)
        {
            lista = new List<EveManttoDTO>();
            listaVersion = new List<EveManttoDTO>();

            empresas = string.IsNullOrEmpty(empresas) ? ConstantesAppServicio.ParametroDefecto : empresas;
            tipoCentral = string.IsNullOrEmpty(tipoCentral) ? ConstantesAppServicio.ParametroDefecto : tipoCentral;

            int[] empresas_ = empresas.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] famcodis = tipoCentral.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<EveManttoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHoraInicioFinIndisponibilidad);
                listaVersion = GetDataSerializedPreviousVersion<List<EveManttoDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHoraInicioFinIndisponibilidad);
            }
            else
            {
                lista = this.ReporteHoraIndisponibilidadesDataReporte(fechaI, fechaFinal);
            }

            lista = lista.Where(x => (empresas == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                                && (tipoCentral == ConstantesAppServicio.ParametroDefecto || famcodis.Contains(x.Famcodi))).ToList();
            listaVersion = listaVersion.Where(x => (empresas == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                                && (tipoCentral == ConstantesAppServicio.ParametroDefecto || famcodis.Contains(x.Famcodi))).ToList();

            lista = lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Evenini).ThenBy(x => x.Equiabrev).ToList();
            listaVersion = listaVersion.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Evenini).ThenBy(x => x.Equiabrev).ToList();
        }

        private void ReporteHoraIndisponibilidadesExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string empresas, string tipoCentral, DateTime fechaInicial, DateTime fechaFinal, string versionAnexoA)
        {
            List<EveManttoDTO> lista, listaVersion;
            this.ReporteHoraIndisponibilidadesDataVersionada(empresas, tipoCentral, fechaInicial, fechaFinal, versionAnexoA, out lista, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "INDISP", fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptExcelListadoHoraIndisponibilidades(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fechaInicial, fechaFinal, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.12.	Reserva Fría del sistema.
        #region REPORTE_RESERVA_FRIA_SISTEMA

        /// <summary>
        /// Reporte de Reserva Fria
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="tipoCombustible"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaTotal"></param>
        /// <param name="listaRFDetalle"></param>
        /// <param name="regCDespachoXDia"></param>
        /// <param name="listaGrafico"></param>
        /// <param name="graficoReficienteAnexoA"></param>
        /// <param name="graficoRfriaAnexoA"></param>
        public void ReporteReservaFriaDataVersionada(DateTime fechaInicial, DateTime fechaFinal, string idEmpresa, string tipoCombustible,
            string versionAnexoA, out List<MePtomedicionDTO> listaPto, out List<MeMedicion48DTO> listaTotal,
            out List<MeMedicion48DTO> listaRFDetalle, out CDespachoDiario regCDespachoXDia, out List<GraficoWeb> listaGrafico,
            out GraficoWeb graficoReficienteAnexoA, out GraficoWeb graficoRfriaAnexoA)
        {
            //solo combustible seleccionado
            List<int> listaFenergcodis = new List<int>();
            if (tipoCombustible == ConstantesAppServicio.ParametroDefecto)
            {
                listaFenergcodis = new List<int>() { 4, 10, 11, 3, 6, 5, 2, 7 };
            }
            else
            {
                List<int> listaTipoCombustible = tipoCombustible.Split(',').Select(x => int.Parse(x)).ToList();
                if (listaTipoCombustible.Contains(1)) //liquido
                    listaFenergcodis.AddRange(new List<int> { 4, 10, 11, 3 });
                if (listaTipoCombustible.Contains(2)) //sólido
                    listaFenergcodis.AddRange(new List<int> { 6, 5 });
                if (listaTipoCombustible.Contains(3)) //gas
                    listaFenergcodis.AddRange(new List<int> { 2 });
                if (listaTipoCombustible.Contains(4)) //biogas
                    listaFenergcodis.AddRange(new List<int> { 7 });
            }

            //Calcular reserva fría
            (new MigracionesAppServicio()).ListarReporteCDispatchAnexoA(ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto, fechaInicial, fechaFinal, idEmpresa
                                                            , out ResultadoCDespacho reporteRFriaOut, out regCDespachoXDia);

            listaPto = reporteRFriaOut.ListaPto.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica || x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico)
                            .OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equiabrev).ToList();

            //Solo reserva fria de los combustibles seleccionados
            List<MeMedicion48DTO> listaRFXFenerg = reporteRFriaOut.ListaRFXFenerg.OrderBy(x => x.Gruponomb).ToList();
            listaRFXFenerg = listaRFXFenerg.Where(x => listaFenergcodis.Contains(x.Fenergcodi)).ToList();
            List<int> listaPtomedicodiFenerg = listaRFXFenerg.Select(x => x.Ptomedicodi).Distinct().ToList();

            //solo integrantes del COES para ese día y que tenga combustible seleccionado
            List<int> listaPtomedicodiIntegrante = regCDespachoXDia.ListaPtoXDiaOC.Select(x => x.Ptomedicodi).Distinct().ToList();
            listaPto = listaPto.Where(x => listaPtomedicodiIntegrante.Contains(x.Ptomedicodi) && listaPtomedicodiFenerg.Contains(x.Ptomedicodi)).ToList();

            //reserva eficiente
            List<int> listaPtomedicodi = listaPto.Select(x => x.Ptomedicodi).Distinct().ToList();
            List<MeMedicion48DTO> listaREfiGasDetalle = new List<MeMedicion48DTO>();
            if (listaFenergcodis.Contains(2)) listaREfiGasDetalle = reporteRFriaOut.ListaREfiGasDetalle.Where(x => listaPtomedicodi.Contains(x.Ptomedicodi)).ToList();
            List<MeMedicion48DTO> listaREfiCarbonDetalle = new List<MeMedicion48DTO>();
            if (listaFenergcodis.Contains(5)) listaREfiCarbonDetalle = reporteRFriaOut.ListaREfiCarbonDetalle.Where(x => listaPtomedicodi.Contains(x.Ptomedicodi)).ToList();

            //Unidades con restriccion
            List<MeRfriaUnidadrestricDTO> listaUniRestr = GetByCriteriaMeRfriaUnidadrestrics(fechaInicial);
            ListarRFriaExcluyendoUnidadesRestric(listaPto, listaUniRestr, ref listaREfiGasDetalle);
            ListarRFriaExcluyendoUnidadesRestric(listaPto, listaUniRestr, ref listaREfiCarbonDetalle);
            ListarRFriaExcluyendoUnidadesRestric(listaPto, listaUniRestr, ref listaRFXFenerg);

            //volver a totalizar
            listaRFDetalle = new List<MeMedicion48DTO>();
            listaTotal = new List<MeMedicion48DTO>();
            foreach (var reg in listaPto)
            {
                var listaNoRfria = reg.ListaReservaFria.Where(x => x.TipoReservaFria != ConstantesPR5ReportesServicio.TipoReservaFriaRapida).ToList();

                //vover a calcular
                MeMedicion48DTO rfria = new MeMedicion48DTO() { TipoReservaFria = ConstantesPR5ReportesServicio.TipoReservaFriaRapida, Ptomedicodi = reg.Ptomedicodi, Medifecha = fechaInicial };
                UtilAnexoAPR5.SetMeditotalXLista(rfria, listaRFXFenerg.Where(x => x.Ptomedicodi == reg.Ptomedicodi).ToList());

                reg.ListaReservaFria = new List<MeMedicion48DTO>();
                reg.ListaReservaFria.Add(rfria);
                reg.ListaReservaFria.AddRange(listaNoRfria);

                listaRFDetalle.AddRange(reg.ListaReservaFria);
            }

            //vover a calcular
            MeMedicion48DTO regTotalRfriaTotal = new MeMedicion48DTO() { TipoReservaFria = ConstantesPR5ReportesServicio.TipoReservaFriaTotal };
            UtilAnexoAPR5.SetMeditotalXLista(regTotalRfriaTotal, listaRFDetalle.Where(x => x.TipoReservaFria == ConstantesPR5ReportesServicio.TipoReservaFriaTotal).ToList());

            MeMedicion48DTO regTotalRfriaRapida = new MeMedicion48DTO() { TipoReservaFria = ConstantesPR5ReportesServicio.TipoReservaFriaRapida };
            UtilAnexoAPR5.SetMeditotalXLista(regTotalRfriaRapida, listaRFDetalle.Where(x => x.TipoReservaFria == ConstantesPR5ReportesServicio.TipoReservaFriaRapida).ToList());

            MeMedicion48DTO regTotalRfriaMinima = new MeMedicion48DTO() { TipoReservaFria = ConstantesPR5ReportesServicio.TipoReservaFriaMinima };
            UtilAnexoAPR5.SetMeditotalXLista(regTotalRfriaMinima, listaRFDetalle.Where(x => x.TipoReservaFria == ConstantesPR5ReportesServicio.TipoReservaFriaMinima).ToList());

            MeMedicion48DTO regTotalRfriaIndisp = new MeMedicion48DTO() { TipoReservaFria = ConstantesPR5ReportesServicio.TipoReservaFriaIndisponibilidad };
            UtilAnexoAPR5.SetMeditotalXLista(regTotalRfriaIndisp, listaRFDetalle.Where(x => x.TipoReservaFria == ConstantesPR5ReportesServicio.TipoReservaFriaIndisponibilidad).ToList());

            listaTotal.Add(regTotalRfriaTotal);
            listaTotal.Add(regTotalRfriaRapida);
            listaTotal.Add(regTotalRfriaMinima);
            listaTotal.Add(regTotalRfriaIndisp);

            //graficos
            listaGrafico = ListarGraficoRFria(listaREfiGasDetalle, listaREfiCarbonDetalle, listaRFXFenerg);

            graficoReficienteAnexoA = GetGraficoReficienteAnexoARFria(listaREfiGasDetalle, listaREfiCarbonDetalle);
            graficoRfriaAnexoA = GetGraficoRfriaAnexoA(listaTotal);
        }

        private List<GraficoWeb> ListarGraficoRFria(List<MeMedicion48DTO> listaREfiGasDetalle, List<MeMedicion48DTO> listaREfiCarbonDetalle, List<MeMedicion48DTO> listaRFXFenerg)
        {
            List<GraficoWeb> l = new List<GraficoWeb>();

            //Reserva fría
            MeMedicion48DTO regLiquido = new MeMedicion48DTO() { NombreSerie = "LIQUIDO" };
            UtilAnexoAPR5.SetMeditotalXLista(regLiquido, listaRFXFenerg.Where(x => (new List<int> { 4, 10, 11, 3 }).Contains(x.Fenergcodi)).ToList());

            MeMedicion48DTO regSolido = new MeMedicion48DTO() { NombreSerie = "SÓLIDO" };
            UtilAnexoAPR5.SetMeditotalXLista(regSolido, listaRFXFenerg.Where(x => (new List<int> { 6, 5 }).Contains(x.Fenergcodi)).ToList());

            MeMedicion48DTO regGas = new MeMedicion48DTO() { NombreSerie = "GAS" };
            UtilAnexoAPR5.SetMeditotalXLista(regGas, listaRFXFenerg.Where(x => (new List<int> { 2 }).Contains(x.Fenergcodi)).ToList());

            MeMedicion48DTO regBiogas = new MeMedicion48DTO() { NombreSerie = "BIOGAS" };
            UtilAnexoAPR5.SetMeditotalXLista(regBiogas, listaRFXFenerg.Where(x => (new List<int> { 7 }).Contains(x.Fenergcodi)).ToList());

            l.Add(UtilAnexoAPR5.GetGraficoRFria("Reserva fría SEIN", null, null, new List<MeMedicion48DTO> { regLiquido, regSolido, regGas, regBiogas }));

            //Reserva eficiente gas
            MeMedicion48DTO regCamisea = new MeMedicion48DTO() { NombreSerie = "G.N. CAMISEA", ColorSerie = "#8EB4E3" };
            UtilAnexoAPR5.SetMeditotalXLista(regCamisea, listaREfiGasDetalle.Where(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural).ToList());

            MeMedicion48DTO regMalacas = new MeMedicion48DTO() { NombreSerie = "G.N. MALACAS", ColorSerie = "#FF4B4B" };
            UtilAnexoAPR5.SetMeditotalXLista(regMalacas, listaREfiGasDetalle.Where(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasMalacas).ToList());

            MeMedicion48DTO regAguaytia = new MeMedicion48DTO() { NombreSerie = "G.N. AGUAYTIA", ColorSerie = "#92D050" };
            UtilAnexoAPR5.SetMeditotalXLista(regAguaytia, listaREfiGasDetalle.Where(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasAguaytia).ToList());

            l.Add(UtilAnexoAPR5.GetGraficoRFria("Reserva eficiente de gas natural SEIN", null, null, new List<MeMedicion48DTO> { regCamisea, regMalacas, regAguaytia }));

            //Reserva eficiente carbon
            MeMedicion48DTO regCarbon = new MeMedicion48DTO() { NombreSerie = "Carbón", ColorSerie = "#696969" };
            UtilAnexoAPR5.SetMeditotalXLista(regCarbon, listaREfiCarbonDetalle);

            l.Add(UtilAnexoAPR5.GetGraficoRFria("Reserva eficiente de carbón SEIN", null, null, new List<MeMedicion48DTO> { regCarbon }));

            //Reserva fría por estado fisico
            l.Add(UtilAnexoAPR5.GetGraficoRFria("Reserva fría LIQUIDO", null, null, listaRFXFenerg.Where(x => (new List<int> { 4, 10, 11, 3 }).Contains(x.Fenergcodi) && x.Meditotal > 0).ToList()));
            l.Add(UtilAnexoAPR5.GetGraficoRFria("Reserva fría SÓLIDO", null, null, listaRFXFenerg.Where(x => (new List<int> { 6, 5 }).Contains(x.Fenergcodi)).ToList()));
            l.Add(UtilAnexoAPR5.GetGraficoRFria("Reserva fría GAS", null, null, listaRFXFenerg.Where(x => (new List<int> { 2 }).Contains(x.Fenergcodi) && x.Meditotal > 0).ToList()));
            l.Add(UtilAnexoAPR5.GetGraficoRFria("Reserva fría BIOGAS", null, null, listaRFXFenerg.Where(x => (new List<int> { 7 }).Contains(x.Fenergcodi)).ToList()));

            //Reserva fria de cada grupo despacho
            List<SiFuenteenergiaDTO> lFenerg = ListarFuenteEnergia();
            foreach (var grupoFenerg in listaRFXFenerg)
            {
                var objFenerg = lFenerg.Find(x => x.Fenergcodi == grupoFenerg.Fenergcodi);
                if (objFenerg != null)
                {
                    grupoFenerg.NombreSerie = objFenerg.Fenergnomb;
                    grupoFenerg.ColorSerie = objFenerg.Fenergcolor;
                }
            }
            foreach (var agrup in listaRFXFenerg.GroupBy(x => x.Emprnomb + " - " + x.Gruponomb).OrderBy(x => x.Key))
            {
                l.Add(UtilAnexoAPR5.GetGraficoRFria("Reserva fría - " + agrup.Key, null, null, agrup.ToList()));
            }

            return l;
        }

        private GraficoWeb GetGraficoReficienteAnexoARFria(List<MeMedicion48DTO> listaREfiGasDetalle, List<MeMedicion48DTO> listaREfiCarbonDetalle)
        {
            //Reserva eficiente gas
            MeMedicion48DTO regCamisea = new MeMedicion48DTO() { NombreSerie = "G.N. CAMISEA", ColorSerie = "#8EB4E3" };
            UtilAnexoAPR5.SetMeditotalXLista(regCamisea, listaREfiGasDetalle.Where(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasNatural).ToList());

            MeMedicion48DTO regMalacas = new MeMedicion48DTO() { NombreSerie = "G.N. MALACAS", ColorSerie = "#FF4B4B" };
            UtilAnexoAPR5.SetMeditotalXLista(regMalacas, listaREfiGasDetalle.Where(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasMalacas).ToList());

            MeMedicion48DTO regAguaytia = new MeMedicion48DTO() { NombreSerie = "G.N. AGUAYTIA", ColorSerie = "#92D050" };
            UtilAnexoAPR5.SetMeditotalXLista(regAguaytia, listaREfiGasDetalle.Where(x => x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoGasAguaytia).ToList());

            //Reserva eficiente carbon
            MeMedicion48DTO regCarbon = new MeMedicion48DTO() { NombreSerie = "Carbón", ColorSerie = "#696969" };
            UtilAnexoAPR5.SetMeditotalXLista(regCarbon, listaREfiCarbonDetalle);

            return UtilAnexoAPR5.GetGraficoRFria("RESERVA EFICIENTE DE GAS NATURAL Y CARBÓN", null, null, new List<MeMedicion48DTO> { regCamisea, regMalacas, regAguaytia, regCarbon });
        }

        private GraficoWeb GetGraficoRfriaAnexoA(List<MeMedicion48DTO> listaTotal)
        {
            var totalFfrapXPto = listaTotal.Where(x => x.TipoReservaFria == ConstantesPR5ReportesServicio.TipoReservaFriaRapida).First();
            var totalRftXPto = listaTotal.Where(x => x.TipoReservaFria == ConstantesPR5ReportesServicio.TipoReservaFriaTotal).First();
            var totalFfminXPto = listaTotal.Where(x => x.TipoReservaFria == ConstantesPR5ReportesServicio.TipoReservaFriaMinima).First();
            var totalRfindispXPto = listaTotal.Where(x => x.TipoReservaFria == ConstantesPR5ReportesServicio.TipoReservaFriaIndisponibilidad).First();

            var grafico = new GraficoWeb();
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesType = new List<string>();
            grafico.SeriesName = new List<string>();
            grafico.YAxixTitle = new List<string>();
            grafico.SerieDataS = new DatosSerie[4][];

            DateTime horas = DateTime.Today;
            for (int i = 0; i < 48; i++)
            {
                horas = horas.AddMinutes(30);
                grafico.SeriesName.Add(string.Format("{0:H:mm}", horas));
            }

            decimal? valor;
            RegistroSerie regSerie;
            List<DatosSerie> listadata;
            List<decimal> listaValor = new List<decimal>();
            for (int i = 0; i < 4; i++)
            {
                MeMedicion48DTO obj48XPto = new MeMedicion48DTO();
                string color = "";
                string type = "";
                string nombre = "";
                switch (i)
                {
                    case 0:
                        obj48XPto = totalFfrapXPto;
                        color = "#0000FF";
                        type = "column";
                        nombre = "Reserva fría";
                        break;
                    case 1:
                        obj48XPto = totalRftXPto;
                        color = "#ADD8E6";
                        type = "column";
                        nombre = "Reserva fría total";
                        break;
                    case 2:
                        obj48XPto = totalFfminXPto;
                        color = "#FF0000";
                        type = "line";
                        nombre = "Reserva fría mínima (PR-12)";
                        break;
                    case 3:
                        obj48XPto = totalRfindispXPto;
                        color = "#007800";
                        type = "line";
                        nombre = "Indisponibilidad";
                        break;
                }

                regSerie = new RegistroSerie();
                regSerie.Name = nombre;
                regSerie.Type = type;
                regSerie.Color = color;

                listadata = new List<DatosSerie>();
                for (int j = 1; j <= 48; j++)
                {
                    valor = (decimal?)obj48XPto.GetType().GetProperty(ConstantesAppServicio.CaracterH + j).GetValue(obj48XPto, null);
                    listadata.Add(new DatosSerie() { Y = valor });
                    if (valor != null) listaValor.Add(valor.Value);
                }
                regSerie.Data = listadata;
                grafico.Series.Add(regSerie);
            }

            grafico.TitleText = "RESERVA FRÍA E INDISPONIBILIDAD DE UNIDADES TÉRMICAS";
            grafico.YaxixTitle = "MW";
            grafico.XAxisCategories = new List<string>();
            grafico.SeriesType = new List<string>();
            grafico.SeriesYAxis = new List<int>();

            if (listaValor.Count() > 0)
            {
                grafico.YaxixMin = listaValor.Min(x => x);
                grafico.YaxixMax = listaValor.Max(x => x);
            }

            return grafico;
        }

        private void ListarRFriaExcluyendoUnidadesRestric(List<MePtomedicionDTO> listaPto, List<MeRfriaUnidadrestricDTO> listaUniRestr,
                                    ref List<MeMedicion48DTO> listaDetalle48)
        {
            //las unidades con restriccion se setea cero para esas medias horas
            foreach (var obj48 in listaDetalle48)
            {
                var objPto = listaPto.Find(x => x.Ptomedicodi == obj48.Ptomedicodi);
                if (objPto != null)
                {
                    //obtener restricciones del punto
                    var listaRestric = listaUniRestr.Where(x => x.Grupocodi == objPto.Grupocodi);
                    if (listaRestric.Any())
                    {
                        foreach (var objRestric in listaRestric)
                        {
                            int hIni = Util.GetPosicionHoraInicial48(objRestric.Urfriafechaini.Value)[0];
                            hIni = hIni < 1 ? 1 : hIni;
                            int hFin = Util.GetPosicionHoraFinal48(objRestric.Urfriafechafin.Value.AddSeconds(-1))[0];
                            hFin = hFin > 48 ? 48 : hFin;

                            for (int h = hIni; h <= hFin; h++)
                            {
                                obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + (h).ToString()).SetValue(obj48, 0.0m);
                            }
                        }
                    }
                }
            }

            //volver a calcular meditotal
            foreach (var regTotal in listaDetalle48)
            {
                decimal totalReg = 0;
                for (int h = 1; h <= 48; h++)
                {
                    decimal total = ((decimal?)regTotal.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(regTotal, null)).GetValueOrDefault(0);

                    totalReg += total;
                }

                regTotal.Meditotal = totalReg;
            }
        }

        private void ReporteReservaFriaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string tipoCombustible, string strfiltroRF, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MePtomedicionDTO> listaPto;
            List<MeMedicion48DTO> totalData, listaRFDetalle;
            this.ReporteReservaFriaDataVersionada(fecha1, fecha2, idEmpresa, tipoCombustible, versionAnexoA, out listaPto, out totalData,
                            out listaRFDetalle, out CDespachoDiario regCDespachoXDia, out List<GraficoWeb> listaGrafico,
                            out GraficoWeb graficoRFAnexoA, out GraficoWeb graficoRfriaAnexoA);

            List<int> listaFiltroRF = strfiltroRF.Split(',').Select(x => int.Parse(x)).ToList();

            foreach (var filtroRF in listaFiltroRF)
                this.ReporteReservaFriaExcelByParam(ref ws, xlPackage, pathLogo, filtroRF, fecha1, fecha2, regCDespachoXDia);
        }

        private void ReporteReservaFriaExcelByParam(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, int filtroRF, DateTime fecha1, DateTime fecha2
                                                , CDespachoDiario regCDespachoXDia)
        {
            string nameWS = "RESERVA_FRÍA";
            switch (filtroRF)
            {
                case -1:
                    nameWS = "RESERVA_FRÍA";
                    filtroRF = ConstantesPR5ReportesServicio.TipoReservaFriaRapida;
                    break;
                case ConstantesPR5ReportesServicio.TipoReservaFriaTotal:
                    nameWS = "RESERVA_FRÍA";
                    break;
                case ConstantesPR5ReportesServicio.TipoReservaFriaRapida:
                    nameWS = "RF_rápida";
                    break;
                case ConstantesPR5ReportesServicio.TipoReservaFriaMinima:
                    nameWS = "RF_mínima";
                    break;
                case ConstantesPR5ReportesServicio.TipoReservaFriaIndisponibilidad:
                    nameWS = "Indisponibilidad";
                    break;
            }

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, nameWS, fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptReservaFria(ws, fecha1, regCDespachoXDia, filtroRF);

            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.13.	Caudales en los principales afluentes a las Centrales Hidroeléctricas.
        #region REPORTE_CAUDALES_CENTRAL_HIDROELECTRICA

        /// <summary>
        /// Devuelve lista de encabezado de reporte
        /// </summary>
        /// <param name="reporcodi"></param>
        /// <param name="idsEmpresa"></param>
        /// <param name="idsTipoPtoMed"></param>
        /// <returns></returns>
        public List<MeReporptomedDTO> ListarEncabezadoMeReporptomeds(int reporcodi, string idsEmpresa, string idsTipoPtoMed)
        {
            return FactorySic.GetMeReporptomedRepository().ListarEncabezado(reporcodi, idsEmpresa, idsTipoPtoMed);
        }

        private void ReporteCaudalesCentralHidroelectricaDataReporte(int reporcodi, DateTime fechaIni, DateTime fechaFin, out List<MeReporptomedDTO> listaPtos, out List<MeMedicion24DTO> listaData)
        {
            //Cabecera MeReporte
            listaPtos = this.servFormatoRep.GetListaPuntoFromMeReporptomedByFecha(reporcodi, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fechaIni)
                            .OrderBy(x => x.Repptoorden).ToList();

            //Data MeReporte
            listaData = this.servFormatoRep.GetListaDataM24FromMeReporptomed(reporcodi, -1, fechaIni, fechaFin, 1, listaPtos);
        }

        /// <summary>
        /// Retorna la lista de datos a usar en el reporte caudales centrales hibdroeléctricas
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="idFamilia"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="listaPto"></param>
        /// <param name="lista"></param>
        /// <param name="listaPtoVersion"></param>
        /// <param name="listaVersion"></param>
        public void ReporteCaudalesCentralHidroelectricaDataVersionada(DateTime fechaInicial, DateTime fechaFinal, string idEmpresa, string idFamilia
            , string versionAnexoA, out List<MeReporptomedDTO> listaPto, out List<MeMedicion24DTO> lista, out List<MeReporptomedDTO> listaPtoVersion, out List<MeMedicion24DTO> listaVersion)
        {
            listaPto = new List<MeReporptomedDTO>();
            listaPtoVersion = new List<MeReporptomedDTO>();
            lista = new List<MeMedicion24DTO>();
            listaVersion = new List<MeMedicion24DTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idFamilia = string.IsNullOrEmpty(idFamilia) ? ConstantesAppServicio.ParametroDefecto : idFamilia;

            int[] empresas = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] familias = idFamilia.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion24DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCaudalesCentralHidroelectrica);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion24DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCaudalesCentralHidroelectrica);

                listaPtoVersion = GetDataSerializedVersion<List<MeReporptomedDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCaudalesCentralHidroelectricaPto);
                listaPto = GetDataSerializedPreviousVersion<List<MeReporptomedDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCaudalesCentralHidroelectricaPto);
            }
            else
            {
                ReporteCaudalesCentralHidroelectricaDataReporte(ConstantesPR5ReportesServicio.IdReporteCaudalesHidro, fechaInicial, fechaFinal, out listaPto, out lista);
            }

            listaPto = listaPto.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                        && (idFamilia == ConstantesAppServicio.ParametroDefecto || familias.Contains((int)x.Famcodi))).ToList();
            listaPtoVersion = listaPtoVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas.Contains(x.Emprcodi))
                                        && (idFamilia == ConstantesAppServicio.ParametroDefecto || familias.Contains((int)x.Famcodi))).ToList();

            listaPto = listaPto.OrderBy(x => x.Emprnomb).ThenBy(x => x.Repptoorden).ToList();
        }

        private void ReporteCaudalesCentralHidroelectricaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string idFamilia, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeReporptomedDTO> listaPto, listaPtoVersion;
            List<MeMedicion24DTO> lista, listaVersion;
            this.ReporteCaudalesCentralHidroelectricaDataVersionada(fecha1, fecha2, idEmpresa, idFamilia, versionAnexoA, out listaPto, out lista, out listaPtoVersion, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "PRINCIP_CAUDALES", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptExcelListadoCaudalesCentralHidroelectrica(ws, listaPto, fecha1, fecha1, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.14.	Volúmenes horarios y caudales horarios de descarga de los embalses asociados a las Centrales Hidroeléctricas.
        #region REPORTE_HORARIOS_CAUDAL_VOLUMEN_CENTRAL_HIDROELECTRICA

        /// <summary>
        /// ReporteHorariosVolumenEmbalseCentralHidroelectricaDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="listaPto"></param>
        /// <param name="lista"></param>
        /// <param name="listaPtoVersion"></param>
        /// <param name="listaVersion"></param>
        public void ReporteHorariosVolumenEmbalseCentralHidroelectricaDataVersionada(DateTime fechaInicial, DateTime fechaFinal, string idEmpresa
          , string versionAnexoA, out List<MeReporptomedDTO> listaPto, out List<MeMedicion24DTO> lista, out List<MeReporptomedDTO> listaPtoVersion, out List<MeMedicion24DTO> listaVersion)
        {
            listaPto = new List<MeReporptomedDTO>();
            listaPtoVersion = new List<MeReporptomedDTO>();
            lista = new List<MeMedicion24DTO>();
            listaVersion = new List<MeMedicion24DTO>();

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion24DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectrica);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion24DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectrica);

                listaPtoVersion = GetDataSerializedVersion<List<MeReporptomedDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectricaPto);
                listaPto = GetDataSerializedPreviousVersion<List<MeReporptomedDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectricaPto);
            }
            else
            {
                ReporteCaudalesCentralHidroelectricaDataReporte(ConstantesPR5ReportesServicio.IdReporteVolumenHorario, fechaInicial, fechaFinal, out listaPto, out lista);
            }

            listaPto = listaPto.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();
        }

        /// <summary>
        /// ReporteDescargaLagunaDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteDescargaLagunaDataVersionada(string idEmpresa, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<MeMedicionxintervaloDTO> lista, out List<MeMedicionxintervaloDTO> listaVersion)
        {
            lista = new List<MeMedicionxintervaloDTO>();
            listaVersion = new List<MeMedicionxintervaloDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectricaDescarga);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectricaDescarga);
            }
            else
            {
                lista = this.servHidrologia.ListaMedIntervaloDescargaVertPag(ConstantesPR5ReportesServicio.IdFormatoDescarga, idEmpresa, fechaInicial, fechaFinal, 1, 1000);
            }

            lista = lista.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
            listaVersion = listaVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
        }

        private void VolumenCentralHidroelectricaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeReporptomedDTO> listaPto, listaPtoVersion;
            List<MeMedicion24DTO> data, dataVersion;
            this.ReporteHorariosVolumenEmbalseCentralHidroelectricaDataVersionada(fecha1, fecha2, idEmpresa, versionAnexoA, out listaPto, out data, out listaPtoVersion, out dataVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "PRINCIP_VOLÚMENES", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptVolumenHorarioCentralesHidroelectrica(ws, fecha1, fecha2, listaPto, listaPtoVersion, data, dataVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        private void DescargaLagunaCentralHidroelectricaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            //Descarga de lagunas
            List<MeMedicionxintervaloDTO> lista, listaVersion;
            this.ReporteDescargaLagunaDataVersionada(idEmpresa, fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            string nameWS = "DESCARGA_LAGUNAS";
            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, nameWS, fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptDescargaLagunasCentralesHidroelectrica(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, "Descarga de lagunas", fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.15.	Vertimientos en los embalses y/o presas en período y volumen.
        #region REPORTE_VERTIMIENTOS_PERIODO_VOLUMEN

        /// <summary>
        /// ReporteVertimientosPeriodoVolumenDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteVertimientosPeriodoVolumenDataVersionada(string idEmpresa, DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<MeMedicionxintervaloDTO> lista, out List<MeMedicionxintervaloDTO> listaVersion)
        {
            lista = new List<MeMedicionxintervaloDTO>();
            listaVersion = new List<MeMedicionxintervaloDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteVertimientosPeriodoVolumen);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteVertimientosPeriodoVolumen);
            }
            else
            {
                lista = this.servHidrologia.ListaMedIntervaloDescargaVertPag(ConstantesPR5ReportesServicio.IdFormatoVertimiento, idEmpresa, fechaInicial, fechaFinal, 1, 1000);
            }

            lista = lista.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();
        }

        private void ReporteVertimientosPeriodoVolumenExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicionxintervaloDTO> lista, listaVersion;
            this.ReporteVertimientosPeriodoVolumenDataVersionada(idEmpresa, fecha1, fecha1, versionAnexoA, out lista, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "VERTIMIENTO_EMBALSES", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptDescargaLagunasCentralesHidroelectrica(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, "Vertimiento de embalses", fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.16.	Volúmenes o cantidad de combustible almacenado a las 24:00 h de las Centrales Térmicas.
        #region REPORTE_ListarReporteCantidadCombustibleCentralTermicaHtml

        /// <summary>
        /// ReporteCantidadCombustibleCentralTermicaDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="idTipoComb"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteCantidadCombustibleCentralTermicaDataVersionada(string idEmpresa, string idCentral, string idTipoComb, DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<MeMedicionxintervaloDTO> lista, out List<MeMedicionxintervaloDTO> listaVersion)
        {
            lista = new List<MeMedicionxintervaloDTO>();
            listaVersion = new List<MeMedicionxintervaloDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idCentral = string.IsNullOrEmpty(idCentral) ? ConstantesAppServicio.ParametroDefecto : idCentral;
            idTipoComb = string.IsNullOrEmpty(idTipoComb) ? ConstantesAppServicio.ParametroDefecto : idTipoComb;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] centrales = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] tipocombus = idTipoComb.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCantidadCombustibleCentralTermica);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCantidadCombustibleCentralTermica);
            }
            else
            {
                lista = this.GetListarCantidadCombustibleCentralTermica(idEmpresa, idCentral, idTipoComb, fechaInicial, fechaFinal);
            }

            lista = lista.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                    && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))
                                    && (idTipoComb == ConstantesAppServicio.ParametroDefecto || tipocombus.Contains(x.Fenergcodi))).ToList();
            listaVersion = listaVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                    && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))
                                    && (idTipoComb == ConstantesAppServicio.ParametroDefecto || tipocombus.Contains(x.Fenergcodi))).ToList();
        }

        private void ReporteCantidadCombustibleCentralTermicaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string idCentral, string idTipoComb, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicionxintervaloDTO> lista, listaVersion;
            this.ReporteCantidadCombustibleCentralTermicaDataVersionada(idEmpresa, idCentral, idTipoComb, fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            int nfilIni = 0, ncolIni = 0, nfilFin = 0;

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "STOCK_COMB", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptCantidadCombustibleCentralTermica(ws, ref nfilIni, ref ncolIni, ref nfilFin, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.17.	Volúmenes o cantidad diaria de combustible consumido (asociado a la generación) por cada Unidad de Generación termoeléctrica.
        #region REPORTE_COMBUSTIBLE_CONSUMIDO_UNIDAD_TERMOELECTRICA

        private List<MeMedicionxintervaloDTO> ReporteCombustibleConsumidoUnidadTermoelectricaDataReporte(DateTime fechaInicial, DateTime fechaFinal, string idEmpresa)
        {
            List<MeMedicionxintervaloDTO> l = servStockCombustible.ListaMedxIntervConsumo(ConstantesStockCombustibles.LectCodiConsumo, ConstantesStockCombustibles.Origlectcodi, idEmpresa, fechaInicial, fechaFinal, "1,2,3", null, "-1");
            //return l.Where(x => x.Medinth1 != 0).ToList();
            return l.ToList();
        }

        /// <summary>
        /// ReporteCombustibleConsumidoUnidadTermoelectricaDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="tipoCombustible"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteCombustibleConsumidoUnidadTermoelectricaDataVersionada(string idEmpresa, string idCentral, string tipoCombustible, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<MeMedicionxintervaloDTO> lista, out List<MeMedicionxintervaloDTO> listaVersion)
        {
            lista = new List<MeMedicionxintervaloDTO>();
            listaVersion = new List<MeMedicionxintervaloDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idCentral = string.IsNullOrEmpty(idCentral) ? ConstantesAppServicio.ParametroDefecto : idCentral;
            tipoCombustible = string.IsNullOrEmpty(tipoCombustible) ? ConstantesAppServicio.ParametroDefecto : tipoCombustible;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] centrales = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] tipocombus = tipoCombustible.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCombustibleConsumidoUnidadTermoelectrica);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCombustibleConsumidoUnidadTermoelectrica);
            }
            else
            {
                lista = this.ReporteCombustibleConsumidoUnidadTermoelectricaDataReporte(fechaInicial, fechaFinal, idEmpresa);
            }

            lista = lista.Where(x => (tipoCombustible == ConstantesAppServicio.ParametroDefecto || tipocombus.Contains(x.Fenergcodi))
                                && (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
            listaVersion = listaVersion.Where(x => (tipoCombustible == ConstantesAppServicio.ParametroDefecto || tipocombus.Contains(x.Fenergcodi))
                                && (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
        }

        private void ReporteCombustibleConsumidoUnidadTermoelectricaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string idCentral, string tipoCombustible, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicionxintervaloDTO> lista, listaVersion;
            this.ReporteCombustibleConsumidoUnidadTermoelectricaDataVersionada(idEmpresa, idCentral, tipoCombustible, fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            int fil = ConstantesPR5ReportesServicio.FilaIniTituloDefault;
            int col = ConstantesPR5ReportesServicio.ColIniTituloDefault;

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "CONSUMO_COMB", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptCombustibleConsumidoUnidadTermoelectrica(ws, ref fil, ref col, "Reporte de Consumo de Combustibles", 1, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.18.	Volúmenes diarios de gas natural consumido (asociado a la generación) y presión horaria del gas natural al ingreso (en el lado de alta presión) de cada Unidad de Generación termoeléctrica a gas natural.
        #region REPORTE_CONSUMO_Y_PRESION_DIARIO_UNIDAD_TERMOELECTRICA

        private List<MeMedicionxintervaloDTO> ReporteConsumoDiarioUnidadTermoelectricaDataReporte(DateTime fechaInicial, DateTime fechaFinal, string idEmpresa, string idCentral, string idRecurso)
        {
            string strCentralInt = this.servStockCombustible.GeneraCodCentralIntegrante("1"); //COES
            string idsEstado = "1,2,3"; //liquido, solido, gaseoso

            string[] listaCentral = idCentral.Split(',');

            List<MeMedicionxintervaloDTO> listaReporte = this.servStockCombustible.ListaMedxIntervConsumo(ConstantesStockCombustibles.LectCodiConsumo, ConstantesStockCombustibles.Origlectcodi
                , idEmpresa, fechaInicial, fechaFinal, idsEstado, idRecurso, strCentralInt).ToList();

            if (idCentral != "-1")
            {
                listaReporte = listaReporte.Where(x => listaCentral.Contains(x.Equipadre.ToString())).ToList();
            }

            //return listaReporte.Where(x => x.Medinth1 != 0).ToList();
            return listaReporte.ToList();
        }

        /// <summary>
        /// ReporteConsumoDiarioUnidadTermoelectricaDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteConsumoDiarioUnidadTermoelectricaDataVersionada(string idEmpresa, string idCentral, DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<MeMedicionxintervaloDTO> lista, out List<MeMedicionxintervaloDTO> listaVersion)
        {
            lista = new List<MeMedicionxintervaloDTO>();
            listaVersion = new List<MeMedicionxintervaloDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idCentral = string.IsNullOrEmpty(idCentral) ? ConstantesAppServicio.ParametroDefecto : idCentral;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] centrales = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaConsumo);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicionxintervaloDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaConsumo);
            }
            else
            {
                lista = this.ReporteConsumoDiarioUnidadTermoelectricaDataReporte(fechaInicial, fechaFinal, idEmpresa, idCentral, ConstantesAppServicio.ParametroDefecto);
            }

            lista = lista.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas).ToList();

            lista = lista.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
            listaVersion = listaVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
        }

        private List<MeMedicion24DTO> ReportePresionDiarioUnidadTermoelectricaDataReporte(DateTime fechaInicial, DateTime fechaFinal, string idEmpresa, string idCentral)
        {
            string strCentralInt = this.servStockCombustible.GeneraCodCentralIntegrante("1"); //COES

            string[] listaCentral = idCentral.Split(',');

            List<MeMedicion24DTO> listaReporte = this.servStockCombustible.ListaM24PresionGas(ConstantesStockCombustibles.LectCodiPresionGas, ConstantesStockCombustibles.Origlectcodi
                , idEmpresa, fechaInicial, fechaFinal, ConstantesStockCombustibles.TipotomedicodiPresionGas, ConstantesStockCombustibles.TipoInfocodiPresion, strCentralInt);

            if (idCentral != "-1")
            {
                listaReporte = listaReporte.Where(x => listaCentral.Contains(x.Equipadre.ToString())).ToList();
            }

            return listaReporte;
        }

        private List<MeMedicion24DTO> ReporteTemperaturaUnidadTermoelectricaDataReporte(DateTime fechaInicial, DateTime fechaFinal, string idEmpresa, string idCentral)
        {
            string strCentralInt = this.servStockCombustible.GeneraCodCentralIntegrante("1"); //COES

            string[] listaCentral = idCentral.Split(',');

            List<MeMedicion24DTO> listaReporte = this.servStockCombustible.ListaM24TemperaturaAmbiente(ConstantesStockCombustibles.LectCodiPresionGas, ConstantesStockCombustibles.Origlectcodi, "-1", fechaInicial, fechaFinal, strCentralInt);

            if (idCentral != "-1")
            {
                listaReporte = listaReporte.Where(x => listaCentral.Contains(x.Equipadre.ToString())).ToList();
            }

            return listaReporte;
        }

        private List<MeMedicionxintervaloDTO> ReporteDisponiblidadGasData(DateTime fechaInicial, DateTime fechaFinal)
        {
            string idsAgente = "-1";
            string strCentralInt = "-1";
            int idYacimGas = 1;
            string idsYacimientos = "-1";
            var listaReporte = this.servStockCombustible.ListaMedxIntervDisponibilidad(ConstantesStockCombustibles.LectCodiDisponibilidad, ConstantesStockCombustibles.Origlectcodi,
                     idsAgente, fechaInicial, fechaFinal, strCentralInt, idYacimGas, idsYacimientos)
                .OrderBy(x => x.Medintfechaini).ThenBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ToList();

            return listaReporte;
        }

        /// <summary>
        /// ReportePresionDiarioUnidadTermoelectricaDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReportePresionDiarioUnidadTermoelectricaDataVersionada(string idEmpresa, string idCentral, DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<MeMedicion24DTO> lista, out List<MeMedicion24DTO> listaVersion)
        {
            lista = new List<MeMedicion24DTO>();
            listaVersion = new List<MeMedicion24DTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idCentral = string.IsNullOrEmpty(idCentral) ? ConstantesAppServicio.ParametroDefecto : idCentral;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] centrales = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion24DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaPresion);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion24DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaPresion);
            }
            else
            {
                lista = this.ReportePresionDiarioUnidadTermoelectricaDataReporte(fechaInicial, fechaFinal, idEmpresa, idCentral);
            }

            lista = lista.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
            listaVersion = listaVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
        }

        /// <summary>
        /// ReporteTemperaturaUnidadTermoelectricaDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteTemperaturaUnidadTermoelectricaDataVersionada(string idEmpresa, string idCentral, DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<MeMedicion24DTO> lista, out List<MeMedicion24DTO> listaVersion)
        {
            lista = new List<MeMedicion24DTO>();
            listaVersion = new List<MeMedicion24DTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;
            idCentral = string.IsNullOrEmpty(idCentral) ? ConstantesAppServicio.ParametroDefecto : idCentral;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();
            int[] centrales = idCentral.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion24DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaTemperatura);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion24DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaTemperatura);
            }
            else
            {
                lista = this.ReporteTemperaturaUnidadTermoelectricaDataReporte(fechaInicial, fechaFinal, idEmpresa, idCentral);
            }

            lista = lista.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
            listaVersion = listaVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi))
                                && (idCentral == ConstantesAppServicio.ParametroDefecto || centrales.Contains(x.Equipadre))).ToList();
        }

        private void ReporteGasNaturalUnidadTermoelectricaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa,
                                string idCentral, string idRecurso, int parametro, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            int fil = ConstantesPR5ReportesServicio.FilaIniTituloDefault;
            int col = ConstantesPR5ReportesServicio.ColIniTituloDefault;

            switch (parametro)
            {
                case 1:
                    List<MeMedicion24DTO> listaP, listaPVersion;
                    this.ReportePresionDiarioUnidadTermoelectricaDataVersionada(idEmpresa, idCentral, fecha1, fecha2, versionAnexoA, out listaP, out listaPVersion);

                    UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "PRESIÓN_GAS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                    UtilAnexoAPR5.ConfiguracionHojaExcelPresTemp(ws, fecha1, fecha2, ref fil, ref col, listaP, 1);
                    UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                    break;
                case 2:
                    List<MeMedicion24DTO> listaT, listaTVersion;
                    this.ReporteTemperaturaUnidadTermoelectricaDataVersionada(idEmpresa, idCentral, fecha1, fecha2, versionAnexoA, out listaT, out listaTVersion);

                    UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "TEMP_AMB", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                    UtilAnexoAPR5.ConfiguracionHojaExcelPresTemp(ws, fecha1, fecha2, ref fil, ref col, listaT, 2);
                    UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                    break;
                case 3:
                    List<MeMedicionxintervaloDTO> listaC, listaCVersion;
                    this.ReporteConsumoDiarioUnidadTermoelectricaDataVersionada(idEmpresa, idCentral, fecha1, fecha2, versionAnexoA, out listaC, out listaCVersion);

                    UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "CONSUMO_GAS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                    UtilAnexoAPR5.GeneraRptCombustibleConsumidoUnidadTermoelectrica(ws, ref fil, ref col, "Reporte de Consumo de Gas Natural", 2, fecha1, fecha2, listaC, listaCVersion);
                    UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                    break;
                case 4:
                    List<MeMedicionxintervaloDTO> listaD = ReporteDisponiblidadGasData(fecha1, fecha2);

                    UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "DISPONIBILIDAD_GAS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                    UtilAnexoAPR5.GeneraRptDisponibilidadGasUnidadTermoelectrica(ws, ref fil, ref col, "Disponibilidad de Gas Natural de las Centrales Termoeléctricas", fecha1, fecha2, listaD);
                    UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                    break;
            }
        }

        #endregion

        // 3.13.2.19.	Reporte cada 30 minutos de la fuente de energía primaria de las unidades RER solar, geotérmica y biomasa. En caso de las Centrales Eólicas, la velocidad del viento registrada cada 30 minutos.
        #region REPORTE_REGISTRO_ENERGIA_30_UNIDADES

        private List<MeMedicion48DTO> ReporteRegistroEnergia30UnidadesDataReporte(DateTime fechaIni, DateTime fechaFin)
        {
            int lectcodi = ConstantesPR5ReportesServicio.LectcodiFuenteEnergiaPrimaria;
            List<MeMedicion48DTO> listaData = FactorySic.GetMeMedicion48Repository().ListarMeMedicion48ByFiltro(lectcodi.ToString(), fechaIni, fechaFin, "-1");

            return listaData;
        }

        /// <summary>
        /// ReporteRegistroEnergia30UnidadesDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaPtoVersion"></param>
        public void ReporteRegistroEnergia30UnidadesDataVersionada(string idEmpresa, DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion, out List<MePtomedicionDTO> listaPto, out List<MePtomedicionDTO> listaPtoVersion)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();
            listaPto = new List<MePtomedicionDTO>();
            listaPtoVersion = new List<MePtomedicionDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRegistroEnergiaPrimaria30Unidades);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRegistroEnergiaPrimaria30Unidades);

                listaPto = GetDataSerializedVersion<List<MePtomedicionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRegistroEnergiaPrimaria30UnidadesPto);
                listaPtoVersion = GetDataSerializedPreviousVersion<List<MePtomedicionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRegistroEnergiaPrimaria30UnidadesPto);
            }
            else
            {
                lista = this.ReporteRegistroEnergia30UnidadesDataReporte(fechaInicial, fechaFinal);
                listaPto = this.ListarPtoEnergiaPrimaria(fechaInicial, fechaFinal);
            }

            lista = lista.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();
            listaVersion = listaVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();

            listaPto = listaPto.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.Value)).ToList();
            listaPtoVersion = listaPtoVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.Value)).ToList();
        }

        private void ReporteRegistroEnergia30UnidadesExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, bool flagVisiblePtomedicodi, string idEmpresa, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            List<MePtomedicionDTO> listaPto, listaPtoVersion;
            this.ReporteRegistroEnergia30UnidadesDataVersionada(idEmpresa, fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out listaPto, out listaPtoVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "ENERGÍA_PRIMARIA", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooter1);
            UtilAnexoAPR5.GeneraRptRegistroEnergia30Unidades(ws, "FUENTE DE ENERGÍA PRIMARIA DE LAS UNIDADES RER", 4, 1, flagVisiblePtomedicodi, fecha1, fecha2, lista, listaVersion, listaPto);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooter1);
        }

        #endregion

        // 3.13.2.20.	En caso sea una Central de Cogeneración Calificada, deberá remitir información sobre la producción del Calor Útil de sus Unidades de Generación o el Calor Útil recibido del proceso industrial asociado, en MW
        #region REPORTE_CALOR_UTIL_GENERACION_PROCESO

        /// <summary>
        /// Listar empresas para cogeneracion
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaCoGeneracion(DateTime fechaPeriodo)
        {
            var listaEmp = this.ListarAllGrupoCoGeneracion(fechaPeriodo)
                .GroupBy(x => new { x.Emprcodi, x.Emprnomb })
                .Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Emprcodi.Value, Emprnomb = x.Key.Emprnomb }).OrderBy(x => x.Emprnomb).ToList();
            return listaEmp;
        }

        /// <summary>
        /// Listar grupos de centrales por empresas para cogeneracion
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarGrupocentralXEmpresaCoGeneracion(string idEmpresa)
        {
            int[] empresasParam = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            var listaGrupo = this.ListarAllGrupoCoGeneracion(DateTime.Now.Date)
                .GroupBy(x => new { x.Emprcodi, x.Emprnomb, x.Grupopadre, x.Central })
                .Select(x => new PrGrupoDTO() { Emprcodi = x.Key.Emprcodi.Value, Emprnomb = x.Key.Emprnomb, Grupopadre = x.Key.Grupopadre, Central = x.Key.Central }).ToList();
            return listaGrupo.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresasParam.Contains(x.Emprcodi.Value))).ToList();
        }

        /// <summary>
        /// Listar los puntos Calor Util
        /// </summary>
        /// <returns></returns>
        public List<MePtomedicionDTO> ListarPtoCalorUtil(DateTime fechaIni, DateTime fechaFin)
        {
            int tptomedicodi = ConstantesTipoPuntoMedicion.TptomedicodiCalorUtilRecibidoProceso;
            int tptomedicodi2 = ConstantesTipoPuntoMedicion.TptomedicionCalorUtilGeneracion;
            int tptomedicodi3 = ConstantesTipoPuntoMedicion.TptomedicodiPotActivaCogeneracion;
            List<MePtomedicionDTO> l = FactorySic.GetMePtomedicionRepository().ListarPtoMedicionByOriglectcodiAndFormato(ConstantesPR5ReportesServicio.OriglectcodiFuenteEnergiaPrimaria, ConstantesPR5ReportesServicio.FormatcodiCalorUtil, fechaIni, fechaFin);
            l = l.Where(x => x.Hojaptoactivo == 1).ToList();
            l = l.Where(x => x.Tipoptomedicodi == tptomedicodi || x.Tipoptomedicodi == tptomedicodi2 || x.Tipoptomedicodi == tptomedicodi3).ToList();

            return l;
        }

        private List<MeMedicion48DTO> ReporteCalorUtilGeneracionProcesoDataReporte(DateTime fechaInicio, DateTime fechaFin, out List<MePtomedicionDTO> listaPto)
        {
            //lista grupo
            List<PrGrupoDTO> listaAllGrupo = ListarGrupoValido();

            //puntos de medicion activos de calor util
            List<MePtomedicionDTO> listaPtoBD = ListarPtoCalorUtil(fechaInicio, fechaFin);

            //extranet calor util
            int lectcodi = ConstantesHard.LectCodiCalorUtil;
            int tptomedicodi = ConstantesTipoPuntoMedicion.TptomedicodiCalorUtilRecibidoProceso;
            int tptomedicodi2 = ConstantesTipoPuntoMedicion.TptomedicionCalorUtilGeneracion;
            int tptomedicodi3 = ConstantesTipoPuntoMedicion.TptomedicodiPotActivaCogeneracion;
            List<MeMedicion48DTO> listaData = FactorySic.GetMeMedicion48Repository().ListarMeMedicion48ByFiltro(lectcodi.ToString(), fechaInicio, fechaFin, "-1")
                                        .Where(x => x.Tipoptomedicodi == tptomedicodi || x.Tipoptomedicodi == tptomedicodi2 || x.Tipoptomedicodi == tptomedicodi3).ToList();

            //Obtener puntos para reporte
            List<MePtomedicionDTO> listaPtoDia = listaData.GroupBy(x => x.Ptomedicodi).Select(x => new MePtomedicionDTO()
            {
                Ptomedicodi = x.Key,
                Ptomedidesc = x.First().Ptomedidesc,
                Emprcodi = x.First().Emprcodi,
                Emprnomb = x.First().Emprnomb,
                Grupocodi = x.First().Grupocodi,
            }).ToList();

            List<MePtomedicionDTO> listaPtoUnido = new List<MePtomedicionDTO>();
            listaPtoUnido.AddRange(listaPtoBD);
            listaPtoUnido.AddRange(listaPtoDia);

            listaPto = new List<MePtomedicionDTO>();
            foreach (var x in listaPtoUnido.GroupBy(y => y.Ptomedicodi))
            {
                int grupoCentral = INDAppServicio.GrupocodiCentralFromListaGrupo(x.First().Grupocodi ?? 0, listaAllGrupo);
                PrGrupoDTO central = listaAllGrupo.Find(t => t.Grupocodi == grupoCentral);

                listaPto.Add(new MePtomedicionDTO()
                {
                    Ptomedicodi = x.Key,
                    Ptomedidesc = x.First().Ptomedidesc,
                    Emprcodi = x.First().Emprcodi,
                    Emprnomb = x.First().Emprnomb,
                    Grupocodi = x.First().Grupocodi,
                    Gruponomb = (central?.Gruponomb) ?? ""
                });

            }
            listaPto = listaPto.OrderBy(x => x.Emprnomb).ThenBy(x => x.Gruponomb).ThenBy(x => x.Ptomedidesc).ToList();

            //formatear data
            List<decimal> listaH;
            decimal? total, valorH;
            foreach (var reg in listaData)
            {
                listaH = new List<decimal>();
                total = 0;
                for (int h = 1; h <= 48; h++)
                {
                    valorH = (decimal?)reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(reg, null);
                    if (valorH != null)
                    {
                        listaH.Add(valorH.Value);
                    }
                }

                if (listaH.Count > 0)
                {
                    total = listaH.Sum(x => x);
                }

                reg.Meditotal = total;
            }

            return listaData;
        }

        /// <summary>
        /// ReporteCalorUtilGeneracionProcesoDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaPtoVersion"></param>
        public void ReporteCalorUtilGeneracionProcesoDataVersionada(string idEmpresa, DateTime fechaInicial, DateTime fechaFinal
             , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion, out List<MePtomedicionDTO> listaPto, out List<MePtomedicionDTO> listaPtoVersion)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();
            listaPto = new List<MePtomedicionDTO>();
            listaPtoVersion = new List<MePtomedicionDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCalorUtilGeneracionProceso);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCalorUtilGeneracionProceso);

                listaPto = GetDataSerializedVersion<List<MePtomedicionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCalorUtilGeneracionProcesoPto);
                listaPtoVersion = GetDataSerializedPreviousVersion<List<MePtomedicionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCalorUtilGeneracionProcesoPto);
            }
            else
            {
                lista = this.ReporteCalorUtilGeneracionProcesoDataReporte(fechaInicial, fechaFinal, out listaPto);
            }

            lista = lista.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();
            listaVersion = listaVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();

            listaPto = listaPto.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.Value)).ToList();
            listaPtoVersion = listaPtoVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.Value)).ToList();
        }

        private void ReporteCalorUtilGeneracionProcesoExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, bool flagVisiblePtomedicodi, string idEmpresa, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            List<MePtomedicionDTO> listaPto, listaPtoVersion;
            this.ReporteCalorUtilGeneracionProcesoDataVersionada(idEmpresa, fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out listaPto, out listaPtoVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "CALOR_ÚTIL", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooter1);
            UtilAnexoAPR5.GeneraRptCalorUtilGeneracionProceso(ws, "CALOR ÚTIL (MW)", 4, 1, flagVisiblePtomedicodi, fecha1, fecha2, lista, listaVersion, listaPto, listaPtoVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooter1);
        }

        #endregion

        #endregion

        #region SISTEMA DE TRANSMISIÓN

        // 3.13.2.21.	Registro cada 30 minutos del flujo (MW y MVAr) por las líneas de transmisión y transformadores de potencia definidos por el COES.
        #region REPORTE_REPORTE_PA_LINEAS_TRANSMISION

        /// <summary>
        /// ReporteFlujoPotenciaActivaTransmisionSEINDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idPotencia"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaPtoVersion"></param>
        public void ReporteFlujoPotenciaActivaTransmisionSEINDataVersionada(string idEmpresa, int idPotencia, DateTime fechaInicial, DateTime fechaFinal
             , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion, out List<MePtomedicionDTO> listaPto, out List<MePtomedicionDTO> listaPtoVersion)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();
            listaPto = new List<MePtomedicionDTO>();
            listaPtoVersion = new List<MePtomedicionDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            int tipoinf = (idPotencia == 1) ? ConstantesPR5ReportesServicio.TipoinfoMW : ConstantesPR5ReportesServicio.TipoinfoMVAR;

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReportePALineasTransmision);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReportePALineasTransmision);
            }
            else
            {
                listaPto = ObtenerPuntosMedicionReporte(ConstantesPR5ReportesServicio.ReporcodiFlujoLineaAnexoA, idPotencia);

                lista = ListarDataReporteM48FromCargaDatos(ConstantesPR5ReportesServicio.LectcodiFlujoPotencia, tipoinf,
                                        string.Join(",", listaPto.Select(x => x.Ptomedicodi)), fechaInicial, fechaFinal);

            }
            /*
            lista = lista.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();
            listaVersion = listaVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();

            listaPto = listaPto.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.GetValueOrDefault(-100)))).ToList();
            listaPtoVersion = listaPtoVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.GetValueOrDefault(-100)))).ToList();
            */

        }

        private List<MeMedicion48DTO> ListarDataReporteM48FromCargaDatos(int lectcodi, int tipoinfocodi, string ptomedicodis, DateTime fechaInicial, DateTime fechaFinal)
        {
            var lista = FactorySic.GetMeMedicion48Repository().ListarMeMedicion48ByFiltro(lectcodi.ToString(),
                             fechaInicial, fechaFinal, ptomedicodis, tipoinfocodi.ToString());

            foreach (var m48 in lista)
            {
                //formato texto
                m48.AreaOperativa = m48.AreaOperativa == null ? string.Empty : m48.AreaOperativa.Trim();
                m48.Subestacion = m48.Subestacion == null ? string.Empty : m48.Subestacion.Trim();
                m48.Equinomb = m48.Equinomb == null ? string.Empty : m48.Equinomb.Trim();
                m48.Emprnomb = m48.Emprnomb == null ? string.Empty : m48.Emprnomb.Trim();
                m48.Ptomedinomb = m48.Ptomedinomb == null ? "" : m48.Ptomedinomb;

                //calcular minimo, maximo, promedio
                decimal minimo = 0, maximo = 0, promedio = 0;
                decimal? valor;
                List<decimal> listaH = new List<decimal>();

                for (int h = 1; h <= 48; h++)
                {
                    valor = (decimal?)m48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(m48, null);
                    if (valor != null)
                    {
                        listaH.Add(valor.Value);
                    }
                }

                if (listaH.Count > 0)
                {
                    minimo = listaH.Min(x => x);
                    maximo = listaH.Max(x => x);
                    promedio = listaH.Average(x => x);
                }

                m48.Minimo = minimo;
                m48.Maximo = maximo;
                m48.Promedio = promedio;
            }

            return lista;
        }

        /// <summary>
        /// ListarEmpresaFromMeReporte
        /// </summary>
        /// <param name="reporcodi"></param>
        /// <param name="tipoinfocodi"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaFromMeReporte(int reporcodi, int tipoinfocodi)
        {
            var listaPto = ObtenerPuntosMedicionReporte(reporcodi, tipoinfocodi);
            return UtilAnexoAPR5.ListarEmpresaFromPto(listaPto);
        }

        private void ReporteFlujoPotenciaActivaTransmisionSEINExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, bool flagVisiblePtomedicodi, string idEmpresa, int idPotencia, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            this.ReporteFlujoPotenciaActivaTransmisionSEINDataVersionada(idEmpresa, idPotencia, fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out List<MePtomedicionDTO> listaPto, out List<MePtomedicionDTO> listaPtoVersion);

            string tipoinf = (idPotencia == 1) ? "ACTIVA" : "REACTIVA";
            string tipoinf_sheet = (idPotencia == 1) ? "FLUJOS" : "FLUJOS_REACTIVA";
            string tipoinfabrev = (idPotencia == 1) ? "MW" : "MVar";

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, tipoinf_sheet, fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptFlujoPotenciaActivaTransmisionSEIN(ws, "POTENCIA " + tipoinf + " LÍNEAS DE TRANSMISIÓN DEL SEIN (" + tipoinfabrev + ")",
                                        4, 1, flagVisiblePtomedicodi, fecha1, fecha2, lista, listaVersion, listaPto, listaPtoVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        #region REPORTE_INTERCONEXIONES

        /// <summary>
        /// ReporteInterconexionesSEINDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="listaData"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaGrafico"></param>
        public void ReporteInterconexionesSEINDataVersionada(DateTime fechaInicial, out List<MeMedicion48DTO> listaData, out List<MePtomedicionDTO> listaPto, out List<GraficoWeb> listaGrafico)
        {
            listaPto = new List<MePtomedicionDTO>();
            listaData = new List<MeMedicion48DTO>();
            listaGrafico = new List<GraficoWeb>();

            ListarDataYPuntoXInterconexion(ConstantesPR5ReportesServicio.IdReporteInterconexionCentroNorte, ConstantesPR5ReportesServicio.LectcodiFlujoPotencia, ConstantesPR5ReportesServicio.TipoinfoMW, true,
                                        fechaInicial, out List<MePtomedicionDTO> listaPtoCN, out List<MeMedicion48DTO> listaDataCN, out GraficoWeb graficoCN);
            ListarDataYPuntoXInterconexion(ConstantesPR5ReportesServicio.IdReporteInterconexionCentroSur, ConstantesPR5ReportesServicio.LectcodiFlujoPotencia, ConstantesPR5ReportesServicio.TipoinfoMW, true,
                                        fechaInicial, out List<MePtomedicionDTO> listaPtoCS, out List<MeMedicion48DTO> listaDataCS, out GraficoWeb graficoCS);
            ListarDataYPuntoXInterconexionSurOesteSurEste(ConstantesPR5ReportesServicio.IdReporteInterconexionSurOesteSurEste, ConstantesPR5ReportesServicio.LectcodiFlujoPotencia, ConstantesPR5ReportesServicio.TipoinfoMW,
                                        fechaInicial, out GraficoWeb graficoSESO);
            listaPto.AddRange(listaPtoCN);
            listaPto.AddRange(listaPtoCS);
            listaData.AddRange(listaDataCN);
            listaData.AddRange(listaDataCS);
            listaGrafico.Add(graficoCN);
            listaGrafico.Add(graficoCS);
            listaGrafico.Add(graficoSESO);
        }

        private void ListarDataYPuntoXInterconexion(int reporcodi, int lectcodi, int tipoinfocodi, bool flagAplicarValorAbs, DateTime fecha,
                        out List<MePtomedicionDTO> listaPto, out List<MeMedicion48DTO> listaData, out GraficoWeb grafico)
        {
            //puntos y data
            MeReporteDTO regRpt = GetByIdReporte(reporcodi);
            listaPto = ObtenerPuntosMedicionReporte(reporcodi, tipoinfocodi);
            listaData = ListarDataReporteM48FromCargaDatos(lectcodi, tipoinfocodi, string.Join(",", listaPto.Select(x => x.Ptomedicodi)), fecha, fecha);

            if (flagAplicarValorAbs)
            {
                foreach (var obj48 in listaData)
                {
                    //formatear data
                    for (int i = 1; i <= 48; i++)
                    {
                        var valorNum = ((decimal?)obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i)).GetValue(obj48, null));

                        if (valorNum.GetValueOrDefault(0) != 0)
                        {
                            obj48.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i)).SetValue(obj48, Math.Abs(valorNum.Value));
                        }
                    }

                }
            }

            //grafico
            grafico = UtilAnexoAPR5.GetGraficoInterconexionWord(regRpt.Repornombre, listaPto, listaData);

            //punto y data totalizada
            MePtomedicionDTO regPtoTotal = new MePtomedicionDTO() { Ptomedicodi = reporcodi * -1, Repptonomb = "TOTAL", Emprnomb = "" };
            MeMedicion48DTO reg48Total = new MeMedicion48DTO() { Ptomedicodi = regPtoTotal.Ptomedicodi, Medifecha = fecha };
            UtilAnexoAPR5.SetMeditotalXLista(reg48Total, listaData);

            //
            listaPto.Add(regPtoTotal);
            listaData.Add(reg48Total);

            foreach (var item in listaPto)
            {
                item.Ptomedidesc = regRpt.Repornombre;
            }
        }

        private void ListarDataYPuntoXInterconexionSurOesteSurEste(int reporcodi, int lectcodi, int tipoinfocodi, DateTime fecha,
                                            out GraficoWeb grafico)
        {
            //puntos y data
            MeReporteDTO regRpt = GetByIdReporte(reporcodi);
            List<MePtomedicionDTO> listaPto = ObtenerPuntosMedicionReporte(reporcodi, tipoinfocodi);
            List<MeMedicion48DTO> listaData = ListarDataReporteM48FromCargaDatos(lectcodi, tipoinfocodi, string.Join(",", listaPto.Select(x => x.Ptomedicodi)), fecha, fecha);


            //punto y data totalizada
            MePtomedicionDTO regPtoTotal = new MePtomedicionDTO() { Ptomedicodi = 0, Repptonomb = "TOTAL", Emprnomb = "" };
            MeMedicion48DTO reg48Total = new MeMedicion48DTO() { Ptomedicodi = regPtoTotal.Ptomedicodi, Medifecha = fecha };
            UtilAnexoAPR5.SetMeditotalXLista(reg48Total, listaData);

            //grafico
            grafico = UtilAnexoAPR5.GetGraficoInterconexionWord(regRpt.Repornombre, new List<MePtomedicionDTO>() { regPtoTotal }, new List<MeMedicion48DTO>() { reg48Total });
        }

        private void ReporteInterconexionesSEINExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, bool flagVisiblePtomedicodi, DateTime fecha1)
        {
            this.ReporteInterconexionesSEINDataVersionada(fecha1, out List<MeMedicion48DTO> listaData, out List<MePtomedicionDTO> listaPto, out List<GraficoWeb> listaGrafico);
            int totalNorte = listaPto.Count(x => x.Ptomedidesc.ToUpper().Contains("NORTE")) - 1;
            int totalSur = listaPto.Count(x => x.Ptomedidesc.ToUpper().Contains("SUR")) - 1;

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "INTERCONEXIONES", fecha1, fecha1, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptInterconexionesSEIN(ws, "INTERCONEXIÓN ENTRE SISTEMAS OPERATIVOS DEL SEIN", 4, 1, flagVisiblePtomedicodi, fecha1, fecha1, listaData, listaPto);
            int colFinCN = 3 + totalNorte - 1;
            int colIniCS = colFinCN + 2;
            int colFinCS = colIniCS + totalSur - 1;
            UtilAnexoAPR5.AgregarGraficoRptInterconexionesSEIN(ws, "graficoCN", "INTERCONEXIÓN ENTRE SISTEMAS OPERATIVOS \r\n CENTRO - NORTE",
                                                                2, 8, 55, 2, 7, 3, colFinCN);
            UtilAnexoAPR5.AgregarGraficoRptInterconexionesSEIN(ws, "graficoCS", "INTERCONEXIÓN ENTRE SISTEMAS OPERATIVOS \r\n CENTRO - SUR",
                                                               11, 8, 55, 2, 7, colIniCS, colFinCS);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.23.	Registro cada 30 minutos de la tensión de las Barras del SEIN definidas por el COES.
        #region REPORTE_TENSION_BARRAS_SEIN

        /// <summary>
        /// ReporteTensionBarrasSeinDataVersionada
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaPtoVersion"></param>
        public void ReporteTensionBarrasSeinDataVersionada(string idEmpresa, DateTime fechaInicial, DateTime fechaFinal
         , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion, out List<MePtomedicionDTO> listaPto, out List<MePtomedicionDTO> listaPtoVersion)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();
            listaPto = new List<MePtomedicionDTO>();
            listaPtoVersion = new List<MePtomedicionDTO>();

            if (string.IsNullOrEmpty(idEmpresa)) { idEmpresa = ConstantesAppServicio.ParametroDefecto; }

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            int tipoinf = ConstantesPR5ReportesServicio.TipoinfoKv;

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteTensionBarrasSEIN);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteTensionBarrasSEIN);

                listaPto = GetDataSerializedVersion<List<MePtomedicionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteTensionBarrasSEINPto);
                listaPtoVersion = GetDataSerializedPreviousVersion<List<MePtomedicionDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteTensionBarrasSEINPto);
            }
            else
            {
                listaPto = ObtenerPuntosMedicionReporte(ConstantesPR5ReportesServicio.ReporcodiTensionBarraAnexoA, ConstantesAppServicio.TipoinfocodiKv);

                lista = ListarDataReporteM48FromCargaDatos(ConstantesPR5ReportesServicio.LectcodiTensionKv, tipoinf,
                                string.Join(",", listaPto.Select(x => x.Ptomedicodi)), fechaInicial, fechaFinal);
            }
            /*
            lista = lista.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();
            listaVersion = listaVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).ToList();

            listaPto = listaPto.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.GetValueOrDefault(-100)))
                                        && (idSubEstacion == ConstantesAppServicio.ParametroDefecto || areas.Contains(x.Areacodi))).ToList();
            listaPtoVersion = listaPtoVersion.Where(x => (idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.GetValueOrDefault(-100)))
                                        && (idSubEstacion == ConstantesAppServicio.ParametroDefecto || areas.Contains(x.Areacodi))).ToList();
            */

        }

        private void ReporteTensionBarrasSeinExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, bool flagVisiblePtomedicodi, string idEmpresa, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            List<MePtomedicionDTO> listaPto, listaPtoVersion;
            this.ReporteTensionBarrasSeinDataVersionada(idEmpresa, fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out listaPto, out listaPtoVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "TENSION_BARRA", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptTensionBarrasSein(ws, "Tensión de las Barras del SEIN definidas por el COES",
                            4, 1, flagVisiblePtomedicodi, fecha1, fecha2, lista, listaVersion, listaPto, listaPtoVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.24.	Reporte de sobrecarga de equipos mayores a 100 kV. De presentarse sobrecarga en equipos menores a 100 kV hasta los 60 kV, que ocasione acciones correctivas en la Operación en Tiempo Real, se incluirá dicha sobrecarga en el reporte respectivo.
        #region REPORTE_SOBRECARGA_EQUIPO

        /// <summary>
        /// ReporteSobrecargaEquipoDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteSobrecargaEquipoDataVersionada(DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<EveIeodcuadroDTO> lista, out List<EveIeodcuadroDTO> listaVersion)
        {
            lista = new List<EveIeodcuadroDTO>();
            listaVersion = new List<EveIeodcuadroDTO>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteSobrecargaEquipos);
                listaVersion = GetDataSerializedPreviousVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteSobrecargaEquipos);
            }
            else
            {
                lista = ReporteOperacionesVariasDataReporte(fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.EvenclaseEjecutado, ConstantesPR5ReportesServicio.IdSubCausaCongestionesST, false);
                lista = lista.Where(x => x.Famcodi == Convert.ToInt32(ConstantesPR5ReportesServicio.FamcodiTransform2d)
                                    || x.Famcodi == Convert.ToInt32(ConstantesPR5ReportesServicio.FamcodiTransform3d)).ToList();
            }

            lista = lista.OrderBy(x => x.Ichorini).ThenBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Equiabrev).ToList();
        }

        private void ReporteSobrecargaEquipoExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<EveIeodcuadroDTO> lista, listaVersion;
            this.ReporteSobrecargaEquipoDataVersionada(fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "TENSION_100KV", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptSobreCargaEquipo(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.25.	Reporte de líneas desconectadas por Regulación de Tensión.
        #region REPORTE_LINEAS_DESCONECTAS_POR_TENSION

        /// <summary>
        /// ReporteLineasDesconectadasPorTensionDataVersionada
        /// </summary>
        /// <param name="empresa"></param>
        /// <param name="area"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteLineasDesconectadasPorTensionDataVersionada(string empresa, string area, DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<EveIeodcuadroDTO> lista, out List<EveIeodcuadroDTO> listaVersion)
        {
            lista = new List<EveIeodcuadroDTO>();
            listaVersion = new List<EveIeodcuadroDTO>();

            empresa = string.IsNullOrEmpty(empresa) ? ConstantesAppServicio.ParametroDefecto : empresa;
            area = string.IsNullOrEmpty(area) ? ConstantesAppServicio.ParametroDefecto : area;

            int[] empresas_ = empresa.Split(',').Select(x => int.Parse(x)).ToArray();
            string[] areas = area.Split(',').Select(x => x).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteLineasDesconectadasPorTension);
                listaVersion = GetDataSerializedPreviousVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteLineasDesconectadasPorTension);
            }
            else
            {
                lista = ReporteOperacionesVariasDataReporte(fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.EvenclaseEjecutado, ConstantesPR5ReportesServicio.IdSubCausaPorTension, false);
            }

            lista = lista.Where(x => empresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains((int)x.Emprcodi)).ToList();
            listaVersion = listaVersion.Where(x => empresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains((int)x.Emprcodi)).ToList();

            lista = lista.OrderBy(x => x.Ichorini).ThenBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Equiabrev).ToList();
        }

        private void ReporteLineasDesconectadasPorTensionExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string empresa, string area, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<EveIeodcuadroDTO> lista, listaVersion;
            this.ReporteLineasDesconectadasPorTensionDataVersionada(empresa, area, fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "DESCONEXIÓN_RT", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptLineasDesconectadasPorTension(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.26.	Reporte de Sistemas Aislados Temporales
        #region REPORTE_SISTEMAS_AISLADOS_TEMPORALES

        /// <summary>
        /// ReporteSistemasAisladosTemporalesDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="flagIncluirGps"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteSistemasAisladosTemporalesDataVersionada(DateTime fechaInicial, DateTime fechaFinal, bool flagIncluirGps
             , string versionAnexoA, out List<EveIeodcuadroDTO> lista, out List<EveIeodcuadroDTO> listaVersion)
        {
            lista = new List<EveIeodcuadroDTO>();
            listaVersion = new List<EveIeodcuadroDTO>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteSistemasAisladosTemporales);
                listaVersion = GetDataSerializedPreviousVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteSistemasAisladosTemporales);
            }
            else
            {
                lista = ReporteOperacionesVariasDataReporte(fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.EvenclaseEjecutado, ConstantesPR5ReportesServicio.IdSubCausaSistemasAislados, flagIncluirGps);
            }

            lista = lista.OrderBy(x => x.Ichorini).ThenBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Equiabrev).ToList();
        }

        private void ReporteSistemasAisladosTemporalesExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<EveIeodcuadroDTO> lista, listaVersion;
            this.ReporteSistemasAisladosTemporalesDataVersionada(fecha1, fecha2, false, versionAnexoA, out lista, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "AISLADOS_TEMP", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptSistemasAisladosTemporales(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        #endregion

        #region INFORMACIÓN DEL PRODUCTO

        // 3.13.2.27.	Reporte de las variaciones sostenidas y súbitas de frecuencia en el SEIN.
        #region REPORTE_VARIACIONES_SOSTENIDAS_SUBITAS

        /// <summary>
        /// ReporteVariacionesFrecuenciaSEINDataReporte
        /// </summary>
        /// <param name="gps"></param>
        /// <param name="dtFechaIni"></param>
        /// <param name="dtFechaFin"></param>
        /// <param name="listaGPS"></param>
        /// <returns></returns>
        public List<FIndicadorDTO> ReporteVariacionesFrecuenciaSEINDataReporte(string gps, DateTime dtFechaIni, DateTime dtFechaFin, out List<MeGpsDTO> listaGPS)
        {
            List<FIndicadorDTO> listaFinal = new List<FIndicadorDTO>();
            listaGPS = this.ListarGpsxFiltro(gps, true);

            for (DateTime f = dtFechaIni; f <= dtFechaFin; f = f.AddDays(1))
            {
                foreach (var reg in listaGPS)
                {
                    List<FLecturaDTO> dataLectura = ListarFrecuenciaXSegundo(reg.Gpscodi, f).ToList();

                    #region Transgresiones

                    string horaTransgrSostenida = string.Empty;
                    string indicValorTransgrSostenida = string.Empty;
                    int acumTransgrSostenida = 0;

                    string horaTransgrSubita = string.Empty;
                    string indicValorTransgrSubita = string.Empty;
                    int acumTransgrSubita = 0;

                    horaTransgrSostenida = this.servIndicador.Get_cadena_transgresionFrec(dtFechaIni.Date, ConstantesIndicador.DatoFechaHora, reg.Gpscodi, ConstantesIndicador.VariacionSostenida, out List<GenericoDTO> listaRangoHoraSostenida);
                    indicValorTransgrSostenida = this.servIndicador.Get_cadena_transgresionFrec(dtFechaIni.Date, ConstantesIndicador.DatoIndicValor, reg.Gpscodi, ConstantesIndicador.VariacionSostenida, out _);
                    acumTransgrSostenida = this.servIndicador.Get_fallaacumuladaFrec(dtFechaIni.Date, reg.Gpscodi, ConstantesIndicador.VariacionSostenida);
                    UtilAnexoAPR5.GetFrecuenciaXRangoYFecha(true, dataLectura, listaRangoHoraSostenida, out string horaMinSos, out string horaMaxSos, out string frecMinSos, out string frecMaxSos);

                    horaTransgrSubita = this.servIndicador.Get_cadena_transgresionFrec(dtFechaIni.Date, ConstantesIndicador.DatoFechaHora, reg.Gpscodi, ConstantesIndicador.VariacionSubita, out List<GenericoDTO> listaRangoHoraSubita);
                    indicValorTransgrSubita = this.servIndicador.Get_cadena_transgresionFrec(dtFechaIni.Date, ConstantesIndicador.DatoIndicValor, reg.Gpscodi, ConstantesIndicador.VariacionSubita, out _);
                    acumTransgrSubita = this.servIndicador.Get_fallaacumuladaFrec(dtFechaIni.Date, reg.Gpscodi, ConstantesIndicador.VariacionSubita);
                    UtilAnexoAPR5.GetFrecuenciaXRangoYFecha(false, dataLectura, listaRangoHoraSubita, out string horaMinSub, out string horaMaxSub, out string frecMinSub, out string frecMaxSub);

                    #endregion

                    #region Mínima y máxima

                    string horaMinima = string.Empty;
                    string valorMinima = string.Empty;
                    string horaMaxima = string.Empty;
                    string valorMaxima = string.Empty;

                    horaMinima = this.servIndicador.Get_cadena_transgresionFrec(dtFechaIni.Date, ConstantesIndicador.DatoFechaHora, reg.Gpscodi, ConstantesIndicador.FrecuenciaMinima, out List<GenericoDTO> listaRangoHora5);
                    valorMinima = this.servIndicador.Get_cadena_transgresionFrec(dtFechaIni.Date, ConstantesIndicador.DatoIndicValor, reg.Gpscodi, ConstantesIndicador.FrecuenciaMinima, out List<GenericoDTO> listaRangoHora6);

                    horaMaxima = this.servIndicador.Get_cadena_transgresionFrec(dtFechaIni.Date, ConstantesIndicador.DatoFechaHora, reg.Gpscodi, ConstantesIndicador.FrecuenciaMaxima, out List<GenericoDTO> listaRangoHora7);
                    valorMaxima = this.servIndicador.Get_cadena_transgresionFrec(dtFechaIni.Date, ConstantesIndicador.DatoIndicValor, reg.Gpscodi, ConstantesIndicador.FrecuenciaMaxima, out List<GenericoDTO> listaRangoHora8);

                    #endregion
                    
                    FIndicadorDTO regSostenida = new FIndicadorDTO();
                    regSostenida.Fechahora = f;
                    regSostenida.Gps = reg.Gpscodi;
                    regSostenida.Gpsnomb = reg.Nombre;
                    regSostenida.Indiccodi = ConstantesIndicador.VariacionSostenida;
                    regSostenida.HoraFrecMin = horaMinSos;
                    regSostenida.ValorFrecMinDesc = frecMinSos;
                    regSostenida.HoraFrecMax = horaMaxSos; 
                    regSostenida.ValorFrecMaxDesc = frecMaxSos;
                    regSostenida.HoraTransgr = horaTransgrSostenida;
                    regSostenida.IndicValorTransgr = indicValorTransgrSostenida;
                    regSostenida.AcumuladoTransgr = acumTransgrSostenida;

                    FIndicadorDTO regSubita = new FIndicadorDTO();
                    regSubita.Fechahora = f;
                    regSubita.Gps = reg.Gpscodi;
                    regSubita.Gpsnomb = reg.Nombre;
                    regSubita.Indiccodi = ConstantesIndicador.VariacionSubita;
                    regSubita.HoraFrecMin = horaMinSub;
                    regSubita.ValorFrecMinDesc = frecMinSub;
                    regSubita.HoraFrecMax = horaMaxSub; 
                    regSubita.ValorFrecMaxDesc = frecMaxSub;
                    regSubita.HoraTransgr = horaTransgrSubita;
                    regSubita.IndicValorTransgr = indicValorTransgrSubita;
                    regSubita.AcumuladoTransgr = acumTransgrSubita;

                    FIndicadorDTO regMinima = new FIndicadorDTO();
                    regMinima.Fechahora = f;
                    regMinima.Gps = reg.Gpscodi;
                    regMinima.Gpsnomb = reg.Nombre;
                    regMinima.Indiccodi = ConstantesIndicador.FrecuenciaMinima;
                    regMinima.HoraFrecMin = horaMinima?? string.Empty;
                    regMinima.ValorFrecMinDesc = valorMinima;

                    FIndicadorDTO regMaxima = new FIndicadorDTO();
                    regMaxima.Fechahora = f;
                    regMaxima.Gps = reg.Gpscodi;
                    regMaxima.Gpsnomb = reg.Nombre;
                    regMaxima.Indiccodi = ConstantesIndicador.FrecuenciaMaxima;
                    regMaxima.HoraFrecMax = horaMaxima ?? string.Empty;
                    regMaxima.ValorFrecMaxDesc = valorMaxima;

                    listaFinal.Add(regSostenida);
                    listaFinal.Add(regSubita);
                    listaFinal.Add(regMinima);
                    listaFinal.Add(regMaxima);
                }
            }

            return listaFinal;
        }

        /// <summary>
        /// ReporteVariacionesFrecuenciaSEINDataVersionada
        /// </summary>
        /// <param name="gps"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaGPS"></param>
        public void ReporteVariacionesFrecuenciaSEINDataVersionada(string gps, DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<FIndicadorDTO> lista, out List<FIndicadorDTO> listaVersion, out List<MeGpsDTO> listaGPS)
        {
            listaGPS = new List<MeGpsDTO>();
            lista = new List<FIndicadorDTO>();
            listaVersion = new List<FIndicadorDTO>();

            gps = string.IsNullOrEmpty(gps) ? ConstantesAppServicio.ParametroDefecto : gps;

            int[] _gps = gps.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<FIndicadorDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteVariacionesSostenidasSubitasGPS);
                listaVersion = GetDataSerializedPreviousVersion<List<FIndicadorDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteVariacionesSostenidasSubitasGPS);
            }
            else
            {
                lista = this.ReporteVariacionesFrecuenciaSEINDataReporte(gps, fechaInicial, fechaInicial, out listaGPS);
            }
        }

        private void ReporteVariacionesFrecuenciaSEINExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string gps, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<FIndicadorDTO> lista, listaVersion;
            this.ReporteVariacionesFrecuenciaSEINDataVersionada(gps, fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out List<MeGpsDTO> listaGPS);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "TRANSGRESIONES", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptVariacionesFrecuenciaSEIN(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, listaGPS);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        private FLecturaDTO[] ListarFrecuenciaXSegundo(int gps, DateTime dtFechaIni)
        {
            //data cada minuto
            List<FLecturaDTO> dataLectura = servLectura.GetByCriteriaFLecturas(gps, dtFechaIni, dtFechaIni);

            int total_minuto = 24 * 60;
            int c_total_segundos = 86400;

            FLecturaDTO[] arr_Frecuencia = new FLecturaDTO[c_total_segundos];
            int contador = 0;
            for (int k = 0; k < total_minuto; k++)
            {
                DateTime fechaHoraMinuto = dtFechaIni.AddMinutes(k);

                var objLecturaMin = dataLectura.Find(x => x.Fechahora == fechaHoraMinuto) ?? new FLecturaDTO();
                for (int i = 0; i < 60; i++) // Los 60 segundos
                {
                    var valorNum = ((decimal?)objLecturaMin.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i)).GetValue(objLecturaMin, null)).GetValueOrDefault(0);

                    arr_Frecuencia[contador] = new FLecturaDTO() { Fechahora = fechaHoraMinuto.AddSeconds(i), Frecuencia = valorNum };
                    contador++;
                }
            }

            return arr_Frecuencia;
        }

        private void GraficoVariacionesFrecuenciaSEINDataReporte(int gps, DateTime dtFechaIni, out List<FLecturaDTO> listaFrecRango,
                                            out List<FLecturaDTO> listaFrecDebajo, out List<FLecturaDTO> listaFrecEncima, out GraficoWeb grafico)
        {
            //Calculo Tiempo en que la frecuencia estuvo entre:
            listaFrecRango = new List<FLecturaDTO>();
            listaFrecDebajo = new List<FLecturaDTO>();
            listaFrecEncima = new List<FLecturaDTO>();

            FLecturaDTO[] arr_Frecuencia = ListarFrecuenciaXSegundo(gps, dtFechaIni);

            #region Valores temporales

            int c_total_segundos = 86400;
            int c_total_segundos_min = 32400;
            int c_total_segundos_med = 35999;
            int c_total_segundos_max = 18001;

            // Inicializamos Tramos y Umbrales
            FLecturaDTO[] arr_Tramo = new FLecturaDTO[13]; // Tramos de frecuencias (se usan las 12 primeras ocurrencias para el reporte y todas para la tira IEOD)
            FLecturaDTO[] arr_UmbralDisminuye = new FLecturaDTO[6];
            FLecturaDTO[] arr_UmbralAumenta = new FLecturaDTO[6];
            for (int i = 0; i < 13; i++) // Limpiamos Tramos
            {
                arr_Tramo[i] = new FLecturaDTO();
                arr_Tramo[i].ListaMaxima = new List<decimal>();
                arr_Tramo[i].ListaMedia = new List<decimal>();
                arr_Tramo[i].ListaMinima = new List<decimal>();
                arr_Tramo[i].Minima_Cont = 0; arr_Tramo[i].Media_Cont = 0; arr_Tramo[i].Maxima_Cont = 0;
                arr_Tramo[i].Minima_Porc = 0; arr_Tramo[i].Media_Porc = 0; arr_Tramo[i].Maxima_Porc = 0;
            }

            arr_Tramo[0].Linf = 60.5m; arr_Tramo[0].Lsup = 60.6m;
            arr_Tramo[1].Linf = 60.4m; arr_Tramo[1].Lsup = 60.5m;
            arr_Tramo[2].Linf = 60.3m; arr_Tramo[2].Lsup = 60.4m;
            arr_Tramo[3].Linf = 60.2m; arr_Tramo[3].Lsup = 60.3m;

            arr_Tramo[4].Linf = 60.1m; arr_Tramo[4].Lsup = 60.2m;
            arr_Tramo[5].Linf = 60.0m; arr_Tramo[5].Lsup = 60.1m;
            arr_Tramo[6].Linf = 59.9m; arr_Tramo[6].Lsup = 60.0m;
            arr_Tramo[7].Linf = 59.8m; arr_Tramo[7].Lsup = 59.9m;

            arr_Tramo[8].Linf = 59.7m; arr_Tramo[8].Lsup = 59.8m;
            arr_Tramo[9].Linf = 59.6m; arr_Tramo[9].Lsup = 59.7m;
            arr_Tramo[10].Linf = 59.5m; arr_Tramo[10].Lsup = 59.6m;
            arr_Tramo[11].Linf = 59.4m; arr_Tramo[11].Lsup = 59.5m;

            arr_Tramo[12].Linf = 0.0m; arr_Tramo[12].Lsup = 59.4m;
            arr_UmbralDisminuye[0] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralDisminuye[1] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralDisminuye[2] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralDisminuye[3] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralDisminuye[4] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralDisminuye[5] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralDisminuye[0].Umbral = 59.9m;
            arr_UmbralDisminuye[1].Umbral = 59.8m;
            arr_UmbralDisminuye[2].Umbral = 59.7m;
            arr_UmbralDisminuye[3].Umbral = 59.6m;
            arr_UmbralDisminuye[4].Umbral = 59.5m;
            arr_UmbralDisminuye[5].Umbral = 59.4m;

            arr_UmbralAumenta[0] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralAumenta[1] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralAumenta[2] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralAumenta[3] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralAumenta[4] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralAumenta[5] = new FLecturaDTO() { ListaMinima = new List<decimal>(), ListaMedia = new List<decimal>(), ListaMaxima = new List<decimal>() };
            arr_UmbralAumenta[0].Umbral = 60.6m;
            arr_UmbralAumenta[1].Umbral = 60.5m;
            arr_UmbralAumenta[2].Umbral = 60.4m;
            arr_UmbralAumenta[3].Umbral = 60.3m;
            arr_UmbralAumenta[4].Umbral = 60.2m;
            arr_UmbralAumenta[5].Umbral = 60.1m;

            List<FLecturaDTO> listaFLectPeriodoMaxima = new List<FLecturaDTO>();
            List<FLecturaDTO> listaFLectPeriodoMinima = new List<FLecturaDTO>();
            List<FLecturaDTO> listaFLectPeriodoMedia = new List<FLecturaDTO>();

            // Acumulamos los valores requeridos por tramos y por umbrales
            for (int i = 0; i < c_total_segundos; i++) // Barremos frecuencias
            {
                var objFrec = arr_Frecuencia[i];
                decimal ld_frecuencia = arr_Frecuencia[i].Frecuencia;
                decimal ld_frecuencia_sig = arr_Frecuencia[i].Frecuencia;
                if (i != c_total_segundos - 1)
                { ld_frecuencia_sig = arr_Frecuencia[i + 1].Frecuencia; }

                // Acumulamos para Mínima, Media y Máxima
                if ((0 <= i && i < 28800) || (i > 82800)) // Mínima (00:00:00 a 7:59:59 y 23:00:01 a 23:59:59)
                {
                    listaFLectPeriodoMinima.Add(objFrec);

                    for (int j = 0; j < 13; j++) // Acumulamos en cada rango
                    {
                        if ((arr_Tramo[j].Linf <= ld_frecuencia && ld_frecuencia < arr_Tramo[j].Lsup))
                            arr_Tramo[j].Minima_Cont++;
                    }
                    for (int j = 0; j < 6; j++) // Acumulamos para cada umbral
                    {
                        if ((ld_frecuencia >= arr_UmbralDisminuye[j].Umbral && ld_frecuencia_sig < arr_UmbralDisminuye[j].Umbral))
                        {
                            arr_UmbralDisminuye[j].Minima_Cont++;
                            arr_UmbralDisminuye[j].ListaMinima.Add(ld_frecuencia);
                        }

                        if ((ld_frecuencia >= arr_UmbralAumenta[j].Umbral && ld_frecuencia_sig < arr_UmbralAumenta[j].Umbral))
                        {
                            arr_UmbralAumenta[j].Minima_Cont++;
                            arr_UmbralAumenta[j].ListaMinima.Add(ld_frecuencia);
                        }
                    }
                }
                else
                   if ((28800 <= i && i <= 64800)) // Media (8:00:00 a 18:00:00)
                {
                    listaFLectPeriodoMedia.Add(objFrec);

                    for (int j = 0; j < 13; j++) // Acumulamos en cada rango
                    {
                        if ((arr_Tramo[j].Linf <= ld_frecuencia && ld_frecuencia < arr_Tramo[j].Lsup))
                            arr_Tramo[j].Media_Cont++;
                    }
                    for (int j = 0; j < 6; j++) // Acumulamos para cada umbral
                    {
                        if ((ld_frecuencia >= arr_UmbralDisminuye[j].Umbral && ld_frecuencia_sig < arr_UmbralDisminuye[j].Umbral))
                        {
                            arr_UmbralDisminuye[j].Media_Cont++;
                            arr_UmbralDisminuye[j].ListaMedia.Add(ld_frecuencia);
                        }

                        if ((ld_frecuencia >= arr_UmbralAumenta[j].Umbral && ld_frecuencia_sig < arr_UmbralAumenta[j].Umbral))
                        {
                            arr_UmbralAumenta[j].Media_Cont++;
                            arr_UmbralAumenta[j].ListaMedia.Add(ld_frecuencia);
                        }
                    }
                }
                else // Máxima (18:00:00 a 23:00:00)
                {
                    listaFLectPeriodoMaxima.Add(objFrec);

                    for (int j = 0; j < 13; j++) // Acumulamos en cada rango
                    {
                        if ((arr_Tramo[j].Linf <= ld_frecuencia && ld_frecuencia < arr_Tramo[j].Lsup))
                            arr_Tramo[j].Maxima_Cont++;
                    }
                    for (int j = 0; j < 6; j++) // Acumulamos para cada umbral
                    {
                        if ((ld_frecuencia >= arr_UmbralDisminuye[j].Umbral && ld_frecuencia_sig < arr_UmbralDisminuye[j].Umbral))
                        {
                            arr_UmbralDisminuye[j].Maxima_Cont++;
                            arr_UmbralDisminuye[j].ListaMaxima.Add(ld_frecuencia);
                        }

                        if ((ld_frecuencia >= arr_UmbralAumenta[j].Umbral && ld_frecuencia_sig < arr_UmbralAumenta[j].Umbral))
                        {
                            arr_UmbralAumenta[j].Maxima_Cont++;
                            arr_UmbralAumenta[j].ListaMaxima.Add(ld_frecuencia);
                        }
                    }
                }
            }

            for (int j = 0; j < 13; j++) // Calculamos porcentajes y XValores
            {
                arr_Tramo[j].Minima_Porc = Math.Round(arr_Tramo[j].Minima_Cont / c_total_segundos_min * 100.0m, 2);
                arr_Tramo[j].Media_Porc = Math.Round(arr_Tramo[j].Media_Cont / c_total_segundos_med * 100.0m, 2);
                arr_Tramo[j].Maxima_Porc = Math.Round(arr_Tramo[j].Maxima_Cont / c_total_segundos_max * 100.0m, 2);

                arr_Tramo[j].XValor = Math.Round((arr_Tramo[j].Linf + arr_Tramo[j].Lsup) / 2.0m, 2);  // XValor
            }

            // Consolidamos ocurrencias 4 a 7
            decimal ld_sum_Minima_Cont = 0.0m, ld_sum_Media_Cont = 0.0m, ld_sum_Maxima_Cont = 0.0m;
            decimal ld_sum_Minima_Porc = 0.0m, ld_sum_Media_Porc = 0.0m, ld_sum_Maxima_Porc = 0.0m;
            for (int j = 4; j <= 7; j++)
            {
                ld_sum_Minima_Cont += arr_Tramo[j].Minima_Cont;
                ld_sum_Media_Cont += arr_Tramo[j].Media_Cont;
                ld_sum_Maxima_Cont += arr_Tramo[j].Maxima_Cont;
                ld_sum_Minima_Porc += arr_Tramo[j].Minima_Porc;
                ld_sum_Media_Porc += arr_Tramo[j].Media_Porc;
                ld_sum_Maxima_Porc += arr_Tramo[j].Maxima_Porc;
            }

            // Verificamos si es necesario ajuste para que sume 100%
            decimal ld_total_Minima = 0.0m, ld_total_Media = 0.0m, ld_total_Maxima = 0.0m;
            for (int j = 0; j < 12; j++)
            {
                ld_total_Minima += arr_Tramo[j].Minima_Porc;
                ld_total_Media += arr_Tramo[j].Media_Porc;
                ld_total_Maxima += arr_Tramo[j].Maxima_Porc;
            }
            decimal ld_ajuste_Minima = Math.Round(100.0m - ld_total_Minima, 2);
            decimal ld_ajuste_Media = Math.Round(100.0m - ld_total_Media, 2);
            decimal ld_ajuste_Maxima = Math.Round(100.0m - ld_total_Maxima, 2);

            #endregion

            //Tiempo en que la frecuencia estuvo entre
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 60.6", TextoRangoFin = "60.5 >" });
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 60.5", TextoRangoFin = "60.4 >" });
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 60.4", TextoRangoFin = "60.3 >" });
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 60.3", TextoRangoFin = "60.2 >" });
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 60.2", TextoRangoFin = "59.8 >" });
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 59.8", TextoRangoFin = "59.7 >" });
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 59.7", TextoRangoFin = "59.6 >" });
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 59.6", TextoRangoFin = "59.5 >" });
            listaFrecRango.Add(new FLecturaDTO() { TextoRangoIni = "< 59.5", TextoRangoFin = "59.4 >" });
            for (int i = 0; i < 9; i++)
            {
                var objFrecRango = listaFrecRango[i];
                if (i <= 3)
                {
                    objFrecRango.TextoMin = Convert.ToString(arr_Tramo[i].Minima_Porc) + "%";
                    objFrecRango.TextoMed = Convert.ToString(arr_Tramo[i].Media_Porc) + "%";
                    objFrecRango.TextoMax = Convert.ToString(arr_Tramo[i].Maxima_Porc) + "%";
                }
                else
                     if (i >= 5)
                {
                    objFrecRango.TextoMin = Convert.ToString(arr_Tramo[i + 3].Minima_Porc) + "%";
                    objFrecRango.TextoMed = Convert.ToString(arr_Tramo[i + 3].Media_Porc) + "%";
                    objFrecRango.TextoMax = Convert.ToString(arr_Tramo[i + 3].Maxima_Porc) + "%";
                }
                else
                {
                    objFrecRango.TextoMin = Convert.ToString(ld_sum_Minima_Porc + ld_ajuste_Minima) + "%";
                    objFrecRango.TextoMed = Convert.ToString(ld_sum_Media_Porc + ld_ajuste_Media) + "%";
                    objFrecRango.TextoMax = Convert.ToString(ld_sum_Maxima_Porc + ld_ajuste_Maxima) + "%";
                }
            }

            //Veces que la frecuencia disminuyó por debajo de:
            listaFrecDebajo.Add(new FLecturaDTO() { TextoUmbral = "59.9" });
            listaFrecDebajo.Add(new FLecturaDTO() { TextoUmbral = "59.8" });
            listaFrecDebajo.Add(new FLecturaDTO() { TextoUmbral = "59.7" });
            listaFrecDebajo.Add(new FLecturaDTO() { TextoUmbral = "59.6" });
            listaFrecDebajo.Add(new FLecturaDTO() { TextoUmbral = "59.5" });
            listaFrecDebajo.Add(new FLecturaDTO() { TextoUmbral = "59.4" });
            for (int i = 0; i < 6; i++)
            {
                var obj = listaFrecDebajo[i];
                obj.TextoMin = Convert.ToString(arr_UmbralDisminuye[i].Minima_Cont);
                obj.TextoMed = Convert.ToString(arr_UmbralDisminuye[i].Media_Cont);
                obj.TextoMax = Convert.ToString(arr_UmbralDisminuye[i].Maxima_Cont);
            }

            //Veces que la frecuencia aumentó por encima de:
            listaFrecEncima.Add(new FLecturaDTO() { TextoUmbral = "60.6" });
            listaFrecEncima.Add(new FLecturaDTO() { TextoUmbral = "60.5" });
            listaFrecEncima.Add(new FLecturaDTO() { TextoUmbral = "60.4" });
            listaFrecEncima.Add(new FLecturaDTO() { TextoUmbral = "60.3" });
            listaFrecEncima.Add(new FLecturaDTO() { TextoUmbral = "60.2" });
            listaFrecEncima.Add(new FLecturaDTO() { TextoUmbral = "60.1" });
            for (int i = 0; i < 6; i++)
            {
                var obj = listaFrecEncima[i];
                obj.TextoMin = Convert.ToString(arr_UmbralAumenta[i].Minima_Cont);
                obj.TextoMed = Convert.ToString(arr_UmbralAumenta[i].Media_Cont);
                obj.TextoMax = Convert.ToString(arr_UmbralAumenta[i].Maxima_Cont);
            }

            //grafico
            var listaSerieFrecuencia = new List<FLecturaDTO>();
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 59.35m, Lsup = 59.45m, TextoUmbral = "59.4" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 59.45m, Lsup = 59.55m, TextoUmbral = "59.5" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 59.55m, Lsup = 59.65m, TextoUmbral = "59.6" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 59.65m, Lsup = 59.75m, TextoUmbral = "59.7" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 59.75m, Lsup = 59.85m, TextoUmbral = "59.8" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 59.85m, Lsup = 59.95m, TextoUmbral = "59.9" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 59.95m, Lsup = 60.05m, TextoUmbral = "60.0" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 60.05m, Lsup = 60.15m, TextoUmbral = "60.1" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 60.15m, Lsup = 60.25m, TextoUmbral = "60.2" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 60.25m, Lsup = 60.35m, TextoUmbral = "60.3" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 60.35m, Lsup = 60.45m, TextoUmbral = "60.4" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 60.45m, Lsup = 60.55m, TextoUmbral = "60.5" });
            listaSerieFrecuencia.Add(new FLecturaDTO() { Linf = 60.55m, Lsup = 60.65m, TextoUmbral = "60.6" });

            foreach (var item in arr_Tramo)
            {
                decimal valorX = item.XValor;
                var objSerie = listaSerieFrecuencia.Find(x => x.Linf <= valorX && valorX <= x.Lsup);
                if (objSerie != null)
                {
                    objSerie.Minima_Porc = item.Minima_Porc;
                    objSerie.Media_Porc = item.Media_Porc;
                    objSerie.Maxima_Porc = item.Maxima_Porc;
                }
            }

            //grafico = UtilAnexoAPR5.GraficoDistribucionFrecuencia(true, listaSerieFrecuencia);

            //grafico 2
            var listaFrec0 = arr_Frecuencia.Where(x => x.Frecuencia < 20).ToList();
            var listaFrecMayor0 = arr_Frecuencia.Where(x => x.Frecuencia > 0).ToList(); //puede haber frecuencia errada de ceros, se debe excluir del cálculo
            decimal minDia = listaFrecMayor0.Any() ? listaFrecMayor0.Min(x => x.Frecuencia) : 60.6m;
            decimal maxDia = listaFrecMayor0.Any() ? listaFrecMayor0.Max(x => x.Frecuencia) : 59.4m;
            List<FLecturaDTO> listarSerieGraficoFrec = UtilAnexoAPR5.ListarSerieGraficoFrec(minDia, maxDia);

            UtilAnexoAPR5.ListarDistribucionNormalFrec(1, listaFLectPeriodoMaxima, ref listarSerieGraficoFrec);
            UtilAnexoAPR5.ListarDistribucionNormalFrec(2, listaFLectPeriodoMinima, ref listarSerieGraficoFrec);
            UtilAnexoAPR5.ListarDistribucionNormalFrec(3, listaFLectPeriodoMedia, ref listarSerieGraficoFrec);

            grafico = UtilAnexoAPR5.GraficoDistribucionFrecuencia(false, listarSerieGraficoFrec);
        }

        /// <summary>
        /// GraficoVariacionesFrecuenciaSEINDataVersionada
        /// </summary>
        /// <param name="gps"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="listaFrecRango"></param>
        /// <param name="listaFrecDebajo"></param>
        /// <param name="listaFrecEncima"></param>
        /// <param name="graficoCampana"></param>
        public void GraficoVariacionesFrecuenciaSEINDataVersionada(int gps, DateTime fechaInicial
                     , string versionAnexoA, out List<FLecturaDTO> listaFrecRango,
                                            out List<FLecturaDTO> listaFrecDebajo, out List<FLecturaDTO> listaFrecEncima, out GraficoWeb graficoCampana)
        {
            listaFrecRango = new List<FLecturaDTO>();
            listaFrecDebajo = new List<FLecturaDTO>();
            listaFrecEncima = new List<FLecturaDTO>();
            graficoCampana = new GraficoWeb();

            if (versionAnexoA != "")
            {
                listaFrecRango = GetDataSerializedVersion<List<FLecturaDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteVariacionesSostenidasSubitasGrafico);
            }
            else
            {
                this.GraficoVariacionesFrecuenciaSEINDataReporte(gps, fechaInicial, out listaFrecRango,
                                            out listaFrecDebajo, out listaFrecEncima, out graficoCampana);
            }
        }

        private MeMedicion96DTO GetVariacionSostenidaXGps(int gpscodi, DateTime fechaPeriodo)
        {
            List<FLecturaDTO> listaFrec = FactorySic.GetFLecturaRepository().ListByFechaDesvNumPorGpsFecha(gpscodi, fechaPeriodo);

            decimal[] arrayNum = new decimal[96];
            decimal[] arrayDesv = new decimal[96];

            //recorrer los minutos para obtener los datos cada 15min
            foreach (var item in listaFrec)
            {

                // Hora stamp a minutos
                decimal minutos = item.Fechahora.Hour * 60 + item.Fechahora.Minute;
                int h = Convert.ToInt32(Math.Truncate(minutos / 15));

                if (h >= 0 && h < 96)
                {
                    arrayNum[h] = arrayNum[h] + item.Num ?? 0;
                    arrayDesv[h] = arrayDesv[h] + item.Desv ?? 0;
                }
            }

            //Valor de variacion sostenida
            MeMedicion96DTO obj96Valor = new MeMedicion96DTO();
            decimal valNum = 0;
            decimal valDesv = 0;
            decimal valVarSos = 0;
            decimal valFrec;
            for (int h = 1; h <= 96; h++)
            {
                valNum = arrayNum[h - 1];
                valDesv = arrayDesv[h - 1];

                //variacion sostenida
                valVarSos = 0;
                if (valNum != 0) valVarSos = Math.Round((valDesv / valNum) * 100.0m, 4);

                //obtener frecuencia
                valFrec = (valVarSos / 100.0m + 1) * 60m;

                obj96Valor.GetType().GetProperty(ConstantesAppServicio.CaracterH + h.ToString()).SetValue(obj96Valor, valFrec);
            }

            return obj96Valor;
        }


        public void GenerarIndicadores(DateTime fecha)
        {
            List<MeGpsDTO> listaActivos = ListarGpsxFiltro(ConstantesAppServicio.ParametroDefecto, true);
            foreach (var gps in listaActivos)
            {
                try
                {
                    new ReporteFrecuenciaAppServicio().Indicadores(gps.Gpscodi, "", fecha);
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }
        }

        /// <summary>
        /// nombre de GPS para word
        /// </summary>
        /// <param name="gpscodi"></param>
        /// <returns></returns>
        public string GetNombreGPS(int gpscodi)
        {
            MeGpsDTO gpsObj = FactorySic.GetMeGpsRepository().GetById(gpscodi);
            string gpsNombre = (gpsObj.Gpscodi == 1 ? "SAN JUAN" : gpsObj.Nombre);

            return gpsNombre;
        }

        #endregion

        // 3.13.2.28.	Reporte de Sistemas Aislados Temporales y sus variaciones sostenidas y súbitas de frecuencia.
        #region REPORTE_SISTEMAS_AISLADOS_TEMPORALES_Y_VARIACIONES_SOSTENIDAS_SUBITAS

        /// <summary>
        /// Obtener el Gps principal
        /// </summary>
        /// <param name="iccodi"></param>
        /// <param name="gpscodi"></param>
        /// <param name="gpsnombre"></param>
        /// <param name="listaGps"></param>
        public void GetGpsPrincipal(int iccodi, out int? gpscodi, out string gpsnombre, out string listaGps)
        {
            gpscodi = null;
            gpsnombre = string.Empty;

            List<EveGpsaisladoDTO> listaGpsAislado = this.GetByCriteriaEveGpsaislados(iccodi);
            List<string> listaNombreGps = new List<string>();
            foreach (var reg in listaGpsAislado)
            {
                listaNombreGps.Add(reg.Gpsnombre.Trim() + (reg.Gpsaisprincipal == 1 ? " [PRINCIPAL]" : ""));
            }
            listaGps = string.Join("\n", listaNombreGps);

            EveGpsaisladoDTO regPpal = listaGpsAislado.Find(x => x.Gpsaisprincipal == 1);
            if (regPpal != null)
            {
                gpscodi = regPpal.Gpscodi;
                gpsnombre = regPpal.Gpsnombre.Trim();
            }
        }

        /// <summary>
        /// ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasDataVersionada
        /// </summary>
        /// <param name="gps"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        public void ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasDataVersionada(string gps, DateTime fechaInicial,
             string versionAnexoA, out List<InfSGIAisladosTempGPS> lista)
        {
            lista = new List<InfSGIAisladosTempGPS>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<InfSGIAisladosTempGPS>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteSistemasAisladosTemporales);
            }
            else
            {
                lista = ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasDataReporte(gps, fechaInicial);
            }

            lista = lista.OrderBy(x => x.Gpsnombre).ToList();
        }

        private List<InfSGIAisladosTempGPS> ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasDataReporte(string gps, DateTime fecha)
        {
            var lista = new List<InfSGIAisladosTempGPS>();

            //lista de eventos
            DateTime fechaIniMes = new DateTime(fecha.Year, fecha.Month, 1);
            List<EveIeodcuadroDTO> listaFallaAcumuladoSEIN = ReporteOperacionesVariasDataReporte(fechaIniMes, fecha, ConstantesPR5ReportesServicio.EvenclaseEjecutado, ConstantesPR5ReportesServicio.IdSubCausaSistemasAislados, false);
            int fallaAcumuladaSosSein = (int)listaFallaAcumuladoSEIN.Sum(x => x.Numtrsgsostn ?? 0);
            int fallaAcumuladaSubSein = (int)listaFallaAcumuladoSEIN.Sum(x => x.Numtrsgsubit ?? 0);

            //solo gps para Anexo A
            List<MeGpsDTO> listaGps = ListarGpsxFiltro(gps, true);
            foreach (var item in listaGps)
            {
                List<FIndicadorDTO> listaIndicadorSos = FactorySic.GetFIndicadorRepository().ListarTransgresionXRango(fecha, fecha, item.Gpscodi, "O");
                List<FIndicadorDTO> listaIndicadorSub = FactorySic.GetFIndicadorRepository().ListarTransgresionXRango(fecha, fecha, item.Gpscodi, "U");
                int fallaAcumuladaSosXGPS = FactorySic.GetFIndicadorRepository().GetFallaAcumuladaXRango(fechaIniMes, fecha, item.Gpscodi, "O");
                int fallaAcumuladaSubXGPS = FactorySic.GetFIndicadorRepository().GetFallaAcumuladaXRango(fechaIniMes, fecha, item.Gpscodi, "U");

                lista.Add(new InfSGIAisladosTempGPS()
                {
                    Gpscodi = item.Gpscodi,
                    Gpsnombre = item.Nombre,
                    VarSosFrecPeriodo = listaIndicadorSos.Any() ? string.Join("\n", listaIndicadorSos.Select(x => x.Fechahora.ToString(ConstantesAppServicio.FormatoFechaFull2))) : "---",
                    VarSosFrecValor = listaIndicadorSos.Any() ? string.Join("\n", listaIndicadorSos.Select(x => x.Indicvalor ?? 0)) : "---",
                    VarSosFrecNTransg = fallaAcumuladaSosXGPS + fallaAcumuladaSosSein,
                    VarSosFrecMax = ConstantesPR5ReportesServicio.FrecuenciaMaxSostenida, //en SGOCOES de Escritorio está como data quemada
                    VarSosFrecMin = ConstantesPR5ReportesServicio.FrecuenciaMinSostenida, //en SGOCOES de Escritorio está como data quemada
                    VarSubFrecPeriodo = listaIndicadorSos.Any() ? string.Join("\n", listaIndicadorSub.Select(x => x.Fechahora.ToString(ConstantesAppServicio.FormatoFechaFull2))) : "---",
                    VarSubFrecValor = listaIndicadorSos.Any() ? string.Join("\n", listaIndicadorSub.Select(x => x.Indicvalor ?? 0)) : "---",
                    VarSubFrecNTransg = fallaAcumuladaSubXGPS + fallaAcumuladaSubSein,
                    VarSubFrecMax = ConstantesPR5ReportesServicio.FrecuenciaMaxSubita, //en SGOCOES de Escritorio está como data quemada
                    VarSubFrecMin = ConstantesPR5ReportesServicio.FrecuenciaMinSubita, //en SGOCOES de Escritorio está como data quemada
                });
            }

            return lista;
        }

        private void ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, string versionAnexoA)
        {
            List<InfSGIAisladosTempGPS> lista = ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasDataReporte(ConstantesAppServicio.ParametroDefecto, fecha1);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "AISLADOS_TEMP_GPS", fecha1, fecha1, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptSistemasAisladosTemporalesYVariacionesSostenidasSubitas(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha1, lista);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        #endregion

        #region DESVIACIONES CON RESPECTO AL PDO

        // 3.13.2.30.	Desviaciones de la demanda respecto a su pronóstico
        #region REPORTE_DESVIACIONES_DEMANDA_PRONOSTICO

        private void ReporteDesviacionDemandaPronosticoDataReporte(DateTime fechaInicial, DateTime fechaFinal, out List<MeMedicion48DTO> lista48)
        {
            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaEjecXDia = this.servEjec.ListaDataGeneracion48(fechaInicial, fechaFinal, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos
                , ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesMedicion.IdTipoInfoPotenciaActiva, ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto);

            List<MeMedicion48DTO> listaProgXDia = this.servEjec.ListaDataGeneracion48(fechaInicial, fechaFinal, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos
                , ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesMedicion.IdTipoInfoPotenciaActiva, ConstantesPR5ReportesServicio.LectCodiProgDiaria);

            lista.AddRange(listaEjecXDia);
            lista.AddRange(listaProgXDia);

            lista48 = (from t in lista
                       group t by new { t.Medifecha, t.Lectcodi }
                           into destino
                       select new MeMedicion48DTO()
                       {
                           Medifecha = destino.Key.Medifecha,
                           Lectcodi = destino.Key.Lectcodi,
                           H1 = destino.Sum(t => t.H1),
                           H2 = destino.Sum(t => t.H2),
                           H3 = destino.Sum(t => t.H3),
                           H4 = destino.Sum(t => t.H4),
                           H5 = destino.Sum(t => t.H5),
                           H6 = destino.Sum(t => t.H6),
                           H7 = destino.Sum(t => t.H7),
                           H8 = destino.Sum(t => t.H8),
                           H9 = destino.Sum(t => t.H9),
                           H10 = destino.Sum(t => t.H10),
                           H11 = destino.Sum(t => t.H11),
                           H12 = destino.Sum(t => t.H12),
                           H13 = destino.Sum(t => t.H13),
                           H14 = destino.Sum(t => t.H14),
                           H15 = destino.Sum(t => t.H15),
                           H16 = destino.Sum(t => t.H16),
                           H17 = destino.Sum(t => t.H17),
                           H18 = destino.Sum(t => t.H18),
                           H19 = destino.Sum(t => t.H19),
                           H20 = destino.Sum(t => t.H20),
                           H21 = destino.Sum(t => t.H21),
                           H22 = destino.Sum(t => t.H22),
                           H23 = destino.Sum(t => t.H23),
                           H24 = destino.Sum(t => t.H24),
                           H25 = destino.Sum(t => t.H25),
                           H26 = destino.Sum(t => t.H26),
                           H27 = destino.Sum(t => t.H27),
                           H28 = destino.Sum(t => t.H28),
                           H29 = destino.Sum(t => t.H29),
                           H30 = destino.Sum(t => t.H30),
                           H31 = destino.Sum(t => t.H31),
                           H32 = destino.Sum(t => t.H32),
                           H33 = destino.Sum(t => t.H33),
                           H34 = destino.Sum(t => t.H34),
                           H35 = destino.Sum(t => t.H35),
                           H36 = destino.Sum(t => t.H36),
                           H37 = destino.Sum(t => t.H37),
                           H38 = destino.Sum(t => t.H38),
                           H39 = destino.Sum(t => t.H39),
                           H40 = destino.Sum(t => t.H40),
                           H41 = destino.Sum(t => t.H41),
                           H42 = destino.Sum(t => t.H42),
                           H43 = destino.Sum(t => t.H43),
                           H44 = destino.Sum(t => t.H44),
                           H45 = destino.Sum(t => t.H45),
                           H46 = destino.Sum(t => t.H46),
                           H47 = destino.Sum(t => t.H47),
                           H48 = destino.Sum(t => t.H48)
                       }).ToList();

        }

        /// <summary>
        /// ReporteDesviacionDemandaPronosticoDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteDesviacionDemandaPronosticoDataVersionada(DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion)
        {
            listaVersion = new List<MeMedicion48DTO>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteDesviacionesDemandaPronostico);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteDesviacionesDemandaPronostico);
            }
            else
            {
                this.ReporteDesviacionDemandaPronosticoDataReporte(fechaInicial, fechaFinal, out lista);
            }
        }

        private void ReporteDesviacionDemandaPronosticoExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            this.ReporteDesviacionDemandaPronosticoDataVersionada(fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            int nfilIni = 0, ncolIni = 0, nfilFin = 0;
            int tipoGrafico = 1;
            string xAxisTitle = string.Empty, yAxisTitle = string.Empty, titulo = string.Empty;

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "DESV_DEMANDA_PRONOS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptDesviacionDemandaPronostico(ws, ref nfilIni, ref ncolIni, ref nfilFin, tipoGrafico, fecha1, fecha2, lista, listaVersion);

            UtilAnexoAPR5.AddGraficoDesviacionDemandaPronostico(ws, nfilIni, ncolIni, nfilFin, xAxisTitle, yAxisTitle, string.Empty);

            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        private GraficoWeb GraficoWebEvolucionEnergiaDiaria(List<DateTime> listaFecha, List<MeMedicion1DTO> listaEjec, List<MeMedicion1DTO> listaProg, MeMedicion1DTO objMaxEnergia)
        {
            int totalDia = listaFecha.Count;
            //Grafico
            var grafico = new GraficoWeb();
            grafico.TitleText = @"EVOLUCIÓN DIARIA DE LA ENERGÍA DEL COES";
            grafico.SeriesType = new List<string>();
            grafico.SeriesName = new List<string>();
            grafico.YAxixTitle = new List<string>();
            grafico.YaxixTitle = "GWh";
            grafico.SerieDataS = new DatosSerie[3][];

            //Eje X
            grafico.XAxisTitle = "DÍA";
            grafico.XAxisCategories = new List<string>();
            for (int h = 0; h < totalDia; h++)
            {
                grafico.XAxisCategories.Add(EPDate.f_NombreDiaSemanaCorto(listaFecha[h].DayOfWeek) + " " + listaFecha[h].Day);
            }

            //DATA SERIES
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[3][];
            grafico.SeriesDataVisible = new bool[3][];

            //ejecutado
            grafico.Series.Add(new RegistroSerie());
            grafico.Series[0].Name = "ENERGÍA EJECUTADA";
            grafico.Series[0].Type = "column";
            grafico.Series[0].YAxis = 0;
            grafico.Series[0].Color = "#87CCE9";
            grafico.SerieDataS[0] = new DatosSerie[totalDia];
            grafico.SeriesDataVisible[0] = new bool[totalDia];
            for (int h = 0; h < totalDia; h++)
            {
                MeMedicion1DTO ejec = listaEjec.Find(x => x.Medifecha == listaFecha[h]);
                grafico.SerieDataS[0][h] = new DatosSerie();
                grafico.SerieDataS[0][h].Y = ejec.H1;

                //el ultimo elemento debe mostrarse el texto de MW
                if (h == totalDia - 1) grafico.SeriesDataVisible[0][h] = true;
            }

            //programado
            grafico.Series.Add(new RegistroSerie());
            grafico.Series[1].Name = "ENERGÍA PROGRAMADA";
            grafico.Series[1].Type = "column";
            grafico.Series[1].YAxis = 0;
            grafico.Series[1].Color = "#FFA602";
            grafico.SerieDataS[1] = new DatosSerie[totalDia];
            grafico.SeriesDataVisible[1] = new bool[totalDia];
            for (int h = 0; h < totalDia; h++)
            {
                MeMedicion1DTO prog = listaProg.Find(x => x.Medifecha == listaFecha[h]);
                grafico.SerieDataS[1][h] = new DatosSerie();
                grafico.SerieDataS[1][h].Y = prog.H1;
            }

            //maxima energia
            grafico.Series.Add(new RegistroSerie());
            grafico.Series[2].Name = "MÁXIMA ENERGÍA EJECUTADA DEL AÑO";
            grafico.Series[2].Type = "line";
            grafico.Series[2].YAxis = 0;
            grafico.Series[2].Color = "#FF4141";
            grafico.SerieDataS[2] = new DatosSerie[totalDia];
            grafico.SeriesDataVisible[2] = new bool[totalDia];
            for (int h = 0; h < totalDia; h++)
            {
                grafico.SerieDataS[2][h] = new DatosSerie();
                grafico.SerieDataS[2][h].Y = objMaxEnergia.H1;
            }

            return grafico;
        }

        private GraficoWeb GraficoWebEvolucionMaximaDemandaDiaria(List<DateTime> listaFecha, List<MeMedicion1DTO> listaEjec, MeMedicion1DTO objMaxAnio)
        {
            int totalDia = listaFecha.Count;
            //Grafico
            var grafico = new GraficoWeb();
            grafico.TitleText = @"MÁXIMA DEMANDA DEL COES SINAC";
            grafico.SeriesType = new List<string>();
            grafico.SeriesName = new List<string>();
            grafico.YAxixTitle = new List<string>();
            grafico.YaxixTitle = "MW";
            grafico.SerieDataS = new DatosSerie[2][];
            grafico.SeriesDataVisible = new bool[2][];

            //Eje X
            grafico.XAxisTitle = "DÍA";
            grafico.XAxisCategories = new List<string>();
            for (int h = 0; h < totalDia; h++)
            {
                grafico.XAxisCategories.Add(EPDate.f_NombreDiaSemanaCorto(listaFecha[h].DayOfWeek) + " " + listaFecha[h].Day);
            }

            //DATA SERIES
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[2][];

            //ejecutado
            grafico.Series.Add(new RegistroSerie());
            grafico.Series[0].Name = "MAXIMA DEMANDA DIARIA";
            grafico.Series[0].Type = "column";
            grafico.Series[0].YAxis = 0;
            grafico.Series[0].Color = "#87CCE9";
            grafico.SerieDataS[0] = new DatosSerie[totalDia];
            grafico.SeriesDataVisible[0] = new bool[totalDia];
            for (int h = 0; h < totalDia; h++)
            {
                MeMedicion1DTO ejec = listaEjec.Find(x => x.Medifecha == listaFecha[h]);
                grafico.SerieDataS[0][h] = new DatosSerie();
                grafico.SerieDataS[0][h].Y = ejec.H1;

                //el ultimo elemento debe mostrarse el texto de MW
                if (h == totalDia - 1) grafico.SeriesDataVisible[0][h] = true;
            }

            //maxima anio
            grafico.Series.Add(new RegistroSerie());
            grafico.Series[1].Name = "MÁXIMA DEMANDA DEL AÑO";
            grafico.Series[1].Type = "line";
            grafico.Series[1].YAxis = 0;
            grafico.Series[1].Color = "#FF4141";
            grafico.SerieDataS[1] = new DatosSerie[totalDia];
            grafico.SeriesDataVisible[1] = new bool[totalDia];
            for (int h = 0; h < totalDia; h++)
            {
                grafico.SerieDataS[1][h] = new DatosSerie();
                grafico.SerieDataS[1][h].Y = objMaxAnio.H1;
            }

            return grafico;
        }

        #endregion

        // 3.13.2.31.	Desviaciones de la producción de las Unidades de Generación
        #region REPORTE_DESVIACIONES_PRODUCCION_UG

        private void ReporteDesviacionesProduccionUGDataReporte(string idEmpresa, DateTime fechaInicial, DateTime fechaFinal,
                    out List<MeMedicion48DTO> listaData48, out List<MePtomedicionDTO> listaPto48)
        {
            List<MeMedicion48DTO> listaDespacho = new List<MeMedicion48DTO>();

            List<MeMedicion48DTO> listaEjec = this.servEjec.ListaDataGeneracion48(fechaInicial, fechaFinal, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), idEmpresa, ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesPR5ReportesServicio.TipoinfoMW, ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto);
            List<MeMedicion48DTO> listaProg = this.servEjec.ListaDataGeneracion48(fechaInicial, fechaFinal, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), idEmpresa, ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesPR5ReportesServicio.TipoinfoMW, ConstantesPR5ReportesServicio.LectDespachoProgramadoDiario);
            List<MeMedicion48DTO> listaReprog = this.servEjec.ListaDataGeneracion48(fechaInicial, fechaFinal, ConstantesMedicion.IdTipogrupoCOES
                , ConstantesMedicion.IdTipoGeneracionTodos.ToString(), idEmpresa, ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesPR5ReportesServicio.TipoinfoMW, ConstantesPR5ReportesServicio.LectDespachoReprogramado);

            listaDespacho.AddRange(listaEjec);
            listaDespacho.AddRange(listaProg);
            listaDespacho.AddRange(listaReprog);

            this.FormatearDataDespacho(listaDespacho);

            CDespachoInput regInput = new CDespachoInput()
            {
                FechaIni = fechaInicial,
                FechaFin = fechaFinal,
                Lectcodi = ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto,
                ListaAllMe48 = listaEjec,
            };

            var regCDespacho = new CDespachoGlobal();

            //Consultas a BD para obtener los insumos
            (new MigracionesAppServicio()).CargarInsumoPlantillaGeneracionCDispatch(regInput, ref regCDespacho);
            UtilCdispatch.AsignarVariablesPlantillaCDispatch(regInput, ref regCDespacho);
            List<MePtomedicionDTO> listaAllPtoPlantilla = regCDespacho.ListaAllPtoPlantillaExcel
                .Where(x => x.Grupointegrante == ConstantesAppServicio.SI).ToList();

            //salidas
            listaData48 = listaDespacho;
            listaPto48 = listaAllPtoPlantilla;
        }

        /// <summary>
        /// Obtener data para reporte de Desviación de Producción
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaPtoVersion"></param>
        public void ReporteDesviacionesProduccionUGDataVersionada(string idEmpresa, DateTime fechaInicial, DateTime fechaFinal
            , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion, out List<MePtomedicionDTO> listaPto, out List<MePtomedicionDTO> listaPtoVersion)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();
            listaPto = new List<MePtomedicionDTO>();
            listaPtoVersion = new List<MePtomedicionDTO>();

            idEmpresa = string.IsNullOrEmpty(idEmpresa) ? ConstantesAppServicio.ParametroDefecto : idEmpresa;

            int[] empresas_ = idEmpresa.Split(',').Select(x => int.Parse(x)).ToArray();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteDesviacionesProduccionUG);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteDesviacionesProduccionUG);
            }
            else
            {
                ReporteDesviacionesProduccionUGDataReporte(idEmpresa, fechaInicial, fechaFinal, out lista, out listaPto);
            }

            lista = lista.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).OrderByDescending(x => x.Grupointegrante).ThenBy(x => x.Tipogrupocodi).ToList();
            listaVersion = listaVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi)).OrderByDescending(x => x.Grupointegrante).ThenBy(x => x.Tipogrupocodi).ToList();

            listaPto = listaPto.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.GetValueOrDefault(-100))).ToList();
            listaPtoVersion = listaPtoVersion.Where(x => idEmpresa == ConstantesAppServicio.ParametroDefecto || empresas_.Contains(x.Emprcodi.GetValueOrDefault(-100))).ToList();
        }

        private void ReporteDesviacionesProduccionUGExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            List<MePtomedicionDTO> listaPto, listaPtoVersion;
            this.ReporteDesviacionesProduccionUGDataVersionada(idEmpresa, fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out listaPto, out listaPtoVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "DESVIACIÓN", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptDesviacionesProduccionUG(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2,
                                listaPto, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        #endregion

        #region INFORMACIÓN DEL MERCADO DE CORTO PLAZO

        // 3.13.2.32.	Costos Marginales de Corto Plazo cada 30 minutos en las Barras del SEIN.
        #region REPORTE_COSTO_MARGINALES_CORTO_PLAZO

        /// <summary>
        /// ReporteCostoMarginalesCPDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaBarra"></param>
        public void ReporteCostoMarginalesCPDataVersionada(DateTime fechaInicial,
                     string versionAnexoA, out List<SiCostomarginalDTO> lista, out List<SiCostomarginalDTO> listaVersion, out List<BarraDTO> listaBarra)
        {
            lista = new List<SiCostomarginalDTO>();
            listaVersion = new List<SiCostomarginalDTO>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<SiCostomarginalDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCostoMarginalesCortoPlazo);
                listaVersion = GetDataSerializedPreviousVersion<List<SiCostomarginalDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCostoMarginalesCortoPlazo);
            }
            else
            {
                lista = GetByCriteriaSiCostomarginals(fechaInicial, fechaInicial);
            }

            listaBarra = lista.GroupBy(x => x.Barrcodi).Select(x => new BarraDTO() { BarrCodi = x.Key, BarrNombre = x.First().Barrnomb })
                            .OrderBy(x => x.BarrNombre).ToList();

        }

        private void ReporteCostoMarginalesCPExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, int tipoInfo, DateTime fecha1, string versionAnexoA)
        {
            List<SiCostomarginalDTO> lista, listaVersion;
            this.ReporteCostoMarginalesCPDataVersionada(fecha1, versionAnexoA, out lista, out listaVersion, out List<BarraDTO> listaBarra);

            string nombreHoja = "";
            switch (tipoInfo)
            {
                case 1: nombreHoja = "Cmg_Barra"; break;
                case 2: nombreHoja = "Cmg_Ener"; break;
                case 3: nombreHoja = "Cmg_Cong"; break;
            }

            ws = xlPackage.Workbook.Worksheets.Add(nombreHoja);
            ws = xlPackage.Workbook.Worksheets[nombreHoja];
            UtilAnexoAPR5.GeneraRptCostoMarginalesCP(ws, fecha1, tipoInfo, lista, listaBarra);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault, false);
        }

        #endregion

        // 3.13.2.33.	Costo total de operación ejecutada.
        #region COSTO TOTAL OPERACION EJECUTADA

        /// <summary>
        /// Genera lista de Costo total de operacion ejecutada
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public List<MeMedicion1DTO> ReporteCostoTotalOperacionEjecutadaDataReporte(DateTime fecha)
        {
            DateTime fechaIni = fecha.AddDays(-7);
            DateTime fechaFin = fecha;

            List<MeMedicion1DTO> listaFinal = ObtenerCostoTotalOperacionEjecYProgDataReporteXFecha(fechaIni, fechaFin, ConstantesPR5ReportesServicio.LectCodiProgDiaria);

            return listaFinal;
        }

        /// <summary>
        /// Permite retornar listado de Costo total operacion ejecutada y programado por rango de fecha
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="lecturaOperacionProg"></param>
        /// <returns></returns>
        public List<MeMedicion1DTO> ObtenerCostoTotalOperacionEjecYProgDataReporteXFecha(DateTime fechaIni, DateTime fechaFin, int lecturaOperacionProg)
        {
            List<MeMedicion1DTO> listaFinal = new List<MeMedicion1DTO>();
            List<MeMedicion1DTO> listaData = new List<MeMedicion1DTO>();

            listaData.AddRange(FactorySic.GetMeMedicion1Repository().GetByCriteria(fechaIni, fechaFin, ConstantesPR5ReportesServicio.LectCostoOperacionEjec, ConstantesPR5ReportesServicio.TipoinfoSoles, ConstantesPR5ReportesServicio.PtomedicodiCostoOpr.ToString()));

            #region Costo de la operación dolares / soles programado diario, semanal.

            var listaProgM1Soles = new List<MeMedicion1DTO>();
            var listaProgM1 = FactorySic.GetMeMedicion1Repository().GetByCriteria(fechaIni, fechaFin, lecturaOperacionProg, -1, (ConstantesPR5ReportesServicio.PtomedicodiCostoOperacionNCP + "," + ConstantesAppServicio.PtomedicodiCostoOpeDia));
            for (var f = fechaIni.Date; f <= fechaFin.Date; f = f.AddDays(1))
            {
                var listaM1XDia = listaProgM1.Where(x => x.Medifecha == f).ToList();

                MeMedicion1DTO regSoles = listaM1XDia.Find(x => x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiSoles);
                MeMedicion1DTO regDolares = listaM1XDia.Find(x => x.Tipoinfocodi == ConstantesAppServicio.TipoinfocodiDolares);

                if (regDolares != null)
                {
                    regSoles = new MeMedicion1DTO();
                    regSoles.Medifecha = f;
                    regSoles.Tipoinfocodi = ConstantesPR5ReportesServicio.TipoinfoSoles;
                    regSoles.Lectcodi = lecturaOperacionProg;
                    regSoles.H1 = regDolares.H1.GetValueOrDefault(0) * this.GetTipoCambio(f);
                }

                if (regSoles != null)
                {
                    listaProgM1Soles.Add(regSoles);
                }

            }

            listaData.AddRange(listaProgM1Soles);

            #endregion

            MeMedicion1DTO tmp = null;
            MeMedicion1DTO tmp2 = null;
            for (var f = fechaIni.Date; f <= fechaFin.Date; f = f.AddDays(1))
            {

                //Costo total programado
                tmp = listaData.Find(x => x.Medifecha == f && lecturaOperacionProg == x.Lectcodi);

                MeMedicion1DTO mprog = new MeMedicion1DTO();
                mprog.Lectcodi = lecturaOperacionProg;
                mprog.Medifecha = f;
                mprog.H1 = tmp != null ? tmp.H1 : null;

                listaFinal.Add(mprog);

                //Costo total ejecutado
                tmp2 = listaData.Find(x => x.Medifecha == f && ConstantesPR5ReportesServicio.LectCostoOperacionEjec == x.Lectcodi);

                MeMedicion1DTO mejec = new MeMedicion1DTO();
                mejec.Lectcodi = ConstantesPR5ReportesServicio.LectCostoOperacionEjec;
                mejec.Medifecha = f;
                mejec.H1 = tmp2 != null ? tmp2.H1 : null;

                listaFinal.Add(mejec);

                //caluco porcentaje
                if (mejec.H1 != null && mprog.H1.GetValueOrDefault(0) != 0)
                    mejec.PorcentajeEjec = Math.Round((((mejec.H1.Value / mprog.H1.Value) * 100) - 100), 1);


            }

            return listaFinal;
        }

        /// <summary>
        /// Obtener el valor del tipo de cambio
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        private decimal GetTipoCambio(DateTime fecha)
        {
            decimal tipocambio = 0;

            var ListaParamGenerales = this.GetParametrosGeneralesPorFecha(fecha);
            if (ListaParamGenerales.Count > 0)
            {
                var tipcambio = ListaParamGenerales.Find(x => x.Concepabrev == "TCambio");
                if (tipcambio != null) { tipocambio = decimal.Parse(tipcambio.Formuladat); }
            }

            return tipocambio;
        }

        /// <summary>
        /// GetParametrosGeneralesPorFecha
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        private List<PrGrupodatDTO> GetParametrosGeneralesPorFecha(DateTime fecha)
        {
            return FactorySic.GetPrGrupodatRepository().ParametrosGeneralesPorFecha(fecha);
        }

        /// <summary>
        /// ReporteCostoTotalOperacionEjecutadaDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="graficoWeb"></param>
        public void ReporteCostoTotalOperacionEjecutadaDataVersionada(DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<MeMedicion1DTO> lista, out List<MeMedicion1DTO> listaVersion, out GraficoWeb graficoWeb)
        {
            lista = new List<MeMedicion1DTO>();
            listaVersion = new List<MeMedicion1DTO>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion1DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCostoTotalOperacionEjecutada);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion1DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteCostoTotalOperacionEjecutada);
            }
            else
            {
                lista = this.ReporteCostoTotalOperacionEjecutadaDataReporte(fechaInicial);
            }

            graficoWeb = GraficoCostoTotalOperacionEjecutada(lista);
        }

        /// <summary>
        /// grafico de costo operacion
        /// </summary>
        /// <param name="lista"></param>
        /// <returns></returns>
        public GraficoWeb GraficoCostoTotalOperacionEjecutada(List<MeMedicion1DTO> lista)
        {
            List<MeMedicion1DTO> listaEjec = lista.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectCostoOperacionEjec).ToList();
            List<MeMedicion1DTO> listaProg = lista.Where(x => x.Lectcodi == ConstantesPR5ReportesServicio.LectCostoOperacionProg).ToList();
            List<DateTime> listaFecha = lista.Select(x => x.Medifecha.Date).Distinct().OrderBy(x => x.Date).ToList();
            int totalDia = listaFecha.Count();
            decimal dif = 0;


            //Mensaje
            var EjecModelFinal = listaEjec.Find(x => x.Medifecha == listaFecha[7]); //hoy
            var EjecModelInicio = listaEjec.Find(x => x.Medifecha == listaFecha[0]); //semana pasada

            string mensaje = "";
            if (EjecModelFinal.H1 != null && EjecModelInicio.H1 != null)
            {
                dif = EjecModelFinal.H1.Value - EjecModelInicio.H1.Value;

                var porcentaje = Math.Abs(Math.Round((dif / EjecModelInicio.H1.Value) * 100, 2));

                string txtMayor = "mayor";
                if (dif == 0)
                    txtMayor = "igual";
                else
                   if (dif < 0)
                    txtMayor = "menor";

                mensaje = string.Format("El costo total de la operación ejecutado fue S/. {0} y resultó S/. {1} ({2}%) {3} que el correspondiente al {4} de la semana pasada."
                                , Math.Round(EjecModelFinal.H1.Value), Math.Abs(Math.Round(dif))
                                , porcentaje, txtMayor, EPDate.f_NombreDiaSemana(EjecModelFinal.Medifecha.DayOfWeek).ToLower());
            }
            //Grafico
            var grafico = new GraficoWeb();
            grafico.TitleText = @"COSTO TOTAL DE LA OPERACIÓN POR DÍA";
            grafico.Subtitle = mensaje;
            //
            grafico.SeriesType = new List<string>();
            grafico.SeriesName = new List<string>();
            grafico.YAxixTitle = new List<string>();
            grafico.YaxixTitle = "Miles de S/.";
            grafico.SerieDataS = new DatosSerie[2][];

            //Eje X
            grafico.XAxisTitle = "DÍA";
            grafico.XAxisCategories = new List<string>();
            for (int h = 0; h < totalDia; h++)
            {
                grafico.XAxisCategories.Add(EPDate.f_NombreDiaSemanaCorto(listaFecha[h].DayOfWeek) + " " + listaFecha[h].Day);
            }

            //DATA SERIES
            grafico.Series = new List<RegistroSerie>();
            grafico.SeriesData = new decimal?[2][];

            //
            grafico.Series.Add(new RegistroSerie());
            grafico.Series[0].Name = "COSTO TOTAL EJEC";
            grafico.Series[0].Type = "column";
            grafico.Series[0].YAxis = 0;
            grafico.Series[0].Color = "#87CCE9";
            //grafico.SeriesData[0] = new decimal?[totalDia];
            grafico.SerieDataS[0] = new DatosSerie[totalDia];
            MeMedicion1DTO ejec = null;

            for (int h = 0; h < totalDia; h++)
            {
                ejec = listaEjec.Find(x => x.Medifecha == listaFecha[h]);
                //grafico.SeriesData[0][h] = ejec.H1 != null ? ejec.H1 / 1000 : ejec.H1;
                grafico.SerieDataS[0][h] = new DatosSerie();
                grafico.SerieDataS[0][h].Y = ejec.H1 != null ? ejec.H1 / 1000 : ejec.H1;
                grafico.SerieDataS[0][h].Name = ejec.PorcentajeEjec + "%";
            }

            //
            grafico.Series.Add(new RegistroSerie());
            grafico.Series[1].Name = "COSTO TOTAL PROG";
            grafico.Series[1].Type = "column";
            grafico.Series[1].YAxis = 0;
            grafico.Series[1].Color = "#FFA602";
            //grafico.SeriesData[1] = new decimal?[totalDia];
            grafico.SerieDataS[1] = new DatosSerie[totalDia];
            MeMedicion1DTO prog = null;
            for (int h = 0; h < totalDia; h++)
            {
                prog = listaProg.Find(x => x.Medifecha == listaFecha[h]);
                //grafico.SeriesData[1][h] = prog.H1 != null ? prog.H1 / 1000 : prog.H1;
                grafico.SerieDataS[1][h] = new DatosSerie();
                grafico.SerieDataS[1][h].Y = prog.H1 != null ? prog.H1 / 1000 : prog.H1;
                grafico.SerieDataS[1][h].Name = "";
            }

            return grafico;
        }

        private void ReporteCostoTotalOperacionEjecutadaExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion1DTO> lista, listaVersion;
            this.ReporteCostoTotalOperacionEjecutadaDataVersionada(fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out GraficoWeb graficoWeb);

            int nfil = 0, ncol1 = 0;
            string xAxisTitle = string.Empty, yAxisTitle = string.Empty, titulo = string.Empty;

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "COSTO_OPE_EJEC", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptCostoTotalOperacionEjecutada(ws, fecha1, fecha2, ref nfil, ref ncol1, lista, listaVersion);
            UtilAnexoAPR5.AddGraficoCostoTotalOperacionEjecutada(ws, nfil, ncol1, xAxisTitle, yAxisTitle, "COSTO TOTAL DE LA OPERACIÓN POR DíA", 1, 0);

            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.34. Calificación de la Operacion de las Unidades de Generación
        #region REPORTE CALIFICACION OPERACION UNIDADES

        private void ReporteCalificacionHoraOperacionExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, string idEmpresa, string idTCentral, string idTCombustible, string idTOperacion, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<EveHoraoperacionDTO> lista, listaVersion;
            this.ReporteHorasOrdenAPISDataVersionada(idEmpresa, ConstantesAppServicio.ParametroDefecto, idTCentral, idTCombustible, idTOperacion, fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "CALIFICA_OPE_UG", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptHorasOrdenAPIS(ws, "Calificación de la Operacion de las Unidades de Generación", true, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.35.	Registro de las congestiones del Sistema de Transmisión.
        #region REPORTE REGISTRO CONGESTIONES ST

        /// <summary>
        /// ReporteRegistroCongestionesSTDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ReporteRegistroCongestionesSTDataVersionada(DateTime fechaInicial, DateTime fechaFinal
         , string versionAnexoA, out List<EveIeodcuadroDTO> lista, out List<EveIeodcuadroDTO> listaVersion)
        {
            lista = new List<EveIeodcuadroDTO>();
            listaVersion = new List<EveIeodcuadroDTO>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRegistroCongestionesST);
                listaVersion = GetDataSerializedPreviousVersion<List<EveIeodcuadroDTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRegistroCongestionesST);
            }
            else
            {
                lista = ReporteOperacionesVariasDataReporte(fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.EvenclaseEjecutado.ToString(), ConstantesPR5ReportesServicio.IdSubCausaCongestionesST, false);
                lista = lista.Where(x => x.Famcodi == Convert.ToInt32(ConstantesPR5ReportesServicio.FamcodiLineaTrans)).ToList();
            }

            lista = lista.OrderBy(x => x.Ichorini).ThenBy(x => x.Emprnomb).ThenBy(x => x.Areanomb).ThenBy(x => x.Equiabrev).ToList();
        }

        private void GeneraRptRegistroCongestionesSTHoja(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<EveIeodcuadroDTO> lista, listaVersion;
            this.ReporteRegistroCongestionesSTDataVersionada(fecha1, fecha2, versionAnexoA, out lista, out listaVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "CONGESTION_SIST_TRANS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptRegistroCongestionesST(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        // 3.13.2.36.	Registro de asignación de la RRPF y RRSF
        #region REGISTRO ASIGNACION RRPF Y RRSF

        private void ReporteAsignacionRRPFyRRSDataReporte(DateTime fecha, out string[][] datos, out decimal? magnitudRpf)
        {
            int longitud = 0;
            int count = 0;
            int columnas = 0;
            List<int> indices = new List<int>();
            List<RsfLimite> limites = new List<RsfLimite>();
            datos = servRsf.ObtenerEstructura(fecha, out longitud, out indices, true, out columnas, 0, out count, out limites);

            magnitudRpf = this.GetMagnitudRPF(fecha);
        }

        private void ReporteAsignacionRRPFyRRSDataReporteExcel(DateTime fecha, out string[][] datos, out decimal? magnitudRpf)
        {
            int longitud = 0;
            int count = 0;
            int columnas = 0;
            List<int> indices = new List<int>();
            List<RsfLimite> limites = new List<RsfLimite>();
            datos = this.servRsf.ObtenerEstructuraExcel(fecha, out longitud, out indices, true, out columnas, 0, out count, out limites);

            magnitudRpf = this.GetMagnitudRPF(fecha);
        }

        /// <summary>
        /// ReporteAsignacionRRPFyRRSDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="magnitudRpf"></param>
        /// <param name="magnitudRpfVersion"></param>
        public void ReporteAsignacionRRPFyRRSDataVersionada(DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out string[][] lista, out string[][] listaVersion, out decimal? magnitudRpf, out decimal? magnitudRpfVersion)
        {
            lista = (new List<string[]>()).ToArray();
            listaVersion = (new List<string[]>()).ToArray();
            magnitudRpf = null;
            magnitudRpfVersion = null;

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<string[][]>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteAsignacionRRPFyRRSFMatriz);
                listaVersion = GetDataSerializedPreviousVersion<string[][]>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteAsignacionRRPFyRRSFMatriz);

                magnitudRpf = GetDataSerializedVersion<decimal?>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteAsignacionRRPFyRRSFValor);
                magnitudRpfVersion = GetDataSerializedPreviousVersion<decimal?>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteAsignacionRRPFyRRSFValor);
            }
            else
            {
                ReporteAsignacionRRPFyRRSDataReporte(fechaInicial, out lista, out magnitudRpf);
            }
        }

        private void ReporteAsignacionRRPFyRRSExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            string[][] lista;
            decimal? magnitudRpf;
            this.ReporteAsignacionRRPFyRRSDataReporteExcel(fecha1, out lista, out magnitudRpf);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "RRPF_RRSF", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptAsignacionRRPFyRRSF(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, null, magnitudRpf, null);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        /// <summary>
        /// Get magnitud rpf
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public decimal? GetMagnitudRPF(DateTime fecha)
        {
            decimal? _Rpf = null;
            var rpf_grupodat = FactorySic.GetPrGrupodatRepository().ObtenerParametroGeneral(fecha).Find(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiRpf);
            if (rpf_grupodat != null) { _Rpf = decimal.Parse(rpf_grupodat.Formuladat); }

            return _Rpf;
        }

        #endregion

        #endregion

        #region INFORMACIÓN SOBRE INTERCAMBIOS DE ELECTRICIDAD

        // 3.13.2.37.	Registro de los flujos (MW y MVAr) cada 30 minutos de los enlaces internacionales.
        #region REPORTE REGISTRO FLUJOS ENLACES INTERNACIONALES

        /// <summary>
        /// ReporteRegistroFlujosEIDataVersionada
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        /// <param name="listaPto"></param>
        /// <param name="listaPtoVersion"></param>
        public void ReporteRegistroFlujosEIDataVersionada(DateTime fechaInicial, DateTime fechaFinal
                     , string versionAnexoA, out List<MeMedicion48DTO> lista, out List<MeMedicion48DTO> listaVersion, out List<MePtomedicionDTO> listaPto, out List<MePtomedicionDTO> listaPtoVersion)
        {
            lista = new List<MeMedicion48DTO>();
            listaVersion = new List<MeMedicion48DTO>();
            listaPto = new List<MePtomedicionDTO>();
            listaPtoVersion = new List<MePtomedicionDTO>();

            if (versionAnexoA != "")
            {
                lista = GetDataSerializedVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRegistroFlujosEnlacesInternacionales);
                listaVersion = GetDataSerializedPreviousVersion<List<MeMedicion48DTO>>(versionAnexoA, ConstantesVersionAnexoAPR5.IndexReporteRegistroFlujosEnlacesInternacionales);
            }
            else
            {
                listaPto = UtilAnexoAPR5.ListarPtoMedicionFromMeReporptomed(FactorySic.GetMeReporptomedRepository().GetByCriteria(ConstantesPR5ReportesServicio.ReporcodiFlujoLineaTIEAnexoA, -1));
                string ptomedicodis = string.Join(",", listaPto.Select(x => x.Ptomedicodi));
                lista.AddRange(ListarDataReporteM48FromCargaDatos(ConstantesPR5ReportesServicio.LectcodiFlujoPotencia, ConstantesPR5ReportesServicio.TipoinfoMW, ptomedicodis, fechaInicial, fechaFinal));
                lista.AddRange(ListarDataReporteM48FromCargaDatos(ConstantesPR5ReportesServicio.LectcodiFlujoPotencia, ConstantesPR5ReportesServicio.TipoinfoMVAR, ptomedicodis, fechaInicial, fechaFinal));
            }
        }

        private void ReporteRegistroFlujosEIExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, bool flagVisiblePtomedicodi, DateTime fecha1, DateTime fecha2, string versionAnexoA)
        {
            List<MeMedicion48DTO> lista, listaVersion;
            List<MePtomedicionDTO> listaPto, listaPtoVersion;
            this.ReporteRegistroFlujosEIDataVersionada(fecha1, fecha2, versionAnexoA, out lista, out listaVersion, out listaPto, out listaPtoVersion);

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "FLUJOS_INTERCONEXIÓN", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptRegistroFlujosEI(ws, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault,
                                                flagVisiblePtomedicodi, fecha1, fecha2, lista, listaVersion, listaPto, listaPtoVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        #endregion

        #region NOTAS

        #region OBSERVACION

        /// <summary>
        /// Lista  de observaciones
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="versionAnexoA"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="lista"></param>
        /// <param name="listaVersion"></param>
        public void ListarNotasObservaciones(DateTime fecha, string versionAnexoA, int mrepcodi, out List<SiNotaDTO> lista, out List<SiNotaDTO> listaVersion)
        {
            lista = new List<SiNotaDTO>();
            listaVersion = new List<SiNotaDTO>();

            int verscodi = versionAnexoA != string.Empty ? Convert.ToInt32(versionAnexoA) : -1;

            if (versionAnexoA != "")
            {
                lista = this.GetByCriteriaSiNotas(fecha, mrepcodi, verscodi);

                SiVersionDTO versAnterior = this.GetVersionIEDOAnterior(versionAnexoA, mrepcodi);
                listaVersion = versAnterior != null ? this.GetByCriteriaSiNotas(fecha, mrepcodi, versAnterior.Verscodi) : new List<SiNotaDTO>();
            }
            else
            {
                lista = this.GetByCriteriaSiNotas(fecha, mrepcodi, verscodi);
            }
        }

        private void ReporteNotasObservacionesExcel(ref ExcelWorksheet ws, ExcelPackage xlPackage, string pathLogo, DateTime fecha1, DateTime fecha2, string versionAnexoA, int mrepcodi)
        {
            List<SiNotaDTO> lista, listaVersion;
            this.ListarNotasObservaciones(fecha1, versionAnexoA, mrepcodi, out lista, out listaVersion);

            string sheet = string.Empty;
            string titulo = string.Empty;
            if (mrepcodi == ConstantesAnexoAPR5.IndexObservacion)
            {
                sheet = "OBS";
                titulo = "Observaciones";
            }

            if (mrepcodi == ConstantesAnexoAPR5.IndexRecomendacionConclusion)
            {
                sheet = "CONCLUSIONES";
                titulo = "Recomendaciones y Conclusiones";
            }

            UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, sheet, fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
            UtilAnexoAPR5.GeneraRptObservaciones(ws, titulo, ConstantesPR5ReportesServicio.FilaIniTituloDefault, ConstantesPR5ReportesServicio.ColIniTituloDefault, fecha1, fecha2, lista, listaVersion);
            UtilAnexoAPR5.ExcelFooterGeneral(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
        }

        #endregion

        #endregion

        #endregion

        #region Exportacion_Excel_Ejecutivo_Semanal

        /// <summary>
        /// Genera el excel por cada reporte en separado
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="directorioDestino"></param>
        /// <param name="reporcodi"></param>
        /// <param name="nombreArchivo"></param>
        public void GenerarArchivoExcelEjecutivoSemanal(int verscodi, string directorioDestino, int reporcodi,
                                                out string nombreArchivo)
        {
            var objVersion = GetByIdSiVersion(verscodi);
            DateTime fechaInicio = objVersion.Versfechaperiodo;
            DateTime fechaFin = fechaInicio.AddDays(6);

            SiMenureporteDTO objItem = GetByIdMenuReporte(reporcodi);

            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = UtilSemanalPR5.ObtenerFechasEjecutivoSemanal(fechaInicio, fechaFin, ConstantesPR5ReportesServicio.TipoVistaIndividual),
                Mrepcodi = reporcodi,
                Verscodi = verscodi,
                ListaItem = ListarItemFromSiMenureporte()
            };

            string pathAlternativo = GetPathPrincipal();
            nombreArchivo = GetNombreArchivoEjecutivoSemanal(objItem.Repabrev, fechaInicio, fechaFin, verscodi);

            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelEjecutivoSemanal;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            //La eliminación los archivos temporales de vista previa se realiza en el módulo de Intervenciones
            FileServer.CopiarFileAlterFinalOrigen(GetCarpetaPlantillaEjecutivoSemanal(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelEjecutivoSemanal, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);
            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;
                    var objFecha = objFiltro.ObjFecha;

                    switch (reporcodi)
                    {
                        case ConstantesEjecutivoSemanalPR5.IndexResumenRelevante:
                            #region " 1 - Resumen Relevante"
                            ws = xlPackage.Workbook.Worksheets[1];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexResumenRelevante;
                            GenerarExcelResumenRelevante(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 1, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexIngresoOpComercSEIN:
                            #region " 2 - Ingreso Operaciones Sein"
                            ws = xlPackage.Workbook.Worksheets[2];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexIngresoOpComercSEIN;
                            GenerarExcelIngresoRetiroOpComercialSemanal(ws, objFecha, 1, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 2, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexRetiroOpComercSEIN:
                            #region "2 - Retiro Operaciones Sein"
                            ws = xlPackage.Workbook.Worksheets[2];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexRetiroOpComercSEIN;
                            GenerarExcelIngresoRetiroOpComercialSemanal(ws, objFecha, 2, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 2, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexProdTipoGen:
                            #region "3 - Produccion por tipo de generacion"
                            ws = xlPackage.Workbook.Worksheets[3];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdTipoGen;
                            GenerarExcelProduccionTipoGenEject(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 3, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexProdTipoRecurso:
                            #region "4 - Produccion por tipo de recurso energetico"    
                            ws = xlPackage.Workbook.Worksheets[4];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdTipoRecurso;
                            GenerarExcelProduccionTipoRecursoEnergeticoSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 4, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexProdRER:
                            #region "5 - Produccion por RER"    
                            ws = xlPackage.Workbook.Worksheets[5];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdRER;
                            GenerarExcelProduccionPorRERSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 5, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexFactorPlantaRER:
                            #region "6 - Factor Planta de los RER"    
                            ws = xlPackage.Workbook.Worksheets[6];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexFactorPlantaRER;
                            GenerarExcelFactorPlantaRERSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 6, 1);
                            #endregion
                            break;
                        case ConstantesEjecutivoSemanalPR5.IndexParticipacionEmpresas:
                            #region  7 Participación de la producción por empresas Integrantes 
                            ws = xlPackage.Workbook.Worksheets[7];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexParticipacionEmpresas;
                            GenerarExcelProduccionEmpresasByTipoSemanal(ws, objFecha, objFiltro); // 5s
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 7, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaTipoGeneracionEjecut:
                            #region "8 - Maxima Demanda de potencia por tipo generación"    
                            ws = xlPackage.Workbook.Worksheets[8];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaTipoGeneracionEjecut;
                            GenerarExcelCargarMaximaDemandaTipoGeneracionSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 8, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaXEmpresaEjecut:
                            #region "9 - Participación de las empresas integrantes en la máxima demanda" 
                            ws = xlPackage.Workbook.Worksheets[9];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaXEmpresaEjecut;
                            GenerarExcelCargarMaximaDemandaXEmpresaSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 9, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexDemandaXAreaOpeEjecut:
                            #region "10 - EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN"    
                            ws = xlPackage.Workbook.Worksheets[10];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexDemandaXAreaOpeEjecut;
                            GenerarExcelCargarDemandaXAreaOpeSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 10, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexVolUtilEmbLag:
                            #region "11 - Volumen Util Embalse y lagunas"
                            ws = xlPackage.Workbook.Worksheets[11];
                            GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 1, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 11, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexEvolucionVolEmbLag:
                            #region "12 - Evolucion Volumenes"
                            ws = xlPackage.Workbook.Worksheets[12];
                            GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 2, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 12, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexPromCaudales:
                            #region "13 - Promedio semanal de caudales"
                            ws = xlPackage.Workbook.Worksheets[13];
                            GenerarExcelPromedioSemanalCaudales(ws, objFecha, 1, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 13, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexEvolucionCaudalesEjecut:
                            #region "14 - Evolucion de  caudales"
                            ws = xlPackage.Workbook.Worksheets[14];
                            GenerarExcelPromedioSemanalCaudales(ws, objFecha, 2, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 14, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexEvolCostosOperacionEjecutados:
                            #region "15 - Costo de Operacion Acumulado"
                            ws = xlPackage.Workbook.Worksheets[15];
                            GenerarExcelCostoOperacionAcumulado(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 15, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm:
                            #region "16 - Costo Marginal Promedio Semanal"
                            ws = xlPackage.Workbook.Worksheets[16];
                            GenerarExcelCostoMarginalPromedioSem(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 16, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexFlujoMaximoInterconexionesEjecut:
                            #region "17 - Flujo Maximo Interconexiones"
                            ws = xlPackage.Workbook.Worksheets[17];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexFlujoMaximoInterconexionesEjecut;
                            GenerarExcelFlujoMaxInterconexiones(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 17, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexHorasCongestionAreaOpeEjecut:
                            #region "18 - Horas de Congestion"
                            ws = xlPackage.Workbook.Worksheets[18];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexHorasCongestionAreaOpeEjecut;
                            GenerarExcelHorasCongestionAreaOperativa(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 18, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexConsumoCombustibleEjecut:
                            #region "19- Consumo de Combustible"
                            ws = xlPackage.Workbook.Worksheets[19];
                            GenerarExcelConsumoCombustible(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 19, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexIntercambioInternacionalesEjecut:
                            #region "20 - Intercambios Internacionales de energia"
                            ws = xlPackage.Workbook.Worksheets[20];
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexIntercambioInternacionalesEjecut;
                            GenerarExcelIntercambiosInternacioles(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 20, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexEventoFallaSuministroEnergEjecut:
                            #region "21 - Evento Fallas Cier"
                            ws = xlPackage.Workbook.Worksheets[21];
                            GenerarExcelFallasCier(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 21, 1);
                            #endregion
                            break;

                        case ConstantesEjecutivoSemanalPR5.IndexEventoDetalleEvento:
                            #region " 22 - Detalle de Eventos"
                            ws = xlPackage.Workbook.Worksheets[22];
                            int nroHojas = 0;
                            objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEventoDetalleEvento;
                            GenerarExcelDetalleEventosEjecutivo(ws, xlPackage, objFiltro, out nroHojas);
                            UtilAnexoAPR5.EscogerSheetAExportarEventos(xlPackage, 22, 1);
                            #endregion
                            break;
                    }

                    if (ws != null)
                    {
                        xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();

                        ws.View.ZoomScale = 100;
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                        xlPackage.SaveAs(archivoExcel);
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }

                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }

            }

            //eliminar carpeta temporal de la plantilla
            System.IO.File.Delete(rutaPlantillaLocal);
        }

        /// <summary>
        /// Genera el excel de todo el Informe Semanal, listo para ser descargado
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelTodoEjecutivoSemanal(int verscodi, out string fileName)
        {
            var objVersion = GetByIdSiVersion(verscodi);
            DateTime fechaInicio = objVersion.Versfechaperiodo;
            DateTime fechaFin = fechaInicio.AddDays(6);

            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = UtilSemanalPR5.ObtenerFechasEjecutivoSemanal(fechaInicio, fechaFin, ConstantesPR5ReportesServicio.TipoVistaGrupal),
                Verscodi = verscodi,
                ListaItem = ListarItemFromSiMenureporte()
            };
            var objFecha = objFiltro.ObjFecha;

            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = GetPathPrincipal();
            var nombreArchivo = GetNombreArchivoEjecutivoSemanal("", fechaInicio, fechaFin, verscodi);
            fileName = nombreArchivo;
            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelEjecutivoSemanal;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(GetCarpetaPlantillaEjecutivoSemanal(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelEjecutivoSemanal, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);


            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;

                    #region " 1 - Resumen Relevante"
                    ws = xlPackage.Workbook.Worksheets[1];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexResumenRelevante;
                    GenerarExcelResumenRelevante(ws, objFecha, objFiltro);
                    #endregion

                    #region " 2 - Ingreso Operaciones Sein"
                    ws = xlPackage.Workbook.Worksheets[2];
                    GenerarExcelIngresoRetiroOpComercialSemanal(ws, objFecha, -1, objFiltro);
                    #endregion

                    #region "3 - Produccion por tipo de generacion"
                    ws = xlPackage.Workbook.Worksheets[3];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdTipoGen;
                    GenerarExcelProduccionTipoGenEject(ws, objFecha, objFiltro);
                    #endregion

                    #region "4 - Produccion por tipo de recurso energetico"    
                    ws = xlPackage.Workbook.Worksheets[4];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdTipoRecurso;
                    GenerarExcelProduccionTipoRecursoEnergeticoSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region "5 - Produccion por RER"    
                    ws = xlPackage.Workbook.Worksheets[5];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdRER;
                    GenerarExcelProduccionPorRERSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region "6 - Factor Planta de los RER"    
                    ws = xlPackage.Workbook.Worksheets[6];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexFactorPlantaRER;
                    GenerarExcelFactorPlantaRERSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region  "7 - Participación de la producción por empresas Integrantes"
                    ws = xlPackage.Workbook.Worksheets[7];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexParticipacionEmpresas;
                    GenerarExcelProduccionEmpresasByTipoSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region "8 - Maxima Demanda de potencia por tipo generación"    
                    ws = xlPackage.Workbook.Worksheets[8];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaTipoGeneracionEjecut;
                    GenerarExcelCargarMaximaDemandaTipoGeneracionSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region "9 - Participación de las empresas integrantes en la máxima demanda"    
                    ws = xlPackage.Workbook.Worksheets[9];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaXEmpresaEjecut;
                    GenerarExcelCargarMaximaDemandaXEmpresaSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region "10 - EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN"    
                    ws = xlPackage.Workbook.Worksheets[10];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexDemandaXAreaOpeEjecut;
                    GenerarExcelCargarDemandaXAreaOpeSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region "11 - Volumen Util Embalse y lagunas"
                    ws = xlPackage.Workbook.Worksheets[11];
                    GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 1, ConstantesEjecutivoSemanalPR5.IndexVolUtilEmbLag, objFiltro);
                    #endregion

                    #region "12 - Evolucion Volumenes"
                    ws = xlPackage.Workbook.Worksheets[12];
                    GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 2, ConstantesEjecutivoSemanalPR5.IndexEvolucionVolEmbLag, objFiltro);
                    #endregion

                    #region "13 - Promedio semanal de caudales"
                    ws = xlPackage.Workbook.Worksheets[13];
                    GenerarExcelPromedioSemanalCaudales(ws, objFecha, 1, ConstantesEjecutivoSemanalPR5.IndexPromCaudales, objFiltro);
                    #endregion

                    #region "14 - Evolucion de  caudales"
                    ws = xlPackage.Workbook.Worksheets[14];
                    GenerarExcelPromedioSemanalCaudales(ws, objFecha, 2, ConstantesEjecutivoSemanalPR5.IndexEvolucionCaudalesEjecut, objFiltro);
                    #endregion

                    #region "15 - Costo de Operacion Acumulado"
                    ws = xlPackage.Workbook.Worksheets[15];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEvolCostosOperacionEjecutados;
                    GenerarExcelCostoOperacionAcumulado(ws, objFiltro);
                    #endregion

                    #region "16 - Costo Marginal Promedio Semanal"
                    ws = xlPackage.Workbook.Worksheets[16];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm;
                    GenerarExcelCostoMarginalPromedioSem(ws, objFiltro);
                    #endregion

                    #region "17 - Flujo Maximo Interconexiones"
                    ws = xlPackage.Workbook.Worksheets[17];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexFlujoMaximoInterconexionesEjecut;
                    GenerarExcelFlujoMaxInterconexiones(ws, objFecha, objFiltro);
                    #endregion

                    #region "18 - Horas de Congestion"
                    ws = xlPackage.Workbook.Worksheets[18];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexHorasCongestionAreaOpeEjecut;
                    GenerarExcelHorasCongestionAreaOperativa(ws, objFecha, objFiltro);
                    #endregion

                    #region "19- Consumo de Combustible"
                    ws = xlPackage.Workbook.Worksheets[19];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexConsumoCombustibleEjecut;
                    GenerarExcelConsumoCombustible(ws, objFiltro);
                    #endregion

                    #region "20 - Intercambios Internacionales de energia"
                    ws = xlPackage.Workbook.Worksheets[20];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexIntercambioInternacionalesEjecut;
                    GenerarExcelIntercambiosInternacioles(ws, objFecha, objFiltro);
                    #endregion

                    #region "21 - Evento Fallas Cier"
                    ws = xlPackage.Workbook.Worksheets[21];
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEventoFallaSuministroEnergEjecut;
                    GenerarExcelFallasCier(ws, objFiltro);
                    #endregion

                    #region "22 - Detalle de Eventos"
                    ws = xlPackage.Workbook.Worksheets[22];
                    int nroHojas = 0;
                    objFiltro.Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEventoDetalleEvento;
                    GenerarExcelDetalleEventosEjecutivo(ws, xlPackage, objFiltro, out nroHojas);
                    #endregion

                    xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();

                    if (ws != null)
                    {
                        ws.View.ZoomScale = 100;
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                        xlPackage.SaveAs(archivoExcel);

                        return archivoExcel.Name;
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }
        }

        /// <summary>
        /// MoverArchivoEjecutivoSemanalFileServer
        /// </summary>
        /// <param name="filename"></param>
        public void MoverArchivoEjecutivoSemanalFileServer(string filename)
        {
            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = GetPathPrincipal();

            FileServer.CopiarFileAlterFinal(directorioDestino, GetCarpetaEjecutivoSemanal(), filename, pathAlternativo);
        }

        /// <summary>
        /// GetNombreArchivoEjecutivoSemanal
        /// </summary>
        /// <param name="indexReporte"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetNombreArchivoEjecutivoSemanal(string indexReporte, DateTime fechaInicio, DateTime fechaFin, int version)
        {
            string nombReporte = indexReporte != null ? indexReporte : "";
            nombReporte = nombReporte.Replace("Index", "");
            nombReporte = nombReporte.Replace("Semanal", "");

            var semIni = EPDate.f_numerosemana_y_anho(fechaInicio);
            var numSemIni = semIni.Item1;
            var anioSemIni = semIni.Item2;

            var semFin = EPDate.f_numerosemana_y_anho(fechaFin);
            var numSemFin = semFin.Item1;
            var anioSemFin = semFin.Item2;

            var nombreArchivo = "";
            if (anioSemIni == anioSemFin)
            {
                if (numSemIni == numSemFin)
                    nombreArchivo = string.Format("Ejecutivo_Semanal{3}_SEM{0}_{1}_{4}{2}", numSemIni, anioSemIni, ConstantesAppServicio.ExtensionExcel, nombReporte, version);
                else
                    nombreArchivo = string.Format("Ejecutivo_Semanal{4}_SEM{0}-SEM{1}_{2}_{5}{3}", numSemIni, numSemFin, anioSemIni, ConstantesAppServicio.ExtensionExcel, nombReporte, version);
            }
            else
            {
                if (numSemIni == numSemFin)
                    nombreArchivo = ""; //no deberia ocurrir
                else
                    nombreArchivo = string.Format("Ejecutivo_Semanal{5}_SEM{0}_{1}-SEM{2}_{3}_{6}{4}", numSemIni, anioSemIni, numSemFin, anioSemFin, ConstantesAppServicio.ExtensionExcel, nombReporte, version);
            }

            return nombreArchivo;
        }

        /// <summary>
        /// GetNombreArchivoLogEjecutivoSemanal
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetNombreArchivoLogEjecutivoSemanal(DateTime fechaInicio, DateTime fechaFin, int version)
        {
            string fileName = GetNombreArchivoEjecutivoSemanal("", fechaInicio, fechaFin, version);
            fileName = fileName.Replace("Ejecutivo_Semanal", "Log_EjecSemanal");

            return fileName;
        }

        #endregion

        #region Exportacion_Excel_Informe_Semanal

        /// <summary>
        /// Genera el excel por cada reporte en separado
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="directorioDestino"></param>
        /// <param name="reporcodi"></param>
        /// <param name="nombreArchivo"></param>
        public void GenerarArchivoExcelInformeSemanal(int verscodi, string directorioDestino, int reporcodi,
                                                out string nombreArchivo)
        {
            var objVersion = GetByIdSiVersion(verscodi);
            DateTime fechaInicio = objVersion.Versfechaperiodo;
            DateTime fechaFin = fechaInicio.AddDays(6);

            SiMenureporteDTO objItem = GetByIdMenuReporte(reporcodi);

            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = UtilSemanalPR5.ObtenerFechasInformeSemanal(fechaInicio, fechaFin, ConstantesPR5ReportesServicio.TipoVistaIndividual),
                Mrepcodi = reporcodi,
                Verscodi = verscodi,
                ListaItem = ListarItemFromSiMenureporte()
            };

            string pathAlternativo = GetPathPrincipal();
            nombreArchivo = GetNombreArchivoInformeSemanal(objItem.Repabrev, fechaInicio, fechaFin, verscodi);

            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelInformeSemanal;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            //La eliminación los archivos temporales de vista previa se realiza en el módulo de Intervenciones
            FileServer.CopiarFileAlterFinalOrigen(GetCarpetaPlantillaInformeSemanal(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelInformeSemanal, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);
            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;
                    var objFecha = objFiltro.ObjFecha;

                    switch (reporcodi)
                    {
                        case ConstantesInformeSemanalPR5.IndexResumenRelevante:
                            #region " 1 - Resumen Relevante"
                            ws = xlPackage.Workbook.Worksheets[1];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexResumenRelevante;
                            GenerarExcelResumenRelevante(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 1, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexResumenProduccion:
                            #region " 1 - Resumen Producción"
                            ws = xlPackage.Workbook.Worksheets[2];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexResumenProduccion;
                            GenerarExcelResumenProduccion(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 2, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemIngresoOpComercSEIN:
                            #region " 2 - Ingreso Operaciones Sein"
                            ws = xlPackage.Workbook.Worksheets[3];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemIngresoOpComercSEIN;
                            GenerarExcelIngresoRetiroOpComercialSemanal(ws, objFecha, 1, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 3, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemRetiroOpComercSEIN:
                            #region "2 - Retiro Operaciones Sein"
                            ws = xlPackage.Workbook.Worksheets[3];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemRetiroOpComercSEIN;
                            GenerarExcelIngresoRetiroOpComercialSemanal(ws, objFecha, 2, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 3, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemProdTipoGen:
                            #region "3 - Produccion por tipo de generacion"
                            ws = xlPackage.Workbook.Worksheets[4];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdTipoGen;
                            GenerarExcelProduccionTipoGen(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 4, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemProdTipoRecurso:
                            #region "4 - Produccion por tipo de recurso energetico"    
                            ws = xlPackage.Workbook.Worksheets[5];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdTipoRecurso;
                            GenerarExcelProduccionTipoRecursoEnergetico(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 5, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemProdRER:
                            #region "5 - Produccion por RER"    
                            ws = xlPackage.Workbook.Worksheets[6];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdRER;
                            GenerarExcelProduccionPorRERSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 6, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemFactorPlantaRER:
                            #region "6 - Factor Planta de los RER"    
                            ws = xlPackage.Workbook.Worksheets[7];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemFactorPlantaRER;
                            GenerarExcelFactorPlantaRERSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 7, 1);
                            #endregion
                            break;
                        case ConstantesInformeSemanalPR5.IndexSemParticipacionEmpresas:
                            #region  7 Participación de la producción por empresas Integrantes 
                            ws = xlPackage.Workbook.Worksheets[8];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemParticipacionEmpresas;
                            GenerarExcelProduccionEmpresasByTipoSemanal(ws, objFecha, objFiltro); //5s                            
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 8, 1);
                            #endregion
                            break;
                        case ConstantesInformeSemanalPR5.IndexMaximaDemandaTipoGeneracionSemanal:
                            #region "8 - Maxima Demanda de potencia por tipo generación"    
                            ws = xlPackage.Workbook.Worksheets[9];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexMaximaDemandaTipoGeneracionSemanal;
                            GenerarExcelCargarMaximaDemandaTipoGeneracionSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 9, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexMaximaDemandaXEmpresaSemanal:
                            #region "9 - Participación de las empresas integrantes en la máxima demanda"    
                            ws = xlPackage.Workbook.Worksheets[10];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexMaximaDemandaXEmpresaSemanal;
                            GenerarExcelCargarMaximaDemandaXEmpresaSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 10, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexDemandaXAreaOpeSemanal:
                            #region "10 - EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN"
                            ws = xlPackage.Workbook.Worksheets[11];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaXAreaOpeSemanal;
                            GenerarExcelCargarDemandaXAreaOpeSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 11, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexDemandaGUMaximaDemandaSemanal:
                            #region "11 - Evolucion Demanda Energia Grandes Usuarios"
                            ws = xlPackage.Workbook.Worksheets[12];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaGUMaximaDemandaSemanal;
                            GenerarExcelDemandaGUMaximaDemandaSemanal(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 12, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexDiagramaCargaGURangoPotencia:
                            #region  12 region GU rangos
                            ws = xlPackage.Workbook.Worksheets[13];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDiagramaCargaGURangoPotencia;
                            GenerarExcelGUCargaRangos(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 13, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexDemandaGUXAreaOperativa:
                            #region "13 - Demanda de energía por área operativa de los GU"
                            ws = xlPackage.Workbook.Worksheets[14];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaGUXAreaOperativa;
                            GenerarExcelDemandaGUareaOperativa(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 14, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemVolUtilEmbLag:
                            #region "14 - Volumen Util Embalse y lagunas"
                            ws = xlPackage.Workbook.Worksheets[15];
                            GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 1, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 15, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexEvolucionVolEmbLagSem:
                            #region "15 - Evolucion Volumenes"
                            ws = xlPackage.Workbook.Worksheets[16];
                            GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 2, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 16, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemPromCaudales:
                            #region "16 - Promedio semanal de caudales"
                            ws = xlPackage.Workbook.Worksheets[17];
                            GenerarExcelPromedioSemanalCaudales(ws, objFecha, 1, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 17, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexEvolucionCaudalesSem:
                            #region "17 - Evolucion de  caudales"
                            ws = xlPackage.Workbook.Worksheets[18];
                            GenerarExcelPromedioSemanalCaudales(ws, objFecha, 2, reporcodi, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 18, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexConsumoCombustibleSemanal:
                            #region "18 - Consumo de Combustible"
                            ws = xlPackage.Workbook.Worksheets[19];
                            GenerarExcelConsumoCombustible(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 19, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemEvolCostosOperacionEjecutados:
                            #region "19 - Costo de Operacion Acumulado"
                            ws = xlPackage.Workbook.Worksheets[20];
                            GenerarExcelCostoOperacionAcumulado(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 20, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesProm:
                            #region "20 - Costo Marginal Promedio Semanal"
                            ws = xlPackage.Workbook.Worksheets[21];
                            GenerarExcelCostoMarginalPromedioSem(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 21, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesPorArea:
                            #region "21 - Costo Marginal Promedio Semanal"
                            ws = xlPackage.Workbook.Worksheets[22];
                            GenerarExcelCostoMarginalPorAreaOperativa(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 22, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexTensionBarras500Semanal:
                            #region "22 - Tension en Barras 500"
                            ws = xlPackage.Workbook.Worksheets[23];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras500Semanal;
                            GenerarExcelTensionBarras(ws, objFecha, 500, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 23, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexTensionBarras220Semanal:
                            #region "23 - Tension en Barras 220"
                            ws = xlPackage.Workbook.Worksheets[24];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras220Semanal;
                            GenerarExcelTensionBarras(ws, objFecha, 220, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 24, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexTensionBarras138Semanal:
                            #region "24 - Tension en Barras 138"
                            ws = xlPackage.Workbook.Worksheets[25];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras138Semanal;
                            GenerarExcelTensionBarras(ws, objFecha, 138, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 25, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexFlujoMaximoInterconexiones:
                            #region "25 - Flujo Maximo Interconexiones"
                            ws = xlPackage.Workbook.Worksheets[26];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexFlujoMaximoInterconexiones;
                            GenerarExcelFlujoMaxInterconexiones(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 26, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexHorasCongestionAreaOpeSemanal:
                            #region "26 - Horas de Congestion"
                            ws = xlPackage.Workbook.Worksheets[27];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexHorasCongestionAreaOpeSemanal;
                            GenerarExcelHorasCongestionAreaOperativa(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 27, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexIntercambioInternacionalesSemanal:
                            #region "27 - Intercambios Internacionales de energia"
                            ws = xlPackage.Workbook.Worksheets[28];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexIntercambioInternacionalesSemanal;
                            GenerarExcelIntercambiosInternacioles(ws, objFecha, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 28, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexEventoFallaSuministroEnerg:
                            #region "28 - Evento Fallas Cier"
                            ws = xlPackage.Workbook.Worksheets[29];
                            GenerarExcelFallasCier(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 29, 1);
                            #endregion
                            break;

                        case ConstantesInformeSemanalPR5.IndexDetalleEventos:
                            #region "29 - Detalle de eventos"
                            ws = xlPackage.Workbook.Worksheets[30];
                            objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDetalleEventos;
                            GenerarExcelDetalleEventos(ws, objFiltro);
                            UtilAnexoAPR5.EscogerSheetAExportar(xlPackage, 30, 1);

                            #endregion
                            break;

                    }
                    if (ws != null)
                    {
                        xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();
                        ws.View.ZoomScale = 100;

                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                        xlPackage.SaveAs(archivoExcel);
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }

                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }

            //eliminar carpeta temporal de la plantilla
            System.IO.File.Delete(rutaPlantillaLocal);
        }

        /// <summary>
        /// Genera el excel de todo el Informe Semanal, listo para ser descargado
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelTodoInformeSemanal(int verscodi, out string fileName)
        {
            var objVersion = GetByIdSiVersion(verscodi);
            DateTime fechaInicio = objVersion.Versfechaperiodo;
            DateTime fechaFin = fechaInicio.AddDays(6);

            InfSGIFiltroReporte objFiltro = new InfSGIFiltroReporte()
            {
                ObjFecha = UtilSemanalPR5.ObtenerFechasInformeSemanal(fechaInicio, fechaFin, ConstantesPR5ReportesServicio.TipoVistaGrupal),
                Verscodi = verscodi,
                ListaItem = ListarItemFromSiMenureporte()
            };
            FechasPR5 objFecha = objFiltro.ObjFecha;

            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = GetPathPrincipal();
            var nombreArchivo = GetNombreArchivoInformeSemanal("", fechaInicio, fechaFin, verscodi);
            fileName = nombreArchivo;
            string rutaPlantillaLocal = directorioDestino + ConstantesPR5ReportesServicio.PantillaExcelInformeSemanal;
            FileInfo newFile = new FileInfo(rutaPlantillaLocal);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaPlantillaLocal);
            }

            FileServer.CopiarFileAlterFinalOrigen(GetCarpetaPlantillaInformeSemanal(), directorioDestino, ConstantesPR5ReportesServicio.PantillaExcelInformeSemanal, pathAlternativo);

            FileInfo plantillaExcel = new FileInfo(rutaPlantillaLocal);

            using (ExcelPackage xlPackage = new ExcelPackage(plantillaExcel))
            {
                try
                {
                    ExcelWorksheet ws = null;

                    #region " 1 - Resumen Relevante"
                    ws = xlPackage.Workbook.Worksheets[1];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexResumenRelevante;
                    GenerarExcelResumenRelevante(ws, objFecha, objFiltro);
                    #endregion

                    #region " 1 - Resumen Producción"
                    ws = xlPackage.Workbook.Worksheets[2];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexResumenProduccion;
                    GenerarExcelResumenProduccion(ws, objFecha, objFiltro);

                    #endregion

                    #region " 2 - Ingreso Operaciones Sein"
                    ws = xlPackage.Workbook.Worksheets[3];
                    GenerarExcelIngresoRetiroOpComercialSemanal(ws, objFecha, -1, objFiltro);
                    #endregion

                    #region "3 - Produccion por tipo de generacion"    
                    ws = xlPackage.Workbook.Worksheets[4];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdTipoGen;
                    GenerarExcelProduccionTipoGen(ws, objFecha, objFiltro);
                    #endregion

                    #region "4 - Produccion por tipo de recurso energetico"    
                    ws = xlPackage.Workbook.Worksheets[5];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdTipoRecurso;
                    GenerarExcelProduccionTipoRecursoEnergetico(ws, objFecha, objFiltro);
                    #endregion

                    #region "5 - Produccion por RER"    
                    ws = xlPackage.Workbook.Worksheets[6];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdRER;
                    GenerarExcelProduccionPorRERSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region "6 - Factor Planta de los RER"    
                    ws = xlPackage.Workbook.Worksheets[7];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemFactorPlantaRER;
                    GenerarExcelFactorPlantaRERSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region  "7 - Participación de la producción por empresas Integrantes"
                    ws = xlPackage.Workbook.Worksheets[8];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemParticipacionEmpresas;
                    GenerarExcelProduccionEmpresasByTipoSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region  "8 - region Maxima Demanda de potencia por tipo generación"
                    ws = xlPackage.Workbook.Worksheets[9];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexMaximaDemandaTipoGeneracionSemanal;
                    GenerarExcelCargarMaximaDemandaTipoGeneracionSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region  "9 - region Participación de las empresas integrantes en la máxima demanda"
                    ws = xlPackage.Workbook.Worksheets[10];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexMaximaDemandaXEmpresaSemanal;
                    GenerarExcelCargarMaximaDemandaXEmpresaSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region  "10 - region EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN"
                    ws = xlPackage.Workbook.Worksheets[11];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaXAreaOpeSemanal;
                    GenerarExcelCargarDemandaXAreaOpeSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region "11 - Evolucion Demanda Energia Grandes Usuarios"
                    ws = xlPackage.Workbook.Worksheets[12];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaGUMaximaDemandaSemanal;
                    GenerarExcelDemandaGUMaximaDemandaSemanal(ws, objFecha, objFiltro);
                    #endregion

                    #region  "12 - region GU rangos"
                    ws = xlPackage.Workbook.Worksheets[13];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDiagramaCargaGURangoPotencia;
                    GenerarExcelGUCargaRangos(ws, objFecha, objFiltro);
                    #endregion

                    #region  "13 - region GU Demanda energia por Área"
                    ws = xlPackage.Workbook.Worksheets[14];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaGUXAreaOperativa;
                    GenerarExcelDemandaGUareaOperativa(ws, objFecha, objFiltro);

                    #endregion

                    #region "14 - Volumen Util Embalse y lagunas"
                    ws = xlPackage.Workbook.Worksheets[15];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemVolUtilEmbLag;
                    GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 1, ConstantesInformeSemanalPR5.IndexSemVolUtilEmbLag, objFiltro);
                    #endregion

                    #region "15 - Evolucion Volumenes"
                    ws = xlPackage.Workbook.Worksheets[16];
                    GenerarExcelVolUtilEmbalsesLagunas(ws, objFecha, 2, ConstantesInformeSemanalPR5.IndexEvolucionVolEmbLagSem, objFiltro);
                    #endregion

                    #region "16 - Promedio semanal de caudales"
                    ws = xlPackage.Workbook.Worksheets[17];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemPromCaudales;
                    GenerarExcelPromedioSemanalCaudales(ws, objFecha, 1, ConstantesInformeSemanalPR5.IndexSemPromCaudales, objFiltro);
                    #endregion

                    #region "17 - Evolucion de  caudales"
                    ws = xlPackage.Workbook.Worksheets[18];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexEvolucionCaudalesSem;
                    GenerarExcelPromedioSemanalCaudales(ws, objFecha, 2, ConstantesInformeSemanalPR5.IndexEvolucionCaudalesSem, objFiltro);
                    #endregion

                    #region "18 - Consumo de Combustible"
                    ws = xlPackage.Workbook.Worksheets[19];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexConsumoCombustibleSemanal;
                    GenerarExcelConsumoCombustible(ws, objFiltro);
                    #endregion

                    #region "19 - Costo de Operacion Acumulado"
                    ws = xlPackage.Workbook.Worksheets[20];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosOperacionEjecutados;
                    GenerarExcelCostoOperacionAcumulado(ws, objFiltro);
                    #endregion

                    #region "20 - Costo Marginal Promedio Semanal"
                    ws = xlPackage.Workbook.Worksheets[21];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesProm;
                    GenerarExcelCostoMarginalPromedioSem(ws, objFiltro);
                    #endregion

                    #region "21 - Costo Marginal Promedio Semanal por Area"
                    ws = xlPackage.Workbook.Worksheets[22];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesPorArea;
                    GenerarExcelCostoMarginalPorAreaOperativa(ws, objFiltro);
                    #endregion

                    #region "22 - Tension en Barras 500"
                    ws = xlPackage.Workbook.Worksheets[23];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras500Semanal;
                    GenerarExcelTensionBarras(ws, objFecha, 500, objFiltro);
                    #endregion

                    #region "23 - Tension en Barras 220"
                    ws = xlPackage.Workbook.Worksheets[24];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras220Semanal;
                    GenerarExcelTensionBarras(ws, objFecha, 220, objFiltro);
                    #endregion

                    #region "24 - Tension en Barras 138"
                    ws = xlPackage.Workbook.Worksheets[25];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras138Semanal;
                    GenerarExcelTensionBarras(ws, objFecha, 138, objFiltro);
                    #endregion

                    #region "25 - Flujo Maximo Interconexiones"
                    ws = xlPackage.Workbook.Worksheets[26];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexFlujoMaximoInterconexiones;
                    GenerarExcelFlujoMaxInterconexiones(ws, objFecha, objFiltro);
                    #endregion

                    #region "26 - Horas de Congestion"
                    ws = xlPackage.Workbook.Worksheets[27];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexHorasCongestionAreaOpeSemanal;
                    GenerarExcelHorasCongestionAreaOperativa(ws, objFecha, objFiltro);
                    #endregion

                    #region "27 - Intercambios Internacionales de energia"
                    ws = xlPackage.Workbook.Worksheets[28];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexIntercambioInternacionalesSemanal;
                    GenerarExcelIntercambiosInternacioles(ws, objFecha, objFiltro);
                    #endregion

                    #region "28 - Evento Fallas Cier"
                    ws = xlPackage.Workbook.Worksheets[29];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexEventoFallaSuministroEnerg;
                    GenerarExcelFallasCier(ws, objFiltro);
                    #endregion

                    #region "29 - Detalle de eventos"
                    ws = xlPackage.Workbook.Worksheets[30];
                    objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexDetalleEventos;
                    GenerarExcelDetalleEventos(ws, objFiltro);
                    #endregion

                    xlPackage.Workbook.Worksheets.Select(x => x.View.ShowGridLines = false).ToList();

                    if (ws != null)
                    {
                        ws.View.ZoomScale = 100;
                        FileInfo archivoExcel = new FileInfo(Path.Combine(plantillaExcel.DirectoryName, nombreArchivo));
                        xlPackage.SaveAs(archivoExcel);

                        return archivoExcel.Name;
                    }
                    else
                    {
                        throw new Exception("No se generó el archivo Excel");
                    }
                }
                catch (Exception ex)
                {
                    Logger.Error(ConstantesAppServicio.LogError, ex);
                    throw ex;
                }
            }
        }

        /// <summary>
        /// MoverArchivoInformeSemanalFileServer
        /// </summary>
        /// <param name="filename"></param>
        public void MoverArchivoInformeSemanalFileServer(string filename)
        {
            string subcarpetaDestino = ConstantesPR5ReportesServicio.Directorio;
            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + subcarpetaDestino;
            string pathAlternativo = GetPathPrincipal();

            FileServer.CopiarFileAlterFinal(directorioDestino, GetCarpetaInformeSemanal(), filename, pathAlternativo);
        }

        /// <summary>
        /// GetNombreArchivoInformeSemanal
        /// </summary>
        /// <param name="indexReporte"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetNombreArchivoInformeSemanal(string indexReporte, DateTime fechaInicio, DateTime fechaFin, int version)
        {
            string nombReporte = indexReporte != null ? indexReporte : "";
            if (!string.IsNullOrEmpty(indexReporte))
            {
                nombReporte = nombReporte.Replace("Index", "");
                nombReporte = nombReporte.Replace("Semanal", "");
                nombReporte = "_" + nombReporte;
            }

            var semIni = EPDate.f_numerosemana_y_anho(fechaInicio);
            var numSemIni = semIni.Item1;
            var anioSemIni = semIni.Item2;

            var semFin = EPDate.f_numerosemana_y_anho(fechaFin);
            var numSemFin = semFin.Item1;
            var anioSemFin = semFin.Item2;

            var nombreArchivo = "";
            if (anioSemIni == anioSemFin)
            {
                if (numSemIni == numSemFin)
                    nombreArchivo = string.Format("Informe_Semanal{3}_SEM{0}_{1}_{4}{2}", numSemIni, anioSemIni, ConstantesAppServicio.ExtensionExcel, nombReporte, version);
                else
                    nombreArchivo = string.Format("Informe_Semanal{4}_SEM{0}-SEM{1}_{2}_{5}{3}", numSemIni, numSemFin, anioSemIni, ConstantesAppServicio.ExtensionExcel, nombReporte, version);
            }
            else
            {
                if (numSemIni == numSemFin)
                    nombreArchivo = ""; //no deberia ocurrir
                else
                    nombreArchivo = string.Format("Informe_Semanal{5}_SEM{0}_{1}-SEM{2}_{3}_{6}{4}", numSemIni, anioSemIni, numSemFin, anioSemFin, ConstantesAppServicio.ExtensionExcel, nombReporte, version);
            }

            return nombreArchivo;
        }

        /// <summary>
        /// GetNombreArchivoLogInformeSemanal
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="version"></param>
        /// <returns></returns>
        public string GetNombreArchivoLogInformeSemanal(DateTime fechaInicio, DateTime fechaFin, int version)
        {
            string fileName = GetNombreArchivoInformeSemanal("", fechaInicio, fechaFin, version);
            fileName = fileName.Replace("Informe_Semanal", "Log_Semanal");

            return fileName;
        }

        #endregion

        #region Copiar data de despacho procesada

        /// <summary>
        /// CopiarProdGenTotalizadaAnexoA
        /// </summary>
        /// <param name="dFechaPeriodo"></param>
        public void CopiarProdGenTotalizadaAnexoA(DateTime dFechaPeriodo)
        {
            servEjec.GuardarDespachoDiarioProdGen(dFechaPeriodo, dFechaPeriodo, ConstantesMedicion.TipoDatoDespachoEjecAnexoA, -1);
        }

        /// <summary>
        /// CopiarProdGenTotalizadaSemanal
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        public void CopiarProdGenTotalizadaSemanal(DateTime fechaIni, DateTime fechaFin)
        {
            //Si el anexo A no tiene datos entonces procesarlo
            List<MeDespachoProdgenDTO> listaDetalleBD = ListMeDespachoProdgens(ConstantesMedicion.TipoDatoDespachoEjecAnexoA, fechaIni, fechaFin, "-1");
            for (DateTime day = fechaIni; day <= fechaFin; day = day.AddDays(1))
            {
                if (!listaDetalleBD.Any(x => x.Dpgenfecha == day))
                {
                    CopiarProdGenTotalizadaAnexoA(day);
                }
            }

            //semanal
            servEjec.GuardarDespachoDiarioProdGen(fechaIni, fechaFin, ConstantesMedicion.TipoDatoDespachoEjec, ConstantesMedicion.TipoDatoDespachoProg);
        }

        #endregion

        #region Informe Ejecutivo e Informe Semanal

        #region Carga masiva Resumen e Interconexion

        /// <summary>
        /// ListarDetalleResumenProduccionGeneracion
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="filtroRER"></param>
        /// <returns></returns>
        public List<MeDespachoProdgenDTO> ListarDetalleResumenProduccionGeneracion(DateTime fechaInicial, DateTime fechaFinal, string filtroRER)
        {
            List<MeDespachoProdgenDTO> listaDetalleBD = ListMeDespachoProdgens(ConstantesMedicion.TipoDatoDespachoEjec, fechaInicial, fechaFinal, filtroRER);

            List<MeDespachoProdgenDTO> listaAgrup = new List<MeDespachoProdgenDTO>();
            foreach (var sublista in listaDetalleBD.GroupBy(x => new { x.Grupocodi, x.Fenergcodi })) //x.Dpgenfecha, 
            {
                decimal energiaH = sublista.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro).Sum(x => x.Dpgenvalor ?? 0) / 2;
                decimal energiaT = sublista.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo).Sum(x => x.Dpgenvalor ?? 0) / 2;
                decimal energiaE = sublista.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiEolica).Sum(x => x.Dpgenvalor ?? 0) / 2;
                decimal energiaS = sublista.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiSolar).Sum(x => x.Dpgenvalor ?? 0) / 2;

                listaAgrup.Add(new MeDespachoProdgenDTO()
                {
                    //FechaDesc = sublista.First().Dpgenfecha.ToString(ConstantesAppServicio.FormatoFecha),
                    Emprnomb = sublista.First().Emprnomb,
                    Central = sublista.First().Central,
                    Gruponomb = sublista.First().Gruponomb,
                    Fenergnomb = sublista.First().Fenergnomb,
                    Grupocodi = sublista.Key.Grupocodi,
                    Fenergcodi = sublista.Key.Fenergcodi,
                    EnergiaH = energiaH,
                    EnergiaT = energiaT,
                    EnergiaE = energiaE,
                    EnergiaS = energiaS,
                });
            }

            return listaAgrup.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Gruponomb).ThenBy(x => x.Fenergnomb).ToList();
        }

        /// <summary>
        /// ListarDetalleResumenProduccionGeneracionMD
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="fechaMD"></param>
        /// <returns></returns>
        public List<MeDespachoProdgenDTO> ListarDetalleResumenProduccionGeneracionMD(DateTime fechaInicial, DateTime fechaFinal, DateTime fechaMD)
        {
            //energia
            var listaDetalle = ListarDetalleResumenProduccionGeneracion(fechaInicial, fechaFinal, "-1");

            //potencia en el dia de la maxima demanda
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion48DTO> listaPotencia = this.servEjec.ListaDataMDGeneracionConsolidado48(fechaMD.Date, fechaMD.Date, ConstantesMedicion.IdTipogrupoCOES,
                                tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, true, Int32.Parse(ConstantesAppServicio.LectcodiEjecutadoHisto));

            //potencia por grupo despacho
            foreach (var item in listaDetalle)
            {
                decimal mw = UtilSemanalPR5.GenerarM48ValorMDResumenProdFromListaByFecha(listaPotencia.Where(x => x.Grupocodi == item.Grupocodi && x.Fenergcodi == item.Fenergcodi).ToList(),
                                                                                fechaMD, 0, 0, 0).Meditotal.GetValueOrDefault(0);
                item.PotenciaMD = mw;
            }

            return listaDetalle;
        }

        /// <summary>
        /// ListarDetalleResumenInterconexion
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public List<InfSGIFilaResumenInterc> ListarDetalleResumenInterconexion(DateTime fechaInicial, DateTime fechaFinal)
        {
            //Interconexiones Internacionales BD
            servEjec.ListaFlujo30minInterconexion48(ConstantesInterconexiones.FuenteTIEFlujoOldDesktop, fechaInicial, fechaFinal, out List<MeMedicion48DTO> listaInterconexion48,
                        out List<MeMedicion48DTO> listaTotalExp, out List<MeMedicion48DTO> listaTotalImp);

            //Generar reporte
            List<InfSGIFilaResumenInterc> lista = new List<InfSGIFilaResumenInterc>();

            DateTime fechaHora = fechaInicial;
            for (DateTime day = fechaInicial; day <= fechaFinal; day = day.AddDays(1))
            {
                var regExpMw = listaTotalExp.Find(x => x.Medifecha == day);
                var regImpMw = listaTotalImp.Find(x => x.Medifecha == day);

                for (int h = 1; h <= 48; h++)
                {
                    fechaHora = fechaHora.AddMinutes(30);

                    decimal valorEpxMW = (decimal?)regExpMw.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(regExpMw, null) ?? 0;
                    decimal valorImpMW = (decimal?)regImpMw.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(regImpMw, null) ?? 0;

                    lista.Add(new InfSGIFilaResumenInterc()
                    {
                        FechaHora = fechaHora,
                        FechaHoraDesc = fechaHora.ToString(ConstantesAppServicio.FormatoFechaFull),
                        EnergiaExp = valorEpxMW / 4.0m,
                        EnergiaImp = valorImpMW / 4.0m,
                    });
                }
            }
            return lista;
        }

        /// <summary>
        /// GenerarRptExcelResumenProduccionGeneracion
        /// </summary>
        /// <param name="fechaMD"></param>
        /// <returns></returns>
        public List<InfSGIFilaResumenInterc> ListarDetalleResumenInterconexionMD(DateTime fechaMD)
        {
            var listaDetalle = ListarDetalleResumenInterconexion(fechaMD.Date, fechaMD.Date);

            var regMediaHora = listaDetalle.Find(x => x.FechaHora == fechaMD);
            if (regMediaHora != null) regMediaHora.TieneMD = true;

            return listaDetalle;
        }

        /// <summary>
        /// GenerarRptExcelResumenProduccionGeneracion
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="filtroRER"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelResumenProduccionGeneracion(string ruta, DateTime fechaInicial, DateTime fechaFinal, string filtroRER, out string nameFile)
        {
            List<MeDespachoProdgenDTO> listaDetalleProduccion = ListarDetalleResumenProduccionGeneracion(fechaInicial, fechaFinal, filtroRER);

            //Nombre de archivo
            nameFile = string.Format("TablaResumen_Generación.xlsx");
            string rutaFile = ruta + nameFile;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }
            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                UtilSemanalPR5.GenerarHojaResumenProduccionGeneracion(xlPackage, "Reporte", fechaInicial, fechaFinal, DateTime.Today, listaDetalleProduccion, false);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// GenerarRptExcelResumenProduccionGeneracionMD
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="fechaMD"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelResumenProduccionGeneracionMD(string ruta, DateTime fechaInicial, DateTime fechaFinal, DateTime fechaMD, out string nameFile)
        {
            List<MeDespachoProdgenDTO> listaDetalleProduccion = ListarDetalleResumenProduccionGeneracionMD(fechaInicial, fechaFinal, fechaMD);

            //Nombre de archivo
            nameFile = string.Format("TablaResumen_MáximaDemanda.xlsx");
            string rutaFile = ruta + nameFile;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }
            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                UtilSemanalPR5.GenerarHojaResumenProduccionGeneracion(xlPackage, "Reporte", fechaInicial, fechaFinal, fechaMD, listaDetalleProduccion, true);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// GenerarRptExcelResumenDetalleInterconexion
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelResumenDetalleInterconexion(string ruta, DateTime fechaInicial, DateTime fechaFinal, out string nameFile)
        {
            List<InfSGIFilaResumenInterc> listaDetalleInterconexion = ListarDetalleResumenInterconexion(fechaInicial, fechaFinal);

            //Nombre de archivo
            nameFile = string.Format("TablaResumen_IntercambioInternacional.xlsx");
            string rutaFile = ruta + nameFile;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }
            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                UtilSemanalPR5.GenerarHojaDetalleInterconexion(xlPackage, "Reporte", fechaInicial, fechaFinal, DateTime.Today, listaDetalleInterconexion, false);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// GenerarRptExcelResumenDetalleInterconexionMD
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="fechaMD"></param>
        /// <param name="nameFile"></param>
        public void GenerarRptExcelResumenDetalleInterconexionMD(string ruta, DateTime fechaInicial, DateTime fechaFinal, DateTime fechaMD, out string nameFile)
        {
            List<InfSGIFilaResumenInterc> listaDetalleInterconexion = ListarDetalleResumenInterconexionMD(fechaMD);

            //Nombre de archivo
            nameFile = string.Format("TablaResumen_IntercambioInternacional_MáximaDemanda.xlsx");
            string rutaFile = ruta + nameFile;
            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }
            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                UtilSemanalPR5.GenerarHojaDetalleInterconexion(xlPackage, "Reporte", fechaInicial, fechaFinal, fechaMD, listaDetalleInterconexion, true);

                xlPackage.Save();
            }
        }

        #endregion

        #region Reporte de Resumen y Detalle

        private InfSGIResumenProd GetResumenGeneracion48CargaMasiva(DateTime fechaInicial, DateTime fechaFinal, bool incluirDetalleProd = true)
        {
            return GetResumenGeneracion48CargaMasivaXTipo(fechaInicial, fechaFinal, ConstantesMedicion.TipoDatoDespachoEjec, incluirDetalleProd);
        }

        private InfSGIResumenProd GetResumenGeneracion48CargaMasivaProgramado(DateTime fechaInicial, DateTime fechaFinal, bool incluirDetalleProd = true)
        {
            return GetResumenGeneracion48CargaMasivaXTipo(fechaInicial, fechaFinal, ConstantesMedicion.TipoDatoDespachoProg, incluirDetalleProd);
        }

        private InfSGIResumenProd GetResumenGeneracion48CargaMasivaXTipo(DateTime fechaInicial, DateTime fechaFinal, int tipoDato, bool incluirDetalleProd = true)
        {
            List<MeMedicion48DTO> listaMD48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaMDGen48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaMDSein48SinTIE = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaMDGenTgener48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaMDInterconexion48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaMDHP48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaMDFHP48 = new List<MeMedicion48DTO>();

            List<MeMedicion48DTO> listaTotal48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaTotalGen48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaTotalGenImp48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaTotalGenUnidad48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaTotalGenTgener48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaTotalInterconexion48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaTotalInterconexionExp48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaTotalInterconexionImp48 = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaTotalGenArea48 = new List<MeMedicion48DTO>();

            int lectcodi = tipoDato == ConstantesMedicion.TipoDatoDespachoProg ? ConstantesPR5ReportesServicio.LectDespachoProgramadoDiario : ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto;

            //BD
            List<MeDespachoResumenDTO> listaResumen = GetByCriteriaMeDespachoResumens(tipoDato, fechaInicial, fechaFinal);

            //Areas
            List<MeReporptomedDTO> listaArea = servFormatoRep.GetListaAreaOperativa();
            int ptomedicodiNorte = listaArea.Find(x => x.Repptoorden == 1).Ptomedicodi;
            int ptomedicodiCentro = listaArea.Find(x => x.Repptoorden == 2).Ptomedicodi;
            int ptomedicodiSur = listaArea.Find(x => x.Repptoorden == 3).Ptomedicodi;

            //Máxima demanda y total del sein
            foreach (var reg in listaResumen)
            {
                //total potencia(H+T+E+S): a
                //total Interconexion (exp-imp): b
                //sein (total potencia - total interconexion): a - b

                //gen: sein + total interconexion

                //Maxima demanda
                listaMD48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenmdsein.GetValueOrDefault(0), FechaMD = reg.Dregenmdhora });
                listaMDGen48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenmdsein.GetValueOrDefault(0) + (reg.Dregenmdexp.GetValueOrDefault(0) - reg.Dregenmdimp.GetValueOrDefault(0)), FechaMD = reg.Dregenmdhora });
                listaMDSein48SinTIE.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenmdnoiisein.GetValueOrDefault(0), FechaMD = reg.Dregenmdnoiihora });
                listaMDGenTgener48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenmdhidro.GetValueOrDefault(0), FechaMD = reg.Dregenmdhora, Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiHidro });
                listaMDGenTgener48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenmdtermo.GetValueOrDefault(0), FechaMD = reg.Dregenmdhora, Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiTermo });
                listaMDGenTgener48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenmdeolico.GetValueOrDefault(0), FechaMD = reg.Dregenmdhora, Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiEolica });
                listaMDGenTgener48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenmdsolar.GetValueOrDefault(0), FechaMD = reg.Dregenmdhora, Tgenercodi = ConstantesPR5ReportesServicio.TgenercodiSolar });
                listaMDInterconexion48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenmdexp.GetValueOrDefault(0) - reg.Dregenmdimp.GetValueOrDefault(0), Exp = reg.Dregenmdexp.GetValueOrDefault(0), Imp = reg.Dregenmdimp.GetValueOrDefault(0), FechaMD = reg.Dregenmdhora });

                //HP y FHP
                listaMDHP48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenhpsein.GetValueOrDefault(0), FechaMD = reg.Dregenhphora, Exp = reg.Dregenhpexp.GetValueOrDefault(0), Imp = reg.Dregenhpimp.GetValueOrDefault(0), Total = reg.Dregenhpsein.GetValueOrDefault(0) + (reg.Dregenhpexp.GetValueOrDefault(0) - reg.Dregenhpimp.GetValueOrDefault(0)) });
                listaMDFHP48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregenfhpsein.GetValueOrDefault(0), FechaMD = reg.Dregenfhphora, Exp = reg.Dregenfhpexp.GetValueOrDefault(0), Imp = reg.Dregenfhpimp.GetValueOrDefault(0), Total = reg.Dregenfhpsein.GetValueOrDefault(0) + (reg.Dregenfhpexp.GetValueOrDefault(0) - reg.Dregenfhpimp.GetValueOrDefault(0)) });

                //total
                listaTotal48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalsein.GetValueOrDefault(0) });
                listaTotalGen48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalsein.GetValueOrDefault(0) + (reg.Dregentotalexp.GetValueOrDefault(0) - reg.Dregentotalimp.GetValueOrDefault(0)) });
                listaTotalGenImp48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalsein.GetValueOrDefault(0) + (reg.Dregentotalexp.GetValueOrDefault(0) - reg.Dregentotalimp.GetValueOrDefault(0)) + reg.Dregentotalimp.GetValueOrDefault(0) });
                listaTotalInterconexion48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalexp.GetValueOrDefault(0) - reg.Dregentotalimp.GetValueOrDefault(0), Exp = reg.Dregentotalexp.GetValueOrDefault(0), Imp = reg.Dregentotalimp.GetValueOrDefault(0), });
                listaTotalInterconexionExp48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalexp.GetValueOrDefault(0), });
                listaTotalInterconexionImp48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalimp.GetValueOrDefault(0), });
                listaTotalGenArea48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalnorte.GetValueOrDefault(0), Ptomedicodi = ptomedicodiNorte });
                listaTotalGenArea48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalcentro.GetValueOrDefault(0), Ptomedicodi = ptomedicodiCentro });
                listaTotalGenArea48.Add(new MeMedicion48DTO() { Medifecha = reg.Dregenfecha, Meditotal = reg.Dregentotalsur.GetValueOrDefault(0), Ptomedicodi = ptomedicodiSur });
            }

            if (incluirDetalleProd)
            {
                //solo considerar centrales integrantes
                List<MeDespachoProdgenDTO> listaDetalle = GetByCriteriaMeDespachoProdgens(tipoDato, fechaInicial, fechaFinal, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto);

                //Desagregado por tipo de generación y fuente de energía
                listaTotalGenTgener48 = listaDetalle.GroupBy(x => new { x.Dpgenfecha, x.Tgenercodi })
                    .Select(x => new MeMedicion48DTO()
                    {
                        Medifecha = x.Key.Dpgenfecha,
                        Tgenercodi = x.Key.Tgenercodi,
                        Meditotal = x.Sum(y => y.Dpgenvalor ?? 0),
                        Tipoinfocodi = ConstantesMedicion.IdTipoInfoPotenciaActiva,
                        Lectcodi = ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto
                    }).OrderBy(x => x.Medifecha).ThenBy(x => x.Tgenercodi).ToList();

                listaTotalGenUnidad48 = listaDetalle.Select(x => new MeMedicion48DTO()
                {
                    Medifecha = x.Dpgenfecha,
                    Tgenercodi = x.Tgenercodi,
                    Fenergcodi = x.Fenergcodi,
                    Emprcodi = x.Emprcodi,
                    Equipadre = x.Equipadre,
                    Equicodi = x.Equipadre,
                    Grupocodi = x.Grupocodi,
                    Meditotal = x.Dpgenvalor ?? 0,
                    Tipogenerrer = x.Dpgenrer,
                    Tipoinfocodi = ConstantesMedicion.IdTipoInfoPotenciaActiva,
                    Lectcodi = lectcodi
                }).OrderBy(x => x.Medifecha).ThenBy(x => x.Tgenercodi).ToList();

                //incluir clasificación de equipos termicos e hidraulicos
                List<int> listaCategoria = new List<int>() { ConstantesPR5ReportesServicio.CategoriaRecursoAgua, ConstantesPR5ReportesServicio.CategoriaRecursoGas };
                foreach (var ctgcodi in listaCategoria)
                {
                    List<EqCategoriaDetDTO> listaCtgDet = FactorySic.GetEqCategoriaDetalleRepository().ListByCategoriaAndEstado(ctgcodi, ConstantesAppServicio.Activo);
                    foreach (var regCtgdet in listaCtgDet)
                    {
                        List<EqCategoriaEquipoDTO> listaEquipo = FactorySic.GetEqCategoriaEquipoRepository().ListaClasificacionByCategoriaDetalle(regCtgdet.Ctgdetcodi);
                        List<int> listaEquicodi = listaEquipo.Select(x => x.Equicodi).Where(x => x > 0).Distinct().ToList();

                        foreach (var reg in listaTotalGenUnidad48)
                        {
                            if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua || reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas)
                            {
                                if (listaEquicodi.Contains(reg.Equipadre) || listaEquicodi.Contains(reg.Equicodi))
                                {
                                    reg.Ctgdetcodi = regCtgdet.Ctgdetcodi;
                                }
                            }
                        }
                    }
                }
            }

            //salidas
            InfSGIResumenProd objRpt = new InfSGIResumenProd();
            objRpt.ListaMDSein48 = listaMD48;
            objRpt.ListaMDGen48 = listaMDGen48;
            objRpt.ListaMDSein48SinTIE = listaMDSein48SinTIE;
            objRpt.ListaMDGenTgener48 = listaMDGenTgener48;
            objRpt.ListaMDInterconexion48 = listaMDInterconexion48;
            objRpt.ListaMDHP48 = listaMDHP48;
            objRpt.ListaMDFHP48 = listaMDFHP48;

            objRpt.ListaTotalSein48 = listaTotal48;
            objRpt.ListaTotalGen48 = listaTotalGen48;
            objRpt.ListaTotalGenImp48 = listaTotalGenImp48;
            objRpt.ListaTotalGenUnidad48 = listaTotalGenUnidad48;
            objRpt.ListaTotalGenTgener48 = listaTotalGenTgener48;
            objRpt.ListaTotalInterconexion48 = listaTotalInterconexion48;
            objRpt.ListaTotalInterconexionExp48 = listaTotalInterconexionExp48;
            objRpt.ListaTotalInterconexionImp48 = listaTotalInterconexionImp48;
            objRpt.ListaTotalGenArea48 = listaTotalGenArea48;

            return objRpt;
        }

        private DateTime GetDiaMaximaDemandaCargaMasiva48(DateTime fechaInicio, DateTime fechaFin, List<MeMedicion48DTO> lista48)
        {
            GetDiaMaximaDemandaCargaMasiva48YFecha(fechaInicio, fechaFin, lista48, out DateTime fechaHoraMD, out DateTime fechaMD);

            return fechaHoraMD;
        }

        private void GetDiaMaximaDemandaCargaMasiva48YFecha(DateTime fechaInicio, DateTime fechaFin, List<MeMedicion48DTO> lista48,
                                                        out DateTime fechaHoraMD, out DateTime fechaMD)
        {
            List<MeMedicion48DTO> listaMedicion = lista48.Where(x => x.Medifecha >= fechaInicio.Date && x.Medifecha <= fechaFin.Date).ToList();

            decimal maximoValor = 0;
            decimal valorH = 0;
            DateTime maximoValorDia = fechaInicio.Date;
            DateTime fechaDiaMaximo = fechaInicio.Date;

            for (var i = 0; i < listaMedicion.Count(); i++)
            {
                valorH = listaMedicion[i].Meditotal ?? 0;

                if (valorH > maximoValor)
                {
                    maximoValor = valorH;
                    maximoValorDia = listaMedicion[i].FechaMD;
                    fechaDiaMaximo = listaMedicion[i].Medifecha;
                }
            }

            fechaHoraMD = maximoValorDia;
            fechaMD = fechaDiaMaximo;
        }

        #endregion

        #region Log informe 

        /// <summary>
        /// GenerarArchivoExceLogSemanal
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="tmrepcodi"></param>
        /// <param name="fileName"></param>
        public void GenerarArchivoExceLogSemanal(int verscodi, int tmrepcodi, out string fileName)
        {
            var objVersion = GetByIdSiVersion(verscodi);
            DateTime fechaInicio = objVersion.Versfechaperiodo;
            DateTime fechaFin = fechaInicio.AddDays(6);

            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(fechaInicio);

            //Realizar calculo
            ListarLogProduccionSemanal(anioSemIni.Item2, fechaInicio, fechaFin, out TablaReporte tablaDataTgen,
                                    out TablaReporte tablaDataFenerg, out TablaReporte tablaDataRer, out TablaReporte tablaDataTIE, out TablaReporte tablaDataArea);

            //Generar excel
            fileName = "";
            if (ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal == tmrepcodi) fileName = GetNombreArchivoLogInformeSemanal(fechaInicio, fechaFin, verscodi);
            if (ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal == tmrepcodi) fileName = GetNombreArchivoLogEjecutivoSemanal(fechaInicio, fechaFin, verscodi);

            string directorioDestino = AppDomain.CurrentDomain.BaseDirectory + ConstantesPR5ReportesServicio.Directorio;
            string rutaNombreArchivo = directorioDestino + fileName;

            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                string nameWS = "Reporte";
                ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
                ws = xlPackage.Workbook.Worksheets[nameWS];

                UtilSemanalPR5.GenerarTablaExcelLog(ws, 4, tablaDataTgen);
                UtilSemanalPR5.GenerarTablaExcelLog(ws, 14, tablaDataFenerg);
                UtilSemanalPR5.GenerarTablaExcelLog(ws, 27, tablaDataRer);
                UtilSemanalPR5.GenerarTablaExcelLog(ws, 38, tablaDataArea);
                UtilSemanalPR5.GenerarTablaExcelLog(ws, 47, tablaDataTIE);

                xlPackage.Save();
            }
        }

        private void ListarLogProduccionSemanal(int anio, DateTime fechaIni, DateTime fechaFin, out TablaReporte tablaDataTgen,
                                    out TablaReporte tablaDataFenerg, out TablaReporte tablaDataRer, out TablaReporte tablaDataTIE, out TablaReporte tablaDataArea)
        {
            tablaDataTgen = null;
            tablaDataFenerg = null;
            tablaDataRer = null;
            tablaDataTIE = null;
            tablaDataArea = null;

            //Data maestra
            List<SiTipogeneracionDTO> listaTgeneracion = FactorySic.GetSiTipogeneracionRepository().List();
            List<SiFuenteenergiaDTO> listaFenerg = FactorySic.GetSiFuenteenergiaRepository().List();

            //Data de generación
            List<MeDespachoProdgenDTO> listaDatoSemanal = GetByCriteriaMeDespachoProdgens(ConstantesMedicion.TipoDatoDespachoEjec, fechaIni, fechaFin, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto);
            List<MeDespachoProdgenDTO> listaDatoAnexoA = GetByCriteriaMeDespachoProdgens(ConstantesMedicion.TipoDatoDespachoEjecAnexoA, fechaIni, fechaFin, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto);

            ListarDespachoEjecutadoXTgeneracionYFenergMWh(listaDatoSemanal, out List<ResultadoTotalGeneracion> listaTotalXTgenerSem, out List<ResultadoTotalGeneracion> listaTotalXFenergSem, out List<ResultadoTotalGeneracion> listaTotalXFenergRERSem);
            ListarDespachoEjecutadoXTgeneracionYFenergMWh(listaDatoAnexoA, out List<ResultadoTotalGeneracion> listaTotalXTgenerAA, out List<ResultadoTotalGeneracion> listaTotalXFenergAA, out List<ResultadoTotalGeneracion> listaTotalXFenergRERAA);

            //Data de intercambios internacionales y area
            List<MeDespachoResumenDTO> listaResumenSemanal = GetByCriteriaMeDespachoResumens(ConstantesMedicion.TipoDatoDespachoEjec, fechaIni, fechaFin);
            List<MeDespachoResumenDTO> listaResumenAnexoA = GetByCriteriaMeDespachoResumens(ConstantesMedicion.TipoDatoDespachoEjecAnexoA, fechaIni, fechaFin);

            ListarTIEyAreasMWh(listaResumenSemanal, out List<ResultadoTotalGeneracion> listaTotalTIESem, out List<ResultadoTotalGeneracion> listaTotalAreaSem);
            ListarTIEyAreasMWh(listaResumenAnexoA, out List<ResultadoTotalGeneracion> listaTotalTIEAA, out List<ResultadoTotalGeneracion> listaTotalAreaAA);

            //Procesar cada cuadro
            for (var i = 1; i <= 5; i++)
            {
                List<GenericoDTO> listaMaestra = new List<GenericoDTO>();
                List<ResultadoTotalGeneracion> listaResultado = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaSem = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaAA = new List<ResultadoTotalGeneracion>();
                switch (i)
                {
                    case 1:
                        listaMaestra = listaTgeneracion.Select(x => new GenericoDTO() { Entero1 = x.Tgenercodi, String1 = x.Tgenernomb }).ToList();
                        listaMaestra.Add(new GenericoDTO() { Entero1 = 1000, String1 = "Producción Total del SEIN" });
                        listaSem = listaTotalXTgenerSem;
                        listaAA = listaTotalXTgenerAA;
                        break;
                    case 2:
                        listaMaestra = listaFenerg.Select(x => new GenericoDTO() { Entero1 = x.Fenergcodi, String1 = x.Fenergnomb }).ToList();
                        listaMaestra.Add(new GenericoDTO() { Entero1 = 1000, String1 = "Potencia generada en el SEIN" });
                        listaSem = listaTotalXFenergSem;
                        listaAA = listaTotalXFenergAA;
                        break;
                    case 3:
                        listaMaestra = listaFenerg.Select(x => new GenericoDTO() { Entero1 = x.Fenergcodi, String1 = x.Fenergnomb }).ToList();
                        listaMaestra.Add(new GenericoDTO() { Entero1 = 1000, String1 = "Producción Total RER" });
                        listaSem = listaTotalXFenergRERSem;
                        listaAA = listaTotalXFenergRERAA;
                        break;
                    case 4:
                        listaMaestra.Add(new GenericoDTO() { Entero1 = 1, String1 = "DEMANDA AREA NORTE" });
                        listaMaestra.Add(new GenericoDTO() { Entero1 = 2, String1 = "DEMANDA AREA CENTRO" });
                        listaMaestra.Add(new GenericoDTO() { Entero1 = 3, String1 = "DEMANDA AREA SUR" });
                        listaMaestra.Add(new GenericoDTO() { Entero1 = 1000, String1 = "DEMANDA SEIN" });
                        listaSem = listaTotalAreaSem;
                        listaAA = listaTotalAreaAA;
                        break;
                    case 5:
                        listaMaestra.Add(new GenericoDTO() { Entero1 = ConstantesPR5ReportesServicio.TipoSemanaRelImp, String1 = "Importación" });
                        listaMaestra.Add(new GenericoDTO() { Entero1 = ConstantesPR5ReportesServicio.TipoSemanaRelExp, String1 = "Exportación" });
                        listaSem = listaTotalTIESem;
                        listaAA = listaTotalTIEAA;
                        break;
                }

                foreach (var objFila in listaMaestra)
                {
                    decimal? val1 = null;
                    decimal? val2 = null;

                    if (objFila.Entero1 == 1000)
                    {
                        val1 = listaAA.Sum(x => x.Meditotal ?? 0);
                        val2 = listaSem.Sum(x => x.Meditotal ?? 0);
                    }
                    else
                    {
                        val1 = listaAA.Find(x => x.Codigo == objFila.Entero1)?.Meditotal;
                        val2 = listaSem.Find(x => x.Codigo == objFila.Entero1)?.Meditotal;
                    }
                    if (val1 != null || val2 != null)
                    {
                        ResultadoTotalGeneracion regAA = new ResultadoTotalGeneracion() { Codigo = objFila.Entero1 ?? 0, TipoResultadoFecha = PR5ConstanteFecha.ValorAA_SemAct, Meditotal = val1.GetValueOrDefault(0) };
                        ResultadoTotalGeneracion regSem = new ResultadoTotalGeneracion() { Codigo = objFila.Entero1 ?? 0, TipoResultadoFecha = PR5ConstanteFecha.ValorSem_SemAct, Meditotal = val2.GetValueOrDefault(0) };
                        ResultadoTotalGeneracion regDif = UtilSemanalPR5.GenerarDiferenciaByTotalGeneracion(regAA, regSem, PR5ConstanteFecha.ValorAnioAct_SemAct_Resta, fechaIni);

                        listaResultado.Add(regAA);
                        listaResultado.Add(regSem);
                        listaResultado.Add(regDif);
                    }
                }
                List<int> listaCodigo = listaResultado.Select(x => x.Codigo).Distinct().ToList();
                List<GenericoDTO> listaKey = listaMaestra.Where(x => listaCodigo.Contains(x.Entero1.Value)).ToList();

                //Salidas
                if (i == 1) tablaDataTgen = UtilSemanalPR5.ObtenerDataTablaLog("Por tipo de Generación", anio + "\n(AnexoA-Numeral 4)\nMWh", anio + "\n(Informe Semanal)\nMWh", "Diferencia", listaKey, listaResultado);
                if (i == 2) tablaDataFenerg = UtilSemanalPR5.ObtenerDataTablaLog("Por tipo de Recurso Energético", anio + "\n(AnexoA-Numeral 4)\nMWh", anio + "\n(Informe Semanal)\nMWh", "Diferencia", listaKey, listaResultado);
                if (i == 3) tablaDataRer = UtilSemanalPR5.ObtenerDataTablaLog("Por Recursos Energéticos Renovables (RER)", anio + "\n(AnexoA-Numeral 4)\nMWh", anio + "\n(Informe Semanal)\nMWh", "Diferencia", listaKey, listaResultado);
                if (i == 4) tablaDataArea = UtilSemanalPR5.ObtenerDataTablaLog("Energía", anio + "\n(AnexoA-Numeral 4)\nMWh", anio + "\n(Informe Semanal)\nMWh", "Diferencia", listaKey, listaResultado);
                if (i == 5) tablaDataTIE = UtilSemanalPR5.ObtenerDataTablaLog("Intercambios Internacionales", anio + "\n(AnexoA-Numeral 37)\nMWh", anio + "\n(Informe Semanal)\nMWh", "Diferencia", listaKey, listaResultado);
            }
        }

        private void ListarDespachoEjecutadoXTgeneracionYFenergMWh(List<MeDespachoProdgenDTO> listaBD,
                             out List<ResultadoTotalGeneracion> listaTotalXTgener, out List<ResultadoTotalGeneracion> listaTotalXFenerg, out List<ResultadoTotalGeneracion> listaTotalXFenergRER)
        {
            listaTotalXTgener = listaBD.GroupBy(x => x.Tgenercodi)
                    .Select(x => new ResultadoTotalGeneracion()
                    {
                        Codigo = x.Key,
                        Meditotal = x.Sum(y => y.Dpgenvalor ?? 0) / 2.0m,
                    }).ToList();

            listaTotalXFenerg = listaBD.GroupBy(x => x.Fenergcodi)
                    .Select(x => new ResultadoTotalGeneracion()
                    {
                        Codigo = x.Key,
                        Meditotal = x.Sum(y => y.Dpgenvalor ?? 0) / 2.0m,
                    }).ToList();

            listaTotalXFenergRER = listaBD.Where(x => x.Dpgenrer == "S").GroupBy(x => x.Fenergcodi)
                    .Select(x => new ResultadoTotalGeneracion()
                    {
                        Codigo = x.Key,
                        Meditotal = x.Sum(y => y.Dpgenvalor ?? 0) / 2.0m,
                    }).ToList();
        }

        private void ListarTIEyAreasMWh(List<MeDespachoResumenDTO> listaBD, out List<ResultadoTotalGeneracion> listaTotalTIE, out List<ResultadoTotalGeneracion> listaTotalArea)
        {
            //TIE
            listaTotalTIE = new List<ResultadoTotalGeneracion>();
            listaTotalTIE.Add(new ResultadoTotalGeneracion()
            {
                Codigo = ConstantesPR5ReportesServicio.TipoSemanaRelImp,
                Meditotal = listaBD.Sum(x => x.Dregentotalimp ?? 0) / 2.0m,
            });
            listaTotalTIE.Add(new ResultadoTotalGeneracion()
            {
                Codigo = ConstantesPR5ReportesServicio.TipoSemanaRelExp,
                Meditotal = listaBD.Sum(x => x.Dregentotalexp ?? 0) / 2.0m,
            });

            //Area
            listaTotalArea = new List<ResultadoTotalGeneracion>();
            listaTotalArea.Add(new ResultadoTotalGeneracion()
            {
                Codigo = 1,
                Meditotal = listaBD.Sum(x => x.Dregentotalnorte ?? 0) / 2.0m,
            });
            listaTotalArea.Add(new ResultadoTotalGeneracion()
            {
                Codigo = 2,
                Meditotal = listaBD.Sum(x => x.Dregentotalcentro ?? 0) / 2.0m,
            });
            listaTotalArea.Add(new ResultadoTotalGeneracion()
            {
                Codigo = 3,
                Meditotal = listaBD.Sum(x => x.Dregentotalsur ?? 0) / 2.0m,
            });
        }

        #endregion

        #region Resumenes

        #region Resumen Relevante

        /// <summary>
        /// ListarDataVersionResumenRelevante
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionResumenRelevante(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);

            if (objVerDet == null)
            {
                this.CargarResumenRelevanteSemanal(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDPotGenData,
                    out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticos, out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaCMg,
                    out List<ResultadoTotalGeneracion> listaCosto);

                objReporte.ObjTexto = UtilSemanalPR5.GetTextoResumenRelevanteInformeSemanal(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDPotGenData, listaParticipacionRecursosEnergeticos,
                                       listaPotGenData, listaCMg, listaCosto);
                objReporte.GraficoPieSemAct_AnioAct = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticosResumenRelevante(objFiltro.ObjFecha, listaPotGenData, listaParticipacionRecursosEnergeticos, PR5ConstanteFecha.ValorAnioAct_SemAct);
                objReporte.GraficoPieSemAct_Anio1Ant = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticosResumenRelevante(objFiltro.ObjFecha, listaPotGenData, listaParticipacionRecursosEnergeticos, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionResumenRelevanteSem(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDPotGenData,
                out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticos, out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaCMg,
                out List<ResultadoTotalGeneracion> listaCosto);

                objReporte.ObjTexto = UtilSemanalPR5.GetTextoResumenRelevanteInformeSemanal(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDPotGenData, listaParticipacionRecursosEnergeticos,
                                   listaPotGenData, listaCMg, listaCosto);
                objReporte.GraficoPieSemAct_AnioAct = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticosResumenRelevante(objFiltro.ObjFecha, listaPotGenData, listaParticipacionRecursosEnergeticos, PR5ConstanteFecha.ValorAnioAct_SemAct);
                objReporte.GraficoPieSemAct_Anio1Ant = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticosResumenRelevante(objFiltro.ObjFecha, listaPotGenData, listaParticipacionRecursosEnergeticos, PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            }
            return objReporte;
        }

        private void GetDataVersionResumenRelevanteSem(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDPotGenData,
                    out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticos, out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaCMg,
                    out List<ResultadoTotalGeneracion> listaCosto)
        {

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaParticipacionRecursosEnergeticos = new List<ResultadoTotalGeneracion>();
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            listaCMg = new List<ResultadoTotalGeneracion>();
            listaCosto = new List<ResultadoTotalGeneracion>();

            foreach (var objDat in listaDat)
            {

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual)
                    {
                        listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            FechaOnlyHora = objDatDet.Vdatdtvalor,
                            FechaHora = objDatDet.Vdatdtfecha.Value
                        });
                    }

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorSemanaMaximaDemanda)
                    {
                        listaMDPotGenData.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Meditotal = objDatDet.ValorDecimal
                        });
                    }

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorProduccionRecurso)
                    {

                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }

                        listaParticipacionRecursosEnergeticos.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Meditotal = objDatDet.ValorDecimal,
                            Fenergcodi = Convert.ToInt32(words[1]),
                            Fenergnomb = words[2],
                            Fenergcolor = words[3],
                        });
                    }

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad)
                    {

                        listaPotGenData.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Meditotal = objDatDet.ValorDecimal
                        });
                    }

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorCostoMarMaxMes)
                    {

                        listaCMg.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Meditotal = objDatDet.ValorDecimal
                        });
                    }

                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorCostoMarPromMes)
                    {

                        listaCosto.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Meditotal = objDatDet.ValorDecimal
                        });
                    }

                }
            }
        }

        private void CargarResumenRelevanteSemanal(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDPotGenData,
            out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticos, out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaCMg,
            out List<ResultadoTotalGeneracion> listaCosto)
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48
            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            DateTime fechaIniData = objFecha.Anio1Ant.Ini_Data;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Maxima Demanda
            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData);

            List<MeMedicion48DTO> listCon48 = objRpt.ListaTotalGenUnidad48;

            // Maxima Demanda Coincidente de Potencia por tipo de Generación (MW)

            //Ultimas semanas operativas
            DateTime fechaSem0MD48 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialSem0, fechaFinalSem0, objRpt.ListaMDSein48);
            DateTime fechaSem0AnioAnt48 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt, objRpt.ListaMDSein48);

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, FechaHora = fechaSem0MD48 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, FechaHora = fechaSem0AnioAnt48 });
            foreach (var reg in listaTotalMaximaDemadaDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }

            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regMDPotGenSem0MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(objRpt.ListaMDSein48, fechaSem0MD48, PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDPotGenSem0AnioAntMD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(objRpt.ListaMDSein48, fechaSem0AnioAnt48, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenSem0MD48, regMDPotGenSem0AnioAntMD48, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSem0MD48);
            listaMDPotGenData.Add(regMDPotGenSem0MD48);
            listaMDPotGenData.Add(regMDPotGenSem0AnioAntMD48);
            listaMDPotGenData.Add(regProdGenTotalVarAnio0);

            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            //Fuente de energía
            List<ResultadoTotalGeneracion> listaTipoRecursoEnergeticoData = new List<ResultadoTotalGeneracion>();

            var listaFenerg = UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoResumenRelevante();
            foreach (var regFE in listaFenerg)
            {
                var listaDetalleDia = new List<MeMedicion48DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiRelevanteBiogasBagazo:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo).ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiRelevanteResidualYDiesel:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500 || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6
                                                || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiDiesel).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regProdGenxFEAnio0);
                listaMDxTgen.Add(regProdGenxFEAnio1);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Fenergnomb = regFE.Fenergnomb;
                }

                listaTipoRecursoEnergeticoData.AddRange(listaMDxTgen);
            }

            //Potencia generada en el SEIN
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenSem0AnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenSem0Anio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenSem0VarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenSem0AnioAct, regProdGenSem0Anio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSem0MD48);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.Fecha_01Enero && x.Medifecha <= objFecha.AnioAct.Fecha_Final && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, objFecha.AnioAct.Fecha_01Enero, objFecha.AnioAct.Fecha_01Enero, objFecha.AnioAct.Fecha_Final);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio1Ant.Fecha_01Enero && x.Medifecha <= objFecha.Anio1Ant.Fecha_Final && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, objFecha.Anio1Ant.Fecha_01Enero, objFecha.Anio1Ant.Fecha_01Enero, objFecha.Anio1Ant.Fecha_Final);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, objFecha.AnioAct.Fecha_01Enero);

            listaPotGenData.Add(regProdGenSem0AnioAct);
            listaPotGenData.Add(regProdGenSem0Anio1Ant);
            listaPotGenData.Add(regProdGenSem0VarAnio0);
            listaPotGenData.Add(regProdGenAcumVarAnio0);

            // Participación de la producción de energía eléctrica por tipo recurso energético durante la semana operativa
            listaParticipacionRecursosEnergeticos = new List<ResultadoTotalGeneracion>();

            //Participacion Fuente energeticos
            foreach (var regFE in listaFenerg)
            {
                var listaDetalleDia = new List<MeMedicion48DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiRelevanteBiogasBagazo:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo).ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiRelevanteResidualYDiesel:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500 || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6
                                                || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiDiesel).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFESem0AnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFESem0Anio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regPartSemAct = new ResultadoTotalGeneracion();
                regPartSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                regPartSemAct.Fenergnomb = regFE.Fenergnomb;
                regPartSemAct.Fenergcodi = regFE.Fenergcodi;
                regPartSemAct.Fenergcolor = regFE.Fenergcolor;
                if (regProdGenSem0AnioAct.Meditotal > 0)
                {
                    regPartSemAct.Meditotal = Math.Round((Math.Round(regProdGenxFESem0AnioAct.Meditotal.GetValueOrDefault(0), 2) / Math.Round(regProdGenSem0AnioAct.Meditotal.Value, 2)) * 100.0m, 3);
                }
                listaParticipacionRecursosEnergeticos.Add(regPartSemAct);

                ResultadoTotalGeneracion regPartAnio1Ant = new ResultadoTotalGeneracion();
                regPartAnio1Ant.TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                regPartAnio1Ant.Fenergnomb = regFE.Fenergnomb;
                regPartAnio1Ant.Fenergcodi = regFE.Fenergcodi;
                regPartAnio1Ant.Fenergcolor = regFE.Fenergcolor;
                if (regProdGenSem0Anio1Ant.Meditotal > 0)
                {
                    regPartAnio1Ant.Meditotal = Math.Round((Math.Round(regProdGenxFESem0Anio1Ant.Meditotal.GetValueOrDefault(0), 2) / Math.Round(regProdGenSem0Anio1Ant.Meditotal.Value, 2)) * 100.0m, 3);
                }
                listaParticipacionRecursosEnergeticos.Add(regPartAnio1Ant);
            }

            //ajuste para que cuadre la suma de cada participación (el faltante / sobrante agregarle al agua)
            decimal sumaPartActual = listaParticipacionRecursosEnergeticos.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).Sum(x => x.Meditotal ?? 0);
            decimal dif = 100 - sumaPartActual;
            var regActHidro = listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct && x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua);
            if (regActHidro != null)
            {
                regActHidro.Meditotal += dif;
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // El costo marginal promedio de corto plazo

            //Obtener los costos marginales diarios por cada periodo 
            int mrepcodiCMg = objFecha.EsReporteEjecutivoSemanal ? ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm : ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesProm;
            listaCMg = new List<ResultadoTotalGeneracion>();
            ObtenerListasRptEvolCostosMarginalesProm(objFecha, mrepcodiCMg, out listaCMg);
            listaCMg = listaCMg.Where(x => x.Medifecha == objFecha.AnioAct.RangoAct_FechaIni).ToList();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Costo de Operación

            //Obtener data
            int mrepcodiCostoOp = objFecha.EsReporteEjecutivoSemanal ? ConstantesEjecutivoSemanalPR5.IndexEvolCostosOperacionEjecutados : ConstantesInformeSemanalPR5.IndexSemEvolCostosOperacionEjecutados;
            listaCosto = new List<ResultadoTotalGeneracion>();
            CargarReporteEvolCostosOperEjecutadosSemanal(objFecha, mrepcodiCostoOp, out listaCosto);
            listaCosto = listaCosto.Where(x => x.Medifecha == objFecha.AnioAct.RangoAct_FechaIni).ToList();
        }

        private void GenerarExcelResumenRelevante(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = this.ListarDataVersionResumenRelevante(objFiltro);

            int filaFinTexto;
            UtilSemanalPR5.GenerarExcelTextoResumenRelevanteSemanal(ws, objFecha, objReporte.ObjTexto, out filaFinTexto);
            UtilSemanalPR5.GenerarCharExcelGraficoResumenRelevante(ws, objFecha, 1, objReporte.GraficoPieSemAct_AnioAct, filaFinTexto);
            UtilSemanalPR5.GenerarCharExcelGraficoResumenRelevante(ws, objFecha, 2, objReporte.GraficoPieSemAct_Anio1Ant, filaFinTexto);
        }

        #endregion

        #region Resumen de Producción

        /// <summary>
        /// ListarDataVersionResumenProduccion
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionResumenProduccion(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.ListarResumenProduccion(objFiltro.ObjFecha, out string energiaSemAct, out string varenergiaSemAct, out List<SiEmpresaDTO> listaEmpresa, out List<PrGrupoDTO> listaGrupoDespacho, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaEnergProg, out List<ResultadoTotalGeneracion> listaMDEjec,
            out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalEnergProg, out List<ResultadoTotalGeneracion> listaTotalMDEjec,
            out List<ResultadoTotalGeneracion> listaTgenC2, out List<ResultadoTotalGeneracion> listaTIEC3);

                objReporte.TextoResumen = string.Format("La producción total de energía de la semana N° {0} incluyendo la exportación desde Ecuador fue de {1} MWh que en comparación con la misma semana del año {2}, representa una variación de {3}."
                                , objFiltro.ObjFecha.AnioAct.NumSem, energiaSemAct, objFiltro.ObjFecha.Anio1Ant.NumAnio, varenergiaSemAct);

                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaResumenProduccion(objFiltro.ObjFecha, listaEmpresa, listaGrupoDespacho, listaMDCoincidenteDataDesc, listaTgen,
                            listaEnergEjec, listaEnergProg, listaMDEjec, listaTotalTgen, listaTotalEnergEjec, listaTotalEnergProg, listaTotalMDEjec);
                objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();
                objReporte.DataTablaXTgen = UtilSemanalPR5.ObtenerDataTablaResumenXTgenProduccion(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaTgenC2);
                objReporte.DataTablaTIE = UtilSemanalPR5.ObtenerDataTablaResumenXTIEProduccion(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaTIEC3);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionResumenProduccion(listaDat, listaDatDetalle, out string energiaSemAct, out string varenergiaSemAct, out List<SiEmpresaDTO> listaEmpresa, out List<PrGrupoDTO> listaGrupoDespacho, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
                                                out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaEnergProg, out List<ResultadoTotalGeneracion> listaMDEjec,
                                                out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalEnergProg, out List<ResultadoTotalGeneracion> listaTotalMDEjec,
                                                out List<ResultadoTotalGeneracion> listaTgenC2, out List<ResultadoTotalGeneracion> listaTIEC3);
                objReporte.TextoResumen = string.Format("La producción total de energía de la semana N° {0} incluyendo la exportación desde Ecuador fue de {1} MWh que en comparación con la misma semana del año {2}, representa una variación de {3}."
                            , objFiltro.ObjFecha.AnioAct.NumSem, energiaSemAct, objFiltro.ObjFecha.Anio1Ant.NumAnio, varenergiaSemAct);

                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaResumenProduccion(objFiltro.ObjFecha, listaEmpresa, listaGrupoDespacho, listaMDCoincidenteDataDesc, listaTgen,
                            listaEnergEjec, listaEnergProg, listaMDEjec, listaTotalTgen, listaTotalEnergEjec, listaTotalEnergProg, listaTotalMDEjec);
                objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();
                objReporte.DataTablaXTgen = UtilSemanalPR5.ObtenerDataTablaResumenXTgenProduccion(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaTgenC2);
                objReporte.DataTablaTIE = UtilSemanalPR5.ObtenerDataTablaResumenXTIEProduccion(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaTIEC3);

            }
            return objReporte;
        }

        private void GetDataVersionResumenProduccion(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out string energiaSemAct, out string varenergiaSemAct, out List<SiEmpresaDTO> listaEmpresa, out List<PrGrupoDTO> listaGrupoDespacho, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaEnergProg, out List<ResultadoTotalGeneracion> listaMDEjec,
            out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalEnergProg, out List<ResultadoTotalGeneracion> listaTotalMDEjec,
            out List<ResultadoTotalGeneracion> listaTgenC2, out List<ResultadoTotalGeneracion> listaTIEC3)
        {
            energiaSemAct = string.Empty;
            varenergiaSemAct = string.Empty;
            listaEmpresa = new List<SiEmpresaDTO>();
            listaGrupoDespacho = new List<PrGrupoDTO>();
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaTgen = new List<ResultadoTotalGeneracion>();
            listaEnergEjec = new List<ResultadoTotalGeneracion>();
            listaEnergProg = new List<ResultadoTotalGeneracion>();
            listaMDEjec = new List<ResultadoTotalGeneracion>();
            listaTotalTgen = new List<ResultadoTotalGeneracion>();
            listaTotalEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalEnergProg = new List<ResultadoTotalGeneracion>();
            listaTotalMDEjec = new List<ResultadoTotalGeneracion>();
            listaTgenC2 = new List<ResultadoTotalGeneracion>();
            listaTIEC3 = new List<ResultadoTotalGeneracion>();

            int iTgenercodi = 0;
            int iTipoResultadoFecha = 0;
            bool isCuadroGral = false;
            List<int> ListConcepcodi = new List<int>
            {
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro,
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo,
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER,
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo,
                ConstantesConceptoVersion.ConceptoCodiEnergiaProgramada,
                ConstantesConceptoVersion.ConceptoCodiDesvEjecVsProg,
                ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado,
                ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual,
                ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior,
                ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior
            };
            List<ResultadoTotalGeneracion> listaGeneral = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaGeneralTotales = new List<ResultadoTotalGeneracion>();

            foreach (var objDat in listaDat)
            {
                switch (objDat.Vercnpcodi)
                {
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro:
                        iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiHidro;
                        isCuadroGral = true;
                        string[] words = objDat.Verdatvalor.Split('|');
                        listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                        {
                            TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct,
                            SemanaFechaDesc = words[1],
                            Anio = Convert.ToInt32(words[2]),
                            FechaOnlyDia = words[3],
                            FechaOnlyHora = words[4]

                        });
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo:
                        iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiTermo;
                        isCuadroGral = true;
                        string[] words2 = objDat.Verdatvalor.Split('|');
                        listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
                        {
                            TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                            SemanaFechaDesc = words2[1],
                            Anio = Convert.ToInt32(words2[2]),
                            FechaOnlyDia = words2[3],
                            FechaOnlyHora = words2[4]
                        });
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER:
                        iTgenercodi = ConstantesPR5ReportesServicio.TgenercodiRER;
                        string[] words3 = objDat.Verdatvalor.Split('|');
                        energiaSemAct = words3[1];
                        varenergiaSemAct = words3[2];
                        isCuadroGral = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        isCuadroGral = true;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiEnergiaProgramada:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        isCuadroGral = true;
                        listaGeneral = listaEnergProg;
                        listaGeneralTotales = listaTotalEnergProg;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiDesvEjecVsProg:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        isCuadroGral = true;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        isCuadroGral = true;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        isCuadroGral = true;
                        listaGeneral = listaMDEjec;
                        listaGeneralTotales = listaTotalMDEjec;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        isCuadroGral = true;
                        listaGeneral = listaMDEjec;
                        listaGeneralTotales = listaTotalMDEjec;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        isCuadroGral = true;
                        listaGeneral = listaMDEjec;
                        listaGeneralTotales = listaTotalMDEjec;
                        break;
                    //**************************************************************************
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        isCuadroGral = false;
                        break;

                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        isCuadroGral = false;
                        break;

                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Resta;
                        isCuadroGral = false;
                        break;

                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionActualVSAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        isCuadroGral = false;
                        break;
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    if (isCuadroGral) // Datos de la tabla web principal de Resumen de Producción
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha) // si es grupo
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }
                            listaGrupoDespacho.Add(new PrGrupoDTO()
                            {
                                Emprcodi = Convert.ToInt32(words[1]),
                                Emprnomb = words[2],
                                Gruponomb = words[3],
                                Grupocodi = objDatDet.Vdatdtid,
                            });

                            if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo
                                    || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                            {
                                listaTgen.Add(new ResultadoTotalGeneracion()
                                {
                                    Emprcodi = 0,
                                    Grupocodi = objDatDet.Vdatdtid,
                                    Tgenercodi = iTgenercodi,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                            else
                            {
                                listaGeneral.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Emprcodi = 0,
                                    Grupocodi = objDatDet.Vdatdtid,
                                    Meditotal = objDatDet.ValorDecimal
                                });
                            }
                        }
                        else
                        {
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)// Si es total empresa
                            {
                                string[] words = objDatDet.Vdatdtvalor.Split('|');
                                if (!string.IsNullOrEmpty(words[0]))
                                {
                                    decimal.TryParse(words[0], out decimal valorDecimal);
                                    objDatDet.ValorDecimal = valorDecimal;
                                }

                                listaEmpresa.Add(new SiEmpresaDTO()
                                {
                                    Emprcodi = Convert.ToInt32(words[1]),
                                    Emprnomb = words[2]
                                });

                                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo
                                    || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                                {
                                    listaTgen.Add(new ResultadoTotalGeneracion()
                                    {
                                        Emprcodi = Convert.ToInt32(words[1]),
                                        Grupocodi = objDatDet.Vdatdtid,
                                        Tgenercodi = iTgenercodi,
                                        Meditotal = objDatDet.ValorDecimal
                                    });
                                }
                                else
                                {
                                    listaGeneral.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        Emprcodi = Convert.ToInt32(words[1]),
                                        Grupocodi = objDatDet.Vdatdtid,
                                        Meditotal = objDatDet.ValorDecimal
                                    });
                                }
                            }
                            else // Totales generales
                            {

                                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo
                                || objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)
                                {
                                    listaTotalTgen.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoSemanaRelProd = objDatDet.Vdatdtid,
                                        Tgenercodi = iTgenercodi,
                                        Meditotal = objDatDet.ValorDecimal
                                    });
                                }
                                else
                                {
                                    listaGeneralTotales.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        TipoSemanaRelProd = objDatDet.Vdatdtid,
                                        Meditotal = objDatDet.ValorDecimal
                                    });
                                }
                            }
                        }

                    }
                    else
                    {
                        int iTipoSemanaRelProd = 0;
                        List<ResultadoTotalGeneracion> listaGeneracionGral = new List<ResultadoTotalGeneracion>();
                        switch (objDatDet.Vercnpcodi)
                        {
                            case ConstantesConceptoVersion.ConceptoValorTotalGeneraciónHidro:
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiHidro;
                                listaGeneracionGral = listaTgenC2;
                                break;
                            case ConstantesConceptoVersion.ConceptoValorTotalGeneraciónTermo:
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiTermo;
                                listaGeneracionGral = listaTgenC2;
                                break;
                            case ConstantesConceptoVersion.ConceptoValorTotalGeneraciónRer:
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiRER;
                                listaGeneracionGral = listaTgenC2;
                                break;
                            case ConstantesConceptoVersion.ConceptoTotal:
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiTotal;
                                listaGeneracionGral = listaTgenC2;
                                break;
                            case ConstantesConceptoVersion.ConceptoenergiaImportada:
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp;
                                listaGeneracionGral = listaTIEC3;
                                break;
                            case ConstantesConceptoVersion.ConceptoEnergiaExportada:
                                iTipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp;
                                listaGeneracionGral = listaTIEC3;
                                break;
                        }

                        listaGeneracionGral.Add(new ResultadoTotalGeneracion()
                        {
                            TipoSemanaRelProd = iTipoSemanaRelProd,
                            TipoResultadoFecha = iTipoResultadoFecha,
                            Meditotal = objDatDet.ValorDecimal,

                        });
                    }
                }
            }

            listaGrupoDespacho = listaGrupoDespacho.DistinctBy(m => new { m.Gruponomb }).ToList();
            listaEmpresa = listaEmpresa.DistinctBy(m => new { m.Emprcodi, m.Emprnomb }).ToList();
        }

        private void ListarResumenProduccion(FechasPR5 objFecha, out string energiaSemAct, out string varenergiaSemAct, out List<SiEmpresaDTO> listaEmpresa, out List<PrGrupoDTO> listaGrupoDespacho, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaEnergProg, out List<ResultadoTotalGeneracion> listaMDEjec,
            out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalEnergProg, out List<ResultadoTotalGeneracion> listaTotalMDEjec,
            out List<ResultadoTotalGeneracion> listaTgenC2, out List<ResultadoTotalGeneracion> listaTIEC3)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();
            List<MaximaDemandaDTO> listaMDTotalMensualxAnio = new List<MaximaDemandaDTO>();

            //semana actual
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem1 = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem1 = objFecha.Anio1Ant.RangoAct_FechaFin;

            //Acumulado
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            // Traer data me_medicion48

            DateTime fechaIniData = fechaInicialSem1;
            DateTime fechaFinData = fechaFinalSem0;

            //Data Despacho por grupodespacho, máxima demanda e interconexion
            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData);
            InfSGIResumenProd objRptProg = GetResumenGeneracion48CargaMasivaProgramado(fechaInicialSem0, fechaFinalSem0);

            List<MeMedicion48DTO> listGenEjec48 = objRpt.ListaTotalGenUnidad48;
            List<MeMedicion48DTO> listGenProg48 = objRptProg.ListaTotalGenUnidad48;
            List<MeMedicion48DTO> listaInterconexionExp = objRpt.ListaTotalInterconexionExp48;
            List<MeMedicion48DTO> listaInterconexionImp = objRpt.ListaTotalInterconexionImp48;

            //Data Generación
            DateTime fechaSemMDAct = GetDiaMaximaDemandaCargaMasiva48(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, objRpt.ListaMDSein48);
            DateTime fechaSemMD1Ant = GetDiaMaximaDemandaCargaMasiva48(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, objRpt.ListaMDSein48);

            //Máxima demanda
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion48DTO> listSemAct = this.servEjec.ListaDataMDGeneracionConsolidado48(fechaSemMDAct.Date, fechaSemMDAct.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false, Int32.Parse(ConstantesAppServicio.LectcodiEjecutadoHisto));
            List<MeMedicion48DTO> listSem1Ant = this.servEjec.ListaDataMDGeneracionConsolidado48(fechaSemMD1Ant.Date, fechaSemMD1Ant.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false, Int32.Parse(ConstantesAppServicio.LectcodiEjecutadoHisto));

            // Fechas
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct,
                FechaHora = fechaSemMDAct,
                Anio = objFecha.AnioAct.NumAnio,
                SemanaFechaDesc = objFecha.AnioAct.RangoAct_NumYAnio
            });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO()
            {
                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                FechaHora = fechaSemMD1Ant,
                Anio = objFecha.Anio1Ant.NumAnio,
                SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_NumYAnio
            });
            foreach (var reg in listaMDCoincidenteDataDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }

            #region Cuadro 1 Desc

            ResultadoTotalGeneracion regProdGenSem0AnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(objRpt.ListaTotalSein48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenSem0Anio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(objRpt.ListaTotalSein48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenSem0VarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenSem0AnioAct, regProdGenSem0Anio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> listaPotGenData = new List<ResultadoTotalGeneracion>();
            listaPotGenData.Add(regProdGenSem0AnioAct);
            listaPotGenData.Add(regProdGenSem0Anio1Ant);
            listaPotGenData.Add(regProdGenSem0VarAnio0);

            NumberFormatInfo nfi2 = UtilAnexoAPR5.GenerarNumberFormatInfo2();

            energiaSemAct = UtilAnexoAPR5.ImprimirValorTotalHtml(listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).Meditotal * ConstantesPR5ReportesServicio.FactorGW, nfi2);
            varenergiaSemAct = UtilAnexoAPR5.ImprimirVariacionHtml(listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var).Meditotal, nfi2);

            #endregion

            #region Cuadro 1

            //Variables
            listaTgen = new List<ResultadoTotalGeneracion>();
            listaEnergEjec = new List<ResultadoTotalGeneracion>();
            listaEnergProg = new List<ResultadoTotalGeneracion>();
            listaMDEjec = new List<ResultadoTotalGeneracion>();
            listaTotalTgen = new List<ResultadoTotalGeneracion>();
            listaTotalEnergEjec = new List<ResultadoTotalGeneracion>();
            listaTotalEnergProg = new List<ResultadoTotalGeneracion>();
            listaTotalMDEjec = new List<ResultadoTotalGeneracion>();

            //obtener grupos despacho
            List<MeMedicion48DTO> listaTmp = new List<MeMedicion48DTO>();
            listaTmp.AddRange(listGenEjec48);
            listaTmp.AddRange(listGenProg48);
            listaTmp = listaTmp.OrderBy(x => x.Medifecha).ToList(); //para cada grupo obtener la empresa titular más reciente
            listaGrupoDespacho = listaTmp.GroupBy(x => x.Grupocodi)
                    .Select(x => new PrGrupoDTO()
                    {
                        Grupocodi = x.Key,
                        Emprcodi = x.First().Emprcodi,
                        TipoGenerRer = x.First().Tipogenerrer,
                        Tgenercodi = x.First().Tgenercodi,
                    }).ToList();

            listaEmpresa = listaGrupoDespacho.GroupBy(x => x.Emprcodi)
                    .Select(x => new SiEmpresaDTO()
                    {
                        Emprcodi = x.Key.Value,
                    }).ToList();

            var listaGrBD = ListPrGrupoByIdGrupo(string.Join(",", listaGrupoDespacho.Select(x => x.Grupocodi)));
            var listaEmpBD = ListarEmpresasXID(listaEmpresa.Select(x => x.Emprcodi).ToList());

            foreach (var item in listaGrupoDespacho)
            {
                var regGrBd = listaGrBD.Find(x => x.Grupocodi == item.Grupocodi);
                var regEmpBd = listaEmpBD.Find(x => x.Emprcodi == item.Emprcodi);
                item.Gruponomb = regGrBd?.Gruponomb;
                item.Emprnomb = regEmpBd?.Emprnomb;
            }
            foreach (var item in listaEmpresa)
            {
                var regEmpBd = listaEmpBD.Find(x => x.Emprcodi == item.Emprcodi);
                item.Emprnomb = regEmpBd?.Emprnomb;
            }

            listaEmpresa = listaEmpresa.OrderBy(x => x.Emprnomb).ToList();
            listaGrupoDespacho = listaGrupoDespacho.OrderBy(x => x.Emprnomb).ThenBy(x => x.Gruponomb).ToList();

            //Recorrer cada grupo despacho
            foreach (var regGrupo in listaGrupoDespacho)
            {
                ResultadoTotalGeneracion regTgenHidroG = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Grupocodi == regGrupo.Grupocodi && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiHidro, 0, regGrupo.Grupocodi);
                ResultadoTotalGeneracion regTgenTermoG = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Grupocodi == regGrupo.Grupocodi && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiTermo, 0, regGrupo.Grupocodi);
                ResultadoTotalGeneracion regTgenRERG = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Grupocodi == regGrupo.Grupocodi && x.Tipogenerrer == "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiRER, 0, regGrupo.Grupocodi);

                ResultadoTotalGeneracion regEnergEjecAnio0G = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Grupocodi == regGrupo.Grupocodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, regGrupo.Grupocodi);
                ResultadoTotalGeneracion regEnergProgAnio0G = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenProg48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Grupocodi == regGrupo.Grupocodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, regGrupo.Grupocodi);
                ResultadoTotalGeneracion regEnergVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEnergEjecAnio0G, regEnergProgAnio0G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialAnio0);
                ResultadoTotalGeneracion regEnergAcumAnio0G = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Grupocodi == regGrupo.Grupocodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0, 0, 0, regGrupo.Grupocodi);

                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM48ValorMDResumenProdFromListaByFecha(listSemAct.Where(x => x.Grupocodi == regGrupo.Grupocodi).ToList(), fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, 0, regGrupo.Grupocodi);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM48ValorMDResumenProdFromListaByFecha(listSem1Ant.Where(x => x.Grupocodi == regGrupo.Grupocodi).ToList(), fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, 0, regGrupo.Grupocodi);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                listaTgen.Add(regTgenHidroG);
                listaTgen.Add(regTgenTermoG);
                listaTgen.Add(regTgenRERG);

                listaEnergEjec.Add(regEnergEjecAnio0G);
                listaEnergProg.Add(regEnergProgAnio0G);
                listaEnergEjec.Add(regEnergVarAnio0G);
                listaEnergEjec.Add(regEnergAcumAnio0G);

                listaMDEjec.Add(regMDAnio0G);
                listaMDEjec.Add(regMDAnio1G);
                listaMDEjec.Add(regMDVarAnio0G);
            }

            //Recorrer cada empresa
            foreach (var regEmpr in listaEmpresa)
            {
                List<int> listaGrupocodi = listaGrupoDespacho.Where(x => x.Emprcodi == regEmpr.Emprcodi).Select(x => x.Grupocodi).ToList();
                ResultadoTotalGeneracion regTgenHidroG = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && listaGrupocodi.Contains(x.Grupocodi) && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiHidro, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regTgenTermoG = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && listaGrupocodi.Contains(x.Grupocodi) && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiTermo, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regTgenRERG = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && listaGrupocodi.Contains(x.Grupocodi) && x.Tipogenerrer == "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiRER, regEmpr.Emprcodi, 0);

                ResultadoTotalGeneracion regEnergEjecAnio0G = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && listaGrupocodi.Contains(x.Grupocodi)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regEnergProgAnio0G = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenProg48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && listaGrupocodi.Contains(x.Grupocodi)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regEnergVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEnergEjecAnio0G, regEnergProgAnio0G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialAnio0);
                ResultadoTotalGeneracion regEnergAcumAnio0G = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && listaGrupocodi.Contains(x.Grupocodi)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0, 0, regEmpr.Emprcodi, 0);

                ResultadoTotalGeneracion regMDAnio0G = UtilSemanalPR5.GenerarM48ValorMDResumenProdFromListaByFecha(listSemAct.Where(x => listaGrupocodi.Contains(x.Grupocodi)).ToList(), fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regMDAnio1G = UtilSemanalPR5.GenerarM48ValorMDResumenProdFromListaByFecha(listSem1Ant.Where(x => listaGrupocodi.Contains(x.Grupocodi)).ToList(), fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, regEmpr.Emprcodi, 0);
                ResultadoTotalGeneracion regMDVarAnio0G = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0G, regMDAnio1G, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                listaTgen.Add(regTgenHidroG);
                listaTgen.Add(regTgenTermoG);
                listaTgen.Add(regTgenRERG);

                listaEnergEjec.Add(regEnergEjecAnio0G);
                listaEnergProg.Add(regEnergProgAnio0G);
                listaEnergEjec.Add(regEnergVarAnio0G);
                listaEnergEjec.Add(regEnergAcumAnio0G);

                listaMDEjec.Add(regMDAnio0G);
                listaMDEjec.Add(regMDAnio1G);
                listaMDEjec.Add(regMDVarAnio0G);
            }

            //Energia generada en el SEIN
            ResultadoTotalGeneracion regTgenHidro = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiHidro, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE);
            ResultadoTotalGeneracion regTgenTermo = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiTermo, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE);
            ResultadoTotalGeneracion regTgenRER = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Tipogenerrer == "S").ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiRER, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE);

            ResultadoTotalGeneracion regEnergEjecAnio0 = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE);
            ResultadoTotalGeneracion regEnergProgAnio0 = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenProg48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE);
            ResultadoTotalGeneracion regEnergVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEnergEjecAnio0, regEnergProgAnio0, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialAnio0);
            ResultadoTotalGeneracion regEnergAcumAnio0 = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listGenEjec48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0, 0, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE);

            ResultadoTotalGeneracion regMDAnio0 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(objRpt.ListaMDGen48, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE);
            ResultadoTotalGeneracion regMDAnio1 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(objRpt.ListaMDGen48, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE);
            ResultadoTotalGeneracion regMDVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0, regMDAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

            listaTotalTgen.Add(regTgenHidro);
            listaTotalTgen.Add(regTgenTermo);
            listaTotalTgen.Add(regTgenRER);

            listaTotalEnergEjec.Add(regEnergEjecAnio0);
            listaTotalEnergProg.Add(regEnergProgAnio0);
            listaTotalEnergEjec.Add(regEnergVarAnio0);
            listaTotalEnergEjec.Add(regEnergAcumAnio0);

            listaTotalMDEjec.Add(regMDAnio0);
            listaTotalMDEjec.Add(regMDAnio1);
            listaTotalMDEjec.Add(regMDVarAnio0);

            //Energia generada en el SEIN con Intercambios
            ResultadoTotalGeneracion regTgenHidroTIE = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(new List<MeMedicion48DTO>(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiHidro, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE);
            ResultadoTotalGeneracion regTgenTermoTIE = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(new List<MeMedicion48DTO>(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiTermo, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE);
            ResultadoTotalGeneracion regTgenRERTIE = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(new List<MeMedicion48DTO>(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, ConstantesPR5ReportesServicio.TgenercodiRER, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE);

            ResultadoTotalGeneracion regEnergEjecAnio0TIE = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(objRpt.ListaTotalSein48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE);
            ResultadoTotalGeneracion regEnergProgAnio0TIE = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(new List<MeMedicion48DTO>(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE);
            ResultadoTotalGeneracion regEnergVarAnio0TIE = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEnergEjecAnio0TIE, regEnergProgAnio0TIE, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialAnio0);
            ResultadoTotalGeneracion regEnergAcumAnio0TIE = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(objRpt.ListaTotalSein48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0, 0, 0, 0, ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE);

            ResultadoTotalGeneracion regMDAnio0TIE = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(objRpt.ListaMDSein48, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE);
            ResultadoTotalGeneracion regMDAnio1TIE = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(objRpt.ListaMDSein48, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE);
            ResultadoTotalGeneracion regMDVarAnio0TIE = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0TIE, regMDAnio1TIE, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

            listaTotalTgen.Add(regTgenHidroTIE);
            listaTotalTgen.Add(regTgenTermoTIE);
            listaTotalTgen.Add(regTgenRERTIE);

            listaTotalEnergEjec.Add(regEnergEjecAnio0TIE);
            listaTotalEnergProg.Add(regEnergProgAnio0TIE);
            listaTotalEnergEjec.Add(regEnergVarAnio0TIE);
            listaTotalEnergEjec.Add(regEnergAcumAnio0TIE);

            listaTotalMDEjec.Add(regMDAnio0TIE);
            listaTotalMDEjec.Add(regMDAnio1TIE);
            listaTotalMDEjec.Add(regMDVarAnio0TIE);

            #endregion

            #region Cuadro 2 

            listaTgenC2 = new List<ResultadoTotalGeneracion>();

            var listaCuadro2 = new[] {
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiHidro, Nombre = "GENERACIÓN HIDROELÉCTRICAS"},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiTermo, Nombre = "GENERACIÓN TERMOELÉCTRICAS"},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiRER, Nombre = "GENERACIÓN RENOVABLES"},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiTotal, Nombre = "TOTAL"},
                                }.ToList();

            foreach (var regFila in listaCuadro2)
            {
                List<MeMedicion48DTO> listaDataC2 = new List<MeMedicion48DTO>();
                if (regFila.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TgenercodiHidro) listaDataC2 = listGenEjec48.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiHidro && x.Tipogenerrer != "S").ToList();
                if (regFila.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TgenercodiTermo) listaDataC2 = listGenEjec48.Where(x => x.Tgenercodi == ConstantesPR5ReportesServicio.TgenercodiTermo && x.Tipogenerrer != "S").ToList();
                if (regFila.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TgenercodiRER) listaDataC2 = listGenEjec48.Where(x => x.Tipogenerrer == "S").ToList();
                if (regFila.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TgenercodiTotal) listaDataC2 = listGenEjec48.ToList();

                ResultadoTotalGeneracion regTotalAnio0 = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listaDataC2.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, 0, regFila.TipoSemanaRelProd);
                ResultadoTotalGeneracion regTotalAnio1 = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listaDataC2.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, 0, regFila.TipoSemanaRelProd);
                ResultadoTotalGeneracion regDifEnerg = UtilSemanalPR5.GenerarDiferenciaByTotalGeneracion(regTotalAnio0, regTotalAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Resta, fechaSemMDAct);
                ResultadoTotalGeneracion regTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regTotalAnio0, regTotalAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                listaTgenC2.Add(regTotalAnio0);
                listaTgenC2.Add(regTotalAnio1);
                listaTgenC2.Add(regDifEnerg);
                listaTgenC2.Add(regTotalVarAnio0);
            }

            #endregion

            #region Cuadro 3 

            listaTIEC3 = new List<ResultadoTotalGeneracion>();

            var listaCuadro3 = new[] {
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp, Nombre = "IMPORTACIÓN" },
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp, Nombre = "EXPORTACIÓN" }
                                }.ToList();

            foreach (var regFila in listaCuadro3)
            {
                List<MeMedicion48DTO> listaDataC3 = new List<MeMedicion48DTO>();
                if (regFila.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelImp) listaDataC3 = listaInterconexionImp;
                if (regFila.TipoSemanaRelProd == ConstantesPR5ReportesServicio.TipoSemanaRelExp) listaDataC3 = listaInterconexionExp;

                ResultadoTotalGeneracion regTotalAnio0 = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, 0, regFila.TipoSemanaRelProd);
                ResultadoTotalGeneracion regTotalAnio1 = UtilSemanalPR5.ResumenProduccionObtenerDataMWhTotal(listaDataC3.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0, fechaInicialSem0, fechaInicialSem0, 0, 0, 0, regFila.TipoSemanaRelProd);
                ResultadoTotalGeneracion regDifEnerg = UtilSemanalPR5.GenerarDiferenciaByTotalGeneracion(regTotalAnio0, regTotalAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Resta, fechaSemMDAct);
                ResultadoTotalGeneracion regTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regTotalAnio0, regTotalAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                listaTIEC3.Add(regTotalAnio0);
                listaTIEC3.Add(regTotalAnio1);
                listaTIEC3.Add(regDifEnerg);
                listaTIEC3.Add(regTotalVarAnio0);
            }

            #endregion
        }

        private void GenerarExcelResumenProduccion(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = this.ListarDataVersionResumenProduccion(objFiltro);

            int UltimaFilaTabla;

            ws.Cells[6, 3].Value = objReporte.TextoResumen;

            UtilSemanalPR5.GenerarCharExcelResumenProduccion(ws, objFecha, objReporte.Tabla, out UltimaFilaTabla);

            UtilSemanalPR5.GenerarCharExcelResumenProduccionC2YC3(ws, 298, objFecha, objReporte.DataTablaXTgen);

            UtilSemanalPR5.GenerarCharExcelResumenProduccionC2YC3(ws, 308, objFecha, objReporte.DataTablaTIE);

            ws.Cells[313, 3].Value = string.Format("(*): Información actualizada al día {0}.", objFecha.AnioAct.Fecha_Final.ToString(ConstantesAppServicio.FormatoFechaEjecutivo2));
            ws.Cells[314, 3].Value = string.Format("(**): La Generación Acumulada Anual en MWh comprende desde el {0} al {1}.", objFecha.AnioAct.Fecha_01Enero.ToString(ConstantesAppServicio.FormatoFechaEjecutivo2), objFecha.AnioAct.Fecha_Final.ToString(ConstantesAppServicio.FormatoFechaEjecutivo2));
        }

        #endregion

        #endregion

        #region A. OFERTA DE GENERACIÓN ELÉCTRICA EN EL SEIN

        #region Metodos RegionA

        private void ListarIngresoSalidaOperacionComercialSEIN(DateTime fechaInicial, DateTime fechaFinal
                                        , out List<EqEquipoDTO> lstEquiposIngresos, out List<EqEquipoDTO> lstEquiposRetiros, string famcodi = "2,3,36,38")
        {
            lstEquiposIngresos = new List<EqEquipoDTO>();
            lstEquiposRetiros = new List<EqEquipoDTO>();

            List<EqEquipoDTO> lstEquipos = servEquipamiento.ListarEquiposTienenOpComercial(fechaInicial, fechaFinal, ConstantesHorasOperacion.CodFamilias + "," + ConstantesHorasOperacion.CodFamiliasGeneradores, out List<ResultadoValidacionAplicativo> listaMsjEq);
            //SIOSEIN-PRIE-2021
            List<EqEquipoDTO> newLstEquipos = new List<EqEquipoDTO>(lstEquipos.Count);
            lstEquipos.ForEach((item) =>
            {
                newLstEquipos.Add((EqEquipoDTO)item.Clone());
            });
            //

            //Set Tecnologia
            List<EqCategoriaEquipoDTO> listaEqCtgTecnologia = this.servEquipamiento.ListaClasificacionPaginado(-2, -2, -2, -2,
                ConstantesPR5ReportesServicio.CategoriaTecnolog, -3, string.Empty, -1, -1);

            foreach (var equipo in lstEquipos)
            {
                EqCategoriaEquipoDTO eqCat = listaEqCtgTecnologia.Find(x => x.Equicodi == equipo.Equicodi);
                if (eqCat != null)
                {

                    equipo.Ctgcodi = ConstantesPR5ReportesServicio.CategoriaTecnolog;
                    equipo.Ctgdetnomb = eqCat.Ctgdetnomb;
                }
            }

            lstEquiposIngresos = lstEquipos.Where(x => x.TieneNuevoIngresoOpComercial).ToList();
            lstEquiposIngresos = FiltrarCambiosTitularidad(lstEquiposIngresos, (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso);

            lstEquiposRetiros = newLstEquipos.Where(x => x.TieneNuevoRetiroOpComercial).ToList();//SIOSEIN-PRIE-2021
            lstEquiposRetiros = FiltrarCambiosTitularidad(lstEquiposRetiros, (int)ConstantesPR5ReportesServicio.TipoOperacion.Retiro);
        }

        /// <summary>
        /// Verifica y actualiza el estado de titularidad de los equipos
        /// </summary>
        /// <param name="lstEquipos"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        private List<EqEquipoDTO> FiltrarCambiosTitularidad(List<EqEquipoDTO> lstEquipos, int tipoOperacion)
        {

            List<int> equipoActual = new List<int>();
            var listaEquiposFecha = tipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso ? lstEquipos.GroupBy(x => x.Equifechiniopcom).ToList() : lstEquipos.GroupBy(x => x.Equifechfinopcom).ToList();

            List<SiHisempeqDataDTO> listaHistEq = this.servTitEmp.ListSiHisempeqDatas("-1");
            listaHistEq = listaHistEq.OrderByDescending(x => x.Heqdatfecha).ToList();

            foreach (var listEquipFecha in listaEquiposFecha)
            {
                foreach (var reg in listEquipFecha)
                {
                    var regHistEq = listaHistEq.Find(x => x.Equicodi == reg.Equicodi);
                    if (regHistEq != null)
                    {
                        if (tipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Retiro)//Retiro
                        {
                            if (regHistEq.Equicodi == regHistEq.Equicodiactual)
                            {
                                equipoActual.Add(regHistEq.Equicodi);
                            }
                        }
                        else
                            equipoActual.Add(regHistEq.Equicodiactual);
                    }
                    else
                        equipoActual.Add(reg.Equicodi);
                }
            }

            lstEquipos = lstEquipos.Where(x => equipoActual.Contains(x.Equicodi)).ToList();
            lstEquipos.Select(x => x.TipoOperacion = tipoOperacion).ToList();

            return lstEquipos;
        }

        #endregion

        #region A.1. Ingreso en Operación Comercial al SEIN

        /// <summary>
        /// ListarDataVersionIngresoOpComercSEIN
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionIngresoOpComercSEIN(InfSGIFiltroReporte objFiltro, int tipoOperacion)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarReporteIngresoOperacionSem(objFiltro.ObjFecha, tipoOperacion, out List<OperacionComercialSein> lstData);
                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaIngresoSalidaOperacion(objFiltro.ObjFecha.TipoReporte, lstData, objFiltro.ObjFecha.FechaFinal, tipoOperacion);
                objReporte.Grafico = UtilSemanalPR5.GenerarGWebIngresoOpComercialSeinHtml(objFiltro.ObjFecha.TipoReporte, lstData, objFiltro.ObjFecha.FechaFinal, tipoOperacion);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                GetDataVersionIngresoOpComercSEIN(listaDat, out List<OperacionComercialSein> lstData);
                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaIngresoSalidaOperacion(objFiltro.ObjFecha.TipoReporte, lstData, objFiltro.ObjFecha.FechaFinal, tipoOperacion);
                objReporte.Grafico = UtilSemanalPR5.GenerarGWebIngresoOpComercialSeinHtml(objFiltro.ObjFecha.TipoReporte, lstData, objFiltro.ObjFecha.FechaFinal, tipoOperacion);

            }
            return objReporte;
        }

        /// <summary>
        /// GetDataVersionIngresoOpComercSEIN
        /// </summary>
        /// <param name="listaDat"></param>
        /// <param name="lstData"></param>
        public void GetDataVersionIngresoOpComercSEIN(List<SiVersionDatDTO> listaDat, out List<OperacionComercialSein> lstData)
        {
            lstData = new List<OperacionComercialSein>();

            foreach (var objDat in listaDat)
            {
                string[] words = objDat.Verdatvalor.Split('|');
                string[] words2 = objDat.Verdatvalor2.Split('|');

                decimal valorTension = 0.0M;
                if (!string.IsNullOrEmpty(words2[0]))
                {
                    decimal.TryParse(words2[0], out decimal valorDecimal);
                    valorTension = valorDecimal;
                }
                decimal? valorPotEfectiva = null;
                if (!string.IsNullOrEmpty(words2[1]))
                {
                    decimal.TryParse(words2[1], out decimal valorDecimal);
                    if (valorDecimal != 0) valorPotEfectiva = valorDecimal;
                }
                decimal? valorPotInstalada = null;
                if (!string.IsNullOrEmpty(words2[2]))
                {
                    decimal.TryParse(words2[2], out decimal valorDecimal);
                    if (valorDecimal != 0) valorPotInstalada = valorDecimal;
                }

                DateTime fechaOperac = DateTime.ParseExact(words2[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                lstData.Add(new OperacionComercialSein()
                {
                    Empresa = words[0],
                    Generacion = words[1],
                    Recurso = words[2],
                    Tecnologia = words[3],
                    Central = words[4],
                    Unidades = words[5],
                    Tension = valorTension,
                    PotEfectiva = valorPotEfectiva,
                    PotInstalada = valorPotInstalada,
                    FechaOperacion = fechaOperac
                });

            }
        }

        private void CargarReporteIngresoOperacionSem(FechasPR5 objFecha, int tipoOperacion, out List<OperacionComercialSein> lstData)
        {
            int tipoReporte = objFecha.TipoReporte;
            DateTime fechaInicial = objFecha.AnioAct.Fecha_01Enero;
            DateTime fechaFinal = objFecha.FechaFinal;

            lstData = ObtenerIngresoRetiroOperacionComercialSEIN(fechaInicial, fechaFinal, tipoOperacion);


            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal || objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal)
            {
                lstData = lstData.Where(x => (new List<int>() { 3, 2, 36, 38 }).Contains(x.Famcodi)).ToList();
            }

        }

        /// <summary>
        /// Genera listado de ingreso y retiro operacion comercial de las Unidades y Centrales
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public List<OperacionComercialSein> ObtenerIngresoRetiroOperacionComercialSEIN(DateTime fechaInicial, DateTime fechaFinal, int tipoOperacion)
        {
            ListarIngresoSalidaOperacionComercialSEIN(fechaInicial, fechaFinal, out List<EqEquipoDTO> lstEquiposIngreso, out List<EqEquipoDTO> lstEquiposRetiros, "2,3,4,5,36,37,38,39");//Generadores y centrales

            List<EqEquipoDTO> listaIngresoRetiro = new List<EqEquipoDTO>();
            if (tipoOperacion != -1)
            {
                if (tipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso) // para Ingresos de Operacion
                    listaIngresoRetiro = lstEquiposIngreso;

                if (tipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Retiro) // para Salidas de Operacion
                    listaIngresoRetiro = lstEquiposRetiros;
            }
            else
            {
                listaIngresoRetiro = lstEquiposIngreso.Union(lstEquiposRetiros).ToList();
            }

            List<EqEquipoDTO> listaPropUnidadTermo = new List<EqEquipoDTO>();
            List<EqEquipoDTO> listaPropUnidadEsp = new List<EqEquipoDTO>();
            List<EqEquipoDTO> listaPropEq = new List<EqEquipoDTO>();

            #region Potencia efectiva, instalada

            var servInd = new INDAppServicio();
            if (listaIngresoRetiro.Where(x => (new List<int>() { 3, 5 }).Contains(x.Famcodi ?? 0)).Any())
            {
                servInd.ListarUnidadTermicoOpComercial(ConstantesIndisponibilidades.AppPR25, fechaInicial, fechaFinal, out List<EqEquipoDTO> lista0, out listaPropUnidadTermo, out List<ResultadoValidacionAplicativo> listaMsj3);

                servInd.ListarUnidadTermicoEspecial(fechaInicial, fechaFinal, "4, 6, 16, 18, 3, 5, 15, 17", true, out listaPropUnidadEsp, out List<EqEquipoDTO> listaCentralESpTermo);
            }

            if (listaIngresoRetiro.Where(x => (new List<int>() { 2, 4 }).Contains(x.Famcodi ?? 0)).Any())
            {
                servInd.ListarEqCentralHidraulicoOpComercial(fechaInicial, fechaFinal, out List<EqEquipoDTO> lista1, out List<EqEquipoDTO> listaPropHidro, out List<ResultadoValidacionAplicativo> listaMsj2);
                listaPropEq.AddRange(listaPropHidro);
            }

            if (listaIngresoRetiro.Where(x => (new List<int>() { 36, 37 }).Contains(x.Famcodi ?? 0)).Any())
            {
                servInd.ListarEqCentralSolarOpComercial(fechaInicial, fechaFinal, out List<EqEquipoDTO> listaPropSolar, out List<EqEquipoDTO> lista2, out List<ResultadoValidacionAplicativo> listaMsj3);
                listaPropEq.AddRange(listaPropSolar);
            }

            if (listaIngresoRetiro.Where(x => (new List<int>() { 38, 39 }).Contains(x.Famcodi ?? 0)).Any())
            {
                servInd.ListarEqCentralEolicaOpComercial(fechaInicial, fechaFinal, out List<EqEquipoDTO> listaPropEolico, out List<EqEquipoDTO> lista3, out List<ResultadoValidacionAplicativo> listaMsj4);
                listaPropEq.AddRange(listaPropEolico);
            }

            #endregion

            List<OperacionComercialSein> listaResult = new List<OperacionComercialSein>();

            foreach (var item in listaIngresoRetiro)
            {
                OperacionComercialSein reg = new OperacionComercialSein();
                reg.Equicodi = item.Equicodi;
                reg.Famcodi = item.Famcodi.Value;
                reg.Central = item.Central;
                reg.Unidades = item.Equiabrev;
                reg.Empresa = item.Emprnomb;
                reg.Tipoemprcodi = item.Tipoemprcodi;
                reg.Emprcodi = item.Emprcodi ?? 0;

                if (item.TipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso)
                    reg.FechaOperacion = item.Equifechiniopcom;

                if (item.TipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Retiro)
                    reg.FechaOperacion = item.Equifechfinopcom;

                reg.Tension = item.Equitension;
                reg.TipoOperacion = item.TipoOperacion;
                reg.Osinergcodi = item.Osinergcodi;
                reg.Recurso = item.Fenergnomb;

                if (reg.Famcodi == 3 || reg.Famcodi == 5) reg.Generacion = ConstantesPR5ReportesServicio.TgenerTermo;
                if (reg.Famcodi == 2 || reg.Famcodi == 4) reg.Generacion = ConstantesPR5ReportesServicio.TgenerHidro;
                if (reg.Famcodi == 36 || reg.Famcodi == 37) reg.Generacion = ConstantesPR5ReportesServicio.TgenerSolar;
                if (reg.Famcodi == 38 || reg.Famcodi == 39) reg.Generacion = ConstantesPR5ReportesServicio.TgenerEolica;

                EqCategoriaEquipoDTO eqCate = servEquipamiento.GetByIdEqCategoriaIdEquipo(4, item.Equicodi);

                reg.Tecnologia = (eqCate != null ? eqCate.Ctgdetnomb : "");

                //la central debe mostrar el codigo 'G' del grupo despacho
                if ((new List<int>() { 4, 5, 37, 39 }).Contains(item.Famcodi ?? 0))
                {
                    reg.Osinergcodi = item.OsinergcodiDespacho;
                }

                if ((new List<int>() { 3, 5 }).Contains(item.Famcodi ?? 0))
                {
                    var regEsp = listaPropUnidadEsp.Find(x => x.Equicodi == item.Equicodi);
                    if (regEsp != null)
                    {
                        reg.PotEfectiva = regEsp.Pe;
                        reg.PotInstalada = regEsp.PotenciaInstalada;
                        reg.PotNominal = regEsp.PotenciaNominal;
                    }
                    else
                    {
                        var regTermo = listaPropUnidadTermo.Find(x => x.Equicodi == item.Equicodi);
                        if (regTermo != null)
                        {
                            reg.PotEfectiva = regTermo.Pe;
                            reg.PotInstalada = regTermo.PotenciaInstalada;
                            reg.PotNominal = regTermo.PotenciaNominal;
                        }
                    }
                }
                else
                {
                    var reg38 = listaPropEq.Find(x => x.Equicodi == item.Equicodi);
                    if (reg38 != null)
                    {
                        reg.PotEfectiva = reg38.Pe;
                        reg.PotInstalada = reg38.PotenciaInstalada;
                        reg.PotNominal = reg38.PotenciaNominal;
                    }
                }

                listaResult.Add(reg);
            }

            return listaResult;
        }

        private void GenerarExcelIngresoRetiroOpComercialSemanal(ExcelWorksheet ws, FechasPR5 objFecha, int tipoOperacion, InfSGIFiltroReporte objFiltro)
        {
            string tipoVistaReporte = objFecha.TipoVistaReporte;

            InfSGIReporteVersionado objReporteIng = new InfSGIReporteVersionado();
            InfSGIReporteVersionado objReporteSal = new InfSGIReporteVersionado();
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            // Cuando en un mismo hoja de excel aparecerá tanto ingresos como retiros
            if (tipoOperacion == -1)
            {
                objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemIngresoOpComercSEIN;
                objReporteIng = ListarDataVersionIngresoOpComercSEIN(objFiltro, 1);
                objReporteIng.Tabla.ListaItem = ListarItemFromSiMenureporte();
                objFiltro.Mrepcodi = ConstantesInformeSemanalPR5.IndexSemRetiroOpComercSEIN;
                objReporteSal = ListarDataVersionIngresoOpComercSEIN(objFiltro, 2);
                objReporteSal.Tabla.ListaItem = ListarItemFromSiMenureporte();

            }
            //Cuando en cada hoja de excel aparecerá solo uno (ingreso o retiro)
            else
            {
                objReporte = ListarDataVersionIngresoOpComercSEIN(objFiltro, tipoOperacion);
                objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();
            }

            int ultimaFilaTablaI;
            int ultimaFilaTablaS;
            if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaIndividual)
            {
                if (tipoOperacion == 1) //Ingreso
                {
                    int ultimaFilaGrafico = 0;
                    UtilSemanalPR5.GenerarCharExcelListadoIngresoOpeComercial(ws, objFecha, objReporte.Tabla, 0, out ultimaFilaTablaI);
                    UtilSemanalPR5.GenerarCharExcelGraficosOpComercial(ws, tipoOperacion, objFecha, objReporte.Grafico, ultimaFilaTablaI, out ultimaFilaGrafico);
                }

                if (tipoOperacion == 2) //Retiro
                {
                    int ultimaFilaGrafico = 0;
                    UtilSemanalPR5.GenerarCharExcelListadoSalidaOpeComercial(ws, objFecha, objReporte.Tabla, 0, out ultimaFilaTablaS);
                    UtilSemanalPR5.GenerarCharExcelGraficosOpComercial(ws, tipoOperacion, objFecha, objReporte.Grafico, ultimaFilaTablaS, out ultimaFilaGrafico);
                }
            }
            else
            {
                if (tipoVistaReporte == ConstantesPR5ReportesServicio.TipoVistaGrupal)
                {
                    int ultimaFilaGrafico;

                    // ingreso de operacion
                    UtilSemanalPR5.GenerarCharExcelListadoIngresoOpeComercial(ws, objFecha, objReporteIng.Tabla, 0, out ultimaFilaTablaI);
                    UtilSemanalPR5.GenerarCharExcelGraficosOpComercial(ws, tipoOperacion, objFecha, objReporteIng.Grafico, ultimaFilaTablaI, out ultimaFilaGrafico);

                    //retiro de operacion
                    UtilSemanalPR5.GenerarCharExcelListadoSalidaOpeComercial(ws, objFecha, objReporteSal.Tabla, ultimaFilaGrafico + 5, out ultimaFilaTablaS);
                }
            }
        }

        #endregion

        #endregion

        #region B. MATRIZ ELÉCTRICA DE GENERACIÓN DEL SEIN (GWh)

        #region B.1. Producción por tipo de Generación

        private List<MeMedicion48DTO> ListaDataMaximaDemanda48Tgeneracion(DateTime fechaInicial, DateTime fechaFinal, int lectcodi)
        {
            List<MeMedicion48DTO> listaDemanda = new List<MeMedicion48DTO>();

            TimeSpan ts = fechaFinal.Subtract(fechaInicial);
            int totalDia = Convert.ToInt32(ts.TotalDays);

            DateTime fechaIni = fechaInicial;
            DateTime fechaFin = fechaIni;

            do
            {
                fechaFin = fechaIni.AddDays(240);
                if (fechaFin > fechaFinal)
                    fechaFin = fechaFinal;

                List<MeMedicion48DTO> listaM48Rango = this.servEjec.ListaDataMDGeneracionConsolidado48(fechaIni, fechaFin, ConstantesMedicion.IdTipogrupoCOES, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString(), ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString()
                    , false, lectcodi);

                List<MeMedicion48DTO> listTipoGeneracion = (from t in listaM48Rango
                                                            group t by new { t.Medifecha, t.Tgenercodi, t.Tgenernomb }
                                                            into destino
                                                            select new MeMedicion48DTO()
                                                            {
                                                                Medifecha = destino.Key.Medifecha,
                                                                Tgenercodi = destino.Key.Tgenercodi,
                                                                Tgenernomb = destino.Key.Tgenernomb,
                                                                H1 = destino.Sum(t => t.H1),
                                                                H2 = destino.Sum(t => t.H2),
                                                                H3 = destino.Sum(t => t.H3),
                                                                H4 = destino.Sum(t => t.H4),
                                                                H5 = destino.Sum(t => t.H5),
                                                                H6 = destino.Sum(t => t.H6),
                                                                H7 = destino.Sum(t => t.H7),
                                                                H8 = destino.Sum(t => t.H8),
                                                                H9 = destino.Sum(t => t.H9),
                                                                H10 = destino.Sum(t => t.H10),

                                                                H11 = destino.Sum(t => t.H11),
                                                                H12 = destino.Sum(t => t.H12),
                                                                H13 = destino.Sum(t => t.H13),
                                                                H14 = destino.Sum(t => t.H14),
                                                                H15 = destino.Sum(t => t.H15),
                                                                H16 = destino.Sum(t => t.H16),
                                                                H17 = destino.Sum(t => t.H17),
                                                                H18 = destino.Sum(t => t.H18),
                                                                H19 = destino.Sum(t => t.H19),
                                                                H20 = destino.Sum(t => t.H20),

                                                                H21 = destino.Sum(t => t.H21),
                                                                H22 = destino.Sum(t => t.H22),
                                                                H23 = destino.Sum(t => t.H23),
                                                                H24 = destino.Sum(t => t.H24),
                                                                H25 = destino.Sum(t => t.H25),
                                                                H26 = destino.Sum(t => t.H26),
                                                                H27 = destino.Sum(t => t.H27),
                                                                H28 = destino.Sum(t => t.H28),
                                                                H29 = destino.Sum(t => t.H29),
                                                                H30 = destino.Sum(t => t.H30),

                                                                H31 = destino.Sum(t => t.H31),
                                                                H32 = destino.Sum(t => t.H32),
                                                                H33 = destino.Sum(t => t.H33),
                                                                H34 = destino.Sum(t => t.H34),
                                                                H35 = destino.Sum(t => t.H35),
                                                                H36 = destino.Sum(t => t.H36),
                                                                H37 = destino.Sum(t => t.H37),
                                                                H38 = destino.Sum(t => t.H38),
                                                                H39 = destino.Sum(t => t.H39),
                                                                H40 = destino.Sum(t => t.H40),

                                                                H41 = destino.Sum(t => t.H41),
                                                                H42 = destino.Sum(t => t.H42),
                                                                H43 = destino.Sum(t => t.H43),
                                                                H44 = destino.Sum(t => t.H44),
                                                                H45 = destino.Sum(t => t.H45),
                                                                H46 = destino.Sum(t => t.H46),
                                                                H47 = destino.Sum(t => t.H47),
                                                                H48 = destino.Sum(t => t.H48)
                                                            }).ToList();

                List<decimal> listaH;
                decimal total; decimal? valorH;
                foreach (var reg in listTipoGeneracion)
                {
                    listaH = new List<decimal>();
                    total = 0;
                    for (int h = 1; h <= 48; h++)
                    {
                        valorH = (decimal?)reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(reg, null);
                        if (valorH != null)
                        {
                            listaH.Add(valorH.Value);
                        }
                    }

                    if (listaH.Count > 0)
                    {
                        total = listaH.Sum(x => x);
                    }

                    reg.Meditotal = total;
                }

                listaDemanda.AddRange(listTipoGeneracion);

                //
                fechaIni = fechaFin.AddDays(1);
                ts = fechaFinal.Subtract(fechaIni);
                totalDia = Convert.ToInt32(ts.TotalDays);
            } while (totalDia > 0);

            return listaDemanda;
        }

        private void GenerarExcelProduccionTipoGenEject(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionProdTipoGen(objFiltro);

            UtilSemanalPR5.GenerarCharExcelListadoProduccionTipoGeneracion(ws, objFecha, objReporte.Tabla, out int numRecursos, out int ultimaFilaTabla);
            UtilSemanalPR5.GenerarCharExcelGraficoComparacionProduccionGen(ws, objFecha, objReporte.GraficoComp, numRecursos, ultimaFilaTabla + 4, out int ultimaFilaGraf1);
            UtilSemanalPR5.GenerarCharExcelGraficoEvolucionGenEjec(ws, objFecha, objReporte.GraficoProdSem);
        }

        private void GenerarExcelProduccionTipoGen(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionProdTipoGen(objFiltro);

            UtilSemanalPR5.GenerarCharExcelListadoProduccionTipoGeneracion(ws, objFecha, objReporte.Tabla, out int numRecursos, out int ultimaFilaTabla);

            UtilSemanalPR5.GenerarCharExcelGraficoComparacionProduccionGen(ws, objFecha, objReporte.GraficoComp, numRecursos, ultimaFilaTabla + 4, out int ultimaFilaGraf1);

            UtilSemanalPR5.GenerarCharExcelGraficoEvolucionGen(ws, objFecha, objReporte.GraficoEvoSem);
        }

        /// <summary>
        /// ListarDataVersionProdTipoGen
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionProdTipoGen(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.CargarReporteProduccionXTgeneracionInfSem(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                    out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData,
                                                                    out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaEvolucionSemanal,
                                                                    out List<ResultadoTotalGeneracion> listaEnergiaYVarAnualData);

                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaProdTipoGen(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaMDPotGenData, listaInterTipoData,
                                            listaInterTotalData, listaTgeneracion);
                objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();
                objReporte.GraficoComp = UtilSemanalPR5.GraficoComparacionProduccionEnergiaAcumulada(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaTgeneracion);
                objReporte.GraficoEvoSem = UtilSemanalPR5.GraficoEvolucionSemanalEnergia(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaEvolucionSemanal);
                objReporte.GraficoProdSem = UtilSemanalPR5.GraficoBarraEnergiayEvolucionAnual(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaEnergiaYVarAnualData);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionProdTipoGen(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData,
                                                                out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaEvolucionSemanal,
                                                                out List<ResultadoTotalGeneracion> listaEnergiaYVarAnualData, objFiltro);

                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaProdTipoGen(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaMDPotGenData, listaInterTipoData,
                                        listaInterTotalData, listaTgeneracion);
                objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();
                objReporte.GraficoComp = UtilSemanalPR5.GraficoComparacionProduccionEnergiaAcumulada(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaTgeneracion);
                objReporte.GraficoEvoSem = UtilSemanalPR5.GraficoEvolucionSemanalEnergia(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaEvolucionSemanal);
                objReporte.GraficoProdSem = UtilSemanalPR5.GraficoBarraEnergiayEvolucionAnual(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaEnergiaYVarAnualData);

            }
            return objReporte;
        }

        private void GetDataVersionProdTipoGen(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                    out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData,
                                                                    out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaEvolucionSemanal,
                                                                    out List<ResultadoTotalGeneracion> listaEnergiaYVarAnualData, InfSGIFiltroReporte objFiltro)
        {
            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();
            listaTgeneracion = new List<SiTipogeneracionDTO>();
            listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();
            listaEnergiaYVarAnualData = new List<ResultadoTotalGeneracion>();


            int iTipoResultadoFecha = 0;
            bool Isvariacion = false;

            int iTipoReporte = objFiltro.ObjFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal ? ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia : ConstantesConceptoVersion.ConceptoCodiGraficoProdSemVariacionAnual;

            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi != iTipoReporte).ToList())
            {
                switch (objDat.Vercnpcodi)
                {
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnteriorPrecAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoPrecAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Total_Var;
                        Isvariacion = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionActualVSAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                        Isvariacion = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoPrecAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionAnteriorVSPrecedeAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                        Isvariacion = true;
                        break;
                }

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO()
                {
                    TipoResultadoFecha = iTipoResultadoFecha,
                    SemanaFechaDesc = objDat.Verdatvalor2
                });

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)// Si es tipo de generación
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }

                        if (!Isvariacion)
                        {
                            DateTime FechaInicio = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                            DateTime FechaFin = DateTime.ParseExact(words[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);

                            listaTgeneracion.Add(new SiTipogeneracionDTO()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                Tgenernomb = words[1]
                            });

                            FiltroCeldaDato FiltroCelda = new FiltroCeldaDato()
                            {
                                FechaIni = FechaInicio,
                                FechaFin = FechaFin,
                                Tgenercodi = objDatDet.Vdatdtid,
                            };
                            listaMDTgeneracionData.Add(new ResultadoTotalGeneracion()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                                FiltroCeldaDato = FiltroCelda
                            });
                        }
                        else
                        {
                            listaMDTgeneracionData.Add(new ResultadoTotalGeneracion()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }


                    }
                    else
                    {
                        //Potencia generada en el  SEIN
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)
                        {
                            listaMDPotGenData.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                            });
                        }
                        else
                        {   //Intercambios Internacionales
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales)
                            {
                                listaInterTotalData.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal,
                                });
                            }
                            else //Tipo de interconexion
                            {

                                int iTptomedicodi = objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoenergiaImportada ? ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh : ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
                                if (!Isvariacion)
                                {

                                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                                    if (!string.IsNullOrEmpty(words[0]))
                                    {
                                        decimal.TryParse(words[0], out decimal valorDecimal);
                                        objDatDet.ValorDecimal = valorDecimal;
                                    }

                                    DateTime FechaInicio = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                                    DateTime FechaFin = DateTime.ParseExact(words[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);

                                    FiltroCeldaDato FiltroCelda = new FiltroCeldaDato()
                                    {
                                        FechaIni = FechaInicio,
                                        FechaFin = FechaFin,
                                        Tgenercodi = objDatDet.Vdatdtid,
                                    };


                                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior)
                                    {
                                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                    }

                                    listaInterTipoData.Add(new ResultadoTotalGeneracion()
                                    {
                                        Tptomedicodi = iTptomedicodi,
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        Meditotal = objDatDet.ValorDecimal,
                                        FiltroCeldaDato = FiltroCelda
                                    });
                                }
                                else
                                {
                                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior)
                                    {
                                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                    }
                                    listaInterTipoData.Add(new ResultadoTotalGeneracion()
                                    {
                                        Tptomedicodi = iTptomedicodi,
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        Meditotal = objDatDet.ValorDecimal,
                                    });
                                }
                            }
                        }
                    }
                }
            }
            listaTgeneracion = listaTgeneracion.DistinctBy(m => new { m.Tgenercodi, m.Tgenernomb }).ToList();

            //gráfico Evolución semanal
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia).ToList())
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    listaEvolucionSemanal.Add(new ResultadoTotalGeneracion()
                    {
                        TipoResultadoFecha = objDatDet.Vdatdtid,
                        Medifecha = (DateTime)objDatDet.Vdatdtfecha,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }
            }

            //gráfico producción semanal y variación anual
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoProdSemVariacionAnual).ToList())
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    listaEnergiaYVarAnualData.Add(new ResultadoTotalGeneracion()
                    {
                        TipoResultadoFecha = objDatDet.Vdatdtid,
                        Medifecha = (DateTime)objDatDet.Vdatdtfecha,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }
            }

        }

        private void CargarReporteProduccionXTgeneracionInfSem(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                    out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData,
                                                                    out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaEvolucionSemanal,
                                                                    out List<ResultadoTotalGeneracion> listaEnergiaYVarAnualData)
        {
            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();
            listaTgeneracion = new List<SiTipogeneracionDTO>();
            listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();
            listaEnergiaYVarAnualData = new List<ResultadoTotalGeneracion>();

            this.CargarReporteProduccionXTgeneracionDataSemanal(objFecha, out listaTotalMaximaDemadaDesc, out listaMDTgeneracionData,
                                                                    out listaMDPotGenData, out listaInterTipoData,
                                                                    out listaInterTotalData, out listaTgeneracion, out listaEvolucionSemanal,
                                                                    out listaEnergiaYVarAnualData);
        }

        private void CargarReporteProduccionXTgeneracionDataSemanal(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                    out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData,
                                                                    out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaEvolucionSemanal,
                                                                    out List<ResultadoTotalGeneracion> listaEnergiaYVarAnualData)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;


            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();
            listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaEnergiaYVarAnualData = new List<ResultadoTotalGeneracion>();

            listaTgeneracion = this.ListarSiTipogeneracion();

            //Data Generación y Data Interconexion

            InfSGIResumenProd objRptEjec = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData, true);
            InfSGIResumenProd objRptProg = GetResumenGeneracion48CargaMasivaProgramado(fechaIniData, fechaFinData, false);

            List<MeMedicion48DTO> listCon48 = objRptEjec.ListaTotalGenTgener48;
            List<MeMedicion48DTO> listaInterconexion48 = objRptEjec.ListaTotalInterconexion48;

            List<MeMedicion48DTO> listaDemandaGen48 = objRptEjec.ListaTotalGen48;
            List<MeMedicion48DTO> listaDemandaProgGen48 = objRptProg.ListaTotalGen48;

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = objFecha.Anio3Ant.NumAnio.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = objFecha.Anio2Ant.NumAnio.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = objFecha.AnioAct.NumAnio.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = objFecha.Anio1Ant.NumAnio.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = objFecha.AnioAct.NumAnio.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = objFecha.Anio1Ant.NumAnio.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = objFecha.AnioAct.NumAnio.ToString() + "/" + objFecha.Anio1Ant.NumAnio.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = objFecha.Anio2Ant.NumAnio.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = objFecha.Anio1Ant.NumAnio.ToString() + "/" + objFecha.Anio2Ant.NumAnio.ToString() });

            //Tipo de generación
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();

            foreach (var reg in listaTgeneracion)
            {
                ResultadoTotalGeneracion regProdGenxTgAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxTgAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxTgAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxTgAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxTgTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxTgAnio0, regProdGenxTgAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxTgAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxTgAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxTgAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxTgAcum0, regProdGenxTgAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxTgAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxTgAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxTgAcum1, regProdGenxTgAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regProdGenxTgAnio3);
                listaMDxTgen.Add(regProdGenxTgAnio2);
                listaMDxTgen.Add(regProdGenxTgAnio0);

                listaMDxTgen.Add(regProdGenxTgAnio1);
                listaMDxTgen.Add(regProdGenxTgTotalVarAnio0);

                listaMDxTgen.Add(regProdGenxTgAcum0);
                listaMDxTgen.Add(regProdGenxTgAcum1);
                listaMDxTgen.Add(regProdGenxTgAcumVarAnio0);

                listaMDxTgen.Add(regProdGenxTgAcum2);
                listaMDxTgen.Add(regProdGenxTgAcumVarAnio1);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Tgenercodi = reg.Tgenercodi;
                    if (regData.FiltroCeldaDato != null)
                        regData.FiltroCeldaDato.Tgenercodi = regData.Tgenercodi;
                }

                listaMDTgeneracionData.AddRange(listaMDxTgen);
            }

            //Potencia generada en el SEIN
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAnio0, regProdGenAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum1, regProdGenAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaMDPotGenData.Add(regProdGenAnio3);
            listaMDPotGenData.Add(regProdGenAnio2);
            listaMDPotGenData.Add(regProdGenAnio0);

            listaMDPotGenData.Add(regProdGenAnio1);
            listaMDPotGenData.Add(regProdGenTotalVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum0);
            listaMDPotGenData.Add(regProdGenAcum1);
            listaMDPotGenData.Add(regProdGenAcumVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum2);
            listaMDPotGenData.Add(regProdGenAcumVarAnio1);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterAnio3 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnioAct_SemAct);

            List<ResultadoTotalGeneracion> regMDInterAnio1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio0, regMDInterAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAcum0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio0, fechaFinalAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcum1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio1, fechaFinalAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum0, regMDInterAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            List<ResultadoTotalGeneracion> regMDInterAcum2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio2, fechaFinalAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum1, regMDInterAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaDataInterconexion.AddRange(regMDInterAnio3);
            listaDataInterconexion.AddRange(regMDInterAnio2);
            listaDataInterconexion.AddRange(regMDInterAnio0);

            listaDataInterconexion.AddRange(regMDInterAnio1);
            listaDataInterconexion.AddRange(regMDInterTotalVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum0);
            listaDataInterconexion.AddRange(regMDInterAcum1);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum2);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio1);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Evolución semanal de Energía
            listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();

            DateTime dayAnio2Ant = objFecha.Anio2Ant.Sem01_FechaIni;
            for (var day = objFecha.Anio1Ant.Sem01_FechaIni; day <= objFecha.AnioAct.RangoAct_FechaIni; day = day.AddDays(7))
            {
                ResultadoTotalGeneracion regProdGenEjec = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));
                ResultadoTotalGeneracion regProdGenProg = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaProgGen48.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct2, day, day, day.AddDays(6));
                ResultadoTotalGeneracion regProdGenDesv = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenEjec, regProdGenProg, PR5ConstanteFecha.ValorAnioAct_SemAct_Desv, day);

                ResultadoTotalGeneracion regProdGenEjecAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= dayAnio2Ant && x.Medifecha <= dayAnio2Ant.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, day, dayAnio2Ant, dayAnio2Ant.AddDays(6));
                ResultadoTotalGeneracion regProdGenEjecVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenEjec, regProdGenEjecAnio1Ant, PR5ConstanteFecha.ValorAnioAct_Acum_Var, day);

                listaEvolucionSemanal.Add(regProdGenEjec);
                listaEvolucionSemanal.Add(regProdGenProg);
                listaEvolucionSemanal.Add(regProdGenDesv);
                listaEvolucionSemanal.Add(regProdGenEjecVarAnio0);

                dayAnio2Ant = dayAnio2Ant.AddDays(7);
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Energía y Variacion anual
            listaEnergiaYVarAnualData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaEnergiaSemanal = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDVar1Anual = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDVar2Anual = new List<ResultadoTotalGeneracion>();

            DateTime fIniAnioActual = objFecha.AnioAct.Sem01_FechaIni;
            DateTime fIniAnio1Ant = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fIniAnio2Ant = objFecha.Anio2Ant.Sem01_FechaIni;
            int numSemanasAnio = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6);
            for (int numSemana = 1; numSemana <= numSemanasAnio; numSemana++)
            {
                ResultadoTotalGeneracion regMDAnioActual = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regMDAnio1Ant = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regMDAnio2Ant = new ResultadoTotalGeneracion();

                if (numSemana == 53)
                {
                    regMDAnioActual = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fIniAnioActual && x.Medifecha <= fIniAnioActual.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fIniAnioActual, fIniAnioActual, fIniAnioActual.AddDays(6)) : null;
                    regMDAnio1Ant = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.Anio1Ant.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fIniAnio1Ant && x.Medifecha <= fIniAnio1Ant.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fIniAnioActual, fIniAnio1Ant, fIniAnio1Ant.AddDays(6)) : null;
                    regMDAnio2Ant = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.Anio2Ant.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fIniAnio2Ant && x.Medifecha <= fIniAnio2Ant.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fIniAnioActual, fIniAnio2Ant, fIniAnio2Ant.AddDays(6)) : null;
                }
                else
                {
                    regMDAnioActual = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fIniAnioActual && x.Medifecha <= fIniAnioActual.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fIniAnioActual, fIniAnioActual, fIniAnioActual.AddDays(6));
                    regMDAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fIniAnio1Ant && x.Medifecha <= fIniAnio1Ant.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fIniAnioActual, fIniAnio1Ant, fIniAnio1Ant.AddDays(6));
                    regMDAnio2Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fIniAnio2Ant && x.Medifecha <= fIniAnio2Ant.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fIniAnioActual, fIniAnio2Ant, fIniAnio2Ant.AddDays(6));
                }

                if (regMDAnioActual != null)
                {
                    regMDAnioActual.Medifecha = fIniAnioActual;
                    regMDAnioActual.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                    regMDAnioActual.Meditotal = regMDAnioActual.Meditotal.GetValueOrDefault(0) > 0 ? regMDAnioActual.Meditotal : null;
                }

                if (numSemana > objFecha.AnioAct.Max_Num_Sem) regMDAnioActual = null;
                if (regMDAnioActual != null) listaEnergiaSemanal.Add(regMDAnioActual);
                if (regMDAnioActual != null && regMDAnio1Ant != null) listaMDVar1Anual.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnioActual, regMDAnio1Ant, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fIniAnioActual));
                if (regMDAnio1Ant != null && regMDAnio2Ant != null) listaMDVar2Anual.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio1Ant, regMDAnio2Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fIniAnioActual));

                fIniAnioActual = fIniAnioActual.AddDays(7);
                fIniAnio1Ant = fIniAnio1Ant.AddDays(7);
                fIniAnio2Ant = fIniAnio2Ant.AddDays(7);
            }

            listaEnergiaYVarAnualData.AddRange(listaEnergiaSemanal);
            listaEnergiaYVarAnualData.AddRange(listaMDVar1Anual);
            listaEnergiaYVarAnualData.AddRange(listaMDVar2Anual);
        }

        #endregion

        #region B.2. Producción por tipo de Recurso Energético

        /// <summary>
        /// Devuelve toda la data (listado y graficos) del reporte Produccion por tipo recurso semanal
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <param name="dataTabla"></param>
        /// <param name="graficoCompProd"></param>
        /// <param name="graficoEvoSem"></param>
        /// <param name="graficoParticSem"></param>
        /// <param name="graficoParticAcu"></param>
        public void CargarReporteProduccionXTipoRecursoInfSem(InfSGIFiltroReporte objFiltro, out TablaReporte dataTabla, out GraficoWeb graficoCompProd,
            out GraficoWeb graficoEvoSem, out GraficoWeb graficoParticSem, out GraficoWeb graficoParticAcu)
        {
            var objreporte = ListarDataProduccionXTipoRecursoEnergetico(objFiltro);
            dataTabla = objreporte.Tabla;
            graficoCompProd = objreporte.ListaGrafico[0];
            graficoEvoSem = objreporte.ListaGrafico[1];
            graficoParticSem = objreporte.ListaGrafico[2];
            graficoParticAcu = objreporte.ListaGrafico[3];
            //graficoEvoSemEjecutivo = objreporte.ListaGrafico[4];
            //graficoParticSemEjecutivo = objreporte.ListaGrafico[5];
        }

        /// <summary>
        /// Devuelve toda la data (listado y graficos) del reporte Produccion por tipo recurso semanal
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <param name="dataTabla"></param>
        /// <param name="graficoCompProd"></param>
        /// <param name="graficoEvoSemEjecutivo"></param>
        /// <param name="graficoParticSemEjecutivo"></param>
        public void CargarReporteProduccionXTipoRecursoEjecSem(InfSGIFiltroReporte objFiltro, out TablaReporte dataTabla, out GraficoWeb graficoCompProd, out GraficoWeb graficoEvoSemEjecutivo, out GraficoWeb graficoParticSemEjecutivo)
        {
            var objreporte = ListarDataProduccionXTipoRecursoEnergetico(objFiltro);
            dataTabla = objreporte.Tabla;
            graficoCompProd = objreporte.ListaGrafico[0];
            graficoEvoSemEjecutivo = objreporte.ListaGrafico[4];
            graficoParticSemEjecutivo = objreporte.ListaGrafico[5];

        }

        private void ListarProduccionXTipoRecursoEnergetico(FechasPR5 objFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompProd, out GraficoWeb graficoEvoSem, out GraficoWeb graficoParticSem, out GraficoWeb graficoParticAcu,
            out GraficoWeb graficoEvoSemEjecutivo, out GraficoWeb graficoParticSemEjecutivo)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            List<MaximaDemandaDTO> listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosYRer = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosEjec = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaEvolucionSemanalEjecutivo = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();

            List<ResultadoTotalGeneracion> listaInterTipoData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaInterTotalData = new List<ResultadoTotalGeneracion>();

            //Fuente de energía categoria
            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData, true);

            List<MeMedicion48DTO> listCon48 = objRpt.ListaTotalGenUnidad48;
            List<MeMedicion48DTO> listCon48SinRer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer != "S").ToList();
            List<MeMedicion48DTO> listCon48Rer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer == "S").ToList();
            List<MeMedicion48DTO> listaDemandaGen48 = objRpt.ListaTotalGen48;
            List<MeMedicion48DTO> listaInterconexion48 = objRpt.ListaTotalInterconexion48;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });
            listaMDCoincidenteDataDesc = listaTotalMaximaDemadaDesc;

            //Fuente de energía categoria

            var listaFilaFenergTmp = UtilSemanalPR5.ListarFilaCuadroRecursoEnergetico();
            foreach (var regFE in listaFilaFenergTmp)
            {
                var listaDetalleDia = new List<MeMedicion48DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiGasCamisea:
                    case ConstantesSiosein2.FenergcodiGasMalacas:
                    case ConstantesSiosein2.FenergcodiGasAguaytia:
                    case ConstantesSiosein2.FenergcodiGasLaIsla:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFEAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFETotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAnio0, regProdGenxFEAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxFEAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum0, regProdGenxFEAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum1, regProdGenxFEAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regProdGenxFEAnio3);
                listaMDxTgen.Add(regProdGenxFEAnio2);
                listaMDxTgen.Add(regProdGenxFEAnio0);

                listaMDxTgen.Add(regProdGenxFEAnio1);
                listaMDxTgen.Add(regProdGenxFETotalVarAnio0);

                listaMDxTgen.Add(regProdGenxFEAcum0);
                listaMDxTgen.Add(regProdGenxFEAcum1);
                listaMDxTgen.Add(regProdGenxFEAcumVarAnio0);

                listaMDxTgen.Add(regProdGenxFEAcum2);
                listaMDxTgen.Add(regProdGenxFEAcumVarAnio1);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Ctgdetcodi = regFE.Ctgdetcodi;
                }

                listaMDTipoRecursoEnergeticoData.AddRange(listaMDxTgen);
            }

            //listar los combustibles que aparecen en el cuadro
            List<SiFuenteenergiaDTO> listaFenergCuadro = new List<SiFuenteenergiaDTO>();
            foreach (var regFE in listaFilaFenergTmp)
            {
                if (regFE.ValidarDatoObligatorio)
                {
                    //solo agregar a la tabla web cuando exista al menos un dato en algun periodo de tiempo
                    bool visibleEnReporte = listaMDTipoRecursoEnergeticoData.Any(x => x.Fenergcodi == regFE.Fenergcodi && x.Meditotal > 0);
                    if (visibleEnReporte) listaFenergCuadro.Add(regFE);
                }
                else
                {
                    listaFenergCuadro.Add(regFE);
                }
            }

            //Potencia generada en el SEIN
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAnio0, regProdGenAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum1, regProdGenAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaMDPotGenData.Add(regProdGenAnio3);
            listaMDPotGenData.Add(regProdGenAnio2);
            listaMDPotGenData.Add(regProdGenAnio0);

            listaMDPotGenData.Add(regProdGenAnio1);
            listaMDPotGenData.Add(regProdGenTotalVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum0);
            listaMDPotGenData.Add(regProdGenAcum1);
            listaMDPotGenData.Add(regProdGenAcumVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum2);
            listaMDPotGenData.Add(regProdGenAcumVarAnio1);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterAnio3 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnioAct_SemAct);

            List<ResultadoTotalGeneracion> regMDInterAnio1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio0, regMDInterAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAcum0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio0, fechaFinalAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcum1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio1, fechaFinalAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum0, regMDInterAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            List<ResultadoTotalGeneracion> regMDInterAcum2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio2, fechaFinalAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum1, regMDInterAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaDataInterconexion.AddRange(regMDInterAnio3);
            listaDataInterconexion.AddRange(regMDInterAnio2);
            listaDataInterconexion.AddRange(regMDInterAnio0);

            listaDataInterconexion.AddRange(regMDInterAnio1);
            listaDataInterconexion.AddRange(regMDInterTotalVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum0);
            listaDataInterconexion.AddRange(regMDInterAcum1);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum2);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio1);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // EVOLUCIÓN SEMANAL DE LA UTILIZACIÓN DE LOS RECURSOS ENERGÉTICOS 2017-2016
            listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();

            DateTime dayAnio1Ant = objFecha.Anio2Ant.Sem01_FechaIni;
            for (var day = objFecha.Anio1Ant.Sem01_FechaIni; day <= objFecha.AnioAct.RangoAct_FechaIni; day = day.AddDays(7))
            {
                ResultadoTotalGeneracion regProdGenEjec = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));

                foreach (var regFE in listaFilaFenergTmp)
                {
                    var listaDetalleDia = new List<MeMedicion48DTO>();
                    switch (regFE.Fenergcodi)
                    {
                        case ConstantesSiosein2.FenergcodiGasCamisea:
                        case ConstantesSiosein2.FenergcodiGasMalacas:
                        case ConstantesSiosein2.FenergcodiGasAguaytia:
                        case ConstantesSiosein2.FenergcodiGasLaIsla:
                            listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                            break;
                        default:
                            listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                            break;
                    }

                    ResultadoTotalGeneracion regProdGenFE = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));

                    ResultadoTotalGeneracion regParticipacion = new ResultadoTotalGeneracion();
                    regParticipacion.Medifecha = day;
                    regParticipacion.Fenergcodi = regFE.Fenergcodi;
                    if (regProdGenEjec.Meditotal != 0)
                    {
                        regParticipacion.Meditotal = (regProdGenFE.Meditotal / regProdGenEjec.Meditotal) * 100.0m;
                        regParticipacion.Meditotal = Convert.ToDecimal(Math.Round(regParticipacion.Meditotal.GetValueOrDefault(0), 2));
                    }

                    listaEvolucionSemanal.Add(regParticipacion);
                }

                dayAnio1Ant = dayAnio1Ant.AddDays(7);
            }

            //listar los combustibles que aparecen en el reporte
            List<SiFuenteenergiaDTO> listaFenergEvolucion = new List<SiFuenteenergiaDTO>();
            foreach (var regFE in listaFilaFenergTmp)
            {
                if (regFE.ValidarDatoObligatorio)
                {
                    //solo agregar a la tabla web cuando exista al menos un dato en algun periodo de tiempo
                    bool visibleEnReporte = listaEvolucionSemanal.Any(x => x.Fenergcodi == regFE.Fenergcodi && x.Meditotal > 0);
                    if (visibleEnReporte) listaFenergEvolucion.Add(regFE);
                }
                else
                {
                    listaFenergEvolucion.Add(regFE);
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // EVOLUCIÓN SEMANAL DE LA UTILIZACIÓN DE LOS RECURSOS ENERGÉTICOS Ejecutivo
            listaEvolucionSemanalEjecutivo = new List<ResultadoTotalGeneracion>();

            int numSemana = 1;
            for (var day = objFecha.AnioAct.Sem01_FechaIni; day <= objFecha.AnioAct.RangoAct_FechaIni; day = day.AddDays(7))
            {
                if (numSemana <= objFecha.AnioAct.Max_Num_Sem)
                {
                    ResultadoTotalGeneracion regProdGenEjec = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));

                    foreach (var regFE in listaFilaFenergTmp)
                    {
                        var listaDetalleDia = new List<MeMedicion48DTO>();
                        switch (regFE.Fenergcodi)
                        {
                            case ConstantesSiosein2.FenergcodiGasCamisea:
                            case ConstantesSiosein2.FenergcodiGasMalacas:
                            case ConstantesSiosein2.FenergcodiGasAguaytia:
                            case ConstantesSiosein2.FenergcodiGasLaIsla:
                                listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                                break;
                            default:
                                listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                                break;
                        }

                        ResultadoTotalGeneracion regProdGenFE = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));

                        ResultadoTotalGeneracion regParticipacion = new ResultadoTotalGeneracion();
                        regParticipacion.Medifecha = day;
                        regParticipacion.Fenergcodi = regFE.Fenergcodi;
                        if (regProdGenEjec.Meditotal != 0)
                        {
                            regParticipacion.Meditotal = (regProdGenFE.Meditotal / regProdGenEjec.Meditotal) * 100.0m;
                            regParticipacion.Meditotal = Convert.ToDecimal(Math.Round(regParticipacion.Meditotal.GetValueOrDefault(0), 2));
                        }

                        listaEvolucionSemanalEjecutivo.Add(regParticipacion);
                    }
                }
                numSemana++;
            }

            //listar los combustibles que aparecen en el reporte
            List<SiFuenteenergiaDTO> listaFenergEvolucionEjec = new List<SiFuenteenergiaDTO>();
            foreach (var regFE in listaFilaFenergTmp)
            {
                if (regFE.ValidarDatoObligatorio)
                {
                    //solo agregar a la tabla web cuando exista al menos un dato en algun periodo de tiempo
                    bool visibleEnReporte = listaEvolucionSemanalEjecutivo.Any(x => x.Fenergcodi == regFE.Fenergcodi && x.Meditotal > 0);
                    if (visibleEnReporte) listaFenergEvolucionEjec.Add(regFE);
                }
                else
                {
                    listaFenergEvolucionEjec.Add(regFE);
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Participación de la producción de energía eléctrica por tipo recurso energético durante la semana operativa

            ResultadoTotalGeneracion regProdGenSemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnioAcum = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

            //Participacion Fuente energeticos sin rer
            var listaFuenteEnergiaPieSemanal = new List<SiFuenteenergiaDTO>();
            List<int> lFenergcodiOmitirSemanal = new List<int>() { ConstantesPR5ReportesServicio.FenergcodiBagazo,ConstantesPR5ReportesServicio.FenergcodiBiogas,ConstantesPR5ReportesServicio.FenergcodiSolar,ConstantesPR5ReportesServicio.FenergcodiEolica,ConstantesPR5ReportesServicio.FenergcodiNoAplica,
                                    ConstantesSiosein2.FenergcodiGasCamisea, ConstantesSiosein2.FenergcodiGasMalacas,ConstantesSiosein2.FenergcodiGasAguaytia,ConstantesSiosein2.FenergcodiGasLaIsla, };
            listaFuenteEnergiaPieSemanal.AddRange(listaFenergCuadro.Where(x => !lFenergcodiOmitirSemanal.Contains(x.Fenergcodi)));
            listaFuenteEnergiaPieSemanal.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiGas, Fenergnomb = "Gas Natural" });
            foreach (var regFE in listaFuenteEnergiaPieSemanal)
            {
                ResultadoTotalGeneracion regProdGenxFESemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48SinRer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnioAcum = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48SinRer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && x.Fenergcodi == regFE.Fenergcodi && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

                if (regProdGenSemAct.Meditotal != 0 && regProdGenxFESemAct.Meditotal > 0)
                {
                    ResultadoTotalGeneracion regPartSemAct = new ResultadoTotalGeneracion();
                    regPartSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                    regPartSemAct.Fenergnomb = regFE.Fenergnomb;
                    regPartSemAct.Fenergcodi = regFE.Fenergcodi;
                    regPartSemAct.Meditotal = (regProdGenxFESemAct.Meditotal / regProdGenSemAct.Meditotal) * 100.0m;
                    listaParticipacionRecursosEnergeticosYRer.Add(regPartSemAct);
                }

                if (regProdGenAnioAcum.Meditotal != 0 && regProdGenxFESemAct.Meditotal > 0)
                {
                    ResultadoTotalGeneracion regPartAnioAcum = new ResultadoTotalGeneracion();
                    regPartAnioAcum.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                    regPartAnioAcum.Fenergnomb = regFE.Fenergnomb;
                    regPartAnioAcum.Fenergcodi = regFE.Fenergcodi;
                    regPartAnioAcum.Meditotal = (regProdGenxFEAnioAcum.Meditotal / regProdGenAnioAcum.Meditotal) * 100.0m;
                    listaParticipacionRecursosEnergeticosYRer.Add(regPartAnioAcum);
                }
            }

            //Participacion rer
            ResultadoTotalGeneracion regProdGenxFErerSemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenxFErerAnioAcum = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

            ResultadoTotalGeneracion regPartrerSemAct = new ResultadoTotalGeneracion();
            regPartrerSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
            regPartrerSemAct.Fenergnomb = "RENOVABLES";
            if (regProdGenSemAct.Meditotal > 0)
                regPartrerSemAct.Meditotal = (regProdGenxFErerSemAct.Meditotal / regProdGenSemAct.Meditotal) * 100.0m;
            listaParticipacionRecursosEnergeticosYRer.Add(regPartrerSemAct);

            ResultadoTotalGeneracion regPartrerAnioAcum = new ResultadoTotalGeneracion();
            regPartrerAnioAcum.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
            regPartrerAnioAcum.Fenergnomb = "RENOVABLES";
            if (regProdGenAnioAcum.Meditotal > 0)
                regPartrerAnioAcum.Meditotal = (regProdGenxFErerAnioAcum.Meditotal / regProdGenAnioAcum.Meditotal) * 100.0m;
            listaParticipacionRecursosEnergeticosYRer.Add(regPartrerAnioAcum);

            //Participacion Fuente energeticos Ejecutivo
            foreach (var regFE in UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoEjecutivoSemanal())
            {
                var listaDetalleDia = new List<MeMedicion48DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiPasada:
                    case ConstantesSiosein2.FenergcodiRegulacion:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiGasCamisea:
                    case ConstantesSiosein2.FenergcodiGasMalacas:
                    case ConstantesSiosein2.FenergcodiGasAguaytia:
                    case ConstantesSiosein2.FenergcodiGasLaIsla:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFESemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                if (regProdGenSemAct.Meditotal != 0 && regProdGenxFESemAct.Meditotal > 0)
                {
                    ResultadoTotalGeneracion regPartSemAct = new ResultadoTotalGeneracion();
                    regPartSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                    regPartSemAct.Fenergnomb = regFE.Ctgdetnomb;
                    regPartSemAct.Fenergcodi = regFE.Fenergcodi;
                    regPartSemAct.Meditotal = (regProdGenxFESemAct.Meditotal / regProdGenSemAct.Meditotal) * 100.0m;
                    listaParticipacionRecursosEnergeticosEjec.Add(regPartSemAct);
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Output
            dataTabla = UtilSemanalPR5.ObtenerDataTablaProdTipoRecurso(objFecha, listaMDCoincidenteDataDesc, listaMDTipoRecursoEnergeticoData, listaMDPotGenData,
                listaInterTipoData, listaInterTotalData, listaFenergCuadro);
            dataTabla.ListaItem = ListarItemFromSiMenureporte();
            graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionEnergiaAcumuladaXTipoRecursoEnergetico(objFecha, listaMDCoincidenteDataDesc, listaMDTipoRecursoEnergeticoData, listaFenergCuadro);
            graficoEvoSem = UtilSemanalPR5.GraficoEvolucionSemanalRecursosEnergeticos(objFecha, listaMDCoincidenteDataDesc, listaEvolucionSemanal, listaFenergEvolucion);
            graficoParticSem = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticos(objFecha, listaParticipacionRecursosEnergeticosYRer, PR5ConstanteFecha.ValorAnioAct_SemAct);
            graficoParticAcu = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticos(objFecha, listaParticipacionRecursosEnergeticosYRer, PR5ConstanteFecha.ValorAnioAct_Acum);

            graficoEvoSemEjecutivo = UtilSemanalPR5.GraficoEvolucionSemanalRecursosEnergeticosEjecutivo(objFecha, listaEvolucionSemanalEjecutivo, listaFenergEvolucionEjec);
            graficoParticSemEjecutivo = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticos(objFecha, listaParticipacionRecursosEnergeticosEjec);
        }

        private void ListarDataProduccionXTipoRecursoEnergetico(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData,
            out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
            out List<SiFuenteenergiaDTO> listaFenergCuadro, out List<ResultadoTotalGeneracion> listaEvolucionSemanal, out List<SiFuenteenergiaDTO> listaFenergEvolucion,
            out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosYRer, out List<ResultadoTotalGeneracion> listaEvolucionSemanalEjecutivo,
            out List<SiFuenteenergiaDTO> listaFenergEvolucionEjec, out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosEjec)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDTipoRecursoEnergeticoData = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaParticipacionRecursosEnergeticosYRer = new List<ResultadoTotalGeneracion>();
            listaParticipacionRecursosEnergeticosEjec = new List<ResultadoTotalGeneracion>();
            listaEvolucionSemanalEjecutivo = new List<ResultadoTotalGeneracion>();
            listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();

            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();

            //Fuente de energía categoria
            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData, true);

            List<MeMedicion48DTO> listCon48 = objRpt.ListaTotalGenUnidad48;
            List<MeMedicion48DTO> listCon48SinRer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer != "S").ToList();
            List<MeMedicion48DTO> listCon48Rer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer == "S").ToList();
            List<MeMedicion48DTO> listaDemandaGen48 = objRpt.ListaTotalGen48;
            List<MeMedicion48DTO> listaInterconexion48 = objRpt.ListaTotalInterconexion48;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });
            listaMDCoincidenteDataDesc = listaTotalMaximaDemadaDesc;

            //Fuente de energía categoria

            var listaFilaFenergTmp = UtilSemanalPR5.ListarFilaCuadroRecursoEnergetico();
            foreach (var regFE in listaFilaFenergTmp)
            {
                var listaDetalleDia = new List<MeMedicion48DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiGasCamisea:
                    case ConstantesSiosein2.FenergcodiGasMalacas:
                    case ConstantesSiosein2.FenergcodiGasAguaytia:
                    case ConstantesSiosein2.FenergcodiGasLaIsla:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFEAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFETotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAnio0, regProdGenxFEAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxFEAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum0, regProdGenxFEAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum1, regProdGenxFEAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regProdGenxFEAnio3);
                listaMDxTgen.Add(regProdGenxFEAnio2);
                listaMDxTgen.Add(regProdGenxFEAnio0);

                listaMDxTgen.Add(regProdGenxFEAnio1);
                listaMDxTgen.Add(regProdGenxFETotalVarAnio0);

                listaMDxTgen.Add(regProdGenxFEAcum0);
                listaMDxTgen.Add(regProdGenxFEAcum1);
                listaMDxTgen.Add(regProdGenxFEAcumVarAnio0);

                listaMDxTgen.Add(regProdGenxFEAcum2);
                listaMDxTgen.Add(regProdGenxFEAcumVarAnio1);

                foreach (var regData in listaMDxTgen)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Ctgdetcodi = regFE.Ctgdetcodi;
                }

                listaMDTipoRecursoEnergeticoData.AddRange(listaMDxTgen);
            }

            //listar los combustibles que aparecen en el cuadro
            listaFenergCuadro = new List<SiFuenteenergiaDTO>();
            foreach (var regFE in listaFilaFenergTmp)
            {
                if (regFE.ValidarDatoObligatorio)
                {
                    //solo agregar a la tabla web cuando exista al menos un dato en algun periodo de tiempo
                    bool visibleEnReporte = listaMDTipoRecursoEnergeticoData.Any(x => x.Fenergcodi == regFE.Fenergcodi && x.Meditotal > 0);
                    if (visibleEnReporte) listaFenergCuadro.Add(regFE);
                }
                else
                {
                    listaFenergCuadro.Add(regFE);
                }
            }

            //Potencia generada en el SEIN
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAnio0, regProdGenAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum1, regProdGenAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaMDPotGenData.Add(regProdGenAnio3);
            listaMDPotGenData.Add(regProdGenAnio2);
            listaMDPotGenData.Add(regProdGenAnio0);

            listaMDPotGenData.Add(regProdGenAnio1);
            listaMDPotGenData.Add(regProdGenTotalVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum0);
            listaMDPotGenData.Add(regProdGenAcum1);
            listaMDPotGenData.Add(regProdGenAcumVarAnio0);

            listaMDPotGenData.Add(regProdGenAcum2);
            listaMDPotGenData.Add(regProdGenAcumVarAnio1);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterAnio3 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterAnio0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnioAct_SemAct);

            List<ResultadoTotalGeneracion> regMDInterAnio1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio0, regMDInterAnio1, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAcum0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio0, fechaFinalAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcum1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio1, fechaFinalAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum0, regMDInterAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            List<ResultadoTotalGeneracion> regMDInterAcum2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotal(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio2, fechaFinalAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum1, regMDInterAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaDataInterconexion.AddRange(regMDInterAnio3);
            listaDataInterconexion.AddRange(regMDInterAnio2);
            listaDataInterconexion.AddRange(regMDInterAnio0);

            listaDataInterconexion.AddRange(regMDInterAnio1);
            listaDataInterconexion.AddRange(regMDInterTotalVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum0);
            listaDataInterconexion.AddRange(regMDInterAcum1);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum2);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio1);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // EVOLUCIÓN SEMANAL DE LA UTILIZACIÓN DE LOS RECURSOS ENERGÉTICOS 2017-2016
            listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();

            DateTime dayAnio1Ant = objFecha.Anio2Ant.Sem01_FechaIni;
            for (var day = objFecha.Anio1Ant.Sem01_FechaIni; day <= objFecha.AnioAct.RangoAct_FechaIni; day = day.AddDays(7))
            {
                ResultadoTotalGeneracion regProdGenEjec = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));

                foreach (var regFE in listaFilaFenergTmp)
                {
                    var listaDetalleDia = new List<MeMedicion48DTO>();
                    switch (regFE.Fenergcodi)
                    {
                        case ConstantesSiosein2.FenergcodiGasCamisea:
                        case ConstantesSiosein2.FenergcodiGasMalacas:
                        case ConstantesSiosein2.FenergcodiGasAguaytia:
                        case ConstantesSiosein2.FenergcodiGasLaIsla:
                            listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                            break;
                        default:
                            listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                            break;
                    }

                    ResultadoTotalGeneracion regProdGenFE = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));

                    ResultadoTotalGeneracion regParticipacion = new ResultadoTotalGeneracion();
                    regParticipacion.Medifecha = day;
                    regParticipacion.Fenergcodi = regFE.Fenergcodi;
                    if (regProdGenEjec.Meditotal != 0)
                    {
                        regParticipacion.Meditotal = (regProdGenFE.Meditotal / regProdGenEjec.Meditotal) * 100.0m;
                        regParticipacion.Meditotal = Convert.ToDecimal(Math.Round(regParticipacion.Meditotal.GetValueOrDefault(0), 2));
                    }

                    listaEvolucionSemanal.Add(regParticipacion);
                }

                dayAnio1Ant = dayAnio1Ant.AddDays(7);
            }

            //listar los combustibles que aparecen en el reporte
            listaFenergEvolucion = new List<SiFuenteenergiaDTO>();
            foreach (var regFE in listaFilaFenergTmp)
            {
                if (regFE.ValidarDatoObligatorio)
                {
                    //solo agregar a la tabla web cuando exista al menos un dato en algun periodo de tiempo
                    bool visibleEnReporte = listaEvolucionSemanal.Any(x => x.Fenergcodi == regFE.Fenergcodi && x.Meditotal > 0);
                    if (visibleEnReporte) listaFenergEvolucion.Add(regFE);
                }
                else
                {
                    listaFenergEvolucion.Add(regFE);
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // EVOLUCIÓN SEMANAL DE LA UTILIZACIÓN DE LOS RECURSOS ENERGÉTICOS Ejecutivo
            listaEvolucionSemanalEjecutivo = new List<ResultadoTotalGeneracion>();

            int numSemana = 1;
            for (var day = objFecha.AnioAct.Sem01_FechaIni; day <= objFecha.AnioAct.RangoAct_FechaIni; day = day.AddDays(7))
            {
                if (numSemana <= objFecha.AnioAct.Max_Num_Sem)
                {
                    ResultadoTotalGeneracion regProdGenEjec = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));

                    foreach (var regFE in listaFilaFenergTmp)
                    {
                        var listaDetalleDia = new List<MeMedicion48DTO>();
                        switch (regFE.Fenergcodi)
                        {
                            case ConstantesSiosein2.FenergcodiGasCamisea:
                            case ConstantesSiosein2.FenergcodiGasMalacas:
                            case ConstantesSiosein2.FenergcodiGasAguaytia:
                            case ConstantesSiosein2.FenergcodiGasLaIsla:
                                listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                                break;
                            default:
                                listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                                break;
                        }

                        ResultadoTotalGeneracion regProdGenFE = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDetalleDia.Where(x => x.Medifecha >= day && x.Medifecha <= day.AddDays(6)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, day, day, day.AddDays(6));

                        ResultadoTotalGeneracion regParticipacion = new ResultadoTotalGeneracion();
                        regParticipacion.Medifecha = day;
                        regParticipacion.Fenergcodi = regFE.Fenergcodi;
                        if (regProdGenEjec.Meditotal != 0)
                        {
                            regParticipacion.Meditotal = (regProdGenFE.Meditotal / regProdGenEjec.Meditotal) * 100.0m;
                            regParticipacion.Meditotal = Convert.ToDecimal(Math.Round(regParticipacion.Meditotal.GetValueOrDefault(0), 2));
                        }

                        listaEvolucionSemanalEjecutivo.Add(regParticipacion);
                    }
                }
                numSemana++;
            }

            //listar los combustibles que aparecen en el reporte
            listaFenergEvolucionEjec = new List<SiFuenteenergiaDTO>();
            foreach (var regFE in listaFilaFenergTmp)
            {
                if (regFE.ValidarDatoObligatorio)
                {
                    //solo agregar a la tabla web cuando exista al menos un dato en algun periodo de tiempo
                    bool visibleEnReporte = listaEvolucionSemanalEjecutivo.Any(x => x.Fenergcodi == regFE.Fenergcodi && x.Meditotal > 0);
                    if (visibleEnReporte) listaFenergEvolucionEjec.Add(regFE);
                }
                else
                {
                    listaFenergEvolucionEjec.Add(regFE);
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Participación de la producción de energía eléctrica por tipo recurso energético durante la semana operativa

            ResultadoTotalGeneracion regProdGenSemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnioAcum = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

            //Participacion Fuente energeticos sin rer
            var listaFuenteEnergiaPieSemanal = new List<SiFuenteenergiaDTO>();
            List<int> lFenergcodiOmitirSemanal = new List<int>() { ConstantesPR5ReportesServicio.FenergcodiBagazo,ConstantesPR5ReportesServicio.FenergcodiBiogas,ConstantesPR5ReportesServicio.FenergcodiSolar,ConstantesPR5ReportesServicio.FenergcodiEolica,ConstantesPR5ReportesServicio.FenergcodiNoAplica,
                                    ConstantesSiosein2.FenergcodiGasCamisea, ConstantesSiosein2.FenergcodiGasMalacas,ConstantesSiosein2.FenergcodiGasAguaytia,ConstantesSiosein2.FenergcodiGasLaIsla, };
            listaFuenteEnergiaPieSemanal.AddRange(listaFenergCuadro.Where(x => !lFenergcodiOmitirSemanal.Contains(x.Fenergcodi)));
            listaFuenteEnergiaPieSemanal.Add(new SiFuenteenergiaDTO() { Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiGas, Fenergnomb = "Gas Natural" });
            foreach (var regFE in listaFuenteEnergiaPieSemanal)
            {
                ResultadoTotalGeneracion regProdGenxFESemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48SinRer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnioAcum = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48SinRer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && x.Fenergcodi == regFE.Fenergcodi && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

                if (regProdGenSemAct.Meditotal != 0 && regProdGenxFESemAct.Meditotal > 0)
                {
                    ResultadoTotalGeneracion regPartSemAct = new ResultadoTotalGeneracion();
                    regPartSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                    regPartSemAct.Fenergnomb = regFE.Fenergnomb;
                    regPartSemAct.Fenergcodi = regFE.Fenergcodi;
                    regPartSemAct.Meditotal = (regProdGenxFESemAct.Meditotal / regProdGenSemAct.Meditotal) * 100.0m;
                    listaParticipacionRecursosEnergeticosYRer.Add(regPartSemAct);
                }

                if (regProdGenAnioAcum.Meditotal != 0 && regProdGenxFESemAct.Meditotal > 0)
                {
                    ResultadoTotalGeneracion regPartAnioAcum = new ResultadoTotalGeneracion();
                    regPartAnioAcum.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                    regPartAnioAcum.Fenergnomb = regFE.Fenergnomb;
                    regPartAnioAcum.Fenergcodi = regFE.Fenergcodi;
                    regPartAnioAcum.Meditotal = (regProdGenxFEAnioAcum.Meditotal / regProdGenAnioAcum.Meditotal) * 100.0m;
                    listaParticipacionRecursosEnergeticosYRer.Add(regPartAnioAcum);
                }
            }

            //Participacion rer
            ResultadoTotalGeneracion regProdGenxFErerSemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenxFErerAnioAcum = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

            ResultadoTotalGeneracion regPartrerSemAct = new ResultadoTotalGeneracion();
            regPartrerSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
            regPartrerSemAct.Fenergnomb = "RENOVABLES";
            if (regProdGenSemAct.Meditotal > 0)
                regPartrerSemAct.Meditotal = (regProdGenxFErerSemAct.Meditotal / regProdGenSemAct.Meditotal) * 100.0m;
            listaParticipacionRecursosEnergeticosYRer.Add(regPartrerSemAct);

            ResultadoTotalGeneracion regPartrerAnioAcum = new ResultadoTotalGeneracion();
            regPartrerAnioAcum.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
            regPartrerAnioAcum.Fenergnomb = "RENOVABLES";
            if (regProdGenAnioAcum.Meditotal > 0)
                regPartrerAnioAcum.Meditotal = (regProdGenxFErerAnioAcum.Meditotal / regProdGenAnioAcum.Meditotal) * 100.0m;
            listaParticipacionRecursosEnergeticosYRer.Add(regPartrerAnioAcum);

            //Participacion Fuente energeticos Ejecutivo
            foreach (var regFE in UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoEjecutivoSemanal())
            {
                var listaDetalleDia = new List<MeMedicion48DTO>();
                switch (regFE.Fenergcodi)
                {
                    case ConstantesSiosein2.FenergcodiPasada:
                    case ConstantesSiosein2.FenergcodiRegulacion:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                        break;
                    case ConstantesSiosein2.FenergcodiGasCamisea:
                    case ConstantesSiosein2.FenergcodiGasMalacas:
                    case ConstantesSiosein2.FenergcodiGasAguaytia:
                    case ConstantesSiosein2.FenergcodiGasLaIsla:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && x.Ctgdetcodi == regFE.Ctgdetcodi).ToList();
                        break;
                    default:
                        listaDetalleDia = listCon48.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();
                        break;
                }

                ResultadoTotalGeneracion regProdGenxFESemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                if (regProdGenSemAct.Meditotal != 0 && regProdGenxFESemAct.Meditotal > 0)
                {
                    ResultadoTotalGeneracion regPartSemAct = new ResultadoTotalGeneracion();
                    regPartSemAct.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                    regPartSemAct.Fenergnomb = regFE.Ctgdetnomb;
                    regPartSemAct.Fenergcodi = regFE.Fenergcodi;
                    regPartSemAct.Meditotal = (regProdGenxFESemAct.Meditotal / regProdGenSemAct.Meditotal) * 100.0m;
                    listaParticipacionRecursosEnergeticosEjec.Add(regPartSemAct);
                }
            }
        }

        private void GenerarExcelProduccionTipoRecursoEnergeticoSemanal(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            TablaReporte dataTabla;
            GraficoWeb graficoCompProd, graficoEvoSem, graficoParticSem;

            CargarReporteProduccionXTipoRecursoEjecSem(objFiltro, out dataTabla, out graficoCompProd, out graficoEvoSem, out graficoParticSem);

            UtilSemanalPR5.GenerarCharExcelListadoProdTipoRecursoEnergetico(ws, objFecha, dataTabla, out int numRecursos, out int ultimaFilaTabla);
            UtilSemanalPR5.GenerarCharExcelGraficoComparacionProdRecEnergetico(ws, objFecha, graficoCompProd, numRecursos, ultimaFilaTabla + 4, out int ultimaFilaGraf1);
            UtilSemanalPR5.GenerarCharExcelGraficoEvolSemanalEjec(ws, objFecha, graficoEvoSem, ultimaFilaGraf1 + 4, out int ultimaFilaGraf2);
            UtilSemanalPR5.GenerarCharExcelGraficoProdTipolRER(ws, objFecha, graficoParticSem, ultimaFilaGraf2 + 4);
        }

        private void GenerarExcelProduccionTipoRecursoEnergetico(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            CargarReporteProduccionXTipoRecursoInfSem(objFiltro, out TablaReporte dataTabla, out GraficoWeb graficoCompProd, out GraficoWeb graficoEvoSem, out GraficoWeb graficoParticSem, out GraficoWeb graficoParticAcu);
            List<SiFuenteenergiaDTO> listaFenerg = ListarFuenteEnergia();

            UtilSemanalPR5.GenerarCharExcelListadoProdTipoRecursoEnergetico(ws, objFecha, dataTabla, out int numRecursos, out int ultimaFilaTabla);

            UtilSemanalPR5.GenerarCharExcelGraficoComparacionProdRecEnergetico(ws, objFecha, graficoCompProd, numRecursos, ultimaFilaTabla + 4, out int ultimaFilaGraf1);

            UtilSemanalPR5.GenerarCharExcelGraficoEvolSemanal(ws, objFecha, graficoEvoSem, listaFenerg, ultimaFilaGraf1 + 4, out int ultimaFilaGraf2);

            UtilSemanalPR5.GenerarCharExcelGrafGeneracionSemana(ws, objFecha, graficoParticSem, PR5ConstanteFecha.ValorAnioAct_SemAct, ultimaFilaGraf2 + 4);

            UtilSemanalPR5.GenerarCharExcelGrafGeneracionSemana(ws, objFecha, graficoParticAcu, PR5ConstanteFecha.ValorAnioAct_Acum, ultimaFilaGraf2 + 4);
        }

        /// <summary> Devuelve laslistas a usar en el reporte Produccion RER
        /// </summary>
        /// <param name="objFiltro"></param>
        public InfSGIReporteVersionado ListarDataProduccionXTipoRecursoEnergetico(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarProduccionXTipoRecursoEnergetico(objFiltro.ObjFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompProd,
                    out GraficoWeb graficoEvoSem, out GraficoWeb graficoParticSem, out GraficoWeb graficoParticAcu,
                    out GraficoWeb graficoEvoSemEjecutivo, out GraficoWeb graficoParticSemEjecutivo);

                var ListaGrafico = new List<GraficoWeb>();
                ListaGrafico.Add(graficoCompProd);
                ListaGrafico.Add(graficoEvoSem);
                ListaGrafico.Add(graficoParticSem);
                ListaGrafico.Add(graficoParticAcu);
                ListaGrafico.Add(graficoEvoSemEjecutivo);
                ListaGrafico.Add(graficoParticSemEjecutivo);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    ListaGrafico = ListaGrafico
                };
            }
            else
            {
                //Ultimas semanas operativas
                DateTime fechaInicialAnio3 = objFiltro.ObjFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFiltro.ObjFecha.Anio3Ant.Fecha_Final;
                DateTime fechaInicialAnio2 = objFiltro.ObjFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFiltro.ObjFecha.Anio2Ant.Fecha_Final;
                DateTime fechaInicialAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_Final;
                DateTime fechaInicialAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_Final;

                //tablas requeridas
                List<MaximaDemandaDTO> listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
                List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
                listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });
                listaMDCoincidenteDataDesc = listaTotalMaximaDemadaDesc;

                List<SiFuenteenergiaDTO> listaFenergCuadro = new List<SiFuenteenergiaDTO>();
                List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaMDPotGenData = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaInterTipoData = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaInterTotalData = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();
                List<SiFuenteenergiaDTO> listaFenergEvolucion = new List<SiFuenteenergiaDTO>();
                List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosYRer = new List<ResultadoTotalGeneracion>();
                List<ResultadoTotalGeneracion> listaEvolucionSemanalEjecutivo = new List<ResultadoTotalGeneracion>();
                List<SiFuenteenergiaDTO> listaFenergEvolucionEjec = new List<SiFuenteenergiaDTO>();
                List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosEjec = new List<ResultadoTotalGeneracion>();


                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    //llenar la tabla listaMDTipoRecursoEnergeticoData
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)
                    {
                        var FenergRER = new SiFuenteenergiaDTO()
                        {
                            Fenergcodi = objDat.Verdatid,
                            Fenergnomb = objDat.Verdatvalor
                        };

                        listaFenergCuadro.Add(FenergRER);

                        //llenar tabla listaMDTipoRecursoEnergeticoData
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var lstValores = objDatDet.Vdatdtvalor.Split('|');

                            if (lstValores.Length == 4)
                            {
                                decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;
                                var FechaInicial = (lstValores[1] != "") ? DateTime.ParseExact(lstValores[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                var FechaFinal = (lstValores[2] != "") ? DateTime.ParseExact(lstValores[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                int TgenCodi = int.TryParse(lstValores[3], out int valorint) ? valorint : 0;

                                var FiltroCelda = new FiltroCeldaDato()
                                {
                                    FechaIni = FechaInicial,
                                    FechaFin = FechaFinal,
                                    Tgenercodi = TgenCodi
                                };

                                var RERData = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = valorDecimal,
                                    Fenergcodi = objDat.Verdatid,
                                    TipoResultadoFecha = objDatDet.Vdatdtid,
                                    FiltroCeldaDato = FiltroCelda
                                };

                                listaMDTipoRecursoEnergeticoData.Add(RERData);
                            }
                        }

                    }
                    else
                    {
                        //llenar la tabla listaMDPotGenData "Potencia generada en el SEIN",
                        if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual)
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var RERTotal = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = objDatDet.ValorDecimal,
                                    TipoResultadoFecha = objDatDet.Vdatdtid
                                };

                                listaMDPotGenData.Add(RERTotal);
                            }
                        }
                        //llenar Importación y  Exportación tabla listaInterTipoData
                        else if (objDat.Verdatid == ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh || objDat.Verdatid == ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh)
                        {
                            var nombreInter = objDat.Verdatid;

                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var lstValores = objDatDet.Vdatdtvalor.Split('|');

                                if (lstValores.Length == 4)
                                {
                                    decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;
                                    var FechaInicial = (lstValores[1] != "") ? DateTime.ParseExact(lstValores[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                    var FechaFinal = (lstValores[2] != "") ? DateTime.ParseExact(lstValores[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                                    int TgenCodi = int.TryParse(lstValores[3], out int valorint) ? valorint : 0;

                                    var FiltroCelda = new FiltroCeldaDato()
                                    {
                                        FechaIni = FechaInicial,
                                        FechaFin = FechaFinal,
                                        Tgenercodi = TgenCodi
                                    };

                                    var valSEIN = new ResultadoTotalGeneracion()
                                    {
                                        TipoResultadoFecha = objDatDet.Vdatdtid,
                                        Tptomedicodi = nombreInter,
                                        Meditotal = valorDecimal,
                                        FiltroCeldaDato = FiltroCelda
                                    };
                                    listaInterTipoData.Add(valSEIN);
                                }
                            }
                        }
                        //llenar la tabla listaInterTotalData
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacionales)//"Intercambios Internacionales"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                var PartRER = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = objDatDet.ValorDecimal,
                                    TipoResultadoFecha = objDatDet.Vdatdtid
                                };

                                listaInterTotalData.Add(PartRER);
                            }
                        }
                        //llenar la tabla listaEvolucionSemanal
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia)//"Datos Lista listaEvolucionSemanal"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                //valorTextoPotGen +"|"+ PotGenData.Medifecha

                                var lstValores = objDatDet.Vdatdtvalor.Split('|');
                                if (lstValores.Length == 2)
                                {
                                    decimal valorDesc = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;
                                    var Fecha = (lstValores[1] != "") ? DateTime.ParseExact(lstValores[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();

                                    var PotGen = new ResultadoTotalGeneracion()
                                    {
                                        Meditotal = valorDesc,
                                        Fenergcodi = objDatDet.Vdatdtid,
                                        Medifecha = Fecha
                                    };

                                    listaEvolucionSemanal.Add(PotGen);
                                }
                            }
                        }
                        //llenar la tabla listaFenergEvolucion
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionFuenteEnergia)//"Datos Lista listaFenergEvolucion"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                //reg.Fenergcodi + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor,

                                var lstValores = objDatDet.Vdatdtvalor.Split('|');
                                if (lstValores.Length == 3)
                                {
                                    int valorInt = int.TryParse(lstValores[0], out int valordec) ? valordec : 0;

                                    var PartSEINA = new SiFuenteenergiaDTO()
                                    {
                                        Fenergcodi = valorInt,
                                        Fenergnomb = lstValores[1],
                                        Fenergcolor = lstValores[2]
                                    };

                                    listaFenergEvolucion.Add(PartSEINA);
                                }
                            }
                        }
                        //llenar la tabla listaParticipacionRecursosEnergeticosYRer
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)//"Datos Lista listaParticipacionRecursosEnergeticosYRer"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                //valorTextoRecEner +"|"+ cat.Fenergnomb
                                var lstValores = objDatDet.Vdatdtvalor.Split('|');
                                if (lstValores.Length == 2)
                                {
                                    decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;

                                    var PartRERA = new ResultadoTotalGeneracion()
                                    {
                                        Meditotal = valorDecimal,
                                        Fenergnomb = lstValores[1],
                                        TipoResultadoFecha = objDatDet.Vdatdtid
                                    };

                                    listaParticipacionRecursosEnergeticosYRer.Add(PartRERA);
                                }
                            }
                        }
                        //llenar la tabla listaEvolucionSemanalEjecutivo
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia)//"Datos Lista listaEvolucionSemanalEjecutivo"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                //valorTextoEvoSem + "|" + EvoSem.Medifecha.ToString(ConstantesAppServicio.FormatoFecha)
                                var lstValores = objDatDet.Vdatdtvalor.Split('|');
                                if (lstValores.Length == 2)
                                {
                                    decimal valorDesc = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;
                                    var Fecha = (lstValores[1] != "") ? DateTime.ParseExact(lstValores[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();

                                    var PartRER = new ResultadoTotalGeneracion()
                                    {
                                        Meditotal = valorDesc,
                                        Fenergcodi = objDatDet.Vdatdtid,
                                        Medifecha = Fecha
                                    };

                                    listaEvolucionSemanalEjecutivo.Add(PartRER);
                                }
                            }
                        }
                        //llenar la tabla listaFenergEvolucionEjec
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionFuenteEnergiaEjecutivo)//"Datos Lista listaFenergEvolucionEjec"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                //regFE.Fenergcodi + "|" + regFE.Fenergnomb + "|" + regFE.Fenergcolor,

                                var lstValores = objDatDet.Vdatdtvalor.Split('|');
                                if (lstValores.Length == 3)
                                {
                                    int valorInt = int.TryParse(lstValores[0], out int valordec) ? valordec : 0;

                                    var PartSEINA = new SiFuenteenergiaDTO()
                                    {
                                        Fenergcodi = valorInt,
                                        Fenergnomb = lstValores[1],
                                        Fenergcolor = lstValores[2]
                                    };

                                    listaFenergEvolucionEjec.Add(PartSEINA);
                                }
                            }
                        }
                        //llenar la tabla listaParticipacionRecursosEnergeticosEjec
                        else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiGraficoParticipacionRecursosEnergeticosEjec)//"Datos Lista listaParticipacionRecursosEnergeticosEjec"
                        {
                            foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                            {
                                //valorTextoParGen + "|" + cat.Fenergnomb,
                                var lstValores = objDatDet.Vdatdtvalor.Split('|');
                                if (lstValores.Length == 2)
                                {
                                    decimal valorDesc = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;

                                    var PartSEINA = new ResultadoTotalGeneracion()
                                    {
                                        Meditotal = valorDesc,
                                        Fenergnomb = lstValores[1],
                                        Fenergcodi = objDatDet.Vdatdtid
                                    };

                                    listaParticipacionRecursosEnergeticosEjec.Add(PartSEINA);
                                }
                            }
                        }

                    }
                }


                //generar tabla
                var dataTabla = UtilSemanalPR5.ObtenerDataTablaProdTipoRecurso(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaMDTipoRecursoEnergeticoData, listaMDPotGenData,
                listaInterTipoData, listaInterTotalData, listaFenergCuadro);
                dataTabla.ListaItem = ListarItemFromSiMenureporte();

                var graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionEnergiaAcumuladaXTipoRecursoEnergetico(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaMDTipoRecursoEnergeticoData, listaFenergCuadro);
                //fallando
                var graficoEvoSem = UtilSemanalPR5.GraficoEvolucionSemanalRecursosEnergeticos(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEvolucionSemanal, listaFenergEvolucion);

                var graficoParticSem = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticos(objFiltro.ObjFecha, listaParticipacionRecursosEnergeticosYRer, PR5ConstanteFecha.ValorAnioAct_SemAct);
                var graficoParticAcu = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticos(objFiltro.ObjFecha, listaParticipacionRecursosEnergeticosYRer, PR5ConstanteFecha.ValorAnioAct_Acum);
                var graficoEvoSemEjecutivo = UtilSemanalPR5.GraficoEvolucionSemanalRecursosEnergeticosEjecutivo(objFiltro.ObjFecha, listaEvolucionSemanalEjecutivo, listaFenergEvolucionEjec);
                var graficoParticSemEjecutivo = UtilSemanalPR5.GraficoPieParticipacionRecursosEnergeticos(objFiltro.ObjFecha, listaParticipacionRecursosEnergeticosEjec);

                var ListaGrafico = new List<GraficoWeb>();
                ListaGrafico.Add(graficoCompProd);
                ListaGrafico.Add(graficoEvoSem);
                ListaGrafico.Add(graficoParticSem);
                ListaGrafico.Add(graficoParticAcu);
                ListaGrafico.Add(graficoEvoSemEjecutivo);
                ListaGrafico.Add(graficoParticSemEjecutivo);

                objReporte = new InfSGIReporteVersionado()
                {
                    Tabla = dataTabla,
                    ListaGrafico = ListaGrafico
                };
            }

            return objReporte;
        }

        #endregion

        #region B.3. Producción RER

        private void GenerarExcelProduccionPorRERSemanal(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;
            TablaReporte dataTabla;
            GraficoWeb graficoCompProd, graficoParticAcum, graficoParticSem;

            InfSGIReporteVersionado objReporte = ListarDataVersionProduccionRER(objFiltro);

            dataTabla = objReporte.Tabla;
            graficoCompProd = objReporte.ListaGrafico[0];
            graficoParticAcum = objReporte.ListaGrafico[1];
            graficoParticSem = objReporte.ListaGrafico[2];


            int numRecursos, ultimaFilaTabla, ultimaFilaGraf1, ultimaFilaGraf2;
            UtilSemanalPR5.GenerarCharExcelListadoProduccionPorRER(ws, objFecha, dataTabla, out numRecursos, out ultimaFilaTabla);
            UtilSemanalPR5.GenerarCharExcelGraficoComparacionProduccionProdRER(ws, graficoCompProd, tipoDoc, numRecursos, ultimaFilaTabla + 4, out ultimaFilaGraf1);
            UtilSemanalPR5.GenerarCharExcelGraficoParticipacionRER(ws, numRecursos, graficoParticAcum, ultimaFilaGraf1 + 4, out ultimaFilaGraf2);
            UtilSemanalPR5.GenerarCharExcelGraficoParticipacionGeneralRER(ws, numRecursos, graficoParticSem, ultimaFilaGraf2 + 4);
        }

        #region Servicio

        /// <summary>
        /// Devuelve laslistas a usar en el reporte Produccion RER
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaTotalMaximaDemadaDesc"></param>
        /// <param name="listaRERData"></param>
        /// <param name="listaRERTotalData"></param>
        /// <param name="listaPartRERData"></param>
        /// <param name="listaFenergRER"></param>        /// 
        /// <param name="listaPotGenData"></param>
        /// <param name="listaPartSEINAcum"></param>
        /// <param name="listaPartRERAcumActual"></param>
        /// <param name="listaPartRERXTgenSemanaActual"></param>
        public void ListarDataProduccionRER(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaRERData
            , out List<ResultadoTotalGeneracion> listaRERTotalData, out List<ResultadoTotalGeneracion> listaPartRERData, out List<SiFuenteenergiaDTO> listaFenergRER
            , out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaPartSEINAcum, out List<ResultadoTotalGeneracion> listaPartRERAcumActual
            , out List<ResultadoTotalGeneracion> listaPartRERXTgenSemanaActual)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaPartRERXTgenSemanaActual = new List<ResultadoTotalGeneracion>();
            listaRERData = new List<ResultadoTotalGeneracion>();
            listaRERTotalData = new List<ResultadoTotalGeneracion>();
            listaPartRERData = new List<ResultadoTotalGeneracion>();
            listaPartSEINAcum = new List<ResultadoTotalGeneracion>();
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();

            listaFenergRER = UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoRER();

            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData, true);

            //Data Generación
            List<MeMedicion48DTO> listCon48 = objRpt.ListaTotalGenUnidad48;
            List<MeMedicion48DTO> listCon48Rer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer == "S").ToList();
            List<MeMedicion48DTO> listCon48SinRer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer != "S").ToList();

            //Data Despacho e Interconexion
            List<MeMedicion48DTO> listaDemandaGen48 = objRpt.ListaTotalGen48;
            List<MeMedicion48DTO> listaInterconexion48 = objRpt.ListaTotalInterconexion48;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });

            //Por Recursos Energéticos Renovables (RER)
            listaRERData = new List<ResultadoTotalGeneracion>();

            foreach (var regFE in listaFenergRER)
            {
                ResultadoTotalGeneracion regProdGenxFEAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFETotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAnio0, regProdGenxFEAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxFEAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum0, regProdGenxFEAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum1, regProdGenxFEAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaProdGenxFE = new List<ResultadoTotalGeneracion>();
                listaProdGenxFE.Add(regProdGenxFEAnio3);
                listaProdGenxFE.Add(regProdGenxFEAnio2);
                listaProdGenxFE.Add(regProdGenxFEAnio0);

                listaProdGenxFE.Add(regProdGenxFEAnio1);
                listaProdGenxFE.Add(regProdGenxFETotalVarAnio0);

                listaProdGenxFE.Add(regProdGenxFEAcum0);
                listaProdGenxFE.Add(regProdGenxFEAcum1);
                listaProdGenxFE.Add(regProdGenxFEAcumVarAnio0);

                listaProdGenxFE.Add(regProdGenxFEAcum2);
                listaProdGenxFE.Add(regProdGenxFEAcumVarAnio1);

                foreach (var regData in listaProdGenxFE)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Fenergnomb = regFE.Fenergnomb;
                    regData.Fenergcolor = regFE.Fenergcolor;
                }

                listaRERData.AddRange(listaProdGenxFE);
            }

            //Producción Total RER (*)
            listaRERTotalData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenRERAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenRERAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAnio0, regProdGenRERAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenRERAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenRERAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenRERAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAcum0, regProdGenRERAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenRERAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenRERAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAcum1, regProdGenRERAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaRERTotalData.Add(regProdGenRERAnio3);
            listaRERTotalData.Add(regProdGenRERAnio2);
            listaRERTotalData.Add(regProdGenRERAnio0);

            listaRERTotalData.Add(regProdGenRERAnio1);
            listaRERTotalData.Add(regProdGenRERTotalVarAnio0);

            listaRERTotalData.Add(regProdGenRERAcum0);
            listaRERTotalData.Add(regProdGenRERAcum1);
            listaRERTotalData.Add(regProdGenRERAcumVarAnio0);

            listaRERTotalData.Add(regProdGenRERAcum2);
            listaRERTotalData.Add(regProdGenRERAcumVarAnio1);

            //Potencia generada en el SEIN
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);

            listaPotGenData.Add(regProdGenAnio3);
            listaPotGenData.Add(regProdGenAnio2);
            listaPotGenData.Add(regProdGenAnio0);

            listaPotGenData.Add(regProdGenAnio1);

            listaPotGenData.Add(regProdGenAcum0);
            listaPotGenData.Add(regProdGenAcum1);

            listaPotGenData.Add(regProdGenAcum2);

            //Participación RER en el SEIN (%)
            listaPartRERData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regPartRERAnio3 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio3, regProdGenRERAnio3, PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3);
            ResultadoTotalGeneracion regPartRERAnio2 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio2, regProdGenRERAnio2, PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2);
            ResultadoTotalGeneracion regPartRERAnio0 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio0, regProdGenRERAnio0, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0);

            ResultadoTotalGeneracion regPartRERAnio1 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio1, regProdGenRERAnio1, PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1);

            ResultadoTotalGeneracion regPartRERAcum0 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenRERAcum0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            ResultadoTotalGeneracion regPartRERAcum1 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum1, regProdGenRERAcum1, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1);

            ResultadoTotalGeneracion regPartRERAcum2 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum2, regProdGenRERAcum2, PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2);

            listaPartRERData.Add(regPartRERAnio3);
            listaPartRERData.Add(regPartRERAnio2);
            listaPartRERData.Add(regPartRERAnio0);

            listaPartRERData.Add(regPartRERAnio1);

            listaPartRERData.Add(regPartRERAcum0);
            listaPartRERData.Add(regPartRERAcum1);

            listaPartRERData.Add(regPartRERAcum2);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Participación de las RER en la Matriz de Generación del SEIN - Periodo 01 de enero al FECHA_FIN
            listaPartSEINAcum = new List<ResultadoTotalGeneracion>();

            ResultadoTotalGeneracion regProdGenAcum0SinRer = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48SinRer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

            ResultadoTotalGeneracion regPartTotalSein = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenAcum0SinRer, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            regPartTotalSein.Fenergnomb = "Producción Total del SEIN";
            listaPartSEINAcum.Add(regPartTotalSein);

            ResultadoTotalGeneracion regPartTotalRER = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenRERAcum0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            regPartTotalRER.Fenergnomb = "RER";
            listaPartSEINAcum.Add(regPartTotalRER);

            var listaFEAnioActAcum = listaRERData.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).ToList();

            listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaFEAnioActAcum)
            {
                ResultadoTotalGeneracion regPartRER = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, reg, PR5ConstanteFecha.ValorAnioAct_Acum, reg.Medifecha);
                regPartRER.Fenergcodi = reg.Fenergcodi;
                regPartRER.Fenergnomb = reg.Fenergnomb;

                listaPartRERAcumActual.Add(regPartRER);
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //PARTICIPACIÓN DE LAS RER EN EL SEIN en la semana operativa
            listaPartRERXTgenSemanaActual = new List<ResultadoTotalGeneracion>();

            List<SiTipogeneracionDTO> listaTgeneracion = this.ListarSiTipogeneracion();
            foreach (var reg in listaTgeneracion)
            {
                ResultadoTotalGeneracion regProdGenxTgenSem0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regPartRER = UtilSemanalPR5.GetObjParticipacion(regProdGenRERAnio0, regProdGenxTgenSem0, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0);
                regPartRER.Tgenercodi = reg.Tgenercodi;
                regPartRER.Tgenernomb = reg.Tgenernomb;
                regPartRER.Tgenercolor = reg.Tgenercolor;

                listaPartRERXTgenSemanaActual.Add(regPartRER);
            }

            /*
            /////////////////////////////////////////////////////////////////////
            /// Output
            dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionRER(objFecha, listaTotalMaximaDemadaDesc, listaRERData, listaRERTotalData, listaPartRERData, listaFenergRER);
            dataTabla.ListaItem = ListarItemFromSiMenureporte();

            graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionRERAcumulada(objFecha, listaTotalMaximaDemadaDesc, listaRERData, listaFenergRER);
            graficoParticAcum = UtilSemanalPR5.GraficoPieParticipacionMatrizGeneracionSEIN(objFecha, listaRERTotalData, listaPotGenData, listaPartRERData, listaPartSEINAcum, listaPartRERAcumActual);
            graficoParticSem = UtilSemanalPR5.GraficoPieParticipacionRER(objFecha, listaPartRERXTgenSemanaActual);
            */
        }

        private void CargarListaProduccionRER(FechasPR5 objFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompProd, out GraficoWeb graficoParticAcum, out GraficoWeb graficoParticSem)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            List<ResultadoTotalGeneracion> listaPartRERXTgenSemanaActual = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaRERData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaRERTotalData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPartRERData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPartSEINAcum = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPotGenData = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();

            var listaFenergRER = UtilSemanalPR5.ListarFilaCuadroRecursoEnergeticoRER();

            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData, true);

            //Data Generación
            List<MeMedicion48DTO> listCon48 = objRpt.ListaTotalGenUnidad48;
            List<MeMedicion48DTO> listCon48Rer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer == "S").ToList();
            List<MeMedicion48DTO> listCon48SinRer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer != "S").ToList();

            //Data Despacho e Interconexion
            List<MeMedicion48DTO> listaDemandaGen48 = objRpt.ListaTotalGen48;
            List<MeMedicion48DTO> listaInterconexion48 = objRpt.ListaTotalInterconexion48;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });

            //Por Recursos Energéticos Renovables (RER)
            listaRERData = new List<ResultadoTotalGeneracion>();

            foreach (var regFE in listaFenergRER)
            {
                ResultadoTotalGeneracion regProdGenxFEAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFEAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxFEAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxFETotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAnio0, regProdGenxFEAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxFEAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum0, regProdGenxFEAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenxFEAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Fenergcodi == regFE.Fenergcodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenxFEAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenxFEAcum1, regProdGenxFEAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaProdGenxFE = new List<ResultadoTotalGeneracion>();
                listaProdGenxFE.Add(regProdGenxFEAnio3);
                listaProdGenxFE.Add(regProdGenxFEAnio2);
                listaProdGenxFE.Add(regProdGenxFEAnio0);

                listaProdGenxFE.Add(regProdGenxFEAnio1);
                listaProdGenxFE.Add(regProdGenxFETotalVarAnio0);

                listaProdGenxFE.Add(regProdGenxFEAcum0);
                listaProdGenxFE.Add(regProdGenxFEAcum1);
                listaProdGenxFE.Add(regProdGenxFEAcumVarAnio0);

                listaProdGenxFE.Add(regProdGenxFEAcum2);
                listaProdGenxFE.Add(regProdGenxFEAcumVarAnio1);

                foreach (var regData in listaProdGenxFE)
                {
                    regData.Fenergcodi = regFE.Fenergcodi;
                    regData.Fenergnomb = regFE.Fenergnomb;
                    regData.Fenergcolor = regFE.Fenergcolor;
                }

                listaRERData.AddRange(listaProdGenxFE);
            }

            //Producción Total RER (*)
            listaRERTotalData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenRERAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenRERAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenRERTotalVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAnio0, regProdGenRERAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenRERAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenRERAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenRERAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAcum0, regProdGenRERAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenRERAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenRERAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenRERAcum1, regProdGenRERAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaRERTotalData.Add(regProdGenRERAnio3);
            listaRERTotalData.Add(regProdGenRERAnio2);
            listaRERTotalData.Add(regProdGenRERAnio0);

            listaRERTotalData.Add(regProdGenRERAnio1);
            listaRERTotalData.Add(regProdGenRERTotalVarAnio0);

            listaRERTotalData.Add(regProdGenRERAcum0);
            listaRERTotalData.Add(regProdGenRERAcum1);
            listaRERTotalData.Add(regProdGenRERAcumVarAnio0);

            listaRERTotalData.Add(regProdGenRERAcum2);
            listaRERTotalData.Add(regProdGenRERAcumVarAnio1);

            //Potencia generada en el SEIN
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regProdGenAnio3 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio3Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio3Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3, objFecha.Anio3Ant.RangoAct_FechaIni, objFecha.Anio3Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio2Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio2Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2, objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion regProdGenAnio0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAnio1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);

            listaPotGenData.Add(regProdGenAnio3);
            listaPotGenData.Add(regProdGenAnio2);
            listaPotGenData.Add(regProdGenAnio0);

            listaPotGenData.Add(regProdGenAnio1);

            listaPotGenData.Add(regProdGenAcum0);
            listaPotGenData.Add(regProdGenAcum1);

            listaPotGenData.Add(regProdGenAcum2);

            //Participación RER en el SEIN (%)
            listaPartRERData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regPartRERAnio3 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio3, regProdGenRERAnio3, PR5ConstanteFecha.ValorAnio3Ant_SemAct, fechaInicialAnio3);
            ResultadoTotalGeneracion regPartRERAnio2 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio2, regProdGenRERAnio2, PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialAnio2);
            ResultadoTotalGeneracion regPartRERAnio0 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio0, regProdGenRERAnio0, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0);

            ResultadoTotalGeneracion regPartRERAnio1 = UtilSemanalPR5.GetObjParticipacion(regProdGenAnio1, regProdGenRERAnio1, PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialAnio1);

            ResultadoTotalGeneracion regPartRERAcum0 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenRERAcum0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            ResultadoTotalGeneracion regPartRERAcum1 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum1, regProdGenRERAcum1, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1);

            ResultadoTotalGeneracion regPartRERAcum2 = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum2, regProdGenRERAcum2, PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2);

            listaPartRERData.Add(regPartRERAnio3);
            listaPartRERData.Add(regPartRERAnio2);
            listaPartRERData.Add(regPartRERAnio0);

            listaPartRERData.Add(regPartRERAnio1);

            listaPartRERData.Add(regPartRERAcum0);
            listaPartRERData.Add(regPartRERAcum1);

            listaPartRERData.Add(regPartRERAcum2);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Participación de las RER en la Matriz de Generación del SEIN - Periodo 01 de enero al FECHA_FIN
            listaPartSEINAcum = new List<ResultadoTotalGeneracion>();

            ResultadoTotalGeneracion regProdGenAcum0SinRer = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48SinRer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);

            ResultadoTotalGeneracion regPartTotalSein = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenAcum0SinRer, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            regPartTotalSein.Fenergnomb = "Producción Total del SEIN";
            listaPartSEINAcum.Add(regPartTotalSein);

            ResultadoTotalGeneracion regPartTotalRER = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, regProdGenRERAcum0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0);
            regPartTotalRER.Fenergnomb = "RER";
            listaPartSEINAcum.Add(regPartTotalRER);

            var listaFEAnioActAcum = listaRERData.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).ToList();

            listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaFEAnioActAcum)
            {
                ResultadoTotalGeneracion regPartRER = UtilSemanalPR5.GetObjParticipacion(regProdGenAcum0, reg, PR5ConstanteFecha.ValorAnioAct_Acum, reg.Medifecha);
                regPartRER.Fenergcodi = reg.Fenergcodi;
                regPartRER.Fenergnomb = reg.Fenergnomb;

                listaPartRERAcumActual.Add(regPartRER);
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //PARTICIPACIÓN DE LAS RER EN EL SEIN en la semana operativa
            listaPartRERXTgenSemanaActual = new List<ResultadoTotalGeneracion>();

            List<SiTipogeneracionDTO> listaTgeneracion = this.ListarSiTipogeneracion();
            foreach (var reg in listaTgeneracion)
            {
                ResultadoTotalGeneracion regProdGenxTgenSem0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Tgenercodi == reg.Tgenercodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regPartRER = UtilSemanalPR5.GetObjParticipacion(regProdGenRERAnio0, regProdGenxTgenSem0, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialAnio0);
                regPartRER.Tgenercodi = reg.Tgenercodi;
                regPartRER.Tgenernomb = reg.Tgenernomb;
                regPartRER.Tgenercolor = reg.Tgenercolor;

                listaPartRERXTgenSemanaActual.Add(regPartRER);
            }

            /////////////////////////////////////////////////////////////////////
            // Output
            dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionRER(objFecha, listaTotalMaximaDemadaDesc, listaRERData, listaRERTotalData, listaPartRERData, listaFenergRER);
            dataTabla.ListaItem = ListarItemFromSiMenureporte();

            graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionRERAcumulada(objFecha, listaTotalMaximaDemadaDesc, listaRERData, listaFenergRER);
            graficoParticAcum = UtilSemanalPR5.GraficoPieParticipacionMatrizGeneracionSEIN(objFecha, listaRERTotalData, listaPotGenData, listaPartRERData, listaPartSEINAcum, listaPartRERAcumActual);
            graficoParticSem = UtilSemanalPR5.GraficoPieParticipacionRER(objFecha, listaPartRERXTgenSemanaActual);
        }

        /// <summary> Devuelve laslistas a usar en el reporte Produccion RER
        /// </summary>
        /// <param name="objFiltro"></param>
        public InfSGIReporteVersionado ListarDataVersionProduccionRER(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarListaProduccionRER(objFiltro.ObjFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompProd,
                    out GraficoWeb graficoParticAcum, out GraficoWeb graficoParticSem);

                var ListaGrafico = new List<GraficoWeb>();
                ListaGrafico.Add(graficoCompProd);
                ListaGrafico.Add(graficoParticAcum);
                ListaGrafico.Add(graficoParticSem);

                objReporte.Tabla = dataTabla;
                objReporte.ListaGrafico = ListaGrafico;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);
                GetDataVersionProduccionRER(listaDat, listaDatDetalle, out TablaReporte dataTabla, out GraficoWeb graficoCompProd,
                                            out GraficoWeb graficoParticAcum, out GraficoWeb graficoParticSem, objFiltro);

                var ListaGrafico = new List<GraficoWeb>();
                ListaGrafico.Add(graficoCompProd);
                ListaGrafico.Add(graficoParticAcum);
                ListaGrafico.Add(graficoParticSem);

                objReporte.Tabla = dataTabla;
                objReporte.ListaGrafico = ListaGrafico;
            }

            return objReporte;
        }

        private void GetDataVersionProduccionRER(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out TablaReporte dataTabla, out GraficoWeb graficoCompProd,
                    out GraficoWeb graficoParticAcum, out GraficoWeb graficoParticSem, InfSGIFiltroReporte objFiltro)
        {
            //Ultimas semanas operativas
            DateTime fechaInicialAnio3 = objFiltro.ObjFecha.Anio3Ant.Fecha_01Enero, fechaFinalAnio3 = objFiltro.ObjFecha.Anio3Ant.Fecha_Final;
            DateTime fechaInicialAnio2 = objFiltro.ObjFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFiltro.ObjFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_Final;

            //tablas requeridas
            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_SemAct, SemanaFechaDesc = fechaInicialAnio3.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var, SemanaFechaDesc = fechaInicialAnio0.Year.ToString() + "/" + fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = fechaInicialAnio2.Year.ToString() });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() + "/" + fechaInicialAnio2.Year.ToString() });

            var listaRERData = new List<ResultadoTotalGeneracion>();
            var listaRERTotalData = new List<ResultadoTotalGeneracion>();
            var listaPartRERData = new List<ResultadoTotalGeneracion>();
            var listaFenergRER = new List<SiFuenteenergiaDTO>();

            var listaPotGenData = new List<ResultadoTotalGeneracion>();
            var listaPartSEINAcum = new List<ResultadoTotalGeneracion>();
            var listaPartRERAcumActual = new List<ResultadoTotalGeneracion>();
            var listaPartRERXTgenSemanaActual = new List<ResultadoTotalGeneracion>();

            foreach (var objDat in listaDat)
            {
                //llenar la tabla listaFenergRER
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)
                {
                    var FenergRER = new SiFuenteenergiaDTO()
                    {
                        Fenergcodi = objDat.Verdatid,
                        Fenergnomb = objDat.Verdatvalor
                    };

                    listaFenergRER.Add(FenergRER);

                    //llenar tabla listaRERData
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                    {
                        var lstValores = objDatDet.Vdatdtvalor.Split('|');

                        if (lstValores.Length == 4)
                        {
                            decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;
                            var FechaInicial = (lstValores[1] != "") ? DateTime.ParseExact(lstValores[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                            var FechaFinal = (lstValores[2] != "") ? DateTime.ParseExact(lstValores[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture) : new DateTime();
                            int TgenCodi = int.TryParse(lstValores[3], out int valorint) ? valorint : 0;

                            var FiltroCelda = new FiltroCeldaDato()
                            {
                                FechaIni = FechaInicial,
                                FechaFin = FechaFinal,
                                Tgenercodi = TgenCodi
                            };

                            var RERData = new ResultadoTotalGeneracion()
                            {
                                Meditotal = valorDecimal,
                                Fenergcodi = objDat.Verdatid,
                                TipoResultadoFecha = objDatDet.Vdatdtid,
                                FiltroCeldaDato = FiltroCelda
                            };

                            listaRERData.Add(RERData);
                        }
                    }

                }
                else
                {
                    //llenar la tabla listaRERTotalData
                    if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodigoProduccionRER)//Producción Total RER (*)
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var RERTotal = new ResultadoTotalGeneracion()
                            {
                                Meditotal = objDatDet.ValorDecimal,
                                TipoResultadoFecha = objDatDet.Vdatdtid
                            };

                            listaRERTotalData.Add(RERTotal);
                        }
                    }
                    //llenar la tabla listaPartRERData
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER)//Participación RER en el SEIN (%)
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var PartRER = new ResultadoTotalGeneracion()
                            {
                                Meditotal = objDatDet.ValorDecimal,
                                TipoResultadoFecha = objDatDet.Vdatdtid
                            };

                            listaPartRERData.Add(PartRER);
                        }
                    }
                    //llenar la tabla listaPotGenData
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual)//Datos Lista listaPotGenData
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var PotGen = new ResultadoTotalGeneracion()
                            {
                                Meditotal = objDatDet.ValorDecimal,
                                TipoResultadoFecha = objDatDet.Vdatdtid
                            };

                            listaPotGenData.Add(PotGen);
                        }
                    }
                    //llenar la tabla listaPartSEINAcum
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado)//Datos Lista listaPartSEINAcum
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            //valorTextoPartSEINA + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor

                            var lstValores = objDatDet.Vdatdtvalor.Split('|');
                            if (lstValores.Length == 3)
                            {
                                decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;

                                var PartSEINA = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = valorDecimal,
                                    Fenergnomb = lstValores[1],
                                    Fenergcolor = lstValores[2]
                                };

                                listaPartSEINAcum.Add(PartSEINA);
                            }
                        }
                    }
                    //llenar la tabla listaPartRERAcumActual
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiPartRERAcumuladoActual)//Datos Lista listaPartRERAcumActual
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            //valorTextoPartRERA + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor

                            var lstValores = objDatDet.Vdatdtvalor.Split('|');
                            if (lstValores.Length == 3)
                            {
                                decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;

                                var PartRERA = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = valorDecimal,
                                    Fenergnomb = lstValores[1],
                                    Fenergcolor = lstValores[2]
                                };

                                listaPartRERAcumActual.Add(PartRERA);
                            }
                        }
                    }
                    //llenar la tabla listaPartRERXTgenSemanaActual
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiPartRERSemanaActual)//Datos Lista listaPartRERXTgenSemanaActual
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            //valorTextoPartRERXT + "|" + reg.Tgenernomb + "|" + reg.Tgenercolor,

                            var lstValores = objDatDet.Vdatdtvalor.Split('|');
                            if (lstValores.Length == 3)
                            {
                                decimal valorDecimal = decimal.TryParse(lstValores[0], out decimal valordec) ? valordec : 0;

                                var PartRERXT = new ResultadoTotalGeneracion()
                                {
                                    Meditotal = valorDecimal,
                                    Tgenernomb = lstValores[1],
                                    Tgenercolor = lstValores[2]
                                };

                                listaPartRERXTgenSemanaActual.Add(PartRERXT);
                            }
                        }
                    }
                }
            }

            //generar tabla
            dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionRER(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaRERData, listaRERTotalData, listaPartRERData, listaFenergRER);
            dataTabla.ListaItem = ListarItemFromSiMenureporte();

            graficoCompProd = UtilSemanalPR5.GraficoComparacionProduccionRERAcumulada(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaRERData, listaFenergRER);
            graficoParticAcum = UtilSemanalPR5.GraficoPieParticipacionMatrizGeneracionSEIN(objFiltro.ObjFecha, listaRERTotalData, listaPotGenData, listaPartRERData, listaPartSEINAcum, listaPartRERAcumActual);
            graficoParticSem = UtilSemanalPR5.GraficoPieParticipacionRER(objFiltro.ObjFecha, listaPartRERXTgenSemanaActual);

        }

        #endregion

        #endregion

        #region B.4. Factor de planta de las centrales RER

        private void GenerarExcelFactorPlantaRERSemanal(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;
            TablaReporte dataTabla; List<GraficoWeb> listaGraficoProdYFPxTgen; GraficoWeb graficoBarraFPAcum;

            InfSGIReporteVersionado objReporte = ListarDataVersionFactorPlantaCentralesRER(objFiltro);

            dataTabla = objReporte.Tabla;
            listaGraficoProdYFPxTgen = objReporte.ListaGrafico;
            graficoBarraFPAcum = objReporte.Grafico;

            int UltimaFilaTabla;
            List<int> lstUltimaFilaGraficosBloque = new List<int>();

            UtilSemanalPR5.GenerarCharExcelListadoFactorPlantaRER(ws, objFecha, dataTabla, out UltimaFilaTabla);

            lstUltimaFilaGraficosBloque.Add(UltimaFilaTabla + 4);
            foreach (var reg in listaGraficoProdYFPxTgen)
            {
                UtilSemanalPR5.GenerarCharExcelGraficoFactorPlantaXTgeneracionRER(ws, reg, UltimaFilaTabla + 4, ref lstUltimaFilaGraficosBloque);
            }
            lstUltimaFilaGraficosBloque.Add(UltimaFilaTabla + 4);

            UtilSemanalPR5.GenerarCharExcelGraficoFactorPlantaAcumuladoRER(ws, graficoBarraFPAcum, lstUltimaFilaGraficosBloque.Max() + 5, UltimaFilaTabla);
        }

        #region Servicio

        private void CargarFactorPlantaCentralesRER(FechasPR5 objFecha, out TablaReporte dataTabla, out List<GraficoWeb> listaGraficoProdYFPxTgen, out GraficoWeb graficoBarraFPAcum)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData, true);
            List<MeMedicion48DTO> listCon48Rer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer == "S").ToList();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaFinalAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaFinalAnio1.ToString(ConstantesAppServicio.FormatoFecha) });

            //Potencia Efectiva de las centrales 
            List<EqEquipoDTO> listaPESemActAnioAct = ListarEquipoCentralYPeXFecha(objFecha.AnioAct.RangoAct_FechaFin);
            List<EqEquipoDTO> listaPESemActAnio1Ant = ListarEquipoCentralYPeXFecha(objFecha.Anio1Ant.RangoAct_FechaFin);
            List<EqEquipoDTO> listaPEAcumAnioAct = listaPESemActAnioAct;
            List<EqEquipoDTO> listaPEAcumAnio1Ant = ListarEquipoCentralYPeXFecha(fechaFinalAnio1);

            List<SiTipogeneracionDTO> listaTgeneracion = this.ListarSiTipogeneracion();
            List<EqEquipoDTO> listaEqBD = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamilias + "," + ConstantesHorasOperacion.CodFamiliasGeneradores);

            //Central
            List<ResultadoTotalGeneracion> listaGeneracionCentralRER = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaPECentralRER = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaFPCentralRER = new List<ResultadoTotalGeneracion>();

            List<EqEquipoDTO> listaCentralRER = UtilAnexoAPR5.ListarCentralesFromM48(listCon48Rer, listaTgeneracion, listaEqBD).OrderBy(x => x.Tgenernomb).ThenBy(x => x.Central).ToList();
            foreach (var regCentral in listaCentralRER)
            {
                if (regCentral.Equipadre == 17551)
                { }
                //Generacion
                ResultadoTotalGeneracion regProdGenxCentralSemActAnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaFin, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxCentralSemActAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaFin, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxCentralAcumAnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxCentralAcumAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);

                List<ResultadoTotalGeneracion> listaProdGenxCentral = new List<ResultadoTotalGeneracion>();
                listaProdGenxCentral.Add(regProdGenxCentralSemActAnioAct);
                listaProdGenxCentral.Add(regProdGenxCentralSemActAnio1Ant);

                listaProdGenxCentral.Add(regProdGenxCentralAcumAnioAct);
                listaProdGenxCentral.Add(regProdGenxCentralAcumAnio1Ant);

                foreach (var regData in listaProdGenxCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaGeneracionCentralRER.AddRange(listaProdGenxCentral);

                //Potencia Efectiva
                ResultadoTotalGeneracion regPExCentralSemActAnioAct = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPESemActAnioAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regPExCentralSemActAnio1Ant = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPESemActAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regPExCentralAcumAnioAct = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPEAcumAnioAct, PR5ConstanteFecha.ValorAnioAct_Acum, fechaFinalAnio0);
                ResultadoTotalGeneracion regPExCentralAcumAnio1Ant = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPEAcumAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaFinalAnio1);

                List<ResultadoTotalGeneracion> listaPExCentral = new List<ResultadoTotalGeneracion>();
                listaPExCentral.Add(regPExCentralSemActAnioAct);

                foreach (var regData in listaPExCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaPECentralRER.AddRange(listaPExCentral);

                //Factor de planta
                ResultadoTotalGeneracion regFPxCentralSemActAnioAct = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralSemActAnioAct, regPExCentralSemActAnioAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regFPxCentralSemActAnio1Ant = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralSemActAnio1Ant, regPExCentralSemActAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regFPxCentralAcumAnioAct = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralAcumAnioAct, regPExCentralAcumAnioAct, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regFPxCentralAcumAnio1Ant = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralAcumAnio1Ant, regPExCentralAcumAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaFinalAnio1);


                List<ResultadoTotalGeneracion> listaFPxCentral = new List<ResultadoTotalGeneracion>();
                listaFPxCentral.Add(regFPxCentralSemActAnioAct);
                listaFPxCentral.Add(regFPxCentralSemActAnio1Ant);

                listaFPxCentral.Add(regFPxCentralAcumAnioAct);
                listaFPxCentral.Add(regFPxCentralAcumAnio1Ant);

                foreach (var regData in listaFPxCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaFPCentralRER.AddRange(listaFPxCentral);
            }

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Output
            dataTabla = UtilSemanalPR5.ObtenerDataTablaFactorPlantaCentralesRER(objFecha, listaTotalMaximaDemadaDesc, listaCentralRER,
                                listaGeneracionCentralRER, listaPECentralRER, listaFPCentralRER);
            dataTabla.ListaItem = ListarItemFromSiMenureporte();

            listaGraficoProdYFPxTgen = new List<GraficoWeb>();
            foreach (var reg in listaTgeneracion.OrderBy(x => x.Tgenernomb).ToList())
            {
                GraficoWeb graficoXTgen = UtilSemanalPR5.GraficoProdGenyFactorPlantaXTgeneracionRER(reg.Tgenercodi, objFecha, reg, listaCentralRER, listaGeneracionCentralRER, listaFPCentralRER);
                listaGraficoProdYFPxTgen.Add(graficoXTgen);
            }

            graficoBarraFPAcum = UtilSemanalPR5.GraficoBarraFactorPlantaAcumuladoCentralRER(objFecha, listaCentralRER, listaFPCentralRER, listaTgeneracion);
        }

        private void ListarDataFactorPlantaCentralesRER(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc,
            out List<EqEquipoDTO> listaCentralRER, out List<ResultadoTotalGeneracion> listaGeneracionCentralRER,
            out List<ResultadoTotalGeneracion> listaPECentralRER, out List<ResultadoTotalGeneracion> listaFPCentralRER, out List<SiTipogeneracionDTO> listaTgeneracion)
        {
            List<MaximaDemandaDTO> listaTotalMaximaDemada = new List<MaximaDemandaDTO>();
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData, true);
            List<MeMedicion48DTO> listCon48Rer = objRpt.ListaTotalGenUnidad48.Where(x => x.Tipogenerrer == "S").ToList();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Producción de energía eléctrica (GWh) por tipo de recurso energético en el SEIN.

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaFinalAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaFinalAnio1.ToString(ConstantesAppServicio.FormatoFecha) });

            //Potencia Efectiva de las centrales 
            List<EqEquipoDTO> listaPESemActAnioAct = ListarEquipoCentralYPeXFecha(objFecha.AnioAct.RangoAct_FechaFin);
            List<EqEquipoDTO> listaPESemActAnio1Ant = ListarEquipoCentralYPeXFecha(objFecha.Anio1Ant.RangoAct_FechaFin);
            List<EqEquipoDTO> listaPEAcumAnioAct = listaPESemActAnioAct;
            List<EqEquipoDTO> listaPEAcumAnio1Ant = ListarEquipoCentralYPeXFecha(fechaFinalAnio1);

            listaTgeneracion = this.ListarSiTipogeneracion();
            List<EqEquipoDTO> listaEqBD = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamilias + "," + ConstantesHorasOperacion.CodFamiliasGeneradores);

            //Central
            listaGeneracionCentralRER = new List<ResultadoTotalGeneracion>();
            listaPECentralRER = new List<ResultadoTotalGeneracion>();
            listaFPCentralRER = new List<ResultadoTotalGeneracion>();

            listaCentralRER = UtilAnexoAPR5.ListarCentralesFromM48(listCon48Rer, listaTgeneracion, listaEqBD).OrderBy(x => x.Tgenernomb).ThenBy(x => x.Central).ToList();
            foreach (var regCentral in listaCentralRER)
            {
                if (regCentral.Equipadre == 17551)
                { }
                //Generacion
                ResultadoTotalGeneracion regProdGenxCentralSemActAnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaFin, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regProdGenxCentralSemActAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaFin, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regProdGenxCentralAcumAnioAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenxCentralAcumAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48Rer.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Equipadre == regCentral.Equipadre).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);

                List<ResultadoTotalGeneracion> listaProdGenxCentral = new List<ResultadoTotalGeneracion>();
                listaProdGenxCentral.Add(regProdGenxCentralSemActAnioAct);
                listaProdGenxCentral.Add(regProdGenxCentralSemActAnio1Ant);

                listaProdGenxCentral.Add(regProdGenxCentralAcumAnioAct);
                listaProdGenxCentral.Add(regProdGenxCentralAcumAnio1Ant);

                foreach (var regData in listaProdGenxCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaGeneracionCentralRER.AddRange(listaProdGenxCentral);

                //Potencia Efectiva
                ResultadoTotalGeneracion regPExCentralSemActAnioAct = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPESemActAnioAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regPExCentralSemActAnio1Ant = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPESemActAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regPExCentralAcumAnioAct = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPEAcumAnioAct, PR5ConstanteFecha.ValorAnioAct_Acum, fechaFinalAnio0);
                ResultadoTotalGeneracion regPExCentralAcumAnio1Ant = UtilSemanalPR5.GetPotenciaEfectivaByCentralRER(regCentral, listaPEAcumAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaFinalAnio1);

                List<ResultadoTotalGeneracion> listaPExCentral = new List<ResultadoTotalGeneracion>();
                listaPExCentral.Add(regPExCentralSemActAnioAct);

                foreach (var regData in listaPExCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaPECentralRER.AddRange(listaPExCentral);

                //Factor de planta
                ResultadoTotalGeneracion regFPxCentralSemActAnioAct = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralSemActAnioAct, regPExCentralSemActAnioAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regFPxCentralSemActAnio1Ant = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralSemActAnio1Ant, regPExCentralSemActAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

                ResultadoTotalGeneracion regFPxCentralAcumAnioAct = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralAcumAnioAct, regPExCentralAcumAnioAct, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regFPxCentralAcumAnio1Ant = UtilSemanalPR5.GetFactorPlantaByCentralRER(regProdGenxCentralAcumAnio1Ant, regPExCentralAcumAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaFinalAnio1);


                List<ResultadoTotalGeneracion> listaFPxCentral = new List<ResultadoTotalGeneracion>();
                listaFPxCentral.Add(regFPxCentralSemActAnioAct);
                listaFPxCentral.Add(regFPxCentralSemActAnio1Ant);

                listaFPxCentral.Add(regFPxCentralAcumAnioAct);
                listaFPxCentral.Add(regFPxCentralAcumAnio1Ant);

                foreach (var regData in listaFPxCentral)
                {
                    regData.Equipadre = regCentral.Equipadre.GetValueOrDefault(0);
                    regData.Central = regCentral.Central;
                }

                listaFPCentralRER.AddRange(listaFPxCentral);
            }
        }

        /// <summary> FACTOR DE PLANTA DE LAS CENTRALES RER DEL SEIN
        /// </summary>
        /// <param name="objFiltro"></param>
        public InfSGIReporteVersionado ListarDataVersionFactorPlantaCentralesRER(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarFactorPlantaCentralesRER(objFiltro.ObjFecha, out TablaReporte dataTabla, out List<GraficoWeb> listaGraficoProdYFPxTgen, out GraficoWeb graficoBarraFPAcum);
                objReporte.Tabla = dataTabla;
                objReporte.ListaGrafico = listaGraficoProdYFPxTgen;
                objReporte.Grafico = graficoBarraFPAcum;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                GetDataVersionFactorPlantaCentralesRER(listaDat, listaDatDetalle, out TablaReporte dataTabla,
                                                            out List<GraficoWeb> listaGraficoProdYFPxTgen, out GraficoWeb graficoBarraFPAcum, objFiltro);

                objReporte.Tabla = dataTabla;
                objReporte.ListaGrafico = listaGraficoProdYFPxTgen;
                objReporte.Grafico = graficoBarraFPAcum;

            }

            return objReporte;
        }

        private void GetDataVersionFactorPlantaCentralesRER(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out TablaReporte dataTabla,
                                                            out List<GraficoWeb> listaGraficoProdYFPxTgen, out GraficoWeb graficoBarraFPAcum, InfSGIFiltroReporte objFiltro)
        {
            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFiltro.ObjFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem0AnioAnt = objFiltro.ObjFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFiltro.ObjFecha.Anio1Ant.RangoAct_FechaFin;
            DateTime fechaInicialAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFiltro.ObjFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFiltro.ObjFecha.AnioAct.Fecha_Final;

            //tablas requeridas
            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = fechaInicialAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = fechaInicialAnio1.Year.ToString() });

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = fechaFinalAnio0.ToString(ConstantesAppServicio.FormatoFecha) });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = fechaFinalAnio1.ToString(ConstantesAppServicio.FormatoFecha) });

            var listaCentralRER = new List<EqEquipoDTO>();

            var listaPECentralRER = new List<ResultadoTotalGeneracion>();
            var listaGeneracionCentralRER = new List<ResultadoTotalGeneracion>();
            var listaFPCentralRER = new List<ResultadoTotalGeneracion>();

            var listaTgeneracion = new List<SiTipogeneracionDTO>();

            foreach (var objDat in listaDat)
            {
                //llenar la tabla listaCentralRER
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFactorPlantaCentralesRER)
                {
                    var lstValores = objDat.Verdatvalor.Split('|');

                    if (lstValores.Length == 2)
                    {
                        //valorTextoEvoSem +"|"+ evSemanal.TipoResultadoFecha
                        int valorCodi = int.TryParse(lstValores[0], out int valorint1) ? valorint1 : 0;

                        var EqEquipo = new EqEquipoDTO()
                        {
                            Equipadre = objDat.Verdatid,
                            Tgenercodi = valorCodi,
                            Tgenernomb = lstValores[1],
                            Central = objDat.Verdatvalor2
                        };

                        listaCentralRER.Add(EqEquipo);
                    }

                    var nroDato = 0;

                    //asignamos los valores de las demas tablas
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                    {
                        var CentralRER = new ResultadoTotalGeneracion()
                        {
                            Meditotal = objDatDet.ValorDecimal,
                            TipoResultadoFecha = objDatDet.Vdatdtid,
                            Equipadre = objDat.Verdatid
                        };

                        switch (nroDato)
                        {
                            case 0:
                                listaPECentralRER.Add(CentralRER);
                                break;
                            case 1:
                                listaGeneracionCentralRER.Add(CentralRER);
                                break;
                            case 2:
                                listaFPCentralRER.Add(CentralRER);
                                break;
                            case 3:
                                listaGeneracionCentralRER.Add(CentralRER);
                                break;
                            case 4:
                                listaFPCentralRER.Add(CentralRER);
                                break;
                            case 5:
                                listaGeneracionCentralRER.Add(CentralRER);
                                break;
                            case 6:
                                listaFPCentralRER.Add(CentralRER);
                                break;
                            case 7:
                                listaGeneracionCentralRER.Add(CentralRER);
                                break;
                            case 8:
                                listaFPCentralRER.Add(CentralRER);
                                break;
                        }

                        nroDato++;
                    }
                }
                else
                {
                    //lista tabla listaTgeneracion
                    if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)//"Lista de Generacion"
                    {
                        //asignamos los valores de las demas tablas
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            var lstValores = objDatDet.Vdatdtvalor.Split('|');

                            if (lstValores.Length == 2)
                            {
                                var TipGen = new SiTipogeneracionDTO()
                                {
                                    Tgenercodi = objDatDet.Vdatdtid,
                                    Tgenernomb = lstValores[0],
                                    Tgenercolor = lstValores[1]
                                };

                                listaTgeneracion.Add(TipGen);
                            }
                        }
                    }
                }
            }

            //generar tabla
            dataTabla = UtilSemanalPR5.ObtenerDataTablaFactorPlantaCentralesRER(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaCentralRER,
                            listaGeneracionCentralRER, listaPECentralRER, listaFPCentralRER);
            dataTabla.ListaItem = ListarItemFromSiMenureporte();

            listaGraficoProdYFPxTgen = new List<GraficoWeb>();
            foreach (var reg in listaTgeneracion.OrderBy(x => x.Tgenernomb).ToList())
            {
                GraficoWeb graficoXTgen = UtilSemanalPR5.GraficoProdGenyFactorPlantaXTgeneracionRER(reg.Tgenercodi, objFiltro.ObjFecha, reg, listaCentralRER, listaGeneracionCentralRER, listaFPCentralRER);
                listaGraficoProdYFPxTgen.Add(graficoXTgen);
            }

            graficoBarraFPAcum = UtilSemanalPR5.GraficoBarraFactorPlantaAcumuladoCentralRER(objFiltro.ObjFecha, listaCentralRER, listaFPCentralRER, listaTgeneracion);

        }

        /// <summary>
        /// ListarEquipoCentralYPeXFecha
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarEquipoCentralYPeXFecha(DateTime fechaPeriodo)
        {
            var servIndisp = new INDAppServicio();

            //obtener la lista de unidades para ese escenario
            servIndisp.ListarEqCentralSolarOpComercial(fechaPeriodo, fechaPeriodo, out List<EqEquipoDTO> listaCentrales1, out List<EqEquipoDTO> istaAllEquipos1, out List<ResultadoValidacionAplicativo> istaMsj1);
            servIndisp.ListarEqCentralEolicaOpComercial(fechaPeriodo, fechaPeriodo, out List<EqEquipoDTO> listaCentrales2, out List<EqEquipoDTO> istaAllEquipos2, out List<ResultadoValidacionAplicativo> istaMsj2);
            servIndisp.ListarEqCentralHidraulicoOpComercial(fechaPeriodo, fechaPeriodo, out List<EqEquipoDTO> listaCentrales3, out List<EqEquipoDTO> istaEquiposHidro, out List<ResultadoValidacionAplicativo> istaMsj3);
            servIndisp.ListarUnidadTermicoOpComercial(ConstantesIndisponibilidades.AppPF, fechaPeriodo, fechaPeriodo, out List<EqEquipoDTO> listaUnidadesTermo, out List<EqEquipoDTO> istaEquiposTermicos, out List<ResultadoValidacionAplicativo> istaMsj4);

            List<EqEquipoDTO> listaPropEq = new List<EqEquipoDTO>();
            listaPropEq.AddRange(listaCentrales1);
            listaPropEq.AddRange(listaCentrales2);
            listaPropEq.AddRange(listaCentrales3);

            var listaEqCentralTermico = new List<EqEquipoDTO>();
            foreach (var item in listaUnidadesTermo.GroupBy(x => x.Equipadre))
            {
                var objEqCentral = item.First();
                objEqCentral.Pe = item.Sum(x => x.Pe);
                listaEqCentralTermico.Add(objEqCentral);
            }

            listaPropEq.AddRange(listaEqCentralTermico);

            return listaPropEq;
        }

        #endregion

        #endregion

        #region B.5. Participación de la producción por empresas Integrantes

        private void GenerarExcelProduccionEmpresasByTipoSemanal(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = this.ListarDataVersionProduccionEmpresasIntegrantesInfSem(objFiltro);

            int finalPosTabla = 0;

            //LISTADO
            UtilSemanalPR5.GenerarListarReporteProduccionEmpresasIntegrantes(ws, objFecha, objReporte.Tabla, ref finalPosTabla);

            // GRAFICO1
            UtilSemanalPR5.GenerarGraficoCharExcellProduccionEmpresasIntegrantes(ws, objFecha, objReporte.Grafico, ref finalPosTabla);
        }

        /// <summary>
        /// GetDataVersionProduccionEmpresasIntegrantesInfSem
        /// </summary>
        /// <param name="listaDat"></param>
        /// <param name="listaDatDetalle"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaReporteXEmpresa"></param>
        /// <param name="listaReporteXTotal"></param>
        /// <param name="objFiltro"></param>
        public void GetDataVersionProduccionEmpresasIntegrantesInfSem(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<SiEmpresaDTO> listaEmpresa,
                        out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal, InfSGIFiltroReporte objFiltro)
        {

            List<SiEmpresaDTO> listaEmpresaAux = new List<SiEmpresaDTO>();
            List<ResultadoTotalGeneracion> listaReporteXEmpresaAux = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaReporteXTotalAux = new List<ResultadoTotalGeneracion>();

            int i = 0;
            foreach (var objDat in listaDat)
            {
                int iTipoResultadoFecha = 0;
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiParticipacionProdAnioActual)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiParticipacionProdAnioAnterior)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                }


                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    if (objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiParticipacionProdVariacion) // SI no es variación
                    {
                        if (objDatDet.Vercnpcodi != ConstantesConceptoVersion.ConceptoTotal)// Si no es total
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }

                            FiltroCeldaDato celdaDato = new FiltroCeldaDato()
                            {
                                FechaIni = objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni,
                                FechaFin = objFiltro.ObjFecha.AnioAct.RangoAct_FechaFin,
                                // FechaMD = fechaMaxD,
                            };
                            listaReporteXEmpresaAux.Add(new ResultadoTotalGeneracion()
                            {
                                Emprcodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                                Emprnomb = words[1],
                                FiltroCeldaDato = celdaDato

                            });
                            if (i == 0)
                            {
                                listaEmpresaAux.Add(new SiEmpresaDTO()
                                {
                                    Emprcodi = objDatDet.Vdatdtid,
                                    Emprnomb = words[1]
                                });
                            }
                        }
                        else // Totales
                        {
                            listaReporteXTotalAux.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                            });
                        }

                    }
                    else // si es variación
                    {
                        if (objDatDet.Vercnpcodi != ConstantesConceptoVersion.ConceptoTotal)// Si no es total
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }
                            listaReporteXEmpresaAux.Add(new ResultadoTotalGeneracion()
                            {
                                Emprcodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var,
                                Meditotal = objDatDet.ValorDecimal,
                                Emprnomb = words[1]

                            });
                        }
                        else // Totales
                        {
                            listaReporteXTotalAux.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var,
                                Meditotal = objDatDet.ValorDecimal,
                            });
                        }
                    }
                }
                i++;
            }
            listaEmpresa = listaEmpresaAux;
            listaReporteXEmpresa = listaReporteXEmpresaAux;
            listaReporteXTotal = listaReporteXTotalAux;
        }

        /// <summary>
        /// ListarDataVersionProduccionEmpresasIntegrantesInfSem
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionProduccionEmpresasIntegrantesInfSem(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargaProduccionEmpresasIntegrantes(objFiltro.ObjFecha, out List<SiEmpresaDTO> listaEmpresa, out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal);
                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionEmpresasIntegrantes(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = ListarItemFromSiMenureporte();
                GraficoWeb graficoCompProd = UtilSemanalPR5.GraficoProduccionEmpresasIntegrantes(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompProd;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionProduccionEmpresasIntegrantesInfSem(listaDat, listaDatDetalle, out List<SiEmpresaDTO> listaEmpresa,
                    out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal, objFiltro);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaProduccionEmpresasIntegrantes(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = ListarItemFromSiMenureporte();
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoProduccionEmpresasIntegrantes(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompMD;

            }
            return objReporte;
        }

        #region Servicio

        private void CargaProduccionEmpresasIntegrantes(FechasPR5 objFecha, out List<SiEmpresaDTO> listaEmpresa, out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal)
        {
            listaEmpresa = new List<SiEmpresaDTO>();
            listaReporteXEmpresa = new List<ResultadoTotalGeneracion>();
            listaReporteXTotal = new List<ResultadoTotalGeneracion>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            DateTime fechaIniData = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData, true);

            //Lista de empresas
            List<MeMedicion48DTO> lData = objRpt.ListaTotalGenUnidad48;
            var listaAnioAct_SemAct = lData.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList();
            var listaAnio1Ant_SemAct = lData.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt).ToList();

            List<SiEmpresaDTO> listaEmpresaBD = ListarEmpresasXID(lData.Select(x => x.Emprcodi).Distinct().ToList());
            listaEmpresa = UtilAnexoAPR5.ListarEmpresaFromM48(lData, listaEmpresaBD);

            //Reporte
            List<ResultadoTotalGeneracion> lsem1 = UtilSemanalPR5.ProdGenConvertDataEmpresaMW48ToGWh(listaEmpresa, listaAnioAct_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, fechaInicialSem0, fechaFinalSem0);
            List<ResultadoTotalGeneracion> lsem2 = UtilSemanalPR5.ProdGenConvertDataEmpresaMW48ToGWh(listaEmpresa, listaAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);
            List<ResultadoTotalGeneracion> lsemvar = UtilSemanalPR5.ProdGenGenerarVariacionGWh(listaEmpresa, lsem1, lsem2, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.RangoAct_FechaIni);

            listaReporteXEmpresa.AddRange(lsem1);
            listaReporteXEmpresa.AddRange(lsem2);
            listaReporteXEmpresa.AddRange(lsemvar);

            //Total
            ResultadoTotalGeneracion sem1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaAnioAct_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            ResultadoTotalGeneracion sem2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
            ResultadoTotalGeneracion semvar = UtilSemanalPR5.ProdGenGenerarVariacionGWhTotal(sem1, sem2, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.RangoAct_FechaIni);

            listaReporteXTotal.Add(sem1);
            listaReporteXTotal.Add(sem2);
            listaReporteXTotal.Add(semvar);

            //Lista de empresas ordenada
            listaEmpresa = UtilSemanalPR5.ListarEmpresaFromResultadoTotalGeneracion(listaReporteXEmpresa.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).OrderByDescending(x => x.Meditotal).ToList());
        }

        #endregion

        #endregion

        #endregion

        #region C. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA EN EL SEIN (MW)

        #region C.1. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)

        private void GenerarExcelCargarMaximaDemandaTipoGeneracionSemanal(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;

            InfSGIReporteVersionado objReporte = this.ListarDataVersionMaximaDemandaTipoGeneracionSemanal(objFiltro);
            objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();

            int finalPosTabla = 0;

            //LISTADO
            UtilSemanalPR5.ListarMaximaDemandaTipoGeneracionSemanal(ws, objFecha, objReporte.Tabla, ref finalPosTabla);

            // GRAFICO1
            UtilSemanalPR5.GenerarGraficoCharExcellBarraComparacionMDxTgeneracion(ws, objReporte.GraficoCompMD, ref finalPosTabla);

            // GRAFICO2
            UtilSemanalPR5.GenerarGraficoCharExcellDiagramaCargaDespacho(ws, objReporte.GraficoCargaDespacho, ref finalPosTabla);

            //GRAFICO3
            UtilSemanalPR5.GenerarGraficoCharExcellBarraMDyEvolucionSemanal(ws, objReporte.GraficoVarSem, ref finalPosTabla);

            //GRAFICO4
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal)
                UtilSemanalPR5.GenerarGraficoCharExcellCargaEvolucionSemanalSinInterconexion(ws, objReporte.GraficoMDSinExp, ref finalPosTabla);

        }

        /// <summary>
        /// ListarDataVersionMaximaDemandaTipoGeneracionSemanal
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionMaximaDemandaTipoGeneracionSemanal(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                this.CargarReporteMaximaDemandaTipoGeneracionInfSem(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData, out List<ResultadoTotalGeneracion> listaMDPotGenData,
            out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData,
            out List<MeMedicion48DTO> listaXRecursosEnergeticosData, out List<ResultadoTotalGeneracion> listaMDVarSemanalData, out List<ResultadoTotalGeneracion> listaMDSemanalSinInterconexion);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMDTipoGen(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaMDPotGenData, listaInterTipoData,
                                            listaInterTotalData, listaMDTotalData, listaTgeneracion);
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoBarraComparacionMDxTgeneracion(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaTgeneracionData, listaTgeneracion);
                GraficoWeb graficoCargaDespacho = UtilSemanalPR5.GraficoDiagramaCargaDespacho(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTotalData, listaXRecursosEnergeticosData);
                GraficoWeb graficoVarSem = UtilSemanalPR5.GraficoBarraMDyEvolucionSemanal(objFiltro.ObjFecha, listaMDVarSemanalData);
                GraficoWeb graficoMDSinExp = UtilSemanalPR5.GraficoDiagramaCargaEvolucionSemanalSinInterconexion(objFiltro.ObjFecha, listaMDSemanalSinInterconexion);

                objReporte.Tabla = dataTabla;
                objReporte.GraficoCompMD = graficoCompMD;
                objReporte.GraficoCargaDespacho = graficoCargaDespacho;
                objReporte.GraficoVarSem = graficoVarSem;
                objReporte.GraficoMDSinExp = graficoMDSinExp;

            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionMaximaDemandaTipoGeneracionSemanal(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData, out List<ResultadoTotalGeneracion> listaMDPotGenData,
                                                        out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData,
                                                        out List<MeMedicion48DTO> listaXRecursosEnergeticosData, out List<ResultadoTotalGeneracion> listaMDVarSemanalData, out List<ResultadoTotalGeneracion> listaMDSemanalSinInterconexion, objFiltro);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMDTipoGen(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTgeneracionData, listaMDPotGenData, listaInterTipoData,
                                        listaInterTotalData, listaMDTotalData, listaTgeneracion);
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoBarraComparacionMDxTgeneracion(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaTgeneracionData, listaTgeneracion);
                GraficoWeb graficoCargaDespacho = UtilSemanalPR5.GraficoDiagramaCargaDespacho(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaMDTotalData, listaXRecursosEnergeticosData);
                GraficoWeb graficoVarSem = UtilSemanalPR5.GraficoBarraMDyEvolucionSemanal(objFiltro.ObjFecha, listaMDVarSemanalData);
                GraficoWeb graficoMDSinExp = UtilSemanalPR5.GraficoDiagramaCargaEvolucionSemanalSinInterconexion(objFiltro.ObjFecha, listaMDSemanalSinInterconexion);

                objReporte.Tabla = dataTabla;
                objReporte.GraficoCompMD = graficoCompMD;
                objReporte.GraficoCargaDespacho = graficoCargaDespacho;
                objReporte.GraficoVarSem = graficoVarSem;
                objReporte.GraficoMDSinExp = graficoMDSinExp;

            }
            return objReporte;
        }

        private void GetDataVersionMaximaDemandaTipoGeneracionSemanal(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData, out List<ResultadoTotalGeneracion> listaMDPotGenData,
            out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData,
            out List<MeMedicion48DTO> listaXRecursosEnergeticosData, out List<ResultadoTotalGeneracion> listaMDVarSemanalData, out List<ResultadoTotalGeneracion> listaMDSemanalSinInterconexion, InfSGIFiltroReporte objFiltro)
        {
            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();
            listaMDTotalData = new List<ResultadoTotalGeneracion>();
            listaTgeneracion = new List<SiTipogeneracionDTO>();
            listaTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaXRecursosEnergeticosData = new List<MeMedicion48DTO>();
            listaMDVarSemanalData = new List<ResultadoTotalGeneracion>();
            listaMDSemanalSinInterconexion = new List<ResultadoTotalGeneracion>();


            int iTipoResultadoFecha = 0;
            bool Isvariacion = false;

            List<int> listaTipoResultado = new List<int>() {
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoPrecAnterior,
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnterior,
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual,
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior,
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnioAnterior, //5
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual,
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior,
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior,//8
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaPrecAnioAnterior,
            ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnteriorvsPrecedeAnterior
            };

            foreach (var objDat in listaDat.Where(x => listaTipoResultado.Contains(x.Vercnpcodi)).ToList())
            {
                switch (objDat.Vercnpcodi)
                {
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoPrecAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnioAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        Isvariacion = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                        Isvariacion = true;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaPrecAnioAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                        Isvariacion = false;
                        break;
                    case ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnteriorvsPrecedeAnterior:
                        iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                        Isvariacion = true;
                        break;
                }

                if (objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnioAnterior && objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior
                    && objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnteriorvsPrecedeAnterior)
                {
                    string[] words = objDat.Verdatvalor.Split('|');
                    DateTime FechaHora = DateTime.ParseExact(string.Format("{0} {1}", words[1], words[2]), ConstantesAppServicio.FormatoFechaFull, CultureInfo.InvariantCulture);

                    //Grafico de Despacho
                    int mediaHora = FechaHora.Hour * 2 + FechaHora.Minute / 30;
                    int HDemanda = mediaHora;

                    listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO()
                    {
                        TipoResultadoFecha = iTipoResultadoFecha,
                        SemanaFechaDesc = words[0],
                        FechaOnlyDia = words[1],
                        FechaOnlyHora = words[2],
                        FechaHora = FechaHora,
                        HDemanda = HDemanda
                    });
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    // Si es tipo de generación
                    if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)
                    {
                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words[0]))
                        {
                            decimal.TryParse(words[0], out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }

                        if (!Isvariacion)
                        {
                            DateTime FechaInicio = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                            DateTime FechaFin = DateTime.ParseExact(words[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                            DateTime FechaMD = DateTime.ParseExact(words[4], ConstantesAppServicio.FormatoFechaFull, CultureInfo.InvariantCulture);
                            listaTgeneracion.Add(new SiTipogeneracionDTO()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                Tgenernomb = words[1]
                            });

                            FiltroCeldaDato FiltroCelda = new FiltroCeldaDato()
                            {
                                FechaIni = FechaInicio,
                                FechaFin = FechaFin,
                                FechaMD = FechaMD,
                                Tgenercodi = objDatDet.Vdatdtid,
                            };
                            listaMDTgeneracionData.Add(new ResultadoTotalGeneracion()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                                FiltroCeldaDato = FiltroCelda
                            });
                        }
                        else
                        {
                            listaMDTgeneracionData.Add(new ResultadoTotalGeneracion()
                            {
                                Tgenercodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal
                            });
                        }


                    }
                    else
                    {
                        //Potencia generada en el  SEIN
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)
                        {
                            listaMDPotGenData.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                            });
                        }
                        else
                        {   ////Intercambios Internacionales
                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales)
                            {
                                listaInterTotalData.Add(new ResultadoTotalGeneracion()
                                {
                                    TipoResultadoFecha = iTipoResultadoFecha,
                                    Meditotal = objDatDet.ValorDecimal,
                                });
                            }
                            else
                            {   //Total Máxima Demanda
                                if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoValorSemanaMaximaDemanda)
                                {
                                    listaMDTotalData.Add(new ResultadoTotalGeneracion()
                                    {
                                        TipoResultadoFecha = iTipoResultadoFecha,
                                        Meditotal = objDatDet.ValorDecimal,
                                    });
                                }
                                else
                                {
                                    //Tipo de interconexion Importación, Exportación
                                    int iTptomedicodi = objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoenergiaImportada ? ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh : ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh;
                                    if (!Isvariacion)
                                    {

                                        string[] words = objDatDet.Vdatdtvalor.Split('|');
                                        if (!string.IsNullOrEmpty(words[0]))
                                        {
                                            decimal.TryParse(words[0], out decimal valorDecimal);
                                            objDatDet.ValorDecimal = valorDecimal;
                                        }

                                        DateTime FechaInicio = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                                        DateTime FechaFin = DateTime.ParseExact(words[3], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                                        DateTime FechaMD = DateTime.ParseExact(words[4], ConstantesAppServicio.FormatoFechaFull, CultureInfo.InvariantCulture);

                                        FiltroCeldaDato FiltroCelda = new FiltroCeldaDato()
                                        {
                                            FechaIni = FechaInicio,
                                            FechaFin = FechaFin,
                                            FechaMD = FechaMD,
                                            Tgenercodi = objDatDet.Vdatdtid,
                                        };


                                        listaInterTipoData.Add(new ResultadoTotalGeneracion()
                                        {
                                            Tptomedicodi = iTptomedicodi,
                                            TipoResultadoFecha = iTipoResultadoFecha,
                                            Meditotal = objDatDet.ValorDecimal,
                                            FiltroCeldaDato = FiltroCelda
                                        });
                                    }
                                    else
                                    {

                                        listaInterTipoData.Add(new ResultadoTotalGeneracion()
                                        {
                                            Tptomedicodi = iTptomedicodi,
                                            TipoResultadoFecha = iTipoResultadoFecha,
                                            Meditotal = objDatDet.ValorDecimal,
                                        });
                                    }

                                }
                            }
                        }
                    }
                }
            }
            listaTgeneracion = listaTgeneracion.DistinctBy(m => new { m.Tgenercodi, m.Tgenernomb }).ToList();

            //Datos Grafico Barras Comparacion MDxTgeneracion
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoComparacionMaximaDemanda).ToList())
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    switch (objDatDet.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior:
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior:
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioActual:
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                            break;
                    }


                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    if (!string.IsNullOrEmpty(words[0]))
                    {
                        decimal.TryParse(words[0], out decimal valorDecimal);
                        objDatDet.ValorDecimal = valorDecimal;
                    }

                    //actualizamos el color en la lista de tipo de generación                    
                    var Fenergia = listaTgeneracion.Find(x => x.Tgenercodi == objDatDet.Vdatdtid);
                    if (Fenergia != null) { Fenergia.Tgenercolor = words[2]; }

                    listaTgeneracionData.Add(new ResultadoTotalGeneracion()
                    {
                        Tgenercodi = objDatDet.Vdatdtid,
                        Medifecha = (DateTime)objDatDet.Vdatdtfecha,
                        TipoResultadoFecha = iTipoResultadoFecha,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }
            }

            //Datos Gráfico Diagrama Carga Despacho
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoCargaDespacho).ToList())
            {
                //Seleccionamos los recursos energeticos
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi && x.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal).ToList())
                {
                    MeMedicion48DTO entity = new MeMedicion48DTO();

                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    if (!string.IsNullOrEmpty(words[0]))
                    {
                        decimal.TryParse(words[0], out decimal valorDecimal);
                        objDatDet.ValorDecimal = valorDecimal;
                    }

                    entity.Meditotal = objDatDet.ValorDecimal;
                    entity.Fenergnomb = words[1];
                    entity.Fenercolor = words[2];
                    entity.Orden = Convert.ToInt32(words[3]);

                    foreach (var objDatDet2 in listaDatDetalle.Where(x => x.Verdatcodi == objDatDet.Verdatcodi && x.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha &&
                                x.Vdatdtid == objDatDet.Vdatdtid).ToList())
                    {
                        string[] words1 = objDatDet2.Vdatdtvalor.Split('|');
                        if (!string.IsNullOrEmpty(words1[0]))
                        {
                            decimal.TryParse(words1[0], out decimal valorDecimal);
                            objDatDet2.ValorDecimal = valorDecimal;
                        }
                        int j = Convert.ToInt32(words1[1]);
                        entity.GetType().GetProperty(ConstantesAppServicio.CaracterH + j).SetValue(entity, objDatDet2.ValorDecimal);
                    }
                    listaXRecursosEnergeticosData.Add(entity);
                }
            }

            //Datos Gráfico Máxima Demanda y Variación Semanal 
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoMaximaDemandaVariacionSem).ToList())
            {

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    ResultadoTotalGeneracion entity = new ResultadoTotalGeneracion();
                    entity.Meditotal = objDatDet.ValorDecimal;
                    entity.TipoResultadoFecha = objDatDet.Vdatdtid;
                    entity.Medifecha = objDatDet.Vdatdtfecha.Value;
                    listaMDVarSemanalData.Add(entity);
                }
            }

            //Datos Gráfico Máxima Demanda sin Exportación a Ecuador   
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoMdsExpEcuador).ToList())
            {

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    ResultadoTotalGeneracion entity = new ResultadoTotalGeneracion();
                    entity.Meditotal = objDatDet.ValorDecimal;
                    entity.TipoResultadoFecha = objDatDet.Vdatdtid;
                    entity.Medifecha = objDatDet.Vdatdtfecha.Value;
                    listaMDSemanalSinInterconexion.Add(entity);
                }
            }


        }

        private void CargarReporteMaximaDemandaTipoGeneracionInfSem(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData, out List<ResultadoTotalGeneracion> listaMDPotGenData,
            out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData,
            out List<MeMedicion48DTO> listaXRecursosEnergeticosData, out List<ResultadoTotalGeneracion> listaMDVarSemanalData, out List<ResultadoTotalGeneracion> listaMDSemanalSinInterconexion)
        {
            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            listaInterTipoData = new List<ResultadoTotalGeneracion>();
            listaInterTotalData = new List<ResultadoTotalGeneracion>();
            listaMDTotalData = new List<ResultadoTotalGeneracion>();
            listaTgeneracion = new List<SiTipogeneracionDTO>();
            listaTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaXRecursosEnergeticosData = new List<MeMedicion48DTO>();
            listaMDVarSemanalData = new List<ResultadoTotalGeneracion>();
            listaMDSemanalSinInterconexion = new List<ResultadoTotalGeneracion>();

            this.CargarReporteMaximaDemandaTipoGeneracion(objFecha, out listaTotalMaximaDemadaDesc, out listaMDTgeneracionData, out listaMDPotGenData,
            out listaInterTipoData, out listaInterTotalData, out listaMDTotalData, out listaTgeneracion, out listaTgeneracionData,
            out listaXRecursosEnergeticosData, out listaMDVarSemanalData, out listaMDSemanalSinInterconexion);
        }

        #region Servicio

        private void CargarReporteMaximaDemandaTipoGeneracion(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData, out List<ResultadoTotalGeneracion> listaMDPotGenData,
            out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData,
            out List<MeMedicion48DTO> listaXRecursosEnergeticosData, out List<ResultadoTotalGeneracion> listaMDVarSemanalData, out List<ResultadoTotalGeneracion> listaMDSemanalSinInterconexion)
        {
            List<MeMedicion48DTO> listaTotalDetalle48 = new List<MeMedicion48DTO>();

            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio3, fechaInicialAnio2, fechaInicialAnio1, fechaInicialAnio0;
            DateTime fechaFinalAnio2, fechaFinalAnio1, fechaFinalAnio0;

            fechaInicialAnio3 = objFecha.Anio3Ant.Fecha_01Enero;
            fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero;
            fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero;
            fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;
            fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero;

            string stranio3 = fechaInicialAnio3.Year + string.Empty;
            string stranio2 = fechaInicialAnio2.Year + string.Empty;
            string stranio1 = fechaInicialAnio1.Year + string.Empty;
            string stranio0 = fechaInicialAnio0.Year + string.Empty;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion96 y me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData);
            var listaMedicionTotal48 = objRpt.ListaMDSein48;
            var listaMedicionMDTgener48 = objRpt.ListaMDGenTgener48;
            var listaDemandaGen48 = objRpt.ListaMDGen48;
            var listaInterconexion48 = objRpt.ListaMDInterconexion48;

            listaTgeneracion = this.ListarSiTipogeneracion();

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Maxima Demanda Coincidente de Potencia por tipo de Generación (MW)

            //Ultimas semanas operativas
            DateTime fechaSem2MD48 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialSem2, fechaFinalSem2, listaMedicionTotal48);
            DateTime fechaSem1MD48 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialSem1, fechaFinalSem1, listaMedicionTotal48);
            DateTime fechaSem0MD48 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialSem0, fechaFinalSem0, listaMedicionTotal48);
            //año anterior
            DateTime fechaSem0AnioAnt48 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt, listaMedicionTotal48);
            //Máxima demanda en el periodo mes
            DateTime fechaAnio2 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialAnio2, fechaFinalAnio2, listaMedicionTotal48);
            DateTime fechaAnio1 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialAnio1, fechaFinalAnio1, listaMedicionTotal48);
            DateTime fechaAnio0 = GetDiaMaximaDemandaCargaMasiva48(fechaInicialAnio0, fechaFinalAnio0, listaMedicionTotal48);

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant, SemanaFechaDesc = objFecha.AnioAct.Rango2Ant_Num, FechaHora = fechaSem2MD48 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant, SemanaFechaDesc = objFecha.AnioAct.Rango1Ant_Num, FechaHora = fechaSem1MD48 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = objFecha.AnioAct.RangoAct_Num, FechaHora = fechaSem0MD48 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_Num, FechaHora = fechaSem0AnioAnt48 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = stranio0, FechaHora = fechaAnio0 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = stranio1, FechaHora = fechaAnio1 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = stranio2, FechaHora = fechaAnio2 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio3Ant_Acum, SemanaFechaDesc = stranio3, FechaHora = fechaInicialAnio3 });
            foreach (var reg in listaTotalMaximaDemadaDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);

                //Grafico de Despacho
                int mediaHora = reg.FechaHora.Hour * 2 + reg.FechaHora.Minute / 30;
                reg.HDemanda = mediaHora;
            }
            //Tipo de generación
            listaMDTgeneracionData = new List<ResultadoTotalGeneracion>();

            foreach (var reg in listaTgeneracion)
            {
                ResultadoTotalGeneracion regMDSem2MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaSem2MD48, PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
                ResultadoTotalGeneracion regMDSem1MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaSem1MD48, PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
                ResultadoTotalGeneracion regMDSem0MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaSem0MD48, PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regMDSem0AnioAntMD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaSem0AnioAnt48, PR5ConstanteFecha.ValorAnio1Ant_SemAct);

                ResultadoTotalGeneracion regMDSem0VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDSem0MD48, regMDSem0AnioAntMD48, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

                ResultadoTotalGeneracion regMDAnio2MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regMDAnio1MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regMDAnio0MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Tgenercodi == reg.Tgenercodi).ToList(), fechaAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);

                ResultadoTotalGeneracion regMDAnio0VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio0MD48, regMDAnio1MD48, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialSem0);
                ResultadoTotalGeneracion regMDAnio1VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio1MD48, regMDAnio2MD48, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialSem0);

                List<ResultadoTotalGeneracion> listaMDxTgen = new List<ResultadoTotalGeneracion>();
                listaMDxTgen.Add(regMDSem2MD48);
                listaMDxTgen.Add(regMDSem1MD48);
                listaMDxTgen.Add(regMDSem0MD48);
                listaMDxTgen.Add(regMDSem0AnioAntMD48);
                listaMDxTgen.Add(regMDSem0VarMD48);
                listaMDxTgen.Add(regMDAnio2MD48);
                listaMDxTgen.Add(regMDAnio1MD48);
                listaMDxTgen.Add(regMDAnio0MD48);
                listaMDxTgen.Add(regMDAnio0VarMD48);
                listaMDxTgen.Add(regMDAnio1VarMD48);

                regMDSem2MD48.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaInicialSem2, FechaFin = fechaFinalSem2, FechaMD = fechaSem2MD48 };
                regMDSem1MD48.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaInicialSem1, FechaFin = fechaFinalSem1, FechaMD = fechaSem1MD48 };
                regMDSem0MD48.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaInicialSem0, FechaFin = fechaFinalSem0, FechaMD = fechaSem0MD48 };
                regMDSem0AnioAntMD48.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaInicialSem0AnioAnt, FechaFin = fechaFinalSem0AnioAnt, FechaMD = fechaSem0AnioAnt48 };
                regMDAnio2MD48.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaInicialAnio2, FechaFin = fechaFinalAnio2, FechaMD = fechaAnio2 };
                regMDAnio1MD48.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaInicialAnio1, FechaFin = fechaFinalAnio1, FechaMD = fechaAnio1 };
                regMDAnio0MD48.FiltroCeldaDato = new FiltroCeldaDato() { FechaIni = fechaInicialAnio0, FechaFin = fechaFinalAnio0, FechaMD = fechaAnio0 };

                foreach (var regData in listaMDxTgen)
                {
                    regData.Tgenercodi = reg.Tgenercodi;
                }

                listaMDTgeneracionData.AddRange(listaMDxTgen);
            }

            //Potencia generada en el SEIN
            listaMDPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regMDPotGenSem2MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen48, fechaSem2MD48, PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regMDPotGenSem1MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen48, fechaSem1MD48, PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regMDPotGenSem0MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen48, fechaSem0MD48, PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDPotGenSem0AnioAntMD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen48, fechaSem0AnioAnt48, PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regMDPotGenSem0VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenSem0MD48, regMDPotGenSem0AnioAntMD48, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            ResultadoTotalGeneracion regMDPotGenAnio2MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen48, fechaAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio1MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen48, fechaAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio0MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen48, fechaAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);

            ResultadoTotalGeneracion regMDPotGenAnio0VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenAnio0MD48, regMDPotGenAnio1MD48, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialSem0);
            ResultadoTotalGeneracion regMDPotGenAnio1VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenAnio1MD48, regMDPotGenAnio2MD48, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialSem0);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterSem2MD48 = UtilSemanalPR5.GenerarDatosInterconexion48ReporteMDCargaMasiva(listaInterconexion48.Find(x => x.Medifecha == fechaSem2MD48.Date), fechaSem2MD48, PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaFinalSem2);
            List<ResultadoTotalGeneracion> regMDInterSem1MD48 = UtilSemanalPR5.GenerarDatosInterconexion48ReporteMDCargaMasiva(listaInterconexion48.Find(x => x.Medifecha == fechaSem1MD48.Date), fechaSem1MD48, PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaFinalSem1);
            List<ResultadoTotalGeneracion> regMDInterSem0MD48 = UtilSemanalPR5.GenerarDatosInterconexion48ReporteMDCargaMasiva(listaInterconexion48.Find(x => x.Medifecha == fechaSem0MD48.Date), fechaSem0MD48, PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaFinalSem0);
            List<ResultadoTotalGeneracion> regMDInterSem0AnioAntMD48 = UtilSemanalPR5.GenerarDatosInterconexion48ReporteMDCargaMasiva(listaInterconexion48.Find(x => x.Medifecha == fechaSem0AnioAnt48.Date), fechaSem0AnioAnt48, PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);

            List<ResultadoTotalGeneracion> regMDInterSem0VarMD48 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterSem0MD48, regMDInterSem0AnioAntMD48, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAnio2MD48 = UtilSemanalPR5.GenerarDatosInterconexion48ReporteMDCargaMasiva(listaInterconexion48.Find(x => x.Medifecha == fechaAnio2.Date), fechaAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaFinalAnio2);
            List<ResultadoTotalGeneracion> regMDInterAnio1MD48 = UtilSemanalPR5.GenerarDatosInterconexion48ReporteMDCargaMasiva(listaInterconexion48.Find(x => x.Medifecha == fechaAnio1.Date), fechaAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaFinalAnio1);
            List<ResultadoTotalGeneracion> regMDInterAnio0MD48 = UtilSemanalPR5.GenerarDatosInterconexion48ReporteMDCargaMasiva(listaInterconexion48.Find(x => x.Medifecha == fechaAnio0.Date), fechaAnio0, PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaFinalAnio0);

            List<ResultadoTotalGeneracion> regMDInterAnio0VarMD48 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio0MD48, regMDInterAnio1MD48, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialSem0);
            List<ResultadoTotalGeneracion> regMDInterAnio1VarMD48 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAnio1MD48, regMDInterAnio2MD48, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialSem0);

            ////DATA Potencia generada en el SEIN
            listaMDPotGenData.Add(regMDPotGenSem2MD48);
            listaMDPotGenData.Add(regMDPotGenSem1MD48);
            listaMDPotGenData.Add(regMDPotGenSem0MD48);
            listaMDPotGenData.Add(regMDPotGenSem0AnioAntMD48);
            listaMDPotGenData.Add(regMDPotGenSem0VarMD48);
            listaMDPotGenData.Add(regMDPotGenAnio2MD48);
            listaMDPotGenData.Add(regMDPotGenAnio1MD48);
            listaMDPotGenData.Add(regMDPotGenAnio0MD48);
            listaMDPotGenData.Add(regMDPotGenAnio0VarMD48);
            listaMDPotGenData.Add(regMDPotGenAnio1VarMD48);

            //DATA Intercambios internacionales
            listaDataInterconexion.AddRange(regMDInterSem2MD48);
            listaDataInterconexion.AddRange(regMDInterSem1MD48);
            listaDataInterconexion.AddRange(regMDInterSem0MD48);
            listaDataInterconexion.AddRange(regMDInterSem0AnioAntMD48);
            listaDataInterconexion.AddRange(regMDInterSem0VarMD48);
            listaDataInterconexion.AddRange(regMDInterAnio2MD48);
            listaDataInterconexion.AddRange(regMDInterAnio1MD48);
            listaDataInterconexion.AddRange(regMDInterAnio0MD48);
            listaDataInterconexion.AddRange(regMDInterAnio0VarMD48);
            listaDataInterconexion.AddRange(regMDInterAnio1VarMD48);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();

            //Total Máxima Demanda
            listaMDTotalData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regMDTotalSem2MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fechaSem2MD48, PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regMDTotalSem1MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fechaSem1MD48, PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regMDTotalSem0MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fechaSem0MD48, PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDTotalSem0AnioAntMD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fechaSem0AnioAnt48, PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regMDTotalSem0VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDTotalSem0MD48, regMDTotalSem0AnioAntMD48, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            ResultadoTotalGeneracion regMDTotalAnio2MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fechaAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regMDTotalAnio1MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fechaAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regMDTotalAnio0MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fechaAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);

            ResultadoTotalGeneracion regMDTotalAnio0VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDTotalAnio0MD48, regMDTotalAnio1MD48, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialSem0);
            ResultadoTotalGeneracion regMDTotalAnio1VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDTotalAnio1MD48, regMDTotalAnio2MD48, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialSem0);

            listaMDTotalData.Add(regMDTotalSem2MD48);
            listaMDTotalData.Add(regMDTotalSem1MD48);
            listaMDTotalData.Add(regMDTotalSem0MD48);
            listaMDTotalData.Add(regMDTotalSem0AnioAntMD48);
            listaMDTotalData.Add(regMDTotalSem0VarMD48);
            listaMDTotalData.Add(regMDTotalAnio2MD48);
            listaMDTotalData.Add(regMDTotalAnio1MD48);
            listaMDTotalData.Add(regMDTotalAnio0MD48);
            listaMDTotalData.Add(regMDTotalAnio0VarMD48);
            listaMDTotalData.Add(regMDTotalAnio1VarMD48);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Comparación de la maxima demanda coincidente de potencia (MW) por tipo de generación en el SEIN
            DateTime fechaAnio1AntSem0MD48 = GetDiaMaximaDemandaCargaMasiva48(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, listaMedicionTotal48);
            DateTime fechaAnio2AntSem0MD48 = GetDiaMaximaDemandaCargaMasiva48(objFecha.Anio2Ant.RangoAct_FechaIni, objFecha.Anio2Ant.RangoAct_FechaFin, listaMedicionTotal48);

            listaTgeneracionData = new List<ResultadoTotalGeneracion>();
            listaTgeneracionData.AddRange(UtilSemanalPR5.ListarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Medifecha == fechaSem0MD48.Date).ToList(), fechaSem0MD48, PR5ConstanteFecha.ValorAnioAct_SemAct));
            listaTgeneracionData.AddRange(UtilSemanalPR5.ListarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Medifecha == fechaAnio1AntSem0MD48.Date).ToList(), fechaAnio1AntSem0MD48, PR5ConstanteFecha.ValorAnio1Ant_SemAct));
            listaTgeneracionData.AddRange(UtilSemanalPR5.ListarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionMDTgener48.Where(x => x.Medifecha == fechaAnio2AntSem0MD48.Date).ToList(), fechaAnio2AntSem0MD48, PR5ConstanteFecha.ValorAnio2Ant_SemAct));

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Diagrama de carga del despacho en el día de la maxima demanda

            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string idcentral = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();
            List<MeMedicion48DTO> listaXRREE, listaXRREEctg, listaXRREEsinRER, listaProdTipCombRER, listaXRREEHidro, listaXRREEGas;
            this.ListaReportePotenciaXTipoRecursoTotal48PorLectcodi(idempresa, idcentral, idtiporecurso, fechaSem0MD48.Date, fechaSem0MD48.Date, out listaXRREE, out listaXRREEctg, out listaXRREEsinRER, out listaProdTipCombRER, out listaXRREEHidro, out listaXRREEGas, out List<string> listaMensaje, ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto, false, false);

            MeMedicion48DTO objRer = (from t in listaProdTipCombRER
                                      group t by new { t.Medifecha }
                                                            into destino
                                      select new MeMedicion48DTO()
                                      {
                                          Medifecha = destino.Key.Medifecha,
                                          H1 = destino.Sum(t => t.H1),
                                          H2 = destino.Sum(t => t.H2),
                                          H3 = destino.Sum(t => t.H3),
                                          H4 = destino.Sum(t => t.H4),
                                          H5 = destino.Sum(t => t.H5),
                                          H6 = destino.Sum(t => t.H6),
                                          H7 = destino.Sum(t => t.H7),
                                          H8 = destino.Sum(t => t.H8),
                                          H9 = destino.Sum(t => t.H9),
                                          H10 = destino.Sum(t => t.H10),

                                          H11 = destino.Sum(t => t.H11),
                                          H12 = destino.Sum(t => t.H12),
                                          H13 = destino.Sum(t => t.H13),
                                          H14 = destino.Sum(t => t.H14),
                                          H15 = destino.Sum(t => t.H15),
                                          H16 = destino.Sum(t => t.H16),
                                          H17 = destino.Sum(t => t.H17),
                                          H18 = destino.Sum(t => t.H18),
                                          H19 = destino.Sum(t => t.H19),
                                          H20 = destino.Sum(t => t.H20),

                                          H21 = destino.Sum(t => t.H21),
                                          H22 = destino.Sum(t => t.H22),
                                          H23 = destino.Sum(t => t.H23),
                                          H24 = destino.Sum(t => t.H24),
                                          H25 = destino.Sum(t => t.H25),
                                          H26 = destino.Sum(t => t.H26),
                                          H27 = destino.Sum(t => t.H27),
                                          H28 = destino.Sum(t => t.H28),
                                          H29 = destino.Sum(t => t.H29),
                                          H30 = destino.Sum(t => t.H30),

                                          H31 = destino.Sum(t => t.H31),
                                          H32 = destino.Sum(t => t.H32),
                                          H33 = destino.Sum(t => t.H33),
                                          H34 = destino.Sum(t => t.H34),
                                          H35 = destino.Sum(t => t.H35),
                                          H36 = destino.Sum(t => t.H36),
                                          H37 = destino.Sum(t => t.H37),
                                          H38 = destino.Sum(t => t.H38),
                                          H39 = destino.Sum(t => t.H39),
                                          H40 = destino.Sum(t => t.H40),

                                          H41 = destino.Sum(t => t.H41),
                                          H42 = destino.Sum(t => t.H42),
                                          H43 = destino.Sum(t => t.H43),
                                          H44 = destino.Sum(t => t.H44),
                                          H45 = destino.Sum(t => t.H45),
                                          H46 = destino.Sum(t => t.H46),
                                          H47 = destino.Sum(t => t.H47),
                                          H48 = destino.Sum(t => t.H48)
                                      }).FirstOrDefault();

            listaXRecursosEnergeticosData = new List<MeMedicion48DTO>();
            if (objRer != null)
            {
                objRer.Fenergnomb = "GENERACIÓN RER";
                objRer.Fenercolor = "#92D050";
                listaXRecursosEnergeticosData.Add(objRer);
            }

            listaXRecursosEnergeticosData.AddRange(listaXRREEsinRER);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Maxima Demanda y Variacion Semanal
            List<ResultadoTotalGeneracion> listaMDSemanal = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDVar1Semanal = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDVar2Semanal = new List<ResultadoTotalGeneracion>();

            DateTime fIniAnioActual = objFecha.AnioAct.Sem01_FechaIni;
            DateTime fIniAnio1Ant = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fIniAnio2Ant = objFecha.Anio2Ant.Sem01_FechaIni;
            int numSemanasAnio = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6);
            for (int numSemana = 1; numSemana <= numSemanasAnio; numSemana++)
            {
                DateTime fMDAnioActual = GetDiaMaximaDemandaCargaMasiva48(fIniAnioActual, fIniAnioActual.AddDays(6), listaMedicionTotal48);
                DateTime fMDAnio1Ant = GetDiaMaximaDemandaCargaMasiva48(fIniAnio1Ant, fIniAnio1Ant.AddDays(6), listaMedicionTotal48);
                DateTime fMDAnio2Ant = GetDiaMaximaDemandaCargaMasiva48(fIniAnio2Ant, fIniAnio2Ant.AddDays(6), listaMedicionTotal48);

                ResultadoTotalGeneracion regMDAnioActual = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regMDAnio1Ant = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regMDAnio2Ant = new ResultadoTotalGeneracion();

                if (numSemana == 53)
                {
                    regMDAnioActual = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnioActual, PR5ConstanteFecha.ValorAnioAct_SemAct) : null;
                    regMDAnio1Ant = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.Anio1Ant.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct) : null;
                    regMDAnio2Ant = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.Anio2Ant.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio2Ant, PR5ConstanteFecha.ValorAnio2Ant_SemAct) : null;

                }
                else
                {
                    regMDAnioActual = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnioActual, PR5ConstanteFecha.ValorAnioAct_SemAct);
                    regMDAnio1Ant = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                    regMDAnio2Ant = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio2Ant, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                }

                if (regMDAnioActual != null)
                {
                    regMDAnioActual.Medifecha = fIniAnioActual;
                    regMDAnioActual.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                    regMDAnioActual.Meditotal = regMDAnioActual.Meditotal.GetValueOrDefault(0) > 0 ? regMDAnioActual.Meditotal : null;
                }

                if (numSemana > objFecha.AnioAct.Max_Num_Sem) regMDAnioActual = null;
                if (regMDAnioActual != null) listaMDSemanal.Add(regMDAnioActual);
                if (regMDAnioActual != null && regMDAnio1Ant != null) listaMDVar1Semanal.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnioActual, regMDAnio1Ant, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fIniAnioActual));
                if (regMDAnio1Ant != null && regMDAnio2Ant != null) listaMDVar2Semanal.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDAnio1Ant, regMDAnio2Ant, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fIniAnioActual));

                fIniAnioActual = fIniAnioActual.AddDays(7);
                fIniAnio1Ant = fIniAnio1Ant.AddDays(7);
                fIniAnio2Ant = fIniAnio2Ant.AddDays(7);
            }

            listaMDVarSemanalData = new List<ResultadoTotalGeneracion>();
            listaMDVarSemanalData.AddRange(listaMDSemanal);
            listaMDVarSemanalData.AddRange(listaMDVar1Semanal);
            listaMDVarSemanalData.AddRange(listaMDVar2Semanal);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Maxima Demanda sin exportación a Ecuador
            List<ResultadoTotalGeneracion> listaMDSemanalSinEcuActual = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDSemanalSinEcu1Ant = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDSemanalSinEcu2Ant = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaMDSemanalSinEcu3Ant = new List<ResultadoTotalGeneracion>();

            fIniAnioActual = objFecha.AnioAct.Sem01_FechaIni;
            fIniAnio1Ant = objFecha.Anio1Ant.Sem01_FechaIni;
            fIniAnio2Ant = objFecha.Anio2Ant.Sem01_FechaIni;
            DateTime fIniAnio3Ant = objFecha.Anio3Ant.Sem01_FechaIni;
            for (int numSemana = 1; numSemana <= 53; numSemana++)
            {
                if (numSemana == 37)
                { }
                DateTime fMDAnioActual = GetDiaMaximaDemandaCargaMasiva48(fIniAnioActual, fIniAnioActual.AddDays(6), listaDemandaGen48);
                DateTime fMDAnio1Ant = GetDiaMaximaDemandaCargaMasiva48(fIniAnio1Ant, fIniAnio1Ant.AddDays(6), listaDemandaGen48);
                DateTime fMDAnio2Ant = GetDiaMaximaDemandaCargaMasiva48(fIniAnio2Ant, fIniAnio2Ant.AddDays(6), listaDemandaGen48);
                DateTime fMDAnio3Ant = GetDiaMaximaDemandaCargaMasiva48(fIniAnio3Ant, fIniAnio3Ant.AddDays(6), listaDemandaGen48);

                ResultadoTotalGeneracion regMDAnioActual = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regMDAnio1Ant = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regMDAnio2Ant = new ResultadoTotalGeneracion();
                ResultadoTotalGeneracion regMDAnio3Ant = new ResultadoTotalGeneracion();

                if (numSemana == 53)
                {
                    regMDAnioActual = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnioActual, PR5ConstanteFecha.ValorAnioAct_SemAct) : null;
                    regMDAnio1Ant = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.Anio1Ant.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct) : null;
                    regMDAnio2Ant = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.Anio2Ant.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio2Ant, PR5ConstanteFecha.ValorAnio2Ant_SemAct) : null;
                    regMDAnio3Ant = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.Anio3Ant.Sem01_FechaIni).Item2, 6) == 53 ? UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio3Ant, PR5ConstanteFecha.ValorAnio3Ant_SemAct) : null;
                }
                else
                {
                    regMDAnioActual = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnioActual, PR5ConstanteFecha.ValorAnioAct_SemAct);
                    regMDAnio1Ant = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                    regMDAnio2Ant = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio2Ant, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                    regMDAnio3Ant = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaMedicionTotal48, fMDAnio3Ant, PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                }

                if (regMDAnioActual != null) regMDAnioActual.Medifecha = fIniAnioActual.Date;
                if (regMDAnio1Ant != null) regMDAnio1Ant.Medifecha = fIniAnioActual.Date;
                if (regMDAnio2Ant != null) regMDAnio2Ant.Medifecha = fIniAnioActual.Date;
                if (regMDAnio3Ant != null) regMDAnio3Ant.Medifecha = fIniAnioActual.Date;

                if (regMDAnioActual != null) regMDAnioActual.Meditotal = regMDAnioActual.Meditotal.GetValueOrDefault(0) > 0 ? regMDAnioActual.Meditotal : null;

                if (regMDAnioActual != null) listaMDSemanalSinEcuActual.Add(regMDAnioActual);
                if (regMDAnio1Ant != null) listaMDSemanalSinEcu1Ant.Add(regMDAnio1Ant);
                if (regMDAnio2Ant != null) listaMDSemanalSinEcu2Ant.Add(regMDAnio2Ant);
                if (regMDAnio3Ant != null) listaMDSemanalSinEcu3Ant.Add(regMDAnio3Ant);

                fIniAnioActual = fIniAnioActual.AddDays(7);
                fIniAnio1Ant = fIniAnio1Ant.AddDays(7);
                fIniAnio2Ant = fIniAnio2Ant.AddDays(7);
                fIniAnio3Ant = fIniAnio3Ant.AddDays(7);
            }

            listaMDSemanalSinInterconexion = new List<ResultadoTotalGeneracion>();
            listaMDSemanalSinInterconexion.AddRange(listaMDSemanalSinEcuActual);
            listaMDSemanalSinInterconexion.AddRange(listaMDSemanalSinEcu1Ant);
            listaMDSemanalSinInterconexion.AddRange(listaMDSemanalSinEcu2Ant);
            listaMDSemanalSinInterconexion.AddRange(listaMDSemanalSinEcu3Ant);
        }

        #endregion

        #endregion

        #region C.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)

        /// <summary>
        /// ListarDataVersionMaximaDemandaXEmpresaSemanalInfSem
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionMaximaDemandaXEmpresaSemanalInfSem(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarMaximaDemandaXEmpresaSemanalInfSem(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = ListarItemFromSiMenureporte();
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompMD;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionMaximaDemandaXEmpresaSemanal(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                    out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal, objFiltro);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = ListarItemFromSiMenureporte();
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompMD;
            }
            return objReporte;
        }

        /// <summary>
        /// GetDataVersionMaximaDemandaXEmpresaSemanal
        /// </summary>
        /// <param name="listaDat"></param>
        /// <param name="listaDatDetalle"></param>
        /// <param name="listaMDCoincidenteDataDesc"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaReporteXEmpresa"></param>
        /// <param name="listaReporteXTotal"></param>
        /// <param name="objFiltro"></param>
        public void GetDataVersionMaximaDemandaXEmpresaSemanal(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                        out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal, InfSGIFiltroReporte objFiltro)
        {

            List<MaximaDemandaDTO> listaMDCoincidenteDataDescAux = new List<MaximaDemandaDTO>();
            List<SiEmpresaDTO> listaEmpresaAux = new List<SiEmpresaDTO>();
            List<ResultadoTotalGeneracion> listaReporteXEmpresaAux = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaReporteXTotalAux = new List<ResultadoTotalGeneracion>();

            int i = 0;
            foreach (var objDat in listaDat)
            {
                int iTipoResultadoFecha = 0;
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                    listaMDCoincidenteDataDescAux.Add(new MaximaDemandaDTO()
                    {
                        TipoResultadoFecha = iTipoResultadoFecha,
                        FechaOnlyDia = objDat.Verdatvalor,
                        FechaOnlyHora = objDat.Verdatvalor2
                    });
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior)
                {
                    iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                    listaMDCoincidenteDataDescAux.Add(new MaximaDemandaDTO()
                    {
                        TipoResultadoFecha = iTipoResultadoFecha,
                        FechaOnlyDia = objDat.Verdatvalor,
                        FechaOnlyHora = objDat.Verdatvalor2
                    });

                }


                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    if (objDat.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacion) // SI no es variación
                    {
                        if (objDatDet.Vercnpcodi != ConstantesConceptoVersion.ConceptoTotal)// Si no es total
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }

                            string sFechaMD = string.Format("{0} {1}", objDat.Verdatvalor, objDat.Verdatvalor2);
                            DateTime fechaMaxD = DateTime.ParseExact(sFechaMD, ConstantesAppServicio.FormatoFechaFull, CultureInfo.InvariantCulture);

                            FiltroCeldaDato celdaDato = new FiltroCeldaDato()
                            {
                                FechaIni = objFiltro.ObjFecha.AnioAct.RangoAct_FechaIni,
                                FechaFin = objFiltro.ObjFecha.AnioAct.RangoAct_FechaFin,
                                FechaMD = fechaMaxD,
                            };
                            listaReporteXEmpresaAux.Add(new ResultadoTotalGeneracion()
                            {
                                Emprcodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                                Emprnomb = words[1],
                                FiltroCeldaDato = celdaDato

                            });
                            if (i == 0)
                            {
                                listaEmpresaAux.Add(new SiEmpresaDTO()
                                {
                                    Emprcodi = objDatDet.Vdatdtid,
                                    Emprnomb = words[1]
                                });
                            }
                        }
                        else // Totales
                        {
                            listaReporteXTotalAux.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = iTipoResultadoFecha,
                                Meditotal = objDatDet.ValorDecimal,
                            });
                        }

                    }
                    else // si es variación
                    {
                        if (objDatDet.Vercnpcodi != ConstantesConceptoVersion.ConceptoTotal)// Si no es total
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }
                            listaReporteXEmpresaAux.Add(new ResultadoTotalGeneracion()
                            {
                                Emprcodi = objDatDet.Vdatdtid,
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var,
                                Meditotal = objDatDet.ValorDecimal,
                                Emprnomb = words[1]

                            });
                        }
                        else // Totales
                        {
                            listaReporteXTotalAux.Add(new ResultadoTotalGeneracion()
                            {
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var,
                                Meditotal = objDatDet.ValorDecimal,
                            });
                        }
                    }
                }
                i++;
            }
            listaMDCoincidenteDataDesc = listaMDCoincidenteDataDescAux;
            listaEmpresa = listaEmpresaAux;
            listaReporteXEmpresa = listaReporteXEmpresaAux;
            listaReporteXTotal = listaReporteXTotalAux;
        }

        /// <summary>
        /// ListarDataVersionMaximaDemandaXEmpresaSemanalEjecSem
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionMaximaDemandaXEmpresaSemanalEjecSem(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarMaximaDemandaXEmpresaSemanalEjecSem(objFiltro.ObjFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = ListarItemFromSiMenureporte();
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompMD;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();
                GetDataVersionMaximaDemandaXEmpresaSemanal(listaDat, listaDatDetalle, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
                        out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal, objFiltro);

                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaMDCoincidenteDataDesc, listaEmpresa, listaReporteXEmpresa, listaReporteXTotal);
                dataTabla.ListaItem = ListarItemFromSiMenureporte();
                GraficoWeb graficoCompMD = UtilSemanalPR5.GraficoMaximaDemandaXEmpresaSemanal(objFiltro.ObjFecha, listaEmpresa, listaReporteXEmpresa);

                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoCompMD;

            }
            return objReporte;
        }

        private void GenerarExcelCargarMaximaDemandaXEmpresaSemanal(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;

            int finalPosTabla = 0;
            TablaReporte dataTabla;
            GraficoWeb graficoCompMD;

            InfSGIReporteVersionado objReporte = this.ListarDataVersionMaximaDemandaXEmpresaSemanalInfSem(objFiltro);

            // Output
            dataTabla = objReporte.Tabla;
            dataTabla.ListaItem = ListarItemFromSiMenureporte();
            graficoCompMD = objReporte.Grafico;

            //LISTADO
            UtilSemanalPR5.ListarGrafMaximaDemandaXEmpresaSemanal(ws, objFecha, dataTabla, ref finalPosTabla);

            // GRAFICO1
            UtilSemanalPR5.GenerarGraficoCharExcellMaximaDemandaXEmpresaSemanal(ws, graficoCompMD, ref finalPosTabla);
        }

        private void CargarMaximaDemandaXEmpresaSemanalInfSem(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
            out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal)
        {
            this.CargarMaximaDemandaXEmpresaSemanal(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc2, out List<SiEmpresaDTO> listaEmpresa2,
            out List<ResultadoTotalGeneracion> listaReporteXEmpresa2, out List<ResultadoTotalGeneracion> listaReporteXTotal2);
            listaMDCoincidenteDataDesc = listaMDCoincidenteDataDesc2;
            listaEmpresa = listaEmpresa2;
            listaReporteXEmpresa = listaReporteXEmpresa2;
            listaReporteXTotal = listaReporteXTotal2;
        }

        private void CargarMaximaDemandaXEmpresaSemanalEjecSem(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
            out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal)
        {
            this.CargarMaximaDemandaXEmpresaSemanal(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc2, out List<SiEmpresaDTO> listaEmpresa2,
            out List<ResultadoTotalGeneracion> listaReporteXEmpresa2, out List<ResultadoTotalGeneracion> listaReporteXTotal2);
            listaMDCoincidenteDataDesc = listaMDCoincidenteDataDesc2;
            listaEmpresa = listaEmpresa2;
            listaReporteXEmpresa = listaReporteXEmpresa2;
            listaReporteXTotal = listaReporteXTotal2;
        }

        #region Servicio

        private void CargarMaximaDemandaXEmpresaSemanal(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<SiEmpresaDTO> listaEmpresa,
            out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal)
        {
            //Obtener data de Medición 48
            string idempresa = ConstantesAppServicio.ParametroDefecto.ToString();
            string tiposGeneracion = ConstantesAppServicio.ParametroDefecto.ToString();
            string idtiporecurso = ConstantesMedicion.IdTipoRecursoTodos.ToString();

            InfSGIResumenProd objRpt1 = GetResumenGeneracion48CargaMasiva(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
            InfSGIResumenProd objRpt2 = GetResumenGeneracion48CargaMasiva(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);

            //Data Generación
            List<MeMedicion48DTO> listaDemandaGen = new List<MeMedicion48DTO>();
            listaDemandaGen.AddRange(objRpt1.ListaMDGen48);
            listaDemandaGen.AddRange(objRpt2.ListaMDGen48);

            //Parametros para calculo de MD
            DateTime fechaSemMDAct = GetDiaMaximaDemandaCargaMasiva48(objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin, objRpt1.ListaMDSein48);
            DateTime fechaSemMD1Ant = GetDiaMaximaDemandaCargaMasiva48(objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin, objRpt2.ListaMDSein48);

            listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, FechaHora = fechaSemMDAct });
            listaMDCoincidenteDataDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, FechaHora = fechaSemMD1Ant });
            foreach (var reg in listaMDCoincidenteDataDesc)
            {
                reg.FechaOnlyDia = reg.FechaHora.ToString(ConstantesAppServicio.FormatoFecha);
                reg.FechaOnlyHora = reg.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Consulta el histórico de relación entre los ptos de medición y las empresas
            //List<SiHisempptoDataDTO> listaHist = this.servTitEmp.ListSiHisempptoDatas().Where(x => x.Hptdatfecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList();

            List<MeMedicion48DTO> list = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listSemAct = this.servEjec.ListaDataMDGeneracionConsolidado48(fechaSemMDAct.Date, fechaSemMDAct.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false, Int32.Parse(ConstantesAppServicio.LectcodiEjecutadoHisto));
            List<MeMedicion48DTO> listSem1Ant = this.servEjec.ListaDataMDGeneracionConsolidado48(fechaSemMD1Ant.Date, fechaSemMD1Ant.Date, ConstantesMedicion.IdTipogrupoCOES, tiposGeneracion, idempresa, ConstanteValidacion.EstadoTodos, idtiporecurso, false, Int32.Parse(ConstantesAppServicio.LectcodiEjecutadoHisto));
            list.AddRange(listSemAct);
            list.AddRange(listSem1Ant);

            //Data de M48 con TTIE
            List<MeMedicion48DTO> listaAnioAct_SemAct = list.Where(x => x.Medifecha == fechaSemMDAct.Date).ToList();
            List<MeMedicion48DTO> listaAnio1Ant_SemAct = list.Where(x => x.Medifecha == fechaSemMD1Ant.Date).ToList();

            listaAnioAct_SemAct = UtilSemanalPR5.AgruparListaM48XEmpresa(listaAnioAct_SemAct);
            listaAnio1Ant_SemAct = UtilSemanalPR5.AgruparListaM48XEmpresa(listaAnio1Ant_SemAct);

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Lista de empresas
            List<MeMedicion48DTO> lData = listaAnioAct_SemAct;
            lData.AddRange(listaAnio1Ant_SemAct);
            List<SiEmpresaDTO> listaEmpresaBD = ListarEmpresasXID(lData.Select(x => x.Emprcodi).Distinct().ToList());
            listaEmpresa = UtilAnexoAPR5.ListarEmpresaFromM48(lData, listaEmpresaBD);

            //Data reporte x empresa
            listaReporteXEmpresa = new List<ResultadoTotalGeneracion>();
            foreach (var reg in listaEmpresa)
            {
                List<ResultadoTotalGeneracion> listaMDxEmp = new List<ResultadoTotalGeneracion>();

                ResultadoTotalGeneracion regMDSem0AnioActMD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFecha(listaAnioAct_SemAct.Where(x => x.Emprcodi == reg.Emprcodi).ToList(), fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni, objFecha.AnioAct.RangoAct_FechaFin);
                ResultadoTotalGeneracion regMDSem0Anio1AntMD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFecha(listaAnio1Ant_SemAct.Where(x => x.Emprcodi == reg.Emprcodi).ToList(), fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni, objFecha.Anio1Ant.RangoAct_FechaFin);
                ResultadoTotalGeneracion regMDSem0VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDSem0AnioActMD48, regMDSem0Anio1AntMD48, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

                listaMDxEmp.Add(regMDSem0AnioActMD48);
                listaMDxEmp.Add(regMDSem0Anio1AntMD48);
                listaMDxEmp.Add(regMDSem0VarMD48);

                foreach (var regData in listaMDxEmp)
                {
                    regData.Emprcodi = reg.Emprcodi;
                    regData.Emprnomb = reg.Emprnomb;
                }

                listaReporteXEmpresa.AddRange(listaMDxEmp);
            }

            //Data reporte total potencia generada en el SEIN
            ResultadoTotalGeneracion regMDPotGenSem0MD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen, fechaSemMDAct, PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDPotGenSem0AnioAntMD48 = UtilSemanalPR5.GenerarM48ValorMDFromListaByFechaCargaMasiva(listaDemandaGen, fechaSemMD1Ant, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regMDPotGenSem0VarMD48 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenSem0MD48, regMDPotGenSem0AnioAntMD48, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaSemMDAct);

            listaReporteXTotal = new List<ResultadoTotalGeneracion>();
            listaReporteXTotal.Add(regMDPotGenSem0MD48);
            listaReporteXTotal.Add(regMDPotGenSem0AnioAntMD48);
            listaReporteXTotal.Add(regMDPotGenSem0VarMD48);

            //Lista de empresas ordenada
            listaEmpresa = UtilSemanalPR5.ListarEmpresaFromResultadoTotalGeneracion(listaReporteXEmpresa.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).OrderByDescending(x => x.Meditotal).ToList());
        }

        #endregion

        #endregion

        #region C.3. EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)

        private void GenerarExcelCargarDemandaXAreaOpeSemanal(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int tipoDoc = objFecha.TipoReporte;
            int finalPosTabla = 0;

            TablaReporte dataTabla;
            GraficoWeb graficoCompMDXArea, graficoVarXAreas;

            InfSGIReporteVersionado objReporte = ListarDataEvolucionDemandaXAreaOperativaSEIN(objFiltro);

            dataTabla = objReporte.Tabla;
            dataTabla.ListaItem = ListarItemFromSiMenureporte();

            graficoCompMDXArea = objReporte.GraficoCompMD;

            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal)
            {
                graficoVarXAreas = objReporte.GraficoCargaDespacho;
            }
            else // Ejecutivo Semanal
            {
                graficoVarXAreas = objReporte.GraficoVarSem;
            }

            //LISTADO
            UtilSemanalPR5.ListarReporteDemandaXAreaOpSemanal(ws, objFecha, dataTabla, ref finalPosTabla);

            // GRAFICO1
            UtilSemanalPR5.GenerarGraficoCharExcellBarraComparacionDemandaXAreaOpe(ws, graficoCompMDXArea, ref finalPosTabla);

            //Grafico2
            UtilSemanalPR5.GenerarGraficoCharExcellDemandaVariacionEvoSemanalAcumXAreaOpe(ws, graficoVarXAreas, ref finalPosTabla);

        }

        #region Servicio

        private void CargarReporteDataEvolucionDemandaXAreaOperativaSEIN(FechasPR5 objFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompMDXArea, out GraficoWeb graficoVarXAreas1Anio, out GraficoWeb graficoVarXAreas2Anio)
        {
            //Lista de areas
            List<MeReporptomedDTO> listaArea = servFormatoRep.GetListaAreaOperativa();

            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;
            DateTime fechaInicialSem0Anio2Ant = objFecha.Anio2Ant.RangoAct_FechaIni, fechaFinalSem0Anio2Ant = objFecha.Anio2Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            string stranio2 = fechaInicialAnio2.Year + string.Empty;
            string stranio1 = fechaInicialAnio1.Year + string.Empty;
            string stranio0 = fechaInicialAnio0.Year + string.Empty;

            List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant, SemanaFechaDesc = objFecha.AnioAct.Rango2Ant_Num, FechaHora = fechaInicialSem2 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant, SemanaFechaDesc = objFecha.AnioAct.Rango1Ant_Num, FechaHora = fechaInicialSem1 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = objFecha.AnioAct.RangoAct_Num, FechaHora = fechaInicialSem0 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_Num, FechaHora = fechaInicialSem0AnioAnt });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = stranio0, FechaHora = fechaInicialAnio0 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = stranio1, FechaHora = fechaInicialAnio1 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = stranio2, FechaHora = fechaInicialAnio2 });

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData);
            var listaDemandaGen48 = objRpt.ListaTotalGen48;
            var listaInterconexion48 = objRpt.ListaTotalInterconexion48;
            var listaMedicionTotal48 = objRpt.ListaTotalSein48;
            var listCon48XAreaSinInter = objRpt.ListaTotalGenArea48;

            //Área operativaValorAnio2Ant_SemAct
            List<ResultadoTotalGeneracion> listaDemandaXAreaData = new List<ResultadoTotalGeneracion>();

            foreach (var reg in listaArea)
            {
                ResultadoTotalGeneracion regProdGenXAreaSem2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem2 && x.Medifecha <= fechaFinalSem2 && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaInicialSem2, fechaFinalSem2);
                ResultadoTotalGeneracion regProdGenXAreaSem1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1 && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaInicialSem1, fechaFinalSem1);
                ResultadoTotalGeneracion regProdGenXAreaSem0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaFinalSem0);

                ResultadoTotalGeneracion regProdGenXAreaSem0Anio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);
                ResultadoTotalGeneracion regProdGenXAreaSem0Var = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenXAreaSem0, regProdGenXAreaSem0Anio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

                ResultadoTotalGeneracion regProdGenXAreaSem0Anio2Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem0Anio2Ant && x.Medifecha <= fechaFinalSem0Anio2Ant && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialSem0Anio2Ant, fechaInicialSem0Anio2Ant, fechaFinalSem0Anio2Ant);

                ResultadoTotalGeneracion regProdGenXAreaAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenXAreaAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenXAreaAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenXAreaAcum1, regProdGenXAreaAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenXAreaAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaFinalAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenXAreaAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenXAreaAcum1, regProdGenXAreaAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaGenXArea = new List<ResultadoTotalGeneracion>();
                listaGenXArea.Add(regProdGenXAreaSem2);
                listaGenXArea.Add(regProdGenXAreaSem1);
                listaGenXArea.Add(regProdGenXAreaSem0);

                listaGenXArea.Add(regProdGenXAreaSem0Anio1Ant);
                listaGenXArea.Add(regProdGenXAreaSem0Var);

                listaGenXArea.Add(regProdGenXAreaSem0Anio2Ant);

                listaGenXArea.Add(regProdGenXAreaAcum0);
                listaGenXArea.Add(regProdGenXAreaAcum1);
                listaGenXArea.Add(regProdGenXAreaAcumVarAnio0);

                listaGenXArea.Add(regProdGenXAreaAcum2);
                listaGenXArea.Add(regProdGenXAreaAcumVarAnio1);

                foreach (var regData in listaGenXArea)
                {
                    regData.Ptomedicodi = reg.Ptomedicodi;
                    regData.Ptomedibarranomb = reg.Ptomedibarranomb;
                }

                listaDemandaXAreaData.AddRange(listaGenXArea);
            }

            //Demanda de Energía del SEIN
            List<ResultadoTotalGeneracion> listaPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regMDPotGenSem2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialSem2 && x.Medifecha <= fechaFinalSem2).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaInicialSem2, fechaFinalSem2);
            ResultadoTotalGeneracion regMDPotGenSem1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaInicialSem1, fechaFinalSem1);
            ResultadoTotalGeneracion regMDPotGenSem0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaFinalSem0);

            ResultadoTotalGeneracion regMDPotGenSem0AnioAnt = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);
            ResultadoTotalGeneracion regMDPotGenSem0Var = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenSem0, regMDPotGenSem0AnioAnt, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum1, regProdGenAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaPotGenData.Add(regMDPotGenSem2);
            listaPotGenData.Add(regMDPotGenSem1);
            listaPotGenData.Add(regMDPotGenSem0);

            listaPotGenData.Add(regMDPotGenSem0AnioAnt);
            listaPotGenData.Add(regMDPotGenSem0Var);

            listaPotGenData.Add(regProdGenAcum0);
            listaPotGenData.Add(regProdGenAcum1);
            listaPotGenData.Add(regProdGenAcumVarAnio0);

            listaPotGenData.Add(regProdGenAcum2);
            listaPotGenData.Add(regProdGenAcumVarAnio1);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterSem2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialSem2 && x.Medifecha <= fechaFinalSem2).ToList(), fechaInicialSem2, fechaFinalSem2, PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            List<ResultadoTotalGeneracion> regMDInterSem1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1).ToList(), fechaInicialSem1, fechaFinalSem1, PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            List<ResultadoTotalGeneracion> regMDInterSem0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), fechaInicialSem0, fechaFinalSem0, PR5ConstanteFecha.ValorAnioAct_SemAct);

            List<ResultadoTotalGeneracion> regMDInterSem0AnioAnt = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt).ToList(), fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterSem0Var = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterSem0, regMDInterSem0AnioAnt, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAcum0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio0, fechaFinalAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcum1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio1, fechaFinalAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum0, regMDInterAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            List<ResultadoTotalGeneracion> regMDInterAcum2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio2, fechaFinalAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum1, regMDInterAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaDataInterconexion.AddRange(regMDInterSem2);
            listaDataInterconexion.AddRange(regMDInterSem1);
            listaDataInterconexion.AddRange(regMDInterSem0);

            listaDataInterconexion.AddRange(regMDInterSem0AnioAnt);
            listaDataInterconexion.AddRange(regMDInterSem0Var);

            listaDataInterconexion.AddRange(regMDInterAcum0);
            listaDataInterconexion.AddRange(regMDInterAcum1);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum2);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio1);

            List<ResultadoTotalGeneracion> listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            List<ResultadoTotalGeneracion> listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();

            //Total Demanda del SEIN
            List<ResultadoTotalGeneracion> listaPotGenTotalData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regPotGenTotalSem2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialSem2 && x.Medifecha <= fechaFinalSem2).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaInicialSem2, fechaFinalSem2);
            ResultadoTotalGeneracion regPotGenTotalSem1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaInicialSem1, fechaFinalSem1);
            ResultadoTotalGeneracion regPotGenTotalSem0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaFinalSem0);

            ResultadoTotalGeneracion regPotGenTotalSem0AnioAnt = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);
            ResultadoTotalGeneracion regPotGenTotalSem0Var = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regPotGenTotalSem0, regPotGenTotalSem0AnioAnt, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            ResultadoTotalGeneracion regPotGenTotalAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regPotGenTotalAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regPotGenTotalAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regPotGenTotalAcum0, regPotGenTotalAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regPotGenTotalAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regPotGenTotalAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regPotGenTotalAcum1, regPotGenTotalAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaPotGenTotalData.Add(regPotGenTotalSem2);
            listaPotGenTotalData.Add(regPotGenTotalSem1);
            listaPotGenTotalData.Add(regPotGenTotalSem0);

            listaPotGenTotalData.Add(regPotGenTotalSem0AnioAnt);
            listaPotGenTotalData.Add(regPotGenTotalSem0Var);

            listaPotGenTotalData.Add(regPotGenTotalAcum0);
            listaPotGenTotalData.Add(regPotGenTotalAcum1);
            listaPotGenTotalData.Add(regPotGenTotalAcumVarAnio0);

            listaPotGenTotalData.Add(regPotGenTotalAcum2);
            listaPotGenTotalData.Add(regPotGenTotalAcumVarAnio1);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Evolución semanal de la producción de energía y comparaación de la variación semanal para los años 2015,2016,2017 
            List<ResultadoTotalGeneracion> listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();

            DateTime fIniAnioActual = objFecha.AnioAct.Sem01_FechaIni;
            DateTime fIniAnio1Ant = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fIniAnio2Ant = objFecha.Anio2Ant.Sem01_FechaIni;
            int numSemanasAnio = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6);
            for (int numSemana = 1; numSemana <= numSemanasAnio; numSemana++)
            {
                foreach (var reg in listaArea)
                {
                    ResultadoTotalGeneracion regEvoSemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fIniAnioActual && x.Medifecha <= fIniAnioActual.AddDays(6) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fIniAnioActual, fIniAnioActual, fIniAnioActual.AddDays(6));
                    ResultadoTotalGeneracion regEvoSemActAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fIniAnio1Ant && x.Medifecha <= fIniAnio1Ant.AddDays(6) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fIniAnioActual, fIniAnio1Ant, fIniAnio1Ant.AddDays(6));
                    ResultadoTotalGeneracion regEvoSemActAnio2Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fIniAnio2Ant && x.Medifecha <= fIniAnio2Ant.AddDays(6) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fIniAnioActual, fIniAnio2Ant, fIniAnio2Ant.AddDays(6));

                    if (numSemana > objFecha.AnioAct.Max_Num_Sem) regEvoSemAct = null;

                    List<ResultadoTotalGeneracion> listaEvoXArea = new List<ResultadoTotalGeneracion>();
                    if (regEvoSemAct != null && regEvoSemActAnio1Ant != null) listaEvoXArea.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEvoSemAct, regEvoSemActAnio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fIniAnioActual));
                    if (regEvoSemActAnio1Ant != null && regEvoSemActAnio2Ant != null) listaEvoXArea.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEvoSemActAnio1Ant, regEvoSemActAnio2Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fIniAnio1Ant));

                    foreach (var regData in listaEvoXArea)
                    {
                        regData.Ptomedicodi = reg.Ptomedicodi;
                        regData.Ptomedibarranomb = reg.Ptomedibarranomb;
                    }

                    listaEvolucionSemanal.AddRange(listaEvoXArea);
                }

                fIniAnioActual = fIniAnioActual.AddDays(7);
                fIniAnio1Ant = fIniAnio1Ant.AddDays(7);
                fIniAnio2Ant = fIniAnio2Ant.AddDays(7);
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Output
            dataTabla = UtilSemanalPR5.ObtenerDataTablaMDAreaOperativa(objFecha, listaTotalMaximaDemadaDesc, listaDemandaXAreaData, listaPotGenData, listaPotGenTotalData,
                                                            listaInterTipoData, listaInterTotalData, listaArea);
            dataTabla.ListaItem = ListarItemFromSiMenureporte();
            graficoCompMDXArea = UtilSemanalPR5.GraficoBarraComparacionDemandaXAreaOp(objFecha, listaTotalMaximaDemadaDesc, listaDemandaXAreaData, listaArea);
            graficoVarXAreas1Anio = UtilSemanalPR5.GraficoBarraDemandaVariacionEvoSemanalAcumXAreaOp(objFecha, listaTotalMaximaDemadaDesc, listaEvolucionSemanal, listaArea);
            graficoVarXAreas2Anio = UtilSemanalPR5.GraficoBarraDemandaVariacionEvoSemanalAcumXAreaOp2Anio(objFecha, listaTotalMaximaDemadaDesc, listaEvolucionSemanal, listaArea);
        }

        private void ListarDataEvolucionDemandaXAreaOperativaSEIN(FechasPR5 objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaDemandaXAreaData,
            out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaPotGenTotalData, out List<ResultadoTotalGeneracion> listaInterTipoData
            , out List<ResultadoTotalGeneracion> listaInterTotalData, out List<MeReporptomedDTO> listaArea, out List<ResultadoTotalGeneracion> listaEvolucionSemanal)
        {
            //Lista de areas
            listaArea = servFormatoRep.GetListaAreaOperativa();

            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;
            DateTime fechaInicialSem0Anio2Ant = objFecha.Anio2Ant.RangoAct_FechaIni, fechaFinalSem0Anio2Ant = objFecha.Anio2Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            string stranio2 = fechaInicialAnio2.Year + string.Empty;
            string stranio1 = fechaInicialAnio1.Year + string.Empty;
            string stranio0 = fechaInicialAnio0.Year + string.Empty;

            listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant, SemanaFechaDesc = objFecha.AnioAct.Rango2Ant_Num, FechaHora = fechaInicialSem2 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant, SemanaFechaDesc = objFecha.AnioAct.Rango1Ant_Num, FechaHora = fechaInicialSem1 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = objFecha.AnioAct.RangoAct_Num, FechaHora = fechaInicialSem0 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_Num, FechaHora = fechaInicialSem0AnioAnt });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = stranio0, FechaHora = fechaInicialAnio0 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = stranio1, FechaHora = fechaInicialAnio1 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = stranio2, FechaHora = fechaInicialAnio2 });

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion48

            DateTime fechaIniData = objFecha.Anio3Ant.Sem01_FechaIni;
            DateTime fechaFinData = objFecha.AnioAct.RangoAct_FechaFin;

            //Data Generación
            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaIniData, fechaFinData);
            var listaDemandaGen48 = objRpt.ListaTotalGen48;
            var listaInterconexion48 = objRpt.ListaTotalInterconexion48;
            var listaMedicionTotal48 = objRpt.ListaTotalSein48;
            var listCon48XAreaSinInter = objRpt.ListaTotalGenArea48;

            //Área operativaValorAnio2Ant_SemAct
            listaDemandaXAreaData = new List<ResultadoTotalGeneracion>();

            foreach (var reg in listaArea)
            {
                ResultadoTotalGeneracion regProdGenXAreaSem2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem2 && x.Medifecha <= fechaFinalSem2 && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaInicialSem2, fechaFinalSem2);
                ResultadoTotalGeneracion regProdGenXAreaSem1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1 && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaInicialSem1, fechaFinalSem1);
                ResultadoTotalGeneracion regProdGenXAreaSem0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0 && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaFinalSem0);

                ResultadoTotalGeneracion regProdGenXAreaSem0Anio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);
                ResultadoTotalGeneracion regProdGenXAreaSem0Var = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenXAreaSem0, regProdGenXAreaSem0Anio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

                ResultadoTotalGeneracion regProdGenXAreaSem0Anio2Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialSem0Anio2Ant && x.Medifecha <= fechaFinalSem0Anio2Ant && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_SemAct, fechaInicialSem0Anio2Ant, fechaInicialSem0Anio2Ant, fechaFinalSem0Anio2Ant);

                ResultadoTotalGeneracion regProdGenXAreaAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
                ResultadoTotalGeneracion regProdGenXAreaAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
                ResultadoTotalGeneracion regProdGenXAreaAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenXAreaAcum1, regProdGenXAreaAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

                ResultadoTotalGeneracion regProdGenXAreaAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaFinalAnio2, fechaFinalAnio2);
                ResultadoTotalGeneracion regProdGenXAreaAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenXAreaAcum1, regProdGenXAreaAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

                List<ResultadoTotalGeneracion> listaGenXArea = new List<ResultadoTotalGeneracion>();
                listaGenXArea.Add(regProdGenXAreaSem2);
                listaGenXArea.Add(regProdGenXAreaSem1);
                listaGenXArea.Add(regProdGenXAreaSem0);

                listaGenXArea.Add(regProdGenXAreaSem0Anio1Ant);
                listaGenXArea.Add(regProdGenXAreaSem0Var);

                listaGenXArea.Add(regProdGenXAreaSem0Anio2Ant);

                listaGenXArea.Add(regProdGenXAreaAcum0);
                listaGenXArea.Add(regProdGenXAreaAcum1);
                listaGenXArea.Add(regProdGenXAreaAcumVarAnio0);

                listaGenXArea.Add(regProdGenXAreaAcum2);
                listaGenXArea.Add(regProdGenXAreaAcumVarAnio1);

                foreach (var regData in listaGenXArea)
                {
                    regData.Ptomedicodi = reg.Ptomedicodi;
                    regData.Ptomedibarranomb = reg.Ptomedibarranomb;
                }

                listaDemandaXAreaData.AddRange(listaGenXArea);
            }

            //Demanda de Energía del SEIN
            listaPotGenData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regMDPotGenSem2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialSem2 && x.Medifecha <= fechaFinalSem2).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaInicialSem2, fechaFinalSem2);
            ResultadoTotalGeneracion regMDPotGenSem1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaInicialSem1, fechaFinalSem1);
            ResultadoTotalGeneracion regMDPotGenSem0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaFinalSem0);

            ResultadoTotalGeneracion regMDPotGenSem0AnioAnt = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);
            ResultadoTotalGeneracion regMDPotGenSem0Var = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regMDPotGenSem0, regMDPotGenSem0AnioAnt, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            ResultadoTotalGeneracion regProdGenAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regProdGenAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum0, regProdGenAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regProdGenAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaDemandaGen48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regProdGenAcum1, regProdGenAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaPotGenData.Add(regMDPotGenSem2);
            listaPotGenData.Add(regMDPotGenSem1);
            listaPotGenData.Add(regMDPotGenSem0);

            listaPotGenData.Add(regMDPotGenSem0AnioAnt);
            listaPotGenData.Add(regMDPotGenSem0Var);

            listaPotGenData.Add(regProdGenAcum0);
            listaPotGenData.Add(regProdGenAcum1);
            listaPotGenData.Add(regProdGenAcumVarAnio0);

            listaPotGenData.Add(regProdGenAcum2);
            listaPotGenData.Add(regProdGenAcumVarAnio1);

            //Intercambios internacionales
            List<ResultadoTotalGeneracion> listaDataInterconexion = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> regMDInterSem2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialSem2 && x.Medifecha <= fechaFinalSem2).ToList(), fechaInicialSem2, fechaFinalSem2, PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            List<ResultadoTotalGeneracion> regMDInterSem1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1).ToList(), fechaInicialSem1, fechaFinalSem1, PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            List<ResultadoTotalGeneracion> regMDInterSem0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), fechaInicialSem0, fechaFinalSem0, PR5ConstanteFecha.ValorAnioAct_SemAct);

            List<ResultadoTotalGeneracion> regMDInterSem0AnioAnt = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt).ToList(), fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            List<ResultadoTotalGeneracion> regMDInterSem0Var = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterSem0, regMDInterSem0AnioAnt, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            List<ResultadoTotalGeneracion> regMDInterAcum0 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio0, fechaFinalAnio0, PR5ConstanteFecha.ValorAnioAct_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcum1 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio1, fechaFinalAnio1, PR5ConstanteFecha.ValorAnio1Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum0, regMDInterAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            List<ResultadoTotalGeneracion> regMDInterAcum2 = UtilSemanalPR5.GenerarDatosInterconexion48ProdGenTotalCargaMasiva(listaInterconexion48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), fechaInicialAnio2, fechaFinalAnio2, PR5ConstanteFecha.ValorAnio2Ant_Acum);
            List<ResultadoTotalGeneracion> regMDInterAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByListaInterconexion(regMDInterAcum1, regMDInterAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaDataInterconexion.AddRange(regMDInterSem2);
            listaDataInterconexion.AddRange(regMDInterSem1);
            listaDataInterconexion.AddRange(regMDInterSem0);

            listaDataInterconexion.AddRange(regMDInterSem0AnioAnt);
            listaDataInterconexion.AddRange(regMDInterSem0Var);

            listaDataInterconexion.AddRange(regMDInterAcum0);
            listaDataInterconexion.AddRange(regMDInterAcum1);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio0);

            listaDataInterconexion.AddRange(regMDInterAcum2);
            listaDataInterconexion.AddRange(regMDInterAcumVarAnio1);

            listaInterTipoData = listaDataInterconexion.Where(x => x.Tptomedicodi != null).ToList();
            listaInterTotalData = listaDataInterconexion.Where(x => x.Tptomedicodi == null).ToList();

            //Total Demanda del SEIN
            listaPotGenTotalData = new List<ResultadoTotalGeneracion>();
            ResultadoTotalGeneracion regPotGenTotalSem2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialSem2 && x.Medifecha <= fechaFinalSem2).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem2Ant, fechaInicialSem2, fechaInicialSem2, fechaFinalSem2);
            ResultadoTotalGeneracion regPotGenTotalSem1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialSem1 && x.Medifecha <= fechaFinalSem1).ToList(), PR5ConstanteFecha.ValorAnioAct_Sem1Ant, fechaInicialSem1, fechaInicialSem1, fechaFinalSem1);
            ResultadoTotalGeneracion regPotGenTotalSem0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialSem0 && x.Medifecha <= fechaFinalSem0).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fechaInicialSem0, fechaInicialSem0, fechaFinalSem0);

            ResultadoTotalGeneracion regPotGenTotalSem0AnioAnt = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialSem0AnioAnt && x.Medifecha <= fechaFinalSem0AnioAnt).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fechaInicialSem0AnioAnt, fechaInicialSem0AnioAnt, fechaFinalSem0AnioAnt);
            ResultadoTotalGeneracion regPotGenTotalSem0Var = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regPotGenTotalSem0, regPotGenTotalSem0AnioAnt, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fechaInicialSem0);

            ResultadoTotalGeneracion regPotGenTotalAcum0 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnioAct_Acum, fechaInicialAnio0, fechaInicialAnio0, fechaFinalAnio0);
            ResultadoTotalGeneracion regPotGenTotalAcum1 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio1Ant_Acum, fechaInicialAnio1, fechaInicialAnio1, fechaFinalAnio1);
            ResultadoTotalGeneracion regPotGenTotalAcumVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regPotGenTotalAcum0, regPotGenTotalAcum1, PR5ConstanteFecha.ValorAnioAct_Acum_Var, fechaInicialAnio0);

            ResultadoTotalGeneracion regPotGenTotalAcum2 = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listaMedicionTotal48.Where(x => x.Medifecha >= fechaInicialAnio2 && x.Medifecha <= fechaFinalAnio2 && !objFecha.ListaFechaBisiesto.Contains(x.Medifecha)).ToList(), PR5ConstanteFecha.ValorAnio2Ant_Acum, fechaInicialAnio2, fechaInicialAnio2, fechaFinalAnio2);
            ResultadoTotalGeneracion regPotGenTotalAcumVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regPotGenTotalAcum1, regPotGenTotalAcum2, PR5ConstanteFecha.ValorAnio1Ant_Acum_Var, fechaInicialAnio2);

            listaPotGenTotalData.Add(regPotGenTotalSem2);
            listaPotGenTotalData.Add(regPotGenTotalSem1);
            listaPotGenTotalData.Add(regPotGenTotalSem0);

            listaPotGenTotalData.Add(regPotGenTotalSem0AnioAnt);
            listaPotGenTotalData.Add(regPotGenTotalSem0Var);

            listaPotGenTotalData.Add(regPotGenTotalAcum0);
            listaPotGenTotalData.Add(regPotGenTotalAcum1);
            listaPotGenTotalData.Add(regPotGenTotalAcumVarAnio0);

            listaPotGenTotalData.Add(regPotGenTotalAcum2);
            listaPotGenTotalData.Add(regPotGenTotalAcumVarAnio1);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Evolución semanal de la producción de energía y comparaación de la variación semanal para los años 2015,2016,2017 
            listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();

            DateTime fIniAnioActual = objFecha.AnioAct.Sem01_FechaIni;
            DateTime fIniAnio1Ant = objFecha.Anio1Ant.Sem01_FechaIni;
            DateTime fIniAnio2Ant = objFecha.Anio2Ant.Sem01_FechaIni;
            int numSemanasAnio = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6);
            for (int numSemana = 1; numSemana <= numSemanasAnio; numSemana++)
            {
                foreach (var reg in listaArea)
                {
                    ResultadoTotalGeneracion regEvoSemAct = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fIniAnioActual && x.Medifecha <= fIniAnioActual.AddDays(6) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnioAct_SemAct, fIniAnioActual, fIniAnioActual, fIniAnioActual.AddDays(6));
                    ResultadoTotalGeneracion regEvoSemActAnio1Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fIniAnio1Ant && x.Medifecha <= fIniAnio1Ant.AddDays(6) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fIniAnioActual, fIniAnio1Ant, fIniAnio1Ant.AddDays(6));
                    ResultadoTotalGeneracion regEvoSemActAnio2Ant = UtilSemanalPR5.ProdGenObtenerDataGWhTotal(listCon48XAreaSinInter.Where(x => x.Medifecha >= fIniAnio2Ant && x.Medifecha <= fIniAnio2Ant.AddDays(6) && x.Ptomedicodi == reg.Ptomedicodi).ToList(), PR5ConstanteFecha.ValorAnio1Ant_SemAct, fIniAnioActual, fIniAnio2Ant, fIniAnio2Ant.AddDays(6));

                    if (numSemana > objFecha.AnioAct.Max_Num_Sem) regEvoSemAct = null;

                    List<ResultadoTotalGeneracion> listaEvoXArea = new List<ResultadoTotalGeneracion>();
                    if (regEvoSemAct != null && regEvoSemActAnio1Ant != null) listaEvoXArea.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEvoSemAct, regEvoSemActAnio1Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fIniAnioActual));
                    if (regEvoSemActAnio1Ant != null && regEvoSemActAnio2Ant != null) listaEvoXArea.Add(UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regEvoSemActAnio1Ant, regEvoSemActAnio2Ant, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, fIniAnio1Ant));

                    foreach (var regData in listaEvoXArea)
                    {
                        regData.Ptomedicodi = reg.Ptomedicodi;
                        regData.Ptomedibarranomb = reg.Ptomedibarranomb;
                    }

                    listaEvolucionSemanal.AddRange(listaEvoXArea);
                }

                fIniAnioActual = fIniAnioActual.AddDays(7);
                fIniAnio1Ant = fIniAnio1Ant.AddDays(7);
                fIniAnio2Ant = fIniAnio2Ant.AddDays(7);
            }
        }

        /// <summary>
        /// ListarDataEvolucionDemandaXAreaOperativaSEIN
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataEvolucionDemandaXAreaOperativaSEIN(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarReporteDataEvolucionDemandaXAreaOperativaSEIN(objFiltro.ObjFecha, out TablaReporte dataTabla, out GraficoWeb graficoCompMDXArea, out GraficoWeb graficoVarXAreas1Anio, out GraficoWeb graficoVarXAreas2Anio);
                objReporte.Tabla = dataTabla;
                objReporte.GraficoCompMD = graficoCompMDXArea;
                objReporte.GraficoCargaDespacho = graficoVarXAreas1Anio;
                objReporte.GraficoVarSem = graficoVarXAreas2Anio;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                GetDataVersionComparacionCoberturaMaxDemanda(listaDat, listaDatDetalle, out TablaReporte dataTabla, out GraficoWeb graficoCompMDXArea,
                                                             out GraficoWeb graficoVarXAreas1Anio, out GraficoWeb graficoVarXAreas2Anio, objFiltro);

                objReporte.Tabla = dataTabla;
                objReporte.GraficoCompMD = graficoCompMDXArea;
                objReporte.GraficoCargaDespacho = graficoVarXAreas1Anio;
                objReporte.GraficoVarSem = graficoVarXAreas2Anio;

            }

            return objReporte;
        }

        private void GetDataVersionComparacionCoberturaMaxDemanda(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out TablaReporte dataTabla,
            out GraficoWeb graficoCompMDXArea, out GraficoWeb graficoVarXAreas1Anio, out GraficoWeb graficoVarXAreas2Anio, InfSGIFiltroReporte objFiltro)
        {
            var objFecha = objFiltro.ObjFecha;
            //Ultimas semanas operativas
            DateTime fechaInicialSem2 = objFecha.AnioAct.Rango2Ant_FechaIni, fechaFinalSem2 = objFecha.AnioAct.Rango2Ant_FechaFin;
            DateTime fechaInicialSem1 = objFecha.AnioAct.Rango1Ant_FechaIni, fechaFinalSem1 = objFecha.AnioAct.Rango1Ant_FechaFin;
            DateTime fechaInicialSem0 = objFecha.AnioAct.RangoAct_FechaIni, fechaFinalSem0 = objFecha.AnioAct.RangoAct_FechaFin;

            //año anterior
            DateTime fechaInicialSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaIni, fechaFinalSem0AnioAnt = objFecha.Anio1Ant.RangoAct_FechaFin;
            DateTime fechaInicialSem0Anio2Ant = objFecha.Anio2Ant.RangoAct_FechaIni, fechaFinalSem0Anio2Ant = objFecha.Anio2Ant.RangoAct_FechaFin;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            DateTime fechaInicialAnio2 = objFecha.Anio2Ant.Fecha_01Enero, fechaFinalAnio2 = objFecha.Anio2Ant.Fecha_Final;
            DateTime fechaInicialAnio1 = objFecha.Anio1Ant.Fecha_01Enero, fechaFinalAnio1 = objFecha.Anio1Ant.Fecha_Final;
            DateTime fechaInicialAnio0 = objFecha.AnioAct.Fecha_01Enero, fechaFinalAnio0 = objFecha.AnioAct.Fecha_Final;

            string stranio2 = fechaInicialAnio2.Year + string.Empty;
            string stranio1 = fechaInicialAnio1.Year + string.Empty;
            string stranio0 = fechaInicialAnio0.Year + string.Empty;

            List<MeReporptomedDTO> listaArea = new List<MeReporptomedDTO>();
            var listaDemandaXAreaData = new List<ResultadoTotalGeneracion>();
            var listaPotGenData = new List<ResultadoTotalGeneracion>();
            var listaInterTipoData = new List<ResultadoTotalGeneracion>();
            var listaInterTotalData = new List<ResultadoTotalGeneracion>();
            var listaPotGenTotalData = new List<ResultadoTotalGeneracion>();
            var listaTotalMaximaDemadaDesc = new List<MaximaDemandaDTO>();

            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant, SemanaFechaDesc = objFecha.AnioAct.Rango2Ant_Num, FechaHora = fechaInicialSem2 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant, SemanaFechaDesc = objFecha.AnioAct.Rango1Ant_Num, FechaHora = fechaInicialSem1 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct, SemanaFechaDesc = objFecha.AnioAct.RangoAct_Num, FechaHora = fechaInicialSem0 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct, SemanaFechaDesc = objFecha.Anio1Ant.RangoAct_Num, FechaHora = fechaInicialSem0AnioAnt });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum, SemanaFechaDesc = stranio0, FechaHora = fechaInicialAnio0 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum, SemanaFechaDesc = stranio1, FechaHora = fechaInicialAnio1 });
            listaTotalMaximaDemadaDesc.Add(new MaximaDemandaDTO() { TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum, SemanaFechaDesc = stranio2, FechaHora = fechaInicialAnio2 });

            var listaEvolucionSemanal = new List<ResultadoTotalGeneracion>();
            foreach (var objDat in listaDat)
            {
                var numMDTgen = 0;
                var numtotalmaxD = 0;

                //llenar la tabla listaArea
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)
                {
                    var regArea = new MeReporptomedDTO()
                    {
                        Ptomedicodi = objDat.Verdatid,
                        Ptomedibarranomb = objDat.Verdatvalor
                    };

                    //comprobar si no esta registrado
                    if (listaArea.Find(x => x.Ptomedicodi == regArea.Ptomedicodi) == null)
                    {
                        listaArea.Add(regArea);
                    }
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                {
                    //llenamos los valores de la tabla listaDemandaXAreaData
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFenergcodi)
                    {
                        var TipoResultadoFecha = 0;

                        switch (numMDTgen)
                        {
                            case 0:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant;
                                break;
                            case 1:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant;
                                break;
                            case 2:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                                break;
                            case 3:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                                break;
                            case 4:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                break;
                            case 5:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                                break;
                            case 6:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                                break;
                            case 7:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                                break;
                            case 8:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                                break;
                            case 9:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                                break;
                            case 10:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct;
                                break;
                        }

                        numMDTgen++;
                        var mdtGen = new ResultadoTotalGeneracion()
                        {
                            Ptomedicodi = objDat.Verdatid,
                            TipoResultadoFecha = TipoResultadoFecha,
                            Meditotal = objDatDet.ValorDecimal
                        };
                        listaDemandaXAreaData.Add(mdtGen);
                    }

                    //llenar tabla listaPotGenData
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual)//"Demanda de Energía del SEIN"
                    {
                        var TipoResultadoFecha = 0;

                        switch (numMDTgen)
                        {
                            case 0:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant;
                                break;
                            case 1:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant;
                                break;
                            case 2:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                                break;
                            case 3:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                                break;
                            case 4:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                break;
                            case 5:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                                break;
                            case 6:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                                break;
                            case 7:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                                break;
                            case 8:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                                break;
                            case 9:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                                break;
                        }
                        numMDTgen++;

                        var valSEIN = new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = TipoResultadoFecha,
                            Meditotal = objDatDet.ValorDecimal
                        };
                        listaPotGenData.Add(valSEIN);
                    }

                    //llenar Importación y  Exportación tabla listaInterTipoData
                    else if (objDat.Verdatid == ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh || objDat.Verdatid == ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh)
                    {
                        var nombreInter = objDat.Verdatid;
                        var TipoResultadoFecha = 0;

                        switch (numMDTgen)
                        {
                            case 0:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant;
                                break;
                            case 1:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant;
                                break;
                            case 2:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                                break;
                            case 3:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                                break;
                            case 4:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                break;
                            case 5:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                                break;
                            case 6:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                                break;
                            case 7:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                                break;
                            case 8:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                                break;
                            case 9:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                                break;
                        }
                        numMDTgen++;
                        var valSEIN = new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = TipoResultadoFecha,
                            Tptomedicodi = nombreInter,
                            Meditotal = objDatDet.ValorDecimal
                        };
                        listaInterTipoData.Add(valSEIN);
                    }

                    //llenar Intercambios Internacionales tabla listaInterTotalData
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacionales)//"Intercambios Internacionales"
                    {
                        var TipoResultadoFecha = 0;

                        switch (numMDTgen)
                        {
                            case 0:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant;
                                break;
                            case 1:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant;
                                break;
                            case 2:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                                break;
                            case 3:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                                break;
                            case 4:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                break;
                            case 5:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                                break;
                            case 6:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                                break;
                            case 7:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                                break;
                            case 8:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                                break;
                            case 9:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                                break;
                        }
                        numMDTgen++;
                        var valSEIN = new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = TipoResultadoFecha,
                            Meditotal = objDatDet.ValorDecimal
                        };
                        listaInterTotalData.Add(valSEIN);
                    }

                    //llenar tabla listaPotGenTotalData
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiTotalDemandaSEIN)//"Total Demanda del SEIN"
                    {
                        var TipoResultadoFecha = 0;

                        switch (numtotalmaxD)
                        {
                            case 0:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem2Ant;
                                break;
                            case 1:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Sem1Ant;
                                break;
                            case 2:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                                break;
                            case 3:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                                break;
                            case 4:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                break;
                            case 5:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                                break;
                            case 6:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                                break;
                            case 7:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                                break;
                            case 8:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_Acum;
                                break;
                            case 9:
                                TipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum_Var;
                                break;
                        }

                        numtotalmaxD++;
                        var valSEIN = new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = TipoResultadoFecha,
                            Meditotal = objDatDet.ValorDecimal
                        };
                        listaPotGenTotalData.Add(valSEIN);
                    }

                    //llenar tabla listaEvolucionSemanal
                    else if (objDat.Verdatid == ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia)//"Lista Evolucion Semanal"
                    {
                        var listaValores = objDatDet.Vdatdtvalor.Split('|');

                        if (listaValores.Length == 2)
                        {
                            //valorTextoEvoSem +"|"+ evSemanal.TipoResultadoFecha
                            decimal valor01 = Decimal.TryParse(listaValores[0], out decimal valorConvertido) ? valorConvertido : 0;
                            int valorResultFecha = int.TryParse(listaValores[1], out int valorint1) ? valorint1 : 0;

                            var valEvSem = new ResultadoTotalGeneracion()
                            {
                                Medifecha = objDatDet.Vdatdtfecha.Value,
                                Meditotal = valor01,
                                TipoResultadoFecha = valorResultFecha,
                                Ptomedicodi = objDatDet.Vdatdtid
                            };
                            listaEvolucionSemanal.Add(valEvSem);
                        }
                    }
                }
            }

            dataTabla = UtilSemanalPR5.ObtenerDataTablaMDAreaOperativa(objFiltro.ObjFecha, listaTotalMaximaDemadaDesc, listaDemandaXAreaData, listaPotGenData, listaPotGenTotalData,
                                                            listaInterTipoData, listaInterTotalData, listaArea);

            graficoCompMDXArea = UtilSemanalPR5.GraficoBarraComparacionDemandaXAreaOp(objFecha, listaTotalMaximaDemadaDesc, listaDemandaXAreaData, listaArea);

            graficoVarXAreas1Anio = UtilSemanalPR5.GraficoBarraDemandaVariacionEvoSemanalAcumXAreaOp(objFecha, listaTotalMaximaDemadaDesc, listaEvolucionSemanal, listaArea);

            graficoVarXAreas2Anio = UtilSemanalPR5.GraficoBarraDemandaVariacionEvoSemanalAcumXAreaOp2Anio(objFecha, listaTotalMaximaDemadaDesc, listaEvolucionSemanal, listaArea);

        }

        #endregion

        #endregion

        #endregion

        #region D. EVOLUCIÓN DE LA DEMANDA DE ENERGÍA Y POTENCIA DE LOS PRINCIPALES GRANDES USUARIOS DEL SEIN        

        #region MetodosD

        private void GetObtenerDemandaDiariaHFPHP(DateTime fechaInicial, DateTime fechaFinal, out DemandadiaDTO resultado, out DemandadiaDTO regHFP_HP)
        {
            List<DemandadiaDTO> lista = new List<DemandadiaDTO>();

            InfSGIResumenProd objRpt = GetResumenGeneracion48CargaMasiva(fechaInicial, fechaFinal);
            DateTime fechaSemMD48 = GetDiaMaximaDemandaCargaMasiva48(fechaInicial, fechaFinal, objRpt.ListaMDSein48);

            MeMedicion48DTO objDia = objRpt.ListaMDSein48.Find(x => x.FechaMD == fechaSemMD48);
            MeMedicion48DTO objDiaHFP = objRpt.ListaMDFHP48.Find(x => x.Medifecha == objDia.Medifecha);
            MeMedicion48DTO objDiaHP = objRpt.ListaMDHP48.Find(x => x.Medifecha == objDia.Medifecha);

            //MD todo el día
            resultado = new DemandadiaDTO();
            resultado.ValorMD = objDia.Meditotal ?? 0;
            resultado.HoraMD = objDia.FechaMD.ToString(ConstantesAppServicio.FormatoHora);
            resultado.FechaMD = objDia.Medifecha.ToString(ConstantesAppServicio.FormatoFecha);
            resultado.IndexHoraMD = objDia.FechaMD.Hour * 2 + objDia.FechaMD.Minute / 30;
            resultado.Medifecha = objDia.Medifecha;

            //Obtener HP  y HFP por día
            regHFP_HP = new DemandadiaDTO();
            regHFP_HP.ValorHFP = objDiaHFP.Meditotal ?? 0;
            regHFP_HP.ValorHP = objDiaHP.Meditotal ?? 0;
            regHFP_HP.IndiceMDHFP = objDiaHFP.FechaMD.Hour * 2 + objDiaHFP.FechaMD.Minute / 30;
            regHFP_HP.IndiceMDHP = objDiaHP.FechaMD.Hour * 2 + objDiaHP.FechaMD.Minute / 30;
            regHFP_HP.Medifecha = objDia.Medifecha;
            regHFP_HP.MedifechaHFP = objDiaHFP.FechaMD.ToString(ConstantesAppServicio.FormatoHora);
            regHFP_HP.MedifechaHP = objDiaHP.FechaMD.ToString(ConstantesAppServicio.FormatoHora);

        }

        private void ListarDemandaGUMaximaDemandaSemanal(FechasPR5 objFecha, out List<SiEmpresaDTO> listaULByPto, out List<MeMedicion48DTO> listaULByArea, out List<MeMedicion48DTO> listaDataUL30min,
                        out DemandadiaDTO objHFP_HP, out DemandadiaDTO objMDFromRango)
        {
            DateTime fechaInicial = objFecha.FechaInicial;
            DateTime fechaFinal = objFecha.FechaFinal;

            //Obtener Maxima Demanda del SEIN
            GetObtenerDemandaDiariaHFPHP(fechaInicial, fechaFinal, out DemandadiaDTO regMDFromRango, out DemandadiaDTO regHFP_HP);

            //Obtener data de Grandes Usuarios del día de la máxima demanda
            ReporteDemandaGrandesUsuariosDataReporte(regMDFromRango.Medifecha.Date, regMDFromRango.Medifecha.Date, out List<SiEmpresaDTO> listaEmpresaArea, out listaDataUL30min);

            //Data por cada empresa-area del reporte obtener el valor max
            foreach (var reg in listaEmpresaArea)
            {
                var reg48Tmp = listaDataUL30min.Find(x => x.Emprcodi == reg.Emprcodi && x.AreaOperativa == reg.AreaOperativa);
                if (reg48Tmp != null)
                {
                    //valor maximo y total por empresa-area
                    decimal? total = 0, valor = null;
                    List<decimal?> listaH = new List<decimal?>();
                    for (int i = 1; i <= 48; i++)
                    {
                        valor = (decimal?)reg48Tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(reg48Tmp, null);
                        listaH.Add(valor);

                        total += valor.GetValueOrDefault(0);
                    }

                    reg.Maximo = listaH.Max().GetValueOrDefault(0);
                    reg.Total = total.GetValueOrDefault(0);

                    //Valor en HP y HFP
                    reg.HFP = (decimal?)reg48Tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + regHFP_HP.IndiceMDHFP).GetValue(reg48Tmp, null);
                    reg.HP = (decimal?)reg48Tmp.GetType().GetProperty(ConstantesAppServicio.CaracterH + regHFP_HP.IndiceMDHP).GetValue(reg48Tmp, null);
                }

                //Determinar el tipo de rango que pertenece
                if (reg.Maximo > 100)
                    reg.TipoRango = ConstantesPR5ReportesServicio.TipoRangoMayor100;
                else if (reg.Maximo >= 30)
                    reg.TipoRango = ConstantesPR5ReportesServicio.TipoRangoEntre30y100;
                else if (reg.Maximo >= 20)
                    reg.TipoRango = ConstantesPR5ReportesServicio.TipoRangoEntre20y30;
                else
                    reg.TipoRango = ConstantesPR5ReportesServicio.TipoRangoMenor20;
            }

            //output
            listaULByPto = listaEmpresaArea.OrderBy(x => x.OrdenArea).ThenByDescending(x => x.HFP).ToList();
            objHFP_HP = regHFP_HP;
            objMDFromRango = regMDFromRango;

            objHFP_HP.ValorHFPUL = listaEmpresaArea.Sum(x => x.HFP ?? 0);
            objHFP_HP.ValorHPUL = listaEmpresaArea.Sum(x => x.HP ?? 0);

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Obtener data por cada Area Operativa
            var listaRptArea = UtilSemanalPR5.GetListaReporteUL(false);
            listaRptArea.Add(new MeReporteDTO() { AreaOperativa = "SEIN", Repornombre = "DEMANDA DE LOS GRANDES USUARIOS EN EL SEIN" });

            List<MeMedicion48DTO> listaXArea = new List<MeMedicion48DTO>();
            foreach (var rptArea in listaRptArea)
            {
                var regArea30min = new MeMedicion48DTO();
                regArea30min.AreaOperativa = rptArea.AreaOperativa;
                regArea30min.Ptomedidesc = rptArea.Repornombre;

                var lista48XArea = listaDataUL30min.Where(x => x.AreaOperativa == rptArea.AreaOperativa || "SEIN" == rptArea.AreaOperativa).ToList();
                foreach (var reg in lista48XArea)
                {
                    decimal? valorH = null, valorArea = null;
                    for (int i = 1; i <= 48; i++)
                    {
                        valorArea = (decimal?)regArea30min.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(regArea30min, null);
                        valorH = (decimal?)reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(reg, null);

                        valorArea = valorArea.GetValueOrDefault(0) + valorH.GetValueOrDefault(0);
                        regArea30min.GetType().GetProperty(ConstantesAppServicio.CaracterH + i.ToString()).SetValue(regArea30min, valorArea);
                    }
                }

                listaXArea.Add(regArea30min);
            }

            listaULByArea = listaXArea;
        }

        /// <summary>
        /// ListarDataVersionDiagramaCargaGURangoPotencia
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionDiagramaCargaGURangoPotencia(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            List<SiEmpresaDTO> listaULByPto;
            List<MeMedicion48DTO> listaULByArea, listaDataUL30min;
            DemandadiaDTO objHFP_HP, objMDFromRango;
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarDemandaGUMaximaDemandaSemanal(objFiltro.ObjFecha, out listaULByPto, out listaULByArea, out listaDataUL30min
                                                        , out objHFP_HP, out objMDFromRango);

                objReporte.ListaULByPto = listaULByPto;
                objReporte.ListaULByArea = listaULByArea;
                objReporte.ListaDataUL30min = listaDataUL30min;
                objReporte.ObjHFP_HP = objHFP_HP;
                objReporte.ObjMDFromRango = objMDFromRango;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionDiagramaCargaGURangoPotencia(listaDat, listaDatDetalle, out listaULByPto, out listaULByArea, out listaDataUL30min
                                                    , out objHFP_HP, out objMDFromRango);

                objReporte.ListaULByPto = listaULByPto;
                objReporte.ListaULByArea = listaULByArea;
                objReporte.ListaDataUL30min = listaDataUL30min;
                objReporte.ObjHFP_HP = objHFP_HP;
                objReporte.ObjMDFromRango = objMDFromRango;

            }
            return objReporte;
        }

        #endregion

        #region D.1. Demanda de Grandes Usuarios en el día de máxima demanda semanal (MW)

        /// <summary>
        /// ListarDataVersionDemandaGUMaximaDemandaSemanal
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionDemandaGUMaximaDemandaSemanal(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            List<SiEmpresaDTO> listaULByPto;
            List<MeMedicion48DTO> listaULByArea, listaDataUL30min;
            DemandadiaDTO objHFP_HP, objMDFromRango;
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarDemandaGUMaximaDemandaSemanal(objFiltro.ObjFecha, out listaULByPto, out listaULByArea, out listaDataUL30min,
                                        out objHFP_HP, out objMDFromRango);
                objReporte.ListaULByPto = listaULByPto;
                objReporte.ListaULByArea = listaULByArea;
                objReporte.ListaDataUL30min = listaDataUL30min;
                objReporte.ObjHFP_HP = objHFP_HP;
                objReporte.ObjMDFromRango = objMDFromRango;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionDemandaGUMaximaDemandaSemanal(listaDat, listaDatDetalle, out listaULByPto, out listaULByArea, out listaDataUL30min,
                                    out objHFP_HP, out objMDFromRango);

                objReporte.ListaULByPto = listaULByPto;
                objReporte.ListaULByArea = listaULByArea;
                objReporte.ListaDataUL30min = listaDataUL30min;
                objReporte.ObjHFP_HP = objHFP_HP;
                objReporte.ObjMDFromRango = objMDFromRango;

            }
            return objReporte;
        }

        private void GetDataVersionDemandaGUMaximaDemandaSemanal(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<SiEmpresaDTO> listaULByPto, out List<MeMedicion48DTO> listaULByArea,
                                                                out List<MeMedicion48DTO> listaDataUL30min, out DemandadiaDTO objHFP_HP, out DemandadiaDTO objMDFromRango)
        {
            List<SiEmpresaDTO> listaULByPtoi = new List<SiEmpresaDTO>();
            List<SiEmpresaDTO> listaULByPtoii = new List<SiEmpresaDTO>();
            List<MeMedicion48DTO> listaULByAreai = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaDataUL30mini = new List<MeMedicion48DTO>();
            DemandadiaDTO objHFP_HPi = new DemandadiaDTO();
            DemandadiaDTO objMDFromRangoi = new DemandadiaDTO();


            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiGraficoGU).ToList())
            {
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiDemandaGUHPF)
                {
                    string[] words = objDat.Verdatvalor.Split('|');
                    DateTime fechaMedi = DateTime.ParseExact(words[0], ConstantesAppServicio.FormatoFechaFullSeg, CultureInfo.InvariantCulture);
                    objMDFromRangoi.Medifecha = fechaMedi;
                    objMDFromRangoi.FechaMD = words[1];
                    objMDFromRangoi.HoraMD = words[2];
                    objHFP_HPi.MedifechaHFP = objDat.Verdatvalor2;
                }

                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiDemandaGUHP)
                {
                    objHFP_HPi.MedifechaHP = objDat.Verdatvalor2;
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiDemandaGUHPF)
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)// Si no es total
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');

                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }
                            decimal total = 0;
                            if (!string.IsNullOrEmpty(words[4]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                total = valorDecimal;
                            }

                            listaULByPtoi.Add(new SiEmpresaDTO()
                            {
                                OrdenArea = Convert.ToInt32(words[3]),
                                Total = total,
                                Emprnomb = words[1],
                                AreaOperativa = words[2],
                                Emprcodi = objDatDet.Vdatdtid,
                                HFP = objDatDet.ValorDecimal
                            });

                        }
                        else // Totales
                        {
                            decimal valor = 0;
                            if (!string.IsNullOrEmpty(objDatDet.Vdatdtvalor))
                            {
                                decimal.TryParse(objDatDet.Vdatdtvalor, out decimal valorDecimal);
                                valor = valorDecimal;
                            }

                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioActual)
                            {
                                objHFP_HPi.ValorHFPUL = valor;
                            }

                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior)
                            {
                                objHFP_HPi.ValorHFP = valor;
                            }

                        }
                    }
                    else
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)// Si no es total
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');

                            if (!string.IsNullOrEmpty(words[0]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }
                            decimal total = 0;
                            if (!string.IsNullOrEmpty(words[4]))
                            {
                                decimal.TryParse(words[0], out decimal valorDecimal);
                                total = valorDecimal;
                            }

                            listaULByPtoii.Add(new SiEmpresaDTO()
                            {
                                OrdenArea = Convert.ToInt32(words[3]),
                                Total = total,
                                Emprnomb = words[1],
                                AreaOperativa = words[2],
                                Emprcodi = objDatDet.Vdatdtid,
                                HP = objDatDet.ValorDecimal
                            });

                        }
                        else // Totales
                        {
                            decimal valor = 0;
                            if (!string.IsNullOrEmpty(objDatDet.Vdatdtvalor))
                            {
                                decimal.TryParse(objDatDet.Vdatdtvalor, out decimal valorDecimal);
                                valor = valorDecimal;
                            }

                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioActual)
                            {
                                objHFP_HPi.ValorHPUL = valor;
                            }

                            if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior)
                            {
                                objHFP_HPi.ValorHP = valor;
                            }

                        }
                    }
                }

            }
            //consolida listas puntos
            foreach (var obj in listaULByPtoi)
            {
                var entity = listaULByPtoii.Find(x => x.Emprcodi == obj.Emprcodi && x.OrdenArea == obj.OrdenArea);
                if (entity != null)
                {
                    obj.HP = entity.HP;
                }
            }

            // Gráfico Lineas Grandes Usuarios
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoGU).ToList())
            {
                MeMedicion48DTO entity = new MeMedicion48DTO();
                entity.Ptomedidesc = objDat.Verdatvalor;

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    int pos = objDatDet.Vdatdtid;

                    if (!string.IsNullOrEmpty(objDatDet.Vdatdtvalor))
                    {
                        decimal.TryParse(objDatDet.Vdatdtvalor, out decimal valorDecimal);
                        objDatDet.ValorDecimal = valorDecimal;
                    }
                    entity.GetType().GetProperty(ConstantesAppServicio.CaracterH + pos).SetValue(entity, objDatDet.ValorDecimal);
                }
                listaULByAreai.Add(entity);
            }

            listaULByPto = listaULByPtoi;
            listaULByArea = listaULByAreai;
            listaDataUL30min = listaDataUL30mini;
            objHFP_HP = objHFP_HPi;
            objMDFromRango = objMDFromRangoi;

        }

        private void GenerarExcelDemandaGUMaximaDemandaSemanal(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionDemandaGUMaximaDemandaSemanal(objFiltro);

            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();

            UtilSemanalPR5.GenerarCharExcelListadoDemandaGUMaximaDemandaSemanal(ws, objFecha, objReporte.ListaULByPto, objReporte.ObjHFP_HP, objReporte.ObjMDFromRango, listaItem);

            //GRÁFICO 1
            UtilSemanalPR5.GenerarCharExcelGraficosDemandaGUMaximaDemandaSemanal(ws, objFecha, objReporte.ListaULByPto, objReporte.ObjHFP_HP, objReporte.ObjMDFromRango);

            //GRÁFICO 2
            UtilSemanalPR5.GenerarCharExcelGraficosCargaDemandaGUMaximaDemandaSemanal(ws, objFecha, objReporte.ListaULByArea, objReporte.ObjHFP_HP, objReporte.ObjMDFromRango);
        }

        #endregion

        #region D.2. Diagrama de Carga por rangos de potencia en Grandes Usuarios (MW)

        private void GetDataVersionDiagramaCargaGURangoPotencia(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<SiEmpresaDTO> listaULByPto, out List<MeMedicion48DTO> listaULByArea,
                                                                out List<MeMedicion48DTO> listaDataUL30min, out DemandadiaDTO objHFP_HP, out DemandadiaDTO objMDFromRango)
        {
            listaULByPto = new List<SiEmpresaDTO>();
            listaULByArea = new List<MeMedicion48DTO>();
            listaDataUL30min = new List<MeMedicion48DTO>();
            objHFP_HP = new DemandadiaDTO();
            objMDFromRango = new DemandadiaDTO();


            List<int> listaTipoRangoUL = new List<int>() { ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMayor100, ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMe30_100, ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMe20_30, ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMenor20 };



            foreach (int tipoRangoUL in listaTipoRangoUL)
            {
                foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == tipoRangoUL).ToList())
                {
                    int iTipoRango = 0;
                    switch (objDat.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMayor100:
                            iTipoRango = ConstantesPR5ReportesServicio.TipoRangoMayor100;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMe30_100:
                            iTipoRango = ConstantesPR5ReportesServicio.TipoRangoEntre30y100;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMe20_30:
                            iTipoRango = ConstantesPR5ReportesServicio.TipoRangoEntre20y30;
                            break;
                        case ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMenor20:
                            iTipoRango = ConstantesPR5ReportesServicio.TipoRangoMenor20;
                            break;
                    }

                    decimal valorMaximo = 0;
                    if (!string.IsNullOrEmpty(objDat.Verdatvalor2))
                    {
                        decimal.TryParse(objDat.Verdatvalor2, out decimal valorDecimal);
                        valorMaximo = valorDecimal;
                    }

                    string[] words = objDat.Verdatvalor.Split('|');

                    //
                    DateTime fechaMaxD = DateTime.ParseExact(words[2], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                    objMDFromRango.Medifecha = fechaMaxD;

                    listaULByPto.Add(new SiEmpresaDTO()
                    {
                        Emprcodi = objDat.Verdatid,
                        TipoRango = iTipoRango,
                        Maximo = valorMaximo,
                        Emprnomb = words[0],
                        AreaOperativa = words[1]
                    });

                    MeMedicion48DTO entity = new MeMedicion48DTO();
                    entity.Emprcodi = objDat.Verdatid;
                    entity.AreaOperativa = words[1];
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        int pos = objDatDet.Vdatdtid;

                        if (!string.IsNullOrEmpty(objDatDet.Vdatdtvalor))
                        {
                            decimal.TryParse(objDatDet.Vdatdtvalor, out decimal valorDecimal);
                            objDatDet.ValorDecimal = valorDecimal;
                        }
                        entity.GetType().GetProperty(ConstantesAppServicio.CaracterH + pos).SetValue(entity, objDatDet.ValorDecimal);
                    }
                    listaDataUL30min.Add(entity);
                }
            }



        }

        private void GenerarExcelGUCargaRangos(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int finalPosGrafico = 0;

            InfSGIReporteVersionado objReporte = ListarDataVersionDiagramaCargaGURangoPotencia(objFiltro);

            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();

            //grafico1
            UtilSemanalPR5.GenerarGraficoCharExcellGULRangoPotencia(ws, objFecha, objReporte.ListaULByPto, objReporte.ListaDataUL30min, objReporte.ObjHFP_HP, objReporte.ObjMDFromRango, listaItem, ConstantesPR5ReportesServicio.TipoRangoMayor100, ref finalPosGrafico);

            //grafico2                                                    
            UtilSemanalPR5.GenerarGraficoCharExcellGULRangoPotencia(ws, objFecha, objReporte.ListaULByPto, objReporte.ListaDataUL30min, objReporte.ObjHFP_HP, objReporte.ObjMDFromRango, listaItem, ConstantesPR5ReportesServicio.TipoRangoEntre30y100, ref finalPosGrafico);

            //grafico3                                                    
            UtilSemanalPR5.GenerarGraficoCharExcellGULRangoPotencia(ws, objFecha, objReporte.ListaULByPto, objReporte.ListaDataUL30min, objReporte.ObjHFP_HP, objReporte.ObjMDFromRango, listaItem, ConstantesPR5ReportesServicio.TipoRangoEntre20y30, ref finalPosGrafico);

            //grafico4                                                    
            UtilSemanalPR5.GenerarGraficoCharExcellGULRangoPotencia(ws, objFecha, objReporte.ListaULByPto, objReporte.ListaDataUL30min, objReporte.ObjHFP_HP, objReporte.ObjMDFromRango, listaItem, ConstantesPR5ReportesServicio.TipoRangoMenor20, ref finalPosGrafico);
        }

        #endregion

        #region D.3. Demanda de energía por área operativa de los Principales Grandes Usuarios (GWh)

        /// <summary>
        /// ListarDataVersionDemandaGUXAreaOperativa
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionDemandaGUXAreaOperativa(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            List<SiEmpresaDTO> listaEmpresaArea;
            List<MeMedicion48DTO> listaReporteXPto, listaReporteXArea, listaReporteEvolSemanal;
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {

                ListarDemandaGUMaximaDemandaSemanalXAreaOperativa(objFiltro.ObjFecha, out listaEmpresaArea, out listaReporteXPto, out listaReporteXArea, out listaReporteEvolSemanal);

                objReporte.ListaEmpresaArea = listaEmpresaArea;
                objReporte.ListaReporteXPto = listaReporteXPto;
                objReporte.ListaReporteXArea = listaReporteXArea;
                objReporte.ListaReporteEvolSemanal = listaReporteEvolSemanal;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionDemandaGUXAreaOperativa(listaDat, listaDatDetalle, out listaEmpresaArea, out listaReporteXPto, out listaReporteXArea, out listaReporteEvolSemanal);

                objReporte.ListaEmpresaArea = listaEmpresaArea;
                objReporte.ListaReporteXPto = listaReporteXPto;
                objReporte.ListaReporteXArea = listaReporteXArea;
                objReporte.ListaReporteEvolSemanal = listaReporteEvolSemanal;

            }
            return objReporte;
        }

        private void GetDataVersionDemandaGUXAreaOperativa(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<SiEmpresaDTO> listaEmpresaArea, out List<MeMedicion48DTO> listaReporteXPto,
            out List<MeMedicion48DTO> listaReporteXArea, out List<MeMedicion48DTO> listaReporteEvolSemanal)
        {
            listaEmpresaArea = new List<SiEmpresaDTO>();
            listaReporteXPto = new List<MeMedicion48DTO>();
            listaReporteXArea = new List<MeMedicion48DTO>();
            var ListaPuntosGeneral = new List<MeMedicion48DTO>();
            listaReporteEvolSemanal = new List<MeMedicion48DTO>();


            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiGraficoGrandesUsuariosLibres).ToList())//Datos de Grandes Usuarios menos datos Gráficos
            {
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiDemandaAreaOpeGU) //Grandes Usuarios
                {

                    listaEmpresaArea.Add(new SiEmpresaDTO()
                    {
                        Emprcodi = objDat.Verdatid,
                        Emprnomb = objDat.Verdatvalor,
                        AreaOperativa = objDat.Verdatvalor2
                    });

                    ListaPuntosGeneral = listaReporteXPto;

                }
                else //Resumen
                {
                    ListaPuntosGeneral = listaReporteXArea;
                }

                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    int iTipoResultadoFecha = 0;

                    switch (objDatDet.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioActual: //detalle SOP año actual
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior: //detalle SOP año anterior
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior: // //detalle SOP variación
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                            break;
                        case ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual: ////detalle Dem Acum año actual
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum;
                            break;
                        case ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioAnterior: ////detalle Dem Acum año anterior
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Acum;
                            break;
                        case ConstantesConceptoVersion.ConceptoValorDemandaAcumVariacionAnioActualVsAnioAnt: //detalle Dem Acum variación
                            iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Acum_Var;
                            break;
                    }

                    ListaPuntosGeneral.Add(new MeMedicion48DTO()
                    {
                        TipoResultadoFecha = iTipoResultadoFecha,
                        Emprcodi = objDat.Verdatid,
                        Emprnomb = objDat.Verdatvalor,
                        AreaOperativa = objDat.Verdatvalor2,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }

            }


            // Datos Gráfico Barras/Lineas Grandes Usuarios
            foreach (var objDat in listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiGraficoGrandesUsuariosLibres).ToList())
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    listaReporteEvolSemanal.Add(new MeMedicion48DTO()
                    {
                        AreaOperativa = objDat.Verdatvalor2,
                        Medifecha = objDatDet.Vdatdtfecha.Value,
                        Meditotal = objDatDet.ValorDecimal
                    });
                }
            }
        }

        private void ListarDemandaGUMaximaDemandaSemanalXAreaOperativa(FechasPR5 objFecha, out List<SiEmpresaDTO> listaEmpresaArea
            , out List<MeMedicion48DTO> listaReporteXPto, out List<MeMedicion48DTO> listaReporteXArea, out List<MeMedicion48DTO> listaReporteEvolSemanal)
        {
            //Obtener data de Grandes Usuarios del día de la máxima demanda
            /*objFecha.AnioAct.Ini_Data = DateTime.Today;
            objFecha.AnioAct.RangoAct_FechaFin = DateTime.Today;
            objFecha.Anio1Ant.Ini_Data = DateTime.Today;
            objFecha.Anio1Ant.RangoAct_FechaFin = DateTime.Today;*/
            ReporteDemandaGrandesUsuariosDataReporte(objFecha.Anio1Ant.Ini_Data.Date, objFecha.AnioAct.RangoAct_FechaFin.Date,
                                                    out listaEmpresaArea, out List<MeMedicion48DTO> listaData);

            //Obtener data de Grandes Usuarios
            List<MeMedicion48DTO> lista = new List<MeMedicion48DTO>();

            List<MeMedicion48DTO> listaAnioAct_SemAct = listaData.Where(x => x.Medifecha >= objFecha.AnioAct.RangoAct_FechaIni && x.Medifecha <= objFecha.AnioAct.RangoAct_FechaFin).ToList();
            List<MeMedicion48DTO> listaAnio1Ant_SemAct = listaData.Where(x => x.Medifecha >= objFecha.Anio1Ant.RangoAct_FechaIni && x.Medifecha <= objFecha.Anio1Ant.RangoAct_FechaFin).ToList();

            List<MeMedicion48DTO> listaAnioAct_Acum = listaData.Where(x => x.Medifecha >= objFecha.AnioAct.Fecha_01Enero && x.Medifecha <= objFecha.AnioAct.Fecha_Final).ToList();
            List<MeMedicion48DTO> listaAnio1Ant_Acum = listaData.Where(x => x.Medifecha >= objFecha.Anio1Ant.Fecha_01Enero && x.Medifecha <= objFecha.Anio1Ant.Fecha_Final).ToList();

            //Reporte
            List<MeMedicion48DTO> lsem1 = UtilSemanalPR5.GULConvertDataPtoMW48ToGWh(listaEmpresaArea, listaAnioAct_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni);
            List<MeMedicion48DTO> lsem2 = UtilSemanalPR5.GULConvertDataPtoMW48ToGWh(listaEmpresaArea, listaAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni);
            List<MeMedicion48DTO> lsemvar = UtilSemanalPR5.GULGenerarVariacionGWh(listaEmpresaArea, lsem1, lsem2, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.RangoAct_FechaIni);

            List<MeMedicion48DTO> lacum1 = UtilSemanalPR5.GULConvertDataPtoMW48ToGWh(listaEmpresaArea, listaAnioAct_Acum, PR5ConstanteFecha.ValorAnioAct_Acum, objFecha.AnioAct.Fecha_01Enero);
            List<MeMedicion48DTO> lacum2 = UtilSemanalPR5.GULConvertDataPtoMW48ToGWh(listaEmpresaArea, listaAnio1Ant_Acum, PR5ConstanteFecha.ValorAnio1Ant_Acum, objFecha.Anio1Ant.Fecha_01Enero);
            List<MeMedicion48DTO> lacumvar = UtilSemanalPR5.GULGenerarVariacionGWh(listaEmpresaArea, lacum1, lacum2, PR5ConstanteFecha.ValorAnioAct_Acum_Var, objFecha.AnioAct.Fecha_01Enero);

            listaReporteXPto = new List<MeMedicion48DTO>();
            listaReporteXPto.AddRange(lsem1);
            listaReporteXPto.AddRange(lsem2);
            listaReporteXPto.AddRange(lsemvar);
            listaReporteXPto.AddRange(lacum1);
            listaReporteXPto.AddRange(lacum2);
            listaReporteXPto.AddRange(lacumvar);

            //Data x Area operativa
            var listaRptArea = UtilSemanalPR5.GetListaReporteUL(true);

            listaReporteXArea = new List<MeMedicion48DTO>();
            foreach (var regArea in listaRptArea)
            {
                MeMedicion48DTO sem1 = UtilSemanalPR5.GULObtenerDataGWhXReporcodi(regArea.AreaOperativa, lsem1, PR5ConstanteFecha.ValorAnioAct_SemAct, objFecha.AnioAct.RangoAct_FechaIni);
                MeMedicion48DTO sem2 = UtilSemanalPR5.GULObtenerDataGWhXReporcodi(regArea.AreaOperativa, lsem2, PR5ConstanteFecha.ValorAnio1Ant_SemAct, objFecha.Anio1Ant.RangoAct_FechaIni);
                MeMedicion48DTO semvar = UtilSemanalPR5.GULGenerarVariacionGWhXReporcodi(regArea.AreaOperativa, sem1, sem2, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.RangoAct_FechaIni);

                MeMedicion48DTO acum1 = UtilSemanalPR5.GULObtenerDataGWhXReporcodi(regArea.AreaOperativa, lacum1, PR5ConstanteFecha.ValorAnioAct_Acum, objFecha.AnioAct.Fecha_01Enero);
                MeMedicion48DTO acum2 = UtilSemanalPR5.GULObtenerDataGWhXReporcodi(regArea.AreaOperativa, lacum2, PR5ConstanteFecha.ValorAnio1Ant_Acum, objFecha.Anio1Ant.Fecha_01Enero);
                MeMedicion48DTO acumvar = UtilSemanalPR5.GULGenerarVariacionGWhXReporcodi(regArea.AreaOperativa, acum1, acum2, PR5ConstanteFecha.ValorAnioAct_Acum_Var, objFecha.AnioAct.Fecha_01Enero);

                listaReporteXArea.Add(sem1);
                listaReporteXArea.Add(sem2);
                listaReporteXArea.Add(semvar);
                listaReporteXArea.Add(acum1);
                listaReporteXArea.Add(acum2);
                listaReporteXArea.Add(acumvar);
            }

            //Data evolución semanal
            listaReporteEvolSemanal = new List<MeMedicion48DTO>();

            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);
            foreach (var regArea in listaRptArea)
            {
                var listaDataXArea = listaData.Where(x => x.AreaOperativa == regArea.AreaOperativa || "SEIN" == regArea.AreaOperativa).ToList();
                var listaEmpXArea = listaEmpresaArea.Where(x => x.AreaOperativa == regArea.AreaOperativa || "SEIN" == regArea.AreaOperativa).ToList();

                for (int c = 1; c <= anioSemIni.Item1; c++)
                {
                    DateTime factIni = objFecha.AnioAct.Sem01_FechaIni.AddDays(7 * (c - 1));
                    DateTime factFin = factIni.AddDays(6);
                    DateTime fantIni = objFecha.Anio1Ant.Sem01_FechaIni.AddDays(7 * (c - 1));
                    DateTime fantFin = fantIni.AddDays(6);

                    List<MeMedicion48DTO> listaAnioAct_SemActXSem = listaDataXArea.Where(x => x.Medifecha >= factIni && x.Medifecha <= factFin).ToList();
                    List<MeMedicion48DTO> listaAnio1Ant_SemActXSem = listaDataXArea.Where(x => x.Medifecha >= fantIni && x.Medifecha <= fantFin).ToList();

                    List<MeMedicion48DTO> lsemact = UtilSemanalPR5.GULConvertDataPtoMW48ToGWh(listaEmpXArea, listaAnioAct_SemActXSem, PR5ConstanteFecha.ValorAnioAct_SemAct, factIni);
                    List<MeMedicion48DTO> lsemant = UtilSemanalPR5.GULConvertDataPtoMW48ToGWh(listaEmpXArea, listaAnio1Ant_SemActXSem, PR5ConstanteFecha.ValorAnio1Ant_SemAct, fantIni);

                    MeMedicion48DTO sem1 = UtilSemanalPR5.GULObtenerDataGWhXReporcodi(regArea.AreaOperativa, lsemact, PR5ConstanteFecha.ValorAnioAct_SemAct, factIni);
                    MeMedicion48DTO sem2 = UtilSemanalPR5.GULObtenerDataGWhXReporcodi(regArea.AreaOperativa, lsemant, PR5ConstanteFecha.ValorAnio1Ant_SemAct, factIni);
                    MeMedicion48DTO semvar = UtilSemanalPR5.GULGenerarVariacionGWhXReporcodi(regArea.AreaOperativa, sem1, sem2, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, factIni);

                    if (regArea.AreaOperativa != "SEIN")
                    {
                        listaReporteEvolSemanal.Add(sem1);
                    }
                    if (regArea.AreaOperativa == "SEIN")
                    {
                        listaReporteEvolSemanal.Add(semvar);
                    }
                }
            }
        }

        private void GenerarExcelDemandaGUareaOperativa(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            int finalPosTabla = 0;
            InfSGIReporteVersionado objReporte = ListarDataVersionDemandaGUXAreaOperativa(objFiltro);

            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();

            //listado
            UtilSemanalPR5.ListarDemandaGUareaOperativa(ws, objFecha, objReporte.ListaEmpresaArea, objReporte.ListaReporteXPto, objReporte.ListaReporteXArea, listaItem, ref finalPosTabla);

            //grafico1
            UtilSemanalPR5.GenerarGraficoCharExcellDemandaGUEvolucionXPto(ws, objFecha, objReporte.ListaEmpresaArea, objReporte.ListaReporteXPto, ref finalPosTabla);

            //grafico2 
            UtilSemanalPR5.GenerarGraficoCharExcelLPieDemandaGU(ws, objFecha, objReporte.ListaReporteXArea, objFecha.AnioAct.RangoAct_FechaIni, PR5ConstanteFecha.ValorAnioAct_SemAct, 1, finalPosTabla);
            //grafico3
            UtilSemanalPR5.GenerarGraficoCharExcelLPieDemandaGU(ws, objFecha, objReporte.ListaReporteXArea, objFecha.Anio1Ant.RangoAct_FechaIni, PR5ConstanteFecha.ValorAnio1Ant_SemAct, 2, finalPosTabla);

            //grafico4
            UtilSemanalPR5.GenerarGraficoCharExcelBarraDemandaGUEvolucionSemanal(ws, objFecha, objReporte.ListaReporteEvolSemanal, finalPosTabla);
        }

        #endregion

        #endregion

        #region E. HIDROLOGÍA PARA LA OPERACIÓN DEL SEIN

        #region Metodos volumen

        /// <summary>
        /// Retorna las mediciones de las lagunas  del reporte Evolucion de Embalses  y Lagunas
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaGrafico"></param>
        /// <param name="ireporcodi"></param>
        public void ListarDataEvolucionVolumenUtilSemanal(FechasPR5 objFecha, out List<GraficoWeb> listaGrafico, out List<MeMedicion1DTO> listDataEmbalsesAll, int ireporcodi)
        {
            int tipoReporte = objFecha.TipoReporte;

            //la última semana
            DateTime primerDiaDelaSemana = EPDate.f_fechainiciosemana(objFecha.AnioAct.Fecha_Final.AddDays(-6));
            DateTime ultimoDiaDelaSemana = primerDiaDelaSemana.AddDays(6);

            List<MeReporteDTO> listaReporteBD = ListMeReportes();

            List<int> lreporcodi = new List<int>();
            List<SiMenureporteGraficoDTO> ListaGraficosVisibles = ListSiMenureporteGraficos().Where(x => x.Mrepcodi == ireporcodi && x.Mrgrestado == 1).ToList();
            if (ListaGraficosVisibles.Count > 0)
            {
                lreporcodi = ListaGraficosVisibles.Select(x => x.Reporcodi).ToList();
            }
            //lreporcodi = new List<int>() {135 }; //TODO quitar linea de prueba
            listaGrafico = new List<GraficoWeb>();
            listDataEmbalsesAll = new List<MeMedicion1DTO>();
            int contador = 1;
            foreach (var reporcodi in lreporcodi)
            {
                var objRpt = listaReporteBD.Find(x => x.Reporcodi == reporcodi);

                List<MeReporptomedDTO> listaPuntos = servFormatoRep.ObtenerPuntosReporteMedicion(reporcodi);

                List<MeMedicion1DTO> listDataEmbalses = ObtenerDataVolUtilPorAnios(listaPuntos, primerDiaDelaSemana, ultimoDiaDelaSemana);
                foreach (var item in listDataEmbalses)
                {
                    item.Reporcodi = reporcodi;
                }
                listaGrafico.Add(UtilSemanalPR5.GenerarGWebVolumenUtilLagunasEmbalses(objFecha, listDataEmbalses, string.Format("grafico_{0}", contador), objRpt.Repornombre, "", reporcodi));
                listDataEmbalsesAll.AddRange(listDataEmbalses);
                contador++;
            }

        }

        /// <summary>
        /// ListarGraficosVisiblesDAT
        /// </summary>
        /// <param name="ireporcodi"></param>
        /// <param name="lreporcodi"></param>
        public void ListarGraficosVisiblesDAT(int ireporcodi, out List<int> lreporcodi)
        {
            List<int> lreporcodiAux = new List<int>();
            List<SiMenureporteGraficoDTO> ListaGraficosVisibles = ListSiMenureporteGraficos().Where(x => x.Mrepcodi == ireporcodi && x.Mrgrestado == 1).ToList();
            if (ListaGraficosVisibles.Count > 0)
            {
                lreporcodiAux = ListaGraficosVisibles.Select(x => x.Reporcodi).ToList();
            }
            lreporcodi = lreporcodiAux;
        }

        /// <summary>
        /// Retorna las mediciones de la laguna Enel  del reporte Evolucion de Embalses  y Lagunas
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="lstRepPtoEmbalsesLagunas"></param>
        /// <param name="listaDataXPto"></param>
        public void ListarDataCuadroVolumenUtilSemanal(FechasPR5 objFecha, int mrepcodi, out List<MeReporptomedDTO> lstRepPtoEmbalsesLagunas, out List<ResultadoTotalGeneracion> listaDataXPto)
        {
            int reporcodi = 0;
            if (ConstantesInformeSemanalPR5.IndexSemVolUtilEmbLag == mrepcodi) reporcodi = ConstantesPR5ReportesServicio.IdReporteVolumenUtilInformeSemanal;
            if (ConstantesEjecutivoSemanalPR5.IndexVolUtilEmbLag == mrepcodi) reporcodi = ConstantesPR5ReportesServicio.IdReporteVolumenUtilEjecutivoSemanal;
            if (ConstantesInformeMensual.IndexMensualVolUtilEmbLag == mrepcodi) reporcodi = ConstantesPR5ReportesServicio.IdReporteVolumenUtilInformeMensual;
            if (ConstantesInformeEjecutivoMensual.IndexVolumenEmbLag == mrepcodi) reporcodi = ConstantesPR5ReportesServicio.IdReporteVolumenUtilEjecutivoMensual;
            if (ConstantesInformeAnual.IndexAnualEvolVolAlmacenados == mrepcodi) reporcodi = ConstantesPR5ReportesServicio.IdReporteVolumenUtilInformeAnual;

            //listado de puntos
            lstRepPtoEmbalsesLagunas = servFormatoRep.GetListaPuntoFromMeReporptomed(reporcodi,
                ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);

            DateTime fechaIniAnio0 = objFecha.AnioAct.Fecha_Inicial.Date;
            DateTime fechaFinAnio0 = objFecha.AnioAct.Fecha_Final.Date;

            DateTime fechaIniAnio1 = objFecha.Anio1Ant.Fecha_Inicial.Date;
            DateTime fechaFinAnio1 = objFecha.Anio1Ant.Fecha_Final.Date;

            List<MeReporptomedDTO> listaPuntos = servFormatoRep.ObtenerPuntosReporteMedicion(reporcodi);
            //listaPuntos = listaPuntos.Where(x=>x.Ptomedicodi == 40381).ToList();
            var listaActSemIni = ObtenerDataEjecutadoHistorico(listaPuntos, fechaIniAnio0, fechaIniAnio0, ConstantesAppServicio.TipoinfocodiHm3);
            var listaActSemFin = ObtenerDataEjecutadoHistorico(listaPuntos, fechaFinAnio0, fechaFinAnio0, ConstantesAppServicio.TipoinfocodiHm3);
            List<EqPropequiDTO> listaCapacidadAct = this.ListarCapacidadEmbalseLaguna(fechaFinAnio0);

            var lista1AntSemIni = ObtenerDataEjecutadoHistorico(listaPuntos, fechaIniAnio1, fechaIniAnio1, ConstantesAppServicio.TipoinfocodiHm3);
            var lista1AntSemFin = ObtenerDataEjecutadoHistorico(listaPuntos, fechaFinAnio1, fechaFinAnio1, ConstantesAppServicio.TipoinfocodiHm3);
            List<EqPropequiDTO> listaCapacidadAnt = this.ListarCapacidadEmbalseLaguna(fechaFinAnio1);

            listaDataXPto = new List<ResultadoTotalGeneracion>();
            foreach (var reg in lstRepPtoEmbalsesLagunas)
            {
                if (reg.Ptomedicodi == 46700)
                { }
                var listaPtoXCalculado = listaPuntos.Where(x => x.Ptomedicodi == reg.Ptomedicodi).ToList();
                var lstPtomedicodi = listaPtoXCalculado.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                List<IMeMedicion> listaActSemIniXPto = listaActSemIni.Where(x => lstPtomedicodi.Contains(x.Ptomedicodi)).ToList();
                List<IMeMedicion> listaActSemFinXPto = listaActSemFin.Where(x => lstPtomedicodi.Contains(x.Ptomedicodi)).ToList();
                decimal? capacidadXPtoActSem = UtilSemanalPR5.ObtenerValorCapacidadLagunaXPto(listaPtoXCalculado, listaCapacidadAct);

                List<IMeMedicion> lista1AntSemIniXPto = lista1AntSemIni.Where(x => lstPtomedicodi.Contains(x.Ptomedicodi)).ToList();
                List<IMeMedicion> lista1AntSemFinXPto = lista1AntSemFin.Where(x => lstPtomedicodi.Contains(x.Ptomedicodi)).ToList();
                decimal? capacidadXPto1AntSem = UtilSemanalPR5.ObtenerValorCapacidadLagunaXPto(listaPtoXCalculado, listaCapacidadAnt);

                //
                decimal valorActSemIni = UtilSemanalPR5.ObtenerValorVolumenUtil(listaPtoXCalculado, listaActSemIniXPto);
                decimal? porcLlenadoActSemIni = capacidadXPtoActSem.GetValueOrDefault(0) != 0 ? 100 * valorActSemIni / capacidadXPtoActSem : null;
                decimal valorActSemFin = UtilSemanalPR5.ObtenerValorVolumenUtil(listaPtoXCalculado, listaActSemFinXPto);
                decimal? porcLlenadoActSemFin = capacidadXPtoActSem.GetValueOrDefault(0) != 0 ? 100 * valorActSemFin / capacidadXPtoActSem : null;

                decimal valor1AntSemIni = UtilSemanalPR5.ObtenerValorVolumenUtil(listaPtoXCalculado, lista1AntSemIniXPto);
                decimal? porcLlenado1AntSemIni = capacidadXPto1AntSem.GetValueOrDefault(0) != 0 ? 100 * valor1AntSemIni / capacidadXPto1AntSem : null;
                decimal valor1AntSemFin = UtilSemanalPR5.ObtenerValorVolumenUtil(listaPtoXCalculado, lista1AntSemFinXPto);
                decimal? porcLlenado1AntSemFin = capacidadXPto1AntSem.GetValueOrDefault(0) != 0 ? 100 * valor1AntSemFin / capacidadXPto1AntSem : null;

                //si el valor de porcentaje de llenado es mayor a 100% debe colocarse 100%
                porcLlenadoActSemIni = porcLlenadoActSemIni > 100 ? 100 : porcLlenadoActSemIni;
                porcLlenadoActSemFin = porcLlenadoActSemFin > 100 ? 100 : porcLlenadoActSemFin;
                porcLlenado1AntSemIni = porcLlenado1AntSemIni > 100 ? 100 : porcLlenado1AntSemIni;
                porcLlenado1AntSemFin = porcLlenado1AntSemFin > 100 ? 100 : porcLlenado1AntSemFin;

                //
                var regSemIni = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnioAct_FechaInicial, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, valorActSemIni);
                var regSemIniVar = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnioAct_FechaInicial_Var, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, porcLlenadoActSemIni);
                var regSemFin = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnioAct_FechaFinal, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, valorActSemFin);
                var regSemFinVar = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnioAct_FechaFinal_Var, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, porcLlenadoActSemFin);
                var regSemCap = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnioAct_Total, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, capacidadXPtoActSem);

                var reg1AntIni = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnio1Ant_FechaInicial, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, valor1AntSemIni);
                var reg1AntIniVar = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnio1Ant_FechaInicial_Var, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, porcLlenado1AntSemIni);
                var reg1AntFin = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnio1Ant_FechaFinal, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, valor1AntSemFin);
                var reg1AntFinVar = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnio1Ant_FechaFinal_Var, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, porcLlenado1AntSemFin);
                var reg1AntCap = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnio1Ant_Total, objFecha.AnioAct.Fecha_Inicial, reg.Ptomedicodi, capacidadXPto1AntSem);

                //mensual o anual
                var regRangActVar = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regSemFin, reg1AntFin, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.Fecha_Inicial);

                listaDataXPto.Add(regSemIni);
                listaDataXPto.Add(regSemIniVar);
                listaDataXPto.Add(regSemFin);
                listaDataXPto.Add(regSemFinVar);
                listaDataXPto.Add(regSemCap);

                listaDataXPto.Add(reg1AntIni);
                listaDataXPto.Add(reg1AntIniVar);
                listaDataXPto.Add(reg1AntFin);
                listaDataXPto.Add(reg1AntFinVar);
                listaDataXPto.Add(reg1AntCap);

                listaDataXPto.Add(regRangActVar);
            }

        }


        private List<IMeMedicion> ObtenerDataVolumenUtil(List<MeReporptomedDTO> lstReporte, DateTime fechaInicio, DateTime fechaFin, int tipoinfocodi)
        {
            var lista = new List<IMeMedicion>();
            var lstMed1 = lstReporte.Where(x => x.Repptotabmed == (int)ConstantesSiosein2.TablaOrigenPunto.Medicion1).Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
            var lstMed24 = lstReporte.Where(x => x.Repptotabmed == (int)ConstantesSiosein2.TablaOrigenPunto.Medicion24).Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);

            if (lstMed1.Any())
            {
                List<MeMedicion1DTO> listaMed1 = FactorySic.GetMeMedicion1Repository()
                    .GetDataEjecCaudales(fechaInicio, fechaFin, string.Join(",", lstMed1), ConstantesSioSein.LectcodiEjecutadoHisto, tipoinfocodi);
                lista.AddRange(listaMed1);
            }

            if (lstMed24.Any())
            {
                List<MeMedicion24DTO> listaMed24 = FactorySic.GetMeMedicion24Repository()
                    .ObtenerVolumenUtil(fechaInicio, fechaFin, ConstantesSioSein.LectcodiEjecutadoHisto, tipoinfocodi, string.Join(",", lstMed24));
                lista.AddRange(listaMed24);
            }
            return lista;
        }

        private List<MeMedicion1DTO> ObtenerDataVolUtilPorAnios(List<MeReporptomedDTO> listaPuntosLagunasEmbalses, DateTime fechaIni, DateTime fechaFin)
        {
            int nSemIni = EPDate.f_numerosemana_y_anho(fechaIni).Item1;
            int anioSemIni = EPDate.f_numerosemana_y_anho(fechaIni).Item2;

            int nSemFin = EPDate.f_numerosemana_y_anho(fechaFin).Item1;
            int anioSemFin = EPDate.f_numerosemana_y_anho(fechaFin).Item2;

            var fechaIniAct = EPDate.f_fechainiciosemana(anioSemFin, 1);
            var fechaIni1YAnt = EPDate.f_fechainiciosemana(anioSemFin - 1, 1);
            var fechaIni2YAnt = EPDate.f_fechainiciosemana(anioSemFin - 2, 1);

            var fechaFinAct = EPDate.f_fechafinsemana(anioSemFin, 1);
            var fechaFin1YAnt = EPDate.f_fechafinsemana(anioSemFin - 1, 1);
            var fechaFin2YAnt = EPDate.f_fechafinsemana(anioSemFin - 2, 1);

            int nsemanasYAct = EPDate.f_numerosemana(fechaFin);
            int nsemanas1YAnt = EPDate.TotalSemanasEnAnho(anioSemFin - 1, (int)DayOfWeek.Saturday);
            int nsemanas2YAnt = EPDate.TotalSemanasEnAnho(anioSemFin - 2, (int)DayOfWeek.Saturday);

            Dictionary<DateTime, int> dicAnioNSemana;

            DateTime fechaIni3YAnt, fechaFin3YAnt;
            int nsemanas3YAnt;
            // reporte mensual y reportes semanales     //Para los informes semanales e informe mensual habran 3 años anteriores

            fechaIni3YAnt = EPDate.f_fechainiciosemana(anioSemFin - 3, 1);
            fechaFin3YAnt = EPDate.f_fechafinsemana(anioSemFin - 3, 1);
            nsemanas3YAnt = EPDate.TotalSemanasEnAnho(anioSemFin - 3, (int)DayOfWeek.Saturday);

            var fechaIniSemana = fechaIni3YAnt;
            var fechaFinSemana = EPDate.f_fechafinsemana(fechaFin);

            dicAnioNSemana = new Dictionary<DateTime, int>()
              {
                  { fechaFinAct, nsemanasYAct },
                  { fechaFin1YAnt, nsemanas1YAnt },
                  { fechaFin2YAnt, nsemanas2YAnt },
                  { fechaFin3YAnt, nsemanas3YAnt }
              };

            //puntos
            var listaPuntoAgrp = listaPuntosLagunasEmbalses.Select(x => new
            {
                Ptomedicodi = x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado,
                x.PtomediCalculado,
                x.Relptofactor,
                x.Repptoindcopiado
            }).ToList();

            //data
            var lstVolUtilSemanalXAnio = ObtenerDataEjecutadoHistorico(listaPuntosLagunasEmbalses, fechaIniSemana, fechaFinSemana, ConstantesAppServicio.TipoinfocodiHm3);

            //generar data por dia sabado
            List<MeMedicion1DTO> listaIniSemana = new List<MeMedicion1DTO>();
            foreach (var nsem in dicAnioNSemana)
            {
                int anio = nsem.Key.Year;
                for (int numSem = 1; numSem <= nsem.Value; numSem++)
                {
                    if (anio == 2023 && numSem == 14)
                    { }
                    var fechaIniSem = EPDate.f_fechainiciosemana(anio, numSem);

                    var lstVolUtilSemanal = lstVolUtilSemanalXAnio.Where(x => x.Medifecha >= fechaIniSem && x.Medifecha <= fechaIniSem.AddDays(6)).ToList();

                    decimal? valorUtilSem = 0M;
                    foreach (var vol in lstVolUtilSemanal)
                    {
                        var valor = UtilSemanalPR5.ObtenerValorVolumenUtil(vol);
                        var punto = listaPuntoAgrp.Find(x => x.Ptomedicodi == vol.Ptomedicodi);
                        valorUtilSem += punto.PtomediCalculado == ConstantesAppServicio.NO ? valor : valor * punto.Relptofactor;
                    }

                    listaIniSemana.Add(new MeMedicion1DTO() { Medifecha = fechaIniSem, Anio = anio, Semana = numSem, H1 = (valorUtilSem == 0 ? null : valorUtilSem) });
                }
            }

            return listaIniSemana;
        }

        /// <summary>
        /// ObtenerEmbalsesDiariosPorReporte
        /// </summary>
        /// <param name="reporcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeReporptomedDTO> ObtenerEmbalsesDiariosPorReporte(int reporcodi, DateTime fechaInicio, DateTime fechaFin)
        {
            List<MeReporptomedDTO> listaPuntos = servFormatoRep.ObtenerPuntosReporteMedicion(reporcodi);
            return ObtenerEmbalseDiariosPorPunto(fechaInicio, fechaFin, listaPuntos);
        }

        /// <summary>
        /// ObtenerEmbalseDiariosPorPunto
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaPuntos"></param>
        /// <returns></returns>
        public List<MeReporptomedDTO> ObtenerEmbalseDiariosPorPunto(DateTime fechaInicio, DateTime fechaFin, List<MeReporptomedDTO> listaPuntos)
        {
            List<IMeMedicion> listaData = ObtenerDataEjecutadoHistorico(listaPuntos, fechaInicio, fechaFin, ConstantesAppServicio.TipoinfocodiHm3);
            List<MeReporptomedDTO> lstVolumenEmbalses = UtilSemanalPR5.CalcularEmbalsesDiarios(listaPuntos, listaData, fechaInicio, fechaFin);
            return lstVolumenEmbalses;
        }

        /// <summary>
        /// ObtenerEmbalsesMensuales
        /// </summary>
        /// <param name="reporcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeReporptomedDTO> ObtenerEmbalsesMensuales(int reporcodi, DateTime fechaInicio, DateTime fechaFin)
        {
            List<MeReporptomedDTO> listaPuntos = servFormatoRep.ObtenerPuntosReporteMedicion(reporcodi);
            List<IMeMedicion> lstVolumenUtil = ObtenerDataVolumenUtil(listaPuntos, fechaInicio, fechaFin, ConstantesAppServicio.TipoinfocodiHm3);
            List<MeReporptomedDTO> listaVolumenEmbalses = new List<MeReporptomedDTO>();

            foreach (var agrpPuntos in listaPuntos.GroupBy(x => x.Ptomedicodi))
            {
                var puntorep = agrpPuntos.First();

                var lstPtomedicodi = agrpPuntos.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                List<IMeMedicion> lstVolUtil = lstVolumenUtil.Where(x => lstPtomedicodi.Contains(x.Ptomedicodi)).ToList();
                decimal valor = UtilSemanalPR5.ObtenerValorVolumenUtil(agrpPuntos.ToList(), lstVolUtil);

                listaVolumenEmbalses.Add(new MeReporptomedDTO()
                {
                    Ptomedicodi = agrpPuntos.Key,
                    Repptonomb = puntorep.Repptonomb,
                    Meditotal = valor,
                    Osicodi = puntorep.Osicodi,
                });

            }
            return listaVolumenEmbalses;
        }

        /// <summary>
        /// Invoca a las funciones que generarán el excel para el reporte de volumen util de embalses y lagunas
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="parametro"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="objFiltro"></param>
        public void GenerarExcelVolUtilEmbalsesLagunas(ExcelWorksheet ws, FechasPR5 objFecha, int parametro, int mrepcodi, InfSGIFiltroReporte objFiltro)
        {
            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();

            #region Titulo y subtitulo

            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;
            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);

            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "14"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "11"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) { orden = "10"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) { orden = "9"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoMensual) { orden = "9"; }

            ws.Cells[4, 2].Value = UtilSemanalPR5.EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = UtilSemanalPR5.EscogerTitulosSubtitulos(orden, parametro == 1 ? 1 : 2, tipoVistaReporte, tipoDoc, listaItem); //subtitulo
            #endregion

            objFiltro.Mrepcodi = mrepcodi;
            if (parametro == 1) //tablas
            {
                //5.1 Volumen útil de los embalses y lagunas (Millones de m3)

                InfSGIReporteVersionado objReporte = ListarDataVersionVolumenUtilEmbalsesLagunas(objFiltro);
                TablaReporte dataTabla = UtilSemanalPR5.ObtenerDataTablaVolumenUtilEmbalsesLagunas(objFecha, objReporte.ListaPtoEmbalsesLagunas, objReporte.ListaDataXPto);
                dataTabla.ListaItem = ListarItemFromSiMenureporte();
                int ultFilaTabla;
                UtilSemanalPR5.GenerarCharExcelListadoVolUtilEmbalsesLagunas(ws, objFecha, dataTabla, out ultFilaTabla);
            }
            else
            {
                //graficos
                int filaIniGrafico;
                int filaIniData = 12;
                int coluIniData;
                int sepColu = 6;
                int sepfila = 28;
                int sepfilaX = 0;
                int numGrafico;

                InfSGIReporteVersionado resultado = ListarDataVersionEvolucionVolumenUtilSemanal(objFiltro);

                filaIniGrafico = 4 + sepfilaX;
                coluIniData = 27;
                numGrafico = 1;

                foreach (var objGraf in resultado.ListaGrafico)
                {
                    UtilSemanalPR5.GenerarCharExcelGraficoVolUtilEmbalsesLagunas(ws, objFecha, objGraf, filaIniData, coluIniData);
                    filaIniGrafico = filaIniGrafico + sepfila;
                    coluIniData = coluIniData + sepColu;
                    numGrafico++;
                }

                //quitar los graficos no usados
                for (int i = numGrafico; i <= 24; i++)
                    ws.Drawings.Remove("grafico_" + i);
            }
        }

        #endregion

        #region E.1. Volumen útil de los embalses y lagunas (Mm3)

        /// <summary>
        /// ListarDataVersionVolumenUtilEmbalsesLagunas
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionVolumenUtilEmbalsesLagunas(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarDataCuadroVolumenUtilSemanal(objFiltro.ObjFecha, objFiltro.Mrepcodi, out List<MeReporptomedDTO> lstRepPtoEmbalsesLagunas, out List<ResultadoTotalGeneracion> listaDataXPto);
                objReporte.ListaPtoEmbalsesLagunas = lstRepPtoEmbalsesLagunas;
                objReporte.ListaDataXPto = listaDataXPto;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).Where(x => x.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiEmbalseyLaguna).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);
                GetDataVersionVolumenUtilEmbalsesLagunas(listaDat, listaDatDetalle, out List<MeReporptomedDTO> lstRepPtoEmbalsesLagunas,
                                                            out List<ResultadoTotalGeneracion> listaDataXPto, objFiltro);

                objReporte.ListaPtoEmbalsesLagunas = lstRepPtoEmbalsesLagunas;
                objReporte.ListaDataXPto = listaDataXPto;
            }

            return objReporte;
        }

        private void GetDataVersionVolumenUtilEmbalsesLagunas(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<MeReporptomedDTO> lstRepPtoEmbalsesLagunas,
                                                            out List<ResultadoTotalGeneracion> listaDataXPto, InfSGIFiltroReporte objFiltro)
        {
            bool IsAnioActual = true;
            bool EsprimerRegistro = true;
            lstRepPtoEmbalsesLagunas = new List<MeReporptomedDTO>();
            listaDataXPto = new List<ResultadoTotalGeneracion>();
            foreach (var objDat in listaDat)
            {
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoAnioAnteriorVolUtil) { IsAnioActual = false; EsprimerRegistro = false; }
                else { IsAnioActual = true; EsprimerRegistro = true; }
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {
                    int tipoResultadoFecha = 0;
                    if (IsAnioActual)
                    {
                        if (EsprimerRegistro)
                        {
                            MeReporptomedDTO PtoEmbalsesLagunas = new MeReporptomedDTO()
                            {
                                Repptonomb = objDat.Verdatvalor,
                                Ptomedicodi = objDat.Verdatid
                            };
                            lstRepPtoEmbalsesLagunas.Add(PtoEmbalsesLagunas);
                            EsprimerRegistro = false;
                        }

                        switch (objDatDet.Vercnpcodi)
                        {
                            case ConstantesConceptoVersion.ConceptoVolumenUtilSemanaInicio:
                                tipoResultadoFecha = objFiltro.ObjFecha.TipoReporte == ConstantesSioSein.ReptipcodiAnual ? PR5ConstanteFecha.ValorAnio1Ant_FechaFinal : PR5ConstanteFecha.ValorAnioAct_FechaInicial;
                                break;
                            case ConstantesConceptoVersion.ConceptoPorcentajeLenadoInicioSemana:
                                tipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_FechaInicial_Var;
                                break;
                            case ConstantesConceptoVersion.ConceptoVolumenUtilSemanaFin:
                                tipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_FechaFinal;
                                break;
                            case ConstantesConceptoVersion.ConceptoPorcentajeLenadoFinSemana:
                                tipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_FechaFinal_Var;
                                break;
                            case ConstantesConceptoVersion.ConceptoCapacidadLagunaEmbalse:

                                tipoResultadoFecha = objFiltro.ObjFecha.TipoReporte == ConstantesSioSein.ReptipcodiAnual ? PR5ConstanteFecha.ValorAnioAct_SemAct_Var : PR5ConstanteFecha.ValorAnioAct_Total;
                                break;
                        }
                    }
                    else
                    {
                        switch (objDatDet.Vercnpcodi)
                        {
                            case ConstantesConceptoVersion.ConceptoVolumenUtilSemanaInicio:
                                tipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_FechaInicial;
                                break;
                            case ConstantesConceptoVersion.ConceptoPorcentajeLenadoInicioSemana:
                                tipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_FechaInicial_Var;
                                break;
                            case ConstantesConceptoVersion.ConceptoVolumenUtilSemanaFin:
                                tipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_FechaFinal;
                                break;
                            case ConstantesConceptoVersion.ConceptoPorcentajeLenadoFinSemana:
                                tipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_FechaFinal_Var;
                                break;
                            case ConstantesConceptoVersion.ConceptoCapacidadLagunaEmbalse:
                                if (objFiltro.ObjFecha.TipoReporte == 2 || objFiltro.ObjFecha.TipoReporte == 3)// Semanal / Ejecutivo semanal 
                                {
                                    tipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Total;
                                }
                                else
                                {
                                    tipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                                }

                                break;
                        }
                    }

                    ResultadoTotalGeneracion DataXPto = new ResultadoTotalGeneracion();
                    DataXPto.Meditotal = objDatDet.ValorDecimal;
                    DataXPto.TipoResultadoFecha = tipoResultadoFecha;
                    DataXPto.Ptomedicodi = objDat.Verdatid;
                    listaDataXPto.Add(DataXPto);
                }
            }

        }

        #endregion

        #region E.2. Evolucion de volumenes de embalses y lagunas (Mm3)

        /// <summary>
        /// ListarDataVersionEvolucionVolumenUtilSemanal
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionEvolucionVolumenUtilSemanal(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            List<GraficoWeb> ListaGraficoDat = new List<GraficoWeb>();
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarDataEvolucionVolumenUtilSemanal(objFiltro.ObjFecha, out List<GraficoWeb> listaGrafico, out List<MeMedicion1DTO> listDataEmbalsesAll, objFiltro.Mrepcodi);
                objReporte.ListaGrafico = listaGrafico;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiEmbalseyLaguna).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);
                int contador = 1;
                foreach (var objDat in listaDat)
                {
                    List<MeMedicion1DTO> listDataEmbalses = new List<MeMedicion1DTO>();
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        var tupla = EPDate.f_numerosemana_y_anho(objDatDet.Vdatdtfecha.Value);
                        listDataEmbalses.Add(new MeMedicion1DTO() { Medifecha = objDatDet.Vdatdtfecha.Value, Anio = tupla.Item2, Semana = tupla.Item1, H1 = objDatDet.ValorDecimal });
                    }
                    ListaGraficoDat.Add(UtilSemanalPR5.GenerarGWebVolumenUtilLagunasEmbalses(objFiltro.ObjFecha, listDataEmbalses, string.Format("grafico_{0}", contador), objDat.Verdatvalor, "", objDat.Verdatid));
                    contador++;
                }
                objReporte.ListaGrafico = ListaGraficoDat;
            }

            //orden
            objReporte.ListaGrafico = objReporte.ListaGrafico.OrderBy(x => x.IdGrafico).ToList();

            return objReporte;
        }

        #endregion

        #region Métodos Caudales

        /// <summary>
        /// ListarDataCuadroCaudalSemanal
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaTabla"></param>
        /// <param name="mrepcodi"></param>
        public void ListarDataCuadroCaudalSemanal(FechasPR5 objFecha, out List<TablaReporte> listaTabla, int mrepcodi)
        {
            listaTabla = new List<TablaReporte>();

            DateTime primerDiaDeSemana = objFecha.AnioAct.Fecha_Inicial.Date;
            DateTime ultimoDiaDeSemana = objFecha.AnioAct.Fecha_Final.Date;

            DateTime primerDiaDeSemanaAnt = objFecha.Anio1Ant.Fecha_Inicial.Date;
            DateTime ultimoDiaDeSemanaAnt = objFecha.Anio1Ant.Fecha_Final.Date;

            List<int> lreporcodi = new List<int>();
            if (ConstantesInformeSemanalPR5.IndexSemPromCaudales == mrepcodi) lreporcodi = new List<int>() { ConstantesPR5ReportesServicio.IdReporteCaudalNaturalInformeSemanal, ConstantesPR5ReportesServicio.IdReporteCaudalDescargadoInformeSemanal };
            if (ConstantesEjecutivoSemanalPR5.IndexPromCaudales == mrepcodi) lreporcodi = new List<int>() { ConstantesPR5ReportesServicio.IdReporteCaudalNaturalEjecutivoSemanal, ConstantesPR5ReportesServicio.IdReporteCaudalDescargadoEjecutivoSemanal };
            if (ConstantesInformeMensual.IndexMensualPromMensualCaudales == mrepcodi) lreporcodi = new List<int>() { ConstantesPR5ReportesServicio.IdReporteCaudalNaturalInformeMensual, ConstantesPR5ReportesServicio.IdReporteCaudalDescargadoInformeMensual };
            if (ConstantesInformeEjecutivoMensual.IndexPromedioCaudales == mrepcodi) lreporcodi = new List<int>() { ConstantesPR5ReportesServicio.IdReporteCaudalNaturalEjecutivoMensual, ConstantesPR5ReportesServicio.IdReporteCaudalDescargadoEjecutivoMensual };
            if (ConstantesInformeAnual.IndexAnualEvolCaudales == mrepcodi) lreporcodi = new List<int>() { ConstantesPR5ReportesServicio.IdReporteCaudalNaturalInformeAnual, ConstantesPR5ReportesServicio.IdReporteCaudalDescargadoInformeAnual };

            int cont = 0;
            foreach (var reporcodi in lreporcodi)
            {
                //data para el listado
                List<MeReporptomedDTO> listaPuntos = servFormatoRep.ObtenerPuntosReporteMedicion(reporcodi);
                //listaPuntos = listaPuntos.Where(x=>x.Ptomedicodi == 40317).ToList();
                var lstDataCaudalesAct = ObtenerDataEjecutadoHistorico(listaPuntos, primerDiaDeSemana, ultimoDiaDeSemana, ConstantesAppServicio.TipoinfocodiM3s);
                var lstDataCaudalesAnt = ObtenerDataEjecutadoHistorico(listaPuntos, primerDiaDeSemanaAnt, ultimoDiaDeSemanaAnt, ConstantesAppServicio.TipoinfocodiM3s);
                var listaPromCaudales = UtilSemanalPR5.ObtenerDataPromedioXFechaCaudalesXPunto(listaPuntos, lstDataCaudalesAct, lstDataCaudalesAnt, primerDiaDeSemana, ultimoDiaDeSemana);

                //Obtener datos
                var listaPtoSinDuplicado = listaPuntos.GroupBy(x => x.Ptomedicodi).Select(x => x.First()).ToList();
                List<ResultadoTotalGeneracion> listaDataXPto = new List<ResultadoTotalGeneracion>();
                foreach (var item in listaPtoSinDuplicado)
                {
                    var lstValorAct = listaPromCaudales.Where(x => x.Item1 == item.Ptomedicodi).ToList();
                    decimal? valorAct = UtilSemanalPR5.ObtenerTotalValor(lstValorAct, 2);
                    var lstValorAnt = listaPromCaudales.Where(x => x.Item1 == item.Ptomedicodi).ToList();
                    decimal? valorAnt = UtilSemanalPR5.ObtenerTotalValor(lstValorAnt, 3);
                    decimal? variacion = UtilEjecMensual.VariacionPorcentual(valorAct, valorAnt);

                    var regSemFin = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnioAct_FechaFinal, objFecha.AnioAct.Fecha_Inicial, item.Ptomedicodi, valorAct);
                    var reg1AntFin = UtilSemanalPR5.GetObjetoResultado(PR5ConstanteFecha.ValorAnio1Ant_FechaFinal, objFecha.AnioAct.Fecha_Inicial, item.Ptomedicodi, valorAnt);
                    var regRangActVar = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regSemFin, reg1AntFin, PR5ConstanteFecha.ValorAnioAct_SemAct_Var, objFecha.AnioAct.Fecha_Inicial);

                    listaDataXPto.Add(regSemFin);
                    listaDataXPto.Add(reg1AntFin);
                    listaDataXPto.Add(regRangActVar);

                }

                bool esNatural = (cont == 0);
                //Generar tabla para html y excel
                TablaReporte objTabla = UtilSemanalPR5.ObtenerDataTablaPromedioCaudalEmbalsesLagunas(esNatural, objFecha, listaPtoSinDuplicado, listaDataXPto);
                listaTabla.Add(objTabla);
                cont++;
            }
        }

        private void ListarDataEvolucionCaudalSemanal(FechasPR5 objFecha, out List<GraficoWeb> listaGrafico, out List<MeMedicion1DTO> listDataAll, int ireporcodi)
        {
            //la última semana
            DateTime primerDiaDelaSemana = EPDate.f_fechainiciosemana(objFecha.AnioAct.Fecha_Final.AddDays(-6));
            DateTime ultimoDiaDelaSemana = primerDiaDelaSemana.AddDays(6);

            List<MeReporteDTO> listaReporteBD = ListMeReportes();

            List<int> lreporcodi = new List<int>();

            List<SiMenureporteGraficoDTO> ListaGraficosVisibles = ListSiMenureporteGraficos().Where(x => x.Mrepcodi == ireporcodi && x.Mrgrestado == 1).ToList();
            if (ListaGraficosVisibles.Count > 0)
            {
                lreporcodi = ListaGraficosVisibles.Select(x => x.Reporcodi).ToList();
            }
            //lreporcodi = new List<int>() { 122 }; //TODO comentar esta linea de prueba
            listaGrafico = new List<GraficoWeb>();
            listDataAll = new List<MeMedicion1DTO>();
            foreach (var reporcodi in lreporcodi)
            {
                var objRpt = listaReporteBD.Find(x => x.Reporcodi == reporcodi);

                //data para caudal 
                List<MeReporptomedDTO> listaPuntos = servFormatoRep.ObtenerPuntosReporteMedicion(reporcodi);
                var lstDataCaudalesAct = ObtenerDataCaudalesPorSemana(primerDiaDelaSemana, ultimoDiaDelaSemana, listaPuntos);
                foreach (var item in lstDataCaudalesAct)
                {
                    item.Reporcodi = reporcodi;
                }

                var objGraf = UtilSemanalPR5.GenerarGWebPromedioSemanalCaudales(objFecha, lstDataCaudalesAct, "grafico", objRpt.Repornombre, "", reporcodi);
                listaGrafico.Add(objGraf);
                listDataAll.AddRange(lstDataCaudalesAct);
            }
        }

        /// <summary>
        /// Obtiene el caudal por semana por  punto para el reporte promedio caudales
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaPuntosCaudales"></param>
        /// <returns></returns>
        private List<MeMedicion1DTO> ObtenerDataCaudalesPorSemana(DateTime fechaIni, DateTime fechaFin, List<MeReporptomedDTO> listaPuntosCaudales)
        {
            int nSemIni = EPDate.f_numerosemana_y_anho(fechaIni).Item1;
            int anioSemIni = EPDate.f_numerosemana_y_anho(fechaIni).Item2;

            int nSemFin = EPDate.f_numerosemana_y_anho(fechaFin).Item1;
            int anioSemFin = EPDate.f_numerosemana_y_anho(fechaFin).Item2;


            var fechaIniAct = EPDate.f_fechainiciosemana(anioSemFin, 1);
            var fechaIni1YAnt = EPDate.f_fechainiciosemana(anioSemFin - 1, 1);
            var fechaIni2YAnt = EPDate.f_fechainiciosemana(anioSemFin - 2, 1);

            var fechaFinAct = EPDate.f_fechafinsemana(anioSemFin, 1);
            var fechaFin1YAnt = EPDate.f_fechafinsemana(anioSemFin - 1, 1);
            var fechaFin2YAnt = EPDate.f_fechafinsemana(anioSemFin - 2, 1);

            int nsemanasYAct = EPDate.f_numerosemana(fechaFin);
            int nsemanas1YAnt = EPDate.TotalSemanasEnAnho(anioSemFin - 1, (int)DayOfWeek.Saturday);
            int nsemanas2YAnt = EPDate.TotalSemanasEnAnho(anioSemFin - 2, (int)DayOfWeek.Saturday);

            Dictionary<DateTime, int> dicAnioNSemana;

            DateTime fechaIni3YAnt, fechaFin3YAnt;
            int nsemanas3YAnt;
            // reporte mensual y reportes semanales     //Para los informes semanales e informe mensual habran 3 años anteriores

            fechaIni3YAnt = EPDate.f_fechainiciosemana(anioSemFin - 3, 1);
            fechaFin3YAnt = EPDate.f_fechafinsemana(anioSemFin - 3, 1);
            nsemanas3YAnt = EPDate.TotalSemanasEnAnho(anioSemFin - 3, (int)DayOfWeek.Saturday);

            var fechaIniSemana = fechaIni3YAnt;
            var fechaFinSemana = EPDate.f_fechafinsemana(fechaFin);

            dicAnioNSemana = new Dictionary<DateTime, int>()
                {
                    { fechaFinAct, nsemanasYAct },
                    { fechaFin1YAnt, nsemanas1YAnt },
                    { fechaFin2YAnt, nsemanas2YAnt },
                    { fechaFin3YAnt, nsemanas3YAnt }
                };

            var listaData = ObtenerDataEjecutadoHistorico(listaPuntosCaudales, fechaIniSemana, fechaFinSemana, ConstantesAppServicio.TipoinfocodiM3s);

            //generar data por dia sabado
            List<MeMedicion1DTO> listaIniSemana = new List<MeMedicion1DTO>();
            foreach (var nsem in dicAnioNSemana)
            {
                int anioConsultado = EPDate.f_numerosemana_y_anho(nsem.Key).Item2;
                for (int numSem = 1; numSem <= nsem.Value; numSem++) //obtener el total de cada año
                {
                    if (anioConsultado == 2021 && numSem == 24)
                    { }
                    var fechIni = EPDate.f_fechainiciosemana(anioConsultado, numSem);
                    var fechFin = EPDate.f_fechafinsemana(anioConsultado, numSem);

                    var listaDataSemanal = listaData.Where(x => x.Medifecha >= fechIni && x.Medifecha <= fechFin).ToList();

                    decimal? valorUtilSem = 0;
                    foreach (var item in listaPuntosCaudales)
                    {
                        int ptomedicodi = item.PtomediCalculado == ConstantesAppServicio.NO ? item.Ptomedicodi : item.PtomedicodiCalculado;

                        var data = listaDataSemanal.Where(x => x.Ptomedicodi == ptomedicodi).ToList();
                        var valPromedio = UtilSemanalPR5.ObtenerPromedioCaudales(data, item.Repptotabmed) ?? 0;
                        valorUtilSem += (item.PtomediCalculado == ConstantesAppServicio.NO ? valPromedio : valPromedio * item.Relptofactor);
                    }

                    listaIniSemana.Add(new MeMedicion1DTO() { Medifecha = fechIni, Anio = anioConsultado, Semana = numSem, H1 = (valorUtilSem == 0 ? null : valorUtilSem) });
                }
            }

            return listaIniSemana;
        }

        private List<IMeMedicion> ObtenerDataEjecutadoHistorico(List<MeReporptomedDTO> lstReporte, DateTime fechaInicio, DateTime fechaFin, int tipoinfocodi)
        {
            var lstDataEjecutadoHistorico = new List<IMeMedicion>();

            var lstPuntosNoFuncion = lstReporte.Where(x => x.Funptocodi != ConstantesSiosein2.FunptocodiDiaAnterior).ToList();//Puntos que no tienen funcion del dia anterior
            var lstPuntosFuncion = lstReporte.Where(x => x.Funptocodi == ConstantesSiosein2.FunptocodiDiaAnterior).ToList();

            var lstPuntosConsultados = new List<int>();//Lista de puntos consultados a la Base datos

            //caso normal
            foreach (var lstAgrupadaPorPuntoReporte in lstPuntosNoFuncion.GroupBy(x => x.Repptotabmed))//Agrupacion por Repptotabmed (1=Medicion1, 24=Medicion24)
            {
                if (lstAgrupadaPorPuntoReporte.Key == 0 || !lstAgrupadaPorPuntoReporte.Any()) continue;

                var lstPuntosAConsultar = lstAgrupadaPorPuntoReporte.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                lstPuntosAConsultar = lstPuntosAConsultar.Where(x => !lstPuntosConsultados.Contains(x));//Filtar puntos no consultados

                if (!lstPuntosAConsultar.Any()) continue;
                //obtener datos desde 1 mes antes
                var lstInformacionHidrologia = ObtenerDataMedicionPuntos(fechaInicio.AddMonths(-1), fechaFin, lstAgrupadaPorPuntoReporte.Key, string.Join(",", lstPuntosAConsultar)
                                                , tipoinfocodi, ConstantesSioSein.LectcodiEjecutadoHisto);
                lstDataEjecutadoHistorico.AddRange(lstInformacionHidrologia);

                lstPuntosConsultados.AddRange(lstPuntosAConsultar);
            }

            //replicar datos 
            lstDataEjecutadoHistorico = UtilSemanalPR5.ReplicarDataUltimoDiaAlSiguienteMes(lstDataEjecutadoHistorico, lstPuntosNoFuncion);

            //la salida son datos del rango de consulta
            if (tipoinfocodi == ConstantesAppServicio.TipoinfocodiHm3)
            {
                lstDataEjecutadoHistorico = UtilSemanalPR5.ObtenerUltimoDiaDataHidrologia(fechaInicio, fechaFin, lstDataEjecutadoHistorico);
            }
            else
            {
                lstDataEjecutadoHistorico = lstDataEjecutadoHistorico.Where(x => x.Medifecha >= fechaInicio && x.Medifecha <= fechaFin).ToList();
            }

            //caso especial
            if (lstPuntosFuncion.Any())
            {
                DateTime fechaIncioFunc = fechaInicio.AddDays(-1);
                DateTime fechaFinFunc = fechaFin.AddDays(-1);

                foreach (var item in lstPuntosFuncion.GroupBy(x => x.Repptotabmed))
                {
                    if (item.Key == 0 || !item.Any()) continue;
                    var listaPuntos = item.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
                    var lstPutosConst = listaPuntos.Where(x => lstPuntosConsultados.Contains(x));
                    var lstPutosNoConst = listaPuntos.Where(x => !lstPuntosConsultados.Contains(x));

                    if (lstPutosConst.Any())
                        lstDataEjecutadoHistorico.AddRange(ObtenerDataMedicionPuntos(fechaIncioFunc, fechaIncioFunc, item.Key, string.Join(",", lstPutosConst), tipoinfocodi, ConstantesSioSein.LectcodiEjecutadoHisto));

                    if (lstPutosNoConst.Any())
                    {
                        lstDataEjecutadoHistorico.AddRange(ObtenerDataMedicionPuntos(fechaIncioFunc, fechaFinFunc, item.Key, string.Join(",", lstPutosNoConst), tipoinfocodi, ConstantesSioSein.LectcodiEjecutadoHisto));
                        lstPuntosConsultados.AddRange(lstPutosNoConst);
                    }
                }
            }

            return lstDataEjecutadoHistorico;
        }

        private List<IMeMedicion> ObtenerDataMedicionPuntos(DateTime fechaInicio, DateTime fechaFin, int medicion, string puntos, int tipoinfocodi, int lectcodi)
        {
            List<IMeMedicion> lista = new List<IMeMedicion>();
            switch (medicion)
            {
                case (int)ConstantesSiosein2.TablaOrigenPunto.Medicion1:
                    List<MeMedicion1DTO> listaMed1 = FactorySic.GetMeMedicion1Repository().GetByCriteria(fechaInicio, fechaFin, lectcodi, tipoinfocodi, puntos);

                    //para los volumenes no considerar los valores vacios
                    if (tipoinfocodi == ConstantesAppServicio.TipoinfocodiHm3) listaMed1 = listaMed1.Where(x => x.H1 != null).ToList();

                    lista.AddRange(listaMed1);
                    break;

                case (int)ConstantesSiosein2.TablaOrigenPunto.Medicion24:
                    List<MeMedicion24DTO> listaMed24 = FactorySic.GetMeMedicion24Repository().GetByCriteria(fechaInicio, fechaFin, lectcodi, tipoinfocodi, puntos);
                    foreach (var obj in listaMed24)
                    {
                        for (int hx = 1; hx <= 24; hx++)
                        {
                            var valHx = (decimal?)obj.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(obj, null);
                            obj.Meditotal += valHx.GetValueOrDefault(0);
                        }
                    }

                    //para los volumenes no considerar los valores vacios
                    if (tipoinfocodi == ConstantesAppServicio.TipoinfocodiHm3) listaMed24 = listaMed24.Where(x => x.Meditotal > 0).ToList();

                    lista.AddRange(listaMed24);
                    break;
            }

            return lista;
        }

        /// <summary>
        /// ObtenerCaudalesDiariosPorReporte
        /// </summary>
        /// <param name="reporcodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<MeReporptomedDTO> ObtenerCaudalesDiariosPorReporte(int reporcodi, DateTime fechaInicio, DateTime fechaFin)
        {
            List<MeReporptomedDTO> listaPuntos = servFormatoRep.ObtenerPuntosReporteMedicion(reporcodi);
            List<IMeMedicion> listaData = ObtenerDataEjecutadoHistorico(listaPuntos, fechaInicio, fechaFin, ConstantesAppServicio.TipoinfocodiM3s);
            List<MeReporptomedDTO> lstCaudalEjecDiarioXPtoreporte = UtilSemanalPR5.CalcularCaudalesDiarios(listaPuntos, listaData, fechaInicio, fechaFin);
            return lstCaudalEjecDiarioXPtoreporte;
        }

        #endregion

        #region E.3. Promedio semanal de los caudales (m3/s)

        /// <summary>
        /// ListarDataVersionCuadroCaudalSemanal
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCuadroCaudalSemanal(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarDataCuadroCaudalSemanal(objFiltro.ObjFecha, out List<TablaReporte> listaTabla, ConstantesInformeSemanalPR5.IndexSemPromCaudales);
                objReporte.ListaTabla = listaTabla;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).Where(x => x.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiCaudalNaturalGrafico).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);
                GetDataVersionCuadroCaudalSemanal(listaDat, listaDatDetalle, out List<TablaReporte> listaTabla, objFiltro);
                objReporte.ListaTabla = listaTabla;
            }

            return objReporte;
        }

        private void GetDataVersionCuadroCaudalSemanal(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<TablaReporte> listaTabla, InfSGIFiltroReporte objFiltro)
        {
            listaTabla = new List<TablaReporte>();
            List<ResultadoTotalGeneracion> listaDataXPtoNatural = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaDataXPtoDescargado = new List<ResultadoTotalGeneracion>();
            List<MeReporptomedDTO> listaPtoSinDuplicadoNatural = new List<MeReporptomedDTO>();
            List<MeReporptomedDTO> listaPtoSinDuplicadoDescargado = new List<MeReporptomedDTO>();

            foreach (var objDat in listaDat)
            {
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiCaudalNatural) // Caudal Natural
                {
                    int iVerdatvalor = 0;
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioActual) { iVerdatvalor = PR5ConstanteFecha.ValorAnioAct_FechaFinal; }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior) { iVerdatvalor = PR5ConstanteFecha.ValorAnio1Ant_FechaFinal; }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoPorcentajeVariacion) { iVerdatvalor = PR5ConstanteFecha.ValorAnioAct_SemAct_Var; }

                        listaDataXPtoNatural.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = iVerdatvalor,
                            Ptomedicodi = objDat.Verdatid,
                            Meditotal = objDatDet.ValorDecimal
                        });
                    }
                    listaPtoSinDuplicadoNatural.Add(new MeReporptomedDTO()
                    {
                        Repptonomb = objDat.Verdatvalor,
                        Ptomedicodi = objDat.Verdatid
                    });
                }
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiCaudalDescargado) // Caudal Descargado
                {
                    int iVerdatvalor = 0;
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioActual) { iVerdatvalor = PR5ConstanteFecha.ValorAnioAct_FechaFinal; }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior) { iVerdatvalor = PR5ConstanteFecha.ValorAnio1Ant_FechaFinal; }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoPorcentajeVariacion) { iVerdatvalor = PR5ConstanteFecha.ValorAnioAct_SemAct_Var; }

                        listaDataXPtoDescargado.Add(new ResultadoTotalGeneracion()
                        {
                            TipoResultadoFecha = iVerdatvalor,
                            Ptomedicodi = objDat.Verdatid,
                            Meditotal = objDatDet.ValorDecimal
                        });
                    }
                    listaPtoSinDuplicadoDescargado.Add(new MeReporptomedDTO()
                    {
                        Repptonomb = objDat.Verdatvalor,
                        Ptomedicodi = objDat.Verdatid
                    });
                }


            }

            TablaReporte objTabla = new TablaReporte();
            objTabla = UtilSemanalPR5.ObtenerDataTablaPromedioCaudalEmbalsesLagunas(true, objFiltro.ObjFecha, listaPtoSinDuplicadoNatural, listaDataXPtoNatural);
            listaTabla.Add(objTabla);
            objTabla = UtilSemanalPR5.ObtenerDataTablaPromedioCaudalEmbalsesLagunas(false, objFiltro.ObjFecha, listaPtoSinDuplicadoDescargado, listaDataXPtoDescargado);
            listaTabla.Add(objTabla);
        }

        private void GenerarExcelPromedioSemanalCaudales(ExcelWorksheet ws, FechasPR5 objFecha, int param, int mrepcodi, InfSGIFiltroReporte objFiltro)
        {
            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();
            objFiltro.Mrepcodi = mrepcodi;

            #region Titulo y subtitulo

            string tipoVistaReporte = objFecha.TipoVistaReporte;
            int tipoDoc = objFecha.TipoReporte;

            UtilAnexoAPR5.IngresarEncabezadoGeneral(ws, objFecha);

            string orden = "";
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal) { orden = "16"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal) { orden = "13"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeMensual) { orden = "12"; }
            if (tipoDoc == ConstantesPR5ReportesServicio.ReptipcodiInformeAnual) { orden = "11"; }

            ws.Cells[4, 2].Value = UtilSemanalPR5.EscogerTitulosSubtitulos(orden, 0, tipoVistaReporte, tipoDoc, listaItem); //titulo
            ws.Cells[6, 3].Value = UtilSemanalPR5.EscogerTitulosSubtitulos(orden, param == 1 ? 1 : 2, tipoVistaReporte, tipoDoc, listaItem); //subtitulo
            #endregion

            if (param == 1) // Reporte 5.3
            {
                //data para el listado
                InfSGIReporteVersionado objReporte = ListarDataVersionCuadroCaudalSemanal(objFiltro);

                int filaIniData = 9; //(objFecha.EsReporteXMes) ? 9 : 10;
                int ultimaFilaTabla = 0;

                UtilSemanalPR5.GenerarCharExcelListadoPromedioSemanalCaudales(ws, objFecha, objReporte.ListaTabla[0], filaIniData, out ultimaFilaTabla);

                filaIniData = 41;
                UtilSemanalPR5.GenerarCharExcelListadoPromedioSemanalCaudales(ws, objFecha, objReporte.ListaTabla[1], filaIniData, out ultimaFilaTabla);
            }
            else   //Reporte 5.4
            {
                //graficos
                int filaIniGrafico;
                int filaIniData = 12;
                int coluIniData;
                int sepColu = 6;
                int sepfila = 28;
                int sepfilaX = 0;
                int numGrafico;

                InfSGIReporteVersionado resultado = ListarDataVersionEvolucionCaudales(objFiltro);

                filaIniGrafico = 4 + sepfilaX;
                coluIniData = 27;
                numGrafico = 1;

                foreach (var objGraf in resultado.ListaGrafico)
                {
                    UtilSemanalPR5.GenerarCharExcelGraficoVolUtilEmbalsesLagunas(ws, objFecha, objGraf, filaIniData, coluIniData);
                    filaIniGrafico = filaIniGrafico + sepfila;
                    coluIniData = coluIniData + sepColu;
                    numGrafico++;
                }

                //quitar los graficos no usados
                for (int i = numGrafico; i <= 24; i++)
                    ws.Drawings.Remove("grafico_" + i);
            }
        }

        #endregion

        #region E.4. Evolución de los caudales

        /// <summary>
        /// ListarDataVersionEvolucionCaudales
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionEvolucionCaudales(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            List<GraficoWeb> ListaGraficoDat = new List<GraficoWeb>();
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ListarDataEvolucionCaudalSemanal(objFiltro.ObjFecha, out List<GraficoWeb> listaGrafico, out List<MeMedicion1DTO> listDataAll, objFiltro.Mrepcodi);
                objReporte.ListaGrafico = listaGrafico;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiCaudalNaturalGrafico).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    List<MeMedicion1DTO> lstDataCaudalesAct = new List<MeMedicion1DTO>();
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        var tupla = EPDate.f_numerosemana_y_anho(objDatDet.Vdatdtfecha.Value);
                        lstDataCaudalesAct.Add(new MeMedicion1DTO() { Medifecha = objDatDet.Vdatdtfecha.Value, Anio = tupla.Item2, Semana = tupla.Item1, H1 = objDatDet.ValorDecimal });
                    }
                    ListaGraficoDat.Add(UtilSemanalPR5.GenerarGWebPromedioSemanalCaudales(objFiltro.ObjFecha, lstDataCaudalesAct, "grafico", objDat.Verdatvalor, "", objDat.Verdatid));
                }

                objReporte.ListaGrafico = ListaGraficoDat;
            }

            //orden
            objReporte.ListaGrafico = objReporte.ListaGrafico.OrderBy(x => x.IdGrafico).ToList();

            return objReporte;
        }

        #endregion

        #endregion

        #region F. COSTO DE OPERACIÓN EJECUTADO ACUMULADO SEMANAL DEL SEIN(Millones de S/.)

        /// <summary>
        /// ListarDataVersionCostosOperacionEjecutado
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCostosOperacionEjecutado(InfSGIFiltroReporte objFiltro)
        {
            List<ResultadoTotalGeneracion> listaResul = new List<ResultadoTotalGeneracion>();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet != null)
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi);
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    int tipoResultado = 0;
                    switch (objDat.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioActual:
                            tipoResultado = PR5ConstanteFecha.ValorAnioAct_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior:
                            tipoResultado = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior:
                            tipoResultado = PR5ConstanteFecha.ValorAnio2Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior:
                            tipoResultado = PR5ConstanteFecha.ValorAnioAct_Total_Var;
                            break;
                        case ConstantesConceptoVersion.ConceptoVariacionAcumAnioAnteriorVsPrecedeAnterior:
                            tipoResultado = PR5ConstanteFecha.ValorAnio1Ant_Total_Var;
                            break;
                    }

                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        ResultadoTotalGeneracion reg = new ResultadoTotalGeneracion()
                        {
                            Meditotal = objDatDet.ValorDecimal,
                            Medifecha = objDatDet.Vdatdtfecha.Value,
                            TipoResultadoFecha = tipoResultado
                        };
                        listaResul.Add(reg);
                    }
                }
            }


            if (objVerDet == null)
            {
                CargarReporteEvolCostosOperEjecutadosSemanal(objFiltro.ObjFecha, objFiltro.Mrepcodi, out listaResul);
            }

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            if (ConstantesEjecutivoSemanalPR5.IndexEvolCostosOperacionEjecutados == objFiltro.Mrepcodi)
            {
                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaEvolucionCOEjecutivo(objFiltro.ObjFecha, listaResul);
            }
            else
            {
                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaEvolucionCOE(objFiltro.ObjFecha, listaResul);
            }

            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();
            objReporte.Tabla.ListaItem = listaItem;

            objReporte.Grafico = UtilSemanalPR5.GraficoEvolucionCostosEjecAcum(objFiltro.ObjFecha, objFiltro.Mrepcodi, listaResul);

            return objReporte;
        }

        private List<MeMedicion1DTO> GetListaCostosOperacionEjecutados(DateTime fechaIni, DateTime fechaFin)
        {
            List<MeMedicion1DTO> ListaCOE = FactorySic.GetMeMedicion1Repository().GetByCriteria(fechaIni, fechaFin, ConstantesPR5ReportesServicio.LectCostoOperacionEjec, ConstantesPR5ReportesServicio.TipoinfoSoles, ConstantesPR5ReportesServicio.PtomedicodiCostoOpr.ToString());

            return ListaCOE;
        }

        private void CargarReporteEvolCostosOperEjecutadosSemanal(FechasPR5 objFecha, int indexReporte, out List<ResultadoTotalGeneracion> listaResul)
        {
            //Obtener data
            List<MeMedicion1DTO> listaData = this.GetListaCostosOperacionEjecutados(objFecha.Anio2Ant.RangoAct_FechaIni.AddDays(-13 * 7), objFecha.AnioAct.RangoAct_FechaFin);

            UtilSemanalPR5.ObtenerListaFinalM1(objFecha, indexReporte, listaData, out listaResul);
        }

        private void GenerarExcelCostoOperacionAcumulado(ExcelWorksheet ws, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionCostosOperacionEjecutado(objFiltro);

            UtilSemanalPR5.GenerarCharExcelListadoCostoOperEjecutadoAcumulado(ws, objFiltro.ObjFecha, objReporte.Tabla, objReporte.Grafico);
        }

        #endregion

        #region G. COSTOS MARGINALES NODALES PROMEDIO DEL SEIN(US$/MWh)

        #region G.1. Evolución de los Costos Marginales Nodales Promedio semanal del SEIN (US$/MWh)

        /// <summary>
        /// ListarDataVersionCostosMarginalesPromSantaRosaEjec
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCostosMarginalesPromSantaRosaEjec(InfSGIFiltroReporte objFiltro)
        {
            List<ResultadoTotalGeneracion> listaResul = new List<ResultadoTotalGeneracion>();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet != null)
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi);
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    int tipoResultado = 0;
                    switch (objDat.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioActual:
                            tipoResultado = PR5ConstanteFecha.ValorAnioAct_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior:
                            tipoResultado = PR5ConstanteFecha.ValorAnio1Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior:
                            tipoResultado = PR5ConstanteFecha.ValorAnio2Ant_SemAct;
                            break;
                        case ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior:
                            tipoResultado = PR5ConstanteFecha.ValorAnioAct_Total_Var;
                            break;
                        case ConstantesConceptoVersion.ConceptoVariacionAcumAnioAnteriorVsPrecedeAnterior:
                            tipoResultado = PR5ConstanteFecha.ValorAnio1Ant_Total_Var;
                            break;
                    }

                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        ResultadoTotalGeneracion reg = new ResultadoTotalGeneracion()
                        {
                            Meditotal = objDatDet.ValorDecimal,
                            Medifecha = objDatDet.Vdatdtfecha.Value,
                            TipoResultadoFecha = tipoResultado
                        };
                        listaResul.Add(reg);
                    }
                }
            }

            if (objVerDet == null)
            {
                ObtenerListasRptEvolCostosMarginalesProm(objFiltro.ObjFecha, objFiltro.Mrepcodi, out listaResul);
            }

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaEvolucionCMg(objFiltro.ObjFecha, objFiltro.Mrepcodi, listaResul);
            objReporte.Grafico = UtilSemanalPR5.GraficoWebEvolucionCostosMarginalesPromIS(objFiltro.ObjFecha, objFiltro.Mrepcodi, listaResul);

            return objReporte;
        }

        private void ObtenerListasRptEvolCostosMarginalesProm(FechasPR5 objFecha, int indexReporte, out List<ResultadoTotalGeneracion> listaResul)
        {
            //Obtener data
            List<MeMedicion1DTO> listaData = this.ListarCostoMarginalPromedioDiarioPorRango(objFecha.Anio2Ant.RangoAct_FechaIni.AddDays(-13 * 7), objFecha.AnioAct.RangoAct_FechaFin, ConstantesPR5ReportesServicio.BarraCodiStaRosa220.ToString());

            UtilSemanalPR5.ObtenerListaFinalM1(objFecha, indexReporte, listaData, out listaResul);
        }

        /// <summary>
        /// ListarCostoMarginalPromedioDiarioPorRango
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="barrcodi"></param>
        /// <returns></returns>
        public List<MeMedicion1DTO> ListarCostoMarginalPromedioDiarioPorRango(DateTime fechaIni, DateTime fechaFin, string barrcodi)
        {
            //TODO consultar si el valor esta en miles o millones, soles o dolares
            List<MeMedicion1DTO> listaM1 = new List<MeMedicion1DTO>();

            List<SiCostomarginalDTO> lstCmgPromedioDiaro = ObtenerCmgPromedioDiarioDeBarras(fechaIni, fechaFin, barrcodi);

            foreach (var reg in lstCmgPromedioDiaro)
            {
                MeMedicion1DTO regM1 = new MeMedicion1DTO();
                regM1.Medifecha = reg.Cmgrfecha.Date;
                regM1.H1 = reg.Cmgrtotal;
                regM1.Barrcodi = reg.Barrcodi;

                listaM1.Add(regM1);
            }

            return listaM1;
        }

        private List<SiCostomarginalDTO> ObtenerCmgPromedioDiarioDeBarras(DateTime fechaInicio, DateTime fechaFin, string barrcodi)
        {
            try
            {
                return FactorySic.GetSiCostomarginalRepository().ObtenerCmgPromedioDiarioDeBarras(fechaInicio, fechaFin, barrcodi);

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        private void GenerarExcelCostoMarginalPromedioSem(ExcelWorksheet ws, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionCostosMarginalesPromSantaRosaEjec(objFiltro);
            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();
            objReporte.Tabla.ListaItem = listaItem;

            UtilSemanalPR5.GenerarCharExcelListadoCostoMarginalPromedioSem(ws, objFiltro.ObjFecha, objReporte.Tabla, objReporte.Grafico);
        }

        #endregion

        #region G.2. Evolución  de los Costos Marginales Nodales Promedio semanal por área operativa (US$/MWh)

        /// <summary>
        /// ListarDataVersionCostosMarginalesPorArea
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionCostosMarginalesPorArea(InfSGIFiltroReporte objFiltro)
        {
            List<IeeBarrazonaDTO> listaBarras = new List<IeeBarrazonaDTO>();
            List<ResultadoTotalGeneracion> listaResultTotal = new List<ResultadoTotalGeneracion>();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet != null)
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi);
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    int codigoArea = ConstantesPR5ReportesServicio.BarrzareaNorte;
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoBarrcodiAreaCentro) codigoArea = ConstantesPR5ReportesServicio.BarrzareaCentro;
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoBarrcodiAreaSur) codigoArea = ConstantesPR5ReportesServicio.BarrzareaSur;

                    listaBarras.Add(new IeeBarrazonaDTO()
                    {
                        Barrcodi = objDat.Verdatid,
                        Barrnombre = objDat.Verdatvalor,
                        Barrzarea = codigoArea,
                    });

                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        ResultadoTotalGeneracion objDia = new ResultadoTotalGeneracion();
                        objDia.Barrcodi = objDat.Verdatid;
                        objDia.Meditotal = objDatDet.ValorDecimal;
                        objDia.Medifecha = objDatDet.Vdatdtfecha.Value;
                        objDia.TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct;
                        listaResultTotal.Add(objDia);
                    }
                }
            }

            if (objVerDet == null)
            {
                ObtenerListasRptEvolCostosMarginalesPorArea(objFiltro.ObjFecha, objFiltro.Mrepcodi, out listaBarras, out listaResultTotal);
            }

            listaBarras = listaBarras.OrderBy(x => x.Barrzarea).ThenBy(x => x.Barrnombre).ToList();

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaCostoMarginalPorAreaOp(objFiltro.ObjFecha, listaBarras, listaResultTotal);
            return objReporte;
        }

        private void ObtenerListasRptEvolCostosMarginalesPorArea(FechasPR5 objFecha, int indexReporte,
                            out List<IeeBarrazonaDTO> barrasTotales, out List<ResultadoTotalGeneracion> listaResultTotal)
        {
            //ObtenerBarrasPorZonas
            barrasTotales = FactorySic.GetIeeBarrazonaRepository().ObtenerBarrasPorAreas()
                                                        .OrderBy(x => x.Barrzarea).ThenBy(x => x.Barrnombre).ToList();
            List<int> listaBarrcodi = barrasTotales.Select(x => x.Barrcodi.GetValueOrDefault(0)).Distinct().ToList();

            //Obtener data
            List<MeMedicion1DTO> listaCMgXBarraAct = this.ListarCostoMarginalPromedioDiarioPorRango(objFecha.AnioAct.SemAct_FechaIni.AddDays(-12 * 7),
                                                objFecha.AnioAct.SemAct_FechaFin, string.Join(",", listaBarrcodi));

            //Generar reporte
            listaResultTotal = new List<ResultadoTotalGeneracion>();
            foreach (var regBarra in barrasTotales)
            {
                List<MeMedicion1DTO> listaDataXBarra = listaCMgXBarraAct.Where(x => x.Barrcodi == regBarra.Barrcodi).ToList();

                List<ResultadoTotalGeneracion> listaResultXBarra;
                UtilSemanalPR5.ObtenerListaFinalM1(objFecha, indexReporte, listaDataXBarra, out listaResultXBarra);

                foreach (var reg in listaResultXBarra)
                {
                    reg.Barrcodi = regBarra.Barrcodi.Value;
                    reg.Barrnombre = (regBarra.Barrnombre ?? "").Trim();
                    reg.Barrzarea = regBarra.Barrzarea;
                }

                listaResultTotal.AddRange(listaResultXBarra);
            }
        }

        private void GenerarExcelCostoMarginalPorAreaOperativa(ExcelWorksheet ws, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionCostosMarginalesPorArea(objFiltro);
            objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();

            UtilSemanalPR5.GenerarCharExcelListadoCostoMarginalPorAreaOp(ws, objFiltro.ObjFecha, objReporte.Tabla);
        }

        #endregion

        #endregion

        #region H. FLUJOS DE INTERCONEXIÓN EN ÁREAS OPERATIVAS DEL SEIN (MW)

        private List<MeReporteDTO> ListarRptFlujoInterSemanal(int tmrepcodi, FechasPR5 objFecha)
        {
            List<MeReporteDTO> l = new List<MeReporteDTO>();

            if (tmrepcodi == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal)
            {
                l.Add(new MeReporteDTO() { Reporcodi = ConstantesPR5ReportesServicio.IdReporteInfSemInterconexionCentroNorte, EsNorte = true });
                l.Add(new MeReporteDTO() { Reporcodi = ConstantesPR5ReportesServicio.IdReporteInfSemInterconexionCentroSur, EsNorte = false });
            }
            else
            {
                l.Add(new MeReporteDTO() { Reporcodi = ConstantesPR5ReportesServicio.IdReporteEjecSemInterconexionCentroNorte, EsNorte = true });
                l.Add(new MeReporteDTO() { Reporcodi = ConstantesPR5ReportesServicio.IdReporteEjecSemInterconexionCentroSur, EsNorte = false });
            }

            foreach (var item in l)
            {
                if (item.EsNorte)
                {
                    item.NombreArea = "NORTE";
                    item.RowIni = 8;
                }
                else
                {
                    item.NombreArea = "SUR";
                    item.RowIni = 45;
                }

                item.TituloTabla = "INTERCONEXIÓN CENTRO - " + item.NombreArea;
                item.PiePagina = string.Format(NotasPieWebInformeSemanal.Cuadro1_Reporte_10p1, objFecha.AnioAct.RangoAct_NumYAnio, item.NombreArea);

                item.TituloGrafico = "FLUJO MÁXIMO INTERCONEXIÓN ENTRE SISTEMAS OPERATIVOS CENTRO - " + item.NombreArea;
                item.SubtituloGrafico = string.Format(NotasPieWebInformeSemanal.Grafico1_Reporte_10p1, objFecha.AnioAct.RangoAct_NumYAnio, item.NombreArea);
            }

            return l;
        }

        private void ObtenerDataPotenciaMaximaTransmitidaXPuntos(int reporcodi, DateTime fechaInicial, DateTime fechaFinal,
                                out List<MeReporptomedDTO> listaPuntos, out List<MeMedicion48DTO> listaMD48, out List<MeMedicion48DTO> listaDetalle48)
        {
            //puntos del reporte
            var listaPuntosTotal = servFormatoRep.ObtenerPuntosReporteMedicion(reporcodi);
            listaPuntos = listaPuntosTotal.GroupBy(x => x.Ptomedicodi).Select(x => x.First()).ToList();

            //Data medicion48 nuevo modulo
            var lstPtomedicodi = listaPuntosTotal.Select(x => x.PtomediCalculado == ConstantesAppServicio.NO ? x.Ptomedicodi : x.PtomedicodiCalculado);
            var lstDataMedicion48 = listaPuntos.Any() ? FactorySic.GetMeMedicion48Repository().GetByCriteria(fechaInicial, fechaFinal, ConstantesPR5ReportesServicio.LectcodiFlujoPotencia.ToString(), ConstantesAppServicio.TipoinfocodiMW, string.Join(",", lstPtomedicodi)) : new List<MeMedicion48DTO>();

            //Calculo
            UtilSemanalPR5.ObtenerMaxTransDiario(fechaInicial, fechaFinal, lstDataMedicion48, listaPuntosTotal,
                                out listaMD48, out listaDetalle48);
        }

        /// <summary> DATOS PARA LISTAR LA POTENCIA MAXIMA TRANSMITIDA X PUNTOS
        /// genera listado de tensión de barras para un rango de fechas
        /// </summary>
        /// <param name="objFiltro"></param>
        public InfSGIReporteVersionado ListarDataVersionPotenciaMaxTransmitidaxPuntos(InfSGIFiltroReporte objFiltro)
        {
            DateTime fechaInicial = objFiltro.ObjFecha.FechaInicial;
            DateTime fechaFinal = objFiltro.ObjFecha.FechaFinal;
            int Reptipcodi = objFiltro.Mrepcodi == ConstantesInformeSemanalPR5.IndexFlujoMaximoInterconexiones ? ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal : ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal;

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                //reporte
                List<MeReporteDTO> listaReporte = ListarRptFlujoInterSemanal(Reptipcodi, objFiltro.ObjFecha);

                var ResultadosHtml = new List<string>();
                var Graficos = new List<GraficoWeb>();

                foreach (var objRpt in listaReporte)
                {
                    ObtenerDataPotenciaMaximaTransmitidaXPuntos(objRpt.Reporcodi, fechaInicial, fechaFinal,
                        out List<MeReporptomedDTO> listaPuntos, out List<MeMedicion48DTO> listaMD48, out List<MeMedicion48DTO> listaDetalle48);

                    ResultadosHtml.Add(UtilSemanalPR5.GenerarRHtmlFlujoMaximoInterconexiones(objRpt.TituloTabla, objRpt.PiePagina, listaPuntos, listaMD48, listaDetalle48, fechaInicial, fechaFinal));
                    Graficos.Add(UtilSemanalPR5.GenerarGwebPotenciaMaxTransmitida(objRpt.TituloGrafico, objRpt.SubtituloGrafico, listaPuntos, listaDetalle48, fechaInicial, fechaFinal));
                }

                objReporte = new InfSGIReporteVersionado()
                {
                    ResultadosHtml = ResultadosHtml,
                    ListaGrafico = Graficos
                };
            }
            else
            {
                //lista de resultados
                var ResultadosHtml = new List<string>();
                var Graficos = new List<GraficoWeb>();

                //reporte
                List<MeReporteDTO> listaReporte = ListarRptFlujoInterSemanal(Reptipcodi, objFiltro.ObjFecha);

                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                //llenamos el norte y el sur
                foreach (var objRpt in listaReporte)
                {
                    //lista de datos
                    List<MeReporptomedDTO> listaPuntos = new List<MeReporptomedDTO>();
                    List<MeMedicion48DTO> listaMD48 = new List<MeMedicion48DTO>();
                    List<MeMedicion48DTO> listaDetalle48 = new List<MeMedicion48DTO>();

                    var listaDatFiltrada = new List<SiVersionDatDTO>();
                    if (objRpt.Reporcodi == ConstantesPR5ReportesServicio.IdReporteInfSemInterconexionCentroNorte || objRpt.Reporcodi == ConstantesPR5ReportesServicio.IdReporteEjecSemInterconexionCentroNorte)
                    {
                        listaDatFiltrada = listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFMInterconexionesNorte).ToList();
                    }
                    else
                    {
                        listaDatFiltrada = listaDat.Where(x => x.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodigoFMInterconexionesSur).ToList();
                    }

                    foreach (var objDat in listaDatFiltrada)
                    {
                        if (objDat.Verdatid > 0)
                        {
                            //llenar la tabla puntos
                            var puntos = new MeReporptomedDTO()
                            {
                                Ptomedicodi = objDat.Verdatid,
                                Repptonomb = objDat.Verdatvalor
                            };

                            var listaDatDet = listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList();
                            //asignamos los valores maximos, medios y minimos
                            foreach (var objDatDet in listaDatDet)
                            {
                                //llenar la tabla listaMD48
                                var reportMD48 = new MeMedicion48DTO()
                                {
                                    Ptomedicodi = objDat.Verdatid,
                                    Medifecha = objDatDet.Vdatdtfecha.Value.AddMinutes(-30).Date,
                                    TiempoMaximaDemanda = string.Format("{0} - {1}h", objDatDet.Vdatdtfecha.Value.ToString(ConstantesAppServicio.FormatoFecha), objDatDet.Vdatdtfecha.Value.ToString(ConstantesAppServicio.FormatoHora)),
                                };

                                //comprobar si no esta registrado y lo añadimos listaMD48
                                if (listaMD48.Find(x => x.Medifecha == objDatDet.Vdatdtfecha.Value.AddMinutes(-30).Date) == null) //si la máxima demanda es a las 24:00 entonces corresponde al día anterior
                                {
                                    listaMD48.Add(reportMD48);
                                }

                                //llenar la tabla listaDetalle48
                                var detalle48 = new MeMedicion48DTO()
                                {
                                    Ptomedicodi = objDat.Verdatid,
                                    Medifecha = objDatDet.Vdatdtfecha.Value.AddMinutes(-30).Date,
                                    Maximo = objDatDet.ValorDecimal
                                };

                                listaDetalle48.Add(detalle48);
                            }

                            listaPuntos.Add(puntos);
                        }
                    }

                    //llenar los valores maximos de la tabla listaMD48
                    foreach (var objMD48 in listaMD48)
                    {
                        decimal valormaximo = 0;
                        var lstValores = listaDetalle48.Where(x => x.Medifecha == objMD48.Medifecha).ToList();

                        foreach (var valor in lstValores)
                        {
                            valormaximo += valor.Maximo.Value;
                        }

                        objMD48.Maximo = valormaximo;
                    }

                    //llenar la lsita de grafico y tabla
                    objRpt.ListaPuntos = listaPuntos;
                    objRpt.ListaMD48 = listaMD48;
                    objRpt.ListaDetalle48 = listaDetalle48;

                    ResultadosHtml.Add(UtilSemanalPR5.GenerarRHtmlFlujoMaximoInterconexiones(objRpt.TituloTabla, objRpt.PiePagina, listaPuntos, listaMD48, listaDetalle48, fechaInicial, fechaFinal));
                    Graficos.Add(UtilSemanalPR5.GenerarGwebPotenciaMaxTransmitida(objRpt.TituloGrafico, objRpt.SubtituloGrafico, listaPuntos, listaDetalle48, fechaInicial, fechaFinal));
                }

                objReporte = new InfSGIReporteVersionado()
                {
                    ResultadosHtml = ResultadosHtml,
                    ListaGrafico = Graficos,
                    ListaReporte = listaReporte
                };
            }

            return objReporte;
        }

        private void GenerarExcelFlujoMaxInterconexiones(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            DateTime fechaInicial = objFecha.FechaInicial;
            DateTime fechaFinal = objFecha.FechaFinal;
            var listaItem = ListarItemFromSiMenureporte();

            InfSGIReporteVersionado objReporte = ListarDataVersionPotenciaMaxTransmitidaxPuntos(objFiltro);

            foreach (var objRpt in objReporte.ListaReporte)
            {
                var objGraf = UtilSemanalPR5.GenerarGwebPotenciaMaxTransmitida(objRpt.TituloTabla, objRpt.PiePagina, objRpt.ListaPuntos, objRpt.ListaDetalle48, fechaInicial, fechaFinal);

                //tabla
                UtilSemanalPR5.GenerarCharExcelListadoFlujoMaxInterconexiones(ws, objFecha, objRpt.TituloTabla, objRpt.PiePagina, objRpt.RowIni, objRpt.ListaPuntos, objRpt.ListaMD48, objRpt.ListaDetalle48,
                                 fechaInicial, fechaFinal, listaItem);

                //grafico
                UtilSemanalPR5.GenerarCharExcelGraficosFlujoMaxInterconexiones(ws, objFecha, objRpt.NombreArea, objGraf.Subtitle, objRpt.ListaPuntos.Count(),
                                                            3, objRpt.RowIni + 1, objRpt.RowIni + 10);
            }

        }

        #endregion

        #region I. HORAS DE CONGESTIÓN EN LAS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)

        /// <summary>
        /// Llama a las funciones que se encargarán de exportar a excel  el reporte de Horas de Congestion
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFecha"></param>
        /// <param name="objFiltro"></param>
        public void GenerarExcelHorasCongestionAreaOperativa(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            //CargarReporteHorasCongestionPorArea(objFecha, out TablaReporte dataTabla, out GraficoWeb graficoHCxArea);
            InfSGIReporteVersionado objReporte = ListarDataVersionHorasCongestionPorArea(objFiltro);

            objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();

            UtilSemanalPR5.GeneraCharExcelListadoHorasCongestionAreaOp(ws, objFecha, objReporte.Tabla, out int UltimaFilaTabla, out int nregistros);

            UtilSemanalPR5.GenerarCharExcelGraficoHorasCongestionAreaOp(ws, objFecha, UltimaFilaTabla + 5, objReporte.Grafico, nregistros);

        }

        private void CargarReporteHorasCongestionPorArea(FechasPR5 objFecha, out TablaReporte dataTabla, out GraficoWeb graficoHCxArea)
        {
            int tipoReporte = objFecha.TipoReporte;
            ObtenerDataHorasCongestionAreaOperacion(objFecha, out List<EqGrupoLineaDTO> listaGrupolinea, out List<ResultadoTotalGeneracion> listaDataTotal);
            // Output            
            dataTabla = UtilSemanalPR5.ObtenerDataTablaHCxArea(tipoReporte, objFecha, listaGrupolinea, listaDataTotal);
            graficoHCxArea = UtilSemanalPR5.ObtenerGraficoHorasCongestionAreaOpe(tipoReporte, objFecha, listaGrupolinea, listaDataTotal);

        }

        /// <summary>
        /// ListarDataVersionHorasCongestionPorArea
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionHorasCongestionPorArea(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarReporteHorasCongestionPorArea(objFiltro.ObjFecha, out TablaReporte dataTabla, out GraficoWeb graficoHCxArea);
                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoHCxArea;
            }
            else
            {
                GraficoWeb GraficoDat = new GraficoWeb();
                TablaReporte TablaDat = new TablaReporte();
                DateTime fechaInicial = objFiltro.ObjFecha.FechaInicial;
                DateTime fechaFinal = objFiltro.ObjFecha.FechaFinal;
                int tipoReporte = objFiltro.ObjFecha.TipoReporte;
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();
                List<EqGrupoLineaDTO> listaGrupolinea = new List<EqGrupoLineaDTO>();
                List<ResultadoTotalGeneracion> listaDataXArea = new List<ResultadoTotalGeneracion>();

                foreach (var objDat in listaDat)
                {
                    string[] words = objDat.Verdatvalor.Split('|');
                    if (objDat.Verdatid != -1)
                    {
                        listaGrupolinea.Add(new EqGrupoLineaDTO()
                        {
                            Grulincodi = objDat.Verdatid,
                            Areaoperativa = objDat.Verdatvalor2,
                            Equipo = words[0],
                            Areanomb = words[1]
                        });
                    }

                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        int iTipoResultadoFecha = 0;
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioActual) { iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct; }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior) { iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_SemAct; }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior) { iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio2Ant_SemAct; }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior) { iTipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_Total_Var; }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoVariacionAcumAnioAnteriorVsPrecedeAnterior) { iTipoResultadoFecha = PR5ConstanteFecha.ValorAnio1Ant_Total_Var; }

                        ResultadoTotalGeneracion objDetalle = new ResultadoTotalGeneracion();
                        objDetalle.Codigo = objDat.Verdatid;
                        objDetalle.Meditotal = objDatDet.ValorDecimal;
                        objDetalle.TipoResultadoFecha = iTipoResultadoFecha;
                        listaDataXArea.Add(objDetalle);
                    }
                }
                TablaDat = UtilSemanalPR5.ObtenerDataTablaHCxArea(tipoReporte, objFiltro.ObjFecha, listaGrupolinea, listaDataXArea);
                GraficoDat = UtilSemanalPR5.ObtenerGraficoHorasCongestionAreaOpe(tipoReporte, objFiltro.ObjFecha, listaGrupolinea, listaDataXArea);

                objReporte.Tabla = TablaDat;
                objReporte.Grafico = GraficoDat;
            }
            return objReporte;

        }

        private void ObtenerDataHorasCongestionAreaOperacion(FechasPR5 objFecha, out List<EqGrupoLineaDTO> listaGrupolinea, out List<ResultadoTotalGeneracion> listaDataXArea)
        {
            //insumo
            ListarCongestionXAreageografica(objFecha, out listaGrupolinea, out List<ResultadoTotalGeneracion> listaCongestionXFecha);

            //Datos para reporte
            listaDataXArea = new List<ResultadoTotalGeneracion>();

            var listaGrupolineaTmp = new List<EqGrupoLineaDTO>();
            listaGrupolineaTmp.AddRange(listaGrupolinea);
            listaGrupolineaTmp.Add(new EqGrupoLineaDTO() { Grulincodi = -1, Areanomb = "TOTAL" });

            foreach (var item in listaGrupolineaTmp)
            {
                ResultadoTotalGeneracion regAnio2 = UtilSemanalPR5.GetResultadoCongestionXTipo(item.Grulincodi, objFecha.Anio2Ant.RangoAct_FechaIni, listaCongestionXFecha, PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regAnio1 = UtilSemanalPR5.GetResultadoCongestionXTipo(item.Grulincodi, objFecha.Anio1Ant.RangoAct_FechaIni, listaCongestionXFecha, PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regAnio0 = UtilSemanalPR5.GetResultadoCongestionXTipo(item.Grulincodi, objFecha.AnioAct.RangoAct_FechaIni, listaCongestionXFecha, PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regVarAnio0 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regAnio0, regAnio1, PR5ConstanteFecha.ValorAnioAct_Total_Var, objFecha.AnioAct.RangoAct_FechaIni);
                ResultadoTotalGeneracion regVarAnio1 = UtilSemanalPR5.GenerarVariacionByTotalGeneracion(regAnio1, regAnio2, PR5ConstanteFecha.ValorAnio1Ant_Total_Var, objFecha.AnioAct.RangoAct_FechaIni);

                List<ResultadoTotalGeneracion> listaTmp = new List<ResultadoTotalGeneracion>();
                listaTmp.Add(regAnio2);
                listaTmp.Add(regAnio1);
                listaTmp.Add(regAnio0);

                listaTmp.Add(regVarAnio0);
                listaTmp.Add(regVarAnio1);

                listaDataXArea.AddRange(listaTmp);
            }

        }

        /// <summary>
        /// ListarCongestionXAreageografica
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="listaGrupolinea"></param>
        /// <param name="listaCongestionXFecha"></param>
        public void ListarCongestionXAreageografica(FechasPR5 objFecha, out List<EqGrupoLineaDTO> listaGrupolinea, out List<ResultadoTotalGeneracion> listaCongestionXFecha)
        {

            List<FiltroCeldaDato> listaFechaData = new List<FiltroCeldaDato>();
            listaCongestionXFecha = new List<ResultadoTotalGeneracion>();

            //obtener fechas cabecera
            if (objFecha.EsReporteAnual)
            {
                listaFechaData.Add(new FiltroCeldaDato() { FechaIni = objFecha.Anio1Ant.RangoAct_FechaIni, FechaFin = objFecha.Anio1Ant.RangoAct_FechaFin });
                listaFechaData.Add(new FiltroCeldaDato() { FechaIni = objFecha.AnioAct.RangoAct_FechaIni, FechaFin = objFecha.AnioAct.RangoAct_FechaFin });
            }
            else
            {
                if (objFecha.EsReporteXMes)
                {
                    if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoMensual)
                    {
                        var listaMeses = new List<DateTime>();
                        UtilEjecMensual.BuclePorMeses(objFecha.AnioAct.RangoAct_FechaIni.AddYears(-1), objFecha.AnioAct.RangoAct_FechaIni, date => { listaMeses.Add(date); });

                        foreach (var item in listaMeses)
                        {
                            listaFechaData.Add(new FiltroCeldaDato() { FechaIni = item, FechaFin = item.AddMonths(1).AddDays(-1) });
                        }
                    }
                    else
                    {
                        listaFechaData.Add(new FiltroCeldaDato() { FechaIni = objFecha.Anio2Ant.RangoAct_FechaIni, FechaFin = objFecha.Anio2Ant.RangoAct_FechaFin });
                        listaFechaData.Add(new FiltroCeldaDato() { FechaIni = objFecha.Anio1Ant.RangoAct_FechaIni, FechaFin = objFecha.Anio1Ant.RangoAct_FechaFin });
                        listaFechaData.Add(new FiltroCeldaDato() { FechaIni = objFecha.AnioAct.RangoAct_FechaIni, FechaFin = objFecha.AnioAct.RangoAct_FechaFin });
                    }
                }
                else
                {

                    listaFechaData.Add(new FiltroCeldaDato() { FechaIni = objFecha.Anio2Ant.RangoAct_FechaIni, FechaFin = objFecha.Anio2Ant.RangoAct_FechaFin });
                    listaFechaData.Add(new FiltroCeldaDato() { FechaIni = objFecha.Anio1Ant.RangoAct_FechaIni, FechaFin = objFecha.Anio1Ant.RangoAct_FechaFin });
                    listaFechaData.Add(new FiltroCeldaDato() { FechaIni = objFecha.AnioAct.RangoAct_FechaIni, FechaFin = objFecha.AnioAct.RangoAct_FechaFin });
                }
            }

            //recorrer semanas o meses
            foreach (var rangoFecha in listaFechaData)
            {
                //data
                List<PrCongestionDTO> listaCongestionXRango = GetListaCongestionConjunto(rangoFecha.FechaIni, rangoFecha.FechaFin, ConstantesAppServicio.ParametroDefecto);

                //agrupar por Grupo de Líneas
                var listaAgrupadaEqTransmisionAnioActual = listaCongestionXRango.GroupBy(x => x.Grulinnombre);

                //recorrer por área operativa
                List<string> listaDeAreas = listaCongestionXRango.Select(x => x.Areaoperativa).Distinct().OrderBy(x => x).ToList();
                foreach (var areaOperativa in listaDeAreas)
                {
                    //recorrer los equipos del area operativa
                    var listaEquiposEnArea = listaCongestionXRango.Where(x => x.Areaoperativa == areaOperativa).OrderBy(x => x.Grulinnombre).ToList();
                    foreach (var equiposTransmision in listaEquiposEnArea.GroupBy(x => x.Grulinnombre))
                    {
                        var areaGeografica = equiposTransmision.Key;
                        decimal? valAnioActual = UtilSemanalPR5.ObtenerHoraCongestionXAnio(equiposTransmision.ToList());

                        ResultadoTotalGeneracion registro = new ResultadoTotalGeneracion()
                        {
                            Medifecha = rangoFecha.FechaIni,
                            Meditotal = valAnioActual,
                            ListaGrupolinea = equiposTransmision.Select(x => x.Equinomb).Distinct().ToList(),
                            Areanomb = areaGeografica,
                            Areaoperativa = areaOperativa,
                            TipoResultadoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct
                        };

                        listaCongestionXFecha.Add(registro);
                    }
                }
            }

            //obtener grupos de lineas
            listaGrupolinea = new List<EqGrupoLineaDTO>();
            int codigoTemporal = 10000;
            foreach (var sublista in listaCongestionXFecha.GroupBy(x => new { x.Areaoperativa, x.Areanomb }))
            {
                //por cada area puede haber distintos equipos en el tiempo
                List<string> listaEquinomb = new List<string>();
                foreach (var item in sublista)
                {
                    item.Codigo = codigoTemporal;
                    listaEquinomb.AddRange(item.ListaGrupolinea);
                }

                listaEquinomb = listaEquinomb.Distinct().OrderBy(x => x).ToList();

                EqGrupoLineaDTO eq = new EqGrupoLineaDTO()
                {
                    Areaoperativa = sublista.Key.Areaoperativa ?? "",
                    Areanomb = sublista.Key.Areanomb ?? "",
                    Equipo = string.Join(" ", listaEquinomb),
                    Grulincodi = codigoTemporal
                };
                codigoTemporal++;

                listaGrupolinea.Add(eq);
            }

            //orden importante para la tablas web y grafico
            listaGrupolinea = listaGrupolinea.OrderBy(x => x.Areaoperativa).ThenBy(x => x.Areanomb).ToList();

        }

        private List<PrCongestionDTO> GetListaCongestionConjunto(DateTime fechaInicio, DateTime fechaFin, string Indtipo)
        {
            var lista = FactorySic.GetPrCongestionRepository().ListaCongestionConjunto(fechaInicio, fechaFin, Indtipo);

            foreach (var item in lista)
            {
                //caso especial de region de seguridad
                if (item.Regsegcodi != null && item.Indtipo == ConstantesCortoPlazo.CongestionRegionSeguridad)
                {
                    item.Grulinnombre = ConstantesCortoPlazo.TxtFuenteRegionSeguridad + " " + item.Regsegnombre;
                    item.Equinomb = GetNombreEquipoDeRegionSeguridad(item.Regsegnombre);
                }
            }

            return lista;
        }

        private string GetNombreEquipoDeRegionSeguridad(string regsegnombre)
        {
            if (!string.IsNullOrEmpty(regsegnombre))
            {
                var listaStr = regsegnombre.Split(' ').ToList();
                var textoCandidato = listaStr.Find(x => x.StartsWith("("));
                if (textoCandidato != null && textoCandidato.Length > 1) return textoCandidato.Substring(1, textoCandidato.Length - 1);
            }

            return "";
        }

        #endregion

        #region J. CONSUMO DE COMBUSTIBLE EN EL SEIN

        /// <summary>
        /// ListarDataVersionConsumoCombustible
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionConsumoCombustible(InfSGIFiltroReporte objFiltro)
        {
            var listaRptDia = new List<MeMedicionxintervaloDTO>();
            var listaTotal = new List<MeMedicionxintervaloDTO>();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                ObtenerDataMedicionCombustible(objFiltro.ObjFecha.FechaInicial, objFiltro.ObjFecha.FechaFinal, out listaRptDia, out listaTotal);
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi);
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoTotal)
                        {
                            MeMedicionxintervaloDTO objTotal = new MeMedicionxintervaloDTO();
                            objTotal.Fenergcodi = objDat.CodigoEntero;
                            objTotal.Medinth1 = objDatDet.ValorDecimal;
                            listaTotal.Add(objTotal);
                        }
                        if (objDatDet.Vercnpcodi == ConstantesConceptoVersion.ConceptoFecha)
                        {
                            MeMedicionxintervaloDTO objDia = new MeMedicionxintervaloDTO();
                            objDia.Fenergcodi = objDat.CodigoEntero;
                            objDia.Medinth1 = objDatDet.ValorDecimal;
                            objDia.Medintfechaini = objDatDet.Vdatdtfecha.Value;
                            listaRptDia.Add(objDia);
                        }
                    }
                }
            }

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            objReporte.ListaRptDia = listaRptDia;
            objReporte.ListaTotal = listaTotal;
            objReporte.ListaFenerg = ListarFuenteEnergia();

            return objReporte;
        }

        /// <summary>
        /// Obtiene las listas con la data completa para generar la tabla y graficos
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="listaRptDia"></param>
        /// <param name="listaTotal"></param>
        public void ObtenerDataMedicionCombustible(DateTime fechaInicial, DateTime fechaFinal, out List<MeMedicionxintervaloDTO> listaRptDia, out List<MeMedicionxintervaloDTO> listaTotal)
        {
            string idEmpresa = "-1", idCentral = "-1", idTipoComb = "-1";
            List<MeMedicionxintervaloDTO> listaReporteGeneral = GetListarConsumoCombustibleSemanal(idEmpresa, idCentral, idTipoComb,
                                                        ConstantesAppServicio.ParametroDefecto, fechaInicial, fechaFinal);

            UtilSemanalPR5.CalcularConsumoCombParaIntervalo(listaReporteGeneral, out listaRptDia, out listaTotal);
        }

        private void GenerarExcelConsumoCombustible(ExcelWorksheet ws, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionConsumoCombustible(objFiltro);

            UtilSemanalPR5.GenerarCharExcelListadoConsumoCombustible(ws, objFiltro.ObjFecha, objReporte.ListaRptDia, objReporte.ListaFenerg, objFiltro.ListaItem);
        }

        #endregion

        #region K. INTERCAMBIOS INTERNACIONALES

        /// <summary>
        /// ListarDataVersionIntercambioInternacionales
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionIntercambioInternacionales(InfSGIFiltroReporte objFiltro)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                CargarReporteIntercambiosInternacionalesSemanal(objFiltro.ObjFecha, out TablaReporte dataTabla, out GraficoWeb graficoIntercambiosInternacionales);
                objReporte.Tabla = dataTabla;
                objReporte.Grafico = graficoIntercambiosInternacionales;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).Where(x => x.Vercnpcodi != ConstantesConceptoVersion.ConceptoCodiEmbalseyLaguna).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);
                List<SiFuenteenergiaDTO> listaFenerg = ListarFuenteEnergia();
                objReporte.Tabla = GetDataTablaIntercambiosInternacionales(listaDat, listaDatDetalle);
                objReporte.Grafico = UtilSemanalPR5.GraficoIntercambioInternacionalesSemanal(objReporte.Tabla, listaFenerg);
            }

            return objReporte;
        }

        private void CargarReporteIntercambiosInternacionalesSemanal(FechasPR5 objFecha, out TablaReporte dataTabla, out GraficoWeb graficoIntercambiosInternacionales)
        {
            DateTime fechaInicial = objFecha.FechaInicial;
            DateTime fechaFinal = objFecha.FechaFinal;

            List<MeMedicion48DTO> listaInterconexion48 = this.servEjec.ListaDataMDInterconexion48(fechaInicial, fechaFinal);
            List<SiFuenteenergiaDTO> listaFenerg = ListarFuenteEnergia();

            // Output
            dataTabla = ObtenerDataTablaIntInternacionales(listaInterconexion48);

            graficoIntercambiosInternacionales = UtilSemanalPR5.GraficoIntercambioInternacionalesSemanal(dataTabla, listaFenerg);

        }

        private void GenerarExcelIntercambiosInternacioles(ExcelWorksheet ws, FechasPR5 objFecha, InfSGIFiltroReporte objFiltro)
        {
            //CargarReporteIntercambiosInternacionalesSemanal(objFecha, out TablaReporte dataTabla, out GraficoWeb graficoIntercambiosInternacionales);
            InfSGIReporteVersionado objReporte = ListarDataVersionIntercambioInternacionales(objFiltro);
            objReporte.Tabla.ListaItem = ListarItemFromSiMenureporte();

            UtilSemanalPR5.GenerarCharExcelReporteIntercambiosInternacionales(ws, objFecha, objReporte.Tabla, out int ultFilaTabla, out int filaD, out int coluD);

            UtilSemanalPR5.GenerarCharExcelGraficoIntercambiosInternacionales(ws, objFecha, objReporte.Grafico, ultFilaTabla + 4, filaD, coluD);
        }

        private TablaReporte ObtenerDataTablaIntInternacionales(List<MeMedicion48DTO> listaInterconexiones48)
        {
            #region Cuerpo
            TablaReporte tabla = new TablaReporte();
            List<RegistroReporte> registros = new List<RegistroReporte>();

            decimal? sumExportada = 0;
            decimal? sumMDExportada = 0;
            decimal? sumImportada = 0;
            decimal? sumMDImportada = 0;

            foreach (var medicionDia in listaInterconexiones48)
            {
                // para Energias Exportadas e Importadas
                List<decimal?> lstImportacion = new List<decimal?>();
                List<decimal?> lstExportacion = new List<decimal?>();

                // para MaximaDemanadas de Energias Exportadas e Importadas
                MeMedicion48DTO medicionTotal48Exportada = new MeMedicion48DTO();
                MeMedicion48DTO medicionTotal48Importada = new MeMedicion48DTO();
                List<MeMedicion48DTO> listaMedicionTotal48Exportada = new List<MeMedicion48DTO>();
                List<MeMedicion48DTO> listaMedicionTotal48Importada = new List<MeMedicion48DTO>();

                for (int i = 1; i <= 48; i++)
                {
                    var valorH = ((decimal?)medicionDia.GetType().GetProperty(ConstantesAppServicio.CaracterH + i.ToString()).GetValue(medicionDia, null));
                    if (valorH != null)
                    {
                        if (valorH > 0) //exportacion      
                        {
                            lstExportacion.Add(valorH); // lista con la energia exportada por cada "Hx"
                            medicionTotal48Exportada.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i)).SetValue(medicionTotal48Exportada, valorH); // obj con data exportada para el calculo de MD exportada
                        }

                        else // importacion   
                        {
                            lstImportacion.Add((valorH * (-1))); // lista con la energia importada por cada "Hx"
                            medicionTotal48Importada.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i)).SetValue(medicionTotal48Importada, ((-1) * valorH)); // obj con data importada para el calculo de MD importada
                        }

                    }
                }

                // set fechas para calulo de MD exportada e importada
                medicionTotal48Exportada.Medifecha = medicionDia.Medifecha;
                medicionTotal48Importada.Medifecha = medicionDia.Medifecha;

                listaMedicionTotal48Exportada.Add(medicionTotal48Exportada);
                listaMedicionTotal48Importada.Add(medicionTotal48Importada);


                //Parametros para calculo de MD
                List<SiParametroValorDTO> listaRangoNormaHP = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroRangoPeriodoHP);
                List<SiParametroValorDTO> listaBloqueHorario = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

                servEjec.GetDiaMaximaDemandaFromDataMD48(medicionDia.Medifecha, medicionDia.Medifecha, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48Exportada, listaRangoNormaHP, listaBloqueHorario, 
                                                out DateTime horaMDExportada, out DateTime fechaDia48E, out int hMax48E);
                servEjec.GetDiaMaximaDemandaFromDataMD48(medicionDia.Medifecha, medicionDia.Medifecha, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48Importada, listaRangoNormaHP, listaBloqueHorario,
                                                out DateTime horaMDImportada, out DateTime fechaDia48I, out int hMax48I);

                ResultadoTotalGeneracion dataExportada = UtilSemanalPR5.GenerarM48ValorMDFromListaByFecha(listaMedicionTotal48Exportada, horaMDExportada, 0, DateTime.Today, DateTime.Today);
                ResultadoTotalGeneracion dataImportada = UtilSemanalPR5.GenerarM48ValorMDFromListaByFecha(listaMedicionTotal48Importada, horaMDImportada, 0, DateTime.Today, DateTime.Today);


                //Obtenemos data
                RegistroReporte registro = new RegistroReporte();
                List<string> propiedades = new List<string>();
                List<decimal?> datos = new List<decimal?>();

                string numSemana = EPDate.f_numerosemana_y_anho(medicionDia.Medifecha).Item1.ToString();
                string fecha = medicionDia.Medifecha.ToString(ConstantesBase.FormatoFechaPE);
                decimal? totalExportada = lstExportacion.Sum(x => x) != 0 ? lstExportacion.Sum(x => x) : null;
                decimal? maxDemExportada = dataExportada.Meditotal != 0 ? dataExportada.Meditotal : null;
                decimal? totalImportada = lstImportacion.Sum(x => x) != 0 ? lstImportacion.Sum(x => x) : null;
                decimal? maxDemImportada = dataImportada.Meditotal != 0 ? dataImportada.Meditotal : null;

                sumExportada = sumExportada + totalExportada.GetValueOrDefault(0);
                sumMDExportada = sumMDExportada + maxDemExportada.GetValueOrDefault(0);
                sumImportada = sumImportada + totalImportada.GetValueOrDefault(0);
                sumMDImportada = sumMDImportada + maxDemImportada.GetValueOrDefault(0);

                propiedades.Add(numSemana);
                propiedades.Add(fecha);

                datos.Add(totalExportada);
                datos.Add(maxDemExportada);
                datos.Add(totalImportada);
                datos.Add(maxDemImportada);


                registro.ListaData = datos;
                registro.ListaPropiedades = propiedades;

                registros.Add(registro);


            }

            var primerRegistro = registros.First(); //para obtener semana y año inicial para la descripcion de la tabla
            var ultimoRegistro = registros.Last(); //para obtener semana y año final para la descripcion de la tabla

            RegistroReporte registro_ = new RegistroReporte();
            List<string> propiedades_ = new List<string>();
            List<decimal?> datos_ = new List<decimal?>();

            propiedades_.Add("TOTAL");

            datos_.Add(sumExportada != 0 ? sumExportada : null);
            datos_.Add(sumMDExportada != 0 ? sumMDExportada : null);
            datos_.Add(sumImportada != 0 ? sumImportada : null);
            datos_.Add(sumMDImportada != 0 ? sumMDImportada : null);

            registro_.ListaData = datos_;
            registro_.ListaPropiedades = propiedades_;

            registros.Add(registro_);

            tabla.ListaRegistros = registros;



            // Adicionamos los pie de pagina (descripcion del reporte)
            DateTime fecha1 = DateTime.ParseExact(primerRegistro.ListaPropiedades[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
            DateTime fecha2 = DateTime.ParseExact(ultimoRegistro.ListaPropiedades[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);

            int semI = int.Parse(primerRegistro.ListaPropiedades[0]);
            int anioI = fecha1.Year;

            int semF = int.Parse(ultimoRegistro.ListaPropiedades[0]);
            int anioF = fecha2.Year;

            string val1, val2;
            UtilAnexoAPR5.ObtenerSemanasEnRango(fecha1, fecha2, out val1, out val2);

            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();
            lstPie.Add(UtilAnexoAPR5.CompletarAnotacion(NotasPieWebInformeSemanal.Cuadro1_Reporte_13p1, val1, val2));
            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;


            #endregion

            return tabla;
        }

        private TablaReporte GetDataTablaIntercambiosInternacionales(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle)
        {
            #region Cuerpo
            TablaReporte tabla = new TablaReporte();
            List<RegistroReporte> registros = new List<RegistroReporte>();

            decimal? sumExportada = 0;
            decimal? sumMDExportada = 0;
            decimal? sumImportada = 0;
            decimal? sumMDImportada = 0;

            foreach (var objDat in listaDat)
            {
                decimal? totalExportada = null;
                decimal? maxDemExportada = null;
                decimal? totalImportada = null;
                decimal? maxDemImportada = null;
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Verdatcodi).ToList())
                {
                    switch (objDatDet.Vercnpcodi)
                    {
                        case ConstantesConceptoVersion.ConceptoEnergiaExportada:
                            totalExportada = objDatDet.ValorDecimal;
                            sumExportada += totalExportada;
                            break;
                        case ConstantesConceptoVersion.ConceptoMaxdemExportada:
                            maxDemExportada = objDatDet.ValorDecimal;
                            sumMDExportada += maxDemExportada;
                            break;
                        case ConstantesConceptoVersion.ConceptoenergiaImportada:
                            totalImportada = objDatDet.ValorDecimal;
                            sumImportada += totalImportada;
                            break;
                        case ConstantesConceptoVersion.ConceptoMaxdemImportada:
                            maxDemImportada = objDatDet.ValorDecimal;
                            sumMDImportada += maxDemImportada;
                            break;
                    }
                }

                //Obtenemos data
                RegistroReporte registro = new RegistroReporte();
                List<string> propiedades = new List<string>();
                List<decimal?> datos = new List<decimal?>();

                string numSemana = objDat.Verdatid.ToString();
                string fecha = objDat.Verdatvalor;

                propiedades.Add(numSemana);
                propiedades.Add(fecha);

                datos.Add(totalExportada);
                datos.Add(maxDemExportada);
                datos.Add(totalImportada);
                datos.Add(maxDemImportada);


                registro.ListaData = datos;
                registro.ListaPropiedades = propiedades;

                registros.Add(registro);


            }

            var primerRegistro = registros.First(); //para obtener semana y año inicial para la descripcion de la tabla
            var ultimoRegistro = registros.Last(); //para obtener semana y año final para la descripcion de la tabla

            RegistroReporte registro_ = new RegistroReporte();
            List<string> propiedades_ = new List<string>();
            List<decimal?> datos_ = new List<decimal?>();

            propiedades_.Add("TOTAL");

            datos_.Add(sumExportada != 0 ? sumExportada : null);
            datos_.Add(sumMDExportada != 0 ? sumMDExportada : null);
            datos_.Add(sumImportada != 0 ? sumImportada : null);
            datos_.Add(sumMDImportada != 0 ? sumMDImportada : null);

            registro_.ListaData = datos_;
            registro_.ListaPropiedades = propiedades_;

            registros.Add(registro_);

            tabla.ListaRegistros = registros;



            // Adicionamos los pie de pagina (descripcion del reporte)
            DateTime fecha1 = DateTime.ParseExact(primerRegistro.ListaPropiedades[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
            DateTime fecha2 = DateTime.ParseExact(ultimoRegistro.ListaPropiedades[1], ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);

            int semI = int.Parse(primerRegistro.ListaPropiedades[0]);
            int anioI = fecha1.Year;

            int semF = int.Parse(ultimoRegistro.ListaPropiedades[0]);
            int anioF = fecha2.Year;

            string val1, val2;
            UtilAnexoAPR5.ObtenerSemanasEnRango(fecha1, fecha2, out val1, out val2);

            PieReporte pie = new PieReporte();
            List<string> lstPie = new List<string>();
            lstPie.Add(UtilAnexoAPR5.CompletarAnotacion(NotasPieWebInformeSemanal.Cuadro1_Reporte_13p1, val1, val2));
            pie.ListaDescripcion = lstPie;
            tabla.Leyenda = pie;


            #endregion

            return tabla;
        }

        #endregion

        #region L. EVENTOS Y FALLAS QUE OCASIONARON INTERRUPCIÓN Y DISMINUCIÓN DE SUMINISTRO ELÉCTRICO

        /// <summary>
        /// ListarDataVersionEventoFallaSuministroEnerg
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionEventoFallaSuministroEnerg(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();
            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                //insumo
                List<EventoDTO> listaEventos = ObtenerEventosFallas(objFiltro.ObjFecha.FechaInicial, objFiltro.ObjFecha.FechaFinal.AddDays(1));
                List<EveCausaeventoDTO> lstCausas = GetCausasFallasCIER();

                //cálculo
                UtilSemanalPR5.ObtenerReporteEventoYFalla(listaEventos, ref lstCausas, out List<EqFamiliaDTO> listaFamilia, out List<GenericoDTO> listaFallaXFamilia);

                //salidas
                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaFalla(objFiltro.ObjFecha, lstCausas, listaFamilia, listaFallaXFamilia);
                objReporte.GraficoEveFallaXTipo = UtilSemanalPR5.GenerarGWebFallasXCausa(lstCausas);
                objReporte.GraficoEveFallaXFam = UtilSemanalPR5.GenerarGWebFallasXFamilia(lstCausas, listaFamilia.Where(x => x.Famcodi > 0).ToList(), listaFallaXFamilia);
                objReporte.GraficoEveEnergXFam = UtilSemanalPR5.GenerarGWebEnergiaInterrumpidaXFamilia(objFiltro.ObjFecha, listaFamilia.Where(x => x.Famcodi > 0).ToList());
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                GetDataVersionEventoFallaSuministroEnerg(listaDat, listaDatDetalle, out List<EveCausaeventoDTO> lstCausas,
                    out List<EqFamiliaDTO> listaFamilia, out List<GenericoDTO> listaFallaXFamilia, objFiltro);

                //salidas
                objReporte.Tabla = UtilSemanalPR5.ObtenerDataTablaFalla(objFiltro.ObjFecha, lstCausas, listaFamilia, listaFallaXFamilia);
                objReporte.GraficoEveFallaXTipo = UtilSemanalPR5.GenerarGWebFallasXCausa(lstCausas);
                objReporte.GraficoEveFallaXFam = UtilSemanalPR5.GenerarGWebFallasXFamilia(lstCausas, listaFamilia.Where(x => x.Famcodi > 0).ToList(), listaFallaXFamilia);
                objReporte.GraficoEveEnergXFam = UtilSemanalPR5.GenerarGWebEnergiaInterrumpidaXFamilia(objFiltro.ObjFecha, listaFamilia.Where(x => x.Famcodi > 0).ToList());
            }
            return objReporte;
        }

        private void GetDataVersionEventoFallaSuministroEnerg(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<EveCausaeventoDTO> lstCausas,
                        out List<EqFamiliaDTO> listaFamilia, out List<GenericoDTO> listaFallaXFamilia, InfSGIFiltroReporte objFiltro)
        {

            List<EveCausaeventoDTO> lstCausasAux = new List<EveCausaeventoDTO>();
            List<EqFamiliaDTO> listaFamiliaAux = new List<EqFamiliaDTO>();
            List<GenericoDTO> listaFallaXFamiliaAux = new List<GenericoDTO>();

            foreach (var objDat in listaDat)
            {
                if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiFallasPorEquiposYCausa) // Fallas 
                {
                    string[] words = objDat.Verdatvalor2.Split('|');

                    lstCausasAux.Add(new EveCausaeventoDTO()
                    {
                        Causaevencodi = objDat.Verdatid,
                        Causaevendesc = objDat.Verdatvalor,
                        Causaevenabrev = words[0],
                        Total = !string.IsNullOrEmpty(words[1]) ? Convert.ToInt32(words[1]) : 0
                    });
                    foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                    {
                        listaFallaXFamiliaAux.Add(new GenericoDTO()
                        {
                            Entero2 = objDatDet.Vdatdtid,
                            Entero1 = objDat.Verdatid,
                            Entero3 = Convert.ToInt32(objDatDet.ValorDecimal)
                        });
                    }
                }
                else
                {
                    if (objDat.Vercnpcodi == ConstantesConceptoVersion.ConceptoCodiTotalEventosFallas) // TOTAL
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[1]))
                            {
                                decimal.TryParse(words[1], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }

                            listaFamiliaAux.Add(new EqFamiliaDTO()
                            {
                                Famcodi = objDatDet.Vdatdtid,
                                Famnomb = words[0],
                                TotalXFamcodi = Convert.ToInt32(objDatDet.ValorDecimal)
                            });

                        }
                    }
                    else//ENERGÍA INTERRUMPIDA APROXIMADA
                    {
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                        {
                            string[] words = objDatDet.Vdatdtvalor.Split('|');
                            if (!string.IsNullOrEmpty(words[1]))
                            {
                                decimal.TryParse(words[1], out decimal valorDecimal);
                                objDatDet.ValorDecimal = valorDecimal;
                            }
                            var obj = listaFamiliaAux.Where(x => x.Famcodi == objDatDet.Vdatdtid && x.Famnomb == words[0]).FirstOrDefault();
                            if (obj != null)
                            {
                                obj.TotalEnergia = objDatDet.ValorDecimal;
                            }

                        }
                    }
                }
            }
            lstCausas = lstCausasAux;
            listaFamilia = listaFamiliaAux;
            listaFallaXFamilia = listaFallaXFamiliaAux;
        }

        /// <summary>
        /// LLama a las funciones que exportarán a excel el reporte eventos y fallas
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="objFiltro"></param>
        public void GenerarExcelFallasCier(ExcelWorksheet ws, InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = ListarDataVersionEventoFallaSuministroEnerg(objFiltro);

            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();
            UtilSemanalPR5.GenerarChartExcelListadoYGraficoFallaTipoEquipoCausa(ws, objFiltro.ObjFecha, listaItem, objReporte.Tabla,
                                    objReporte.GraficoEveFallaXTipo, objReporte.GraficoEveFallaXFam, objReporte.GraficoEveEnergXFam);
        }

        /// <summary>
        /// Retorna un lista de eventos por rango de fecha
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EventoDTO> ObtenerEventosFallas(DateTime fechaInicio, DateTime fechaFin)
        {
            //listado de eventos con uno o varias interrupciones
            var listaEvento = FactorySic.ObtenerEventoDao().ObtenerEventosFallas(fechaInicio, fechaFin, ConstantesAppServicio.SI, ConstantesAppServicio.NO).OrderBy(x => x.EVENINI).ToList();

            //elementos unicos
            listaEvento = listaEvento.GroupBy(x => new { x.EVENCODI }).Select(x => x.First()).ToList();

            //todos los eventos deben iniciar despues o igual de la fecha inicial
            listaEvento = listaEvento.Where(x => x.EVENINI >= fechaInicio).ToList();

            //interrupciones
            var listaInterrup = new List<EveInterrupcionDTO>();
            if (listaEvento.Any()) listaInterrup = this.GetByCriteriaEveInterrupcions(string.Join(",", listaEvento.Select(x => x.EVENCODI).ToList()));

            //data adicional de cada evento que tiene al menos una interrupcion
            foreach (var item in listaEvento)
            {
                var listaIntXEvento = listaInterrup.Where(x => x.Evencodi == item.EVENCODI).ToList();
                var listaIntXEventoInterr = listaIntXEvento.Where(x => x.Interrnivel != "S").ToList();
                var listaIntXEventoBajaMW = listaIntXEvento.Where(x => x.Interrnivel == "S").ToList();

                // Subtabla Interrupciones/Reducciones
                decimal acumI = listaIntXEventoInterr.Sum(x => x.Interrmw ?? 0);

                // Subtabla por Reducciones de carga
                decimal acumB = listaIntXEventoBajaMW.Sum(x => x.Interrmw ?? 0);

                //minutos
                decimal interrminu = listaIntXEvento.Sum(x => x.Interrminu ?? 0);

                if (acumI > 0) item.INTERRMW = Math.Round(acumI, 2);
                if (acumB > 0) item.BAJOMW = Math.Round(acumB, 2);
                item.Interrminu = Math.Round(interrminu, 2);
                if (item.ENERGIAINTERRUMPIDA > 0) item.ENERGIAINTERRUMPIDA = Math.Round((decimal)item.ENERGIAINTERRUMPIDA, 2);
            }

            return listaEvento;
        }

        /// <summary>
        /// Retorna listado de causas utilizados en del CIER
        /// </summary>
        /// <returns></returns>
        public List<EveCausaeventoDTO> GetCausasFallasCIER()
        {

            List<EveCausaeventoDTO> causas = FactorySic.GetEveCausaeventoRepository().List().Where(x =>
                                          x.Causaevencodi == int.Parse(ConstantesPR5ReportesServicio.CausaExt)
                                       || x.Causaevencodi == int.Parse(ConstantesPR5ReportesServicio.CausaFna)
                                       || x.Causaevencodi == int.Parse(ConstantesPR5ReportesServicio.CausaFhu)
                                       || x.Causaevencodi == int.Parse(ConstantesPR5ReportesServicio.CausaFec)
                                       || x.Causaevencodi == int.Parse(ConstantesPR5ReportesServicio.CausaFep)
                                       || x.Causaevencodi == ConstantesPR5ReportesServicio.CausaevencodiOperacion
                                       || x.Causaevencodi == int.Parse(ConstantesPR5ReportesServicio.CausaOtr)
                                       || x.Causaevencodi == int.Parse(ConstantesPR5ReportesServicio.CausaFni)).ToList();

            causas.ForEach(x =>
            {
                if (x.Causaevencodi == int.Parse(ConstantesPR5ReportesServicio.CausaFni))
                {
                    x.Causaevenabrev = "FNI";
                    x.Causaevendesc = "FALLAS CUYA CAUSA NO FUE IDENTIFICADA";
                }
            });

            return causas;

        }

        #endregion

        #region M. PERFIL DE TENSIONES EN BARRAS DEL SEIN

        private void GenerarExcelTensionBarras(ExcelWorksheet ws, FechasPR5 objFecha, int red, InfSGIFiltroReporte objFiltro)
        {
            DateTime fechaInicial = objFecha.FechaInicial;
            DateTime fechaFinal = objFecha.FechaFinal;

            InfSGIReporteVersionado objReporte = ListarDataVersionPerfilTensionBarraDeRed(objFiltro, red, fechaInicial, fechaFinal);

            List<ItemMenuNumeral> listaItem = ListarItemFromSiMenureporte();

            UtilSemanalPR5.GenerarCharExcelListadoTensionBarras(ws, objFecha, objReporte.ListaTbarras, red, listaItem);
            UtilSemanalPR5.GenerarCharExcelGraficoTensionBarras(ws, objFecha, objReporte.ListaTbarras, red);
        }

        #region M.  PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 500kV, 22KV Y 138KV

        private List<TensionBarras> GetTensionBarras(int idBarra, DateTime fechaInicial, DateTime fechaFinal)
        {
            //////// Declaracion de Variables //////
            ScadaSp7AppServicio servScadaSp7 = new ScadaSp7AppServicio();
            decimal? maximoValor = 0;
            decimal? minimoValor = 0;

            decimal? valorH;
            ////////// Fin de Declaracion de Variables

            int zona = 0;
            switch (idBarra)
            {
                case 500: zona = ConstantesAppServicio.FiltroTension500kv; break;
                case 220: zona = ConstantesAppServicio.FiltroTension220kv; break;
                case 138: zona = ConstantesAppServicio.FiltroTension138kv; break;
            }

            List<MeScadaSp7DTO> listaDemanda = servScadaSp7.BuscarOperaciones(false, zona, fechaInicial, fechaFinal, 1, 1000).ToList();

            List<TensionBarras> lstTensionBarras = new List<TensionBarras>();
            List<int> lstPuntos = listaDemanda.Select(x => x.Canalcodi).Distinct().ToList();

            foreach (var ptoMedCod in lstPuntos)
            {
                int numDatos = 0;
                decimal? total = 0;

                TensionBarras tensionB = new TensionBarras();
                var grupoXPto = listaDemanda.Where(x => x.Canalcodi == ptoMedCod).ToList();

                tensionB.Ptomedicodi = grupoXPto.First().Canalcodi;
                tensionB.Ptomedidesc = grupoXPto.First().Canalnomb;

                List<decimal> lstMax = new List<decimal>();
                List<decimal> lstMed = new List<decimal>();
                List<decimal> lstMin = new List<decimal>();

                maximoValor = Decimal.MinValue;
                minimoValor = Decimal.MaxValue;

                foreach (var dmdTotalDia in grupoXPto)
                {
                    for (var j = 1; j <= 96; j++)
                    {
                        valorH = ((decimal?)dmdTotalDia.GetType().GetProperty(ConstantesAppServicio.CaracterH + j.ToString()).GetValue(dmdTotalDia, null));

                        if (valorH != null)
                        {
                            if (Math.Abs((decimal)valorH) > 110)
                            {

                                if (valorH > maximoValor)
                                {
                                    maximoValor = valorH.Value;
                                }
                                if (valorH < minimoValor)
                                {
                                    minimoValor = valorH.Value;
                                }
                                numDatos++;
                                total = total + valorH;
                            }
                        }
                    }
                }
                tensionB.ValorMin = minimoValor != Decimal.MaxValue ? minimoValor : null;
                tensionB.ValorMed = numDatos != 0 ? total / numDatos : null;
                tensionB.ValorMax = maximoValor != Decimal.MinValue ? maximoValor : null;

                lstTensionBarras.Add(tensionB);
            }
            return lstTensionBarras;
        }

        /// <summary> DATOS PARA LISTAR LA VERSION DEL PERFIL TENSION DE BARRAS
        /// genera listado de tensión de barras para un rango de fechas
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <param name="red"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        public InfSGIReporteVersionado ListarDataVersionPerfilTensionBarraDeRed(InfSGIFiltroReporte objFiltro, int red, DateTime fechaInicial, DateTime fechaFinal)
        {

            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                var lista = GetTensionBarras(red, fechaInicial, fechaFinal);

                objReporte = new InfSGIReporteVersionado()
                {
                    ListaTbarras = lista
                };
            }
            else
            {
                //lista de tensiones barrra
                List<TensionBarras> listaTensionBarra = new List<TensionBarras>();


                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi);

                foreach (var objDat in listaDat)
                {
                    //llenar la tabla tensiones barrra
                    if (objDat.Verdatid > 0)
                    {
                        var tgen = new TensionBarras()
                        {
                            Ptomedicodi = objDat.Verdatid,
                            Ptomedidesc = objDat.Verdatvalor
                        };

                        //asignamos los valores maximos, medios y minimos
                        foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).OrderBy(x => x.Vdatdtcodi).ToList())
                        {
                            switch (objDatDet.Vercnpcodi)
                            {
                                case ConstantesConceptoVersion.ConceptoCodigoMaxTensionBarraRed:
                                    tgen.ValorMax = objDatDet.ValorDecimal;
                                    break;
                                case ConstantesConceptoVersion.ConceptoCodigoMedTensionBarraRed:
                                    tgen.ValorMed = objDatDet.ValorDecimal;
                                    break;
                                case ConstantesConceptoVersion.ConceptoCodigoMinTensionBarraRed:
                                    tgen.ValorMin = objDatDet.ValorDecimal;
                                    break;
                            }
                        }

                        //comprobar si no esta registrado y lo añadimos
                        if (listaTensionBarra.Find(x => x.Ptomedicodi == tgen.Ptomedicodi) == null)
                        {
                            listaTensionBarra.Add(tgen);
                        }
                    }
                }


                objReporte = new InfSGIReporteVersionado()
                {
                    ListaTbarras = listaTensionBarra
                };

            }

            return objReporte;
        }

        #endregion

        #endregion

        #region Detalle de Eventos

        /// <summary>
        /// ListarDataVersionDetalleEventos
        /// </summary>
        /// <param name="objFiltro"></param>
        /// <returns></returns>
        public InfSGIReporteVersionado ListarDataVersionDetalleEventos(InfSGIFiltroReporte objFiltro)
        {
            InfSGIReporteVersionado objReporte = new InfSGIReporteVersionado();

            SiVersionDetDTO objVerDet = GetByIdSiVersionDet(objFiltro.Verscodi, objFiltro.Mrepcodi);
            if (objVerDet == null)
            {
                List<EventoDTO> listaEventos = this.ObtenerDetalleEventos(objFiltro.ObjFecha.FechaInicial, objFiltro.ObjFecha.FechaFinal);

                if (!objFiltro.ObjFecha.EsReporteEjecutivoSemanal)
                {
                    objReporte.Resultado = UtilSemanalPR5.ListarReporteDetalleEventos(objFiltro.ObjFecha.FechaInicial, objFiltro.ObjFecha.FechaFinal, listaEventos);
                }
                else
                {

                    objReporte.Resultado = UtilSemanalPR5.GenerarHTMLDetalleEventos(ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal, listaEventos, objFiltro.ObjFecha.FechaInicial, objFiltro.ObjFecha.FechaFinal);
                }
                objReporte.ListaEventos = listaEventos;
            }
            else
            {
                int versdtcodi = objVerDet.Versdtcodi;
                List<SiVersionDatDTO> listaDat = GetByCriteriaSiVersionDats(versdtcodi).OrderBy(x => x.Verdatcodi).ToList();
                List<SiVersionDatdetDTO> listaDatDetalle = GetByCriteriaSiVersionDatdets(versdtcodi).OrderBy(x => x.Vdatdtcodi).ToList();

                if (!objFiltro.ObjFecha.EsReporteEjecutivoSemanal)
                {
                    GetDataVersionDetalleEventosSem(listaDat, listaDatDetalle, out List<EventoDTO> listaEventos);
                    objReporte.Resultado = UtilSemanalPR5.ListarReporteDetalleEventos(objFiltro.ObjFecha.FechaInicial, objFiltro.ObjFecha.FechaFinal, listaEventos);
                    objReporte.ListaEventos = listaEventos;
                }
                else
                {
                    GetDataVersionDetalleEventosSemEjec(listaDat, listaDatDetalle, out List<EventoDTO> listaEventos);
                    objReporte.Resultado = UtilSemanalPR5.GenerarHTMLDetalleEventos(ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal, listaEventos, objFiltro.ObjFecha.FechaInicial, objFiltro.ObjFecha.FechaFinal);
                    objReporte.ListaEventos = listaEventos;
                }

            }
            return objReporte;
        }

        private void GetDataVersionDetalleEventosSem(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<EventoDTO> listaEventos)
        {

            listaEventos = new List<EventoDTO>();
            foreach (var objDat in listaDat)
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {

                    //INTERRMW
                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    decimal? ValorDecimal1 = null;
                    if (!string.IsNullOrEmpty(words[2]))
                    {
                        decimal.TryParse(words[2], out decimal valorDecimal);
                        ValorDecimal1 = valorDecimal;
                    }

                    //BAJOMW
                    decimal? ValorDecimal2 = null;
                    if (!string.IsNullOrEmpty(words[3]))
                    {
                        decimal.TryParse(words[3], out decimal valorDecimal);
                        ValorDecimal2 = valorDecimal;
                    }

                    var DescEvento = servicioEvento.ObtenerResumenEvento(objDatDet.Vdatdtid);

                    listaEventos.Add(new EventoDTO()
                    {
                        INTERRMW = ValorDecimal1,
                        BAJOMW = ValorDecimal2,
                        EMPRNOMB = words[0],
                        EQUIABREV = words[1],
                        EVENINI = objDatDet.Vdatdtfecha,
                        EVENCODI = objDatDet.Vdatdtid,
                        EVENDESC = DescEvento.EVENDESC
                    });
                }
            }
        }

        private void GetDataVersionDetalleEventosSemEjec(List<SiVersionDatDTO> listaDat, List<SiVersionDatdetDTO> listaDatDetalle, out List<EventoDTO> listaEventos)
        {

            listaEventos = new List<EventoDTO>();
            foreach (var objDat in listaDat)
            {
                foreach (var objDatDet in listaDatDetalle.Where(x => x.Verdatcodi == objDat.Verdatcodi).ToList())
                {


                    string[] words = objDatDet.Vdatdtvalor.Split('|');
                    decimal ValorDecimalDurac = 0;
                    //Duración (min
                    if (!string.IsNullOrEmpty(words[5]))
                    {
                        decimal.TryParse(words[5], out decimal valorDecimal);
                        ValorDecimalDurac = valorDecimal;
                    }

                    //INTERRMW
                    decimal? ValorDecimal1 = null;
                    if (!string.IsNullOrEmpty(words[6]))
                    {
                        decimal.TryParse(words[6], out decimal valorDecimal1);
                        ValorDecimal1 = valorDecimal1;
                    }

                    //BAJOMW
                    decimal? ValorDecimal2 = null;
                    if (!string.IsNullOrEmpty(words[7]))
                    {
                        decimal.TryParse(words[7], out decimal valorDecimal2);
                        ValorDecimal2 = valorDecimal2;
                    }

                    //Energía Interrumpida
                    decimal? ValorDecimalEnerInt = null;
                    if (!string.IsNullOrEmpty(words[8]))
                    {
                        decimal.TryParse(words[8], out decimal valorDecimal3);
                        ValorDecimalEnerInt = valorDecimal3;
                    }

                    DateTime FechaFin = DateTime.ParseExact(words[4], ConstantesAppServicio.FormatoFechaFull2, CultureInfo.InvariantCulture);

                    var DescEvento = servicioEvento.ObtenerResumenEvento(objDatDet.Vdatdtid);

                    listaEventos.Add(new EventoDTO()
                    {
                        INTERRMW = ValorDecimal1,
                        BAJOMW = ValorDecimal2,
                        EMPRNOMB = words[0],
                        EQUIABREV = words[1],
                        SUBCAUSAABREV = words[2],
                        FAMNOMB = words[3],
                        EVENINI = objDatDet.Vdatdtfecha,
                        EVENFIN = FechaFin,
                        Interrminu = ValorDecimalDurac,
                        ENERGIAINTERRUMPIDA = ValorDecimalEnerInt,
                        EVENCODI = objDatDet.Vdatdtid,
                        EVENDESC = DescEvento.EVENDESC,
                        EVENASUNTO = DescEvento.EVENASUNTO
                    });
                }
            }
        }

        private void GenerarExcelDetalleEventos(ExcelWorksheet ws, InfSGIFiltroReporte objFiltro)
        {
            SiVersionDTO objVersion = this.GetByIdSiVersion(objFiltro.Verscodi);
            DateTime fechaInicial = objVersion.Versfechaperiodo;
            DateTime fechaFinal = fechaInicial.AddDays(6);

            //List<EventoDTO> listaEventos = this.ObtenerDetalleEventos(fechaInicial, fechaFinal);
            InfSGIReporteVersionado objReporte = this.ListarDataVersionDetalleEventos(objFiltro);

            UtilSemanalPR5.GenerarExcelDetalleEventos(ws, objFiltro.ObjFecha, objReporte.ListaEventos, objFiltro.ListaItem);
        }

        private void GenerarExcelDetalleEventosEjecutivo(ExcelWorksheet ws, ExcelPackage xlPackage, InfSGIFiltroReporte objFiltro, out int nroHojas)
        {
            InfSGIReporteVersionado objReporte = this.ListarDataVersionDetalleEventos(objFiltro);

            UtilSemanalPR5.GenerarExcelDetalleEventosEjecutivo(ws, xlPackage, objFiltro.ObjFecha, objReporte.ListaEventos, objFiltro.ListaItem, out nroHojas);
        }

        #endregion

        #endregion

        #region Exportación de Archivo Excel - Anexo A

        /// <summary>
        /// Anexo2_Hidrología
        /// </summary>
        /// <param name="versionAnexoA"></param>
        /// <param name="fecha"></param>
        /// <param name="ruta"></param>
        /// <param name="nombreArchivo"></param>
        /// <param name="pathLogo"></param>
        public void GenerarArchivoExcelAnexoA2Hidrologia(string versionAnexoA, DateTime fecha, string ruta, out string nombreArchivo, string pathLogo)
        {
            nombreArchivo = ConstantesPR5ReportesServicio.RptExcelAnexoA2 + "_" + fecha.ToString(ConstantesAppServicio.FormatoDiaMes2) + ConstantesPR5ReportesServicio.ExtensionExcel;
            string rutaNombreArchivo = ruta + nombreArchivo;

            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                //Princip_Caudales y Volúmenes
                #region "Reporte Caudales de las Centrales Hidroelectricas"
                ReporteCaudalesCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha, fecha, versionAnexoA);
                #endregion

                #region "Reporte Horario Caudal y Volumen - Hidroelectricas"
                VolumenCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha, fecha, versionAnexoA);
                #endregion

                //Vertimiento de Embalses
                #region "Reporte Vertimientos Embalses (Periodo-Volumen)"
                ReporteVertimientosPeriodoVolumenExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha, fecha, versionAnexoA);
                #endregion

                //Descarga de Lagunas
                #region "Reporte Horario Caudal y Volumen - Hidroelectricas"
                DescargaLagunaCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha, fecha, versionAnexoA);
                #endregion

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Anexo3_RPFyRSF
        /// </summary>
        /// <param name="versionAnexoA"></param>
        /// <param name="fecha"></param>
        /// <param name="ruta"></param>
        /// <param name="nombreArchivo"></param>
        /// <param name="pathLogo"></param>
        public void GenerarArchivoExcelAnexoA3RPFyRSF(string versionAnexoA, DateTime fecha, string ruta, out string nombreArchivo, string pathLogo)
        {
            nombreArchivo = ConstantesPR5ReportesServicio.RptExcelAnexoA3 + "_" + fecha.ToString(ConstantesAppServicio.FormatoDiaMes2) + ConstantesPR5ReportesServicio.ExtensionExcel;
            string rutaNombreArchivo = ruta + nombreArchivo;

            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                #region "Registro de asignación de la RRPF y RRSF"
                ReporteAsignacionRRPFyRRSExcel(ref ws, xlPackage, pathLogo, fecha, fecha, versionAnexoA);
                #endregion

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Anexo4_Hop
        /// </summary>
        /// <param name="versionAnexoA"></param>
        /// <param name="fecha"></param>
        /// <param name="ruta"></param>
        /// <param name="nombreArchivo"></param>
        /// <param name="pathLogo"></param>
        public void GenerarArchivoExcelAnexoA4Hop(string versionAnexoA, DateTime fecha, string ruta, out string nombreArchivo, string pathLogo)
        {
            nombreArchivo = ConstantesPR5ReportesServicio.RptExcelAnexoA4 + "_" + fecha.ToString(ConstantesAppServicio.FormatoDiaMes2) + ConstantesPR5ReportesServicio.ExtensionExcel;
            string rutaNombreArchivo = ruta + nombreArchivo;

            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                #region "Reporte Horas de Arranque,Parada Ingreso y Salida de Generación del SEIN"

                //solo horas de operación térmicas
                ReporteHorasOrdenAPISExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto,
                    "3,5", ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.ParamTipoOperacionTodos, fecha, fecha, versionAnexoA);

                #endregion

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Anexo5_Manttoejec
        /// </summary>
        /// <param name="versionAnexoA"></param>
        /// <param name="fecha"></param>
        /// <param name="ruta"></param>
        /// <param name="nombreArchivo"></param>
        /// <param name="pathLogo"></param>
        public void GenerarArchivoExcelAnexoA5Manttoeje(string versionAnexoA, DateTime fecha, string ruta, out string nombreArchivo, string pathLogo)
        {
            nombreArchivo = ConstantesPR5ReportesServicio.RptExcelAnexoA5 + "_" + fecha.ToString(ConstantesAppServicio.FormatoDiaMes2) + ConstantesPR5ReportesServicio.ExtensionExcel;
            string rutaNombreArchivo = ruta + nombreArchivo;

            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                #region "Principales restricciones operativas y Unidades de Generación del Sistema de Transmisión"
                ReporteManttoEjecutadoExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha, fecha, versionAnexoA);
                #endregion

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Anexo6_CMgCP
        /// </summary>
        /// <param name="versionAnexoA"></param>
        /// <param name="fecha"></param>
        /// <param name="ruta"></param>
        /// <param name="nombreArchivo"></param>
        /// <param name="pathLogo"></param>
        public void GenerarArchivoExcelAnexoA6CMgCP(string versionAnexoA, DateTime fecha, string ruta, out string nombreArchivo, string pathLogo)
        {
            nombreArchivo = ConstantesPR5ReportesServicio.RptExcelAnexoA6 + "_" + fecha.ToString(ConstantesAppServicio.FormatoDiaMes2) + ConstantesPR5ReportesServicio.ExtensionExcel;
            string rutaNombreArchivo = ruta + nombreArchivo;

            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                #region "Reporte de los Costos Marginales de Corto Plazo en las Barras del SEIN"
                ReporteCostoMarginalesCPExcel(ref ws, xlPackage, pathLogo, 1, fecha, versionAnexoA);
                ReporteCostoMarginalesCPExcel(ref ws, xlPackage, pathLogo, 2, fecha, versionAnexoA);
                ReporteCostoMarginalesCPExcel(ref ws, xlPackage, pathLogo, 3, fecha, versionAnexoA);
                #endregion

                xlPackage.Save();
            }
        }

        private static string GetNombreArchivoExcelAnexoA(DateTime fecha, int correlativo)
        {
            return string.Format("AnexoA_{0}_v{1}.xlsx", fecha.ToString(ConstantesAppServicio.FormatoDiaMes2), correlativo);
        }

        /// <summary>
        /// Generar el archivo completo del Anexo A - PR5
        /// </summary>
        /// <param name="versionAnexoA"></param>
        /// <param name="fecha"></param>
        /// <param name="ruta"></param>
        /// <param name="correlativo"></param>
        /// <param name="nombreArchivo"></param>
        /// <param name="pathLogo"></param>
        /// <exception cref="Exception"></exception>
        public void GenerarArchivoExcelAnexoACompleto(string versionAnexoA, DateTime fecha, string ruta, int correlativo, out string nombreArchivo, string pathLogo)
        {
            nombreArchivo = GetNombreArchivoExcelAnexoA(fecha, correlativo);
            string rutaNombreArchivo = ruta + nombreArchivo;
            DateTime fecha1 = fecha;
            DateTime fecha2 = fecha;
            DateTime fechaIniMes = new DateTime(fecha.Year, fecha.Month, 1);
            bool flagVisiblePtomedicodi = false;

            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                //INFORMACIÓN GENERAL
                //case ConstantesAnexoAPR5.IndexReporteEventos:
                #region "Reporte de Eventos: fallas, interrupciones, restricciones y otros de carácter operativo"
                ReporteEventosExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteRestriccionesOperativas:
                #region "Principales restricciones operativas y Unidades de Generación del Sistema de Transmisión"
                ReporteRestriccionesOperativasExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                ReporteManttoEjecutadoExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion
                //case ConstantesAnexoAPR5.IndexReporteIngresoOperacionCISEIN:
                #region "Reporte Ing. Operac., Conexion e Inte. al SEIN"
                ReporteIngresoConexionIntegracionExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //PRODUCCIÓN Y DEMANDA
                //case ConstantesAnexoAPR5.IndexDespachoRegistrado:
                #region "Despacho registrado cada 30 minutos de la Unidades de Generacion de los Integrantes del COES"
                ReporteDespachoRegistradoExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesTipoInformacion.TipoinfoMW, ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho, fecha1, fecha2, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), 0, versionAnexoA);
                ReporteDespachoRegistradoExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesTipoInformacion.TipoinfoMVar, ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho, fecha1, fecha2, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), 0, versionAnexoA);
                #endregion
                //case ConstantesAnexoAPR5.IndexReporteDemandaPorArea:
                #region "Reporte de Demanda por Área"
                ReporteDemandaPorAreaYSubareaExcel(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteDemandaGrandesUsuarios:
                #region "Reporte de Demanda de Grandes Usuarios "
                ReporteDemandaGrandesUsuariosExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEIN:
                #region "Recursos energéticos y diagrama de duración de demanda del SEIN "
                ReportePotenciaXTipoRecursoExcel(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, 1, fecha1, fecha2, versionAnexoA);
                ReportePotenciaXTipoRecursoExcel(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, 3, fecha1, fecha2, versionAnexoA);
                ReportePotenciaXTipoRecursoExcel(ref ws, xlPackage, pathLogo, ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, 2, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteProduccionEnergiaDiaria:
                #region "Reporte de Evolución de la Producción de Energía Diaria"
                ReporteProduccionEnergiaDiariaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fechaIniMes, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteGeneracionDelSEIN:
                #region "Máxima Generación Instantánea del SEIN(MW)"
                ReporteMaxGeneracionInstSEINExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho, versionAnexoA);
                #endregion

                //INFORMACIÓN DE LAS UNIDADES DE GENERACIÓN
                //case ConstantesAnexoAPR5.IndexReporteHorasOrdenAPIS:
                #region "Reporte Horas de Arranque,Parada Ingreso y Salida de Generación del SEIN"
                ReporteHorasOrdenAPISExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto,
                    "3,5", ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.ParamTipoOperacionTodos, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteHoraInicioFinIndisponibilidad:
                #region "Hora Inicio y Fin de Indisponibilidades de las Unidades de Generación SEIN"
                ReporteHoraIndisponibilidadesExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteReservaFriaSistema:
                #region "Reserva Fría del sistema"
                ReporteReservaFriaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, "-1", fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteCaudalesCentralHidroelectrica:
                #region "Reporte Caudales de las Centrales Hidroelectricas"
                ReporteCaudalesCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectrica:
                #region "Reporte Horario Caudal y Volumen - Hidroelectricas"
                VolumenCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                DescargaLagunaCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteVertimientosPeriodoVolumen:
                #region "Reporte Vertimientos Embalses (Periodo-Volumen)"
                ReporteVertimientosPeriodoVolumenExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteCantidadCombustibleCentralTermica:
                #region "Reporte de Stock de Combustibles"
                ReporteCantidadCombustibleCentralTermicaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteCombustibleConsumidoUnidadTermoelectrica:
                #region "Reporte de Consumo de Combustibles"
                ReporteCombustibleConsumidoUnidadTermoelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectrica:
                #region "Reporte Consumo y Presion Diario (U. Termoelectrica)"

                //Presión
                ReporteGasNaturalUnidadTermoelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto,
                    ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, 1, fecha1, fecha2, versionAnexoA);

                //Temperatura
                ReporteGasNaturalUnidadTermoelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto,
                    ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, 2, fecha1, fecha2, versionAnexoA);

                //Disponibilidad
                ReporteGasNaturalUnidadTermoelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto,
                    ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, 4, fecha1, fecha2, versionAnexoA);

                #endregion

                //case ConstantesAnexoAPR5.IndexReporteRegistroEnergiaPrimaria30Unidades:
                #region "Reporte Diario 30 min Energia Primaria(Unidades - Centrales)"
                ReporteRegistroEnergia30UnidadesExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteCalorUtilGeneracionProceso:
                #region "Reporte Calor Util (Unidad Generacion - Proceso Industrial)"
                ReporteCalorUtilGeneracionProcesoExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //SISTEMA DE TRANSMISIÓN
                //case ConstantesAnexoAPR5.IndexReportePALineasTransmision:
                #region "Reporte de Potencia Activa Líneas de Transmisión del SEIN"
                ReporteFlujoPotenciaActivaTransmisionSEINExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, ConstantesTipoInformacion.TipoinfoMW, fecha1, fecha2, versionAnexoA);
                ReporteFlujoPotenciaActivaTransmisionSEINExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, ConstantesTipoInformacion.TipoinfoMVar, fecha1, fecha2, versionAnexoA);
                ReporteInterconexionesSEINExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, fecha1);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteTensionBarrasSEIN:
                #region "Tensión de las Barras del SEIN definidas por el COES"
                ReporteTensionBarrasSeinExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteSobrecargaEquipos:
                #region "Reporte de Sobrecarga de Equipos Mayores a 100 kV"
                ReporteSobrecargaEquipoExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteLineasDesconectadasPorTension:
                #region "Reporte de Líneas Desconectadas por Regulación de Tensión"
                ReporteLineasDesconectadasPorTensionExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteSistemasAisladosTemporales:
                #region "Reporte de Sistemas Aislados Temporales"
                ReporteSistemasAisladosTemporalesExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                #endregion

                //INFORMACIÓN DEL PRODUCTO
                //case ConstantesAnexoAPR5.IndexReporteVariacionesSostenidasSubitas:
                #region "Reporte de las Variaciones Sostenidas y Súbitas de Frecuencia en el SEIN"
                ReporteVariacionesFrecuenciaSEINExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitas:
                #region "Reporte de Sistemas Aislados Temporales y sus variaciones sostenidas y súbitas de frecuencia."
                ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasExcel(ref ws, xlPackage, pathLogo, fecha1, versionAnexoA);
                #endregion

                //DESVIACIONES CON RESPECTO AL PDO
                //case ConstantesAnexoAPR5.IndexReporteDesviacionesDemandaPronostico:
                #region "Desviaciones de la Demanda Respecto a su Pronóstico"
                ReporteDesviacionDemandaPronosticoExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteDesviacionesProduccionUG:
                #region "Desviaciones Producción Unidades de Generación"
                ReporteDesviacionesProduccionUGExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                #endregion

                //INFORMACIÓN DEL MERCADO DE CORTO PLAZO
                //case ConstantesAnexoAPR5.IndexReporteCostoMarginalesCortoPlazo:
                //#region "Reporte de los Costos Marginales de Corto Plazo en las Barras del SEIN"
                //ReporteCostoMarginalesCPExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                //#endregion

                //case ConstantesAnexoAPR5.IndexReporteCostoTotalOperacionEjecutada:
                #region "Reporte de Costo Total de Operación Ejecutada"
                ReporteCostoTotalOperacionEjecutadaExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteCalificacionOperacionUnidades:
                #region "Calificación de la Operacion de las Unidades de Generación"
                ReporteCalificacionHoraOperacionExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, "3,5",
                        ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.ParamTipoOperacionTodos, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteRegistroCongestionesST:
                #region "Reporte de los Registro de las Congestiones del Sistema de Transmisión"
                GeneraRptRegistroCongestionesSTHoja(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                #endregion

                //case ConstantesAnexoAPR5.IndexReporteAsignacionRRPFyRRSF:
                #region "Registro de asignación de la RRPF y RRSF"
                ReporteAsignacionRRPFyRRSExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                #endregion

                //INFORMACIÓN SOBRE INTERCAMBIOS DE ELECTRICIDAD
                //case ConstantesAnexoAPR5.IndexReporteRegistroFlujosEnlacesInternacionales:
                #region "Registro de los Flujos Enlaces Internacionales"
                ReporteRegistroFlujosEIExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, fecha1, fecha2, versionAnexoA);
                #endregion

                //NOTAS
                //  case ConstantesAnexoAPR5.IndexObservacion:
                #region "Observaciones"
                ReporteNotasObservacionesExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA, ConstantesAnexoAPR5.IndexObservacion);
                #endregion

                //case ConstantesAnexoAPR5.IndexRecomendacionConclusion:
                #region "Recomendaciones y Conclusiones"
                ReporteNotasObservacionesExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA, ConstantesAnexoAPR5.IndexRecomendacionConclusion);
                #endregion

                if (ws == null)
                {
                    throw new Exception("No se generó el archivo Excel");
                }
            }
        }

        /// <summary>
        /// Generar el archivo excel de un item especifico
        /// </summary>
        /// <param name="versionAnexoA"></param>
        /// <param name="fecha1"></param>
        /// <param name="fecha2"></param>
        /// <param name="rutaNombreArchivo"></param>
        /// <param name="reporcodi"></param>
        /// <param name="param1"></param>
        /// <param name="param2"></param>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <param name="pathLogo"></param>
        /// <exception cref="Exception"></exception>
        public void GenerarArchivoExcelAnexoAByItem(string versionAnexoA, DateTime fecha1, DateTime fecha2, string rutaNombreArchivo, int reporcodi
            , string param1, string param2, string param3, string param4, string idEmpresa, string idCentral, string pathLogo)
        {
            FileInfo newFile = new FileInfo(rutaNombreArchivo);
            bool flagVisiblePtomedicodi = true;

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaNombreArchivo);
            }

            //TODO
            GenerarIndicadores(fecha1);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                switch (reporcodi)
                {
                    //INFORMACIÓN GENERAL
                    case ConstantesAnexoAPR5.IndexReporteEventos:
                        #region "Reporte de Eventos: fallas, interrupciones, restricciones y otros de carácter operativo"
                        ReporteEventosExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteRestriccionesOperativas:
                        #region "Principales restricciones operativas y Unidades de Generación del Sistema de Transmisión"
                        ReporteRestriccionesOperativasExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        ReporteManttoEjecutadoExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;
                    case ConstantesAnexoAPR5.IndexReporteIngresoOperacionCISEIN:
                        #region "Reporte Ing. Operac., Conexion e Inte. al SEIN"
                        ReporteIngresoConexionIntegracionExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    //PRODUCCIÓN Y DEMANDA
                    case ConstantesAnexoAPR5.IndexDespachoRegistrado:
                        #region "Despacho registrado cada 30 minutos de la Unidades de Generacion de los Integrantes del COES"
                        ReporteDespachoRegistradoExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, idEmpresa, idCentral, Int32.Parse(param1), Int32.Parse(param2), fecha1, fecha2, param3, Int32.Parse(param4), versionAnexoA);
                        #endregion
                        break;
                    case ConstantesAnexoAPR5.IndexReporteDemandaPorArea:
                        #region "Reporte de Demanda por Área"
                        ReporteDemandaPorAreaYSubareaExcel(ref ws, xlPackage, pathLogo, Int32.Parse(param2), ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteDemandaGrandesUsuarios:
                        #region "Reporte de Demanda de Grandes Usuarios "
                        ReporteDemandaGrandesUsuariosExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEIN:
                        #region "Recursos energéticos y diagrama de duración de demanda del SEIN "
                        ReportePotenciaXTipoRecursoExcel(ref ws, xlPackage, pathLogo, Int32.Parse(param2), ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, Convert.ToInt32(param1), fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteProduccionEnergiaDiaria:
                        #region "Reporte de Evolución de la Producción de Energía Diaria"
                        ReporteProduccionEnergiaDiariaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteGeneracionDelSEIN:
                        #region "Máxima Generación Instantánea del SEIN(MW)"
                        ReporteMaxGeneracionInstSEINExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, Int32.Parse(param2), versionAnexoA);
                        #endregion
                        break;

                    //INFORMACIÓN DE LAS UNIDADES DE GENERACIÓN
                    case ConstantesAnexoAPR5.IndexReporteHorasOrdenAPIS:
                        #region "Reporte Horas de Arranque,Parada Ingreso y Salida de Generación del SEIN"
                        ReporteHorasOrdenAPISExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.ParamTipoOperacionTodos, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteHoraInicioFinIndisponibilidad:
                        #region "Hora Inicio y Fin de Indisponibilidades de las Unidades de Generación SEIN"
                        ReporteHoraIndisponibilidadesExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteReservaFriaSistema:
                        #region "Reserva Fría del sistema"
                        ReporteReservaFriaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, param1, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteCaudalesCentralHidroelectrica:
                        #region "Reporte Caudales de las Centrales Hidroelectricas"
                        ReporteCaudalesCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectrica:
                        #region "Reporte Horario Caudal y Volumen - Hidroelectricas"
                        VolumenCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        DescargaLagunaCentralHidroelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteVertimientosPeriodoVolumen:
                        #region "Reporte Vertimientos Embalses (Periodo-Volumen)"
                        ReporteVertimientosPeriodoVolumenExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteCantidadCombustibleCentralTermica:
                        #region "Reporte de Stock de Combustibles"
                        ReporteCantidadCombustibleCentralTermicaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteCombustibleConsumidoUnidadTermoelectrica:
                        #region "Reporte de Consumo de Combustibles"
                        ReporteCombustibleConsumidoUnidadTermoelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectrica:
                        #region "Reporte Consumo y Presion Diario (U. Termoelectrica)"
                        ReporteGasNaturalUnidadTermoelectricaExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, Int32.Parse(param1), fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteRegistroEnergiaPrimaria30Unidades:
                        #region "Reporte Diario 30 min Energia Primaria(Unidades - Centrales)"
                        ReporteRegistroEnergia30UnidadesExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteCalorUtilGeneracionProceso:
                        #region "Reporte Calor Util (Unidad Generacion - Proceso Industrial)"
                        ReporteCalorUtilGeneracionProcesoExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    //SISTEMA DE TRANSMISIÓN
                    case ConstantesAnexoAPR5.IndexReportePALineasTransmision:
                        #region "Reporte de Potencia Activa Líneas de Transmisión del SEIN"
                        ReporteFlujoPotenciaActivaTransmisionSEINExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, Int32.Parse(param1), fecha1, fecha2, versionAnexoA);
                        //ReporteInterconexionesSEINExcel(ref ws, xlPackage, pathLogo,flagVisiblePtomedicodi, fecha1);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteTensionBarrasSEIN:
                        #region "Tensión de las Barras del SEIN definidas por el COES"
                        ReporteTensionBarrasSeinExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteSobrecargaEquipos:
                        #region "Reporte de Sobrecarga de Equipos Mayores a 100 kV"
                        ReporteSobrecargaEquipoExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteLineasDesconectadasPorTension:
                        #region "Reporte de Líneas Desconectadas por Regulación de Tensión"
                        ReporteLineasDesconectadasPorTensionExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteSistemasAisladosTemporales:
                        #region "Reporte de Sistemas Aislados Temporales"
                        ReporteSistemasAisladosTemporalesExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    //INFORMACIÓN DEL PRODUCTO
                    case ConstantesAnexoAPR5.IndexReporteVariacionesSostenidasSubitas:
                        #region "Reporte de las Variaciones Sostenidas y Súbitas de Frecuencia en el SEIN"

                        ReporteVariacionesFrecuenciaSEINExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;
                    case ConstantesAnexoAPR5.IndexReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitas:
                        #region "Reporte de Sistemas Aislados Temporales y sus variaciones sostenidas y súbitas de frecuencia."
                        ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasExcel(ref ws, xlPackage, pathLogo, fecha1, versionAnexoA);
                        #endregion
                        break;

                    //DESVIACIONES CON RESPECTO AL PDO
                    case ConstantesAnexoAPR5.IndexReporteDesviacionesDemandaPronostico:
                        #region "Desviaciones de la Demanda Respecto a su Pronóstico"
                        ReporteDesviacionDemandaPronosticoExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteDesviacionesProduccionUG:
                        #region "Desviaciones Producción Unidades de Generación"
                        ReporteDesviacionesProduccionUGExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    //INFORMACIÓN DEL MERCADO DE CORTO PLAZO
                    case ConstantesAnexoAPR5.IndexReporteCostoMarginalesCortoPlazo:
                        #region "Reporte de los Costos Marginales de Corto Plazo en las Barras del SEIN"
                        ReporteCostoMarginalesCPExcel(ref ws, xlPackage, pathLogo, 1, fecha1, versionAnexoA);
                        ReporteCostoMarginalesCPExcel(ref ws, xlPackage, pathLogo, 2, fecha1, versionAnexoA);
                        ReporteCostoMarginalesCPExcel(ref ws, xlPackage, pathLogo, 3, fecha1, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteCostoTotalOperacionEjecutada:
                        #region "Reporte de Costo Total de Operación Ejecutada"
                        ReporteCostoTotalOperacionEjecutadaExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteCalificacionOperacionUnidades:
                        #region "Calificación de la Operacion de las Unidades de Generación"
                        ReporteCalificacionHoraOperacionExcel(ref ws, xlPackage, pathLogo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.ParamTipoOperacionTodos, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteRegistroCongestionesST:
                        #region "Reporte de los Registro de las Congestiones del Sistema de Transmisión"
                        GeneraRptRegistroCongestionesSTHoja(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    case ConstantesAnexoAPR5.IndexReporteAsignacionRRPFyRRSF:
                        #region "Registro de asignación de la RRPF y RRSF"
                        ReporteAsignacionRRPFyRRSExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    //INFORMACIÓN SOBRE INTERCAMBIOS DE ELECTRICIDAD
                    case ConstantesAnexoAPR5.IndexReporteRegistroFlujosEnlacesInternacionales:
                        #region "Registro de los Flujos Enlaces Internacionales"
                        ReporteRegistroFlujosEIExcel(ref ws, xlPackage, pathLogo, flagVisiblePtomedicodi, fecha1, fecha2, versionAnexoA);
                        #endregion
                        break;

                    //NOTAS
                    case ConstantesAnexoAPR5.IndexObservacion:
                        #region "Observaciones"
                        ReporteNotasObservacionesExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA, ConstantesAnexoAPR5.IndexObservacion);
                        #endregion
                        break;
                    case ConstantesAnexoAPR5.IndexRecomendacionConclusion:
                        #region "Recomendaciones y Conclusiones"
                        ReporteNotasObservacionesExcel(ref ws, xlPackage, pathLogo, fecha1, fecha2, versionAnexoA, ConstantesAnexoAPR5.IndexRecomendacionConclusion);
                        #endregion
                        break;


                    //////////////////////////////////////////////////////////////////////////////////
                    //Migraciones Grupo B
                    case ConstantesAnexoAPR9.IndexReporteRestriccionesOperativasEjec:
                        #region "Restricciones operativas ejecutadas."
                        UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "RESTRIC_OPE_EJEC", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                        GeneraRptRestriccionesOperativasEjec(ws, "RESTRICCIONES OPERATIVAS EJECUTADAS", fecha1, fecha2, 4, 2);
                        #endregion
                        break;
                    case ConstantesAnexoAPR9.IndexRequerimientosPropios:
                        #region "Registro de los Flujos Enlaces Internacionales"
                        UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "Requerimientos_propios", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                        (new MigracionesAppServicio()).GeneraRptRequerimientosPropios(ws, fecha1, fecha2);
                        #endregion
                        break;
                    case ConstantesAnexoAPR9.IndexReporteQuemaGasNoEmpleado:
                        #region "Registro Quema de Gas Natural"
                        UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "QUEMA DE GAS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                        (new MigracionesAppServicio()).GeneraRptRequerimientosQuemaGasNoEmpleado(ws, fecha1, fecha2);
                        #endregion
                        break;
                    case ConstantesAnexoAPR9.IndexReporteDisponibilidadGas:
                        #region "Registro Disponibilidad Gas"
                        UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "DISPONIBILIDAD DE GAS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                        (new MigracionesAppServicio()).GeneraRptDisponibilidadGas(ws, fecha1, fecha2);
                        #endregion
                        break;
                    case ConstantesAnexoAPR9.IndexReporteRestriccionSuministros:
                        #region "Reporte Restricción de suministros: magnitud y causas."
                        UtilAnexoAPR5.ExcelCabGeneral(ref ws, xlPackage, "RESTRICCIÓN DE SUMINISTROS", fecha1, fecha2, ConstantesPR5ReportesServicio.FilaIniHeaderDefault, ConstantesPR5ReportesServicio.ColIniFooterDefault);
                        (new MigracionesAppServicio()).GeneraRptRestriccionSuministros(ws, "Reporte restrinciones de suministros: magnitud y causas", fecha1, fecha2);
                        #endregion
                        break;
                }

                if (ws == null)
                {
                    throw new Exception("No se generó el archivo Excel");
                }
            }
        }

        private void GeneraRptRestriccionesOperativasEjec(ExcelWorksheet ws, string nombreReporte, DateTime fecha1, DateTime fecha2, int rowIni, int colIni)
        {
            string tiposMantenimiento = "1", tiposEmpresa = "-1", tiposEquipo = "-1", tiposMantto = "-1", indispo = "-1", interrupcion = "-1";
            List<EveManttoDTO> data = this.servicioEvento.GenerarReportesGrafico(tiposMantenimiento, fecha1, fecha2, indispo, tiposEmpresa, ConstantesAppServicio.ParametroDefecto, tiposEquipo, interrupcion, tiposMantto);

            int row = rowIni;
            #region cabecera
            int rowIniNombreReporte = row;
            int colIniNombreReporte = colIni;
            int rowIniEmpresa = rowIniNombreReporte + 1;
            int colIniFecha = colIniNombreReporte;
            int colIniInicio = colIniFecha + 1;
            int colIniFinal = colIniInicio + 1;
            int colIniEmpresa = colIniFinal + 1;
            int colIniUbicacion = colIniEmpresa + 1;
            int colIniEquipo = colIniUbicacion + 1;
            int colIniDescripcion = colIniEquipo + 1;

            ws.Cells[rowIniEmpresa, colIniFecha].Value = "FECHA";
            ws.Cells[rowIniEmpresa, colIniInicio].Value = "INICIO";
            ws.Cells[rowIniEmpresa, colIniFinal].Value = "FINAL";
            ws.Cells[rowIniEmpresa, colIniEmpresa].Value = "EMPRESA";
            ws.Cells[rowIniEmpresa, colIniUbicacion].Value = "UBICACIÓN";
            ws.Cells[rowIniEmpresa, colIniEquipo].Value = "EQUIPO";
            ws.Cells[rowIniEmpresa, colIniDescripcion].Value = "DESCRIPCIÓN";

            //Nombre Reporte
            int colFinNombreReporte = colIniDescripcion;
            ws.Cells[rowIniNombreReporte, colIniNombreReporte].Value = nombreReporte;
            ws.Cells[rowIniNombreReporte, colIniNombreReporte].Style.Font.Size = 18;
            ws.Cells[rowIniNombreReporte, colIniNombreReporte, rowIniNombreReporte, colFinNombreReporte].Merge = true;
            ws.Cells[rowIniNombreReporte, colIniNombreReporte, rowIniNombreReporte, colFinNombreReporte].Style.WrapText = true;
            ws.Cells[rowIniNombreReporte, colIniNombreReporte, rowIniNombreReporte, colFinNombreReporte].Style.Border.BorderAround(ExcelBorderStyle.Thin);

            var colorBorder = Color.White;
            var classTipoEmpresa = "#538DD5";
            using (var range = ws.Cells[rowIniNombreReporte, colIniNombreReporte, rowIniEmpresa, colFinNombreReporte])
            {
                range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                range.Style.Font.Bold = true;
                range.Style.Border.BorderAround(ExcelBorderStyle.Thin, colorBorder);
                range.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                range.Style.Border.Top.Color.SetColor(colorBorder);
                range.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                range.Style.Border.Bottom.Color.SetColor(colorBorder);
                range.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                range.Style.Border.Left.Color.SetColor(colorBorder);
                range.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                range.Style.Border.Right.Color.SetColor(colorBorder);
                range.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml(classTipoEmpresa));
                range.Style.Font.Color.SetColor(Color.White);
                range.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                range.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
            }
            ws.Cells[rowIniNombreReporte, colIniNombreReporte, rowIniNombreReporte, colFinNombreReporte].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
            ws.Cells[rowIniNombreReporte, colIniNombreReporte, rowIniNombreReporte, colFinNombreReporte].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

            #endregion

            row = rowIniEmpresa + 1;
            #region cuerpo

            ws.Row(rowIniNombreReporte).Height = 30;
            ws.Row(rowIniEmpresa).Height = 20;
            ws.Column(colIniFecha).Width = 16;
            ws.Column(colIniInicio).Width = 13;
            ws.Column(colIniFinal).Width = 13;
            ws.Column(colIniEmpresa).Width = 30;
            ws.Column(colIniUbicacion).Width = 35;
            ws.Column(colIniEquipo).Width = 25;
            ws.Column(colIniDescripcion).Width = 250;

            if (data.Count > 0)
            {
                int rowIniData = row;
                int rowFinData = row;
                foreach (var list in data)
                {
                    string horaFinal = list.Evenini.Value.ToString(ConstantesAppServicio.FormatoHora);
                    ws.Cells[row, colIniFecha].Value = list.Evenini.Value.ToString(ConstantesBase.FormatoFecha);
                    ws.Cells[row, colIniFecha].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    ws.Cells[row, colIniFecha].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    ws.Cells[row, colIniInicio].Value = list.Evenfin.Value.ToString(ConstantesAppServicio.FormatoHora);
                    ws.Cells[row, colIniInicio].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    ws.Cells[row, colIniInicio].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    ws.Cells[row, colIniFinal].Value = (horaFinal == "00:00" && list.Evenfin.Value.Date == list.Evenini.Value.Date.AddDays(1) ? "24:00" : horaFinal);
                    ws.Cells[row, colIniFinal].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    ws.Cells[row, colIniFinal].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    ws.Cells[row, colIniEmpresa].Value = list.Emprnomb;
                    ws.Cells[row, colIniEmpresa].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    ws.Cells[row, colIniEmpresa].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    ws.Cells[row, colIniUbicacion].Value = list.Areanomb;
                    ws.Cells[row, colIniUbicacion].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    ws.Cells[row, colIniUbicacion].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    ws.Cells[row, colIniEquipo].Value = list.Equiabrev;
                    ws.Cells[row, colIniEquipo].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    ws.Cells[row, colIniEquipo].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    ws.Cells[row, colIniDescripcion].Value = list.Evendescrip;
                    ws.Cells[row, colIniDescripcion].Style.HorizontalAlignment = ExcelHorizontalAlignment.Left;
                    ws.Cells[row, colIniDescripcion].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                    rowFinData = row;
                    row++;
                }

                var colorCeldaDatos = ColorTranslator.FromHtml("#1F497D");
                using (var range = ws.Cells[rowIniData, colIniNombreReporte, rowFinData, colFinNombreReporte])
                {
                    range.Style.Fill.PatternType = ExcelFillStyle.Solid;
                    range.Style.Fill.BackgroundColor.SetColor(Color.White);
                    range.Style.Font.Size = 8;
                    range.Style.WrapText = true;

                    range.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                    range.Style.Border.Top.Color.SetColor(colorCeldaDatos);
                    range.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                    range.Style.Border.Left.Color.SetColor(colorCeldaDatos);
                    range.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                    range.Style.Border.Right.Color.SetColor(colorCeldaDatos);
                    range.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                    range.Style.Border.Bottom.Color.SetColor(colorCeldaDatos);
                }
            }
            #endregion

            ws.View.FreezePanes(rowIniEmpresa + 1, 1);
            ws.View.ZoomScale = 100;
        }

        #endregion

        #region Informe archivo WORD - Anexo A

        /// <summary>
        /// Generar el archivo word completo del Anexo A - PR5
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="gpscodi"></param>
        /// <param name="incluirLeyendaEcuador"></param>
        /// <param name="ruta"></param>
        /// <param name="nombreArchivo"></param>
        /// <returns></returns>
        public async Task<int> GenerarArchivoWordAnexoACompleto(DateTime fecha, int gpscodi, bool incluirLeyendaEcuador, string ruta, string nombreArchivo)
        {
            string rutaNombreArchivo = ruta + nombreArchivo;

            FileInfo newFile = new FileInfo(rutaNombreArchivo);

            if (newFile.Exists)
            {
                newFile.Delete();
            }

            ModelWordAnexoA model = new ModelWordAnexoA();
            model.Fecha = fecha;
            model.RutaNombreArchivo = rutaNombreArchivo;
            model.NumeroIeod = GetNumeroIeod(fecha);
            model.IncluyeEcuador = incluirLeyendaEcuador;

            #region 1.1.1.EVOLUCIÓN HORARIA DE LA DEMANDA TOTAL

            //insumo
            EveMailsDTO prog = GetFechaMaxProgramaEmitido(fecha);
            List<EveMailsDTO> listaReprog = ListarReprogramaXDia(fecha);
            List<SiParametroValorDTO> listaBloqueHorario = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            ReporteDemandaPorAreaYSubareaDataVersionada(ConstantesPR5ReportesServicio.TipoData48PR5GruposDespacho, ConstantesAppServicio.ParametroDefecto, fecha, fecha, "",
                                                out List<MeMedicion48DTO> listaAreaySubarea, out List<MeMedicion48DTO> lista48Version,
                                                out List<MeReporptomedDTO> areas, out List<MeReporptomedDTO> subareas, out MeReporteDTO objRptArea, out List<MeReporteGraficoDTO> listaConfGrafArea);
            var listaAreaHoy = listaAreaySubarea.Where(x => x.Reporcodi == ConstantesPR5ReportesServicio.ReporcodiDemandaAreas).ToList();
            MeMedicion48DTO areaNorteHoy = listaAreaHoy.Find(x => x.Ptomedinomb == ConstantesPR5ReportesServicio.AreaNorte);
            MeMedicion48DTO areaCentroHoy = listaAreaHoy.Find(x => x.Ptomedinomb == ConstantesPR5ReportesServicio.AreaCentro);
            MeMedicion48DTO areaSurHoy = listaAreaHoy.Find(x => x.Ptomedinomb == ConstantesPR5ReportesServicio.AreaSur);

            List<MeMedicion48DTO> listaDemanda48Hoy = ListarDemandaEjecutadaYProgramadaCOES(fecha);
            List<MeMedicion48DTO> listaDemanda48Ayer = ListarDemandaEjecutadaYProgramadaCOES(fecha.AddDays(-1));
            List<MeMedicion48DTO> listaDemanda48Hace7d = ListarDemandaEjecutadaYProgramadaCOES(fecha.AddDays(-7));

            //llamar a método yupana
            List<MeMedicion48DTO> listaReprogramas = ListarReprogramaYupana(fecha);

            MeMedicion48DTO obj48Gen48Hoy = listaDemanda48Hoy[0]; //sin ecuador (sin check de Intercambios Internacionales)
            MeMedicion48DTO obj48Sein48Hoy = listaDemanda48Hoy[1]; //con ecuador (con check de Intercambios Internacionales)
            MeMedicion48DTO obj48Gen48Ayer = listaDemanda48Ayer[0]; //sin ecuador (los programados no tienen ecuador)
            MeMedicion48DTO obj48Gen48Hace7d = listaDemanda48Hace7d[0]; //sin ecuador (los programados no tienen ecuador)
            if (incluirLeyendaEcuador)
            {
                obj48Gen48Hoy = obj48Sein48Hoy;
            }

            //cálculo
            decimal dFactorCargaHoy = UtilAnexoAPR5.CalcularFactordeCarga(obj48Gen48Hoy);
            decimal dFactorCargaAnterior = UtilAnexoAPR5.CalcularFactordeCarga(obj48Gen48Hace7d);
            decimal varFactorCargaVsAyer = UtilAnexoAPR5.CalcularVariacionO100(dFactorCargaHoy, dFactorCargaAnterior);

            UtilAnexoAPR5.CalcularPendienteMax(fecha, obj48Gen48Hoy, listaBloqueHorario, out decimal pendienteHPHoy, out DateTime fechaHoraPendienteMaxHoy);
            UtilAnexoAPR5.CalcularPendienteMax(fecha.AddDays(-1), obj48Gen48Ayer, listaBloqueHorario, out decimal pendienteMaxAyer, out DateTime fechaHoraPendienteMaxAyer);
            UtilAnexoAPR5.CalcularPendienteMax(fecha.AddDays(-7), obj48Gen48Hace7d, listaBloqueHorario, out decimal pendienteMaxHace7d, out DateTime fechaHoraPendienteMaxHace7d);

            decimal varPendienteVsAyer = UtilAnexoAPR5.CalcularVariacionO100(pendienteHPHoy, pendienteMaxAyer);
            decimal varPendienteVsHace7D = UtilAnexoAPR5.CalcularVariacionO100(pendienteHPHoy, pendienteMaxHace7d);

            UtilAnexoAPR5.CalcularPendienteMax(fecha, areaNorteHoy, listaBloqueHorario, out decimal pendienteHPNorte, out DateTime fechaHoraPendienteMaxHoyNorte);
            UtilAnexoAPR5.CalcularPendienteMax(fecha, areaCentroHoy, listaBloqueHorario, out decimal pendienteHPCentro, out DateTime fechaHoraPendienteMaxHoyCentro);
            UtilAnexoAPR5.CalcularPendienteMax(fecha, areaSurHoy, listaBloqueHorario, out decimal pendienteHPSur, out DateTime fechaHoraPendienteMaxHoySur);

            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoPeriodoBloqueMinima, fecha, new List<MeMedicion48DTO>() { obj48Gen48Hoy }, null, listaBloqueHorario,
                                        out decimal minDemanda, out int hResultadoMin, out DateTime fechaHoraMinDemanda);
            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoPeriodoBloqueMedia, fecha, new List<MeMedicion48DTO>() { obj48Gen48Hoy }, null, listaBloqueHorario,
                                        out decimal mediaDemanda, out int hResultadoMedia, out DateTime fechaHoraMediaDemanda);
            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoPeriodoBloqueMaxima, fecha, new List<MeMedicion48DTO>() { obj48Gen48Hoy }, null, listaBloqueHorario,
                                        out decimal maxBDemanda, out int hResultadoBmaxima, out DateTime fechaHoraMaxBDemanda);

            //Máxima en todo el día
            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoMaximaTodoDia, fecha, new List<MeMedicion48DTO>() { obj48Gen48Hoy }, null, null,
                                        out decimal maxDemandaTodoDia, out int hResultadoMaximaDia, out DateTime fechaHoraMaxDemandaDia);
            //Mínima en todo el día
            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoMinimaTodoDia, fecha, new List<MeMedicion48DTO>() { obj48Gen48Hoy }, null, null,
                                        out decimal minDemandaTodoDia, out int hResultadoMinimaDia, out DateTime fechaHoraMinDemandaDia);

            List<int> listaBloqueHdemanda = new List<int>() { hResultadoMin, hResultadoMedia, hResultadoBmaxima };

            //grafico
            model.GraficoDemandaEjecyProg = UtilAnexoAPR5.GetGraficoDemandaEjecyProg(listaDemanda48Hoy, listaReprogramas, incluirLeyendaEcuador, listaBloqueHdemanda);

            //tabla
            model.FechaProgramaEmitido = (prog != null && prog.Lastdate != null) ? prog.Lastdate.Value : fecha.Date;
            model.ListaReprogramas = listaReprog;

            //parrafo 1
            model.FactorCargaHoy = Math.Round(dFactorCargaHoy, 3);
            model.PorcVariacionFactorCarga = Math.Round(varFactorCargaVsAyer, 2);

            //parrafo 2
            model.HrPeriodo01 = fechaHoraPendienteMaxHoy.ToString(ConstantesAppServicio.FormatoHora);
            model.HrPeriodo02 = fechaHoraPendienteMaxHoy.AddMinutes(30).ToString(ConstantesAppServicio.FormatoHora);
            model.VelCrecimiento = Math.Round(pendienteHPHoy, 2);
            model.PorcVCrecimientoVsAyer = Math.Round(varPendienteVsAyer, 2);
            model.PorcVCrecimientoVsHace7d = Math.Round(varPendienteVsHace7D, 2);

            //tabla
            model.LsPendienteMaxSEINhoy = Math.Round(pendienteHPHoy, 2);
            model.LsHoraPendMaxSEIN = fechaHoraPendienteMaxHoy.ToString(ConstantesAppServicio.FormatoHora);
            model.LsPendienteMaxNorte = Math.Round(pendienteHPNorte, 2);
            model.LsHoraPendMaxNorte = fechaHoraPendienteMaxHoyNorte.ToString(ConstantesAppServicio.FormatoHora);
            model.LsPendienteMaxSur = Math.Round(pendienteHPSur, 2);
            model.LsHoraPendMaxSur = fechaHoraPendienteMaxHoySur.ToString(ConstantesAppServicio.FormatoHora);
            model.LsPendienteMaxCentro = Math.Round(pendienteHPCentro, 2);
            model.LsHoraPendMaxCentro = fechaHoraPendienteMaxHoyCentro.ToString(ConstantesAppServicio.FormatoHora);

            //parrafo 3
            model.MinDemanda = Math.Round(minDemandaTodoDia, 1);
            model.HoraMinDemanda = fechaHoraMinDemandaDia.ToString(ConstantesAppServicio.FormatoHora);
            model.MaxDemanda = Math.Round(maxDemandaTodoDia, 1);
            model.HoraMaxDemanda = fechaHoraMaxDemandaDia.ToString(ConstantesAppServicio.FormatoHora);

            #endregion

            #region 1.1.2 DATOS GRÁFICO DEMANDA POR ÁREAS

            //cálculo
            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoMaximaTodoDia, fecha, new List<MeMedicion48DTO>() { obj48Gen48Hoy }, null, null,
                                        out decimal maxDemanda, out int hResultadoMax, out DateTime fechaHoraMaxDemanda);

            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoMaximaTodoDia, fecha, new List<MeMedicion48DTO>() { areaNorteHoy }, null, null,
                                        out decimal maxDemandaAreaNorte, out int hResultadoMaxAreaNorte, out DateTime fechaHoraMaxDemandaAreaNorte);
            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoMaximaTodoDia, fecha, new List<MeMedicion48DTO>() { areaCentroHoy }, null, null,
                                        out decimal maxDemandaAreaCentro, out int hResultadoMaxAreaCentro, out DateTime fechaHoraMaxDemandaAreaCentro);
            MedidoresHelper.ObtenerValorHXPeriodoDemandaM48(ConstantesRepMaxDemanda.TipoMaximaTodoDia, fecha, new List<MeMedicion48DTO>() { areaSurHoy }, null, null,
                                        out decimal maxDemandaAreaSur, out int hResultadoMaxAreaSur, out DateTime fechaHoraMaxDemandaAreaSur);

            decimal valNorteEnMaxDem = ((decimal?)areaNorteHoy.GetType().GetProperty(ConstantesAppServicio.CaracterH + hResultadoMax).GetValue(areaNorteHoy, null)) ?? 0;
            decimal valCentroEnMaxDem = ((decimal?)areaCentroHoy.GetType().GetProperty(ConstantesAppServicio.CaracterH + hResultadoMax).GetValue(areaCentroHoy, null)) ?? 0;
            decimal valSurEnMaxDem = ((decimal?)areaSurHoy.GetType().GetProperty(ConstantesAppServicio.CaracterH + hResultadoMax).GetValue(areaSurHoy, null)) ?? 0;

            decimal participacionMaxDemNorte = UtilAnexoAPR5.CalcularParticipacionO0(valNorteEnMaxDem, maxDemanda);
            decimal participacionMaxDemCentro = UtilAnexoAPR5.CalcularParticipacionO0(valCentroEnMaxDem, maxDemanda);
            decimal participacionMaxDemSur = UtilAnexoAPR5.CalcularParticipacionO0(valSurEnMaxDem, maxDemanda);

            decimal dFactorCargaNorte = UtilAnexoAPR5.CalcularFactordeCarga(areaNorteHoy);
            decimal dFactorCargaCentro = UtilAnexoAPR5.CalcularFactordeCarga(areaCentroHoy);
            decimal dFactorCargaSur = UtilAnexoAPR5.CalcularFactordeCarga(areaSurHoy);

            //gráfico
            model.GraficoDemandaxAreas = UtilAnexoAPR5.GetGraficoDemandaPorArea(true, listaAreaHoy, objRptArea, listaConfGrafArea);
            if (incluirLeyendaEcuador) model.GraficoDemandaxAreas.TitleText = "DEMANDA POR ÁREA (SIN ECUADOR)";

            //parrafo 1
            model.HoraMaxDemSein = fechaHoraMaxDemanda.ToString(ConstantesAppServicio.FormatoHora);
            model.HoraMaxDemSeinNorte = fechaHoraMaxDemandaAreaNorte.ToString(ConstantesAppServicio.FormatoHora);
            model.HoraMaxDemSeinCentro = fechaHoraMaxDemandaAreaCentro.ToString(ConstantesAppServicio.FormatoHora);
            model.HoraMaxDemSeinSur = fechaHoraMaxDemandaAreaSur.ToString(ConstantesAppServicio.FormatoHora);

            //parrafo 2
            model.PorcDemSeinNorte = Math.Round(participacionMaxDemNorte, 1);
            model.PorcDemSeinCentro = Math.Round(participacionMaxDemCentro, 1);
            model.PorcDemSeinSur = Math.Round(participacionMaxDemSur, 1);

            //parrafo 3
            model.FCargaNorte = Math.Round(dFactorCargaNorte, 3);
            model.FCargaCentro = Math.Round(dFactorCargaCentro, 3);
            model.FCargaSur = Math.Round(dFactorCargaSur, 3);

            //parrafo 4
            model.VelCrecNorte = Math.Round(pendienteHPNorte, 2);
            model.VelCrecCentro = Math.Round(pendienteHPCentro, 2);
            model.VelCrecSur = Math.Round(pendienteHPSur, 2);

            #endregion

            #region 1.1.3.EVOLUCIÓN HORARIA DE LAS CARGAS MAS IMPORTANTES

            ReporteDemandaGrandesUsuariosDataReporte(fecha, fecha, out List<SiEmpresaDTO> listaEmpresaArea, out List<MeMedicion48DTO> listaM48GULibre);
            List<GraficoWeb> listaGrafico = UtilAnexoAPR5.ListarGraficoDemandaGrandesUsuarios(listaM48GULibre, listaEmpresaArea);

            model.GraficoMultilineas = listaGrafico[0];
            model.GraficoMultilineas02 = listaGrafico[1];
            model.GraficoMultilineas03 = listaGrafico[2];
            model.GraficoMultilineas04 = listaGrafico[3];

            #endregion

            #region 1.1.4.RECURSOS ENERGÉTICOS Y DIAGRAMA DE DURACIÓN DE CARGA

            //insumo
            ReportePotenciaXTipoRecursoDataReporte(ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto,
                            ConstantesAppServicio.ParametroDefecto, fecha, fecha, true, out List<MeMedicion48DTO> listaReporteAgrupCtg, out List<MeMedicion48DTO> listaTotalRER, out List<string> listaMensaje);

            //cálculo
            var listaAgrupDuracion = UtilAnexoAPR5.OrdenarListaM48DiagramaDuracion(listaReporteAgrupCtg);

            decimal energiaTotalSein = obj48Sein48Hoy.Meditotal.GetValueOrDefault(0) / 2.0m;
            decimal energiaTotalGen = obj48Sein48Hoy.Meditotal.GetValueOrDefault(0) / 2.0m;

            decimal energiaHPasada = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua && x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoAguaPasada).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaHRegulacion = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua && x.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoAguaRegulacion).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaDiesel = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiDiesel).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaResidual = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6 || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaGas = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaCarbon = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiCarbon).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaBag = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaBio = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaBagBio = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBagazo || x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiBiogas).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaEol = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiEolica).Sum(x => x.Meditotal ?? 0) / 2.0m;
            decimal energiaSolar = listaReporteAgrupCtg.Where(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiSolar).Sum(x => x.Meditotal ?? 0) / 2.0m;

            decimal partHPasada = UtilAnexoAPR5.CalcularParticipacionO0(energiaHPasada, energiaTotalGen);
            decimal partHRegulacion = UtilAnexoAPR5.CalcularParticipacionO0(energiaHRegulacion, energiaTotalGen);
            decimal partDiesel = UtilAnexoAPR5.CalcularParticipacionO0(energiaDiesel, energiaTotalGen);
            decimal partResidual = UtilAnexoAPR5.CalcularParticipacionO0(energiaResidual, energiaTotalGen);
            decimal partGas = UtilAnexoAPR5.CalcularParticipacionO0(energiaGas, energiaTotalGen);
            decimal partCarbon = UtilAnexoAPR5.CalcularParticipacionO0(energiaCarbon, energiaTotalGen);
            decimal partBag = UtilAnexoAPR5.CalcularParticipacionO0(energiaBag, energiaTotalGen);
            decimal partBio = UtilAnexoAPR5.CalcularParticipacionO0(energiaBio, energiaTotalGen);
            decimal partBagBio = UtilAnexoAPR5.CalcularParticipacionO0(energiaBagBio, energiaTotalGen);
            decimal partEol = UtilAnexoAPR5.CalcularParticipacionO0(energiaEol, energiaTotalGen);
            decimal partSolar = UtilAnexoAPR5.CalcularParticipacionO0(energiaSolar, energiaTotalGen);

            foreach (var item in listaAgrupDuracion)
            {
                decimal part = 0;
                switch (item.Fenergcodi)
                {
                    case ConstantesPR5ReportesServicio.FenergcodiAgua:
                        part = (item.Ctgdetcodi == ConstantesPR5ReportesServicio.SubCategoriaRecursoAguaPasada) ? partHPasada : partHRegulacion;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                        part = partDiesel;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiResidual:
                    case ConstantesPR5ReportesServicio.FenergcodiR6:
                    case ConstantesPR5ReportesServicio.FenergcodiR500:
                        part = partResidual;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiGas:
                        part = partGas;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                        part = partCarbon;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiBagazo:
                        part = partBag;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiBiogas:
                        part = partBio;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiEolica:
                        part = partEol;
                        break;
                    case ConstantesPR5ReportesServicio.FenergcodiSolar:
                        part = partSolar;
                        break;
                }

                item.Ctgdetnomb = string.Format("{0} {1}%", item.Ctgdetnomb, Math.Round(part, 1));
            }

            //duracion
            decimal pmax85 = maxBDemanda * 0.85m;
            decimal pmax70 = maxBDemanda * 0.70m;
            decimal pmax50 = maxBDemanda * 0.50m;

            decimal countHpmax85 = 0;
            decimal countHpmax70 = 0;
            decimal countHpmax50 = 0;
            for (int i = 0; i < 48; i++)
            {
                decimal valor = ((decimal?)obj48Gen48Hoy.GetType().GetProperty("H" + (i + 1)).GetValue(obj48Gen48Hoy, null)).GetValueOrDefault(0);
                if (valor > pmax85)
                {
                    countHpmax85++;
                }
                if (valor > pmax70)
                {
                    countHpmax70++;
                }
                if (valor > pmax50)
                {
                    countHpmax50++;
                }
            }

            decimal horasPmax85 = countHpmax85 / 2.0m;
            decimal horasPmax70 = (countHpmax70 - countHpmax85) / 2.0m;
            decimal horasPmax50 = (countHpmax50 - countHpmax70) / 2.0m;
            decimal partPmax85 = UtilAnexoAPR5.CalcularParticipacionO0(horasPmax85, 24.0m);
            decimal partPmax70 = UtilAnexoAPR5.CalcularParticipacionO0(horasPmax70, 24.0m);
            decimal partPmax50 = UtilAnexoAPR5.CalcularParticipacionO0(horasPmax50, 24.0m);

            //grafico
            model.GraficoRecEnergeticos = UtilAnexoAPR5.GetGraficoDiagramaDuracion(listaAgrupDuracion);

            //Párrafo 1
            model.EnegíaTotProduccion = Math.Round(energiaTotalGen, 2); //con o sin ecuador se usa solo generación sin sumar o restar el Ecuador

            //Párrafo 2
            model.EnerCtralPasada = Math.Round(energiaHPasada, 2);
            model.EnerCtralRegulacion = Math.Round(energiaHRegulacion, 2);

            //Párrafo 3
            model.EnerTerDiesel = Math.Round(energiaDiesel, 2);
            model.PorcEnerTerDiesel = Math.Round(partDiesel, 1);
            model.EnergiaResidual = Math.Round(energiaDiesel, 2);
            model.PorcEnergiaResidual = Math.Round(partResidual, 1);
            model.EnerGas = Math.Round(energiaGas, 2);
            model.PorcEnerGas = Math.Round(partGas, 1);
            model.EnerCarbon = Math.Round(energiaCarbon, 2);
            model.PorcEnerCarbon = Math.Round(partCarbon, 1);
            model.EnerBagBio = Math.Round(energiaBagBio, 2);
            model.PorcEnerBagBio = Math.Round(partBagBio, 1);
            model.EnerEolica = Math.Round(energiaEol, 2);
            model.PorcEnerEolica = Math.Round(partEol, 1);
            model.EnerSolar = Math.Round(energiaSolar, 2);
            model.PorcEnerSolar = Math.Round(partSolar, 1);

            //Párrafo 4
            model.HorasDemanda = Math.Round(horasPmax85, 1);
            model.PorcMayorMaxDemanda = 85m;
            model.PorcTiempoTotal = Math.Round(partPmax85, 2);

            //Párrafo 5
            model.HorasDemanda2 = Math.Round(horasPmax70, 1);
            model.PorcRangoMaxDemanda1 = 70m;
            model.PorcRangoMaxDemanda2 = 85m;
            model.PorcTiempoTotal2 = Math.Round(partPmax70, 2);

            #endregion

            #region 1.2. EVOLUCIÓN DIARIA DE LA PRODUCCIÓN DE ENERGÍA   

            //insumo
            DateTime fechaIniAnio = new DateTime(fecha.Year, 1, 1).AddDays(-7);
            InfSGIResumenProd objRptDespachoEjecutado = GetResumenGeneracion48CargaMasiva(fechaIniAnio, fecha);
            InfSGIResumenProd objRptDespachoProgramado = GetResumenGeneracion48CargaMasivaProgramado(fecha.AddDays(-7), fecha);

            //calculo resumen
            decimal energEjecSeinHoy = objRptDespachoEjecutado.ListaTotalSein48.Find(x => x.Medifecha == fecha).Meditotal.GetValueOrDefault(0) / 2.0m;
            decimal energProgSeinHoy = objRptDespachoProgramado.ListaTotalSein48.Find(x => x.Medifecha == fecha).Meditotal.GetValueOrDefault(0) / 2.0m;
            decimal energEjecSein7dAntes = objRptDespachoEjecutado.ListaTotalSein48.Find(x => x.Medifecha == fecha.AddDays(-7)).Meditotal.GetValueOrDefault(0) / 2.0m;

            decimal diffEnerg = energEjecSeinHoy - energProgSeinHoy;
            decimal varEnergHoy = UtilAnexoAPR5.CalcularVariacionO100(energEjecSeinHoy, energProgSeinHoy);

            decimal diffEnerg7D = energEjecSeinHoy - energEjecSein7dAntes;
            decimal varEnerg7D = UtilAnexoAPR5.CalcularVariacionO100(energEjecSeinHoy, energEjecSein7dAntes);

            //programado y ejecutado de los últimos 7 dias
            List<DateTime> listaFecha = new List<DateTime>();
            List<MeMedicion1DTO> listaEjec = new List<MeMedicion1DTO>(), listaProg = new List<MeMedicion1DTO>();
            for (DateTime day = fecha.AddDays(-7); day <= fecha; day = day.AddDays(1))
            {
                decimal energEjec = objRptDespachoEjecutado.ListaTotalSein48.Find(x => x.Medifecha == day).Meditotal.GetValueOrDefault(0) / 2000.0m;
                decimal energProg = objRptDespachoProgramado.ListaTotalSein48.Find(x => x.Medifecha == day).Meditotal.GetValueOrDefault(0) / 2000.0m;

                listaFecha.Add(day);
                listaEjec.Add(new MeMedicion1DTO() { Medifecha = day, H1 = Math.Round(energEjec, 2) });
                listaProg.Add(new MeMedicion1DTO() { Medifecha = day, H1 = Math.Round(energProg, 2) });
            }

            //obtener la maxima energia desde el 1 de enero hasta la fecha de consulta
            GetDiaMaximaDemandaCargaMasiva48YFecha(new DateTime(fecha.Year, 1, 1), fecha, objRptDespachoEjecutado.ListaTotalSein48, out DateTime fechaHoraEnergiaAnio, out DateTime fechaEnergiaAnio);
            decimal energEjecMaxAnio = objRptDespachoEjecutado.ListaTotalSein48.Find(x => x.Medifecha == fechaEnergiaAnio).Meditotal.GetValueOrDefault(0) / 2000.0m;
            MeMedicion1DTO objMaxEnergiAnio = new MeMedicion1DTO() { Medifecha = fechaEnergiaAnio, H1 = energEjecMaxAnio };
            string textoMaxEnergiaAnio = string.Format("Máxima energía diaria ejecutada del año a la fecha: <br>{0} {1} de {2} del {3} ({4} GWh)",
                                        EPDate.f_NombreDiaSemana(fechaEnergiaAnio.DayOfWeek), fechaEnergiaAnio.Day, EPDate.f_NombreMes(fechaEnergiaAnio.Month),
                                        fechaEnergiaAnio.Year, Math.Round(energEjecMaxAnio, 2));

            //grafico
            var graficoEnergia = GraficoWebEvolucionEnergiaDiaria(listaFecha, listaEjec, listaProg, objMaxEnergiAnio);

            //salida
            model.EnerEjecutada = Math.Round(energEjecSeinHoy, 2);
            model.DifEnerEjecProg = Math.Round(diffEnerg, 2);
            model.PorcenerEjecutada = Math.Round(varEnergHoy, 2);
            model.DifEnerEjec7D = Math.Round(diffEnerg7D, 2);
            model.PorcEnerEjec7D = Math.Round(varEnerg7D, 2);
            model.GraficoEvolDiario = graficoEnergia;
            model.EnerEjecutadaAnio = Math.Round(energEjecMaxAnio, 2);
            model.TextoMaxEnergiaAnio = textoMaxEnergiaAnio;

            #endregion

            #region 1.3. MÁXIMA GENERACIÓN INSTANTÁNEA 

            //cálculo resumen
            decimal potenciaMDHoy = objRptDespachoEjecutado.ListaMDSein48SinTIE.Find(x => x.Medifecha == fecha).Meditotal.GetValueOrDefault(0);
            decimal potenciaMD7D = objRptDespachoEjecutado.ListaMDSein48SinTIE.Find(x => x.Medifecha == fecha.AddDays(-7)).Meditotal.GetValueOrDefault(0);

            decimal diffPotMD7D = potenciaMDHoy - potenciaMD7D;
            decimal varPotMD7D = UtilAnexoAPR5.CalcularVariacionO100(potenciaMDHoy, potenciaMD7D);

            //cálculo cuadro
            List<DateTime> listaFechaCuadroMD = new List<DateTime>() { fecha.AddDays(-7), fecha.AddDays(-1), fecha };

            List<InfSGIDatosTablas> listMaxGenInstant = new List<InfSGIDatosTablas>();
            foreach (var day in listaFechaCuadroMD)
            {
                var objEjec = objRptDespachoEjecutado.ListaMDSein48SinTIE.Find(x => x.Medifecha == day);
                var objProg = objRptDespachoProgramado.ListaMDSein48.Find(x => x.Medifecha == day);
                decimal varPotencia = UtilAnexoAPR5.CalcularVariacionO100(objEjec.Meditotal ?? 0, objProg.Meditotal ?? 0);

                var objMD = new InfSGIDatosTablas
                {
                    Dia = EPDate.f_NombreDiaSemanaCorto(day.DayOfWeek) + " " + day.Day,
                    EjeMW = Math.Round(objEjec.Meditotal ?? 0, 1).ToString(),
                    EjeHora = UtilAnexoAPR5.GetHoraWordHoraOperacion(objEjec.FechaMD, false),
                    ProgMW = Math.Round(objProg.Meditotal ?? 0, 1).ToString(),
                    ProgHora = UtilAnexoAPR5.GetHoraWordHoraOperacion(objProg.FechaMD, false),
                    Desv = Math.Round(varPotencia, 2).ToString()
                };
                listMaxGenInstant.Add(objMD);
            }

            //maxima demanda ejecutado de los últimos 7 dias
            List<DateTime> listaFechaMD = new List<DateTime>();
            List<MeMedicion1DTO> listaEjecMD = new List<MeMedicion1DTO>();
            for (DateTime day = fecha.AddDays(-7); day <= fecha; day = day.AddDays(1))
            {
                decimal energEjec = objRptDespachoEjecutado.ListaMDSein48SinTIE.Find(x => x.Medifecha == day).Meditotal.GetValueOrDefault(0);

                listaFechaMD.Add(day);
                listaEjecMD.Add(new MeMedicion1DTO() { Medifecha = day, H1 = Math.Round(energEjec, 2) });
            }

            //obtener la maxima energia desde el 1 de enero hasta la fecha de consulta
            GetDiaMaximaDemandaCargaMasiva48YFecha(new DateTime(fecha.Year, 1, 1), fecha, objRptDespachoEjecutado.ListaMDSein48SinTIE, out DateTime fechaHoraMDPotenciaAnio, out DateTime fechaMDPotenciaAnio);
            decimal potenciaEjecMaxAnio = objRptDespachoEjecutado.ListaMDSein48SinTIE.Find(x => x.Medifecha == fechaMDPotenciaAnio).Meditotal.GetValueOrDefault(0);
            MeMedicion1DTO objMaxPotenciaAnio = new MeMedicion1DTO() { Medifecha = fechaMDPotenciaAnio, H1 = potenciaEjecMaxAnio };
            string textoMDAnio = string.Format("Máxima Demanda instantánea del año a la fecha: <br>{4} MW el {0} {1} de {2} del {3} a las {5}h",
                                        EPDate.f_NombreDiaSemana(fechaMDPotenciaAnio.DayOfWeek), fechaMDPotenciaAnio.Day, EPDate.f_NombreMes(fechaMDPotenciaAnio.Month),
                                        fechaMDPotenciaAnio.Year, Math.Round(potenciaEjecMaxAnio, 2), UtilAnexoAPR5.GetHoraWordHoraOperacion(fechaHoraMDPotenciaAnio, true));

            //grafico
            var graficoMDdiaria = GraficoWebEvolucionMaximaDemandaDiaria(listaFechaMD, listaEjecMD, objMaxPotenciaAnio);
            if (incluirLeyendaEcuador) graficoMDdiaria.TitleText = "MÁXIMA DEMANDA DEL COES SINAC (SIN ECUADOR)";

            //salida
            model.MaxGenInst = Math.Round(potenciaMDHoy, 1);
            model.DismMaxDemanda = Math.Round(diffPotMD7D, 2);
            model.PorcDismMaxDemanda = Math.Round(varPotMD7D, 2);
            model.ListMaxGenInstant = listMaxGenInstant;
            model.GraficoMaximaDemandaDiario = graficoMDdiaria;
            model.TextoMDAnio = textoMDAnio;
            model.MDEjecutadaAnio = Math.Round(potenciaEjecMaxAnio, 2);

            #endregion

            #region 1.4. PRINCIPALES EVENTOS (FALLAS, INTERRUPCIONES Y RACIONAMIENTO)

            //insumo
            this.ReporteEventosDataReporte(fecha, fecha, string.Empty, ConstantesAppServicio.ParametroDefecto,
                                    out List<EventoDTO> listaEvento, out List<EveInterrupcionDTO> listaInterrup, out List<EqEquipoDTO> listaEqEvento);

            //formateo
            listaEvento = listaEvento.OrderBy(x => x.EVENINI).ToList();

            //salida
            model.ListaEvento = listaEvento;
            model.ListaInterrup = listaInterrup;

            #endregion

            #region 1.5. MANTENIMIENTOS PROGRAMADOS Y EJECUTADOS

            //insumos
            var servIntervencion = new IntervencionesAppServicio();

            IntervencionFiltro objFiltroProg = servIntervencion.GetFiltroConsulta2(new IntervencionFiltro() { Evenclasecodi = ConstantesIntervencionesAppServicio.TipoProgramacionProgramadoDiario, FechaIni = fecha, FechaFin = fecha, EsReporteExcel = true });
            objFiltroProg.TipoGrupoFamilia = "-1"; //todos los equipos
            objFiltroProg.StrIdsTipoIntervencion = ConstantesIntervencionesAppServicio.CodPreventivo + "," + ConstantesIntervencionesAppServicio.CodCorrectivo; //solo tipo preventivo o correctivo
            objFiltroProg.StrIdsDisponibilidad = ConstantesIntervencionesAppServicio.sFS; //solo fuera de servicio
            objFiltroProg.StrIdsEstados = ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString(); //solo aprobados por SPR

            IntervencionFiltro objFiltroEjec = servIntervencion.GetFiltroConsulta2(new IntervencionFiltro() { Evenclasecodi = ConstantesIntervencionesAppServicio.TipoProgramacionEjecutado, FechaIni = fecha, FechaFin = fecha, EsReporteExcel = true });
            objFiltroEjec.TipoGrupoFamilia = "-1"; //todos los equipos
            objFiltroEjec.StrIdsTipoIntervencion = ConstantesIntervencionesAppServicio.CodPreventivo + "," + ConstantesIntervencionesAppServicio.CodCorrectivo; //solo tipo preventivo o correctivo
            objFiltroEjec.StrIdsDisponibilidad = ConstantesIntervencionesAppServicio.sFS; //solo fuera de servicio
            objFiltroEjec.StrIdsEstados = ConstantesIntervencionesAppServicio.InEstadoConforme.ToString() + "," + ConstantesIntervencionesAppServicio.InEstadoAprobado.ToString() + "," + ConstantesIntervencionesAppServicio.sEstadoEnProceso.ToString(); //registrados por el agente y coordinador

            List<InIntervencionDTO> listaManttoProg = servIntervencion.ConsultarIntervencionesCruzadas(objFiltroProg);
            List<InIntervencionDTO> listaManttoEjec = servIntervencion.ConsultarIntervencionesCruzadas(objFiltroEjec);

            //logica.

            List<InfSGIDatosTablas> listMantProgEjecutados = new List<InfSGIDatosTablas>();
            //Se considera desviación cuando el ejecutado no viene del programado o la diferencia (ini o fin) entre el prog y el ejec es superior a 30minutos
            foreach (var objEjec in listaManttoEjec)
            {
                var listaProgXEq = listaManttoProg.Where(x => x.Equicodi == objEjec.Equicodi).ToList();
                var objProgExacto = listaProgXEq.Find(x => x.Interdescrip.ToUpper().Trim() == objEjec.Interdescrip.ToUpper().Trim());

                bool esDesviacion = false;
                string horaProg = "";
                string horaEjec = UtilAnexoAPR5.GetDescripcion2FechasMantto(objEjec.Interfechaini, objEjec.Interfechafin);

                //no existe en el programado con la misma descripción
                if (objProgExacto == null)
                {
                    if (listaProgXEq.Any())
                    {
                        if (listaProgXEq.Count == 1)
                        {
                            var objProgSimilar = listaProgXEq[0];

                            //si existe programado con descripcion similiar entonces verificar la desviación por horas
                            int diffIni = (int)(objProgSimilar.Interfechaini - objEjec.Interfechaini).TotalMinutes;
                            int diffFin = (int)(objProgSimilar.Interfechafin - objEjec.Interfechafin).TotalMinutes;

                            //el ejecutado empieza despues de lo programado - 30min
                            // y el ejecutado termina antes de lo programado + 30min
                            if (diffIni < 30 && diffFin > -30)
                            {
                                esDesviacion = true;
                                horaProg = UtilAnexoAPR5.GetDescripcion2FechasMantto(objProgSimilar.Interfechaini, objProgSimilar.Interfechafin);
                            }
                        }
                        else
                        {
                            List<string> lhora = new List<string>();
                            foreach (var objProgSimilar in listaProgXEq)
                            {
                                lhora.Add(UtilAnexoAPR5.GetDescripcion2FechasMantto(objProgSimilar.Interfechaini, objProgSimilar.Interfechafin));
                            }

                            esDesviacion = true;
                            horaProg = string.Join("\n", lhora);
                        }
                    }
                    else
                    {
                        esDesviacion = true;
                        horaProg = "No programado";
                    }
                }
                else
                {
                    //si existe programado con la misma descripción entonces verificar la desviación por horas
                    int diffIni = (int)(objProgExacto.Interfechaini - objEjec.Interfechaini).TotalMinutes;
                    int diffFin = (int)(objProgExacto.Interfechafin - objEjec.Interfechafin).TotalMinutes;

                    //el ejecutado empieza antes de lo programado - 30min
                    // o el ejecutado termina depues de lo programado + 30min
                    if (diffIni >= 30 || diffFin <= -30)
                    {
                        esDesviacion = true;
                        horaProg = UtilAnexoAPR5.GetDescripcion2FechasMantto(objProgExacto.Interfechaini, objProgExacto.Interfechafin);
                    }
                }

                //agregar en lista
                if (esDesviacion)
                {
                    string tipoIntervencion = objEjec.Tipoevencodi == ConstantesIntervencionesAppServicio.CodPreventivo ? "MP" : "MC";

                    string textoOracion = ""; //descripcion en formato de oracion
                    if (objEjec.Interdescrip.Length > 1) textoOracion = objEjec.Interdescrip.ToUpper()[0] + objEjec.Interdescrip.Substring(1).ToLower();

                    InfSGIDatosTablas objMant = new InfSGIDatosTablas
                    {
                        Empresa = (objEjec.Emprabrev ?? "").Trim(),
                        Ubicacion = (objEjec.Areadesc ?? "").Trim(),
                        Equipo = (objEjec.Equiabrev ?? objEjec.EquiNomb).Trim(),
                        Prog = horaProg,
                        Ejec = horaEjec,
                        Tipo = tipoIntervencion,
                        Motivo = textoOracion
                    };
                    listMantProgEjecutados.Add(objMant);
                }
            }

            listMantProgEjecutados = listMantProgEjecutados.OrderBy(x => x.Empresa).ThenBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Ejec).ToList();

            //salida
            model.ListMantProgEjecutados = listMantProgEjecutados;

            #endregion

            #region 1.6.1. OPERACIÓN DE CALDEROS

            //insumo
            var listaopCaldero = ReporteOperacionesVariasDataReporte(fecha, fecha, ConstantesPR5ReportesServicio.EvenclaseEjecutado,
                                                                ConstantesPR5ReportesServicio.IdSubCausaCaldero, false);

            //logica
            List<InfSGIDatosTablas> listobjOpCaldero = new List<InfSGIDatosTablas>();

            foreach (var item in listaopCaldero)
            {
                InfSGIDatosTablas objOp = new InfSGIDatosTablas
                {
                    Empresa = item.Emprabrev,
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = item.Ichorini.Value.ToString(ConstantesAppServicio.FormatoHora),
                    Final = item.Ichorfin.Value.ToString(ConstantesAppServicio.FormatoHora)
                };

                listobjOpCaldero.Add(objOp);
            }

            //salida
            model.ListobjOpCaldero = listobjOpCaldero;

            #endregion

            #region 1.6.2. OPERACIÓN A CARGA MÍNIMA

            //insumo
            List<EveHoraoperacionDTO> listaHOcalifMinima = servHO.GetListaHorasOperacionByCriteria(Int32.Parse(ConstantesHorasOperacion.ParamEmpresaTodos),
                                            ConstantesSubcausaEvento.SubcausaAMinimaCarga.ToString(), fecha, fecha.AddDays(1),
                                            ConstantesHorasOperacion.IdTipoTermica, Int32.Parse(ConstantesHorasOperacion.ParamCentralTodos));

            //logica
            List<InfSGIDatosTablas> listobjOpCargaMin = new List<InfSGIDatosTablas>();
            foreach (var item in listaHOcalifMinima)
            {
                var objMin = new InfSGIDatosTablas()
                {
                    Empresa = item.Emprabrev,
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Hophorini.Value, false),
                    Final = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Hophorfin.Value, true),
                };

                listobjOpCargaMin.Add(objMin);
            }

            listobjOpCargaMin = listobjOpCargaMin.OrderBy(x => x.Empresa).ThenBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Inicio).ToList();

            //salida
            model.ListobjOpCargaMin = listobjOpCargaMin;

            #endregion

            #region 1.7 RESERVA NO SINCRONIZADA DEL COES

            ReporteReservaFriaDataVersionada(fecha, fecha, "-1", "-1"
                    , "", out List<MePtomedicionDTO> listaPto, out List<MeMedicion48DTO> totalDataRFria, out List<MeMedicion48DTO> listaRFDetalleRFria,
                    out CDespachoDiario regCDespachoXDia, out List<GraficoWeb> listaGraficoRfria, out GraficoWeb graficoRFAnexoA, out GraficoWeb graficoRfriaAnexoA);
            //var graficoRFAnexoA = new GraficoWeb(); var graficoRfriaAnexoA = new GraficoWeb();
            model.GraficoReservaSinc = graficoRfriaAnexoA;
            model.GraficoEficGNyCarb = graficoRFAnexoA;

            #endregion

            #region 1.8. REGULACION DE TENSIÓN

            //insumo
            var listaDataRegTension = ReporteOperacionesVariasDataReporte(fecha, fecha, ConstantesPR5ReportesServicio.EvenclaseEjecutado,
                                                                ConstantesPR5ReportesServicio.IdSubCausaPorTension, false);

            //logica
            List<InfSGIDatosTablas> listobjOpRegTension = new List<InfSGIDatosTablas>();

            foreach (var item in listaDataRegTension)
            {
                InfSGIDatosTablas objOp = new InfSGIDatosTablas
                {
                    Empresa = item.Emprabrev,
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Ichorini.Value, false),
                    Final = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Ichorfin.Value, true),
                    Motivo = item.Icdescrip1
                };

                listobjOpRegTension.Add(objOp);
            }

            listobjOpRegTension = listobjOpRegTension.OrderBy(x => x.Empresa).ThenBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Inicio).ToList();

            //salida
            model.ListobjOpRegTension = listobjOpRegTension;

            #endregion

            #region 1.9. PRUEBAS DE UNIDADES - A. ALEATORIAS DE DISPONIBILIDAD

            //insumo
            List<EveHoraoperacionDTO> listaHOPruebaPR25 = servHO.GetListaHorasOperacionByCriteria(Int32.Parse(ConstantesHorasOperacion.ParamEmpresaTodos),
                                            ConstantesSubcausaEvento.SubcausaPorPruebasAleatoriasPR25.ToString(), fecha, fecha.AddDays(1),
                                            ConstantesHorasOperacion.IdTipoTermica, Int32.Parse(ConstantesHorasOperacion.ParamCentralTodos));

            //logica
            List<InfSGIDatosTablas> listobjAleatoriasDisp = new List<InfSGIDatosTablas>();
            foreach (var item in listaHOPruebaPR25)
            {
                var objMin = new InfSGIDatosTablas()
                {
                    Empresa = item.Emprabrev,
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Hophorini.Value, false),
                    Final = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Hophorfin.Value, true),
                    Observacion = item.Hopdesc
                };

                listobjAleatoriasDisp.Add(objMin);
            }

            listobjAleatoriasDisp = listobjAleatoriasDisp.OrderBy(x => x.Empresa).ThenBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Inicio).ToList();

            //salida
            model.ListobjAleatoriasDisp = listobjAleatoriasDisp;

            #endregion

            #region 1.9. PRUEBAS DE UNIDADES - B. POR REQUERIMIENTOS PROPIOS

            //insumo
            List<EveHoraoperacionDTO> listaHOReqPropio = servHO.GetListaHorasOperacionByCriteria(Int32.Parse(ConstantesHorasOperacion.ParamEmpresaTodos),
                                            ConstantesSubcausaEvento.SubcausaPorPruebas.ToString(), fecha, fecha.AddDays(1),
                                            ConstantesHorasOperacion.IdTipoTermica, Int32.Parse(ConstantesHorasOperacion.ParamCentralTodos));
            var listaOpVariaPorPruebaNoTermo = ReporteOperacionesVariasDataReporte(fecha, fecha, ConstantesPR5ReportesServicio.EvenclaseEjecutado,
                                                                ConstantesPR5ReportesServicio.IdSubCausaPorPruebaNoTermo, false);

            //logica
            List<InfSGIDatosTablas> listaReqPropio = new List<InfSGIDatosTablas>();
            foreach (var item in listaHOReqPropio)
            {
                var objMin = new InfSGIDatosTablas()
                {
                    Empresa = item.Emprabrev,
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Hophorini.Value, false),
                    Final = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Hophorfin.Value, true),
                    Observacion = item.Hopdesc
                };

                listaReqPropio.Add(objMin);
            }
            listaReqPropio = listaReqPropio.OrderBy(x => x.Empresa).ThenBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Inicio).ToList();

            List<InfSGIDatosTablas> listaReqPropioNoTermo = new List<InfSGIDatosTablas>();
            foreach (var item in listaOpVariaPorPruebaNoTermo)
            {
                InfSGIDatosTablas objOp = new InfSGIDatosTablas
                {
                    Empresa = item.Emprabrev,
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = item.Ichorini.Value.ToString(ConstantesAppServicio.FormatoHora),
                    Final = item.Ichorfin.Value.ToString(ConstantesAppServicio.FormatoHora),
                    Observacion = item.Icdescrip1
                };

                listaReqPropioNoTermo.Add(objOp);
            }
            listaReqPropioNoTermo = listaReqPropioNoTermo.OrderBy(x => x.Empresa).ThenBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Inicio).ToList();

            //salida
            model.ListaReqPropio = listaReqPropio;
            model.ListaReqPropioNoTermo = listaReqPropioNoTermo;

            #endregion

            #region 1.9. PRUEBAS DE UNIDADES - C SOLICITUD DE TERCEROS

            //insumo
            List<EveHoraoperacionDTO> listaHOPruebaSoliTercero = servHO.GetListaHorasOperacionByCriteria(Int32.Parse(ConstantesHorasOperacion.ParamEmpresaTodos),
                                            ConstantesSubcausaEvento.SubcausaPorPruebaSoliTercero.ToString(), fecha, fecha.AddDays(1),
                                            ConstantesHorasOperacion.IdTipoTermica, Int32.Parse(ConstantesHorasOperacion.ParamCentralTodos));

            //logica
            List<InfSGIDatosTablas> listaReqSoliTercero = new List<InfSGIDatosTablas>();
            foreach (var item in listaHOPruebaSoliTercero)
            {
                var objMin = new InfSGIDatosTablas()
                {
                    Empresa = item.Emprabrev,
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Hophorini.Value, false),
                    Final = UtilAnexoAPR5.GetHoraWordHoraOperacion(item.Hophorfin.Value, true),
                    Observacion = item.Hopdesc
                };

                listaReqSoliTercero.Add(objMin);
            }

            listaReqSoliTercero = listaReqSoliTercero.OrderBy(x => x.Empresa).ThenBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Inicio).ToList();

            //salida
            model.ListaReqSoliTercero = listaReqSoliTercero;

            #endregion

            #region 1.10. SISTEMAS AISLADOS

            //insumo
            var listaDataSisAislado = ReporteOperacionesVariasDataReporte(fecha, fecha, ConstantesPR5ReportesServicio.EvenclaseEjecutado,
                                                                ConstantesPR5ReportesServicio.IdSubCausaSistemasAislados, false);

            //logica
            List<InfSGIDatosTablas> listaSisAislado = new List<InfSGIDatosTablas>();

            foreach (var item in listaDataSisAislado)
            {
                InfSGIDatosTablas objOp = new InfSGIDatosTablas
                {
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = item.Ichorini.Value.ToString(ConstantesAppServicio.FormatoHora),
                    Final = item.Ichorfin.Value.ToString(ConstantesAppServicio.FormatoHora),
                    OperacionCentrales = item.Icdescrip1,
                    Motivo = item.Icdescrip2,
                    SubsistemaAislado = item.Icdescrip3,
                };

                listaSisAislado.Add(objOp);
            }

            listaSisAislado = listaSisAislado.OrderBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Inicio).ToList();

            //salida
            model.ListaSisAislado = listaSisAislado;

            #endregion

            #region 1.11. CONGESTIÓN

            //insumo
            ReporteRegistroCongestionesSTDataVersionada(fecha, fecha, "", out List<EveIeodcuadroDTO> listaDataCongestion, out List<EveIeodcuadroDTO> listav111);

            //logica
            List<InfSGIDatosTablas> listaCongestion = new List<InfSGIDatosTablas>();

            foreach (var item in listaDataCongestion)
            {
                InfSGIDatosTablas objOp = new InfSGIDatosTablas
                {
                    Ubicacion = item.Areanomb,
                    Equipo = item.Equiabrev,
                    Inicio = item.Ichorini.Value.ToString(ConstantesAppServicio.FormatoHora),
                    Final = item.Ichorfin.Value.ToString(ConstantesAppServicio.FormatoHora),
                    UnidadLimitada = item.Icdescrip1,
                    Observacion = item.Icdescrip2,
                };

                listaCongestion.Add(objOp);
            }

            listaCongestion = listaCongestion.OrderBy(x => x.Ubicacion).ThenBy(x => x.Equipo).ThenBy(x => x.Inicio).ToList();

            //salida
            model.ListaCongestion = listaCongestion;

            #endregion

            #region  1.12. CALIDAD DE PRODUCTO (FRECUENCIA)

            //insumos
            List<FIndicadorDTO> listaDataPeriodoVariacion = ReporteVariacionesFrecuenciaSEINDataReporte(gpscodi.ToString(), fecha, fecha, out List<MeGpsDTO> listaGPS);
            InfSGIAisladosTempGPS objIndicadorCalidad = ReporteSistemasAisladosTemporalesYVariacionesSostenidasSubitasDataReporte(gpscodi.ToString(), fecha).First();
            MeMedicion96DTO objFrec = GetVariacionSostenidaXGps(gpscodi, fecha);

            GraficoVariacionesFrecuenciaSEINDataReporte(gpscodi, fecha, out List<FLecturaDTO> listaFrecRango,
                                            out List<FLecturaDTO> listaFrecDebajo, out List<FLecturaDTO> listaFrecEncima, out GraficoWeb graficoCampana);

            //tabla periodo revision
            List<InfSGIDatosTablas> listaPeriodoRevision = new List<InfSGIDatosTablas>();
            listaPeriodoRevision.Add(new InfSGIDatosTablas()
            {
                Celda1 = "HORA",
                Celda2 = "Hz",
                Celda3 = "HORA",
                Celda4 = "Hz",
                Celda5 = "HORA",
                Celda6 = "Hz",
                Celda7 = "HORA",
                Celda8 = "Hz",
            });

            var varSubita = listaDataPeriodoVariacion.Find(x => x.Indiccodi == ConstantesIndicador.VariacionSubita);
            var varSostenida = listaDataPeriodoVariacion.Find(x => x.Indiccodi == ConstantesIndicador.VariacionSostenida);
            listaPeriodoRevision.Add(new InfSGIDatosTablas()
            {
                Celda1 = varSubita.HoraFrecMin,
                Celda2 = varSubita.ValorFrecMinDesc,
                Celda3 = varSubita.HoraFrecMax,
                Celda4 = varSubita.ValorFrecMaxDesc,
                Celda5 = varSostenida.HoraFrecMin,
                Celda6 = varSostenida.ValorFrecMinDesc,
                Celda7 = varSostenida.HoraFrecMax,
                Celda8 = varSostenida.ValorFrecMaxDesc,
            });

            //tabla indicador de calidad
            List<InfSGIDatosTablas> listaIndicadorCalidad = new List<InfSGIDatosTablas>();
            listaIndicadorCalidad.Add(new InfSGIDatosTablas()
            {
                Celda1 = "Variaciones sostenidas de Frecuencia",
                Celda2 = varSostenida.HoraTransgr,
                Celda3 = varSostenida.IndicValorTransgr,
                Celda4 = varSostenida.AcumuladoTransgr.ToString(),
                Celda5 = objIndicadorCalidad.VarSosFrecMax.GetValueOrDefault(0).ToString(),
                Celda6 = objIndicadorCalidad.VarSosFrecMin.GetValueOrDefault(0).ToString(),
            });
            listaIndicadorCalidad.Add(new InfSGIDatosTablas()
            {
                Celda1 = "Variaciones súbitas de Frecuencia",
                Celda2 = varSubita.HoraTransgr,
                Celda3 = varSubita.IndicValorTransgr,
                Celda4 = varSubita.AcumuladoTransgr.ToString(),
                Celda5 = objIndicadorCalidad.VarSubFrecMax.GetValueOrDefault(0).ToString(),
                Celda6 = objIndicadorCalidad.VarSubFrecMin.GetValueOrDefault(0).ToString(),
            });

            //tabla frecuencia mínima máxima

            string gpsNombre = "GPS " + GetNombreGPS(gpscodi);

            var frecMinimo = listaDataPeriodoVariacion.Find(x => x.Indiccodi == ConstantesIndicador.FrecuenciaMinima);
            var frecMaximo = listaDataPeriodoVariacion.Find(x => x.Indiccodi == ConstantesIndicador.FrecuenciaMaxima);
            List<InfSGIDatosTablas> listaFrecuenciaMinMax = new List<InfSGIDatosTablas>();
            listaFrecuenciaMinMax.Add(new InfSGIDatosTablas()
            {
                Celda1 = frecMinimo.HoraFrecMin,
                Celda2 = frecMinimo.ValorFrecMinDesc,
                Celda3 = frecMaximo.HoraFrecMax,
                Celda4 = frecMaximo.ValorFrecMaxDesc
            });

            //salida
            model.GraficoFrecSein = UtilAnexoAPR5.GetGraficoFrecuenciaWord(objFrec);
            model.ListaPeriodoRevision = listaPeriodoRevision;
            model.ListaIndicadorCalidad = listaIndicadorCalidad;
            model.GraficoCampanaFrec = graficoCampana;
            model.ListaFrecRango = listaFrecRango;
            model.ListaFrecEncima = listaFrecEncima;
            model.ListaFrecDebajo = listaFrecDebajo;
            model.ListaFrecuenciaMinMax = listaFrecuenciaMinMax;
            model.GpsNombre = gpsNombre;

            #endregion

            #region 1.13 FLUJOS POR LAS INTERCONEXIONES (MW)

            ReporteInterconexionesSEINDataVersionada(fecha, out List<MeMedicion48DTO> listaDataInter, out List<MePtomedicionDTO> listaPtoInter, out List<GraficoWeb> listaGraficoInter);

            model.GraficoInterc01 = listaGraficoInter[0];
            model.GraficoInterc02 = listaGraficoInter[1];
            model.GraficoInterc03 = listaGraficoInter[2];

            #endregion

            #region 1.14. Interconexiones Internacionales

            //insumo
            var listaOpVariaInterconexion = ReporteOperacionesVariasDataReporte(fecha, fecha, ConstantesPR5ReportesServicio.EvenclaseEjecutado,
                                                                ConstantesAppServicio.SubcausacodiInterconexInterna, false);
            servEjec.ListaFlujo30minInterconexion48(ConstantesInterconexiones.FuenteTIEFlujoNewAnexoA, fecha, fecha, out List<MeMedicion48DTO> listaInterconexion48,
                        out List<MeMedicion48DTO> listaTotalExp, out List<MeMedicion48DTO> listaTotalImp);

            //logica
            List<InfSGIDatosTablas> listobjInterconexiones = new List<InfSGIDatosTablas>();
            foreach (var item in listaOpVariaInterconexion)
            {
                InfSGIDatosTablas objOp = new InfSGIDatosTablas
                {
                    PaisImp = item.Icdescrip1,
                    PaisExp = item.Icdescrip2,
                    Equipo = item.Equiabrev,
                    Inicio = item.Ichorini.Value.ToString(ConstantesAppServicio.FormatoHora),
                    Final = item.Ichorfin.Value.ToString(ConstantesAppServicio.FormatoHora),
                    Observacion = item.Icdescrip3,
                };

                listobjInterconexiones.Add(objOp);
            }

            MePtomedicionDTO regPtoTotalTIE = new MePtomedicionDTO() { Ptomedicodi = 0, Repptonomb = "TOTAL", Emprnomb = "" };
            MeMedicion48DTO reg48TotalTIE = new MeMedicion48DTO() { Ptomedicodi = regPtoTotalTIE.Ptomedicodi, Medifecha = fecha };
            UtilAnexoAPR5.SetMeditotalXLista(reg48TotalTIE, listaInterconexion48);

            var graficoTIE = UtilAnexoAPR5.GetGraficoInterconexionInternacionalWord("INTERCONEXIÓN PERÚ - ECUADOR (L-2280)", new List<MePtomedicionDTO>() { regPtoTotalTIE }, new List<MeMedicion48DTO>() { reg48TotalTIE });

            //salida
            model.ListaInterconexionesInternacional = listobjInterconexiones;
            model.GraficoInterconexionesInternacional = graficoTIE;

            #endregion

            #region 2.1 COSTO TOTAL DE LA OPERACIÓN POR DÍA

            var listaM1Costo = this.ReporteCostoTotalOperacionEjecutadaDataReporte(fecha);
            var graficoWebCosto = GraficoCostoTotalOperacionEjecutada(listaM1Costo);

            model.MensajeCosto = graficoWebCosto.Subtitle;
            model.GraficoCosto = graficoWebCosto;
            if (incluirLeyendaEcuador) model.GraficoCosto.TitleText = "COSTO TOTAL DE LA OPERACIÓN POR DÍA (SIN ECUADOR)";

            #endregion

            #region Anexo

            model.Elaboradopor = "";
            model.Aprobadopor = "";
            model.Cargoelaboradopor = "ESPECIALISTA DE LA SUBDIRECCIÓN DE GESTIÓN DE LA INFORMACIÓN";
            model.CargoAprobadopor = "SUBDIRECTOR DE GESTIÓN DE LA INFORMACIÓN";

            #endregion

            UtilWordAnexoA utilWord = new UtilWordAnexoA();
            int resultadoWord = await utilWord.GenerarWordAnexoA(model);

            return resultadoWord;
        }

        /// <summary>
        /// GetNombreArchivoAnexoAWord
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="correlativo"></param>
        /// <returns></returns>
        public static string GetNombreArchivoAnexoAWord(DateTime fecha, int correlativo)
        {
            string diacorto = fecha.ToString("dddd", new CultureInfo("es-PE")).Substring(0, 3);
            return string.Format("{0}_{1}_v{2}.docx", diacorto, fecha.ToString(ConstantesAppServicio.FormatoDiaMes2), correlativo);
        }

        /// <summary>
        /// Numero del IEOD
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public string GetNumeroIeod(DateTime fecha)
        {
            DateTime lsfechatemp1 = Convert.ToDateTime(fecha.ToString("yyyy-MM-dd"));
            DateTime lsfechatemp2 = Convert.ToDateTime(fecha.Year + "-01-01");

            TimeSpan TsDif = lsfechatemp1.Subtract(lsfechatemp2);
            TsDif = TsDif.Add(new TimeSpan(24, 0, 0));

            string lsCad = "000" + TsDif.Days.ToString();

            return lsCad.Substring(lsCad.Length - 3, 3);
        }

        /// <summary>
        /// Listar totalizado de cada reprograma
        /// </summary>
        /// <param name="fecha"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListarReprogramaYupana(DateTime fecha)
        {
            McpAppServicio servicio = new McpAppServicio();
            MigracionesAppServicio migra = new MigracionesAppServicio();

            List<CpTopologiaDTO> topologias = servicio.ObtenerTopologias(fecha).Where(x => x.Topnombre != "PDO").ToList();
            List<MeMedicion48DTO> resultado = migra.ListarTotalXEscenario(fecha, topologias);

            return resultado;
        }

        #endregion

        #region Generación de Versión IEOD

        private void GenerarNuevaVersionAnexoA(DateTime dFecha, string usuario)
        {
            DbTransaction tran = null;

            try
            {
                IDbConnection conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                int verscodi = FactorySic.GetSiVersionRepository().GetMaxId();
                var regVersion = new SiVersionDTO()
                {
                    Verscodi = verscodi,
                    Versfechaversion = DateTime.Now,
                    Versfechaperiodo = dFecha.Date,
                    Versfeccreacion = DateTime.Now,
                    Versusucreacion = usuario,
                    Mprojcodi = ConstantesPR5ReportesServicio.MprojcodiIEOD,
                    Tmrepcodi = ConstantesPR5ReportesServicio.ReptipcodiAnexoAExcel
                };
                this.SaveGenerarIEOD(regVersion, conn, tran);

                byte[] listByte;
                int versdetcodi = FactorySic.GetSiVersionDetRepository().GetMaxId();

                #region 1.Reporte de Eventos: fallas, interrupciones, restricciones y otros de carácter operativo

                this.ReporteEventosDataReporte(dFecha, dFecha, string.Empty, ConstantesAppServicio.ParametroDefecto, out List<EventoDTO> lista1, out List<EveInterrupcionDTO> lista1_1, out List<EqEquipoDTO> lista1_2);

                listByte = SerializandoReporteAnexoA((object)lista1);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteEventos, conn, tran);

                listByte = SerializandoReporteAnexoA((object)lista1_1);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteEventosInterrup, conn, tran);

                listByte = SerializandoReporteAnexoA((object)lista1_2);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteEventosEquipo, conn, tran);

                #endregion

                #region 2.Principales restricciones operativas y Unidades de Generación del Sistema de Transmisión
                this.ReporteRestriccionesOperativasDataReporte(dFecha, dFecha, out List<EveIeodcuadroDTO> lista2_1, out List<EveManttoDTO> lista2_2);

                listByte = SerializandoReporteAnexoA((object)lista2_1);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRestriccionesOperativasRestricOp, conn, tran);

                listByte = SerializandoReporteAnexoA((object)lista2_2);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRestriccionesOperativasMantto, conn, tran);

                #endregion

                #region 3. Reporte de las principales restricciones operativas y mantenimiento de las Unidades de Generación y de los equipos del Sistema de Transmisión.

                var lista3 = this.ReporteIngresoConexionIntegracionDataReporte(dFecha, dFecha.AddDays(1));

                listByte = SerializandoReporteAnexoA((object)lista3);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteIngresoOperacionCISEIN, conn, tran);

                #endregion

                #region 4.Despacho registrado cada 30 minutos de la Unidades de Generacion de los Integrantes del COES

                ReporteDespachoRegistradoDataReporte(ConstantesPR5ReportesServicio.LectDespachoEjecutado, ConstantesPR5ReportesServicio.TipoinfoMW, dFecha, dFecha, ConstantesMedicion.IdEmpresaTodos.ToString(), ConstantesMedicion.IdTipoGeneracionTodos.ToString(), 0, out List<MeMedicion48DTO> lista41, out List<MePtomedicionDTO> listaPto41, out List<string> listaMensaje481);
                ReporteDespachoRegistradoDataReporte(ConstantesPR5ReportesServicio.LectDespachoEjecutado, ConstantesPR5ReportesServicio.TipoinfoMVAR, dFecha, dFecha, ConstantesMedicion.IdEmpresaTodos.ToString(), ConstantesMedicion.IdTipoGeneracionTodos.ToString(), 0, out List<MeMedicion48DTO> lista42, out List<MePtomedicionDTO> listaPto42, out List<string> listaMensaje482);

                listByte = SerializandoReporteAnexoA((object)lista41);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexDespachoRegistradoMW, conn, tran);

                listByte = SerializandoReporteAnexoA((object)lista42);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexDespachoRegistradoMvar, conn, tran);

                #endregion

                #region 5.Reporte de Demanda por Área

                var lista5 = this.ReporteDemandaPorAreaYSubareaDataReporte(ConstantesPR5ReportesServicio.LectDespachoEjecutado, dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista5);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteDemandaPorArea, conn, tran);

                #endregion

                #region 6.Reporte de Demanda de Grandes Usuarios
                this.ReporteDemandaGrandesUsuariosDataReporte(dFecha, dFecha, out List<SiEmpresaDTO> listaRptPtos6, out List<MeMedicion48DTO> lista6);

                listByte = SerializandoReporteAnexoA((object)lista6);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteDemandaGrandesUsuarios, conn, tran);

                #endregion

                #region 7.Recursos energéticos y diagrama de duración de demanda del SEIN

                List<MeMedicion48DTO> lista711, lista712;
                this.ListarGeneracionElectricaxCentralesRER(ConstantesPR5ReportesServicio.LectDespachoEjecutado, dFecha, dFecha, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto,
                                                        out lista711, out List<PrGrupoDTO> listaGrupoData711);
                lista712 = this.ListarGeneracionElectricaRERXTipoGeneracion(lista711);

                listByte = SerializandoReporteAnexoA((object)lista711);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEINRer1, conn, tran);

                listByte = SerializandoReporteAnexoA((object)lista712);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEINRer2, conn, tran);

                List<MeMedicion48DTO> lista721, lista722, listatmp;
                ReportePotenciaXTipoRecursoDataReporte(ConstantesPR5ReportesServicio.LectDespachoEjecutado, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, dFecha, dFecha, true, out lista721, out listatmp, out List<string> listaMensaje71);
                lista722 = ListaReportePotenciaXTipoHidro(ConstantesPR5ReportesServicio.LectDespachoEjecutado, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista721);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEIN1, conn, tran);

                listByte = SerializandoReporteAnexoA((object)lista722);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRecursosEnergeticosDemandaSEIN2, conn, tran);

                #endregion

                #region 8.Reporte de Evolución de la Producción de Energía Diaria

                DateTime inicioMes = UtilSemanalPR5.ObtenerFechasInformeSemanal(dFecha, dFecha).AnioAct.MesAct_FechaIni;
                ReporteProduccionEnergiaDiariaDataReporte(ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, inicioMes, dFecha,
                                                        out List<MeMedicion48DTO> listaData8, out List<MePtomedicionDTO> listaPto88);

                listByte = SerializandoReporteAnexoA((object)listaData8);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteProduccionEnergiaDiaria, conn, tran);

                #endregion

                #region 9.Máxima Generación Instantánea del SEIN

                var lista9 = this.ReporteMaxGeneracionInstSEINDataReporte(ConstantesPR5ReportesServicio.LectDespachoEjecutado, dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista9);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteGeneracionDelSEIN, conn, tran);

                #endregion

                #region 10.Reporte Horas de Arranque,Parada Ingreso y Salida de Generación del SEIN

                var lista10 = this.ReporteHorasOrdenAPISDataReporte(dFecha, dFecha.AddDays(1));

                listByte = SerializandoReporteAnexoA((object)lista10);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteHorasOrdenAPIS, conn, tran);

                #endregion

                #region 11.Hora Inicio y Fin de Indisponibilidades de las Unidades de Generación SEIN

                var lista11 = this.ReporteHoraIndisponibilidadesDataReporte(dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista11);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteHoraInicioFinIndisponibilidad, conn, tran);

                #endregion

                #region 13.Reporte Caudales de las Centrales Hidroelectricas

                List<MeReporptomedDTO> listaPtos13 = new List<MeReporptomedDTO>();
                List<MeMedicion24DTO> lista13 = new List<MeMedicion24DTO>();
                this.ReporteCaudalesCentralHidroelectricaDataReporte(ConstantesPR5ReportesServicio.IdReporteCaudalesHidro, dFecha, dFecha, out listaPtos13, out lista13);

                listByte = SerializandoReporteAnexoA((object)lista13);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCaudalesCentralHidroelectrica, conn, tran);

                listByte = SerializandoReporteAnexoA((object)listaPtos13);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCaudalesCentralHidroelectricaPto, conn, tran);

                #endregion

                #region 14.Reporte Horario Caudal y Volumen - Hidroelectricas

                List<MeReporptomedDTO> listaPto14 = new List<MeReporptomedDTO>();
                List<MeMedicion24DTO> lista14 = new List<MeMedicion24DTO>();
                this.ReporteCaudalesCentralHidroelectricaDataReporte(ConstantesPR5ReportesServicio.IdReporteVolumenHorario, dFecha, dFecha, out listaPto14, out lista14);

                listByte = SerializandoReporteAnexoA((object)lista14);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectrica, conn, tran);

                listByte = SerializandoReporteAnexoA((object)listaPto14);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectricaPto, conn, tran);

                List<MeMedicionxintervaloDTO> lista14Lag = this.servHidrologia.ListaMedIntervaloDescargaVertPag(ConstantesPR5ReportesServicio.IdFormatoDescarga, ConstantesAppServicio.ParametroDefecto, dFecha, dFecha, 1, 1000);
                listByte = SerializandoReporteAnexoA((object)lista14Lag);

                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteHorariosCaudalVolumenCentralHidroelectricaDescarga, conn, tran);

                #endregion

                #region 15.Reporte Vertimientos Embalses (Periodo-Volumen)

                var lista15 = this.servHidrologia.ListaMedIntervaloDescargaVertPag(ConstantesPR5ReportesServicio.IdFormatoVertimiento, ConstantesAppServicio.ParametroDefecto, dFecha, dFecha, 1, 1000);

                listByte = SerializandoReporteAnexoA((object)lista15);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteVertimientosPeriodoVolumen, conn, tran);

                #endregion

                #region 16.Reporte Cantidad Combustible (C. Termica)

                var lista16 = this.GetListarCantidadCombustibleCentralTermica(ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista16);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCantidadCombustibleCentralTermica, conn, tran);

                #endregion

                #region 17.Volúmenes o cantidad diaria de combustible consumido

                var lista17 = this.ReporteCombustibleConsumidoUnidadTermoelectricaDataReporte(dFecha, dFecha, ConstantesAppServicio.ParametroDefecto);

                listByte = SerializandoReporteAnexoA((object)lista17);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCombustibleConsumidoUnidadTermoelectrica, conn, tran);

                #endregion

                #region 18.Reporte Consumo y Presion Diario (U. Termoelectrica)

                // consumo
                var lista181 = this.ReporteConsumoDiarioUnidadTermoelectricaDataReporte(dFecha, dFecha, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesPR5ReportesServicio.FenergcodiGas.ToString());

                listByte = SerializandoReporteAnexoA((object)lista181);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaConsumo, conn, tran);

                // presion
                var lista182 = this.ReportePresionDiarioUnidadTermoelectricaDataReporte(dFecha, dFecha, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);

                listByte = SerializandoReporteAnexoA((object)lista182);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaPresion, conn, tran);

                // temperatura
                var lista183 = this.ReporteTemperaturaUnidadTermoelectricaDataReporte(dFecha, dFecha, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);

                listByte = SerializandoReporteAnexoA((object)lista183);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteConsumoYPresionDiarioUnidadTermoelectricaTemperatura, conn, tran);

                #endregion

                #region 19.Reporte Diario 30 min Energia Primaria(Unidades - Centrales)

                var lista19 = this.ReporteRegistroEnergia30UnidadesDataReporte(dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista19);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRegistroEnergiaPrimaria30Unidades, conn, tran);

                var listaPto19 = this.ListarPtoEnergiaPrimaria(dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)listaPto19);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRegistroEnergiaPrimaria30UnidadesPto, conn, tran);

                #endregion

                #region 20.Reporte Calor Util (Unidad Generacion - Proceso Industrial)

                var lista20 = this.ReporteCalorUtilGeneracionProcesoDataReporte(dFecha, dFecha, out List<MePtomedicionDTO> listaPto20);

                listByte = SerializandoReporteAnexoA((object)lista20);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCalorUtilGeneracionProceso, conn, tran);

                listByte = SerializandoReporteAnexoA((object)listaPto20);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCalorUtilGeneracionProcesoPto, conn, tran);

                #endregion

                #region 21.Reporte de Potencia Activa Líneas de Transmisión del SEIN
                /*
                var lista21 = this.ReporteFlujoPotenciaActivaTransmisionSEINDataReporte(dFecha, dFecha, ConstantesPR5ReportesServicio.LectcodiFlujoPotencia, ConstantesPR5ReportesServicio.TipoinfoMW, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);

                listByte = SerializandoReporteAnexoA((object)lista21);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReportePALineasTransmision, conn, tran);
                */
                #endregion

                #region 23.Tensión de las Barras del SEIN definidas por el COES
                /*
                var lista23 = this.GetDatosTensionBarras(dFecha, dFecha.AddDays(1), ConstantesPR5ReportesServicio.IdFormatoTensionBarra, ConstantesAppServicio.ParametroDefecto);

                listByte = SerializandoReporteAnexoA((object)lista23);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteTensionBarrasSEIN, conn, tran);
                
                var listaPto23 = UtilAnexoAPR5.ListarPtoMedicionFromHojapto(this.ListarPtosXFormatoYCabecera(ConstantesPR5ReportesServicio.IdFormatoTensionBarra, dFecha));

                listByte = SerializandoReporteAnexoA((object)listaPto23);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteTensionBarrasSEINPto, conn, tran);
                */
                #endregion

                #region 24.Reporte de Sobrecarga de Equipos Mayores a 100 kV

                var lista24 = ReporteOperacionesVariasDataReporte(dFecha, dFecha, "1", ConstantesPR5ReportesServicio.IdSubCausaSobrecarga, false);

                listByte = SerializandoReporteAnexoA((object)lista24);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteSobrecargaEquipos, conn, tran);

                #endregion

                #region 25.Reporte de Líneas Desconectadas por Regulación de Tensión

                var lista25 = ReporteOperacionesVariasDataReporte(dFecha, dFecha, "1", ConstantesPR5ReportesServicio.IdSubCausaPorTension, false);

                listByte = SerializandoReporteAnexoA((object)lista25);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteLineasDesconectadasPorTension, conn, tran);

                #endregion

                #region 26.Reporte de Sistemas Aislados Temporales

                var lista26 = ReporteOperacionesVariasDataReporte(dFecha, dFecha, "1", ConstantesPR5ReportesServicio.IdSubCausaPorTension, false);

                listByte = SerializandoReporteAnexoA((object)lista26);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteSistemasAisladosTemporales, conn, tran);

                #endregion

                #region 27.Reporte de las Variaciones Sostenidas y Súbitas de Frecuencia en el SEIN

                var lista271 = this.ReporteVariacionesFrecuenciaSEINDataReporte(ConstantesAppServicio.ParametroDefecto, dFecha, dFecha, out List<MeGpsDTO> listaGPS27);
                listByte = SerializandoReporteAnexoA((object)lista271);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteVariacionesSostenidasSubitasGPS, conn, tran);
                /*
                var lista272 = this.GraficoVariacionesFrecuenciaSEINDataReporte(ConstantesAppServicio.ParametroDefecto, dFecha, dFecha);
                listByte = SerializandoReporteAnexoA((object)lista272);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteVariacionesSostenidasSubitasGrafico, conn, tran);
                */
                #endregion

                #region 30.Desviaciones de la Demanda Respecto a su Pronóstico

                List<MeMedicion48DTO> lista30;
                this.ReporteDesviacionDemandaPronosticoDataReporte(dFecha, dFecha, out lista30);

                listByte = SerializandoReporteAnexoA((object)lista30);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteDesviacionesDemandaPronostico, conn, tran);

                #endregion

                #region 31.Desviaciones Producción Unidades de Generación

                ReporteDesviacionesProduccionUGDataReporte(ConstantesAppServicio.ParametroDefecto, dFecha, dFecha, out List<MeMedicion48DTO> lista31, out List<MePtomedicionDTO> listaPto31);

                listByte = SerializandoReporteAnexoA((object)lista31);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteDesviacionesProduccionUG, conn, tran);

                #endregion

                #region 32.Reporte de los Costos Marginales de Corto Plazo en las Barras del SEIN

                var lista32 = this.GetByCriteriaSiCostomarginals(dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista32);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCostoMarginalesCortoPlazo, conn, tran);

                #endregion

                #region 33. Costo total de operación ejecutada.

                var lista33 = this.ReporteCostoTotalOperacionEjecutadaDataReporte(dFecha);

                listByte = SerializandoReporteAnexoA((object)lista33);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCostoTotalOperacionEjecutada, conn, tran);

                #endregion

                #region 34.Calificación de la Operacion de las Unidades de Generación

                var lista34 = this.ReporteHorasOrdenAPISDataReporte(dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista34);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteCalificacionOperacionUnidades, conn, tran);

                #endregion

                #region 35.Reporte de los Registro de las Congestiones del Sistema de Transmisión

                var lista35 = ReporteOperacionesVariasDataReporte(dFecha, dFecha, "1", ConstantesPR5ReportesServicio.IdSubCausaCongestionesST, false);

                listByte = SerializandoReporteAnexoA((object)lista35);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRegistroCongestionesST, conn, tran);

                #endregion

                #region 36. Registro de asignación de la RRPF y RRSF

                ReporteAsignacionRRPFyRRSDataReporte(dFecha, out string[][] lista36_1, out decimal? magnitudRpf);

                listByte = SerializandoReporteAnexoA((object)lista36_1);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteAsignacionRRPFyRRSFMatriz, conn, tran);

                listByte = SerializandoReporteAnexoA((object)magnitudRpf);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteAsignacionRRPFyRRSFValor, conn, tran);

                #endregion

                #region 37.Registro de los Flujos Enlaces Internacionales
                /*
                var lista37 = ListaFlujosPotencia(ConstantesPR5ReportesServicio.IdFormatoFlujoTrans, ConstantesPR5ReportesServicio.EmprcodiByZorritos.ToString(), dFecha, dFecha);

                listByte = SerializandoReporteAnexoA((object)lista37);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRegistroFlujosEnlacesInternacionales, conn, tran);

                var listaPto36 = this.ListarPtosXFormatoYCabeceraFlujoEI(dFecha);

                listByte = SerializandoReporteAnexoA((object)listaPto36);
                this.SaveAnexoAinByteTransaccional(ref versdetcodi, verscodi, listByte, ConstantesVersionAnexoAPR5.IndexReporteRegistroFlujosEnlacesInternacionalesPto, conn, tran);
                */
                #endregion

                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        private int SaveGenerarIEOD(SiVersionDTO version, IDbConnection conn, DbTransaction tran)
        {
            int nroVersion = FactorySic.GetSiVersionRepository().MaximoXFecha(version.Versfechaperiodo, version.Tmrepcodi);
            version.Verscorrelativo = nroVersion + 1;
            return FactorySic.GetSiVersionRepository().SaveTransaccional(version, conn, tran);
        }

        private void SaveAnexoAinByteTransaccional(ref int versdetcodi, int verscodi, byte[] listByte, decimal reporte, IDbConnection conn, DbTransaction tran)
        {
            SiVersionDetDTO svd = new SiVersionDetDTO
            {
                Versdtcodi = versdetcodi,
                Verscodi = verscodi,
                Versdtdatos = listByte,
                Versdtnroreporte = reporte
            };

            FactorySic.GetSiVersionDetRepository().SaveTransaccional(svd, conn, tran);

            versdetcodi++;
        }

        private SiVersionDTO GetVersionIEDOAnterior(string verscodi, decimal numReporte)
        {
            SiVersionDTO vers = FactorySic.GetSiVersionRepository().GetById(Int32.Parse(verscodi));

            List<SiVersionDTO> lista = this.ListaVersionByFecha(vers.Versfechaperiodo, ConstantesPR5ReportesServicio.ReptipcodiAnexoAExcel);

            SiVersionDTO versAnterior = lista.Find(x => x.Verscorrelativo == vers.Verscorrelativo - 1);

            return versAnterior;
        }

        private T GetDataSerializedVersion<T>(string verscodi, decimal numReporte)
        {
            var listaBytes = GetByVersionDetIEOD(verscodi, numReporte);
            return Util.DeserializarObjeto<T>(listaBytes.Versdatos);
        }

        private T GetDataSerializedPreviousVersion<T>(string verscodi, decimal numReporte)
        {
            SiVersionDTO versAnterior = this.GetVersionIEDOAnterior(verscodi, numReporte);

            if (versAnterior != null)
                return GetDataSerializedVersion<T>(versAnterior.Verscodi.ToString(), numReporte);
            else
            {
                if (typeof(T).Equals(typeof(List<MeMedicion48DTO>))) return (T)(object)new List<MeMedicion48DTO>();
                if (typeof(T).Equals(typeof(List<EventoDTO>))) return (T)(object)new List<EventoDTO>();
                if (typeof(T).Equals(typeof(List<MePtomedicionDTO>))) return (T)(object)new List<MePtomedicionDTO>();
                if (typeof(T).Equals(typeof(List<MeHojaptomedDTO>))) return (T)(object)new List<MeHojaptomedDTO>();
                if (typeof(T).Equals(typeof(List<EveManttoDTO>))) return (T)(object)new List<EveManttoDTO>();
                if (typeof(T).Equals(typeof(List<EveHoraoperacionDTO>))) return (T)(object)new List<EveHoraoperacionDTO>();
                if (typeof(T).Equals(typeof(List<MeReporptomedDTO>))) return (T)(object)new List<MeReporptomedDTO>();
                if (typeof(T).Equals(typeof(List<MeMedicionxintervaloDTO>))) return (T)(object)new List<MeMedicionxintervaloDTO>();
                if (typeof(T).Equals(typeof(List<EveIeodcuadroDTO>))) return (T)(object)new List<EveIeodcuadroDTO>();
                if (typeof(T).Equals(typeof(List<FIndicadorDTO>))) return (T)(object)new List<FIndicadorDTO>();
                if (typeof(T).Equals(typeof(List<EqEquipoDTO>))) return (T)(object)new List<EqEquipoDTO>();
                if (typeof(T).Equals(typeof(List<EveInterrupcionDTO>))) return (T)(object)new List<EveInterrupcionDTO>();
                if (typeof(T).Equals(typeof(List<EveEventoEquipoDTO>))) return (T)(object)new List<EveEventoEquipoDTO>();

                return default(T);
            }
        }

        private T DeserializandoReporteAnexoA<T>(byte[] listByte)
        {
            //Deserializando
            BinaryFormatter bf = new BinaryFormatter();
            if (listByte != null)
            {
                using (MemoryStream ms = new MemoryStream(listByte))
                {
                    return (T)bf.Deserialize(ms);
                }
            }
            else
            {
                return default(T);
            }
        }

        private byte[] SerializandoReporteAnexoA(object lista)
        {
            //Serializando
            byte[] listByte = null;
            BinaryFormatter bf = new BinaryFormatter();
            using (MemoryStream ms = new MemoryStream())
            {
                bf.Serialize(ms, lista);
                listByte = ms.ToArray();
            }

            return listByte;
        }

        /// <summary>
        /// ListaVersionByFechaAnexoAWord
        /// </summary>
        /// <param name="dFecha"></param>
        /// <returns></returns>
        public List<SiVersionDTO> ListaVersionByFechaAnexoAExcel(DateTime dFecha)
        {
            List<SiVersionDTO> lista = this.ListaVersionByFecha(dFecha, ConstantesPR5ReportesServicio.ReptipcodiAnexoAExcel);

            return lista;
        }

        /// <summary>
        /// ListaVersionByFechaAnexoAWord
        /// </summary>
        /// <param name="dFecha"></param>
        /// <returns></returns>
        public List<SiVersionDTO> ListaVersionByFechaAnexoAWord(DateTime dFecha)
        {
            List<SiVersionDTO> lista = this.ListaVersionByFecha(dFecha, ConstantesPR5ReportesServicio.ReptipcodiAnexoAWord);

            return lista;
        }

        #endregion

        #region Generación de Versión de Informe Semanal

        /// <summary>
        /// EsValidoNuevaVersionSemanal
        /// </summary>
        /// <param name="tmrepcodi"></param>
        /// <param name="dFechaPeriodo"></param>
        /// <returns></returns>
        public bool EsValidoNuevaVersionSemanal(int tmrepcodi, DateTime dFechaPeriodo)
        {
            List<SiVersionDTO> listaVer = new List<SiVersionDTO>();

            if (ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal == tmrepcodi) listaVer = ListaVersionByFechaInformeSemanal(dFechaPeriodo);
            if (ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal == tmrepcodi) listaVer = ListaVersionByFechaEjecutivoSemanal(dFechaPeriodo);

            if (listaVer.Any())
            {
                DateTime fechaInicial = dFechaPeriodo;
                DateTime fechaFinal = dFechaPeriodo.AddDays(6);

                List<MeDespachoResumenDTO> listaResumenAntes = GetByCriteriaMeDespachoResumens(ConstantesMedicion.TipoDatoDespachoEjec, fechaInicial, fechaFinal);

                //Guardar copia de datos 
                CopiarProdGenTotalizadaSemanal(dFechaPeriodo, dFechaPeriodo.AddDays(6));

                List<MeDespachoResumenDTO> listaResumenDespues = GetByCriteriaMeDespachoResumens(ConstantesMedicion.TipoDatoDespachoEjec, fechaInicial, fechaFinal);

                //Comparar la versión actual que está en bd respecto a la anterior
                bool existeCambio = false;
                for (var day = fechaInicial; day <= fechaFinal; day = day.AddDays(1))
                {
                    var objAntes = listaResumenAntes.Find(x => x.Dregenfecha == day);
                    var objDespues = listaResumenDespues.Find(x => x.Dregenfecha == day);

                    if (objAntes != null && objDespues != null)
                    {
                        if (objAntes.Dregentotalsein.GetValueOrDefault(0) != objDespues.Dregentotalsein.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregentotalexp.GetValueOrDefault(0) != objDespues.Dregentotalexp.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregentotalimp.GetValueOrDefault(0) != objDespues.Dregentotalimp.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregentotalnorte.GetValueOrDefault(0) != objDespues.Dregentotalnorte.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregentotalcentro.GetValueOrDefault(0) != objDespues.Dregentotalcentro.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregentotalsur.GetValueOrDefault(0) != objDespues.Dregentotalsur.GetValueOrDefault(0)) existeCambio = true;

                        if (objAntes.Dregenmdhora != objDespues.Dregenmdhora) existeCambio = true;
                        if (objAntes.Dregenmdsein.GetValueOrDefault(0) != objDespues.Dregenmdsein.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregenmdexp.GetValueOrDefault(0) != objDespues.Dregenmdexp.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregenmdimp.GetValueOrDefault(0) != objDespues.Dregenmdimp.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregenmdhidro.GetValueOrDefault(0) != objDespues.Dregenmdhidro.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregenmdtermo.GetValueOrDefault(0) != objDespues.Dregenmdtermo.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregenmdeolico.GetValueOrDefault(0) != objDespues.Dregenmdeolico.GetValueOrDefault(0)) existeCambio = true;
                        if (objAntes.Dregenmdsolar.GetValueOrDefault(0) != objDespues.Dregenmdsolar.GetValueOrDefault(0)) existeCambio = true;

                        if (objAntes.Dregenmdnoiihora != objDespues.Dregenmdnoiihora) existeCambio = true;
                        if (objAntes.Dregenmdnoiisein.GetValueOrDefault(0) != objDespues.Dregenmdnoiisein.GetValueOrDefault(0)) existeCambio = true;
                    }
                    else
                    {
                        existeCambio = true;
                    }
                }

                return true; //antes era return existeCambio;
            }
            else
            {
                //Guardar 1era copia de datos 
                CopiarProdGenTotalizadaSemanal(dFechaPeriodo, dFechaPeriodo.AddDays(6));

                //si no existe ninguna version entonces es valido crear nueva version
                return true;
            }
        }

        /// <summary>
        /// GuardarVersionInfSemanal
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="versfechaperiodo"></param>
        public void GuardarVersionInfSemanal(int verscodi, DateTime versfechaperiodo)
        {
            DateTime fechaInicial = versfechaperiodo;
            DateTime fechaFinal = fechaInicial.AddDays(6);

            FechasPR5 objFecha = UtilSemanalPR5.ObtenerFechasInformeSemanal(fechaInicial, fechaFinal);

            List<SiVersionDetDTO> listaNumeralXVersion = new List<SiVersionDetDTO>();

            #region Resúmen Relevante

            SiVersionDetDTO objNumRR = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexResumenRelevante,
                ListaDat = ListarDatSemanalResumenrelevante(objFecha)
            };
            listaNumeralXVersion.Add(objNumRR);

            #endregion

            #region Resúmen de Producción

            SiVersionDetDTO objNumRProd = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexResumenProduccion,
                ListaDat = ListarDatSemanalResumenProduccion(objFecha)
            };
            listaNumeralXVersion.Add(objNumRProd);

            #endregion

            #region 1.1. Ingreso en Operación Comercial al SEIN

            SiVersionDetDTO objNum11 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemIngresoOpComercSEIN,
                ListaDat = ListarDatSemanalIngresoOpComercSEIN(objFecha, 1)
            };
            listaNumeralXVersion.Add(objNum11);

            #endregion

            #region 1.2. Retiro de Operación Comercial

            SiVersionDetDTO objNum112 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemRetiroOpComercSEIN,
                ListaDat = ListarDatSemanalIngresoOpComercSEIN(objFecha, 2)
            };
            listaNumeralXVersion.Add(objNum112);

            #endregion

            #region 2.1. Producción por tipo de Generación

            SiVersionDetDTO objNum21 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdTipoGen,
                ListaDat = ListarDatSemanalProdTipoGen(objFecha)
            };
            listaNumeralXVersion.Add(objNum21);

            #endregion

            #region 2.2. Producción RER

            SiVersionDetDTO objNum22 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdTipoRecurso,
                ListaDat = ListarDatSemanalProduccionRecurso(objFecha)
            };
            listaNumeralXVersion.Add(objNum22);

            #endregion

            #region 2.3. Producción RER

            SiVersionDetDTO objNum23 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemProdRER,
                ListaDat = ListarDatSemanalProduccionRER(objFecha)
            };
            listaNumeralXVersion.Add(objNum23);

            #endregion

            #region 2.4. Factor de planta de las centrales RER

            SiVersionDetDTO objNum24 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemFactorPlantaRER,
                ListaDat = ListarDatSemanalFactorPlantaCentralesRER(objFecha)
            };
            listaNumeralXVersion.Add(objNum24);

            #endregion

            #region 2.5.  Participación de la producción por empresas Integrantes

            SiVersionDetDTO objNum25 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemParticipacionEmpresas,
                ListaDat = ListarDatSemanalParticipacionEmpresas(objFecha)
            };
            listaNumeralXVersion.Add(objNum25);
            #endregion

            #region 3.1. MÁXIMA DEMANDA COINCIDENTE DE POTENCIA POR TIPO DE GENERACIÓN (MW)

            SiVersionDetDTO objNum31 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexMaximaDemandaTipoGeneracionSemanal,
                ListaDat = ListarDatSemanalMaximaDemandaTipoGeneracion(objFecha)
            };
            listaNumeralXVersion.Add(objNum31);

            #endregion

            #region 3.2. PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)

            SiVersionDetDTO objNum32 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexMaximaDemandaXEmpresaSemanal,
                ListaDat = ListarDatSemanalMaximaDemandaXEmpresa(objFecha)
            };
            listaNumeralXVersion.Add(objNum32);

            #endregion

            #region 3.3. EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)

            SiVersionDetDTO objNum33 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaXAreaOpeSemanal,
                ListaDat = ListarDatSemanalEvolucionDemandaAreaOperativa(objFecha)
            };
            listaNumeralXVersion.Add(objNum33);

            #endregion                        

            #region 4.1. Demanda de Grandes Usuarios en el día de máxima demanda semanal (MW)

            SiVersionDetDTO objNum41 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaGUMaximaDemandaSemanal,
                ListaDat = ListarDatSemanalDemandaGUMaximaDemanda(objFecha)
            };
            listaNumeralXVersion.Add(objNum41);

            #endregion

            #region 4.2. Diagrama de Carga por rangos de potencia en Grandes Usuarios (MW)

            SiVersionDetDTO objNum42 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexDiagramaCargaGURangoPotencia,
                ListaDat = ListarDatSemanalDiagramaCargaGURangoPotencia(objFecha)
            };
            listaNumeralXVersion.Add(objNum42);

            #endregion

            #region 4.3. Demanda de energía por área operativa de los Principales Grandes Usuarios (GWh)

            SiVersionDetDTO objNum43 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexDemandaGUXAreaOperativa,
                ListaDat = ListarDatSemanalDemandaGUXAreaOperativa(objFecha)
            };
            listaNumeralXVersion.Add(objNum43);

            #endregion

            #region 5.1 Volumen útil de los embalses y lagunas (Mm3)

            SiVersionDetDTO objNum51 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemVolUtilEmbLag,
                ListaDat = ListarDatSemanalVolumenUtil(objFecha, ConstantesInformeSemanalPR5.IndexSemVolUtilEmbLag)
            };
            listaNumeralXVersion.Add(objNum51);

            #endregion

            #region 5.2 Evolución de volúmenes de embalses y lagunas

            SiVersionDetDTO objNum52 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexEvolucionVolEmbLagSem,
                ListaDat = ListarDatSemanalEvolucionVolumenUtil(objFecha, ConstantesInformeSemanalPR5.IndexEvolucionVolEmbLagSem)
            };
            listaNumeralXVersion.Add(objNum52);

            #endregion

            #region 5.3 Promedio semanal de los caudales (m3/s)

            SiVersionDetDTO objNum53 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemPromCaudales,
                ListaDat = ListarDatSemanalPromedioCaudales(objFecha, ConstantesInformeSemanalPR5.IndexSemPromCaudales)
            };
            listaNumeralXVersion.Add(objNum53);

            #endregion

            #region 5.4 Evolución de los caudales

            SiVersionDetDTO objNum54 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexEvolucionCaudalesSem,
                ListaDat = ListarDatSemanalEvolucionCaudal(objFecha, ConstantesInformeSemanalPR5.IndexEvolucionCaudalesSem)
            };
            listaNumeralXVersion.Add(objNum54);

            #endregion

            #region 6. CONSUMO DE COMBUSTIBLE EN EL SEIN

            SiVersionDetDTO objNum6 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexConsumoCombustibleSemanal,
                ListaDat = ListarDatSemanalConsumoCombustible(fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum6);

            #endregion

            #region 7. COSTO DE OPERACIÓN EJECUTADO ACUMULADO SEMANAL DEL SEIN (Millones de S/.)

            SiVersionDetDTO objNum7 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosOperacionEjecutados,
                ListaDat = ListarDatSemanalCostosOperacionEjecutado(objFecha, ConstantesInformeSemanalPR5.IndexSemEvolCostosOperacionEjecutados, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum7);

            #endregion

            #region 8.1. Evolución de los Costos Marginales Nodales Promedio semanal del SEIN (US$/MWh)

            SiVersionDetDTO objNum81 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesProm,
                ListaDat = ListarDatSemanalCostosMarginalesPromSantaRosaEjec(objFecha, ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesProm, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum81);

            #endregion

            #region 8.2. Evolución  de los Costos Marginales Nodales Promedio semanal por área operativa (US$/MWh)

            SiVersionDetDTO objNum82 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesPorArea,
                ListaDat = ListarDatSemanalCostosMarginalesPorArea(objFecha, ConstantesInformeSemanalPR5.IndexSemEvolCostosMarginalesPorArea, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum82);

            #endregion

            #region 9.1. PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 500kV

            SiVersionDetDTO objNum91 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras500Semanal,
                ListaDat = ListarDatSemanalPerfilTensionBarraDeRed(fechaInicial, fechaFinal, 500)
            };
            listaNumeralXVersion.Add(objNum91);

            #endregion

            #region 9.2. PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 220kV

            SiVersionDetDTO objNum92 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras220Semanal,
                ListaDat = ListarDatSemanalPerfilTensionBarraDeRed(fechaInicial, fechaFinal, 220)
            };
            listaNumeralXVersion.Add(objNum92);

            #endregion

            #region 9.3. PERFIL DE TENSIÓN EN BARRAS DE LA RED DE 138kV

            SiVersionDetDTO objNum93 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexTensionBarras138Semanal,
                ListaDat = ListarDatSemanalPerfilTensionBarraDeRed(fechaInicial, fechaFinal, 138)
            };
            listaNumeralXVersion.Add(objNum93);

            #endregion

            #region 10. FLUJOS DE INTERCONEXIÓN EN ÁREAS OPERATIVAS DEL SEIN (MW)

            SiVersionDetDTO objNum101 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexFlujoMaximoInterconexiones,
                ListaDat = ListarDatFlujosMaximoInterconexiones(ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal, objFecha, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum101);

            #endregion

            #region 11. HORAS DE CONGESTIÓN EN LAS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)

            SiVersionDetDTO objNum111 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexHorasCongestionAreaOpeSemanal,
                ListaDat = ListarDatSemanalHorasCongestionPorArea(objFecha)
            };
            listaNumeralXVersion.Add(objNum111);

            #endregion

            #region 13. INTERCAMBIOS INTERNACIONALES

            SiVersionDetDTO objNum13 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexIntercambioInternacionalesSemanal,
                ListaDat = ListarDatSemanalIntercambioInternacional(objFecha, ConstantesInformeSemanalPR5.IndexIntercambioInternacionalesSemanal, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum13);

            #endregion

            #region 14. Fallas por tipo de equipo y causa según clasificación CIER

            SiVersionDetDTO objNum14 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexEventoFallaSuministroEnerg,
                ListaDat = ListarDatSemanalEventosyFallas(objFecha, fechaInicial, fechaFinal, ConstantesInformeSemanalPR5.IndexEventoFallaSuministroEnerg)
            };
            listaNumeralXVersion.Add(objNum14);

            #endregion

            #region 15. 13.2 Detalle de Eventos

            SiVersionDetDTO objNum155 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesInformeSemanalPR5.IndexDetalleEventos,
                ListaDat = ListarDatSemanalDetalleEventos(objFecha)
            };
            listaNumeralXVersion.Add(objNum155);

            #endregion

            GuardarTransaccionVersionYDetalle(verscodi, listaNumeralXVersion);
        }

        private void GuardarTransaccionVersionYDetalle(int verscodi, List<SiVersionDetDTO> listaNumeralXVersion)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;

            try
            {
                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                //correlativos
                int corrVersdtcodi = FactorySic.GetSiVersionDetRepository().GetMaxId();
                int corrVerdatcodi = FactorySic.GetSiVersionDatRepository().GetMaxId();
                int corrVdatdtcodi = FactorySic.GetSiVersionDatdetRepository().GetMaxId();

                //asignar 
                foreach (var objNum in listaNumeralXVersion)
                {
                    objNum.Versdtcodi = corrVersdtcodi;
                    objNum.Verscodi = verscodi;
                    SaveSiVersionDet(objNum, conn, tran);
                    corrVersdtcodi++;

                    foreach (var objDat in objNum.ListaDat)
                    {
                        objDat.Verdatcodi = corrVerdatcodi;
                        objDat.Versdtcodi = objNum.Versdtcodi;
                        SaveSiVersionDat(objDat, conn, tran);
                        corrVerdatcodi++;

                        foreach (var objDatDet in objDat.ListaDetalle)
                        {
                            objDatDet.Vdatdtcodi = corrVdatdtcodi;
                            objDatDet.Verdatcodi = objDat.Verdatcodi;
                            SaveSiVersionDatdet(objDatDet, conn, tran);
                            corrVdatdtcodi++;
                        }
                    }
                }

                //guardar definitivamente
                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }
        }

        private List<SiVersionDatDTO> ListarDatSemanalResumenrelevante(FechasPR5 objFecha)
        {
            //datos            
            this.CargarResumenRelevanteSemanal(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDPotGenData,
                    out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticos, out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaCMg,
                    out List<ResultadoTotalGeneracion> listaCosto);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

            //Datos Parrafo 01
            var regMD = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual,
                Vdatdtvalor = regMD.FechaOnlyHora,
                Vdatdtfecha = regMD.FechaHora,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct
            };
            listaDet.Add(objDet);

            var mdSemAct = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            string valorTexto = mdSemAct.Meditotal != null ? mdSemAct.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorSemanaMaximaDemanda,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct
            };
            listaDet.Add(objDet);

            var varmd = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
            valorTexto = varmd.Meditotal != null ? varmd.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorSemanaMaximaDemanda,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct_Var
            };
            listaDet.Add(objDet);

            List<int> listaFenergcodi = new List<int>() {
            ConstantesPR5ReportesServicio.FenergcodiAgua,
            ConstantesPR5ReportesServicio.FenergcodiGas,
            ConstantesSiosein2.FenergcodiRelevanteBiogasBagazo,
            ConstantesPR5ReportesServicio.FenergcodiSolar,
            ConstantesPR5ReportesServicio.FenergcodiEolica,
            ConstantesSiosein2.FenergcodiRelevanteResidualYDiesel,
            ConstantesPR5ReportesServicio.FenergcodiCarbon};

            List<int> listaTipoResultado = new List<int>() {
            PR5ConstanteFecha.ValorAnioAct_SemAct,PR5ConstanteFecha.ValorAnio1Ant_SemAct};


            foreach (int tipoResultado in listaTipoResultado)
            {
                foreach (int tipoFenergcodi in listaFenergcodi)
                {
                    var partRecEnerg = listaParticipacionRecursosEnergeticos.Find(x => x.TipoResultadoFecha == tipoResultado && x.Fenergcodi == tipoFenergcodi);
                    valorTexto = partRecEnerg.Meditotal != null ? partRecEnerg.Meditotal.ToString().Replace(",", ".") : "";
                    objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                        Vdatdtvalor = string.Format("{0}|{1}|{2}|{3}", valorTexto, partRecEnerg.Fenergcodi, partRecEnerg.Fenergnomb, partRecEnerg.Fenergcolor),
                        Vdatdtid = tipoResultado
                    };
                    listaDet.Add(objDet);

                }
            }



            var energiaSem = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            valorTexto = energiaSem.Meditotal != null ? energiaSem.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct
            };
            listaDet.Add(objDet);

            var varenergiaSemAct = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
            valorTexto = varenergiaSemAct.Meditotal != null ? varenergiaSemAct.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct_Var
            };
            listaDet.Add(objDet);

            var varenergiaAnioActAcum = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);
            valorTexto = varenergiaAnioActAcum.Meditotal != null ? varenergiaAnioActAcum.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_Acum_Var
            };
            listaDet.Add(objDet);

            var varenergiaAnioActAcumGraf = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            valorTexto = varenergiaAnioActAcumGraf.Meditotal != null ? varenergiaAnioActAcumGraf.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnio1Ant_SemAct
            };
            listaDet.Add(objDet);

            var regCMgSemAct = listaCMg.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            if (regCMgSemAct == null) regCMgSemAct = listaCMg.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct); //si no existe registro debe estar en el año pasado
            valorTexto = regCMgSemAct.Meditotal != null ? regCMgSemAct.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarMaxMes,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct
            };
            listaDet.Add(objDet);


            var regCostoSemAct = listaCosto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            if (regCostoSemAct == null) regCostoSemAct = listaCosto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            valorTexto = regCostoSemAct.Meditotal != null ? regCostoSemAct.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarPromMes,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_SemAct
            };
            listaDet.Add(objDet);

            var regCostoVarSemAct = listaCosto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);
            if (regCostoVarSemAct == null) regCostoVarSemAct = listaCosto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Total_Var);

            valorTexto = regCostoVarSemAct.Meditotal != null ? regCostoVarSemAct.Meditotal.ToString().Replace(",", ".") : "";
            objDet = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorCostoMarPromMes,
                Vdatdtvalor = valorTexto,
                Vdatdtid = PR5ConstanteFecha.ValorAnioAct_Total_Var
            };
            listaDet.Add(objDet);

            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiResumenRelevante,
                Verdatvalor = string.Format(" Resumen Relevate SEMANA N° {0}", objFecha.AnioAct.RangoAct_NumYAnio),
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalResumenProduccion(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                        
            this.ListarResumenProduccion(objFecha, out string energiaSemAct, out string varenergiaSemAct, out List<SiEmpresaDTO> listaEmpresa, out List<PrGrupoDTO> listaGrupoDespacho, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc,
            out List<ResultadoTotalGeneracion> listaTgen, out List<ResultadoTotalGeneracion> listaEnergEjec, out List<ResultadoTotalGeneracion> listaEnergProg, out List<ResultadoTotalGeneracion> listaMDEjec,
            out List<ResultadoTotalGeneracion> listaTotalTgen, out List<ResultadoTotalGeneracion> listaTotalEnergEjec, out List<ResultadoTotalGeneracion> listaTotalEnergProg, out List<ResultadoTotalGeneracion> listaTotalMDEjec,
            out List<ResultadoTotalGeneracion> listaTgenC2, out List<ResultadoTotalGeneracion> listaTIEC3);




            var listaFila = new List<PrGrupoDTO>();
            foreach (var regEmp in listaEmpresa)
            {
                var listaGrXEmp = listaGrupoDespacho.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();

                foreach (var regGr in listaGrXEmp)
                {
                    listaFila.Add(new PrGrupoDTO() { Emprcodi = 0, Grupocodi = regGr.Grupocodi, Emprnomb = regEmp.Emprnomb, Gruponomb = regGr.Gruponomb, Grupocodi2 = regGr.Emprcodi });
                }
                listaFila.Add(new PrGrupoDTO() { Emprcodi = regEmp.Emprcodi, Grupocodi = 0, Emprnomb = regEmp.Emprnomb, Gruponomb = "" });
            }



            List<Tuple<int, int>> listaTipoResultado = new List<Tuple<int, int>>() {
                new Tuple<int,int>(1,ConstantesPR5ReportesServicio.TgenercodiHidro),
                new Tuple<int,int>(2,ConstantesPR5ReportesServicio.TgenercodiTermo),
                new Tuple<int,int>(3,ConstantesPR5ReportesServicio.TgenercodiRER),
                new Tuple<int,int>(4,PR5ConstanteFecha.ValorAnioAct_SemAct),
                new Tuple<int,int>(5,PR5ConstanteFecha.ValorAnioAct_SemAct),
                new Tuple<int,int>(6,PR5ConstanteFecha.ValorAnioAct_SemAct_Var),
                new Tuple<int,int>(7,PR5ConstanteFecha.ValorAnioAct_Acum),
                new Tuple<int,int>(8,PR5ConstanteFecha.ValorAnioAct_SemAct),
                new Tuple<int,int>(9,PR5ConstanteFecha.ValorAnio1Ant_SemAct),
                new Tuple<int,int>(10,PR5ConstanteFecha.ValorAnioAct_SemAct_Var)
            };

            var regMDAct = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            var regMDAnt = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            List<ResultadoTotalGeneracion> listaGeneral = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaGeneralTotales = new List<ResultadoTotalGeneracion>();

            foreach (var tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                int iVercnpcodi;
                int itipoResultado = 0;
                Boolean IsGeneracion = true;
                switch (tipoResultado.Item1)
                {
                    case 1:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadHidro;
                        valorCab = string.Format("ENERGÍA PRODUCIDA - HIDROELÉCTRICA|{0}|{1}|{2}|{3}", regMDAct.SemanaFechaDesc, regMDAct.Anio, regMDAct.FechaOnlyDia, regMDAct.FechaOnlyHora);
                        IsGeneracion = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 2:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTermo;
                        valorCab = string.Format("ENERGÍA PRODUCIDA - TERMOELÉCTRICA|{0}|{1}|{2}|{3}", regMDAnt.SemanaFechaDesc, regMDAnt.Anio, regMDAnt.FechaOnlyDia, regMDAnt.FechaOnlyHora);
                        IsGeneracion = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 3:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER;
                        valorCab = string.Format("ENERGÍA PRODUCIDA - RER|{0}|{1}", energiaSemAct, varenergiaSemAct); // Datos resumén texto del 1er cuadro
                        IsGeneracion = true;
                        itipoResultado = tipoResultado.Item2;
                        break;
                    case 4:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadTotalPeriodo;
                        valorCab = "TOTAL - ENERGÍA PRODUCIDA";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        break;
                    case 5:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiEnergiaProgramada;
                        valorCab = "TOTAL ENERGÍA PROGRAMADA";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaEnergProg;
                        listaGeneralTotales = listaTotalEnergProg;
                        break;
                    case 6:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiDesvEjecVsProg;
                        valorCab = "DESV. EJEC/PROG";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        break;
                    case 7:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado;
                        valorCab = "TOTAL ENERGÍA ACUMULADA";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaEnergEjec;
                        listaGeneralTotales = listaTotalEnergEjec;
                        break;
                    case 8:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual;
                        valorCab = "MAX DEMANDA AÑO ACTUAL";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaMDEjec;
                        listaGeneralTotales = listaTotalMDEjec;
                        break;
                    case 9:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior;
                        valorCab = "MAX DEMANDA AÑO ANTERIOR";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaMDEjec;
                        listaGeneralTotales = listaTotalMDEjec;
                        break;
                    case 10:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior;
                        valorCab = "VAR MAX DEMANDA";
                        IsGeneracion = false;
                        itipoResultado = tipoResultado.Item2;
                        listaGeneral = listaMDEjec;
                        listaGeneralTotales = listaTotalMDEjec;
                        break;
                }
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                foreach (var regFila in listaFila)
                {
                    var sVdatdtvalor = string.Empty;

                    if (IsGeneracion)
                    {
                        var listaXTgen = listaTgen.Where(x => x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi).ToList();

                        ResultadoTotalGeneracion regTgeneracion = listaXTgen.Find(x => x.Tgenercodi == itipoResultado);
                        string valorTexto = regTgeneracion.Meditotal != null ? regTgeneracion.Meditotal.ToString().Replace(",", ".") : "";


                        if (regFila.Grupocodi == 0)//total empresa
                        {
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoTotal;
                            sVdatdtvalor = string.Format("{0}|{1}|{2}", valorTexto, regFila.Emprcodi, regFila.Emprnomb);
                        }
                        else
                        {
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                            sVdatdtvalor = string.Format("{0}|{1}|{2}|{3}", valorTexto, regFila.Grupocodi2, regFila.Emprnomb, regFila.Gruponomb);
                        }

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = iVercnpcodi,
                            Vdatdtvalor = sVdatdtvalor,
                            Vdatdtid = regFila.Grupocodi
                        };
                        listaDet.Add(objDet);
                    }
                    else
                    {
                        ResultadoTotalGeneracion registro = listaGeneral.Find(x => x.TipoResultadoFecha == itipoResultado && x.Emprcodi == regFila.Emprcodi && x.Grupocodi == regFila.Grupocodi);
                        string valorTextoTotal = registro.Meditotal != null ? registro.Meditotal.ToString().Replace(",", ".") : "";

                        if (regFila.Grupocodi == 0)//total empresa
                        {
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoTotal;
                            sVdatdtvalor = string.Format("{0}|{1}|{2}", valorTextoTotal, regFila.Emprcodi, regFila.Emprnomb);
                        }
                        else
                        {
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                            sVdatdtvalor = string.Format("{0}|{1}|{2}|{3}", valorTextoTotal, regFila.Grupocodi2, regFila.Emprnomb, regFila.Gruponomb);
                        }

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = iVercnpcodi,
                            Vdatdtvalor = sVdatdtvalor,
                            Vdatdtid = regFila.Grupocodi
                        };
                        listaDet.Add(objDet);
                    }
                }

                //Tipo TOTAL con / sin interconexion               
                var listaTotal = new[] {
                                new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelProdSinTTIE, iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalProduccionElectricidad },
                                new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelProdConTTIE, iiVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales }
                            }.ToList();

                foreach (var regTotal in listaTotal)
                {
                    if (IsGeneracion)
                    {
                        var listaXTgen2 = listaTotalTgen.Where(x => x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd).ToList();
                        ResultadoTotalGeneracion regTgen = listaXTgen2.Find(x => x.Tgenercodi == itipoResultado);
                        string valorTexto = regTgen.Meditotal != null ? regTgen.Meditotal.ToString().Replace(",", ".") : "";

                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = regTotal.iiVercnpcodi,
                            Vdatdtvalor = valorTexto,
                            Vdatdtid = regTotal.TipoSemanaRelProd
                        };
                        listaDet.Add(objDet);
                    }
                    else
                    {
                        ResultadoTotalGeneracion regEnergEjec = listaGeneralTotales.Find(x => x.TipoResultadoFecha == itipoResultado && x.TipoSemanaRelProd == regTotal.TipoSemanaRelProd);
                        string valorTextoTotal = regEnergEjec.Meditotal != null ? regEnergEjec.Meditotal.ToString().Replace(",", ".") : "";

                        //detalle
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = regTotal.iiVercnpcodi,
                            Vdatdtvalor = valorTextoTotal,
                            Vdatdtid = regTotal.TipoSemanaRelProd
                        };
                        listaDet.Add(objDet);
                    }
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region Cuadro 2 y 3

            List<int> listaTipoResultado2 = new List<int>()
            {
                PR5ConstanteFecha.ValorAnioAct_SemAct,
                PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                PR5ConstanteFecha.ValorAnioAct_SemAct_Resta,
                PR5ConstanteFecha.ValorAnioAct_SemAct_Var
            };


            foreach (var tiporesultado2 in listaTipoResultado2)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                switch (tiporesultado2)
                {
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoActual;
                        valorCab = "GENERACIÓN SEMANA ACTUAL";
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnterior;
                        valorCab = "GENERACIÓN SEMANA ANTERIOR";
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct_Resta:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior;
                        valorCab = "VARIACIÓN ENERGÍA";
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionActualVSAnterior;
                        valorCab = "VARIACIÓN %";
                        break;
                }

                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaFilaGen = new[] {
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiHidro, iVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalGeneraciónHidro},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiTermo, iVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalGeneraciónTermo},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiRER, iVercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalGeneraciónRer},
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TgenercodiTotal, iVercnpcodi = ConstantesConceptoVersion.ConceptoTotal},
                                }.ToList();
                //Por tipo de Generación
                foreach (var regFila in listaFilaGen)
                {
                    RegistroReporte registro = new RegistroReporte();
                    List<decimal?> datos = new List<decimal?>();

                    var listaXTgen = listaTgenC2.Where(x => x.TipoSemanaRelProd == regFila.TipoSemanaRelProd).ToList();

                    ResultadoTotalGeneracion regTgen = listaXTgen.Find(x => x.TipoResultadoFecha == tiporesultado2);

                    string valorTexto = regTgen.Meditotal != null ? regTgen.Meditotal.ToString().Replace(",", ".") : "";

                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = regFila.iVercnpcodi,
                        Vdatdtvalor = valorTexto,
                        Vdatdtid = regFila.TipoSemanaRelProd
                    };
                    listaDet.Add(objDet);

                }


                var listaFilaImExp = new[] {
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelImp, iVercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada },
                                    new { TipoSemanaRelProd = ConstantesPR5ReportesServicio.TipoSemanaRelExp, iVercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada }
                                }.ToList();
                //Por tipo de Generación
                foreach (var regFila in listaFilaImExp)
                {
                    RegistroReporte registro = new RegistroReporte();
                    List<decimal?> datos = new List<decimal?>();

                    var listaXTgen = listaTIEC3.Where(x => x.TipoSemanaRelProd == regFila.TipoSemanaRelProd).ToList();

                    ResultadoTotalGeneracion regTotalIExp = listaXTgen.Find(x => x.TipoResultadoFecha == tiporesultado2);
                    string valorTexto = regTotalIExp.Meditotal != null ? regTotalIExp.Meditotal.ToString().Replace(",", ".") : "";

                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = regFila.iVercnpcodi,
                        Vdatdtvalor = valorTexto,
                        Vdatdtid = regFila.TipoSemanaRelProd
                    };
                    listaDet.Add(objDet);
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalMaximaDemandaTipoGeneracion(FechasPR5 objFecha)
        {
            //datos
            this.CargarReporteMaximaDemandaTipoGeneracionInfSem(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData, out List<ResultadoTotalGeneracion> listaMDPotGenData,
            out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData, out List<ResultadoTotalGeneracion> listaMDTotalData, out List<SiTipogeneracionDTO> listaTgeneracion, out List<ResultadoTotalGeneracion> listaTgeneracionData,
            out List<MeMedicion48DTO> listaXRecursosEnergeticosData, out List<ResultadoTotalGeneracion> listaMDVarSemanalData, out List<ResultadoTotalGeneracion> listaMDSemanalSinInterconexion);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<int> listaTipoResultado = new List<int>() {
            PR5ConstanteFecha.ValorAnioAct_Sem2Ant,
            PR5ConstanteFecha.ValorAnioAct_Sem1Ant,
            PR5ConstanteFecha.ValorAnioAct_SemAct,
            PR5ConstanteFecha.ValorAnio1Ant_SemAct,
            PR5ConstanteFecha.ValorAnioAct_Total_Var, //5
            PR5ConstanteFecha.ValorAnioAct_Acum,
            PR5ConstanteFecha.ValorAnio1Ant_Acum,
            PR5ConstanteFecha.ValorAnioAct_Acum_Var,//8
            PR5ConstanteFecha.ValorAnio2Ant_Acum,
            PR5ConstanteFecha.ValorAnio1Ant_Acum_Var//10
            };

            foreach (int tipoResultado in listaTipoResultado)
            {
                string valorCab = string.Empty;
                int codigoConcepto = 0;
                bool IsVariacion = true;
                int iTipoResultado = 0;
                string valorCab2 = string.Empty;


                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_Sem2Ant:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoPrecAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).FechaOnlyDia,
                                                    listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Sem1Ant:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoActual;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPeriodoAnioAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Total_Var: //5
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnioAnterior;
                        valorCab = "Var(%)";
                        IsVariacion = true;
                        iTipoResultado = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum_Var://8
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionActualvsAnterior;
                        valorCab = string.Format("{0}|{1}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
                        IsVariacion = true;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaPrecAnioAnterior;
                        valorCab = string.Format("{0}|{1}|{2}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia,
                                                listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora);
                        IsVariacion = false;
                        iTipoResultado = tipoResultado;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum_Var://10
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacionAnteriorvsPrecedeAnterior;
                        valorCab = string.Format("{0}|{1}", listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc, listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum).SemanaFechaDesc);
                        IsVariacion = true;
                        iTipoResultado = tipoResultado;
                        break;
                }

                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                // tipo de generación
                foreach (var tgen in listaTgeneracion)
                {
                    var listaXTgen = listaMDTgeneracionData.Where(x => x.Tgenercodi == tgen.Tgenercodi).ToList();


                    ResultadoTotalGeneracion regProdGenxTg = listaXTgen.Find(x => x.TipoResultadoFecha == iTipoResultado);

                    //valor 01
                    string valorTexto = regProdGenxTg.Meditotal != null ? regProdGenxTg.Meditotal.ToString().Replace(",", ".") : "";

                    string sValor = string.Empty;

                    if (IsVariacion)
                    {
                        sValor = valorTexto;
                    }
                    else
                    {
                        string vatosFechaIni = regProdGenxTg.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regProdGenxTg.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaMD = regProdGenxTg.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull);
                        sValor = string.Format("{0}|{1}|{2}|{3}|{4}", valorTexto, tgen.Tgenernomb, vatosFechaIni, DatosFechaFin, DatosFechaMD);
                    }

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tgen.Tgenercodi
                    };
                    listaDet.Add(objDet);
                }

                //Potencia generada en el  SEIN
                ResultadoTotalGeneracion regProdGenAnio = listaMDPotGenData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoTG = regProdGenAnio.Meditotal != null ? regProdGenAnio.Meditotal.ToString().Replace(",", ".") : "";


                var objDetTG = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTextoTG,
                };
                listaDet.Add(objDetTG);

                //Tipo de interconexion
                var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada},
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada}
                                }.ToList();

                foreach (var tinter in listaTinter)
                {
                    var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                    //int itipoResultado = tipoResultado == PR5ConstanteFecha.ValorAnioAct_Total_Var ? PR5ConstanteFecha.ValorAnioAct_SemAct_Var : tipoResultado;


                    ResultadoTotalGeneracion regInterAnio = listaXTipoInter.Find(x => x.TipoResultadoFecha == iTipoResultado);

                    string valorTextoIO = regInterAnio.Meditotal != null ? regInterAnio.Meditotal.ToString().Replace(",", ".") : "";

                    string sValor = string.Empty;

                    if (IsVariacion)
                    {
                        sValor = valorTextoIO;
                    }
                    else
                    {
                        string DatosFechaIni = regInterAnio.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regInterAnio.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaMD = regInterAnio.FiltroCeldaDato.FechaMD.ToString(ConstantesAppServicio.FormatoFechaFull);
                        sValor = string.Format("{0}|{1}|{2}|{3}|{4}", valorTextoIO, tinter.Nombre, DatosFechaIni, DatosFechaFin, DatosFechaMD);
                    }

                    var objDetIO = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = tinter.iVercnpcodi,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tinter.Tptomedicodi
                    };
                    listaDet.Add(objDetIO);
                }

                //Intercambios Internacionales               
                ResultadoTotalGeneracion regInterTotalAnio = listaInterTotalData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoIInt = regInterTotalAnio.Meditotal != null ? regInterTotalAnio.Meditotal.ToString().Replace(",", ".") : "";

                var objDetIInt = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales,
                    Vdatdtvalor = valorTextoIInt,
                };
                listaDet.Add(objDetIInt);

                //Total Máxima Demanda
                ResultadoTotalGeneracion regMDTotal = listaMDTotalData.Find(x => x.TipoResultadoFecha == iTipoResultado);

                string valorTextoMD = regMDTotal.Meditotal != null ? regMDTotal.Meditotal.ToString().Replace(",", ".") : "";

                var objDetMD = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorSemanaMaximaDemanda,
                    Vdatdtvalor = valorTextoMD,
                };
                listaDet.Add(objDetMD);


                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region llenar datos Gráfico Barras Comparacion MDxTgeneracion

            List<int> listaTipoResultado2 = new List<int>() {
                PR5ConstanteFecha.ValorAnio2Ant_SemAct,
                PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                PR5ConstanteFecha.ValorAnioAct_SemAct
                };
            List<SiVersionDatdetDTO> listaDetGraf = new List<SiVersionDatdetDTO>();

            foreach (var cat in listaTgeneracion)
            {
                var lista = listaTgeneracionData.Where(x => x.Tgenercodi == cat.Tgenercodi).OrderBy(x => x.Medifecha).ToList();

                foreach (var tipoResultado2 in listaTipoResultado2)
                {
                    int iVercnpcodi = 0;
                    switch (tipoResultado2)
                    {
                        case PR5ConstanteFecha.ValorAnio2Ant_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior;
                            break;
                        case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior;
                            break;
                        case PR5ConstanteFecha.ValorAnioAct_SemAct:
                            iVercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual;
                            break;
                    }

                    var regAnio = lista.Find(x => x.TipoResultadoFecha == tipoResultado2);
                    decimal? h = regAnio != null ? regAnio.Meditotal : null;

                    string valorTexto = h != null ? h.ToString().Replace(",", ".") : "";
                    string DatValor = string.Format("{0}|{1}|{2}", valorTexto, cat.Tgenernomb, cat.Tgenercolor);

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iVercnpcodi,
                        Vdatdtvalor = DatValor,
                        Vdatdtid = cat.Tgenercodi,
                        Vdatdtfecha = regAnio.Medifecha

                    };
                    listaDetGraf.Add(objDet);
                }
            }


            //cabecera
            SiVersionDatDTO objDatCMD = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoComparacionMaximaDemanda,
                Verdatvalor = "Datos Gráfico Comparación Max Demanda",
                ListaDetalle = listaDetGraf
            };
            listaDat.Add(objDatCMD);

            #endregion

            #region llenar datos Gráfico Diagrama Carga Despacho

            List<MeMedicion48DTO> listaReporte = listaXRecursosEnergeticosData.OrderByDescending(x => x.Orden).ToList();
            decimal total = listaReporte.Sum(x => x.Meditotal.GetValueOrDefault(0));

            List<SiVersionDatdetDTO> listaDetGraf02 = new List<SiVersionDatdetDTO>();


            foreach (var item in listaReporte)
            {

                RegistroSerie regSerie = new RegistroSerie();
                regSerie.Name = item.Fenergnomb;
                string Color = item.Fenercolor;
                decimal? Porcentaje = total > 0 ? item.Meditotal.GetValueOrDefault(0) / total : 0;
                string valorTextoPorc = Porcentaje != null ? Porcentaje.ToString().Replace(",", ".") : "";


                string sValor = string.Format("{0}|{1}|{2}|{3}", valorTextoPorc, item.Fenergnomb, item.Fenercolor, item.Orden);

                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = sValor,
                    Vdatdtid = item.Fenergcodi,
                };
                listaDetGraf02.Add(objDet);

                for (var j = 1; j <= 48; j++)
                {
                    decimal? valor = (decimal?)item.GetType().GetProperty(ConstantesAppServicio.CaracterH + j).GetValue(item, null);
                    string valorTexto = valor != null ? valor.ToString().Replace(",", ".") : "";
                    string sValor2 = string.Format("{0}|{1}", valorTexto, j);
                    var objDetG = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = sValor2,
                        Vdatdtid = item.Fenergcodi,
                    };
                    listaDetGraf02.Add(objDetG);
                }
            }

            //cabecera
            SiVersionDatDTO objDatGMD = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoCargaDespacho,
                Verdatvalor = "Datos Gráfico Diagrama Carga Despacho",
                ListaDetalle = listaDetGraf02
            };
            listaDat.Add(objDatGMD);

            #endregion

            #region LLenar datos Gráfico Máxima Demanda y Variación Semanal                     

            List<string> listaSemana = new List<string>();
            for (int numSemana = 1; numSemana <= 53; numSemana++)
            {
                listaSemana.Add(numSemana.ToString());
            }

            List<int> listaTipoResultado3 = new List<int>() {
                    PR5ConstanteFecha.ValorAnioAct_Acum,
                    PR5ConstanteFecha.ValorAnio1Ant_Acum_Var,
                    PR5ConstanteFecha.ValorAnioAct_Acum_Var
                    };

            List<SiVersionDatdetDTO> listaDetGraf03 = new List<SiVersionDatdetDTO>();

            foreach (var tipoResultado3 in listaTipoResultado3)
            {
                DateTime fIniAnioActual = new DateTime(objFecha.AnioAct.Sem01_FechaIni.Year, objFecha.AnioAct.Sem01_FechaIni.Month, objFecha.AnioAct.Sem01_FechaIni.Day).Date;

                for (int numSemana = 1; numSemana <= listaSemana.Count; numSemana++)
                {
                    List<ResultadoTotalGeneracion> listaXSem = listaMDVarSemanalData.Where(x => x.Medifecha == fIniAnioActual).ToList();

                    ResultadoTotalGeneracion reg = listaXSem.Find(x => x.TipoResultadoFecha == tipoResultado3 && x.Medifecha.Date == fIniAnioActual);
                    string valorTexto = String.Empty;
                    if (reg != null)
                    {
                        valorTexto = reg.Meditotal != null ? reg.Meditotal.ToString().Replace(",", ".") : "";
                    }

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = valorTexto,
                        Vdatdtid = tipoResultado3,
                        Vdatdtfecha = fIniAnioActual
                    };
                    listaDetGraf03.Add(objDet);
                    fIniAnioActual = fIniAnioActual.AddDays(7);
                }
            }

            //cabecera
            SiVersionDatDTO objDatMDVS = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoMaximaDemandaVariacionSem,
                Verdatvalor = "Datos Gráfico Máxima Demanda y Variación Semanal",
                ListaDetalle = listaDetGraf03
            };
            listaDat.Add(objDatMDVS);

            #endregion

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal)
            {
                #region LLenar datos Gráfico Máxima Demanda sin Exportación a Ecuador                

                List<int> listaTipoResultado4 = new List<int>() {
                    PR5ConstanteFecha.ValorAnio3Ant_SemAct,
                    PR5ConstanteFecha.ValorAnio2Ant_SemAct,
                    PR5ConstanteFecha.ValorAnio1Ant_SemAct,
                    PR5ConstanteFecha.ValorAnioAct_SemAct
                    };

                List<SiVersionDatdetDTO> listaDetGraf04 = new List<SiVersionDatdetDTO>();

                foreach (var tipoResultado4 in listaTipoResultado4)
                {
                    DateTime fIniAnioActual = new DateTime(objFecha.AnioAct.Sem01_FechaIni.Year, objFecha.AnioAct.Sem01_FechaIni.Month, objFecha.AnioAct.Sem01_FechaIni.Day).Date;

                    for (int numSemana = 1; numSemana <= listaSemana.Count; numSemana++)
                    {

                        List<ResultadoTotalGeneracion> listaXSem = listaMDSemanalSinInterconexion.Where(x => x.Medifecha.Date == fIniAnioActual).ToList();

                        ResultadoTotalGeneracion reg = listaXSem.Find(x => x.TipoResultadoFecha == tipoResultado4 && x.Medifecha.Date == fIniAnioActual);
                        string valorTexto = String.Empty;
                        if (reg != null)
                        {
                            valorTexto = reg.Meditotal != null ? reg.Meditotal.ToString().Replace(",", ".") : "";
                        }

                        var objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                            Vdatdtvalor = valorTexto,
                            Vdatdtid = tipoResultado4,
                            Vdatdtfecha = fIniAnioActual
                        };
                        listaDetGraf04.Add(objDet);
                        fIniAnioActual = fIniAnioActual.AddDays(7);
                    }
                }

                //cabecera
                SiVersionDatDTO objDatMDEE = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoMdsExpEcuador,
                    Verdatvalor = "Datos Máxima Demanda sin Exportación a Ecuador",
                    ListaDetalle = listaDetGraf04
                };
                listaDat.Add(objDatMDEE);

                #endregion
            }


            return listaDat;
        }

        /// <summary>
        /// ListarDatSemanalIngresoOpComercSEIN
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="tipoOperacion"></param>
        /// <returns></returns>
        public List<SiVersionDatDTO> ListarDatSemanalIngresoOpComercSEIN(FechasPR5 objFecha, int tipoOperacion)
        {
            //datos            
            CargarReporteIngresoOperacionSem(objFecha, tipoOperacion, out List<OperacionComercialSein> lstData);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            int iVercnpcodi = 0;
            if (tipoOperacion == (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso)
            {
                iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiIngresoOperaciónComercial;
            }
            else
            {
                iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiRetiroOperaciónComercial;
            }


            foreach (var objEmp in lstData)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                string strFecha = objEmp.FechaOperacion != null ? objEmp.FechaOperacion?.ToString(ConstantesAppServicio.FormatoFecha) : "";
                string valorTension = objEmp.Tension != null ? objEmp.Tension.ToString().Replace(",", ".") : "";
                string valorPotEfectiva = objEmp.PotEfectiva != null ? objEmp.PotEfectiva.ToString().Replace(",", ".") : "";
                string valorPotInstalada = objEmp.PotInstalada != null ? objEmp.PotInstalada.ToString().Replace(",", ".") : "";
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = iVercnpcodi,
                    Verdatvalor = string.Format("{0}|{1}|{2}|{3}|{4}|{5}", objEmp.Empresa, objEmp.Generacion, objEmp.Recurso, objEmp.Tecnologia, objEmp.Central, objEmp.Unidades),
                    Verdatvalor2 = string.Format("{0}|{1}|{2}|{3}", valorTension, valorPotEfectiva, valorPotInstalada, strFecha),
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        public List<SiVersionDatDTO> ListarDatSemanalVolumenUtil(FechasPR5 objFecha, int mrepcodi)
        {
            //datos
            ListarDataCuadroVolumenUtilSemanal(objFecha, mrepcodi, out List<MeReporptomedDTO> lstRepPtoEmbalsesLagunas, out List<ResultadoTotalGeneracion> listaDataXPto);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            foreach (var objPtoEmb in lstRepPtoEmbalsesLagunas)
            {
                //detalle1
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var regSemIni = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaInicial && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                string valorTexto = regSemIni != null ? regSemIni.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoVolumenUtilSemanaInicio,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);

                var regSemIniVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaInicial_Var && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = regSemIniVar != null ? regSemIniVar.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoPorcentajeLenadoInicioSemana,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);
                var regSemFin = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaFinal && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = regSemFin != null ? regSemFin.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoVolumenUtilSemanaFin,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);
                var regSemFinVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_FechaFinal_Var && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = regSemFinVar != null ? regSemFinVar.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoPorcentajeLenadoFinSemana,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);
                var regSemCap = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = regSemCap != null ? regSemCap.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCapacidadLagunaEmbalse,
                    Vdatdtvalor = valorTexto

                };
                listaDet.Add(objDet);
                //cabecera2
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoAnioActualVolUtil,
                    Verdatvalor = objPtoEmb.Repptonomb,
                    Verdatid = objPtoEmb.Ptomedicodi,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);

                //detalle2
                List<SiVersionDatdetDTO> listaDet2 = new List<SiVersionDatdetDTO>();

                var reg1AntIni = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaInicial && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = reg1AntIni != null ? reg1AntIni.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoVolumenUtilSemanaInicio,
                    Vdatdtvalor = valorTexto
                };
                listaDet2.Add(objDet);
                var reg1AntIniVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaInicial_Var && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = reg1AntIniVar != null ? reg1AntIniVar.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoPorcentajeLenadoInicioSemana,
                    Vdatdtvalor = valorTexto
                };
                listaDet2.Add(objDet);
                var reg1AntFin = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaFinal && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = reg1AntFin != null ? reg1AntFin.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoVolumenUtilSemanaFin,
                    Vdatdtvalor = valorTexto
                };
                listaDet2.Add(objDet);
                var reg1AntFinVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_FechaFinal_Var && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = reg1AntFinVar != null ? reg1AntFinVar.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoPorcentajeLenadoFinSemana,
                    Vdatdtvalor = valorTexto
                };
                listaDet2.Add(objDet);
                var reg1AntCap = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Total && x.Ptomedicodi == objPtoEmb.Ptomedicodi);
                valorTexto = reg1AntCap != null ? reg1AntCap.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCapacidadLagunaEmbalse,
                    Vdatdtvalor = valorTexto
                };
                listaDet2.Add(objDet);

                //cabecera2
                SiVersionDatDTO objDat2 = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoAnioAnteriorVolUtil,
                    Verdatvalor = objPtoEmb.Repptonomb,
                    Verdatid = objPtoEmb.Ptomedicodi,
                    ListaDetalle = listaDet2
                };
                listaDat.Add(objDat2);
            }

            return listaDat;
        }

        /// <summary>
        /// ListarDatSemanalEvolucionVolumenUtil
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="mrepcodi"></param>
        /// <returns></returns>
        public List<SiVersionDatDTO> ListarDatSemanalEvolucionVolumenUtil(FechasPR5 objFecha, int mrepcodi)
        {
            //datos
            ListarDataEvolucionVolumenUtilSemanal(objFecha, out List<GraficoWeb> listaGrafico, out List<MeMedicion1DTO> listDataEmbalsesAll, mrepcodi);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            foreach (var objRpt in listaGrafico)
            {
                var listDataEmbalses = listDataEmbalsesAll.Where(x => x.Reporcodi == objRpt.IdGrafico).ToList();
                //detalle
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                foreach (var objPto in listDataEmbalses)
                {
                    string valorTexto = objPto.H1 != null ? objPto.H1.ToString().Replace(",", ".") : "";
                    DateTime fSemIni = objPto.Medifecha;

                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtfecha = fSemIni,
                        Vdatdtvalor = valorTexto
                    };

                    listaDet.Add(objDet);
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiEmbalseyLaguna,
                    Verdatid = objRpt.IdGrafico,
                    Verdatvalor = objRpt.TitleText,
                    ListaDetalle = listaDet,
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalProdTipoGen(FechasPR5 objFecha)
        {
            //datos
            CargarReporteProduccionXTgeneracionInfSem(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaMDTgeneracionData,
                                                                    out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData,
                                                                    out List<ResultadoTotalGeneracion> listaInterTotalData, out List<SiTipogeneracionDTO> listaTgeneracion,
                                                                    out List<ResultadoTotalGeneracion> listaEvolucionSemanal,
                                                                    out List<ResultadoTotalGeneracion> listaEnergiaYVarAnualData);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<int> listaTipoResultado = new List<int>() {
            PR5ConstanteFecha.ValorAnio3Ant_SemAct,
            PR5ConstanteFecha.ValorAnio2Ant_SemAct,
            PR5ConstanteFecha.ValorAnioAct_SemAct,
            PR5ConstanteFecha.ValorAnio1Ant_SemAct,
            PR5ConstanteFecha.ValorAnioAct_Total_Var,
            PR5ConstanteFecha.ValorAnioAct_Acum,
            PR5ConstanteFecha.ValorAnio1Ant_Acum,
            PR5ConstanteFecha.ValorAnioAct_Acum_Var,
            PR5ConstanteFecha.ValorAnio2Ant_Acum,
            PR5ConstanteFecha.ValorAnio1Ant_Acum_Var
            };

            foreach (int tipoResultado in listaTipoResultado)
            {
                string valorCab = string.Empty;
                int codigoConcepto = 0;
                bool IsVariacion = true;

                string valorCab2 = string.Empty;


                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnio3Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnteriorPrecAnterior;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Sem operativa {0} - {1}", objFecha.AnioAct.RangoAct_Num, valorCab2);
                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoPrecAnterior;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Sem operativa {0} - {1}", objFecha.AnioAct.RangoAct_Num, valorCab2);
                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoAnterior;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Sem operativa {0} - {1}", objFecha.AnioAct.RangoAct_Num, valorCab2);
                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionPeriodoActual;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Sem operativa año ant - {0}", valorCab2);
                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Total_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiProdTipoGeneracionVariacionPeriodoAnterior;
                        valorCab2 = "Var(%)";
                        valorCab = string.Format("Sem operativa año ant - {0}", valorCab2);
                        IsVariacion = true;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoActual;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Gener Acum del 01 de enero al {0} de {1} - {2}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), valorCab2);
                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoAnterior;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Gener Acum del 01 de enero al {0} de {1} - {2}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), valorCab2);
                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Acum_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionActualVSAnterior;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Gener Acum del 01 de enero al {0} de {1} - {2}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), valorCab2);
                        IsVariacion = true;
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_Acum:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaPeriodoPrecAnterior;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Gener Acum del 01 de enero al {0} de {1} - {2}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), valorCab2);
                        IsVariacion = false;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Acum_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiGeneracionAcumuladaVariacionAnteriorVSPrecedeAnterior;
                        valorCab2 = listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == tipoResultado).SemanaFechaDesc;
                        valorCab = string.Format("Gener Acum del 01 de enero al {0} de {1} - {2}", objFecha.AnioAct.RangoAct_FechaFin.Day.ToString("D2"), EPDate.f_NombreMes(objFecha.AnioAct.RangoAct_FechaFin.Month), valorCab2);
                        IsVariacion = true;
                        break;
                }

                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                // tipo de generación
                foreach (var tgen in listaTgeneracion)
                {
                    var listaXTgen = listaMDTgeneracionData.Where(x => x.Tgenercodi == tgen.Tgenercodi).ToList();

                    ResultadoTotalGeneracion regProdGenxTg = listaXTgen.Find(x => x.TipoResultadoFecha == tipoResultado);

                    //valor 01
                    string valorTexto = regProdGenxTg.Meditotal != null ? regProdGenxTg.Meditotal.ToString().Replace(",", ".") : "";

                    string sValor = string.Empty;


                    if (IsVariacion)
                    {
                        sValor = valorTexto;
                    }
                    else
                    {
                        string vatosFechaIni = regProdGenxTg.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regProdGenxTg.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        sValor = string.Format("{0}|{1}|{2}|{3}", valorTexto, tgen.Tgenernomb, vatosFechaIni, DatosFechaFin);
                    }

                    var objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tgen.Tgenercodi
                    };
                    listaDet.Add(objDet);
                }

                //Potencia generada en el  SEIN
                ResultadoTotalGeneracion regProdGenAnio = listaMDPotGenData.Find(x => x.TipoResultadoFecha == tipoResultado);
                string valorTextoTG = regProdGenAnio.Meditotal != null ? regProdGenAnio.Meditotal.ToString().Replace(",", ".") : "";


                var objDetTG = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTextoTG,
                };
                listaDet.Add(objDetTG);

                //Tipo de interconexion
                var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada},
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" , iVercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada}
                                }.ToList();

                foreach (var tinter in listaTinter)
                {
                    var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                    int itipoResultado = tipoResultado == PR5ConstanteFecha.ValorAnioAct_Total_Var ? PR5ConstanteFecha.ValorAnioAct_SemAct_Var : tipoResultado;


                    ResultadoTotalGeneracion regInterAnio = listaXTipoInter.Find(x => x.TipoResultadoFecha == itipoResultado);

                    string valorTextoIO = regInterAnio.Meditotal != null ? regInterAnio.Meditotal.ToString().Replace(",", ".") : "";

                    string sValor = string.Empty;

                    if (IsVariacion)
                    {
                        sValor = valorTextoIO;
                    }
                    else
                    {
                        string vatosFechaIni = regInterAnio.FiltroCeldaDato.FechaIni.ToString(ConstantesAppServicio.FormatoFecha);
                        string DatosFechaFin = regInterAnio.FiltroCeldaDato.FechaFin.ToString(ConstantesAppServicio.FormatoFecha);
                        sValor = string.Format("{0}|{1}|{2}|{3}", valorTextoIO, tinter.Nombre, vatosFechaIni, DatosFechaFin);
                    }

                    var objDetIO = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = tinter.iVercnpcodi,
                        Vdatdtvalor = sValor,
                        Vdatdtid = tinter.Tptomedicodi
                    };
                    listaDet.Add(objDetIO);
                }

                //Intercambios Internacionales

                int iitipoResultado = tipoResultado == PR5ConstanteFecha.ValorAnioAct_Total_Var ? PR5ConstanteFecha.ValorAnioAct_SemAct_Var : tipoResultado;

                ResultadoTotalGeneracion regInterTotalAnio = listaInterTotalData.Find(x => x.TipoResultadoFecha == iitipoResultado);
                string valorTextoIInt = regInterTotalAnio.Meditotal != null ? regInterTotalAnio.Meditotal.ToString().Replace(",", ".") : "";

                var objDetIInt = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTotalIntercambiosInternacionales,
                    Vdatdtvalor = valorTextoIInt,
                };
                listaDet.Add(objDetIInt);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    Verdatvalor2 = valorCab2,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal)
            {
                #region llenar datos gráfico Evolución semanal

                List<string> listaAnio = new List<string>();
                listaAnio.Add(listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum).SemanaFechaDesc);
                listaAnio.Add(listaTotalMaximaDemadaDesc.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum).SemanaFechaDesc);

                int nroSemanasAnioAnterior = EPDate.TotalSemanasEnAnho(Int32.Parse(listaAnio[0]), 6);
                int nroSemanasAnioActual = EPDate.TotalSemanasEnAnho(Int32.Parse(listaAnio[1]), 6);
                List<int> listaTipoResultado2 = new List<int>() {
                PR5ConstanteFecha.ValorAnioAct_SemAct2,
                PR5ConstanteFecha.ValorAnioAct_SemAct,
                PR5ConstanteFecha.ValorAnioAct_SemAct_Desv,
                PR5ConstanteFecha.ValorAnioAct_Acum_Var
                };
                List<SiVersionDatdetDTO> listaDetGraf = new List<SiVersionDatdetDTO>();

                foreach (var tipoResultado2 in listaTipoResultado2)
                {
                    List<ResultadoTotalGeneracion> listaXTipo = listaEvolucionSemanal.Where(x => x.TipoResultadoFecha == tipoResultado2).ToList();
                    var ultimaSemanaAnioActual = EPDate.f_numerosemana(objFecha.AnioAct.RangoAct_FechaFin);
                    int numSemanasGrafico = nroSemanasAnioAnterior + ultimaSemanaAnioActual;
                    var day = objFecha.Anio1Ant.Sem01_FechaIni;
                    for (var j = 1; j <= numSemanasGrafico; j++)
                    {
                        ResultadoTotalGeneracion regData = listaXTipo.Find(x => x.Medifecha == day);

                        string valorTexto = regData.Meditotal != null ? regData.Meditotal.ToString().Replace(",", ".") : "";
                        var objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                            Vdatdtvalor = valorTexto,
                            Vdatdtid = tipoResultado2,
                            Vdatdtfecha = day
                        };
                        listaDetGraf.Add(objDet);
                        day = day.AddDays(7);
                    }

                }

                //cabecera
                SiVersionDatDTO objDatEvolSem = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia,
                    Verdatvalor = "Datos Gráfico Evol Semanal",
                    ListaDetalle = listaDetGraf
                };
                listaDat.Add(objDatEvolSem);

                #endregion
            }
            else // Ejecutivo semanal
            {
                #region llenar datos gráfico Producción Semanal y Variación Anual


                List<int> listaTipoResultado3 = new List<int>() {
                PR5ConstanteFecha.ValorAnioAct_Acum,
                PR5ConstanteFecha.ValorAnioAct_Acum_Var,
                PR5ConstanteFecha.ValorAnio1Ant_Acum_Var
                };

                List<string> listaSemana = new List<string>();
                int numSemanasAnio = EPDate.TotalSemanasEnAnho(EPDate.f_numerosemana_y_anho(objFecha.AnioAct.Sem01_FechaIni).Item2, 6);
                for (int numSemana = 1; numSemana <= numSemanasAnio; numSemana++)
                {
                    listaSemana.Add(numSemana.ToString());
                }

                List<SiVersionDatdetDTO> listaDetGraf = new List<SiVersionDatdetDTO>();

                foreach (var tipoResultado3 in listaTipoResultado3)
                {
                    DateTime fIniAnioActual = new DateTime(objFecha.AnioAct.Sem01_FechaIni.Year, objFecha.AnioAct.Sem01_FechaIni.Month, objFecha.AnioAct.Sem01_FechaIni.Day).Date;


                    for (int numSemana = 1; numSemana <= listaSemana.Count; numSemana++)
                    {
                        List<ResultadoTotalGeneracion> listaXSem = listaEnergiaYVarAnualData.Where(x => x.Medifecha == fIniAnioActual).ToList();

                        ResultadoTotalGeneracion reg = listaXSem.Find(x => x.TipoResultadoFecha == tipoResultado3 && x.Medifecha.Date == fIniAnioActual);
                        string valorTexto = string.Empty;
                        if (reg != null)
                        {
                            valorTexto = reg.Meditotal != null ? reg.Meditotal.ToString().Replace(",", ".") : "";
                        }

                        var objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                            Vdatdtvalor = valorTexto,
                            Vdatdtid = tipoResultado3,
                            Vdatdtfecha = fIniAnioActual
                        };
                        listaDetGraf.Add(objDet);
                        fIniAnioActual = fIniAnioActual.AddDays(7);
                    }


                }

                //cabecera
                SiVersionDatDTO objDatEvolSem = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoProdSemVariacionAnual,
                    Verdatvalor = "Datos Gráfico Prod Semanal y Var Anual",
                    ListaDetalle = listaDetGraf
                };
                listaDat.Add(objDatEvolSem);

                #endregion
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalProduccionRecurso(FechasPR5 objFecha)
        {
            //datos
            ListarDataProduccionXTipoRecursoEnergetico(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc, out List<ResultadoTotalGeneracion> listaMDTipoRecursoEnergeticoData,
            out List<ResultadoTotalGeneracion> listaMDPotGenData, out List<ResultadoTotalGeneracion> listaInterTipoData, out List<ResultadoTotalGeneracion> listaInterTotalData,
            out List<SiFuenteenergiaDTO> listaFenergCuadro,

            out List<ResultadoTotalGeneracion> listaEvolucionSemanal, out List<SiFuenteenergiaDTO> listaFenergEvolucion,
            out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosYRer, out List<ResultadoTotalGeneracion> listaEvolucionSemanalEjecutivo,
            out List<SiFuenteenergiaDTO> listaFenergEvolucionEjec, out List<ResultadoTotalGeneracion> listaParticipacionRecursosEnergeticosEjec);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var regFE in listaFenergCuadro)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaXFe = listaMDTipoRecursoEnergeticoData.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();

                ResultadoTotalGeneracion regProdGenXFeAnio3 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenXFeAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeTotalVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcum1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                //valor 01
                string valorTexto = regProdGenXFeAnio3.Meditotal != null ? regProdGenXFeAnio3.Meditotal.ToString().Replace(",", ".") : "";
                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio3.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 02
                valorTexto = regProdGenXFeAnio2.Meditotal != null ? regProdGenXFeAnio2.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio2.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 03
                valorTexto = regProdGenXFeAnio0.Meditotal != null ? regProdGenXFeAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 04
                valorTexto = regProdGenXFeAnio1.Meditotal != null ? regProdGenXFeAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 05
                valorTexto = regProdGenXFeTotalVarAnio0.Meditotal != null ? regProdGenXFeTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeTotalVarAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 06
                valorTexto = regProdGenXFeAcum0.Meditotal != null ? regProdGenXFeAcum0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 07
                valorTexto = regProdGenXFeAcum1.Meditotal != null ? regProdGenXFeAcum1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 08
                valorTexto = regProdGenXFeAcumVarAnio0.Meditotal != null ? regProdGenXFeAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcumVarAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 09
                valorTexto = regProdGenXFeAcum2.Meditotal != null ? regProdGenXFeAcum2.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum2.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 10
                valorTexto = regProdGenXFeAcumVarAnio1.Meditotal != null ? regProdGenXFeAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcumVarAnio1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                    Verdatid = regFE.Fenergcodi,
                    Verdatvalor = regFE.Fenergnomb,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region Potencia generada en el  SEIN

            List<SiVersionDatdetDTO> listaDetPsein = new List<SiVersionDatdetDTO>();

            ResultadoTotalGeneracion regProdGenAnio3 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio2 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regProdGenAnio1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

            ResultadoTotalGeneracion regProdGenAcum0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regProdGenAcum1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regProdGenAcum2 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = listaMDPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            //valor 01
            string valorTextoPSein = regProdGenAnio3.Meditotal != null ? regProdGenAnio3.Meditotal.ToString().Replace(",", ".") : "";
            var objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio3.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 02
            valorTextoPSein = regProdGenAnio2.Meditotal != null ? regProdGenAnio2.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio2.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 03
            valorTextoPSein = regProdGenAnio0.Meditotal != null ? regProdGenAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 04
            valorTextoPSein = regProdGenAnio1.Meditotal != null ? regProdGenAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 05
            valorTextoPSein = regProdGenTotalVarAnio0.Meditotal != null ? regProdGenTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenTotalVarAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 06
            valorTextoPSein = regProdGenAcum0.Meditotal != null ? regProdGenAcum0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 07
            valorTextoPSein = regProdGenAcum1.Meditotal != null ? regProdGenAcum1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 08
            valorTextoPSein = regProdGenAcumVarAnio0.Meditotal != null ? regProdGenAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcumVarAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 09
            valorTextoPSein = regProdGenAcum2.Meditotal != null ? regProdGenAcum2.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum2.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 10
            valorTextoPSein = regProdGenAcumVarAnio1.Meditotal != null ? regProdGenAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcumVarAnio1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //cabecera
            SiVersionDatDTO objDatPsein = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Potencia generada en el SEIN",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual,
                ListaDetalle = listaDetPsein
            };
            listaDat.Add(objDatPsein);

            #endregion

            #region LISTA IMPORTACIONES Y EXPORTACIONES

            //Tipo de interconexion
            var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" },
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" }
                                }.ToList();

            foreach (var tinter in listaTinter)
            {
                List<SiVersionDatdetDTO> listaDetTipInter = new List<SiVersionDatdetDTO>();

                var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                ResultadoTotalGeneracion regInterAnio3 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regInterAnio2 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regInterAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regInterAnio1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regInterTotalVarAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regInterAcum0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regInterAcum1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regInterAcumVarAnio0 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regInterAcum2 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regInterAcumVarAnio1 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                //valor 01
                string valorTextoTipInter = regInterAnio3.Meditotal != null ? regInterAnio3.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAnio3.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAnio3.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAnio3.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAnio3.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 02
                valorTextoTipInter = regInterAnio2.Meditotal != null ? regInterAnio2.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAnio2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAnio2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAnio2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAnio2.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 03
                valorTextoTipInter = regInterAnio0.Meditotal != null ? regInterAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAnio0.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 04
                valorTextoTipInter = regInterAnio1.Meditotal != null ? regInterAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAnio1.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 05
                valorTextoTipInter = regInterTotalVarAnio0.Meditotal != null ? regInterTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterTotalVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterTotalVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterTotalVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterTotalVarAnio0.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 06
                valorTextoTipInter = regInterAcum0.Meditotal != null ? regInterAcum0.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcum0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcum0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcum0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcum0.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 07
                valorTextoTipInter = regInterAcum1.Meditotal != null ? regInterAcum1.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcum1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcum1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcum1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcum1.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 08
                valorTextoTipInter = regInterAcumVarAnio0.Meditotal != null ? regInterAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcumVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcumVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcumVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcumVarAnio0.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 09
                valorTextoTipInter = regInterAcum2.Meditotal != null ? regInterAcum2.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcum2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcum2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcum2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcum2.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 10
                valorTextoTipInter = regInterAcumVarAnio1.Meditotal != null ? regInterAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoTipInter + "|" + regInterAcumVarAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha)
                    + "|" + regInterAcumVarAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regInterAcumVarAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regInterAcumVarAnio1.TipoResultadoFecha
                };
                listaDetTipInter.Add(objDetTipInter);


                //cabecera
                SiVersionDatDTO objDatTipInter = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                    Verdatvalor = tinter.Nombre,
                    Verdatid = tinter.Tptomedicodi,
                    ListaDetalle = listaDetTipInter
                };
                listaDat.Add(objDatTipInter);
            }


            #endregion

            #region INTERCAMBIOS INTERNACIONALES

            //Intercambios Internacionales
            ResultadoTotalGeneracion regInterTotalAnio3 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalAnio2 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regInterTotalAnio1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalTotalVarAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regInterTotalAcum0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regInterTotalAcum1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAcumVarAnio0 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regInterTotalAcum2 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAcumVarAnio1 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            List<SiVersionDatdetDTO> listaDetInter = new List<SiVersionDatdetDTO>();

            //valor 01
            string valorTextoInter = regInterTotalAnio3.Meditotal != null ? regInterTotalAnio3.Meditotal.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAnio3.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 02
            valorTextoInter = regInterTotalAnio2.Meditotal != null ? regInterTotalAnio2.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAnio2.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 03
            valorTextoInter = regInterTotalAnio0.Meditotal != null ? regInterTotalAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAnio0.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 04
            valorTextoInter = regInterTotalAnio1.Meditotal != null ? regInterTotalAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAnio1.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 05
            valorTextoInter = regInterTotalTotalVarAnio0.Meditotal != null ? regInterTotalTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalTotalVarAnio0.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 06
            valorTextoInter = regInterTotalAcum0.Meditotal != null ? regInterTotalAcum0.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcum0.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 07
            valorTextoInter = regInterTotalAcum1.Meditotal != null ? regInterTotalAcum1.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcum1.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 08
            valorTextoInter = regInterTotalAcumVarAnio0.Meditotal != null ? regInterTotalAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcumVarAnio0.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 09
            valorTextoInter = regInterTotalAcum2.Meditotal != null ? regInterTotalAcum2.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcum2.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //valor 10
            valorTextoInter = regInterTotalAcumVarAnio1.Meditotal != null ? regInterTotalAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                Vdatdtvalor = valorTextoInter,
                Vdatdtid = regInterTotalAcumVarAnio1.TipoResultadoFecha
            };
            listaDetInter.Add(objDetInter);

            //cabecera
            SiVersionDatDTO objDatInter = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Intercambios Internacionales",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacionales,
                ListaDetalle = listaDetInter
            };
            listaDat.Add(objDatInter);
            #endregion

            #region llenar tabla listaEvolucionSemanal

            List<SiVersionDatdetDTO> listaDetPotGen = new List<SiVersionDatdetDTO>();

            foreach (var PotGenData in listaEvolucionSemanal)
            {
                //valor
                string valorTextoPotGen = PotGenData.Meditotal != null ? PotGenData.Meditotal.ToString().Replace(",", ".") : "";
                var objDetPotGen = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoPotGen + "|" + PotGenData.Medifecha.ToString(ConstantesAppServicio.FormatoFecha),
                    Vdatdtid = PotGenData.Fenergcodi,
                };
                listaDetPotGen.Add(objDetPotGen);
            }

            //cabecera
            SiVersionDatDTO objDatPotGen = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Datos Lista listaEvolucionSemanal",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia,
                ListaDetalle = listaDetPotGen
            };
            listaDat.Add(objDatPotGen);

            #endregion

            #region llenar lista listaFenergEvolucion

            List<SiVersionDatdetDTO> listaDetPartSEINA = new List<SiVersionDatdetDTO>();

            foreach (var reg in listaFenergEvolucion)
            {
                var objDetPartSEINA = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = reg.Fenergcodi + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor,
                };
                listaDetPartSEINA.Add(objDetPartSEINA);
            }

            //cabecera
            SiVersionDatDTO objDatPartSEINA = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Datos Lista listaFenergEvolucion",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionFuenteEnergia,
                ListaDetalle = listaDetPartSEINA
            };
            listaDat.Add(objDatPartSEINA);

            #endregion

            #region llenar tabla listaParticipacionRecursosEnergeticosYRer

            List<SiVersionDatdetDTO> listaDetRecEner = new List<SiVersionDatdetDTO>();

            foreach (var cat in listaParticipacionRecursosEnergeticosYRer)
            {
                //valor
                string valorTextoRecEner = cat.Meditotal != null ? cat.Meditotal.ToString().Replace(",", ".") : "";
                var objDetRecEner = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoRecEner + "|" + cat.Fenergnomb,
                    Vdatdtid = cat.TipoResultadoFecha,
                };
                listaDetRecEner.Add(objDetRecEner);
            }

            //cabecera
            SiVersionDatDTO objDatRecEner = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Datos Lista listaParticipacionRecursosEnergeticosYRer",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER,
                ListaDetalle = listaDetRecEner,
            };
            listaDat.Add(objDatRecEner);

            #endregion

            #region llenar tabla listaEvolucionSemanalEjecutivo

            List<SiVersionDatdetDTO> listaDetEvoSem = new List<SiVersionDatdetDTO>();

            foreach (var EvoSem in listaEvolucionSemanalEjecutivo)
            {
                //valor
                string valorTextoEvoSem = EvoSem.Meditotal != null ? EvoSem.Meditotal.ToString().Replace(",", ".") : "";
                var objDetEvoSem = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoEvoSem + "|" + EvoSem.Medifecha.ToString(ConstantesAppServicio.FormatoFecha),
                    Vdatdtid = EvoSem.Fenergcodi,
                };
                listaDetEvoSem.Add(objDetEvoSem);
            }

            //cabecera
            SiVersionDatDTO objDatEvoSem = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Datos Lista listaEvolucionSemanalEjecutivo",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia,
                ListaDetalle = listaDetEvoSem
            };
            listaDat.Add(objDatEvoSem);

            #endregion

            #region llenar lista listaFenergEvolucionEjec

            List<SiVersionDatdetDTO> listaDetFenergEvol = new List<SiVersionDatdetDTO>();

            foreach (var regFE in listaFenergEvolucionEjec)
            {
                var objDetFenergEvol = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = regFE.Fenergcodi + "|" + regFE.Fenergnomb + "|" + regFE.Fenergcolor,
                };
                listaDetFenergEvol.Add(objDetFenergEvol);
            }

            //cabecera
            SiVersionDatDTO objDatFenergEvol = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Datos Lista listaFenergEvolucionEjec",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionFuenteEnergiaEjecutivo,
                ListaDetalle = listaDetFenergEvol
            };
            listaDat.Add(objDatFenergEvol);

            #endregion

            #region llenar tabla listaParticipacionRecursosEnergeticosEjec

            List<SiVersionDatdetDTO> listaDetParGen = new List<SiVersionDatdetDTO>();

            foreach (var cat in listaParticipacionRecursosEnergeticosEjec)
            {
                //valor
                string valorTextoParGen = cat.Meditotal != null ? cat.Meditotal.ToString().Replace(",", ".") : "";
                var objDetParGen = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRecurso,
                    Vdatdtvalor = valorTextoParGen + "|" + cat.Fenergnomb,
                    Vdatdtid = cat.Fenergcodi,
                };
                listaDetParGen.Add(objDetParGen);
            }

            //cabecera
            SiVersionDatDTO objDatParGen = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRecurso,
                Verdatvalor = "Datos Lista listaParticipacionRecursosEnergeticosEjec",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiGraficoParticipacionRecursosEnergeticosEjec,
                ListaDetalle = listaDetParGen
            };
            listaDat.Add(objDatParGen);

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalProduccionRER(FechasPR5 objFecha)
        {
            //datos
            ListarDataProduccionRER(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaRERData
            , out List<ResultadoTotalGeneracion> listaRERTotalData, out List<ResultadoTotalGeneracion> listaPartRERData, out List<SiFuenteenergiaDTO> listaFenergRER

            , out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaPartSEINAcum, out List<ResultadoTotalGeneracion> listaPartRERAcumActual
            , out List<ResultadoTotalGeneracion> listaPartRERXTgenSemanaActual);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var regFE in listaFenergRER)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaXFe = listaRERData.Where(x => x.Fenergcodi == regFE.Fenergcodi).ToList();

                ResultadoTotalGeneracion regProdGenXFeAnio3 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenXFeAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenXFeTotalVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcum1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio0 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regProdGenXFeAcum2 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regProdGenXFeAcumVarAnio1 = listaXFe.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                //valor 01
                string valorTexto = regProdGenXFeAnio3.Meditotal != null ? regProdGenXFeAnio3.Meditotal.ToString().Replace(",", ".") : "";
                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio3.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio3.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 02
                valorTexto = regProdGenXFeAnio2.Meditotal != null ? regProdGenXFeAnio2.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio2.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 03
                valorTexto = regProdGenXFeAnio0.Meditotal != null ? regProdGenXFeAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 04
                valorTexto = regProdGenXFeAnio1.Meditotal != null ? regProdGenXFeAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAnio1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 05
                valorTexto = regProdGenXFeTotalVarAnio0.Meditotal != null ? regProdGenXFeTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeTotalVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeTotalVarAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 06
                valorTexto = regProdGenXFeAcum0.Meditotal != null ? regProdGenXFeAcum0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 07
                valorTexto = regProdGenXFeAcum1.Meditotal != null ? regProdGenXFeAcum1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 08
                valorTexto = regProdGenXFeAcumVarAnio0.Meditotal != null ? regProdGenXFeAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio0.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcumVarAnio0.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 09
                valorTexto = regProdGenXFeAcum2.Meditotal != null ? regProdGenXFeAcum2.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcum2.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcum2.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 10
                valorTexto = regProdGenXFeAcumVarAnio1.Meditotal != null ? regProdGenXFeAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTexto + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.FechaIni.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.FechaFin.ToString(ConstantesAppServicio.FormatoFecha) + "|" + regProdGenXFeAcumVarAnio1.FiltroCeldaDato?.Tgenercodi,
                    Vdatdtid = regProdGenXFeAcumVarAnio1.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                    Verdatid = regFE.Fenergcodi,
                    Verdatvalor = regFE.Fenergnomb,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region Potencia generada en el  SEIN

            List<SiVersionDatdetDTO> listaDetPsein = new List<SiVersionDatdetDTO>();

            ResultadoTotalGeneracion regProdGenAnio3 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio2 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regProdGenAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regProdGenAnio1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regProdGenTotalVarAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);

            ResultadoTotalGeneracion regProdGenAcum0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regProdGenAcum1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio0 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regProdGenAcum2 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regProdGenAcumVarAnio1 = listaRERTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            //valor 01
            string valorTextoPSein = regProdGenAnio3.Meditotal != null ? regProdGenAnio3.Meditotal.ToString().Replace(",", ".") : "";
            var objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio3.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 02
            valorTextoPSein = regProdGenAnio2.Meditotal != null ? regProdGenAnio2.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio2.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 03
            valorTextoPSein = regProdGenAnio0.Meditotal != null ? regProdGenAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 04
            valorTextoPSein = regProdGenAnio1.Meditotal != null ? regProdGenAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAnio1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 05
            valorTextoPSein = regProdGenTotalVarAnio0.Meditotal != null ? regProdGenTotalVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenTotalVarAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 06
            valorTextoPSein = regProdGenAcum0.Meditotal != null ? regProdGenAcum0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 07
            valorTextoPSein = regProdGenAcum1.Meditotal != null ? regProdGenAcum1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 08
            valorTextoPSein = regProdGenAcumVarAnio0.Meditotal != null ? regProdGenAcumVarAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcumVarAnio0.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 09
            valorTextoPSein = regProdGenAcum2.Meditotal != null ? regProdGenAcum2.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcum2.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //valor 10
            valorTextoPSein = regProdGenAcumVarAnio1.Meditotal != null ? regProdGenAcumVarAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetPSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoPSein,
                Vdatdtid = regProdGenAcumVarAnio1.TipoResultadoFecha,
            };
            listaDetPsein.Add(objDetPSein);

            //cabecera
            SiVersionDatDTO objDatPsein = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Producción Total RER (*)",
                Verdatid = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                ListaDetalle = listaDetPsein
            };
            listaDat.Add(objDatPsein);

            #endregion

            #region Participación RER en el SEIN (%)

            List<SiVersionDatdetDTO> listaDetRERSein = new List<SiVersionDatdetDTO>();

            ResultadoTotalGeneracion regPartRERAnio3 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio3Ant_SemAct);
            ResultadoTotalGeneracion regPartRERAnio2 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);
            ResultadoTotalGeneracion regPartRERAnio0 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

            ResultadoTotalGeneracion regPartRERAnio1 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regPartRERAcum0 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regPartRERAcum1 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);

            ResultadoTotalGeneracion regPartRERAcum2 = listaPartRERData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);

            //valor 01
            string valorTextoRERSein = regPartRERAnio3.Meditotal != null ? regPartRERAnio3.Meditotal.ToString().Replace(",", ".") : "";
            var objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAnio3.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 02
            valorTextoRERSein = regPartRERAnio2.Meditotal != null ? regPartRERAnio2.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAnio2.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 03
            valorTextoRERSein = regPartRERAnio0.Meditotal != null ? regPartRERAnio0.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAnio0.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 04
            valorTextoRERSein = regPartRERAnio1.Meditotal != null ? regPartRERAnio1.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAnio1.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 05
            valorTextoRERSein = regPartRERAcum0.Meditotal != null ? regPartRERAcum0.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAcum0.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 06
            valorTextoRERSein = regPartRERAcum1.Meditotal != null ? regPartRERAcum1.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAcum1.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //valor 07
            valorTextoRERSein = regPartRERAcum2.Meditotal != null ? regPartRERAcum2.Meditotal.ToString().Replace(",", ".") : "";
            objDetRERSein = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                Vdatdtvalor = valorTextoRERSein,
                Vdatdtid = regPartRERAcum2.TipoResultadoFecha,
            };
            listaDetRERSein.Add(objDetRERSein);

            //cabecera
            SiVersionDatDTO objDatRERSein = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Participación RER en el SEIN (%)",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadRER,
                ListaDetalle = listaDetRERSein
            };
            listaDat.Add(objDatRERSein);

            #endregion

            #region llenar tabla listaPotGenData

            List<SiVersionDatdetDTO> listaDetPotGen = new List<SiVersionDatdetDTO>();

            foreach (var PotGenData in listaPotGenData)
            {
                //valor
                string valorTextoPotGen = PotGenData.Meditotal != null ? PotGenData.Meditotal.ToString().Replace(",", ".") : "";
                var objDetPotGen = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTextoPotGen,
                    Vdatdtid = PotGenData.TipoResultadoFecha,
                };
                listaDetPotGen.Add(objDetPotGen);
            }

            //cabecera
            SiVersionDatDTO objDatPotGen = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Datos Lista listaPotGenData",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual,
                ListaDetalle = listaDetPotGen
            };
            listaDat.Add(objDatPotGen);

            #endregion

            #region llenar lista listaPartSEINAcum

            List<SiVersionDatdetDTO> listaDetPartSEINA = new List<SiVersionDatdetDTO>();

            foreach (var reg in listaPartSEINAcum)
            {
                //valor
                string valorTextoPartSEINA = reg.Meditotal != null ? reg.Meditotal.ToString().Replace(",", ".") : "";
                var objDetPartSEINA = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTextoPartSEINA + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor,
                };
                listaDetPartSEINA.Add(objDetPartSEINA);
            }

            //cabecera
            SiVersionDatDTO objDatPartSEINA = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Datos Lista listaPartSEINAcum",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiProduccionElectrcidadAcumulado,
                ListaDetalle = listaDetPartSEINA
            };
            listaDat.Add(objDatPartSEINA);

            #endregion

            #region llenar lista listaPartRERAcumActual

            List<SiVersionDatdetDTO> listaDetPartRERA = new List<SiVersionDatdetDTO>();

            foreach (var reg in listaPartRERAcumActual)
            {
                //valor
                string valorTextoPartRERA = reg.Meditotal != null ? reg.Meditotal.ToString().Replace(",", ".") : "";
                var objDetPartRERA = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTextoPartRERA + "|" + reg.Fenergnomb + "|" + reg.Fenergcolor,
                };
                listaDetPartRERA.Add(objDetPartRERA);
            }

            //cabecera
            SiVersionDatDTO objDatPartRERA = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Datos Lista listaPartRERAcumActual",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiPartRERAcumuladoActual,
                ListaDetalle = listaDetPartRERA
            };
            listaDat.Add(objDatPartRERA);

            #endregion

            #region llenar lista listaPartRERXTgenSemanaActual

            List<SiVersionDatdetDTO> listaDetPartRERXT = new List<SiVersionDatdetDTO>();

            foreach (var reg in listaPartRERXTgenSemanaActual)
            {
                //valor
                string valorTextoPartRERXT = reg.Meditotal != null ? reg.Meditotal.ToString().Replace(",", ".") : "";
                var objDetPartRERXT = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorProduccionRER,
                    Vdatdtvalor = valorTextoPartRERXT + "|" + reg.Tgenernomb + "|" + reg.Tgenercolor,
                };
                listaDetPartRERXT.Add(objDetPartRERXT);
            }

            //cabecera
            SiVersionDatDTO objDatPartRERXT = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoProduccionRER,
                Verdatvalor = "Datos Lista listaPartRERXTgenSemanaActual",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiPartRERSemanaActual,
                ListaDetalle = listaDetPartRERXT
            };
            listaDat.Add(objDatPartRERXT);

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalFactorPlantaCentralesRER(FechasPR5 objFecha)
        {
            //datos
            ListarDataFactorPlantaCentralesRER(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc,
            out List<EqEquipoDTO> listaCentralRER, out List<ResultadoTotalGeneracion> listaGeneracionCentralRER,
            out List<ResultadoTotalGeneracion> listaPECentralRER, out List<ResultadoTotalGeneracion> listaFPCentralRER, out List<SiTipogeneracionDTO> listaTgeneracion);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var regCentral in listaCentralRER)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaXPE = listaPECentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();
                var listaXGen = listaGeneracionCentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();
                var listaXFP = listaFPCentralRER.Where(x => x.Equipadre == regCentral.Equipadre).ToList();

                ResultadoTotalGeneracion regPExCentralSemActAnioAct = listaXPE.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);

                ResultadoTotalGeneracion regProdGenxCentralSemActAnioAct = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regFPxCentralSemActAnioAct = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regProdGenxCentralSemActAnio1Ant = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regFPxCentralSemActAnio1Ant = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regProdGenxCentralAcumAnioAct = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regFPxCentralAcumAnioAct = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regProdGenxCentralAcumAnio1Ant = listaXGen.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regFPxCentralAcumAnio1Ant = listaXFP.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);

                //valor 01
                string valorTexto = regPExCentralSemActAnioAct.Meditotal != null ? regPExCentralSemActAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regPExCentralSemActAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 02
                valorTexto = regProdGenxCentralSemActAnioAct.Meditotal != null ? regProdGenxCentralSemActAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regProdGenxCentralSemActAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 03
                valorTexto = regFPxCentralSemActAnioAct.Meditotal != null ? regFPxCentralSemActAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regFPxCentralSemActAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 04
                valorTexto = regProdGenxCentralSemActAnio1Ant.Meditotal != null ? regProdGenxCentralSemActAnio1Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regProdGenxCentralSemActAnio1Ant.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 05
                valorTexto = regFPxCentralSemActAnio1Ant.Meditotal != null ? regFPxCentralSemActAnio1Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regFPxCentralSemActAnio1Ant.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 06
                valorTexto = regProdGenxCentralAcumAnioAct.Meditotal != null ? regProdGenxCentralAcumAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regProdGenxCentralAcumAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 07
                valorTexto = regFPxCentralAcumAnioAct.Meditotal != null ? regFPxCentralAcumAnioAct.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regFPxCentralAcumAnioAct.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 08
                valorTexto = regProdGenxCentralAcumAnio1Ant.Meditotal != null ? regProdGenxCentralAcumAnio1Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regProdGenxCentralAcumAnio1Ant.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //valor 09
                valorTexto = regFPxCentralAcumAnio1Ant.Meditotal != null ? regFPxCentralAcumAnio1Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = regFPxCentralAcumAnio1Ant.TipoResultadoFecha,
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFactorPlantaCentralesRER,
                    Verdatid = regCentral.Equipadre.Value,
                    Verdatvalor = regCentral.Tgenercodi + "|" + regCentral.Tgenernomb,
                    Verdatvalor2 = regCentral.Central,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #region GUARDAR tabla listaTgeneracion

            List<SiVersionDatdetDTO> listaDetTGEN = new List<SiVersionDatdetDTO>();

            foreach (var regTg in listaTgeneracion)
            {
                //valor
                var objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFactorPlantaCentralesRER,
                    Vdatdtvalor = regTg.Tgenernomb + "|" + regTg.Tgenercolor,
                    Vdatdtid = regTg.Tgenercodi,
                };
                listaDetTGEN.Add(objDet);
            }

            //cabecera
            SiVersionDatDTO objDatTGEN = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                Verdatvalor = "Lista de Generacion",
                Verdatid = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                ListaDetalle = listaDetTGEN
            };
            listaDat.Add(objDatTGEN);

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalEvolucionDemandaAreaOperativa(FechasPR5 objFecha)
        {
            //datos
            ListarDataEvolucionDemandaXAreaOperativaSEIN(objFecha, out List<MaximaDemandaDTO> listaTotalMaximaDemadaDesc, out List<ResultadoTotalGeneracion> listaDemandaXAreaData,
            out List<ResultadoTotalGeneracion> listaPotGenData, out List<ResultadoTotalGeneracion> listaPotGenTotalData, out List<ResultadoTotalGeneracion> listaInterTipoData
            , out List<ResultadoTotalGeneracion> listaInterTotalData, out List<MeReporptomedDTO> listaArea, out List<ResultadoTotalGeneracion> listaEvolucionSemanal);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var regArea in listaArea)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaXArea = listaDemandaXAreaData.Where(x => x.Ptomedicodi == regArea.Ptomedicodi).ToList();

                ResultadoTotalGeneracion regMDSem2MD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
                ResultadoTotalGeneracion regMDSem1MD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
                ResultadoTotalGeneracion regMDSem0MD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regMDSem0AnioAntMD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

                ResultadoTotalGeneracion regMDSem0VarMD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regMDAnio0MD96 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regMDAnio1MD96 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regMDAnio0VarMD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regMDAnio2MD96 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regMDAnio1VarMD48 = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                ResultadoTotalGeneracion regAnio2Ant = listaXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);

                //valor 01
                string valorTexto = regMDSem2MD48.Meditotal != null ? regMDSem2MD48.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDSem2MD48.Medifecha
                };
                listaDet.Add(objDet);

                //valor 02
                valorTexto = regMDSem1MD48.Meditotal != null ? regMDSem1MD48.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDSem1MD48.Medifecha
                };
                listaDet.Add(objDet);

                //valor 03
                valorTexto = regMDSem0MD48.Meditotal != null ? regMDSem0MD48.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDSem0MD48.Medifecha
                };
                listaDet.Add(objDet);

                //valor 04
                valorTexto = regMDSem0AnioAntMD48.Meditotal != null ? regMDSem0AnioAntMD48.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDSem0AnioAntMD48.Medifecha
                };
                listaDet.Add(objDet);

                //valor 05
                valorTexto = regMDSem0VarMD48.Meditotal != null ? regMDSem0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDSem0VarMD48.Medifecha
                };
                listaDet.Add(objDet);

                //valor 06
                valorTexto = regMDAnio0MD96.Meditotal != null ? regMDAnio0MD96.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDAnio0MD96.Medifecha
                };
                listaDet.Add(objDet);

                //valor 07
                valorTexto = regMDAnio1MD96.Meditotal != null ? regMDAnio1MD96.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDAnio1MD96.Medifecha
                };
                listaDet.Add(objDet);

                //valor 08
                valorTexto = regMDAnio0VarMD48.Meditotal != null ? regMDAnio0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDAnio0VarMD48.Medifecha
                };
                listaDet.Add(objDet);

                //valor 09
                valorTexto = regMDAnio2MD96.Meditotal != null ? regMDAnio2MD96.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDAnio2MD96.Medifecha
                };
                listaDet.Add(objDet);

                //valor 10
                valorTexto = regMDAnio1VarMD48.Meditotal != null ? regMDAnio1VarMD48.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regMDAnio1VarMD48.Medifecha
                };
                listaDet.Add(objDet);

                //valor 11
                valorTexto = regAnio2Ant.Meditotal != null ? regAnio2Ant.Meditotal.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTexto,
                    Vdatdtfecha = regAnio2Ant.Medifecha
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                    Verdatid = regArea.Ptomedicodi,
                    Verdatvalor = regArea.Ptomedibarranomb,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
                listaDet = new List<SiVersionDatdetDTO>();
            }

            #region LISTA DEMANDA SEIN
            ResultadoTotalGeneracion regMDPotGenSem2MD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regMDPotGenSem1MD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regMDPotGenSem0MD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDPotGenSem0AnioAntMD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);

            ResultadoTotalGeneracion regMDPotGenSem0VarMD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regMDPotGenAnio0MD96 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio1MD96 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio0VarMD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regMDPotGenAnio2MD96 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regMDPotGenAnio1VarMD48 = listaPotGenData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            List<SiVersionDatdetDTO> listaDetSEIN = new List<SiVersionDatdetDTO>();

            //valor 01
            string valorTextoSEIN = regMDPotGenSem2MD48.Meditotal != null ? regMDPotGenSem2MD48.Meditotal.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 02
            valorTextoSEIN = regMDPotGenSem1MD48.Meditotal != null ? regMDPotGenSem1MD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 03
            valorTextoSEIN = regMDPotGenSem0MD48.Meditotal != null ? regMDPotGenSem0MD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 04
            valorTextoSEIN = regMDPotGenSem0AnioAntMD48.Meditotal != null ? regMDPotGenSem0AnioAntMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 05
            valorTextoSEIN = regMDPotGenSem0VarMD48.Meditotal != null ? regMDPotGenSem0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 06
            valorTextoSEIN = regMDPotGenAnio0MD96.Meditotal != null ? regMDPotGenAnio0MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 07
            valorTextoSEIN = regMDPotGenAnio1MD96.Meditotal != null ? regMDPotGenAnio1MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 08
            valorTextoSEIN = regMDPotGenAnio0VarMD48.Meditotal != null ? regMDPotGenAnio0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 09
            valorTextoSEIN = regMDPotGenAnio2MD96.Meditotal != null ? regMDPotGenAnio2MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);

            //valor 10
            valorTextoSEIN = regMDPotGenAnio1VarMD48.Meditotal != null ? regMDPotGenAnio1VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetSEIN = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoSEIN
            };
            listaDetSEIN.Add(objDetSEIN);


            //cabecera
            SiVersionDatDTO objDatSEIN = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoEvolucionDemandaAreasOperativas,
                Verdatvalor = "Demanda de Energía del SEIN",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiPotenciaInstaladaActual,
                ListaDetalle = listaDetSEIN
            };
            listaDat.Add(objDatSEIN);

            #endregion

            #region LISTA IMPORTACIONES Y EXPORTACIONES
            //Tipo de interconexion
            var listaTinter = new[] {
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiImportacionMwh, Nombre = "Importación" },
                                    new { Tptomedicodi = ConstantesInterconexiones.IdTipoPtomedicodiExportacionMwh, Nombre = "Exportación" }
                                }.ToList();

            foreach (var tinter in listaTinter)
            {
                List<SiVersionDatdetDTO> listaDetTipInter = new List<SiVersionDatdetDTO>();

                var listaXTipoInter = listaInterTipoData.Where(x => x.Tptomedicodi == tinter.Tptomedicodi).ToList();

                ResultadoTotalGeneracion regMDSem2MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
                ResultadoTotalGeneracion regMDSem1MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
                ResultadoTotalGeneracion regMDSem0MD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regMDSem0AnioAntMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regMDSem0VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

                ResultadoTotalGeneracion regMDAnio0MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                ResultadoTotalGeneracion regMDAnio1MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                ResultadoTotalGeneracion regMDAnio0VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                ResultadoTotalGeneracion regMDAnio2MD96 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
                ResultadoTotalGeneracion regMDAnio1VarMD48 = listaXTipoInter.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

                //valor 01
                string valorTextoTipInter = regMDSem2MD48.Meditotal != null ? regMDSem2MD48.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 02
                valorTextoTipInter = regMDSem1MD48.Meditotal != null ? regMDSem1MD48.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 03
                valorTextoTipInter = regMDSem0MD48.Meditotal != null ? regMDSem0MD48.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 04
                valorTextoTipInter = regMDSem0AnioAntMD48.Meditotal != null ? regMDSem0AnioAntMD48.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 05
                valorTextoTipInter = regMDSem0VarMD48.Meditotal != null ? regMDSem0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 06
                valorTextoTipInter = regMDAnio0MD96.Meditotal != null ? regMDAnio0MD96.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 07
                valorTextoTipInter = regMDAnio1MD96.Meditotal != null ? regMDAnio1MD96.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 08
                valorTextoTipInter = regMDAnio0VarMD48.Meditotal != null ? regMDAnio0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 09
                valorTextoTipInter = regMDAnio2MD96.Meditotal != null ? regMDAnio2MD96.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);

                //valor 10
                valorTextoTipInter = regMDAnio1VarMD48.Meditotal != null ? regMDAnio1VarMD48.Meditotal.ToString().Replace(",", ".") : "";
                objDetTipInter = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                    Vdatdtvalor = valorTextoTipInter
                };
                listaDetTipInter.Add(objDetTipInter);


                //cabecera
                SiVersionDatDTO objDatTipInter = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoEvolucionDemandaAreasOperativas,
                    Verdatvalor = tinter.Nombre,
                    Verdatid = tinter.Tptomedicodi,
                    ListaDetalle = listaDetTipInter
                };
                listaDat.Add(objDatTipInter);
            }

            #endregion

            #region INTERCAMBIOS INTERNACIONALES

            ResultadoTotalGeneracion regInterTotalSem2MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regInterTotalSem1MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regInterTotalSem0MD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regInterTotalSem0AnioAntMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regInterTotalSem0VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regInterTotalAnio0MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regInterTotalAnio1MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAnio0VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regInterTotalAnio2MD96 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regInterTotalAnio1VarMD48 = listaInterTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            List<SiVersionDatdetDTO> listaDetInter = new List<SiVersionDatdetDTO>();

            //valor 01
            string valorTextoInter = regInterTotalSem2MD48.Meditotal != null ? regInterTotalSem2MD48.Meditotal.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 02
            valorTextoInter = regInterTotalSem1MD48.Meditotal != null ? regInterTotalSem1MD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 03
            valorTextoInter = regInterTotalSem0MD48.Meditotal != null ? regInterTotalSem0MD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 04
            valorTextoInter = regInterTotalSem0AnioAntMD48.Meditotal != null ? regInterTotalSem0AnioAntMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 05
            valorTextoInter = regInterTotalSem0VarMD48.Meditotal != null ? regInterTotalSem0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 06
            valorTextoInter = regInterTotalAnio0MD96.Meditotal != null ? regInterTotalAnio0MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 07
            valorTextoInter = regInterTotalAnio1MD96.Meditotal != null ? regInterTotalAnio1MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 08
            valorTextoInter = regInterTotalAnio0VarMD48.Meditotal != null ? regInterTotalAnio0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 09
            valorTextoInter = regInterTotalAnio2MD96.Meditotal != null ? regInterTotalAnio2MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //valor 10
            valorTextoInter = regInterTotalAnio1VarMD48.Meditotal != null ? regInterTotalAnio1VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetInter = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoInter
            };
            listaDetInter.Add(objDetInter);

            //cabecera
            SiVersionDatDTO objDatInter = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoEvolucionDemandaAreasOperativas,
                Verdatvalor = "Intercambios Internacionales",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacionales,
                ListaDetalle = listaDetInter
            };
            listaDat.Add(objDatInter);

            #endregion

            #region TOTAL MAXIMA DEMANDA

            ResultadoTotalGeneracion regMDTotalSem2MD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem2Ant);
            ResultadoTotalGeneracion regMDTotalSem1MD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Sem1Ant);
            ResultadoTotalGeneracion regMDTotalSem0MD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
            ResultadoTotalGeneracion regMDTotalSem0AnioAntMD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
            ResultadoTotalGeneracion regMDTotalSem0VarMD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);

            ResultadoTotalGeneracion regMDTotalAnio0MD96 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
            ResultadoTotalGeneracion regMDTotalAnio1MD96 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
            ResultadoTotalGeneracion regMDTotalAnio0VarMD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

            ResultadoTotalGeneracion regMDTotalAnio2MD96 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_Acum);
            ResultadoTotalGeneracion regMDTotalAnio1VarMD48 = listaPotGenTotalData.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum_Var);

            List<SiVersionDatdetDTO> listaDetMaxDeman = new List<SiVersionDatdetDTO>();

            //valor 01
            string valorTextoMaxDeman = regMDTotalSem2MD48.Meditotal != null ? regMDTotalSem2MD48.Meditotal.ToString().Replace(",", ".") : "";
            SiVersionDatdetDTO objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 02
            valorTextoMaxDeman = regMDTotalSem1MD48.Meditotal != null ? regMDTotalSem1MD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 03
            valorTextoMaxDeman = regMDTotalSem0MD48.Meditotal != null ? regMDTotalSem0MD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 04
            valorTextoMaxDeman = regMDTotalSem0AnioAntMD48.Meditotal != null ? regMDTotalSem0AnioAntMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 05
            valorTextoMaxDeman = regMDTotalSem0VarMD48.Meditotal != null ? regMDTotalSem0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 06
            valorTextoMaxDeman = regMDTotalAnio0MD96.Meditotal != null ? regMDTotalAnio0MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 07
            valorTextoMaxDeman = regMDTotalAnio1MD96.Meditotal != null ? regMDTotalAnio1MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 08
            valorTextoMaxDeman = regMDTotalAnio0VarMD48.Meditotal != null ? regMDTotalAnio0VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 09
            valorTextoMaxDeman = regMDTotalAnio2MD96.Meditotal != null ? regMDTotalAnio2MD96.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //valor 10
            valorTextoMaxDeman = regMDTotalAnio1VarMD48.Meditotal != null ? regMDTotalAnio1VarMD48.Meditotal.ToString().Replace(",", ".") : "";
            objDetMaxDeman = new SiVersionDatdetDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                Vdatdtvalor = valorTextoMaxDeman
            };
            listaDetMaxDeman.Add(objDetMaxDeman);

            //cabecera
            SiVersionDatDTO objDatMaxDeman = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoEvolucionDemandaAreasOperativas,
                Verdatvalor = "Total Demanda del SEIN",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiTotalDemandaSEIN,
                ListaDetalle = listaDetMaxDeman
            };
            listaDat.Add(objDatMaxDeman);
            #endregion

            #region LLENAMOS LA LISTA EVOLUCION SEMANAL

            List<SiVersionDatdetDTO> listaDetEvosem = new List<SiVersionDatdetDTO>();

            for (int numAnio = 0; numAnio < 2; numAnio++)
            {
                int tipoFecha = PR5ConstanteFecha.ValorAnioAct_SemAct_Var;

                for (int cc = 0; cc < listaArea.Count; cc++)
                {
                    List<ResultadoTotalGeneracion> listaXArea = listaEvolucionSemanal.Where(x => x.TipoResultadoFecha == tipoFecha && x.Ptomedicodi == listaArea[cc].Ptomedicodi).ToList();

                    foreach (var evSemanal in listaXArea)
                    {
                        //valor
                        string valorTextoEvoSem = evSemanal.Meditotal != null ? evSemanal.Meditotal.ToString().Replace(",", ".") : "";
                        var objDetEvoSem = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoValorEvolucionDemandaAreasOperativas,
                            Vdatdtfecha = evSemanal.Medifecha,
                            Vdatdtvalor = valorTextoEvoSem + "|" + evSemanal.TipoResultadoFecha,
                            Vdatdtid = evSemanal.Ptomedicodi
                        };
                        listaDetEvosem.Add(objDetEvoSem);
                    }
                }
            }

            //cabecera
            SiVersionDatDTO objDatEvoSem = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoEvolucionDemandaAreasOperativas,
                Verdatvalor = "Lista Evolucion Semanal",
                Verdatid = ConstantesConceptoVersion.ConceptoCodiGraficoEvolucionSemanalEnergia,
                ListaDetalle = listaDetEvosem
            };
            listaDat.Add(objDatEvoSem);

            #endregion

            return listaDat;
        }

        /// <summary>
        /// ListarDatSemanalPromedioCaudales
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public List<SiVersionDatDTO> ListarDatSemanalPromedioCaudales(FechasPR5 objFecha, int mrepcodi)
        {
            //datos
            ListarDataCuadroCaudalSemanal(objFecha, out List<TablaReporte> listaTabla, mrepcodi);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            var i = 0;
            foreach (var tabla in listaTabla)
            {
                int vercnpcodi = i == 0 ? ConstantesConceptoVersion.ConceptoCodiCaudalNatural : ConstantesConceptoVersion.ConceptoCodiCaudalDescargado;
                foreach (var itemFila in tabla.ListaRegistros)
                {
                    var regPto = itemFila.ListaCelda[0];
                    var regSemFin = itemFila.ListaCelda[1];
                    var reg1AntFin = itemFila.ListaCelda[2];
                    var regRangActVar = itemFila.ListaCelda[3];

                    //detalle
                    List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                    //semana actual
                    string valorTextoSemFin = regSemFin.Valor != null ? regSemFin.Valor.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual,
                        Vdatdtvalor = valorTextoSemFin
                    };
                    listaDet.Add(objDet);

                    //semana año anterior
                    string valorTextoSemAntFin = reg1AntFin.Valor != null ? reg1AntFin.Valor.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior,
                        Vdatdtvalor = valorTextoSemAntFin
                    };
                    listaDet.Add(objDet2);

                    //variacion caudal natural
                    string valorTextoRangActVar = regRangActVar.Valor != null ? regRangActVar.Valor.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet3 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoPorcentajeVariacion,
                        Vdatdtvalor = valorTextoRangActVar
                    };
                    listaDet.Add(objDet3);

                    //cabecera
                    SiVersionDatDTO objDat = new SiVersionDatDTO()
                    {
                        Vercnpcodi = vercnpcodi,
                        Verdatvalor = regPto.Texto,
                        Verdatid = itemFila.CodigoFila,
                        ListaDetalle = listaDet
                    };
                    listaDat.Add(objDat);
                }
                i++;
            }

            return listaDat;
        }

        /// <summary>
        /// ListarDatSemanalEvolucionCaudal
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="mrepcodi"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public List<SiVersionDatDTO> ListarDatSemanalEvolucionCaudal(FechasPR5 objFecha, int mrepcodi)
        {
            //datos
            ListarDataEvolucionCaudalSemanal(objFecha, out List<GraficoWeb> listaGrafico, out List<MeMedicion1DTO> listDataAll, mrepcodi);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            foreach (var objRpt in listaGrafico)
            {
                var lstDataCaudalesAct = listDataAll.Where(x => x.Reporcodi == objRpt.IdGrafico).ToList();

                //detalle
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                foreach (var objPto in lstDataCaudalesAct)
                {
                    string valorTexto = objPto.H1 != null ? objPto.H1.ToString().Replace(",", ".") : "";
                    DateTime fSemIni = objPto.Medifecha;

                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtfecha = fSemIni,
                        Vdatdtvalor = valorTexto
                    };

                    listaDet.Add(objDet);
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiCaudalNaturalGrafico,
                    Verdatid = objRpt.IdGrafico,
                    Verdatvalor = objRpt.TitleText,
                    ListaDetalle = listaDet,
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalConsumoCombustible(DateTime fechaInicial, DateTime fechaFinal)
        {
            //datos
            ObtenerDataMedicionCombustible(fechaInicial, fechaFinal, out List<MeMedicionxintervaloDTO> listaRptDia, out List<MeMedicionxintervaloDTO> listaTotal);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            foreach (var objFenerg in listaTotal)
            {
                //detalle
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var objMInt in listaRptDia.Where(x => x.Fenergcodi == objFenerg.Fenergcodi).ToList())
                {
                    string valorTexto = objMInt.Medinth1 != null ? objMInt.Medinth1.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtfecha = objMInt.Medintfechaini,
                        Vdatdtvalor = valorTexto
                    };

                    listaDet.Add(objDet);
                }

                //total
                string valorTexto2 = objFenerg.Medinth1 != null ? objFenerg.Medinth1.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto2
                };

                listaDet.Add(objDet2);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoFenergcodi,
                    Verdatvalor = objFenerg.Fenergcodi.ToString(),
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalCostosOperacionEjecutado(FechasPR5 objFecha, int mrepcodi, DateTime fechaInicial, DateTime fechaFinal)
        {
            //datos 
            CargarReporteEvolCostosOperEjecutadosSemanal(objFecha, mrepcodi, out List<ResultadoTotalGeneracion> listaResul);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            List<int> listaTipoResultado = new List<int>() { PR5ConstanteFecha.ValorAnioAct_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnio2Ant_SemAct, PR5ConstanteFecha.ValorAnioAct_Total_Var, PR5ConstanteFecha.ValorAnio1Ant_Total_Var };

            foreach (int tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual;
                        valorCab = objFecha.AnioAct.NumAnio.ToString();
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior;
                        valorCab = objFecha.Anio1Ant.NumAnio.ToString();
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior;
                        valorCab = objFecha.Anio2Ant.NumAnio.ToString();
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Total_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior;
                        valorCab = string.Format("Var {0}-{1}", objFecha.AnioAct.NumAnio, objFecha.Anio1Ant.NumAnio); ;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Total_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoVariacionAcumAnioAnteriorVsPrecedeAnterior;
                        valorCab = string.Format("Var {0}-{1}", objFecha.Anio1Ant.NumAnio, objFecha.Anio2Ant.NumAnio); ;
                        break;
                }
                //detalle
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var objRes in listaResul.Where(x => x.TipoResultadoFecha == tipoResultado).OrderBy(x => x.Medifecha))
                {
                    string valorTexto = objRes.Meditotal != null ? objRes.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtfecha = objRes.Medifecha,
                        Vdatdtvalor = valorTexto
                    };

                    listaDet.Add(objDet);
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalCostosMarginalesPromSantaRosaEjec(FechasPR5 objFecha, int mrepcodi, DateTime fechaInicial, DateTime fechaFinal)
        {
            //datos 
            ObtenerListasRptEvolCostosMarginalesProm(objFecha, mrepcodi, out List<ResultadoTotalGeneracion> listaResul);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            List<int> listaTipoResultado = new List<int>() { PR5ConstanteFecha.ValorAnioAct_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnio2Ant_SemAct, PR5ConstanteFecha.ValorAnioAct_Total_Var, PR5ConstanteFecha.ValorAnio1Ant_Total_Var };

            foreach (int tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual;
                        valorCab = objFecha.AnioAct.NumAnio.ToString();
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior;
                        valorCab = objFecha.Anio1Ant.NumAnio.ToString();
                        break;
                    case PR5ConstanteFecha.ValorAnio2Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior;
                        valorCab = objFecha.Anio2Ant.NumAnio.ToString();
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_Total_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior;
                        valorCab = string.Format("Var {0}-{1}", objFecha.AnioAct.NumAnio, objFecha.Anio1Ant.NumAnio); ;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_Total_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoVariacionAcumAnioAnteriorVsPrecedeAnterior;
                        valorCab = string.Format("Var {0}-{1}", objFecha.Anio1Ant.NumAnio, objFecha.Anio2Ant.NumAnio); ;
                        break;
                }
                //detalle
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var objRes in listaResul.Where(x => x.TipoResultadoFecha == tipoResultado).OrderBy(x => x.Medifecha))
                {
                    string valorTexto = objRes.Meditotal != null ? objRes.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtfecha = objRes.Medifecha,
                        Vdatdtvalor = valorTexto
                    };

                    listaDet.Add(objDet);
                }

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalCostosMarginalesPorArea(FechasPR5 objFecha, int mrepcodi, DateTime fechaInicial, DateTime fechaFinal)
        {
            //datos
            ObtenerListasRptEvolCostosMarginalesPorArea(objFecha, mrepcodi, out List<IeeBarrazonaDTO> barrasTotales, out List<ResultadoTotalGeneracion> listaResultTotal);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            foreach (var objBarra in listaResultTotal.GroupBy(x => x.Barrcodi))
            {

                //detalle
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var objRes in objBarra.Where(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct).ToList())
                {
                    string valorTexto = objRes.Meditotal != null ? objRes.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtfecha = objRes.Medifecha,
                        Vdatdtvalor = valorTexto
                    };

                    listaDet.Add(objDet);
                }

                //cabecera
                int concepto = ConstantesConceptoVersion.ConceptoCodigoBarrcodiAreaNorte;
                if (objBarra.First().Barrzarea == ConstantesPR5ReportesServicio.BarrzareaCentro) concepto = ConstantesConceptoVersion.ConceptoCodigoBarrcodiAreaCentro;
                if (objBarra.First().Barrzarea == ConstantesPR5ReportesServicio.BarrzareaSur) concepto = ConstantesConceptoVersion.ConceptoCodigoBarrcodiAreaSur;
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = concepto,
                    Verdatvalor = objBarra.First().Barrnombre,
                    Verdatid = objBarra.Key,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        /// <summary>
        /// ListarDatSemanalHorasCongestionPorArea
        /// </summary>
        /// <param name="objFecha"></param>
        /// <returns></returns>
        public List<SiVersionDatDTO> ListarDatSemanalHorasCongestionPorArea(FechasPR5 objFecha)
        {
            //datos
            ObtenerDataHorasCongestionAreaOperacion(objFecha, out List<EqGrupoLineaDTO> listaGrupolinea, out List<ResultadoTotalGeneracion> listaDataXArea);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            var listaGrupolineaTmp = new List<EqGrupoLineaDTO>();
            listaGrupolineaTmp.AddRange(listaGrupolinea);
            listaGrupolineaTmp.Add(new EqGrupoLineaDTO() { Grulincodi = -1, Areaoperativa = "TOTAL HORAS DE CONGESTÍON EN EL SEIN", Equipo = "", Areanomb = "" });

            foreach (var objAreaGeo in listaGrupolineaTmp)
            {
                var listaXAreageo = listaDataXArea.Where(x => x.Codigo == objAreaGeo.Grulincodi).ToList();

                ResultadoTotalGeneracion regAnio0 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                ResultadoTotalGeneracion regAnio1 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                ResultadoTotalGeneracion regAnio2 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio2Ant_SemAct);

                ResultadoTotalGeneracion regVarAnio0 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Total_Var);
                ResultadoTotalGeneracion regVarAnio1 = listaXAreageo.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Total_Var);

                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                //detalle
                //HoraCongestion Act
                string valorTexto = regAnio0.Meditotal != null ? regAnio0.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = objAreaGeo.Grulincodi

                };
                listaDet.Add(objDet);

                //HoraCongestion 1Ant                    
                valorTexto = regAnio1.Meditotal != null ? regAnio1.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = objAreaGeo.Grulincodi
                };
                listaDet.Add(objDet2);

                if (!objFecha.EsReporteAnual) // todos, menos el reporte anual  
                {
                    //HoraCongestion 2Ant                        
                    valorTexto = regAnio2.Meditotal != null ? regAnio2.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet3 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioPrecedeAnterior,
                        Vdatdtvalor = valorTexto,
                        Vdatdtid = objAreaGeo.Grulincodi
                    };
                    listaDet.Add(objDet3);
                }

                decimal? var01 = regVarAnio0.Meditotal != null ? regVarAnio0.Meditotal : null;

                //variacion Act/1Ant                              

                valorTexto = var01 != null ? var01.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet4 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior,
                    Vdatdtvalor = valorTexto,
                    Vdatdtid = objAreaGeo.Grulincodi
                };
                listaDet.Add(objDet4);

                if (!objFecha.EsReporteAnual) // todos, menos el reporte anual 
                {
                    //Variacion 1Ant/2Ant
                    decimal? var2 = regVarAnio1.Meditotal != null ? regVarAnio1.Meditotal : null;
                    valorTexto = var2 != null ? var2.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet5 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoVariacionAcumAnioAnteriorVsPrecedeAnterior,
                        Vdatdtvalor = valorTexto,
                        Vdatdtid = objAreaGeo.Grulincodi
                    };
                    listaDet.Add(objDet5);
                }

                //cabecera
                int concepto = ConstantesConceptoVersion.ConceptoCodiHrsCongestionAreasOperativas;

                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = concepto,
                    Verdatid = objAreaGeo.Grulincodi,
                    Verdatvalor = string.Format("{0}|{1}", objAreaGeo.Equipo, objAreaGeo.Areanomb),
                    Verdatvalor2 = objAreaGeo.Areaoperativa,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalIntercambioInternacional(FechasPR5 objFecha, int mrepcodi, DateTime fechaInicial, DateTime fechaFinal)
        {
            //datos 
            List<MeMedicion48DTO> listaInterconexion48 = this.servEjec.ListaDataMDInterconexion48(fechaInicial, fechaFinal);

            //ObtenerListasRptEvolCostosMarginalesProm(objFecha, mrepcodi, out List<ResultadoTotalGeneracion> listaResul);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var medicionDia in listaInterconexion48)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                List<decimal?> datos = new List<decimal?>();
                datos = LitarDatosIntercambiosElectricidad(medicionDia);

                //Energía Exportada
                string valorTexto = datos[0] != null ? datos[0].ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoEnergiaExportada,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);
                //Máxima Demanda Exportada
                valorTexto = datos[1] != null ? datos[1].ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoMaxdemExportada,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet2);
                //Energía Importada
                valorTexto = datos[2] != null ? datos[2].ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet3 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoenergiaImportada,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet3);

                //Energía Exportada
                valorTexto = datos[3] != null ? datos[3].ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet4 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoMaxdemImportada,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet4);
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiIntercambiosInternacionales,
                    Verdatvalor = medicionDia.Medifecha.ToString(ConstantesBase.FormatoFechaPE),
                    Verdatid = EPDate.f_numerosemana_y_anho(medicionDia.Medifecha).Item1,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;
        }

        private List<decimal?> LitarDatosIntercambiosElectricidad(MeMedicion48DTO medicionDia)
        {
            List<decimal?> datos = new List<decimal?>();

            // para Energias Exportadas e Importadas
            List<decimal?> lstImportacion = new List<decimal?>();
            List<decimal?> lstExportacion = new List<decimal?>();

            // para MaximaDemanadas de Energias Exportadas e Importadas
            MeMedicion48DTO medicionTotal48Exportada = new MeMedicion48DTO();
            MeMedicion48DTO medicionTotal48Importada = new MeMedicion48DTO();
            List<MeMedicion48DTO> listaMedicionTotal48Exportada = new List<MeMedicion48DTO>();
            List<MeMedicion48DTO> listaMedicionTotal48Importada = new List<MeMedicion48DTO>();

            for (int i = 1; i <= 48; i++)
            {
                var valorH = ((decimal?)medicionDia.GetType().GetProperty(ConstantesAppServicio.CaracterH + i.ToString()).GetValue(medicionDia, null));
                if (valorH != null)
                {
                    if (valorH > 0) //exportacion      
                    {
                        lstExportacion.Add(valorH); // lista con la energia exportada por cada "Hx"
                        medicionTotal48Exportada.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i)).SetValue(medicionTotal48Exportada, valorH); // obj con data exportada para el calculo de MD exportada
                    }

                    else // importacion   
                    {
                        lstImportacion.Add((valorH * (-1))); // lista con la energia importada por cada "Hx"
                        medicionTotal48Importada.GetType().GetProperty(ConstantesAppServicio.CaracterH + (i)).SetValue(medicionTotal48Importada, ((-1) * valorH)); // obj con data importada para el calculo de MD importada
                    }

                }
            }

            // set fechas para calulo de MD exportada e importada
            medicionTotal48Exportada.Medifecha = medicionDia.Medifecha;
            medicionTotal48Importada.Medifecha = medicionDia.Medifecha;

            listaMedicionTotal48Exportada.Add(medicionTotal48Exportada);
            listaMedicionTotal48Importada.Add(medicionTotal48Importada);


            //Parametros para calculo de MD
            List<SiParametroValorDTO> listaRangoNormaHP = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroRangoPeriodoHP);
            List<SiParametroValorDTO> listaBloqueHorario = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            servEjec.GetDiaMaximaDemandaFromDataMD48(medicionDia.Medifecha, medicionDia.Medifecha, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48Exportada, listaRangoNormaHP, listaBloqueHorario, 
                                                out DateTime horaMDExportada, out DateTime fechaDia48E, out int hMax48E);
            servEjec.GetDiaMaximaDemandaFromDataMD48(medicionDia.Medifecha, medicionDia.Medifecha, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48Importada, listaRangoNormaHP, listaBloqueHorario, 
                                                out DateTime horaMDImportada, out DateTime fechaDia48I, out int hMax48I);

            ResultadoTotalGeneracion dataExportada = UtilSemanalPR5.GenerarM48ValorMDFromListaByFecha(listaMedicionTotal48Exportada, horaMDExportada, 0, DateTime.Today, DateTime.Today);
            ResultadoTotalGeneracion dataImportada = UtilSemanalPR5.GenerarM48ValorMDFromListaByFecha(listaMedicionTotal48Importada, horaMDImportada, 0, DateTime.Today, DateTime.Today);


            //Obtenemos data           

            decimal? totalExportada = lstExportacion.Sum(x => x) != 0 ? lstExportacion.Sum(x => x) : null;
            decimal? maxDemExportada = dataExportada.Meditotal != 0 ? dataExportada.Meditotal : null;
            decimal? totalImportada = lstImportacion.Sum(x => x) != 0 ? lstImportacion.Sum(x => x) : null;
            decimal? maxDemImportada = dataImportada.Meditotal != 0 ? dataImportada.Meditotal : null;

            datos.Add(totalExportada);
            datos.Add(maxDemExportada);
            datos.Add(totalImportada);
            datos.Add(maxDemImportada);
            return datos;
        }

        /// <summary>
        /// ListarDatSemanalEventosyFallas
        /// </summary>
        /// <param name="objFecha"></param>
        /// <param name="fechaInicial"></param>
        /// <param name="fechaFinal"></param>
        /// <param name="mrepcodi"></param>
        /// <returns></returns>
        public List<SiVersionDatDTO> ListarDatSemanalEventosyFallas(FechasPR5 objFecha, DateTime fechaInicial, DateTime fechaFinal, int mrepcodi)
        {
            //datos
            //insumo
            List<EventoDTO> listaEventos = ObtenerEventosFallas(objFecha.FechaInicial, objFecha.FechaFinal.AddDays(1));
            List<EveCausaeventoDTO> lstCausas = GetCausasFallasCIER();
            //cálculo
            UtilSemanalPR5.ObtenerReporteEventoYFalla(listaEventos, ref lstCausas, out List<EqFamiliaDTO> listaFamilia, out List<GenericoDTO> listaFallaXFamilia);

            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var causa in lstCausas)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                foreach (var familia in listaFamilia)
                {
                    var regTotal = listaFallaXFamilia.Find(x => x.Entero2 == familia.Famcodi && x.Entero1 == causa.Causaevencodi);
                    decimal? valor = regTotal?.Entero3;
                    string valorTexto = valor != null ? valor.ToString() : "";
                    int iVercnpcodi = familia.Famcodi != 0 ? ConstantesConceptoVersion.ConceptoFecha : ConstantesConceptoVersion.ConceptoTotal;
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vdatdtid = familia.Famcodi,
                        Vercnpcodi = iVercnpcodi,
                        Vdatdtvalor = valorTexto
                    };
                    listaDet.Add(objDet);
                }

                //cabecera
                SiVersionDatDTO objDatCausa = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiFallasPorEquiposYCausa,
                    Verdatid = causa.Causaevencodi,
                    Verdatvalor = causa.Causaevendesc,
                    Verdatvalor2 = string.Format("{0}|{1}", causa.Causaevenabrev, causa.Total),
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDatCausa);
            }
            //TOTAL
            List<SiVersionDatdetDTO> listaDetTotal = new List<SiVersionDatdetDTO>();
            foreach (var familia in listaFamilia)
            {

                decimal? valor = familia.TotalXFamcodi;
                string valorTexto = valor != null ? valor.ToString() : "";
                int iVercnpcodi = familia.Famcodi != 0 ? ConstantesConceptoVersion.ConceptoFecha : ConstantesConceptoVersion.ConceptoTotal;
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vdatdtid = familia.Famcodi,
                    Vercnpcodi = iVercnpcodi,
                    Vdatdtvalor = string.Format("{0}|{1}", familia.Famnomb.Trim(), valorTexto)
                };
                listaDetTotal.Add(objDet);
            }
            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiTotalEventosFallas,
                Verdatvalor = "TOTAL",
                ListaDetalle = listaDetTotal
            };
            listaDat.Add(objDat);

            //ENERGÍA INTERRUMPIDA APROXIMADA
            List<SiVersionDatdetDTO> listaDetEneIntAprox = new List<SiVersionDatdetDTO>();
            foreach (var familia in listaFamilia)
            {
                decimal? valor = familia.TotalEnergia;
                string valorTexto = valor != null ? valor.ToString().Replace(",", ".") : "";
                int iVercnpcodi = familia.Famcodi != 0 ? ConstantesConceptoVersion.ConceptoFecha : ConstantesConceptoVersion.ConceptoTotal;
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vdatdtid = familia.Famcodi,
                    Vercnpcodi = iVercnpcodi,
                    Vdatdtvalor = string.Format("{0}|{1}", familia.Famnomb.Trim(), valorTexto)
                };
                listaDetEneIntAprox.Add(objDet);
            }
            //cabecera
            SiVersionDatDTO objDatEIA = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiTotalEnergInterrAprox,
                Verdatvalor = "ENERGÍA INTERRUMPIDA APROXIMADA",
                ListaDetalle = listaDetEneIntAprox
            };
            listaDat.Add(objDatEIA);

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalPerfilTensionBarraDeRed(DateTime fechaInicial, DateTime fechaFinal, int red)
        {
            //datos
            List<TensionBarras> lista = GetTensionBarras(red, fechaInicial, fechaFinal);
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            foreach (var barrRed in lista)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                //valor maximo
                string valorTexto = barrRed.ValorMax != null ? barrRed.ValorMax.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoMaxTensionBarraRed,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);

                //valor medio
                valorTexto = barrRed.ValorMed != null ? barrRed.ValorMed.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoMedTensionBarraRed,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);

                //valor minimo
                valorTexto = barrRed.ValorMin != null ? barrRed.ValorMin.ToString().Replace(",", ".") : "";
                objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodigoMinTensionBarraRed,
                    Vdatdtvalor = valorTexto
                };
                listaDet.Add(objDet);

                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorTensionBarraRed,
                    Verdatid = barrRed.Ptomedicodi,
                    Verdatvalor = barrRed.Ptomedidesc,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatFlujosMaximoInterconexiones(int ReptipCodi, FechasPR5 objFecha, DateTime fechaInicial, DateTime fechaFinal)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //datos
            List<MeReporteDTO> listaReporte = ListarRptFlujoInterSemanal(ReptipCodi, objFecha);

            foreach (var objRpt in listaReporte)
            {
                //datos
                ObtenerDataPotenciaMaximaTransmitidaXPuntos(objRpt.Reporcodi, fechaInicial, fechaFinal,
                    out List<MeReporptomedDTO> listaPuntos, out List<MeMedicion48DTO> listaMD48, out List<MeMedicion48DTO> listaDetalle48);

                foreach (var regPto in listaPuntos)
                {

                    List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                    for (DateTime fecha = fechaInicial; fecha <= fechaFinal; fecha = fecha.AddDays(1))
                    {
                        var objMaxDem = listaMD48.Find(x => x.Medifecha == fecha);
                        var fechaString = objMaxDem.TiempoMaximaDemanda;
                        string format = "dd/MM/yyyy - HH:mm'h'";
                        CultureInfo provider = CultureInfo.InvariantCulture;

                        DateTime fechaTitulo = new DateTime();

                        //convertimo la fecha en un DateTime
                        try
                        {
                            fechaTitulo = DateTime.ParseExact(fechaString, format, provider);
                        }
                        catch (FormatException)
                        {
                            fechaTitulo = new DateTime();
                        }

                        //valor
                        decimal? valMaxDemPto = listaDetalle48.FirstOrDefault(x => x.Medifecha == fecha && x.Ptomedicodi == regPto.Ptomedicodi)?.Maximo;

                        //valor datdet
                        string valorTexto = valMaxDemPto != null ? valMaxDemPto.ToString().Replace(",", ".") : "";
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoValorFMInterconexiones,
                            Vdatdtfecha = fechaTitulo,
                            Vdatdtvalor = valorTexto
                        };
                        listaDet.Add(objDet);
                    }

                    var codiReporte = 0;
                    //codigo del reporte
                    if (objRpt.Reporcodi == ConstantesPR5ReportesServicio.IdReporteInfSemInterconexionCentroNorte
                        || objRpt.Reporcodi == ConstantesPR5ReportesServicio.IdReporteEjecSemInterconexionCentroNorte)
                    {
                        codiReporte = ConstantesConceptoVersion.ConceptoCodigoFMInterconexionesNorte;
                    }
                    else
                    {
                        codiReporte = ConstantesConceptoVersion.ConceptoCodigoFMInterconexionesSur;
                    }

                    //cabecera dat
                    SiVersionDatDTO objDat = new SiVersionDatDTO()
                    {
                        Vercnpcodi = codiReporte,
                        Verdatid = regPto.Ptomedicodi,
                        Verdatvalor = regPto.Repptonomb,
                        ListaDetalle = listaDet
                    };
                    listaDat.Add(objDat);
                }
            }

            return listaDat;
        }

        /// <summary>
        /// ListaVersionByFechaInformeSemanal
        /// </summary>
        /// <param name="dFecha"></param>
        /// <returns></returns>
        public List<SiVersionDTO> ListaVersionByFechaInformeSemanal(DateTime dFecha)
        {
            List<SiVersionDTO> lista = this.ListaVersionByFecha(dFecha, ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal);

            return lista;
        }

        private List<SiVersionDatDTO> ListarDatSemanalMaximaDemandaXEmpresa(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            List<MaximaDemandaDTO> listaMDCoincidenteDataDesc = new List<MaximaDemandaDTO>();
            List<SiEmpresaDTO> listaEmpresa = new List<SiEmpresaDTO>();
            List<ResultadoTotalGeneracion> listaReporteXEmpresa = new List<ResultadoTotalGeneracion>();
            List<ResultadoTotalGeneracion> listaReporteXTotal = new List<ResultadoTotalGeneracion>();
            //Datos            
            if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiInformeSemanal)
            {
                CargarMaximaDemandaXEmpresaSemanalInfSem(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc2, out List<SiEmpresaDTO> listaEmpresa2,
                                out List<ResultadoTotalGeneracion> listaReporteXEmpresa2, out List<ResultadoTotalGeneracion> listaReporteXTotal2);
                listaMDCoincidenteDataDesc = listaMDCoincidenteDataDesc2;
                listaEmpresa = listaEmpresa2;
                listaReporteXEmpresa = listaReporteXEmpresa2;
                listaReporteXTotal = listaReporteXTotal2;
            }
            else
            {
                if (objFecha.TipoReporte == ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal)
                {
                    CargarMaximaDemandaXEmpresaSemanalEjecSem(objFecha, out List<MaximaDemandaDTO> listaMDCoincidenteDataDesc2, out List<SiEmpresaDTO> listaEmpresa2,
                    out List<ResultadoTotalGeneracion> listaReporteXEmpresa2, out List<ResultadoTotalGeneracion> listaReporteXTotal2);
                    listaMDCoincidenteDataDesc = listaMDCoincidenteDataDesc2;
                    listaEmpresa = listaEmpresa2;
                    listaReporteXEmpresa = listaReporteXEmpresa2;
                    listaReporteXTotal = listaReporteXTotal2;
                }
            }




            List<int> listaTipoResultado = new List<int>() { PR5ConstanteFecha.ValorAnioAct_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct_Var };

            foreach (int tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                string valorCab2 = "";
                int iVercnpcodi = 0;
                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioActual;
                        valorCab = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia;
                        valorCab2 = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora;
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaAnioAnterior;
                        valorCab = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyDia;
                        valorCab2 = listaMDCoincidenteDataDesc.Find(x => x.TipoResultadoFecha == tipoResultado).FechaOnlyHora;
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiMaxDemandaVariacion;
                        valorCab = "Var%";
                        valorCab2 = "";
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior;
                        break;
                }
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var obj in listaEmpresa)
                {
                    RegistroReporte registro = new RegistroReporte();
                    List<CeldaReporte> datos = new List<CeldaReporte>();
                    List<string> filtroDatos = new List<string>();

                    var regSem1 = listaReporteXEmpresa.Find(x => x.TipoResultadoFecha == tipoResultado && x.Emprcodi == obj.Emprcodi);
                    string empresa = obj.Emprnomb.Trim();

                    //detalle
                    string valorTexto = regSem1.Meditotal != null ? regSem1.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iVercnpcodi,
                        Vdatdtvalor = string.Format("{0}|{1}", valorTexto, empresa),
                        Vdatdtid = obj.Emprcodi

                    };
                    listaDet.Add(objDet);
                }
                //totales
                var regSemTotal = listaReporteXTotal.Find(x => x.TipoResultadoFecha == tipoResultado);

                //detalle
                string valorTexto2 = regSemTotal.Meditotal != null ? regSemTotal.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto2
                };
                listaDet.Add(objDet2);
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    Verdatvalor2 = valorCab2,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;

        }

        public List<SiVersionDatDTO> ListarDatSemanalParticipacionEmpresas(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                        
            CargaProduccionEmpresasIntegrantes(objFecha, out List<SiEmpresaDTO> listaEmpresa, out List<ResultadoTotalGeneracion> listaReporteXEmpresa, out List<ResultadoTotalGeneracion> listaReporteXTotal);


            List<int> listaTipoResultado = new List<int>() { PR5ConstanteFecha.ValorAnioAct_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct_Var };

            foreach (int tipoResultado in listaTipoResultado)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                int iVercnpcodi = 0;
                switch (tipoResultado)
                {
                    case PR5ConstanteFecha.ValorAnioAct_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiParticipacionProdAnioActual;
                        valorCab = string.Format("{0}-{1}", objFecha.AnioAct.RangoAct_Num, objFecha.AnioAct.NumAnio); ;
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                        break;
                    case PR5ConstanteFecha.ValorAnio1Ant_SemAct:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiParticipacionProdAnioAnterior;
                        valorCab = string.Format("{0}-{1}", objFecha.AnioAct.RangoAct_Num, objFecha.Anio1Ant.NumAnio);
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoFecha;
                        break;
                    case PR5ConstanteFecha.ValorAnioAct_SemAct_Var:
                        codigoConcepto = ConstantesConceptoVersion.ConceptoCodiParticipacionProdVariacion;
                        valorCab = "Var%";
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior;
                        break;
                }
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                foreach (var obj in listaEmpresa)
                {
                    RegistroReporte registro = new RegistroReporte();
                    List<CeldaReporte> datos = new List<CeldaReporte>();
                    List<string> filtroDatos = new List<string>();

                    var regSem1 = listaReporteXEmpresa.Find(x => x.TipoResultadoFecha == tipoResultado && x.Emprcodi == obj.Emprcodi);
                    string empresa = obj.Emprnomb.Trim();

                    //detalle
                    string valorTexto = regSem1.Meditotal != null ? regSem1.Meditotal.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = iVercnpcodi,
                        Vdatdtvalor = string.Format("{0}|{1}", valorTexto, empresa),
                        Vdatdtid = obj.Emprcodi

                    };
                    listaDet.Add(objDet);
                }
                //totales
                var regSemTotal = listaReporteXTotal.Find(x => x.TipoResultadoFecha == tipoResultado);

                //detalle
                string valorTexto2 = regSemTotal.Meditotal != null ? regSemTotal.Meditotal.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = valorTexto2
                };
                listaDet.Add(objDet2);
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }
            return listaDat;

        }

        private List<SiVersionDatDTO> ListarDatSemanalDemandaGUMaximaDemanda(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            ListarDemandaGUMaximaDemandaSemanal(objFecha, out List<SiEmpresaDTO> listaULByPto, out List<MeMedicion48DTO> listaULByArea, out List<MeMedicion48DTO> listaDataUL30min,
                                    out DemandadiaDTO objHFP_HP, out DemandadiaDTO objMDFromRango);

            List<int> listaTipoResultado = new List<int>() { PR5ConstanteFecha.ValorAnioAct_SemAct, PR5ConstanteFecha.ValorAnio1Ant_SemAct, PR5ConstanteFecha.ValorAnioAct_SemAct_Var };

            #region Datos Tabla WEB

            for (var i = 0; i < 2; i++)
            {
                int codigoConcepto = 0;
                string valorCab = "";
                string valorCab2 = "";
                if (i == 0)
                {
                    codigoConcepto = ConstantesConceptoVersion.ConceptoCodiDemandaGUHPF;
                    valorCab = string.Format("{0}|{1}|{2}", objMDFromRango.Medifecha.ToString(ConstantesAppServicio.FormatoFechaFullSeg), objMDFromRango.FechaMD, objMDFromRango.HoraMD);
                    valorCab2 = string.Format("{0}", objHFP_HP.MedifechaHFP);
                }
                else
                {
                    codigoConcepto = ConstantesConceptoVersion.ConceptoCodiDemandaGUHP;
                    valorCab = string.Format("{0}|{1}|{2}", objMDFromRango.Medifecha.ToString(ConstantesAppServicio.FormatoFechaFullSeg), objMDFromRango.FechaMD, objMDFromRango.HoraMD);
                    valorCab2 = string.Format("{0}", objHFP_HP.MedifechaHP);
                }

                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                var listaDataUL = listaULByPto.OrderBy(x => x.OrdenArea).ThenByDescending(x => x.Total).ToList();
                foreach (var d in listaDataUL)
                {

                    //detalle
                    string valTexto = (i == 0) ? (d.HFP != null ? d.HFP.ToString().Replace(",", ".") : "") : (d.HP != null ? d.HP.ToString().Replace(",", ".") : "");
                    SiVersionDatdetDTO objDet01 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = string.Format("{0}|{1}|{2}|{3}|{4}", valTexto, d.Emprnomb, d.AreaOperativa, d.OrdenArea, d.Total),
                        Vdatdtid = d.Emprcodi

                    };
                    listaDet.Add(objDet01);

                }
                //totales/resumen
                string valorTexto = (i == 0) ? (objHFP_HP.ValorHFPUL.ToString().Replace(",", ".")) : objHFP_HP.ValorHPUL.ToString().Replace(",", ".");
                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual,
                    Vdatdtvalor = valorTexto,
                };
                listaDet.Add(objDet);

                valorTexto = (i == 0) ? (objHFP_HP.ValorHFP.ToString().Replace(",", ".")) : (objHFP_HP.ValorHP.ToString().Replace(",", "."));
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior,
                    Vdatdtvalor = valorTexto,
                };
                listaDet.Add(objDet2);


                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = codigoConcepto,
                    Verdatvalor = valorCab,
                    Verdatvalor2 = valorCab2,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #endregion

            #region Datos Gráfico Lineas Grandes Usuarios

            foreach (var reg in listaULByArea)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                for (int h = 1; h <= 48; h++)
                {
                    decimal? valH = (decimal?)reg.GetType().GetProperty(ConstantesAppServicio.CaracterH + h.ToString()).GetValue(reg, null);

                    //detalle
                    string valTexto = valH != null ? valH.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDetGraf = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = valTexto,
                        Vdatdtid = h
                    };
                    listaDet.Add(objDetGraf);
                }
                //cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoGU,
                    Verdatvalor = reg.Ptomedidesc,
                    Verdatid = reg.Ptomedicodi,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalDemandaGUXAreaOperativa(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                                    
            ListarDemandaGUMaximaDemandaSemanalXAreaOperativa(objFecha, out List<SiEmpresaDTO> listaEmpresaArea, out List<MeMedicion48DTO> listaReporteXPto, out List<MeMedicion48DTO> listaReporteXArea, out List<MeMedicion48DTO> listaReporteEvolSemanal);
            var listaArea = UtilSemanalPR5.GetListaReporteUL(true);

            #region Datos Tabla WEB

            foreach (var r in listaArea)
            {
                var listaPtosXArea = listaEmpresaArea.Where(x => x.AreaOperativa == r.AreaOperativa).ToList();
                foreach (var d in listaPtosXArea)
                {
                    List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                    var listaDataXPto = listaReporteXPto.Where(x => x.Emprcodi == d.Emprcodi && x.AreaOperativa == d.AreaOperativa).ToList();
                    var regSem1 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                    var regSem2 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                    var regSemVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
                    var regAcum1 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                    var regAcum2 = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                    var regAcumVar = listaDataXPto.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                    //detalle SOP año actual
                    string valTexto1 = regSem1.Meditotal != null ? regSem1.Meditotal.Value.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet1 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual,
                        Vdatdtvalor = valTexto1,
                    };
                    listaDet.Add(objDet1);

                    //detalle SOP año anterior
                    string valTexto2 = regSem2.Meditotal != null ? regSem2.Meditotal.Value.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior,
                        Vdatdtvalor = valTexto2,
                    };
                    listaDet.Add(objDet2);

                    //detalle SOP variación
                    string valTexto3 = regSemVar.Meditotal != null ? regSemVar.Meditotal.Value.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet3 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior,
                        Vdatdtvalor = valTexto3,
                    };
                    listaDet.Add(objDet3);

                    //detalle Dem Acum año actual
                    string valTexto4 = regAcum1.Meditotal != null ? regAcum1.Meditotal.Value.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet4 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual,
                        Vdatdtvalor = valTexto4,
                    };
                    listaDet.Add(objDet4);

                    //detalle Dem Acum año anterior
                    string valTexto5 = regAcum2.Meditotal != null ? regAcum2.Meditotal.Value.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet5 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioAnterior,
                        Vdatdtvalor = valTexto5,
                    };
                    listaDet.Add(objDet5);

                    //detalle Dem Acum variación
                    string valTexto6 = regAcumVar.Meditotal != null ? regAcumVar.Meditotal.Value.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet6 = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumVariacionAnioActualVsAnioAnt,
                        Vdatdtvalor = valTexto6,
                    };
                    listaDet.Add(objDet6);

                    //Cabecera
                    SiVersionDatDTO objDat = new SiVersionDatDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiDemandaAreaOpeGU,
                        Verdatvalor = d.Emprnomb,
                        Verdatvalor2 = d.AreaOperativa,
                        Verdatid = d.Emprcodi,
                        ListaDetalle = listaDet
                    };
                    listaDat.Add(objDat);
                }
            }

            //Resumén
            for (var i = 0; i < 4; i++)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                int iVercnpcodi = 0;
                string sVerdatvalor = string.Empty;
                string sVerdatvalor2 = string.Empty;


                switch (i)
                {
                    case 0:
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiDemandaEnergiaElectricaNorte;
                        sVerdatvalor = "Demanda de Energía Eléctrica";
                        sVerdatvalor2 = listaArea[i].AreaOperativa;
                        break;
                    case 1:
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiDemandaEnergiaElectricaCentro;
                        sVerdatvalor = "Demanda de Energía Eléctrica";
                        sVerdatvalor2 = listaArea[i].AreaOperativa;
                        break;
                    case 2:
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiDemandaEnergiaElectricaSur;
                        sVerdatvalor = "Demanda de Energía Eléctrica";
                        sVerdatvalor2 = listaArea[i].AreaOperativa;
                        break;
                    case 3:
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiTotalDemandaEnergiaGranUsuario;
                        sVerdatvalor = "Total Demanda de energía del Gran Usuario en el SEIN";
                        sVerdatvalor2 = listaArea[i].AreaOperativa;
                        break;
                }

                var listaDataXArea = listaReporteXArea.Where(x => x.AreaOperativa == listaArea[i].AreaOperativa).ToList();
                var regSem1 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct);
                var regSem2 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_SemAct);
                var regSemVar = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_SemAct_Var);
                var regAcum1 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum);
                var regAcum2 = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnio1Ant_Acum);
                var regAcumVar = listaDataXArea.Find(x => x.TipoResultadoFecha == PR5ConstanteFecha.ValorAnioAct_Acum_Var);

                //detalle SOP año actual
                string valTexto1 = regSem1.Meditotal != null ? regSem1.Meditotal.Value.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet1 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioActual,
                    Vdatdtvalor = valTexto1,
                };
                listaDet.Add(objDet1);

                //detalle SOP año anterior
                string valTexto2 = regSem2.Meditotal != null ? regSem2.Meditotal.Value.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet2 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoAcumuladoAnioAnterior,
                    Vdatdtvalor = valTexto2,
                };
                listaDet.Add(objDet2);

                //detalle SOP variación
                string valTexto3 = regSemVar.Meditotal != null ? regSemVar.Meditotal.Value.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet3 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoVariacionAcumAnioActualVsAnterior,
                    Vdatdtvalor = valTexto3,
                };
                listaDet.Add(objDet3);

                //detalle Dem Acum año actual
                string valTexto4 = regAcum1.Meditotal != null ? regAcum1.Meditotal.Value.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet4 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioActual,
                    Vdatdtvalor = valTexto4,
                };
                listaDet.Add(objDet4);

                //detalle Dem Acum año anterior
                string valTexto5 = regAcum2.Meditotal != null ? regAcum2.Meditotal.Value.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet5 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumAnioAnterior,
                    Vdatdtvalor = valTexto5,
                };
                listaDet.Add(objDet5);

                //detalle Dem Acum variación
                string valTexto6 = regAcumVar.Meditotal != null ? regAcumVar.Meditotal.Value.ToString().Replace(",", ".") : "";
                SiVersionDatdetDTO objDet6 = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoValorDemandaAcumVariacionAnioActualVsAnioAnt,
                    Vdatdtvalor = valTexto6,
                };
                listaDet.Add(objDet6);

                //Cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = iVercnpcodi,
                    Verdatvalor = sVerdatvalor,
                    Verdatvalor2 = sVerdatvalor2,
                    ListaDetalle = listaDet
                };
                listaDat.Add(objDat);
            }

            #endregion

            #region Datos Gráfico Barras/Lineas Grandes Usuarios

            Tuple<int, int> anioSemIni = EPDate.f_numerosemana_y_anho(objFecha.AnioAct.RangoAct_FechaIni);
            listaArea[3].Repornombre = "Var (%)";

            List<string> listaCateg = new List<string>();
            for (int c = 1; c <= anioSemIni.Item1; c++)
            {
                listaCateg.Add(c.ToString());
            }

            for (int cc = 0; cc < listaArea.Count; cc++)
            {
                List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

                for (int c = 1; c <= listaCateg.Count; c++)
                {
                    DateTime fechaProceso = objFecha.AnioAct.Sem01_FechaIni.AddDays(7 * (c - 1));
                    var regDataXAreaXSem = listaReporteEvolSemanal.Find(x => x.AreaOperativa == listaArea[cc].AreaOperativa && x.Medifecha == fechaProceso);

                    //detalle 
                    string valTexto = regDataXAreaXSem?.Meditotal != null ? regDataXAreaXSem?.Meditotal.Value.ToString().Replace(",", ".") : "";
                    SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                    {
                        Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                        Vdatdtvalor = valTexto,
                        Vdatdtfecha = regDataXAreaXSem.Medifecha
                    };
                    listaDet.Add(objDet);
                }
                //Cabecera
                SiVersionDatDTO objDat = new SiVersionDatDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoGrandesUsuariosLibres,
                    Verdatvalor = listaArea[cc].Repornombre,
                    Verdatvalor2 = listaArea[cc].AreaOperativa,
                    Verdatid = listaArea[cc].Orden,
                    ListaDetalle = listaDet
                };

                listaDat.Add(objDat);
            }
            #endregion

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatSemanalDiagramaCargaGURangoPotencia(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();

            //Datos                                    
            ListarDemandaGUMaximaDemandaSemanal(objFecha, out List<SiEmpresaDTO> listaULByPto, out List<MeMedicion48DTO> listaULByArea, out List<MeMedicion48DTO> listaDataUL30min,
                        out DemandadiaDTO objHFP_HP, out DemandadiaDTO objMDFromRango);

            List<int> listaTipoRangoUL = new List<int>() { ConstantesPR5ReportesServicio.TipoRangoMayor100, ConstantesPR5ReportesServicio.TipoRangoEntre30y100, ConstantesPR5ReportesServicio.TipoRangoEntre20y30, ConstantesPR5ReportesServicio.TipoRangoMenor20 };

            foreach (int tipoRangoUL in listaTipoRangoUL)
            {
                int iVercnpcodi = 0;
                switch (tipoRangoUL)
                {
                    case ConstantesPR5ReportesServicio.TipoRangoMayor100:
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMayor100;
                        break;
                    case ConstantesPR5ReportesServicio.TipoRangoEntre30y100:
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMe30_100;
                        break;
                    case ConstantesPR5ReportesServicio.TipoRangoEntre20y30:
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMe20_30;
                        break;
                    case ConstantesPR5ReportesServicio.TipoRangoMenor20:
                        iVercnpcodi = ConstantesConceptoVersion.ConceptoCodiGraficoCargaRangosGUMenor20;
                        break;

                }


                var lista = listaULByPto.Where(x => x.TipoRango == tipoRangoUL).OrderByDescending(x => x.Maximo).ToList();

                List<string> listaCateg = new List<string>();
                DateTime f_ = DateTime.MinValue;
                for (int x = 1; x <= 48; x++) { listaCateg.Add(f_.AddMinutes(30 * x).ToString("HH:mm")); }

                int cc = 0;
                foreach (var reg in lista)
                {
                    var reg48 = listaDataUL30min.Find(x => x.Emprcodi == reg.Emprcodi && x.AreaOperativa == reg.AreaOperativa) ?? new MeMedicion48DTO();
                    List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();
                    for (int h = 1; h <= 48; h++)
                    {
                        decimal? valH = (decimal?)reg48.GetType().GetProperty(ConstantesAppServicio.CaracterH + h.ToString()).GetValue(reg48, null);

                        //detalle 
                        string valTexto = valH != null ? valH.ToString().Replace(",", ".") : "";
                        SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                        {
                            Vercnpcodi = ConstantesConceptoVersion.ConceptoFecha,
                            Vdatdtvalor = valTexto,
                            Vdatdtid = h
                        };
                        listaDet.Add(objDet);
                    }
                    cc++;
                    //Cabecera
                    string valMaximo = reg.Maximo.ToString().Replace(",", ".");

                    SiVersionDatDTO objDat = new SiVersionDatDTO()
                    {
                        Vercnpcodi = iVercnpcodi,
                        Verdatid = reg.Emprcodi,
                        Verdatvalor = string.Format("{0}|{1}|{2}", reg.Emprnomb, reg.AreaOperativa, objMDFromRango.Medifecha.ToString(ConstantesAppServicio.FormatoFecha)),
                        Verdatvalor2 = valMaximo,
                        ListaDetalle = listaDet
                    };
                    listaDat.Add(objDat);
                }
            }
            return listaDat;
        }

        public List<SiVersionDatDTO> ListarDatSemanalDetalleEventos(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            //Datos            
            List<EventoDTO> listaEventos = this.ObtenerDetalleEventos(objFecha.FechaInicial, objFecha.FechaFinal);

            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

            foreach (EventoDTO entity in listaEventos)
            {
                string valorTexto = entity.INTERRMW != null ? entity.INTERRMW.ToString().Replace(",", ".") : "";
                string valorTexto2 = entity.BAJOMW != null ? entity.BAJOMW.ToString().Replace(",", ".") : "";

                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}|{2}|{3}", entity.EMPRNOMB.Trim(), entity.EQUIABREV.Trim(), valorTexto, valorTexto2),
                    Vdatdtfecha = entity.EVENINI,
                    Vdatdtid = (int)entity.EVENCODI
                };
                listaDet.Add(objDet);
            }

            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiEventosDetalle,
                Verdatvalor = "Detalles de los Eventos",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);

            return listaDat;
        }

        private List<SiVersionDatDTO> ListarDatEjecSemanalDetalleEventos(FechasPR5 objFecha)
        {
            //Convertir a DAT
            List<SiVersionDatDTO> listaDat = new List<SiVersionDatDTO>();
            //Datos            
            List<EventoDTO> listaEventos = this.ObtenerDetalleEventos(objFecha.FechaInicial, objFecha.FechaFinal);

            List<SiVersionDatdetDTO> listaDet = new List<SiVersionDatdetDTO>();

            foreach (EventoDTO entity in listaEventos)
            {

                /* Estos valores se consultan directo de la tabla
                entity.EVENASUNTO
                entity.EVENDESC */

                string valorTexto = entity.INTERRMW != null ? entity.INTERRMW.ToString().Replace(",", ".") : "";
                string valorTexto2 = entity.BAJOMW != null ? entity.BAJOMW.ToString().Replace(",", ".") : "";
                string valorTexto3 = entity.ENERGIAINTERRUMPIDA != null ? entity.ENERGIAINTERRUMPIDA.ToString().Replace(",", ".") : "";
                string valorTextoDur = entity.Interrminu.ToString().Replace(",", ".");

                SiVersionDatdetDTO objDet = new SiVersionDatdetDTO()
                {
                    Vercnpcodi = ConstantesConceptoVersion.ConceptoTotal,
                    Vdatdtvalor = string.Format("{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}", entity.EMPRNOMB.Trim(), entity.EQUIABREV.Trim(), entity.SUBCAUSAABREV.Trim(), entity.FAMNOMB.Trim(),
                                                                    ((DateTime)entity.EVENFIN).ToString(ConstantesAppServicio.FormatoFechaFull2),
                                                                    valorTextoDur, valorTexto, valorTexto2, valorTexto3),
                    Vdatdtfecha = entity.EVENINI,
                    Vdatdtid = (int)entity.EVENCODI
                };
                listaDet.Add(objDet);
            }

            //cabecera
            SiVersionDatDTO objDat = new SiVersionDatDTO()
            {
                Vercnpcodi = ConstantesConceptoVersion.ConceptoCodiEventosDetalle,
                Verdatvalor = "Detalles de los Eventos",
                ListaDetalle = listaDet
            };
            listaDat.Add(objDat);

            return listaDat;
        }

        #endregion

        #region Generación de Versión de Ejecutivo Semanal

        /// <summary>
        /// GuardarVersionEjecSemanal
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="versfechaperiodo"></param>
        public void GuardarVersionEjecSemanal(int verscodi, DateTime versfechaperiodo)
        {
            DateTime fechaInicial = versfechaperiodo;
            DateTime fechaFinal = fechaInicial.AddDays(6);
            FechasPR5 objFecha = UtilSemanalPR5.ObtenerFechasEjecutivoSemanal(fechaInicial, fechaFinal);

            List<SiVersionDetDTO> listaNumeralXVersion = new List<SiVersionDetDTO>();

            #region Resúmen Relevante

            SiVersionDetDTO objNumRR = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexResumenRelevante,
                ListaDat = ListarDatSemanalResumenrelevante(objFecha)
            };
            listaNumeralXVersion.Add(objNumRR);

            #endregion

            #region 1.1. Ingreso en Operación Comercial al SEIN

            SiVersionDetDTO objNum11 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexIngresoOpComercSEIN,
                ListaDat = ListarDatSemanalIngresoOpComercSEIN(objFecha, (int)ConstantesPR5ReportesServicio.TipoOperacion.Ingreso)
            };
            listaNumeralXVersion.Add(objNum11);

            #endregion

            #region 1.2. Retiro de Operación Comercial

            SiVersionDetDTO objNum112 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexRetiroOpComercSEIN,
                ListaDat = ListarDatSemanalIngresoOpComercSEIN(objFecha, (int)ConstantesPR5ReportesServicio.TipoOperacion.Retiro)
            };
            listaNumeralXVersion.Add(objNum112);

            #endregion

            #region 2.1. Producción RER

            SiVersionDetDTO objNum21 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdTipoGen,
                ListaDat = ListarDatSemanalProdTipoGen(objFecha)
            };
            listaNumeralXVersion.Add(objNum21);

            #endregion

            #region 2.2. Producción RER

            SiVersionDetDTO objNum22 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdTipoRecurso,
                ListaDat = ListarDatSemanalProduccionRecurso(objFecha)
            };
            listaNumeralXVersion.Add(objNum22);

            #endregion

            #region 2.3. Producción RER

            SiVersionDetDTO objNum23 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexProdRER,
                ListaDat = ListarDatSemanalProduccionRER(objFecha)
            };
            listaNumeralXVersion.Add(objNum23);

            #endregion

            #region 2.4. Factor de planta de las centrales RER

            SiVersionDetDTO objNum24 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexFactorPlantaRER,
                ListaDat = ListarDatSemanalFactorPlantaCentralesRER(objFecha)
            };
            listaNumeralXVersion.Add(objNum24);

            #endregion

            #region 3.1. EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)

            SiVersionDetDTO objNum31 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaTipoGeneracionEjecut,
                ListaDat = ListarDatSemanalMaximaDemandaTipoGeneracion(objFecha)
            };
            listaNumeralXVersion.Add(objNum31);

            #endregion

            #region 3.2 PARTICIPACIÓN DE LAS EMPRESAS INTEGRANTES EN LA MÁXIMA DEMANDA COINCIDENTE (MW)

            SiVersionDetDTO objNum32 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexMaximaDemandaXEmpresaEjecut,
                ListaDat = ListarDatSemanalMaximaDemandaXEmpresa(objFecha)
            };
            listaNumeralXVersion.Add(objNum32);

            #endregion

            #region 3.3. EVOLUCIÓN DE LA DEMANDA POR ÁREAS OPERATIVAS DEL SEIN (GWh)

            SiVersionDetDTO objNum33 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexDemandaXAreaOpeEjecut,
                ListaDat = ListarDatSemanalEvolucionDemandaAreaOperativa(objFecha)
            };
            listaNumeralXVersion.Add(objNum33);

            #endregion

            #region 4.1 Volumen útil de los embalses y lagunas (Mm3)

            SiVersionDetDTO objNum41 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexVolUtilEmbLag,
                ListaDat = ListarDatSemanalVolumenUtil(objFecha, ConstantesEjecutivoSemanalPR5.IndexVolUtilEmbLag)
            };
            listaNumeralXVersion.Add(objNum41);

            #endregion

            #region 4.2. Evolucion de volumenes de embalses y lagunas (Mm3)

            SiVersionDetDTO objNum42 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEvolucionVolEmbLag,
                ListaDat = ListarDatSemanalEvolucionVolumenUtil(objFecha, ConstantesEjecutivoSemanalPR5.IndexEvolucionVolEmbLag)
            };
            listaNumeralXVersion.Add(objNum42);

            #endregion

            #region 4.3. Promedio semanal de los caudales (m3/s)

            SiVersionDetDTO objNum43 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexPromCaudales,
                ListaDat = ListarDatSemanalPromedioCaudales(objFecha, ConstantesEjecutivoSemanalPR5.IndexPromCaudales)
            };
            listaNumeralXVersion.Add(objNum43);

            #endregion

            #region 4.4. Evolución de los caudales

            SiVersionDetDTO objNum54 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEvolucionCaudalesEjecut,
                ListaDat = ListarDatSemanalEvolucionCaudal(objFecha, ConstantesEjecutivoSemanalPR5.IndexEvolucionCaudalesEjecut)
            };
            listaNumeralXVersion.Add(objNum54);

            #endregion

            #region 5. COSTO DE OPERACIÓN EJECUTADO ACUMULADO SEMANAL DEL SEIN (Millones de S/.)

            SiVersionDetDTO objNum5 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEvolCostosOperacionEjecutados,
                ListaDat = ListarDatSemanalCostosOperacionEjecutado(objFecha, ConstantesEjecutivoSemanalPR5.IndexEvolCostosOperacionEjecutados, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum5);

            #endregion

            #region 6. COSTOS MARGINALES PROMEDIO NODALES DIARIOS DEL SEIN (US$/MWh)

            SiVersionDetDTO objNum6 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm,
                ListaDat = ListarDatSemanalCostosMarginalesPromSantaRosaEjec(objFecha, ConstantesEjecutivoSemanalPR5.IndexEvolCostosMarginalesProm, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum6);

            #endregion

            #region 7. FLUJOS DE INTERCONEXIÓN EN ÁREAS OPERATIVAS DEL SEIN (MW)

            SiVersionDetDTO objNum71 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexFlujoMaximoInterconexionesEjecut,
                ListaDat = ListarDatFlujosMaximoInterconexiones(ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal, objFecha, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum71);

            #endregion

            #region 8.1 HORAS DE CONGESTIÓN EN LAS PRINCIPALES EQUIPOS DE TRANSMISIÓN DEL SEIN (Horas)

            SiVersionDetDTO objNum81 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexHorasCongestionAreaOpeEjecut,
                ListaDat = ListarDatSemanalHorasCongestionPorArea(objFecha)
            };
            listaNumeralXVersion.Add(objNum81);

            #endregion

            //#region 9. CONSUMO DE COMBUSTIBLE EN EL SEIN

            //SiVersionDetDTO objNum9 = new SiVersionDetDTO()
            //{
            //    Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexConsumoCombustibleEjecut,
            //    ListaDat = ListarDatSemanalConsumoCombustible(fechaInicial, fechaFinal)
            //};
            //listaNumeralXVersion.Add(objNum9);

            //#endregion

            #region 10.1 INTERCAMBIOS INTERNACIONALES

            SiVersionDetDTO objNum10 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexIntercambioInternacionalesEjecut,
                ListaDat = ListarDatSemanalIntercambioInternacional(objFecha, ConstantesEjecutivoSemanalPR5.IndexIntercambioInternacionalesEjecut, fechaInicial, fechaFinal)
            };
            listaNumeralXVersion.Add(objNum10);

            #endregion

            #region 11.1. Fallas por tipo de equipo y causa según clasificación CIER

            SiVersionDetDTO objNum111 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEventoFallaSuministroEnergEjecut,
                ListaDat = ListarDatSemanalEventosyFallas(objFecha, fechaInicial, fechaFinal, ConstantesEjecutivoSemanalPR5.IndexEventoFallaSuministroEnergEjecut)
            };
            listaNumeralXVersion.Add(objNum111);

            #endregion

            #region 11.2 Listado Detalles de los  EVENTOS

            SiVersionDetDTO objNum0112 = new SiVersionDetDTO()
            {
                Mrepcodi = ConstantesEjecutivoSemanalPR5.IndexEventoDetalleEvento,
                ListaDat = ListarDatEjecSemanalDetalleEventos(objFecha)
            };
            listaNumeralXVersion.Add(objNum0112);

            #endregion

            GuardarTransaccionVersionYDetalle(verscodi, listaNumeralXVersion);
        }

        /// <summary>
        /// ListaVersionByFechaEjecutivoSemanal
        /// </summary>
        /// <param name="dFecha"></param>
        /// <returns></returns>
        public List<SiVersionDTO> ListaVersionByFechaEjecutivoSemanal(DateTime dFecha)
        {
            List<SiVersionDTO> lista = this.ListaVersionByFecha(dFecha, ConstantesPR5ReportesServicio.ReptipcodiEjecutivoSemanal);

            return lista;
        }

        #endregion

        #region Generación de Versión de Informe Anual

        /// <summary>
        /// ListaVersionByFechaInformeAnual
        /// </summary>
        /// <param name="dFecha"></param>
        /// <returns></returns>
        public List<SiVersionDTO> ListaVersionByFechaInformeAnual(DateTime dFecha)
        {
            List<SiVersionDTO> lista = this.ListaVersionByFecha(dFecha, ConstantesPR5ReportesServicio.ReptipcodiInformeAnual);

            return lista;
        }

        #endregion

        #region Manejo de Archivos

        /// <summary>
        /// Permite obtener la carpeta principal de PR05
        /// </summary>
        /// <returns></returns>
        public string GetPathPrincipal()
        {
            //- Definimos la carpeta raiz (termina con /)
            string pathRaiz = FileServer.GetDirectory();
            return pathRaiz;
        }

        /// <summary>
        /// Permite obtener la ruta de los archivos con la corrida
        /// </summary>
        /// <param name="modulo"></param>
        /// <returns></returns>
        public string GetPathSubcarpeta(string modulo)
        {
            if (string.IsNullOrEmpty(modulo)) throw new ArgumentException("Debe seleccionar módulo.");

            //- Seteamos la carpeta correspondiente al dia
            string pathSubcarpeta = ConstantesPR5ReportesServicio.FolderRaizPR5 + modulo + @"/";
            return pathSubcarpeta;
        }

        /// <summary>
        /// GetCarpetaVersionExcelAnexoA
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public string GetCarpetaVersionExcelAnexoA(DateTime fechaPeriodo)
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderAnexoA) + ConstantesPR5ReportesServicio.SubfolderReporteExcel + @"/"
                                + fechaPeriodo.ToString(ConstantesBase.FormatoFecha) + @"/";
        }

        /// <summary>
        /// GetCarpetaVersionWordAnexoA
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public string GetCarpetaVersionWordAnexoA(DateTime fechaPeriodo)
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderAnexoA) + ConstantesPR5ReportesServicio.SubfolderReporteWord + @"/"
                                + fechaPeriodo.ToString(ConstantesBase.FormatoFecha) + @"/";
        }

        /// <summary>
        /// GetCarpetaPlantillaEjecutivoSemanal
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaPlantillaEjecutivoSemanal()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderEjecutivoSemanal) + ConstantesPR5ReportesServicio.SubfolderPlantilla + @"/";
        }

        /// <summary>
        /// GetCarpetaEjecutivoSemanal
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaEjecutivoSemanal()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderEjecutivoSemanal) + ConstantesPR5ReportesServicio.SubfolderReporte + @"/";
        }

        /// <summary>
        /// GetCarpetaPlantillaInformeSemanal
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaPlantillaInformeSemanal()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderInformeSemanal) + ConstantesPR5ReportesServicio.SubfolderPlantilla + @"/";
        }

        /// <summary>
        /// GetCarpetaPlantillaInformeMensual
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaPlantillaInformeMensual()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderInformeMensual) + ConstantesPR5ReportesServicio.SubfolderPlantilla + @"/";
        }

        /// <summary>
        /// GetCarpetaInformeSemanal
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaInformeSemanal()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderInformeSemanal) + ConstantesPR5ReportesServicio.SubfolderReporte + @"/";
        }

        /// <summary>
        /// GetCarpetaInformeMensual
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaInformeMensual()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderInformeMensual) + ConstantesPR5ReportesServicio.SubfolderReporte + @"/";
        }

        /// <summary>
        /// GetCarpetaPlantillaInformeEjecutivoMensual
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaPlantillaInformeEjecutivoMensual()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderInformeEjecutivoMensual) + ConstantesPR5ReportesServicio.SubfolderPlantilla + @"/";
        }

        /// <summary>
        /// GetCarpetaInformeEjecutivoMensual
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaInformeEjecutivoMensual()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderInformeEjecutivoMensual) + ConstantesPR5ReportesServicio.SubfolderReporte + @"/";
        }

        /// <summary>
        /// GetCarpetaPlantillaInformeAnual
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaPlantillaInformeAnual()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderInformeAnual) + ConstantesPR5ReportesServicio.SubfolderPlantilla + @"/";
        }

        /// <summary>
        /// GetCarpetaInformeAnual
        /// </summary>
        /// <returns></returns>
        public string GetCarpetaInformeAnual()
        {
            return GetPathSubcarpeta(ConstantesPR5ReportesServicio.FolderInformeAnual) + ConstantesPR5ReportesServicio.SubfolderReporte + @"/";
        }

        /// <summary>
        /// CopiarArchivoExcelAnexoAFsALocal
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="directorioDestino"></param>
        /// <param name="fileName"></param>
        /// <exception cref="ArgumentException"></exception>
        public void CopiarArchivoExcelAnexoAFsALocal(int verscodi, string directorioDestino, out string fileName)
        {
            try
            {
                GenerarArchivoExcelHojaVisible(verscodi, directorioDestino, out fileName);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }
        }

        /// <summary>
        /// CopiarArchivoWordAnexoAFsALocal
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="directorioDestino"></param>
        /// <param name="fileName"></param>
        /// <exception cref="ArgumentException"></exception>
        public void CopiarArchivoWordAnexoAFsALocal(int verscodi, string directorioDestino, out string fileName)
        {
            try
            {
                var objVersion = GetByIdSiVersion(verscodi);

                string pathAlternativo = GetPathPrincipal();
                string fileNameFS = PR5ReportesAppServicio.GetNombreArchivoAnexoAWord(objVersion.Versfechaperiodo, objVersion.Verscorrelativo);

                //La eliminación los archivos temporales de vista previa se realiza en el módulo de Intervenciones
                FileServer.CopiarFileAlterFinalOrigen(GetCarpetaVersionWordAnexoA(objVersion.Versfechaperiodo), directorioDestino, fileNameFS, pathAlternativo);

                fileName = fileNameFS;

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new ArgumentException("No se pudo descargar el archivo del servidor.", ex);
            }
        }

        /// <summary>
        /// MoverArchivoExcelAnexoAToFileServer
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="pathCarpetaLocal"></param>
        /// <param name="nombreArchivo"></param>
        public void MoverArchivoExcelAnexoAToFileServer(DateTime fechaPeriodo, string pathCarpetaLocal, string nombreArchivo)
        {
            string pathAlternativo = GetPathPrincipal();

            string pathDestino = GetCarpetaVersionExcelAnexoA(fechaPeriodo);

            //copiar al fileserver
            FileServer.CreateFolder("", pathDestino, pathAlternativo);
            FileServer.CopiarFileAlterFinal(pathCarpetaLocal, pathDestino, nombreArchivo, pathAlternativo);

            //eliminar archivo temporal
            File.Delete(pathCarpetaLocal + nombreArchivo);
        }

        /// <summary>
        /// MoverArchivoWordAnexoAToFileServer
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="pathCarpetaLocal"></param>
        /// <param name="nombreArchivo"></param>
        public void MoverArchivoWordAnexoAToFileServer(DateTime fechaPeriodo, string pathCarpetaLocal, string nombreArchivo)
        {
            string pathAlternativo = GetPathPrincipal();

            string pathDestino = GetCarpetaVersionWordAnexoA(fechaPeriodo);

            FileServer.CreateFolder("", pathDestino, pathAlternativo);
            FileServer.CopiarFileAlterFinal(pathCarpetaLocal, pathDestino, nombreArchivo, pathAlternativo);

            //eliminar archivo temporal
            File.Delete(pathCarpetaLocal + nombreArchivo);
        }

        /// <summary>
        /// GenerarArchivoExcelHojaVisible
        /// </summary>
        /// <param name="verscodi"></param>
        /// <param name="directorioDestino"></param>
        /// <param name="fileName"></param>
        public void GenerarArchivoExcelHojaVisible(int verscodi, string directorioDestino, out string fileName)
        {
            var objVersion = GetByIdSiVersion(verscodi);

            string pathAlternativo = GetPathPrincipal();
            string fileNameFS = GetNombreArchivoExcelAnexoA(objVersion.Versfechaperiodo, objVersion.Verscorrelativo);

            //La eliminación los archivos temporales de vista previa se realiza en el módulo de Intervenciones
            FileServer.CopiarFileAlterFinalOrigen(GetCarpetaVersionExcelAnexoA(objVersion.Versfechaperiodo), directorioDestino, fileNameFS, pathAlternativo);

            //Crear un archivo excel solo con hojas visibles
            List<SiMenureporteHojaDTO> listaHojaBD = GetByCriteriaSiMenureporteHojas(ConstantesPR5ReportesServicio.ReptipcodiAnexoAExcel)
                                    .Where(x => x.Mrephvisible == 1).OrderBy(x => x.Mrephorden).ToList();

            fileName = DateTime.Now.ToString("yyyyMMddHHmmss") + fileNameFS;
            string rutaExcelHojaVisible = directorioDestino + fileName;
            string rutaExcelOriginal = directorioDestino + fileNameFS;

            FileInfo fileHojaVisible = new FileInfo(rutaExcelHojaVisible);

            if (fileHojaVisible.Exists)
            {
                fileHojaVisible.Delete();
                fileHojaVisible = new FileInfo(rutaExcelHojaVisible);
            }

            using (ExcelPackage xlPackageHojaVisible = new ExcelPackage(fileHojaVisible))
            {
                FileInfo fileOriginal = new FileInfo(rutaExcelOriginal);
                using (ExcelPackage xlPackageOriginal = new ExcelPackage(fileOriginal))
                {
                    foreach (var objHoja in listaHojaBD)
                    {
                        ExcelWorksheet worksheet0 = xlPackageOriginal.Workbook.Worksheets[objHoja.Mrephnombre];
                        if (worksheet0 != null)
                            xlPackageHojaVisible.Workbook.Worksheets.Add(objHoja.Mrephnombre, worksheet0);
                    }
                }

                xlPackageHojaVisible.Save();
            }

            //eliminar archivo temporal
            File.Delete(directorioDestino + fileNameFS);
        }

        #endregion

        #region Hojas Excel

        /// <summary>
        /// GuardarListaHoja
        /// </summary>
        /// <param name="tmrepcodi"></param>
        /// <param name="listaMrephcodisVisible"></param>
        public void GuardarListaHoja(int tmrepcodi, List<int> listaMrephcodisVisible)
        {
            List<SiMenureporteHojaDTO> listaHojaBD = GetByCriteriaSiMenureporteHojas(tmrepcodi);

            foreach (var objBD in listaHojaBD)
            {
                bool esVisibleBD = objBD.Mrephvisible == 1;
                bool esVisibleWeb = listaMrephcodisVisible.Contains(objBD.Mrephcodi);

                //si hay cambio entonces actualizar
                if (esVisibleBD != esVisibleWeb)
                {
                    objBD.Mrephvisible = esVisibleWeb ? 1 : 0;
                    UpdateSiMenureporteHoja(objBD);
                }
            }
        }

        #endregion

        #region Graficos Visibles

        /// <summary>
        /// GuardarListaGraficosVisibles
        /// </summary>
        /// <param name="tmrepcodi"></param>
        /// <param name="listaReporcodisVisible"></param>
        public void GuardarListaGraficosVisibles(int tmrepcodi, List<int> listaReporcodisVisible)
        {
            List<SiMenureporteGraficoDTO> listaGraficos = GetByCriteriaSiMenureporteGraficos(tmrepcodi);

            foreach (var objBD in listaGraficos)
            {
                bool esVisibleBD = objBD.Mrgrestado == 1;
                bool esVisibleWeb = listaReporcodisVisible.Contains(objBD.Reporcodi);

                //si hay cambio entonces actualizar
                if (esVisibleBD != esVisibleWeb)
                {
                    objBD.Mrgrestado = esVisibleWeb ? 1 : 0;
                    UpdateSiMenureporteGrafico(objBD);
                }
                if (esVisibleWeb)
                {
                    listaReporcodisVisible.Remove(objBD.Reporcodi);
                }
            }

            //nuevos registros
            if (listaReporcodisVisible.Count > 0)
            {
                foreach (var item in listaReporcodisVisible)
                {
                    SiMenureporteGraficoDTO entity = new SiMenureporteGraficoDTO();
                    entity.Mrepcodi = tmrepcodi;
                    entity.Mrgrestado = 1;
                    entity.Reporcodi = item;
                    SaveSiMenureporteGrafico(entity);
                }

            }
        }

        #endregion

        #region Gestión Administrador IEOD

        #region Listado de Envio
        /// <summary>
        /// Genera Reporte Excevl de Envios formatos de Combustibles
        /// </summary>
        /// <param name="idsEmpresa"></param>
        /// <param name="idsLectura"></param>
        /// <param name="idsFormato"></param>
        /// <param name="idsEstado"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="rutaArchivo"></param>
        /// <param name="pathLogo"></param>
        public void GeneraExcelEnvio(string idsEmpresa, string idsLectura, string idsFormato, string idsEstado, DateTime fechaIni, DateTime fechaFin, string rutaArchivo, string pathLogo)
        {
            FileInfo newFile = new FileInfo(rutaArchivo);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaArchivo);
            }
            var lista = FactorySic.GetMeEnvioRepository().GetListaMultipleXLS(idsEmpresa, ConstantesAppServicio.ParametroDefecto,
                idsFormato, idsEstado, fechaIni, fechaFin);

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;

                ws = xlPackage.Workbook.Worksheets.Add("Envío");
                ws = xlPackage.Workbook.Worksheets["Envío"];

                //Logo
                UtilExcel.AddImageLocalAlto4Filas(ws, 1, 0, pathLogo);

                ws.Cells[1, 3].Value = "REPORTE HISTORICO DE ENVÍOS";
                var font = ws.Cells[1, 3].Style.Font;
                font.Size = 16;
                font.Bold = true;
                font.Name = "Calibri";
                //Borde, font cabecera de Tabla Fecha
                var borderFecha = ws.Cells[3, 2, 3, 3].Style.Border;
                borderFecha.Bottom.Style = borderFecha.Top.Style = borderFecha.Left.Style = borderFecha.Right.Style = ExcelBorderStyle.Thin;
                var fontTabla = ws.Cells[3, 2, 4, 3].Style.Font;
                fontTabla.Size = 8;
                fontTabla.Name = "Calibri";
                fontTabla.Bold = true;
                ws.Cells[3, 2].Value = "Fecha:";
                ws.Cells[3, 3].Value = DateTime.Now.ToString(ConstantesBase.FormatoFechaHora);
                var fill = ws.Cells[5, 2, 5, 11].Style;
                fill.Fill.PatternType = ExcelFillStyle.Solid;
                fill.Fill.BackgroundColor.SetColor(Color.LightSkyBlue);
                fill.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                fill.Border.Bottom.Style = fill.Border.Top.Style = fill.Border.Left.Style = fill.Border.Right.Style = ExcelBorderStyle.Thin;
                var border = ws.Cells[5, 2, 5, 11].Style.Border;
                border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;

                ws.Cells[5, 2].Value = "ID ENVÍO";
                ws.Cells[5, 3].Value = "FECHA PERIODO";
                ws.Cells[5, 4].Value = "EMPRESA";
                ws.Cells[5, 5].Value = "ESTADO";
                ws.Cells[5, 6].Value = "CUMPLIMIENTO";
                ws.Cells[5, 7].Value = "FECHA ENVÍO";
                ws.Cells[5, 8].Value = "FORMATO";
                ws.Cells[5, 9].Value = "USUARIO";
                ws.Cells[5, 10].Value = "CORREO";
                ws.Cells[5, 11].Value = "TELÉFONO";

                ws.Column(1).Width = 5;
                ws.Column(2).Width = 15;
                ws.Column(3).Width = 15;
                ws.Column(4).Width = 30;
                ws.Column(5).Width = 15;
                ws.Column(6).Width = 15;
                ws.Column(7).Width = 15;
                ws.Column(8).Width = 30;
                ws.Column(9).Width = 30;
                ws.Column(10).Width = 30;
                ws.Column(11).Width = 20;

                int row = 6;
                int column = 2;
                if (lista.Count > 0)
                {
                    foreach (var reg in lista)
                    {
                        ws.Cells[row, column].Value = reg.Enviocodi;
                        ws.Cells[row, column + 1].Value = reg.FechaPeriodo;
                        ws.Cells[row, column + 2].Value = reg.Emprnomb;
                        ws.Cells[row, column + 3].Value = reg.Estenvnombre;
                        var eplazo = "";
                        if (reg.Envioplazo == "F")
                        {
                            eplazo = "Fuera de Plazo";
                        }
                        else
                        {
                            eplazo = "En Plazo";
                        }
                        ws.Cells[row, column + 4].Value = eplazo;
                        DateTime fechaenvio = (DateTime)reg.Enviofecha;
                        ws.Cells[row, column + 5].Value = fechaenvio.ToString(ConstantesBase.FormatoFechaHora); ;
                        ws.Cells[row, column + 6].Value = reg.Formatnombre;
                        ws.Cells[row, column + 7].Value = reg.Username;
                        ws.Cells[row, column + 8].Value = reg.Lastuser;
                        ws.Cells[row, column + 9].Value = reg.Usertlf;
                        border = ws.Cells[row, 2, row, 11].Style.Border;
                        border.Bottom.Style = border.Top.Style = border.Left.Style = border.Right.Style = ExcelBorderStyle.Thin;
                        fontTabla = ws.Cells[row, 2, row, 11].Style.Font;
                        fontTabla.Size = 8;
                        fontTabla.Name = "Calibri";
                        row++;
                    }
                }
                //ws.Column(column + 11).AutoFit();
                xlPackage.Save();
            }
        }
        #endregion

        #region Cumplimiento
        /// <summary>
        /// Genera el View de reportes de Cumplimiento.
        /// </summary>
        /// <returns></returns>
        public string GeneraViewCumplimiento(string sEmpresas, DateTime fInicio, DateTime fFin, int idFormato, int idPeriodo)
        {
            StringBuilder strHtml = new StringBuilder();
            var listaEmpresa = sEmpresas.Split(',');
            var empresas = FactorySic.GetSiEmpresaRepository().ObtenerEmpresaFormato(idFormato).Where(x => listaEmpresa.Contains(x.Emprcodi.ToString()));
            var listaEnvio = FactorySic.GetMeEnvioRepository().ObtenerReporteCumplimiento(sEmpresas, idFormato, fInicio, fFin);
            var listaFecha = GetListaFecha(fInicio, fFin, idPeriodo);
            int cont = listaFecha.Count;

            strHtml.Append("<table border='1' width:'100%' class='pretty tabla-icono cell-border' cellspacing='0'  id='tabla'>");
            //Cabecera de Reporte
            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th width='300px'>EMPRESAS</th>");
            string htmlCabecera = GetHtmlCabecera(fInicio, fFin, idPeriodo);
            strHtml.Append(htmlCabecera);
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            // Fin de cabecera de Reporte
            strHtml.Append("<tbody>");
            string colorFondo = string.Empty;
            foreach (var emp in empresas)
            {
                strHtml.Append("<tr>");
                strHtml.Append("<td>" + emp.Emprnomb + "</td>");
                for (int i = 0; i < cont; i++)
                {
                    colorFondo = "style='background-color:orange;color:white'";
                    var find = listaEnvio.Find(x => x.Emprcodi == emp.Emprcodi && x.Enviofechaperiodo == listaFecha[i].Date);
                    if (find != null)
                    {
                        if (find.Envioplazo == "P")
                            colorFondo = "style='background-color:SteelBlue;color:white'";
                        strHtml.Append("<td " + colorFondo + " title='" + ((DateTime)find.Enviofecha).ToString("hh:mm:ss")
                            + "'>" + ((DateTime)find.Enviofecha).ToString(ConstantesBase.FormatoFechaHora) + "</td>");
                    }
                    else
                        strHtml.Append("<td >--</td>");
                }
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            return strHtml.ToString();

        }

        /// <summary>
        /// Devuelve string html de la cebecera de reportes de cumplimiento
        /// </summary>
        /// <param name="fInicio"></param>
        /// <param name="fFin"></param>
        /// <param name="idPeriodo"></param>
        /// <returns></returns>
        public string GetHtmlCabecera(DateTime fInicio, DateTime fFin, int idPeriodo)
        {
            StringBuilder strHtml = new StringBuilder();
            switch (idPeriodo)
            {
                case 1:
                    for (var f = fInicio; f <= fFin; f = f.AddDays(1))
                    {
                        strHtml.Append("<th>" + GetNombrePeriodo(f, idPeriodo) + "</th>");
                    }
                    break;
                case 2:
                    for (var f = fInicio; f <= fFin; f = f.AddDays(7))
                    {
                        strHtml.Append("<th>" + GetNombrePeriodo(f, idPeriodo) + "</th>");
                    }
                    break;
                case 3:
                case 5:
                    for (var f = fInicio; f <= fFin; f = f.AddMonths(1))
                    {
                        strHtml.Append("<th>" + GetNombrePeriodo(f, idPeriodo) + "</th>");
                    }
                    break;
            }
            return strHtml.ToString();
        }

        /// <summary>
        /// Lista de cumplimiento de envios de hidrologia,
        /// </summary>
        /// <param name="sEmpresas"></param>
        /// <param name="fInicio"></param>
        /// <param name="fFin"></param>
        /// <param name="idFormato"></param>
        /// <param name="nombreFormato"></param>
        /// <param name="idPeriodo"></param>
        /// <param name="rutaArchivo"></param>
        /// <param name="pathLogo"></param>
        public void GeneraExcelCumplimiento(string sEmpresas, DateTime fInicio, DateTime fFin, int idFormato, string nombreFormato, int idPeriodo, string rutaArchivo, string pathLogo)
        {
            FileInfo newFile = new FileInfo(rutaArchivo);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaArchivo);
            }
            var listaEmpresa = sEmpresas.Split(',');
            var empresas = FactorySic.GetSiEmpresaRepository().ObtenerEmpresaFormato(idFormato).Where(x => listaEmpresa.Contains(x.Emprcodi.ToString()));
            var listaEnvio = FactorySic.GetMeEnvioRepository().ObtenerReporteCumplimiento(sEmpresas, idFormato, fInicio, fFin);
            var listaFecha = GetListaFecha(fInicio, fFin, idPeriodo);
            int cont = listaFecha.Count;

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                ExcelWorksheet ws = null;
                ws = xlPackage.Workbook.Worksheets.Add("Cumplimiento");
                ws = xlPackage.Workbook.Worksheets["Cumplimiento"];

                //Logo
                UtilExcel.AddImageLocalAlto4Filas(ws, 1, 0, pathLogo);
                var fontTabla = ws.Cells[3, 2].Style.Font;
                fontTabla.Size = 14;
                fontTabla.Bold = true;
                ws.Cells[3, 2].Value = "REPORTE CUMPLIMIENTO:";
                ws.Cells[3, 3].Value = nombreFormato;
                GetExcelCabecera(ws, listaFecha, idPeriodo);
                int filLeyenda = empresas.Count() + 6;
                ws.Cells[filLeyenda + 1, 2].Value = "LEYENDA:";
                ws.Cells[filLeyenda + 2, 2].Value = "EN PLAZO";
                ws.Cells[filLeyenda + 3, 2].Value = "FUERA DE PLAZO";
                var borderLeyenda = ws.Cells[filLeyenda + 1, 2, filLeyenda + 3, 2].Style.Border;
                borderLeyenda.Bottom.Style = borderLeyenda.Top.Style = borderLeyenda.Left.Style = borderLeyenda.Right.Style = ExcelBorderStyle.Thin;
                ws.Cells[filLeyenda + 2, 2].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                ws.Cells[filLeyenda + 2, 2].Style.Fill.BackgroundColor.SetColor(Color.FromArgb(70, 130, 180));
                ws.Cells[filLeyenda + 3, 2].Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                ws.Cells[filLeyenda + 3, 2].Style.Fill.BackgroundColor.SetColor(Color.Orange);
                ws.Cells[filLeyenda + 2, 2].Style.Font.Color.SetColor(Color.White);
                ws.Cells[filLeyenda + 3, 2].Style.Font.Color.SetColor(Color.White);

                int fila = 6;
                int col = 2;
                string colorFondo = string.Empty;
                foreach (var emp in empresas)
                {
                    ws.Cells[fila, col].Value = emp.Emprnomb;
                    for (int i = 0; i < cont; i++)
                    {
                        colorFondo = "style='background-color:orange;color:white'";
                        var find = listaEnvio.Find(x => x.Emprcodi == emp.Emprcodi && x.Enviofechaperiodo == listaFecha[i].Date);
                        if (find != null)
                        {
                            ws.Cells[fila, col + i + 1].Value = ((DateTime)find.Enviofecha).ToString(ConstantesBase.FormatoFechaHora);
                            if (find.Envioplazo == "P")
                            {
                                ws.Cells[fila, col + i + 1].StyleID = ws.Cells[filLeyenda + 2, 2].StyleID;
                            }
                            else
                            {
                                ws.Cells[fila, col + i + 1].StyleID = ws.Cells[filLeyenda + 3, 2].StyleID;
                            }
                        }
                    }
                    fila++;
                }
                // borde de region de datos
                var borderReg = ws.Cells[5, 2, fila - 1, cont + 2].Style.Border;
                borderReg.Bottom.Style = borderReg.Top.Style = borderReg.Left.Style = borderReg.Right.Style = ExcelBorderStyle.Thin;
                using (ExcelRange r = ws.Cells[5, 2, 5, cont + 2])
                {
                    r.Style.Font.Color.SetColor(Color.White);
                    r.Style.HorizontalAlignment = OfficeOpenXml.Style.ExcelHorizontalAlignment.CenterContinuous;
                    r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    r.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(70, 130, 210));
                }
                using (ExcelRange r = ws.Cells[6, 2, fila - 1, 2])
                {
                    r.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
                    r.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(173, 216, 230));
                }
                //ws.Column(col).AutoFit();
                ExcelRange rg = ws.Cells[6, 1, 1 + fila, cont + 2];
                rg.AutoFitColumns();

                xlPackage.Save();
            }


        }

        private List<DateTime> GetListaFecha(DateTime fInicio, DateTime fFin, int idPeriodo)
        {
            List<DateTime> lista = new List<DateTime>();

            switch (idPeriodo)
            {
                case 1:
                    for (var f = fInicio; f <= fFin; f = f.AddDays(1))
                    {
                        lista.Add(f);
                    }
                    break;
                case 2:

                    break;
                case 3:
                case 5:
                    for (var f = fInicio; f <= fFin; f = f.AddMonths(1))
                    {
                        lista.Add(f);
                    }

                    break;
            }

            return lista;
        }

        /// <summary>
        /// Obtiene Cabecera de reporte excel de cumplimiento
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="lista"></param>
        /// <param name="idPeriodo"></param>
        private void GetExcelCabecera(ExcelWorksheet ws, List<DateTime> lista, int idPeriodo)
        {

            int col = 2;
            ws.Cells[5, col].Value = "Empresa/Fecha";
            col++;
            for (var i = 0; i < lista.Count; i++)
            {
                DateTime f = lista[i];
                ws.Cells[5, col].Value = GetNombrePeriodo(f, idPeriodo);
                ws.Cells[5, col].AutoFitColumns();
                col++;
            }
        }

        /// <summary>
        /// Devuelve el nombre del periodo segun sea diario, semanal o mensual
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="periodo"></param>
        /// <returns></returns>
        public string GetNombrePeriodo(DateTime fecha, int periodo)
        {
            string fechaPeriodo = string.Empty;
            switch (periodo)
            {
                case 1:
                    fechaPeriodo = fecha.ToString(ConstantesBase.FormatoFecha);
                    break;
                case 2:
                    fechaPeriodo = fecha.Year.ToString() + " Sem " + EPDate.f_numerosemana(fecha);
                    break;
                case 3:
                case 5:
                    fechaPeriodo = fecha.Year.ToString() + " " + EPDate.f_NombreMes(fecha.Month);
                    break;
            }
            return fechaPeriodo;
        }

        #endregion

        #endregion

        #region DASHBOARD IEOD

        /// <summary>
        /// Listar todos los tipos de dashboard
        /// </summary>
        /// <returns></returns>
        public List<TipoDashboardIEOD> ListarTipoDashboardIEOD()
        {
            var lista = new List<TipoDashboardIEOD>();
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashProdYMaxDem, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescProdYMaxDem });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashDemAreaOp, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescDemAreaOp });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashConsGranUsuario, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescConsGranUsuario });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashCostOp, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescCostOp });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashCostMarg, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescCostMarg });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashRREE, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescRREE });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashRER, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescRER });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashEnergPrim, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescEnergPrim });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashComb, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescComb });
            lista.Add(new TipoDashboardIEOD() { Codigo = ConstantesPR5ReportesServicio.TipoDashCostVar, Descripcion = ConstantesPR5ReportesServicio.TipoDashDescCostVar });

            return lista;
        }

        #region Produccion Energía y Máxima Demanda

        /// <summary>
        /// Listar Reporte Balance eléctrico (GWh) - La data de medicion48 convertirla 24
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="listaCategoria"></param>
        /// <param name="listaDataFinal"></param>
        public void ListarBalanceEletrico24(DateTime fechaInicial, List<SiTipogeneracionDTO> listaCategoria, out List<MeMedicion24DTO> listaDataFinal)
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Configuración de fechas

            //Día
            DateTime fechaActual = fechaInicial;

            //Mes
            DateTime fechaInicialMes0 = new DateTime(fechaActual.Year, fechaActual.Month, 1), fechaFinalMes0 = fechaActual;
            int diffDiasMes = (fechaFinalMes0 - fechaInicialMes0).Days;
            diffDiasMes = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMes0, fechaFinalMes0) ? diffDiasMes - 1 : diffDiasMes;
            DateTime fechaInicialMes1 = new DateTime(fechaActual.Year - 1, fechaActual.Month, 1), fechaFinalMes1 = fechaInicialMes1.AddDays(diffDiasMes);

            //Año
            DateTime fechaInicialAnio0 = new DateTime(fechaActual.Year, 1, 1), fechaFinalAnio0 = fechaActual;
            int diffDiasAnio = (fechaFinalAnio0 - fechaInicialAnio0).Days;
            diffDiasAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialAnio0, fechaFinalAnio0) ? diffDiasAnio - 1 : diffDiasAnio;
            DateTime fechaInicialAnio1 = new DateTime(fechaActual.Year - 1, 1, 1), fechaFinalAnio1 = fechaInicialAnio1.AddDays(diffDiasAnio);

            //Año movil
            DateTime fechaFinalMovil0Tmp = fechaActual, fechaInicialMovil0Tmp = fechaFinalMovil0Tmp.AddDays(-(365 - 1));
            DateTime fechaInicialMovil0 = fechaActual, fechaFinalMovil0 = fechaActual;
            DateTime fechaInicialMovil1 = fechaActual, fechaFinalMovil1 = fechaActual;

            bool existeBisiestoRangoAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMovil0Tmp, fechaFinalMovil0Tmp);
            fechaInicialMovil0 = existeBisiestoRangoAnio ? fechaActual.AddDays(-365) : fechaActual.AddDays(-(365 - 1));
            fechaFinalMovil1 = fechaInicialMovil0.AddDays(-1);
            fechaInicialMovil1 = existeBisiestoRangoAnio ? fechaFinalMovil1.AddDays(-365) : fechaFinalMovil1.AddDays(-(365 - 1));

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion48

            DateTime fechaIniData = fechaInicialMovil1;
            DateTime fechaFinData = fechaActual;

            //Data Total
            List<MeMedicion48DTO> listaMedicionTotal48 = this.servEjec.ListarProduccionxTipoGeneracionxFecha(fechaIniData, fechaFinData);
            List<MeMedicion24DTO> listaMedicionTotal24 = this.servEjec.ListaDataMDTotalSEIN24(listaMedicionTotal48);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Generar data para reporte y graficos
            List<MeMedicion24DTO> listaData = new List<MeMedicion24DTO>();
            MeMedicion24DTO me = null;
            //DIA
            List<MeMedicion24DTO> dias = listaMedicionTotal24.Where(x => x.Medifecha == fechaActual).ToList();
            //MES
            List<MeMedicion24DTO> meses = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes0 && x.Medifecha <= fechaFinalMes0)).ToList();
            List<MeMedicion24DTO> mesesOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes1 && x.Medifecha <= fechaFinalMes1)).ToList();
            //AÑO
            List<MeMedicion24DTO> anios = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0)).ToList();
            List<MeMedicion24DTO> aniosOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1)).ToList();
            //AÑO MOVIL
            List<MeMedicion24DTO> aniosMov = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil0 && x.Medifecha <= fechaFinalMovil0)).ToList();
            List<MeMedicion24DTO> aniosMovOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil1 && x.Medifecha <= fechaFinalMovil1)).ToList();

            foreach (var cat in listaCategoria)
            {
                MeMedicion24DTO dia = dias.Find(x => x.Tgenercodi == cat.Tgenercodi);
                List<MeMedicion24DTO> mes = meses.Where(x => x.Tgenercodi == cat.Tgenercodi).ToList();
                List<MeMedicion24DTO> mesOld = mesesOld.Where(x => x.Tgenercodi == cat.Tgenercodi).ToList();
                List<MeMedicion24DTO> anio = anios.Where(x => x.Tgenercodi == cat.Tgenercodi).ToList();
                List<MeMedicion24DTO> anioOld = aniosOld.Where(x => x.Tgenercodi == cat.Tgenercodi).ToList();
                List<MeMedicion24DTO> anioMov = aniosMov.Where(x => x.Tgenercodi == cat.Tgenercodi).ToList();
                List<MeMedicion24DTO> anioMovOld = aniosMovOld.Where(x => x.Tgenercodi == cat.Tgenercodi).ToList();

                decimal? _dia = null;
                decimal? _mes = null;
                decimal? _mesOld = null;
                decimal? _mesVar = null;
                decimal? _anio = null;
                decimal? _anioOld = null;
                decimal? _anioVar = null;
                decimal? _anioMov = null;
                decimal? _anioMovOld = null;
                decimal? _anioMovVar = null;

                //
                _dia = (dia != null) ? dia.Meditotal : null;
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEDia, Meditotal = _dia };
                listaData.Add(me);
                //
                if (mes.Count > 0) { _mes = 0; foreach (var a in mes) { _mes += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMes, Meditotal = _mes };
                listaData.Add(me);

                if (mesOld.Count > 0) { _mesOld = 0; foreach (var a in mesOld) { _mesOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesOld, Meditotal = _mesOld };
                listaData.Add(me);

                _mesVar = (_mesOld > 0 && _mes > 0) ? ((_mes - _mesOld) / _mesOld) * 100 : null;
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesVar, Meditotal = _mesVar };
                listaData.Add(me);

                //
                if (anio.Count > 0) { _anio = 0; foreach (var a in anio) { _anio += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnio, Meditotal = _anio };
                listaData.Add(me);

                if (anioOld.Count > 0) { _anioOld = 0; foreach (var a in anioOld) { _anioOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioOld, Meditotal = _anioOld };
                listaData.Add(me);

                _anioVar = (_anioOld > 0 && _anio > 0) ? ((_anio - _anioOld) / _anioOld) * 100 : 0;
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioVar, Meditotal = _anioVar };
                listaData.Add(me);

                //
                if (anioMov.Count > 0) { _anioMov = 0; foreach (var a in anioMov) { _anioMov += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovil, Meditotal = _anioMov };
                listaData.Add(me);

                //
                if (anioMovOld.Count > 0) { _anioMovOld = 0; foreach (var a in anioMovOld) { _anioMovOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld, Meditotal = _anioMovOld };
                listaData.Add(me);

                _anioMovVar = (_anioMovOld > 0 && _anioMov > 0) ? ((_anioMov - _anioMovOld) / _anioMovOld) * 100 : null;
                me = new MeMedicion24DTO() { Tgenercodi = cat.Tgenercodi, Tgenernomb = cat.Tgenernomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar, Meditotal = _anioMovVar };
                listaData.Add(me);
            }

            listaDataFinal = listaData;
        }

        /// <summary>
        /// Listar Reporte Tabla Balance eléctrico (GWh) - HTML
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="listaCategoria"></param>
        /// <returns></returns>
        public string ListarBalanceEletricoHtml(List<MeMedicion24DTO> listaData, List<SiTipogeneracionDTO> listaCategoria)
        {
            StringBuilder strHtml = new StringBuilder();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo3();
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 1;
            nfi.NumberDecimalSeparator = ",";

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<th style='width:70px;'>Balance eléctrico (GWh)</th>");
            strHtml.Append("<th style='width:70px;'>Día</th>");
            strHtml.Append("<th style='width:70px;'>Mes</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Mes</th>");
            strHtml.Append("<th style='width:70px;'>Año</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Año</th>");
            strHtml.Append("<th style='width:70px;'>Año móvil</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Móvil</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            string estiloNombreCtg = "balance_electrico_ctg";
            string estiloCeldaNumero = "balance_electrico_celda_numero";

            foreach (var cat in listaCategoria)
            {

                decimal? _dia = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia).Meditotal;
                decimal? _mes = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes).Meditotal;
                decimal? _mesOld = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesOld).Meditotal;
                decimal? _mesVar = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesVar).Meditotal;
                decimal? _anio = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio).Meditotal;
                decimal? _anioOld = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioOld).Meditotal;
                decimal? _anioVar = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioVar).Meditotal;
                decimal? _anioMov = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovil).Meditotal;
                decimal? _anioMovOld = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld).Meditotal;
                decimal? _anioMovVar = listaData.Find(x => x.Tgenercodi == cat.Tgenercodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar).Meditotal;

                string strdia = _dia != null ? (_dia.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string strmes = _mes != null ? (_mes.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string strmesVar = _mesVar != null ? _mesVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string stranio = _anio != null ? (_anio.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string stranioVar = _anioVar != null ? _anioVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string stranioMov = _anioMov != null ? (_anioMov.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string stranioMovVar = _anioMovVar != null ? _anioMovVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", cat.Tgenernomb, estiloNombreCtg);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", strdia, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmes, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmesVar, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranio, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioVar, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMov, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMovVar, estiloCeldaNumero);
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Generar lista de Maxima Demanda Historica desde la data más antigua de maxima demanda
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaMaximaDemadaActual"></param>
        /// <returns></returns>
        public List<MaximaDemandaDTO> ListarDemandaMaximaDashboardHistorico48(DateTime fecha, List<MaximaDemandaDTO> listaMaximaDemadaActual)
        {
            List<MaximaDemandaDTO> listaMaximaDemadaHist = new List<MaximaDemandaDTO>();
            List<MaximaDemandaDTO> listaMaximaDemadaTotal = new List<MaximaDemandaDTO>();
            listaMaximaDemadaTotal.AddRange(listaMaximaDemadaActual);

            DateTime fechaMinData = new DateTime(1997, 1, 1); //SELECT MIN(MEDIFECHA) FROM ME_MEDICION48 WHERE LECTCODI = 6; 01/01/1997 00:00:00
            int anioMin = fechaMinData.Year;
            int anioAct = fecha.Year;

            for (int i = anioMin; i < anioAct; i++)
            {
                DateTime fini = new DateTime(i, 1, 1);
                DateTime ffin = new DateTime(i, 12, 31);
                this.ListarDemandaMaximaDashboard48ByAnio(fini, ffin, ref listaMaximaDemadaTotal);
            }

            listaMaximaDemadaHist.Add(this.GetMDHistoricoByListaHist(listaMaximaDemadaTotal, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea));
            listaMaximaDemadaHist.Add(this.GetMDHistoricoByListaHist(listaMaximaDemadaTotal, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria));
            listaMaximaDemadaHist.Add(this.GetMDHistoricoByListaHist(listaMaximaDemadaTotal, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria));

            return listaMaximaDemadaHist;
        }

        /// <summary>
        /// Maximo Valor historico
        /// </summary>
        /// <param name="listaMaximaDemadaTotal"></param>
        /// <param name="tipoDemanda"></param>
        /// <returns></returns>
        private MaximaDemandaDTO GetMDHistoricoByListaHist(List<MaximaDemandaDTO> listaMaximaDemadaTotal, int tipoDemanda)
        {
            List<MaximaDemandaDTO> listaPI = listaMaximaDemadaTotal.Where(x => x.TipoDemanda == tipoDemanda).ToList();
            decimal maximoValor = listaPI.Max(x => x.Valor);
            return listaPI.Find(x => x.Valor == maximoValor);
        }

        /// <summary>
        /// Listar el historico de MD48
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaMaximaDemada"></param>
        public void ListarDemandaMaximaDashboard48ByAnio(DateTime fechaIni, DateTime fechaFin, ref List<MaximaDemandaDTO> listaMaximaDemada)
        {
            // Traer data de me_medicion48

            DateTime fechaIniData = fechaIni;
            DateTime fechaFinData = fechaFin;

            //Data Generación
            List<MeMedicion48DTO> listCon48 = this.ListaDataMaximaDemanda48Tgeneracion(fechaIniData, fechaFinData, ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto);
            List<MeMedicion48DTO> listaDemandaGen48 = this.servEjec.ListaDataMDGeneracionFromConsolidado48(fechaIniData, fechaFinData, listCon48);
            List<MeMedicion24DTO> listaDemandaGen24 = this.servEjec.ListaDataMDTotalSEIN24(listaDemandaGen48);
            List<MeMedicion1DTO> listaDemandaGen1 = this.servEjec.ListaDataMDTotalSEIN1(listaDemandaGen24);

            //Data Interconexion
            List<MeMedicion48DTO> listaInterconexion48 = this.servEjec.ListaDataMDInterconexion48(fechaIniData, fechaFinData);

            //Data Total
            List<MeMedicion48DTO> listaMedicionTotal48 = this.servEjec.ListaDataMDTotalSEIN48(listaDemandaGen48, listaInterconexion48);
            List<MeMedicion24DTO> listaMedicionTotal24 = this.servEjec.ListaDataMDTotalSEIN24(listaMedicionTotal48);
            List<MeMedicion1DTO> listaMedicionTotal1 = this.servEjec.ListaDataMDTotalSEIN1(listaMedicionTotal24);

            //Parametros para calculo de MD
            List<SiParametroValorDTO> listaRangoNormaHP = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroRangoPeriodoHP);
            List<SiParametroValorDTO> listaBloqueHorario = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Calcular la data del día de la maxima demanda

            // Potencia instantánea (MW)
            this.servEjec.GetDiaMaximaDemandaFromDataMD48(fechaIniData, fechaFinData, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48, listaRangoNormaHP, listaBloqueHorario,
                                            out DateTime fechaHistPIMD, out DateTime fechaDia48, out int hMax48);
            // Demanda horaria (MWh)
            DateTime fechaHistDHMD = this.servEjec.GetDiaMaximaDemandaFromDataMD24(fechaIniData, fechaFinData, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal24, listaRangoNormaHP, listaBloqueHorario);
            // Demanda diaria (GWh)
            DateTime fechaHistDDMD = this.servEjec.GetDiaMaximaDemandaFromDataMD1(fechaIniData, fechaFinData, listaMedicionTotal1);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            List<MaximaDemandaDTO> listaMD = new List<MaximaDemandaDTO>();
            this.ListaMaximaDemandaDashboard48(fechaHistPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard24(fechaHistDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard1(fechaHistDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, -1, ref listaMD);

            listaMaximaDemada.AddRange(listaMD);
        }

        /// <summary>
        /// Reporte - Demanda máxima
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaMaximaDemada"></param>
        public void ListarDemandaMaximaDashboard48(DateTime fecha, out List<MaximaDemandaDTO> listaMaximaDemada)
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Configuración de fechas

            //Día
            DateTime fechaActual = fecha;
            //Mes
            DateTime fechaInicialMes0 = new DateTime(fechaActual.Year, fechaActual.Month, 1), fechaFinalMes0 = fechaActual;
            //Año
            DateTime fechaInicialAnio0 = new DateTime(fechaActual.Year, 1, 1), fechaFinalAnio0 = fechaActual;
            //Historico

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion48

            DateTime fechaIniData = fechaInicialAnio0;
            DateTime fechaFinData = fechaFinalAnio0;

            //Data Generación
            List<MeMedicion48DTO> listCon48 = this.ListaDataMaximaDemanda48Tgeneracion(fechaIniData, fechaFinData, ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto);
            List<MeMedicion48DTO> listaDemandaGen48 = this.servEjec.ListaDataMDGeneracionFromConsolidado48(fechaIniData, fechaFinData, listCon48);
            List<MeMedicion24DTO> listaDemandaGen24 = this.servEjec.ListaDataMDTotalSEIN24(listaDemandaGen48);
            List<MeMedicion1DTO> listaDemandaGen1 = this.servEjec.ListaDataMDTotalSEIN1(listaDemandaGen24);

            //Data Interconexion
            List<MeMedicion48DTO> listaInterconexion48 = this.servEjec.ListaDataMDInterconexion48(fechaIniData, fechaFinData);

            //Data Total
            List<MeMedicion48DTO> listaMedicionTotal48 = this.servEjec.ListaDataMDTotalSEIN48(listaDemandaGen48, listaInterconexion48);
            List<MeMedicion24DTO> listaMedicionTotal24 = this.servEjec.ListaDataMDTotalSEIN24(listaMedicionTotal48);
            List<MeMedicion1DTO> listaMedicionTotal1 = this.servEjec.ListaDataMDTotalSEIN1(listaMedicionTotal24);

            //Parametros para calculo de MD
            List<SiParametroValorDTO> listaRangoNormaHP = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroRangoPeriodoHP);
            List<SiParametroValorDTO> listaBloqueHorario = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Calcular la data del día de la maxima demanda

            // Potencia instantánea (MW)
            this.servEjec.GetDiaMaximaDemandaFromDataMD48(fechaActual, fechaActual, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48, listaRangoNormaHP, listaBloqueHorario, 
                                                    out DateTime fechaDiaPIMD, out DateTime fechaDia48D, out int hMax48D);
            this.servEjec.GetDiaMaximaDemandaFromDataMD48(fechaInicialMes0, fechaFinalMes0, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48, listaRangoNormaHP, listaBloqueHorario, 
                                                    out DateTime fechaMesPIMD, out DateTime fechaDia48M, out int hMax48M);
            this.servEjec.GetDiaMaximaDemandaFromDataMD48(fechaInicialAnio0, fechaFinalAnio0, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48, listaRangoNormaHP, listaBloqueHorario, 
                                                    out DateTime fechaAnioPIMD, out DateTime fechaDia48A, out int hMax48A);

            // Demanda horaria (MWh)
            DateTime fechaDiaDHMD = this.servEjec.GetDiaMaximaDemandaFromDataMD24(fechaActual, fechaActual, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal24, listaRangoNormaHP, listaBloqueHorario);
            DateTime fechaMesDHMD = this.servEjec.GetDiaMaximaDemandaFromDataMD24(fechaInicialMes0, fechaFinalMes0, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal24, listaRangoNormaHP, listaBloqueHorario);
            DateTime fechaAnioDHMD = this.servEjec.GetDiaMaximaDemandaFromDataMD24(fechaInicialAnio0, fechaFinalAnio0, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal24, listaRangoNormaHP, listaBloqueHorario);

            // Demanda diaria (GWh)
            DateTime fechaDiaDDMD = this.servEjec.GetDiaMaximaDemandaFromDataMD1(fechaActual, fechaActual, listaMedicionTotal1);
            DateTime fechaMesDDMD = this.servEjec.GetDiaMaximaDemandaFromDataMD1(fechaInicialMes0, fechaFinalMes0, listaMedicionTotal1);
            DateTime fechaAnioDDMD = this.servEjec.GetDiaMaximaDemandaFromDataMD1(fechaInicialAnio0, fechaFinalAnio0, listaMedicionTotal1);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            List<MaximaDemandaDTO> listaMD = new List<MaximaDemandaDTO>();
            List<MaximaDemandaDTO> listaHistorica = new List<MaximaDemandaDTO>();

            this.ListaMaximaDemandaDashboard48(fechaDiaPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEDia, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard48(fechaMesPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEMes, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard48(fechaAnioPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEAnio, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard48(fechaAnioPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, -1, ref listaHistorica);

            this.ListaMaximaDemandaDashboard24(fechaDiaDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEDia, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard24(fechaMesDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEMes, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard24(fechaAnioDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEAnio, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard24(fechaAnioDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, -1, ref listaHistorica);

            this.ListaMaximaDemandaDashboard1(fechaDiaDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEDia, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard1(fechaMesDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEMes, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard1(fechaAnioDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEAnio, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, -1, ref listaMD);
            this.ListaMaximaDemandaDashboard1(fechaAnioDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, -1, ref listaHistorica);

            //generar historico
            listaMD.AddRange(this.ListarDemandaMaximaDashboardHistorico48(fechaActual, listaHistorica));

            listaMaximaDemada = listaMD;
        }

        /// <summary>
        /// Listar Maxima Demanda Dashboard - 30min
        /// </summary>
        /// <param name="fechaMaximaDemanda"></param>
        /// <param name="listaMedicion"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="tipoDemanda"></param>
        /// <param name="ptomedicodi"></param>
        /// <param name="listaMaximaDemandaOut"></param>
        public void ListaMaximaDemandaDashboard48(DateTime fechaMaximaDemanda, List<MeMedicion48DTO> listaMedicion, int tipoResultadoFecha, int tipoDemanda, int ptomedicodi,
            ref List<MaximaDemandaDTO> listaMaximaDemandaOut)
        {
            MeMedicion48DTO medicion = listaMedicion.Find(x => x.Medifecha == fechaMaximaDemanda.Date);

            int mediaHora = fechaMaximaDemanda.Hour * 2 + fechaMaximaDemanda.Minute / 30;
            mediaHora = mediaHora + 1;
            DateTime FechaSinMinutos = new DateTime(fechaMaximaDemanda.Year, fechaMaximaDemanda.Month, fechaMaximaDemanda.Day);

            //Calculo de la Máxima demanda
            MaximaDemandaDTO bloqueMaximaDemanda = new MaximaDemandaDTO();
            bloqueMaximaDemanda.ExisteMD = medicion != null;
            bloqueMaximaDemanda.CodigoHorario = ConstantesRepMaxDemanda.CodigoHorarioMaxima;
            bloqueMaximaDemanda.FechaHora = fechaMaximaDemanda;
            bloqueMaximaDemanda.Valor = (medicion != null) ? ((decimal?)medicion.GetType().GetProperty(ConstantesAppServicio.CaracterH + mediaHora.ToString()).GetValue(medicion, null)).GetValueOrDefault(0) : 0M;

            bloqueMaximaDemanda.FechaHoraFull = bloqueMaximaDemanda.FechaHora.ToString(ConstantesBase.FormatFechaFull);
            bloqueMaximaDemanda.FechaOnlyDia = bloqueMaximaDemanda.FechaHora.ToString(ConstantesBase.FormatoFechaBase);
            bloqueMaximaDemanda.FechaOnlyHora = bloqueMaximaDemanda.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            bloqueMaximaDemanda.TipoResultadoFecha = tipoResultadoFecha;
            bloqueMaximaDemanda.TipoDemanda = tipoDemanda;
            bloqueMaximaDemanda.Ptomedicodi = ptomedicodi;

            listaMaximaDemandaOut.Add(bloqueMaximaDemanda);
        }

        /// <summary>
        /// Listar Maxima Demanda Dashboard - 1h
        /// </summary>
        /// <param name="fechaMaximaDemanda"></param>
        /// <param name="listaMedicion"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="tipoDemanda"></param>
        /// <param name="ptomedicodi"></param>
        /// <param name="listaMaximaDemandaOut"></param>
        public void ListaMaximaDemandaDashboard24(DateTime fechaMaximaDemanda, List<MeMedicion24DTO> listaMedicion, int tipoResultadoFecha, int tipoDemanda, int ptomedicodi,
            ref List<MaximaDemandaDTO> listaMaximaDemandaOut)
        {
            MeMedicion24DTO medicion = listaMedicion.Find(x => x.Medifecha == fechaMaximaDemanda.Date);

            int mediaHora = fechaMaximaDemanda.Hour * 1 + fechaMaximaDemanda.Minute / 60;
            mediaHora = mediaHora + 1;
            DateTime FechaSinMinutos = new DateTime(fechaMaximaDemanda.Year, fechaMaximaDemanda.Month, fechaMaximaDemanda.Day);

            //Calculo de la Máxima demanda
            MaximaDemandaDTO bloqueMaximaDemanda = new MaximaDemandaDTO();
            bloqueMaximaDemanda.ExisteMD = medicion != null;
            bloqueMaximaDemanda.CodigoHorario = ConstantesRepMaxDemanda.CodigoHorarioMaxima;
            bloqueMaximaDemanda.FechaHora = fechaMaximaDemanda;
            bloqueMaximaDemanda.Valor = (medicion != null) ? ((decimal?)medicion.GetType().GetProperty(ConstantesAppServicio.CaracterH + mediaHora.ToString()).GetValue(medicion, null)).GetValueOrDefault(0) : 0M;

            bloqueMaximaDemanda.FechaHoraFull = bloqueMaximaDemanda.FechaHora.ToString(ConstantesBase.FormatFechaFull);
            bloqueMaximaDemanda.FechaOnlyDia = bloqueMaximaDemanda.FechaHora.ToString(ConstantesBase.FormatoFechaBase);
            bloqueMaximaDemanda.FechaOnlyHora = bloqueMaximaDemanda.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            bloqueMaximaDemanda.TipoResultadoFecha = tipoResultadoFecha;
            bloqueMaximaDemanda.TipoDemanda = tipoDemanda;
            bloqueMaximaDemanda.Ptomedicodi = ptomedicodi;

            listaMaximaDemandaOut.Add(bloqueMaximaDemanda);
        }

        /// <summary>
        /// Listar Maxima Demanda Dashboard - día
        /// </summary>
        /// <param name="fechaMaximaDemanda"></param>
        /// <param name="listaMedicion"></param>
        /// <param name="tipoResultadoFecha"></param>
        /// <param name="tipoDemanda"></param>
        /// <param name="ptomedicodi"></param>
        /// <param name="listaMaximaDemandaOut"></param>
        public void ListaMaximaDemandaDashboard1(DateTime fechaMaximaDemanda, List<MeMedicion1DTO> listaMedicion, int tipoResultadoFecha, int tipoDemanda, int ptomedicodi,
            ref List<MaximaDemandaDTO> listaMaximaDemandaOut)
        {
            MeMedicion1DTO medicion = listaMedicion.Find(x => x.Medifecha == fechaMaximaDemanda.Date);

            DateTime FechaSinMinutos = new DateTime(fechaMaximaDemanda.Year, fechaMaximaDemanda.Month, fechaMaximaDemanda.Day);

            //Calculo de la Máxima demanda
            MaximaDemandaDTO bloqueMaximaDemanda = new MaximaDemandaDTO();
            bloqueMaximaDemanda.ExisteMD = medicion != null;
            bloqueMaximaDemanda.CodigoHorario = ConstantesRepMaxDemanda.CodigoHorarioMaxima;
            bloqueMaximaDemanda.FechaHora = fechaMaximaDemanda;
            bloqueMaximaDemanda.Valor = (medicion != null) ? medicion.H1.GetValueOrDefault(0) : 0M;

            bloqueMaximaDemanda.FechaHoraFull = bloqueMaximaDemanda.FechaHora.ToString(ConstantesBase.FormatFechaFull);
            bloqueMaximaDemanda.FechaOnlyDia = bloqueMaximaDemanda.FechaHora.ToString(ConstantesBase.FormatoFechaBase);
            bloqueMaximaDemanda.FechaOnlyHora = bloqueMaximaDemanda.FechaHora.ToString(ConstantesAppServicio.FormatoOnlyHora);
            bloqueMaximaDemanda.TipoResultadoFecha = tipoResultadoFecha;
            bloqueMaximaDemanda.TipoDemanda = tipoDemanda;
            bloqueMaximaDemanda.Ptomedicodi = ptomedicodi;

            listaMaximaDemandaOut.Add(bloqueMaximaDemanda);
        }

        /// <summary>
        /// Reporte - Demanda máxima - HTML
        /// </summary>
        /// <param name="listaMaximaDemada"></param>
        /// <returns></returns>
        public string ListarDemandaMaximaDashboardHtml(List<MaximaDemandaDTO> listaMaximaDemada)
        {
            StringBuilder strHtml = new StringBuilder();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo3();
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 1;
            nfi.NumberDecimalSeparator = ",";

            MaximaDemandaDTO m11 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea);
            MaximaDemandaDTO m12 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea);
            MaximaDemandaDTO m13 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea);
            MaximaDemandaDTO m14 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEHistorica && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea);
            string str11 = m11.ExisteMD ? (m11.Valor).ToString("N", nfi) + " (" + m11.FechaOnlyHora + ")" : ConstantesAppServicio.CaracterGuion.ToString();
            string str12 = m12.ExisteMD ? (m12.Valor).ToString("N", nfi) + " (" + m12.FechaOnlyHora + " - " + m12.FechaHora.ToString("dd/MM") + ")" : ConstantesAppServicio.CaracterGuion.ToString();
            string str13 = m13.ExisteMD ? (m13.Valor).ToString("N", nfi) + " (" + m13.FechaOnlyHora + " - " + m13.FechaHora.ToString("dd/MM") + ")" : ConstantesAppServicio.CaracterGuion.ToString();
            string str14 = m14.ExisteMD ? (m14.Valor).ToString("N", nfi) + " (" + m14.FechaOnlyHora + " - " + m14.FechaOnlyDia + ")" : ConstantesAppServicio.CaracterGuion.ToString();

            MaximaDemandaDTO m21 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria);
            MaximaDemandaDTO m22 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria);
            MaximaDemandaDTO m23 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria);
            MaximaDemandaDTO m24 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEHistorica && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria);
            string str21 = m21.ExisteMD ? (m21.Valor).ToString("N", nfi) + "  (" + m21.FechaHora.ToString("HH") + "h)" : ConstantesAppServicio.CaracterGuion.ToString();
            string str22 = m22.ExisteMD ? (m22.Valor).ToString("N", nfi) + "  (" + m22.FechaHora.ToString("HH") + "h - " + m22.FechaHora.ToString("dd/MM") + ")" : ConstantesAppServicio.CaracterGuion.ToString();
            string str23 = m23.ExisteMD ? (m23.Valor).ToString("N", nfi) + "  (" + m23.FechaHora.ToString("HH") + "h - " + m23.FechaHora.ToString("dd/MM") + ")" : ConstantesAppServicio.CaracterGuion.ToString();
            string str24 = m24.ExisteMD ? (m24.Valor).ToString("N", nfi) + "  (" + m24.FechaHora.ToString("HH") + "h - " + m24.FechaOnlyDia + ")" : ConstantesAppServicio.CaracterGuion.ToString();

            MaximaDemandaDTO m31 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria);
            MaximaDemandaDTO m32 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria);
            MaximaDemandaDTO m33 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria);
            MaximaDemandaDTO m34 = listaMaximaDemada.Find(x => x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEHistorica && x.TipoDemanda == ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria);
            string str31 = m31.ExisteMD ? (m31.Valor / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
            string str32 = m32.ExisteMD ? (m32.Valor / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) + " (" + m32.FechaHora.ToString("dd/MM") + ")" : ConstantesAppServicio.CaracterGuion.ToString();
            string str33 = m33.ExisteMD ? (m33.Valor / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) + " (" + m33.FechaHora.ToString("dd/MM") + ")" : ConstantesAppServicio.CaracterGuion.ToString();
            string str34 = m34.ExisteMD ? (m34.Valor / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) + " (" + m34.FechaOnlyDia + ")" : ConstantesAppServicio.CaracterGuion.ToString();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<th style='width:70px;'>Demanda máxima b.c.</th>");
            strHtml.Append("<th style='width:70px;'>Dia</th>");
            strHtml.Append("<th style='width:70px;'>Mes</th>");
            strHtml.Append("<th style='width:70px;'>Año</th>");
            strHtml.Append("<th style='width:70px;'>Histórica</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            string estiloNombreCtg = "demanda_maxima_ctg";
            string estiloCeldaNumero = "demanda_maxima_celda_numero";

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", "POTENCIA INSTANTÁNEA (MW)", estiloNombreCtg);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str11, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str12, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str13, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str14, estiloCeldaNumero);
            strHtml.Append("</tr>"); ;

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", "DEMANDA HORARIA (MWh)", estiloNombreCtg);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str21, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str22, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str23, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str24, estiloCeldaNumero);
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", "DEMANDA DIARIA (GWh)", estiloNombreCtg);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str31, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str32, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str33, estiloCeldaNumero);
            strHtml.AppendFormat("<td class='{1}'>{0}</td>", str34, estiloCeldaNumero);
            strHtml.Append("</tr>");

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Demanda por Área Operativa

        /// <summary>
        /// Lista de Areas operativas - Dashboard
        /// </summary>
        /// <returns></returns>
        public List<MeReporptomedDTO> ListaAreaOperativaDashboard()
        {
            List<MeReporptomedDTO> areas = this.servFormatoRep.GetListaPuntoFromMeReporptomed(ConstantesPR5ReportesServicio.ReporcodiDemandaAreas, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);

            MeReporptomedDTO ptoSein = new MeReporptomedDTO();
            ptoSein.Ptomedicodi = ConstantesPR5ReportesServicio.PtomedicodiSein;
            ptoSein.Ptomedibarranomb = ConstantesPR5ReportesServicio.PtomedibarranombSein;

            areas.Add(ptoSein);

            return areas;
        }

        /// <summary>
        /// Listar la Data totalizada por area operativa y sein
        /// </summary>
        /// <param name="fechaIniData"></param>
        /// <param name="fechaFinData"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListarDemandaXAreaOperativa48Data(DateTime fechaIniData, DateTime fechaFinData)
        {
            int lectcodi = ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto;
            List<MeMedicion48DTO> listaDatan = new List<MeMedicion48DTO>();
            List<MeReporptomedDTO> areasTmp = this.servFormatoRep.GetListaCabyDatos48MeReporte(ConstantesPR5ReportesServicio.ReporcodiDemandaAreas, lectcodi, fechaIniData, fechaFinData, ref listaDatan);

            List<MeMedicion48DTO> listaDatanSein = new List<MeMedicion48DTO>();
            decimal? valor, acumulado;
            for (var day = fechaIniData.Date; day.Date <= fechaFinData.Date; day = day.AddDays(1))
            {
                var listaDataXDay = listaDatan.Where(x => x.Medifecha.Date == day);

                MeMedicion48DTO me48Sein = new MeMedicion48DTO();
                me48Sein.Ptomedicodi = ConstantesPR5ReportesServicio.PtomedicodiSein;
                me48Sein.Medifecha = day;

                for (int h = 1; h <= 48; h++)
                {
                    acumulado = null;
                    foreach (var d in listaDataXDay)
                    {
                        valor = (decimal?)d.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(d, null);
                        if (valor != null)
                        {
                            acumulado = acumulado.GetValueOrDefault(0) + valor;
                        }
                    }
                    me48Sein.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).SetValue(me48Sein, acumulado);
                }
                listaDatanSein.Add(me48Sein);
            }

            listaDatan.AddRange(listaDatanSein);

            return listaDatan;
        }

        /// <summary>
        /// Listar Demanda por Área Operativa (GWh) - La data de medicion48 convertirla 24
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="listaAreaOperativa"></param>
        /// <param name="listaDataFinal"></param>
        /// <param name="listaMaximaDemada"></param>
        public void ListarDemandaXAreaOperativa24Data(DateTime fechaInicial, List<MeReporptomedDTO> listaAreaOperativa, out List<MeMedicion24DTO> listaDataFinal, out List<MaximaDemandaDTO> listaMaximaDemada)
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Configuración de fechas

            //Día
            DateTime fechaActual = fechaInicial;

            //Mes
            DateTime fechaInicialMes0 = new DateTime(fechaActual.Year, fechaActual.Month, 1), fechaFinalMes0 = fechaActual;
            int diffDiasMes = (fechaFinalMes0 - fechaInicialMes0).Days;
            diffDiasMes = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMes0, fechaFinalMes0) ? diffDiasMes - 1 : diffDiasMes;
            DateTime fechaInicialMes1 = new DateTime(fechaActual.Year - 1, fechaActual.Month, 1), fechaFinalMes1 = fechaInicialMes1.AddDays(diffDiasMes);

            //Año
            DateTime fechaInicialAnio0 = new DateTime(fechaActual.Year, 1, 1), fechaFinalAnio0 = fechaActual;
            int diffDiasAnio = (fechaFinalAnio0 - fechaInicialAnio0).Days;
            diffDiasAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialAnio0, fechaFinalAnio0) ? diffDiasAnio - 1 : diffDiasAnio;
            DateTime fechaInicialAnio1 = new DateTime(fechaActual.Year - 1, 1, 1), fechaFinalAnio1 = fechaInicialAnio1.AddDays(diffDiasAnio);

            //Año movil
            DateTime fechaFinalMovil0Tmp = fechaActual, fechaInicialMovil0Tmp = fechaFinalMovil0Tmp.AddDays(-(365 - 1));
            DateTime fechaInicialMovil0 = fechaActual, fechaFinalMovil0 = fechaActual;
            DateTime fechaInicialMovil1 = fechaActual, fechaFinalMovil1 = fechaActual;

            bool existeBisiestoRangoAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMovil0Tmp, fechaFinalMovil0Tmp);
            fechaInicialMovil0 = existeBisiestoRangoAnio ? fechaActual.AddDays(-365) : fechaActual.AddDays(-(365 - 1));
            fechaFinalMovil1 = fechaInicialMovil0.AddDays(-1);
            fechaInicialMovil1 = existeBisiestoRangoAnio ? fechaFinalMovil1.AddDays(-365) : fechaFinalMovil1.AddDays(-(365 - 1));

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion48

            DateTime fechaIniData = fechaInicialMovil1;
            DateTime fechaFinData = fechaActual;

            //Data Total
            List<MeMedicion48DTO> listaMedicionTotal48 = this.ListarDemandaXAreaOperativa48Data(fechaIniData, fechaFinData);
            List<MeMedicion24DTO> listaMedicionTotal24 = this.servEjec.ListaDataMDTotalSEIN24(listaMedicionTotal48);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Generar data para reporte y graficos
            List<MeMedicion24DTO> listaData = new List<MeMedicion24DTO>();
            MeMedicion24DTO me = null;
            //DIA
            List<MeMedicion24DTO> dias = listaMedicionTotal24.Where(x => x.Medifecha == fechaActual).ToList();
            //MES
            List<MeMedicion24DTO> meses = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes0 && x.Medifecha <= fechaFinalMes0)).ToList();
            List<MeMedicion24DTO> mesesOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes1 && x.Medifecha <= fechaFinalMes1)).ToList();
            //AÑO
            List<MeMedicion24DTO> anios = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0)).ToList();
            List<MeMedicion24DTO> aniosOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1)).ToList();
            //AÑO MOVIL
            List<MeMedicion24DTO> aniosMov = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil0 && x.Medifecha <= fechaFinalMovil0)).ToList();
            List<MeMedicion24DTO> aniosMovOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil1 && x.Medifecha <= fechaFinalMovil1)).ToList();

            foreach (var cat in listaAreaOperativa)
            {
                MeMedicion24DTO dia = dias.Find(x => x.Ptomedicodi == cat.Ptomedicodi);
                List<MeMedicion24DTO> mes = meses.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> mesOld = mesesOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anio = anios.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioOld = aniosOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioMov = aniosMov.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioMovOld = aniosMovOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();

                decimal? _dia = null;
                decimal? _mes = null;
                decimal? _mesOld = null;
                decimal? _mesVar = null;
                decimal? _anio = null;
                decimal? _anioOld = null;
                decimal? _anioVar = null;
                decimal? _anioMov = null;
                decimal? _anioMovOld = null;
                decimal? _anioMovVar = null;

                //
                _dia = (dia != null) ? dia.Meditotal : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEDia, Meditotal = _dia };
                listaData.Add(me);
                //
                if (mes.Count > 0) { _mes = 0; foreach (var a in mes) { _mes += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMes, Meditotal = _mes };
                listaData.Add(me);

                if (mesOld.Count > 0) { _mesOld = 0; foreach (var a in mesOld) { _mesOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesOld, Meditotal = _mesOld };
                listaData.Add(me);

                _mesVar = (_mesOld > 0 && _mes > 0) ? ((_mes - _mesOld) / _mesOld) * 100 : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesVar, Meditotal = _mesVar };
                listaData.Add(me);

                //
                if (anio.Count > 0) { _anio = 0; foreach (var a in anio) { _anio += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnio, Meditotal = _anio };
                listaData.Add(me);

                if (anioOld.Count > 0) { _anioOld = 0; foreach (var a in anioOld) { _anioOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioOld, Meditotal = _anioOld };
                listaData.Add(me);

                _anioVar = (_anioOld > 0 && _anio > 0) ? ((_anio - _anioOld) / _anioOld) * 100 : 0;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioVar, Meditotal = _anioVar };
                listaData.Add(me);

                //
                if (anioMov.Count > 0) { _anioMov = 0; foreach (var a in anioMov) { _anioMov += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovil, Meditotal = _anioMov };
                listaData.Add(me);

                //
                if (anioMovOld.Count > 0) { _anioMovOld = 0; foreach (var a in anioMovOld) { _anioMovOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld, Meditotal = _anioMovOld };
                listaData.Add(me);

                _anioMovVar = (_anioMovOld > 0 && _anioMov > 0) ? ((_anioMov - _anioMovOld) / _anioMovOld) * 100 : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Ptomedibarranomb = cat.Ptomedibarranomb, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar, Meditotal = _anioMovVar };
                listaData.Add(me);
            }

            listaDataFinal = listaData;

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Calcular la data del día de la maxima demanda
            // Configuración de fechas

            //Día
            DateTime fechaActualMD = fechaActual;
            //Mes
            DateTime fechaInicialMesMD0 = new DateTime(fechaActualMD.Year, fechaActualMD.Month, 1), fechaFinalMesMD0 = fechaActualMD;
            //Año
            DateTime fechaInicialAnioMD0 = new DateTime(fechaActualMD.Year, 1, 1), fechaFinalAnioMD0 = fechaActualMD;
            //Historico

            //Parametros para calculo de MD
            List<SiParametroValorDTO> listaRangoNormaHP = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroRangoPeriodoHP);
            List<SiParametroValorDTO> listaBloqueHorario = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            List<MaximaDemandaDTO> listaMDTotal = new List<MaximaDemandaDTO>();

            foreach (var area in listaAreaOperativa)
            {
                List<MaximaDemandaDTO> listaMD = new List<MaximaDemandaDTO>();
                List<MaximaDemandaDTO> listaHistorica = new List<MaximaDemandaDTO>();

                List<MeMedicion48DTO> listaDemandaGen48 = listaMedicionTotal48.Where(x => x.Ptomedicodi == area.Ptomedicodi).ToList();
                List<MeMedicion24DTO> listaDemandaGen24 = this.servEjec.ListaDataMDTotalSEIN24(listaDemandaGen48);
                List<MeMedicion1DTO> listaDemandaGen1 = this.servEjec.ListaDataMDTotalSEIN1(listaDemandaGen24);

                //Data Total
                List<MeMedicion48DTO> listaMedicionTotalMD48 = listaDemandaGen48; // this.servEjec.ListaDataMDTotalSEIN48(listaDemandaGen48, listaInterconexion48);
                List<MeMedicion24DTO> listaMedicionTotalMD24 = this.servEjec.ListaDataMDTotalSEIN24(listaMedicionTotalMD48);
                List<MeMedicion1DTO> listaMedicionTotalMD1 = this.servEjec.ListaDataMDTotalSEIN1(listaMedicionTotalMD24);

                // Potencia instantánea (MW)
                this.servEjec.GetDiaMaximaDemandaFromDataMD48(fechaActualMD, fechaActualMD, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotalMD48, listaRangoNormaHP, listaBloqueHorario,
                                                        out DateTime fechaDiaPIMD, out DateTime fechaDia48D, out int hMax48D);
                this.servEjec.GetDiaMaximaDemandaFromDataMD48(fechaInicialMesMD0, fechaFinalMesMD0, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotalMD48, listaRangoNormaHP, listaBloqueHorario,
                                                        out DateTime fechaMesPIMD, out DateTime fechaDia48M, out int hMax48M);
                this.servEjec.GetDiaMaximaDemandaFromDataMD48(fechaInicialAnioMD0, fechaFinalAnioMD0, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotalMD48, listaRangoNormaHP, listaBloqueHorario,
                                                        out DateTime fechaAnioPIMD, out DateTime fechaDia48A, out int hMax48A);

                // Demanda horaria (MWh)
                DateTime fechaDiaDHMD = this.servEjec.GetDiaMaximaDemandaFromDataMD24(fechaActualMD, fechaActualMD, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotalMD24, listaRangoNormaHP, listaBloqueHorario);
                DateTime fechaMesDHMD = this.servEjec.GetDiaMaximaDemandaFromDataMD24(fechaInicialMesMD0, fechaFinalMesMD0, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotalMD24, listaRangoNormaHP, listaBloqueHorario);
                DateTime fechaAnioDHMD = this.servEjec.GetDiaMaximaDemandaFromDataMD24(fechaInicialAnioMD0, fechaFinalAnioMD0, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotalMD24, listaRangoNormaHP, listaBloqueHorario);

                // Demanda diaria (GWh)
                DateTime fechaDiaDDMD = this.servEjec.GetDiaMaximaDemandaFromDataMD1(fechaActualMD, fechaActualMD, listaMedicionTotalMD1);
                DateTime fechaMesDDMD = this.servEjec.GetDiaMaximaDemandaFromDataMD1(fechaInicialMesMD0, fechaFinalMesMD0, listaMedicionTotalMD1);
                DateTime fechaAnioDDMD = this.servEjec.GetDiaMaximaDemandaFromDataMD1(fechaInicialAnioMD0, fechaFinalAnioMD0, listaMedicionTotalMD1);

                //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

                this.ListaMaximaDemandaDashboard48(fechaDiaPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEDia, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard48(fechaMesPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEMes, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard48(fechaAnioPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEAnio, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard48(fechaAnioPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, area.Ptomedicodi, ref listaHistorica);

                this.ListaMaximaDemandaDashboard24(fechaDiaDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEDia, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard24(fechaMesDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEMes, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard24(fechaAnioDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEAnio, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard24(fechaAnioDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, area.Ptomedicodi, ref listaHistorica);

                this.ListaMaximaDemandaDashboard1(fechaDiaDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEDia, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard1(fechaMesDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEMes, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard1(fechaAnioDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEAnio, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, area.Ptomedicodi, ref listaMD);
                this.ListaMaximaDemandaDashboard1(fechaAnioDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, area.Ptomedicodi, ref listaHistorica);

                //generar historico
                listaMD.AddRange(this.ListarDemandaMaximaXAreaOperativaDashboardHistorico48(fechaActualMD, listaHistorica, area.Ptomedicodi));

                listaMDTotal.AddRange(listaMD);
            }

            listaMaximaDemada = listaMDTotal;
        }

        /// <summary>
        /// Generar lista de Maxima Demanda Historica desde la data más antigua de maxima demanda
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="listaMaximaDemadaActual"></param>
        /// <param name="ptomedicodi"></param>
        /// <returns></returns>
        public List<MaximaDemandaDTO> ListarDemandaMaximaXAreaOperativaDashboardHistorico48(DateTime fecha, List<MaximaDemandaDTO> listaMaximaDemadaActual, int ptomedicodi)
        {
            List<MaximaDemandaDTO> listaMaximaDemadaHist = new List<MaximaDemandaDTO>();
            List<MaximaDemandaDTO> listaMaximaDemadaTotal = new List<MaximaDemandaDTO>();
            listaMaximaDemadaTotal.AddRange(listaMaximaDemadaActual);

            DateTime fechaMinData = new DateTime(1997, 1, 1); //SELECT MIN(MEDIFECHA) FROM ME_MEDICION48 WHERE LECTCODI = 6; 01/01/1997 00:00:00
            int anioMin = fechaMinData.Year;
            int anioAct = fecha.Year;

            for (int i = anioMin; i < anioAct; i++)
            {
                DateTime fini = new DateTime(i, 1, 1);
                DateTime ffin = new DateTime(i, 12, 31);
                this.ListarDemandaMaximaXAreaOperativaDashboard48ByAnio(fini, ffin, ptomedicodi, ref listaMaximaDemadaTotal);
            }

            listaMaximaDemadaHist.Add(this.GetMDHistoricoByListaHist(listaMaximaDemadaTotal, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea));
            listaMaximaDemadaHist.Add(this.GetMDHistoricoByListaHist(listaMaximaDemadaTotal, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria));
            listaMaximaDemadaHist.Add(this.GetMDHistoricoByListaHist(listaMaximaDemadaTotal, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria));

            return listaMaximaDemadaHist;
        }

        /// <summary>
        /// Listar el historico de MD48
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="ptomedicodi"></param>
        /// <param name="listaMaximaDemada"></param>
        public void ListarDemandaMaximaXAreaOperativaDashboard48ByAnio(DateTime fechaIni, DateTime fechaFin, int ptomedicodi, ref List<MaximaDemandaDTO> listaMaximaDemada)
        {
            // Traer data de me_medicion48

            DateTime fechaIniData = fechaIni;
            DateTime fechaFinData = fechaFin;

            //Data Generación
            List<MeMedicion48DTO> listaDemandaGen48 = this.ListarDemandaXAreaOperativa48Data(fechaIniData, fechaFinData).Where(x => x.Ptomedicodi == ptomedicodi).ToList();
            List<MeMedicion24DTO> listaDemandaGen24 = this.servEjec.ListaDataMDTotalSEIN24(listaDemandaGen48);
            List<MeMedicion1DTO> listaDemandaGen1 = this.servEjec.ListaDataMDTotalSEIN1(listaDemandaGen24);

            //Data Total
            List<MeMedicion48DTO> listaMedicionTotal48 = listaDemandaGen48; //this.servEjec.ListaDataMDTotalSEIN48(listaDemandaGen48, listaInterconexion48);
            List<MeMedicion24DTO> listaMedicionTotal24 = this.servEjec.ListaDataMDTotalSEIN24(listaMedicionTotal48);
            List<MeMedicion1DTO> listaMedicionTotal1 = this.servEjec.ListaDataMDTotalSEIN1(listaMedicionTotal24);

            //Parametros para calculo de MD
            List<SiParametroValorDTO> listaRangoNormaHP = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroRangoPeriodoHP);
            List<SiParametroValorDTO> listaBloqueHorario = servParametro.ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Calcular la data del día de la maxima demanda

            // Potencia instantánea (MW)
            this.servEjec.GetDiaMaximaDemandaFromDataMD48(fechaIniData, fechaFinData, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal48, listaRangoNormaHP, listaBloqueHorario, 
                                                        out DateTime fechaHistPIMD, out DateTime fechaDia48, out int hMax48);
            // Demanda horaria (MWh)
            DateTime fechaHistDHMD = this.servEjec.GetDiaMaximaDemandaFromDataMD24(fechaIniData, fechaFinData, ConstantesRepMaxDemanda.TipoMDNormativa, listaMedicionTotal24, listaRangoNormaHP, listaBloqueHorario);
            // Demanda diaria (GWh)
            DateTime fechaHistDDMD = this.servEjec.GetDiaMaximaDemandaFromDataMD1(fechaIniData, fechaFinData, listaMedicionTotal1);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            List<MaximaDemandaDTO> listaMD = new List<MaximaDemandaDTO>();
            this.ListaMaximaDemandaDashboard48(fechaHistPIMD, listaDemandaGen48, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDPotenciaInstantanea, ptomedicodi, ref listaMD);
            this.ListaMaximaDemandaDashboard24(fechaHistDHMD, listaDemandaGen24, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDDemandaHoraria, ptomedicodi, ref listaMD);
            this.ListaMaximaDemandaDashboard1(fechaHistDDMD, listaDemandaGen1, ConstantesPR5ReportesServicio.TipoDashBEHistorica, ConstantesPR5ReportesServicio.TipoDashMDDemandaDiaria, ptomedicodi, ref listaMD);

            listaMaximaDemada.AddRange(listaMD);
        }

        /// <summary>
        /// Listar Demanda por Área Operativa (GWh) - HTML
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="listaAreaOperativa"></param>
        /// <returns></returns>
        public string ListarDemandaXAreaOperativa24Html(List<MeMedicion24DTO> listaData, List<MeReporptomedDTO> listaAreaOperativa)
        {
            StringBuilder strHtml = new StringBuilder();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo3();
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 1;
            nfi.NumberDecimalSeparator = ",";

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:70px;'>Área Operativa (GWh)</th>");
            strHtml.Append("<th style='width:70px;'>Día</th>");
            strHtml.Append("<th style='width:70px;'>Mes</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Mes</th>");
            strHtml.Append("<th style='width:70px;'>Año</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Año</th>");
            strHtml.Append("<th style='width:70px;'>Año móvil</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Móvil</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            string estiloNombreCtg = "balance_electrico_ctg";
            string estiloCeldaNumero = "balance_electrico_celda_numero";

            foreach (var cat in listaAreaOperativa)
            {
                decimal? _dia = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia).Meditotal;
                decimal? _mes = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes).Meditotal;
                decimal? _mesOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesOld).Meditotal;
                decimal? _mesVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesVar).Meditotal;
                decimal? _anio = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio).Meditotal;
                decimal? _anioOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioOld).Meditotal;
                decimal? _anioVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioVar).Meditotal;
                decimal? _anioMov = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovil).Meditotal;
                decimal? _anioMovOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld).Meditotal;
                decimal? _anioMovVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar).Meditotal;

                string strdia = _dia != null ? (_dia.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string strmes = _mes != null ? (_mes.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string strmesVar = _mesVar != null ? _mesVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string stranio = _anio != null ? (_anio.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string stranioVar = _anioVar != null ? _anioVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string stranioMov = _anioMov != null ? (_anioMov.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                string stranioMovVar = _anioMovVar != null ? _anioMovVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", cat.Ptomedibarranomb, estiloNombreCtg);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", strdia, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmes, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmesVar, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranio, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioVar, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMov, estiloCeldaNumero);
                strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMovVar, estiloCeldaNumero);
                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Consumo Grandes Usuarios

        /// <summary>
        /// Listar Reporte Balance eléctrico (GWh) - La data de medicion48 convertirla 24
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="listaReporte"></param>
        /// <param name="listaPtos"></param>
        /// <param name="listaDataFinal"></param>
        public void ListarConsumoGrandesUsuarios(DateTime fechaInicial, List<MeReporteDTO> listaReporte, List<MeReporptomedDTO> listaPtos, out List<MeMedicion24DTO> listaDataFinal)
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Configuración de fechas

            //Día
            DateTime fechaActual = fechaInicial;

            //Mes
            DateTime fechaInicialMes0 = new DateTime(fechaActual.Year, fechaActual.Month, 1), fechaFinalMes0 = fechaActual;
            int diffDiasMes = (fechaFinalMes0 - fechaInicialMes0).Days;
            diffDiasMes = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMes0, fechaFinalMes0) ? diffDiasMes - 1 : diffDiasMes;
            DateTime fechaInicialMes1 = new DateTime(fechaActual.Year - 1, fechaActual.Month, 1), fechaFinalMes1 = fechaInicialMes1.AddDays(diffDiasMes);

            //Año
            DateTime fechaInicialAnio0 = new DateTime(fechaActual.Year, 1, 1), fechaFinalAnio0 = fechaActual;
            int diffDiasAnio = (fechaFinalAnio0 - fechaInicialAnio0).Days;
            diffDiasAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialAnio0, fechaFinalAnio0) ? diffDiasAnio - 1 : diffDiasAnio;
            DateTime fechaInicialAnio1 = new DateTime(fechaActual.Year - 1, 1, 1), fechaFinalAnio1 = fechaInicialAnio1.AddDays(diffDiasAnio);

            //Año movil
            DateTime fechaFinalMovil0Tmp = fechaActual, fechaInicialMovil0Tmp = fechaFinalMovil0Tmp.AddDays(-(365 - 1));
            DateTime fechaInicialMovil0 = fechaActual, fechaFinalMovil0 = fechaActual;
            DateTime fechaInicialMovil1 = fechaActual, fechaFinalMovil1 = fechaActual;

            bool existeBisiestoRangoAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMovil0Tmp, fechaFinalMovil0Tmp);
            fechaInicialMovil0 = existeBisiestoRangoAnio ? fechaActual.AddDays(-365) : fechaActual.AddDays(-(365 - 1));
            fechaFinalMovil1 = fechaInicialMovil0.AddDays(-1);
            fechaInicialMovil1 = existeBisiestoRangoAnio ? fechaFinalMovil1.AddDays(-365) : fechaFinalMovil1.AddDays(-(365 - 1));

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion48

            DateTime fechaIniData = fechaInicialMovil1;
            DateTime fechaFinData = fechaActual;

            //Data Total

            int lectcodi = listaReporte.First().Lectcodi.Value;
            List<MePtomedicionDTO> listaPto = new List<MePtomedicionDTO>();
            List<MeMedicion48DTO> listaMedicionTotal48 = new List<MeMedicion48DTO>();

            List<MeMedicion24DTO> listaMedicionTotal24 = this.servFormatoRep.GetDataLista24From48(fechaIniData, fechaFinData, listaMedicionTotal48, ConstantesReportesMedicion.DatoPromedio, ConstantesReportesMedicion.TotalSumatoria, ConstantesReportesMedicion.ValidarCeroNo);

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Generar data para reporte y graficos
            List<MeMedicion24DTO> listaData = new List<MeMedicion24DTO>();
            MeMedicion24DTO me = null;
            //DIA
            List<MeMedicion24DTO> dias = listaMedicionTotal24.Where(x => x.Medifecha == fechaActual).ToList();
            //MES
            List<MeMedicion24DTO> meses = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes0 && x.Medifecha <= fechaFinalMes0)).ToList();
            List<MeMedicion24DTO> mesesOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes1 && x.Medifecha <= fechaFinalMes1)).ToList();
            //AÑO
            List<MeMedicion24DTO> anios = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0)).ToList();
            List<MeMedicion24DTO> aniosOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1)).ToList();
            //AÑO MOVIL
            List<MeMedicion24DTO> aniosMov = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil0 && x.Medifecha <= fechaFinalMovil0)).ToList();
            List<MeMedicion24DTO> aniosMovOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil1 && x.Medifecha <= fechaFinalMovil1)).ToList();

            // Por cada Grande Usuario
            foreach (var cat in listaPtos)
            {
                MeMedicion24DTO dia = dias.Find(x => x.Ptomedicodi == cat.Ptomedicodi);
                List<MeMedicion24DTO> mes = meses.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> mesOld = mesesOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anio = anios.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioOld = aniosOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioMov = aniosMov.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioMovOld = aniosMovOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();

                decimal? _dia = null;
                decimal? _mes = null;
                decimal? _mesOld = null;
                decimal? _mesVar = null;
                decimal? _anio = null;
                decimal? _anioOld = null;
                decimal? _anioVar = null;
                decimal? _anioMov = null;
                decimal? _anioMovOld = null;
                decimal? _anioMovVar = null;

                //
                _dia = (dia != null) ? dia.Meditotal : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEDia, Meditotal = _dia };
                listaData.Add(me);
                //
                if (mes.Count > 0) { _mes = 0; foreach (var a in mes) { _mes += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMes, Meditotal = _mes };
                listaData.Add(me);

                if (mesOld.Count > 0) { _mesOld = 0; foreach (var a in mesOld) { _mesOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesOld, Meditotal = _mesOld };
                listaData.Add(me);

                _mesVar = (_mesOld > 0 && _mes > 0) ? ((_mes - _mesOld) / _mesOld) * 100 : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesVar, Meditotal = _mesVar };
                listaData.Add(me);

                //
                if (anio.Count > 0) { _anio = 0; foreach (var a in anio) { _anio += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnio, Meditotal = _anio };
                listaData.Add(me);

                if (anioOld.Count > 0) { _anioOld = 0; foreach (var a in anioOld) { _anioOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioOld, Meditotal = _anioOld };
                listaData.Add(me);

                _anioVar = (_anioOld > 0 && _anio > 0) ? ((_anio - _anioOld) / _anioOld) * 100 : 0;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioVar, Meditotal = _anioVar };
                listaData.Add(me);

                //
                if (anioMov.Count > 0) { _anioMov = 0; foreach (var a in anioMov) { _anioMov += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovil, Meditotal = _anioMov };
                listaData.Add(me);

                //
                if (anioMovOld.Count > 0) { _anioMovOld = 0; foreach (var a in anioMovOld) { _anioMovOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld, Meditotal = _anioMovOld };
                listaData.Add(me);

                _anioMovVar = (_anioMovOld > 0 && _anioMov > 0) ? ((_anioMov - _anioMovOld) / _anioMovOld) * 100 : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar, Meditotal = _anioMovVar };
                listaData.Add(me);
            }

            //Por cada area
            List<MeReporptomedDTO> listaPtosRep;
            foreach (var cat in listaReporte)
            {
                listaPtosRep = listaPtos.Where(x => x.Reporcodi == cat.Reporcodi).ToList();
                List<int> listaPtoscodiRep = listaPtosRep.Select(x => x.Ptomedicodi).ToList();

                List<MeMedicion24DTO> dia = dias.Where(x => listaPtoscodiRep.Contains(x.Ptomedicodi)).ToList();
                List<MeMedicion24DTO> mes = meses.Where(x => listaPtoscodiRep.Contains(x.Ptomedicodi)).ToList();
                List<MeMedicion24DTO> mesOld = mesesOld.Where(x => listaPtoscodiRep.Contains(x.Ptomedicodi)).ToList();
                List<MeMedicion24DTO> anio = anios.Where(x => listaPtoscodiRep.Contains(x.Ptomedicodi)).ToList();
                List<MeMedicion24DTO> anioOld = aniosOld.Where(x => listaPtoscodiRep.Contains(x.Ptomedicodi)).ToList();
                List<MeMedicion24DTO> anioMov = aniosMov.Where(x => listaPtoscodiRep.Contains(x.Ptomedicodi)).ToList();
                List<MeMedicion24DTO> anioMovOld = aniosMovOld.Where(x => listaPtoscodiRep.Contains(x.Ptomedicodi)).ToList();

                decimal? _dia = null;
                decimal? _mes = null;
                decimal? _mesOld = null;
                decimal? _mesVar = null;
                decimal? _anio = null;
                decimal? _anioOld = null;
                decimal? _anioVar = null;
                decimal? _anioMov = null;
                decimal? _anioMovOld = null;
                decimal? _anioMovVar = null;

                //
                if (dia.Count > 0) { _dia = 0; foreach (var a in dia) { _dia += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEDia, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _dia };
                listaData.Add(me);
                //
                if (mes.Count > 0) { _mes = 0; foreach (var a in mes) { _mes += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMes, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _mes };
                listaData.Add(me);

                if (mesOld.Count > 0) { _mesOld = 0; foreach (var a in mesOld) { _mesOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _mesOld };
                listaData.Add(me);

                _mesVar = (_mesOld > 0 && _mes > 0) ? ((_mes - _mesOld) / _mesOld) * 100 : null;
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _mesVar };
                listaData.Add(me);

                //
                if (anio.Count > 0) { _anio = 0; foreach (var a in anio) { _anio += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnio, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anio };
                listaData.Add(me);

                if (anioOld.Count > 0) { _anioOld = 0; foreach (var a in anioOld) { _anioOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioOld };
                listaData.Add(me);

                _anioVar = (_anioOld > 0 && _anio > 0) ? ((_anio - _anioOld) / _anioOld) * 100 : 0;
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioVar };
                listaData.Add(me);

                //
                if (anioMov.Count > 0) { _anioMov = 0; foreach (var a in anioMov) { _anioMov += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovil, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioMov };
                listaData.Add(me);

                //
                if (anioMovOld.Count > 0) { _anioMovOld = 0; foreach (var a in anioMovOld) { _anioMovOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioMovOld };
                listaData.Add(me);

                _anioMovVar = (_anioMovOld > 0 && _anioMov > 0) ? ((_anioMov - _anioMovOld) / _anioMovOld) * 100 : null;
                me = new MeMedicion24DTO() { Reporcodi = cat.Reporcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioMovVar };
                listaData.Add(me);
            }

            listaDataFinal = listaData;
        }

        /// <summary>
        /// Listar Reporte Tabla Balance eléctrico (GWh) - HTML
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="listaReporte"></param>
        /// <param name="listaPtos"></param>
        /// <returns></returns>
        public string ListarConsumoGrandesUsuariosHtml(List<MeMedicion24DTO> listaData, List<MeReporteDTO> listaReporte, List<MeReporptomedDTO> listaPtos)
        {
            StringBuilder strHtml = new StringBuilder();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo3();
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 1;
            nfi.NumberDecimalSeparator = ",";

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:70px;'>Área</th>");
            strHtml.Append("<th style='width:70px;'>Usuarios Libres (GWh)</th>");
            strHtml.Append("<th style='width:70px;'>Día</th>");
            strHtml.Append("<th style='width:70px;'>Mes</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Mes</th>");
            strHtml.Append("<th style='width:70px;'>Año</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Año</th>");
            strHtml.Append("<th style='width:70px;'>Año móvil</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Móvil</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            string estiloNombreCtg = "balance_electrico_ctg";
            string estiloCeldaNumero = "balance_electrico_celda_numero";

            int lr = 0;
            foreach (var reporte in listaReporte)
            {
                var listaCategoria = listaPtos.Where(x => x.Reporcodi == reporte.Reporcodi).OrderBy(x => x.Repptoorden).ToList();

                string estiloArea = reporte.AreaOperativa;
                if (lr > 0)
                {
                    estiloArea = reporte.AreaOperativa + " diferenciar_area";
                    estiloNombreCtg = "balance_electrico_ctg diferenciar_area";
                    estiloCeldaNumero = "balance_electrico_celda_numero diferenciar_area";
                }
                else
                {
                    estiloArea = reporte.AreaOperativa;
                    estiloNombreCtg = "balance_electrico_ctg";
                    estiloCeldaNumero = "balance_electrico_celda_numero";
                }

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td class='grande_usuario_libre_area_{2}' rowspan='{1}'>{0}</td>", reporte.AreaOperativa, listaCategoria.Count, estiloArea);
                int lc = 0;
                foreach (var cat in listaCategoria)
                {
                    if (lc != 0)
                    {
                        strHtml.Append("</tr>");
                        strHtml.Append("<tr>");
                        estiloNombreCtg = "balance_electrico_ctg";
                        estiloCeldaNumero = "balance_electrico_celda_numero";
                    }

                    decimal? _dia = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia).Meditotal;
                    decimal? _mes = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes).Meditotal;
                    decimal? _mesOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesOld).Meditotal;
                    decimal? _mesVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesVar).Meditotal;
                    decimal? _anio = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio).Meditotal;
                    decimal? _anioOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioOld).Meditotal;
                    decimal? _anioVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioVar).Meditotal;
                    decimal? _anioMov = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovil).Meditotal;
                    decimal? _anioMovOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld).Meditotal;
                    decimal? _anioMovVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar).Meditotal;

                    string strdia = _dia != null ? (_dia.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string strmes = _mes != null ? (_mes.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string strmesVar = _mesVar != null ? _mesVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranio = _anio != null ? (_anio.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioVar = _anioVar != null ? _anioVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioMov = _anioMov != null ? (_anioMov.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioMovVar = _anioMovVar != null ? _anioMovVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();

                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", cat.Ptomedidesc, estiloNombreCtg);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strdia, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmes, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmesVar, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranio, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioVar, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMov, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMovVar, estiloCeldaNumero);

                    lc++;
                }
                lr++;

                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Costos Operación

        #endregion

        #region Costos Marginales

        #endregion

        #region Participacion Recursos Energeticos

        /// <summary>
        /// Listar todos los tipos de estado de combustible con sus fuentes de energia
        /// </summary>
        /// <returns></returns>
        public List<EstadoCombustibleIEOD> ListarEstadoCombustible()
        {
            List<EstadoCombustibleIEOD> l = new List<EstadoCombustibleIEOD>();

            EstadoCombustibleIEOD ec;
            ec = new EstadoCombustibleIEOD() { Estcomcodi = ConstantesPR5ReportesServicio.EstcomcodiLiquido, Estcomnomb = ConstantesPR5ReportesServicio.EstcomnombLiquido, Estcomcolor = ConstantesPR5ReportesServicio.EstcomcolorLiquido };
            l.Add(ec);
            ec = new EstadoCombustibleIEOD() { Estcomcodi = ConstantesPR5ReportesServicio.EstcomcodiSolido, Estcomnomb = ConstantesPR5ReportesServicio.EstcomnombSolido, Estcomcolor = ConstantesPR5ReportesServicio.EstcomcolorSolido };
            l.Add(ec);
            ec = new EstadoCombustibleIEOD() { Estcomcodi = ConstantesPR5ReportesServicio.EstcomcodiGaseoso, Estcomnomb = ConstantesPR5ReportesServicio.EstcomnombGaseoso, Estcomcolor = ConstantesPR5ReportesServicio.EstcomcolorGaseoso };
            l.Add(ec);
            ec = new EstadoCombustibleIEOD() { Estcomcodi = ConstantesPR5ReportesServicio.EstcomcodiRadiacion, Estcomnomb = ConstantesPR5ReportesServicio.EstcomnombRadiacion, Estcomcolor = ConstantesPR5ReportesServicio.EstcomcolorRadiacion };
            l.Add(ec);

            return l;
        }

        /// <summary>
        /// Listar Reporte de Recursos Energeticos - La data de medicion48 convertirla 24
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="listaFuenteEnergia"></param>
        /// <param name="listaEstadoCombustible"></param>
        /// <param name="listaDataFinal"></param>
        /// <param name="listaDataFinalRER"></param>
        public void ListarRecursosEnergeticosDashboard24(DateTime fechaInicial, List<SiFuenteenergiaDTO> listaFuenteEnergia, List<EstadoCombustibleIEOD> listaEstadoCombustible, out List<MeMedicion24DTO> listaDataFinal, out List<MeMedicion24DTO> listaDataFinalRER)
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Configuración de fechas

            //Día
            DateTime fechaActual = fechaInicial;

            //Mes
            DateTime fechaInicialMes0 = new DateTime(fechaActual.Year, fechaActual.Month, 1), fechaFinalMes0 = fechaActual;
            int diffDiasMes = (fechaFinalMes0 - fechaInicialMes0).Days;
            diffDiasMes = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMes0, fechaFinalMes0) ? diffDiasMes - 1 : diffDiasMes;
            DateTime fechaInicialMes1 = new DateTime(fechaActual.Year - 1, fechaActual.Month, 1), fechaFinalMes1 = fechaInicialMes1.AddDays(diffDiasMes);

            //Año
            DateTime fechaInicialAnio0 = new DateTime(fechaActual.Year, 1, 1), fechaFinalAnio0 = fechaActual;
            int diffDiasAnio = (fechaFinalAnio0 - fechaInicialAnio0).Days;
            diffDiasAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialAnio0, fechaFinalAnio0) ? diffDiasAnio - 1 : diffDiasAnio;
            DateTime fechaInicialAnio1 = new DateTime(fechaActual.Year - 1, 1, 1), fechaFinalAnio1 = fechaInicialAnio1.AddDays(diffDiasAnio);

            //Año movil
            DateTime fechaFinalMovil0Tmp = fechaActual, fechaInicialMovil0Tmp = fechaFinalMovil0Tmp.AddDays(-(365 - 1));
            DateTime fechaInicialMovil0 = fechaActual, fechaFinalMovil0 = fechaActual;
            DateTime fechaInicialMovil1 = fechaActual, fechaFinalMovil1 = fechaActual;

            bool existeBisiestoRangoAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMovil0Tmp, fechaFinalMovil0Tmp);
            fechaInicialMovil0 = existeBisiestoRangoAnio ? fechaActual.AddDays(-365) : fechaActual.AddDays(-(365 - 1));
            fechaFinalMovil1 = fechaInicialMovil0.AddDays(-1);
            fechaInicialMovil1 = existeBisiestoRangoAnio ? fechaFinalMovil1.AddDays(-365) : fechaFinalMovil1.AddDays(-(365 - 1));

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion48

            DateTime fechaIniData = fechaInicialMovil1;
            DateTime fechaFinData = fechaActual;

            //Data Total
            List<MeMedicion48DTO> listaMedicionTotal48, listaMedicionTotal48RER;
            this.ReportePotenciaXTipoRecursoDataReporte(ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                 , ConstantesPR5ReportesServicio.TipoFteEnergiaTodos, fechaIniData, fechaFinData, false, out listaMedicionTotal48, out listaMedicionTotal48RER, out List<string> listaMensaje);
            List<MeMedicion24DTO> listaMedicionTotal24 = this.servFormatoRep.GetDataLista24From48(fechaIniData, fechaFinData, listaMedicionTotal48, ConstantesReportesMedicion.DatoPromedio, ConstantesReportesMedicion.TotalSumatoria, ConstantesReportesMedicion.ValidarCeroNo);
            List<MeMedicion24DTO> listaMedicionTotal24RER = this.servFormatoRep.GetDataLista24From48(fechaIniData, fechaFinData, listaMedicionTotal48RER, ConstantesReportesMedicion.DatoPromedio, ConstantesReportesMedicion.TotalSumatoria, ConstantesReportesMedicion.ValidarCeroNo);

            listaDataFinal = this.ListarRecursosEnergeticosDashboard24ByTipo(fechaInicial, listaFuenteEnergia, listaEstadoCombustible, listaMedicionTotal24);
            listaDataFinalRER = this.ListarRecursosEnergeticosDashboard24ByTipo(fechaInicial, listaFuenteEnergia, listaEstadoCombustible, listaMedicionTotal24RER);
        }

        /// <summary>
        /// Listar Total y las RER
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="listaFuenteEnergia"></param>
        /// <param name="listaEstadoCombustible"></param>
        /// <param name="listaMedicionTotal24"></param>
        /// <returns></returns>
        private List<MeMedicion24DTO> ListarRecursosEnergeticosDashboard24ByTipo(DateTime fechaInicial, List<SiFuenteenergiaDTO> listaFuenteEnergia, List<EstadoCombustibleIEOD> listaEstadoCombustible, List<MeMedicion24DTO> listaMedicionTotal24)
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Configuración de fechas

            //Día
            DateTime fechaActual = fechaInicial;

            //Mes
            DateTime fechaInicialMes0 = new DateTime(fechaActual.Year, fechaActual.Month, 1), fechaFinalMes0 = fechaActual;
            int diffDiasMes = (fechaFinalMes0 - fechaInicialMes0).Days;
            diffDiasMes = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMes0, fechaFinalMes0) ? diffDiasMes - 1 : diffDiasMes;
            DateTime fechaInicialMes1 = new DateTime(fechaActual.Year - 1, fechaActual.Month, 1), fechaFinalMes1 = fechaInicialMes1.AddDays(diffDiasMes);

            //Año
            DateTime fechaInicialAnio0 = new DateTime(fechaActual.Year, 1, 1), fechaFinalAnio0 = fechaActual;
            int diffDiasAnio = (fechaFinalAnio0 - fechaInicialAnio0).Days;
            diffDiasAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialAnio0, fechaFinalAnio0) ? diffDiasAnio - 1 : diffDiasAnio;
            DateTime fechaInicialAnio1 = new DateTime(fechaActual.Year - 1, 1, 1), fechaFinalAnio1 = fechaInicialAnio1.AddDays(diffDiasAnio);

            //Año movil
            DateTime fechaFinalMovil0Tmp = fechaActual, fechaInicialMovil0Tmp = fechaFinalMovil0Tmp.AddDays(-(365 - 1));
            DateTime fechaInicialMovil0 = fechaActual, fechaFinalMovil0 = fechaActual;
            DateTime fechaInicialMovil1 = fechaActual, fechaFinalMovil1 = fechaActual;

            bool existeBisiestoRangoAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMovil0Tmp, fechaFinalMovil0Tmp);
            fechaInicialMovil0 = existeBisiestoRangoAnio ? fechaActual.AddDays(-365) : fechaActual.AddDays(-(365 - 1));
            fechaFinalMovil1 = fechaInicialMovil0.AddDays(-1);
            fechaInicialMovil1 = existeBisiestoRangoAnio ? fechaFinalMovil1.AddDays(-365) : fechaFinalMovil1.AddDays(-(365 - 1));

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Generar data para reporte y graficos
            List<MeMedicion24DTO> listaData = new List<MeMedicion24DTO>();
            MeMedicion24DTO me = null;
            //DIA
            List<MeMedicion24DTO> dias = listaMedicionTotal24.Where(x => x.Medifecha == fechaActual).ToList();
            //MES
            List<MeMedicion24DTO> meses = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes0 && x.Medifecha <= fechaFinalMes0)).ToList();
            List<MeMedicion24DTO> mesesOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes1 && x.Medifecha <= fechaFinalMes1)).ToList();
            //AÑO
            List<MeMedicion24DTO> anios = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0)).ToList();
            List<MeMedicion24DTO> aniosOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1)).ToList();
            //AÑO MOVIL
            List<MeMedicion24DTO> aniosMov = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil0 && x.Medifecha <= fechaFinalMovil0)).ToList();
            List<MeMedicion24DTO> aniosMovOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil1 && x.Medifecha <= fechaFinalMovil1)).ToList();

            //Listar por Fuente de Energia
            foreach (var cat in listaFuenteEnergia)
            {
                MeMedicion24DTO dia = dias.Find(x => x.Fenergcodi == cat.Fenergcodi);
                List<MeMedicion24DTO> mes = meses.Where(x => x.Fenergcodi == cat.Fenergcodi).ToList();
                List<MeMedicion24DTO> mesOld = mesesOld.Where(x => x.Fenergcodi == cat.Fenergcodi).ToList();
                List<MeMedicion24DTO> anio = anios.Where(x => x.Fenergcodi == cat.Fenergcodi).ToList();
                List<MeMedicion24DTO> anioOld = aniosOld.Where(x => x.Fenergcodi == cat.Fenergcodi).ToList();
                List<MeMedicion24DTO> anioMov = aniosMov.Where(x => x.Fenergcodi == cat.Fenergcodi).ToList();
                List<MeMedicion24DTO> anioMovOld = aniosMovOld.Where(x => x.Fenergcodi == cat.Fenergcodi).ToList();

                decimal? _dia = null;
                decimal? _mes = null;
                decimal? _mesOld = null;
                decimal? _mesVar = null;
                decimal? _anio = null;
                decimal? _anioOld = null;
                decimal? _anioVar = null;
                decimal? _anioMov = null;
                decimal? _anioMovOld = null;
                decimal? _anioMovVar = null;

                //
                _dia = (dia != null) ? dia.Meditotal : null;
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEDia, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _dia };
                listaData.Add(me);
                //
                if (mes.Count > 0) { _mes = 0; foreach (var a in mes) { _mes += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMes, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _mes };
                listaData.Add(me);

                if (mesOld.Count > 0) { _mesOld = 0; foreach (var a in mesOld) { _mesOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _mesOld };
                listaData.Add(me);

                _mesVar = (_mesOld > 0 && _mes > 0) ? ((_mes - _mesOld) / _mesOld) * 100 : null;
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _mesVar };
                listaData.Add(me);

                //
                if (anio.Count > 0) { _anio = 0; foreach (var a in anio) { _anio += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnio, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _anio };
                listaData.Add(me);

                if (anioOld.Count > 0) { _anioOld = 0; foreach (var a in anioOld) { _anioOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _anioOld };
                listaData.Add(me);

                _anioVar = (_anioOld > 0 && _anio > 0) ? ((_anio - _anioOld) / _anioOld) * 100 : 0;
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _anioVar };
                listaData.Add(me);

                //
                if (anioMov.Count > 0) { _anioMov = 0; foreach (var a in anioMov) { _anioMov += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovil, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _anioMov };
                listaData.Add(me);

                //
                if (anioMovOld.Count > 0) { _anioMovOld = 0; foreach (var a in anioMovOld) { _anioMovOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _anioMovOld };
                listaData.Add(me);

                _anioMovVar = (_anioMovOld > 0 && _anioMov > 0) ? ((_anioMov - _anioMovOld) / _anioMovOld) * 100 : null;
                me = new MeMedicion24DTO() { Fenergcodi = cat.Fenergcodi, Fenergnomb = cat.Fenergnomb, Fenergcolor = cat.Fenergcolor, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteDetallado, Meditotal = _anioMovVar };
                listaData.Add(me);
            }

            //Por cada Estado de Combustible
            List<SiFuenteenergiaDTO> listaFuenteEnergTmp;
            foreach (var cat in listaEstadoCombustible)
            {
                listaFuenteEnergTmp = listaFuenteEnergia.Where(x => x.Estcomcodi == cat.Estcomcodi).ToList();
                List<int> listaFenergcodi = listaFuenteEnergTmp.Select(x => x.Fenergcodi).ToList();

                List<MeMedicion24DTO> dia = dias.Where(x => listaFenergcodi.Contains(x.Fenergcodi)).ToList();
                List<MeMedicion24DTO> mes = meses.Where(x => listaFenergcodi.Contains(x.Fenergcodi)).ToList();
                List<MeMedicion24DTO> mesOld = mesesOld.Where(x => listaFenergcodi.Contains(x.Fenergcodi)).ToList();
                List<MeMedicion24DTO> anio = anios.Where(x => listaFenergcodi.Contains(x.Fenergcodi)).ToList();
                List<MeMedicion24DTO> anioOld = aniosOld.Where(x => listaFenergcodi.Contains(x.Fenergcodi)).ToList();
                List<MeMedicion24DTO> anioMov = aniosMov.Where(x => listaFenergcodi.Contains(x.Fenergcodi)).ToList();
                List<MeMedicion24DTO> anioMovOld = aniosMovOld.Where(x => listaFenergcodi.Contains(x.Fenergcodi)).ToList();

                decimal? _dia = null;
                decimal? _mes = null;
                decimal? _mesOld = null;
                decimal? _mesVar = null;
                decimal? _anio = null;
                decimal? _anioOld = null;
                decimal? _anioVar = null;
                decimal? _anioMov = null;
                decimal? _anioMovOld = null;
                decimal? _anioMovVar = null;

                //
                if (dia.Count > 0) { _dia = 0; foreach (var a in dia) { _dia += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEDia, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _dia };
                listaData.Add(me);
                //
                if (mes.Count > 0) { _mes = 0; foreach (var a in mes) { _mes += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMes, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _mes };
                listaData.Add(me);

                if (mesOld.Count > 0) { _mesOld = 0; foreach (var a in mesOld) { _mesOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _mesOld };
                listaData.Add(me);

                _mesVar = (_mesOld > 0 && _mes > 0) ? ((_mes - _mesOld) / _mesOld) * 100 : null;
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _mesVar };
                listaData.Add(me);

                //
                if (anio.Count > 0) { _anio = 0; foreach (var a in anio) { _anio += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnio, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anio };
                listaData.Add(me);

                if (anioOld.Count > 0) { _anioOld = 0; foreach (var a in anioOld) { _anioOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioOld };
                listaData.Add(me);

                _anioVar = (_anioOld > 0 && _anio > 0) ? ((_anio - _anioOld) / _anioOld) * 100 : 0;
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioVar };
                listaData.Add(me);

                //
                if (anioMov.Count > 0) { _anioMov = 0; foreach (var a in anioMov) { _anioMov += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovil, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioMov };
                listaData.Add(me);

                //
                if (anioMovOld.Count > 0) { _anioMovOld = 0; foreach (var a in anioMovOld) { _anioMovOld += (decimal)a.Meditotal; } }
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioMovOld };
                listaData.Add(me);

                _anioMovVar = (_anioMovOld > 0 && _anioMov > 0) ? ((_anioMov - _anioMovOld) / _anioMovOld) * 100 : null;
                me = new MeMedicion24DTO() { Estcomcodi = cat.Estcomcodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar, TipoReporte = ConstantesPR5ReportesServicio.TipoReporteConsolidado, Meditotal = _anioMovVar };
                listaData.Add(me);
            }

            return listaData;
        }

        /// <summary>
        /// Listar Participacion Recursos Energeticos (GWh) - HTML
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="listaFuenteEnergia"></param>
        /// <param name="listaEstadoCombustible"></param>
        /// <returns></returns>
        public string ListarRecursosEnergeticosDashboard24Html(List<MeMedicion24DTO> listaData, List<SiFuenteenergiaDTO> listaFuenteEnergia, List<EstadoCombustibleIEOD> listaEstadoCombustible)
        {
            StringBuilder strHtml = new StringBuilder();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo3();
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 1;
            nfi.NumberDecimalSeparator = ",";

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<th style='width:70px;'>Estado</th>");
            strHtml.Append("<th style='width:70px;'>Energía (GWh)</th>");
            strHtml.Append("<th style='width:70px;'>Día</th>");
            strHtml.Append("<th style='width:70px;'>Mes</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Mes</th>");
            strHtml.Append("<th style='width:70px;'>Año</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Año</th>");
            strHtml.Append("<th style='width:70px;'>Año móvil</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Móvil</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            string estiloNombreCtg = "balance_electrico_ctg";
            string estiloCeldaNumero = "balance_electrico_celda_numero";

            int lr = 0;
            foreach (var reporte in listaEstadoCombustible)
            {
                var listaCategoria = listaFuenteEnergia.Where(x => x.Estcomcodi == reporte.Estcomcodi).OrderBy(x => x.Estcomcodi).ToList();

                string estiloArea = string.Empty;
                if (lr > 0)
                {
                    estiloArea = "td_estado_combustible" + " diferenciar_area";
                    estiloNombreCtg = "balance_electrico_ctg diferenciar_area";
                    estiloCeldaNumero = "balance_electrico_celda_numero diferenciar_area";
                }
                else
                {
                    estiloArea = "td_estado_combustible";
                    estiloNombreCtg = "balance_electrico_ctg";
                    estiloCeldaNumero = "balance_electrico_celda_numero";
                }

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='background: {2} !important' class='{3}' rowspan='{1}'>{0}</td>", reporte.Estcomnomb, listaCategoria.Count, reporte.Estcomcolor, estiloArea);
                int lc = 0;
                foreach (var cat in listaCategoria)
                {
                    if (lc != 0)
                    {
                        strHtml.Append("</tr>");
                        strHtml.Append("<tr>");
                        estiloNombreCtg = "balance_electrico_ctg";
                        estiloCeldaNumero = "balance_electrico_celda_numero";
                    }

                    decimal? _dia = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia).Meditotal;
                    decimal? _mes = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes).Meditotal;
                    decimal? _mesOld = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesOld).Meditotal;
                    decimal? _mesVar = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesVar).Meditotal;
                    decimal? _anio = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio).Meditotal;
                    decimal? _anioOld = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioOld).Meditotal;
                    decimal? _anioVar = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioVar).Meditotal;
                    decimal? _anioMov = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovil).Meditotal;
                    decimal? _anioMovOld = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld).Meditotal;
                    decimal? _anioMovVar = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar).Meditotal;

                    string strdia = _dia != null ? (_dia.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string strmes = _mes != null ? (_mes.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string strmesVar = _mesVar != null ? _mesVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranio = _anio != null ? (_anio.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioVar = _anioVar != null ? _anioVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioMov = _anioMov != null ? (_anioMov.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioMovVar = _anioMovVar != null ? _anioMovVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();

                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", cat.Fenergnomb, estiloNombreCtg);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strdia, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmes, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmesVar, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranio, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioVar, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMov, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMovVar, estiloCeldaNumero);

                    lc++;
                }
                lr++;

                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Participacion RER

        /// <summary>
        /// Listar Participacion Recursos Energeticos (GWh) - HTML
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="listaFuenteEnergia"></param>
        /// <param name="listaEstadoCombustible"></param>
        /// <returns></returns>
        public string ListarRecursosEnergeticosRERDashboard24Html(List<MeMedicion24DTO> listaData, List<SiFuenteenergiaDTO> listaFuenteEnergia, List<EstadoCombustibleIEOD> listaEstadoCombustible)
        {
            StringBuilder strHtml = new StringBuilder();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo3();
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 1;
            nfi.NumberDecimalSeparator = ",";

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<th style='width:70px;'>Estado</th>");
            strHtml.Append("<th style='width:70px;'>Energía renovable (GWh)</th>");
            strHtml.Append("<th style='width:70px;'>Día</th>");
            strHtml.Append("<th style='width:70px;'>Mes</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Mes</th>");
            strHtml.Append("<th style='width:70px;'>Año</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Año</th>");
            strHtml.Append("<th style='width:70px;'>Año móvil</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Móvil</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            string estiloNombreCtg = "balance_electrico_ctg";
            string estiloCeldaNumero = "balance_electrico_celda_numero";

            int lr = 0;
            foreach (var reporte in listaEstadoCombustible)
            {
                var listaCategoria = listaFuenteEnergia.Where(x => x.Estcomcodi == reporte.Estcomcodi).OrderBy(x => x.Estcomcodi).ToList();

                string estiloArea = string.Empty;
                if (lr > 0)
                {
                    estiloArea = "td_estado_combustible" + " diferenciar_area";
                    estiloNombreCtg = "balance_electrico_ctg diferenciar_area";
                    estiloCeldaNumero = "balance_electrico_celda_numero diferenciar_area";
                }
                else
                {
                    estiloArea = "td_estado_combustible";
                    estiloNombreCtg = "balance_electrico_ctg";
                    estiloCeldaNumero = "balance_electrico_celda_numero";
                }

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='background: {2} !important' class='{3}' rowspan='{1}'>{0}</td>", reporte.Estcomnomb, listaCategoria.Count, reporte.Estcomcolor, estiloArea);
                int lc = 0;
                foreach (var cat in listaCategoria)
                {
                    if (lc != 0)
                    {
                        strHtml.Append("</tr>");
                        strHtml.Append("<tr>");
                        estiloNombreCtg = "balance_electrico_ctg";
                        estiloCeldaNumero = "balance_electrico_celda_numero";
                    }

                    decimal? _dia = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia).Meditotal;
                    decimal? _mes = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes).Meditotal;
                    decimal? _mesOld = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesOld).Meditotal;
                    decimal? _mesVar = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesVar).Meditotal;
                    decimal? _anio = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio).Meditotal;
                    decimal? _anioOld = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioOld).Meditotal;
                    decimal? _anioVar = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioVar).Meditotal;
                    decimal? _anioMov = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovil).Meditotal;
                    decimal? _anioMovOld = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld).Meditotal;
                    decimal? _anioMovVar = listaData.Find(x => x.Fenergcodi == cat.Fenergcodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar).Meditotal;

                    string strdia = _dia != null ? (_dia.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string strmes = _mes != null ? (_mes.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string strmesVar = _mesVar != null ? _mesVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranio = _anio != null ? (_anio.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioVar = _anioVar != null ? _anioVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioMov = _anioMov != null ? (_anioMov.Value / ConstantesPR5ReportesServicio.FactorGW).ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioMovVar = _anioMovVar != null ? _anioMovVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();

                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", cat.Fenergnomb, estiloNombreCtg);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strdia, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmes, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmesVar, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranio, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioVar, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMov, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMovVar, estiloCeldaNumero);

                    lc++;
                }
                lr++;

                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Energía Primaria

        /// <summary>
        /// Listar los items del reporte de energia primaria para Dashboard
        /// </summary>
        /// <returns></returns>
        public List<TipoEnergiaPrimariaIEOD> ListarReporteEnergiaPrimaria()
        {
            List<TipoEnergiaPrimariaIEOD> l = new List<TipoEnergiaPrimariaIEOD>();
            TipoEnergiaPrimariaIEOD ep = new TipoEnergiaPrimariaIEOD();
            ep = new TipoEnergiaPrimariaIEOD()
            {
                Energprimnomb = ConstantesPR5ReportesServicio.EnergprimnombRadiacionSolar,
                Energprimcolor = ConstantesPR5ReportesServicio.EnergprimcolorRadiacionSolar,
                Tptomedicodi = ConstantesPR5ReportesServicio.TptomedicodiRadiacionSolar,
                Orden = 1,
                TipoTotal = ConstantesReportesMedicion.TotalPromedio,
                ValidarCero = ConstantesReportesMedicion.ValidarCeroSi
            };
            l.Add(ep);
            ep = new TipoEnergiaPrimariaIEOD()
            {
                Energprimnomb = ConstantesPR5ReportesServicio.EnergprimnombVelocidadViento,
                Energprimcolor = ConstantesPR5ReportesServicio.EnergprimcolorVelocidadViento,
                Tptomedicodi = ConstantesPR5ReportesServicio.TptomedicodiVelocidadViento,
                Orden = 2,
                TipoTotal = ConstantesReportesMedicion.TotalPromedio,
                ValidarCero = ConstantesReportesMedicion.ValidarCeroSi
            };
            l.Add(ep);
            ep = new TipoEnergiaPrimariaIEOD()
            {
                Energprimnomb = ConstantesPR5ReportesServicio.EnergprimnombBiomasa,
                Energprimcolor = ConstantesPR5ReportesServicio.EnergprimcolorBiomasa,
                Tptomedicodi = ConstantesPR5ReportesServicio.TptomedicodiVolumenBagazo,
                Orden = 3,
                TipoTotal = ConstantesReportesMedicion.TotalSumatoria,
                ValidarCero = ConstantesReportesMedicion.ValidarCeroNo
            };
            l.Add(ep);
            ep = new TipoEnergiaPrimariaIEOD()
            {
                Energprimnomb = ConstantesPR5ReportesServicio.EnergprimnombBiogas,
                Energprimcolor = ConstantesPR5ReportesServicio.EnergprimcolorBiogas,
                Tptomedicodi = ConstantesPR5ReportesServicio.TptomedicodiVolumenBiogas,
                Orden = 4,
                TipoTotal = ConstantesReportesMedicion.TotalSumatoria,
                ValidarCero = ConstantesReportesMedicion.ValidarCeroNo
            };
            l.Add(ep);
            return l;
        }

        /// <summary>
        /// Listar los puntos Fuente de Energia Primaria
        /// </summary>
        /// <returns></returns>
        public List<MePtomedicionDTO> ListarPtoEnergiaPrimaria(DateTime fechaIni, DateTime fechaFin)
        {
            List<MePtomedicionDTO> l = ListarPtoEnergiaPrimariaFromFormato(fechaIni, fechaFin);

            l = l.Where(x => x.Hojaptoactivo == 1).ToList();
            foreach (var pto in l)
            {
                if (ConstantesHorasOperacion.IdTipoHidraulica == pto.Famcodi
                    || ConstantesHorasOperacion.IdTipoTermica == pto.Famcodi
                    || ConstantesHorasOperacion.IdTipoSolar == pto.Famcodi
                    || ConstantesHorasOperacion.IdTipoEolica == pto.Famcodi)
                {
                    pto.Ptomedidesc = pto.Gruponomb.Trim();
                }
                else
                {
                    pto.Ptomedidesc = pto.Grupocentral.Trim() + " (" + pto.Equiabrev + ")";
                }
            }

            return l;
        }

        /// <summary>
        /// Listar puntos de medición segun formato
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        private List<MePtomedicionDTO> ListarPtoEnergiaPrimariaFromFormato(DateTime fechaIni, DateTime fechaFin)
        {
            List<MePtomedicionDTO> l = new List<MePtomedicionDTO>();
            List<MePtomedicionDTO> l1 = FactorySic.GetMePtomedicionRepository().ListarPtoMedicionByOriglectcodiAndFormato(ConstantesPR5ReportesServicio.OriglectcodiFuenteEnergiaPrimaria, ConstantesHard.IdFormatoEnergiaPrimariaSolar, fechaIni, fechaFin);
            List<MePtomedicionDTO> l2 = FactorySic.GetMePtomedicionRepository().ListarPtoMedicionByOriglectcodiAndFormato(ConstantesPR5ReportesServicio.OriglectcodiFuenteEnergiaPrimaria, ConstantesHard.IdFormatoEnergiaPrimariaEolicoTermico, fechaIni, fechaFin);
            l.AddRange(l1);
            l.AddRange(l2);

            return l;
        }

        /// <summary>
        /// Lista de empresas de energia primaria
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaEnergiaPrimaria(DateTime fechaIni, DateTime fechaFin)
        {
            return this.ListarPtoEnergiaPrimariaFromFormato(fechaIni, fechaFin).GroupBy(x => new { x.Emprcodi, x.Emprnomb })
                .Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Emprcodi.Value, Emprnomb = x.Key.Emprnomb })
                .OrderBy(x => x.Emprnomb).ToList();
        }

        /// <summary>
        /// Listar la energia primaria
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaRep"></param>
        /// <param name="listaPto"></param>
        /// <returns></returns>
        public List<MeMedicion48DTO> ListarDataEnergiaPrimaria(DateTime fechaIni, DateTime fechaFin, List<TipoEnergiaPrimariaIEOD> listaRep, List<MePtomedicionDTO> listaPto)
        {
            List<MeMedicion48DTO> listaFinal = new List<MeMedicion48DTO>();

            List<MeMedicion48DTO> listaData = ReporteRegistroEnergia30UnidadesDataReporte(fechaIni, fechaFin);

            foreach (var rep in listaRep)
            {
                var lp = listaPto.Where(x => x.Tipoptomedicodi == rep.Tptomedicodi).ToList();
                foreach (var pto in lp)
                {
                    for (var f = fechaIni.Date; f <= fechaFin.Date; f = f.AddDays(1))
                    {
                        MeMedicion48DTO dXpto = listaData.Find(x => x.Ptomedicodi == pto.Ptomedicodi && x.Medifecha == f);
                        if (dXpto != null)
                        {
                            dXpto.Tipoptomedicodi = rep.Tptomedicodi;
                            dXpto.TipoMediTotal = rep.TipoTotal;
                        }
                        else
                        {
                            dXpto = new MeMedicion48DTO();
                            dXpto.Ptomedicodi = pto.Ptomedicodi;
                            dXpto.Tipoptomedicodi = rep.Tptomedicodi;
                            dXpto.Medifecha = f;
                            dXpto.Meditotal = 0;
                            dXpto.TipoMediTotal = rep.TipoTotal;
                        }

                        listaFinal.Add(dXpto);
                    }
                }
            }

            return listaFinal;
        }

        /// <summary>
        /// Listar energia Primaria - La data de medicion48 convertirla 24
        /// </summary>
        /// <param name="fechaInicial"></param>
        /// <param name="listaPtos"></param>
        /// <param name="listaTipoEnergiaPrimaria"></param>
        /// <param name="listaDataFinal"></param>
        public void ListarEnergiaPrimariaDashboard24(DateTime fechaInicial, List<MePtomedicionDTO> listaPtos, List<TipoEnergiaPrimariaIEOD> listaTipoEnergiaPrimaria, out List<MeMedicion24DTO> listaDataFinal)
        {
            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Configuración de fechas

            //Día
            DateTime fechaActual = fechaInicial;

            //Mes
            DateTime fechaInicialMes0 = new DateTime(fechaActual.Year, fechaActual.Month, 1), fechaFinalMes0 = fechaActual;
            int diffDiasMes = (fechaFinalMes0 - fechaInicialMes0).Days;
            diffDiasMes = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMes0, fechaFinalMes0) ? diffDiasMes - 1 : diffDiasMes;
            DateTime fechaInicialMes1 = new DateTime(fechaActual.Year - 1, fechaActual.Month, 1), fechaFinalMes1 = fechaInicialMes1.AddDays(diffDiasMes);

            //Año
            DateTime fechaInicialAnio0 = new DateTime(fechaActual.Year, 1, 1), fechaFinalAnio0 = fechaActual;
            int diffDiasAnio = (fechaFinalAnio0 - fechaInicialAnio0).Days;
            diffDiasAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialAnio0, fechaFinalAnio0) ? diffDiasAnio - 1 : diffDiasAnio;
            DateTime fechaInicialAnio1 = new DateTime(fechaActual.Year - 1, 1, 1), fechaFinalAnio1 = fechaInicialAnio1.AddDays(diffDiasAnio);

            //Año movil
            DateTime fechaFinalMovil0Tmp = fechaActual, fechaInicialMovil0Tmp = fechaFinalMovil0Tmp.AddDays(-(365 - 1));
            DateTime fechaInicialMovil0 = fechaActual, fechaFinalMovil0 = fechaActual;
            DateTime fechaInicialMovil1 = fechaActual, fechaFinalMovil1 = fechaActual;

            bool existeBisiestoRangoAnio = UtilAnexoAPR5.ExisteBisiestoEnRango(fechaInicialMovil0Tmp, fechaFinalMovil0Tmp);
            fechaInicialMovil0 = existeBisiestoRangoAnio ? fechaActual.AddDays(-365) : fechaActual.AddDays(-(365 - 1));
            fechaFinalMovil1 = fechaInicialMovil0.AddDays(-1);
            fechaInicialMovil1 = existeBisiestoRangoAnio ? fechaFinalMovil1.AddDays(-365) : fechaFinalMovil1.AddDays(-(365 - 1));

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Traer data de me_medicion48

            DateTime fechaIniData = fechaInicialMovil1;
            DateTime fechaFinData = fechaActual;

            //Data Total
            List<MeMedicion48DTO> listaMedicionTotal48 = this.ListarDataEnergiaPrimaria(fechaIniData, fechaFinData, listaTipoEnergiaPrimaria, listaPtos), listaMedicionTotal48Tmp;
            List<MeMedicion24DTO> listaMedicionTotal24 = new List<MeMedicion24DTO>(), listaMedicionTotal24Tmp = new List<MeMedicion24DTO>();
            foreach (var rep in listaTipoEnergiaPrimaria)
            {
                listaMedicionTotal48Tmp = listaMedicionTotal48.Where(x => x.Tipoptomedicodi == rep.Tptomedicodi).ToList();
                listaMedicionTotal24Tmp = this.servFormatoRep.GetDataLista24From48(fechaIniData, fechaFinData, listaMedicionTotal48Tmp, ConstantesReportesMedicion.DatoPromedio, rep.TipoTotal, rep.ValidarCero);
                listaMedicionTotal24.AddRange(listaMedicionTotal24Tmp);
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            // Generar data para reporte y graficos
            List<MeMedicion24DTO> listaData = new List<MeMedicion24DTO>();
            List<decimal?> listaDataMeditotal;
            MeMedicion24DTO me = null;
            //DIA
            List<MeMedicion24DTO> dias = listaMedicionTotal24.Where(x => x.Medifecha == fechaActual).ToList();
            //MES
            List<MeMedicion24DTO> meses = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes0 && x.Medifecha <= fechaFinalMes0)).ToList();
            List<MeMedicion24DTO> mesesOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMes1 && x.Medifecha <= fechaFinalMes1)).ToList();
            //AÑO
            List<MeMedicion24DTO> anios = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio0 && x.Medifecha <= fechaFinalAnio0)).ToList();
            List<MeMedicion24DTO> aniosOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialAnio1 && x.Medifecha <= fechaFinalAnio1)).ToList();
            //AÑO MOVIL
            List<MeMedicion24DTO> aniosMov = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil0 && x.Medifecha <= fechaFinalMovil0)).ToList();
            List<MeMedicion24DTO> aniosMovOld = listaMedicionTotal24.Where(x => (x.Medifecha >= fechaInicialMovil1 && x.Medifecha <= fechaFinalMovil1)).ToList();

            // Por cada Fuente Energia Primaria
            foreach (var cat in listaPtos)
            {
                TipoEnergiaPrimariaIEOD tenergprim = listaTipoEnergiaPrimaria.Find(x => x.Tptomedicodi == cat.Tipoptomedicodi);

                MeMedicion24DTO dia = dias.Find(x => x.Ptomedicodi == cat.Ptomedicodi);
                List<MeMedicion24DTO> mes = meses.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> mesOld = mesesOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anio = anios.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioOld = aniosOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioMov = aniosMov.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();
                List<MeMedicion24DTO> anioMovOld = aniosMovOld.Where(x => x.Ptomedicodi == cat.Ptomedicodi).ToList();

                decimal? _dia = null;
                decimal? _mes = null;
                decimal? _mesOld = null;
                decimal? _mesVar = null;
                decimal? _anio = null;
                decimal? _anioOld = null;
                decimal? _anioVar = null;
                decimal? _anioMov = null;
                decimal? _anioMovOld = null;
                decimal? _anioMovVar = null;

                //
                _dia = (dia != null) ? dia.Meditotal : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEDia, Meditotal = _dia };
                listaData.Add(me);
                //
                if (mes.Count > 0)
                {
                    listaDataMeditotal = new List<decimal?>();
                    foreach (var a in mes)
                    {
                        if (ConstantesReportesMedicion.ValidarCeroSi == tenergprim.ValidarCero) { if ((decimal)a.Meditotal != 0) { listaDataMeditotal.Add((decimal)a.Meditotal); } } else { listaDataMeditotal.Add((decimal)a.Meditotal); }
                    }
                    _mes = (ConstantesReportesMedicion.TotalPromedio == tenergprim.TipoTotal) ? (listaDataMeditotal.Count > 0 ? listaDataMeditotal.Average(x => x) : 0) : listaDataMeditotal.Sum(x => x);
                }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMes, Meditotal = _mes };
                listaData.Add(me);

                //
                if (mesOld.Count > 0)
                {
                    listaDataMeditotal = new List<decimal?>();
                    foreach (var a in mesOld)
                    {
                        if (ConstantesReportesMedicion.ValidarCeroSi == tenergprim.ValidarCero) { if ((decimal)a.Meditotal != 0) { listaDataMeditotal.Add((decimal)a.Meditotal); } } else { listaDataMeditotal.Add((decimal)a.Meditotal); }
                    }
                    _mesOld = (ConstantesReportesMedicion.TotalPromedio == tenergprim.TipoTotal) ? (listaDataMeditotal.Count > 0 ? listaDataMeditotal.Average(x => x) : 0) : listaDataMeditotal.Sum(x => x);
                }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesOld, Meditotal = _mesOld };
                listaData.Add(me);

                _mesVar = (_mesOld > 0 && _mes > 0) ? ((_mes - _mesOld) / _mesOld) * 100 : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEMesVar, Meditotal = _mesVar };
                listaData.Add(me);

                //
                if (anio.Count > 0)
                {
                    listaDataMeditotal = new List<decimal?>();
                    foreach (var a in anio)
                    {
                        if (ConstantesReportesMedicion.ValidarCeroSi == tenergprim.ValidarCero) { if ((decimal)a.Meditotal != 0) { listaDataMeditotal.Add((decimal)a.Meditotal); } } else { listaDataMeditotal.Add((decimal)a.Meditotal); }
                    }
                    _anio = (ConstantesReportesMedicion.TotalPromedio == tenergprim.TipoTotal) ? (listaDataMeditotal.Count > 0 ? listaDataMeditotal.Average(x => x) : 0) : listaDataMeditotal.Sum(x => x);
                }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnio, Meditotal = _anio };
                listaData.Add(me);

                //
                if (anioOld.Count > 0)
                {
                    listaDataMeditotal = new List<decimal?>();
                    foreach (var a in anioOld)
                    {
                        if (ConstantesReportesMedicion.ValidarCeroSi == tenergprim.ValidarCero) { if ((decimal)a.Meditotal != 0) { listaDataMeditotal.Add((decimal)a.Meditotal); } } else { listaDataMeditotal.Add((decimal)a.Meditotal); }
                    }
                    _anioOld = (ConstantesReportesMedicion.TotalPromedio == tenergprim.TipoTotal) ? (listaDataMeditotal.Count > 0 ? listaDataMeditotal.Average(x => x) : 0) : listaDataMeditotal.Sum(x => x);
                }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioOld, Meditotal = _anioOld };
                listaData.Add(me);

                _anioVar = (_anioOld > 0 && _anio > 0) ? ((_anio - _anioOld) / _anioOld) * 100 : 0;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioVar, Meditotal = _anioVar };
                listaData.Add(me);

                //
                if (anioMov.Count > 0)
                {
                    listaDataMeditotal = new List<decimal?>();
                    foreach (var a in anioMov)
                    {
                        if (ConstantesReportesMedicion.ValidarCeroSi == tenergprim.ValidarCero) { if ((decimal)a.Meditotal != 0) { listaDataMeditotal.Add((decimal)a.Meditotal); } } else { listaDataMeditotal.Add((decimal)a.Meditotal); }
                    }
                    _anioMov = (ConstantesReportesMedicion.TotalPromedio == tenergprim.TipoTotal) ? (listaDataMeditotal.Count > 0 ? listaDataMeditotal.Average(x => x) : 0) : listaDataMeditotal.Sum(x => x);
                }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovil, Meditotal = _anioMov };
                listaData.Add(me);

                //
                if (anioMovOld.Count > 0)
                {
                    listaDataMeditotal = new List<decimal?>();
                    foreach (var a in anioMovOld)
                    {
                        if (ConstantesReportesMedicion.ValidarCeroSi == tenergprim.ValidarCero) { if ((decimal)a.Meditotal != 0) { listaDataMeditotal.Add((decimal)a.Meditotal); } } else { listaDataMeditotal.Add((decimal)a.Meditotal); }
                    }
                    _anioMovOld = (ConstantesReportesMedicion.TotalPromedio == tenergprim.TipoTotal) ? (listaDataMeditotal.Count > 0 ? listaDataMeditotal.Average(x => x) : 0) : listaDataMeditotal.Sum(x => x);
                }
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld, Meditotal = _anioMovOld };
                listaData.Add(me);

                _anioMovVar = (_anioMovOld > 0 && _anioMov > 0) ? ((_anioMov - _anioMovOld) / _anioMovOld) * 100 : null;
                me = new MeMedicion24DTO() { Ptomedicodi = cat.Ptomedicodi, Tipoptomedicodi = tenergprim.Tptomedicodi, TipoResultadoFecha = ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar, Meditotal = _anioMovVar };
                listaData.Add(me);
            }

            listaDataFinal = listaData;
        }

        /// <summary>
        /// Listar Reporte Tabla Energia Primaria (GWh) - HTML
        /// </summary>
        /// <param name="listaData"></param>
        /// <param name="listaPtos"></param>
        /// <param name="listaTipoEnergiaPrimaria"></param>
        /// <returns></returns>
        public string ListarEnergiaPrimariaDashboardHtml(List<MeMedicion24DTO> listaData, List<MePtomedicionDTO> listaPtos, List<TipoEnergiaPrimariaIEOD> listaTipoEnergiaPrimaria)
        {
            StringBuilder strHtml = new StringBuilder();

            NumberFormatInfo nfi = UtilAnexoAPR5.GenerarNumberFormatInfo3();
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 1;
            nfi.NumberDecimalSeparator = ",";

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//
            strHtml.Append("<table class='pretty tabla-icono'>");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:70px;'>Fuente </th>");
            strHtml.Append("<th style='width:70px;'>Grupo</th>");
            strHtml.Append("<th style='width:70px;'>Día</th>");
            strHtml.Append("<th style='width:70px;'>Mes</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Mes</th>");
            strHtml.Append("<th style='width:70px;'>Año</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Año</th>");
            strHtml.Append("<th style='width:70px;'>Año móvil</th>");
            strHtml.Append("<th style='width:70px;'>% Δ Móvil</th>");
            strHtml.Append("</tr>");
            strHtml.Append("</thead>");
            #endregion

            #region cuerpo
            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");
            string estiloNombreCtg = "balance_electrico_ctg";
            string estiloCeldaNumero = "balance_electrico_celda_numero";

            int lr = 0;
            foreach (var reporte in listaTipoEnergiaPrimaria)
            {
                var listaCategoria = listaPtos.Where(x => x.Tipoptomedicodi == reporte.Tptomedicodi).OrderBy(x => x.Ptomedidesc).ToList();

                string estiloArea = string.Empty;
                if (lr > 0)
                {
                    estiloArea = "td_energia_primaria" + " diferenciar_area";
                    estiloNombreCtg = "balance_electrico_ctg diferenciar_area";
                    estiloCeldaNumero = "balance_electrico_celda_numero diferenciar_area";
                }
                else
                {
                    estiloArea = "td_energia_primaria";
                    estiloNombreCtg = "balance_electrico_ctg";
                    estiloCeldaNumero = "balance_electrico_celda_numero";
                }

                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='background: {2} !important' class='{3}' rowspan='{1}'>{0}</td>", reporte.Energprimnomb.ToUpper(), listaCategoria.Count, reporte.Energprimcolor, estiloArea);
                int lc = 0;
                foreach (var cat in listaCategoria)
                {
                    if (lc != 0)
                    {
                        strHtml.Append("</tr>");
                        strHtml.Append("<tr>");
                        estiloNombreCtg = "balance_electrico_ctg";
                        estiloCeldaNumero = "balance_electrico_celda_numero";
                    }

                    decimal? _dia = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEDia).Meditotal;
                    decimal? _mes = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMes).Meditotal;
                    decimal? _mesOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesOld).Meditotal;
                    decimal? _mesVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEMesVar).Meditotal;
                    decimal? _anio = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnio).Meditotal;
                    decimal? _anioOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioOld).Meditotal;
                    decimal? _anioVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioVar).Meditotal;
                    decimal? _anioMov = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovil).Meditotal;
                    decimal? _anioMovOld = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilOld).Meditotal;
                    decimal? _anioMovVar = listaData.Find(x => x.Ptomedicodi == cat.Ptomedicodi && x.TipoResultadoFecha == ConstantesPR5ReportesServicio.TipoDashBEAnioMovilVar).Meditotal;

                    string strdia = _dia != null ? (_dia.Value).ToString("N", nfi) + " " + cat.Tipoinfoabrev : ConstantesAppServicio.CaracterGuion.ToString();
                    string strmes = _mes != null ? (_mes.Value).ToString("N", nfi) + " " + cat.Tipoinfoabrev : ConstantesAppServicio.CaracterGuion.ToString();
                    string strmesVar = _mesVar != null ? _mesVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranio = _anio != null ? (_anio.Value).ToString("N", nfi) + " " + cat.Tipoinfoabrev : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioVar = _anioVar != null ? _anioVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioMov = _anioMov != null ? (_anioMov.Value).ToString("N", nfi) + " " + cat.Tipoinfoabrev : ConstantesAppServicio.CaracterGuion.ToString();
                    string stranioMovVar = _anioMovVar != null ? _anioMovVar.Value.ToString("N", nfi) : ConstantesAppServicio.CaracterGuion.ToString();

                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", cat.Ptomedidesc, estiloNombreCtg);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strdia, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmes, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", strmesVar, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranio, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioVar, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMov, estiloCeldaNumero);
                    strHtml.AppendFormat("<td class='{1}'>{0}</td>", stranioMovVar, estiloCeldaNumero);

                    lc++;
                }
                lr++;

                strHtml.Append("</tr>");
            }
            strHtml.Append("</tbody>");
            strHtml.Append("</table>");
            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Combustibles Utilizados
        #endregion

        #region Costos Variables
        #endregion

        #endregion

        #region Unidades de Reserva Fria

        /// <summary>
        /// Inserta un registro de la tabla ME_RFRIA_UNIDADRESTRIC
        /// </summary>
        public void SaveMeRfriaUnidadrestric(MeRfriaUnidadrestricDTO entity)
        {
            try
            {
                if (entity.Urfriacodi == 0)
                    FactorySic.GetMeRfriaUnidadrestricRepository().Save(entity);
                else
                    FactorySic.GetMeRfriaUnidadrestricRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla ME_RFRIA_UNIDADRESTRIC
        /// </summary>
        public void DeleteMeRfriaUnidadrestric(int urfriacodi)
        {
            try
            {
                FactorySic.GetMeRfriaUnidadrestricRepository().Delete(urfriacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla ME_RFRIA_UNIDADRESTRIC
        /// </summary>
        public MeRfriaUnidadrestricDTO GetByIdMeRfriaUnidadrestric(int urfriacodi)
        {
            return FactorySic.GetMeRfriaUnidadrestricRepository().GetById(urfriacodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla MeRfriaUnidadrestric
        /// </summary>
        public List<MeRfriaUnidadrestricDTO> GetByCriteriaMeRfriaUnidadrestrics(DateTime fecha)
        {
            return FactorySic.GetMeRfriaUnidadrestricRepository().GetByCriteria(fecha);
        }

        /// <summary>
        /// ExportarMeRfriaUnidadrestric
        /// </summary>
        /// <param name="fecha"></param>
        /// <param name="path"></param>
        /// <param name="filename"></param>
        /// <returns></returns>
        public int ExportarMeRfriaUnidadrestric(DateTime fecha, string path, string filename)
        {
            try
            {
                List<MeRfriaUnidadrestricDTO> entitys = FactorySic.GetMeRfriaUnidadrestricRepository().GetByCriteria(fecha);
                string file = path + filename;
                FileInfo newFile = new FileInfo(file);

                if (newFile.Exists)
                {
                    newFile.Delete();
                    newFile = new FileInfo(file);
                }

                using (ExcelPackage xlPackage = new ExcelPackage(newFile))
                {
                    ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add("UNIDADES RFRIA");

                    if (ws != null)
                    {
                        int index = 1;

                        ws.Cells[index, 1].Value = "FECHA";
                        ws.Cells[index, 2].Value = "HORA INICIO";
                        ws.Cells[index, 3].Value = "HORA FIN";
                        ws.Cells[index, 4].Value = "EMPRESA";
                        ws.Cells[index, 5].Value = "CENTRAL";
                        ws.Cells[index, 6].Value = "UNIDAD";
                        ws.Cells[index, 7].Value = "OBSERVACIÓN";

                        ExcelRange rg = ws.Cells[index, 1, index, 7];
                        rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                        rg.Style.Fill.PatternType = ExcelFillStyle.Solid;
                        rg.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml("#2980B9"));
                        rg.Style.Font.Color.SetColor(Color.White);
                        rg.Style.Font.Size = 10;
                        rg.Style.Font.Bold = true;

                        index = 2;
                        foreach (MeRfriaUnidadrestricDTO item in entitys)
                        {
                            ws.Cells[index, 1].Value = ((DateTime)item.Urfriafechaperiodo).ToString("dd/MM/yyyy");
                            ws.Cells[index, 2].Value = ((DateTime)item.Urfriafechaini).ToString("HH:mm");
                            ws.Cells[index, 3].Value = ((DateTime)item.Urfriafechafin).ToString("HH:mm");
                            ws.Cells[index, 4].Value = item.Empresanomb;
                            ws.Cells[index, 5].Value = item.Centralnomb;
                            ws.Cells[index, 6].Value = item.Unidadnomb;
                            ws.Cells[index, 7].Value = item.Urfriaobservacion;


                            rg = ws.Cells[index, 1, index, 7];
                            rg.Style.Font.Size = 10;
                            rg.Style.Font.Color.SetColor(ColorTranslator.FromHtml("#246189"));

                            index++;
                        }

                        rg = ws.Cells[2, 1, index - 1, 7];
                        rg.Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        rg.Style.Border.Left.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rg.Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        rg.Style.Border.Right.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rg.Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        rg.Style.Border.Top.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));
                        rg.Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        rg.Style.Border.Bottom.Color.SetColor(ColorTranslator.FromHtml("#9F9F9F"));

                        rg = ws.Cells[1, 1, index, 7];
                        rg.AutoFitColumns();
                    }

                    xlPackage.Save();
                }

                return 1;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                return -1;
            }
        }

        /// <summary>
        /// ObtenerCentralesPorEmpresa
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<PrGrupoDTO> ObtenerCentralesPorEmpresa(int idEmpresa)
        {
            return (new COES.Servicios.Aplicacion.Despacho.GrupoDespachoAppServicio()).ObtenerCentrales("T", idEmpresa.ToString());
        }

        /// <summary>
        /// ObtenerUnidadesPorCentral
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idCentral"></param>
        /// <returns></returns>
        public List<PrGrupoDTO> ObtenerUnidadesPorCentral(int idEmpresa, int idCentral)
        {
            List<PrGrupoDTO> list = FactorySic.GetPrGrupoRepository().ObtenerArbolGrupoDespacho(idEmpresa.ToString(), "T");
            return list.Where(x => x.Grupopadre == idCentral).ToList();
        }

        #endregion

        #region Ayuda EXCEL

        /// <summary>
        /// Alinear  horizontalmente a un bloque en la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        /// <param name="alineacion"></param>
        /// <returns></returns>
        public void CeldasExcelAlinearHorizontalmente(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin, string alineacion)
        {
            var rg = ws.Cells[filaIni, coluIni, filaFin, coluFin];
            switch (alineacion)
            {
                case "General": rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.General; break;
                case "Izquierda": rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Left; break;
                case "Centro": rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center; break;
                case "CentroContinuo": rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.CenterContinuous; break;
                case "Derecha": rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Right; break;
                case "Lleno": rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Fill; break;
                case "Distribuido": rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Distributed; break;
                case "Justificado": rg.Style.HorizontalAlignment = ExcelHorizontalAlignment.Justify; break;
            }
        }

        /// <summary>
        ///  Agrupar varias celdas en un bloque en la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        /// <returns></returns>
        public void CeldasExcelAgrupar(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin)
        {
            ws.Cells[filaIni, coluIni, filaFin, coluFin].Merge = true;
        }

        /// <summary>
        /// Alinear  verticalmente a un bloque en la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        /// <param name="alineacion"></param>
        /// <returns></returns>
        public void CeldasExcelAlinearVerticalmente(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin, string alineacion)
        {
            var rg = ws.Cells[filaIni, coluIni, filaFin, coluFin];
            switch (alineacion)
            {
                case "Arriba": rg.Style.VerticalAlignment = ExcelVerticalAlignment.Top; break;
                case "Centro": rg.Style.VerticalAlignment = ExcelVerticalAlignment.Center; break;
                case "Abajo": rg.Style.VerticalAlignment = ExcelVerticalAlignment.Bottom; break;
                case "Distribuido": rg.Style.VerticalAlignment = ExcelVerticalAlignment.Distributed; break;
                case "Justificado": rg.Style.VerticalAlignment = ExcelVerticalAlignment.Justify; break;
            }
        }

        /// <summary>
        ///  Dar tipo y tamanio de letra a un bloque en la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        /// <param name="tipoLetra"></param>
        /// <param name="tamLetra"></param>
        /// <returns></returns>
        public void CeldasExcelTipoYTamanioLetra(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin, string tipoLetra, int tamLetra)
        {
            var bloque = ws.Cells[filaIni, coluIni, filaFin, coluFin];
            bloque.Style.Font.SetFromFont(new Font(tipoLetra, tamLetra));
        }

        /// <summary>
        ///  Dar tipo y tamanio de letra a un bloque en la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        /// <param name="color"></param>
        /// <returns></returns>
        public void CeldasExcelColorFondo(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin, string color)
        {
            var bloque = ws.Cells[filaIni, coluIni, filaFin, coluFin];
            bloque.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            if (color.Contains(","))
            {
                bloque.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.White);
                bloque.Style.Fill.BackgroundColor.SetColor(Color.FromArgb(Int32.Parse(color)));
            }
            if (color.Contains("#"))
            {
                bloque.Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.White);
                bloque.Style.Fill.BackgroundColor.SetColor(ColorTranslator.FromHtml(color));
            }

        }

        /// <summary>
        /// Color para la cabecera
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        /// <param name="colorFondo"></param>
        /// <param name="colorBorder"></param>
        public void CeldasExcelColorFondoYBorder(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin, Color colorFondo, Color colorBorder)
        {
            var bloque = ws.Cells[filaIni, coluIni, filaFin, coluFin];
            bloque.Style.Fill.PatternType = ExcelFillStyle.Solid;
            bloque.Style.Fill.BackgroundColor.SetColor(colorFondo);

            var borderTabla = bloque.Style.Border;
            borderTabla.Bottom.Style = borderTabla.Top.Style = borderTabla.Left.Style = borderTabla.Right.Style = ExcelBorderStyle.Thin;

            for (var i = filaIni; i <= filaFin; i++)
            {
                for (var j = coluIni; j <= coluFin; j++)
                {
                    var borderCelda = ws.Cells[i, j].Style.Border;
                    borderCelda.Bottom.Color.SetColor(colorBorder);
                    borderCelda.Top.Color.SetColor(colorBorder);
                    borderCelda.Left.Color.SetColor(colorBorder);
                    borderCelda.Right.Color.SetColor(colorBorder);
                }
            }
        }

        /// <summary>
        ///  Dar tipo y tamanio de letra a un bloque en la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        /// <param name="color"></param>
        /// <returns></returns>
        public void CeldasExcelColorTexto(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin, string color)
        {
            var bloque = ws.Cells[filaIni, coluIni, filaFin, coluFin];
            bloque.Style.Fill.PatternType = OfficeOpenXml.Style.ExcelFillStyle.Solid;
            if (color.Contains(","))
            {
                bloque.Style.Font.Color.SetColor(Color.FromArgb(Int32.Parse(color)));
            }
            if (color.Contains("#"))
            {
                bloque.Style.Font.Color.SetColor(ColorTranslator.FromHtml(color));
            }

        }

        /// <summary>
        ///  Colocar en negrita a un bloque en la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        /// <returns></returns>
        public void CeldasExcelEnNegrita(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin)
        {
            if (filaIni <= filaFin)
            {
                var bloque = ws.Cells[filaIni, coluIni, filaFin, coluFin];
                bloque.Style.Font.Bold = true;
            }
        }

        /// <summary>
        ///  Dar Wrap a una celda de la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <returns></returns>
        public void CeldasExcelWrapText(ExcelWorksheet ws, int filaIni, int coluIni)
        {
            var bloque = ws.Cells[filaIni, coluIni];
            bloque.Style.WrapText = true;
        }

        /// <summary>
        /// Dar Wrap a una celda de la tabla excel
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="filaIni"></param>
        /// <param name="coluIni"></param>
        /// <param name="filaFin"></param>
        /// <param name="coluFin"></param>
        public void CeldasExcelWrapText(ExcelWorksheet ws, int filaIni, int coluIni, int filaFin, int coluFin)
        {
            var bloque = ws.Cells[filaIni, coluIni, filaFin, coluFin];
            bloque.Style.WrapText = true;
        }

        /// <summary>
        /// Bordea cada celda con linea discontinua
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="rowFin"></param>
        /// <param name="colFin"></param>
        public void BorderCeldas(ExcelWorksheet ws, int rowIni, int colIni, int rowFin, int colFin)
        {
            var borderTabla = ws.Cells[rowIni, colIni, rowFin, colFin].Style.Border;
            borderTabla.Bottom.Style = borderTabla.Top.Style = borderTabla.Left.Style = borderTabla.Right.Style = ExcelBorderStyle.Hair;
        }

        /// <summary>
        /// Bordea cada celda con linea continua
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="rowFin"></param>
        /// <param name="colFin"></param>
        public void BorderCeldas2(ExcelWorksheet ws, int rowIni, int colIni, int rowFin, int colFin)
        {
            var borderTabla = ws.Cells[rowIni, colIni, rowFin, colFin].Style.Border;
            borderTabla.Bottom.Style = borderTabla.Top.Style = borderTabla.Left.Style = borderTabla.Right.Style = ExcelBorderStyle.Thin;
        }

        #endregion
    }

    #region Informe_Ejecutivo_Semanal

#pragma warning disable CS1591 // Missing XML comment for publicly visible type or member

    /// <summary>
    /// objeto de las fechas
    /// </summary>
    public class FechasPR5
    {
        public int TipoReporte { get; set; } //informe semanal, ejecutivo semanal, informe mensual, ejecutivo mensual, informe anual
        public string TipoVistaReporte { get; set; } //Individual,Grupal

        public bool EsReporteXMes { get; set; } //true: mensual o anual, false: ejecutivo o informe semanal
        public bool EsReporteAnual { get; set; }
        public bool EsReporteEjecutivoSemanal { get; set; }

        public DateTime FechaInicial { get; set; } //ingresaron como parametro
        public DateTime FechaFinal { get; set; } //ingresaron como parametro

        //Variables de año actual
        public PR5DatoAnio AnioAct { get; set; }

        //Variables de 1 año anterior
        public PR5DatoAnio Anio1Ant { get; set; }

        //Variables de 2 años anteriores
        public PR5DatoAnio Anio2Ant { get; set; }

        //Variables de 3 años anteriores
        public PR5DatoAnio Anio3Ant { get; set; }

        //bisiestos
        public List<DateTime> ListaFechaBisiesto { get; set; }

    }

    public class PR5DatoAnio
    {
        public DateTime RangoAct_FechaIni { get; set; }
        public DateTime RangoAct_FechaFin { get; set; }
        public string RangoAct_Num { get; set; }
        public string RangoAct_NumYAnio { get; set; }
        public string RangoAct_DiaYMesYAnio { get; set; }

        public int NumAnio { get; set; }
        public int NumSem { get; set; }
        public int NumMes { get; set; }

        public DateTime Rango1Ant_FechaIni { get; set; }
        public DateTime Rango1Ant_FechaFin { get; set; }
        public string Rango1Ant_Num { get; set; }
        public string Rango1Ant_NumYAnio { get; set; }

        public DateTime Rango2Ant_FechaIni { get; set; }
        public DateTime Rango2Ant_FechaFin { get; set; }
        public string Rango2Ant_Num { get; set; }
        public string Rango2Ant_NumYAnio { get; set; }

        public DateTime Fecha_01Enero { get; set; }
        public DateTime Fecha_Inicial { get; set; }
        public DateTime Fecha_Final { get; set; }
        public DateTime Fecha_31Diciembre { get; set; }
        public int Max_Num_Sem { get; set; }

        public DateTime MesAct_FechaIni { get; set; }
        public DateTime MesAct_FechaFin { get; set; }

        public DateTime Sem01_FechaIni { get; set; }
        public DateTime SemAct_FechaIni { get; set; }
        public DateTime SemAct_FechaFin { get; set; }

        public DateTime Ini_Data { get; set; }
        public DateTime Fecha_Final_MD96 { get; set; }
    }

    /// <summary>
    /// Objeto para almacenar el dato del Resumen Relevante
    /// </summary>
    public class ReporteResumenRelevante
    {
        public string TituloReporte { get; set; }

        public List<string> ListaFechaTituloReporte { get; set; }

        public string Subtitulo { get; set; }
        public string Subtitulo2 { get; set; }

        public string TituloParrafo1 { get; set; }
        public string Parrafo1 { get; set; }
        public List<string> ListaItemParrafo1 { get; set; }
    }

    public class OperacionComercialSein
    {
        public int Equicodi { get; set; }
        public int Famcodi { get; set; }
        public int Emprcodi { get; set; }

        public string Empresa { get; set; }
        public string Generacion { get; set; }
        public string Recurso { get; set; }
        public string Tecnologia { get; set; }
        public string Tiporer { get; set; }
        public string Central { get; set; }
        public string Unidades { get; set; }
        public decimal? Tension { get; set; }
        public decimal? PotEfectiva { get; set; }
        public decimal? PotInstalada { get; set; }
        public decimal? PotNominal { get; set; }
        public DateTime? FechaOperacion { get; set; }

        public decimal? PotCapacidadAnterior { get; set; }
        public decimal? PotCapacidadNueva { get; set; }

        public int TipoOperacion { get; set; }
        public int Tipoemprcodi { get; set; }
        public string Osinergcodi { get; set; }
        public int Fenergcodi { get; internal set; }

        public string Descripcion { get; set; }
        public string Observacion { get; set; }
        public string OsiCodigoTipoEmpresa { get; set; }
    }

    public class TensionBarras
    {
        public int Ptomedicodi { get; set; }
        public string Ptomedidesc { get; set; }
        public decimal? ValorMax { get; set; }
        public decimal? ValorMed { get; set; }
        public decimal? ValorMin { get; set; }
    }

    public class TipoCaudales
    {
        public List<MeReporptomedDTO> LstPtos { get; set; }
        public List<Tuple<int, DateTime, int, decimal?>> LstCaudalesSemanal { get; set; }
        public string titulo { get; set; }
    }

    /// <summary>
    /// Almacena el valor del total de generacion sea de Medicion96 o Medicion48
    /// </summary>
    public class ResultadoTotalGeneracion
    {
        public DateTime Medifecha { get; set; }
        public decimal? Meditotal { get; set; }
        public int TipoResultadoFecha { get; set; }

        public int Codigo { get; set; }
        public string Descripcion { get; set; }

        public int Tgenercodi { get; set; }
        public string Tgenernomb { get; set; }
        public string Tgenercolor { get; set; }

        public int? Tptomedicodi { get; set; }

        public string Emprnomb { get; set; }
        public int Emprcodi { get; set; }

        public int Fenergcodi { get; set; }
        public string Fenergnomb { get; set; }
        public string Fenergcolor { get; set; }

        public int Ctgdetcodi { get; set; }
        public string Ctgdetnomb { get; set; }

        public int Equipadre { get; set; }
        public string Central { get; set; }

        public int Ptomedicodi { get; set; }
        public string Ptomedibarranomb { get; set; }

        public int Grupocodi { get; set; }
        public string Gruponomb { get; set; }

        public int Barrcodi { get; set; }
        public int Barrzarea { get; set; }
        public string Barrnombre { get; set; }

        public int Areacodi { get; set; }
        public string Areanomb { get; set; }

        public string Areaoperativa { get; set; }
        public List<string> ListaGrupolinea { get; set; }

        public decimal? TotalProducido { get; set; }

        public int TipoSemanaRelProd { get; set; }

        public FiltroCeldaDato FiltroCeldaDato { get; set; }
    }

    public class FiltroCeldaDato
    {
        public DateTime FechaMD { get; set; }
        public DateTime FechaIni { get; set; }
        public DateTime FechaFin { get; set; }
        public int Fenergcodi { get; set; }
        public int Tgenercodi { get; set; }
        public bool EsInterconexion { get; set; }
    }

    public class InfSGIFilaResumenInterc
    {
        public DateTime FechaHora { get; set; }
        public bool TieneMD { get; set; }
        public string FechaHoraDesc { get; set; }
        public decimal EnergiaExp { get; set; }
        public decimal EnergiaImp { get; set; }
        public decimal ReactivaExp { get; set; }
        public decimal ReactivaImp { get; set; }
    }

    public class InfSGIReporteVersionado
    {
        public TablaReporte Tabla { get; set; }
        public TablaReporte TablaVar { get; set; }
        public GraficoWeb Grafico { get; set; }
        public GraficoWeb GraficoCompMD { get; set; }
        public GraficoWeb GraficoCargaDespacho { get; set; }
        public GraficoWeb GraficoVarSem { get; set; }
        public GraficoWeb GraficoMDSinExp { get; set; }
        public GraficoWeb GraficoComp { get; set; }
        public GraficoWeb GraficoEvoSem { get; set; }
        public GraficoWeb GraficoProdSem { get; set; }

        public GraficoWeb GraficoPieSemAct_AnioAct { get; set; }
        public GraficoWeb GraficoPieSemAct_Anio1Ant { get; set; }

        public GraficoWeb GraficoEveFallaXTipo { get; set; }
        public GraficoWeb GraficoEveFallaXFam { get; set; }
        public GraficoWeb GraficoEveEnergXFam { get; set; }
        public GraficoWeb GraficoEmpresaOtro { get; set; }
        public GraficoWeb GrafPartXEmprProducTotal { get; set; }
        public GraficoWeb GraficoPieMD { get; set; }
        public GraficoWeb GraficoBarraMD { get; set; }
        public GraficoWeb GraficoPieGen { get; set; }
        public GraficoWeb GraficoBarraGen { get; set; }

        public List<MeMedicionxintervaloDTO> ListaRptDia { get; set; }
        public List<MeMedicionxintervaloDTO> ListaTotal { get; set; }
        public List<MaximaDemandaDTO> ListaMDCoincidenteDataDesc { get; set; }
        public List<SiFuenteenergiaDTO> ListaFenerg { get; set; }

        public List<MeReporptomedDTO> ListaPtoEmbalsesLagunas { get; set; }
        public List<ResultadoTotalGeneracion> ListaDataXPto { get; set; }

        public List<MeReporteDTO> ListaReporte { get; set; }
        public List<string> ResultadosHtml { get; set; }
        public List<GraficoWeb> ListaGrafico { get; set; }
        public List<TablaReporte> ListaTabla { get; set; }
        public List<TensionBarras> ListaTbarras { get; set; }

        public List<CostoMarginalDTO> listaDataCmgXZona { get; set; }
        public List<EventoDTO> ListaEventos { get; set; }
        public List<EveCausaeventoDTO> ListaCausas { get; set; }
        public List<EqFamiliaDTO> ListaFamilia { get; set; }

        public List<SiEmpresaDTO> ListaULByPto { get; set; }
        public List<MeMedicion48DTO> ListaULByArea { get; set; }
        public List<MeMedicion48DTO> ListaDataUL30min { get; set; }
        public DemandadiaDTO ObjHFP_HP { get; set; }
        public DemandadiaDTO ObjMDFromRango { get; set; }

        public List<SiEmpresaDTO> ListaEmpresaArea { get; set; }
        public List<SiEmpresaDTO> ListaEmpresas { get; set; }
        public List<SiEmpresaDTO> ListaEmpresasOtros { get; set; }
        public List<MeMedicion48DTO> ListaReporteXPto { get; set; }
        public List<MeMedicion48DTO> ListaReporteXArea { get; set; }
        public List<MeMedicion48DTO> ListaReporteEvolSemanal { get; set; }
        public List<string> ListaMensaje { get; set; }
        public string TextoResumen { get; set; }
        public TablaReporte DataTablaXTgen { get; set; }
        public TablaReporte DataTablaTIE { get; set; }
        public ReporteResumenRelevante ObjTexto { get; set; }
        public string Resultado { get; set; }
        public List<SiNotaDTO> ListaNotas { get; set; }
        public List<string> ListaResumen { get; set; }
        public DateTime DiaMaximaDemanda { get; set; }
        public List<MeMedicion96DTO> ListaMedicion96 { get; set; }
        public List<MeReporptomedDTO> ListaPuntosCenNor { get; set; }
        public List<MeReporptomedDTO> ListaPuntosCenSur { get; set; }
        public List<Tuple<int, int, decimal?>> ListaPotenciaMaximaTransNor { get; set; }
        public List<Tuple<int, int, decimal?>> ListaPotenciaMaximaTransSur { get; set; }
        public List<Tuple<DateTime, string, int, int, int, int>> LstEvolIntgrCoes { get; set; }
        public List<SiEmpresadatDTO> ListEmpresasEvl { get; set; }
        public List<RiHistoricoDTO> ListRiHistorico { get; set; }
    }

    public class InfSGIFiltroReporte
    {
        public int Verscodi { get; set; }
        public int Mrepcodi { get; set; }

        /*public DateTime FechaInicial { get; set; }
        public DateTime FechaFinal { get; set; }*/
        public FechasPR5 ObjFecha { get; set; }

        public List<ItemMenuNumeral> ListaItem { get; set; }
    }

    public class InfSGIAisladosTempGPS
    {
        public int Gpscodi { get; set; }
        public string Gpsnombre { get; set; }

        public string VarSosFrecPeriodo { get; set; }
        public string VarSosFrecValor { get; set; }
        public int VarSosFrecNTransg { get; set; }
        public decimal? VarSosFrecMax { get; set; }
        public decimal? VarSosFrecMin { get; set; }

        public string VarSubFrecPeriodo { get; set; }
        public string VarSubFrecValor { get; set; }
        public int VarSubFrecNTransg { get; set; }
        public decimal? VarSubFrecMax { get; set; }
        public decimal? VarSubFrecMin { get; set; }

    }

    public class InfSGIResumenProd
    {
        //Despacho 30 minutos
        public List<MeMedicion48DTO> ListaMDSein48 { get; set; }
        public List<MeMedicion48DTO> ListaMDGen48 { get; set; }
        public List<MeMedicion48DTO> ListaMDSein48SinTIE { get; set; }
        public List<MeMedicion48DTO> ListaMDGenTgener48 { get; set; }
        public List<MeMedicion48DTO> ListaMDInterconexion48 { get; set; }
        public List<MeMedicion48DTO> ListaMDHP48 { get; set; }
        public List<MeMedicion48DTO> ListaMDFHP48 { get; set; }

        public List<MeMedicion48DTO> ListaTotalSein48 { get; set; }
        public List<MeMedicion48DTO> ListaTotalGen48 { get; set; }
        public List<MeMedicion48DTO> ListaTotalGenTgener48 { get; set; }
        public List<MeMedicion48DTO> ListaTotalGenUnidad48 { get; set; }
        public List<MeMedicion48DTO> ListaTotalGenImp48 { get; set; }
        public List<MeMedicion48DTO> ListaTotalInterconexion48 { get; set; }
        public List<MeMedicion48DTO> ListaTotalInterconexionExp48 { get; set; }
        public List<MeMedicion48DTO> ListaTotalInterconexionImp48 { get; set; }
        public List<MeMedicion48DTO> ListaTotalGenArea48 { get; set; }

        //Medidores 15 minutos
        public List<MeMedicion96DTO> ListaMDSein96 { get; set; }
        public List<MeMedicion96DTO> ListaMDGen96 { get; set; }
        public List<MeMedicion96DTO> ListaMDGenTgener96 { get; set; }
        public List<MeMedicion96DTO> ListaMDInterconexion96 { get; set; }
        public List<MeMedicion96DTO> ListaMDInterconexionExp96 { get; set; }
        public List<MeMedicion96DTO> ListaMDInterconexionImp96 { get; set; }
        public List<MeMedicion96DTO> ListaMDHP96 { get; set; }
        public List<MeMedicion96DTO> ListaMDFHP96 { get; set; }

        public List<MeMedicion96DTO> ListaTotalSein96 { get; set; }
        public List<MeMedicion96DTO> ListaTotalGen96 { get; set; }
        public List<MeMedicion96DTO> ListaTotalGenTgener96 { get; set; }
        public List<MeMedicion96DTO> ListaTotalGenUnidad96 { get; set; }
        public List<MeMedicion96DTO> ListaTotalInterconexion96 { get; set; }
        public List<MeMedicion96DTO> ListaTotalInterconexionExp96 { get; set; }
        public List<MeMedicion96DTO> ListaTotalInterconexionImp96 { get; set; }
        public List<MeMedicion96DTO> ListaTotalGenArea96 { get; set; }
    }

#pragma warning restore CS1591 // Missing XML comment for publicly visible type or member

    #endregion

}