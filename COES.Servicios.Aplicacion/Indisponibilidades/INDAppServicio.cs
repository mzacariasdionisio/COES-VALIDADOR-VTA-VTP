using COES.Base.Core;
using COES.Dominio.DTO.Sic;
using COES.Framework.Base.Core;
using COES.Framework.Base.Tools;
using COES.Servicios.Aplicacion.Equipamiento;
using COES.Servicios.Aplicacion.Eventos;
using COES.Servicios.Aplicacion.Eventos.Helper;
using COES.Servicios.Aplicacion.Factory;
using COES.Servicios.Aplicacion.FormatoMedicion;
using COES.Servicios.Aplicacion.General;
using COES.Servicios.Aplicacion.General.Helper;
using COES.Servicios.Aplicacion.Helper;
using COES.Servicios.Aplicacion.IEOD;
using COES.Servicios.Aplicacion.Indisponibilidades.Helper;
using COES.Servicios.Aplicacion.Intervenciones;
using COES.Servicios.Aplicacion.Mediciones;
using COES.Servicios.Aplicacion.Mediciones.Helper;
using COES.Servicios.Aplicacion.Migraciones;
using COES.Servicios.Aplicacion.Migraciones.Helper;
using COES.Servicios.Aplicacion.PotenciaFirme;
using COES.Servicios.Aplicacion.Siosein2;
using COES.Servicios.Aplicacion.Titularidad;
using log4net;
using Newtonsoft.Json;
using OfficeOpenXml;
using OfficeOpenXml.Style;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;

namespace COES.Servicios.Aplicacion.Indisponibilidades
{
    /// <summary>
    /// Clases con métodos del módulo IND
    /// </summary>
    public class INDAppServicio : AppServicioBase
    {
        readonly IEODAppServicio servIEOD = new IEODAppServicio();
        readonly HorasOperacionAppServicio servHO = new HorasOperacionAppServicio();
        readonly EquipamientoAppServicio servEq = new EquipamientoAppServicio();
        private readonly StockCombustibleAppServicio _servStockComb;
        readonly MigracionesAppServicio servMigr = new MigracionesAppServicio();

        public INDAppServicio()
        {
            _servStockComb = new StockCombustibleAppServicio();
        }

        /// <summary>
        /// Instancia para el manejo de logs
        /// </summary>
        private static readonly ILog Logger = LogManager.GetLogger(typeof(INDAppServicio));

        #region CRUD Tablas BD COES

        #region Métodos Tabla IND_RECALCULO

        /// <summary>
        /// Inserta un registro de la tabla IND_RECALCULO
        /// </summary>
        public int SaveIndRecalculo(IndRecalculoDTO entity)
        {
            try
            {
                return FactorySic.GetIndRecalculoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_RECALCULO
        /// </summary>
        public void UpdateIndRecalculo(IndRecalculoDTO entity)
        {
            try
            {
                FactorySic.GetIndRecalculoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_RECALCULO
        /// </summary>
        public void DeleteIndRecalculo(int irecacodi)
        {
            try
            {
                FactorySic.GetIndRecalculoRepository().Delete(irecacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_RECALCULO
        /// </summary>
        public IndRecalculoDTO GetByIdIndRecalculo(int irecacodi)
        {
            var reg = FactorySic.GetIndRecalculoRepository().GetById(irecacodi);
            FormatearIndRecalculo(reg);
            return reg;
        }


        /// <summary>
        /// Permite listar todos los registros de la tabla IND_RECALCULO
        /// </summary>
        public List<IndRecalculoDTO> ListIndRecalculos(int? flagOmitirQuincenal = 0)
        {
            var lista = FactorySic.GetIndRecalculoRepository().List();

            if (flagOmitirQuincenal == 1)
                lista = lista.Where(x => x.Irecatipo != ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena).ToList();

            foreach (var reg in lista)
                FormatearIndRecalculo(reg);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndRecalculo
        /// </summary>
        public List<IndRecalculoDTO> GetByCriteriaIndRecalculos(int ipericodi, int? flagOmitirQuincenal = 0)
        {
            var lista = FactorySic.GetIndRecalculoRepository().GetByCriteria(ipericodi).OrderByDescending(x => x.Irecacodi).ToList();

            if (flagOmitirQuincenal == 1)
                lista = lista.Where(x => x.Irecatipo != ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena).ToList();

            foreach (var reg in lista)
                FormatearIndRecalculo(reg);

            return lista.OrderByDescending(x => x.Orden).ToList();
        }

        #endregion

        #region Métodos Tabla IND_PERIODO
        public List<IndPeriodoDTO> ListIndPeriodos()
        {
            try
            {
                return FactorySic.GetIndPeriodoRepository().List();
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla IND_PERIODO
        /// </summary>
        public int SaveIndPeriodo(IndPeriodoDTO entity)
        {
            try
            {
                return FactorySic.GetIndPeriodoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        public string GenerarReporteOmisionExcesoPr(List<EveManttoDTO> eveManttoDTOs)
        {
            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='100%' id='tabla_periodo'>");

            str.Append("<thead>");
            str.Append("<tr>");
            str.Append("<th style=''>Empresa</th>");
            str.Append("<th style=''>Ubicación</th>");
            str.Append("<th style=''>Equipo</th>");
            str.Append("<th style=''>Inicio</th>");
            str.Append("<th style=''>Final</th>");
            str.Append("<th style=''>Descripción</th>");
            str.Append("</tr>");
            str.Append("</thead>");

            str.Append("<tbody>");

            foreach (var reg in eveManttoDTOs)
            {
                str.Append("<tr>");
                str.AppendFormat("<td class='' style='text-align: left'>{0}</td>", reg.Emprnomb);
                str.AppendFormat("<td class=''>{0}</td>", reg.Areadesc);
                str.AppendFormat("<td class=''>{0}</td>", reg.Equiabrev);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Evenini.Value.ToString(ConstantesAppServicio.FormatoFechaFull));
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Evenfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull));
                str.AppendFormat("<td class=''>{0}</td>", reg.Evendescrip);
                str.Append("</tr>");
            }

            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        public string GenerarReporteOmision7Dias(List<EveManttoDTO> eveManttoDTOs)
        {
            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='100%' id='tabla_periodo'>");

            str.Append("<thead>");
            str.Append("<tr>");
            str.Append("<th style=''>Empresa</th>");
            str.Append("<th style=''>Ubicación</th>");
            str.Append("<th style=''>Equipo</th>");
            str.Append("<th style=''>Inicio</th>");
            str.Append("<th style=''>Final</th>");
            str.Append("<th style=''>Descripción</th>");
            str.Append("</tr>");
            str.Append("</thead>");

            str.Append("<tbody>");

            foreach (var reg in eveManttoDTOs)
            {
                str.Append("<tr>");
                str.AppendFormat("<td class='' style='text-align: left'>{0}</td>", reg.Emprnomb);
                str.AppendFormat("<td class=''>{0}</td>", reg.Areadesc);
                str.AppendFormat("<td class=''>{0}</td>", reg.Equiabrev);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Evenini.Value.ToString(ConstantesAppServicio.FormatoFechaFull));
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Evenfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull));
                str.AppendFormat("<td class=''>{0}</td>", reg.Evendescrip);
                str.Append("</tr>");
            }

            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_PERIODO
        /// </summary>
        public void UpdateIndPeriodo(IndPeriodoDTO entity)
        {
            try
            {
                FactorySic.GetIndPeriodoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_PERIODO
        /// </summary>
        public void DeleteIndPeriodo(int ipericodi)
        {
            try
            {
                FactorySic.GetIndPeriodoRepository().Delete(ipericodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_PERIODO
        /// </summary>
        public IndPeriodoDTO GetByIdIndPeriodo(int ipericodi)
        {
            var reg = FactorySic.GetIndPeriodoRepository().GetById(ipericodi);
            this.FormatearIndPeriodo(reg);

            return reg;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndPeriodo
        /// </summary>
        public List<IndPeriodoDTO> GetByCriteriaIndPeriodos(int anio)
        {
            var lista = FactorySic.GetIndPeriodoRepository().GetByCriteria(ConstantesIndisponibilidades.HorizonteMensual, anio)
                                                        .OrderByDescending(x => x.Iperianiomes).ToList();
            foreach (var reg in lista)
                this.FormatearIndPeriodo(reg);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndPeriodo
        /// </summary>
        public List<IndPeriodoDTO> GetByCriteriaIndPeriodosCuadro(string horizonte)
        {
            var lista = FactorySic.GetIndPeriodoRepository().GetByCriteria(horizonte, -1)
                                                           .OrderByDescending(x => x.Iperianiomes).ToList();

            foreach (var reg in lista)
                this.FormatearIndPeriodo(reg);

            return lista;
        }

        private void FormatearIndPeriodo(IndPeriodoDTO reg)
        {
            reg.FechaIni = new DateTime(reg.Iperianio, reg.Iperimes, 1);
            reg.FechaFin = reg.FechaIni.AddMonths(1).AddDays(-1);
            reg.TotalDias = (reg.FechaFin - reg.FechaIni).Days + 1;
        }

        #endregion

        #region Métodos Tabla IND_CUADRO

        /// <summary>
        /// Inserta un registro de la tabla IND_CUADRO
        /// </summary>
        public void SaveIndCuadro(IndCuadroDTO entity)
        {
            try
            {
                FactorySic.GetIndCuadroRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_CUADRO
        /// </summary>
        public void UpdateIndCuadro(IndCuadroDTO entity)
        {
            try
            {
                FactorySic.GetIndCuadroRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_CUADRO
        /// </summary>
        public void DeleteIndCuadro(int icuacodi)
        {
            try
            {
                FactorySic.GetIndCuadroRepository().Delete(icuacodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_CUADRO
        /// </summary>
        public IndCuadroDTO GetByIdIndCuadro(int icuacodi)
        {
            var reg = FactorySic.GetIndCuadroRepository().GetById(icuacodi);
            SetValoresCuadro(reg);
            return reg;
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_CUADRO
        /// </summary>
        public List<IndCuadroDTO> ListIndCuadros()
        {
            var lista = FactorySic.GetIndCuadroRepository().List();

            foreach (var reg in lista)
                SetValoresCuadro(reg);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndCuadro
        /// </summary>
        public List<IndCuadroDTO> GetByCriteriaIndCuadros()
        {
            var lista = FactorySic.GetIndCuadroRepository().GetByCriteria().OrderBy(x => x.Icuacodi).ToList();

            foreach (var reg in lista)
                SetValoresCuadro(reg);

            return lista;
        }

        #endregion

        #region Métodos Tabla IND_REPORTE

        /// <summary>
        /// Inserta un registro de la tabla IND_REPORTE
        /// </summary>
        public int SaveIndReporte(IndReporteDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                return FactorySic.GetIndReporteRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_REPORTE
        /// </summary>
        public void DeleteIndReporte(int irptcodi)
        {
            try
            {
                FactorySic.GetIndReporteRepository().Delete(irptcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }


        /// <summary>
        /// Permite obtener un registro de la tabla IND_REPORTE
        /// </summary>
        public IndReporteDTO GetByIdIndReporte(int irptcodi)
        {
            var reg = FactorySic.GetIndReporteRepository().GetById(irptcodi);

            FormatearIndReporte(reg);

            return reg;
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_REPORTE
        /// </summary>
        public List<IndReporteDTO> ListIndReportes()
        {
            return FactorySic.GetIndReporteRepository().List();
        }

        public List<IndReporteDTO> ListIndReportesParaPFRMesAnterior(int indrecacodiant, int esVersionValidado, int reportePR25Cuadro3FactorK, int reportePR25FactorProgTermico, int reportePR25FactorProgHidro)
        {
            return FactorySic.GetIndReporteRepository().ListadoReportesparaPFR(indrecacodiant, esVersionValidado, reportePR25Cuadro3FactorK, reportePR25FactorProgTermico, reportePR25FactorProgHidro);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndReporte
        /// </summary>
        public List<IndReporteDTO> GetByCriteriaIndReportes(int icuacodi, int irecacodi, string irptcodis = "-1")
        {
            var lista = FactorySic.GetIndReporteRepository().GetByCriteria(icuacodi, irecacodi, irptcodis);

            foreach (var reg in lista)
            {
                FormatearIndReporte(reg);
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla IND_REPORTE_DET

        /// <summary>
        /// Inserta un registro de la tabla IND_REPORTE_DET
        /// </summary>
        public void SaveIndReporteDet(IndReporteDetDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetIndReporteDetRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_REPORTE_DET
        /// </summary>
        public void DeleteIndReporteDet(int idetcodi)
        {
            try
            {
                FactorySic.GetIndReporteDetRepository().Delete(idetcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_REPORTE_DET
        /// </summary>
        public IndReporteDetDTO GetByIdIndReporteDet(int idetcodi)
        {
            return FactorySic.GetIndReporteDetRepository().GetById(idetcodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndReporteDet
        /// </summary>
        public List<IndReporteDetDTO> GetByCriteriaIndReporteDets(int irptcodi)
        {
            var lista = FactorySic.GetIndReporteDetRepository().GetByCriteria(irptcodi.ToString());

            foreach (var reg in lista)
                FormatearIndReporteDet(reg);

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndReporteDet
        /// </summary>
        public List<IndReporteDetDTO> GetByCriteriaIndReporteDets(string irptcodi)
        {
            var lista = FactorySic.GetIndReporteDetRepository().GetByCriteria(irptcodi);

            foreach (var reg in lista)
                FormatearIndReporteDet(reg);

            return lista;
        }

        private void FormatearIndReporteDet(IndReporteDetDTO reg)
        {
            reg.IdetpeDesc = reg.Idetpe.GetValueOrDefault(0) != 0 ? reg.Idetpe.Value.ToString() : "";
            reg.IdetpaDesc = reg.Idetpa.GetValueOrDefault(0) != 0 ? reg.Idetpa.Value.ToString() : "";
            reg.IdethorainiDesc = reg.Idethoraini != null ? reg.Idethoraini.Value.ToString(ConstantesAppServicio.FormatoHora) : string.Empty;
            reg.IdethorafinDesc = reg.Idethorafin != null ? reg.Idethorafin.Value.ToString(ConstantesAppServicio.FormatoHora) : string.Empty;

            reg.NumHorasIp = reg.Idetminip.GetValueOrDefault(0) / 60.0m;
            reg.NumHorasIf = reg.Idetminif.GetValueOrDefault(0) / 60.0m;

            reg.NumHorasIpDesc = reg.NumHorasIp > 0 ? reg.NumHorasIp.ToString() : "";
            reg.NumHorasIfDesc = reg.NumHorasIf > 0 ? reg.NumHorasIf.ToString() : "";
            reg.IdetnumhoDesc = reg.Idetnumho > 0 ? reg.Idetnumho.Value.ToString() : "";
            reg.IdetnumarranqDesc = reg.Idetnumarranq > 0 ? reg.Idetnumarranq.Value.ToString() : "";
        }

        #endregion

        #region Métodos Tabla IND_REPORTE_TOTAL

        /// <summary>
        /// Inserta un registro de la tabla IND_REPORTE_TOTAL
        /// </summary>
        public void SaveIndReporteTotal(IndReporteTotalDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                //if (entity.Itotincremental == 1)
                //    entity.Equicodi = null;
                FactorySic.GetIndReporteTotalRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_REPORTE_TOTAL
        /// </summary>
        public void DeleteIndReporteTotal(int itotcodi)
        {
            try
            {
                FactorySic.GetIndReporteTotalRepository().Delete(itotcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_REPORTE_TOTAL
        /// </summary>
        public IndReporteTotalDTO GetByIdIndReporteTotal(int itotcodi)
        {
            return FactorySic.GetIndReporteTotalRepository().GetById(itotcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_REPORTE_TOTAL
        /// </summary>
        public List<IndReporteTotalDTO> ListIndReporteTotals()
        {
            return FactorySic.GetIndReporteTotalRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndReporteTotal
        /// </summary>
        public List<IndReporteTotalDTO> GetByCriteriaIndReporteTotals(int irptcodi)
        {
            var lista = FactorySic.GetIndReporteTotalRepository().GetByCriteria(irptcodi.ToString());
            foreach (var reg in lista)
            {
                this.FormatearIndReporteTotal(reg);
            }
            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndReporteTotal
        /// </summary>
        public List<IndReporteTotalDTO> GetByCriteriaIndReporteTotals(string irptcodis)
        {
            if (string.IsNullOrEmpty(irptcodis))
                return new List<IndReporteTotalDTO>();

            var lista = FactorySic.GetIndReporteTotalRepository().GetByCriteria(irptcodis);
            foreach (var reg in lista)
            {
                this.FormatearIndReporteTotal(reg);
            }
            return lista;
        }

        private void FormatearIndReporteTotal(IndReporteTotalDTO reg)
        {
            reg.ItotminipDesc = reg.Itotminip > 0 ? reg.Itotminip.ToString() : "-";
            reg.ItotminifDesc = reg.Itotminif > 0 ? reg.Itotminif.ToString() : "-";
            reg.ItotminipparcialDesc = reg.Itotminipparcial > 0 ? reg.Itotminipparcial.ToString() : "-";
            reg.ItotminifparcialDesc = reg.Itotminifparcial > 0 ? reg.Itotminifparcial.ToString() : "-";

            reg.Itotindmas15dDesc = Util.SiNoDescripcion(reg.Itotindmas15d ?? "");

            reg.ItotpeDesc = reg.Itotpe != null ? reg.Itotpe.ToString() : "-";
            reg.ItotfactorkDesc = reg.Itotfactork != null ? reg.Itotfactork.ToString() : "-";
            reg.PintarRojoFactorK = reg.Itotfactork < 1 && reg.Itotfactork >= 0;

            reg.NumHorasIp = reg.Itotminip.GetValueOrDefault(0) / 60.0m;
            reg.NumHorasIf = reg.Itotminif.GetValueOrDefault(0) / 60.0m;

            reg.Emprnomb = !string.IsNullOrEmpty(reg.Emprnomb) ? reg.Emprnomb.Trim() : string.Empty;
            reg.Central = !string.IsNullOrEmpty(reg.Central) ? reg.Central.Trim() : string.Empty;
            reg.Itotunidadnomb = !string.IsNullOrEmpty(reg.Itotunidadnomb) ? reg.Itotunidadnomb.Trim() : string.Empty;

            reg.Crdesc = reg.Itotcr == ConstantesIndisponibilidades.FlagCR ? ConstantesIndisponibilidades.FlagCRDesc : "";
        }

        #endregion

        #region Métodos Tabla IND_INSUMO_LOG

        /// <summary>
        /// Inserta un registro de la tabla IND_INSUMO_LOG
        /// </summary>
        public void SaveIndInsumoLog(IndInsumoLogDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetIndInsumoLogRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_INSUMO_LOG
        /// </summary>
        public void UpdateIndInsumoLog(IndInsumoLogDTO entity)
        {
            try
            {
                FactorySic.GetIndInsumoLogRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_INSUMO_LOG
        /// </summary>
        public void DeleteIndInsumoLog(int ilogcodi)
        {
            try
            {
                FactorySic.GetIndInsumoLogRepository().Delete(ilogcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_INSUMO_LOG
        /// </summary>
        public IndInsumoLogDTO GetByIdIndInsumoLog(int ilogcodi)
        {
            return FactorySic.GetIndInsumoLogRepository().GetById(ilogcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_INSUMO_LOG
        /// </summary>
        public List<IndInsumoLogDTO> ListIndInsumoLogs()
        {
            return FactorySic.GetIndInsumoLogRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndInsumoLog
        /// </summary>
        public List<IndInsumoLogDTO> GetByCriteriaIndInsumoLogs()
        {
            return FactorySic.GetIndInsumoLogRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IND_MANTTO

        /// <summary>
        /// Inserta un registro de la tabla IND_MANTTO
        /// </summary>
        public void SaveIndMantto(IndManttoDTO entity)
        {
            try
            {
                entity.Tipoevencodi = entity.Tipoevencodi.GetValueOrDefault(0) == 0 ? -1 : entity.Tipoevencodi;
                FactorySic.GetIndManttoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }


        /// <summary>
        /// Actualiza un registro de la tabla IND_MANTTO
        /// </summary>
        public void UpdateIndMantto(IndManttoDTO entity)
        {
            try
            {
                FactorySic.GetIndManttoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_MANTTO
        /// </summary>
        public void DeleteIndMantto(int indmancodi)
        {
            try
            {
                FactorySic.GetIndManttoRepository().Delete(indmancodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_MANTTO
        /// </summary>
        public IndManttoDTO GetByIdIndMantto(int indmancodi)
        {
            return FactorySic.GetIndManttoRepository().GetById(indmancodi);
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_MANTTO con vista para reporte
        /// </summary>
        public IndManttoDTO GetByIdIndMantto2(int indmancodi)
        {
            return FactorySic.GetIndManttoRepository().GetById2(indmancodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_MANTTO
        /// </summary>
        public List<IndManttoDTO> ListIndManttos()
        {
            return FactorySic.GetIndManttoRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndMantto
        /// </summary>
        public List<IndManttoDTO> GetByCriteriaIndManttos()
        {
            return FactorySic.GetIndManttoRepository().GetByCriteria();
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_MANTTO
        /// </summary>
        public List<IndManttoDTO> ListIndManttoHistoricoByIndmancodi(string indmacodi)
        {
            return FactorySic.GetIndManttoRepository().ListHistoricoByIndmacodi(indmacodi);
        }

        /// <summary>
        /// Listar indmantto por evemantto
        /// </summary>
        /// <param name="manttocodi"></param>
        /// <returns></returns>
        public List<IndManttoDTO> ListarIndManttoByEveMantto(string manttocodi)
        {
            return manttocodi != null && manttocodi.Length > 0 ? FactorySic.GetIndManttoRepository().ListarIndManttoByEveMantto(manttocodi) : new List<IndManttoDTO>();
        }

        #endregion

        #region Métodos Tabla EVE_MANTTO

        /// <summary>
        /// Permite obtener un registro de la tabla EVE_MANTTO con vista para reporte
        /// </summary>
        public EveManttoDTO GetByIdEveMantto2(int manttocodi)
        {
            return FactorySic.GetEveManttoRepository().GetById2(manttocodi);
        }

        #endregion

        #region Métodos Tabla IND_GASEODUCTOXCENTRAL

        /// <summary>
        /// Inserta un registro de la tabla IND_GASEODUCTOXCENTRAL
        /// </summary>
        public void SaveIndGaseoductoxcentral(IndGaseoductoxcentralDTO entity)
        {
            try
            {
                FactorySic.GetIndGaseoductoxcentralRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_GASEODUCTOXCENTRAL
        /// </summary>
        public void UpdateIndGaseoductoxcentral(IndGaseoductoxcentralDTO entity)
        {
            try
            {
                FactorySic.GetIndGaseoductoxcentralRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_GASEODUCTOXCENTRAL
        /// </summary>
        public void DeleteIndGaseoductoxcentral(int gasctrcodi)
        {
            try
            {
                FactorySic.GetIndGaseoductoxcentralRepository().Delete(gasctrcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_GASEODUCTOXCENTRAL
        /// </summary>
        public bool InactivarIndGaseoductoxcentral(int gasctrcodi)
        {
            try
            {
                return FactorySic.GetIndGaseoductoxcentralRepository().Inactivar(gasctrcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                return false;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_GASEODUCTOXCENTRAL
        /// </summary>
        public IndGaseoductoxcentralDTO GetByIdIndGaseoductoxcentral(int gasctrcodi)
        {
            return FactorySic.GetIndGaseoductoxcentralRepository().GetById(gasctrcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_GASEODUCTOXCENTRAL
        /// </summary>
        public List<IndGaseoductoxcentralDTO> ListIndGaseoductoxcentrals()
        {
            var lista = FactorySic.GetIndGaseoductoxcentralRepository().List();

            foreach (var reg in lista)
            {
                reg.UltimaModificacionFechaDesc = reg.Gasctrfecmodificacion != null ? reg.Gasctrfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Gasctrfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.UltimaModificacionUsuarioDesc = reg.Gasctrfecmodificacion != null ? reg.Gasctrusumodificacion : reg.Gasctrusucreacion;
            }

            lista = lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.Gaseoducto).ThenBy(x => x.Central).ToList();

            return lista;
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndGaseoductoxcentral
        /// </summary>
        public List<IndGaseoductoxcentralDTO> GetByCriteriaIndGaseoductoxcentrals()
        {
            return FactorySic.GetIndGaseoductoxcentralRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IND_UNIDAD

        /// <summary>
        /// Inserta un registro de la tabla IND_UNIDAD
        /// </summary>
        public void SaveIndUnidad(IndUnidadDTO entity)
        {
            try
            {
                FactorySic.GetIndUnidadRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_UNIDAD
        /// </summary>
        public void UpdateIndUnidad(IndUnidadDTO entity)
        {
            try
            {
                FactorySic.GetIndUnidadRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_UNIDAD
        /// </summary>
        public void DeleteIndUnidad(int iunicodi)
        {
            try
            {
                FactorySic.GetIndUnidadRepository().Delete(iunicodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_UNIDAD
        /// </summary>
        public IndUnidadDTO GetByIdIndUnidad(int iunicodi)
        {
            return FactorySic.GetIndUnidadRepository().GetById(iunicodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_UNIDAD
        /// </summary>
        public List<IndUnidadDTO> ListIndUnidads()
        {
            return FactorySic.GetIndUnidadRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndUnidad
        /// </summary>
        public List<IndUnidadDTO> GetByCriteriaIndUnidads()
        {
            var lista = FactorySic.GetIndUnidadRepository().GetByCriteria();

            foreach (var reg in lista)
            {
                reg.UltimaModificacionFechaDesc = reg.Iunifecmodificacion != null ? reg.Iunifecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Iunifeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
                reg.UltimaModificacionUsuarioDesc = reg.Iunifecmodificacion != null ? reg.Iuniusumodificacion : reg.Iuniusucreacion;
            }

            return lista;
        }

        #endregion

        #region Métodos Tabla IND_POTLIM

        /// <summary>
        /// Inserta un registro de la tabla IND_POTLIM
        /// </summary>
        public void SaveIndPotlim(IndPotlimDTO entity)
        {
            try
            {
                FactorySic.GetIndPotlimRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_POTLIM
        /// </summary>
        public void UpdateIndPotlim(IndPotlimDTO entity)
        {
            try
            {
                FactorySic.GetIndPotlimRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza campos parciles de un registro de la tabla IND_POTLIM
        /// </summary>
        public void LimPotEditar(IndPotlimDTO entity)
        {
            try
            {
                FactorySic.GetIndPotlimRepository().UpdatePartial(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_POTLIM
        /// </summary>
        public void DeleteIndPotlim(int potlimcodi)
        {
            try
            {
                FactorySic.GetIndPotlimRepository().Delete(potlimcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_POTLIM
        /// </summary>
        public IndPotlimDTO GetByIdIndPotlim(int potlimcodi)
        {
            return FactorySic.GetIndPotlimRepository().GetById(potlimcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_POTLIM
        /// </summary>
        public List<IndPotlimDTO> ListIndPotlims()
        {
            return FactorySic.GetIndPotlimRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndPotlim
        /// </summary>
        public List<IndPotlimDTO> GetByCriteriaIndPotlims(DateTime fechaIni, DateTime fechaFin)
        {
            return FactorySic.GetIndPotlimRepository().GetByCriteria(fechaIni, fechaFin);
        }

        #endregion

        #region Métodos Tabla IND_POTLIM_UNIDAD

        /// <summary>
        /// Inserta un registro de la tabla IND_POTLIM_UNIDAD
        /// </summary>
        public void SaveIndPotlimUnidad(IndPotlimUnidadDTO entity)
        {
            try
            {
                FactorySic.GetIndPotlimUnidadRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_POTLIM_UNIDAD
        /// </summary>
        public void UpdateIndPotlimUnidad(IndPotlimUnidadDTO entity)
        {
            try
            {
                FactorySic.GetIndPotlimUnidadRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_POTLIM_UNIDAD
        /// </summary>
        public void DeleteIndPotlimUnidad(int equlimcodi)
        {
            try
            {
                FactorySic.GetIndPotlimUnidadRepository().Delete(equlimcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_POTLIM_UNIDAD
        /// </summary>
        public IndPotlimUnidadDTO GetByIdIndPotlimUnidad(int equlimcodi)
        {
            return FactorySic.GetIndPotlimUnidadRepository().GetById(equlimcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_POTLIM_UNIDAD
        /// </summary>
        public List<IndPotlimUnidadDTO> ListIndPotlimUnidads()
        {
            return FactorySic.GetIndPotlimUnidadRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndPotlimUnidad
        /// </summary>
        public List<IndPotlimUnidadDTO> GetByCriteriaIndPotlimUnidads()
        {
            return FactorySic.GetIndPotlimUnidadRepository().GetByCriteria();
        }

        #endregion

        #region Métodos Tabla IND_IEODCUADRO

        /// <summary>
        /// Inserta un registro de la tabla IND_IEODCUADRO
        /// </summary>
        public void SaveIndIeodcuadro(IndIeodcuadroDTO entity)
        {
            try
            {
                FactorySic.GetIndIeodcuadroRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_IEODCUADRO
        /// </summary>
        public void UpdateIndIeodcuadro(IndIeodcuadroDTO entity)
        {
            try
            {
                FactorySic.GetIndIeodcuadroRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_IEODCUADRO
        /// </summary>
        public void DeleteIndIeodcuadro(int iiccocodi)
        {
            try
            {
                FactorySic.GetIndIeodcuadroRepository().Delete(iiccocodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_IEODCUADRO
        /// </summary>
        public IndIeodcuadroDTO GetByIdIndIeodcuadro(int iiccocodi)
        {
            return FactorySic.GetIndIeodcuadroRepository().GetById(iiccocodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_IEODCUADRO
        /// </summary>
        public List<IndIeodcuadroDTO> ListIndIeodcuadros()
        {
            return FactorySic.GetIndIeodcuadroRepository().List();
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_IEODCUADRO
        /// </summary>
        public List<IndIeodcuadroDTO> ListIndEventosHistoricoByIccodi(int iccodi)
        {
            return FactorySic.GetIndIeodcuadroRepository().ListHistoricoByIccodi(iccodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndIeodcuadro
        /// </summary>
        public List<IndIeodcuadroDTO> GetByCriteriaIndIeodcuadros(DateTime fechaIni, DateTime fechaFin, string idsEmpresa, string idsTipoEquipo, string idstipoMantto)
        {
            return FactorySic.GetIndIeodcuadroRepository().GetByCriteria(fechaIni, fechaFin, idsEmpresa, idsTipoEquipo, idstipoMantto);
        }

        #endregion

        #region Métodos Tabla IND_EVENTO

        /// <summary>
        /// Inserta un registro de la tabla IND_EVENTO
        /// </summary>
        public void SaveIndEvento(IndEventoDTO entity)
        {
            try
            {
                FactorySic.GetIndEventoRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_EVENTO
        /// </summary>
        public void UpdateIndEvento(IndEventoDTO entity)
        {
            try
            {
                FactorySic.GetIndEventoRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_EVENTO
        /// </summary>
        public void DeleteIndEvento(int ieventcodi)
        {
            try
            {
                FactorySic.GetIndEventoRepository().Delete(ieventcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_EVENTO
        /// </summary>
        public IndEventoDTO GetByIdIndEvento(int ieventcodi)
        {
            return FactorySic.GetIndEventoRepository().GetById(ieventcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_EVENTO
        /// </summary>
        public List<IndEventoDTO> ListIndEventos()
        {
            return FactorySic.GetIndEventoRepository().List();
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_EVENTO
        /// </summary>
        public List<IndEventoDTO> ListIndEventosHistoricoByEvencodi(int evencodi)
        {
            return FactorySic.GetIndEventoRepository().ListHistoricoByEvencodi(evencodi);
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndEvento
        /// </summary>
        public List<IndEventoDTO> GetByCriteriaIndEventos(DateTime fechaIni, DateTime fechaFin, string idsEmpresa, string idsTipoEquipo, string idstipoMantto)
        {
            return FactorySic.GetIndEventoRepository().GetByCriteria(fechaIni, fechaFin, idsEmpresa, idsTipoEquipo, idstipoMantto);
        }

        #endregion

        #region Métodos Tabla IND_RELACION_RPT

        /// <summary>
        /// Inserta un registro de la tabla IND_RELACION_RPT
        /// </summary>
        public void SaveIndRelacionRpt(IndRelacionRptDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetIndRelacionRptRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_RELACION_RPT
        /// </summary>
        public void UpdateIndRelacionRpt(IndRelacionRptDTO entity)
        {
            try
            {
                FactorySic.GetIndRelacionRptRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_RELACION_RPT
        /// </summary>
        public void DeleteIndRelacionRpt(int irelrpcodi)
        {
            try
            {
                FactorySic.GetIndRelacionRptRepository().Delete(irelrpcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_RELACION_RPT
        /// </summary>
        public IndRelacionRptDTO GetByIdIndRelacionRpt(int irelrpcodi)
        {
            return FactorySic.GetIndRelacionRptRepository().GetById(irelrpcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_RELACION_RPT
        /// </summary>
        public List<IndRelacionRptDTO> ListIndRelacionRpts()
        {
            return FactorySic.GetIndRelacionRptRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndRelacionRpt
        /// </summary>
        public List<IndRelacionRptDTO> GetByCriteriaIndRelacionRpts(int irptprinc)
        {
            return FactorySic.GetIndRelacionRptRepository().GetByCriteria(irptprinc);
        }

        #endregion

        #region Métodos Tabla PF_DISPCALORUTIL

        /// <summary>
        /// Inserta un registro de la tabla PF_DISPCALORUTIL
        /// </summary>
        public void SavePfDispcalorutil(PfDispcalorutilDTO entity, IDbConnection conn, DbTransaction tran)
        {
            try
            {
                FactorySic.GetPfDispcalorutilRepository().Save(entity, conn, tran);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla PF_DISPCALORUTIL
        /// </summary>
        public void UpdatePfDispcalorutil(PfDispcalorutilDTO entity)
        {
            try
            {
                FactorySic.GetPfDispcalorutilRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla PF_DISPCALORUTIL
        /// </summary>
        public void DeletePfDispcalorutil(int pfcucodi)
        {
            try
            {
                FactorySic.GetPfDispcalorutilRepository().Delete(pfcucodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla PF_DISPCALORUTIL
        /// </summary>
        public PfDispcalorutilDTO GetByIdPfDispcalorutil(int pfcucodi)
        {
            return FactorySic.GetPfDispcalorutilRepository().GetById(pfcucodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla PF_DISPCALORUTIL
        /// </summary>
        public List<PfDispcalorutilDTO> ListPfDispcalorutils()
        {
            return FactorySic.GetPfDispcalorutilRepository().List();
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PfDispcalorutil
        /// </summary>
        public List<PfDispcalorutilDTO> GetByCriteriaPfDispcalorutils(int irptcodi)
        {
            var lista = irptcodi > 0 ? FactorySic.GetPfDispcalorutilRepository().GetByCriteria(irptcodi) : new List<PfDispcalorutilDTO>();

            foreach (var reg in lista)
            {
                reg.FechaHora = reg.Pfcufecha.AddMinutes(15 * reg.Pfcuh);
            }

            return lista;
        }

        #endregion


        #region Métodos Tabla IND_RELACION_EMPRESA

        /// <summary>
        /// Inserta un registro de la tabla IND_RELACION_EMPRESA
        /// </summary>
        public int SaveOrUpdateIndRelacionEmpresa(IndRelacionEmpresaDTO entity)
        {
            int id = 0;
            try
            {
                if (entity.Relempcodi == 0)
                {
                    id = FactorySic.GetIIndRelacionEmpresaRepository().Save(entity);
                }
                else
                {
                    FactorySic.GetIIndRelacionEmpresaRepository().Update(entity);
                    id = entity.Relempcodi;
                }

                return id;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_RELACION_EMPRESA
        /// </summary>
        public void UpdateIndRelacionEmpresa(IndRelacionEmpresaDTO entity)
        {
            try
            {
                FactorySic.GetIIndRelacionEmpresaRepository().Update(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Elimina un registro de la tabla IND_RELACION_EMPRESA
        /// </summary>
        public int DeleteIndRelacionEmpresa(int relempcodi)
        {
            try
            {
                FactorySic.GetIIndRelacionEmpresaRepository().Delete(relempcodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
            return relempcodi;
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_RELACION_EMPRESA
        /// </summary>
        public IndRelacionEmpresaDTO GetByIdIndRelacionEmpresa(int relempcodi)
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().GetById(relempcodi);
        }

        /// <summary>
        /// Permite listar todos los registros de la tabla IND_RELACION_EMPRESA
        /// </summary>
        public List<IndRelacionEmpresaDTO> ListIndRelacionEmpresa()
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().List();
        }

        /// <summary>
        /// Permite Listar las central en la tabla IND_RELACION_EMPRESA por emprcodi
        /// </summary>
        public List<IndRelacionEmpresaDTO> ListIndRelacionEmpresaByIdEmpresa(int emprcodi)
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().ListByIdEmpresa(emprcodi);
        }

        /// <summary>
        /// Permite realizar búsqueda de Central en la tabla IND_RELACION_EMPRESA
        /// </summary>
        /// /// <param name="equicodicentral">Identificador de la central</param>
        /// <returns></returns>
        public List<IndRelacionEmpresaDTO> GetByIdCentral(int equicodicentral)
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().GetByIdCentral(equicodicentral);
        }

        /// <summary>
        /// Permite realizar búsqueda de Unidad en la tabla IND_RELACION_EMPRESA
        /// </summary>
        /// <param name="equicodiunidad">Identificador de la unidad</param>
        /// <returns></returns>
        public List<IndRelacionEmpresaDTO> GetByIdUnidad(int equicodiunidad)
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().GetByIdUnidad(equicodiunidad);
        }

        /// <summary>
        /// Generar Listado de Empresas y Centrales
        /// </summary>
        /// <param name="listaEmpresa">Parametro de salida para el listado de empresa</param>
        /// <param name="listaCentral">Parametro de salida para el listado de central</param>
        /// <returns></returns>
        public void ListaEmpresa_Central(out List<SiEmpresaDTO> listaEmpresa, out List<IndRelacionEmpresaDTO> listaCentral)
        {

            var listado = FactorySic.GetIIndRelacionEmpresaRepository().List().ToList();
            List<SiEmpresaDTO> listadoEmpresa = listado.Select(x => new SiEmpresaDTO() { Emprcodi = x.Emprcodi, Emprnomb = x.Emprnomb }).Distinct().ToList();
            listadoEmpresa = listadoEmpresa.GroupBy(x => x.Emprcodi).Select(x => x.FirstOrDefault()).ToList();
            listaEmpresa = listadoEmpresa;

            List<IndRelacionEmpresaDTO> central = FactorySic.GetIIndRelacionEmpresaRepository().ListCentral().ToList();

            listaCentral = central.Select(x => new IndRelacionEmpresaDTO() { Equicodicentral = x.Equicodicentral, Equinomb = x.Equinomb }).Distinct().ToList();

        }

        public List<IndRelacionEmpresaDTO> ListaUnidad(int equicodicentral)
        {

            return FactorySic.GetIIndRelacionEmpresaRepository().ListUnidad(equicodicentral);

        }

        /// <summary>
        /// Permite listar los Gaseoductos
        /// </summary>
        /// <returns>List<IndRelacionEmpresaDTO></returns>
        public List<IndRelacionEmpresaDTO> ListGaseoducto()
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().ListGaseoducto();
        }
        #endregion


        #endregion

        #region Periodo y Recálculo

        /// <summary>
        /// Genera reporte Html del Listado de Periodo
        /// </summary>
        /// <param name="url"></param>
        /// <param name="horizonte"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoPeriodo(string url, int flagOmitirQuincenal)
        {
            List<IndPeriodoDTO> listaDataPeriodo = this.GetByCriteriaIndPeriodos(-1).OrderByDescending(x => x.Iperianiomes).ToList();
            List<IndRecalculoDTO> listaDataRecalculo = this.ListIndRecalculos(flagOmitirQuincenal).OrderByDescending(x => x.Orden).ToList();

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='100%' id='tabla_periodo'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 30px'>Listado de <br/> Recálculo</th>");
            str.Append("<th style=''>Periodo</th>");
            str.Append("<th style=''>Año</th>");
            str.Append("<th style=''>Mes</th>");

            str.Append("<th style='background: #9370DB;'>Estado</th>");
            str.Append("<th style='background: #9370DB;'>Último Recálculo</th>");
            str.Append("<th style='background: #9370DB;'>Inicio - Fin</th>");
            str.Append("<th style='background: #9370DB;'>Descripción</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var reg in listaDataPeriodo)
            {
                var regRecalculo = listaDataRecalculo.Find(x => x.Ipericodi == reg.Ipericodi);
                string claseRec = regRecalculo != null && regRecalculo.Estado == ConstantesIndisponibilidades.EstadoPeriodoAbierto ? "clase_recalculo_activo" : "";

                str.Append("<tr>");
                str.Append("<td>");
                str.AppendFormat("<a class='' href='JavaScript:verListadoRecalculo(" + reg.Ipericodi + ");' style='margin-right: 4px;'><img style='margin-top: 3px; margin-bottom: 3px;' src='" + url + "Content/Images/btn-properties.png' alt='Ver listado de recálculo' title='Ver listado de recálculo' /></a>");
                str.Append("</td>");

                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Iperinombre);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Iperianio);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Iperimes);

                if (regRecalculo != null)
                {
                    str.AppendFormat("<td class='{1}' style='text-align: center'>{0}</td>", regRecalculo.IrecaestadoDesc, claseRec);
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", regRecalculo.Irecanombre);
                    str.AppendFormat("<td class='' style='text-align: center'>{0} - {1}</td>", regRecalculo.IrecafechainiDesc, regRecalculo.IrecafechafinDesc);
                    str.AppendFormat("<td class='' style='text-align: left'>{0}</td>", regRecalculo.Irecadescripcion);
                }
                else
                {
                    str.AppendFormat("<td class='' style=''>{0}</td>", string.Empty);
                    str.AppendFormat("<td class='' style=''>{0}</td>", string.Empty);
                    str.AppendFormat("<td class='' style=''>{0}</td>", string.Empty);
                    str.AppendFormat("<td class='' style=''>{0}</td>", string.Empty);
                }

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Genera reporte Html del listado de Recalculo
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermisoEditar"></param>
        /// <param name="ipericodi"></param>
        /// <param name="ultimoTipoRecalculo"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoRecalculo(string url, bool tienePermisoEditar, int ipericodi, int flagOmitirQuincenal, out string ultimoTipoRecalculo)
        {
            List<IndRecalculoDTO> listaDataRecalculo = this.GetByCriteriaIndRecalculos(ipericodi, flagOmitirQuincenal).OrderByDescending(x => x.Orden).ToList();
            ultimoTipoRecalculo = listaDataRecalculo.Any() ? listaDataRecalculo.First().Irecatipo : string.Empty;

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional' border='0' cellspacing='0' width='100%' id='tabla_recalculo'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='background: #9370DB; width: 30px'>Opciones</th>");
            str.Append("<th style='background: #9370DB;'>Estado</th>");
            str.Append("<th style='background: #9370DB;'>Nombre</th>");
            str.Append("<th style='background: #9370DB;'>Inicio</th>");
            str.Append("<th style='background: #9370DB;'>Fin</th>");
            str.Append("<th style='background: #9370DB;'>Informe</th>");
            str.Append("<th style='background: #9370DB;'>Descripción</th>");
            str.Append("<th style='background: #9370DB;'>Usuario modificación</th>");
            str.Append("<th style='background: #9370DB;'>Fecha modificación</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var regRecalculo in listaDataRecalculo)
            {
                string claseRec = regRecalculo != null && regRecalculo.Estado == ConstantesIndisponibilidades.EstadoPeriodoAbierto ? "clase_recalculo_activo" : "";

                str.Append("<tr>");
                str.Append("<td>");
                str.AppendFormat("<a class='' href='JavaScript:verRecalculo({0});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-open.png' alt='Ver recálculo' title='Ver recálculo' /></a>", regRecalculo.Irecacodi, url);
                if (tienePermisoEditar)
                    str.AppendFormat("<a class='' href='JavaScript:editarRecalculo({0});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-edit.png' alt='Editar recálculo' title='Editar recálculo' /></a>", regRecalculo.Irecacodi, url);
                str.AppendFormat("<a class='' href='JavaScript:verListadoReporte({0});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/exportarExcel.png' alt='Ver listado de reportes' title='Ver listado de reportes' /></a>", regRecalculo.Irecacodi, url);
                str.Append("</td>");
                str.AppendFormat("<td class='{1}' style='text-align: center;'>{0}</td>", regRecalculo.IrecaestadoDesc, claseRec);
                str.AppendFormat("<td class='' style=''>{0}</td>", regRecalculo.Irecanombre);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", regRecalculo.IrecafechainiDesc);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", regRecalculo.IrecafechafinDesc);
                str.AppendFormat("<td class='' style=''>{0}</td>", regRecalculo.Irecainforme);
                str.AppendFormat("<td class='' style=''>{0}</td>", regRecalculo.Irecadescripcion);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", regRecalculo.UltimaModificacionUsuarioDesc);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", regRecalculo.UltimaModificacionFechaDesc);
                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        #region Exportación excel por recálculo

        public string GenerarHtmlListadoExcelCuadro(int irecacodi, string url)
        {
            StringBuilder str = new StringBuilder();

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro1, out int rptcodi1, out int numVersion1, out string strComent1);

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro2, out int rptcodi2, out int numVersion2, out string strComent2);

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK, out int rptcodi3, out int numVersion3, out string strComent3);

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro4, out int rptcodi4, out int numVersion4, out string strComent4);

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro5, out int rptcodi5, out int numVersion5, out string strComent5);

            string strComent7 = "";
            string strComent8 = "";
            string strComent9 = "";

            string strComent10 = "";

            string strComent11 = strComent1 + "<br/>" + strComent4;
            string strComent12 = strComent4;
            string strComent13 = strComent1;

            str.AppendFormat(@"
                            <table class='pretty tabla-adicional tabla_reporte_excel' style='width: auto; min-width: 500px'>
                                <thead>
                                    <tr>
                                        <th style='width: 20px'>Descargar <br /> Excel</th>
                                        <th>Nombre de Reporte</th>
                                        <th>Comentarios</th>
                                    </tr>
                                </thead>
                                <tbody>

                                    <!---->
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(1001);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Content/Images/exportarExcel.png'>
                                            </a>
                                        </td>
                                        <td>PR25</td>
                                        <td>{11}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(1002);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Content/Images/exportarExcel.png'>
                                            </a>
                                        </td>
                                        <td>PR_25 Plantilla_HIDRO</td>
                                        <td>{12}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(1003);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Content/Images/exportarExcel.png'>
                                            </a>
                                        </td>
                                        <td>PR-25 Plantilla_TERMICO</td>
                                        <td>{13}</td>
                                    </tr>

                                    <!---->
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(1);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°1</td>
                                        <td>{1}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(2);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°2</td>
                                        <td>{2}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(3);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°3</td>
                                        <td>{3}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(4);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°4</td>
                                        <td>{4}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(5);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°5</td>
                                        <td>{5}</td>
                                    </tr>

                                    <!---->
                                    <tr style='display: none'>
                                        <td>
                                            <a href='JavaScript:descargarReporte(7);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Fortuita térmica</td>
                                        <td>{7}</td>
                                    </tr>
                                    <tr style='display: none'>
                                        <td>
                                            <a href='JavaScript:descargarReporte(8);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Programado térmico</td>
                                        <td>{8}</td>
                                    </tr>
                                    <tr style='display: none'>
                                        <td>
                                            <a href='JavaScript:descargarReporte(9);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Programado hídrico</td>
                                        <td>{9}</td>
                                    </tr>
                                    <tr style='display: none'>
                                        <td>
                                            <a href='JavaScript:descargarReporte(10);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Factor de presencia</td>
                                        <td>{10}</td>
                                    </tr>

                                </tbody>
                            </table>

            ", url, strComent1, strComent2, strComent3
            , strComent4, strComent5, "", strComent7
            , strComent8, strComent9, strComent10
            , strComent11, strComent12, strComent13);

            return str.ToString();
        }

        public string GenerarHtmlListadoExcelFactor(int irecacodi, string url)
        {
            StringBuilder str = new StringBuilder();

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25FactorFortTermico, out int rptcodi1, out int numVersion1, out string strComent1);

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25FactorProgTermico, out int rptcodi2, out int numVersion2, out string strComent2);

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25FactorProgHidro, out int rptcodi3, out int numVersion3, out string strComent3);

            GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25FactorPresencia, out int rptcodi4, out int numVersion4, out string strComent4);

            str.AppendFormat(@"
                            <table class='pretty tabla-adicional tabla_reporte_excel' style='width: auto; min-width: 500px'>
                                <thead>
                                    <tr>
                                        <th style='width: 20px'>Descargar <br /> Excel</th>
                                        <th>Nombre de Reporte</th>
                                        <th>Comentarios</th>
                                    </tr>
                                </thead>
                                <tbody>

                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(8);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°1</td>
                                        <td>{1}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(9);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°2</td>
                                        <td>{2}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(10);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°3</td>
                                        <td>{3}</td>
                                    </tr>
                                    <tr>
                                        <td>
                                            <a href='JavaScript:descargarReporte(11);' id='' title='Descargar en formato Excel'>
                                                <img src='{0}Areas/TransfPotencia/Content/Images/excel.gif'>
                                            </a>
                                        </td>
                                        <td>Cuadro N°4</td>
                                        <td>{4}</td>
                                    </tr>
                                </tbody>
                            </table>

            ", url, strComent1, strComent2, strComent3, strComent4);

            return str.ToString();
        }

        /// <summary>
        /// Genera archivo excel por cuadro
        /// </summary>
        /// <param name="irecacodi"></param>
        /// <param name="idCuadro"></param>
        /// <param name="ruta"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelXCuadroAprobado(int irecacodi, int idCuadro, string ruta, out string nameFile, out string mensaje)
        {
            IndRecalculoDTO regRecalculo = GetByIdIndRecalculo(irecacodi);
            nameFile = "0";
            mensaje = string.Empty;

            switch (idCuadro)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro1, out int rptcodi1, out int numVersion1, out mensaje);

                    if (rptcodi1 > 0)
                        GenerarRptExcelCuadro1(ruta, rptcodi1, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoTermica
                                                            , regRecalculo.Irecafechaini, regRecalculo.Irecafechaini.AddDays(30), out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro2:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro2, out int rptcodi2, out int numVersion2, out mensaje);

                    if (rptcodi2 > 0)
                        GenerarRptExcelCuadro2(ruta, rptcodi2, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoTermica
                                                            , regRecalculo.Irecafechaini, regRecalculo.Irecafechaini.AddDays(30), out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK, out int rptcodi3, out int numVersion3, out mensaje);

                    if (rptcodi3 > 0)
                        GenerarRptExcelCuadro3(ruta, rptcodi3, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                                                            , out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro4:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro4, out int rptcodi4, out int numVersion4, out mensaje);

                    if (rptcodi4 > 0)
                        GenerarRptExcelCuadro4(ruta, rptcodi4, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoHidraulica
                                                            , regRecalculo.Irecafechaini, regRecalculo.Irecafechaini.AddDays(30), out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro5:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro5, out int rptcodi5, out int numVersion5, out mensaje);

                    if (rptcodi5 > 0)
                        GenerarRptExcelCuadro5(ruta, rptcodi5, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                                                            , regRecalculo.Irecafechaini, regRecalculo.Irecafechaini.AddDays(30), regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25PlantillaTermico:

                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro1, out int rptcodi11, out int numVersion11, out mensaje);
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro2, out int rptcodi12, out int numVersion12, out mensaje);
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK, out int rptcodi13, out int numVersion13, out mensaje);
                    if (rptcodi11 > 0 && rptcodi12 > 0 && rptcodi13 > 0)
                        GenerarArchivoExcelXVersionReportePlantillaTermico(ruta, rptcodi11, rptcodi12, rptcodi13, regRecalculo.Irecafechaini, regRecalculo.Irecafechaini.AddDays(30), out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25PlantillaHidrico:

                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro4, out int rptcodi14, out int numVersion14, out mensaje);
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro5, out int rptcodi15, out int numVersion15, out mensaje);

                    if (rptcodi14 > 0 && rptcodi15 > 0)
                        GenerarArchivoExcelXVersionReportePlantillaHidrico(ruta, rptcodi14, rptcodi15, regRecalculo.Irecafechaini, regRecalculo.Irecafechaini.AddDays(30), out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25:

                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro1, out int rptcodi11C1, out int numVersion11C1, out string mensaje1);
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro2, out int rptcodi11C2, out int numVersion11C2, out string mensaje2);
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK, out int rptcodi11C3, out int numVersion11C3, out string mensaje3);
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro4, out int rptcodi11C4, out int numVersion11C4, out string mensaje4);
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25Cuadro5, out int rptcodi11C5, out int numVersion11C5, out string mensaje5);
                    mensaje = mensaje1 + mensaje2 + mensaje3 + mensaje4 + mensaje5;

                    if (rptcodi11C1 > 0 && rptcodi11C2 > 0 && rptcodi11C3 > 0 && rptcodi11C4 > 0 && rptcodi11C5 > 0)
                        GenerarArchivoExcelXVersionReportePR25(ruta, rptcodi11C1, rptcodi11C2, rptcodi11C3, rptcodi11C4, rptcodi11C5, regRecalculo.Irecafechaini, regRecalculo.Irecafechaini.AddDays(30), out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorFortTermico:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25FactorFortTermico, out int rptcodi8, out int numVersion8, out mensaje);
                    if (rptcodi8 > 0)
                        GenerarRptExcelFactorFortuitoTermico(ruta, rptcodi8, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorProgTermico:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25FactorProgTermico, out int rptcodi9, out int numVersion9, out mensaje);
                    if (rptcodi9 > 0)
                        GenerarRptExcelFactorProgramadoTermo(ruta, rptcodi9, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorProgHidro:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25FactorProgHidro, out int rptcodi10, out int numVersion10, out mensaje);
                    if (rptcodi10 > 0)
                        GenerarRptExcelFactorProgramadoHidro(ruta, rptcodi10, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorPresencia:
                    GetCodigoReporteAprobadoXCuadro(irecacodi, ConstantesIndisponibilidades.ReportePR25FactorPresencia, out int rptcodi11p, out int numVersion11p, out mensaje);
                    if (rptcodi11p > 0)
                        GenerarRptExcelFactorPresencia(ruta, rptcodi11p, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, out nameFile);
                    break;
            }
        }

        public void GenerarArchivoExcelXCuadroVersion(string ruta, int irptcodi, string centralIntegrante, string empresa, string central, int famcodi, DateTime fechaIni, DateTime fechaFin, out string nameFile)
        {
            nameFile = "0";
            var regVersion = this.GetByIdIndReporte(irptcodi);

            switch (regVersion.Icuacodi)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                    GenerarRptExcelCuadro1(ruta, irptcodi, centralIntegrante, empresa, central, famcodi, fechaIni, fechaFin, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro2:
                    GenerarRptExcelCuadro2(ruta, irptcodi, centralIntegrante, empresa, central, famcodi, fechaIni, fechaFin, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK:
                    GenerarRptExcelCuadro3(ruta, irptcodi, empresa, central, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro4:
                    GenerarRptExcelCuadro4(ruta, irptcodi, centralIntegrante, empresa, central, famcodi, fechaIni, fechaFin, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro5:
                    GenerarRptExcelCuadro5(ruta, irptcodi, empresa, central, fechaIni, fechaFin, fechaIni, fechaFin, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro7:
                    GenerarRptExcelCuadro7(ruta, irptcodi, empresa, central, famcodi, out nameFile);
                    break;
            }
        }

        /// <summary>
        /// Generar archivo excel por versión del reporte PR25
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="irptcodiCuadro1"></param>
        /// <param name="irptcodiCuadro3"></param>
        /// <param name="irptcodiCuadro4"></param>
        /// <param name="irptcodiCuadro5"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelXVersionReportePR25(string ruta, int irptcodiCuadro1, int irptcodiCuadro2, int irptcodiCuadro3, int irptcodiCuadro4, int irptcodiCuadro5
                                            , DateTime fechaIni, DateTime fechaFin, out string nameFile)
        {
            this.GenerarReporteCuadroXVersionReporte(irptcodiCuadro1, false, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoTermica, fechaIni, fechaFin
                        , out HandsonModel handsonProg1, out HandsonModel handsonFort1
                        , out string htmlReporteConsolidado1, out IndReporteDTO regVersion1, out IndPeriodoDTO regPeriodo1, out IndCuadroDTO regCuadro1
                        , out List<IndReporteTotalDTO> listaReptHoja1, out List<IndReporteDetDTO> listaRepdetHoja1, out List<IndReporteDetDTO> listaRepdetHojaOld1);

            this.GenerarReporteCuadroXVersionReporte(irptcodiCuadro2, false, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoTermica, fechaIni, fechaFin
                        , out HandsonModel handsonProg2, out HandsonModel handsonFort2
                        , out string htmlReporteConsolidado2, out IndReporteDTO regVersion2, out IndPeriodoDTO regPeriodo2, out IndCuadroDTO regCuadro2
                        , out List<IndReporteTotalDTO> listaReptHoja2, out List<IndReporteDetDTO> listaRepdetHoja2, out List<IndReporteDetDTO> listaRepdetHojaOld2);

            this.GenerarReporteFactorKCuadroXVersionReporte(irptcodiCuadro3, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                        , out HandsonModel handsonK, out IndReporteDTO regVersion3, out IndPeriodoDTO regPeriodo3, out IndCuadroDTO regCuadro3, out List<IndReporteTotalDTO> listaReptHoja3, out List<IndReporteTotalDTO> listaReptHojaOld3);

            this.GenerarReporteCuadroXVersionReporte(irptcodiCuadro4, false, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoHidraulica, fechaIni, fechaFin
                        , out HandsonModel handsonProg4, out HandsonModel handsonFort4
                        , out string htmlReporteConsolidado4, out IndReporteDTO regVersion4, out IndPeriodoDTO regPeriodo4, out IndCuadroDTO regCuadro4
                        , out List<IndReporteTotalDTO> listaReptHoja4, out List<IndReporteDetDTO> listaRepdetHoja4, out List<IndReporteDetDTO> listaRepdetHojaOld4);

            this.GenerarReporteCuadroXVersionReporte5(irptcodiCuadro5, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fechaIni, fechaFin
                                                    , out HandsonModel handson5, out List<string> listaMensajeNota
                                                    , out IndReporteDTO regVersion5, out IndPeriodoDTO regPeriodo5, out IndCuadroDTO regCuadro5, out IndRecalculoDTO regRecalculo5
                                                    , out List<IndReporteTotalDTO> listaReptHoja5, out List<IndReporteDetDTO> listaRepdetHoja5, out List<IndReporteDetDTO> listaRepdetHojaOld5);

            nameFile = string.Format("PR25_{0}_{1}.xlsx", EPDate.f_NombreMes(regPeriodo1.Iperimes), regPeriodo1.Iperianio);
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                //REPORTE1
                GenerarHojaExcelCuadroReportePlantillaTermico(xlPackage, "REPORTE1", false, 1, 2, "                 REPORTE DE INDISPONIBILIDADES - {0} {1}", "                            (CENTRALES TERMOELÉCTRICAS)", regCuadro1, regPeriodo1, regVersion1, listaReptHoja1, listaReptHoja2);
                xlPackage.Save();

                //REPORTE2
                GenerarHojaExcelCuadro3ReportePlantillaTermico(xlPackage, "REPORTE2", false, true, 1, 2, "                 REPORTE DE FACTORES DE INCENTIVO A LA DISPONIBILIDAD - {0} {1}", "", regCuadro3, regPeriodo3, regVersion3, listaReptHoja3);
                xlPackage.Save();

                //REPORTE3
                GenerarHojaExcelCuadroReportePlantillaHidrico(xlPackage, "REPORTE3", false, 1, 2, "                 REPORTE DE INDISPONIBILIDADES TOTALES - {0} {1}", "(CENTRALES HIDROELÉCTRICAS)", regCuadro4, regPeriodo4, regVersion4, listaReptHoja4);
                xlPackage.Save();

                //REPORTE4
                GenerarHojaExcelCuadroReporteSoloCuadro5(xlPackage, "REPORTE4", false, true, 1, 2, 7, 2, "DISPONIBILIDAD DIARIA DE LAS CENTRALES HIDROELÉCTRICAS - {0} {1}"
                                                                            , regCuadro5, regPeriodo5, regVersion5, fechaIni, fechaFin, regRecalculo5.Irecafechaini, regRecalculo5.Irecafechafin, listaReptHoja5, listaRepdetHoja5, listaMensajeNota);
                xlPackage.Save();
            }
        }

        /// <summary>
        /// Generar archivo excel por versión reporte plantilla térmico
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="irptcodi1"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelXVersionReportePlantillaTermico(string ruta, int irptcodi1, int irptcodi2, int irptcodi3, DateTime fechaIni, DateTime fechaFin, out string nameFile)
        {
            this.GenerarReporteCuadroXVersionReporte(irptcodi1, false, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoTermica, fechaIni, fechaFin
                        , out HandsonModel handsonProg, out HandsonModel handsonFort
                        , out string htmlReporteConsolidado, out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                        , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld);

            this.GenerarReporteCuadroXVersionReporte(irptcodi2, false, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoTermica, fechaIni, fechaFin
            , out HandsonModel handsonProg2, out HandsonModel handsonFort2
            , out string htmlReporteConsolidado2, out IndReporteDTO regVersion2, out IndPeriodoDTO regPeriodo2, out IndCuadroDTO regCuadro2
            , out List<IndReporteTotalDTO> listaReptHoja2, out List<IndReporteDetDTO> listaRepdetHoja2, out List<IndReporteDetDTO> listaRepdetHojaOld2);

            this.GenerarReporteFactorKCuadroXVersionReporte(irptcodi3, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                        , out HandsonModel handsonK, out IndReporteDTO regVersion3, out IndPeriodoDTO regPeriodo3, out IndCuadroDTO regCuadro3, out List<IndReporteTotalDTO> listaReptHoja3, out List<IndReporteTotalDTO> listaReptHojaOld3);


            nameFile = string.Format("PR-25 Plantilla_{0}_TERMICO.xlsm", EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper());
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCuadroReportePlantillaTermico(xlPackage, "Reporte", true, 1, 2, "                 REPORTE DE INDISPONIBILIDADES - {0} {1}", "                            (CENTRALES TERMOELÉCTRICAS)", regCuadro, regPeriodo, regVersion, listaReptHoja, listaReptHoja2);
                xlPackage.Save();

                //FORTUITA
                GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "FORTUITA", 2, 1, "Térmica", ConstantesIndisponibilidades.INDFortuitaTotal, false, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                xlPackage.Save();

                //PROGRAMADO
                GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "PROGRAMADO", 2, 1, "Térmica", ConstantesIndisponibilidades.INDProgramadaTotal, false, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                xlPackage.Save();

                //PARCIAL_FORTUITA
                GenerarHojaExcelCuadroDetalleCuadro2(xlPackage, "PARCIAL_FORTUITA", 2, 1, "Térmica", ConstantesIndisponibilidades.INDFortuitaParcial, true, fechaIni, fechaFin, listaReptHoja2, listaRepdetHoja2);
                xlPackage.Save();

                //PARCIAL_PROGRAMADO
                GenerarHojaExcelCuadroDetalleCuadro2(xlPackage, "PARCIAL_PROGRAMADO", 2, 1, "Térmica", ConstantesIndisponibilidades.INDProgramadaParcial, true, fechaIni, fechaFin, listaReptHoja2, listaRepdetHoja2);
                xlPackage.Save();

                //FATOR K
                GenerarHojaExcelCuadro3ReportePlantillaTermico(xlPackage, "FACTOR K", false, true, 1, 2, "                 REPORTE DE FACTORES DE INCENTIVO A LA DISPONIBILIDAD - {0} {1}", "", regCuadro3, regPeriodo3, regVersion3, listaReptHoja3);

            }
        }

        /// <summary>
        /// Generar archivo excel por versión reporte plantilla térmico
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="irptcodi"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelXVersionReportePlantillaHidrico(string ruta, int irptcodi4, int irptcodi5, DateTime fechaIni, DateTime fechaFin, out string nameFile)
        {
            this.GenerarReporteCuadroXVersionReporte(irptcodi4, false, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesHorasOperacion.IdTipoHidraulica, fechaIni, fechaFin
                        , out HandsonModel handsonProg, out HandsonModel handsonFort
                        , out string htmlReporteConsolidado, out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                        , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld);

            this.GenerarReporteCuadroXVersionReporte5(irptcodi5, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, fechaIni, fechaFin
                                                    , out HandsonModel handson, out List<string> listaMensajeNota
                                                    , out IndReporteDTO regVersion5, out IndPeriodoDTO regPeriodo5, out IndCuadroDTO regCuadro5, out IndRecalculoDTO regRecalculo5
                                                    , out List<IndReporteTotalDTO> listaReptHoja5, out List<IndReporteDetDTO> listaRepdetHoja5, out List<IndReporteDetDTO> listaRepdetHojaOld5);

            nameFile = string.Format("PR-25 Plantilla_{0}_HIDRO.xlsm", EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper());
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCuadroReportePlantillaHidrico(xlPackage, "REPORTE HIDRO", true, 1, 2, "          REPORTE DE INDISPONIBILIDADES TOTALES - {0} {1}", "(CENTRALES HIDROELÉCTRICAS)", regCuadro, regPeriodo, regVersion, listaReptHoja);
                xlPackage.Save();

                GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "PROGRAMADO", 2, 1, regCuadro.Tgenernomb, ConstantesIndisponibilidades.INDProgramadaTotal, false, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                xlPackage.Save();

                GenerarHojaExcelCuadroReporteSoloCuadro5(xlPackage, "F-P", false, true, 1, 2, 7, 2, "DISPONIBILIDAD DIARIA DE LAS CENTRALES HIDROELÉCTRICAS - {0} {1}"
                                                                            , regCuadro5, regPeriodo5, regVersion5, fechaIni, fechaFin, regRecalculo5.Irecafechaini, regRecalculo5.Irecafechafin, listaReptHoja5, listaRepdetHoja5, listaMensajeNota);
                xlPackage.Save();
            }
        }

        public void GenerarArchivoExcelFactoresXCuadroVersion(string ruta, int irptcodi, string empresa, string central, out string nameFile)
        {
            nameFile = "0";
            var regVersion = this.GetByIdIndReporte(irptcodi);

            switch (regVersion.Icuacodi)
            {
                case ConstantesIndisponibilidades.ReportePR25FactorFortTermico:
                    GenerarRptExcelFactorFortuitoTermico(ruta, irptcodi, empresa, central, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorProgTermico:
                    GenerarRptExcelFactorProgramadoTermo(ruta, irptcodi, empresa, central, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorProgHidro:
                    GenerarRptExcelFactorProgramadoHidro(ruta, irptcodi, empresa, central, out nameFile);
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorPresencia:
                    GenerarRptExcelFactorPresencia(ruta, irptcodi, empresa, central, out nameFile);
                    break;

            }
        }

        #endregion

        public int GetIrecacodiCuadro7XMes(string horizonte, DateTime fechaIni, DateTime fechaFin)
        {
            List<IndPeriodoDTO> listaPer = GetByCriteriaIndPeriodosCuadro(horizonte);
            var regPer7 = listaPer.Find(x => x.Iperianio == fechaIni.Year && x.Iperimes == fechaIni.Month && x.Iperianiofin == fechaFin.Year && x.Iperimesfin == fechaFin.Month);

            if (regPer7 != null)
            {
                var lista = GetByCriteriaIndRecalculos(regPer7.Ipericodi);
                var regR = lista.FirstOrDefault();

                return regR != null ? regR.Irecacodi : 0;
            }

            return 0;
        }

        /// <summary>
        /// Formatea Ind. de Recalculo
        /// </summary>
        /// <param name="reg"></param>
        public static void FormatearIndRecalculo(IndRecalculoDTO reg)
        {
            reg.IrecafechainiDesc = reg.Irecafechaini.ToString(ConstantesAppServicio.FormatoFecha);
            reg.IrecafechafinDesc = reg.Irecafechafin.ToString(ConstantesAppServicio.FormatoFecha);
            reg.IrecafechalimiteDesc = reg.Irecafechalimite.ToString(ConstantesAppServicio.FormatoFechaFull);
            reg.IrecafechaobsDesc = reg.Irecafechaobs.ToString(ConstantesAppServicio.FormatoFechaFull);

            reg.UltimaModificacionFechaDesc = reg.Irecafecmodificacion != null ? reg.Irecafecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Irecafeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2);
            reg.UltimaModificacionUsuarioDesc = reg.Irecafecmodificacion != null ? reg.Irecausumodificacion : reg.Irecausucreacion;

            reg.Estado = DateTime.Now < reg.Irecafechalimite ? ConstantesIndisponibilidades.EstadoPeriodoAbierto : ConstantesIndisponibilidades.EstadoPeriodoCerrado;
            reg.IrecaestadoDesc = GetDescripcionEstadoPeriodo(reg.Estado);

            reg.Orden = SetOrdenRecalculo(reg.Irecatipo);
        }

        /// <summary>
        /// Obtiene orden de recalculo por tipo
        /// </summary>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public static int SetOrdenRecalculo(string tipo)
        {
            int orden = 1;
            switch (tipo)
            {
                case ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena:
                    orden = 1;
                    break;
                case ConstantesIndisponibilidades.TipoRecalculoPreliminarMensual:
                    orden = 2;
                    break;
                case ConstantesIndisponibilidades.TipoRecalculoMensual:
                    orden = 3;
                    break;
            }

            if (tipo != null && tipo.Substring(0, 1) == "R")
                orden = 3 + int.Parse(tipo.Substring(1, 1));

            return orden;
        }

        /// <summary>
        /// Obtiene descripción de estado periodo
        /// </summary>
        /// <param name="estado"></param>
        /// <returns></returns>
        public static string GetDescripcionEstadoPeriodo(string estado)
        {
            switch (estado)
            {
                case ConstantesIndisponibilidades.EstadoPeriodoAbierto:
                    return "Abierto";
                case ConstantesIndisponibilidades.EstadoPeriodoPublicar:
                    return "Publicación Preliminar";
                case ConstantesIndisponibilidades.EstadoPeriodoCerrado:
                    return "Cerrado";
            }

            return string.Empty;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="pericodi"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        public void ObtenerFechaIniYFechaFin(int pericodi, out DateTime fechaIni, out DateTime fechaFin)
        {
            IndPeriodoDTO regPeriodo = GetByIdIndPeriodo(pericodi);
            fechaIni = new DateTime(regPeriodo.Iperianio, regPeriodo.Iperimes, 1);
            fechaFin = fechaIni.AddMonths(1).AddDays(-1);
        }

        /// <summary>
        /// Crea Ind. Periodo Automático
        /// </summary>
        public void CrearIndPeriodoAutomatico()
        {
            List<IndPeriodoDTO> listaPeriodo = new List<IndPeriodoDTO>();

            string horizonte = ConstantesIndisponibilidades.HorizonteMensual;
            DateTime fechaPeriodoMax = GetPeriodoActual().AddMonths(1);
            DateTime fechaRegistro = DateTime.Now;

            //generar data historica
            DateTime fechaIni = new DateTime(2010, 1, 1);

            #region IND_PERIODO

            do
            {
                int anio = fechaIni.Year;
                int mes = fechaIni.Month;

                IndPeriodoDTO reg = new IndPeriodoDTO();
                reg.Iperihorizonte = horizonte;
                reg.Iperianio = anio;
                reg.Iperimes = mes;
                reg.Iperinombre = anio + "." + EPDate.f_NombreMes(mes);
                reg.Iperianiomes = Convert.ToInt32(anio.ToString() + mes.ToString("D2"));
                reg.Iperiestado = fechaIni != fechaPeriodoMax ? ConstantesIndisponibilidades.EstadoPeriodoCerrado : ConstantesIndisponibilidades.EstadoPeriodoAbierto;
                reg.Iperiusucreacion = "SISTEMA";
                reg.Iperifeccreacion = fechaRegistro;

                listaPeriodo.Add(reg);

                fechaIni = fechaIni.AddMonths(1);

            } while (fechaIni <= fechaPeriodoMax);

            //verificar la existencia
            List<IndPeriodoDTO> listaPeriodoBD = this.GetByCriteriaIndPeriodos(-1);
            List<IndPeriodoDTO> listaNuevo = new List<IndPeriodoDTO>();
            foreach (var reg in listaPeriodo)
            {
                var regBD = listaPeriodoBD.Find(x => x.Iperianiomes == reg.Iperianiomes);
                if (regBD == null)
                {
                    listaNuevo.Add(reg);
                }
            }

            //guardar en bd
            foreach (var reg in listaNuevo)
            {
                SaveIndPeriodo(reg);
            }

            #endregion

            //Generar Recálculos
            List<IndRecalculoDTO> listaDataRecalculo = this.ListIndRecalculos().OrderByDescending(x => x.Irecacodi).ToList();

            List<IndRecalculoDTO> listaRecalculoNuevo = new List<IndRecalculoDTO>();

            listaPeriodoBD = this.GetByCriteriaIndPeriodos(-1).Where(x => x.FechaIni < GetPeriodoActual()).ToList();
            foreach (var reg in listaPeriodoBD)
            {
                var regRecalculo = new IndRecalculoDTO();
                regRecalculo.Ipericodi = reg.Ipericodi;
                regRecalculo.Irecatipo = "M";
                regRecalculo.Irecanombre = "Mensual";
                //regRecalculo.Irecadescripcion = descripcion;
                regRecalculo.Irecafechaini = reg.FechaIni;
                regRecalculo.Irecafechafin = reg.FechaFin;
                regRecalculo.Irecafechalimite = reg.FechaFin.AddDays(4).AddSeconds(-1);
                regRecalculo.Irecafechaobs = reg.FechaFin.AddDays(4).AddHours(12);
                regRecalculo.Irecainforme = "INFORME COES/D/DO/SME-INF-0XX-" + reg.FechaIni.Year;
                regRecalculo.Irecausucreacion = "SISTEMA";
                regRecalculo.Irecafeccreacion = fechaRegistro;

                if (listaDataRecalculo.Find(x => x.Irecafechaini == reg.FechaIni && x.Irecafechafin == reg.FechaFin && x.Irecatipo == "M") == null)
                {
                    listaRecalculoNuevo.Add(regRecalculo);
                }

            }

            foreach (var regR in listaRecalculoNuevo)
            {
                SaveIndRecalculo(regR);
            }
        }

        /// <summary>
        /// Obtener periodo actual
        /// </summary>
        /// <returns></returns>
        public DateTime GetPeriodoActual()
        {
            DateTime fechaActual = DateTime.Now;
            DateTime fechaPeriodo = new DateTime(fechaActual.Year, fechaActual.Month, 1);
            if (fechaActual.Day > 12) //>12
            {
                return fechaPeriodo;
            }

            return fechaPeriodo.AddMonths(-1);
        }

        /// <summary>
        /// Obtener periodo actual
        /// </summary>
        /// <returns></returns>
        public DateTime GetPeriodoActualHistorico()
        {
            DateTime fechaActual = DateTime.Now;
            DateTime fechaPeriodo = new DateTime(fechaActual.Year, fechaActual.Month, 1);

            return fechaPeriodo.AddMonths(-1);
        }

        /// <summary>
        /// Listado de año por fecha periodo actual
        /// </summary>
        /// <param name="fechaPeriodoActual"></param>
        /// <returns></returns>
        public List<GenericoDTO> ListaAnio(DateTime fechaPeriodoActual)
        {
            int anioActual = fechaPeriodoActual.Year;

            List<GenericoDTO> listaAnio = new List<GenericoDTO>();
            int iAnioFinal = fechaPeriodoActual.Year;
            for (int i = 2010; i <= iAnioFinal; i++)
            {
                GenericoDTO reg = new GenericoDTO();
                reg.Entero1 = i;
                reg.String1 = i.ToString();
                reg.String2 = anioActual == i ? "selected" : string.Empty;
                listaAnio.Add(reg);
            }

            return listaAnio.OrderByDescending(x => x.Entero1).ToList();
        }

        /// <summary>
        /// Listado de Mes
        /// </summary>
        /// <returns></returns>
        public List<GenericoDTO> ListaMes()
        {
            List<GenericoDTO> listaMes = new List<GenericoDTO>();
            for (int i = 1; i <= 12; i++)
            {
                GenericoDTO reg = new GenericoDTO();
                reg.Entero1 = i;
                reg.String1 = EPDate.f_NombreMes(i);
                listaMes.Add(reg);
            }

            return listaMes;
        }

        /// <summary>
        /// Deveulve el pericodi del periodo anterior
        /// </summary>
        /// <param name="mesAnterior"></param>
        /// <returns></returns>
        public int ObtenerPeriodoAnterior(DateTime mesAnterior)
        {
            int pericodiAnterior = -1;
            List<IndPeriodoDTO> periodos = ListIndPeriodos();

            List<IndPeriodoDTO> periodoAnterior = periodos.Where(x => x.Iperianio == mesAnterior.Year && x.Iperimes == mesAnterior.Month && x.Iperihorizonte == "M").ToList();

            if (periodoAnterior.Any() && periodoAnterior.Count == 1) { pericodiAnterior = periodoAnterior.First().Ipericodi; }
            if (periodoAnterior.Any() && periodoAnterior.Count > 1) { pericodiAnterior = 0; }

            return pericodiAnterior;
        }
        #endregion

        #region Versiones de Recálculo

        /// <summary>
        /// Aprobar version recálculo
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="usuario"></param>
        public void AprobarVersionReporte(int irptcodi, string usuario)
        {
            IndReporteDTO regVersion = GetByIdIndReporte(irptcodi);
            IndCuadroDTO regCuadro = GetByIdIndCuadro(regVersion.Icuacodi);

            List<IndReporteDTO> listaReporteBD = this.GetByCriteriaIndReportes(regCuadro.Icuacodi, regVersion.Irecacodi);
            listaReporteBD = GetListaReportexFiltroXTipo(regVersion.Irpttipo, regVersion.Irpttiempo, regCuadro, listaReporteBD);

            //filtrar los reportes a actualizar
            List<IndReporteDTO> listaUpdate = new List<IndReporteDTO>();
            foreach (var reg in listaReporteBD)
            {
                if (reg.Irptesfinal == ConstantesIndisponibilidades.EsVersionValidado)
                {
                    reg.Irptesfinal = ConstantesIndisponibilidades.EsVersionAnteriorValidado;
                    listaUpdate.Add(reg);
                }

                if (reg.Irptcodi == irptcodi)
                {
                    reg.Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado;
                    reg.Irptusumodificacion = usuario;
                    reg.Irptfecmodificacion = DateTime.Now;
                    listaUpdate.Add(reg);
                }
            }

            //update
            foreach (var reg in listaUpdate)
            {
                AprobarIndReporte(reg);
            }
        }

        /// <summary>
        /// Generar reporte Html listado versiones por recalculo y cuadro
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermisoEditar"></param>
        /// <param name="cuadrocodi"></param>
        /// <param name="recalculocodi"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoVersion(string url, bool tienePermisoEditar, int cuadrocodi, int recalculocodi)
        {
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadrocodi);
            List<IndReporteDTO> lista = this.GetByCriteriaIndReportes(cuadrocodi, recalculocodi);

            StringBuilder str = new StringBuilder();
            if (regCuadro.TieneDivisionTablaXTipo)
            {
                var listaXApp = lista.Where(x => x.Irpttipo == ConstantesIndisponibilidades.TipoReporteAplicativo).ToList();
                var str1 = GenerarHtmlListadoVersionXTiempo(regCuadro, listaXApp, url, tienePermisoEditar, ConstantesIndisponibilidades.TipoReporteAplicativo);
                str.Append("<h2>Aplicativo</h2>");
                str.Append(str1);

                var listaXHist = lista.Where(x => x.Irpttipo == ConstantesIndisponibilidades.TipoReporteHistorico).ToList();
                string str2 = GenerarHtmlListadoVersionXTiempo(regCuadro, listaXHist, url, tienePermisoEditar, ConstantesIndisponibilidades.TipoReporteHistorico);
                str.Append("<h2 style='margin-top: 35px;'>Excel histórico oficial (publicado en Portal Web)</h2>");
                str.Append(str2);
            }
            else
            {
                string str3 = GenerarHtmlListadoVersionXTiempo(regCuadro, lista, url, tienePermisoEditar, ConstantesIndisponibilidades.TipoReporteAplicativo);
                str.Append(str3);
            }

            if (regCuadro.ListaNota.Any())
            {
                str.Append("<b>Nota</b>:");
                str.Append("<ul>");
                foreach (var reg in regCuadro.ListaNota)
                {
                    str.AppendFormat("<li>{0}</li>", reg);
                }
                str.Append("</ul>");
            }

            return str.ToString();
        }

        /// <summary>
        /// Generar reporte Html listado versiones por recalculo y cuadro
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermisoEditar"></param>
        /// <param name="cuadrocodi"></param>
        /// <param name="recalculocodi"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoVersionHistorico(string url, int recalculocodi)
        {
            IndCuadroDTO regCuadroC1 = this.GetByIdIndCuadro(ConstantesIndisponibilidades.ReportePR25Cuadro1);
            IndCuadroDTO regCuadroC4 = this.GetByIdIndCuadro(ConstantesIndisponibilidades.ReportePR25Cuadro4);

            List<IndReporteDTO> listaC1 = this.GetByCriteriaIndReportes(ConstantesIndisponibilidades.ReportePR25Cuadro1, recalculocodi);
            List<IndReporteDTO> listaC4 = this.GetByCriteriaIndReportes(ConstantesIndisponibilidades.ReportePR25Cuadro4, recalculocodi);

            StringBuilder str = new StringBuilder();

            var listaXHistC1 = listaC1.Where(x => x.Irpttipo == ConstantesIndisponibilidades.TipoReporteHistorico).ToList();
            string str1 = GenerarHtmlListadoVersionXTiempo(regCuadroC1, listaXHistC1, url, false, ConstantesIndisponibilidades.TipoReporteHistorico);
            str.Append("<h2 style='margin-top: 35px;'>Cuadro 1 - Excel histórico oficial (publicado en Portal Web)</h2>");
            str.Append(str1);

            var listaXHistC4 = listaC4.Where(x => x.Irpttipo == ConstantesIndisponibilidades.TipoReporteHistorico).ToList();
            string str2 = GenerarHtmlListadoVersionXTiempo(regCuadroC4, listaXHistC4, url, false, ConstantesIndisponibilidades.TipoReporteHistorico);
            str.Append("<h2 style='margin-top: 35px;'>Cuadro 4 - Excel histórico oficial (publicado en Portal Web)</h2>");
            str.Append(str2);

            return str.ToString();
        }

        /// <summary>
        /// Genera reporte Html de listado versión por tiempo
        /// </summary>
        /// <param name="regCuadro"></param>
        /// <param name="lista"></param>
        /// <param name="url"></param>
        /// <param name="tienePermisoEditar"></param>
        /// <returns></returns>
        private string GenerarHtmlListadoVersionXTiempo(IndCuadroDTO regCuadro, List<IndReporteDTO> lista, string url, bool tienePermisoEditar, string tipo)
        {
            StringBuilder str = new StringBuilder();
            if (regCuadro.TieneDivisionTablaXTiempo)
            {
                var listaXHp = lista.Where(x => x.Irpttiempo == ConstantesIndisponibilidades.TiempoHoraPunta).ToList();
                var listaXTd = lista.Where(x => x.Irpttiempo == ConstantesIndisponibilidades.TiempoTodoDia).ToList();

                var str1 = GenerarTablaHtmlListadoVersion(regCuadro, listaXHp, url, tienePermisoEditar, tipo);
                if (listaXHp.Any()) str.Append("<div>Hora Punta</div>");
                str.Append(str1);

                if (listaXTd.Any())
                {
                    string str2 = GenerarTablaHtmlListadoVersion(regCuadro, listaXTd, url, tienePermisoEditar, tipo);
                    str.Append("<div style='margin-top: 10px;'>Todo el día</div>");
                    str.Append(str2);
                }
            }
            else
            {
                string str3 = GenerarTablaHtmlListadoVersion(regCuadro, lista, url, tienePermisoEditar, tipo);
                str.Append(str3);
            }

            return str.ToString();
        }

        /// <summary>
        /// Genera tabla Html listado versión por recalculo
        /// </summary>
        /// <param name="regCuadro"></param>
        /// <param name="lista"></param>
        /// <param name="url"></param>
        /// <param name="tienePermisoEditar"></param>
        /// <returns></returns>
        private string GenerarTablaHtmlListadoVersion(IndCuadroDTO regCuadro, List<IndReporteDTO> lista, string url, bool tienePermisoEditar, string tipo)
        {
            List<int> listaCuadroNoEditable = new List<int>() { ConstantesIndisponibilidades.ReportePR25Cuadro7 , ConstantesIndisponibilidades.ReportePR25FactorFortTermico
                                        , ConstantesIndisponibilidades.ReportePR25FactorProgHidro, ConstantesIndisponibilidades.ReportePR25FactorProgTermico, ConstantesIndisponibilidades.ReportePR25FactorPresencia };

            tienePermisoEditar = tienePermisoEditar && tipo != ConstantesIndisponibilidades.TipoReporteHistorico;

            StringBuilder str = new StringBuilder();
            str.Append("<table class='pretty tabla-adicional tabla_version_x_recalculo' border='0' cellspacing='0' width='100%'>");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style=''>N° Versión</th>");
            str.Append("<th style=''>Recálculo</th>");

            if (regCuadro.TieneColumnaTiempo)
                str.Append("<th style=''>Tiempo</th>");

            str.Append("<th style=''>Usuario registro</th>");
            str.Append("<th style=''>Fecha registro</th>");

            if (tienePermisoEditar)
                str.Append("<th style='width: 30px'>Aprobar </th>");
            if (tipo != ConstantesIndisponibilidades.TipoReporteHistorico)
                str.Append("<th style=''>Estado</th>");

            if (tipo != ConstantesIndisponibilidades.TipoReporteHistorico)
            {
                str.Append("<th style=''>Usuario aprobación</th>");
                str.Append("<th style=''>Fecha aprobación</th>");
            }

            if (tienePermisoEditar)
            {
                string tdEditar = listaCuadroNoEditable.Contains(regCuadro.Icuacodi) ? "Ver" : "Ver/Editar";
                str.AppendFormat("<th style='width: 30px'>{0}</th>", tdEditar);
            }

            str.Append("<th style='width: 30px'>Excel</th>");

            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var reg in lista.OrderBy(x => x.Irptnumversion).ToList())
            {
                str.Append("<tr>");

                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Irptnumversion);

                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Iperinombre + " - " + reg.Irecanombre + " (" + reg.IrecafechainiDesc + " a " + reg.IrecafechafinDesc + ")");

                //tiempo
                if (regCuadro.TieneColumnaTiempo)
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.IrpttiempoDesc);

                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Irptusucreacion);
                str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.IrptfeccreacionDesc);

                //estado
                if (tienePermisoEditar)
                {
                    str.Append("<td style='text-align: center;'>");
                    if (ConstantesIndisponibilidades.EsVersionGenerado == reg.Irptesfinal)
                        str.AppendFormat("<a class='' href='JavaScript:aprobarVersion({0});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-ok.png' alt='Validar reporte y aprobar reporte' title='Validar reporte y aprobar reporte' /></a>", reg.Irptcodi, url);
                    str.Append("</td>");
                }

                if (tipo != ConstantesIndisponibilidades.TipoReporteHistorico)
                    str.AppendFormat("<td class='' style='text-align: center;background-color: {1}; color:{2};font-weight: bold;'>{0}</td>", reg.IrptesfinalDesc, reg.IrptesfinalColorFondo, reg.IrptesfinalColorLetra);

                if (tipo != ConstantesIndisponibilidades.TipoReporteHistorico)
                {
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.Irptusumodificacion);
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.IrptfecmodificacionDesc);
                }

                if (tienePermisoEditar)
                {
                    str.Append("<td style='text-align: center;'>");
                    if (!listaCuadroNoEditable.Contains(regCuadro.Icuacodi))
                        str.AppendFormat("<a class='' href='JavaScript:editarReporte({0}, {1});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{2}Content/Images/btn-edit.png' alt='Editar reporte' title='Editar reporte' /></a>", reg.Irptcodi, regCuadro.Icuacodi, url);
                    else
                        str.AppendFormat("<a class='' href='JavaScript:verReporte({0}, {1});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{2}Content/Images/btn-open.png' alt='Visualizar reporte' title='Visualizar reporte' /></a>", reg.Irptcodi, regCuadro.Icuacodi, url);
                    str.Append("</td>");
                }

                //excel
                str.Append("<td style='text-align: center;'>");
                str.AppendFormat("<a class='' href='JavaScript:descargarReporte({0}, {1});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{2}Content/Images/ExportExcel.png'  title='Descargar reporte' /></a>", reg.Irptcodi, regCuadro.Icuacodi, url);
                str.Append("</td>");

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Formatea Ind. Reporte
        /// </summary>
        /// <param name="reg"></param>
        private void FormatearIndReporte(IndReporteDTO reg)
        {
            if (reg != null)
            {
                reg.IrptesfinalDesc = GetDescripcionEstadoReporte(reg.Irptesfinal);
                reg.IrptesfinalColorFondo = ConstantesIndisponibilidades.EsVersionGenerado == reg.Irptesfinal ? "#FED866" : (ConstantesIndisponibilidades.EsVersionAnteriorValidado == reg.Irptesfinal ? "" : "#2ECC71");
                reg.IrptesfinalColorLetra = ConstantesIndisponibilidades.EsVersionGenerado == reg.Irptesfinal ? "#555051" : (ConstantesIndisponibilidades.EsVersionAnteriorValidado == reg.Irptesfinal ? "" : "#ffffff");

                reg.IrpttiempoDesc = GetDescripcionTiempoReporte(reg.Irpttiempo);
                reg.IrptmedicionorigenDesc = GetDescripcionMedicionReporte(reg.Irptmedicionorigen);
                reg.IrptfeccreacionDesc = reg.Irptfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull);
                reg.IrptfecmodificacionDesc = reg.Irptfecmodificacion != null ? reg.Irptfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : "";
                reg.UltimaModificacionFechaDesc = reg.Irptfecmodificacion != null ? reg.Irptfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : reg.Irptfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull2);

                reg.IrecafechainiDesc = reg.Irecafechaini.ToString(ConstantesAppServicio.FormatoFecha);
                reg.IrecafechafinDesc = reg.Irecafechafin.ToString(ConstantesAppServicio.FormatoFecha);
            }
        }

        /// <summary>
        /// Obtiene descripción de estado del reporte
        /// </summary>
        /// <param name="esFinal"></param>
        /// <returns></returns>
        private string GetDescripcionEstadoReporte(int esFinal)
        {
            return ConstantesIndisponibilidades.EsVersionGenerado == esFinal ? "Generado" : (ConstantesIndisponibilidades.EsVersionAnteriorValidado == esFinal ? "Histórico" : "Validado");
        }

        /// <summary>
        /// Obtiene descripción de tiempo del reporte
        /// </summary>
        /// <param name="tiempo"></param>
        /// <returns></returns>
        private string GetDescripcionTiempoReporte(string tiempo)
        {
            return ConstantesIndisponibilidades.TiempoHoraPunta == tiempo ? "Hora Punta" : "Todo el día";
        }

        /// <summary>
        /// Obtiene descripción de medición del reporte
        /// </summary>
        /// <param name="medicion"></param>
        /// <returns></returns>
        private string GetDescripcionMedicionReporte(string medicion)
        {
            return ConstantesIndisponibilidades.MedicionOrigen96 == medicion ? "Bornes de generación" : "Despacho";
        }

        /// <summary>
        /// Asigna valores al objeto Ind. Cuadro
        /// </summary>
        /// <param name="reg"></param>
        private void SetValoresCuadro(IndCuadroDTO reg)
        {
            int famcodi = 0;
            List<int> listaFamcodi = new List<int>();
            //bool tieneDivisionTablaXTipo = false; //historico o aplicativo
            bool tieneDivisionTablaXTiempo = false; //hp o todo el dia
            bool tieneColumnaTipo = false;
            bool tieneColumnaTiempo = false;
            bool tieneColumnaMedicion = false;
            List<string> listaNota = new List<string>();
            string tgnernomb = string.Empty;
            DateTime fechaIni = DateTime.MinValue, fechaFin = DateTime.MinValue;

            switch (reg.Icuacodi)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                    famcodi = ConstantesHorasOperacion.IdTipoTermica;
                    //tieneDivisionTablaXTipo = true;
                    tieneDivisionTablaXTiempo = true;
                    tgnernomb = "Térmica";
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro2:
                    famcodi = ConstantesHorasOperacion.IdTipoTermica;
                    tieneDivisionTablaXTiempo = true;
                    tgnernomb = "Térmica";
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro4:
                    famcodi = ConstantesHorasOperacion.IdTipoHidraulica;
                    //tieneDivisionTablaXTipo = true;
                    tieneDivisionTablaXTiempo = true;
                    tgnernomb = "Hidráulica";
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK:
                    famcodi = ConstantesHorasOperacion.IdTipoTermica;
                    tgnernomb = "Térmica";
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro5:
                    famcodi = ConstantesHorasOperacion.IdTipoHidraulica;
                    tgnernomb = "Hidráulica";
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro7:
                    listaFamcodi = new List<int>() { ConstantesHorasOperacion.IdTipoHidraulica, ConstantesHorasOperacion.IdGeneradorTemoelectrico, ConstantesHorasOperacion.IdTipoTermica, ConstantesHorasOperacion.IdGeneradorHidroelectrico };
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorFortTermico:
                    famcodi = ConstantesHorasOperacion.IdTipoTermica;
                    break;
                case ConstantesIndisponibilidades.ReportePR25FactorProgTermico:
                    famcodi = ConstantesHorasOperacion.IdTipoTermica;
                    break;
                case ConstantesIndisponibilidades.ReportePR25FactorProgHidro:
                    famcodi = ConstantesHorasOperacion.IdTipoHidraulica;
                    listaFamcodi = new List<int>() { ConstantesHorasOperacion.IdTipoHidraulica, ConstantesHorasOperacion.IdGeneradorHidroelectrico };
                    break;
                case ConstantesIndisponibilidades.ReportePR25FactorPresencia:
                    famcodi = ConstantesHorasOperacion.IdTipoHidraulica;
                    tgnernomb = "Hidráulica";
                    break;

                case ConstantesIndisponibilidades.ReportePR25HistoricoTermo:
                    listaFamcodi = new List<int>() { ConstantesHorasOperacion.IdTipoTermica, ConstantesHorasOperacion.IdGeneradorTemoelectrico };
                    fechaIni = DateTime.ParseExact(ConstantesIndisponibilidades.MesIniHistoricoTermo, ConstantesAppServicio.FormatoMes, CultureInfo.InvariantCulture);
                    fechaFin = GetPeriodoMaxHistTermo();
                    reg.PeriodoIniHistoricoDesc = fechaIni.ToString("MMM yyyy");
                    reg.PeriodoFinHistoricoDesc = fechaFin.ToString("MMM yyyy");
                    break;

                case ConstantesIndisponibilidades.ReportePR25HistoricoHidro:
                    listaFamcodi = new List<int>() { ConstantesHorasOperacion.IdTipoHidraulica, ConstantesHorasOperacion.IdGeneradorHidroelectrico };
                    fechaIni = DateTime.ParseExact(ConstantesIndisponibilidades.MesIniHistoricoHidro, ConstantesAppServicio.FormatoMes, CultureInfo.InvariantCulture);
                    fechaFin = GetPeriodoMaxHistHidro();
                    reg.PeriodoIniHistoricoDesc = fechaIni.ToString("MMM yyyy");
                    reg.PeriodoFinHistoricoDesc = fechaFin.ToString("MMM yyyy");
                    break;
            }

            reg.Famcodi = famcodi;
            if (!listaFamcodi.Any())
                listaFamcodi.Add(famcodi);
            reg.ListaFamcodi = listaFamcodi;

            //reg.TieneDivisionTablaXTipo = tieneDivisionTablaXTipo;
            reg.TieneDivisionTablaXTiempo = tieneDivisionTablaXTiempo;
            reg.TieneColumnaTipo = tieneColumnaTipo;
            reg.TieneColumnaTiempo = tieneColumnaTiempo;
            reg.TieneColumnaMedicion = tieneColumnaMedicion;
            reg.ListaNota = listaNota;
            reg.Tgenernomb = tgnernomb;
            reg.PeriodoIniHistorico = fechaIni;
            reg.PeriodoFinHistorico = fechaFin;
        }

        #endregion

        #region Funciones Generales de los cuadros

        public List<ResultadoValidacionAplicativo> ListarVerificacionCuadro(int cuadro, int irecacodi, int famcodi)
        {
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            List<ResultadoValidacionAplicativo> listaVal = new List<ResultadoValidacionAplicativo>();

            switch (cuadro)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                case ConstantesIndisponibilidades.ReportePR25Cuadro4:
                case ConstantesIndisponibilidades.ReportePR25Cuadro7:
                    this.ListarDataInicialPR25(regCuadro.Icuacodi, regRecalculo.Irecafechaini.AddDays(-7), regRecalculo.Irecafechafin, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, famcodi
                                                , out List<EqEquipoDTO> listaUnidadSiOpComercial, out List<EqEquipoDTO> listaUnidadNoOpComercial
                                                , out List<EqEquipoDTO> listaEqSiOpComercial, out List<EqEquipoDTO> listaEqNoOpComercial
                                                , out List<EveManttoDTO> listaManttoSiOpCom, out List<EveManttoDTO> listaManttoNoOpCom, out List<IndInsumoLogDTO> listaLogInsumo, out List<ResultadoValidacionAplicativo> listaMsj);

                    listaVal = listaMsj;

                    if (listaManttoSiOpCom.Any())
                    {
                        ResultadoValidacionAplicativo val = new ResultadoValidacionAplicativo()
                        {
                            TipoFuenteDatoDesc = "Mantenimientos",
                            Descripcion = listaUnidadSiOpComercial.Count + " unidades en Operación comercial tienen " + listaManttoSiOpCom.Count + " manttos."
                        };

                        listaVal.Add(val);
                    }
                    else
                    {
                        ResultadoValidacionAplicativo val = new ResultadoValidacionAplicativo()
                        {
                            TipoResultado = 2,
                            TipoFuenteDatoDesc = "Mantenimientos",
                            Descripcion = "No existen mantenimientos en el periodo seleccionado."
                        };

                        listaVal.Add(val);
                    }

                    if (listaManttoNoOpCom.Any())
                    {
                        ResultadoValidacionAplicativo val = new ResultadoValidacionAplicativo()
                        {
                            TipoFuenteDatoDesc = "Mantenimientos",
                            Descripcion = listaUnidadNoOpComercial.Count + " unidades sin Operación comercial tienen " + listaManttoNoOpCom.Count + " manttos."
                        };

                        listaVal.Add(val);
                    }

                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro2:
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK:
                    ValidarDatosNuevoCalculoFactorK(regRecalculo, out listaVal); //IND.PR25.2022
                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro5:

                    List<IndReporteTotalDTO> listaRptTot;
                    List<IndReporteDetDTO> listaRptDet;

                    ListarEqCentralHidraulicoOpComercial(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out List<EqEquipoDTO> listaCentrales, out List<EqEquipoDTO> listaEquiposHidro, out List<ResultadoValidacionAplicativo> listaMsj2);

                    if (regRecalculo.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena)
                    {
                        GenerarReporteYDetalle48(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaCentrales, out listaRptTot, out listaRptDet, out listaVal);
                    }
                    else
                    {
                        GenerarReporteYDetalle96(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaCentrales, out listaRptTot, out listaRptDet, out listaVal);
                    }

                    break;
            }

            //mensajes unicos no repetidos
            listaVal = listaVal.GroupBy(x => x.Descripcion).Select(x => new ResultadoValidacionAplicativo()
            {
                TipoResultado = x.First().TipoResultado,
                Descripcion = x.Key,
                Accion = x.First().Accion,
                TipoFuenteDatoDesc = x.First().TipoFuenteDatoDesc
            }).ToList();

            return listaVal;
        }

        public List<ResultadoValidacionAplicativo> ListarVerificacionFactor(int cuadro, int irecacodi, int idReporteCuadro1, int idReporteCuadro2, int idReporteCuadro14, int idReporteCuadro4, int idReporteCuadro5
                                                                            , out bool flagContinuar)
        {
            flagContinuar = true;
            IndRecalculoDTO regRecalculo = GetByIdIndRecalculo(irecacodi);
            IndPeriodoDTO regPeriodo = GetByIdIndPeriodo(regRecalculo.Ipericodi);

            List<ResultadoValidacionAplicativo> listaVal = new List<ResultadoValidacionAplicativo>();

            switch (cuadro)
            {
                case ConstantesIndisponibilidades.ReportePR25FactorFortTermico:
                    DateTime fechaFin3 = GetPeriodoMaxHistTermo();
                    if (regPeriodo.FechaIni > fechaFin3)
                    {
                        if (idReporteCuadro1 <= 0)
                        {
                            flagContinuar = false;
                            listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, Descripcion = "No existe versión aprobada del Cuadro 1." });
                        }
                        if (idReporteCuadro2 <= 0)
                        {
                            flagContinuar = false;
                            listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, Descripcion = "No existe versión aprobada del Cuadro 2." });
                        }
                    }

                    if (idReporteCuadro14 <= 0)
                    {
                        flagContinuar = false;
                        listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, Descripcion = "No existe versión aprobada del Insumo Disponibilidad de Calor Útil." });
                    }

                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorProgTermico:
                    DateTime fechaFin1 = GetPeriodoMaxHistTermo();
                    if (regPeriodo.FechaIni > fechaFin1)
                    {
                        if (idReporteCuadro1 <= 0)
                        {
                            flagContinuar = false;
                            listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, Descripcion = "No existe versión aprobada del Cuadro 1." });
                        }
                        if (idReporteCuadro2 <= 0)
                        {
                            flagContinuar = false;
                            listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, Descripcion = "No existe versión aprobada del Cuadro 2." });
                        }
                    }

                    if (idReporteCuadro14 <= 0)
                    {
                        flagContinuar = false;
                        listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, Descripcion = "No existe versión aprobada del Insumo Disponibilidad de Calor Útil." });
                    }

                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorProgHidro:
                    DateTime fechaFin2 = GetPeriodoMaxHistHidro();
                    if (regPeriodo.FechaIni > fechaFin2)
                    {
                        if (idReporteCuadro4 <= 0)
                        {
                            flagContinuar = false;
                            listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, Descripcion = "No existe versión aprobada del Cuadro 4." });
                        }
                    }
                    break;

                case ConstantesIndisponibilidades.ReportePR25FactorPresencia:
                    if (idReporteCuadro5 <= 0)
                    {
                        flagContinuar = false;
                        listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, Descripcion = "No existe versión aprobada del Cuadro 5." });
                    }
                    break;
            }

            return listaVal;
        }

        /// <summary>
        /// Generar html de verificacion
        /// </summary>
        /// <param name="lista"></param>
        /// <returns></returns>
        public string GenerarHtmlVerificacion(List<ResultadoValidacionAplicativo> lista)
        {
            StringBuilder strHtml = new StringBuilder();

            if (lista.Any())
            {
                strHtml.Append(@"<strong>Existen observaciones</strong>: <br/>");

                string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' id='tabla_verif'>
                        <thead>
                            <tr>
                                <th>Insumo</th>
                                <th>Tipo </th>
                                <th>Acción</th>
                                <th>Descripción</th>
                            </tr>
                        </thead>
                        <tbody>
                ";
                strHtml.Append(head);

                foreach (var regVerif in lista)
                {
                    var tipo = regVerif.TipoResultado == 0 ? "Informativo" : "Alerta";
                    var stylecss = regVerif.TipoResultado == 0 ? "blue" : "#ff8100";
                    var descrip = regVerif.Descripcion;

                    string filaTr = string.Format(@"
                                    <tr>
                                        <td style='text-align: center;'>{4}</td>
                                        <td style='color: {0};'>{1}</td>
                                        <td style='text-align: center;'>{2}</td>
                                        <td style='text-align: left; '>{3}</td>
                                    </tr>
                                    "
                                    , stylecss
                                    , tipo
                                    , regVerif.Accion
                                    , descrip
                                    , regVerif.TipoFuenteDatoDesc
                                    );

                    strHtml.Append(filaTr);
                }

                string foot = @"
                            </tbody>
                    </table>";
                strHtml.Append(foot);
            }
            else
            {
                strHtml.Append("No existen mensajes, puede continuar con el proceso.");
            }

            return strHtml.ToString();
        }

        /// <summary>
        /// Reotrna lista de empresa y central por filtro version 
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="centralIntegrante"></param>
        /// <param name="empresa"></param>
        /// <param name="central"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        public void ListarFiltroXVersionReporte(int irptcodi, int famcodi, string centralIntegrante, string empresa, string central
            , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral)
        {
            this.ListaDataXVersionReporte(irptcodi, new List<int>() { famcodi }, centralIntegrante, empresa, central, out List<IndReporteTotalDTO> listaReptotOut, out List<IndReporteDetDTO> listaRepdetOut, out listaEmpresa, out listaCentral);
        }

        /// <summary>
        /// Retorna lista de data Ind. Reporte Total, Ind. Reporte Det, empresa, central y equipo 
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="opCom"></param>
        /// <param name="empresa"></param>
        /// <param name="central"></param>
        /// <param name="listaReptotOut"></param>
        /// <param name="listaRepdetOut"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaEquipo"></param>
        public void ListaDataXVersionReporte(int irptcodi, List<int> listaFamcodi, string opCom, string empresa, string central
                                                , out List<IndReporteTotalDTO> listaReptotOut, out List<IndReporteDetDTO> listaRepdetOut
                                                , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral)
        {
            List<IndReporteTotalDTO> listaReptot = GetByCriteriaIndReporteTotals(irptcodi).OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Itotincremental).ThenBy(x => x.Equinomb).ToList();
            List<IndReporteDetDTO> listaRepdet = GetByCriteriaIndReporteDets(irptcodi);

            opCom = !string.IsNullOrEmpty(opCom) ? opCom : ConstantesAppServicio.ParametroDefecto;
            empresa = !string.IsNullOrEmpty(empresa) ? empresa : ConstantesAppServicio.ParametroDefecto;
            central = !string.IsNullOrEmpty(central) ? central : ConstantesAppServicio.ParametroDefecto;
            if (empresa == "-2") empresa = ConstantesAppServicio.ParametroDefecto;
            if (central == "-2") central = ConstantesAppServicio.ParametroDefecto;

            //filtrar por tipo de equipo, en cuadro 7 se guardar termo e hidro en la misma version
            listaReptot = listaReptot.Where(x => listaFamcodi.Contains(x.Famcodi)).ToList();

            if (ConstantesAppServicio.ParametroDefecto != opCom)
                listaReptot = listaReptot.Where(x => x.Itotopcom == opCom).ToList();

            if (ConstantesAppServicio.ParametroDefecto != empresa)
            {
                int[] emprcodis = empresa.Split(',').Select(x => int.Parse(x)).ToArray();
                listaReptot = listaReptot.Where(x => emprcodis.Contains(x.Emprcodi)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != central)
            {
                int[] equipadres = central.Split(',').Select(x => int.Parse(x)).ToArray();
                listaReptot = listaReptot.Where(x => equipadres.Contains(x.Equipadre)).ToList();
            }

            listaEmpresa = listaReptot.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO() { Emprcodi = x.Key, Emprnomb = x.First().Emprnomb }).OrderBy(x => x.Emprnomb).ToList();
            listaCentral = listaReptot.GroupBy(x => x.Equipadre).Select(x => new EqEquipoDTO() { Equipadre = x.Key, Central = x.First().Central, Emprcodi = x.First().Emprcodi, Grupotipocogen = x.First().Grupotipocogen }).OrderBy(x => x.Central).ToList();

            List<int> listaTotcodi = listaReptot.Select(x => x.Itotcodi).ToList();
            listaRepdet = listaRepdet.Where(x => listaTotcodi.Contains(x.Itotcodi)).ToList();

            foreach (var reg in listaReptot)
            {
                reg.EsUnaUnidadXCentral = listaReptot.Where(x => x.Equipadre == reg.Equipadre).Count() == 1;
            }

            listaReptotOut = listaReptot;
            listaRepdetOut = listaRepdet;
        }

        /// <summary>
        /// Obtiene código de reporte aprobado por cuadro
        /// </summary>
        /// <param name="irecacodi"></param>
        /// <param name="idCuadro"></param>
        /// <param name="rptcodi"></param>
        public void GetCodigoReporteAprobadoXCuadro(int irecacodi, int idCuadro, out int rptcodi, out int numVersion, out string comentario)
        {
            rptcodi = -1;
            numVersion = 0;
            comentario = string.Empty;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(idCuadro);

            List<IndReporteDTO> lista = this.GetByCriteriaIndReportes(idCuadro, irecacodi);

            switch (idCuadro)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                case ConstantesIndisponibilidades.ReportePR25Cuadro2:
                case ConstantesIndisponibilidades.ReportePR25Cuadro4:

                    //debe haber aprobado por hora punta
                    var listaXApp = lista.Where(x => x.Irpttipo == ConstantesIndisponibilidades.TipoReporteAplicativo).ToList();
                    var listaXHp = listaXApp.Where(x => x.Irpttiempo == ConstantesIndisponibilidades.TiempoHoraPunta).OrderByDescending(x => x.Irptnumversion).ToList();

                    if (listaXHp.Any())
                    {
                        IndReporteDTO regAprobado = listaXHp.Find(x => x.Irptesfinal == 1);
                        rptcodi = regAprobado != null ? regAprobado.Irptcodi : -1;
                        numVersion = regAprobado != null ? regAprobado.Irptnumversion : 0;

                        if (rptcodi <= 0)
                            comentario = "La versión n°" + listaXHp.First().Irptnumversion + " de " + regCuadro.Icuanombre + " no se encuentra VALIDADO. ";
                    }
                    else
                    {
                        comentario = "" + regCuadro.Icuanombre + " todavía no ha sido procesado. ";
                    }
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK:
                case ConstantesIndisponibilidades.ReportePR25Cuadro5:
                case ConstantesIndisponibilidades.ReportePR25FactorFortTermico:
                case ConstantesIndisponibilidades.ReportePR25FactorProgTermico:
                case ConstantesIndisponibilidades.ReportePR25FactorProgHidro:
                case ConstantesIndisponibilidades.ReportePR25FactorPresencia:
                case ConstantesIndisponibilidades.ReportePR25DisponibilidadCalorUtil:

                    var listaUlt = lista.OrderByDescending(x => x.Irptnumversion).ToList();

                    if (listaUlt.Any())
                    {
                        var regAprobado = listaUlt.Find(x => x.Irptesfinal == 1);
                        rptcodi = regAprobado != null ? regAprobado.Irptcodi : -1;
                        numVersion = regAprobado != null ? regAprobado.Irptnumversion : 0;

                        if (rptcodi <= 0)
                            comentario = "La versión n°" + listaUlt.First().Irptnumversion + " de " + regCuadro.Icuanombre + " no se encuentra VALIDADO. ";
                    }
                    else
                    {
                        comentario = "" + regCuadro.Icuanombre + " todavía no ha sido procesado. ";
                    }

                    break;
            }
        }

        /// <summary>
        /// Obtiene código de reporte aprobado por cuadro
        /// </summary>
        /// <param name="irecacodi"></param>
        /// <param name="idCuadro"></param>
        /// <param name="rptcodi"></param>
        public int GetCodigoReporteAnteriorXCuadro(int irptcodi)
        {
            int rptcodi = -1;

            var regIndReporte = GetByIdIndReporte(irptcodi);

            switch (regIndReporte.Icuacodi)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                case ConstantesIndisponibilidades.ReportePR25Cuadro4:

                    List<IndReporteDTO> lista = this.GetByCriteriaIndReportes(regIndReporte.Icuacodi, regIndReporte.Irecacodi);
                    var listaXTipo = lista.Where(x => x.Irpttipo == regIndReporte.Irpttipo).ToList();
                    var listaXTiempo = listaXTipo.Where(x => x.Irpttiempo == regIndReporte.Irpttiempo && x.Irptnumversion < regIndReporte.Irptnumversion).OrderByDescending(x => x.Irptnumversion).ToList();
                    IndReporteDTO regAnterior = listaXTiempo.FirstOrDefault();
                    rptcodi = regAnterior != null ? regAnterior.Irptcodi : -1;

                    break;
            }

            return rptcodi;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="regCuadro"></param>
        /// <param name="irecacodi"></param>
        /// <param name="regNuevo"></param>
        /// <returns></returns>
        public int GetNumeroVersionActual(IndCuadroDTO regCuadro, int irecacodi, IndReporteDTO regNuevo)
        {
            //obtener el numero de version
            List<IndReporteDTO> listaReporteBD = this.GetByCriteriaIndReportes(regCuadro.Icuacodi, irecacodi);
            var listaHist = GetListaReportexFiltroXTipo(regNuevo.Irpttipo, regNuevo.Irpttiempo, regCuadro, listaReporteBD);
            var rptnumversion = listaHist.Any() ? listaHist.Max(x => x.Irptnumversion) + 1 : 1;

            return rptnumversion;
        }

        #region Verificar diferencias entre versiones

        public bool EsVersionCreableCuadro(IndCuadroDTO regCuadro, IndRecalculoDTO regRecalculo, IndReporteDTO rpt, List<IndReporteTotalDTO> listaRptTotMemoria, List<IndReporteDetDTO> listaRptDetMemoria)
        {
            IndReporteDTO regC = GetUltimaVersion(rpt.Icuacodi, rpt.Irecacodi, rpt.Irpttipo, rpt.Irpttiempo);

            //solo verificar si es que la ultima versiones está en estado GENERADO
            if (regC != null && regC.Irptesfinal != ConstantesIndisponibilidades.EsVersionValidado)
            {
                List<IndReporteTotalDTO> listaRptTotBD = new List<IndReporteTotalDTO>();
                List<IndReporteDetDTO> listaRepdetBD = new List<IndReporteDetDTO>();
                switch (regCuadro.Icuacodi)
                {
                    case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                    case ConstantesIndisponibilidades.ReportePR25Cuadro2:
                    case ConstantesIndisponibilidades.ReportePR25Cuadro4:
                    case ConstantesIndisponibilidades.ReportePR25Cuadro7:
                        this.ListaDataXVersionReporte(regC.Irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                        , out listaRptTotBD, out listaRepdetBD
                        , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral);
                        break;

                    case ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK:
                    case ConstantesIndisponibilidades.ReportePR25Cuadro5:
                        this.ListaDataXVersionReporte(regC.Irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                            , out listaRptTotBD, out listaRepdetBD
                            , out List<SiEmpresaDTO> listaEmpresa3, out List<EqEquipoDTO> listaCentral3);
                        break;
                }

                //comparar bd con memory
                var regCambio1 = ExisteDiferenciaListaDataTotIndisp(regCuadro.Icuacodi, 1, listaRptTotBD, listaRptTotMemoria);
                if (regCambio1.TieneCambio)
                    return true;

                //comparar memory con bd
                var regCambio2 = ExisteDiferenciaListaDataTotIndisp(regCuadro.Icuacodi, 2, listaRptTotMemoria, listaRptTotBD);
                if (regCambio2.TieneCambio)
                    return true;

                //comparar det (adentro estan los dos tipos de cambios)
                var regCambio3 = ExisteDiferenciaSubListaDataDetIndisp(regCuadro.Icuacodi, listaRepdetBD, listaRptDetMemoria);
                if (regCambio3.TieneCambio)
                    return true;

                return false;
            }
            else
            {
                return true;//no existe bd o la ultima version esta VALIDADA
            }
        }

        public bool EsVersionCreableMensualCuadro(IndCuadroDTO regCuadro, IndRecalculoDTO regRecalculo, IndReporteDTO rpt
                                , List<IndReporteTotalDTO> listaRptTotMemoria, List<IndReporteDetDTO> listaRptDetMemoria)
        {
            IndReporteDTO regC = GetUltimaVersion(rpt.Icuacodi, rpt.Irecacodi, rpt.Irpttipo, rpt.Irpttiempo);
            if (regC != null)
            {
                List<IndReporteTotalDTO> listaRptTotBD = new List<IndReporteTotalDTO>();
                List<IndReporteDetDTO> listaRepdetBD = new List<IndReporteDetDTO>();

                this.ListaDataXVersionReporte(regC.Irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                    , out listaRptTotBD, out listaRepdetBD
                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral);

                //comparar bd con memory
                var regCambio1 = ExisteDiferenciaListaDataTotIndisp(regCuadro.Icuacodi, 1, listaRptTotBD, listaRptTotMemoria);
                if (regCambio1.TieneCambio)
                    return true;

                //comparar memory con bd
                var regCambio2 = ExisteDiferenciaListaDataTotIndisp(regCuadro.Icuacodi, 2, listaRptTotMemoria, listaRptTotBD);
                if (regCambio2.TieneCambio)
                    return true;

                //comparar det (adentro estan los dos tipos de cambios)
                var regCambio3 = ExisteDiferenciaSubListaDataDetIndisp(regCuadro.Icuacodi, listaRepdetBD, listaRptDetMemoria);
                if (regCambio3.TieneCambio)
                    return true;

                return false;
            }
            else
            {
                return true;//no existe bd
            }
        }

        public bool EsVersionCreableMensualCuadroRelacion(IndCuadroDTO regCuadro, IndRecalculoDTO regRecalculo, IndReporteDTO rpt
                                    , List<IndReporteTotalDTO> listaRptTotMemoria, List<IndReporteDetDTO> listaRptDetMemoria, List<IndRelacionRptDTO> listaRelRptMemoria)
        {
            IndReporteDTO regC = GetUltimaVersion(rpt.Icuacodi, rpt.Irecacodi, rpt.Irpttipo, rpt.Irpttiempo);
            if (regC != null && regC.Irptesfinal != ConstantesIndisponibilidades.EsVersionValidado)
            {
                List<IndReporteTotalDTO> listaRptTotBD = GetByCriteriaIndReporteTotals(regC.Irptcodi); //cabecera
                List<IndRelacionRptDTO> listaRelBD = GetByCriteriaIndRelacionRpts(regC.Irptcodi); //detalle
                List<IndReporteDetDTO> listaRepdetBD = GetByCriteriaIndReporteDets(regC.Irptcodi);

                //comparar bd con memory
                var regCambio1 = ExisteDiferenciaListaDataTotIndisp(regCuadro.Icuacodi, 1, listaRptTotBD, listaRptTotMemoria);
                if (regCambio1.TieneCambio)
                    return true;

                //comparar memory con bd
                var regCambio2 = ExisteDiferenciaListaDataTotIndisp(regCuadro.Icuacodi, 2, listaRptTotMemoria, listaRptTotBD);
                if (regCambio2.TieneCambio)
                    return true;

                //comparar rel
                var regCambio3 = ExisteDiferenciaListaDataRelIndisp(regCuadro.Icuacodi, 1, listaRelBD, listaRelRptMemoria);
                if (regCambio3.TieneCambio)
                    return true;

                //comparar rel
                var regCambio4 = ExisteDiferenciaListaDataRelIndisp(regCuadro.Icuacodi, 2, listaRelRptMemoria, listaRelBD);
                if (regCambio4.TieneCambio)
                    return true;

                //comparar det (adentro estan los dos tipos de cambios)
                var regCambio5 = ExisteDiferenciaSubListaDataDetIndisp(regCuadro.Icuacodi, listaRepdetBD, listaRptDetMemoria);
                if (regCambio5.TieneCambio)
                    return true;

                return false;
            }
            else
            {
                return true;//no existe bd
            }
        }

        private RegistroCambioPR25 ExisteDiferenciaListaDataTotIndisp(int icuacodi, int tipoComparacion, List<IndReporteTotalDTO> listaRptTotBD, List<IndReporteTotalDTO> listaRptTotMemoria)
        {
            bool esC1 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro1;
            bool esC2 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro2;
            bool esC3 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK;
            bool esC4 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro4;
            bool esC5 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro5;
            bool esC7 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro7;
            bool esHistTermo = icuacodi == ConstantesIndisponibilidades.ReportePR25HistoricoTermo;
            bool esHistHidro = icuacodi == ConstantesIndisponibilidades.ReportePR25HistoricoHidro;
            bool esFortTermo = icuacodi == ConstantesIndisponibilidades.ReportePR25FactorFortTermico;
            bool esProgTermo = icuacodi == ConstantesIndisponibilidades.ReportePR25FactorProgTermico;
            bool esProgHidro = icuacodi == ConstantesIndisponibilidades.ReportePR25FactorProgHidro;
            bool esFP = icuacodi == ConstantesIndisponibilidades.ReportePR25FactorPresencia;

            foreach (var reg1 in listaRptTotBD)
            {
                //Cuadro 2
                if (esC2)
                {
                    #region

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotminif.GetValueOrDefault(0), 5);
                        decimal valor2 = Math.Round(reg1.Itotminif.GetValueOrDefault(0), 5);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminif" };

                        decimal valor3 = Math.Round(reg2.Itotminip.GetValueOrDefault(0), 5);
                        decimal valor4 = Math.Round(reg1.Itotminip.GetValueOrDefault(0), 5);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminip" };

                        decimal valor5 = Math.Round(reg2.Itotminifparcial.GetValueOrDefault(0), 5);
                        decimal valor6 = Math.Round(reg1.Itotminifparcial.GetValueOrDefault(0), 5);
                        if (valor5 != valor6)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminifparcial" };

                        decimal valor7 = Math.Round(reg2.Itotminipparcial.GetValueOrDefault(0), 5);
                        decimal valor8 = Math.Round(reg1.Itotminipparcial.GetValueOrDefault(0), 5);
                        if (valor7 != valor8)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminipparcial" };

                        decimal valor9 = Math.Round(reg2.Itotpe.GetValueOrDefault(0), 5);
                        decimal valor10 = Math.Round(reg1.Itotpe.GetValueOrDefault(0), 5);
                        if (valor9 != valor10)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotpe" };

                        decimal valor13 = Math.Round(reg2.Itotfactork.GetValueOrDefault(0), 5);
                        decimal valor14 = Math.Round(reg1.Itotfactork.GetValueOrDefault(0), 5);
                        if (valor13 != valor14)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotfactork" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Cuadro 1 o es Historico Termo
                if (esC1 || esHistTermo)
                {
                    #region

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotminif.GetValueOrDefault(0), 5);
                        decimal valor2 = Math.Round(reg1.Itotminif.GetValueOrDefault(0), 5);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminif" };

                        decimal valor3 = Math.Round(reg2.Itotminip.GetValueOrDefault(0), 5);
                        decimal valor4 = Math.Round(reg1.Itotminip.GetValueOrDefault(0), 5);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminip" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Cuadro 4
                if (esC4)
                {
                    #region 

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotminif.GetValueOrDefault(0), 5);
                        decimal valor2 = Math.Round(reg1.Itotminif.GetValueOrDefault(0), 5);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminif" };

                        decimal valor3 = Math.Round(reg2.Itotminip.GetValueOrDefault(0), 5);
                        decimal valor4 = Math.Round(reg1.Itotminip.GetValueOrDefault(0), 5);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminip" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Cuadro 4
                if (esHistHidro)
                {
                    #region 

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        decimal valor3 = Math.Round(reg2.Itotminip.GetValueOrDefault(0), 5);
                        decimal valor4 = Math.Round(reg1.Itotminip.GetValueOrDefault(0), 5);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminip" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Cuadro 3
                if (esC3)
                {
                    #region 

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotpe.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxApp);
                        decimal valor2 = Math.Round(reg1.Itotpe.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxApp);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotpe" };

                        decimal valor5 = Math.Round(reg2.Itotfactork.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxApp);
                        decimal valor6 = Math.Round(reg1.Itotfactork.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxApp);
                        if (valor5 != valor6)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotfactork" };

                        string sValor3 = (reg2.Itotdescadic ?? "").Trim().ToUpper();
                        string sValor4 = (reg1.Itotdescadic ?? "").Trim().ToUpper();
                        if (sValor3 != sValor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotdescadic" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Cuadro 5
                if (esC5)
                {
                    #region 

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotpe.GetValueOrDefault(0), 5);
                        decimal valor2 = Math.Round(reg1.Itotpe.GetValueOrDefault(0), 5);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotpe" };

                        int valor7 = reg2.Grupocodi.GetValueOrDefault(0);
                        int valor8 = reg1.Grupocodi.GetValueOrDefault(0);
                        if (valor7 != valor8)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Grupocodi" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Cuadro 7
                if (esC7)
                {
                    #region

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotminif.GetValueOrDefault(0), 5);
                        decimal valor2 = Math.Round(reg1.Itotminif.GetValueOrDefault(0), 5);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminif" };

                        decimal valor3 = Math.Round(reg2.Itotminip.GetValueOrDefault(0), 5);
                        decimal valor4 = Math.Round(reg1.Itotminip.GetValueOrDefault(0), 5);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminip" };

                        decimal valor5 = Math.Round(reg2.Itotnumho.GetValueOrDefault(0), 5);
                        decimal valor6 = Math.Round(reg1.Itotnumho.GetValueOrDefault(0), 5);
                        if (valor5 != valor6)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotnumho" };

                        int valor7 = reg2.Itotnumarranq.GetValueOrDefault(0);
                        int valor8 = reg1.Itotnumarranq.GetValueOrDefault(0);
                        if (valor7 != valor8)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotnumarranq" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };

                        int valor9 = reg2.Emprcodi;
                        int valor10 = reg1.Emprcodi;
                        if (valor9 != valor10)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Emprcodi" };

                        int valor11 = reg2.Equipadre;
                        int valor12 = reg1.Equipadre;
                        if (valor9 != valor10)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Equipadre" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //FORTUITO mensual termico
                if (esFortTermo)
                {
                    #region 

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotminif.GetValueOrDefault(0), 5);
                        decimal valor2 = Math.Round(reg1.Itotminif.GetValueOrDefault(0), 5);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotminif" };

                        decimal valor3 = Math.Round(reg2.Itotfactorif.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        decimal valor4 = Math.Round(reg1.Itotfactorif.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotfactorif" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Programado termico
                if (esProgTermo)
                {
                    #region 

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotfactoripm.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        decimal valor2 = Math.Round(reg1.Itotfactoripm.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotfactoripm" };

                        decimal valor3 = Math.Round(reg2.Itotfactoripa.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        decimal valor4 = Math.Round(reg1.Itotfactoripa.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotfactoripa" };

                        string sValor3 = (reg2.Itotcr ?? "").Trim().ToUpper();
                        string sValor4 = (reg1.Itotcr ?? "").Trim().ToUpper();
                        if (sValor3 != sValor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotcr" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Programado hidrico
                if (esProgHidro)
                {
                    #region 

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Itotfactoripm.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        decimal valor2 = Math.Round(reg1.Itotfactoripm.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotfactoripm" };

                        decimal valor3 = Math.Round(reg2.Itotfactoripa.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        decimal valor4 = Math.Round(reg1.Itotfactoripa.GetValueOrDefault(0), ConstantesIndisponibilidades.NumeroDecimalesMaxPorcApp);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotfactoripa" };

                        string sValor3 = (reg2.Itotcr ?? "").Trim().ToUpper();
                        string sValor4 = (reg1.Itotcr ?? "").Trim().ToUpper();
                        if (sValor3 != sValor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotcr" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }

                //Factor presencia
                if (esFP)
                {
                    #region

                    var reg2 = listaRptTotMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Itotopcom == reg1.Itotopcom);
                    if (reg2 != null)
                    {
                        int valor1 = reg2.Itotinddiasxmes.GetValueOrDefault(0);
                        int valor2 = reg1.Itotinddiasxmes.GetValueOrDefault(0);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotinddiasxmes" };

                        decimal valor3 = Math.Round(reg2.Itotfactorpresm.GetValueOrDefault(0), 5);
                        decimal valor4 = Math.Round(reg1.Itotfactorpresm.GetValueOrDefault(0), 5);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotfactorpresm" };

                        string sValor3 = (reg2.Itotindmas15d ?? "").Trim().ToUpper();
                        string sValor4 = (reg1.Itotindmas15d ?? "").Trim().ToUpper();
                        if (sValor3 != sValor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotindmas15d" };

                        string sValor1 = (reg2.Itotunidadnomb ?? "").Trim().ToUpper();
                        string sValor2 = (reg1.Itotunidadnomb ?? "").Trim().ToUpper();
                        if (sValor1 != sValor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2, Campo = "Itotunidadnomb" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegTot1 = reg1, RegTot2 = reg2 };
                    }

                    #endregion
                }
            }

            return new RegistroCambioPR25() { TieneCambio = false, };
        }

        private RegistroCambioPR25 ExisteDiferenciaSubListaDataDetIndisp(int icuacodi, List<IndReporteDetDTO> listaRepdetBD, List<IndReporteDetDTO> listaRptDetMemoria)
        {
            switch (icuacodi)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                case ConstantesIndisponibilidades.ReportePR25Cuadro2:
                case ConstantesIndisponibilidades.ReportePR25Cuadro4:
                case ConstantesIndisponibilidades.ReportePR25Cuadro7:
                    bool esC7 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro7;

                    List<string> listaIndisp = new List<string>();
                    if (icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro1
                        || icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro4
                        || icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro7) listaIndisp = new List<string>() { ConstantesIndisponibilidades.INDFortuitaTotal, ConstantesIndisponibilidades.INDProgramadaTotal };
                    if (icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro2) listaIndisp = new List<string>() { ConstantesIndisponibilidades.INDFortuitaParcial, ConstantesIndisponibilidades.INDProgramadaParcial };

                    for (var i = 0; i < listaIndisp.Count; i++)
                    {
                        string flagIndisp = listaIndisp[i];

                        var subListaRptDetMemoria = listaRptDetMemoria.Where(x => x.Idettipoindisp == flagIndisp).ToList();
                        var subListaRepdetBD = listaRepdetBD.Where(x => x.Idettipoindisp == flagIndisp).ToList();

                        if (subListaRptDetMemoria.Any())
                        {
                            var listaReptotOut = listaRptDetMemoria.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => new IndReporteTotalDTO() { Equicodi = x.Key.Equicodi, Grupocodi = x.Key.Grupocodi }).ToList();
                            var fechaIni = listaRptDetMemoria.Min(x => x.Idethoraini.Value.Date);
                            var fechaFin = listaRptDetMemoria.Max(x => x.Idethoraini.Value.Date);
                            SetearDescripcionXIndisp(flagIndisp, false, listaReptotOut, ref subListaRptDetMemoria, fechaIni, fechaFin, new List<EveManttoDTO>(), new List<IndReporteDetDTO>());
                        }

                        if (subListaRepdetBD.Any())
                        {
                            var listaReptotOut = listaRepdetBD.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => new IndReporteTotalDTO() { Equicodi = x.Key.Equicodi, Grupocodi = x.Key.Grupocodi }).ToList();
                            var fechaIni = listaRepdetBD.Min(x => x.Idethoraini.Value.Date);
                            var fechaFin = listaRepdetBD.Max(x => x.Idethoraini.Value.Date);
                            SetearDescripcionXIndisp(flagIndisp, false, listaReptotOut, ref subListaRepdetBD, fechaIni, fechaFin, new List<EveManttoDTO>(), new List<IndReporteDetDTO>());
                        }

                        //comparar bd con memory
                        var regCambio1 = ExisteDiferenciaListaDataDetIndisp(icuacodi, 1, subListaRepdetBD, subListaRptDetMemoria);
                        if (regCambio1.TieneCambio)
                            return regCambio1;

                        //comparar memory con bd
                        var regCambio2 = ExisteDiferenciaListaDataDetIndisp(icuacodi, 2, subListaRptDetMemoria, subListaRepdetBD);
                        if (regCambio2.TieneCambio)
                            return regCambio2;

                    }

                    //caso especial del cuadro 7, además de validar las indisponibilidades programados / ejecutados (for de linea arriba), también se valida el detalle de horas de operación
                    if (esC7)
                    {
                        var existeFlagIndisp = listaRptDetMemoria.Any(x => !string.IsNullOrEmpty(x.Idettipoindisp));
                        if (!existeFlagIndisp)
                        {
                            //comparar bd con memory
                            var regCambio30 = ExisteDiferenciaListaDataDetIndisp(icuacodi, 1, listaRepdetBD, listaRptDetMemoria, true);
                            if (regCambio30.TieneCambio)
                                return regCambio30;

                            //comparar memory con bd
                            var regCambio40 = ExisteDiferenciaListaDataDetIndisp(icuacodi, 2, listaRptDetMemoria, listaRepdetBD, true);
                            if (regCambio40.TieneCambio)
                                return regCambio40;
                        }
                    }

                    break;

                case ConstantesIndisponibilidades.ReportePR25Cuadro5:
                case ConstantesIndisponibilidades.ReportePR25FactorProgHidro:
                case ConstantesIndisponibilidades.ReportePR25FactorFortTermico:
                case ConstantesIndisponibilidades.ReportePR25FactorProgTermico:

                    //comparar bd con memory
                    var regCambio3 = ExisteDiferenciaListaDataDetIndisp(icuacodi, 1, listaRepdetBD, listaRptDetMemoria);
                    if (regCambio3.TieneCambio)
                        return regCambio3;

                    //comparar memory con bd
                    var regCambio4 = ExisteDiferenciaListaDataDetIndisp(icuacodi, 2, listaRptDetMemoria, listaRepdetBD);
                    if (regCambio4.TieneCambio)
                        return regCambio4;

                    break;
            }

            return new RegistroCambioPR25() { TieneCambio = false, };
        }

        private RegistroCambioPR25 ExisteDiferenciaListaDataDetIndisp(int icuacodi, int tipoComparacion, List<IndReporteDetDTO> subListaRepdetBD, List<IndReporteDetDTO> subListaRptDetMemoria, bool esC7especial = false)
        {
            bool esC1 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro1;
            bool esC2 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro2;
            bool esC4 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro4;
            bool esC5 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro5;
            bool esC7 = icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro7;
            bool esProgHidro = icuacodi == ConstantesIndisponibilidades.ReportePR25FactorProgHidro;
            bool esFortTermo = icuacodi == ConstantesIndisponibilidades.ReportePR25FactorFortTermico;
            bool esProgTermo = icuacodi == ConstantesIndisponibilidades.ReportePR25FactorProgTermico;

            foreach (var reg1 in subListaRepdetBD)
            {
                //Cuadro 1
                if (esC1)
                {
                    #region

                    var reg2 = subListaRptDetMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi
                                                    && x.Idethoraini == reg1.Idethoraini && x.Idethorafin == reg1.Idethorafin && x.Idetopcom == reg1.Idetopcom && x.NumEje == reg1.NumEje);
                    if (reg2 != null)
                    {
                        int valor1 = reg2.Idetmin.GetValueOrDefault(0);
                        int valor2 = reg1.Idetmin.GetValueOrDefault(0);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetmin" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, };
                    }

                    #endregion
                }

                //Cuadro 2
                if (esC2)
                {
                    #region

                    var reg2 = subListaRptDetMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi
                                                    && x.Idethoraini == reg1.Idethoraini && x.Idethorafin == reg1.Idethorafin && x.Idetopcom == reg1.Idetopcom && x.NumEje == reg1.NumEje);
                    if (reg2 != null)
                    {
                        int valor1 = reg2.Idetmin.GetValueOrDefault(0);
                        int valor2 = reg1.Idetmin.GetValueOrDefault(0);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetmin" };

                        decimal valor3 = Math.Round(reg2.Idetpr.GetValueOrDefault(0), 5);
                        decimal valor4 = Math.Round(reg1.Idetpr.GetValueOrDefault(0), 5);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetpr" };

                        decimal valor5 = Math.Round(reg2.Idetminparcial.GetValueOrDefault(0), 5);
                        decimal valor6 = Math.Round(reg1.Idetminparcial.GetValueOrDefault(0), 5);
                        if (valor5 != valor6)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetminparcial" };

                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, };
                    }

                    #endregion
                }

                //Cuadro 4 o Cuadro 7
                if (esC4 || esC7)
                {
                    #region

                    var reg2 = subListaRptDetMemoria.Find(x => x.Equicodi == reg1.Equicodi
                                                    && x.Idethoraini == reg1.Idethoraini && x.Idethorafin == reg1.Idethorafin && x.Idetopcom == reg1.Idetopcom && x.NumEje == reg1.NumEje);
                    if (reg2 != null)
                    {
                        int valor1 = reg2.Idetmin.GetValueOrDefault(0);
                        int valor2 = reg1.Idetmin.GetValueOrDefault(0);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetmin" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, };
                    }

                    #endregion
                }

                //cuadro 7
                if (esC7especial)
                {
                    #region

                    var reg2 = subListaRptDetMemoria.Find(x => x.Equicodi == reg1.Equicodi);
                    if (reg2 != null)
                    {
                        decimal valor1 = Math.Round(reg2.Idetminif.GetValueOrDefault(0), 5);
                        decimal valor2 = Math.Round(reg1.Idetminif.GetValueOrDefault(0), 5);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetminif" };

                        decimal valor3 = Math.Round(reg2.Idetminip.GetValueOrDefault(0), 5);
                        decimal valor4 = Math.Round(reg1.Idetminip.GetValueOrDefault(0), 5);
                        if (valor3 != valor4)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetminip" };

                        decimal valor5 = Math.Round(reg2.Idetnumho.GetValueOrDefault(0), 5);
                        decimal valor6 = Math.Round(reg1.Idetnumho.GetValueOrDefault(0), 5);
                        if (valor5 != valor6)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetnumho" };

                        int valor7 = reg2.Idetnumarranq.GetValueOrDefault(0);
                        int valor8 = reg1.Idetnumarranq.GetValueOrDefault(0);
                        if (valor7 != valor8)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetnumarranq" };

                        int valor9 = reg2.Emprcodi;
                        int valor10 = reg1.Emprcodi;
                        if (valor9 != valor10)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Emprcodi" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, };
                    }

                    #endregion
                }

                //Cuadro 5
                if (esC5)
                {
                    #region

                    var reg2 = subListaRptDetMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi
                                                    && x.Idethoraini == reg1.Idethoraini);
                    if (reg2 != null)
                    {
                        int? valor1 = reg2.Idettienedisp;
                        int? valor2 = reg1.Idettienedisp;
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idettienedisp" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, };
                    }

                    #endregion
                }

                //Factor Fort Termico
                if (esFortTermo)
                {
                    #region

                    var reg2 = subListaRptDetMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi
                                                    && x.Idethoraini == reg1.Idethoraini && x.Idethorafin == reg1.Idethorafin && x.Idetopcom == reg1.Idetopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = reg2.Idetminif.GetValueOrDefault(0);
                        decimal valor2 = reg1.Idetminif.GetValueOrDefault(0);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetminif" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, };
                    }

                    #endregion
                }

                //Factor Prog Termico
                if (esProgTermo)
                {
                    #region

                    var reg2 = subListaRptDetMemoria.Find(x => x.Equicodi == reg1.Equicodi && x.Grupocodi == reg1.Grupocodi
                                                    && x.Idethoraini == reg1.Idethoraini && x.Idethorafin == reg1.Idethorafin && x.Idetopcom == reg1.Idetopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = reg2.Idetminip.GetValueOrDefault(0);
                        decimal valor2 = reg1.Idetminip.GetValueOrDefault(0);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetminip" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, };
                    }

                    #endregion
                }

                //Factor Prog Hidro
                if (esProgTermo)
                {
                    #region

                    var reg2 = subListaRptDetMemoria.Find(x => x.Equicodi == reg1.Equicodi
                                                    && x.Idethoraini == reg1.Idethoraini && x.Idethorafin == reg1.Idethorafin && x.Idetopcom == reg1.Idetopcom);
                    if (reg2 != null)
                    {
                        decimal valor1 = reg2.Idetminip.GetValueOrDefault(0);
                        decimal valor2 = reg1.Idetminip.GetValueOrDefault(0);
                        if (valor1 != valor2)
                            return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, Campo = "Idetminip" };
                    }
                    else
                    {
                        return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegDet1 = reg1, RegDet2 = reg2, };
                    }

                    #endregion
                }
            }

            return new RegistroCambioPR25() { TieneCambio = false, TipoComparacion = tipoComparacion, };
        }

        private RegistroCambioPR25 ExisteDiferenciaListaDataRelIndisp(int icuacodi, int tipoComparacion, List<IndRelacionRptDTO> listaRelRptBD, List<IndRelacionRptDTO> listaRelRptMemoria)
        {
            foreach (var reg1 in listaRelRptBD)
            {
                var reg2 = listaRelRptMemoria.Find(x => x.Irelpridsec == reg1.Irelpridsec);
                if (reg2 != null)
                {

                }
                else
                {
                    return new RegistroCambioPR25() { TieneCambio = true, TipoComparacion = tipoComparacion, RegRel1 = reg1, RegRel2 = reg2, };
                }
            }

            return new RegistroCambioPR25() { TieneCambio = false, TipoComparacion = tipoComparacion, };
        }

        #endregion

        #endregion

        #region Cuadro 1, Cuadro 4

        /// <summary>
        /// Logica de programación para los cuadros 1, 4
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="irecacodi"></param>
        /// <param name="tiempo"></param>
        /// <param name="medicionorigen"></param>
        /// <param name="famcodi"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int ProcesarCuadro(int cuadro, int irecacodi, string tiempo, int famcodi, string usuario)
        {
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            List<IndReporteDetDTO> listaConservarValor = this.ListConservarValorByPeriodoCuadro(cuadro, regRecalculo.Ipericodi);

            this.ListarDataInicialPR25(regCuadro.Icuacodi, regRecalculo.Irecafechaini.AddDays(-7), regRecalculo.Irecafechafin, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, famcodi
                                        , out List<EqEquipoDTO> listaUnidadSiOpComercial, out List<EqEquipoDTO> listaUnidadNoOpComercial
                                        , out List<EqEquipoDTO> listaEqSiOpComercial, out List<EqEquipoDTO> listaEqNoOpComercial
                                        , out List<EveManttoDTO> listaManttoSiOpCom, out List<EveManttoDTO> listaManttoNoOpCom, out List<IndInsumoLogDTO> listaLogInsumo, out List<ResultadoValidacionAplicativo> listaMsj);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            //datos de entrada
            this.ListarModoOperacionPe(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

            var listaEqCentral = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            var listaEqGenerador = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            listaGrupoModo = SetearEquiposToModoOperacion(listaGrupoModo, listaGrupo, listaEqCentral, listaEqGenerador);

            List<IndReporteDetDTO> listaRptDet = new List<IndReporteDetDTO>();
            List<IndReporteTotalDTO> listaRptTot = new List<IndReporteTotalDTO>();

            for (int i = 0; i < 2; i++)
            {
                string enOpComercial = i == 0 ? ConstantesAppServicio.SI : ConstantesAppServicio.NO;
                int tipoUnificar = i == 0 ? ConstantesIndisponibilidades.TipoUnificarXUnidad : ConstantesIndisponibilidades.TipoUnificarXGenerador;
                List<EveManttoDTO> listaManttoBd = i == 0 ? listaManttoSiOpCom : listaManttoNoOpCom;
                List<EqEquipoDTO> listaUnidad = i == 0 ? listaUnidadSiOpComercial : listaUnidadNoOpComercial;
                List<EqEquipoDTO> listaEquipo = i == 0 ? listaEqSiOpComercial : listaEqNoOpComercial;

                this.ListarManttoAppPR25(regCuadro.Icuacodi, tipoUnificar, famcodi, listaEquipo, listaUnidad, listaGrupoModo, listaManttoBd, out List<EveManttoDTO> listmantto, out List<ReiniciarRegla7D> listaReinicio);

                this.ListarManttoIndispPR25(regCuadro.Icuacodi, listaUnidad, listmantto, listaReinicio, tiempo, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaBloqueHorario, out List<EveManttoDTO> listaIndisp, out List<EveManttoDTO> listaRangoIndispRegla7Dias);

                this.AsignarValorGrupoXCuadro(regCuadro.Icuacodi, ref listaIndisp, listaUnidad);

                List<IndReporteDetDTO> listaRptDetXInt = this.GenerarDetalleCuadro(cuadro, listaIndisp, listaRangoIndispRegla7Dias, enOpComercial);
                List<IndReporteDetDTO> listaRptDetXIntIncremental = this.AgregarDetalleCuadroIncremental(cuadro, listaUnidad, listaRptDetXInt);
                listaRptDetXInt.AddRange(listaRptDetXIntIncremental);

                List<IndReporteTotalDTO> listaRptTotXInt = this.GenerarTotal(listaRptTot.Count + 1, ref listaRptDetXInt, listaUnidad, cuadro, famcodi, enOpComercial);

                listaRptDet.AddRange(listaRptDetXInt);
                listaRptTot.AddRange(listaRptTotXInt);
            }

            foreach (var cuadroX in listaRptDet)
            {
                IndReporteDetDTO entity = listaConservarValor.Where(x => x.Idetdia == cuadroX.Idetdia && x.Idettipoindisp == cuadroX.Idettipoindisp
                                                                         && x.Grupocodi == cuadroX.Grupocodi && x.Emprcodi == cuadroX.Emprcodi
                                                                         && x.Equipadre == cuadroX.Equipadre && x.Equicodi == cuadroX.Equicodi
                                                                         && x.Idetopcom == cuadroX.Idetopcom).FirstOrDefault();
                if (entity != null)
                {
                    cuadroX.Idetpr = entity.Idetpr;
                    cuadroX.Idetminparcial = entity.Idetminparcial;
                    cuadroX.Idethorafin = entity.Idethorafin;
                    cuadroX.Idethoraini = entity.Idethoraini;
                    cuadroX.Idetjustf = entity.Idetjustf;
                    cuadroX.Idetconsval = entity.Idetconsval;
                    cuadroX.Idetmin = entity.Idetmin;
                }
            }

            //Guardar
            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = tiempo,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            if (EsVersionCreableCuadro(regCuadro, regRecalculo, regReporte, listaRptTot, listaRptDet))
            {
                CambiarAEstadoHistorico(cuadro, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                //guardar en BD
                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaRptTot;
                regSaveBD.ListaRptDet = listaRptDet;
                regSaveBD.ListaLogInsumo = listaLogInsumo;

                int irptcodi = this.GuardarReporteIndispBDTransaccional(regSaveBD);
                return irptcodi;
            }

            return 0;
        }

        #region Cálculo

        /// <summary>
        /// Guardado transaccional de Reporte de Indisponiblidad 
        /// </summary>
        /// <param name="reg"></param>
        /// <param name="listaRptTot"></param>
        /// <param name="listaRptDet"></param>
        /// <param name="listaLogInsumo"></param>
        /// <returns></returns>
        public int GuardarReporteIndispBDTransaccional(ReporteInsumoPR25 reg)
        {
            IDbConnection conn = null;
            DbTransaction tran = null;
            int irptcodi = 0;
            try
            {
                conn = FactorySic.GetSiMigracionRepository().BeginConnection();
                tran = FactorySic.GetSiMigracionRepository().StartTransaction(conn);

                irptcodi = this.SaveIndReporte(reg.Reporte, conn, tran);

                int maxIrptfccodi = 0;
                int maxIrpinscodi = 0;
                int maxIrpcalcodi = 0;
                int maxIdItotcodi = FactorySic.GetIndReporteTotalRepository().GetMaxId();
                foreach (var regTotal in reg.ListaRptTot)
                {
                    var subListaDet = reg.ListaRptDet.Where(x => x.Itotcodi == regTotal.Itotcodi).ToList();

                    //guardar bd
                    regTotal.Itotcodi = maxIdItotcodi;
                    regTotal.Irptcodi = irptcodi;
                    this.SaveIndReporteTotal(regTotal, conn, tran);

                    foreach (var regDet in subListaDet)
                        regDet.Itotcodi = regTotal.Itotcodi;

                    #region Guarda IndReporteFC, IndReporteInsumos y IndReporteCalculos
                    //INICIO: IND.PR25.2022
                    bool existListIndReporteFC = (regTotal.ListIndReporteFC != null && regTotal.ListIndReporteFC.Count > 0);
                    if (existListIndReporteFC)
                    {
                        foreach (IndReporteFCDTO indReporteFC in regTotal.ListIndReporteFC)
                        {
                            maxIrptfccodi = (maxIrptfccodi == 0) ? FactorySic.GetIndReporteFCRepository().GetMaxId() : maxIrptfccodi + 1;
                            indReporteFC.Irptfccodi = maxIrptfccodi;
                            indReporteFC.Itotcodi = maxIdItotcodi;
                            indReporteFC.Irptfcusucreacion = reg.Reporte.Irptusucreacion;
                            indReporteFC.Irptfcfeccreacion = reg.Reporte.Irptfeccreacion;
                            FactorySic.GetIndReporteFCRepository().Save(indReporteFC, conn, tran);
                        }
                    }

                    bool existListIndReporteInsumos = (regTotal.ListIndReporteInsumos != null && regTotal.ListIndReporteInsumos.Count > 0);
                    if (existListIndReporteInsumos)
                    {
                        foreach (IndReporteInsumosDTO indReporteInsumos in regTotal.ListIndReporteInsumos)
                        {
                            maxIrpinscodi = (maxIrpinscodi == 0) ? FactorySic.GetIndReporteInsumosRepository().GetMaxId() : maxIrpinscodi + 1;
                            indReporteInsumos.Irpinscodi = maxIrpinscodi;
                            indReporteInsumos.Itotcodi = maxIdItotcodi;
                            indReporteInsumos.Irpinsusucreacion = reg.Reporte.Irptusucreacion;
                            indReporteInsumos.Irpinsfeccreacion = reg.Reporte.Irptfeccreacion;
                            FactorySic.GetIndReporteInsumosRepository().Save(indReporteInsumos, conn, tran);
                        }
                    }

                    bool existListIndReporteCalculos = (regTotal.ListIndReporteCalculos != null && regTotal.ListIndReporteCalculos.Count > 0);
                    if (existListIndReporteCalculos)
                    {
                        foreach (IndReporteCalculosDTO indReporteCalculos in regTotal.ListIndReporteCalculos)
                        {
                            maxIrpcalcodi = (maxIrpcalcodi == 0) ? FactorySic.GetIndReporteCalculosRepository().GetMaxId() : maxIrpcalcodi + 1;
                            indReporteCalculos.Irpcalcodi = maxIrpcalcodi;
                            indReporteCalculos.Itotcodi = maxIdItotcodi;
                            indReporteCalculos.Irpcalusucreacion = reg.Reporte.Irptusucreacion;
                            indReporteCalculos.Irpcalfeccreacion = reg.Reporte.Irptfeccreacion;
                            FactorySic.GetIndReporteCalculosRepository().Save(indReporteCalculos, conn, tran);
                        }
                    }
                    //FIN: IND.PR25.2022
                    #endregion

                    maxIdItotcodi++;
                }

                int maxIdIdetcodi = FactorySic.GetIndReporteDetRepository().GetMaxId();
                foreach (var regDet in reg.ListaRptDet)
                {

                    regDet.Idetcodi = maxIdIdetcodi;

                    if (regDet.Itotcodi == 0)
                    {
                        continue;
                        //regDet.Itotcodi = regDet.Idetcodi;
                    }

                    this.SaveIndReporteDet(regDet, conn, tran);
                    maxIdIdetcodi++;

                }

                int maxIdIlogcodi = FactorySic.GetIndInsumoLogRepository().GetMaxId();
                foreach (var regIns in reg.ListaLogInsumo)
                {
                    regIns.Ilogcodi = maxIdIlogcodi;
                    regIns.Irptcodi = irptcodi;
                    this.SaveIndInsumoLog(regIns, conn, tran);

                    maxIdIlogcodi++;
                }

                int maxIdRelcodi = FactorySic.GetIndRelacionRptRepository().GetMaxId();
                foreach (var regIns in reg.ListaRelRpt)
                {
                    regIns.Irelrpcodi = maxIdRelcodi;
                    regIns.Irelrpidprinc = irptcodi;
                    this.SaveIndRelacionRpt(regIns, conn, tran);

                    maxIdRelcodi++;
                }

                int maxIdCucodi = FactorySic.GetPfDispcalorutilRepository().GetMaxId();
                foreach (var regIns in reg.ListaCalorUtil)
                {
                    regIns.Pfcucodi = maxIdCucodi;
                    regIns.Irptcodi = irptcodi;
                    this.SavePfDispcalorutil(regIns, conn, tran);

                    maxIdCucodi++;
                }

                tran.Commit();
            }
            catch (Exception ex)
            {
                irptcodi = 0;
                if (tran != null)
                    tran.Rollback();
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                    if (conn.State == ConnectionState.Open) conn.Close();
            }

            return irptcodi;
        }

        /// <summary>
        /// Obtiene Listado Ind. Reporte filtro por tipo
        /// </summary>
        /// <param name="regNuevo"></param>
        /// <param name="regCuadro"></param>
        /// <param name="listaReporteBD"></param>
        /// <returns></returns>
        private List<IndReporteDTO> GetListaReportexFiltroXTipo(string rpttipo, string rpttiempo, IndCuadroDTO regCuadro, List<IndReporteDTO> listaReporteBD)
        {
            if (regCuadro.TieneDivisionTablaXTipo)
            {
                var listaXTipo = listaReporteBD.Where(x => x.Irpttipo == rpttipo).ToList();
                return GetListaReportexFiltroXTiempo(rpttiempo, regCuadro, listaXTipo);
            }
            else
            {
                return GetListaReportexFiltroXTiempo(rpttiempo, regCuadro, listaReporteBD);
            }
        }

        /// <summary>
        /// Obtiene Listado Ind. Reporte filtro por tiempo
        /// </summary>
        /// <param name="regNuevo"></param>
        /// <param name="regCuadro"></param>
        /// <param name="listaReporteBD"></param>
        /// <returns></returns>
        private List<IndReporteDTO> GetListaReportexFiltroXTiempo(string rpttiempo, IndCuadroDTO regCuadro, List<IndReporteDTO> listaReporteBD)
        {
            if (regCuadro.TieneDivisionTablaXTiempo)
            {
                var listaXTiempo = listaReporteBD.Where(x => x.Irpttiempo == rpttiempo).ToList();
                return listaXTiempo;
            }
            else
            {
                return listaReporteBD;
            }
        }

        /// <summary>
        /// Obtener Data Inicial para Indisponibilidades PR25 
        /// </summary>
        /// <param name="fechaIniData"></param>
        /// <param name="fechaFinData"></param>
        /// <param name="famcodiCentral"></param>
        /// <param name="listaUnidadSiOpComercial"></param>
        /// <param name="listaUnidadNoOpComercial"></param>
        /// <param name="listaEqSiOpComercial"></param>
        /// <param name="listaEqNoOpComercial"></param>
        /// <param name="listaManttoSiOpCom"></param>
        /// <param name="listaManttoNoOpCom"></param>
        /// <param name="listaLogInsumo"></param>
        public void ListarDataInicialPR25(int cuadro, DateTime fechaIniData, DateTime fechaFinData, DateTime fechaIni, DateTime fechaFin, int famcodiCentral
                                        , out List<EqEquipoDTO> listaUnidadSiOpComercial, out List<EqEquipoDTO> listaUnidadNoOpComercial
                                        , out List<EqEquipoDTO> listaEqSiOpComercial, out List<EqEquipoDTO> listaEqNoOpComercial
                                        , out List<EveManttoDTO> listaManttoSiOpCom, out List<EveManttoDTO> listaManttoNoOpCom
                                        , out List<IndInsumoLogDTO> listaLogInsumo, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            int aplicativo = ConstantesIndisponibilidades.AppPR25;

            listaManttoSiOpCom = new List<EveManttoDTO>();
            listaManttoNoOpCom = new List<EveManttoDTO>();

            listaUnidadSiOpComercial = new List<EqEquipoDTO>(); listaUnidadNoOpComercial = new List<EqEquipoDTO>();
            listaEqSiOpComercial = new List<EqEquipoDTO>(); listaEqNoOpComercial = new List<EqEquipoDTO>();
            listaMsj = new List<ResultadoValidacionAplicativo>();

            switch (cuadro)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                case ConstantesIndisponibilidades.ReportePR25Cuadro2:
                    ListarUnidadTermicoOpComercial(aplicativo, fechaIni, fechaFin, out listaUnidadSiOpComercial, out listaEqSiOpComercial, out List<ResultadoValidacionAplicativo> listaMsj1);
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro4:
                    ListarEqCentralHidraulicoOpComercial(fechaIni, fechaFin, out List<EqEquipoDTO> listaUnidadData, out listaEqSiOpComercial, out List<ResultadoValidacionAplicativo> listaMsj2);
                    listaUnidadSiOpComercial = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList();
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro7:
                    if (famcodiCentral == ConstantesHorasOperacion.IdTipoTermica)
                    {
                        ListarUnidadTermicoOpComercial(aplicativo, fechaIni, fechaFin, out listaUnidadSiOpComercial, out listaEqSiOpComercial, out List<ResultadoValidacionAplicativo> listaMsj3);
                        listaUnidadSiOpComercial = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
                    }
                    if (famcodiCentral == ConstantesHorasOperacion.IdTipoHidraulica)
                    {
                        ListarEqCentralHidraulicoOpComercial(fechaIni, fechaFin, out List<EqEquipoDTO> listaUnidadData7, out listaEqSiOpComercial, out List<ResultadoValidacionAplicativo> listaMsj4);
                        listaUnidadSiOpComercial = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList();
                    }
                    break;
            }
            //Manttos de todo el periodo
            this.ListarInsumoEveMantto(cuadro, fechaIniData, fechaFinData, famcodiCentral, out List<EveManttoDTO> listaAllMantto, out listaLogInsumo, out List<ResultadoValidacionAplicativo> listaMensaje);
            listaMsj.AddRange(listaMensaje);

            //set TTIE
            TitularidadAppServicio servTitEmp = new TitularidadAppServicio();
            //Consulta el histórico de relación entre los equipos y las empresas
            List<SiHisempeqDataDTO> listaHist = servTitEmp.ListSiHisempeqDatas("-1").Where(x => x.Heqdatfecha <= fechaFinData).ToList();

            //Titularidad de Instalaciones de Empresas, para evitar duplicados
            servTitEmp.SetTTIEequipoToEveMantto(listaAllMantto, listaHist);

            //agregar los manttos de equipos que no tuvieron cambios (ingreso/retiro) de operacion comercial
            List<int> listaEquicodiSinCambioOpCom = new List<int>();
            List<EqEquipoDTO> listaUnidTmp1 = listaUnidadSiOpComercial.Where(x => !x.TieneNuevoIngresoOpComercial && !x.TieneNuevoRetiroOpComercial).ToList();
            foreach (var regTmp in listaUnidTmp1)
            {
                List<EqEquipoDTO> listaEqTmp = listaEqSiOpComercial.Where(x => x.Emprcodi == regTmp.Emprcodi && x.Equipadre == regTmp.Equipadre).ToList();
                listaEquicodiSinCambioOpCom.AddRange(listaEqTmp.Select(x => x.Equicodi).ToList());
            }
            listaManttoSiOpCom.AddRange(listaAllMantto.Where(x => listaEquicodiSinCambioOpCom.Contains(x.Equicodi.Value)).ToList());

            //actualizar la lista con los equipos que falta asignar op comercial
            listaAllMantto = listaAllMantto.Where(x => !listaEquicodiSinCambioOpCom.Contains(x.Equicodi.Value)).ToList();

            List<EqEquipoDTO> listaUnidTmp2 = listaUnidadSiOpComercial.Where(x => x.TieneNuevoIngresoOpComercial || x.TieneNuevoRetiroOpComercial).ToList();
            foreach (var regTmp in listaUnidTmp2)
            {
                List<EqEquipoDTO> listaEqTmp = listaEqSiOpComercial.Where(x => x.Emprcodi == regTmp.Emprcodi && x.Equipadre == regTmp.Equipadre).ToList();
                List<int> listaEquicodiTmp = listaEqTmp.Select(x => x.Equicodi).ToList();

                if (regTmp.Equifechiniopcom != null && regTmp.Equifechfinopcom != null && regTmp.Equifechiniopcom < regTmp.Equifechfinopcom)
                {
                    listaManttoSiOpCom.AddRange(listaAllMantto.Where(x => listaEquicodiTmp.Contains(x.Equicodi.Value) && regTmp.Equifechiniopcom <= x.Evenini && x.Evenini < regTmp.Equifechfinopcom).ToList());

                    //actualizar la lista con los equipos que falta asignar op comercial
                    listaAllMantto = listaAllMantto.Where(x => !(listaEquicodiTmp.Contains(x.Equicodi.Value) && regTmp.Equifechiniopcom <= x.Evenini && x.Evenini < regTmp.Equifechfinopcom)).ToList();
                }
                else
                {
                    if (regTmp.Equifechiniopcom != null)
                    {
                        listaManttoSiOpCom.AddRange(listaAllMantto.Where(x => listaEquicodiTmp.Contains(x.Equicodi.Value) && x.Evenini >= regTmp.Equifechiniopcom).ToList());

                        //actualizar la lista con los equipos que falta asignar op comercial
                        listaAllMantto = listaAllMantto.Where(x => !(listaEquicodiTmp.Contains(x.Equicodi.Value) && x.Evenini >= regTmp.Equifechiniopcom)).ToList();
                    }

                    if (regTmp.Equifechfinopcom != null)
                    {
                        listaManttoSiOpCom.AddRange(listaAllMantto.Where(x => listaEquicodiTmp.Contains(x.Equicodi.Value) && x.Evenini < regTmp.Equifechfinopcom).ToList());

                        //actualizar la lista con los equipos que falta asignar op comercial
                        listaAllMantto = listaAllMantto.Where(x => !(listaEquicodiTmp.Contains(x.Equicodi.Value) && x.Evenini < regTmp.Equifechiniopcom)).ToList();
                    }
                }
            }

            listaManttoNoOpCom = listaAllMantto;

            //sin operacion comercial
            List<int> listaEquicodiNoOpCom = new List<int>();
            listaEquicodiNoOpCom.AddRange(listaManttoNoOpCom.Select(x => x.Equicodi ?? 0).ToList());
            listaEquicodiNoOpCom.AddRange(listaManttoNoOpCom.Select(x => x.Equipadre ?? 0).ToList());
            listaEquicodiNoOpCom = listaEquicodiNoOpCom.Where(x => x > 0).Distinct().ToList();

            //unidades sin operacion comercial
            List<EqEquipoDTO> listaEquipo = FactorySic.GetEqEquipoRepository().List().Where(x => x.Equiestado == "A" || x.Equiestado == "P" || x.Equiestado == "F").ToList();
            listaEqNoOpComercial = listaEquipo.Where(x => listaEquicodiNoOpCom.Contains(x.Equicodi) || listaEquicodiNoOpCom.Contains(x.Equipadre ?? 0)).ToList();
            listaEqNoOpComercial = servTitEmp.SetTTIEequipoToEqEquipo(listaEqNoOpComercial, listaHist);

            listaEqNoOpComercial = listaEqNoOpComercial.GroupBy(x => x.Equicodi).Select(x => x.First()).ToList(); //obtener equipos unicos

            switch (cuadro)
            {
                case ConstantesIndisponibilidades.ReportePR25Cuadro1:
                    listaUnidadNoOpComercial = listaEqNoOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro4:
                    listaUnidadNoOpComercial = listaEqNoOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList();
                    break;
                case ConstantesIndisponibilidades.ReportePR25Cuadro7:
                    if (famcodiCentral == ConstantesHorasOperacion.IdTipoTermica)
                    {
                        listaUnidadNoOpComercial = listaEqNoOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
                    }
                    if (famcodiCentral == ConstantesHorasOperacion.IdTipoHidraulica)
                    {
                        listaUnidadNoOpComercial = listaEqNoOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList();
                    }
                    break;
            }

            //solo incluir manttos de equipos validos 
            List<int> lEquiValidoNoOpcom = listaEqNoOpComercial.Select(x => x.Equicodi).Distinct().ToList();
            List<EveManttoDTO> listaManttoNoOpfinal = listaManttoNoOpCom.Where(x => lEquiValidoNoOpcom.Contains(x.Equicodi ?? 0)).ToList();

            //Lista de manttos con equipos de baja o eliminados
            List<EveManttoDTO> listaManttoInvalido = listaManttoNoOpCom.Where(x => !lEquiValidoNoOpcom.Contains(x.Equicodi ?? 0)).ToList();
            foreach (var reg in listaManttoInvalido)
            {
                ResultadoValidacionAplicativo val = new ResultadoValidacionAplicativo()
                {
                    TipoResultado = 2,
                    TipoFuenteDatoDesc = "Mantenimientos",
                    Accion = "Corregir mantto relacionado a equipo eliminado o en baja",
                    Descripcion = GetDescripcionMantto(reg, true)
                };

                listaMsj.Add(val);
            }

            listaManttoNoOpCom = listaManttoNoOpfinal;
        }

        /// <summary>
        /// Listado mantto aplicativo PR25
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="tipoUnificar"></param>
        /// <param name="listaEquiposInput"></param>
        /// <param name="listaUnidadesTermo"></param>
        /// <param name="lista"></param>
        /// <param name="listaManttoFinal"></param>
        public void ListarManttoAppPR25(int cuadro, int tipoUnificar, int famcodi, List<EqEquipoDTO> listaEquiposInput, List<EqEquipoDTO> listaUnidadesTermo, List<PrGrupoDTO> listaModo
                                        , List<EveManttoDTO> lista, out List<EveManttoDTO> listaManttoFinal, out List<ReiniciarRegla7D> listaReinicio)
        {
            //Lista = Lista.Where(x => x.Emprcodi == 11567).ToList(); 
            //List<int> listaEquicodi = new List<int>() { 193, 194, 10609 }; //HUANCHOR
            //List<int> listaEquicodi = new List<int>() { 275, 38 }; //MALACAS 2
            //List<int> listaEquicodi = new List<int>() { 15785, 15680, 16325 }; //CHILCA 2
            //List<int> listaEquicodi = new List<int>() { 12726, 12720 }; //LAS FLORES
            //List<int> listaEquicodi = new List<int>() { 196, 14, 13, 290 }; //CT VENTANILLA
            //List<int> listaEquicodi = new List<int>() { 13657, 18479, 13656 }; //CT OLLEROS
            //lista = lista.Where(x => listaEquicodi.Contains(x.Equicodi ?? 0)).ToList();

            //lista = lista.Where(x => x.Evenini.Value.Date == new DateTime(2021, 2, 4)).ToList();
            //lista = lista.Where(x => x.Equipadre == 11513).ToList(); //chilca 1
            //lista = lista.Where(x => x.Equipadre == 15785).ToList(); //chilca 2
            //listaEquiposInput = listaEquiposInput.Where(x => x.Equipadre == 11513).ToList();
            //listaUnidadesTermo = listaUnidadesTermo.Where(x => x.Equipadre == 11513).ToList();

            listaManttoFinal = new List<EveManttoDTO>();
            listaReinicio = new List<ReiniciarRegla7D>(); //solo se considera el reinicio cuando los flags estan activados en los manttos prog
            if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro1)
            {
                this.ProcesarListaMantto(lista, ConstantesIndisponibilidades.AppPR25, ConstantesIndisponibilidades.ReportePR25Cuadro1, famcodi, listaEquiposInput, listaUnidadesTermo, listaModo, tipoUnificar
                                        , out listaManttoFinal, out listaReinicio, out List<OmitirExcesoPr> listaOmitirPrOut);
            }
            else
            {
                List<EveManttoDTO> lEjec1 = lista.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec).ToList();
                this.ProcesarListaMantto(lEjec1, ConstantesIndisponibilidades.AppPR25, cuadro, famcodi, listaEquiposInput, listaUnidadesTermo, listaModo, tipoUnificar
                                        , out List<EveManttoDTO> lEjec, out List<ReiniciarRegla7D> listaReinicioOut2, out List<OmitirExcesoPr> listaOmitirPrOut2);
                List<EveManttoDTO> lProg1 = lista.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg).ToList();
                this.ProcesarListaMantto(lProg1, ConstantesIndisponibilidades.AppPR25, cuadro, famcodi, listaEquiposInput, listaUnidadesTermo, listaModo, tipoUnificar
                                        , out List<EveManttoDTO> lProg, out listaReinicio, out List<OmitirExcesoPr> listaOmitirPrOut);

                listaManttoFinal.AddRange(lEjec);
                listaManttoFinal.AddRange(lProg);
            }

        }

        /// <summary>
        /// Listado mantto aplicativo PR25
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="tipoUnificar"></param>
        /// <param name="listaEquiposInput"></param>
        /// <param name="listaUnidadesTermo"></param>
        /// <param name="lista"></param>
        /// <param name="listaManttoFinal"></param>
        public void ListarManttoAppPR25Cuadro2(int famcodi, List<EqEquipoDTO> listaEquiposInput, List<EqEquipoDTO> listaUnidadesTermo, List<PrGrupoDTO> listaModo
                                        , List<EveManttoDTO> lista, out List<EveManttoDTO> listaManttoFinal, out List<ReiniciarRegla7D> listaReinicio, out List<OmitirExcesoPr> listaOmitirPr)
        {
            //Lista = Lista.Where(x => x.Emprcodi == 11567).ToList(); 
            //List<int> listaEquicodi = new List<int>() { 193, 194, 10609 }; //HUANCHOR
            //List<int> listaEquicodi = new List<int>() { 275, 38 }; //MALACAS 2
            //List<int> listaEquicodi = new List<int>() { 15785, 15680, 16325 }; //CHILCA 2
            //List<int> listaEquicodi = new List<int>() { 12726, 12720 }; //LAS FLORES
            //List<int> listaEquicodi = new List<int>() { 196, 14, 13, 290 }; //CT VENTANILLA
            //List<int> listaEquicodi = new List<int>() { 13657, 18479, 13656 }; //CT OLLEROS
            //lista = lista.Where(x => listaEquicodi.Contains(x.Equicodi ?? 0)).ToList();

            //lista = lista.Where(x => x.Evenini.Value.Date == new DateTime(2021, 1, 12)).ToList();
            //lista = lista.Where(x => x.Equipadre == 11513).ToList(); //chilca 1
            //lista = lista.Where(x => x.Equipadre == 15785).ToList(); //chilca 2
            //lista = lista.Where(x => x.Equipadre == 11571).ToList(); //kallpa
            //lista = lista.Where(x => x.Equipadre == 14927).ToList(); //eten
            //lista = lista.Where(x => x.Equipadre == 20850).ToList(); //caña brava
            //listaEquiposInput = listaEquiposInput.Where(x => x.Equipadre == 11513).ToList();
            //listaUnidadesTermo = listaUnidadesTermo.Where(x => x.Equipadre == 11513).ToList();

            this.ProcesarListaMantto(lista, ConstantesIndisponibilidades.AppPR25, ConstantesIndisponibilidades.ReportePR25Cuadro2, famcodi, listaEquiposInput, listaUnidadesTermo, listaModo, -1
                                    , out listaManttoFinal, out listaReinicio, out listaOmitirPr);
        }

        /// <summary>
        /// Listado mantto aplicativo PR25 para limitacion de combustible
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="tipoUnificar"></param>
        /// <param name="listaEquiposInput"></param>
        /// <param name="listaUnidadesTermo"></param>
        /// <param name="lista"></param>
        /// <param name="listaManttoFinal"></param>
        public void ListarManttoAppPR25Cuadro2LimComb(int famcodi, List<EqEquipoDTO> listaEquiposInput, List<EqEquipoDTO> listaUnidadesTermo, List<PrGrupoDTO> listaModo
                                            , List<EveManttoDTO> lista, out List<EveManttoDTO> listaManttoFinal)
        {
            this.ProcesarListaMantto(lista, ConstantesIndisponibilidades.AppPR25, ConstantesIndisponibilidades.ReportePR25Cuadro2LimComb, famcodi, listaEquiposInput, listaUnidadesTermo, listaModo, -1
                                    , out listaManttoFinal, out List<ReiniciarRegla7D> listaReinicio, out List<OmitirExcesoPr> listaOmitirPrOut);
        }

        /// <summary>
        /// Obtiene listado de Eve. Manttos e Ind. Insumo Log
        /// </summary>
        /// <param name="fechaIniData"></param>
        /// <param name="fechaFinData"></param>
        /// <param name="famcodiCentral"></param>
        /// <param name="listaMantto"></param>
        /// <param name="listaLogInsumo"></param>
        private void ListarInsumoEveMantto(int cuadro, DateTime fechaIniData, DateTime fechaFinData, int famcodiCentral
                                            , out List<EveManttoDTO> listaMantto, out List<IndInsumoLogDTO> listaLogInsumo, out List<ResultadoValidacionAplicativo> listaMensaje)
        {
            listaMantto = this.BuscarMantenimientos("1,2", fechaIniData, fechaFinData, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto
                                                                    , ConstantesAppServicio.ParametroDefecto, famcodiCentral + "," + INDAppServicio.GetFamcodiHijo(famcodiCentral)
                                                                    , ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, "2", cuadro, out listaMensaje);

            //if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
            //    listaMantto = listaMantto.Where(x => x.Evenindispo == ConstantesIndisponibilidades.FS || 
            //                                    || x.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal
            //                                    || x.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaTotal).ToList();

            List<int> listaManttocodi = listaMantto.Where(x => x.Manttocodi != 0).Select(x => x.Manttocodi).Distinct().ToList();
            List<int> listaIndmancodi = listaMantto.Where(x => x.Indmancodi != 0).Select(x => x.Indmancodi).Distinct().ToList();
            List<int> listaEvencodi = listaMantto.Where(x => x.Evencodi != 0).Select(x => x.Evencodi).Distinct().ToList();

            #region insumo

            listaLogInsumo = new List<IndInsumoLogDTO>();
            foreach (var reg in listaManttocodi)
                listaLogInsumo.Add(new IndInsumoLogDTO() { Iloginsumo = ConstantesIndisponibilidades.InsumoEveMantto, Ilogcodigo = reg });
            foreach (var reg in listaIndmancodi)
                listaLogInsumo.Add(new IndInsumoLogDTO() { Iloginsumo = ConstantesIndisponibilidades.InsumoIndMantto, Ilogcodigo = reg });
            foreach (var reg in listaEvencodi)
                listaLogInsumo.Add(new IndInsumoLogDTO() { Iloginsumo = ConstantesIndisponibilidades.InsumoEveEvento, Ilogcodigo = reg });

            #endregion

            //listaMantto = new List<EveManttoDTO>();
            //listaMantto.AddRange(listmantto.Where(x => !listindman.Select(p => p.Manttocodi).Contains(x.Manttocodi)).ToList());
            //listaMantto.AddRange(listindman.Where(x => x.Indmanflagcalculo == ConstantesIndisponibilidades.FlagCalculoSi).Select(x => this.GetEveManttoFromIndMantto(x)));

            //listaMantto.All(x => { x.EvenindispoDesc = (x.Evenindispo == ConstantesIndisponibilidades.ES ? "E/S" : (x.Evenindispo == ConstantesIndisponibilidades.FS ? "F/S" : string.Empty)); return true; });
        }

        /// <summary>
        /// Convertir la lista de mantenimientos en una lista sin traslapes
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public void ProcesarListaMantto(List<EveManttoDTO> data, int app, int reporte, int famcodiCentral
                                        , List<EqEquipoDTO> listaEquiposInput, List<EqEquipoDTO> listaUnidadesTermo, List<PrGrupoDTO> listaModo, int tipoUnificar
                                        , out List<EveManttoDTO> listaFinalOut, out List<ReiniciarRegla7D> listaReinicioOut, out List<OmitirExcesoPr> listaOmitirPrOut)
        {
            #region Preparar data

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///Convertir los mantenimientos mensuales o anuales a diarios
            List<EveManttoDTO> resultDiario = new List<EveManttoDTO>();
            int totalSecDia = 60 * 60 * 24;
            foreach (var reg in data)
            {
                int diffInSeconds = (int)((reg.Evenfin.Value - reg.Evenini.Value).TotalSeconds);
                if (diffInSeconds > totalSecDia)
                {
                    for (var day = reg.Evenini.Value.Date; day < reg.Evenfin.Value.AddDays(1); day = day.AddDays(1))
                    {
                        if (day == reg.Evenini.Value.Date)
                        {
                            EveManttoDTO regDia = (EveManttoDTO)reg.Clone();
                            regDia.Evenini = reg.Evenini;
                            regDia.Evenfin = day.AddDays(1);
                            resultDiario.Add(regDia);
                        }
                        if (reg.Evenini.Value.Date < day && day < reg.Evenfin.Value.Date)
                        {
                            EveManttoDTO regDia = (EveManttoDTO)reg.Clone();
                            regDia.Evenini = day;
                            regDia.Evenfin = day.AddDays(1);
                            resultDiario.Add(regDia);
                        }

                        if (day == reg.Evenfin.Value.Date)
                        {
                            EveManttoDTO regDia = (EveManttoDTO)reg.Clone();
                            regDia.Evenini = day;
                            regDia.Evenfin = reg.Evenfin;
                            resultDiario.Add(regDia);
                        }
                    }
                }
                else
                {
                    resultDiario.Add(reg);
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Lista de Centrales y unidades de generación
            List<EqEquipoDTO> listaEqCentral = new List<EqEquipoDTO>();
            List<EqEquipoDTO> listaEqGenerador = new List<EqEquipoDTO>();

            if (ConstantesIndisponibilidades.AppPR25 == app &&
                (ConstantesIndisponibilidades.ReportePR25Cuadro1 == reporte || ConstantesIndisponibilidades.ReportePR25Cuadro2 == reporte || ConstantesIndisponibilidades.ReportePR25Cuadro2LimComb == reporte))
            {
                listaEqCentral = listaEquiposInput.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
                listaEqGenerador = listaEquiposInput.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            }
            if (ConstantesIndisponibilidades.AppPR25 == app && ConstantesIndisponibilidades.ReportePR25Cuadro4 == reporte)
            {
                listaEqCentral = listaEquiposInput.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica).ToList();
                listaEqGenerador = listaEquiposInput.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList();
            }
            if (ConstantesIndisponibilidades.AppSiosein2 == app)
            {
                listaEqCentral = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamilias).Where(x => x.Equiestado != ConstantesAppServicio.Eliminado).ToList();
                listaEqGenerador = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesHorasOperacion.CodFamiliasGeneradores).Where(x => x.Equiestado != ConstantesAppServicio.Eliminado).ToList();
            }

            if (ConstantesIndisponibilidades.AppPR25 == app && ConstantesIndisponibilidades.ReportePR25Cuadro7 == reporte)
            {
                if (ConstantesHorasOperacion.IdTipoHidraulica == famcodiCentral)
                {
                    listaEqCentral = listaEquiposInput.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica).ToList();
                    listaEqGenerador = listaEquiposInput.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList();
                }
                if (ConstantesHorasOperacion.IdTipoTermica == famcodiCentral)
                {
                    listaEqCentral = listaEquiposInput.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
                    listaEqGenerador = listaEquiposInput.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
                }
            }

            List<int> listaFamcodi = ConstantesHorasOperacion.CodFamilias.Split(',').Select(x => int.Parse(x)).ToList();

            ////////////////////////////////////////////////////////////////////////////////
            List<EveManttoDTO> listaManttoEnGeneradores = new List<EveManttoDTO>();

            // CONVERTIR centrales a GENERADORES. las centrales se tienen que desagregar
            foreach (var regMantto in resultDiario)
            {
                //si es central solo agregar sus unidades
                if (listaFamcodi.Contains(regMantto.Famcodi))
                {
                    if (regMantto.Equicodi <= 0 || regMantto.Equipadre <= 0)
                    { }

                    List<EqEquipoDTO> listaEqXCentral = listaEqGenerador.Where(x => x.Equipadre == regMantto.Equicodi).ToList();

                    foreach (var regUnidad in listaEqXCentral)
                    {
                        EveManttoDTO regManttoUni = (EveManttoDTO)regMantto.Clone();
                        regManttoUni.Equicodi = regUnidad.Equicodi;
                        regManttoUni.Equinomb = regUnidad.Equinomb;
                        regManttoUni.Equiabrev = regUnidad.Equiabrev;
                        regManttoUni.Equipadre = regMantto.Equicodi;
                        regManttoUni.Central = regMantto.Equinomb;
                        regManttoUni.Famcodi = GetFamcodiHijo(regMantto.Famcodi);

                        //agregar las unidades de la central
                        listaManttoEnGeneradores.Add(regManttoUni);
                    }
                }
                else
                {
                    //agregar unidad
                    listaManttoEnGeneradores.Add(regMantto);
                }
            }

            //generar lista reinicio
            List<ReiniciarRegla7D> listaReinicio7d = ListarReinicio7D(listaManttoEnGeneradores);

            //gemerar lista exceso pr
            List<OmitirExcesoPr> listaOmitirPr = ListarOmitirExcesoPr(listaManttoEnGeneradores);

            //para el cuadro 2 forzar que todas las manttos son indisp totales para omitirlos de la limitación de combustible
            if (ConstantesIndisponibilidades.ReportePR25Cuadro2LimComb == reporte)
            {
                listaManttoEnGeneradores = new List<EveManttoDTO>();

                foreach (var regMantto in resultDiario)
                {
                    //si es central solo agregar sus unidades
                    int equipadre = 0;
                    if (listaFamcodi.Contains(regMantto.Famcodi))
                    {
                        equipadre = regMantto.Equicodi ?? 0;
                    }
                    else
                    {
                        var reqEq = listaEqGenerador.Find(x => x.Equicodi == regMantto.Equicodi);
                        equipadre = reqEq.Equipadre ?? 0;
                    }

                    List<EqEquipoDTO> listaEqXCentral = listaEqGenerador.Where(x => x.Equipadre == equipadre).ToList();

                    foreach (var regUnidad in listaEqXCentral)
                    {
                        EveManttoDTO regManttoUni = (EveManttoDTO)regMantto.Clone();
                        regManttoUni.Equicodi = regUnidad.Equicodi;
                        regManttoUni.Equinomb = regUnidad.Equinomb;
                        regManttoUni.Equiabrev = regUnidad.Equiabrev;
                        regManttoUni.Equipadre = regMantto.Equicodi;
                        regManttoUni.Central = regMantto.Equinomb;
                        regManttoUni.Famcodi = GetFamcodiHijo(regMantto.Famcodi);

                        //agregar las unidades de la central
                        listaManttoEnGeneradores.Add(regManttoUni);
                    }
                }
            }

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            listaManttoEnGeneradores = GetListaEveManttoDivididaXEquipo(listaManttoEnGeneradores, listaBloqueHorario);
            listaManttoEnGeneradores = listaManttoEnGeneradores.Where(x => x.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();

            #endregion

            //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            List<EveManttoDTO> listaFinal = new List<EveManttoDTO>();

            if (ConstantesIndisponibilidades.AppSiosein2 == app)
            {
                List<PrGrupoDTO> listaUnidadXModo = this.servHO.ListarUnidadesWithModoOperacionXCentralYEmpresa(-2, "-2");
                //List<int> listaCentralConTV = listaUnidadXModo.Where(x => x.Grupopadre > 0 && x.Idtv > 0).Select(x => x.Equipadre).Distinct().ToList();

                listaFinal = this.GetListaEveManttoUnificadaXGenerador(listaManttoEnGeneradores, listaEqCentral, listaEqGenerador, listaUnidadXModo, app, reporte);
            }

            if (ConstantesIndisponibilidades.AppPR25 == app)
            {
                if ((ConstantesIndisponibilidades.ReportePR25Cuadro1 == reporte && tipoUnificar == ConstantesIndisponibilidades.TipoUnificarXUnidad)
                    || (ConstantesIndisponibilidades.ReportePR25Cuadro2LimComb == reporte)) //con operacion comercial
                    listaFinal = this.GetListaEveManttoUnificadaXUnidad(listaManttoEnGeneradores, listaReinicio7d, listaEqCentral, listaEqGenerador, listaUnidadesTermo);

                if (ConstantesIndisponibilidades.ReportePR25Cuadro1 == reporte && tipoUnificar == ConstantesIndisponibilidades.TipoUnificarXGenerador) //sin operacion comercial
                    listaFinal = this.GetListaEveManttoUnificadaXGenerador(listaManttoEnGeneradores, listaEqCentral, listaEqGenerador, new List<PrGrupoDTO>(), app, ConstantesIndisponibilidades.ReportePR25Cuadro4);

                if (ConstantesIndisponibilidades.ReportePR25Cuadro2 == reporte)
                    listaFinal = this.GetListaEveManttoUnificadaXListaEquicodi(listaManttoEnGeneradores, listaReinicio7d, listaEqCentral, listaEqGenerador, listaUnidadesTermo, listaModo);

                if (ConstantesIndisponibilidades.ReportePR25Cuadro4 == reporte)
                    listaFinal = this.GetListaEveManttoUnificadaXGenerador(listaManttoEnGeneradores, listaEqCentral, listaEqGenerador, new List<PrGrupoDTO>(), app, ConstantesIndisponibilidades.ReportePR25Cuadro4);

                if (ConstantesIndisponibilidades.ReportePR25Cuadro7 == reporte) //sin operacion comercial
                    listaFinal = this.GetListaEveManttoUnificadaXGenerador(listaManttoEnGeneradores, listaEqCentral, listaEqGenerador, new List<PrGrupoDTO>(), app, ConstantesIndisponibilidades.ReportePR25Cuadro4);

            }

            //salidas
            listaFinalOut = listaFinal;
            listaReinicioOut = listaReinicio7d;
            listaOmitirPrOut = listaOmitirPr;
        }

        private List<ReiniciarRegla7D> ListarReinicio7D(List<EveManttoDTO> listaMantto)
        {
            List<ReiniciarRegla7D> lista = new List<ReiniciarRegla7D>();

            foreach (var reg in listaMantto.Where(x => x.Indmanomitir7d == ConstantesAppServicio.SI))
            {
                lista.Add(new ReiniciarRegla7D() { Equicodi = reg.Equicodi.Value, Equipadre = reg.Equipadre ?? 0, FechaReinicio = reg.Evenini.Value });
            }

            return lista.OrderBy(x => x.Equicodi).ThenBy(x => x.FechaReinicio).ToList();
        }

        private List<OmitirExcesoPr> ListarOmitirExcesoPr(List<EveManttoDTO> listaMantto)
        {
            List<OmitirExcesoPr> lista = new List<OmitirExcesoPr>();

            foreach (var reg in listaMantto.Where(x => x.Indmanomitirexcesopr == ConstantesAppServicio.SI))
            {
                lista.Add(new OmitirExcesoPr() { Equicodi = reg.Equicodi.Value, FechaOmision = reg.Evenini.Value.Date });
            }

            return lista.OrderBy(x => x.Equicodi).ThenBy(x => x.FechaOmision).ToList();
        }

        /// <summary>
        /// Ver: COES.Servicios.Aplicacion.Indisponibilidades / IndisponibilidadesAppServicio / private List<EveManttoDTO> GetListaManttoDividida(List<EveManttoDTO> data)
        /// Dividir todos los Mantto por fechas (fechas de eventos, inicio del dia, fin del dia, hora punta)
        /// Version actualiazada del metodo del corte
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        public static List<EveManttoDTO> GetListaEveManttoDivididaXEquipo(List<EveManttoDTO> data, List<SiParametroValorDTO> listaBloqueHorario)
        {
            List<EveManttoDTO> resultFinalTmp = new List<EveManttoDTO>();

            List<int> listaEquipadre = data.Select(x => x.Equipadre.Value).Distinct().OrderBy(x => x).ToList();

            //recorrer por central
            foreach (var equipadre in listaEquipadre)
            {
                List<EveManttoDTO> listaManttoXCentral = data.Where(x => x.Equipadre == equipadre).OrderBy(x => x.Evenini).ToList();
                List<int> listaEquicodi = listaManttoXCentral.Select(x => x.Equicodi.Value).Distinct().ToList();

                List<DateTime> listaFecha = listaManttoXCentral.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();
                foreach (var fecha in listaFecha)
                {
                    //parámetros de hora punta vigente para la fecha de consulta
                    SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fecha, ParametrosFormato.ResolucionCuartoHora);

                    List<EveManttoDTO> listaManttoXCentralXDia = listaManttoXCentral.Where(x => x.Evenini.Value.Date == fecha).ToList();
                    DateTime fecHorPunIni = fecha.Date.AddSeconds(paramHPyHFP.SegIniHP);
                    DateTime fecHorPunFin = fecha.Date.AddSeconds(paramHPyHFP.SegFinHP);

                    foreach (var equicodi in listaEquicodi)
                    {
                        List<EveManttoDTO> resultXEqXFechaTotal = new List<EveManttoDTO>();

                        // Lista de Fechas por equipo
                        List<DateTime> listaFechaIniXEq = listaManttoXCentralXDia.Select(x => x.Evenini.Value).Distinct().OrderBy(x => x).ToList();
                        List<DateTime> listaFechaFinXEq = listaManttoXCentralXDia.Select(x => x.Evenfin.Value).Distinct().OrderBy(x => x).ToList();

                        List<DateTime> listaFechaXEq = new List<DateTime>();
                        listaFechaXEq.Add(fecha); //inicio del día
                        listaFechaXEq.Add(fecHorPunIni); //inicio HP
                        listaFechaXEq.Add(fecHorPunFin); //fin HP
                        listaFechaXEq.Add(fecha.AddDays(1)); //fin del día

                        listaFechaXEq.AddRange(listaFechaIniXEq);
                        listaFechaXEq.AddRange(listaFechaFinXEq);
                        listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

                        List<EveManttoDTO> dataXEq = data.Where(x => x.Equicodi == equicodi && x.Evenini.Value.Date == fecha).ToList(); //se filtra con equicodi, para los generadores (que tienen una lista mezclada de equicodis), las otras veces que se usa esta funciona no hay unidades mezcladas

                        //por cada mantenimiento dividirlo en secciones de fechas horas para que no haya cruces
                        foreach (var reg in dataXEq)
                        {
                            List<EveManttoDTO> listaTmpXEqXFecha = new List<EveManttoDTO>();
                            for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                            {
                                DateTime factual = listaFechaXEq[fi];
                                DateTime fsiguiente = listaFechaXEq[fi + 1];

                                listaTmpXEqXFecha.AddRange(GenerarCorteMantto(reg, factual, fsiguiente));
                            }

                            //Agregar valores del mantto
                            List<EveManttoDTO> resultXEqXFecha = new List<EveManttoDTO>();
                            foreach (var rtmp in listaTmpXEqXFecha)
                            {
                                var regCorte = (EveManttoDTO)reg.Clone();
                                regCorte.Evenini = rtmp.Evenini;
                                regCorte.Evenfin = rtmp.Evenfin;
                                regCorte.EventoGenerado = rtmp.EventoGenerado;

                                resultXEqXFecha.Add(regCorte);
                            }

                            resultXEqXFechaTotal.AddRange(resultXEqXFecha);
                        }
                        resultXEqXFechaTotal = resultXEqXFechaTotal.OrderBy(x => x.Manttocodi).ThenBy(x => x.Evenini).ToList();
                        resultFinalTmp.AddRange(resultXEqXFechaTotal);
                    }
                }
            }

            return resultFinalTmp;
        }

        /// <summary>
        /// Ver: COES.Servicios.Aplicacion.Indisponibilidades / IndisponibilidadesAppServicio / private List<EveManttoDTO> GetListaManttoDividida(List<EveManttoDTO> data)
        /// Dividir todos los Mantto por fechas (fechas de eventos, inicio del dia, fin del dia, hora punta)
        /// Version actualiazada del metodo del corte
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private static List<EveManttoDTO> GetListaEveManttoDivididaXListaEquicodi(List<EveManttoDTO> data, List<SiParametroValorDTO> listaBloqueHorario)
        {
            List<EveManttoDTO> resultFinalTmp = new List<EveManttoDTO>();

            List<EqEquipoDTO> listaUnidad = data.DistinctBy(x => new { x.Equicodi, x.Grupocodi, x.ListaEquicodiStr })
                                            .Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi ?? 0, Grupocodi = x.Grupocodi, ListaEquicodi = x.ListaEquicodi, Equipadre = x.Equipadre, Emprcodi = x.Emprcodi }).ToList();

            //recorrer por central
            foreach (var regUnidad in listaUnidad)
            {
                List<EveManttoDTO> listaManttoXUnidad = data.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi
                                                                && x.ListaEquicodiStr == string.Join(",", regUnidad.ListaEquicodi.OrderBy(y => y))).OrderBy(x => x.Evenini).ToList();

                List<DateTime> listaFecha = listaManttoXUnidad.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();
                foreach (var fecha in listaFecha)
                {
                    //parámetros de hora punta vigente para la fecha de consulta
                    SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fecha, ParametrosFormato.ResolucionCuartoHora);

                    List<EveManttoDTO> listaManttoXUnidadXDia = listaManttoXUnidad.Where(x => x.Evenini.Value.Date == fecha).ToList();
                    DateTime fecHorPunIni = fecha.Date.AddSeconds(paramHPyHFP.SegIniHP);
                    DateTime fecHorPunFin = fecha.Date.AddSeconds(paramHPyHFP.SegFinHP);

                    List<EveManttoDTO> resultXEqXFechaTotal = new List<EveManttoDTO>();

                    // Lista de Fechas por equipo
                    List<DateTime> listaFechaIniXEq = listaManttoXUnidadXDia.Select(x => x.Evenini.Value).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaFinXEq = listaManttoXUnidadXDia.Select(x => x.Evenfin.Value).Distinct().OrderBy(x => x).ToList();

                    List<DateTime> listaFechaXEq = new List<DateTime>();
                    listaFechaXEq.Add(fecha); //inicio del día
                    listaFechaXEq.Add(fecHorPunIni); //inicio HP
                    listaFechaXEq.Add(fecHorPunFin); //fin HP
                    listaFechaXEq.Add(fecha.AddDays(1)); //fin del día

                    listaFechaXEq.AddRange(listaFechaIniXEq);
                    listaFechaXEq.AddRange(listaFechaFinXEq);
                    listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

                    foreach (var reg in listaManttoXUnidadXDia)
                    {
                        List<EveManttoDTO> resultXEqXFecha = new List<EveManttoDTO>();
                        for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                        {
                            DateTime factual = listaFechaXEq[fi];
                            DateTime fsiguiente = listaFechaXEq[fi + 1];

                            resultXEqXFecha.AddRange(GenerarCorteMantto(reg, factual, fsiguiente));
                        }

                        //Agregar valores del mantto
                        foreach (var rtmp in resultXEqXFecha)
                        {
                            rtmp.Evenclasecodi = reg.Evenclasecodi;
                            rtmp.Equicodi = regUnidad.Equicodi;
                            rtmp.Grupocodi = regUnidad.Grupocodi ?? 0;
                            rtmp.ListaEquicodi = regUnidad.ListaEquicodi;
                            rtmp.ListaEquicodiStr = string.Join(",", rtmp.ListaEquicodi.OrderBy(x => x));
                            rtmp.Equiabrev = reg.Equiabrev;
                            rtmp.Equinomb = reg.Equinomb;
                            rtmp.Emprcodi = reg.Emprcodi;
                            rtmp.Emprnomb = reg.Emprnomb;
                            rtmp.Tipoevenabrev = reg.Tipoevenabrev;
                            rtmp.Equipadre = reg.Equipadre;
                            rtmp.Central = reg.Central;
                            rtmp.Famcodi = reg.Famcodi;
                        }

                        resultXEqXFechaTotal.AddRange(resultXEqXFecha);
                    }
                    resultXEqXFechaTotal = resultXEqXFechaTotal.OrderBy(x => x.Manttocodi).ThenBy(x => x.Evenini).ToList();
                    resultFinalTmp.AddRange(resultXEqXFechaTotal);

                }
            }

            return resultFinalTmp;
        }

        public static List<EveManttoDTO> GenerarCorteMantto(EveManttoDTO reg, DateTime factual, DateTime fsiguiente)
        {
            List<EveManttoDTO> resultXEqXFecha = new List<EveManttoDTO>();

            //El evento intersecta completo
            if (reg.Evenini <= factual && fsiguiente <= reg.Evenfin)
            {
                //Las fechas estan incluidas en el rango
                EveManttoDTO e1 = (EveManttoDTO)reg.Clone();
                e1.Evenini = factual;
                e1.Evenfin = fsiguiente;

                resultXEqXFecha.Add(e1);
            }
            else
            {
                //El ficticio insertecta completo
                if (reg.Evenfin <= factual || fsiguiente <= reg.Evenini)
                {
                    EveManttoDTO e1 = (EveManttoDTO)reg.Clone();
                    e1.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                    e1.Evenini = factual;
                    e1.Evenfin = fsiguiente;

                    resultXEqXFecha.Add(e1);
                }
                else
                {
                    //Incluido abierdo dentro de las 2 fechas
                    if (factual < reg.Evenini && reg.Evenfin < fsiguiente)
                    {
                        EveManttoDTO e1 = (EveManttoDTO)reg.Clone();
                        e1.Evenini = reg.Evenini;
                        e1.Evenfin = reg.Evenfin;

                        EveManttoDTO e2 = (EveManttoDTO)reg.Clone();
                        e2.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                        e2.Evenini = factual;
                        e2.Evenfin = reg.Evenini;

                        EveManttoDTO e3 = (EveManttoDTO)reg.Clone();
                        e3.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                        e3.Evenini = reg.Evenfin;
                        e3.Evenfin = fsiguiente;

                        resultXEqXFecha.Add(e1);
                        resultXEqXFecha.Add(e2);
                        resultXEqXFecha.Add(e3);
                    }
                    else
                    {
                        if (reg.Evenini <= factual)
                        {
                            //Incluye total izq y parcial der
                            EveManttoDTO e1 = (EveManttoDTO)reg.Clone();
                            e1.Evenini = factual;
                            e1.Evenfin = reg.Evenfin;

                            resultXEqXFecha.Add(e1);

                            EveManttoDTO e2 = (EveManttoDTO)reg.Clone();
                            e2.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                            e2.Evenini = reg.Evenfin;
                            e2.Evenfin = fsiguiente;

                            resultXEqXFecha.Add(e2);
                        }

                        if (reg.Evenfin >= fsiguiente)
                        {
                            //Incluye par izq y total der
                            EveManttoDTO e1 = (EveManttoDTO)reg.Clone();
                            e1.EventoGenerado = ConstantesIndisponibilidades.EventoGeneradoFicticio;
                            e1.Evenini = factual;
                            e1.Evenfin = reg.Evenini;

                            resultXEqXFecha.Add(e1);

                            EveManttoDTO e2 = (EveManttoDTO)reg.Clone();
                            e2.Evenini = reg.Evenini;
                            e2.Evenfin = fsiguiente;

                            resultXEqXFecha.Add(e2);
                        }
                    }
                }
            }

            return resultXEqXFecha;
        }

        /// <summary>
        /// Metodo para juntar las unidades en central segun sea el caso
        /// </summary>
        /// <param name="data"></param>
        /// <param name="listaEqCentral"></param>
        /// <param name="listaEqUnidad"></param>
        /// <returns></returns>
        private List<EveManttoDTO> GetListaEveManttoUnificadaXGenerador(List<EveManttoDTO> data
                                                                    , List<EqEquipoDTO> listaEqCentral, List<EqEquipoDTO> listaEqUnidad
                                                                    , List<PrGrupoDTO> listaUnidadXModo
                                                                    , int app, int reporte)
        {
            List<EveManttoDTO> listaAgrupadoXCentral = new List<EveManttoDTO>();

            List<int> listaEquipadre = data.Select(x => x.Equipadre.Value).Distinct().OrderBy(x => x).ToList();

            //si en un rango existe todas las unidades de la central, esos n objetos se reemplazan por uno
            foreach (var equipadre in listaEquipadre)
            {
                if (equipadre == 19554)
                { }

                EqEquipoDTO eqCentral = listaEqCentral.Find(x => x.Equicodi == equipadre);
                List<EqEquipoDTO> listaEqUnidadXCentral = listaEqUnidad.Where(x => x.Emprcodi == eqCentral.Emprcodi && x.Equipadre == equipadre).ToList();

                if (eqCentral.Equicodi == 15785)
                { }

                List<int> listaEquicodiXCentral = listaEqUnidadXCentral.Select(x => x.Equicodi).ToList();
                bool centralTieneIgualGrupoDespacho = listaEqUnidadXCentral.Select(x => x.Grupocodi).Distinct().Count() == 1;//centrales termicas que un solo grupo despacho deben aparecer como uno solo

                List<PrGrupoDTO> listaUnidadXModoXCentral = listaUnidadXModo.Where(x => x.Equipadre == equipadre).ToList();
                int grupocodiTv = (listaUnidadXModoXCentral.Where(x => x.Idtv > 0).FirstOrDefault()?.Idtv) ?? 0;
                int equicodiTvCicloComb = (listaEqUnidadXCentral.Find(x => x.Grupocodi == grupocodiTv)?.Equicodi) ?? 0;
                bool centralTieneCicloComb = equicodiTvCicloComb > 0; //centrales termicas que tienen ciclo combinado deben aparecer como uno solo
                List<int> listaEquicodiNoTv = centralTieneCicloComb ? listaEqUnidadXCentral.Where(x => x.Equicodi != equicodiTvCicloComb).Select(x => x.Equicodi).ToList() : new List<int>();

                List<EveManttoDTO> listaManttoXCentral = data.Where(x => x.Equipadre == equipadre).OrderBy(x => x.Evenini).ToList();

                List<DateTime> listaFecha = listaManttoXCentral.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();
                foreach (var day in listaFecha)
                {
                    List<EveManttoDTO> listaByDia = listaManttoXCentral.Where(x => x.Evenini.Value.Date == day).ToList();
                    int famcodi = listaByDia.First().Famcodi;

                    // Lista de Fechas por equipo
                    List<DateTime> listaFechaIniXEq = listaByDia.Select(x => x.Evenini.Value).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaFinXEq = listaByDia.Select(x => x.Evenfin.Value).Distinct().OrderBy(x => x).ToList();

                    List<DateTime> listaFechaXEq = new List<DateTime>();
                    listaFechaXEq.Add(day); //inicio del día
                    listaFechaXEq.Add(day.AddDays(1)); //fin del día

                    listaFechaXEq.AddRange(listaFechaIniXEq);
                    listaFechaXEq.AddRange(listaFechaFinXEq);
                    listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

                    List<EveManttoDTO> resultXEqXFecha = new List<EveManttoDTO>();
                    for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                    {
                        DateTime factual = listaFechaXEq[fi];
                        DateTime fsiguiente = listaFechaXEq[fi + 1];

                        List<EveManttoDTO> listaXrango = listaByDia.Where(x => x.Evenini >= factual && x.Evenfin <= fsiguiente).ToList();

                        List<int> listaEquicodiXRango = listaXrango.Select(x => x.Equicodi.Value).Distinct().ToList();

                        switch (app)
                        {

                            case ConstantesIndisponibilidades.AppSiosein2:

                                //si la cantidad de unidades en ese rango es igual a la cantidad de unidades entonces se agrega la central en vez de sus n unidades
                                bool agruparComoCentral = listaEquicodiXCentral.Count == listaEquicodiXRango.Count;
                                if (agruparComoCentral && famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico && listaEquicodiXCentral.Count > 1)
                                {
                                    //si la central termica tiene varias unidades o se muestra por separado (grupo despacho) o como uno solo (centrales de ciclo comb o especiales)
                                    agruparComoCentral = eqCentral.TieneCicloComb || centralTieneIgualGrupoDespacho;
                                }

                                if (agruparComoCentral)
                                {
                                    //no térmicas
                                    if (listaXrango.Count > 0)
                                    {
                                        var regCentral = listaXrango.First();
                                        regCentral.Equicodi = regCentral.Equipadre;
                                        regCentral.Famcodi = GetFamcodiPadre(regCentral.Famcodi);
                                        regCentral.Equiabrev = "CENTRAL";
                                        listaAgrupadoXCentral.Add(regCentral);
                                    }
                                }
                                else
                                {
                                    foreach (var equicodi in listaEquicodiXRango)
                                    {
                                        listaAgrupadoXCentral.Add(listaXrango.Find(x => x.Equicodi == equicodi));
                                    }
                                }

                                break;

                            case ConstantesIndisponibilidades.AppPR25:

                                //if (ConstantesIndisponibilidades.ReportePR25Cuadro1 == reporte)
                                //{
                                //    if (centralTieneCicloComb)
                                //    {

                                //        if (listaEquicodiNoTv.All(x => listaEquicodiXRango.Contains(x)))
                                //        {
                                //            var regCentral = listaXrango.First();
                                //            regCentral.Equicodi = regCentral.Equipadre;
                                //            regCentral.Famcodi = GetFamcodiPadre(regCentral.Famcodi);
                                //            regCentral.Equiabrev = "CENTRAL";
                                //            listaAgrupadoXCentral.Add(regCentral);

                                //        }
                                //    }
                                //    else
                                //    {
                                //        foreach (var equicodi in listaEquicodiXRango)
                                //        {
                                //            listaAgrupadoXCentral.Add(listaXrango.Find(x => x.Equicodi == equicodi));
                                //        }
                                //    }
                                //}

                                if (ConstantesIndisponibilidades.ReportePR25Cuadro4 == reporte)
                                {

                                    foreach (var equicodi in listaEquicodiXRango)
                                    {
                                        listaAgrupadoXCentral.Add(listaXrango.Find(x => x.Equicodi == equicodi));
                                    }
                                }

                                break;
                        }

                    }
                }
            }

            listaAgrupadoXCentral = listaAgrupadoXCentral.OrderBy(x => x.Equipadre).ThenBy(x => x.Equicodi).ThenBy(x => x.Evenini).ThenBy(x => x.Evenfin).ToList();

            List<EveManttoDTO> listaIndNuevo = UnificarEveManttoXEquipo(listaAgrupadoXCentral);

            return listaIndNuevo;
        }

        /// <summary>
        /// Lista Eve. Mantto unificada por unidad
        /// </summary>
        /// <param name="data"></param>
        /// <param name="listaEqCentral"></param>
        /// <param name="listaEqGenerador"></param>
        /// <param name="listaUnidad"></param>
        /// <returns></returns>
        private List<EveManttoDTO> GetListaEveManttoUnificadaXUnidad(List<EveManttoDTO> data, List<ReiniciarRegla7D> listaReinicio7d
                                                                    , List<EqEquipoDTO> listaEqCentral, List<EqEquipoDTO> listaEqGenerador
                                                                    , List<EqEquipoDTO> listaUnidad)
        {
            List<EveManttoDTO> listaAgrupadoXCentral = new List<EveManttoDTO>();

            //si en un rango existe todas las unidades de la central, esos n objetos se reemplazan por uno
            foreach (var regUnidad in listaUnidad)
            {
                if (regUnidad.Equicodi == 13656)
                { }

                EqEquipoDTO eqCentral = listaEqCentral.Find(x => x.Equicodi == regUnidad.Equipadre);
                List<EqEquipoDTO> listaEqGenXUnidad = listaEqGenerador.Where(x => x.Emprcodi == eqCentral.Emprcodi && regUnidad.ListaEquicodi.Contains(x.Equicodi)).ToList();

                List<int> listaEquicodiValido = listaEqGenXUnidad.Select(x => x.Equicodi).ToList();

                List<int> listaEquicodiSinTV = regUnidad.EquicodiTVCicloComb > 0 ? listaEquicodiValido.Where(x => x != regUnidad.EquicodiTVCicloComb).ToList() : new List<int>();

                //mantenimientos de la unidad para indisponibilidad total
                List<EveManttoDTO> listaManttoXUnidad = data.Where(x => listaEquicodiValido.Contains(x.Equicodi.Value)).OrderBy(x => x.Evenini).ToList();

                //
                List<DateTime> listaFecha = listaManttoXUnidad.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();

                List<EveManttoDTO> listaXrangoAnterior = new List<EveManttoDTO>(); //saber las unidades parciales del rango anterior (tambien del día anterior)
                DateTime? fechafinrangoAnterior = null; //saber la fecha en que terminó el último rango
                foreach (var day in listaFecha)
                {
                    List<EveManttoDTO> listaByDia = listaManttoXUnidad.Where(x => x.Evenini.Value.Date == day).ToList();
                    List<ReiniciarRegla7D> listaReinicioByDia = listaReinicio7d.Where(x => x.FechaReinicio.Date == day).ToList();

                    // Lista de Fechas por equipo
                    List<DateTime> listaFechaIniXEq = listaByDia.Select(x => x.Evenini.Value).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaFinXEq = listaByDia.Select(x => x.Evenfin.Value).Distinct().OrderBy(x => x).ToList();

                    List<DateTime> listaFechaXEq = new List<DateTime>();
                    listaFechaXEq.Add(day); //inicio del día
                    listaFechaXEq.Add(day.AddDays(1)); //fin del día

                    listaFechaXEq.AddRange(listaFechaIniXEq);
                    listaFechaXEq.AddRange(listaFechaFinXEq);
                    listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

                    //dividir manttos
                    List<EveManttoDTO> listaByDiaDividido = new List<EveManttoDTO>();
                    foreach (var reg in listaByDia)
                    {
                        if (reg.Manttocodi == 2219358)
                        { }
                        List<EveManttoDTO> resultXEqXFecha = new List<EveManttoDTO>();
                        for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                        {
                            DateTime factual = listaFechaXEq[fi];
                            DateTime fsiguiente = listaFechaXEq[fi + 1];

                            resultXEqXFecha.AddRange(GenerarCorteMantto(reg, factual, fsiguiente).Where(x => x.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio));
                        }

                        listaByDiaDividido.AddRange(resultXEqXFecha);
                    }

                    for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                    {
                        DateTime factual = listaFechaXEq[fi];
                        DateTime fsiguiente = listaFechaXEq[fi + 1];

                        List<EveManttoDTO> listaAllXrango = listaByDiaDividido.Where(x => x.Evenini >= factual && x.Evenfin <= fsiguiente).ToList();

                        //si las fechas no son continuas, reiniciar el rango anterior. Verificar el rango anterior solo aplica a las centrales con ciclo combinados
                        if (fechafinrangoAnterior != factual || regUnidad.EquicodiTVCicloComb <= 0) { listaXrangoAnterior = new List<EveManttoDTO>(); fechafinrangoAnterior = null; }

                        //obtener unidades parciales, si ya existen del rango anterior hay que continuar con ellas
                        List<EveManttoDTO> listaXrango = GenerarListaUnidadesManttoParcial(listaAllXrango, listaReinicioByDia, ref listaXrangoAnterior);

                        bool tieneIndispParcial = false;

                        #region Verificar si existe alguna posible indisponibilidad PARCIAL, si pasa con alguna unidad ya no se puede determinar que sea TOTAL

                        if (listaXrango.Any())
                        {
                            foreach (var regEjecProg in listaXrango)
                            {
                                List<int> listaEquicodiXRango = regEjecProg.ListaEquicodi;
                                List<int> listaEquicodiXRangoSinTV = regUnidad.EquicodiTVCicloComb > 0 ? listaEquicodiXRango.Where(x => x != regUnidad.EquicodiTVCicloComb).ToList() : new List<int>();

                                //bool existePr = listaXrango.Find(x => x.Evenpr > 0) != null;
                                bool existeIndispParcial = listaAllXrango.Find(x => regEjecProg.ListaEquicodi.Contains(x.Equicodi.Value)
                                                                            && (x.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial || x.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial)) != null;
                                bool existeIndisTodoUnidad = regUnidad.ListaEquicodi.Count == listaEquicodiXRango.Count;

                                bool tieneIndipCentral = regUnidad.EquicodiTVCicloComb > 0 ? listaEquicodiSinTV.Count == listaEquicodiXRangoSinTV.Count : false;

                                if ((!tieneIndipCentral && !existeIndisTodoUnidad) || existeIndispParcial)
                                {
                                    regEjecProg.Emprcodi = regUnidad.Emprcodi.Value;
                                    regEjecProg.Equipadre = regUnidad.Equipadre;
                                    regEjecProg.Grupocodi = regUnidad.Grupocodi ?? 0;
                                    regEjecProg.Equicodi = regUnidad.Equicodi;
                                    regEjecProg.Evenini = factual;
                                    regEjecProg.Evenfin = fsiguiente;
                                    regEjecProg.Famcodi = GetFamcodiPadre(eqCentral.Famcodi.Value);
                                    regEjecProg.Equiabrev = regUnidad.Equiabrev;
                                    regEjecProg.ListaEquicodiStr = string.Join(",", regEjecProg.ListaEquicodi.OrderBy(x => x));

                                    tieneIndispParcial = true;
                                }
                            }
                        }
                        else
                        { }

                        listaXrangoAnterior = listaXrango;
                        fechafinrangoAnterior = fsiguiente;

                        #endregion

                        if (listaAllXrango.Any() && !tieneIndispParcial)
                        {
                            foreach (var regEjecProg in listaXrango)
                            {
                                List<int> listaEquicodiXRango = regEjecProg.ListaEquicodi;

                                if (regUnidad.TieneCicloComb)
                                {
                                    if (listaEquicodiSinTV.All(x => listaEquicodiXRango.Contains(x)))
                                    {
                                        regEjecProg.Emprcodi = regUnidad.Emprcodi.Value;
                                        regEjecProg.Equipadre = regUnidad.Equipadre;
                                        regEjecProg.Grupocodi = regUnidad.Grupocodi ?? 0;
                                        regEjecProg.Equicodi = regUnidad.Equicodi;
                                        regEjecProg.Evenini = factual;
                                        regEjecProg.Evenfin = fsiguiente;
                                        regEjecProg.Famcodi = GetFamcodiPadre(eqCentral.Famcodi.Value);
                                        regEjecProg.Equiabrev = "CENTRAL";
                                        listaAgrupadoXCentral.Add(regEjecProg);
                                    }
                                }
                                else
                                {
                                    regEjecProg.Emprcodi = regUnidad.Emprcodi.Value;
                                    regEjecProg.Equipadre = regUnidad.Equipadre;
                                    regEjecProg.Grupocodi = regUnidad.Grupocodi ?? 0;
                                    regEjecProg.Equicodi = regUnidad.Equicodi;
                                    regEjecProg.Evenini = factual;
                                    regEjecProg.Evenfin = fsiguiente;
                                    regEjecProg.Famcodi = regUnidad.Famcodi ?? 0;
                                    regEjecProg.Equiabrev = regUnidad.Equiabrev;
                                    listaAgrupadoXCentral.Add(regEjecProg);
                                }
                            }
                        }
                    }
                }
            }

            listaAgrupadoXCentral = listaAgrupadoXCentral.OrderBy(x => x.Equipadre).ThenBy(x => x.Equicodi).ThenBy(x => x.Evenini).ThenBy(x => x.Evenfin).ToList();

            List<EveManttoDTO> listaIndNuevo = new List<EveManttoDTO>();
            List<EveManttoDTO> listaIndNuevo1 = UnificarEveManttoXEquipo(listaAgrupadoXCentral.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec).ToList());
            List<EveManttoDTO> listaIndNuevo2 = UnificarEveManttoXEquipo(listaAgrupadoXCentral.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg).ToList());
            listaIndNuevo.AddRange(listaIndNuevo1);
            listaIndNuevo.AddRange(listaIndNuevo2);

            return listaIndNuevo;
        }

        /// <summary>
        /// Lista Eve. Mantto unificada por modo de operación
        /// </summary>
        /// <param name="data"></param>
        /// <param name="listaEqCentral"></param>
        /// <param name="listaEqGenerador"></param>
        /// <param name="listaUnidad"></param>
        /// <returns></returns>
        public List<EveManttoDTO> GetListaEveManttoUnificadaXListaEquicodi(List<EveManttoDTO> data, List<ReiniciarRegla7D> listaReinicio7d
                                                                    , List<EqEquipoDTO> listaEqCentral, List<EqEquipoDTO> listaEqGenerador
                                                                    , List<EqEquipoDTO> listaUnidad, List<PrGrupoDTO> listaGrupoModo)
        {
            List<EveManttoDTO> listaAgrupadoXCentral = new List<EveManttoDTO>();

            //
            List<ResultadoValidacionAplicativo> listaMsj = new List<ResultadoValidacionAplicativo>();

            //si en un rango existe todas las unidades de la central, esos n objetos se reemplazan por uno
            foreach (var regUnidad in listaUnidad)
            {
                if (regUnidad.Equicodi == 13601)
                { }

                EqEquipoDTO eqCentral = listaEqCentral.Find(x => x.Equicodi == regUnidad.Equipadre);
                List<EqEquipoDTO> listaEqGenXUnidad = listaEqGenerador.Where(x => x.Emprcodi == eqCentral.Emprcodi && regUnidad.ListaEquicodi.Contains(x.Equicodi)).ToList();
                List<int> listaEquicodiValido = listaEqGenXUnidad.Select(x => x.Equicodi).ToList();

                List<int> listaEquicodiSinTV = regUnidad.EquicodiTVCicloComb > 0 ? listaEquicodiValido.Where(x => x != regUnidad.EquicodiTVCicloComb).ToList() : new List<int>();

                //
                var listaModoDispXUnidad = listaGrupoModo.Where(x => x.ListaEquicodi.Any(y => listaEquicodiValido.Contains(y))).OrderByDescending(x => x.Potencia).ToList();

                //mantenimientos de la unidad para indisponibilidad parcial
                List<EveManttoDTO> listaManttoXUnidad = data.Where(x => listaEquicodiValido.Contains(x.Equicodi.Value)).OrderBy(x => x.Evenini).ToList();

                //
                List<DateTime> listaFecha = listaManttoXUnidad.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();

                List<EveManttoDTO> listaXrangoAnterior = new List<EveManttoDTO>(); //saber las unidades parciales del rango anterior (tambien del día anterior)
                DateTime? fechafinrangoAnterior = null; //saber la fecha en que terminó el último rango
                foreach (var day in listaFecha)
                {
                    if (regUnidad.Equicodi == 290 && day == new DateTime(2021, 2, 10))
                    { }

                    List<EveManttoDTO> listaByDia = listaManttoXUnidad.Where(x => x.Evenini.Value.Date == day).ToList();
                    List<ReiniciarRegla7D> listaReinicioByDia = listaReinicio7d.Where(x => x.FechaReinicio.Date == day).ToList();

                    // Lista de Fechas por equipo
                    List<DateTime> listaFechaIniXEq = listaByDia.Select(x => x.Evenini.Value).Distinct().OrderBy(x => x).ToList();
                    List<DateTime> listaFechaFinXEq = listaByDia.Select(x => x.Evenfin.Value).Distinct().OrderBy(x => x).ToList();

                    List<DateTime> listaFechaXEq = new List<DateTime>();
                    listaFechaXEq.Add(day); //inicio del día
                    listaFechaXEq.Add(day.AddDays(1)); //fin del día

                    listaFechaXEq.AddRange(listaFechaIniXEq);
                    listaFechaXEq.AddRange(listaFechaFinXEq);
                    listaFechaXEq = listaFechaXEq.Distinct().OrderBy(x => x).ToList();

                    //dividir manttos
                    List<EveManttoDTO> listaByDiaDividido = new List<EveManttoDTO>();
                    foreach (var reg in listaByDia)
                    {
                        if (reg.Manttocodi == 2219358)
                        { }
                        List<EveManttoDTO> resultXEqXFecha = new List<EveManttoDTO>();
                        for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                        {
                            DateTime factual = listaFechaXEq[fi];
                            DateTime fsiguiente = listaFechaXEq[fi + 1];

                            resultXEqXFecha.AddRange(GenerarCorteMantto(reg, factual, fsiguiente).Where(x => x.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio));
                        }

                        listaByDiaDividido.AddRange(resultXEqXFecha);
                    }

                    for (int fi = 0; fi < listaFechaXEq.Count - 1; fi++)
                    {
                        DateTime factual = listaFechaXEq[fi];
                        DateTime fsiguiente = listaFechaXEq[fi + 1];

                        List<EveManttoDTO> listaAllXrango = listaByDiaDividido.Where(x => x.Evenini >= factual && x.Evenfin <= fsiguiente).ToList();

                        //si las fechas no son continuas, reiniciar el rango anterior. Verificar el rango anterior solo aplica a las centrales con ciclo combinados
                        if (fechafinrangoAnterior != factual || regUnidad.EquicodiTVCicloComb <= 0) { listaXrangoAnterior = new List<EveManttoDTO>(); fechafinrangoAnterior = null; }

                        //obtener unidades parciales, si ya existen del rango anterior hay que continuar con ellas
                        List<EveManttoDTO> listaXrango = GenerarListaUnidadesManttoParcial(listaAllXrango, listaReinicioByDia, ref listaXrangoAnterior);

                        if (listaXrango.Any())
                        {
                            foreach (var regEjecProg in listaXrango)
                            {
                                List<int> listaEquicodiXRango = regEjecProg.ListaEquicodi;
                                List<int> listaEquicodiXRangoSinTV = regUnidad.EquicodiTVCicloComb > 0 ? listaEquicodiXRango.Where(x => x != regUnidad.EquicodiTVCicloComb).ToList() : new List<int>();

                                //bool existePr = listaXrango.Find(x => x.Evenpr > 0) != null;
                                bool existeIndispParcial = listaAllXrango.Find(x => regEjecProg.ListaEquicodi.Contains(x.Equicodi.Value)
                                                                            && (x.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial || x.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial)) != null;
                                bool existeIndisTodoUnidad = regUnidad.ListaEquicodi.Count == listaEquicodiXRango.Count;

                                bool tieneIndipCentral = regUnidad.EquicodiTVCicloComb > 0 ? listaEquicodiSinTV.Count == listaEquicodiXRangoSinTV.Count : false;

                                if ((!tieneIndipCentral && !existeIndisTodoUnidad) || existeIndispParcial)
                                {
                                    regEjecProg.Emprcodi = regUnidad.Emprcodi.Value;
                                    regEjecProg.Equipadre = regUnidad.Equipadre;
                                    regEjecProg.Grupocodi = regUnidad.Grupocodi ?? 0;
                                    regEjecProg.Equicodi = regUnidad.Equicodi;
                                    regEjecProg.Evenini = factual;
                                    regEjecProg.Evenfin = fsiguiente;
                                    regEjecProg.Famcodi = GetFamcodiPadre(eqCentral.Famcodi.Value);
                                    regEjecProg.Equiabrev = regUnidad.Equiabrev;
                                    regEjecProg.ListaEquicodiStr = string.Join(",", regEjecProg.ListaEquicodi.OrderBy(x => x));

                                    listaAgrupadoXCentral.Add(regEjecProg);
                                }
                            }
                        }
                        else
                        { }

                        listaXrangoAnterior = listaXrango;
                        fechafinrangoAnterior = fsiguiente;
                    }
                }
            }

            List<EveManttoDTO> listaIndNuevo = new List<EveManttoDTO>();
            List<EveManttoDTO> listaIndNuevo1 = UnificarEveManttoXListaEquicodi(listaAgrupadoXCentral.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec).ToList());
            List<EveManttoDTO> listaIndNuevo2 = UnificarEveManttoXListaEquicodi(listaAgrupadoXCentral.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg).ToList());
            listaIndNuevo.AddRange(listaIndNuevo1);
            listaIndNuevo.AddRange(listaIndNuevo2);

            return listaIndNuevo;
        }

        /// <summary>
        /// Lista de unidades, quita los programados
        /// </summary>
        /// <param name="listaXrango"></param>
        /// <param name="listaXrangoAnterior"></param>
        /// <returns></returns>
        public List<EveManttoDTO> GenerarListaUnidadesManttoParcial(List<EveManttoDTO> listaXrango, List<ReiniciarRegla7D> listaReinicio7d, ref List<EveManttoDTO> listaXrangoAnterior)
        {
            List<EveManttoDTO> listaAllXrango = new List<EveManttoDTO>();
            listaAllXrango.AddRange(listaXrango);

            List<EveManttoDTO> lista1 = new List<EveManttoDTO>();

            //verificar que la lista del rango anterior tenga Indisponibilidades parciales prog y fort, si tiene ambos continuan, caso contrario se reinicia la lista
            bool tieneParcialProg = listaXrangoAnterior.Find(x => x.TieneAmbosTipoMantto) != null;
            bool tieneParcialFort = listaXrangoAnterior.Find(x => !x.TieneAmbosTipoMantto) != null;
            if (tieneParcialProg && !tieneParcialFort)
            {
                listaXrangoAnterior = new List<EveManttoDTO>();
            }

            //verificar si la lista Actual tiene alguno con reinicio de 7d
            foreach (var reg in listaXrango)
            {
                var listaReinicio7dXEq = listaReinicio7d.Where(x => reg.ListaEquicodi.Contains(x.Equicodi) || x.Equicodi == reg.Equicodi || x.Equipadre == reg.Equicodi || x.Equicodi == reg.Equipadre).ToList();
                var objReinicio = listaReinicio7dXEq.Find(x => x.FechaReinicio == reg.Evenini);
                if (objReinicio != null)
                {
                    //si existe reseteo de la regla de los 7 días entonces terminar la lista
                    listaXrangoAnterior = new List<EveManttoDTO>();
                }
            }

            //primero obtener la lista de unidades parciales que se ejecutaron en el anterior rango
            //cuando se llama por primera vez a este metodo, no se ejecuta este foreach
            foreach (var regAnt in listaXrangoAnterior)
            {
                if (regAnt.TieneAmbosTipoMantto)
                {
                    //solo iterar una vez cuando tiene ambos tipos de mantenimientos
                    if (regAnt.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec)
                    {
                        //equipos que tienen mantenimientos tambien en el rango actual
                        int numEquipos = 0;
                        var l2 = new List<EveManttoDTO>();

                        foreach (int equicodi in regAnt.ListaEquicodi)
                        {
                            var lTmp1 = listaXrango.Where(x => x.Equicodi == equicodi && x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec).ToList();
                            var lTmp2 = listaXrango.Where(x => x.Equicodi == equicodi && x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg).ToList();

                            if (lTmp1.Any() && lTmp2.Any())
                            {
                                numEquipos++;
                                l2.AddRange(lTmp1);
                                l2.AddRange(lTmp2);
                            }
                        }

                        if (numEquipos == regAnt.ListaEquicodi.Count)
                        {
                            var listaTmpP = GenerarListaUnidadesManttoParcialXLista(l2);
                            lista1.AddRange(listaTmpP);

                            foreach (var regt in l2) listaAllXrango.Remove(regt);
                        }
                    }
                }
                else
                {
                    //equipos que tienen mantenimientos tambien en el rango actual
                    int numEquipos = 0;
                    var l2 = new List<EveManttoDTO>();

                    foreach (int equicodi in regAnt.ListaEquicodi)
                    {
                        var lTmp1 = listaXrango.Where(x => x.Equicodi == equicodi && x.Evenclasecodi == regAnt.Evenclasecodi).ToList();

                        if (lTmp1.Any())
                        {
                            numEquipos++;
                            l2.AddRange(lTmp1);
                        }
                    }

                    if (numEquipos == regAnt.ListaEquicodi.Count)
                    {
                        var listaTmpP = GenerarListaUnidadesManttoParcialXLista(l2);
                        lista1.AddRange(listaTmpP);

                        foreach (var regt in l2) listaAllXrango.Remove(regt);
                    }

                }
            }

            //obtener unidades parciales con los manttos restantes
            var lista2 = GenerarListaUnidadesManttoParcialXLista(listaAllXrango);

            List<EveManttoDTO> lFinal = new List<EveManttoDTO>();
            lFinal.AddRange(lista1);
            lFinal.AddRange(lista2);

            return lFinal;
        }

        /// <summary>
        /// obtener las unidades  parciales
        /// </summary>
        /// <param name="listaXrango"></param>
        /// <param name="listaXrangoAnterior"></param>
        /// <returns></returns>
        public List<EveManttoDTO> GenerarListaUnidadesManttoParcialXLista(List<EveManttoDTO> listaXrango)
        {
            List<EveManttoDTO> lFinal = new List<EveManttoDTO>();

            //agrupar
            List<EveManttoDTO> listaEqxMantto = listaXrango.GroupBy(x => new { x.Equicodi, x.Evenclasecodi })
                                                        .Select(x => new EveManttoDTO() { Equicodi = x.Key.Equicodi, Evenclasecodi = x.Key.Evenclasecodi, Evenpr = x.First().Evenpr }).ToList();

            List<int> listaEquicodi = listaEqxMantto.Select(x => x.Equicodi.Value).Distinct().ToList();

            List<int> lAmbos = new List<int>();
            List<int> lSoloEjec = new List<int>();
            List<int> lSoloProg = new List<int>();

            foreach (int equicodi in listaEquicodi)
            {
                var eqEjec = listaEqxMantto.Find(x => x.Equicodi == equicodi && x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec);
                var eqProg = listaEqxMantto.Find(x => x.Equicodi == equicodi && x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg);

                if (eqEjec != null && eqProg != null)
                {
                    lAmbos.Add(equicodi);
                }
                else
                {
                    if (eqEjec != null)
                    {
                        lSoloEjec.Add(equicodi);
                    }
                    else
                    {
                        lSoloProg.Add(equicodi);
                    }
                }
            }

            //generar objetos
            if (lAmbos.Any())
            {
                decimal? pr = listaEqxMantto.Where(x => lAmbos.Contains(x.Equicodi.Value)).First().Evenpr;

                EveManttoDTO ejecAmbos = new EveManttoDTO() { ListaEquicodi = lAmbos, Evenclasecodi = ConstantesIndisponibilidades.EvenclasecodiEjec, Evenpr = pr, TieneAmbosTipoMantto = true };
                lFinal.Add(ejecAmbos);

                EveManttoDTO progAmbos = new EveManttoDTO() { ListaEquicodi = lAmbos, Evenclasecodi = ConstantesIndisponibilidades.EvenclasecodiProg, Evenpr = pr, TieneAmbosTipoMantto = true };
                lFinal.Add(progAmbos);
            }

            if (lSoloEjec.Any())
            {
                decimal? pr = listaEqxMantto.Where(x => lSoloEjec.Contains(x.Equicodi.Value)).First().Evenpr;

                EveManttoDTO ejec = new EveManttoDTO() { ListaEquicodi = lSoloEjec, Evenclasecodi = ConstantesIndisponibilidades.EvenclasecodiEjec, Evenpr = pr };
                lFinal.Add(ejec);
            }

            //if (lSoloProg.Any())
            //{
            //    decimal? pr = listaEqxMantto.Where(x => lSoloProg.Contains(x.Equicodi.Value)).First().Evenpr;

            //    EveManttoDTO prog = new EveManttoDTO() { ListaEquicodi = lSoloProg, Evenclasecodi = ConstantesIndisponibilidades.EvenclasecodiProg, Evenpr = pr };
            //    lFinal.Add(prog);
            //}

            return lFinal;
        }

        /// <summary>
        /// Permite unificar Eve. Manttos
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private List<EveManttoDTO> UnificarEveManttoXEquipo(List<EveManttoDTO> data)
        {
            data = data.OrderBy(x => x.Equipadre).ThenBy(x => x.Equicodi).ThenBy(x => x.Evenini).ThenBy(x => x.Evenfin).ToList();

            List<EveManttoDTO> listaIndNuevo = new List<EveManttoDTO>();
            //EveManttoDTO indActual;
            EveManttoDTO indNuevo;

            //Unificar por rango
            for (int i = 0; i < data.Count; i++)
            {
                //indActual = data[i];

                indNuevo = (EveManttoDTO)data[i].Clone();
                listaIndNuevo.Add(indNuevo);

                //buscar por interseccion
                bool terminoBusqueda = false;
                for (int j = i + 1; j < data.Count && !terminoBusqueda; j++)
                {
                    if (data[j].Equicodi == indNuevo.Equicodi
                        && indNuevo.Evenfin == data[j].Evenini   //el siguiente registro, su inicio debe ser el fin del rango actual
                        && data[j].Evenini < indNuevo.Evenini.Value.Date.AddDays(1) //solo rangos que son del mismo día
                        )
                    {
                        indNuevo.Evenfin = data[j].Evenfin.Value;
                    }
                    else
                    {
                        terminoBusqueda = true;
                        i = j - 1;
                    }
                }
                if (!terminoBusqueda)
                {
                    i = data.Count;
                }
            }

            return listaIndNuevo;
        }

        /// <summary>
        /// Permite unificar Eve. Manttos por modo de operación
        /// </summary>
        /// <param name="data"></param>
        /// <returns></returns>
        private List<EveManttoDTO> UnificarEveManttoXListaEquicodi(List<EveManttoDTO> data)
        {
            data = data.OrderBy(x => x.Equipadre).ThenBy(x => x.ListaEquicodiStr).ThenBy(x => x.Evenini).ThenBy(x => x.Evenfin).ToList();

            List<EveManttoDTO> listaIndNuevo = new List<EveManttoDTO>();
            EveManttoDTO indNuevo;

            //Unificar por rango
            for (int i = 0; i < data.Count; i++)
            {
                //indActual = data[i];

                indNuevo = (EveManttoDTO)data[i].Clone();
                listaIndNuevo.Add(indNuevo);

                //buscar por interseccion
                bool terminoBusqueda = false;
                for (int j = i + 1; j < data.Count && !terminoBusqueda; j++)
                {
                    if (data[j].ListaEquicodiStr == indNuevo.ListaEquicodiStr
                        && indNuevo.Evenfin == data[j].Evenini   //el siguiente registro, su inicio debe ser el fin del rango actual
                        && data[j].Evenini < indNuevo.Evenini.Value.Date.AddDays(1) //solo rangos que son del mismo día
                        )
                    {
                        indNuevo.Evenfin = data[j].Evenfin.Value;
                    }
                    else
                    {
                        terminoBusqueda = true;
                        i = j - 1;
                    }
                }
                if (!terminoBusqueda)
                {
                    i = data.Count;
                }
            }

            return listaIndNuevo;
        }

        /// <summary>
        /// Retorna listado Ind. Manttos y Rango Ind. 7 Dias
        /// </summary>
        /// <param name="dataIni"></param>
        /// <param name="tipoTiempo"></param>
        /// <param name="fechaIniPeriodo"></param>
        /// <param name="fechaFinPeriodo"></param>
        /// <param name="dataIndisponible"></param>
        /// <param name="listaRangoIndispRegla7Dias"></param>
        public void ListarManttoIndispPR25(int cuadro, List<EqEquipoDTO> listaUnidadOpBD, List<EveManttoDTO> dataIni, List<ReiniciarRegla7D> listaReinicio, string tipoTiempo, DateTime fechaIniPeriodo, DateTime fechaFinPeriodo, List<SiParametroValorDTO> listaBloqueHorario
            , out List<EveManttoDTO> dataIndisponible, out List<EveManttoDTO> listaRangoIndispRegla7Dias)
        {
            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            //Aplicar algoritmo de los 7 días
            this.AplicarCriterioIndisponibilidadPR25(cuadro, listaUnidadOpBD, dataIni, listaReinicio, listaBloqueHorario, out List<EveManttoDTO> listaDataTd, out listaRangoIndispRegla7Dias);

            ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Solo la información del periodo de evaluación (se hace este filtro porque el algoritmo necesitaba los 7 dias anteriores para saber si la indisponibilidad fortuita viene desde antes)
            listaDataTd = listaDataTd.Where(x => fechaIniPeriodo <= x.Evenini.Value.Date && x.Evenini.Value.Date <= fechaFinPeriodo).ToList();

            //Obtener la data para todo el dia o solo en hora punta
            dataIndisponible = new List<EveManttoDTO>();
            if (ConstantesIndisponibilidades.TiempoHoraPunta == tipoTiempo)  //solo hora punta
            {
                List<DateTime> listaFechaTodoElDia = listaDataTd.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();
                foreach (var fecha in listaFechaTodoElDia)
                {
                    //parámetros de hora punta vigente para la fecha de consulta
                    SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fecha, ParametrosFormato.ResolucionCuartoHora);

                    List<EveManttoDTO> dataXFecha = listaDataTd.Where(x => x.Evenini >= fecha.AddSeconds(paramHPyHFP.SegIniHP)
                                                                        && x.Evenfin <= fecha.AddSeconds(paramHPyHFP.SegFinHP)).ToList();
                    dataIndisponible.AddRange(dataXFecha);
                }
            }
            else
                dataIndisponible = listaDataTd;
        }

        /// <summary>
        /// Aplicar consideraciones del PR25: Algoritmo de los 7 dias a partir de la última indisponibilidad del día inicial
        /// Omitir regla si es que en los insumos de Manttos 
        /// </summary>
        /// <param name="dataInputMantto"></param>
        /// <returns></returns>
        public void AplicarCriterioIndisponibilidadPR25(int cuadro, List<EqEquipoDTO> listaUnidadOpBD, List<EveManttoDTO> dataInputMantto, List<ReiniciarRegla7D> listaReinicio7d, List<SiParametroValorDTO> listaBloqueHorario
                                                , out List<EveManttoDTO> listaDataTodoElDia, out List<EveManttoDTO> listaRangoIndispRegla7Dias)
        {
            List<EveManttoDTO> dataAjuste = dataInputMantto;

            //Paso 1. Cambiar la fecha fin de las Manttos para aquello registros que acaban a las 23:59 (fin del día), se les adicionará 1minuto más para que sea el fin del día a las 00:00
            foreach (var reg in dataInputMantto)
            {
                if (reg.Evenfin.Value.Hour == 23 && reg.Evenfin.Value.Minute == 59)
                    reg.Evenfin = reg.Evenfin.Value.Date.AddDays(1);
            }

            //dividir la data para encontrar la duración máxima de 7 días
            if (cuadro != ConstantesIndisponibilidades.ReportePR25Cuadro2)
                dataAjuste = GetListaEveManttoDivididaXEquipo(dataAjuste, listaBloqueHorario);
            else
                dataAjuste = GetListaEveManttoDivididaXListaEquicodi(dataAjuste, listaBloqueHorario);

            dataAjuste = dataAjuste.Where(y => y.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();

            //filtrar data para pruebas
            //dataAjuste = dataAjuste.Where(x => x.Equicodi == 6).ToList(); //G6 Mantaro
            //dataAjuste = dataAjuste.Where(x => x.Equicodi == 42).ToList(); //G4 Malpaso

            //Completar Programado
            List<EveManttoDTO> listaManttoPR25 = new List<EveManttoDTO>();
            List<EveManttoDTO> listaRangoIndisp = new List<EveManttoDTO>();

            List<EqEquipoDTO> listaUnidad;

            if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
                listaUnidad = dataAjuste.Where(x => x.Equicodi > 0).DistinctBy(x => new { x.Equicodi, x.Grupocodi, x.ListaEquicodiStr })
                                        .Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi.Value, Grupocodi = x.Grupocodi, ListaEquicodi = x.ListaEquicodi, Equipadre = x.Equipadre }).ToList();
            else
                listaUnidad = dataAjuste.DistinctBy(x => new { x.Equicodi, x.Grupocodi, x.Grupocodimodo })
                                        .Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi.Value, Grupocodi = x.Grupocodi, Grupocodimodo = x.Grupocodimodo, Equipadre = x.Equipadre }).ToList();

            foreach (var regUnidad in listaUnidad)
            {
                if (regUnidad.Equicodi == 13656)
                { }
                List<EveManttoDTO> dataAjusteXeq = cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2 ? dataAjuste.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi
                                                                                    && x.ListaEquicodiStr == string.Join(",", regUnidad.ListaEquicodi.OrderBy(y => y))).ToList()
                                                                            : dataAjuste.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi).ToList();
                dataAjusteXeq = dataAjusteXeq.OrderBy(x => x.Evenini).ThenBy(x => x.Evenclasecodi).ToList();
                List<EveManttoDTO> listaEjec = dataAjusteXeq.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec).OrderBy(x => x.Evenini).ToList();
                List<EveManttoDTO> listaProg = dataAjusteXeq.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg).OrderBy(x => x.Evenini).ToList();

                List<ReiniciarRegla7D> listaReinicio7dXEq = new List<ReiniciarRegla7D>();
                if (ConstantesIndisponibilidades.ReportePR25Cuadro2 == cuadro)
                {
                    listaReinicio7dXEq = listaReinicio7d.Where(x => regUnidad.ListaEquicodi.Contains(x.Equicodi) || x.Equicodi == regUnidad.Equipadre).ToList();
                }
                else
                {
                    var regBd = listaUnidadOpBD.Find(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi);
                    if (regBd != null)
                    {
                        listaReinicio7dXEq = listaReinicio7d.Where(x => regBd.ListaEquicodi.Contains(x.Equicodi) || x.Equicodi == regUnidad.Equipadre).ToList();
                    }
                    else
                    {
                        listaReinicio7dXEq = listaReinicio7d.Where(x => x.Equicodi == regUnidad.Equicodi || x.Equicodi == regUnidad.Equipadre).ToList();
                    }
                }

                //Obtener todas las sublistas de ejecutados. P.e. desde 02/11/2020 00am - 05/11/2020 05pm; 27/11/2020 - 27/11/2020
                List<List<EveManttoDTO>> agrupSubListaEjecXeq = new List<List<EveManttoDTO>>();

                EveManttoDTO regActual = null, regAnterior = null, regSiguiente = null;
                List<EveManttoDTO> sublistaTmp = new List<EveManttoDTO>();

                for (int i = 0; i < listaEjec.Count; i++)
                {
                    if (i == 11)
                    { }
                    regAnterior = i > 0 ? listaEjec[i - 1] : null;
                    regActual = listaEjec[i];
                    regSiguiente = i < listaEjec.Count - 1 ? listaEjec[i + 1] : null;

                    //
                    if (regSiguiente != null)
                    {
                        //verificar si existe reinicio para el siguiente registro
                        var objReinicio = listaReinicio7dXEq.Find(x => x.FechaReinicio == regSiguiente.Evenini);
                        if (objReinicio != null)
                        {
                            //si existe reseteo de la regla de los 7 días entonces terminar la lista
                            sublistaTmp.Add(regActual);
                            agrupSubListaEjecXeq.Add(sublistaTmp);

                            sublistaTmp = new List<EveManttoDTO>();
                        }
                        else
                        {
                            //caso normal
                            TimeSpan ts = regSiguiente.Evenini.Value - regActual.Evenfin.Value;
                            if (ts.TotalMinutes > 0)
                            {
                                //si la diferencia es mayor que cero entonces no son consecutivos
                                //terminar la lista e inicializarlo
                                sublistaTmp.Add(regActual);
                                agrupSubListaEjecXeq.Add(sublistaTmp);

                                sublistaTmp = new List<EveManttoDTO>();
                            }
                            else
                            {
                                //son mantos consecutivos, seguir agregando elementos a la lista
                                sublistaTmp.Add(regActual);
                            }
                        }
                    }

                    //si no existe proximo elemento entonces terminar la lista e inicializarlo
                    if (regSiguiente == null)
                    {
                        sublistaTmp.Add(regActual);
                        agrupSubListaEjecXeq.Add(sublistaTmp);
                    }
                }

                //Luego de obtener las listas consecutivas
                foreach (var subListaEjec in agrupSubListaEjecXeq)
                {
                    List<EveManttoDTO> listaXEqPR25 = this.ListarSubListaDuracion7DiaXEq(regUnidad, subListaEjec, listaProg, ref listaRangoIndisp);
                    listaManttoPR25.AddRange(listaXEqPR25);
                }

            }

            //Volver a fragmentar la data
            listaDataTodoElDia = GetListaEveManttoDivididaXEquipo(listaManttoPR25, listaBloqueHorario);
            listaDataTodoElDia = listaDataTodoElDia.Where(y => y.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();

            listaRangoIndispRegla7Dias = listaRangoIndisp;
        }

        /// <summary>
        /// Obtener Sub lista duración 7 dias por equipo 
        /// </summary>
        /// <param name="equicodi"></param>
        /// <param name="listaEjec"></param>
        /// <param name="listaProg"></param>
        /// <param name="listaRangoIndisp"></param>
        /// <returns></returns>
        private List<EveManttoDTO> ListarSubListaDuracion7DiaXEq(EqEquipoDTO regUnidad, List<EveManttoDTO> listaEjec, List<EveManttoDTO> listaProg, ref List<EveManttoDTO> listaRangoIndisp)
        {
            //listaEjec: es una lista continua de mantenimientos ejecutados

            List<EveManttoDTO> sublistaTmpNoFortuita = new List<EveManttoDTO>();
            List<EveManttoDTO> sublistaTmpHasta7D = new List<EveManttoDTO>();
            List<EveManttoDTO> sublistaTmpDespues7D = new List<EveManttoDTO>();

            bool existeDuracion7Dia = false;
            bool iniciaFortuito = false;

            DateTime fechaIniSublista = listaEjec.FirstOrDefault().Evenini.Value.Date;
            DateTime fechaFinSublista = listaEjec.LastOrDefault().Evenini.Value.Date;

            //recorrer cada día de la sublista
            int diaFortuito = 0;
            for (var fechaXDia = fechaIniSublista; fechaXDia <= fechaFinSublista; fechaXDia = fechaXDia.AddDays(1))
            {
                var listaManttoEjecXDia = listaEjec.Where(x => x.Evenini.Value.Date == fechaXDia).ToList();

                //La idea es generar sublista diferenciadas, por ejemplo, SUBLISTA_FORT, SUBLISTA_PROG, SUBLISTA_FORT del dia seleccionado. 
                //Si la ultima sublista del día es fortuito entonces inicia los 7 dias, los anteriores manttos a la ultima sublista fortuita serán considerados como fortuito o programado pero no pertenecen a los 7 dias
                //Se asume que todos los manttos son continuos y no existe huecos entre los dias (la funcion anterior a esta divide entre sublistas que tienen manttos continuas)
                if (!iniciaFortuito)
                {
                    //evaluación del primer dia y los que continuan programado

                    //inicializar valores
                    diaFortuito = 0;
                    List<List<EveManttoDTO>> allListaFort = new List<List<EveManttoDTO>>();
                    List<List<EveManttoDTO>> allListaProg = new List<List<EveManttoDTO>>();
                    List<EveManttoDTO> listaDiaFort = new List<EveManttoDTO>();
                    List<EveManttoDTO> listaDiaProg = new List<EveManttoDTO>();

                    //primer registro ejec y prog del dia
                    EveManttoDTO regActualPrimerEjec = listaManttoEjecXDia.First();
                    EveManttoDTO regActualProg = listaProg.Find(x => x.Evenini == regActualPrimerEjec.Evenini && x.Evenfin == regActualPrimerEjec.Evenfin);

                    bool ultimoSublistaFort = false, ultimoSublistaProg = false;
                    if (regActualProg == null) ultimoSublistaFort = true;
                    if (regActualProg != null) ultimoSublistaProg = true;

                    //Llenar las sublistas: SUBLISTA_FORT y SUBLISTA_PROG
                    foreach (var regActualEjec in listaManttoEjecXDia)
                    {
                        regActualProg = listaProg.Find(x => x.Evenini == regActualEjec.Evenini && x.Evenfin == regActualEjec.Evenfin);

                        //sublista de indisponibilidad fortuita
                        if (regActualProg == null)
                        {
                            if (ultimoSublistaProg)
                            {
                                if (listaDiaProg.Any()) allListaProg.Add(listaDiaProg);
                                listaDiaProg = new List<EveManttoDTO>();
                            }
                            ultimoSublistaFort = true;
                            ultimoSublistaProg = false;
                            listaDiaFort.Add(regActualEjec);
                        }
                        else
                        {
                            //sublista de indisponibilidad programada
                            if (ultimoSublistaFort)
                            {
                                if (listaDiaFort.Any()) allListaFort.Add(listaDiaFort);
                                listaDiaFort = new List<EveManttoDTO>();
                            }
                            ultimoSublistaProg = true;
                            ultimoSublistaFort = false;
                            listaDiaProg.Add(regActualEjec);
                        }
                    }

                    //si la ultima sublista es SUBLISTA_FORT entonces el siguiente día es el nro 2 de los siete dias consecutivos de fortuitos
                    if (ultimoSublistaFort)
                    {
                        iniciaFortuito = true;
                        diaFortuito = 1;

                        if (listaDiaProg.Any()) allListaProg.Add(listaDiaProg);
                        sublistaTmpHasta7D.AddRange(listaDiaFort);
                    }
                    else
                    {
                        //si la ultima sublista es SUBLISTA_PROG entonces este dia no es el inicio de la semana fortuita, verificar el siguientes dia para encontrar la ultima SUBLISTA_FORT
                        if (listaDiaProg.Any()) allListaProg.Add(listaDiaProg);
                        if (listaDiaFort.Any()) allListaFort.Add(listaDiaFort);
                    }

                    //Los anteriores manttos a la ultima sublista fortuita serán considerados como fortuito o programado pero no pertenecen a los 7 dias
                    foreach (var sublista in allListaProg)
                        sublistaTmpNoFortuita.AddRange(sublista);

                    foreach (var sublista in allListaFort)
                        sublistaTmpNoFortuita.AddRange(sublista);

                }
                else
                {
                    //segundo día del fortuito
                    diaFortuito++;

                    if (diaFortuito > 7)
                    {
                        //los manttos restantes serán considerados programados
                        existeDuracion7Dia = true;
                        sublistaTmpDespues7D.AddRange(listaManttoEjecXDia);
                    }
                    else
                    {
                        sublistaTmpHasta7D.AddRange(listaManttoEjecXDia);
                    }
                }

            }

            List<EveManttoDTO> listaFinal = new List<EveManttoDTO>();

            //Manttos antes de iniciar el fortuito
            listaFinal.AddRange(sublistaTmpNoFortuita.OrderBy(x => x.Evenini).ToList()); //agregar ejecutados
            foreach (var regEjec in sublistaTmpNoFortuita) //agregar programados que le correspondan al ejecutado
            {
                var regProg = listaProg.Find(x => x.Evenini == regEjec.Evenini && x.Evenfin == regEjec.Evenfin);
                if (regProg != null)
                    listaFinal.Add(regProg);
            }

            //iniciaron fortuito hasta por siete dias calendario
            listaFinal.AddRange(sublistaTmpHasta7D.OrderBy(x => x.Evenini).ToList()); //agregar solo ejecutados de ese periodo, los programados no se les considera porque podrian convertirse en indisponibilidad programada y no fortuita

            //existe octavo dia
            if (existeDuracion7Dia)
            {
                listaFinal.AddRange(sublistaTmpDespues7D.OrderBy(x => x.Evenini).ToList()); //agregar ejecutados

                foreach (var regEjec in sublistaTmpDespues7D)//para cada ejecutado debe agregar el programado, si no existe crearle para convertirse en indisponibilidad programada
                {
                    var regProg = listaProg.Find(x => x.Evenini == regEjec.Evenini && x.Evenfin == regEjec.Evenfin);
                    if (regProg != null)
                        listaFinal.Add(regProg);
                    else
                    {
                        EveManttoDTO regProgNuevo = (EveManttoDTO)regEjec.Clone();
                        regProgNuevo.Evenclasecodi = ConstantesIndisponibilidades.EvenclasecodiProg;
                        listaFinal.Add(regProgNuevo);
                    }
                }
            }

            //////
            DateTime? fechaIniFort = null, fechaFinFort = null, fechaIniProg = null, fechaFinProg = null;
            if (sublistaTmpHasta7D.Any()) fechaIniFort = sublistaTmpHasta7D.First().Evenini;
            if (sublistaTmpHasta7D.Any()) fechaFinFort = sublistaTmpHasta7D.Last().Evenfin;
            if (sublistaTmpDespues7D.Any()) fechaIniProg = sublistaTmpDespues7D.First().Evenini;
            if (sublistaTmpDespues7D.Any()) fechaFinProg = sublistaTmpDespues7D.Last().Evenfin;

            if (sublistaTmpHasta7D.Any()) //existe indisponibilidad fortuita
                listaRangoIndisp.Add(new EveManttoDTO()
                {
                    Equicodi = regUnidad.Equicodi,
                    Grupocodi = regUnidad.Grupocodi ?? 0,
                    Grupocodimodo = regUnidad.Grupocodimodo,
                    ListaEquicodi = regUnidad.ListaEquicodi,
                    ListaEquicodiStr = string.Join(",", regUnidad.ListaEquicodi.OrderBy(x => x)),
                    Evenini = fechaIniFort,
                    Evenfin = fechaFinFort,
                    Eveniniprog = fechaIniProg,
                    Evenfinprog = fechaFinProg
                });

            return listaFinal;
        }

        /// <summary>
        /// Asignar valor grupo por cuadro
        /// </summary>
        /// <param name="listaIndisp"></param>
        /// <param name="listaUnidades"></param>
        private void AsignarValorGrupoXCuadro(int cuadro, ref List<EveManttoDTO> listaIndisp, List<EqEquipoDTO> listaUnidades)
        {
            foreach (var reg in listaUnidades)
            {
                if (reg.Grupocodi == 3267)
                { }
                if (cuadro != ConstantesIndisponibilidades.ReportePR25Cuadro7) reg.Equinomb = reg.UnidadnombPR25;
                if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro7) reg.Equinomb = reg.Equiabrev;
            }

            foreach (var regIndisp in listaIndisp)
            {
                if (regIndisp.Equicodi == 15785)
                { }

                var regEq = listaUnidades.Find(x => x.Equicodi == regIndisp.Equicodi);
                if (regEq != null)
                {
                    regIndisp.Grupocodi = regEq.Grupocodi ?? 0;
                    regIndisp.Equinomb = regEq.Equinomb;
                }
            }
        }

        /// <summary>
        /// Guarda detalle en la base datos 
        /// </summary>
        /// <param name="data"></param>
        /// <param name="percuacodi"></param>
        /// <param name="usu"></param>
        public List<IndReporteDetDTO> GenerarDetalleCuadro(int cuadro, List<EveManttoDTO> listaIndisp, List<EveManttoDTO> listaRangoIndispRegla7Dias, string opcom)
        {
            List<IndReporteDetDTO> listaReporteDet = new List<IndReporteDetDTO>();

            List<EqEquipoDTO> listaUnidad;
            if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
                listaUnidad = listaIndisp.Where(x => x.Equicodi > 0).DistinctBy(x => new { x.Equicodi, x.Grupocodi, x.ListaEquicodiStr })
                                        .Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi.Value, Grupocodi = x.Grupocodi, ListaEquicodi = x.ListaEquicodi }).ToList();
            else
                listaUnidad = listaIndisp.DistinctBy(x => new { x.Equicodi, x.Grupocodi, x.Grupocodimodo })
                                        .Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi.Value, Grupocodi = x.Grupocodi, Grupocodimodo = x.Grupocodimodo }).ToList();

            List<DateTime> listaFecha = listaIndisp.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();

            foreach (var fecha in listaFecha)
            {
                foreach (var regUnidad in listaUnidad)
                {
                    List<EveManttoDTO> listaEjecXEqTmp = new List<EveManttoDTO>(), listaProgXEqTmp = new List<EveManttoDTO>(), listaFortXEqTmp = new List<EveManttoDTO>();

                    // Lista de Fechas por equipo
                    List<EveManttoDTO> dataXEq = cuadro != ConstantesIndisponibilidades.ReportePR25Cuadro2 ? listaIndisp.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Evenini.Value.Date == fecha).ToList()
                                                    : listaIndisp.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi
                                                                            && x.ListaEquicodiStr == string.Join(",", regUnidad.ListaEquicodi.OrderBy(y => y)) && x.Evenini.Value.Date == fecha).ToList();
                    List<DateTime> listaFechaXEq = dataXEq.Select(x => x.Evenini.Value).Distinct().OrderBy(x => x).ToList();

                    for (int fi = 0; fi < listaFechaXEq.Count; fi++)
                    {
                        DateTime fechaPrueba = new DateTime(2020, 5, 27);
                        if (fecha.Date == fechaPrueba.Date && regUnidad.Equicodi == 13204)
                        { }

                        var ejec = dataXEq.Find(y => y.Evenini == listaFechaXEq[fi] && y.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec);
                        var prog = dataXEq.Find(y => y.Evenini == listaFechaXEq[fi] && y.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg);

                        //Caso estandar
                        if (ejec != null)
                        {
                            listaEjecXEqTmp.Add(ejec);
                            if (prog != null)
                                listaProgXEqTmp.Add(prog);
                            else
                                listaFortXEqTmp.Add(ejec);
                        }
                    }

                    //Unir registros contiguos
                    //List<EveManttoDTO> listaEjecXEq = this.GetListaEveManttoUnificadaByTipo(listaEjecXEqTmp, ConstantesIndisponibilidades.TipoUnificacionCompleta);
                    List<EveManttoDTO> listaProgXEq = this.GetListaEveManttoUnificadaByTipo(cuadro, listaProgXEqTmp, ConstantesIndisponibilidades.TipoUnificacionCompleta);
                    List<EveManttoDTO> listaFortXEq = this.GetListaEveManttoUnificadaByTipo(cuadro, listaFortXEqTmp, ConstantesIndisponibilidades.TipoUnificacionCompleta);

                    //Rango completo de indisponibilidad del equipo (abarca hasta varios dias)
                    List<EveManttoDTO> listaRangoIndispXEq = listaRangoIndispRegla7Dias.Where(x => x.Equicodi == regUnidad.Equicodi).ToList();

                    //Guardar las Indisponibilidades programados
                    string flagIndispProg = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiProg);
                    foreach (var regEve in listaProgXEq)
                    {
                        int min = Convert.ToInt32((regEve.Evenfin.Value - regEve.Evenini.Value).TotalMinutes);
                        var regRangoIndispXeq = listaRangoIndispXEq.Find(x => x.Evenini <= regEve.Evenini && regEve.Evenfin <= x.Evenfin);

                        listaReporteDet.Add(new IndReporteDetDTO()
                        {
                            Emprcodi = regEve.Emprcodi,
                            Equipadre = regEve.Equipadre ?? 0,
                            Equicodi = regEve.Equicodi,
                            Grupocodi = regEve.Grupocodi,
                            ListaEquicodi = regEve.ListaEquicodi,
                            ListaEquicodiStr = string.Join(",", regEve.ListaEquicodi.OrderBy(x => x)),
                            PrPrevista = regEve.Evenpr,
                            Unidadnomb = !string.IsNullOrEmpty(regEve.Equinomb) ? regEve.Equinomb.Trim() : string.Empty,
                            Idetdia = fecha.Day,
                            Idettipoindisp = flagIndispProg,
                            Idethoraini = regEve.Evenini,
                            Idethorafin = regEve.Evenfin,
                            Idetmin = min,
                            Idetopcom = opcom,
                            Idetfechainifort7d = regRangoIndispXeq != null ? regRangoIndispXeq.Evenini : null,
                            Idetfechafinfort7d = regRangoIndispXeq != null ? regRangoIndispXeq.Evenfin : null,
                            Idetfechainiprog7d = regRangoIndispXeq != null ? regRangoIndispXeq.Eveniniprog : null,
                            Idetfechafinprog7d = regRangoIndispXeq != null ? regRangoIndispXeq.Evenfinprog : null,
                        });
                    }

                    //Guardar las Indisponibilidades Fortuitos
                    string flagIndispEjec = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiEjec);
                    foreach (var regEve in listaFortXEq)
                    {
                        int min = Convert.ToInt32((regEve.Evenfin.Value - regEve.Evenini.Value).TotalMinutes);
                        var regRangoIndispXeq = listaRangoIndispXEq.Find(x => x.Evenini <= regEve.Evenini && regEve.Evenfin <= x.Evenfin);

                        listaReporteDet.Add(new IndReporteDetDTO()
                        {
                            Emprcodi = regEve.Emprcodi,
                            Equipadre = regEve.Equipadre ?? 0,
                            Equicodi = regEve.Equicodi,
                            Grupocodi = regEve.Grupocodi,
                            ListaEquicodi = regEve.ListaEquicodi,
                            ListaEquicodiStr = string.Join(",", regEve.ListaEquicodi.OrderBy(x => x)),
                            PrPrevista = regEve.Evenpr,
                            Unidadnomb = !string.IsNullOrEmpty(regEve.Equinomb) ? regEve.Equinomb.Trim() : string.Empty,
                            Idetdia = fecha.Day,
                            Idettipoindisp = flagIndispEjec,
                            Idethoraini = regEve.Evenini,
                            Idethorafin = regEve.Evenfin,
                            Idetmin = min,
                            Idetopcom = opcom,
                            Idetfechainifort7d = regRangoIndispXeq != null ? regRangoIndispXeq.Evenini : null,
                            Idetfechafinfort7d = regRangoIndispXeq != null ? regRangoIndispXeq.Evenfin : null,
                            Idetfechainiprog7d = regRangoIndispXeq != null ? regRangoIndispXeq.Eveniniprog : null,
                            Idetfechafinprog7d = regRangoIndispXeq != null ? regRangoIndispXeq.Evenfinprog : null,
                        });
                    }
                }
            }

            return listaReporteDet;
        }

        /// <summary>
        /// Replicar indisponibilidad de la unidad a su incremental
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="listaUnidad"></param>
        /// <param name="listaDetProcesado"></param>
        /// <returns></returns>
        public List<IndReporteDetDTO> AgregarDetalleCuadroIncremental(int cuadro, List<EqEquipoDTO> listaUnidad, List<IndReporteDetDTO> listaDetProcesado)
        {
            List<IndReporteDetDTO> listaDetAdicional = new List<IndReporteDetDTO>();

            if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro1 || cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
            {
                var listaEqIncremental = listaUnidad.Where(x => x.Grupoincremental == 1).ToList();

                foreach (var reg in listaEqIncremental)
                {
                    int equicodi = reg.Equicodi;
                    int grupocodi = reg.Grupopadre;
                    int grupocodiIncr = reg.Grupocodi ?? 0;

                    List<IndReporteDetDTO> listaDetXeq = listaDetProcesado.Where(x => x.Equicodi == equicodi && x.Grupocodi == grupocodi).ToList();
                    foreach (var regDet in listaDetXeq)
                    {
                        IndReporteDetDTO regDetClone = (IndReporteDetDTO)regDet.Clone();
                        regDetClone.Grupocodi = grupocodiIncr;

                        listaDetAdicional.Add(regDetClone);
                    }
                }
            }

            return listaDetAdicional;
        }

        /// <summary>
        /// Generar total Ind. Reporte
        /// </summary>
        /// <param name="correlativo"></param>
        /// <param name="listaReporteDet"></param>
        /// <param name="listaUnidades"></param>
        /// <param name="famcodi"></param>
        /// <param name="tieneOpComercial"></param>
        /// <returns></returns>
        public List<IndReporteTotalDTO> GenerarTotal(int correlativo, ref List<IndReporteDetDTO> listaReporteDet, List<EqEquipoDTO> listaUnidades, int cuadro, int famcodi, string tieneOpComercial)
        {
            List<IndReporteTotalDTO> listaTotal = new List<IndReporteTotalDTO>();

            List<EqEquipoDTO> listaUnidadInput = listaReporteDet.DistinctBy(x => new { x.Equicodi, x.Grupocodi })
                                        .Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi.Value, Grupocodi = x.Grupocodi }).ToList();
            List<EqEquipoDTO> listaUnidadConData = new List<EqEquipoDTO>();

            int idTotal = correlativo;
            foreach (var regUnidadData in listaUnidadInput)
            {
                EqEquipoDTO regUnidad = listaUnidades.Find(x => x.Equicodi == regUnidadData.Equicodi && x.Grupocodi == regUnidadData.Grupocodi);
                if (regUnidad != null)
                {
                    if (regUnidad.Grupocodi == 304)
                    { }
                    string flagIndispProg = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiProg);
                    string flagIndispEjec = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiEjec);

                    //verificar que el día detalle tenga operacion comercial
                    List<IndReporteDetDTO> lIF = listaReporteDet.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Idettipoindisp == flagIndispEjec).OrderBy(x => x.Idethoraini).ToList();
                    List<IndReporteDetDTO> lIP = listaReporteDet.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Idettipoindisp == flagIndispProg).OrderBy(x => x.Idethoraini).ToList();

                    foreach (var regi in lIF)
                    {
                        regi.Itotcodi = idTotal;
                        regi.Emprcodi = regUnidad.Emprcodi ?? 0;
                        regi.Idetincremental = regUnidad.Grupoincremental;
                        regi.Equipadre = regUnidad.Equipadre ?? 0;
                        regi.Idetopcom = tieneOpComercial;

                        if (ConstantesAppServicio.SI == tieneOpComercial)
                        {
                            bool diaTieneOC = false;
                            if ((regUnidad.Equifechiniopcom <= regi.Idethoraini.Value.Date && regi.Idethoraini.Value.Date <= regUnidad.Equifechfinopcom)
                                || (regUnidad.Equifechiniopcom <= regi.Idethoraini.Value.Date && regUnidad.Equifechfinopcom == null)) diaTieneOC = true;

                            regi.Idetopcom = diaTieneOC ? ConstantesAppServicio.SI : ConstantesAppServicio.NO;
                        }
                    }
                    foreach (var regi in lIP)
                    {
                        regi.Itotcodi = idTotal;
                        regi.Emprcodi = regUnidad.Emprcodi ?? 0;
                        regi.Idetincremental = regUnidad.Grupoincremental;
                        regi.Equipadre = regUnidad.Equipadre ?? 0;
                        regi.Idetopcom = tieneOpComercial;

                        if (ConstantesAppServicio.SI == tieneOpComercial)
                        {
                            bool diaTieneOC = false;
                            if ((regUnidad.Equifechiniopcom <= regi.Idethoraini.Value.Date && regi.Idethoraini.Value.Date <= regUnidad.Equifechfinopcom)
                                || (regUnidad.Equifechiniopcom <= regi.Idethoraini.Value.Date && regUnidad.Equifechfinopcom == null)) diaTieneOC = true;

                            regi.Idetopcom = diaTieneOC ? ConstantesAppServicio.SI : ConstantesAppServicio.NO;
                        }
                    }

                    lIF = lIF.Where(x => x.Idetopcom == tieneOpComercial).ToList();
                    lIP = lIP.Where(x => x.Idetopcom == tieneOpComercial).ToList();

                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = famcodi,
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre.Value,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = regUnidad.UnidadnombPR25,
                        Itotminif = lIF.Sum(y => y.Idetmin),
                        Itotminip = lIP.Sum(y => y.Idetmin),
                        Itotopcom = tieneOpComercial,
                        Itotincremental = regUnidad.Grupoincremental
                    };

                    listaTotal.Add(objUnidad);
                    listaUnidadConData.Add(regUnidad);
                    idTotal++;
                }
            }

            //obtener unidades que no tuvieron Indisponibilidades pero si son unidades validas durante el periodo
            List<EqEquipoDTO> listaUnidadesSinIndisp = listaUnidades.Except(listaUnidadConData).ToList();

            foreach (var regEq in listaUnidadesSinIndisp)
            {
                string flagIndispProg = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiProg);
                string flagIndispEjec = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiEjec);

                List<IndReporteDetDTO> lIF = listaReporteDet.Where(x => x.Equicodi == regEq.Equicodi && x.Idettipoindisp == flagIndispEjec).OrderBy(x => x.Idethoraini).ToList();
                List<IndReporteDetDTO> lIP = listaReporteDet.Where(x => x.Equicodi == regEq.Equicodi && x.Idettipoindisp == flagIndispProg).OrderBy(x => x.Idethoraini).ToList();

                foreach (var regi in lIF)
                {
                    regi.Itotcodi = idTotal;
                    regi.Emprcodi = regEq.Emprcodi ?? 0;
                    regi.Equipadre = regEq.Equipadre ?? 0;
                    regi.Idetopcom = tieneOpComercial;
                }
                foreach (var regi in lIP)
                {
                    regi.Itotcodi = idTotal;
                    regi.Emprcodi = regEq.Emprcodi ?? 0;
                    regi.Equipadre = regEq.Equipadre ?? 0;
                    regi.Idetopcom = tieneOpComercial;
                }

                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = famcodi,
                    Emprcodi = regEq.Emprcodi.Value,
                    Equipadre = regEq.Equipadre.Value,
                    Grupocodi = regEq.Grupocodi ?? 0,
                    Equicodi = regEq.Equicodi,
                    Itotunidadnomb = regEq.UnidadnombPR25 ?? regEq.Equiabrev,
                    Itotminif = 0,
                    Itotminip = 0,
                    Itotopcom = tieneOpComercial,
                    Itotincremental = regEq.Grupoincremental
                };

                listaTotal.Add(objUnidad);
                idTotal++;
            }

            return listaTotal;
        }

        /// <summary>
        /// Data unificada de un tipo Programado / ejecutado y día especifico
        /// </summary>
        /// <param name="data"></param>
        /// <param name="tipoUnificado">1: Completa, 2: Excluyente</param>
        /// <returns></returns>
        private List<EveManttoDTO> GetListaEveManttoUnificadaByTipo(int cuadro, List<EveManttoDTO> data, int tipoUnificado)
        {
            List<EveManttoDTO> listaIndNuevo = new List<EveManttoDTO>();

            if (ConstantesIndisponibilidades.TipoUnificacionCompleta == tipoUnificado)
            {
                if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
                    listaIndNuevo = UnificarEveManttoXListaEquicodi(data);
                else
                    listaIndNuevo = this.UnificarEveManttoXEquipo(data);
            }

            if (ConstantesIndisponibilidades.TipoUnificacionExcluyente == tipoUnificado)
            {
                var listaejec = data.Where(y => y.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec && y.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();
                var listaprog = data.Where(y => y.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg && y.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();
                var listaejecFict = data.Where(y => y.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec && y.EventoGenerado == ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();
                var listaprogFict = data.Where(y => y.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg && y.EventoGenerado == ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();

                listaIndNuevo.AddRange(UnificarEveManttoXEquipo(listaejec));
                listaIndNuevo.AddRange(UnificarEveManttoXEquipo(listaprog));
                listaIndNuevo.AddRange(UnificarEveManttoXEquipo(listaejecFict));
                listaIndNuevo.AddRange(UnificarEveManttoXEquipo(listaprogFict));
            }

            return listaIndNuevo;
        }

        #endregion

        #region web Handson y excel

        /// <summary>
        /// Generar reporte excel web por versión de reporte
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="centralIntegrante"></param>
        /// <param name="empresa"></param>
        /// <param name="central"></param>
        /// <param name="famcodi"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="handsonProg"></param>
        /// <param name="handsonFort"></param>
        /// <param name="htmlReporteConsolidado"></param>
        public void GenerarWebXVersionReporte(int irptcodi, string centralIntegrante, string empresa, string central, int famcodi, DateTime fechaIni, DateTime fechaFin
            , out HandsonModel handsonProg, out HandsonModel handsonFort, out string htmlReporteConsolidado, out string htmlCambios)
        {
            this.GenerarReporteCuadroXVersionReporte(irptcodi, true, centralIntegrante, empresa, central, famcodi, fechaIni, fechaFin
                                                , out handsonProg, out handsonFort, out htmlReporteConsolidado
                                                , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                , out List<IndReporteTotalDTO> listaReptHoja
                                                , out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld);

            List<IndReporteDetDTO> listaCambios = ListarCambiosCuadro1(listaReptHoja, listaRepdetHoja, listaRepdetHojaOld);
            htmlCambios = GenerarHtmlListadoCambiosCuadro1(listaCambios);
        }

        /// <summary>
        /// Generar reporte cuadro por version de reporte
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="centralIntegrante"></param>
        /// <param name="empresa"></param>
        /// <param name="central"></param>
        /// <param name="famcodi"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="handsonProg"></param>
        /// <param name="handsonFort"></param>
        /// <param name="htmlReporteConsolidado"></param>
        /// <param name="regVersion"></param>
        /// <param name="regPeriodo"></param>
        /// <param name="regCuadro"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHoja"></param>
        private void GenerarReporteCuadroXVersionReporte(int irptcodi, bool incluirDetalleMantto, string centralIntegrante, string empresa, string central, int famcodi, DateTime fechaIni, DateTime fechaFin
                                                    , out HandsonModel handsonProg, out HandsonModel handsonFort
                                                    , out string htmlReporteConsolidado
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld)
        {
            regVersion = this.GetByIdIndReporte(irptcodi);
            regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            var regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, new List<int>() { famcodi }, centralIntegrante, empresa, central
                , out List<IndReporteTotalDTO> listaReptotOut, out List<IndReporteDetDTO> listaRepdetOut
                , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral);

            //cuadro 1,2,4,7
            this.SetDescripcionIndispMayor1DiaXEq(ref listaReptotOut, listaRepdetOut);

            //cuadro 2
            if (regCuadro.Icuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro2)
                this.SetValorPeRptCuadro2(listaReptotOut);

            listaRepdetHojaOld = new List<IndReporteDetDTO>();
            if (regVersion.Irptreporteold > 0)
            {
                this.ListaDataXVersionReporte(regVersion.Irptreporteold.Value, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                    , out List<IndReporteTotalDTO> listaReptotOut2, out listaRepdetHojaOld
                    , out List<SiEmpresaDTO> listaEmpresa2, out List<EqEquipoDTO> listaCentral2);
            }

            List<EveManttoDTO> listaManttoBD = new List<EveManttoDTO>();
            List<IndInsumoLogDTO> listaLogInsumo = new List<IndInsumoLogDTO>();
            List<ResultadoValidacionAplicativo> listaMensaje = new List<ResultadoValidacionAplicativo>();
            if (incluirDetalleMantto && regVersion.Irpttipo != ConstantesIndisponibilidades.TipoReporteHistorico)
            {
                this.ListarInsumoEveMantto(regCuadro.Icuacodi, regVersion.Irecafechaini.AddDays(-7), regVersion.Irecafechafin, famcodi, out listaManttoBD
                    , out listaLogInsumo, out listaMensaje);

            }

            //ver cambios respecto a anterior version
            int rptcodiAnterior = GetCodigoReporteAnteriorXCuadro(irptcodi);
            List<IndReporteTotalDTO> listaAllReptotOld = GetByCriteriaIndReporteTotals(rptcodiAnterior);
            List<IndReporteDetDTO> listaAllRepdetOld = GetByCriteriaIndReporteDets(rptcodiAnterior);

            if (regCuadro.Icuacodi != ConstantesIndisponibilidades.ReportePR25Cuadro2)
            {
                SetearDescripcionXIndisp(ConstantesIndisponibilidades.INDFortuitaTotal, incluirDetalleMantto, listaReptotOut, ref listaRepdetOut, fechaIni, fechaFin, listaManttoBD, listaAllRepdetOld);
                SetearDescripcionXIndisp(ConstantesIndisponibilidades.INDProgramadaTotal, incluirDetalleMantto, listaReptotOut, ref listaRepdetOut, fechaIni, fechaFin, listaManttoBD, listaAllRepdetOld);

                //Salidas
                handsonFort = GetHandsonXVersionReporte(ConstantesIndisponibilidades.INDFortuitaTotal, regCuadro.Tgenernomb, listaReptotOut, ref listaRepdetOut
                                                        , fechaIni, fechaFin);

                handsonProg = GetHandsonXVersionReporte(ConstantesIndisponibilidades.INDProgramadaTotal, regCuadro.Tgenernomb, listaReptotOut, ref listaRepdetOut
                                                        , fechaIni, fechaFin);
            }
            else
            {
                SetearDescripcionXIndisp(ConstantesIndisponibilidades.INDFortuitaParcial, incluirDetalleMantto, listaReptotOut, ref listaRepdetOut, fechaIni, fechaFin, listaManttoBD, listaAllRepdetOld);
                SetearDescripcionXIndisp(ConstantesIndisponibilidades.INDProgramadaParcial, incluirDetalleMantto, listaReptotOut, ref listaRepdetOut, fechaIni, fechaFin, listaManttoBD, listaAllRepdetOld);

                //Salidas
                handsonFort = GetHandsonXVersionReporteCuadro2(ConstantesIndisponibilidades.INDFortuitaParcial, regCuadro.Tgenernomb, listaReptotOut, ref listaRepdetOut
                                                            , fechaIni, fechaFin);

                handsonProg = GetHandsonXVersionReporteCuadro2(ConstantesIndisponibilidades.INDProgramadaParcial, regCuadro.Tgenernomb, listaReptotOut, ref listaRepdetOut
                                                            , fechaIni, fechaFin);
            }

            htmlReporteConsolidado = GenerarTablaHtmlListadoReporteConsolidado(regCuadro.Icuacodi, listaReptotOut);

            listaReptHoja = listaReptotOut;
            listaRepdetHoja = listaRepdetOut;
        }

        private void SetearDescripcionXIndisp(string tipoIndisp, bool incluirDescMantto, List<IndReporteTotalDTO> listaTot, ref List<IndReporteDetDTO> listaAllDet
            , DateTime fechaIni, DateTime fechaFin, List<EveManttoDTO> listaManttoBD, List<IndReporteDetDTO> listaAllRepdetOld)
        {
            List<IndReporteDetDTO> listaDet = listaAllDet.Where(x => x.Idettipoindisp == tipoIndisp).ToList();
            List<IndReporteDetDTO> listaDetOld = listaAllRepdetOld.Where(x => x.Idettipoindisp == tipoIndisp).ToList();

            int numDias = (fechaFin - fechaIni).Days + 1;

            foreach (var regTotalX in listaTot)
            {
                if (regTotalX.Equicodi == 13418)
                { }
                //IndReporteTotalDTO regTotalX = listaTot.Find(x => x.Emprcodi == regCentral.Emprcodi && x.Equipadre == regCentral.Equipadre && x.Equicodi == regEq.Equicodi);
                List<EveManttoDTO> listaManttoXEq = listaManttoBD.Where(x => (regTotalX.EsUnaUnidadXCentral && x.Equipadre == regTotalX.Equipadre)
                                                                            || (!regTotalX.EsUnaUnidadXCentral && (x.Equicodi == regTotalX.Equicodi || x.Equicodi == regTotalX.Equipadre))).ToList();

                if (regTotalX == null)
                { }
                List<IndReporteDetDTO> listaDetXTot = listaDet.Where(x => x.Grupocodi == regTotalX.Grupocodi && x.Equicodi == regTotalX.Equicodi).OrderBy(x => x.Idethoraini).ThenByDescending(x => x.Idetpr).ToList();
                List<IndReporteDetDTO> listaDetXTotOld = listaDetOld.Where(x => x.Grupocodi == regTotalX.Grupocodi && x.Equicodi == regTotalX.Equicodi).OrderBy(x => x.Idethoraini).ThenByDescending(x => x.Idetpr).ToList();

                var listaDiaEjeMayor1 = listaDetXTot.GroupBy(c => c.Idethoraini.Value.Date).Where(grp => grp.Count() > 1).Select(grp => new { Fecha = grp.Key, Total = grp.Count() });
                int maxEje = listaDiaEjeMayor1.Any() ? listaDiaEjeMayor1.Max(x => x.Total) : 0;
                int numEjeXUnidad = maxEje > 0 ? maxEje : 1;

                for (int eje = 0; eje < numEjeXUnidad; eje++)
                {
                    List<IndReporteDetDTO> listaAQuitar = new List<IndReporteDetDTO>(), listaAQuitarOld = new List<IndReporteDetDTO>();

                    //foreach de dias del mes
                    for (int col = 0; col < numDias; col++)
                    {
                        DateTime fechaXDia = fechaIni.AddDays(col);

                        IndReporteDetDTO regDetEqXDia = listaDetXTot.Find(x => x.Idethoraini.Value.Date == fechaXDia);
                        IndReporteDetDTO regDetEqXDiaOld = listaDetXTotOld.Find(x => x.Idethoraini.Value.Date == fechaXDia);

                        if (regDetEqXDia != null)
                        {
                            List<EveManttoDTO> listaEveXEqXDia = listaManttoXEq.Where(x => x.Evenini.Value.Date == fechaXDia).ToList();
                            GetDescripcionIndisponibilidad(incluirDescMantto, regDetEqXDia, listaEveXEqXDia, out string strDesc, out string strFormato);

                            regDetEqXDia.CeldaDescripcion = strDesc;
                            regDetEqXDia.CeldaFormato = strFormato;
                            regDetEqXDia.NumEje = eje;
                        }


                        if (regDetEqXDia != null)
                            listaAQuitar.Add(regDetEqXDia);
                        if (regDetEqXDiaOld != null)
                            listaAQuitarOld.Add(regDetEqXDiaOld);
                    }

                    foreach (var regQuitar in listaAQuitar)
                        listaDetXTot.Remove(regQuitar);
                    foreach (var regQuitar in listaAQuitarOld)
                        listaDetXTotOld.Remove(regQuitar);
                }

            }
        }

        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="tipoIndisp"></param>
        /// <param name="tgenernomb"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaAllDet"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaEquipo"></param>
        /// <param name="listaManttoBD"></param>
        /// <returns></returns>
        private HandsonModel GetHandsonXVersionReporte(string tipoIndisp, string tgenernomb, List<IndReporteTotalDTO> listaTot, ref List<IndReporteDetDTO> listaAllDet
                                                        , DateTime fechaIni, DateTime fechaFin)
        {
            int numDias = (fechaFin - fechaIni).Days + 1;

            List<IndReporteDetDTO> listaDet = listaAllDet.Where(x => x.Idettipoindisp == tipoIndisp).ToList();

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "EMPRESA", IsMerge = 1, Ancho = 160, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "T. Generación", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "CENTRAL", IsMerge = 1, Ancho = 140, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //equicodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //grupocodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "UNIDAD", IsMerge = 1, Ancho = 155, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 0, Ancho = 70, AlineacionHorizontal = "Centro", });

            DateTime fechaXDia = fechaIni.AddDays(-1);
            for (int x = 1; x <= numDias; x++)
            {
                fechaXDia = fechaXDia.AddDays(1);
                listaCabecera.Add(new CabeceraRow() { TituloRow = fechaXDia.ToString("dd-MMM"), IsMerge = 0, Ancho = 50, AlineacionHorizontal = "Centro", });
            }
            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = true,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            int numColAntesdeFecha = 7;
            int numCol = numColAntesdeFecha + numDias;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();
            List<string[]> listaDescripcionHandson = new List<string[]>();
            List<string[]> listaFormatoHtmlHandson = new List<string[]>();

            List<CeldaCambios> arrCambioCells = new List<CeldaCambios>();

            foreach (var regTotalX in listaTot)
            {
                if (regTotalX.Equicodi == 178)
                { }

                if (regTotalX == null)
                { }
                List<IndReporteDetDTO> listaDetXEq = listaDet.Where(x => x.Grupocodi == regTotalX.Grupocodi && x.Equicodi == regTotalX.Equicodi).OrderBy(x => x.Idethoraini).ToList();

                int numEjeXUnidad = listaDetXEq.Any() ? listaDetXEq.Max(x => x.NumEje) : 0;
                numEjeXUnidad += 1;

                for (int eje = 0; eje < numEjeXUnidad; eje++)
                {
                    var listaDetXTot = listaDetXEq.Where(x => x.NumEje == eje).ToList();

                    for (int z = 0; z < 3; z++)
                    {
                        string[] matriz = new string[numCol];
                        matriz[0] = regTotalX.Emprnomb; //EMPRESA
                        matriz[1] = tgenernomb; //oculto
                        matriz[2] = regTotalX.Central; //CENTRAL
                        matriz[3] = regTotalX.Equicodi.ToString(); //oculto
                        matriz[4] = regTotalX.Grupocodi.ToString(); //oculto
                        string[] matrizDesc = new string[numCol];
                        string[] matrizFmt = new string[numCol];

                        switch (z)
                        {
                            case 0:
                                matriz[5] = regTotalX.Itotunidadnomb;
                                matriz[6] = "Hora Inicio";
                                //matriz[4] = regEq.Equinomb;
                                //matriz[5] = "Hora Inicio";
                                break;
                            case 1:
                                matriz[5] = regTotalX.Itotunidadnomb;
                                matriz[6] = "Hora Fin";
                                break;
                            case 2:
                                matriz[5] = tipoIndisp == ConstantesIndisponibilidades.INDFortuitaTotal ? "T ind fortuita" : "T ind progra.";
                                matriz[6] = "Minutos";
                                break;
                        }

                        //foreach de dias del mes
                        fechaXDia = fechaIni.AddDays(-1);
                        for (int col = numColAntesdeFecha; col < numCol; col++)
                        {
                            fechaXDia = fechaXDia.AddDays(1);

                            IndReporteDetDTO regDetEqXDia = listaDetXTot.Find(x => x.Idethoraini.Value.Date == fechaXDia);

                            switch (z)
                            {
                                case 0: matriz[col] = (regDetEqXDia != null) ? regDetEqXDia.IdethorainiDesc : ""; break;
                                case 1: matriz[col] = (regDetEqXDia != null) ? regDetEqXDia.IdethorafinDesc : ""; break;
                                case 2: matriz[col] = (regDetEqXDia != null) ? regDetEqXDia.Idetmin.Value.ToString() : ""; break;
                            }

                            if (z == 2)
                            {
                                //setear lista de manttos de la indisponibilidad 
                                if (regDetEqXDia != null)
                                {
                                    matrizDesc[col] = regDetEqXDia.CeldaDescripcion;
                                    matrizFmt[col] = regDetEqXDia.CeldaFormato;
                                }

                                ////setear cambio
                                //if ((regDetEqXDia == null && regDetEqXDiaOld != null) || (regDetEqXDia != null && regDetEqXDiaOld == null))
                                //{
                                //    //arrCambioCells.Add(new CeldaCambios() { Row = numFilaActual-2, Col = col });
                                //    //arrCambioCells.Add(new CeldaCambios() { Row = numFilaActual-1, Col = col });
                                //    arrCambioCells.Add(new CeldaCambios() { Row = numFilaActual, Col = col });
                                //}
                            }
                        }

                        listaDataHandson.Add(matriz);
                        listaDescripcionHandson.Add(matrizDesc);
                        listaFormatoHtmlHandson.Add(matrizFmt);
                        numFilaActual++;
                    }
                }
            }

            int numFil = listaDataHandson.Count;

            List<CeldaMerge> listaMerge = new List<CeldaMerge>();
            for (int i = 0; i < 5; i++) //agrupar las primeras 4 columnas (EMPRESA, TIPO GENERACION, CENTRAL, EQUICODI)
            {
                for (int fila = 0; fila < numFil; fila = fila + 3) //iniciar desde la segunda fila
                {
                    CeldaMerge cel = new CeldaMerge();
                    cel.col = i;
                    cel.row = fila;
                    cel.colspan = 1;
                    cel.rowspan = 3;
                    listaMerge.Add(cel);
                }
            }

            //agrupar unidades
            for (int fila = 0; fila < numFil; fila = fila + 3) //iniciar desde la segunda fila
            {
                CeldaMerge cel = new CeldaMerge();
                cel.col = 5;
                cel.row = fila;
                cel.colspan = 1;
                cel.rowspan = 2;
                listaMerge.Add(cel);
            }

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.ListaExcelDescripcion = listaDescripcionHandson.ToArray();
            handson.ListaExcelFormatoHtml = listaFormatoHtmlHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return handson;
        }

        /// <summary>
        /// Generar Tabla Reporte Consolidado
        /// </summary>
        /// <param name="listaReptot"></param>
        /// <returns></returns>
        private string GenerarTablaHtmlListadoReporteConsolidado(int cuadro, List<IndReporteTotalDTO> listaReptot)
        {
            StringBuilder str = new StringBuilder();
            str.AppendFormat("<table id='tabla_reporte_consolidado{0}' class='pretty tabla-adicional tabla_rpt_consolidado' border='0' cellspacing='0' width='100%'>", cuadro);

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style=''>Empresa</th>");
            str.Append("<th style=''>Central</th>");
            str.Append("<th style=''>Unidad</th>");

            if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro1)
            {
                str.Append("<th style=''>Fortuitas <br/>(Minutos) </th>");
                str.Append("<th style=''>Programados <br/>(Minutos)</ th>");
            }
            if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
            {
                str.Append("<th style=''>Parciales Fortuitas <br/>(Minutos) </th>");
                str.Append("<th style=''>Parciales Programados <br/>(Minutos)</ th>");
            }
            if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro4)
            {
                str.Append("<th style=''>Fortuitas <br/>(Minutos) </th>");
                str.Append("<th style=''>Programados <br/>(Minutos)</ th>");
            }
            str.Append("<th style=''>Descripción <br/> Indisponibilidad fortuita de duración máxima de 7 días</ th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var reg in listaReptot.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Itotunidadnomb).ToList())
            {
                str.Append("<tr>");

                str.AppendFormat("<td class='empr_{1}' style='text-align: center'>{0}</td>", reg.Emprnomb, reg.Emprcodi);
                str.AppendFormat("<td class='central_{1}' style='text-align: center'>{0}</td>", reg.Central, reg.Equipadre);
                str.AppendFormat("<td class='unidad_eq_{1}_grupo_{2}' style='text-align: center'>{0}</td>", reg.Itotunidadnomb, reg.Equicodi, reg.Grupocodi);
                if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro1)
                {
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.ItotminifDesc);
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.ItotminipDesc);
                }
                if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
                {
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.ItotminifparcialDesc);
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.ItotminipparcialDesc);
                }
                if (cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro4)
                {
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.ItotminifDesc);
                    str.AppendFormat("<td class='' style='text-align: center'>{0}</td>", reg.ItotminipDesc);
                }
                str.AppendFormat("<td class='' style='text-align: left'>{0}</td>", reg.ListaDesIndispMayorA1Dia != null ? string.Join("<br/>", reg.ListaDesIndispMayorA1Dia) : string.Empty);

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();
        }

        /// <summary>
        /// Generar hoja excel de Cuadro reporte plantilla térmico
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="esMacro"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="regCuadro"></param>
        /// <param name="regPeriodo"></param>
        /// <param name="regVersion"></param>
        /// <param name="listaReptHoja"></param>
        private void GenerarHojaExcelCuadroReportePlantillaTermico(ExcelPackage xlPackage, string nameWS, bool esMacro, int rowIni, int colIni, string titulo, string subtitulo
                                            , IndCuadroDTO regCuadro, IndPeriodoDTO regPeriodo, IndReporteDTO regVersion, List<IndReporteTotalDTO> listaReptHoja, List<IndReporteTotalDTO> listaReptHoja2)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            if (esMacro)
                xlPackage.Workbook.CreateVBAProject();

            string font = "TradeGothic Bold";
            string colorCeldaFijo = "#4F81BD";
            string colorCeldaCuerpo = "#DCE6F1";
            string colorTextoFijo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorTextoIndisp = "#9C0055";
            string colorCeldaIndisp = "#FFC7CE";
            string colorLinea = "#FFFFFF";

            #region  Filtros y Cabecera

            int colEmpresa = colIni;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colFortuitas = colUnidad + 1;
            int colProgramadas = colFortuitas + 1;
            int colParcialFortuita = colProgramadas + 1;
            int colParcialProgramada = colParcialFortuita + 1;

            ws.Cells[rowIni, colEmpresa].Value = EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(); //NOVIEMBRE
            UtilExcel.SetFormatoCelda(ws, rowIni, colEmpresa, rowIni, colEmpresa, "Centro", "Izquierda", "#A6A6A6", "#FFFFFF", font, 12, true);

            ws.Cells[rowIni + 1, colParcialProgramada].Value = regVersion.Irecainforme; //INFORME COES/D/DO/SME-INF-180-2020
            UtilExcel.SetFormatoCelda(ws, rowIni + 1, colParcialProgramada, rowIni + 1, colParcialProgramada, "Centro", "Derecha", "#000000", "#FFFFFF", "Arial", 8, false);

            ws.Cells[rowIni + 2, colUnidad].Value = regCuadro.Icuanombre; //CUADRO N°1
            UtilExcel.SetFormatoCelda(ws, rowIni + 2, colUnidad, rowIni + 2, colUnidad, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 20, false);

            ws.Cells[rowIni + 5, colCentral].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); //REPORTE DE INDISPONIBILIDADES - NOVIEMBRE 2020
            UtilExcel.SetFormatoCelda(ws, rowIni + 5, colCentral, rowIni + 5, colCentral, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 13, false);

            ws.Cells[rowIni + 6, colCentral].Value = subtitulo;
            UtilExcel.SetFormatoCelda(ws, rowIni + 6, colCentral, rowIni + 6, colCentral, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 13, false);

            int rowEmpresa = rowIni + 8;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colFortuitas].Value = "Fortuitas\n(Minutos)";
            ws.Cells[rowEmpresa, colProgramadas].Value = "Programados\n(Minutos)";
            ws.Cells[rowEmpresa, colParcialFortuita].Value = "Parciales Fortuitas\n(Minutos)";
            ws.Cells[rowEmpresa, colParcialProgramada].Value = "Parciales Programados\n(Minutos)";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colParcialProgramada, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 8, false, true);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colEmpresa, rowEmpresa, colEmpresa, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colCentral, rowEmpresa, colCentral, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colUnidad, rowEmpresa, colUnidad, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colFortuitas, rowEmpresa, colFortuitas, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colProgramadas, rowEmpresa, colProgramadas, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colParcialFortuita, rowEmpresa, colParcialFortuita, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colParcialProgramada, rowEmpresa, colParcialProgramada, colorLinea);

            double factorAncho = 0.85;
            ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = ConstantesIndisponibilidades.RptCuadro1AnchoEmpresa * factorAncho;
            ws.Column(colCentral).Width = ConstantesIndisponibilidades.RptCuadro1AnchoCentral * factorAncho;
            ws.Column(colUnidad).Width = ConstantesIndisponibilidades.RptCuadro1AnchoUnidad * factorAncho;
            ws.Column(colFortuitas).Width = 16 * factorAncho;
            ws.Column(colProgramadas).Width = 16 * factorAncho;
            ws.Column(colParcialFortuita).Width = 16 * factorAncho;
            ws.Column(colParcialProgramada).Width = 16 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa;
            int rowIniRangoEmpresa = rowData + 1;
            int rowIniRangoCentral = rowData + 1;
            string empresaActual, empresaSiguiente;
            string centralActual, centralSiguiente;

            for (int i = 0; i < listaReptHoja.Count; i++)
            {
                var reg = listaReptHoja[i];
                var regParcial = listaReptHoja2.Find(x => x.Equicodi == reg.Equicodi && x.Grupocodi == reg.Grupocodi);

                rowData++;
                empresaActual = reg.Emprnomb;
                empresaSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Emprnomb : string.Empty;
                centralActual = reg.Central;
                centralSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Central : string.Empty;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Izquierda", colorTextoFijo, colorCeldaFijo, font, 8, false, true);

                ws.Cells[rowData, colCentral].Value = reg.Central;
                ws.Cells[rowData, colUnidad].Value = reg.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colCentral, rowData, colUnidad, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, true);

                if (reg.Itotminif > 0)
                {
                    ws.Cells[rowData, colFortuitas].Value = reg.Itotminif;
                    UtilExcel.SetFormatoCelda(ws, rowData, colFortuitas, rowData, colFortuitas, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colFortuitas, rowData, colFortuitas, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colFortuitas, rowData, colFortuitas, 0);
                }
                else
                {
                    ws.Cells[rowData, colFortuitas].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colFortuitas, rowData, colFortuitas, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colFortuitas, rowData, colFortuitas, 2);
                }

                if (reg.Itotminip > 0)
                {
                    ws.Cells[rowData, colProgramadas].Value = reg.Itotminip;
                    UtilExcel.SetFormatoCelda(ws, rowData, colProgramadas, rowData, colProgramadas, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colProgramadas, rowData, colProgramadas, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colProgramadas, rowData, colProgramadas, 0);
                }
                else
                {
                    ws.Cells[rowData, colProgramadas].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colProgramadas, rowData, colProgramadas, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colProgramadas, rowData, colProgramadas, 2);
                }

                decimal? minifP = regParcial != null ? regParcial.Itotminifparcial : null;
                decimal? minipP = regParcial != null ? regParcial.Itotminipparcial : null;

                if (minifP > 0)
                {
                    ws.Cells[rowData, colParcialFortuita].Value = minifP;
                    UtilExcel.SetFormatoCelda(ws, rowData, colParcialFortuita, rowData, colParcialFortuita, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colParcialFortuita, rowData, colParcialFortuita, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colParcialFortuita, rowData, colParcialFortuita, 0);
                }
                else
                {
                    ws.Cells[rowData, colParcialFortuita].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colParcialFortuita, rowData, colParcialFortuita, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colParcialFortuita, rowData, colParcialFortuita, 2);
                }

                if (minipP > 0)
                {
                    ws.Cells[rowData, colParcialProgramada].Value = minipP;
                    UtilExcel.SetFormatoCelda(ws, rowData, colParcialProgramada, rowData, colParcialProgramada, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colParcialProgramada, rowData, colParcialProgramada, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colParcialProgramada, rowData, colParcialProgramada, 0);
                }
                else
                {
                    ws.Cells[rowData, colParcialProgramada].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colParcialProgramada, rowData, colParcialProgramada, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colParcialProgramada, rowData, colParcialProgramada, 2);
                }

                //border empresa

                if (empresaActual != empresaSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoEmpresa, colEmpresa, rowData, colEmpresa, colorLinea);
                    rowIniRangoEmpresa = rowData + 1;
                }

                //border central
                if (centralActual != centralSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoCentral, colCentral, rowData, colCentral, colorLinea);
                    rowIniRangoCentral = rowData + 1;
                }

                //unidad
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colUnidad, rowData, colUnidad, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colFortuitas, rowData, colFortuitas, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colProgramadas, rowData, colProgramadas, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colParcialFortuita, rowData, colParcialFortuita, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colParcialProgramada, rowData, colParcialProgramada, colorLinea);
            }

            #endregion

            HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConstantesAppServicio.EnlaceLogoCoes);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());

            UtilExcel.AddImage(ws, img, rowIni + 1, colIni);

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colCentral].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);
            ws.View.ZoomScale = 85;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;

        }


        /// <summary>
        /// Generar hoja excel de Cuadro reporte plantilla hídrico
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="esMacro"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="titulo"></param>
        /// <param name="subtitulo"></param>
        /// <param name="regCuadro"></param>
        /// <param name="regPeriodo"></param>
        /// <param name="regVersion"></param>
        /// <param name="listaReptHoja"></param>
        public void GenerarHojaExcelCuadroReportePlantillaHidrico(ExcelPackage xlPackage, string nameWS, bool esMacro, int rowIni, int colIni, string titulo, string subtitulo
                                            , IndCuadroDTO regCuadro, IndPeriodoDTO regPeriodo, IndReporteDTO regVersion, List<IndReporteTotalDTO> listaReptHoja)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            if (esMacro)
                xlPackage.Workbook.CreateVBAProject();

            string font = "TradeGothic Bold";
            string colorCeldaFijo = "#4F81BD";
            string colorCeldaCuerpo = "#DCE6F1";
            string colorTextoFijo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorTextoIndisp = "#9C0055";
            string colorCeldaIndisp = "#FFC7CE";
            string colorLinea = "#FFFFFF";

            #region  Filtros y Cabecera

            int colEmpresa = colIni;
            int colCentral = colEmpresa + 1;
            int colBlanco1 = colCentral + 1;
            int colUnidad = colBlanco1 + 1;
            int colBlanco2 = colUnidad + 1;
            int colBlanco3 = colBlanco2 + 1;
            int colProgramadas = colBlanco3 + 1;

            ws.Cells[rowIni, colProgramadas].Value = regVersion.Irecainforme; //INFORME COES/D/DO/SME-INF-180-2020
            UtilExcel.SetFormatoCelda(ws, rowIni, colProgramadas, rowIni, colProgramadas, "Centro", "Derecha", "#000000", "#FFFFFF", "Arial", 8, false);

            ws.Cells[rowIni + 1, colCentral].Value = regCuadro.Icuanombre; //CUADRO N°4
            UtilExcel.SetFormatoCelda(ws, rowIni + 1, colCentral, rowIni + 1, colCentral, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 20, false);

            ws.Cells[rowIni + 4, colEmpresa].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); //REPORTE DE INDISPONIBILIDADES - NOVIEMBRE 2020
            UtilExcel.SetFormatoCelda(ws, rowIni + 4, colEmpresa, rowIni + 4, colEmpresa, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 15, true);

            ws.Cells[rowIni + 5, colCentral].Value = subtitulo;
            UtilExcel.SetFormatoCelda(ws, rowIni + 5, colCentral, rowIni + 5, colCentral, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 13, false);

            int rowEmpresa = rowIni + 7;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colProgramadas].Value = "Programados\n(Minutos)";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colProgramadas, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 8, false, true);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colEmpresa, rowEmpresa, colEmpresa, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colCentral, rowEmpresa, colCentral, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colBlanco1, rowEmpresa, colBlanco1, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colUnidad, rowEmpresa, colUnidad, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colBlanco2, rowEmpresa, colBlanco2, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colBlanco3, rowEmpresa, colBlanco3, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colProgramadas, rowEmpresa, colProgramadas, colorLinea);

            double factorAncho = 0.85;
            ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = 52 * factorAncho;
            ws.Column(colCentral).Width = 35 * factorAncho;
            ws.Column(colBlanco1).Width = 0;
            ws.Column(colUnidad).Width = 16 * factorAncho;
            ws.Column(colBlanco2).Width = 0;
            ws.Column(colBlanco3).Width = 0;
            ws.Column(colProgramadas).Width = 16 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa;
            int rowIniRangoEmpresa = rowData + 1;
            int rowIniRangoCentral = rowData + 1;
            string empresaActual, empresaSiguiente;
            string centralActual, centralSiguiente;

            for (int i = 0; i < listaReptHoja.Count; i++)
            {
                var reg = listaReptHoja[i];

                rowData++;
                empresaActual = reg.Emprnomb;
                empresaSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Emprnomb : string.Empty;
                centralActual = reg.Central;
                centralSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Central : string.Empty;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Izquierda", colorTextoFijo, colorCeldaFijo, font, 8, false, true);

                ws.Cells[rowData, colCentral].Value = reg.Central;
                UtilExcel.SetFormatoCelda(ws, rowData, colCentral, rowData, colCentral, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, true);

                ws.Cells[rowData, colBlanco1].Value = reg.Central;
                UtilExcel.SetFormatoCelda(ws, rowData, colBlanco1, rowData, colBlanco1, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, false);

                ws.Cells[rowData, colUnidad].Value = reg.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colUnidad, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, true);

                ws.Cells[rowData, colBlanco2].Value = reg.Central + reg.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colBlanco2, rowData, colBlanco2, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, false);

                ws.Cells[rowData, colBlanco3].Value = reg.Central + reg.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colBlanco3, rowData, colBlanco3, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, false);

                if (reg.Itotminip > 0)
                {
                    ws.Cells[rowData, colProgramadas].Value = reg.Itotminip;
                    UtilExcel.SetFormatoCelda(ws, rowData, colProgramadas, rowData, colProgramadas, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colProgramadas, rowData, colProgramadas, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colProgramadas, rowData, colProgramadas, 0);
                }
                else
                {
                    ws.Cells[rowData, colProgramadas].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colProgramadas, rowData, colProgramadas, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colProgramadas, rowData, colProgramadas, 2);
                }

                //border empresa

                if (empresaActual != empresaSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoEmpresa, colEmpresa, rowData, colEmpresa, colorLinea);
                    rowIniRangoEmpresa = rowData + 1;
                }

                //border central
                if (centralActual != centralSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoCentral, colCentral, rowData, colCentral, colorLinea);
                    rowIniRangoCentral = rowData + 1;
                }

                //unidad
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colBlanco1, rowData, colBlanco1, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colUnidad, rowData, colUnidad, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colBlanco2, rowData, colBlanco2, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colBlanco3, rowData, colBlanco3, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colProgramadas, rowData, colProgramadas, colorLinea);
            }

            #endregion

            HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConstantesAppServicio.EnlaceLogoCoes);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());

            UtilExcel.AddImage(ws, img, rowIni, colIni);

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colCentral].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);
            ws.View.ZoomScale = 85;

            //el excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;

        }

        public void GenerarRptExcelCuadro1(string ruta, int irptcodi, string centralIntegrante, string empresa, string central, int famcodi, DateTime fechaIni, DateTime fechaFin, out string nameFile)
        {
            this.GenerarReporteCuadroXVersionReporte(irptcodi, true, centralIntegrante, empresa, central, famcodi, fechaIni, fechaFin
                        , out HandsonModel handsonProg, out HandsonModel handsonFort
                        , out string htmlReporteConsolidado, out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                        , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld);

            //Nombre de archivo
            nameFile = string.Format("PR25_Cuadro1_{0}_Version_{1}.xlsm", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCuadroReporteSoloCuadro1(xlPackage, "RESUMEN", true, 1, 2, "                 REPORTE DE INDISPONIBILIDADES - {0} {1}", "                            (CENTRALES TERMOELÉCTRICAS)"
                                                                            , regCuadro, regPeriodo, regVersion, listaReptHoja);
                xlPackage.Save();

                if (regVersion.Irpttipo != ConstantesIndisponibilidades.TipoReporteHistorico)
                {
                    GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "FORTUITA", 2, 1, regCuadro.Tgenernomb, ConstantesIndisponibilidades.INDFortuitaTotal, true, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                    xlPackage.Save();

                    GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "PROGRAMADO", 2, 1, regCuadro.Tgenernomb, ConstantesIndisponibilidades.INDProgramadaTotal, true, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                    xlPackage.Save();
                }
            }
        }

        public void GenerarRptExcelCuadro4(string ruta, int irptcodi, string centralIntegrante, string empresa, string central, int famcodi, DateTime fechaIni, DateTime fechaFin, out string nameFile)
        {
            this.GenerarReporteCuadroXVersionReporte(irptcodi, true, centralIntegrante, empresa, central, famcodi, fechaIni, fechaFin
                        , out HandsonModel handsonProg, out HandsonModel handsonFort
                        , out string htmlReporteConsolidado, out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                        , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld);

            //Nombre de archivo
            nameFile = string.Format("PR25_Cuadro4_{0}_Version_{1}.xlsm", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCuadroReporteSoloCuadro1(xlPackage, "RESUMEN", true, 1, 2, "                 REPORTE DE INDISPONIBILIDADES TOTALES - {0} {1}", "                            (CENTRALES HIDROELÉCTRICAS)"
                                                                            , regCuadro, regPeriodo, regVersion, listaReptHoja);
                xlPackage.Save();

                if (regVersion.Irpttipo != ConstantesIndisponibilidades.TipoReporteHistorico)
                {
                    GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "FORTUITA", 2, 1, regCuadro.Tgenernomb, ConstantesIndisponibilidades.INDFortuitaTotal, true, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                    xlPackage.Save();

                    GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "PROGRAMADO", 2, 1, regCuadro.Tgenernomb, ConstantesIndisponibilidades.INDProgramadaTotal, true, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                    xlPackage.Save();
                }
            }
        }

        /// <summary>
        /// Generar hoja excel cuadro 1
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="regCuadro"></param>
        /// <param name="regPeriodo"></param>
        /// <param name="regVersion"></param>
        /// <param name="listaReptHoja"></param>
        private void GenerarHojaExcelCuadroReporteSoloCuadro1(ExcelPackage xlPackage, string nameWS, bool esMacro, int rowIni, int colIni, string titulo, string subtitulo
                                        , IndCuadroDTO regCuadro, IndPeriodoDTO regPeriodo, IndReporteDTO regVersion, List<IndReporteTotalDTO> listaReptHoja)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            if (esMacro)
                xlPackage.Workbook.CreateVBAProject();

            string font = "TradeGothic Bold";
            string colorCeldaFijo = "#4F81BD";
            string colorCeldaCuerpo = "#DCE6F1";
            string colorTextoFijo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorTextoIndisp = "#9C0055";
            string colorCeldaIndisp = "#FFC7CE";
            string colorLinea = "#FFFFFF";

            #region  Filtros y Cabecera

            int colEmpresa = colIni;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colFortuitas = colUnidad + 1;
            int colProgramadas = colFortuitas + 1;
            int colParcialFortuita = colProgramadas + 1;
            int colParcialProgramada = colParcialFortuita + 1;

            //ws.Cells[rowIni, colEmpresa].Value = EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(); //NOVIEMBRE
            //UtilExcel.SetFormatoCelda(ws, rowIni, colEmpresa, rowIni, colEmpresa, "Centro", "Izquierda", "#A6A6A6", "#FFFFFF", font, 12, true);

            //ws.Cells[rowIni + 1, colParcialProgramada].Value = regVersion.Irecainforme; //INFORME COES/D/DO/SME-INF-180-2020
            //UtilExcel.SetFormatoCelda(ws, rowIni + 1, colParcialProgramada, rowIni + 1, colParcialProgramada, "Centro", "Derecha", "#000000", "#FFFFFF", "Arial", 8, false);

            ws.Cells[rowIni + 2, colUnidad].Value = "REPORTE INTERMEDIO"; //CUADRO N°1
            UtilExcel.SetFormatoCelda(ws, rowIni + 2, colUnidad, rowIni + 2, colUnidad, "Centro", "Derecha", "#000000", "#FFFFFF", font, 20, true);

            ws.Cells[rowIni + 5, colCentral].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); //REPORTE DE INDISPONIBILIDADES - NOVIEMBRE 2020
            UtilExcel.SetFormatoCelda(ws, rowIni + 5, colCentral, rowIni + 5, colCentral, "Centro", "Izquierda", "#000000", "#FFFFFF", font, 13, false);

            ws.Cells[rowIni + 6, colCentral].Value = subtitulo;
            UtilExcel.SetFormatoCelda(ws, rowIni + 6, colCentral, rowIni + 6, colCentral, "Centro", "Izquierda", "#000000", "#FFFFFF", font, 13, false);

            int rowEmpresa = rowIni + 8;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colFortuitas].Value = "Fortuitas\n(Minutos)";
            ws.Cells[rowEmpresa, colProgramadas].Value = "Programados\n(Minutos)";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colProgramadas, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 8, false, true);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colEmpresa, rowEmpresa, colEmpresa, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colCentral, rowEmpresa, colCentral, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colUnidad, rowEmpresa, colUnidad, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colFortuitas, rowEmpresa, colFortuitas, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colProgramadas, rowEmpresa, colProgramadas, colorLinea);

            double factorAncho = 0.85;
            ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = ConstantesIndisponibilidades.RptCuadro1AnchoEmpresa * factorAncho;
            ws.Column(colCentral).Width = ConstantesIndisponibilidades.RptCuadro1AnchoCentral * factorAncho;
            ws.Column(colUnidad).Width = ConstantesIndisponibilidades.RptCuadro1AnchoUnidad * factorAncho;
            ws.Column(colFortuitas).Width = 16 * factorAncho;
            ws.Column(colProgramadas).Width = 16 * factorAncho;
            ws.Column(colParcialFortuita).Width = 16 * factorAncho;
            ws.Column(colParcialProgramada).Width = 16 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa;
            int rowIniRangoEmpresa = rowData + 1;
            int rowIniRangoCentral = rowData + 1;
            string empresaActual, empresaSiguiente;
            string centralActual, centralSiguiente;

            for (int i = 0; i < listaReptHoja.Count; i++)
            {
                var reg = listaReptHoja[i];

                rowData++;
                empresaActual = reg.Emprnomb;
                empresaSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Emprnomb : string.Empty;
                centralActual = reg.Central;
                centralSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Central : string.Empty;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Izquierda", colorTextoFijo, colorCeldaFijo, font, 8, false, true);

                ws.Cells[rowData, colCentral].Value = reg.Central;
                ws.Cells[rowData, colUnidad].Value = reg.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colCentral, rowData, colUnidad, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, true);

                if (reg.Itotminif > 0)
                {
                    ws.Cells[rowData, colFortuitas].Value = reg.Itotminif;
                    UtilExcel.SetFormatoCelda(ws, rowData, colFortuitas, rowData, colFortuitas, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colFortuitas, rowData, colFortuitas, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colFortuitas, rowData, colFortuitas, 0);
                }
                else
                {
                    ws.Cells[rowData, colFortuitas].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colFortuitas, rowData, colFortuitas, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colFortuitas, rowData, colFortuitas, 2);
                }

                if (reg.Itotminip > 0)
                {
                    ws.Cells[rowData, colProgramadas].Value = reg.Itotminip;
                    UtilExcel.SetFormatoCelda(ws, rowData, colProgramadas, rowData, colProgramadas, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colProgramadas, rowData, colProgramadas, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colProgramadas, rowData, colProgramadas, 0);
                }
                else
                {
                    ws.Cells[rowData, colProgramadas].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colProgramadas, rowData, colProgramadas, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colProgramadas, rowData, colProgramadas, 2);
                }

                //border empresa

                if (empresaActual != empresaSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoEmpresa, colEmpresa, rowData, colEmpresa, colorLinea);
                    rowIniRangoEmpresa = rowData + 1;
                }

                //border central
                if (centralActual != centralSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoCentral, colCentral, rowData, colCentral, colorLinea);
                    rowIniRangoCentral = rowData + 1;
                }

                //unidad
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colUnidad, rowData, colUnidad, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colFortuitas, rowData, colFortuitas, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colProgramadas, rowData, colProgramadas, colorLinea);
            }

            #endregion

            //HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConstantesAppServicio.EnlaceLogoCoes);
            //HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            //System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());

            //UtilExcel.AddImage(ws, img, rowIni + 1, colIni);

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colCentral].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);
            ws.View.ZoomScale = 85;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;

        }

        /// <summary>
        /// Generar hoja excel cuadro detalle Fotuito y Programado
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="tipoGeneracion"></param>
        /// <param name="tipoIndisp"></param>
        /// <param name="incluirDescripcion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHojaInput"></param>
        private void GenerarHojaExcelCuadroDetalleCuadro1(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni
                                                   , string tipoGeneracion, string tipoIndisp, bool incluirDescripcion, DateTime fechaIni, DateTime fechaFin
                                                    , List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdetHojaInput)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            ws.TabColor = ColorTranslator.FromHtml(ConstantesIndisponibilidades.INDFortuitaTotal == tipoIndisp ? "#E26B0A" : "#92D050");
            int numDia = (fechaFin.Date - fechaIni.Date).Days + 1;

            List<IndReporteDetDTO> listaRepdetHoja = listaRepdetHojaInput.Where(x => x.Idettipoindisp == tipoIndisp).ToList();

            string font = "TradeGothic Bold";
            string colorCeldaFondoCabecera = "#16365C";
            string colorCeldaTextoCabecera = "#FFFFFF";
            string colorCeldaFondoEmpresa = "#4F81BD";
            string colorCeldaTextoEmpresa = "#FFFFFF";
            string colorCeldaFondoUnidad = "#DCE6F1";
            string colorCeldaTextoUnidad = "#000000";
            string colorCeldaFondoMinutos = "#D9D9D9";
            string colorLineaDefecto = "#FFFFFF";
            string colorLineaTabla = "#FF0000";
            string textoTipoIndisp = tipoIndisp == ConstantesIndisponibilidades.INDFortuitaTotal ? "T IND FORTUITA (MIN)" : "T IND PROGRAMADA (MIN)";

            #region  Filtros y Cabecera

            int colEmpresa = colIni;
            int colTipoGen = colEmpresa + 1;
            int colCentral = colTipoGen + 1;
            int colUnidad = colCentral + 1;
            int colMinutos = colUnidad + 1;

            int rowTitulo = rowIni;
            int rowEmpresa = rowTitulo + 2;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colTipoGen].Value = "TIPO DE GENERACIÓN";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colMinutos].Value = "";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colMinutos, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 8, false, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colEmpresa, rowEmpresa, colEmpresa, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colTipoGen, rowEmpresa, colTipoGen, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colCentral, rowEmpresa, colCentral, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colUnidad, rowEmpresa, colUnidad, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colMinutos, rowEmpresa, colMinutos, colorLineaDefecto);

            double factorAncho = 0.85;
            ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = 24 * factorAncho;
            ws.Column(colTipoGen).Width = 9 * factorAncho;
            ws.Column(colCentral).Width = 27 * factorAncho;
            ws.Column(colUnidad).Width = 17 * factorAncho;
            ws.Column(colMinutos).Width = 10 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa + 1;
            int rowIniRangoCentral = rowData;
            string centralActual, centralSiguiente;

            for (int u = 0; u < listaReptHoja.Count; u++)
            {
                IndReporteTotalDTO regTot = listaReptHoja[u];

                centralActual = regTot.Central;
                centralSiguiente = u + 1 < listaReptHoja.Count ? listaReptHoja[u + 1].Central : string.Empty;

                for (int z = 0; z < 3; z++)
                {
                    ws.Cells[rowData, colEmpresa].Value = regTot.Emprnomb;
                    UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Centro", colorCeldaTextoEmpresa, colorCeldaFondoEmpresa, font, 8, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colEmpresa, rowData, colEmpresa, colorLineaDefecto);

                    ws.Cells[rowData, colTipoGen].Value = tipoGeneracion;
                    UtilExcel.SetFormatoCelda(ws, rowData, colTipoGen, rowData, colTipoGen, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colTipoGen, rowData, colTipoGen, colorLineaDefecto);

                    switch (z)
                    {
                        case 0:
                            ws.Cells[rowData, colUnidad].Value = regTot.Itotunidadnomb;
                            UtilExcel.CeldasExcelAgrupar(ws, rowData, colUnidad, rowData + 1, colUnidad);
                            UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData + 1, colUnidad, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false, true);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colUnidad, rowData + 1, colUnidad, colorLineaDefecto);

                            ws.Cells[rowData, colMinutos].Value = "Hora Inicio";
                            UtilExcel.SetFormatoCelda(ws, rowData, colMinutos, rowData, colMinutos, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMinutos, rowData, colMinutos, colorLineaDefecto);

                            break;

                        case 1:
                            ws.Cells[rowData, colMinutos].Value = "Hora Final";
                            UtilExcel.SetFormatoCelda(ws, rowData, colMinutos, rowData, colMinutos, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMinutos, rowData, colMinutos, colorLineaDefecto);
                            break;
                        case 2:
                            ws.Cells[rowData, colUnidad].Value = textoTipoIndisp;
                            UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colUnidad, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoMinutos, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colUnidad, rowData, colUnidad, colorLineaDefecto);

                            ws.Cells[rowData, colMinutos].Value = "Minutos";
                            UtilExcel.SetFormatoCelda(ws, rowData, colMinutos, rowData, colMinutos, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoMinutos, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMinutos, rowData, colMinutos, colorLineaDefecto);

                            break;
                    }
                    rowData++;
                }

                //agrupar central
                if (centralActual != centralSiguiente)
                {
                    ws.Cells[rowIniRangoCentral, colCentral].Value = regTot.Central;
                    UtilExcel.CeldasExcelAgrupar(ws, rowIniRangoCentral, colCentral, rowData - 1, colCentral);
                    UtilExcel.SetFormatoCelda(ws, rowIniRangoCentral, colCentral, rowData - 1, colCentral, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniRangoCentral, colCentral, rowData - 1, colCentral, colorLineaDefecto);
                    rowIniRangoCentral = rowData;
                }
            }

            int numeroEjesRpt = listaRepdetHoja.Any() ? listaRepdetHoja.Max(x => x.NumEje) + 1 : 1;

            int colIniTitulo = colEmpresa;
            int colIniDetalle = colMinutos + 1;
            for (int eje = 0; eje < numeroEjesRpt; eje++)
            {
                int colIniEje = eje == 0 ? 5 : 0;
                var listaRepdetHojaXEje = listaRepdetHoja.Where(x => x.NumEje == eje).ToList();

                //
                this.GenerarSubHojaXEjeXUnidadXDiaCuadro1(ws, rowEmpresa, colIniDetalle, font, eje, incluirDescripcion, fechaIni, fechaFin, tipoIndisp, listaReptHoja, listaRepdetHojaXEje);

                //primera fila Titulo
                ws.Cells[rowTitulo, colIniTitulo].Value = tipoIndisp == ConstantesIndisponibilidades.INDFortuitaTotal ? "FORTUITO" : "PROGRAMADO";
                UtilExcel.SetFormatoCelda(ws, rowTitulo, colIniTitulo, rowTitulo + 1, colIniTitulo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 12, false, true);
                UtilExcel.CeldasExcelAgrupar(ws, rowTitulo, colIniTitulo, rowTitulo + 1, colIniTitulo + colIniEje - 1 + numDia);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowTitulo, colIniTitulo, rowTitulo + 1, colIniTitulo + colIniEje - 1 + numDia, colorLineaTabla);

                colIniDetalle += (numDia - 1 + 5);
                colIniTitulo += colIniEje - 1 + numDia + 5;
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colEmpresa].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colMinutos + 1);
            ws.View.ZoomScale = 85;

            //Todo el excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        /// <summary>
        /// Generar sub hoja excel por unidad y dia
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="font"></param>
        /// <param name="eje"></param>
        /// <param name="incluirDescripcion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoIndisp"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHoja"></param>
        private void GenerarSubHojaXEjeXUnidadXDiaCuadro1(ExcelWorksheet ws, int rowIni, int colIni, string font
                                                , int eje, bool incluirDescripcion, DateTime fechaIni, DateTime fechaFin, string tipoIndisp, List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdetHoja)
        {
            string colorCeldaTextoDia = "#FFFFFF";
            string colorCeldaFondoDia = "#4F81BD";
            string colorCeldaTextoDefecto = "#000000";
            string colorCeldaFondoDefecto = "#FFFFFF";
            string colorCeldaFondoMinSinData = "#D9D9D9";
            string colorCeldaFondoMinConData = ConstantesIndisponibilidades.INDFortuitaTotal == tipoIndisp ? "#FFC000" : "#92D050";
            string colorLineaDia = "#FFFFFF";
            string colorLineaHoraMin = "#C4BD97";
            string colorLineaTabla = "#FF0000";
            int numColAdicional = eje == 0 ? 2 : 0;

            int numDia = (fechaFin.Date - fechaIni.Date).Days + 1;

            #region  Filtros y Cabecera

            double factorAncho = 0.85;

            int rowDia = rowIni;
            int colDia1 = colIni;

            for (var i = 0; i < numDia + numColAdicional; i++)
            {
                if (i < numDia)
                {
                    ws.Cells[rowDia, colDia1 + i].Value = fechaIni.AddDays(i).ToString("dd-MMM");
                    ws.Column(colDia1 + i).Width = 9 * factorAncho;
                }
                else
                {
                    if (i == numDia)
                        ws.Column(colDia1 + i).Width = 27 * factorAncho;
                    if (i == numDia + 1)
                    {
                        ws.Cells[rowDia, colDia1 + i].Value = "TOTAL";
                        ws.Column(colDia1 + i).Width = 9 * factorAncho;
                    }
                }

                UtilExcel.SetFormatoCelda(ws, rowDia, colDia1 + i, rowDia, colDia1 + i, "Centro", "Centro", colorCeldaTextoDia, colorCeldaFondoDia, font, 8, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowDia, colDia1 + i, rowDia, colDia1 + i, colorLineaDia);
            }

            UtilExcel.BorderCeldasLineaGruesa(ws, rowDia, colDia1, rowDia, colDia1 + numDia - 1, colorLineaTabla);
            if (numColAdicional > 0)
            {
                UtilExcel.BorderCeldasLineaGruesa(ws, rowDia, colDia1 + numDia - 1 + 1, rowDia, colDia1 + numDia - 1 + 1, colorLineaTabla);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowDia, colDia1 + numDia - 1 + 2, rowDia, colDia1 + numDia - 1 + 2, colorLineaTabla);
            }

            ws.Row(rowDia).Height = 23;

            #endregion

            #region Cuerpo

            int rowData = rowDia + 1;
            for (int u = 0; u < listaReptHoja.Count; u++)
            {
                IndReporteTotalDTO regTot = listaReptHoja[u];
                //se asume que existe un registro de la unidad como maximo por cada dia
                List<IndReporteDetDTO> listaDetXTot = listaRepdetHoja.Where(x => x.Equicodi == regTot.Equicodi && x.Grupocodi == regTot.Grupocodi).ToList();

                for (int z = 0; z < 3; z++)
                {
                    int colDiaActual;
                    for (var m = 0; m < numDia + numColAdicional; m++)
                    {
                        colDiaActual = colDia1 + m;
                        if (m < numDia)
                        {
                            IndReporteDetDTO regDetEqXDia = listaDetXTot.Find(x => x.Idethoraini.Value.Date == fechaIni.AddDays(m));

                            if (regDetEqXDia != null)
                            {
                                string formatoCeldaEspecial = null;
                                if (incluirDescripcion)
                                {
                                    switch (regDetEqXDia.CeldaFormato)
                                    {
                                        case ConstantesIndisponibilidades.FormatoCeldaEvento: formatoCeldaEspecial = "#2ECC71"; break;
                                        case ConstantesIndisponibilidades.FormatoCeldaRestric: formatoCeldaEspecial = "#FF5050"; break;
                                        case ConstantesIndisponibilidades.FormatoCeldaAlerta:; break;
                                    }
                                }

                                switch (z)
                                {
                                    case 0:
                                        ws.Cells[rowData, colDiaActual].Value = regDetEqXDia.IdethorainiDesc;
                                        formatoCeldaEspecial = formatoCeldaEspecial != null ? formatoCeldaEspecial : colorCeldaFondoDefecto;
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, formatoCeldaEspecial, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 1:
                                        ws.Cells[rowData, colDiaActual].Value = regDetEqXDia.IdethorafinDesc;
                                        formatoCeldaEspecial = formatoCeldaEspecial != null ? formatoCeldaEspecial : colorCeldaFondoDefecto;
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, formatoCeldaEspecial, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 2:
                                        ws.Cells[rowData, colDiaActual].Value = regDetEqXDia.Idetmin.Value;
                                        if (incluirDescripcion) UtilExcel.AgregarComentarioExcel(ws, rowData, colDiaActual, regDetEqXDia.CeldaDescripcion);
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinConData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                }
                            }
                            else
                            {
                                switch (z)
                                {
                                    case 0:
                                    case 1:
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 2:
                                        ws.Cells[rowData, colDiaActual].Value = 0;
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinSinData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                }
                            }
                        }
                        else
                        {
                            //columna casi final de descripcion de la unidad
                            if (m == numDia)
                            {
                                switch (z)
                                {
                                    case 0:
                                    case 1:
                                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colDiaActual, rowData, colDiaActual, colorCeldaFondoDefecto);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 2:
                                        ws.Cells[rowData, colDiaActual].Value = regTot.Central + regTot.Itotunidadnomb;
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinConData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                }
                            }

                            //columna final de totales por unidad
                            if (m == numDia + 1)
                            {
                                switch (z)
                                {
                                    case 0:
                                    case 1:
                                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colDiaActual, rowData, colDiaActual, colorCeldaFondoDefecto);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 2:
                                        decimal? minutosTotal = ConstantesIndisponibilidades.INDFortuitaTotal == tipoIndisp ? regTot.Itotminif : regTot.Itotminip;
                                        if (minutosTotal > 0)
                                        {
                                            ws.Cells[rowData, colDiaActual].Value = minutosTotal;
                                            UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinConData, font, 8, false, true);
                                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        }
                                        else
                                        {
                                            ws.Cells[rowData, colDiaActual].Value = 0;
                                            UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinSinData, font, 8, false, true);
                                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        }
                                        break;
                                }
                            }
                        }
                    }
                    rowData++;
                }
            }

            #endregion

            //border a toda la tabla
            UtilExcel.BorderCeldasLineaGruesa(ws, rowDia + 1, colDia1, rowData - 1, colDia1 + numDia - 1, colorLineaTabla);
            if (numColAdicional > 0)
            {
                UtilExcel.BorderCeldasLineaGruesa(ws, rowDia + 1, colDia1 + numDia - 1 + 1, rowData - 1, colDia1 + numDia - 1 + 1, colorLineaTabla);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowDia + 1, colDia1 + numDia - 1 + 2, rowData - 1, colDia1 + numDia - 1 + 2, colorLineaTabla);
            }
        }

        /// <summary>
        /// Obtener descripción de indisponibilidad y formato de celda (Evento, Restric y Alerta)
        /// </summary>
        /// <param name="regDetEqXDia"></param>
        /// <param name="listaManttoXEq"></param>
        /// <param name="strDesc"></param>
        /// <param name="strFormato"></param>
        private void GetDescripcionIndisponibilidad(bool incluirMantto, IndReporteDetDTO regDetEqXDia, List<EveManttoDTO> listaManttoXEq, out string strDesc, out string strFormato)
        {
            strDesc = string.Empty;
            strFormato = string.Empty;

            if (regDetEqXDia != null)
            {
                //Descripcion de la indisponibilidad de varios dias
                string msj7dia = string.Join("\n", GetDescripcionIndispMayor1Dia(regDetEqXDia.Idetfechainifort7d, regDetEqXDia.Idetfechafinfort7d, regDetEqXDia.Idetfechainiprog7d, regDetEqXDia.Idetfechafinprog7d));

                if (regDetEqXDia.Equicodi == 13418)
                { }

                List<EveManttoDTO> listaCumple = new List<EveManttoDTO>(), listaNoCumple = new List<EveManttoDTO>();

                DateTime fechaIndispIni = regDetEqXDia.Idethoraini.Value;
                DateTime fechaIndispFin = regDetEqXDia.Idethorafin.Value;

                //Obtener todos los mantenimientos que generan la indisponibilidad
                foreach (var reg in listaManttoXEq)
                {
                    DateTime fEveIni = reg.Evenini.Value;
                    DateTime fEveFin = reg.Evenfin.Value;

                    if ((fechaIndispIni <= fEveIni && fEveFin <= fechaIndispFin) || (fEveIni <= fechaIndispIni && fechaIndispFin <= fEveFin))
                        listaCumple.Add(reg);
                    else
                    {
                        if (fEveIni < fechaIndispFin && fechaIndispFin < fEveFin) //derecha
                            listaCumple.Add(reg);
                        else
                        {
                            if (fEveIni < fechaIndispIni && fechaIndispIni < fEveFin) //izquierda
                                listaCumple.Add(reg);
                            else
                                listaNoCumple.Add(reg);
                        }
                    }
                }
                listaCumple = listaCumple.OrderBy(x => x.Evenini).ThenBy(x => x.Evenclasecodi).ToList();
                listaNoCumple = listaNoCumple.OrderBy(x => x.Evenini).ThenBy(x => x.Evenclasecodi).ToList();

                //Generar title
                List<string> listaDesc = new List<string>();

                if (incluirMantto)
                {
                    foreach (var reg in listaCumple)
                    {
                        listaDesc.Add(GetDescripcionMantto(reg, false));
                    }

                    if (listaNoCumple.Any())
                    {
                        listaDesc.Add("**Otros mantenimientos del día**");
                        foreach (var reg in listaNoCumple)
                        {
                            listaDesc.Add(GetDescripcionMantto(reg, false));
                        }
                    }
                    listaDesc.Add(msj7dia);

                    //html
                    bool tieneMantto = listaCumple.Find(x => x.Manttocodi > 0) != null;
                    bool tieneEvento = listaCumple.Find(x => x.Evencodi > 0) != null;
                    bool tieneRestri = listaCumple.Find(x => x.Iccodi > 0) != null;

                    if (tieneEvento && !tieneMantto && !tieneRestri)
                        strFormato = ConstantesIndisponibilidades.FormatoCeldaEvento;
                    if (tieneRestri && !tieneMantto && !tieneEvento)
                        strFormato = ConstantesIndisponibilidades.FormatoCeldaRestric;
                    if (tieneMantto && (tieneEvento || tieneRestri))
                        strFormato = ConstantesIndisponibilidades.FormatoCeldaAlerta;
                }

                //Cuadro 2
                string descAdicional = regDetEqXDia.Idetdescadic ?? "";

                if (!string.IsNullOrEmpty(descAdicional))
                {
                    string strSeparador = ConstantesIndisponibilidades.StrSeparador;
                    List<string> listaAdic = descAdicional.Split(new[] { strSeparador }, StringSplitOptions.None).ToList();
                    if (listaDesc.Any()) listaDesc.Add(" ");
                    listaDesc.AddRange(listaAdic);

                    if (descAdicional.ToUpper().Contains("disponibilidad de combustible".ToUpper()))
                        strFormato = ConstantesIndisponibilidades.FormatoCeldaLimComb;
                }

                strDesc = string.Join("\n", listaDesc);
            }
        }

        /// <summary>
        /// Obtener descripción de Mantto
        /// </summary>
        /// <param name="reg"></param>
        /// <returns></returns>
        private string GetDescripcionMantto(EveManttoDTO reg, bool mostrarTodoDetalle)
        {
            var fuenteDato = reg.Evencodi > 0 ? ">> EVENTO \n" : (reg.Iccodi > 0 ? ">>RESTRICCIÓN OPERATIVA \n" : "");
            var strIniHora = reg.Evenini.Value.ToString(ConstantesAppServicio.FormatoHora);
            var strFinHora = reg.Evenfin.Value.ToString(ConstantesAppServicio.FormatoHora) != "00:00" ? reg.Evenfin.Value.ToString(ConstantesAppServicio.FormatoHora) : "23:59";
            var indispoDesc = reg.Evenindispo == ConstantesIndisponibilidades.ES ? " - " + "E/S" : (reg.Evenindispo == ConstantesIndisponibilidades.FS ? " - " + "F/S" : string.Empty);
            var tipoevenabrev = !string.IsNullOrEmpty(reg.Tipoevenabrev) ? " - " + reg.Tipoevenabrev.Trim() : string.Empty;
            var equinomb = " - (" + (!string.IsNullOrEmpty(reg.Equiabrev) ? reg.Equiabrev.Trim() : string.Empty) + ")";

            if (mostrarTodoDetalle) strIniHora = reg.Evenini.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
            if (mostrarTodoDetalle) strFinHora = reg.Evenfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
            if (mostrarTodoDetalle) equinomb = reg.Emprnomb + " " + reg.Areadesc + " " + equinomb;

            return fuenteDato
                    + strIniHora + " - " + strFinHora + " - " + reg.Evenclaseabrev + indispoDesc + tipoevenabrev + equinomb
                    + "\n" + reg.Evendescrip;
        }

        /// <summary>
        /// Obtener descripciones de indisponibilidad Mayor a un dia
        /// </summary>
        /// <param name="idetfechainifort7d"></param>
        /// <param name="idetfechafinfort7d"></param>
        /// <param name="idetfechainiprog7d"></param>
        /// <param name="idetfechafinprog7d"></param>
        /// <returns></returns>
        private List<string> GetDescripcionIndispMayor1Dia(DateTime? idetfechainifort7d, DateTime? idetfechafinfort7d, DateTime? idetfechainiprog7d, DateTime? idetfechafinprog7d)
        {
            List<string> listaMsj = new List<string>();

            if (idetfechainifort7d != null)
            {
                TimeSpan ts = idetfechafinfort7d.Value.Date - idetfechainifort7d.Value.Date;
                int diaFort = ts.Days + 1;
                if (idetfechafinfort7d.Value.ToString(ConstantesAppServicio.FormatoHora) == "00:00") diaFort = diaFort - 1;

                if (diaFort > 1)
                {
                    var strFIni = idetfechainifort7d.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
                    var strFFin = idetfechafinfort7d.Value.ToString(ConstantesAppServicio.FormatoHora);
                    if (strFFin != "00:00") strFFin = idetfechafinfort7d.Value.ToString(ConstantesAppServicio.FormatoFechaHora);
                    if (strFFin == "00:00") strFFin = idetfechafinfort7d.Value.AddSeconds(-1).ToString(ConstantesAppServicio.FormatoFechaFull2);

                    listaMsj.Add("Indisponibilidad fortuita de " + diaFort + " días. Inicia " + strFIni + " hasta " + strFFin + ".");

                    if (idetfechainiprog7d != null)
                    {
                        //TimeSpan ts2 = idetfechafinprog7d.Value.Date.AddMinutes(-1) - idetfechainiprog7d.Value.Date;
                        //int diaProg = ts2.Days + 1;

                        strFIni = idetfechainiprog7d.Value.ToString(ConstantesAppServicio.FormatoFechaFull);
                        strFFin = idetfechafinprog7d.Value.ToString(ConstantesAppServicio.FormatoHora);
                        if (strFFin != "00:00") strFFin = idetfechafinprog7d.Value.ToString(ConstantesAppServicio.FormatoFechaHora);
                        if (strFFin == "00:00") strFFin = idetfechafinprog7d.Value.AddSeconds(-1).ToString(ConstantesAppServicio.FormatoFechaFull2);

                        listaMsj.Add("Indisponibilidad programada a partir del 8avo día. Inicia " + strFIni + " hasta " + strFFin + ".");
                    }
                }
            }

            return listaMsj;
        }

        /// <summary>
        /// retorna listado Reporte total con la descripcion de indisponibilidad Mayor a un dia
        /// </summary>
        /// <param name="listaReptot"></param>
        /// <param name="listaRepdet"></param>
        private void SetDescripcionIndispMayor1DiaXEq(ref List<IndReporteTotalDTO> listaReptot, List<IndReporteDetDTO> listaRepdet)
        {
            foreach (var regTot in listaReptot)
            {
                var listaDetXEq = listaRepdet.Where(x => x.Equicodi == regTot.Equicodi && x.Idetfechafinfort7d != null).ToList();
                if (listaDetXEq.Any())
                {
                    regTot.ListaDesIndispMayorA1Dia = new List<string>();

                    var agrup = listaDetXEq.GroupBy(x => new { x.Idetfechainifort7d, x.Idetfechafinfort7d })
                        .Select(x => new EveManttoDTO() { Evenini = x.Key.Idetfechainifort7d, Evenfin = x.Key.Idetfechafinfort7d, Eveniniprog = x.First().Idetfechainiprog7d, Evenfinprog = x.First().Idetfechafinprog7d })
                        .OrderBy(x => x.Evenini).ToList();

                    foreach (var rangos in agrup)
                    {
                        regTot.ListaDesIndispMayorA1Dia.AddRange(GetDescripcionIndispMayor1Dia(rangos.Evenini, rangos.Evenfin, rangos.Eveniniprog, rangos.Evenfinprog));
                    }
                }
            }
        }

        /// <summary>
        /// mostrar el valor de potencia efectiva para el cuadro 2
        /// </summary>
        /// <param name="listaReptot"></param>
        private void SetValorPeRptCuadro2(List<IndReporteTotalDTO> listaReptot)
        {
            foreach (var reg in listaReptot)
            {
                reg.ItotpeC2 = reg.Itotpe;
                //if (reg.Itotfactork > 0 && reg.Itotfactork < 1)
                //     reg.ItotpeC2 = reg.Itotpa;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="evenclasecodi"></param>
        /// <returns></returns>
        private string GetFlagTipoIndisp(int cuadro, int evenclasecodi)
        {
            if (evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg)
                return ConstantesIndisponibilidades.ReportePR25Cuadro2 == cuadro ? ConstantesIndisponibilidades.INDProgramadaParcial : ConstantesIndisponibilidades.INDProgramadaTotal;
            else
                return ConstantesIndisponibilidades.ReportePR25Cuadro2 == cuadro ? ConstantesIndisponibilidades.INDFortuitaParcial : ConstantesIndisponibilidades.INDFortuitaTotal;
        }

        #endregion

        #region Edición de Handson

        public int GuardarCambiosHandsonCuadro1(int icuacodi, int irecacodi, int famcodi, string usuario, int irptcodi, List<IndReporteDetDTO> listaDataCambio)
        {
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            List<IndReporteDetDTO> listaRepdet = GetByCriteriaIndReporteDets(irptcodi); //pestaña fortuito, pestarña programado
            List<IndReporteTotalDTO> listaRepTot = GetByCriteriaIndReporteTotals(irptcodi).Where(x => x.Itotopcom == ConstantesAppServicio.SI).ToList();

            List<EqEquipoDTO> listaUnidades = listaRepTot.DistinctBy(x => new { x.Equicodi, x.Grupocodi })
                .Select(z => new EqEquipoDTO()
                {
                    Equicodi = z.Equicodi.Value,
                    Equinomb = z.Equinomb,
                    Grupocodi = z.Grupocodi,
                    Emprcodi = z.Emprcodi,
                    Equipadre = z.Equipadre,

                    Grupoincremental = z.Itotincremental,
                    UnidadnombPR25 = z.Itotunidadnomb,
                    Equifechiniopcom = regRecalculo.Irecafechaini.AddMonths(-2), //se asume que todas las unidades editadas tienen operación comercial
                    Equifechfinopcom = regRecalculo.Irecafechafin.AddMonths(2), //se asume que todas las unidades editadas tienen operación comercial
                }).ToList();


            //lista del handson separado
            List<IndReporteDetDTO> listaFortuitaBD = listaRepdet.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal).ToList();
            List<IndReporteDetDTO> listaProgramadaBD = listaRepdet.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDProgramadaTotal).ToList();

            //Lista Cambio
            List<IndReporteDetDTO> listaCambioFortuita = listaDataCambio.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal).ToList();
            List<IndReporteDetDTO> listaCambioProgramada = listaDataCambio.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDProgramadaTotal).ToList();

            FusionarCambiosHandson(listaFortuitaBD, listaCambioFortuita);
            VerificarCruceHoras(listaFortuitaBD);

            FusionarCambiosHandson(listaProgramadaBD, listaCambioProgramada);
            VerificarCruceHoras(listaProgramadaBD);

            var listaReporteDet = listaFortuitaBD.Union(listaProgramadaBD).ToList();

            List<IndReporteTotalDTO> listaRptTot = new List<IndReporteTotalDTO>();
            listaRptTot = GenerarTotal(listaRptTot.Count + 1, ref listaReporteDet, listaUnidades, icuacodi, famcodi, ConstantesAppServicio.SI);

            //
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(icuacodi);
            IndReporteDTO regOld = GetByIdIndReporte(irptcodi);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = icuacodi,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = regOld.Irpttiempo,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A",
                Irptreporteold = irptcodi
            };

            if (EsVersionCreableCuadro(regCuadro, regRecalculo, regReporte, listaRptTot, listaReporteDet))
            {
                CambiarAEstadoHistorico(icuacodi, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaRptTot;
                regSaveBD.ListaRptDet = listaReporteDet;

                var irptcodiResult = this.GuardarReporteIndispBDTransaccional(regSaveBD);

                return irptcodiResult;
            }

            return 0;
        }

        private void VerificarCruceHoras(List<IndReporteDetDTO> listaFortuita)
        {
            foreach (var item in listaFortuita.GroupBy(z => new { z.Grupocodi, z.Equicodi, z.Idethoraini.Value.Date }))
            {
                var lstCambios = item.OrderBy(x => x.Idethoraini.Value).ToList();

                for (int index = 1; index < lstCambios.Count(); index++)
                {
                    var itemAnt = lstCambios[index - 1];
                    var itemAct = lstCambios[index];

                    var rangoAnt = new Range<DateTime>(itemAnt.Idethoraini.Value, itemAnt.Idethorafin.Value);
                    var rangoAct = new Range<DateTime>(itemAct.Idethoraini.Value, itemAct.Idethorafin.Value);

                    if (rangoAnt.IsOverlapped(rangoAct))
                    {
                        var item_ = itemAct.Emprnomb != null ? itemAct : itemAnt;
                        item_.Indisponibilidad = item_.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal ? "Fortuito" : "Programado";

                        throw new
                                ArgumentException($"{Environment.NewLine}EXISTE CRUCE EN LA PESTAÑA {item_.Indisponibilidad.ToUpper()}:" +
                                $"{Environment.NewLine}{item_.Emprnomb} {item_.Central} {item_.Unidadnomb}" +
                                $"{Environment.NewLine}FECHA : {itemAct.Idethoraini.Value:dd/MM/yy}" +
                                $"{Environment.NewLine}HORAS : [{itemAct.Idethoraini.Value:HH:mm}-{itemAct.Idethorafin.Value:HH:mm}] [{itemAnt.Idethoraini.Value:HH:mm}-{itemAnt.Idethorafin.Value:HH:mm}]");
                    }
                }
            }
        }

        private void FusionarCambiosHandson(List<IndReporteDetDTO> listaRepDetBD, List<IndReporteDetDTO> listaCambios)
        {
            foreach (var item in listaCambios.Where(x => x.Tipocambio == "Eliminacion"))
            {
                var indDet = listaRepDetBD.FirstOrDefault(x => x.Grupocodi == item.Grupocodi && x.Equicodi == item.Equicodi && x.Idethoraini.Value.Date == item.Fecha.Date);
                if (indDet != default(IndReporteDetDTO))
                {
                    listaRepDetBD.Remove(indDet);
                }
            }

            foreach (var item in listaCambios.Where(x => x.Tipocambio == "Modificacion"))
            {
                var indDet = listaRepDetBD.FirstOrDefault(x => x.Grupocodi == item.Grupocodi && x.Equicodi == item.Equicodi && x.Idethoraini.Value.Date == item.Idethoraini.Value.Date);
                if (indDet != default(IndReporteDetDTO))
                {
                    indDet.Idethoraini = item.Idethoraini;
                    indDet.Idethorafin = item.Idethorafin;
                    indDet.Idetmin = item.Idetmin;
                    indDet.Idetminparcial = item.Idetminparcial;
                    indDet.Idetpr = item.Idetpr;
                    indDet.Idetjustf = item.Idetjustf;
                    indDet.Idettipocambio = ConstantesIndisponibilidades.TipoCambioEdicion;
                    indDet.Idetcodiold = indDet.Idetcodi;
                    //Se agrega nuevo campo -Assetec (RAC)
                    indDet.Idetconsval = item.Idetconsval;
                }
            }

            foreach (var item in listaCambios.Where(x => x.Tipocambio == "Creacion"))
            {
                listaRepDetBD.Add(
                            new IndReporteDetDTO
                            {
                                Grupocodi = item.Grupocodi,
                                Equicodi = item.Equicodi,
                                Emprnomb = item.Emprnomb,
                                Unidadnomb = item.Unidadnomb,
                                Central = item.Central,
                                Indisponibilidad = item.Indisponibilidad,
                                Idethoraini = item.Idethoraini,
                                Idethorafin = item.Idethorafin,
                                Idetmin = item.Idetmin,
                                Idettipoindisp = item.Idettipoindisp,
                                Idetminparcial = item.Idetminparcial,
                                Idetpr = item.Idetpr,
                                Idetjustf = item.Idetjustf,
                                //Se agrega nuevo campo -Assetec (RAC)
                                Idetconsval = item.Idetconsval,
                                Idettipocambio = ConstantesIndisponibilidades.TipoCambioNuevo
                            });
            }
        }

        private string GetDescripcionCambio(string tipoCambio)
        {
            if (tipoCambio == ConstantesIndisponibilidades.TipoCambioEdicion)
                return "Modificación";

            if (tipoCambio == ConstantesIndisponibilidades.TipoCambioEliminacion)
                return "Eliminación";

            if (tipoCambio == ConstantesIndisponibilidades.TipoCambioNuevo)
                return "Creación";

            return "";
        }

        private string GetNombreTab(string tipoIndisp)
        {
            if (ConstantesIndisponibilidades.INDFortuitaTotal == tipoIndisp)
                return "Fortuito";

            if (ConstantesIndisponibilidades.INDProgramadaTotal == tipoIndisp)
                return "Programado";

            if (ConstantesIndisponibilidades.INDFortuitaParcial == tipoIndisp)
                return "Fortuito Parcial";

            if (ConstantesIndisponibilidades.INDProgramadaParcial == tipoIndisp)
                return "Programado Parcial";

            return "";
        }

        public List<IndReporteDetDTO> ListarCambiosCuadro1(List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdet, List<IndReporteDetDTO> listaRepdetOld)
        {
            var listaCambios = listaRepdet.Where(x => x.Idettipocambio != null && x.Idettipocambio.Length == 1).ToList();

            foreach (var regCambio in listaCambios)
            {
                IndReporteTotalDTO regTot = listaReptHoja.Find(x => x.Itotcodi == regCambio.Itotcodi);
                IndReporteDetDTO regOld = listaRepdetOld.Find(x => x.Idetcodi == regCambio.Idetcodiold);

                regCambio.Emprnomb = regTot.Emprnomb;
                regCambio.Central = regTot.Central;
                regCambio.Unidadnomb = regTot.Itotunidadnomb;

                regCambio.FechaDesc = regCambio.Idethoraini.Value.Date.ToString(ConstantesAppServicio.FormatoFecha);

                if (regOld != null)
                    regCambio.RangoHorasOld = string.Format("{0} - {1} ({2} min)", regOld.Idethoraini.Value.ToString(ConstantesAppServicio.FormatoHora), regOld.Idethorafin.Value.ToString(ConstantesAppServicio.FormatoHora), regOld.Idetmin.GetValueOrDefault(0).ToString());
                regCambio.RangoHoras = string.Format("{0} - {1} ({2} min)", regCambio.Idethoraini.Value.ToString(ConstantesAppServicio.FormatoHora), regCambio.Idethorafin.Value.ToString(ConstantesAppServicio.FormatoHora), regCambio.Idetmin.GetValueOrDefault(0).ToString());

                regCambio.Idetjustf = regCambio.Idetjustf;

                regCambio.UltimaModificacionUsuarioDesc = "";
                regCambio.UltimaModificacionFechaDesc = "";
                regCambio.Tipocambio = GetDescripcionCambio(regCambio.Idettipocambio);
                regCambio.Tab = GetNombreTab(regCambio.Idettipoindisp);
            }

            return listaCambios;
        }

        public string GenerarHtmlListadoCambiosCuadro1(List<IndReporteDetDTO> listaCambios)
        {
            if (!listaCambios.Any())
                return string.Empty;

            StringBuilder strHtml = new StringBuilder();

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_cambios'>
                        <thead>
                            <tr>
                                <th>Indisponibilidad</th>
                                <th>Tipo Cambio</th>

                                <th>Empresa</th>
                                <th>Central</th>
                                <th>Unidad</th>

                                <th>Fecha</th>
                                <th>Rango Horas<br />Original</th>
                                <th>Rango Horas<br />Modificado</th>

                                <th>Justificación</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            foreach (var reg in listaCambios)
            {
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>
                                        <td style=';'>{2}</td>

                                        <td style=';'>{3}</td>
                                        <td style=''>{4}</td>
                                        <td style=';'>{5}</td>

                                        <td style=';'>{6}</td>
                                        <td style='' >{7}</td>
                                        <td style='' >{8}</td>

                                        <td style='' >{9}</td>
                                    </tr>
                                    "
                                , ""
                                , reg.Tab
                                , reg.Tipocambio

                                , reg.Emprnomb
                                , reg.Central
                                , reg.Unidadnomb

                                , reg.FechaDesc
                                , reg.RangoHorasOld
                                , reg.RangoHoras
                                , reg.Idetjustf
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region Cuadro 2

        /// <summary>
        /// Permite realizar búsquedas en la tabla IndReporteDet, IndReporteTotal e IndReporte
        /// <param name="icuacodi">Identificador del cuadro</param>
        /// <param name="ipericodi">Identificador del periodo</param>
        /// </summary>
        public List<IndReporteDetDTO> ListConservarValorByPeriodoCuadro(int icuacodi, int ipericodi)
        {
            return FactorySic.GetIndReporteDetRepository().ListConservarValorByPeriodoCuadro(icuacodi, ipericodi);
        }

        /// <summary>
        /// Procesa el cuadro 2
        /// </summary>
        /// <param name="irecacodi"></param>
        /// <param name="idReporteFactorK"></param>
        /// <param name="tiempo"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int ProcesarCuadro2(int irecacodi, string tiempo, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25Cuadro2;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);
            //Assetec[IND.PR25.2022]
            List<IndReporteDetDTO> listaConservarValor = this.ListConservarValorByPeriodoCuadro(cuadro, regRecalculo.Ipericodi);
            //Assetec[IND.PR25.2022]
            this.ListarDataInicialPR25(regCuadro.Icuacodi, regRecalculo.Irecafechaini.AddDays(-7), regRecalculo.Irecafechafin, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, ConstantesHorasOperacion.IdTipoTermica
                                        , out List<EqEquipoDTO> listaUnidadSiOpComercial, out List<EqEquipoDTO> listaUnidadNoOpComercial
                                        , out List<EqEquipoDTO> listaEqSiOpComercial, out List<EqEquipoDTO> listaEqNoOpComercial
                                        , out List<EveManttoDTO> listaManttoSiOpCom, out List<EveManttoDTO> listaManttoNoOpCom, out List<IndInsumoLogDTO> listaLogInsumo, out List<ResultadoValidacionAplicativo> listaMsj);

            //datos de entrada
            this.ListarModoOperacionPe(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

            var listaEqCentral = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            var listaEqGenerador = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            listaGrupoModo = SetearEquiposToModoOperacion(listaGrupoModo, listaGrupo, listaEqCentral, listaEqGenerador);

            //modos de operación ficticio
            var listaModoFict = this.ListarModoOperacionFicticio(listaGrupoModo, regRecalculo.Irecafechafin);
            listaGrupoModo.AddRange(listaModoFict);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            /////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Indisponibilidades parciales según mantenimientos y potencia restringida prevista
            this.ListarManttoAppPR25Cuadro2(ConstantesHorasOperacion.IdTipoTermica, listaEqSiOpComercial, listaUnidadSiOpComercial, listaGrupoModo, listaManttoSiOpCom
                                            , out List<EveManttoDTO> listmantto, out List<ReiniciarRegla7D> listaReinicio, out List<OmitirExcesoPr> listaOmitirPr);
            this.ListarManttoIndispPR25(regCuadro.Icuacodi, new List<EqEquipoDTO>(), listmantto, listaReinicio, tiempo, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaBloqueHorario, out List<EveManttoDTO> listaIndisp, out List<EveManttoDTO> listaRangoIndispRegla7Dias);
            this.AsignarValorGrupoXCuadro(regCuadro.Icuacodi, ref listaIndisp, listaUnidadSiOpComercial);
            List<IndReporteDetDTO> listaRptDetIndispParcialyPr = GenerarIndisponibilidadesParcialesYPrPrevista(regCuadro.Icuacodi, listaIndisp, listaRangoIndispRegla7Dias, listaUnidadSiOpComercial, listaGrupoModo);

            //Obtener todos las indisponibilidades (totales y parciales) del periodo
            this.ListarManttoAppPR25Cuadro2LimComb(ConstantesHorasOperacion.IdTipoTermica, listaEqSiOpComercial, listaUnidadSiOpComercial, listaGrupoModo, listaManttoSiOpCom, out List<EveManttoDTO> listmanttoTot);
            this.ListarManttoIndispPR25(ConstantesIndisponibilidades.ReportePR25Cuadro2LimComb, new List<EqEquipoDTO>(), listmantto, new List<ReiniciarRegla7D>(), tiempo, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaBloqueHorario, out List<EveManttoDTO> listaIndispComb, out List<EveManttoDTO> listaRangoIndispRegla7DiasComb);
            List<IndReporteDetDTO> listaRptDetXIntComb = this.GenerarDetalleCuadro(ConstantesIndisponibilidades.ReportePR25Cuadro2LimComb, listaIndispComb, listaRangoIndispRegla7Dias, ConstantesAppServicio.SI);

            //Obtener periodos donde no existe manttos
            List<IndReporteDetDTO> lPeriodoOperativo = ListarPeriodoDisponibleFromManttos(listaUnidadSiOpComercial.Where(x => x.Grupoincremental != 1).ToList(), listaRptDetXIntComb, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaBloqueHorario);

            //Egenerable
            ListarEnergiaGenerableDiaria(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaBloqueHorario, out List<CalculoEgenerable> lEgenerableMes, out List<ResultadoValidacionAplicativo> listaMsjEgen);

            List<MeMedicion96DTO> lista96PlenaCarga = new List<MeMedicion96DTO>();
            List<EveHoraoperacionDTO> listaHOplenacarga = new List<EveHoraoperacionDTO>();

            bool usarM96 = regRecalculo.Irecatipo != ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena;
            if (usarM96)
            {
                //Información de Medidores con cruce de horas de operación a Plena Carga
                ListarMedidores96(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out lista96PlenaCarga, out listaHOplenacarga);
            }

            //Porcentaje RPF	
            List<PrGrupodatDTO> listaHistoricoRpf = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiRpf.ToString());
            List<IndReporteDetDTO> listaRptDetCuadro2 = new List<IndReporteDetDTO>();

            //Parcial programado
            List<IndReporteDetDTO> listaDetParcialProg = listaRptDetIndispParcialyPr.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial).ToList();
            List<IndReporteDetDTO> listaRptDetCuadro2ParcialProg = GenerarDetalleCuadro2(usarM96, listaUnidadSiOpComercial, listaEqSiOpComercial, listaDetParcialProg, new List<IndReporteDetDTO>()
                                                            , listaGrupoModo, lista96PlenaCarga, listaHOplenacarga, listaHistoricoRpf, listaOmitirPr, listaBloqueHorario);
            listaRptDetCuadro2.AddRange(listaRptDetCuadro2ParcialProg);

            //Parcial fortuito
            List<IndReporteDetDTO> listaDetParcialFort = listaRptDetIndispParcialyPr.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial).ToList();
            List<IndReporteDetDTO> listaRptDetCuadro2ParcialFort = GenerarDetalleCuadro2(usarM96, listaUnidadSiOpComercial, listaEqSiOpComercial, listaDetParcialFort, listaRptDetCuadro2ParcialProg
                                                            , listaGrupoModo, lista96PlenaCarga, listaHOplenacarga, listaHistoricoRpf, listaOmitirPr, listaBloqueHorario);
            listaRptDetCuadro2.AddRange(listaRptDetCuadro2ParcialFort);

            //Por limitación de combustible
            List<IndReporteDetDTO> listaRptDetXLimComb = GenerarDetalleCuadro2XLimComb(listaUnidadSiOpComercial, lPeriodoOperativo, lEgenerableMes, listaBloqueHorario);
            listaRptDetCuadro2.AddRange(listaRptDetXLimComb);

            //agregar para incrementales
            List<IndReporteDetDTO> listaRptDetXIntIncremental = this.AgregarDetalleCuadroIncremental(cuadro, listaUnidadSiOpComercial, listaRptDetCuadro2);
            listaRptDetCuadro2.AddRange(listaRptDetXIntIncremental);
            //Assetec[IND.PR25.2022]
            foreach (var cuadro2 in listaRptDetCuadro2)
            {
                IndReporteDetDTO entity = listaConservarValor.Where(x => x.Idetdia == cuadro2.Idetdia && x.Idettipoindisp == cuadro2.Idettipoindisp
                                                                         && x.Grupocodi == cuadro2.Grupocodi && x.Emprcodi == cuadro2.Emprcodi
                                                                         && x.Equipadre == cuadro2.Equipadre && x.Equicodi == cuadro2.Equicodi
                                                                         && x.Idetopcom == cuadro2.Idetopcom).FirstOrDefault();
                if (entity != null)
                {
                    cuadro2.Idetpr = entity.Idetpr;
                    cuadro2.Idetminparcial = entity.Idetminparcial;
                    cuadro2.Idethorafin = entity.Idethorafin;
                    cuadro2.Idethoraini = entity.Idethoraini;
                    cuadro2.Idetjustf = entity.Idetjustf;
                    cuadro2.Idetconsval = entity.Idetconsval;
                    cuadro2.Idetmin = entity.Idetmin;
                }
            }
            //Assetec[IND.PR25.2022]
            //total
            List<IndReporteTotalDTO> listaRptTot = this.GenerarTotal2(1, ref listaRptDetCuadro2, listaUnidadSiOpComercial, cuadro, ConstantesHorasOperacion.IdTipoTermica, ConstantesAppServicio.SI);

            /////////////////////////////////////////////////////////////////////////////////////////////////////////
            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = tiempo,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            if (EsVersionCreableCuadro(regCuadro, regRecalculo, regReporte, listaRptTot, listaRptDetCuadro2))
            {
                CambiarAEstadoHistorico(cuadro, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                //
                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaRptTot;
                regSaveBD.ListaRptDet = listaRptDetCuadro2;

                return GuardarReporteIndispBDTransaccional(regSaveBD);
            }

            return 0;
        }

        #region Cálculo

        public List<IndReporteDetDTO> GenerarDetalleCuadro2(bool esMensual, List<EqEquipoDTO> listaUnidad, List<EqEquipoDTO> listaEquipoTermicos, List<IndReporteDetDTO> listaRptDetIndisp
                                                            , List<IndReporteDetDTO> listaRptDetCuadro2ParcialProg, List<PrGrupoDTO> listaGrupoModo
                                                            , List<MeMedicion96DTO> lista96PlenaCarga
                                                            , List<EveHoraoperacionDTO> listaHOplenacarga, List<PrGrupodatDTO> listaHistoricoRpf
                                                            , List<OmitirExcesoPr> listaOmitirPr, List<SiParametroValorDTO> listaBloqueHorario)
        {
            string strSeparador = ConstantesIndisponibilidades.StrSeparador;

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 4;
            nfi.NumberDecimalSeparator = ".";

            List<IndReporteDetDTO> listaRptFortExceso = new List<IndReporteDetDTO>();

            foreach (var regDet in listaRptDetIndisp)
            {
                DateTime fecha = regDet.Idethoraini.Value.Date;
                EqEquipoDTO regUnidad = listaUnidad.Find(x => x.Equicodi == regDet.Equicodi && x.Grupocodi == regDet.Grupocodi);
                List<EqEquipoDTO> listaEquipoXUnidad = listaEquipoTermicos.Where(x => regUnidad.ListaEquicodi.Contains(x.Equicodi)).ToList();

                List<int> listaEquicodiDisp = regUnidad.ListaEquicodi.Where(x => !regDet.ListaEquicodi.Contains(x)).ToList();
                List<string> listaEquiabrev = listaEquipoXUnidad.Where(x => regDet.ListaEquicodi.Contains(x.Equicodi)).OrderBy(x => x.Equiabrev).Select(x => x.Equiabrev).ToList();

                //calcular omisión pr
                List<int> listaEqOmitirXDia = listaOmitirPr.Where(x => x.FechaOmision == fecha).Select(y => y.Equicodi).Distinct().ToList();
                var tieneOmision = regDet.ListaEquicodi.Any(x => listaEqOmitirXDia.Contains(x)) || listaEqOmitirXDia.Contains(regUnidad.Equipadre ?? 0);

                if (regUnidad != null && regUnidad.Pe > 0)
                {
                    //Pe
                    decimal pe = regUnidad.Pe.GetValueOrDefault(0);
                    string peDesc = string.Empty;

                    #region Parcial Fortuita: Verificar si existe Parcial programado

                    if (regDet.Equicodi == 290 && fecha == new DateTime(2021, 3, 1))
                    { }

                    if (regDet.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial)
                    {
                        //verificar programados y excesos
                        IndReporteDetDTO regProgParcial = listaRptDetCuadro2ParcialProg.Find(x => x.Equicodi == regDet.Equicodi && x.Grupocodi == regDet.Grupocodi
                                                                                                && x.Idethoraini <= regDet.Idethoraini && regDet.Idethorafin <= x.Idethorafin);

                        if (regProgParcial != null)
                        {
                            //solo quedan 'disponibles' las unidades que no tiene unidades programadas parciales
                            List<int> listaEquicodiSinParcialProg = regUnidad.ListaEquicodi.Where(x => !regProgParcial.ListaEquicodi.Contains(x)).ToList();

                            //obtener potencia de las unidades que quedan 'disponibles'
                            ObtenerDatosPrToIndReporteDetDTO(1000, listaGrupoModo, regUnidad.ListaEquicodi, regDet.ListaEquicodi, listaEquicodiSinParcialProg, out decimal? prPrevistatmp, out List<PrGrupoDTO> listaMccTmp);
                            pe = listaMccTmp.Select(x => x.Potencia ?? 0).Sum(x => x);
                            peDesc = string.Join(", ", listaMccTmp.Select(x => string.Format("{0} {1} MW", x.Grupoabrev, x.Potencia.Value.ToString("N", nfi))));

                            //obtener modo de operación indisponible
                            List<int> listaEquicodiDispFort = listaEquicodiSinParcialProg.Where(x => !regDet.ListaEquicodi.Contains(x)).ToList();
                            ObtenerDatosPrToIndReporteDetDTO(1000, listaGrupoModo, listaEquicodiDispFort, listaEquicodiDispFort, listaEquicodiDispFort, out decimal? prPrevistatmp2, out List<PrGrupoDTO> listaMccTmp2);
                            regDet.ListaMcc = listaMccTmp2;

                            //nueva potencia teorica
                            regDet.PrPrevista = pe - regDet.ListaMcc.Select(x => x.Potencia ?? 0).Sum(x => x);
                        }
                    }

                    #endregion

                    #region Medidores para el mensual

                    //medidores de la unidad
                    decimal pPromGen = 0;
                    string msjPlenaCarga = string.Empty;

                    if (esMensual)
                    {
                        //Plena carga durante toda la hora punta
                        msjPlenaCarga = TienenHoPotenciaEnergiaPlenaCarga(listaEquipoXUnidad, regUnidad.ListaEquicodi, regDet.ListaEquicodi, fecha, regDet.Idethoraini.Value, regDet.Idethorafin.Value, listaHOplenacarga, listaBloqueHorario
                                                                        , out List<int> listaEquicodiPlenaCargaAllTiempo);

                        if (msjPlenaCarga == string.Empty)
                        {
                            HorasOperacionAppServicio.GetHoraIniFin96Medidores(fecha, regDet.Idethoraini.Value.AddMinutes(1), regDet.Idethorafin.Value.AddMinutes(-1), out int hi, out int hf);
                            hi = (hi == 0 ? 1 : hi);

                            List<MeMedicion96DTO> lista96XDiaXEq = lista96PlenaCarga.Where(x => x.Medifecha == fecha && listaEquicodiPlenaCargaAllTiempo.Contains(x.Equicodi)).ToList();
                            for (int h = hi; h <= hf; h++)
                            {
                                foreach (var reg96 in lista96XDiaXEq)
                                {
                                    decimal? valor = (decimal?)reg96.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(reg96, null);
                                    pPromGen += valor.GetValueOrDefault(0);
                                }
                            }

                            pPromGen = pPromGen / (hf - hi + 1);
                        }
                    }

                    #endregion

                    //Delega servicio RPF (solo se usa POR POTENCIA O ENERGIA o el teorico)
                    bool delegaRPF = false;

                    //Reserva Asignada para la regulación primaria y/o secundaria de frecuencia (MW)
                    GetValorDecimalFromListaGrupoDat(fecha, 0, listaHistoricoRpf, out decimal? valorRpf, out DateTime? fechaVigencia);
                    decimal ra = valorRpf.GetValueOrDefault(0) * pe;
                    string sRa = string.Format("{0}% * Pe", (valorRpf.GetValueOrDefault(0) * 100).ToString("N", nfi));

                    //Potencia limitada en el PDO, RDO u Operación en tiempo real (MW)
                    decimal plim = 0;

                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /////verificar Disponibilidad de combustible
                    #region verificar Disponibilidad de combustible
                    //decimal pr1DispComb = 0;
                    //string pr1DispCombDescAdic = string.Empty;

                    //if (regDet.Idettipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial)
                    //{
                    //    if (pasgComb6horas > pasgOpvarias)
                    //    {
                    //        pr1DispComb = Math.Max(0, k * pe - pasgComb6horas);
                    //        pr1DispCombDescAdic += "El combustible necesario para operar por 6 horas (CHP) a potencia efectiva es mayor al Stock de combustible disponible" + strSeparador;
                    //    }
                    //}
                    //else
                    //{
                    //    if (pe == pasgComb6horas && pasgComb6horas > pasgOpvarias)
                    //    {
                    //        pr1DispComb = Math.Max(0, k * pe - pasgComb6horas);
                    //        pr1DispCombDescAdic += "El combustible necesario para operar por 6 horas (CHP) a potencia efectiva es igual al Stock de combustible disponible." + strSeparador;
                    //    }
                    //}
                    //pr1DispCombDescAdic += "Pe: " + pe.ToString("N", nfi) + strSeparador;
                    //pr1DispCombDescAdic += "P op varias: " + pasgOpvarias.ToString("N", nfi) + strSeparador;
                    //pr1DispCombDescAdic += "P prom hp: " + pasgComb6horas.ToString("N", nfi) + strSeparador;

                    #endregion

                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////                    
                    //verificar Limitación en la generación                    
                    decimal pr2LimGen = 0;
                    List<string> listaPr2LimGenDescAdic = new List<string>();

                    //P efec mcc: Potencia Efectiva del modo de la central de ciclo combinado resultante del mantenimiento (MW). Pe quitando a la unidad que esta en mantenimiento
                    decimal pEfecMcc = regUnidad.TieneCicloComb ? regDet.ListaMcc.Select(x => x.Potencia ?? 0).Sum(x => x) : 0.0m;
                    if (regUnidad.TieneCicloComb && !regDet.ListaMcc.Any())
                        pEfecMcc = pe - regDet.PrPrevista.GetValueOrDefault(0); //para unidades que tienen PR desde el insumo MANTTO

                    if (pEfecMcc <= 0 && regDet.PrPrevista.GetValueOrDefault(0) > 0)
                        plim = pe - regDet.PrPrevista.GetValueOrDefault(0);

                    //Para las unidades que forman parte de un ciclo combinado, la Pr se calcula de la siguiente manera
                    string sPEfecMcc = regUnidad.TieneCicloComb ? string.Join(", ", regDet.ListaMcc.Select(x => string.Format("{0} {1} MW", x.Grupoabrev, x.Potencia.Value.ToString("N", nfi)))) : "";
                    decimal prPrevista = pEfecMcc > 0 ? pe - pEfecMcc : regDet.PrPrevista.GetValueOrDefault(0);
                    string sPrPrevista = "Pe - pEfecMcc";

                    #region Calcular Potencia restringida

                    decimal pExceso = 0;
                    string sPExceso = "";

                    string formulaUtilizada = string.Empty;
                    //Para las unidades térmicas que no forman parte de un ciclo combinado, la Pr se calcula de la siguiente manera:
                    if (!regUnidad.TieneCicloComb)
                    {
                        //operó en HP y a plena carga
                        if (pPromGen > 0)
                        {
                            if (!delegaRPF)
                            {
                                pr2LimGen = Math.Max(0, pe - pPromGen - ra);
                                formulaUtilizada = "PrLimGen = Max(0, Pe - PpromGen - Ra)";
                            }
                            else
                            {
                                pr2LimGen = Math.Max(0, pe - pPromGen);
                                formulaUtilizada = "PrLimGen = Max(0, Pe - PpromGen)";
                            }
                        }
                        else
                        {
                            //no operó en HP
                            pr2LimGen = Math.Max(0, pe - plim);
                            formulaUtilizada = "PrLimGen = Max(0, Pe - PLim)";
                        }
                    }
                    else
                    {
                        ra = valorRpf.GetValueOrDefault(0) * pPromGen;
                        //operó en HP y a plena carga
                        if (pPromGen > 0)
                        {
                            if (!delegaRPF)
                            {
                                pr2LimGen = Math.Max(0, pe - pPromGen - ra);
                                formulaUtilizada = "PrLimGen = Max(0, Pe - PpromGen - Ra)";
                            }
                            else
                            {
                                pr2LimGen = Math.Max(0, pe - pPromGen);
                                formulaUtilizada = "PrLimGen = Max(0, Pe - PpromGen)";
                            }
                        }
                        else
                        {
                            //no operó en HP
                            pr2LimGen = Math.Max(0, pe - pEfecMcc);
                            formulaUtilizada = "PrLimGen = Max(0, Pe - PefecMcc)";
                        }

                        if (regDet.Idettipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial)
                        {
                            pExceso = pr2LimGen - prPrevista;
                            sPExceso = "PrLimGen - PrPrevista";
                        }
                    }

                    #endregion

                    #region Mensajes Limitación en la generación

                    //datos
                    listaPr2LimGenDescAdic.Add("Limitación en la generación");
                    listaPr2LimGenDescAdic.Add("");
                    listaPr2LimGenDescAdic.Add(string.Format("Indisponible {0}", string.Join(", ", listaEquiabrev)));
                    listaPr2LimGenDescAdic.Add(string.Format("Pe: {0} MW {1}", pe.ToString("N", nfi), peDesc != "" ? string.Format("({0})", peDesc) : ""));

                    listaPr2LimGenDescAdic.Add(!regUnidad.TieneCicloComb ? "La unidad NO forma parte de un ciclo combinado." : "La unidad forma parte de un ciclo combinado.");
                    if (pPromGen > 0)
                        listaPr2LimGenDescAdic.Add("La unidad operó en Hora Punta por Potencia o Energía y a Plena Carga.");
                    else
                    {
                        if (esMensual)
                            listaPr2LimGenDescAdic.Add("La unidad NO operó en Hora Punta por Potencia o Energía y a Plena Carga." + msjPlenaCarga);
                    }
                    listaPr2LimGenDescAdic.Add("");

                    listaPr2LimGenDescAdic.Add(string.Format("Fórmula: {0}", formulaUtilizada));
                    listaPr2LimGenDescAdic.Add("");

                    //pr2LimGenDescAdic += (delegaRPF ? "La unidad delega el servicio de RPF." : "La unidad NO delega el servicio de RPF.") + strSeparador;
                    if (pPromGen > 0)
                        listaPr2LimGenDescAdic.Add(string.Format("PpromGen: {0} MW (Medidores)", pPromGen.ToString("N", nfi)));
                    if (ra > 0)
                        listaPr2LimGenDescAdic.Add(string.Format("Ra: {0} ({1})", ra.ToString("N", nfi), sRa));
                    if (plim > 0)
                        listaPr2LimGenDescAdic.Add(string.Format("PLim: {0} MW", plim.ToString("N", nfi)));
                    listaPr2LimGenDescAdic.Add(string.Format("PefecMcc: {0} MW ({1})", pEfecMcc.ToString("N", nfi), sPEfecMcc));
                    listaPr2LimGenDescAdic.Add(string.Format("PrPrevista: {0} MW ({1})", prPrevista.ToString("N", nfi), sPrPrevista));
                    listaPr2LimGenDescAdic.Add(string.Format("PrLimGen: {0} MW", pr2LimGen.ToString("N", nfi)));

                    #endregion

                    //
                    List<string> listaPrResultadoAdic = new List<string>();
                    listaPrResultadoAdic.Add("Resultado:");

                    decimal pr = pExceso > 0 ? prPrevista : pr2LimGen;

                    if (regDet.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial)
                    {
                        if (pr2LimGen > prPrevista)
                        {
                            listaPrResultadoAdic.Add("La PrLimGen es mayor a la PrPrevista. Pr = PrPrevista ");
                            pr = prPrevista;
                        }
                    }

                    decimal prTotal = pr; //se adiciona el exceso para cumplir la condición del 15%

                    #region Verificar que la potencia restringida no sobrepase la potencia efectiva

                    if (regDet.Equicodi == 11513 && fecha == new DateTime(2021, 1, 1))
                    { }

                    if (regDet.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial)
                    {
                        //verificar programados y excesos
                        List<IndReporteDetDTO> listaProgParcial = listaRptDetCuadro2ParcialProg.Where(x => x.Equicodi == regDet.Equicodi && x.Grupocodi == regDet.Grupocodi
                                                                                                && x.Idethoraini <= regDet.Idethoraini && regDet.Idethorafin <= x.Idethorafin).ToList();

                        //si ya existe indisponibilidad programada parcial, se considera que estas unidades tambien estan indisponibles
                        if (listaProgParcial.Any())
                        {
                            decimal prProg = listaProgParcial.Sum(x => x.Idetpr ?? 0);
                            if (pr + prProg > regUnidad.Pe)
                            {
                                if (prPrevista + prProg <= regUnidad.Pe)
                                {
                                    listaPrResultadoAdic.Add("La potencia restringida prog y fort es mayor a la potencia efectiva. Fórmula: PrLimGen = PrPrevista");
                                    pr = prPrevista;
                                }
                                else
                                {
                                    listaPrResultadoAdic.Add("La potencia restringida prog y fort es mayor a la potencia efectiva. Fórmula: PrLimGen = Pe - PrProgramada");
                                    pr = regUnidad.Pe.GetValueOrDefault(0) - prProg;
                                }
                            }
                        }
                    }

                    #endregion

                    if (pExceso > 0)
                        listaPrResultadoAdic.Add(string.Format("Pr exceso: {0} MW ({1})", pExceso.ToString("N", nfi), sPExceso));
                    listaPrResultadoAdic.Add(string.Format("Pr: {0} MW", pr.ToString("N", nfi)));

                    //cumple criterio de indisponibilidad parcial fortuita (CIF) y programada: 
                    //si el Pr (Potencia restringida) es igual o mayor al 15% de la potencia efectiva multiplicada por el factor K
                    if (prTotal >= (0.15m * pe) && prTotal <= pe)
                    {
                        regDet.Idetpr = pr;
                        decimal minutosIndispParcial = (pr * regDet.Idetmin.GetValueOrDefault(0)) / regUnidad.Pe.GetValueOrDefault(0); //el cálculos de los minutos se hace sobre la maxima potencia efectiva a pesar que las unidades disponibles puedan tener menor pe que la central
                        regDet.Idetminparcial = minutosIndispParcial;

                        //guardar la información del cálculo
                        List<string> lresultado = new List<string>();
                        lresultado.AddRange(listaPr2LimGenDescAdic);
                        lresultado.Add(" ");
                        lresultado.AddRange(listaPrResultadoAdic);
                        string desadic = string.Join(strSeparador, lresultado);
                        if (desadic.Length > 800) desadic = desadic.Substring(0, 799);

                        regDet.Idetdescadic = desadic;

                        //agregar el exceso como fortuito
                        if (regDet.Idettipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial && pExceso > 0)
                        {
                            if (!tieneOmision)
                            {
                                regDet.Idettieneexc = ConstantesAppServicio.SI;

                                //crear nuevo registro
                                var regDetFort = (IndReporteDetDTO)regDet.Clone();
                                regDetFort.Idettipoindisp = ConstantesIndisponibilidades.INDFortuitaParcial;
                                regDetFort.Idetpr = pExceso;
                                decimal minutosIndispParcialExceso = (pExceso * regDet.Idetmin.GetValueOrDefault(0)) / pe;
                                regDetFort.Idetminparcial = minutosIndispParcialExceso;
                                regDetFort.Idettieneexc = ConstantesAppServicio.SI;

                                listaRptFortExceso.Add(regDetFort);
                            }
                        }
                    }
                }
            }

            listaRptDetIndisp = listaRptDetIndisp.Where(x => x.Idetpr > 0).ToList();

            //agregar el exceso
            listaRptDetIndisp.AddRange(listaRptFortExceso);

            return listaRptDetIndisp;
        }

        public List<IndReporteDetDTO> GenerarIndisponibilidadesParcialesYPrPrevista(int cuadro, List<EveManttoDTO> listaIndisp, List<EveManttoDTO> listaRangoIndispRegla7Dias
                                                                        , List<EqEquipoDTO> listaUnidad, List<PrGrupoDTO> listaGrupoModo)
        {
            List<IndReporteDetDTO> listaRptDet = this.GenerarDetalleCuadro(cuadro, listaIndisp, listaRangoIndispRegla7Dias, ConstantesAppServicio.SI);

            foreach (var regDet in listaRptDet)
            {
                EqEquipoDTO regUnidad = listaUnidad.Find(x => x.Equicodi == regDet.Equicodi && x.Grupocodi == regDet.Grupocodi);

                if (regUnidad.Equipadre == 11571 && regDet.Idethoraini.Value.Date == new DateTime(2021, 1, 1))
                { }

                List<int> listaAllEquicodi = regUnidad.ListaEquicodi;
                List<int> listaEquicodiIndisp = regDet.ListaEquicodi;
                List<int> listaEquicodiDisp = listaAllEquicodi.Where(x => !listaEquicodiIndisp.Contains(x)).ToList();

                ObtenerDatosPrToIndReporteDetDTO(regUnidad.Pe, listaGrupoModo, listaAllEquicodi, listaEquicodiIndisp, listaEquicodiDisp, out decimal? prPrevista, out List<PrGrupoDTO> listaMcc);

                if (prPrevista > 0)
                {
                    regDet.PrPrevista = prPrevista; //esta prprevista es preliminar ya que no tiene el Factor K
                    regDet.ListaMcc = listaMcc;
                }
            }

            listaRptDet = listaRptDet.Where(x => x.PrPrevista > 0).ToList();

            return listaRptDet;
        }

        private void ObtenerDatosPrToIndReporteDetDTO(decimal? pe, List<PrGrupoDTO> listaGrupoModo, List<int> listaAllEquicodi, List<int> listaEquicodiIndisp, List<int> listaEquicodiDisp
                                                    , out decimal? prPrevista, out List<PrGrupoDTO> listaMcc)
        {
            prPrevista = null;
            listaMcc = new List<PrGrupoDTO>();

            List<PrGrupoDTO> listaModoXUnidad = listaGrupoModo.Where(x => x.ListaEquicodi.Any(y => listaAllEquicodi.Contains(y))).OrderByDescending(x => x.Potencia).ToList();

            List<PrGrupoDTO> listaModoDispXUnidad = new List<PrGrupoDTO>();
            if (listaEquicodiIndisp.Any())
            {
                //listaModoIndispXUnidad = new List<PrGrupoDTO>();

                foreach (var regModo in listaModoXUnidad)
                {
                    if (listaEquicodiDisp.Any() && regModo.ListaEquicodi.All(y => listaEquicodiDisp.Contains(y)))
                    {
                        listaModoDispXUnidad.Add(regModo);
                        listaEquicodiDisp = listaEquicodiDisp.Where(x => !regModo.ListaEquicodi.Contains(x)).ToList();
                    }
                }
            }

            if (listaModoDispXUnidad.Any())
            {
                decimal valorDisp = listaModoDispXUnidad.Select(x => x.Potencia ?? 0).Sum(x => x);
                prPrevista = pe.GetValueOrDefault(0) - valorDisp; //esta prprevista es preliminar ya que no tiene el Factor K
                listaMcc = listaModoDispXUnidad;
            }
            else
            {
            }
        }

        public string TienenHoPotenciaEnergiaPlenaCarga(List<EqEquipoDTO> listaEquipos, List<int> listaEquicodiUnidad, List<int> listaEquicodiIndisp, DateTime fecha, DateTime horaIniIndisp, DateTime horaFinIndisp
                                                    , List<EveHoraoperacionDTO> listaHOP, List<SiParametroValorDTO> listaBloqueHorario, out List<int> listaEquicodiPlenaCargaAllTiempo)
        {
            listaEquicodiPlenaCargaAllTiempo = new List<int>();
            string msj = string.Empty;

            //parámetros de hora punta vigente para la fecha de consulta
            SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fecha.Date, ParametrosFormato.ResolucionCuartoHora);

            //
            List<int> listaEquicodiDisp = listaEquicodiUnidad.Where(x => !listaEquicodiIndisp.Contains(x)).ToList();
            List<EveHoraoperacionDTO> listaHODisp = listaHOP.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoUnidad && listaEquicodiDisp.Contains(x.Equicodi ?? 0)).ToList();

            List<DateTime> listaFechaHP = new List<DateTime>();
            var fecha1 = fecha.Date.AddSeconds(paramHPyHFP.SegIniHP);
            var fecha2 = fecha.Date.AddSeconds(paramHPyHFP.SegFinHP);
            listaFechaHP.Add(fecha1);
            listaFechaHP.Add(fecha2);
            listaFechaHP.Add(horaIniIndisp);
            listaFechaHP.Add(horaFinIndisp);

            foreach (int equicodiDisp in listaEquicodiDisp)
            {
                string equiabrev = listaEquipos.Find(x => x.Equicodi == equicodiDisp)?.Equiabrev;
                List<EveHoraoperacionDTO> listaHOxEq = listaHODisp.Where(x => x.Equicodi == equicodiDisp && x.Hophorini.Value.Date == fecha).OrderBy(x => x.Hophorini).ThenBy(x => x.Hophorfin).ToList();

                List<EveHoraoperacionDTO> listaHo = HorasOperacionAppServicio.ListarHorasDivididoXHoras(fecha, listaHOxEq, listaFechaHP).Where(x => x.EventoGenerado != ConstantesIndisponibilidades.EventoGeneradoFicticio).OrderBy(x => x.Hophorini).ToList();
                //dentro del intervalo de hora punta
                listaHo = listaHo.Where(x => x.Hophorini >= fecha1 && x.Hophorfin <= fecha2).ToList();
                //dentro del intervalo de indisponibilidad
                listaHo = listaHo.Where(x => x.Hophorini >= horaIniIndisp && x.Hophorfin <= horaFinIndisp).ToList();

                if (listaHo.Any())
                {
                    string msjEq = string.Empty;

                    for (int i = 0; i < listaHo.Count; i++)
                    {
                        if (i == 0)
                        {
                            if (listaHo[i].Hophorini != horaIniIndisp)
                                msjEq = string.Format("{0}: {1} no inicia a plena carga", listaHo[i].Hophorini.Value.ToString(ConstantesAppServicio.FormatoHora), equiabrev);
                        }
                        else
                        {
                            if (listaHo[i - 1].Hophorfin != listaHo[i].Hophorini)
                                msjEq = string.Format("{0}: {1} no continúa a plena carga", listaHo[i].Hophorini.Value.ToString(ConstantesAppServicio.FormatoHora), equiabrev);
                        }

                        if (i == listaHo.Count - 1)
                        {
                            if (listaHo[i].Hophorfin != horaFinIndisp)
                                msjEq = string.Format("{0}: {1} no termina a plena carga", listaHo[i].Hophorfin.Value.ToString(ConstantesAppServicio.FormatoHora), equiabrev);
                        }
                    }

                    if (msjEq == "")
                        listaEquicodiPlenaCargaAllTiempo.Add(equicodiDisp);
                    else
                        msj = msjEq;
                }
            }

            if (!listaEquicodiPlenaCargaAllTiempo.Any())
            {
                if (!listaEquicodiDisp.Any())
                    return "No existen unidades que operen a Plena Carga";

                return msj;
            }

            return string.Empty;
        }

        private void ListarDespacho48(DateTime fechaIni, DateTime fechaFin, out List<MeMedicion48DTO> listaM48, out List<MeMedicion48DTO> lista48PlenaCarga)
        {
            var servEjec = (new EjecutadoAppServicio());

            listaM48 = servEjec.ListaDataMDGeneracionConsolidado48(fechaIni, fechaFin, ConstantesMedicion.IdTipogrupoCOES
                                                    , ConstantesMedicion.IdTipoGeneracionTermoelectrica.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString()
                , ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, Int32.Parse(ConstantesAppServicio.LectcodiEjecutadoHisto));

            List<EveHoraoperacionDTO> listaHOplenacarga = ListarHoPotenciaPlenaCarga(fechaIni, fechaFin);

            lista48PlenaCarga = servEjec.ListarData48CruceHorasOperacion(fechaIni, fechaFin, listaM48, listaHOplenacarga, true, true);
        }

        private void ListarMedidores96(DateTime fechaIni, DateTime fechaFin, out List<MeMedicion96DTO> lista96PlenaCarga, out List<EveHoraoperacionDTO> listaHOplenacarga)
        {
            var servMedidores = (new ReporteMedidoresAppServicio());

            List<MeMedicion96DTO> listaM96 = servMedidores.ListaDataMDGeneracionConsolidado(fechaIni, fechaFin, ConstantesMedicion.IdTipogrupoCOES
                                                    , ConstantesMedicion.IdTipoGeneracionTermoelectrica.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString()
                , ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false);

            listaHOplenacarga = ListarHoPotenciaPlenaCarga(fechaIni, fechaFin);

            lista96PlenaCarga = servMedidores.ListarData96CruceHorasOperacion(fechaIni, fechaFin, listaM96, listaHOplenacarga, true, true, out List<LogErrorHOPvsMedidores> listaValidacionMedidores);
        }

        public List<MeMedicion96DTO> ListarReservaSecundaria15min(DateTime fechaIni, DateTime fechaFin)
        {
            var servRsf = new RsfAppServicio();
            List<MeMedicion96DTO> lista96 = new List<MeMedicion96DTO>();

            for (var day = fechaIni; day <= fechaFin; day = day.AddDays(1))
            {
                List<EveRsfdetalleDTO> configuracion = servRsf.ObtenerConfiguracion(day);
                List<EveRsfhoraDTO> listHoras = FactorySic.GetEveRsfhoraRepository().GetByCriteria(day);
                List<EveRsfdetalleDTO> detalle = FactorySic.GetEveRsfdetalleRepository().ObtenerDetalleReserva(day);

                foreach (EveRsfdetalleDTO item in configuracion)
                {
                    List<EveRsfdetalleDTO> listaRegistro = detalle.Where(x => x.Grupocodi == item.Grupocodi && x.Equicodi == item.Equicodi).ToList();

                    var reg96 = new MeMedicion96DTO();
                    reg96.Medifecha = day;
                    reg96.Grupocodi = item.Grupocodi ?? 0;
                    reg96.Equicodi = item.Equicodi ?? 0;

                    foreach (EveRsfhoraDTO hora in listHoras)
                    {
                        EveRsfdetalleDTO registro = listaRegistro.Find(x => x.Rsfhorcodi == hora.Rsfhorcodi);

                        decimal? up = null, down;
                        if (registro != null)
                        {
                            string ind = registro.Rsfdetindope;

                            up = (registro.Rsfdetsub != null) ? registro.Rsfdetsub : null;
                            down = (registro.Rsfdetbaj != null) ? registro.Rsfdetbaj : null;

                            if (up == null && down == null)
                            {
                                up = (registro.Rsfdetvalaut != null) ? registro.Rsfdetvalaut : null;
                                down = up;
                            }
                            //if (string.IsNullOrEmpty(ind) && !string.IsNullOrEmpty(up) && !string.IsNullOrEmpty(down)) ind = 1.ToString();
                        }

                        int h48 = IntervencionesAppServicio.GetPosicionHoraInicial48Validaciones(hora.Rsfhorinicio.Value);
                        if (h48 >= 1 && h48 <= 48)
                        {
                            int hIni48 = h48 * 2 - 1;
                            int hFin48 = h48 * 2;

                            reg96.GetType().GetProperty(ConstantesAppServicio.CaracterH + hIni48).SetValue(reg96, up);
                            reg96.GetType().GetProperty(ConstantesAppServicio.CaracterH + hFin48).SetValue(reg96, up);
                        }
                    }

                    lista96.Add(reg96);
                }
            }

            return lista96;
        }

        private List<EveHoraoperacionDTO> ListarHoPotenciaPlenaCarga(DateTime fechaIni, DateTime fechaFin)
        {
            var servHo = new HorasOperacionAppServicio();
            List<EveHoraoperacionDTO> listaHOP = servHo.ListarHorasOperacionByCriteria(fechaIni, fechaFin.AddDays(1), ConstantesHorasOperacion.ParamEmpresaTodos, ConstantesHorasOperacion.ParamCentralTodos, ConstantesHorasOperacion.TipoListadoTodo);
            listaHOP = servHo.CompletarListaHoraOperacionTermo(listaHOP);

            List<EveHoraoperacionDTO> listaHOPlenaCarga = new List<EveHoraoperacionDTO>();

            //Desglose de las horas de operación
            List<EveHoEquiporelDTO> listaDesgloseRango = this.servHO.GetByCriteriaEveHoEquiporelGroupByHoPadre(fechaIni, fechaFin);

            List<EveHoraoperacionDTO> listaHoModo = listaHOP.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoModo).OrderBy(x => x.Hophorini).ToList();
            listaHoModo = listaHoModo.Where(x => x.Subcausacodi == ConstantesSubcausaEvento.SubcausaPorPotenciaEnergia).ToList();
            foreach (var reg in listaHoModo) //horas de operación padre
            {
                var listaHoHijo = listaHOP.Where(x => x.Hopcodipadre == reg.Hopcodi).ToList();
                var listaDesglose = listaDesgloseRango.Where(x => x.Hopcodi == reg.Hopcodi && x.Subcausacodi == ConstantesOperacionesVarias.SubcausacodiPlenacarga).ToList();

                foreach (var objPlenaCarga in listaDesglose)
                {
                    EveHoraoperacionDTO regCloneHo = (EveHoraoperacionDTO)reg.Clone();
                    regCloneHo.Hophorini = objPlenaCarga.Ichorini;
                    regCloneHo.Hophorfin = objPlenaCarga.Ichorfin;

                    foreach (var regHijo in listaHoHijo)
                    {
                        EveHoraoperacionDTO regCloneHoHijo = (EveHoraoperacionDTO)regHijo.Clone();
                        regCloneHoHijo.Hophorini = objPlenaCarga.Ichorini;
                        regCloneHoHijo.Hophorfin = objPlenaCarga.Ichorfin;

                        listaHOPlenaCarga.Add(regCloneHoHijo);
                    }

                    listaHOPlenaCarga.Add(regCloneHo);
                }
            }

            return listaHOPlenaCarga;
        }

        /// <summary>
        /// Generar total Ind. Reporte
        /// </summary>
        /// <param name="correlativo"></param>
        /// <param name="listaReporteDet"></param>
        /// <param name="listaUnidades"></param>
        /// <param name="famcodi"></param>
        /// <param name="tieneOpComercial"></param>
        /// <returns></returns>
        public List<IndReporteTotalDTO> GenerarTotal2(int correlativo, ref List<IndReporteDetDTO> listaReporteDet, List<EqEquipoDTO> listaUnidades
                                                        , int cuadro, int famcodi, string tieneOpComercial)
        {
            List<IndReporteTotalDTO> listaTotal = new List<IndReporteTotalDTO>();

            List<EqEquipoDTO> listaUnidadInput = listaReporteDet.DistinctBy(x => new { x.Equicodi, x.Grupocodi })
                                        .Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi.Value, Grupocodi = x.Grupocodi }).ToList();
            List<EqEquipoDTO> listaUnidadConData = new List<EqEquipoDTO>();

            int idTotal = correlativo;
            foreach (var regUnidadData in listaUnidadInput)
            {
                EqEquipoDTO regUnidad = listaUnidades.Find(x => x.Equicodi == regUnidadData.Equicodi && x.Grupocodi == regUnidadData.Grupocodi);

                if (regUnidad != null)
                {
                    string flagIndispProg = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiProg);
                    string flagIndispEjec = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiEjec);

                    //verificar que el día detalle tenga operacion comercial
                    List<IndReporteDetDTO> lIF = listaReporteDet.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Idettipoindisp == flagIndispEjec).OrderBy(x => x.Idethoraini).ToList();
                    List<IndReporteDetDTO> lIP = listaReporteDet.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Idettipoindisp == flagIndispProg).OrderBy(x => x.Idethoraini).ToList();

                    foreach (var regi in lIF)
                    {
                        regi.Itotcodi = idTotal;
                        regi.Idetincremental = regUnidad.Grupoincremental;
                        regi.Idetopcom = tieneOpComercial;

                        if (ConstantesAppServicio.SI == tieneOpComercial)
                        {
                            bool diaTieneOC = false;
                            if ((regUnidad.Equifechiniopcom <= regi.Idethoraini.Value.Date && regi.Idethoraini.Value.Date <= regUnidad.Equifechfinopcom)
                                || (regUnidad.Equifechiniopcom <= regi.Idethoraini.Value.Date && regUnidad.Equifechfinopcom == null)) diaTieneOC = true;

                            regi.Idetopcom = diaTieneOC ? ConstantesAppServicio.SI : ConstantesAppServicio.NO;
                        }
                    }
                    foreach (var regi in lIP)
                    {
                        regi.Itotcodi = idTotal;
                        regi.Idetincremental = regUnidad.Grupoincremental;
                        regi.Idetopcom = tieneOpComercial;

                        if (ConstantesAppServicio.SI == tieneOpComercial)
                        {
                            bool diaTieneOC = false;
                            if ((regUnidad.Equifechiniopcom <= regi.Idethoraini.Value.Date && regi.Idethoraini.Value.Date <= regUnidad.Equifechfinopcom)
                                || (regUnidad.Equifechiniopcom <= regi.Idethoraini.Value.Date && regUnidad.Equifechfinopcom == null)) diaTieneOC = true;

                            regi.Idetopcom = diaTieneOC ? ConstantesAppServicio.SI : ConstantesAppServicio.NO;
                        }
                    }

                    lIF = lIF.Where(x => x.Idetopcom == tieneOpComercial).ToList();
                    lIP = lIP.Where(x => x.Idetopcom == tieneOpComercial).ToList();

                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = famcodi,
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre.Value,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = regUnidad.UnidadnombPR25,
                        Itotminif = lIF.Sum(y => y.Idetmin),
                        Itotminip = lIP.Sum(y => y.Idetmin),
                        Itotminifparcial = lIF.Sum(y => y.Idetminparcial),
                        Itotminipparcial = lIP.Sum(y => y.Idetminparcial),
                        Itotpe = regUnidad.Pe,
                        Itotopcom = tieneOpComercial,
                        Itotincremental = regUnidad.Grupoincremental
                    };

                    listaTotal.Add(objUnidad);
                    listaUnidadConData.Add(regUnidad);
                    idTotal++;
                }
            }

            //obtener unidades que no tuvieron Indisponibilidades pero si son unidades validas durante el periodo
            List<EqEquipoDTO> listaUnidadesSinIndisp = listaUnidades.Except(listaUnidadConData).ToList();

            foreach (var regEq in listaUnidadesSinIndisp)
            {
                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = famcodi,
                    Emprcodi = regEq.Emprcodi.Value,
                    Equipadre = regEq.Equipadre.Value,
                    Grupocodi = regEq.Grupocodi,
                    Equicodi = regEq.Equicodi,
                    Itotunidadnomb = regEq.UnidadnombPR25,
                    Itotminif = 0,
                    Itotminip = 0,
                    Itotminifparcial = 0,
                    Itotminipparcial = 0,
                    Itotpe = regEq.Pe,
                    Itotopcom = tieneOpComercial,
                    Itotincremental = regEq.Grupoincremental
                };

                listaTotal.Add(objUnidad);
                idTotal++;
            }

            return listaTotal;
        }

        /// <summary>
        /// Fuego directo
        /// </summary>
        /// <param name="listaDat"></param>
        /// <returns></returns>
        public List<PrGrupodatDTO> ActualizarDatGrupoModoCaracteristicaAdicional(List<PrGrupodatDTO> listaDat)
        {
            //CONCEPTOS
            List<int> lConcepcodi = (ConstantesIndisponibilidades.ConcepcodisCurvaCombModo + ",285,286").Split(',').Select(x => Convert.ToInt32(x)).ToList();
            List<PrConceptoDTO> listaConcepto = FactorySic.GetPrConceptoRepository().List();
            listaConcepto = listaConcepto.Where(x => lConcepcodi.Contains(x.Concepcodi)).ToList();

            //VENTANILLA CCOMB TG 3 & TG 4 - GAS	
            List<PrGrupodatDTO> lista288 = listaDat.Where(x => x.Grupocodi == 288).ToList();

            if (lista288.Any())
            {
                List<int> listaOrig = new List<int>() { 175, 516, 177, 517, 179, 518, 181, 519, 183, 520, 14, 176, 178, 180, 182 };
                List<int> listaDest = new List<int>() { 177, 517, 179, 518, 181, 519, 183, 520, 286, 10286, 176, 178, 180, 182, 285 };

                for (var i = 0; i < listaOrig.Count; i++)
                {
                    List<PrGrupodatDTO> ldatOrig = lista288.Where(x => x.Concepcodi == listaOrig[i]).ToList();
                    var regCncDest = listaConcepto.Find(x => x.Concepcodi == listaDest[i]);
                    if (listaDest[i] == 10286)
                    {
                        regCncDest = new PrConceptoDTO()
                        {
                            Concepcodi = 10286,
                            Concepabrev = "CombPunto5_SI"
                        };
                    }

                    foreach (var regDat in ldatOrig)
                    {
                        PrGrupodatDTO datDest = new PrGrupodatDTO()
                        {
                            Grupocodi = 291,
                            Formuladat = regDat.Formuladat,
                            Fechadat = regDat.Fechadat,
                            ValorDecimal = regDat.ValorDecimal,
                            Concepcodi = regCncDest.Concepcodi,
                            Concepabrev = regCncDest.Concepabrev
                        };

                        listaDat.Add(datDest);
                    }
                }
            }

            return listaDat;
        }

        public List<IndReporteDetDTO> GenerarDetalleCuadro2XLimComb(List<EqEquipoDTO> listaUnidad, List<IndReporteDetDTO> listaRptDetIndisp
                                                            , List<CalculoEgenerable> listaEgenerable, List<SiParametroValorDTO> listaBloqueHorario)
        {
            List<SiFuenteenergiaDTO> listaFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().List();

            string strSeparador = ConstantesIndisponibilidades.StrSeparador;

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 4;
            nfi.NumberDecimalSeparator = ".";

            foreach (var regDet in listaRptDetIndisp)
            {
                DateTime fecha = regDet.Idethoraini.Value.Date;
                EqEquipoDTO regUnidad = listaUnidad.Find(x => x.Equicodi == regDet.Equicodi && x.Grupocodi == regDet.Grupocodi);

                if (regDet.Equicodi == 15108 && (new DateTime(2022, 2, 9)) == fecha)
                { }

                //solo tiene generable los que reportan en la Extranet de Stock de combustible programado
                CalculoEgenerable regEgenerable = listaEgenerable.Find(x => x.Unidad.Equicodi == regDet.Equicodi && x.Unidad.Grupocodi == regDet.Grupocodi && x.FechaDia == fecha);

                //parámetros de hora punta vigente para la fecha de consulta
                SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fecha.Date, ParametrosFormato.ResolucionCuartoHora);

                if (regUnidad != null && regUnidad.Pe > 0 && regEgenerable != null)
                {
                    //Pe
                    decimal pe = regUnidad.Pe.GetValueOrDefault(0);
                    decimal pmin = regUnidad.Pmin.GetValueOrDefault(0);
                    List<int> lfenergcodi = regEgenerable.ListaDetalle.Select(x => x.Fenergcodi).Distinct().ToList();
                    string strFenerg = string.Join(", ", listaFuenteEnergia.Where(x => lfenergcodi.Contains(x.Fenergcodi)).Select(x => (x.Fenergnomb ?? "").Trim()));

                    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                    /////verificar Disponibilidad de combustible

                    #region verificar Disponibilidad de combustible

                    //datos
                    List<string> listaPr2LimCombDescAdic = new List<string>();
                    string formulaUtilizada = "PrLimComb = Max(0, Pe - Ppromhp)";
                    string formulaUtilizada2 = "Ppromhp = Egenerable / #HP";

                    listaPr2LimCombDescAdic.Add("Limitación en disponibilidad de combustible");
                    listaPr2LimCombDescAdic.Add("");
                    listaPr2LimCombDescAdic.Add(string.Format("Pe: {0} MW", pe.ToString("N", nfi)));
                    listaPr2LimCombDescAdic.Add(string.Format("Pmin: {0} MW", pmin.ToString("N", nfi)));
                    listaPr2LimCombDescAdic.Add(string.Format("Tmin_op: {0} h", regEgenerable.Unidad.Tminoperacion));

                    listaPr2LimCombDescAdic.Add("");
                    listaPr2LimCombDescAdic.Add(string.Format("Fórmula: {0}", formulaUtilizada));
                    listaPr2LimCombDescAdic.Add(string.Format("{0}", formulaUtilizada2));

                    listaPr2LimCombDescAdic.Add("");
                    listaPr2LimCombDescAdic.Add(string.Format("Egenerable: {0} ({2} horas {1})", regEgenerable.Egenerable.ToString("N", nfi), strFenerg, paramHPyHFP.TotalHorasHP));
                    listaPr2LimCombDescAdic.Add(string.Format("Ppromhp: {0} MW", (regEgenerable.Egenerable / paramHPyHFP.TotalHorasHP).ToString("N", nfi)));

                    #endregion

                    //Resultados
                    List<string> listaPrResultadoAdic = new List<string>();
                    listaPrResultadoAdic.Add("Resultado:");

                    decimal pr1DispComb = Math.Max(0, pe - regEgenerable.Egenerable / paramHPyHFP.TotalHorasHP);
                    decimal prTotal = pr1DispComb;
                    listaPrResultadoAdic.Add(string.Format("Pr: {0} MW", prTotal.ToString("N", nfi)));

                    //cumple criterio de indisponibilidad parcial fortuita (CIF) y programada: 
                    //si el Pr (Potencia restringida) es igual o mayor al 15% de la potencia efectiva
                    if (prTotal >= (0.15m * pe) && prTotal <= pe)
                    {
                        regDet.Idetpr = prTotal;
                        decimal minutosIndispParcial = (prTotal * regDet.Idetmin.GetValueOrDefault(0)) / regUnidad.Pe.GetValueOrDefault(0); //el cálculos de los minutos se hace sobre la maxima potencia efectiva a pesar que las unidades disponibles puedan tener menor pe que la central
                        regDet.Idetminparcial = minutosIndispParcial;

                        //guardar la información del cálculo
                        List<string> lresultado = new List<string>();
                        lresultado.AddRange(listaPr2LimCombDescAdic);
                        lresultado.Add(" ");
                        lresultado.AddRange(listaPrResultadoAdic);
                        string desadic = string.Join(strSeparador, lresultado);
                        if (desadic.Length > 800) desadic = desadic.Substring(0, 799);

                        regDet.Idetdescadic = desadic;
                    }
                }
            }

            listaRptDetIndisp = listaRptDetIndisp.Where(x => x.Idetpr > 0).ToList();

            return listaRptDetIndisp;
        }

        public List<IndReporteDetDTO> ListarPeriodoDisponibleFromManttos(List<EqEquipoDTO> listaUnidad, List<IndReporteDetDTO> listaRptDetXIntComb, DateTime fechaIni, DateTime fechaFin, List<SiParametroValorDTO> listaBloqueHorario)
        {
            List<EveManttoDTO> dataAjuste = listaRptDetXIntComb.Select(x => new EveManttoDTO()
            {
                Evenclasecodi = ConstantesIndisponibilidades.EvenclasecodiEjec,
                Equicodi = x.Equicodi,
                Grupocodi = x.Grupocodi ?? 0,
                Emprcodi = x.Emprcodi,
                Equipadre = x.Equipadre,
                Central = x.Central,
                Evenini = x.Idethoraini.Value,
                Evenfin = x.Idethorafin.Value
            }).ToList();

            //Paso 1. Cambiar la fecha fin de las Manttos para aquello registros que acaban a las 23:59 (fin del día), se les adicionará 1minuto más para que sea el fin del día a las 00:00
            foreach (var reg in dataAjuste)
            {
                if (reg.Evenfin.Value.Hour == 23 && reg.Evenfin.Value.Minute == 59)
                    reg.Evenfin = reg.Evenfin.Value.Date.AddDays(1);
            }

            dataAjuste = GetListaEveManttoDivididaXListaEquicodi(dataAjuste, listaBloqueHorario);
            //los ficticios son los intervalos donde no existen manttos
            List<EveManttoDTO> listaOperativo = new List<EveManttoDTO>();
            //dataAjuste = dataAjuste.Where(y => y.EventoGenerado == ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList();
            for (var fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                //parámetros de hora punta vigente para la fecha de consulta
                SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fechaIni, ParametrosFormato.ResolucionCuartoHora);

                foreach (var regUnidad in listaUnidad)
                {
                    var lXUnidad = dataAjuste.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Evenini.Value.Date == fecha).ToList();
                    if (lXUnidad.Any())
                    {
                        listaOperativo.AddRange(lXUnidad.Where(y => y.EventoGenerado == ConstantesIndisponibilidades.EventoGeneradoFicticio).ToList());
                    }
                    else
                    {
                        //no existe manttos en el dia, entonces estuvo disponible
                        listaOperativo.Add(new EveManttoDTO()
                        {
                            Evenclasecodi = ConstantesIndisponibilidades.EvenclasecodiEjec,
                            Equicodi = regUnidad.Equicodi,
                            Grupocodi = regUnidad.Grupocodi ?? 0,
                            Emprcodi = regUnidad.Emprcodi ?? 0,
                            Equipadre = regUnidad.Equipadre,
                            Central = regUnidad.Central,
                            Evenini = fecha.AddSeconds(paramHPyHFP.SegIniHP),
                            Evenfin = fecha.AddSeconds(paramHPyHFP.SegFinHP)
                        });
                    }
                }
            }

            //Obtener la data para hora punta
            List<EveManttoDTO> dataIndisponible = new List<EveManttoDTO>();

            List<DateTime> listaFechaTodoElDia = listaOperativo.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();
            foreach (var fecha in listaFechaTodoElDia)
            {
                //parámetros de hora punta vigente para la fecha de consulta
                SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fechaIni, ParametrosFormato.ResolucionCuartoHora);

                List<EveManttoDTO> dataXFecha = listaOperativo.Where(x => x.Evenini >= fecha.AddSeconds(paramHPyHFP.SegIniHP)
                                                                    && x.Evenfin <= fecha.AddSeconds(paramHPyHFP.SegFinHP)).ToList();
                dataIndisponible.AddRange(dataXFecha);
            }

            //Listar Data para Salida
            List<IndReporteDetDTO> listaReporteDet = new List<IndReporteDetDTO>();

            List<DateTime> listaFecha = dataIndisponible.Select(x => x.Evenini.Value.Date).Distinct().OrderBy(x => x).ToList();

            foreach (var fecha in listaFecha)
            {
                foreach (var regUnidad in listaUnidad)
                {
                    List<EveManttoDTO> listaEjecXEqTmp = new List<EveManttoDTO>(), listaProgXEqTmp = new List<EveManttoDTO>(), listaFortXEqTmp = new List<EveManttoDTO>();

                    // Lista de Fechas por equipo
                    List<EveManttoDTO> dataXEq = dataIndisponible.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Evenini.Value.Date == fecha).ToList();
                    List<DateTime> listaFechaXEq = dataXEq.Select(x => x.Evenini.Value).Distinct().OrderBy(x => x).ToList();

                    for (int fi = 0; fi < listaFechaXEq.Count; fi++)
                    {
                        DateTime fechaPrueba = new DateTime(2020, 5, 27);
                        if (fecha.Date == fechaPrueba.Date && regUnidad.Equicodi == 13204)
                        { }

                        var prog = dataXEq.Find(y => y.Evenini == listaFechaXEq[fi]);
                        listaProgXEqTmp.Add(prog);
                    }

                    //Unir registros contiguos
                    List<EveManttoDTO> listaProgXEq = this.GetListaEveManttoUnificadaByTipo(ConstantesIndisponibilidades.ReportePR25Cuadro1, listaProgXEqTmp, ConstantesIndisponibilidades.TipoUnificacionCompleta);

                    //Guardar las Indisponibilidades programados
                    string flagIndispProg = ConstantesIndisponibilidades.INDProgramadaParcial;
                    foreach (var regEve in listaProgXEq)
                    {
                        int min = Convert.ToInt32((regEve.Evenfin.Value - regEve.Evenini.Value).TotalMinutes);
                        var regRangoIndispXeq = dataIndisponible.Find(x => x.Evenini <= regEve.Evenini && regEve.Evenfin <= x.Evenfin);

                        listaReporteDet.Add(new IndReporteDetDTO()
                        {
                            Emprcodi = regEve.Emprcodi,
                            Equipadre = regEve.Equipadre ?? 0,
                            Equicodi = regEve.Equicodi,
                            Grupocodi = regEve.Grupocodi,
                            ListaEquicodi = regEve.ListaEquicodi,
                            ListaEquicodiStr = string.Join(",", regEve.ListaEquicodi.OrderBy(x => x)),
                            PrPrevista = regEve.Evenpr,
                            Unidadnomb = !string.IsNullOrEmpty(regEve.Equinomb) ? regEve.Equinomb.Trim() : string.Empty,
                            Idetdia = fecha.Day,
                            Idettipoindisp = flagIndispProg,
                            Idethoraini = regEve.Evenini,
                            Idethorafin = regEve.Evenfin,
                            Idetmin = min,
                            Idetopcom = ConstantesAppServicio.SI,
                        });
                    }

                }
            }

            return listaReporteDet;
        }

        #endregion

        #region web Handson y excel

        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="tipoIndisp"></param>
        /// <param name="tgenernomb"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaAllDet"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaEquipo"></param>
        /// <param name="listaManttoBD"></param>
        /// <returns></returns>
        private HandsonModel GetHandsonXVersionReporteCuadro2(string tipoIndisp, string tgenernomb, List<IndReporteTotalDTO> listaTot, ref List<IndReporteDetDTO> listaAllDet
                                                            , DateTime fechaIni, DateTime fechaFin)
        {
            int numDias = (fechaFin - fechaIni).Days + 1;

            List<IndReporteDetDTO> listaDet = listaAllDet.Where(x => x.Idettipoindisp == tipoIndisp).ToList();

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "EMPRESA", IsMerge = 1, Ancho = 160, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "T. Generación", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "CENTRAL", IsMerge = 1, Ancho = 140, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", });//equicodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", });//grupocodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "UNIDAD", IsMerge = 1, Ancho = 155, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "PEfectiva", IsMerge = 1, Ancho = 155, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 0, Ancho = 70, AlineacionHorizontal = "Centro", });

            DateTime fechaXDia = fechaIni.AddDays(-1);
            for (int x = 1; x <= numDias; x++)
            {
                fechaXDia = fechaXDia.AddDays(1);
                listaCabecera.Add(new CabeceraRow() { TituloRow = fechaXDia.ToString("dd-MMM"), IsMerge = 0, Ancho = 50, AlineacionHorizontal = "Centro", });
            }
            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = true,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            int numColAntesdeFecha = 8;
            int numCol = numColAntesdeFecha + numDias;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();
            List<string[]> listaDescripcionHandson = new List<string[]>();
            List<string[]> listaFormatoHtmlHandson = new List<string[]>();

            List<CeldaCambios> arrCambioCells = new List<CeldaCambios>();

            foreach (var regTotalX in listaTot)
            {
                if (regTotalX.Equicodi == 13418)
                { }
                List<IndReporteDetDTO> listaDetXEq = listaDet.Where(x => x.Grupocodi == regTotalX.Grupocodi && x.Equicodi == regTotalX.Equicodi).OrderBy(x => x.Idethoraini).ToList();

                int numEjeXUnidad = listaDetXEq.Any() ? listaDetXEq.Max(x => x.NumEje) : 0;
                numEjeXUnidad += 1;

                for (int eje = 0; eje < numEjeXUnidad; eje++)
                {
                    var listaDetXTot = listaDetXEq.Where(x => x.NumEje == eje).ToList();

                    for (int z = 0; z < 5; z++)
                    {
                        string[] matriz = new string[numCol];
                        matriz[0] = regTotalX.Emprnomb; //EMPRESA
                        matriz[1] = tgenernomb; //oculto
                        matriz[2] = regTotalX.Central; //CENTRAL
                        matriz[3] = regTotalX.Equicodi.ToString(); //oculto
                        matriz[4] = regTotalX.Grupocodi.ToString(); //oculto
                        string[] matrizDesc = new string[numCol];
                        string[] matrizFmt = new string[numCol];

                        switch (z)
                        {
                            case 0:
                                matriz[5] = regTotalX.Itotunidadnomb;
                                matriz[6] = regTotalX.ItotpeC2.GetValueOrDefault(0).ToString();
                                matriz[7] = "Hora Inicial";
                                break;
                            case 1:
                                matriz[5] = regTotalX.Itotunidadnomb;
                                matriz[6] = regTotalX.ItotpeC2.GetValueOrDefault(0).ToString();
                                matriz[7] = "Hora Final";
                                break;
                            case 2:
                                matriz[5] = "P RESTRINGIDA";
                                matriz[6] = "P RESTRINGIDA";
                                matriz[7] = "MW";
                                break;
                            case 3:
                                matriz[5] = "T EQ_DURACIÓN";
                                matriz[6] = "T EQ_DURACIÓN";
                                matriz[7] = "Minutos";
                                break;
                            case 4:
                                matriz[5] = "T IND_PARCIAL";
                                matriz[6] = "T IND_PARCIAL";
                                matriz[7] = "Minutos";
                                break;
                        }

                        //foreach de dias del mes
                        fechaXDia = fechaIni.AddDays(-1);
                        for (int col = numColAntesdeFecha; col < numCol; col++)
                        {
                            fechaXDia = fechaXDia.AddDays(1);

                            IndReporteDetDTO regDetEqXDia = listaDetXTot.Find(x => x.Idethoraini.Value.Date == fechaXDia);

                            switch (z)
                            {
                                case 0: matriz[col] = (regDetEqXDia != null) ? regDetEqXDia.IdethorainiDesc : ""; break;
                                case 1: matriz[col] = (regDetEqXDia != null) ? regDetEqXDia.IdethorafinDesc : ""; break;
                                case 2: matriz[col] = (regDetEqXDia != null) ? regDetEqXDia.Idetpr.GetValueOrDefault(0).ToString() : ""; break;
                                case 3: matriz[col] = (regDetEqXDia != null) ? regDetEqXDia.Idetmin.GetValueOrDefault(0).ToString() : ""; break;
                                case 4: matriz[col] = (regDetEqXDia != null) ? regDetEqXDia.Idetminparcial.GetValueOrDefault(0).ToString() : ""; break;
                            }

                            if (z == 4)
                            {
                                //setear lista de manttos de la indisponibilidad 
                                if (regDetEqXDia != null)
                                {
                                    matrizDesc[col] = regDetEqXDia.CeldaDescripcion;
                                    matrizFmt[col] = regDetEqXDia.CeldaFormato;
                                }
                            }
                        }

                        listaDataHandson.Add(matriz);
                        listaDescripcionHandson.Add(matrizDesc);
                        listaFormatoHtmlHandson.Add(matrizFmt);
                        numFilaActual++;
                    }
                }
            }

            int numFil = listaDataHandson.Count;

            List<CeldaMerge> listaMerge = new List<CeldaMerge>();
            for (int i = 0; i < 5; i++) //agrupar las primeras 4 columnas (EMPRESA, TIPO GENERACION, CENTRAL, EQUICODI)
            {
                for (int fila = 0; fila < numFil; fila = fila + 5) //iniciar desde la segunda fila
                {
                    CeldaMerge cel = new CeldaMerge();
                    cel.col = i;
                    cel.row = fila;
                    cel.colspan = 1;
                    cel.rowspan = 5;
                    listaMerge.Add(cel);
                }
            }

            //agrupar unidades
            for (int fila = 0; fila < numFil; fila = fila + 5) //iniciar desde la segunda fila
            {
                //unidad
                CeldaMerge cel = new CeldaMerge();
                cel.col = 5;
                cel.row = fila;
                cel.colspan = 1;
                cel.rowspan = 2;
                listaMerge.Add(cel);

                //Pe
                CeldaMerge cel1 = new CeldaMerge();
                cel1.col = 6;
                cel1.row = fila;
                cel1.colspan = 1;
                cel1.rowspan = 2;
                listaMerge.Add(cel1);

                //P RESTRINGIDA
                CeldaMerge cel2 = new CeldaMerge();
                cel2.col = 5;
                cel2.row = fila + 2;
                cel2.colspan = 2;
                cel2.rowspan = 1;
                listaMerge.Add(cel2);

                //T EQ_DURACIÓN	
                CeldaMerge cel3 = new CeldaMerge();
                cel3.col = 5;
                cel3.row = fila + 3;
                cel3.colspan = 2;
                cel3.rowspan = 1;
                listaMerge.Add(cel3);

                //T IND_PARCIAL	
                CeldaMerge cel4 = new CeldaMerge();
                cel4.col = 5;
                cel4.row = fila + 4;
                cel4.colspan = 2;
                cel4.rowspan = 1;
                listaMerge.Add(cel4);
            }

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.ListaExcelDescripcion = listaDescripcionHandson.ToArray();
            handson.ListaExcelFormatoHtml = listaFormatoHtmlHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return handson;
        }

        public void GenerarRptExcelCuadro2(string ruta, int irptcodi, string centralIntegrante, string empresa, string central, int famcodi, DateTime fechaIni, DateTime fechaFin, out string nameFile)
        {
            this.GenerarReporteCuadroXVersionReporte(irptcodi, true, centralIntegrante, empresa, central, famcodi, fechaIni, fechaFin
                        , out HandsonModel handsonProg, out HandsonModel handsonFort
                        , out string htmlReporteConsolidado, out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                        , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld2);

            //Nombre de archivo
            nameFile = string.Format("PR25_Cuadro2_{0}_Version_{1}.xlsm", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCuadroReporteSoloCuadro2(xlPackage, "RESUMEN", true, 1, 2, "                 REPORTE DE INDISPONIBILIDADES - {0} {1}", "                            (CENTRALES TERMOELÉCTRICAS)"
                                                                            , regCuadro, regPeriodo, regVersion, listaReptHoja);
                xlPackage.Save();

                //PARCIAL_FORTUITA
                GenerarHojaExcelCuadroDetalleCuadro2(xlPackage, "PARCIAL_FORTUITA", 2, 1, "Térmica", ConstantesIndisponibilidades.INDFortuitaParcial, true, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                xlPackage.Save();

                //PARCIAL_PROGRAMADO
                GenerarHojaExcelCuadroDetalleCuadro2(xlPackage, "PARCIAL_PROGRAMADO", 2, 1, "Térmica", ConstantesIndisponibilidades.INDProgramadaParcial, true, fechaIni, fechaFin, listaReptHoja, listaRepdetHoja);
                xlPackage.Save();
            }
        }

        /// <summary>
        /// Generar hoja excel cuadro 1
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="regCuadro"></param>
        /// <param name="regPeriodo"></param>
        /// <param name="regVersion"></param>
        /// <param name="listaReptHoja"></param>
        private void GenerarHojaExcelCuadroReporteSoloCuadro2(ExcelPackage xlPackage, string nameWS, bool esMacro, int rowIni, int colIni, string titulo, string subtitulo
                                            , IndCuadroDTO regCuadro, IndPeriodoDTO regPeriodo, IndReporteDTO regVersion, List<IndReporteTotalDTO> listaReptHoja)
        {
            bool esOficial = false;
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            if (esMacro)
                xlPackage.Workbook.CreateVBAProject();

            string font = "TradeGothic Bold";
            string colorCeldaFijo = "#4F81BD";
            string colorCeldaCuerpo = "#DCE6F1";
            string colorTextoFijo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorTextoIndisp = "#9C0055";
            string colorCeldaIndisp = "#FFC7CE";
            string colorLinea = "#FFFFFF";

            #region  Filtros y Cabecera

            int colEmpresa = colIni;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colFortuitas = colUnidad + 1;
            int colProgramadas = colFortuitas + 1;
            int colParcialFortuita = colProgramadas + 1;
            int colParcialProgramada = colParcialFortuita + 1;

            if (esOficial)
            {
                ws.Cells[rowIni, colEmpresa].Value = EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(); //NOVIEMBRE
                UtilExcel.SetFormatoCelda(ws, rowIni, colEmpresa, rowIni, colEmpresa, "Centro", "Izquierda", "#A6A6A6", "#FFFFFF", font, 12, true);

                ws.Cells[rowIni + 1, colParcialProgramada].Value = regVersion.Irecainforme; //INFORME COES/D/DO/SME-INF-180-2020
                UtilExcel.SetFormatoCelda(ws, rowIni + 1, colParcialProgramada, rowIni + 1, colParcialProgramada, "Centro", "Derecha", "#000000", "#FFFFFF", "Arial", 8, false);

                ws.Cells[rowIni + 2, colUnidad].Value = regCuadro.Icuanombre; //CUADRO N°1
                UtilExcel.SetFormatoCelda(ws, rowIni + 2, colUnidad, rowIni + 2, colUnidad, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 20, false);

                ws.Cells[rowIni + 5, colCentral].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); //REPORTE DE INDISPONIBILIDADES - NOVIEMBRE 2020
                UtilExcel.SetFormatoCelda(ws, rowIni + 5, colCentral, rowIni + 5, colCentral, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 13, false);

                ws.Cells[rowIni + 6, colCentral].Value = subtitulo;
                UtilExcel.SetFormatoCelda(ws, rowIni + 6, colCentral, rowIni + 6, colCentral, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 13, false);
            }
            else
            {
                ws.Cells[rowIni + 2, colUnidad].Value = "REPORTE INTERMEDIO"; //CUADRO N°1
                UtilExcel.SetFormatoCelda(ws, rowIni + 2, colUnidad, rowIni + 2, colUnidad, "Centro", "Izquierda", "#000000", "#FFFFFF", font, 20, false);

                ws.Cells[rowIni + 5, colCentral].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); //REPORTE DE INDISPONIBILIDADES - NOVIEMBRE 2020
                UtilExcel.SetFormatoCelda(ws, rowIni + 5, colCentral, rowIni + 5, colCentral, "Centro", "Izquierda", "#000000", "#FFFFFF", font, 13, false);

            }

            int rowEmpresa = rowIni + 8;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colFortuitas].Value = "Parciales Fortuitas\n(Minutos)";
            ws.Cells[rowEmpresa, colProgramadas].Value = "Parciales Programados\n(Minutos)";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colProgramadas, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 8, false, true);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colEmpresa, rowEmpresa, colEmpresa, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colCentral, rowEmpresa, colCentral, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colUnidad, rowEmpresa, colUnidad, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colFortuitas, rowEmpresa, colFortuitas, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colProgramadas, rowEmpresa, colProgramadas, colorLinea);

            double factorAncho = 0.85;
            ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = ConstantesIndisponibilidades.RptCuadro1AnchoEmpresa * factorAncho;
            ws.Column(colCentral).Width = ConstantesIndisponibilidades.RptCuadro1AnchoCentral * factorAncho;
            ws.Column(colUnidad).Width = ConstantesIndisponibilidades.RptCuadro1AnchoUnidad * factorAncho;
            ws.Column(colFortuitas).Width = 16 * factorAncho;
            ws.Column(colProgramadas).Width = 16 * factorAncho;
            ws.Column(colParcialFortuita).Width = 16 * factorAncho;
            ws.Column(colParcialProgramada).Width = 16 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa;
            int rowIniRangoEmpresa = rowData + 1;
            int rowIniRangoCentral = rowData + 1;
            string empresaActual, empresaSiguiente;
            string centralActual, centralSiguiente;

            for (int i = 0; i < listaReptHoja.Count; i++)
            {
                var reg = listaReptHoja[i];

                rowData++;
                empresaActual = reg.Emprnomb;
                empresaSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Emprnomb : string.Empty;
                centralActual = reg.Central;
                centralSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Central : string.Empty;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Izquierda", colorTextoFijo, colorCeldaFijo, font, 8, false, true);

                ws.Cells[rowData, colCentral].Value = reg.Central;
                ws.Cells[rowData, colUnidad].Value = reg.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colCentral, rowData, colUnidad, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, true);

                if (reg.Itotminifparcial > 0)
                {
                    ws.Cells[rowData, colFortuitas].Value = reg.Itotminifparcial;
                    UtilExcel.SetFormatoCelda(ws, rowData, colFortuitas, rowData, colFortuitas, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colFortuitas, rowData, colFortuitas, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colFortuitas, rowData, colFortuitas, 0);
                }
                else
                {
                    ws.Cells[rowData, colFortuitas].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colFortuitas, rowData, colFortuitas, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colFortuitas, rowData, colFortuitas, 2);
                }

                if (reg.Itotminipparcial > 0)
                {
                    ws.Cells[rowData, colProgramadas].Value = reg.Itotminipparcial;
                    UtilExcel.SetFormatoCelda(ws, rowData, colProgramadas, rowData, colProgramadas, "Centro", "Derecha", colorTextoIndisp, colorCeldaIndisp, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colProgramadas, rowData, colProgramadas, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colProgramadas, rowData, colProgramadas, 0);
                }
                else
                {
                    ws.Cells[rowData, colProgramadas].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colProgramadas, rowData, colProgramadas, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colProgramadas, rowData, colProgramadas, 2);
                }

                //border empresa

                if (empresaActual != empresaSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoEmpresa, colEmpresa, rowData, colEmpresa, colorLinea);
                    rowIniRangoEmpresa = rowData + 1;
                }

                //border central
                if (centralActual != centralSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoCentral, colCentral, rowData, colCentral, colorLinea);
                    rowIniRangoCentral = rowData + 1;
                }

                //unidad
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colUnidad, rowData, colUnidad, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colFortuitas, rowData, colFortuitas, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colProgramadas, rowData, colProgramadas, colorLinea);
            }

            #endregion

            if (esOficial)
            {
                HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConstantesAppServicio.EnlaceLogoCoes);
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());

                UtilExcel.AddImage(ws, img, rowIni + 1, colIni);
            }

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colCentral].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);
            ws.View.ZoomScale = 85;

            //excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;

        }

        /// <summary>
        /// Generar hoja excel cuadro detalle Fotuito y Programado
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="tipoGeneracion"></param>
        /// <param name="tipoIndisp"></param>
        /// <param name="incluirDescripcion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHojaInput"></param>
        private void GenerarHojaExcelCuadroDetalleCuadro2(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni
                                                   , string tipoGeneracion, string tipoIndisp, bool incluirDescripcion, DateTime fechaIni, DateTime fechaFin
                                                    , List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdetHojaInput)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            ws.TabColor = ColorTranslator.FromHtml(ConstantesIndisponibilidades.INDFortuitaParcial == tipoIndisp ? "#E26B0A" : "#92D050");
            int numDia = (fechaFin.Date - fechaIni.Date).Days + 1;

            List<IndReporteDetDTO> listaRepdetHoja = listaRepdetHojaInput.Where(x => x.Idettipoindisp == tipoIndisp).ToList();

            string font = "TradeGothic Bold";
            string colorCeldaFondoCabecera = "#16365C";
            string colorCeldaTextoCabecera = "#FFFFFF";
            string colorCeldaFondoEmpresa = "#4F81BD";
            string colorCeldaTextoEmpresa = "#FFFFFF";
            string colorCeldaFondoUnidad = "#DCE6F1";
            string colorCeldaTextoUnidad = "#000000";
            string colorCeldaFondoMinutos = "#D9D9D9";
            string colorLineaDefecto = "#FFFFFF";
            string colorLineaTabla = "#FF0000";

            string titulo = tipoIndisp == ConstantesIndisponibilidades.INDFortuitaParcial ? "PARCIAL FORTUITA" : "PARCIAL PROGRAMADO";
            string textoPr = "P RESTRINGIDA";
            string textoTeq = "T EQ_DURACIÓN";
            string textoTipoIndisp = "T IND PARCIAL";

            #region  Filtros y Cabecera

            int colEmpresa = colIni;
            int colTipoGen = colEmpresa + 1;
            int colCentral = colTipoGen + 1;
            int colUnidad = colCentral + 1;
            int colPe = colUnidad + 1;
            int colMinutos = colPe + 1;

            int rowTitulo = rowIni;
            int rowEmpresa = rowTitulo + 2;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colTipoGen].Value = "TIPO DE GENERACIÓN";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colPe].Value = "PEFECTIVA";
            ws.Cells[rowEmpresa, colMinutos].Value = "";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colMinutos, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 8, false, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colEmpresa, rowEmpresa, colEmpresa, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colTipoGen, rowEmpresa, colTipoGen, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colCentral, rowEmpresa, colCentral, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colUnidad, rowEmpresa, colUnidad, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colPe, rowEmpresa, colPe, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colMinutos, rowEmpresa, colMinutos, colorLineaDefecto);

            double factorAncho = 0.85;
            ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = 24 * factorAncho;
            ws.Column(colTipoGen).Width = 9 * factorAncho;
            ws.Column(colCentral).Width = 27 * factorAncho;
            ws.Column(colUnidad).Width = 17 * factorAncho;
            ws.Column(colPe).Width = 17 * factorAncho;
            ws.Column(colMinutos).Width = 10 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa + 1;
            int rowIniRangoCentral = rowData;
            string centralActual, centralSiguiente;

            for (int u = 0; u < listaReptHoja.Count; u++)
            {
                IndReporteTotalDTO regTot = listaReptHoja[u];

                centralActual = regTot.Central;
                centralSiguiente = u + 1 < listaReptHoja.Count ? listaReptHoja[u + 1].Central : string.Empty;

                for (int z = 0; z < 5; z++)
                {
                    ws.Cells[rowData, colEmpresa].Value = regTot.Emprnomb;
                    UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Centro", colorCeldaTextoEmpresa, colorCeldaFondoEmpresa, font, 8, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colEmpresa, rowData, colEmpresa, colorLineaDefecto);

                    ws.Cells[rowData, colTipoGen].Value = tipoGeneracion;
                    UtilExcel.SetFormatoCelda(ws, rowData, colTipoGen, rowData, colTipoGen, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colTipoGen, rowData, colTipoGen, colorLineaDefecto);

                    switch (z)
                    {
                        case 0:
                            ws.Cells[rowData, colUnidad].Value = regTot.Itotunidadnomb;
                            UtilExcel.CeldasExcelAgrupar(ws, rowData, colUnidad, rowData + 1, colUnidad);
                            UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData + 1, colUnidad, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false, true);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colUnidad, rowData + 1, colUnidad, colorLineaDefecto);

                            ws.Cells[rowData, colPe].Value = regTot.ItotpeC2;
                            UtilExcel.CeldasExcelAgrupar(ws, rowData, colPe, rowData + 1, colPe);
                            UtilExcel.SetFormatoCelda(ws, rowData, colPe, rowData + 1, colPe, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false, true);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colPe, rowData + 1, colPe, colorLineaDefecto);
                            UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colPe, rowData + 1, colPe, 2);

                            ws.Cells[rowData, colMinutos].Value = "Hora Inicial";
                            UtilExcel.SetFormatoCelda(ws, rowData, colMinutos, rowData, colMinutos, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMinutos, rowData, colMinutos, colorLineaDefecto);

                            break;

                        case 1:
                            ws.Cells[rowData, colMinutos].Value = "Hora Final";
                            UtilExcel.SetFormatoCelda(ws, rowData, colMinutos, rowData, colMinutos, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMinutos, rowData, colMinutos, colorLineaDefecto);
                            break;

                        case 2:
                            ws.Cells[rowData, colUnidad].Value = textoPr;
                            UtilExcel.CeldasExcelAgrupar(ws, rowData, colUnidad, rowData, colPe);
                            UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colPe, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false, true);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colUnidad, rowData, colPe, colorLineaDefecto);

                            ws.Cells[rowData, colMinutos].Value = "MW";
                            UtilExcel.SetFormatoCelda(ws, rowData, colMinutos, rowData, colMinutos, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMinutos, rowData, colMinutos, colorLineaDefecto);
                            break;

                        case 3:
                            ws.Cells[rowData, colUnidad].Value = textoTeq;
                            UtilExcel.CeldasExcelAgrupar(ws, rowData, colUnidad, rowData, colPe);
                            UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colPe, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false, true);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colUnidad, rowData, colPe, colorLineaDefecto);

                            ws.Cells[rowData, colMinutos].Value = "Minutos";
                            UtilExcel.SetFormatoCelda(ws, rowData, colMinutos, rowData, colMinutos, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMinutos, rowData, colMinutos, colorLineaDefecto);
                            break;

                        case 4:
                            ws.Cells[rowData, colUnidad].Value = textoTipoIndisp;
                            UtilExcel.CeldasExcelAgrupar(ws, rowData, colUnidad, rowData, colPe);
                            UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colPe, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false, true);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colUnidad, rowData, colPe, colorLineaDefecto);

                            ws.Cells[rowData, colMinutos].Value = "Minutos";
                            UtilExcel.SetFormatoCelda(ws, rowData, colMinutos, rowData, colMinutos, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoMinutos, font, 8, false);
                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMinutos, rowData, colMinutos, colorLineaDefecto);

                            break;
                    }
                    rowData++;
                }

                //agrupar central
                if (centralActual != centralSiguiente)
                {
                    ws.Cells[rowIniRangoCentral, colCentral].Value = regTot.Central;
                    UtilExcel.CeldasExcelAgrupar(ws, rowIniRangoCentral, colCentral, rowData - 1, colCentral);
                    UtilExcel.SetFormatoCelda(ws, rowIniRangoCentral, colCentral, rowData - 1, colCentral, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniRangoCentral, colCentral, rowData - 1, colCentral, colorLineaDefecto);
                    rowIniRangoCentral = rowData;
                }
            }

            int numeroEjesRpt = listaRepdetHoja.Any() ? listaRepdetHoja.Max(x => x.NumEje) + 1 : 1;

            int colIniTitulo = colEmpresa;
            int colIniDetalle = colMinutos + 1;
            for (int eje = 0; eje < numeroEjesRpt; eje++)
            {
                int colIniEje = eje == 0 ? 6 : 0;
                var listaRepdetHojaXEje = listaRepdetHoja.Where(x => x.NumEje == eje).ToList();

                //
                this.GenerarSubHojaXEjeXUnidadXDiaCuadro2(ws, rowEmpresa, colIniDetalle, font, eje, incluirDescripcion, fechaIni, fechaFin, tipoIndisp, listaReptHoja, listaRepdetHojaXEje);

                //primera fila Titulo
                ws.Cells[rowTitulo, colIniTitulo].Value = titulo;
                UtilExcel.SetFormatoCelda(ws, rowTitulo, colIniTitulo, rowTitulo + 1, colIniTitulo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 12, false, true);
                UtilExcel.CeldasExcelAgrupar(ws, rowTitulo, colIniTitulo, rowTitulo + 1, colIniTitulo + colIniEje - 1 + numDia);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowTitulo, colIniTitulo, rowTitulo + 1, colIniTitulo + colIniEje - 1 + numDia, colorLineaTabla);

                colIniDetalle += (numDia - 1 + 6);
                colIniTitulo += colIniEje - 1 + numDia + 6;
            }

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colEmpresa].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colMinutos + 1);
            ws.View.ZoomScale = 100;

            //Todo el excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        /// <summary>
        /// Generar sub hoja excel por unidad y dia
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="font"></param>
        /// <param name="eje"></param>
        /// <param name="incluirDescripcion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoIndisp"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHoja"></param>
        private void GenerarSubHojaXEjeXUnidadXDiaCuadro2(ExcelWorksheet ws, int rowIni, int colIni, string font
                                                , int eje, bool incluirDescripcion, DateTime fechaIni, DateTime fechaFin, string tipoIndisp, List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdetHoja)
        {
            string colorCeldaTextoDia = "#FFFFFF";
            string colorCeldaFondoDia = "#4F81BD";
            string colorCeldaTextoDefecto = "#000000";
            string colorCeldaFondoDefecto = "#FFFFFF";
            string colorCeldaFondoMinSinData = "#D9D9D9";
            string colorCeldaFondoMinConData = ConstantesIndisponibilidades.INDFortuitaParcial == tipoIndisp ? "#FFC000" : "#92D050";
            string colorLineaDia = "#FFFFFF";
            string colorLineaHoraMin = "#C4BD97";
            string colorLineaTabla = "#FF0000";
            int numColAdicional = eje == 0 ? 2 : 0;

            int numDia = (fechaFin.Date - fechaIni.Date).Days + 1;

            #region  Filtros y Cabecera

            double factorAncho = 0.85;

            int rowDia = rowIni;
            int colDia1 = colIni;

            for (var i = 0; i < numDia + numColAdicional; i++)
            {
                if (i < numDia)
                {
                    ws.Cells[rowDia, colDia1 + i].Value = fechaIni.AddDays(i).ToString("dd-MMM");
                    ws.Column(colDia1 + i).Width = 9 * factorAncho;
                }
                else
                {
                    if (i == numDia)
                        ws.Column(colDia1 + i).Width = 27 * factorAncho;
                    if (i == numDia + 1)
                    {
                        ws.Cells[rowDia, colDia1 + i].Value = "TOTAL";
                        ws.Column(colDia1 + i).Width = 9 * factorAncho;
                    }
                }

                UtilExcel.SetFormatoCelda(ws, rowDia, colDia1 + i, rowDia, colDia1 + i, "Centro", "Centro", colorCeldaTextoDia, colorCeldaFondoDia, font, 8, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowDia, colDia1 + i, rowDia, colDia1 + i, colorLineaDia);
            }

            UtilExcel.BorderCeldasLineaGruesa(ws, rowDia, colDia1, rowDia, colDia1 + numDia - 1, colorLineaTabla);
            if (numColAdicional > 0)
            {
                UtilExcel.BorderCeldasLineaGruesa(ws, rowDia, colDia1 + numDia - 1 + 1, rowDia, colDia1 + numDia - 1 + 1, colorLineaTabla);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowDia, colDia1 + numDia - 1 + 2, rowDia, colDia1 + numDia - 1 + 2, colorLineaTabla);
            }

            ws.Row(rowDia).Height = 23;

            #endregion

            #region Cuerpo

            int rowData = rowDia + 1;
            for (int u = 0; u < listaReptHoja.Count; u++)
            {
                IndReporteTotalDTO regTot = listaReptHoja[u];
                //se asume que existe un registro de la unidad como maximo por cada dia
                List<IndReporteDetDTO> listaDetXTot = listaRepdetHoja.Where(x => x.Itotcodi == regTot.Itotcodi).ToList();

                for (int z = 0; z < 5; z++)
                {
                    int colDiaActual;
                    for (var m = 0; m < numDia + numColAdicional; m++)
                    {
                        //información de los 31 días
                        colDiaActual = colDia1 + m;
                        if (m < numDia)
                        {
                            IndReporteDetDTO regDetEqXDia = listaDetXTot.Find(x => x.Idethoraini.Value.Date == fechaIni.AddDays(m));

                            if (regDetEqXDia != null)
                            {
                                string formatoCeldaEspecial = null;
                                if (incluirDescripcion)
                                {
                                    switch (regDetEqXDia.CeldaFormato)
                                    {
                                        case ConstantesIndisponibilidades.FormatoCeldaEvento: formatoCeldaEspecial = "#2ECC71"; break;
                                        case ConstantesIndisponibilidades.FormatoCeldaRestric: formatoCeldaEspecial = "#FF5050"; break;
                                        case ConstantesIndisponibilidades.FormatoCeldaLimComb: formatoCeldaEspecial = "#CCD5F0"; break;
                                        case ConstantesIndisponibilidades.FormatoCeldaAlerta:; break;
                                    }
                                }

                                switch (z)
                                {
                                    case 0:
                                        ws.Cells[rowData, colDiaActual].Value = regDetEqXDia.IdethorainiDesc;
                                        formatoCeldaEspecial = formatoCeldaEspecial != null ? formatoCeldaEspecial : colorCeldaFondoDefecto;
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, formatoCeldaEspecial, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 1:
                                        ws.Cells[rowData, colDiaActual].Value = regDetEqXDia.IdethorafinDesc;
                                        formatoCeldaEspecial = formatoCeldaEspecial != null ? formatoCeldaEspecial : colorCeldaFondoDefecto;
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, formatoCeldaEspecial, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 2:
                                        ws.Cells[rowData, colDiaActual].Value = regDetEqXDia.Idetpr;
                                        if (incluirDescripcion) UtilExcel.AgregarComentarioExcel(ws, rowData, colDiaActual, regDetEqXDia.CeldaDescripcion);
                                        formatoCeldaEspecial = formatoCeldaEspecial != null ? formatoCeldaEspecial : colorCeldaFondoDefecto;
                                        if (regDetEqXDia.Idettieneexc == ConstantesAppServicio.SI)
                                            formatoCeldaEspecial = "#FF99FF";
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, formatoCeldaEspecial, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colDiaActual, rowData, colDiaActual, 2);
                                        break;
                                    case 3:
                                        ws.Cells[rowData, colDiaActual].Value = regDetEqXDia.Idetmin;
                                        //if (incluirDescripcion) UtilExcel.AgregarComentarioExcel(ws, rowData, colDiaActual, regDetEqXDia.CeldaDescripcion);
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinConData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 4:
                                        ws.Cells[rowData, colDiaActual].Value = regDetEqXDia.Idetminparcial;
                                        //if (incluirDescripcion) UtilExcel.AgregarComentarioExcel(ws, rowData, colDiaActual, regDetEqXDia.CeldaDescripcion);
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinConData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colDiaActual, rowData, colDiaActual, 2);
                                        break;
                                }
                            }
                            else
                            {
                                switch (z)
                                {
                                    case 0:
                                    case 1:
                                    case 2:
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 3:
                                    case 4:
                                        ws.Cells[rowData, colDiaActual].Value = 0;
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinSinData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                }
                            }
                        }
                        else
                        {
                            //columna casi final de descripcion de la unidad
                            if (m == numDia)
                            {
                                switch (z)
                                {
                                    case 0:
                                    case 1:
                                    case 2:
                                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colDiaActual, rowData, colDiaActual, colorCeldaFondoDefecto);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 3:
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinSinData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 4:
                                        ws.Cells[rowData, colDiaActual].Value = regTot.Central + regTot.Itotunidadnomb;
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinConData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                }
                            }

                            //columna final de totales por unidad
                            if (m == numDia + 1)
                            {
                                switch (z)
                                {
                                    case 0:
                                    case 1:
                                    case 2:
                                        UtilExcel.CeldasExcelColorFondo(ws, rowData, colDiaActual, rowData, colDiaActual, colorCeldaFondoDefecto);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 3:
                                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinSinData, font, 8, false, false);
                                        UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        break;
                                    case 4:
                                        decimal? minutosTotal = ConstantesIndisponibilidades.INDFortuitaParcial == tipoIndisp ? regTot.Itotminifparcial : regTot.Itotminipparcial;
                                        if (minutosTotal > 0)
                                        {
                                            ws.Cells[rowData, colDiaActual].Value = minutosTotal;
                                            UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinConData, font, 8, false, true);
                                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        }
                                        else
                                        {
                                            ws.Cells[rowData, colDiaActual].Value = 0;
                                            UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoMinSinData, font, 8, false, true);
                                            UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaHoraMin);
                                        }

                                        UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colDiaActual, rowData, colDiaActual, 2);
                                        break;
                                }
                            }
                        }
                    }
                    rowData++;
                }
            }

            #endregion

            //border a toda la tabla
            UtilExcel.BorderCeldasLineaGruesa(ws, rowDia + 1, colDia1, rowData - 1, colDia1 + numDia - 1, colorLineaTabla);
            if (numColAdicional > 0)
            {
                UtilExcel.BorderCeldasLineaGruesa(ws, rowDia + 1, colDia1 + numDia - 1 + 1, rowData - 1, colDia1 + numDia - 1 + 1, colorLineaTabla);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowDia + 1, colDia1 + numDia - 1 + 2, rowData - 1, colDia1 + numDia - 1 + 2, colorLineaTabla);
            }
        }


        #endregion

        #region Edición de Handson

        public int GuardarCambiosHandsonCuadro2(int icuacodi, int irecacodi, int famcodi, string usuario, int irptcodi, List<IndReporteDetDTO> listaDataCambio)
        {
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            List<IndReporteDetDTO> listaRepdet = GetByCriteriaIndReporteDets(irptcodi); //pestaña fortuito, pestarña programado
            List<IndReporteTotalDTO> listaRepTot = GetByCriteriaIndReporteTotals(irptcodi).Where(x => x.Itotopcom == ConstantesAppServicio.SI).ToList();

            List<EqEquipoDTO> listaUnidades = listaRepTot.DistinctBy(x => new { x.Equicodi, x.Grupocodi })
                .Select(z => new EqEquipoDTO()
                {
                    Equicodi = z.Equicodi.Value,
                    Equinomb = z.Equinomb,
                    Grupocodi = z.Grupocodi,
                    Emprcodi = z.Emprcodi,
                    Equipadre = z.Equipadre
                ,
                    Grupoincremental = z.Itotincremental,
                    UnidadnombPR25 = z.Itotunidadnomb,
                    Pe = z.Itotpe,
                    Equifechiniopcom = regRecalculo.Irecafechaini.AddMonths(-2), //se asume que todas las unidades editadas tienen operación comercial
                    Equifechfinopcom = regRecalculo.Irecafechafin.AddMonths(2), //se asume que todas las unidades editadas tienen operación comercial
                }).ToList();


            //lista del handson separado
            List<IndReporteDetDTO> listaFortuita = listaRepdet.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial).ToList();
            List<IndReporteDetDTO> listaProgramada = listaRepdet.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial).ToList();

            //Lista Cambio
            List<IndReporteDetDTO> listaCambioFortuita = listaDataCambio.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial).ToList();
            List<IndReporteDetDTO> listaCambioProgramada = listaDataCambio.Where(x => x.Idettipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial).ToList();

            FusionarCambiosHandson(listaFortuita, listaCambioFortuita);
            //VerificarCruceHoras(listaFortuita);

            FusionarCambiosHandson(listaProgramada, listaCambioProgramada);
            //VerificarCruceHoras(listaProgramada);

            var listaReporteDet = listaFortuita.Union(listaProgramada).ToList();

            List<IndReporteTotalDTO> listaRptTot = new List<IndReporteTotalDTO>();
            listaRptTot = GenerarTotal2(listaRptTot.Count + 1, ref listaReporteDet, listaUnidades, icuacodi, famcodi, ConstantesAppServicio.SI);

            //
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(icuacodi);
            IndReporteDTO regOld = GetByIdIndReporte(irptcodi);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = icuacodi,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = regOld.Irpttiempo,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A",
                Irptreporteold = irptcodi
            };

            if (EsVersionCreableCuadro(regCuadro, regRecalculo, regReporte, listaRptTot, listaReporteDet))
            {
                CambiarAEstadoHistorico(icuacodi, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaRptTot;
                regSaveBD.ListaRptDet = listaReporteDet;

                var irptcodiResult = this.GuardarReporteIndispBDTransaccional(regSaveBD);

                return irptcodiResult;
            }

            return 0;
        }

        #endregion

        #endregion

        #region Cuadro 3: Factor K para grupos o centrales
        /// <summary>
        /// Permite realizar búsquedas en la tabla IndReporteDet, IndReporteTotal e IndReporte
        /// <param name="icuacodi">Identificador del cuadro</param>
        /// <param name="ipericodi">Identificador del periodo</param>
        /// </summary>
        public List<IndReporteTotalDTO> ListConservarValorByPeriodoCuadro3(int icuacodi, int ipericodi)
        {
            return FactorySic.GetIndReporteTotalRepository().ListConservarValorByPeriodoCuadro(icuacodi, ipericodi);
        }

        /// <summary>
        /// Procesa el cuadro 3
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="irecacodi"></param>
        /// <param name="tiempo"></param>
        /// <param name="irptcodipa"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int ProcesarCuadro3(int irecacodi, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25Cuadro3FactorK;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            List<IndReporteTotalDTO> listaConservarValor = ListConservarValorByPeriodoCuadro3(cuadro, regRecalculo.Ipericodi);

            //Inicio: IND.PR25.2022
            //Antigua versión//var listaIndReporteTotal = CalcularFactorK(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin);
            List<IndReporteTotalDTO> listaIndReporteTotal = GenerarReporteTotalConNuevoCalculoFactorK(regRecalculo);

            foreach (var cuadro3 in listaIndReporteTotal)
            {
                IndReporteTotalDTO entity = listaConservarValor.Where(x => x.Grupocodi == cuadro3.Grupocodi &&
                                                                         x.Emprcodi == cuadro3.Emprcodi &&
                                                                         x.Equipadre == cuadro3.Equipadre &&
                                                                         x.Equicodi == cuadro3.Equicodi).FirstOrDefault();
                if (entity != null)
                {
                    cuadro3.Itotpe = entity.Itotpe;
                    cuadro3.Itotfactork = entity.Itotfactork;
                    cuadro3.Itotdescadic = entity.Itotdescadic;
                    cuadro3.Itotjustf = entity.Itotjustf;
                    cuadro3.Itotconsval = entity.Itotconsval;
                }
            }

            //Fin: IND.PR25.2022

            //
            List<IndRelacionRptDTO> lRel = new List<IndRelacionRptDTO>();

            //
            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            if (EsVersionCreableCuadro(regCuadro, regRecalculo, regReporte, listaIndReporteTotal, new List<IndReporteDetDTO>()))
            {
                CambiarAEstadoHistorico(cuadro, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaIndReporteTotal;
                regSaveBD.ListaRelRpt = lRel;

                return GuardarReporteIndispBDTransaccional(regSaveBD);
            }

            return 0;
        }

        #region Cálculo 

        /// <summary>
        /// Realiza el proceso de calculo del Factor K
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="irptcodi"></param>
        /// <returns></returns>
        public List<IndReporteTotalDTO> CalcularFactorK(DateTime fechaInicio, DateTime fechaFin)
        {
            int aplicativo = ConstantesIndisponibilidades.AppPR25;

            ListarUnidadTermicoOpComercial(aplicativo, fechaInicio, fechaFin, out List<EqEquipoDTO> listaUnidades, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj);

            //AsignarCapacidadGarantizadaTransCombustible(listaUnidades, irptcodi);
            //AsignarCapacidadGarantizadaTransElectrico(listaUnidades, fechaInicio, fechaFin);

            var lista = new List<IndReporteTotalDTO>();

            foreach (var unidad in listaUnidades)
            {
                decimal? valFactork = 1;
                if (unidad.Grupoincremental != 1 && unidad.Gruporeservafria == 1) valFactork = null;

                var objUnidad = new IndReporteTotalDTO()
                {
                    Emprcodi = unidad.Emprcodi.Value,
                    Equipadre = unidad.Equipadre.Value,
                    Grupocodi = unidad.Grupocodi,
                    Famcodi = ConstantesHorasOperacion.IdTipoTermica,
                    Equicodi = unidad.Equicodi,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotincremental = unidad.Grupoincremental,
                    Itotunidadnomb = unidad.UnidadnombPR25,
                    Itotpe = unidad.Pe,
                    Itotfactork = valFactork
                };

                if (unidad.TieneModificacionPropiedad && unidad.Grupoincremental != 1)
                {
                    objUnidad.Itotdescadic = string.Format("Potencia efectiva vigente a partir del {0}.", unidad.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFecha));
                }

                lista.Add(objUnidad);
            }

            return lista;
        }

        /// <summary>
        /// Calcula la capacidad garantizada de Transporte de combustible
        /// </summary>
        /// <param name="pmpa"></param>
        /// <param name="pefec"></param>
        /// <returns></returns>
        public decimal? CalcularFCc(decimal? pmpa, decimal? pefec)
        {
            if (!pmpa.HasValue || !pefec.HasValue || pefec.GetValueOrDefault(0) == 0) return null;
            return 1 - (pmpa / pefec);
        }

        /// <summary>
        /// Asigna la capacidad garantizada de Transporte Eléctrico al listado de unidades
        /// </summary>
        /// <param name="listaUnidades"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        public void AsignarCapacidadGarantizadaTransElectrico(List<EqEquipoDTO> listaUnidades, DateTime fechaInicio, DateTime fechaFin)
        {
            var listPLimiteUnidad = GetByCriteriaIndPotlims(fechaInicio, fechaFin);

            foreach (var unidad in listaUnidades)
            {
                IndPotlimDTO potlim = listPLimiteUnidad.Find(x => x.Grupocodi == unidad.Grupocodi && x.Equicodi == unidad.Equicodi);

                if (potlim != default(IndPotlimDTO))
                {
                    decimal? sumPEfect = 0;
                    foreach (var plimite in listPLimiteUnidad.Where(x => x.Potlimcodi == potlim.Potlimcodi))
                    {
                        var unidadxPli = listaUnidades.Find(x => x.Grupocodi == plimite.Grupocodi && x.Equicodi == plimite.Equicodi);
                        if (unidadxPli != null) sumPEfect += unidadxPli.Pe;
                    }

                    unidad.Fce = CalcularFCe(potlim.Potlimmw, sumPEfect, fechaFin - fechaInicio);
                }
            }

        }

        /// <summary>
        /// Calcula la capacidad garantizada de Transporte Eléctrico
        /// </summary>
        /// <param name="pLimite"></param>
        /// <param name="sumPEfec"></param>
        /// <param name="tiempo"></param>
        /// <returns></returns>
        public decimal? CalcularFCe(decimal? pLimite, decimal? sumPEfec, TimeSpan tiempo)
        {
            if (!pLimite.HasValue || !sumPEfec.HasValue) return null;

            double hpm = 6.0 * tiempo.TotalDays;
            double horasMes = tiempo.TotalHours;
            decimal porcentajeHmp = Convert.ToDecimal(horasMes / hpm);

            return 1 - (pLimite / sumPEfec) * (porcentajeHmp);
        }

        #endregion

        #region web Handson y excel

        public void GenerarWebCuadro3(int irptcodi, string empresa, string central, out HandsonModel handsonK, out string htmlCambios)
        {
            this.GenerarReporteFactorKCuadroXVersionReporte(irptcodi, empresa, central
                                                        , out handsonK, out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                        , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteTotalDTO> listaReptotOldOut);

            List<IndReporteTotalDTO> listaCambios = ListarCambiosCuadro3(listaReptot, listaReptotOldOut);
            htmlCambios = GenerarHtmlListadoCambiosReptotCuadro3(listaCambios);
        }

        private void GenerarReporteFactorKCuadroXVersionReporte(int irptcodi, string empresa, string central
                                                    , out HandsonModel handsonK
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteTotalDTO> listaReptotOldOut)
        {
            regVersion = this.GetByIdIndReporte(irptcodi);
            regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            var regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                , out listaReptot, out List<IndReporteDetDTO> listaRepdetOut
                , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral);

            listaReptotOldOut = new List<IndReporteTotalDTO>();
            if (regVersion.Irptreporteold > 0)
            {
                this.ListaDataXVersionReporte(regVersion.Irptreporteold.Value, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                    , out listaReptotOldOut, out List<IndReporteDetDTO> listaRepdetHojaOld
                    , out List<SiEmpresaDTO> listaEmpresa2, out List<EqEquipoDTO> listaCentral2);
            }

            //Salidas
            handsonK = GetHandsonFactorKXVersionReporte(listaReptot);
        }

        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="tipoIndisp"></param>
        /// <param name="tgenernomb"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaAllDet"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaEquipo"></param>
        /// <param name="listaManttoBD"></param>
        /// <returns></returns>
        public HandsonModel GetHandsonFactorKXVersionReporte(List<IndReporteTotalDTO> listaTot)
        {
            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "EMPRESA", IsMerge = 1, Ancho = 340, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "CENTRAL", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //equicodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //grupocodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "UNIDAD", IsMerge = 1, Ancho = 220, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "P. EFECTIVA <br/> (MW)", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "FACTOR K", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "OBSERVACIÓN", IsMerge = 0, Ancho = 350, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //IND.PR25.2022 //famcodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //IND.PR25.2022 //emprcodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //IND.PR25.2022 //equipadre

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = false,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            int numColAntesdeFecha = 11; //IND.PR25.2022
            int numCol = numColAntesdeFecha + 0;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();

            foreach (var regTotalX in listaTot)
            {
                if (regTotalX.Equicodi == 13418)
                { }

                string[] matriz = new string[numCol];
                if (regTotalX != null)
                {
                    matriz[0] = regTotalX.Emprnomb; //EMPRESA
                    matriz[1] = regTotalX.Central; //CENTRAL
                    matriz[2] = regTotalX.Equicodi.ToString(); //oculto
                    matriz[3] = regTotalX.Grupocodi.ToString(); //oculto
                    matriz[4] = regTotalX.Itotunidadnomb;
                    matriz[5] = regTotalX.ItotpeDesc;
                    matriz[6] = regTotalX.ItotfactorkDesc;
                    matriz[7] = regTotalX.Itotdescadic;
                    matriz[8] = regTotalX.Famcodi.ToString(); //IND.PR25.2022 //oculto
                    matriz[9] = regTotalX.Emprcodi.ToString(); //IND.PR25.2022 //oculto
                    matriz[10] = regTotalX.Equipadre.ToString(); //IND.PR25.2022 //oculto
                }

                listaDataHandson.Add(matriz);
                numFilaActual++;
            }

            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return handson;
        }

        public void GenerarRptExcelCuadro3(string ruta, int irptcodi, string empresa, string central, out string nameFile)
        {
            this.GenerarReporteFactorKCuadroXVersionReporte(irptcodi, empresa, central
                                                        , out HandsonModel handsonK, out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo
                                                        , out IndCuadroDTO regCuadro, out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteTotalDTO> listaReptotOldOut);

            //Nombre de archivo
            nameFile = string.Format("PR25_Cuadro3_{0}_Version_{1}.xlsm", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCuadro3ReportePlantillaTermico(xlPackage, "RESUMEN", true, false, 1, 2, "                            REPORTE DE FACTORES DE INCENTIVO A LA DISPONIBILIDAD - {0} {1}"
                                                            , "                                                                 CÁLCULO DEL FACTOR K POR FALTA DE CAPACIDAD GARANTIZADA DE COMBUSTIBLE"
                                                                            , regCuadro, regPeriodo, regVersion, listaReptHoja);
                xlPackage.Save();
            }
        }

        private void GenerarHojaExcelCuadro3ReportePlantillaTermico(ExcelPackage xlPackage, string nameWS, bool esMacro, bool esOficial, int rowIni, int colIni, string titulo, string subtitulo
                                    , IndCuadroDTO regCuadro, IndPeriodoDTO regPeriodo, IndReporteDTO regVersion, List<IndReporteTotalDTO> listaReptHoja)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            if (esMacro)
                xlPackage.Workbook.CreateVBAProject();

            string font = "TradeGothic Bold";
            string colorCeldaFijo = "#4F81BD";
            string colorCeldaCuerpo = "#DCE6F1";
            string colorTextoFijo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorLinea = "#FFFFFF";

            #region  Filtros y Cabecera

            int colEmpresa = colIni;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colPotenciaEfec = colUnidad + 1;
            //int colPotenciaAseg = colPotenciaEfec + 1;
            int colFactorK = colPotenciaEfec + 1;
            int colObservacion = colFactorK + 1;

            if (esOficial)
            {
                ws.Cells[rowIni, colEmpresa].Value = EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(); //NOVIEMBRE
                UtilExcel.SetFormatoCelda(ws, rowIni, colEmpresa, rowIni, colEmpresa, "Centro", "Izquierda", "#A6A6A6", "#FFFFFF", font, 12, true);

                ws.Cells[rowIni + 1, colFactorK].Value = regVersion.Irecainforme; //INFORME COES/D/DO/SME-INF-180-2020
                UtilExcel.SetFormatoCelda(ws, rowIni + 1, colFactorK, rowIni + 1, colFactorK, "Centro", "Derecha", "#000000", "#FFFFFF", "Arial", 8, false);

                ws.Cells[rowIni + 2, colUnidad].Value = regCuadro.Icuanombre; //CUADRO N° 3
                UtilExcel.SetFormatoCelda(ws, rowIni + 2, colUnidad, rowIni + 2, colUnidad, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 20, false);

                ws.Cells[rowIni + 5, colEmpresa].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); // REPORTE DE FACTORES DE INCENTIVO A LA DISPONIBILIDAD
                UtilExcel.SetFormatoCelda(ws, rowIni + 5, colEmpresa, rowIni + 5, colEmpresa, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 15, false);

                ws.Cells[rowIni + 6, colEmpresa].Value = subtitulo; //CÁLCULO DEL FACTOR K POR FALTA DE CAPACIDAD GARANTIZADA DE COMBUSTIBLE
                UtilExcel.SetFormatoCelda(ws, rowIni + 6, colEmpresa, rowIni + 6, colEmpresa, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 10, true);
            }
            else
            {
                //ws.Cells[rowIni, colEmpresa].Value = EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(); //NOVIEMBRE
                //UtilExcel.SetFormatoCelda(ws, rowIni, colEmpresa, rowIni, colEmpresa, "Centro", "Izquierda", "#A6A6A6", "#FFFFFF", font, 12, true);

                //ws.Cells[rowIni + 1, colFactorK].Value = regVersion.Irecainforme; //INFORME COES/D/DO/SME-INF-180-2020
                //UtilExcel.SetFormatoCelda(ws, rowIni + 1, colFactorK, rowIni + 1, colFactorK, "Centro", "Derecha", "#000000", "#FFFFFF", "Arial", 8, false);

                ws.Cells[rowIni + 2, colUnidad].Value = "REPORTE INTERMEDIO"; //CUADRO N° 3
                UtilExcel.SetFormatoCelda(ws, rowIni + 2, colUnidad, rowIni + 2, colUnidad, "Centro", "Izquierda", "#000000", "#FFFFFF", font, 20, false);

                ws.Cells[rowIni + 5, colEmpresa].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); // REPORTE DE FACTORES DE INCENTIVO A LA DISPONIBILIDAD
                UtilExcel.SetFormatoCelda(ws, rowIni + 5, colEmpresa, rowIni + 5, colEmpresa, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 15, false);

                ws.Cells[rowIni + 6, colEmpresa].Value = subtitulo; //CÁLCULO DEL FACTOR K POR FALTA DE CAPACIDAD GARANTIZADA DE COMBUSTIBLE
                UtilExcel.SetFormatoCelda(ws, rowIni + 6, colEmpresa, rowIni + 6, colEmpresa, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 10, true);
            }

            int rowEmpresa = rowIni + 8;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            ws.Cells[rowEmpresa, colPotenciaEfec].Value = "POTENCIA\nEFECTIVA(MW)";
            ws.Cells[rowEmpresa, colFactorK].Value = "FACTOR K";
            ws.Cells[rowEmpresa, colObservacion].Value = "OBSERVACIÓN";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colObservacion, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 8, false, true);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colEmpresa, rowEmpresa, colEmpresa, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colCentral, rowEmpresa, colCentral, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colUnidad, rowEmpresa, colUnidad, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colPotenciaEfec, rowEmpresa, colPotenciaEfec, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colFactorK, rowEmpresa, colFactorK, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colObservacion, rowEmpresa, colObservacion, colorLinea);

            double factorAncho = 0.85;
            ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = ConstantesIndisponibilidades.RptCuadro1AnchoEmpresa * factorAncho;
            ws.Column(colCentral).Width = ConstantesIndisponibilidades.RptCuadro1AnchoCentral * factorAncho;
            ws.Column(colUnidad).Width = ConstantesIndisponibilidades.RptCuadro1AnchoUnidad * factorAncho;
            ws.Column(colPotenciaEfec).Width = 25 * factorAncho;
            ws.Column(colFactorK).Width = 25 * factorAncho;
            ws.Column(colObservacion).Width = 50 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa;
            int rowIniRangoEmpresa = rowData + 1;
            int rowIniRangoCentral = rowData + 1;
            string empresaActual, empresaSiguiente;
            string centralActual, centralSiguiente;

            for (int i = 0; i < listaReptHoja.Count; i++)
            {
                var reg = listaReptHoja[i];

                rowData++;
                empresaActual = reg.Emprnomb;
                empresaSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Emprnomb : string.Empty;
                centralActual = reg.Central;
                centralSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Central : string.Empty;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Izquierda", colorTextoFijo, colorCeldaFijo, font, 8, false, true);

                ws.Cells[rowData, colCentral].Value = reg.Central;
                ws.Cells[rowData, colUnidad].Value = reg.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colCentral, rowData, colUnidad, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, true);

                if (reg.Itotpe != null)
                    ws.Cells[rowData, colPotenciaEfec].Value = reg.Itotpe;
                else
                    ws.Cells[rowData, colPotenciaEfec].Value = "---";
                UtilExcel.SetFormatoCelda(ws, rowData, colPotenciaEfec, rowData, colPotenciaEfec, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                UtilExcel.CeldasExcelIndentar(ws, rowData, colPotenciaEfec, rowData, colPotenciaEfec, 1);
                UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colPotenciaEfec, rowData, colPotenciaEfec, 3);


                bool esNegrita = reg.PintarRojoFactorK;
                string colorTextoK = reg.PintarRojoFactorK ? "#FF0000" : colorTextoCuerpo;
                if (reg.Itotfactork != null)
                    ws.Cells[rowData, colFactorK].Value = reg.Itotfactork;
                else
                    ws.Cells[rowData, colFactorK].Value = "---";
                UtilExcel.SetFormatoCelda(ws, rowData, colFactorK, rowData, colFactorK, "Centro", "Centro", colorTextoK, colorCeldaCuerpo, font, 8, esNegrita);
                UtilExcel.CeldasExcelIndentar(ws, rowData, colFactorK, rowData, colFactorK, 1);
                UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colFactorK, rowData, colFactorK, 4);

                string colorTextoObs = !string.IsNullOrEmpty(reg.Itotdescadic) ? "#FF0000" : colorTextoCuerpo;
                esNegrita = !string.IsNullOrEmpty(reg.Itotdescadic);
                ws.Cells[rowData, colObservacion].Value = reg.Itotdescadic;
                UtilExcel.SetFormatoCelda(ws, rowData, colObservacion, rowData, colObservacion, "Centro", "Izquierda", colorTextoObs, colorCeldaCuerpo, font, 8, esNegrita);

                //border empresa

                if (empresaActual != empresaSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoEmpresa, colEmpresa, rowData, colEmpresa, colorLinea);
                    rowIniRangoEmpresa = rowData + 1;
                }

                //border central
                if (centralActual != centralSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoCentral, colCentral, rowData, colCentral, colorLinea);
                    rowIniRangoCentral = rowData + 1;
                }

                //unidad
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colUnidad, rowData, colUnidad, colorLinea);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colPotenciaEfec, rowData, colPotenciaEfec, colorLinea);

                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colFactorK, rowData, colFactorK, colorLinea);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colObservacion, rowData, colObservacion, colorLinea);
            }

            #endregion

            if (esOficial)
            {
                HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConstantesAppServicio.EnlaceLogoCoes);
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());

                UtilExcel.AddImage(ws, img, rowIni + 1, colIni);
            }

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colCentral].AutoFilter = true;
            ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);

            ws.View.ZoomScale = 100;

            //Todo el excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        #endregion

        #region Edición de Handson

        public int GuardarCambiosHandsonCuadro3(int icuacodi, int irecacodi, string usuario, int irptcodi, List<IndReporteTotalDTO> listaDataCambio)
        {
            List<IndReporteTotalDTO> listaRepTot = GetByCriteriaIndReporteTotals(irptcodi).Where(x => x.Itotopcom == ConstantesAppServicio.SI).ToList();

            foreach (var regK in listaRepTot)
            {
                var regCambio = listaDataCambio.Find(x => x.Equicodi == regK.Equicodi && x.Grupocodi == regK.Grupocodi);
                if (regCambio != null)
                {
                    regK.Itotfactork = regCambio.Itotfactork;
                    regK.Itotdescadic = regCambio.Itotdescadic;
                    regK.Itotjustf = regCambio.Itotjustf;
                    regK.Itotcodiold = regK.Itotcodi;
                    //Agregar campo de Conservarvalor - Assetec (RAC)
                    regK.Itotconsval = regCambio.Itotconsval;
                    regK.Itottipocambio = ConstantesIndisponibilidades.TipoCambioEdicion;
                }
            }

            //
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(icuacodi);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);
            IndReporteDTO regOld = GetByIdIndReporte(irptcodi);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = icuacodi,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = regOld.Irpttiempo,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A",
                Irptreporteold = irptcodi,
            };

            if (EsVersionCreableCuadro(regCuadro, regRecalculo, regReporte, listaRepTot, new List<IndReporteDetDTO>()))
            {
                CambiarAEstadoHistorico(icuacodi, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaRepTot;

                var irptcodiResult = this.GuardarReporteIndispBDTransaccional(regSaveBD);

                return irptcodiResult;
            }

            return 0;
        }

        public List<IndReporteTotalDTO> ListarCambiosCuadro3(List<IndReporteTotalDTO> listaReptHoja, List<IndReporteTotalDTO> listaReptHojaOld)
        {
            //para cuadro 3 solo tiene actualizaciones
            var listaCambios = listaReptHoja.Where(x => x.Itottipocambio != null && x.Itottipocambio.Length == 1).ToList();

            foreach (var regCambio in listaCambios)
            {
                IndReporteTotalDTO regTot = listaReptHoja.Find(x => x.Itotcodi == regCambio.Itotcodi);
                IndReporteTotalDTO regOld = listaReptHojaOld.Find(x => x.Itotcodi == regCambio.Itotcodiold);

                regCambio.Emprnomb = regTot.Emprnomb;
                regCambio.Central = regTot.Central;

                regCambio.Itotfactorkold = regOld?.Itotfactork;
                regCambio.Itotfactork = regCambio.Itotfactork;
                regCambio.Itotdescadicold = regOld?.Itotdescadic;
                regCambio.Itotdescadic = regCambio.Itotdescadic;

                regCambio.Itotjustf = regCambio.Itotjustf;
                regCambio.UltimaModificacionUsuarioDesc = "";
                regCambio.UltimaModificacionFechaDesc = "";
                regCambio.Tipocambio = GetDescripcionCambio(regCambio.Itottipocambio);
            }

            return listaCambios;
        }

        public string GenerarHtmlListadoCambiosReptotCuadro3(List<IndReporteTotalDTO> listaCambios)
        {
            if (!listaCambios.Any())
                return string.Empty;

            StringBuilder strHtml = new StringBuilder();

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_cambios'>
                        <thead>
                            <tr>
                                <th>Tipo Cambio</th>
                                <th>Empresa</th>
                                <th>Central</th>
                                <th>Unidad</th>

                                <th>Factor K <br />Original</th>
                                <th>Factor K <br />Modificado</th>

                                <th>Observación <br />Original</th>
                                <th>Observación <br />Modificado</th>

                                <th>Justificación</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            foreach (var reg in listaCambios)
            {
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>
                                        <td style=';'>{2}</td>
                                        <td style=''>{3}</td>
                                        <td style=';'>{4}</td>

                                        <td style=';'>{5}</td>
                                        <td style='' >{6}</td>

                                        <td style=';'>{7}</td>
                                        <td style='' >{8}</td>

                                        <td style='' >{9}</td>
                                    </tr>
                                    "
                                , ""
                                , reg.Tipocambio
                                , reg.Emprnomb
                                , reg.Central
                                , reg.Itotunidadnomb

                                , reg.Itotfactorkold
                                , reg.Itotfactork
                                , reg.Itotdescadicold
                                , reg.Itotdescadic

                                , reg.Itotjustf
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region Cuadro 5

        public int ProcesarCuadro5(int irecacodi, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25Cuadro5;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);
            //Assetec[IND.PR25.2022]
            List<IndReporteDetDTO> listaConservarValor = this.ListConservarValorByPeriodoCuadro(cuadro, regRecalculo.Ipericodi);
            //Assetec[IND.PR25.2022]
            List<IndReporteTotalDTO> listaRptTot;
            List<IndReporteDetDTO> listaRptDet;

            ListarEqCentralHidraulicoOpComercial(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out List<EqEquipoDTO> listaCentrales, out List<EqEquipoDTO> listaEquiposHidro, out List<ResultadoValidacionAplicativo> listaMsj);

            if (regRecalculo.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena)
            {
                GenerarReporteYDetalle48(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaCentrales, out listaRptTot, out listaRptDet, out List<ResultadoValidacionAplicativo> listaVal);
            }
            else
            {
                GenerarReporteYDetalle96(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaCentrales, out listaRptTot, out listaRptDet, out List<ResultadoValidacionAplicativo> listaVal);
            }

            //Assetec[IND.PR25.2022]
            foreach (var cuadro5 in listaRptDet)
            {
                IndReporteDetDTO entity = listaConservarValor.Where(x => x.Idetdia == cuadro5.Idetdia
                                                                         && x.Grupocodi == cuadro5.Grupocodi && x.Emprcodi == cuadro5.Emprcodi
                                                                         && x.Equipadre == cuadro5.Equipadre && x.Equicodi == cuadro5.Equicodi
                                                                         && x.Idetopcom == cuadro5.Idetopcom).FirstOrDefault();
                if (entity != null)
                {
                    cuadro5.Idetjustf = entity.Idetjustf;
                    cuadro5.Idetconsval = entity.Idetconsval;
                    cuadro5.Idettienedisp = entity.Idettienedisp;
                }
            }
            //Assetec[IND.PR25.2022]

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            if (EsVersionCreableCuadro(regCuadro, regRecalculo, regReporte, listaRptTot, listaRptDet))
            {
                CambiarAEstadoHistorico(cuadro, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaRptTot;
                regSaveBD.ListaRptDet = listaRptDet;

                return GuardarReporteIndispBDTransaccional(regSaveBD);
            }

            return 0;
        }

        #region Cálculo

        private void GenerarReporteYDetalle96(DateTime fechaIni, DateTime fechaFin, List<EqEquipoDTO> listaUnidadHidro
                                                , out List<IndReporteTotalDTO> listaRptTot, out List<IndReporteDetDTO> listaRptDet, out List<ResultadoValidacionAplicativo> listaVal)
        {
            listaRptDet = new List<IndReporteDetDTO>();
            listaRptTot = new List<IndReporteTotalDTO>();
            listaVal = new List<ResultadoValidacionAplicativo>();

            List<MeMedicion96DTO> listaM96 = ListarM96HidroHoraPuntaOCxDia(fechaIni, fechaFin, out List<ResultadoValidacionAplicativo> listaVal1);
            listaVal.AddRange(listaVal1);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            int idTotal = 1;
            foreach (var regUnidad in listaUnidadHidro)
            {
                if (regUnidad.Equicodi == 16277)
                { }

                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = ConstantesHorasOperacion.IdTipoHidraulica,
                    Emprcodi = regUnidad.Emprcodi.Value,
                    Equipadre = regUnidad.Equipadre.Value,
                    Grupocodi = regUnidad.Grupocodi,
                    Equicodi = regUnidad.Equicodi,
                    Itotunidadnomb = !string.IsNullOrEmpty(regUnidad.Equinomb) ? regUnidad.Equinomb.Trim() : string.Empty,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotincremental = regUnidad.Grupoincremental,
                    Itotpe = regUnidad.Pe
                };

                var lista96xCentral = listaM96.Where(x => x.Equipadre == regUnidad.Equipadre).ToList();

                for (var day = fechaIni; day <= fechaFin; day = day.AddDays(1))
                {
                    var reg96 = lista96xCentral.Find(x => x.Medifecha == day);

                    //parámetros de hora punta vigente para la fecha de consulta
                    SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fechaIni, ParametrosFormato.ResolucionCuartoHora);

                    listaRptDet.Add(new IndReporteDetDTO()
                    {
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre ?? 0,
                        Equicodi = regUnidad.Equicodi,
                        Grupocodi = regUnidad.Grupocodi,
                        Idetdia = day.Day,
                        Idethoraini = day,
                        Idetopcom = ConstantesAppServicio.SI,
                        Idettienedisp = TieneDisponibilidad96(day, regUnidad, reg96, (regUnidad?.Pe) ?? 0, paramHPyHFP),
                        Itotcodi = idTotal
                    });
                }

                if (regUnidad.Pe.GetValueOrDefault(0) <= 0)
                {
                    listaVal.Add(new ResultadoValidacionAplicativo()
                    {
                        TipoResultado = 2,
                        TipoFuenteDatoDesc = "Potencia efectiva",
                        Descripcion = string.Format("La unidad {0} no tiene información de potencia efectiva vigente para el periodo.", regUnidad.Central + " " + objUnidad.Itotunidadnomb),
                        Accion = "Coordinar con DTI o el área correspondiente."
                    });
                }

                listaRptTot.Add(objUnidad);
                idTotal++;
            }

            if (!listaM96.Any() || listaM96.Sum(x => x.Meditotal.GetValueOrDefault(0)) <= 0)
            {
                listaVal = new List<ResultadoValidacionAplicativo>();
                listaVal.Add(new ResultadoValidacionAplicativo()
                {
                    TipoResultado = 2,
                    TipoFuenteDatoDesc = "Medidores de generación",
                    Descripcion = "No existe información para el periodo seleccionado.",
                    Accion = "Coordinar con DTI o el área correspondiente."
                });
            }
        }

        /// <summary>
        /// verificar disponibilidad
        /// </summary>
        /// <param name="reg96"></param>
        /// <param name="pe"></param>
        /// <returns></returns>
        private int? TieneDisponibilidad96(DateTime fecha, EqEquipoDTO regUnidad, MeMedicion96DTO reg96, decimal pe, SiParametroValorDTO paramHPyHFP)
        {
            //antes de operación comercial debe ser null
            if (regUnidad.Equifechiniopcom != null && fecha < regUnidad.Equifechiniopcom)
                return null;

            //después de operación comercial debe ser null
            if (regUnidad.Equifechfinopcom != null && fecha >= regUnidad.Equifechfinopcom)
                return null;

            int[] array = new int[4 * 6];
            int numH = 0;
            for (int hx = paramHPyHFP.HIniHP; hx <= paramHPyHFP.HFinHP; hx++)
            {
                if (reg96 != null)
                {
                    decimal? valorH = (decimal?)reg96.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(reg96, null);

                    if (valorH >= pe * 0.15m)
                    {
                        array[numH] = 1;
                    }
                }

                numH++;
            }

            //3 horas 
            return array.Sum() >= 3 * 4 ? 1 : 0;
        }

        /// <summary>
        /// Obtener Energia total en Hora Punta y Operación Comercial
        /// </summary>
        /// <param name="fechaFin"></param>
        /// <param name="listaEnergiaHP"></param>
        /// <param name="listaEquiposOC"></param>
        /// <returns></returns>
        private List<MeMedicion96DTO> ListarM96HidroHoraPuntaOCxDia(DateTime fechaIni, DateTime fechaFin, out List<ResultadoValidacionAplicativo> listaVal)
        {
            var servMedidores = (new ReporteMedidoresAppServicio());
            listaVal = new List<ResultadoValidacionAplicativo>();

            List<MeMedicion96DTO> listaM96 = servMedidores.ListaDataMDGeneracionConsolidado(fechaIni, fechaFin, ConstantesMedicion.IdTipogrupoCOES
                                                        , ConstantesMedicion.IdTipoGeneracionHidrolectrica.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString()
                                                        , ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false);


            //aplicar TTIE
            TitularidadAppServicio servTitEmp = new TitularidadAppServicio();
            //Consulta el histórico de relación entre los equipos y las empresas
            List<SiHisempeqDataDTO> listaHist = servTitEmp.ListSiHisempeqDatas("-1").Where(x => x.Heqdatfecha <= fechaFin).ToList();

            //Titularidad de Instalaciones de Empresas, para evitar duplicados
            servTitEmp.SetTTIEequipoCentralToM96(listaM96, listaHist);

            //Centrales solares y eolicas que tiene operación comercial durantes el mes
            var familia = $"{ConstantesHorasOperacion.IdGeneradorHidroelectrico},{ConstantesHorasOperacion.IdTipoHidraulica}";
            var listaEquiposOC = servEq.ListarEquiposTienenOpComercial(fechaIni, fechaFin, familia, out List<ResultadoValidacionAplicativo> listaMsjEq);

            //Operación comercial
            List<EqPropequiDTO> listaOperacionComercial = ListarEqPropequiHistoricoVigente(ConstantesAppServicio.PropiedadOperacionComercial.ToString(), null, false);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);
            SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fechaIni, ParametrosFormato.ResolucionCuartoHora);

            var lista96OC = new List<MeMedicion96DTO>();

            List<EqEquipoDTO> listaCentral = listaEquiposOC.Where(x => ConstantesHorasOperacion.IdTipoHidraulica == x.Famcodi.GetValueOrDefault(0)).ToList();

            foreach (var reg in listaCentral)
            {
                if (reg.Equipadre == 14407)
                { }

                List<int> listaEquicodiXCentral = listaEquiposOC.Where(x => x.Equipadre == reg.Equipadre && x.Equipadre > 0).Select(x => x.Equicodi).Distinct().ToList();
                List<MeMedicion96DTO> listaMWXCentral = listaM96.Where(x => x.Equipadre == reg.Equipadre).ToList();

                for (DateTime day = fechaIni; day <= fechaFin; day = day.AddDays(1))
                {
                    //obtener equipos con operación comercial
                    List<int> listaEquicodiOC = new List<int>();
                    foreach (var equicodi in listaEquicodiXCentral)
                    {
                        EquipamientoAppServicio.SetValorOperacionComercial(equicodi, day, day, listaOperacionComercial, out string opComercial, out DateTime? fechaInicio, out DateTime? fechaRetiro);
                        if (ConstantesAppServicio.SI == opComercial) listaEquicodiOC.Add(equicodi);
                    }

                    if (listaEquicodiOC.Any())
                    {
                        var reg96 = new MeMedicion96DTO()
                        {
                            Emprcodi = reg.Emprcodi.Value,
                            Emprnomb = reg.Emprnomb,
                            Equipadre = reg.Equipadre.Value,
                            Central = reg.Central,
                            Famcodi = INDAppServicio.GetFamcodiPadre(reg.Famcodi.Value),
                            FechaFila = reg.Equifechiniopcom.Value,
                            Medifecha = day,
                        };

                        var lista96XDiaXCentral = listaMWXCentral.Where(x => x.Medifecha == day && listaEquicodiOC.Contains(x.Equicodi)).ToList();

                        decimal total = 0;
                        for (int hx = paramHPyHFP.HIniHP; hx <= paramHPyHFP.HFinHP; hx++)
                        {
                            decimal valorHPunta = 0;
                            foreach (var reg96Eq in lista96XDiaXCentral)
                            {
                                var valorH = (decimal?)reg96Eq.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(reg96Eq, null);
                                valorHPunta += valorH ?? 0;
                            }
                            total += valorHPunta;

                            reg96.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).SetValue(reg96, valorHPunta);
                        }

                        if (total > 0)
                        {
                            reg96.Meditotal = total;
                            lista96OC.Add(reg96);
                        }

                        if (!lista96XDiaXCentral.Any())
                        {
                            listaVal.Add(new ResultadoValidacionAplicativo()
                            {
                                TipoResultado = 2,
                                TipoFuenteDatoDesc = "Medidores de generación",
                                Descripcion = string.Format("La central {0} no tiene información de uno o varios generadores el día {1}.", reg.Central, day.ToString(ConstantesAppServicio.FormatoFecha)),
                                Accion = "Coordinar con DTI o el área correspondiente."
                            });
                        }
                    }
                }
            }

            return lista96OC;
        }

        /// <summary>
        /// Generar detalle Medicion48
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaUnidadHidro"></param>
        /// <param name="listaRptTot"></param>
        /// <param name="listaRptDet"></param>
        /// <param name="listaVal"></param>
        private void GenerarReporteYDetalle48(DateTime fechaIni, DateTime fechaFin, List<EqEquipoDTO> listaUnidadHidro
                                                , out List<IndReporteTotalDTO> listaRptTot, out List<IndReporteDetDTO> listaRptDet, out List<ResultadoValidacionAplicativo> listaVal)
        {
            listaRptDet = new List<IndReporteDetDTO>();
            listaRptTot = new List<IndReporteTotalDTO>();
            listaVal = new List<ResultadoValidacionAplicativo>();

            List<MeMedicion48DTO> listaM48 = ListarM48HidroHoraPuntaOCxDia(fechaIni, fechaFin, out List<ResultadoValidacionAplicativo> listaVal1);
            listaVal.AddRange(listaVal1);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            int idTotal = 1;
            foreach (var regUnidad in listaUnidadHidro)
            {
                if (regUnidad.Equicodi == 18186)
                { }

                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = ConstantesHorasOperacion.IdTipoHidraulica,
                    Emprcodi = regUnidad.Emprcodi.Value,
                    Equipadre = regUnidad.Equipadre.Value,
                    Grupocodi = regUnidad.Grupocodi,
                    Equicodi = regUnidad.Equicodi,
                    Itotunidadnomb = !string.IsNullOrEmpty(regUnidad.Equinomb) ? regUnidad.Equinomb.Trim() : string.Empty,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotincremental = regUnidad.Grupoincremental,
                    Itotpe = regUnidad.Pe
                };

                var lista48xCentral = listaM48.Where(x => x.Equipadre == regUnidad.Equipadre).ToList();

                for (var day = fechaIni; day <= fechaFin; day = day.AddDays(1))
                {
                    var reg48 = lista48xCentral.Find(x => x.Medifecha == day);
                    
                    //parámetros de hora punta vigente para la fecha de consulta
                    SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fechaIni, ParametrosFormato.ResolucionMediaHora);

                    listaRptDet.Add(new IndReporteDetDTO()
                    {
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre ?? 0,
                        Equicodi = regUnidad.Equicodi,
                        Grupocodi = regUnidad.Grupocodi,
                        Idetdia = day.Day,
                        Idethoraini = day,
                        Idetopcom = ConstantesAppServicio.SI,
                        Idettienedisp = TieneDisponibilidad48(day, regUnidad, reg48, (regUnidad?.Pe) ?? 0, paramHPyHFP),
                        Itotcodi = idTotal
                    });
                }

                if (regUnidad.Pe.GetValueOrDefault(0) <= 0)
                {
                    listaVal.Add(new ResultadoValidacionAplicativo()
                    {
                        TipoResultado = 2,
                        TipoFuenteDatoDesc = "Potencia efectiva",
                        Descripcion = string.Format("La unidad {0} no tiene información de potencia efectiva vigente para el periodo.", objUnidad.Itotunidadnomb),
                        Accion = "Coordinar con DTI o el área correspondiente."
                    });
                }

                listaRptTot.Add(objUnidad);
                idTotal++;
            }

            if (!listaM48.Any() || listaM48.Sum(x => x.Meditotal.GetValueOrDefault(0)) <= 0)
            {
                listaVal = new List<ResultadoValidacionAplicativo>();
                listaVal.Add(new ResultadoValidacionAplicativo()
                {
                    TipoResultado = 2,
                    TipoFuenteDatoDesc = "Despacho",
                    Descripcion = "No existe información para el periodo seleccionado.",
                    Accion = "Coordinar con DTI o el área correspondiente."
                });
            }
        }

        /// <summary>
        /// verificar disponibilidad
        /// </summary>
        /// <param name="reg48"></param>
        /// <param name="pe"></param>
        /// <returns></returns>
        private int? TieneDisponibilidad48(DateTime fecha, EqEquipoDTO regUnidad, MeMedicion48DTO reg48, decimal pe, SiParametroValorDTO paramHPyHFP)
        {
            //antes de operación comercial debe ser null
            if (regUnidad.Equifechiniopcom != null && fecha < regUnidad.Equifechiniopcom)
                return null;

            //después de operación comercial debe ser null
            if (regUnidad.Equifechfinopcom != null && fecha >= regUnidad.Equifechfinopcom)
                return null;

            int[] array = new int[2 * 6];
            int numH = 0;

            for (int hx = paramHPyHFP.HIniHP; hx <= paramHPyHFP.HFinHP; hx++)
            {
                if (reg48 != null)
                {
                    decimal? valorH0 = (decimal?)reg48.GetType().GetProperty(ConstantesAppServicio.CaracterH + (hx - 1)).GetValue(reg48, null);
                    decimal? valorH = (decimal?)reg48.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(reg48, null);

                    if (valorH >= pe * 0.15m || valorH0 >= pe * 0.15m) //|| valorH2 >= pe * 0.15m
                    {
                        array[numH] = 1;
                    }
                }

                numH++;
            }

            //3 horas 
            return array.Sum() >= 3 * 2 ? 1 : 0;
        }

        /// <summary>
        /// Obtener Energia total en Hora Punta y Operación Comercial
        /// </summary>
        /// <param name="fechaFin"></param>
        /// <param name="listaEnergiaHP"></param>
        /// <param name="listaEquiposOC"></param>
        /// <returns></returns>
        private List<MeMedicion48DTO> ListarM48HidroHoraPuntaOCxDia(DateTime fechaIni, DateTime fechaFin, out List<ResultadoValidacionAplicativo> listaVal)
        {
            var servEjec = (new EjecutadoAppServicio());
            listaVal = new List<ResultadoValidacionAplicativo>();

            List<MeMedicion48DTO> listaM48 = servEjec.ListaDataMDGeneracionConsolidado48(fechaIni, fechaFin, ConstantesMedicion.IdTipogrupoTodos
                    , ConstantesMedicion.IdTipoGeneracionHidrolectrica.ToString(), ConstantesMedicion.IdEmpresaTodos.ToString()
                    , ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false, ConstantesPR5ReportesServicio.LectDespachoEjecutadoHisto);

            //puntos despacho
            List<MePtomedicionDTO> listaPtoDespacho = FactorySic.GetMePtomedicionRepository().List(ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.OriglectcodiDespachomediahora.ToString());

            //grupos
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

            //aplicar TTIE
            TitularidadAppServicio servTitEmp = new TitularidadAppServicio();
            //Consulta el histórico de relación entre los equipos y las empresas
            List<SiHisempeqDataDTO> listaHist = servTitEmp.ListSiHisempeqDatas("-1").Where(x => x.Heqdatfecha <= fechaFin).ToList();

            //Titularidad de Instalaciones de Empresas, para evitar duplicados
            servTitEmp.SetTTIEequipoCentralToM48(listaM48, listaHist);

            //Centrales solares y eolicas que tiene operación comercial durantes el mes
            var familia = $"{ConstantesHorasOperacion.IdGeneradorHidroelectrico},{ConstantesHorasOperacion.IdTipoHidraulica}";
            var listaEquiposOC = servEq.ListarEquiposTienenOpComercial(fechaIni, fechaFin, familia, out List<ResultadoValidacionAplicativo> listaMsjEq);

            //Operación comercial
            List<EqPropequiDTO> listaOperacionComercial = ListarEqPropequiHistoricoVigente(ConstantesAppServicio.PropiedadOperacionComercial.ToString(), null, false);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);
            SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fechaIni, ParametrosFormato.ResolucionMediaHora);

            var lista48OC = new List<MeMedicion48DTO>();
            var lista48Adic = new List<MeMedicion48DTO>();

            List<EqEquipoDTO> listaCentral = listaEquiposOC.Where(x => ConstantesHorasOperacion.IdTipoHidraulica == x.Famcodi.GetValueOrDefault(0)).ToList();

            foreach (var reg in listaCentral)
            {
                reg.Grupocodi = GetGrupocodiDespachoHidro(reg.Grupocodi, listaGrupo) ?? 0;
                var regGrupo = listaGrupo.Find(x => x.Grupocodi == reg.Grupocodi);
                string gruponomb = regGrupo != null ? regGrupo.Gruponomb : string.Empty;

                if (reg.Equipadre == 12600)
                { }

                //
                List<int> listaEquicodiXCentral = listaEquiposOC.Where(x => x.Equipadre == reg.Equipadre && x.Equipadre > 0).Select(x => x.Equicodi).Distinct().ToList();
                List<MeMedicion48DTO> listaMWXCentral = listaM48.Where(x => x.Equipadre == reg.Equipadre).ToList();

                for (DateTime day = fechaIni; day <= fechaFin; day = day.AddDays(1))
                {
                    //obtener equipos con operación comercial
                    List<int> listaEquicodiOC = new List<int>();
                    foreach (var equicodi in listaEquicodiXCentral)
                    {
                        EquipamientoAppServicio.SetValorOperacionComercial(equicodi, day, day, listaOperacionComercial, out string opComercial, out DateTime? fechaInicio, out DateTime? fechaRetiro);
                        if (ConstantesAppServicio.SI == opComercial) listaEquicodiOC.Add(equicodi);
                    }

                    if (listaEquicodiOC.Any())
                    {
                        var reg48 = new MeMedicion48DTO()
                        {
                            Emprcodi = reg.Emprcodi.Value,
                            Emprnomb = reg.Emprnomb,
                            Equipadre = reg.Equipadre.Value,
                            Equicodi = reg.Equipadre.Value,
                            Grupocodi = reg.Grupocodi ?? 0,
                            Gruponomb = gruponomb,
                            Famcodi = INDAppServicio.GetFamcodiPadre(reg.Famcodi.Value),
                            Medifecha = day,
                        };

                        var lista48XDiaXCentral = listaMWXCentral.Where(x => x.Medifecha == day && listaEquicodiOC.Contains(x.Equicodi)).ToList();

                        decimal total = 0;
                        for (int hx = paramHPyHFP.HIniHP - 1; hx <= paramHPyHFP.HFinHP + 1; hx++)
                        {
                            decimal valorHPunta = 0;
                            foreach (var reg48Eq in lista48XDiaXCentral)
                            {
                                var valorH = (decimal?)reg48Eq.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(reg48Eq, null);
                                valorHPunta += valorH ?? 0;
                            }
                            total += valorHPunta;

                            reg48.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).SetValue(reg48, valorHPunta);
                        }

                        if (total > 0)
                        {
                            reg48.Meditotal = total;
                            lista48OC.Add(reg48);
                        }

                        var lista48XDiaXDespacho = listaM48.Where(x => x.Medifecha == day && x.Grupocodi == reg.Grupocodi).ToList();

                        if (!lista48XDiaXDespacho.Any())
                        {
                            listaVal.Add(new ResultadoValidacionAplicativo()
                            {
                                TipoResultado = 2,
                                TipoFuenteDatoDesc = "Despacho",
                                Descripcion = string.Format("El grupo de despacho {0} no tiene información de uno o varias centrales el día {1}.", gruponomb, day.ToString(ConstantesAppServicio.FormatoFecha)),
                                Accion = "Coordinar con DTI o el área correspondiente."
                            });
                        }
                    }
                }
            }

            List<int> listaEquipadreConDato = lista48OC.Select(x => x.Equipadre).Distinct().ToList();
            List<EqEquipoDTO> listaCentralSinDato = listaCentral.Where(x => !listaEquipadreConDato.Contains(x.Equipadre ?? 0)).ToList();
            foreach (var reg in listaCentralSinDato)
            {
                List<MeMedicion48DTO> lista48XDespacho = lista48OC.Where(x => x.Grupocodi == reg.Grupocodi).ToList();
                if (lista48XDespacho.Any())
                {
                    foreach (var reg48Desp in lista48XDespacho)
                    {
                        var reg48 = new MeMedicion48DTO()
                        {
                            Emprcodi = reg.Emprcodi.Value,
                            Emprnomb = reg.Emprnomb,
                            Equipadre = reg.Equipadre.Value,
                            Equicodi = reg.Equipadre.Value,
                            Grupocodi = reg.Grupocodi ?? 0,
                            Gruponomb = reg.Gruponomb,
                            Famcodi = INDAppServicio.GetFamcodiPadre(reg.Famcodi.Value),
                            Medifecha = reg48Desp.Medifecha,
                        };

                        for (int hx = paramHPyHFP.HIniHP - 1; hx <= paramHPyHFP.HFinHP + 1; hx++)
                        {
                            var valorH = (decimal?)reg48Desp.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).GetValue(reg48Desp, null);
                            reg48.GetType().GetProperty(ConstantesAppServicio.CaracterH + hx).SetValue(reg48, valorH);
                        }
                        reg48.Meditotal = reg48Desp.Meditotal;

                        lista48Adic.Add(reg48);
                    }
                }
            }

            lista48OC.AddRange(lista48Adic);

            return lista48OC;
        }

        #endregion

        #region web Handson y excel

        public void GenerarWebReporte5(int irptcodi, string empresa, string central, DateTime fechaIni, DateTime fechaFin
                                                    , out HandsonModel handson, out string htmlCambios, out List<string> listaMensajeNota)
        {
            this.GenerarReporteCuadroXVersionReporte5(irptcodi, empresa, central, fechaIni, fechaFin
                                                    , out handson, out listaMensajeNota
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro, out IndRecalculoDTO regRecalculo
                                                    , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld);

            List<IndReporteDetDTO> listaCambios = ListarCambiosCuadro5(listaReptHoja, listaRepdetHoja, listaRepdetHojaOld);
            htmlCambios = GenerarHtmlListadoCambios5(listaCambios);
        }

        /// <summary>
        /// Generar reporte cuadro por version de reporte
        /// </summary>
        private void GenerarReporteCuadroXVersionReporte5(int irptcodi, string empresa, string central, DateTime fechaIni, DateTime fechaFin
                                                    , out HandsonModel handson, out List<string> listaMensajeNota
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro, out IndRecalculoDTO regRecalculo
                                                    , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld)
        {
            regVersion = this.GetByIdIndReporte(irptcodi);
            regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                , out List<IndReporteTotalDTO> listaReptotOut, out List<IndReporteDetDTO> listaRepdetOut
                , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral);

            listaRepdetHojaOld = new List<IndReporteDetDTO>();
            if (regVersion.Irptreporteold > 0)
            {
                this.ListaDataXVersionReporte(regVersion.Irptreporteold.Value, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                    , out List<IndReporteTotalDTO> listaReptotOut2, out listaRepdetHojaOld
                    , out List<SiEmpresaDTO> listaEmpresa2, out List<EqEquipoDTO> listaCentral2);
            }

            //centrales en conjunto
            SetearCentralConjuntoCuadro5(regRecalculo, ref listaReptotOut, out listaMensajeNota);

            //Salidas
            handson = GetHandsonXVersionReporte5Disp(regCuadro.Tgenernomb, listaReptotOut, ref listaRepdetOut
                , fechaIni, fechaFin);

            listaReptHoja = listaReptotOut;
            listaRepdetHoja = listaRepdetOut;
        }


        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="tipoIndisp"></param>
        /// <param name="tgenernomb"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaAllDet"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaEquipo"></param>
        /// <param name="listaManttoBD"></param>
        /// <returns></returns>
        private HandsonModel GetHandsonXVersionReporte5Disp(string tgenernomb, List<IndReporteTotalDTO> listaTot, ref List<IndReporteDetDTO> listaDet
            , DateTime fechaIni, DateTime fechaFin)
        {
            int numDias = (fechaFin - fechaIni).Days + 1;

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "EMPRESA", IsMerge = 1, Ancho = 360, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "TIPO", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "CENTRAL", IsMerge = 1, Ancho = 250, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //equicodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //grupocodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "UNIDAD", IsMerge = 1, Ancho = 250, AlineacionHorizontal = "Centro", });

            DateTime fechaXDia = fechaIni.AddDays(-1);
            for (int x = 1; x <= numDias; x++)
            {
                fechaXDia = fechaXDia.AddDays(1);
                listaCabecera.Add(new CabeceraRow() { TituloRow = fechaXDia.ToString("dd-MMM"), IsMerge = 0, Ancho = 50, AlineacionHorizontal = "Centro", });
            }
            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = true,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            int numColAntesdeFecha = 6;
            int numCol = numColAntesdeFecha + numDias;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();
            List<string[]> listaDescripcionHandson = new List<string[]>();
            List<string[]> listaFormatoHtmlHandson = new List<string[]>();

            List<CeldaCambios> arrCambioCells = new List<CeldaCambios>();

            foreach (var regTotalX in listaTot)
            {
                if (regTotalX.Equicodi == 13418)
                { }

                List<IndReporteDetDTO> listaDetXTot = listaDet.Where(x => x.Itotcodi == regTotalX.Itotcodi).OrderBy(x => x.Idethoraini).ToList();

                string[] matriz = new string[numCol];
                matriz[0] = regTotalX.Emprnomb; //EMPRESA
                matriz[1] = tgenernomb; //oculto
                matriz[2] = regTotalX.Central + (regTotalX.TieneCentralConjunto ? " (*)" : ""); //CENTRAL
                matriz[3] = regTotalX.Equicodi.ToString();
                matriz[4] = regTotalX.Grupocodi.ToString();
                matriz[5] = regTotalX.Itotunidadnomb;
                string[] matrizDesc = new string[numCol];
                string[] matrizFmt = new string[numCol];

                //foreach de dias del mes
                fechaXDia = fechaIni.AddDays(-1);
                for (int col = numColAntesdeFecha; col < numCol; col++)
                {
                    fechaXDia = fechaXDia.AddDays(1);

                    IndReporteDetDTO regDetEqXDia = listaDetXTot.Find(x => x.Idethoraini.Value.Date == fechaXDia);
                    matriz[col] = (regDetEqXDia != null && regDetEqXDia.Idettienedisp != null) ? regDetEqXDia.Idettienedisp.Value.ToString() : "";
                }

                listaDataHandson.Add(matriz);
                listaDescripcionHandson.Add(matrizDesc);
                listaFormatoHtmlHandson.Add(matrizFmt);
                numFilaActual++;
            }

            int numFil = listaDataHandson.Count;

            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.ListaExcelDescripcion = listaDescripcionHandson.ToArray();
            handson.ListaExcelFormatoHtml = listaFormatoHtmlHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>();

            return handson;
        }

        public void GenerarRptExcelCuadro5(string ruta, int irptcodi, string empresa, string central
                                            , DateTime fechaIni, DateTime fechaFin, DateTime fechaIniSoloDatos, DateTime fechaFinSoloDatos, out string nameFile)
        {
            this.GenerarReporteCuadroXVersionReporte5(irptcodi, empresa, central, fechaIni, fechaFin
                                                    , out HandsonModel handson, out List<string> listaMensajeNota
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro, out IndRecalculoDTO regRecalculo
                                                    , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaRepdetHojaOld5);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            List<MeMedicion48DTO> listaM48 = new List<MeMedicion48DTO>();
            List<MeMedicion96DTO> listaM96 = new List<MeMedicion96DTO>();
            int resolucion = 0;

            if (regRecalculo.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena)
            {
                listaM48 = ListarM48HidroHoraPuntaOCxDia(fechaIni, fechaFin, out List<ResultadoValidacionAplicativo> listaVal);
                resolucion = ParametrosFormato.ResolucionMediaHora;
            }
            else
            {
                listaM96 = ListarM96HidroHoraPuntaOCxDia(fechaIni, fechaFin, out List<ResultadoValidacionAplicativo> listaVal);
                resolucion = ParametrosFormato.ResolucionCuartoHora;
            }

            //parámetros de hora punta vigente para la fecha de consulta
            SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, fechaIni, resolucion);

            //Nombre de archivo
            nameFile = string.Format("PR25_Cuadro5_{0}_Version_{1}.xlsm", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCuadroReporteSoloCuadro5(xlPackage, "RESUMEN", true, false, 1, 2, 7, 2, "DISPONIBILIDAD DIARIA DE LAS CENTRALES HIDROELÉCTRICAS - {0} {1}"
                                                                            , regCuadro, regPeriodo, regVersion, fechaIni, fechaFin, fechaIniSoloDatos, fechaFinSoloDatos, listaReptHoja, listaRepdetHoja, listaMensajeNota);

                xlPackage.Save();

                if (regRecalculo.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena)
                    GeneraRptRegistroMedidores48(xlPackage, "DESPACHO", 2, 2, fechaIni, fechaFin, listaReptHoja, listaM48, paramHPyHFP);
                else
                    GeneraRptRegistroMedidores96(xlPackage, "MEDIDORES", 2, 2, fechaIni, fechaFin, listaReptHoja, listaM96, paramHPyHFP);
                xlPackage.Save();
            }
        }

        /// <summary>
        /// Generar hoja excel cuadro detalle Fotuito y Programado
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="tipoGeneracion"></param>
        /// <param name="tipoIndisp"></param>
        /// <param name="incluirDescripcion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHojaInput"></param>
        private void GenerarHojaExcelCuadroReporteSoloCuadro5(ExcelPackage xlPackage, string nameWS, bool esMacro, bool incluirOficial, int rowIni, int colIni, int rowIniTabla, int colIniTabla, string titulo
                                                   , IndCuadroDTO regCuadro, IndPeriodoDTO regPeriodo, IndReporteDTO regVersion
                                                   , DateTime fechaIni, DateTime fechaFin, DateTime fechaIniSoloDatos, DateTime fechaFinSoloDatos
                                                   , List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdetHojaInput, List<string> listaNota)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            if (esMacro)
                xlPackage.Workbook.CreateVBAProject();

            string font = "TradeGothic Bold";
            string colorCeldaFondoCabecera = "#FFFFFF";
            string colorCeldaTextoCabecera = "#000000";

            string colorCeldaFondoEmpresa = "#4F81BD";
            string colorCeldaTextoEmpresa = "#FFFFFF";
            string colorCeldaFondoUnidad = "#DCE6F1";
            string colorCeldaTextoUnidad = "#000000";
            string colorLineaDefecto = "#FFFFFF";
            string colorLineaTabla = "#4F81BD";

            #region  Filtros y Cabecera

            int colTitulo = colIni + 8;
            int colEmpresa = colIniTabla;
            int colTipoGen = colEmpresa + 1;
            int colCentral = colTipoGen + 1;
            int colUnidad = colCentral + 1;

            if (incluirOficial)
            {
                ws.Cells[rowIni, colUnidad + 28].Value = regVersion.Irecainforme; //INFORME COES/D/DO/SME-INF-180-2020
                UtilExcel.SetFormatoCelda(ws, rowIni, colUnidad + 28, rowIni, colUnidad + 28, "Centro", "Derecha", "#000000", "#FFFFFF", "Arial", 8, false);

                ws.Cells[rowIni + 1, colUnidad + 12].Value = regCuadro.Icuanombre; //CUADRO N°5
                UtilExcel.SetFormatoCelda(ws, rowIni + 1, colUnidad + 12, rowIni + 1, colUnidad + 12, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 18, false);

                ws.Cells[rowIni + 2, colUnidad + 6].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); //DISPONIBILIDAD DIARIA DE LAS CENTRALES HIDROELÉCTRICAS - ENERO 2021
                UtilExcel.SetFormatoCelda(ws, rowIni + 2, colUnidad + 6, rowIni + 2, colUnidad + 6, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 18, false);
            }
            else
            {
                ws.Cells[rowIni + 1, colUnidad + 6].Value = "REPORTE INTERMEDIO";
                ws.Cells[rowIni + 2, colUnidad + 6].Value = string.Format(titulo, EPDate.f_NombreMes(regPeriodo.Iperimes).ToUpper(), regPeriodo.Iperianio); //DISPONIBILIDAD DIARIA DE LAS CENTRALES HIDROELÉCTRICAS - ENERO 2021
                UtilExcel.SetFormatoCelda(ws, rowIni + 1, colUnidad + 6, rowIni + 2, colUnidad + 6, "Centro", "Izquierda", "#000000", "#FFFFFF", font, 18, false);
            }

            int rowEmpresa = rowIniTabla;
            ws.Cells[rowEmpresa, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowEmpresa, colTipoGen].Value = "TIPO";
            ws.Cells[rowEmpresa, colCentral].Value = "CENTRAL";
            ws.Cells[rowEmpresa, colUnidad].Value = "UNIDAD";
            UtilExcel.SetFormatoCelda(ws, rowEmpresa, colEmpresa, rowEmpresa, colUnidad, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 8, false, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colEmpresa, rowEmpresa, colEmpresa, colorLineaTabla);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colTipoGen, rowEmpresa, colTipoGen, colorLineaTabla);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colCentral, rowEmpresa, colCentral, colorLineaTabla);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowEmpresa, colUnidad, rowEmpresa, colUnidad, colorLineaTabla);

            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colEmpresa, rowEmpresa, colUnidad, colorLineaTabla);

            double factorAncho = 0.85;
            //ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = 50 * factorAncho;
            ws.Column(colTipoGen).Width = 14 * factorAncho;
            ws.Column(colCentral).Width = 27 * factorAncho;
            ws.Column(colUnidad).Width = 30 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowEmpresa + 1;

            for (int u = 0; u < listaReptHoja.Count; u++)
            {
                IndReporteTotalDTO regTot = listaReptHoja[u];

                ws.Cells[rowData, colEmpresa].Value = regTot.Emprnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Izquierda", colorCeldaTextoEmpresa, colorCeldaFondoEmpresa, font, 8, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colEmpresa, rowData, colEmpresa, colorLineaDefecto);

                ws.Cells[rowData, colTipoGen].Value = regCuadro.Tgenernomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colTipoGen, rowData, colTipoGen, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colTipoGen, rowData, colTipoGen, colorLineaDefecto);

                string central = regTot.TieneCentralConjunto ? regTot.Central + " (*)" : regTot.Central;
                ws.Cells[rowData, colCentral].Value = central;
                UtilExcel.SetFormatoCelda(ws, rowData, colCentral, rowData, colCentral, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, regTot.TieneCentralConjunto);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colCentral, rowData, colCentral, colorLineaDefecto);

                ws.Cells[rowData, colUnidad].Value = regTot.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colUnidad, "Centro", "Izquierda", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colUnidad, rowData, colUnidad, colorLineaDefecto);

                rowData++;
            }

            UtilExcel.BorderCeldasLineaGruesa(ws, rowEmpresa, colEmpresa, rowData - 1, colUnidad, colorLineaTabla);

            //dia por dia
            int colIniDetalle = colUnidad + 1;
            this.GenerarSubHojaXEjeXUnidadXDiaCuadro5(ws, rowEmpresa, colIniDetalle, font, fechaIni, fechaFin, fechaIniSoloDatos, fechaFinSoloDatos, listaReptHoja, listaRepdetHojaInput);

            #endregion

            #region Nota

            if (listaNota.Any())
            {

                int rowNota = rowData + 2;

                ws.Cells[rowNota, colEmpresa].Value = "Nota (*):";
                UtilExcel.SetFormatoCelda(ws, rowNota, colEmpresa, rowNota, colEmpresa, "Centro", "Derecha", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 8, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowNota, colEmpresa, rowNota, colEmpresa, colorLineaDefecto);

                foreach (var reg in listaNota)
                {
                    ws.Cells[rowNota, colTipoGen].Value = reg;
                    UtilExcel.SetFormatoCelda(ws, rowNota, colTipoGen, rowNota, colTipoGen, "Centro", "Izquierda", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 8, false);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowNota, colTipoGen, rowNota, colTipoGen, colorLineaDefecto);

                    rowNota++;
                }
            }

            #endregion
            if (incluirOficial)
            {
                HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConstantesAppServicio.EnlaceLogoCoes);
                HttpWebResponse response = (HttpWebResponse)request.GetResponse();
                System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());

                UtilExcel.AddImage(ws, img, rowIni + 1, colIni);
            }

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowEmpresa, colEmpresa, rowEmpresa, colEmpresa].AutoFilter = true;

            ws.View.FreezePanes(rowEmpresa + 1, colUnidad + 1);
            ws.View.ZoomScale = 85;

            //Todo el excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        /// <summary>
        /// Generar sub hoja excel por unidad y dia
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="font"></param>
        /// <param name="eje"></param>
        /// <param name="incluirDescripcion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoIndisp"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHoja"></param>
        private void GenerarSubHojaXEjeXUnidadXDiaCuadro5(ExcelWorksheet ws, int rowIni, int colIni, string font
                                                , DateTime fechaIni, DateTime fechaFin, DateTime fechaIniSoloDatos, DateTime fechaFinSoloDatos, List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdetHoja)
        {
            string colorCeldaTextoDia = "#FFFFFF";
            string colorCeldaFondoDia = "#538DD5";

            string colorCeldaTextoCero = "#00612E";
            string colorCeldaFondoCero = "#C6EFCE";
            string colorCeldaTextoUno = "#000000";
            string colorCeldaFondoUno = "#FFFFFF";
            string colorCeldaFondoNulo = "#BFBFBF";

            string colorLineaDia = "#FFFFFF";
            string colorLineaTieneDisp = "#F81BD";

            int numDia = (fechaFin.Date - fechaIni.Date).Days + 1;

            #region  Filtros y Cabecera

            double factorAncho = 0.85;

            int rowDia = rowIni;
            int colDia1 = colIni;

            for (var i = 0; i < numDia; i++)
            {
                ws.Cells[rowDia, colDia1 + i].Value = fechaIni.AddDays(i);
                ws.Cells[rowDia, colDia1 + i].Style.Numberformat.Format = "dd/mm";
                ws.Column(colDia1 + i).Width = 9 * factorAncho;

                UtilExcel.SetFormatoCelda(ws, rowDia, colDia1 + i, rowDia, colDia1 + i, "Centro", "Centro", colorCeldaTextoDia, colorCeldaFondoDia, font, 8, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowDia, colDia1 + i, rowDia, colDia1 + i, colorLineaDia);
            }

            #endregion

            #region Cuerpo

            int rowData = rowDia + 1;
            for (int u = 0; u < listaReptHoja.Count; u++)
            {
                IndReporteTotalDTO regTot = listaReptHoja[u];
                List<IndReporteDetDTO> listaDetXTot = listaRepdetHoja.Where(x => x.Itotcodi == regTot.Itotcodi).ToList();

                int colDiaActual;
                for (var m = 0; m < numDia; m++)
                {
                    colDiaActual = colDia1 + m;

                    DateTime fecha = fechaIni.AddDays(m);
                    IndReporteDetDTO regDetEqXDia = listaDetXTot.Find(x => x.Idethoraini.Value.Date == fecha);

                    if (regDetEqXDia != null && regDetEqXDia.Idettienedisp >= 0)
                    {
                        if (regDetEqXDia.Idettienedisp == 1)
                        {
                            ws.Cells[rowData, colDiaActual].Value = 1;
                            UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoUno, colorCeldaFondoUno, font, 8, false, false);
                            UtilExcel.BorderCeldasLineaDiscontinua(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaTieneDisp);
                        }
                        else
                        {
                            ws.Cells[rowData, colDiaActual].Value = 0;
                            UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoCero, colorCeldaFondoCero, font, 8, false, false);
                            UtilExcel.BorderCeldasLineaDiscontinua(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaTieneDisp);
                        }
                    }
                    else
                    {
                        //llenar vacios                        
                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", colorCeldaTextoCero, colorCeldaFondoNulo, font, 8, false, false);
                        UtilExcel.BorderCeldasLineaDiscontinua(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaTieneDisp);
                    }
                }
                rowData++;
            }

            #endregion

            //border a toda la tabla
            //UtilExcel.BorderCeldasLineaGruesa(ws, rowDia + 1, colDia1, rowData - 1, colDia1 + numDia - 1, colorLineaTabla);
        }

        /// <summary>
        /// Reporte Despacho
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="fecha1"></param>
        /// <param name="fecha2"></param>
        /// <param name="listaReptHojaInput"></param>
        /// <param name="data"></param>
        /// <param name="paramHPyHFP"></param>
        private void GeneraRptRegistroMedidores48(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni, DateTime fecha1, DateTime fecha2
                                                    , List<IndReporteTotalDTO> listaReptHojaInput, List<MeMedicion48DTO> data, SiParametroValorDTO paramHPyHFP)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            string colorLineaDefecto = "#000000";
            string colorCeldaFondoCabecera = "#FFFFFF";
            string colorCeldaTextoCabecera = "#000000";
            string font = "Calibri";

            int row = rowIni + 1;
            int col = colIni;

            //ordenar por empresa, despacho, central
            List<IndReporteTotalDTO> listaReptHoja = listaReptHojaInput.OrderBy(x => x.Emprnomb).ThenBy(x => x.Gruponomb).ThenBy(x => x.Central).ToList();

            if (listaReptHoja.Any())
            {
                #region cabecera

                int rowIniNombreReporte = rowIni;
                /// Fila Hora - Empresa - Total

                int colIniFecha = col;
                int colIniHora = colIniFecha + 1;
                int rowIniFecha = row;
                int rowFinFecha = rowIniFecha + 5 - 1;

                int rowIniEmp = rowIniFecha;
                int rowIniDespacho = rowIniEmp + 1;
                int rowIniEquipo = rowIniDespacho + 1;
                int rowPe = rowIniEquipo + 1;
                int rowMWMin = rowPe + 1;

                ws.Cells[rowIniFecha, colIniFecha].Value = "FECHA";
                UtilExcel.CeldasExcelAgrupar(ws, rowIniFecha, colIniFecha, rowFinFecha, colIniFecha);
                UtilExcel.SetFormatoCelda(ws, rowIniFecha, colIniFecha, rowFinFecha, colIniFecha, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniFecha, colIniFecha, rowFinFecha, colIniFecha, colorLineaDefecto);

                ws.Cells[rowIniFecha, colIniHora].Value = "EMPRESA";
                UtilExcel.SetFormatoCelda(ws, rowIniFecha, colIniHora, rowIniFecha, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniFecha, colIniHora, rowIniFecha, colIniHora, colorLineaDefecto);

                ws.Cells[rowIniDespacho, colIniHora].Value = "DESPACHO";
                UtilExcel.SetFormatoCelda(ws, rowIniDespacho, colIniHora, rowIniDespacho, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniDespacho, colIniHora, rowIniDespacho, colIniHora, colorLineaDefecto);

                ws.Cells[rowIniEquipo, colIniHora].Value = "CENTRAL";
                UtilExcel.SetFormatoCelda(ws, rowIniEquipo, colIniHora, rowIniEquipo, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEquipo, colIniHora, rowIniEquipo, colIniHora, colorLineaDefecto);

                ws.Cells[rowPe, colIniHora].Value = "Pe";
                UtilExcel.SetFormatoCelda(ws, rowPe, colIniHora, rowPe, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowPe, colIniHora, rowPe, colIniHora, colorLineaDefecto);

                ws.Cells[rowMWMin, colIniHora].Value = "15% Pe";
                UtilExcel.SetFormatoCelda(ws, rowMWMin, colIniHora, rowMWMin, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowMWMin, colIniHora, rowMWMin, colIniHora, colorLineaDefecto);

                int colIniEquipo = colIniHora + 1;
                int colFinEquipo;

                for (int j = 0; j < listaReptHoja.Count; j++)
                {
                    var thCentral = listaReptHoja[j];

                    colFinEquipo = colIniEquipo;
                    ws.Cells[rowIniEmp, colIniEquipo].Value = thCentral.Emprnomb;
                    UtilExcel.SetFormatoCelda(ws, rowIniEmp, colIniEquipo, rowIniEmp, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEmp, colIniEquipo, rowIniEmp, colIniEquipo, colorLineaDefecto);

                    ws.Cells[rowIniDespacho, colIniEquipo].Value = thCentral.Gruponomb;
                    UtilExcel.SetFormatoCelda(ws, rowIniDespacho, colIniEquipo, rowIniDespacho, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniDespacho, colIniEquipo, rowIniDespacho, colIniEquipo, colorLineaDefecto);

                    ws.Cells[rowIniEquipo, colIniEquipo].Value = thCentral.Central;
                    UtilExcel.SetFormatoCelda(ws, rowIniEquipo, colIniEquipo, rowIniEquipo, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEquipo, colIniEquipo, rowIniEquipo, colIniEquipo, colorLineaDefecto);

                    ws.Cells[rowPe, colIniEquipo].Value = thCentral.Itotpe;
                    UtilExcel.SetFormatoCelda(ws, rowPe, colIniEquipo, rowPe, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowPe, colIniEquipo, rowPe, colIniEquipo, colorLineaDefecto);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowPe, colIniEquipo, rowPe, colIniEquipo, 3);

                    ws.Cells[rowMWMin, colIniEquipo].Value = thCentral.Itotpe * 0.15m;
                    UtilExcel.SetFormatoCelda(ws, rowMWMin, colIniEquipo, rowMWMin, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowMWMin, colIniEquipo, rowMWMin, colIniEquipo, colorLineaDefecto);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowMWMin, colIniEquipo, rowMWMin, colIniEquipo, 3);

                    colIniEquipo = colFinEquipo + 1;
                }

                #endregion

                int rowIniData = rowMWMin + 1;
                row = rowIniData;

                #region cuerpo

                decimal? valor;
                int numDia = 0;
                int numBloqueXDia = paramHPyHFP.HFinHP - paramHPyHFP.HIniHP + 1;

                int colData;
                for (var day = fecha1.Date; day.Date <= fecha2.Date; day = day.AddDays(1))
                {
                    var dataXDia = data.Where(x => x.Medifecha == day).ToList();
                    numDia++;


                    for (int h = paramHPyHFP.HIniHP; h <= paramHPyHFP.HFinHP; h++)
                    {
                        //HORA
                        DateTime horas = day.AddMinutes(30 * h);

                        colData = colIniHora + 1;

                        ws.Cells[row, colIniFecha].Value = horas.ToString(ConstantesAppServicio.FormatoFecha);
                        ws.Cells[row, colIniHora].Value = horas.ToString(ConstantesAppServicio.FormatoOnlyHora);

                        if (h >= paramHPyHFP.HIniHP && h <= paramHPyHFP.HFinHP)
                        {
                            foreach (var pto in listaReptHoja)
                            {
                                MeMedicion48DTO regpotActiva = dataXDia.Find(x => x.Equipadre == pto.Equipadre);
                                valor = regpotActiva != null ? (decimal?)regpotActiva.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(regpotActiva, null) : null;
                                if (valor.GetValueOrDefault(0) > 0) ws.Cells[row, colData].Value = valor;
                                colData++;
                            }
                        }

                        row++;
                    }
                }

                ///Fecha
                ws.Cells[rowIniData, colIniFecha, rowIniData + numDia * numBloqueXDia, colIniHora].Style.Font.Bold = true;
                ws.Cells[rowIniData, colIniFecha, rowIniData + numDia * numBloqueXDia, colIniHora].Style.Font.Size = 10;
                ws.Cells[rowIniData, colIniFecha, rowIniData + numDia * numBloqueXDia, colIniHora].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[rowIniData, colIniFecha, rowIniData + numDia * numBloqueXDia, colIniHora].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                colData = colIniHora + listaReptHoja.Count;
                using (var range = ws.Cells[rowIniData, colIniHora + 1, rowIniData + numDia * numBloqueXDia + 1, colData])
                {
                    range.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    range.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    range.Style.Font.Size = 10;
                    range.Style.Numberformat.Format = "#,##0.000";
                }

                //mostrar lineas horas
                for (int c = colIniHora - 1; c <= colData; c++)
                {
                    for (int f = rowIniData; f < rowIniData + numDia * numBloqueXDia; f += numBloqueXDia)
                    {
                        ws.Cells[f, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        ws.Cells[f, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                        ws.Cells[f, c].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        ws.Cells[f, c].Style.Border.Top.Color.SetColor(Color.Blue);

                        ws.Cells[f + numBloqueXDia - 1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        ws.Cells[f + numBloqueXDia - 1, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                        ws.Cells[f + numBloqueXDia - 1, c].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        ws.Cells[f + numBloqueXDia - 1, c].Style.Border.Bottom.Color.SetColor(Color.Blue);

                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Border.Left.Color.SetColor(Color.Blue);
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Border.Right.Color.SetColor(Color.Blue);
                    }
                }

                //Formato de Filas y columnas
                for (int columna = colIniHora + 1; columna <= colData; columna++)
                    ws.Column(columna).Width = 14;

                ws.Column(colIniFecha).Width = 11;
                ws.Column(colIniHora).Width = 9;
                ws.Row(rowIniNombreReporte).Height = 30;
                ws.Row(rowIniEmp).Height = 40;
                ws.Row(rowIniEquipo).Height = 57;
                //ws.Row(rowPe).Height = 57;
                ws.Row(rowMWMin).Height = 40;

                ws.View.FreezePanes(rowMWMin + 1, colIniHora + 1);
                ws.View.ZoomScale = 100;

                #endregion
            }

            ws.View.ZoomScale = 85;
        }

        /// <summary>
        /// Medidores cuadro 
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="fecha1"></param>
        /// <param name="fecha2"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="data"></param>
        /// <param name="paramHPyHFP"></param>
        private void GeneraRptRegistroMedidores96(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni, DateTime fecha1, DateTime fecha2
                                                    , List<IndReporteTotalDTO> listaReptHoja, List<MeMedicion96DTO> data, SiParametroValorDTO paramHPyHFP)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            string colorLineaDefecto = "#000000";
            string colorCeldaFondoCabecera = "#FFFFFF";
            string colorCeldaTextoCabecera = "#000000";
            string font = "Calibri";

            int row = rowIni + 1;
            int col = colIni;

            //
            if (listaReptHoja.Any())
            {
                #region cabecera

                int rowIniNombreReporte = rowIni;
                /// Fila Hora - Empresa - Total

                int colIniFecha = col;
                int colIniHora = colIniFecha + 1;
                int rowIniFecha = row;
                int rowFinFecha = rowIniFecha + 4 - 1;

                int rowIniEmp = rowIniFecha;
                int rowIniEquipo = rowIniEmp + 1;
                int rowPe = rowIniEquipo + 1;
                int rowMWMin = rowPe + 1;

                ws.Cells[rowIniFecha, colIniFecha].Value = "FECHA";
                UtilExcel.CeldasExcelAgrupar(ws, rowIniFecha, colIniFecha, rowFinFecha, colIniFecha);
                UtilExcel.SetFormatoCelda(ws, rowIniFecha, colIniFecha, rowFinFecha, colIniFecha, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniFecha, colIniFecha, rowFinFecha, colIniFecha, colorLineaDefecto);

                ws.Cells[rowIniFecha, colIniHora].Value = "EMPRESA";
                UtilExcel.SetFormatoCelda(ws, rowIniFecha, colIniHora, rowIniFecha, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniFecha, colIniHora, rowIniFecha, colIniHora, colorLineaDefecto);

                ws.Cells[rowIniEquipo, colIniHora].Value = "CENTRAL";
                UtilExcel.SetFormatoCelda(ws, rowIniEquipo, colIniHora, rowIniEquipo, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEquipo, colIniHora, rowIniEquipo, colIniHora, colorLineaDefecto);

                ws.Cells[rowPe, colIniHora].Value = "Pe";
                UtilExcel.SetFormatoCelda(ws, rowPe, colIniHora, rowPe, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowPe, colIniHora, rowPe, colIniHora, colorLineaDefecto);

                ws.Cells[rowMWMin, colIniHora].Value = "15% Pe";
                UtilExcel.SetFormatoCelda(ws, rowMWMin, colIniHora, rowMWMin, colIniHora, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, true, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowMWMin, colIniHora, rowMWMin, colIniHora, colorLineaDefecto);

                int colIniEquipo = colIniHora + 1;
                int colFinEquipo;

                for (int j = 0; j < listaReptHoja.Count; j++)
                {
                    var thCentral = listaReptHoja[j];

                    colFinEquipo = colIniEquipo;
                    ws.Cells[rowIniEmp, colIniEquipo].Value = thCentral.Emprnomb;
                    UtilExcel.SetFormatoCelda(ws, rowIniEmp, colIniEquipo, rowIniEmp, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEmp, colIniEquipo, rowIniEmp, colIniEquipo, colorLineaDefecto);

                    ws.Cells[rowIniEquipo, colIniEquipo].Value = thCentral.Central;
                    UtilExcel.SetFormatoCelda(ws, rowIniEquipo, colIniEquipo, rowIniEquipo, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniEquipo, colIniEquipo, rowIniEquipo, colIniEquipo, colorLineaDefecto);

                    ws.Cells[rowPe, colIniEquipo].Value = thCentral.Itotpe;
                    UtilExcel.SetFormatoCelda(ws, rowPe, colIniEquipo, rowPe, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowPe, colIniEquipo, rowPe, colIniEquipo, colorLineaDefecto);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowPe, colIniEquipo, rowPe, colIniEquipo, 3);

                    ws.Cells[rowMWMin, colIniEquipo].Value = thCentral.Itotpe * 0.15m;
                    UtilExcel.SetFormatoCelda(ws, rowMWMin, colIniEquipo, rowMWMin, colIniEquipo, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 10, false, true);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowMWMin, colIniEquipo, rowMWMin, colIniEquipo, colorLineaDefecto);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowMWMin, colIniEquipo, rowMWMin, colIniEquipo, 3);

                    colIniEquipo = colFinEquipo + 1;
                }

                #endregion

                int rowIniData = rowMWMin + 1;
                row = rowIniData;

                #region cuerpo

                decimal? valor;
                int numDia = 0;
                int numBloqueXDia = paramHPyHFP.HFinHP - paramHPyHFP.HIniHP + 1;

                int colData;
                for (var day = fecha1.Date; day.Date <= fecha2.Date; day = day.AddDays(1))
                {
                    var dataXDia = data.Where(x => x.Medifecha == day).ToList();
                    numDia++;


                    for (int h = paramHPyHFP.HIniHP; h <= paramHPyHFP.HFinHP; h++)
                    {
                        //HORA
                        DateTime horas = day.AddMinutes(15 * h);

                        colData = colIniHora + 1;

                        ws.Cells[row, colIniFecha].Value = horas.ToString(ConstantesAppServicio.FormatoFecha);
                        ws.Cells[row, colIniHora].Value = horas.ToString(ConstantesAppServicio.FormatoOnlyHora);

                        if (h >= paramHPyHFP.HIniHP && h <= paramHPyHFP.HFinHP)
                        {
                            foreach (var pto in listaReptHoja)
                            {
                                MeMedicion96DTO regpotActiva = dataXDia.Find(x => x.Equipadre == pto.Equipadre);
                                valor = regpotActiva != null ? (decimal?)regpotActiva.GetType().GetProperty(ConstantesAppServicio.CaracterH + h).GetValue(regpotActiva, null) : null;
                                if (valor.GetValueOrDefault(0) > 0) ws.Cells[row, colData].Value = valor;
                                colData++;
                            }
                        }

                        row++;
                    }
                }

                ///Fecha
                ws.Cells[rowIniData, colIniFecha, rowIniData + numDia * 96, colIniHora].Style.Font.Bold = true;
                ws.Cells[rowIniData, colIniFecha, rowIniData + numDia * 96, colIniHora].Style.Font.Size = 10;
                ws.Cells[rowIniData, colIniFecha, rowIniData + numDia * 96, colIniHora].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                ws.Cells[rowIniData, colIniFecha, rowIniData + numDia * 96, colIniHora].Style.VerticalAlignment = ExcelVerticalAlignment.Center;

                colData = colIniHora + listaReptHoja.Count;
                using (var range = ws.Cells[rowIniData, colIniHora + 1, rowIniData + numDia * numBloqueXDia + 1, colData])
                {
                    range.Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                    range.Style.VerticalAlignment = ExcelVerticalAlignment.Center;
                    range.Style.Font.Size = 10;
                    range.Style.Numberformat.Format = "#,##0.000";
                }

                //mostrar lineas horas
                for (int c = colIniHora - 1; c <= colData; c++)
                {
                    for (int f = rowIniData; f < rowIniData + numDia * numBloqueXDia; f += numBloqueXDia)
                    {
                        ws.Cells[f, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        ws.Cells[f, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                        ws.Cells[f, c].Style.Border.Top.Style = ExcelBorderStyle.Thin;
                        ws.Cells[f, c].Style.Border.Top.Color.SetColor(Color.Blue);

                        ws.Cells[f + numBloqueXDia - 1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        ws.Cells[f + numBloqueXDia - 1, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                        ws.Cells[f + numBloqueXDia - 1, c].Style.Border.Bottom.Style = ExcelBorderStyle.Thin;
                        ws.Cells[f + numBloqueXDia - 1, c].Style.Border.Bottom.Color.SetColor(Color.Blue);

                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Fill.PatternType = ExcelFillStyle.Solid;
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Fill.BackgroundColor.SetColor(Color.White);
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Border.Left.Style = ExcelBorderStyle.Thin;
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Border.Left.Color.SetColor(Color.Blue);
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Border.Right.Style = ExcelBorderStyle.Thin;
                        ws.Cells[f, c, f + numBloqueXDia - 1, c].Style.Border.Right.Color.SetColor(Color.Blue);
                    }
                }

                //Formato de Filas y columnas
                for (int columna = colIniHora + 1; columna <= colData; columna++)
                    ws.Column(columna).Width = 14;

                ws.Column(colIniFecha).Width = 11;
                ws.Column(colIniHora).Width = 9;
                ws.Row(rowIniNombreReporte).Height = 30;
                ws.Row(rowIniEmp).Height = 40;
                ws.Row(rowIniEquipo).Height = 57;
                //ws.Row(rowPe).Height = 57;
                ws.Row(rowMWMin).Height = 40;

                ws.View.FreezePanes(rowMWMin + 1, colIniHora + 1);
                ws.View.ZoomScale = 100;

                #endregion
            }

            ws.View.ZoomScale = 85;
        }

        private void SetearCentralConjuntoCuadro5(IndRecalculoDTO regRecalculo, ref List<IndReporteTotalDTO> listaReptotOut, out List<string> listaMensajeNota)
        {
            listaMensajeNota = new List<string>();

            if (regRecalculo.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoPrimeraQuincena)
            {
                foreach (var reg in listaReptotOut)
                {
                    reg.TieneCentralConjunto = listaReptotOut.Count(x => x.Grupocodi == reg.Grupocodi) >= 2;
                }

                var listaConj = listaReptotOut.GroupBy(x => x.Grupocodi).Where(x => x.Count() >= 2)
                                    .Select(x => new PrGrupoDTO() { Grupocodi = x.Key ?? 0, Gruponomb = string.Join(",", x.Select(y => y.Central)) }).ToList();

                //string slistaCentrales = string.Join(", ", listaReptotOut.Where(x => x.TieneCentralConjunto).Select(x => x.Central));
                if (listaConj.Any())
                {
                    listaMensajeNota.Add("Disponibilidad Diaria calculada con el despacho ejecutado conjunto de las centrales:");
                    foreach (var cent in listaConj)
                        listaMensajeNota.Add(" -" + cent.Gruponomb);
                    listaMensajeNota.Add("Los valores finales de cada una de ellas serán determinadas con medidores de generación.");
                }
            }
        }

        #endregion

        #region Edición de Handson

        public int GuardarCambiosHandsonCuadro5(int icuacodi, int irecacodi, string usuario, int irptcodi, List<IndReporteDetDTO> listaDataCambio)
        {
            List<IndReporteDetDTO> listaRepdet = GetByCriteriaIndReporteDets(irptcodi);
            List<IndReporteTotalDTO> listaRepTot = GetByCriteriaIndReporteTotals(irptcodi).Where(x => x.Itotopcom == ConstantesAppServicio.SI).ToList();

            foreach (var regCambio in listaDataCambio)
            {
                //buscar por central y dia
                var regDet = listaRepdet.Find(x => x.Equicodi == regCambio.Equicodi && x.Idethoraini == regCambio.Idethoraini);

                if (regDet != null && regDet.Idettienedisp != regCambio.Idettienedisp)
                {
                    regDet.Idettienedisp = regCambio.Idettienedisp;
                    regDet.Idetjustf = regCambio.Idetjustf;
                    regDet.Idettipocambio = "U";
                    regDet.Idetcodiold = regDet.Idetcodi;
                    //agregar campo Conservarvalor - Assetec (RAC)
                    regDet.Idetconsval = regCambio.Idetconsval;

                }
            }

            //
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(icuacodi);
            //Guardar
            IndReporteDTO regOld = GetByIdIndReporte(irptcodi);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = icuacodi,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = regOld.Irpttiempo,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A",
                Irptreporteold = irptcodi
            };
            CambiarAEstadoHistorico(icuacodi, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
            regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

            ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
            regSaveBD.Reporte = regReporte;
            regSaveBD.ListaRptTot = listaRepTot;
            regSaveBD.ListaRptDet = listaRepdet;

            var irptcodiResult = this.GuardarReporteIndispBDTransaccional(regSaveBD);

            return irptcodiResult;
        }

        public List<IndReporteDetDTO> ListarCambiosCuadro5(List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdet, List<IndReporteDetDTO> listaRepdetOld)
        {
            //para cuadro 5 solo tiene actualizaciones
            var listaCambios = listaRepdet.Where(x => x.Idettipocambio != null && x.Idettipocambio.Length == 1).ToList();

            foreach (var regCambio in listaCambios)
            {
                IndReporteTotalDTO regTot = listaReptHoja.Find(x => x.Itotcodi == regCambio.Itotcodi);
                IndReporteDetDTO regOld = listaRepdetOld.Find(x => x.Idetcodi == regCambio.Idetcodiold);

                regCambio.Emprnomb = regTot.Emprnomb;
                regCambio.Central = regTot.Central;
                regCambio.IdethorainiDesc = regCambio.Idethoraini.Value.ToString(ConstantesAppServicio.FormatoFecha);
                regCambio.Idettienedispold = regOld?.Idettienedisp;
                regCambio.Idettienedisp = regCambio.Idettienedisp;
                regCambio.Idetjustf = regCambio.Idetjustf;
                regCambio.UltimaModificacionUsuarioDesc = "";
                regCambio.UltimaModificacionFechaDesc = "";
                regCambio.Tipocambio = GetDescripcionCambio(regCambio.Idettipocambio);
            }

            return listaCambios;
        }

        public string GenerarHtmlListadoCambios5(List<IndReporteDetDTO> listaCambios)
        {
            if (!listaCambios.Any())
                return string.Empty;

            StringBuilder strHtml = new StringBuilder();

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_cambios'>
                        <thead>
                            <tr>
                                <th>Tipo Cambio</th>
                                <th>Empresa</th>
                                <th>Central</th>
                                <th>Fecha</th>

                                <th>Disponibilidad <br />Original</th>
                                <th>Disponibilidad<br />Modificado</th>

                                <th>Justificación</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            foreach (var reg in listaCambios)
            {
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>
                                        <td style=';'>{2}</td>
                                        <td style=''>{3}</td>

                                        <td style=';'>{4}</td>
                                        <td style=';'>{5}</td>
                                        <td style='' >{6}</td>
                                        <td style='' >{7}</td>
                                    </tr>
                                    "
                                , ""
                                , reg.Tipocambio
                                , reg.Emprnomb
                                , reg.Central

                                , reg.IdethorainiDesc
                                , reg.Idettienedispold
                                , reg.Idettienedisp
                                , reg.Idetjustf
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        #endregion

        #endregion

        #region Calculo Limitación de disponibilidad de combustible

        /// <summary>
        /// Lista la potencia asegurada y efectiva por día de las unidades de generación
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaBloqueHorario"></param>
        /// <param name="lEgenerableMes"></param>
        /// <param name="listaMsj"></param>
        public void ListarEnergiaGenerableDiaria(DateTime fechaIni, DateTime fechaFin, List<SiParametroValorDTO> listaBloqueHorario
                                            , out List<CalculoEgenerable> lEgenerableMes, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            listaMsj = new List<ResultadoValidacionAplicativo>();

            //Obtener data de Unidades de Operación y sus Modos de Operación
            this.ListarUnidadTermicoOpComercial(ConstantesIndisponibilidades.AppPR25, fechaIni, fechaFin, out List<EqEquipoDTO> listaUnidadTermico, out List<EqEquipoDTO> listaEqSiOpComercial, out List<ResultadoValidacionAplicativo> listaMsjUni);
            this.ListarModoOperacionPe(fechaIni, fechaFin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);
            listaMsj.AddRange(listaMsjUni);
            //listaMsj.AddRange(listaMsjModo);

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();
            List<EqEquipoDTO> listaEqGen = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            List<EqEquipoDTO> listaEqCentral = listaEqSiOpComercial.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            listaGrupoModo = SetearEquiposToModoOperacion(listaGrupoModo, listaGrupo, listaEqCentral, listaEqGen);

            //obtener curva de consumo de combustible de los modos de operación
            var listaGrupodat = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodisCurvaCombModo);
            listaGrupodat = ActualizarDatGrupoModoCaracteristicaAdicional(listaGrupodat);

            //obtener curva de consumo de combustible de las Unidades especiales
            var listaEquipoval = ListarPrGrupoEquipoValHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodisCurvaCombModo);

            //gaseoductos
            List<IndGaseoductoxcentralDTO> listaGaseoductos = ListIndGaseoductoxcentrals();
            List<int> listaEquicodiGasoducto = listaGaseoductos.Select(x => x.Gaseoductoequicodi).Distinct().ToList();
            List<int> listaEquipadreGasoducto = listaGaseoductos.Select(x => x.Equicodi).Distinct().ToList();

            //Obtener data de Registro de Contrato Combustible
            //Inicio: IND.PR25.2022
            //this.ListarContratoCombustiblePorRangoFecha(fechaIni, fechaFin, "-1"
            //                                    , out List<CombustibleContrato> listaUnidadGasLiquido, out List<CombustibleContrato> listaContratoCombustible
            //                                    , out List<ResultadoValidacionAplicativo> listaMsj5);
            this.ListarContratoCombustiblePorRangoFechaIndisponibilidad(fechaIni, fechaFin, "-1"
                                                , out List<CombustibleContrato> listaUnidadGasLiquido, out List<CombustibleContrato> listaContratoCombustible
                                                , out List<ResultadoValidacionAplicativo> listaMsj5);

            listaMsj.AddRange(listaMsj5);

            listaContratoCombustible = UniformizarSIListaCombustible(listaContratoCombustible);

            //Procesar por día
            //Obtener la potencia generable por cada combustible de la unidad
            lEgenerableMes = new List<CalculoEgenerable>();
            listaUnidadTermico = listaUnidadTermico.Where(x => x.Grupoincremental != 1).ToList();
            for (var f = fechaIni.Date; f <= fechaFin.Date; f = f.AddDays(1))
            {
                //parámetros de hora punta vigente para la fecha de consulta
                SiParametroValorDTO paramHPyHFP = ParametroAppServicio.GetParametroVigenteHPyHFPXResolucion(listaBloqueHorario, f, ParametrosFormato.ResolucionCuartoHora);

                List<ConsumoHorarioCombustible> listaCurvaXDia = ListarCurvaConsumoXDia(f, listaGrupoModo.Where(x => !x.TieneModoEspecial).ToList()
                                                                            , listaUnidadTermico.Where(x => x.EsUnidadModoEspecial).ToList()
                                                                            , listaGrupodat, listaEquipoval);

                //Obtener el Rendimiento por cada Unidad Termoelectrica para tener la prioridad cuando se distribuye el combustible
                SetRendimientoAUnidadesTermicas(f, listaUnidadTermico, listaGrupodat, listaEquipoval);
                listaUnidadTermico = listaUnidadTermico.OrderByDescending(x => x.Rendimiento).ToList();

                List<EqEquipoDTO> listaUnidadConGasoducto = listaUnidadTermico.Where(x => listaEquipadreGasoducto.Contains(x.Equipadre.Value)).ToList();

                //CCDF/T (MMPCD), CCDF/D (MMPCD), SUGAD (MMPCD)
                foreach (var gaseoductoequicodi in listaEquicodiGasoducto)
                {
                    if (gaseoductoequicodi == 16985) //egesur
                    { }
                    List<int> listaEquipadreXGasoducto = listaGaseoductos.Where(x => x.Gaseoductoequicodi == gaseoductoequicodi).Select(x => x.Equicodi).Distinct().ToList();

                    List<EqEquipoDTO> listaUnidadXGasoducto = listaUnidadConGasoducto.Where(x => listaEquipadreXGasoducto.Contains(x.Equipadre.Value)).ToList();

                    List<CombustibleContrato> listaContratoCombustibleXGasoducto = listaContratoCombustible.Where(x => x.CbctrtFechaDia == f
                                                                                        && listaEquipadreXGasoducto.Contains(x.Equipadre)).ToList();

                    //solo calcular generable si existe data en Stock combustible programado
                    if (listaContratoCombustibleXGasoducto.Any())
                    {
                        var listaEgenerableXDia = this.ListarEGenerableXUnidad(f, listaUnidadXGasoducto, listaEqGen, listaGrupoModo, listaContratoCombustibleXGasoducto, listaCurvaXDia, paramHPyHFP);
                        lEgenerableMes.AddRange(listaEgenerableXDia);
                    }
                }

                //lista de unidades que no pertenecen a los gasoductos
                List<EqEquipoDTO> listaUnidadSinGasoducto = listaUnidadTermico.Where(x => !listaEquipadreGasoducto.Contains(x.Equipadre.Value)).ToList();
                List<int> listaEquipadreSinGasoducto = listaUnidadSinGasoducto.Select(x => x.Equipadre ?? 0).Distinct().ToList();

                foreach (var equipadre in listaEquipadreSinGasoducto)
                {
                    if (equipadre == 15107) //callao
                    { }

                    List<EqEquipoDTO> listaUnidadXCentral = listaUnidadSinGasoducto.Where(x => x.Equipadre.Value == equipadre).ToList();

                    List<CombustibleContrato> listaContratoCombustibleXCentral = listaContratoCombustible.Where(x => x.CbctrtFechaDia == f
                                                                                        && x.Equipadre == equipadre).ToList();
                    //solo calcular generable si existe data en Stock combustible programado
                    if (listaContratoCombustibleXCentral.Any())
                    {
                        var listaEgenerableXDia = this.ListarEGenerableXUnidad(f, listaUnidadXCentral, listaEqGen, listaGrupoModo, listaContratoCombustibleXCentral, listaCurvaXDia, paramHPyHFP);
                        lEgenerableMes.AddRange(listaEgenerableXDia);
                    }
                }
            }
        }

        private List<CombustibleContrato> UniformizarSIListaCombustible(List<CombustibleContrato> listaContratoCombustible)
        {
            List<int> ltinfocodi = new List<int>() { 44, 45, 43, 47 };

            foreach (var reg in listaContratoCombustible)
            {
                if (ltinfocodi.Contains(reg.Tipoinfocodi))  //galones
                {
                    //Convertir galons a litros
                    //reg.Valor = reg.Valor.GetValueOrDefault(0) * 0.00378541m;
                }

                if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas)
                {
                    if (reg.Tipoinfocodi == 46) //Millones de metros cubicos
                    {
                        reg.Valor = reg.Valor.GetValueOrDefault(0) * 1000.0m;
                    }
                }
            }

            return listaContratoCombustible;
        }

        private void SetRendimientoAUnidadesTermicas(DateTime fechaDia, List<EqEquipoDTO> listaUnidadTermico, List<PrGrupodatDTO> listaDatosRendXModo, List<PrGrupoEquipoValDTO> listaDatosRendXUnidadEspecial)
        {
            foreach (var regUnidad in listaUnidadTermico)
            {
                regUnidad.Rendimiento = GetRendimientoXUnidad(regUnidad.Equicodi, regUnidad.Grupocodi, regUnidad.EsUnidadModoEspecial, fechaDia, listaDatosRendXModo, listaDatosRendXUnidadEspecial) ?? 0;
            }
        }

        /// <summary>
        /// obtener calculo por gasoducto
        /// </summary>
        /// <param name="fechaDia"></param>
        /// <param name="listaUnidadCompartenGasoducto"></param>
        /// <param name="listaEqGen"></param>
        /// <param name="listaGrupoModo"></param>
        /// <param name="listaSucadXUnidad"></param>
        /// <param name="listaCurvaXDia"></param>
        /// <param name="paramHPyHFP"></param>
        /// <returns></returns>
        private List<CalculoEgenerable> ListarEGenerableXUnidad(DateTime fechaDia, List<EqEquipoDTO> listaUnidadCompartenGasoducto
                                                , List<EqEquipoDTO> listaEqGen, List<PrGrupoDTO> listaGrupoModo
                                                , List<CombustibleContrato> listaSucadXUnidad, List<ConsumoHorarioCombustible> listaCurvaXDia, SiParametroValorDTO paramHPyHFP)
        {
            List<CalculoEgenerable> listaFinal = new List<CalculoEgenerable>();

            //setear rendimiento a la unidad
            listaUnidadCompartenGasoducto = listaUnidadCompartenGasoducto.OrderByDescending(x => x.Rendimiento).ToList();

            foreach (EqEquipoDTO regUnidadPri in listaUnidadCompartenGasoducto)
            {
                var objCalculo = new CalculoEgenerable();
                objCalculo.FechaDia = fechaDia;
                objCalculo.Unidad = regUnidadPri;

                List<EqEquipoDTO> listaAllUnidad = new List<EqEquipoDTO>();
                listaAllUnidad.Add(regUnidadPri);
                listaAllUnidad.AddRange(ListarUnidadSecundaria(regUnidadPri, listaGrupoModo, listaEqGen));

                int tminPlenaCarga = paramHPyHFP.TotalHorasHP;
                decimal peUsado = regUnidadPri.Pe.GetValueOrDefault(0);
                foreach (var obj in listaAllUnidad)
                {
                    if (peUsado > 0)
                    {
                        //obtener la cantidad de horas en punta y fuera de punta
                        int tminMinimaCarga = 0;
                        if (obj.Tminoperacion > paramHPyHFP.TotalHorasHP)
                        {
                            tminMinimaCarga = obj.Tminoperacion > 24 ? 24 - tminPlenaCarga : obj.Tminoperacion - tminPlenaCarga;
                        }

                        //informacion de base de datos
                        decimal combustibleMinimaCarga = 0, combustiblePlenaCarga = 0, combustibleTotal = 0, eGenerable = 0, combustibleRestante = 0;
                        ConsumoHorarioCombustible curvaUnidad = listaCurvaXDia.Find(x => x.Grupocodi == obj.Grupocodi);
                        if (curvaUnidad != null)
                        {
                            combustibleMinimaCarga = GetConsumoXHoraFromCurva(tminMinimaCarga, obj.Pmin ?? 0, curvaUnidad);
                            combustiblePlenaCarga = GetConsumoXHoraFromCurva(tminPlenaCarga, obj.Pe ?? 0, curvaUnidad);

                            //Primero, el Combustible Disponible Total debe garantizar la Energía a Mínima Generación del tiempo restante para cumplir el TMO.
                            //Segundo, el Combustible Restante para el cálculo de la máxima energía = Combustible Disponible Total - Combustible consumido en horas fuera de punta
                            combustibleTotal = (listaSucadXUnidad.Find(x => x.Fenergcodi == obj.Fenergcodi)?.Valor) ?? 0;
                            eGenerable = 0;

                            if (combustibleTotal > 0)
                            {
                                combustibleRestante = combustibleTotal - combustibleMinimaCarga;

                                //Tercero, La Egenerable es la energía que se puede generar con el combustible Restante.
                                if (combustibleRestante > 0)
                                {
                                    //* Si el combustible disponible es mayor al consumido
                                    if (combustibleRestante > combustiblePlenaCarga)
                                        eGenerable = obj.Pe.GetValueOrDefault(0) * tminPlenaCarga;
                                    else
                                    {
                                        //* Si el combustible disponible es menor al consumido
                                        var potenciaDisp = GetPotenciaFromCurva(1, combustibleRestante / tminPlenaCarga, curvaUnidad);
                                        if (potenciaDisp < 0) potenciaDisp = 0;
                                        eGenerable = potenciaDisp * tminPlenaCarga;
                                    }

                                    peUsado -= eGenerable / tminPlenaCarga;
                                }
                            }
                        }

                        objCalculo.ListaDetalle.Add(new DetalleEgenerable()
                        {
                            TminPlenaCarga = tminPlenaCarga,
                            TminMinimaCarga = tminMinimaCarga,
                            EnergiaGenerable = eGenerable,
                            CombustibleTotal = combustibleTotal,
                            CombustibleRestante = combustibleRestante,
                            CombustibleMinimaCarga = combustibleMinimaCarga,
                            CombustiblePlenaCarga = combustiblePlenaCarga,
                            Fenergcodi = obj.Fenergcodi
                        });
                    }
                }

                if (peUsado <= 0)
                {
                    objCalculo.Egenerable = regUnidadPri.Pe.GetValueOrDefault(0) * tminPlenaCarga;
                }
                else
                {
                    objCalculo.Egenerable = (regUnidadPri.Pe.GetValueOrDefault(0) - peUsado) * tminPlenaCarga;
                }

                listaFinal.Add(objCalculo);
            }

            return listaFinal;
        }

        private decimal GetConsumoXHoraFromCurva(decimal numHoras, decimal potenciaEvaluar, ConsumoHorarioCombustible regCurva)
        {
            if (regCurva != null && regCurva.PendienteM01 != 0)
                return (potenciaEvaluar * decimal.Round(regCurva.PendienteM01, 4) + decimal.Round(regCurva.CoeficienteIndependiente, 4)) * numHoras;

            return 0;
        }

        private decimal GetPotenciaFromCurva(decimal numHoras, decimal consumoEvaluar, ConsumoHorarioCombustible regCurva)
        {
            if (regCurva != null && regCurva.PendienteM01 != 0)
                return ((consumoEvaluar / numHoras) - decimal.Round(regCurva.CoeficienteIndependiente, 4)) / decimal.Round(regCurva.PendienteM01, 4);

            return 0;
        }

        public static List<EqEquipoDTO> ListarUnidadSecundaria(EqEquipoDTO regUnidad, List<PrGrupoDTO> listaModo, List<EqEquipoDTO> listaEqGen)
        {
            List<EqEquipoDTO> listaUnidadSec = new List<EqEquipoDTO>();

            if (regUnidad.ListaFuenteEnergia.Count >= 2)
            {
                SiFuenteenergiaDTO regFenerSec = regUnidad.ListaFuenteEnergia[1];
                List<PrGrupoDTO> listaModoXCentral = listaModo.Where(x => x.Fenergcodi == regFenerSec.Fenergcodi && x.Equipadre == regUnidad.Equipadre)
                                                    .OrderByDescending(x => x.Potencia).ToList();

                List<int> listaEquicodiXUnidad = regUnidad.ListaEquicodi;
                foreach (var regModo in listaModoXCentral)
                {
                    if (regModo.ListaEquicodi.All(x => listaEquicodiXUnidad.Contains(x))
                        || (regModo.TieneModoEspecial && regModo.ListaEquicodi.Any(x => listaEquicodiXUnidad.Contains(x))))
                    {
                        List<int> listaEquicodiSec = listaEquicodiXUnidad.Where(x => regModo.ListaEquicodi.Contains(x)).ToList();
                        listaEquicodiXUnidad = listaEquicodiXUnidad.Where(x => !regModo.ListaEquicodi.Contains(x)).ToList();

                        EqEquipoDTO reg = new EqEquipoDTO();
                        reg.Pe = regModo.Potencia;
                        reg.Pmin = regModo.PotenciaMinima;
                        reg.FechaVigencia = regModo.FechaVigencia;
                        reg.Rsf = regModo.RsfDefecto;
                        reg.FechaVigenciaRsf = regModo.FechaVigenciaRsfDefecto;
                        reg.Grupocodi = regModo.Grupocodi;
                        reg.Gruponomb = regModo.Gruponomb;
                        reg.Equipadre = regModo.Equipadre;
                        reg.Central = regModo.Central;
                        reg.Emprnomb = regModo.Emprnomb;
                        reg.Emprcodi = regModo.Emprcodi;
                        reg.Equicodi = listaEquicodiSec.Count > 1 ? regModo.Equipadre : listaEquicodiSec.First();
                        reg.ListaEquicodi = listaEquicodiSec;
                        reg.Grupopadre = regModo.Grupopadre ?? 0; //Código del grupo térmico TV del modo de operación
                        reg.TieneCicloComb = regModo.TieneModoCicloCombinado;
                        reg.EsUnidadModoEspecial = regModo.TieneModoEspecial;
                        reg.Fenergcodi = regModo.Fenergcodi ?? 0;
                        reg.Fenergnomb = regModo.Fenergnomb;
                        reg.EsUnaUnidadXCentral = listaEqGen.Where(x => x.Equipadre == reg.Equipadre).Count() == 1;
                        reg.Famcodi = reg.Equipadre == reg.Equicodi ? ConstantesHorasOperacion.IdTipoTermica : ConstantesHorasOperacion.IdGeneradorTemoelectrico;

                        if (reg.Famcodi == ConstantesHorasOperacion.IdTipoTermica)
                        {
                            reg.Equiabrev = "CENTRAL";
                            reg.Equinomb = "CENTRAL";
                        }
                        else
                        {
                            var regEqGen = listaEqGen.Find(x => x.Equicodi == reg.Equicodi);
                            if (regEqGen != null)
                            {
                                reg.Equiabrev = regEqGen.Equiabrev;
                                reg.Equinomb = regEqGen.Equinomb;
                            }
                        }

                        listaUnidadSec.Add(reg);
                    }
                }
            }

            return listaUnidadSec;
        }

        private decimal? GetRendimientoXUnidad(int? equicodi, int? grupocodi, bool esUnidadModoEspecial, DateTime fechaDia
                                                , List<PrGrupodatDTO> listaGrupodat, List<PrGrupoEquipoValDTO> listaEquipoval)
        {
            List<int> listaCnpRend = new List<int>() { ConstantesIndisponibilidades.ConcepcodiRendimiento, ConstantesIndisponibilidades.ConcepcodiRendimientoSI };

            List<PrGrupodatDTO> listaDatosRendXModo = listaGrupodat.Where(x => listaCnpRend.Contains(x.Concepcodi)).ToList();
            List<PrGrupoEquipoValDTO> listaDatosRendXUnidadEspecial = listaEquipoval.Where(x => listaCnpRend.Contains(x.Concepcodi)).ToList();

            decimal? valorRendimiento = null;
            string strRend = string.Empty;

            if (esUnidadModoEspecial)
            {
                GetValorDecimalFromListaGrupoVal2(fechaDia, grupocodi.Value, equicodi.Value, ConstantesIndisponibilidades.ConcepcodiRendimiento, listaDatosRendXUnidadEspecial, out valorRendimiento, out DateTime? fechaVigencia2);
            }
            else
            {
                GetValorDecimalFromListaGrupoDat2(fechaDia, grupocodi.Value, ConstantesIndisponibilidades.ConcepcodiRendimiento, listaDatosRendXModo, out valorRendimiento, out DateTime? fechaVigencia2);
            }

            return valorRendimiento;
        }

        /// <summary>
        /// Obtencion de los Factores de la funcion de Regresion Lineal
        /// </summary>
        /// <param name="empresa"></param>
        /// <param name="fechaDatMax"></param>
        /// <param name="listaUnidadData"></param>
        /// <param name="listaUnidXModoOP"></param>
        /// <returns></returns>
        public static List<ConsumoHorarioCombustible> ListarCurvaConsumoXDia(DateTime fechaDia, List<PrGrupoDTO> listaModoNoEsp, List<EqEquipoDTO> listaUnidadEsp
                                                , List<PrGrupodatDTO> listaDataAll, List<PrGrupoEquipoValDTO> listaPotEfectivaXEquipoAll)
        {
            List<ConsumoHorarioCombustible> listaFinal = new List<ConsumoHorarioCombustible>();

            var listaData = listaDataAll.Where(x => x.Fechadat <= fechaDia).ToList();
            var listaPotEfectivaXEquipo = listaPotEfectivaXEquipoAll.Where(x => x.Greqvafechadat <= fechaDia).ToList();

            //////////////////////////////////////////////////////////

            foreach (var regUnidad in listaModoNoEsp)
            {
                if (regUnidad.Grupocodi == 3449) 
                {
                }
                ConsumoHorarioCombustible c = INDAppServicio.ObtenerCurvaConsumo(fechaDia, regUnidad.Equicodi, regUnidad.Grupocodi, false, 1
                                                                , listaData, listaPotEfectivaXEquipo);
                c.FechaDia = fechaDia;
                c.Emprcodi = regUnidad.Emprcodi ?? 0;
                c.Emprnomb = regUnidad.Emprnomb;
                c.Grupocodi = regUnidad.Grupocodi;
                c.Gruponomb = regUnidad.Gruponomb;
                c.Equicodi = regUnidad.Equicodi;
                c.Equinomb = regUnidad.Equinomb;
                c.Equipadre = regUnidad.Equipadre;
                c.Fenergcodi = regUnidad.Fenergcodi ?? 0;

                if (c.PendienteM01 == 0) //no tienen curva pero sí potencia efectiva
                    c.Pe = c.PotEfectiva;

                listaFinal.Add(c);
            }

            foreach (var regUnidad in listaUnidadEsp)
            {
                if (regUnidad.Grupocodi == 3449)
                {
                }
                ConsumoHorarioCombustible cesp = INDAppServicio.ObtenerCurvaConsumo(fechaDia, regUnidad.Equicodi, regUnidad.Grupocodi ?? 0, true, 1
                                                                , listaData, listaPotEfectivaXEquipo);
                cesp.FechaDia = fechaDia;
                cesp.Emprcodi = regUnidad.Emprcodi ?? 0;
                cesp.Emprnomb = regUnidad.Emprnomb;
                cesp.Grupocodi = regUnidad.Grupocodi;
                cesp.Gruponomb = regUnidad.Gruponomb + " (" + regUnidad.Equiabrev + ")";
                cesp.Equipadre = regUnidad.Equipadre ?? 0;
                cesp.Fenergcodi = regUnidad.Fenergcodi;
                cesp.EsUnidadEspecial = true;

                if (cesp.PendienteM01 == 0) //no tienen curva pero sí potencia efectiva
                    cesp.Pe = cesp.PotEfectiva;

                listaFinal.Add(cesp);
            }

            return listaFinal;
        }

        public static ConsumoHorarioCombustible ObtenerCurvaConsumo(DateTime fechaPeriodo, int equicodi, int grupocodi, bool esUnidadModoEspecial, decimal factorConversion
                                                                , List<PrGrupodatDTO> listaData, List<PrGrupoEquipoValDTO> listaPotEfectivaXEquipo)
        {
            ConsumoHorarioCombustible c = new ConsumoHorarioCombustible();
            c.Grupocodi = grupocodi;
            c.Equicodi = equicodi;
            c.ListaX = new List<decimal>();
            c.ListaY = new List<decimal>();

            decimal potencia = 0, consumo = 0, correlacion = 0, puntoCorte = 0, pendiente = 0, rendimiento = 0;

            correlacion = 0;
            puntoCorte = 0;
            pendiente = 0;

            string strPotEfectiva = string.Empty;
            string strConsumoPotEfectiva = string.Empty;
            string strPotParcial1 = string.Empty;
            string strConsumoPotParcial1 = string.Empty;
            string strPotParcial2 = string.Empty;
            string strConsumoPotParcial2 = string.Empty;
            string strPotParcial3 = string.Empty;
            string strConsumoPotParcial3 = string.Empty;
            string strPotParcial4 = string.Empty;
            string strConsumoPotParcial4 = string.Empty;
            string strPotParcial5 = string.Empty;
            string strConsumoPotParcial5 = string.Empty;
            string strRendimiento = string.Empty;
            string strPotMinima = string.Empty;

            string strFechaPotEfectiva = string.Empty;
            string strFechaConsumoPotEfectiva = string.Empty;
            string strFechaPotParcial1 = string.Empty;
            string strFechaConsumoPotParcial1 = string.Empty;
            string strFechaPotParcial2 = string.Empty;
            string strFechaConsumoPotParcial2 = string.Empty;
            string strFechaPotParcial3 = string.Empty;
            string strFechaConsumoPotParcial3 = string.Empty;
            string strFechaPotParcial4 = string.Empty;
            string strFechaConsumoPotParcial4 = string.Empty;
            string strFechaPotParcial5 = string.Empty;
            string strFechaConsumoPotParcial5 = string.Empty;
            string strFechaRendimiento = string.Empty;
            string strFechaPotMinima = string.Empty;

            //Tiene unidades especiales
            if (esUnidadModoEspecial)
            {
                List<PrGrupoEquipoValDTO> listaDataEquipo = listaPotEfectivaXEquipo.Where(x => x.Grupocodi == grupocodi && x.Equicodi == equicodi && x.Greqvafechadat <= fechaPeriodo)
                                                                                    .OrderByDescending(x => x.Greqvafechadat).ToList();

                listaDataEquipo = ListarDatosFormulaDat(listaDataEquipo);

                var regPotEfectiva = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva);
                var regConsumoPotEfectiva = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotEfectiva);
                var regPotParcial1 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial1);
                var regConsumoPotParcial1 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial1);
                var regPotParcial2 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial2);
                var regConsumoPotParcial2 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial2);
                var regPotParcial3 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial3);
                var regConsumoPotParcial3 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial3);
                var regPotParcial4 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial4);
                var regConsumoPotParcial4 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial4);
                var regPotParcial5 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial5);
                var regConsumoPotParcial5 = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial5);
                var regRendimiento = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiRendimiento);
                var regPotMinima = listaDataEquipo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotMinima);

                strPotEfectiva = (regPotEfectiva != null ? regPotEfectiva.Greqvaformuladat : string.Empty);
                strConsumoPotEfectiva = (regConsumoPotEfectiva != null ? regConsumoPotEfectiva.Greqvaformuladat : string.Empty);
                strPotParcial1 = (regPotParcial1 != null ? regPotParcial1.Greqvaformuladat : string.Empty);
                strConsumoPotParcial1 = (regConsumoPotParcial1 != null ? regConsumoPotParcial1.Greqvaformuladat : string.Empty);
                strPotParcial2 = (regPotParcial2 != null ? regPotParcial2.Greqvaformuladat : string.Empty);
                strConsumoPotParcial2 = (regConsumoPotParcial2 != null ? regConsumoPotParcial2.Greqvaformuladat : string.Empty);
                strPotParcial3 = (regPotParcial3 != null ? regPotParcial3.Greqvaformuladat : string.Empty);
                strConsumoPotParcial3 = (regConsumoPotParcial3 != null ? regConsumoPotParcial3.Greqvaformuladat : string.Empty);
                strPotParcial4 = (regPotParcial4 != null ? regPotParcial4.Greqvaformuladat : string.Empty);
                strConsumoPotParcial4 = (regConsumoPotParcial4 != null ? regConsumoPotParcial4.Greqvaformuladat : string.Empty);
                strPotParcial5 = (regPotParcial5 != null ? regPotParcial5.Greqvaformuladat : string.Empty);
                strConsumoPotParcial5 = (regConsumoPotParcial5 != null ? regConsumoPotParcial5.Greqvaformuladat : string.Empty);
                strRendimiento = (regRendimiento != null ? regRendimiento.Greqvaformuladat : string.Empty);
                strPotMinima = (regPotMinima != null ? regPotMinima.Greqvaformuladat : string.Empty);

                strFechaPotEfectiva = (regPotEfectiva != null ? regPotEfectiva.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotEfectiva = (regConsumoPotEfectiva != null ? regConsumoPotEfectiva.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial1 = (regPotParcial1 != null ? regPotParcial1.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial1 = (regConsumoPotParcial1 != null ? regConsumoPotParcial1.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial2 = (regPotParcial2 != null ? regPotParcial2.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial2 = (regConsumoPotParcial2 != null ? regConsumoPotParcial2.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial3 = (regPotParcial3 != null ? regPotParcial3.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial3 = (regConsumoPotParcial3 != null ? regConsumoPotParcial3.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial4 = (regPotParcial4 != null ? regPotParcial4.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial4 = (regConsumoPotParcial4 != null ? regConsumoPotParcial4.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial5 = (regPotParcial5 != null ? regPotParcial5.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial5 = (regConsumoPotParcial5 != null ? regConsumoPotParcial5.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaRendimiento = (regRendimiento != null ? regRendimiento.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotMinima = (regPotMinima != null ? regPotMinima.Greqvafechadat.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
            }

            if (!esUnidadModoEspecial)
            {
                List<PrGrupodatDTO> listaDataGrupo = listaData.Where(x => x.Grupocodi == grupocodi && x.Fechadat <= fechaPeriodo)
                                                                .OrderByDescending(x => x.Fechadat).ToList();
                listaDataGrupo = ListarDatosFormulaDat(listaDataGrupo);

                var regPotEfectiva = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva);
                var regConsumoPotEfectiva = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotEfectiva);
                var regPotParcial1 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial1);
                var regConsumoPotParcial1 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial1);
                var regPotParcial2 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial2);
                var regConsumoPotParcial2 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial2);
                var regPotParcial3 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial3);
                var regConsumoPotParcial3 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial3);
                var regPotParcial4 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial4);
                var regConsumoPotParcial4 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial4);
                var regPotParcial5 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotParcial5);
                var regConsumoPotParcial5 = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiConsumoPotParcial5);
                var regRendimiento = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiRendimiento);
                var regPotMinima = listaDataGrupo.FirstOrDefault(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotMinima);

                strPotEfectiva = (regPotEfectiva != null ? regPotEfectiva.Formuladat : string.Empty);
                strConsumoPotEfectiva = (regConsumoPotEfectiva != null ? regConsumoPotEfectiva.Formuladat : string.Empty);
                strPotParcial1 = (regPotParcial1 != null ? regPotParcial1.Formuladat : string.Empty);
                strConsumoPotParcial1 = (regConsumoPotParcial1 != null ? regConsumoPotParcial1.Formuladat : string.Empty);
                strPotParcial2 = (regPotParcial2 != null ? regPotParcial2.Formuladat : string.Empty);
                strConsumoPotParcial2 = (regConsumoPotParcial2 != null ? regConsumoPotParcial2.Formuladat : string.Empty);
                strPotParcial3 = (regPotParcial3 != null ? regPotParcial3.Formuladat : string.Empty);
                strConsumoPotParcial3 = (regConsumoPotParcial3 != null ? regConsumoPotParcial3.Formuladat : string.Empty);
                strPotParcial4 = (regPotParcial4 != null ? regPotParcial4.Formuladat : string.Empty);
                strConsumoPotParcial4 = (regConsumoPotParcial4 != null ? regConsumoPotParcial4.Formuladat : string.Empty);
                strPotParcial5 = (regPotParcial5 != null ? regPotParcial5.Formuladat : string.Empty);
                strConsumoPotParcial5 = (regConsumoPotParcial5 != null ? regConsumoPotParcial5.Formuladat : string.Empty);
                strRendimiento = (regRendimiento != null ? regRendimiento.Formuladat : string.Empty);
                strPotMinima = (regPotMinima != null ? regPotMinima.Formuladat : string.Empty);

                strFechaPotEfectiva = (regPotEfectiva != null ? regPotEfectiva.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotEfectiva = (regConsumoPotEfectiva != null ? regConsumoPotEfectiva.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial1 = (regPotParcial1 != null ? regPotParcial1.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial1 = (regConsumoPotParcial1 != null ? regConsumoPotParcial1.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial2 = (regPotParcial2 != null ? regPotParcial2.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial2 = (regConsumoPotParcial2 != null ? regConsumoPotParcial2.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial3 = (regPotParcial3 != null ? regPotParcial3.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial3 = (regConsumoPotParcial3 != null ? regConsumoPotParcial3.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial4 = (regPotParcial4 != null ? regPotParcial4.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial4 = (regConsumoPotParcial4 != null ? regConsumoPotParcial4.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotParcial5 = (regPotParcial5 != null ? regPotParcial5.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaConsumoPotParcial5 = (regConsumoPotParcial5 != null ? regConsumoPotParcial5.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaRendimiento = (regRendimiento != null ? regRendimiento.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
                strFechaPotMinima = (regPotMinima != null ? regPotMinima.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty);
            }

            //caso especial el primer par (existe potencia efectiva pero no consumo)
            if (decimal.TryParse(strPotEfectiva, out potencia))
            {
                c.PotEfectiva = potencia > 0 ? (decimal?)potencia : null;
                c.FechaDescPotEfectiva = strFechaPotEfectiva;

                if (decimal.TryParse(strConsumoPotEfectiva, out consumo))
                {
                    consumo = (consumo) * factorConversion;
                    c.ConsumoPotEfectiva = consumo > 0 ? (decimal?)consumo : null;
                    c.FechaDescConsumoPotEfectiva = strFechaConsumoPotEfectiva;

                    if (potencia != 0 && consumo != 0)
                    {
                        c.ListaX.Add(potencia);
                        c.ListaY.Add(consumo);
                    }
                }
            }

            if (decimal.TryParse(strPotParcial1, out potencia) && decimal.TryParse(strConsumoPotParcial1, out consumo))
            {
                consumo = (consumo) * factorConversion;
                c.PotParcial1 = potencia > 0 ? (decimal?)potencia : null;
                c.ConsumoPotParcial1 = consumo > 0 ? (decimal?)consumo : null;
                c.FechaDescPotParcial1 = strFechaPotParcial1;
                c.FechaDescConsumoPotParcial1 = strFechaPotParcial1;

                if (potencia != 0 && consumo != 0)
                {
                    c.ListaX.Add(potencia);
                    c.ListaY.Add(consumo);
                }
            }

            if (decimal.TryParse(strPotParcial2, out potencia) && decimal.TryParse(strConsumoPotParcial2, out consumo))
            {
                consumo = (consumo) * factorConversion;
                c.PotParcial2 = potencia > 0 ? (decimal?)potencia : null;
                c.ConsumoPotParcial2 = consumo > 0 ? (decimal?)consumo : null;
                c.FechaDescPotParcial2 = strFechaPotParcial2;
                c.FechaDescConsumoPotParcial2 = strFechaPotParcial2;

                if (potencia != 0 && consumo != 0)
                {
                    c.ListaX.Add(potencia);
                    c.ListaY.Add(consumo);
                }
            }

            if (decimal.TryParse(strPotParcial3, out potencia) && decimal.TryParse(strConsumoPotParcial3, out consumo))
            {
                consumo = (consumo) * factorConversion;
                c.PotParcial3 = potencia > 0 ? (decimal?)potencia : null;
                c.ConsumoPotParcial3 = consumo > 0 ? (decimal?)consumo : null;
                c.FechaDescPotParcial3 = strFechaPotParcial3;
                c.FechaDescConsumoPotParcial3 = strFechaPotParcial3;

                if (potencia != 0 && consumo != 0)
                {
                    c.ListaX.Add(potencia);
                    c.ListaY.Add(consumo);
                }
            }

            if (decimal.TryParse(strPotParcial4, out potencia) && decimal.TryParse(strConsumoPotParcial4, out consumo))
            {
                consumo = (consumo) * factorConversion;
                c.PotParcial4 = potencia > 0 ? (decimal?)potencia : null;
                c.ConsumoPotParcial4 = consumo > 0 ? (decimal?)consumo : null;
                c.FechaDescPotParcial4 = strFechaPotParcial4;
                c.FechaDescConsumoPotParcial4 = strFechaPotParcial4;

                if (potencia != 0 && consumo != 0)
                {
                    c.ListaX.Add(potencia);
                    c.ListaY.Add(consumo);
                }
            }

            if (decimal.TryParse(strPotParcial5, out potencia) && decimal.TryParse(strConsumoPotParcial5, out consumo))
            {
                consumo = (consumo) * factorConversion;
                c.PotParcial5 = potencia > 0 ? (decimal?)potencia : null;
                c.ConsumoPotParcial5 = consumo > 0 ? (decimal?)consumo : null;
                c.FechaDescPotParcial5 = strFechaPotParcial5;
                c.FechaDescConsumoPotParcial5 = strFechaPotParcial5;

                if (potencia != 0 && consumo != 0)
                {
                    c.ListaX.Add(potencia);
                    c.ListaY.Add(consumo);
                }
            }

            if (decimal.TryParse(strRendimiento, out rendimiento))
            {
                c.Rendimiento = rendimiento;
                c.FechaDescRendimiento = strFechaRendimiento;
            }

            if (decimal.TryParse(strPotMinima, out potencia))
            {
                c.PotMinima = potencia;
                c.FechaDescPotMinima = strFechaPotMinima;
            }

            try
            {
                if (c.ListaX.Count >= 2)
                {
                    RegresionLineal(c.ListaX, c.ListaY, out correlacion, out puntoCorte, out pendiente);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
            }

            c.CoeficienteCorrelacion = correlacion;
            c.PendienteM01 = pendiente;
            c.CoeficienteIndependiente = puntoCorte;
            //c.Tipoinfocodi =tipoinfocodi;

            return c;
        }

        /// <summary>
        /// Funcion de regresion Lineal
        /// </summary>
        /// <param name="xVals"></param>
        /// <param name="yVals"></param>
        /// <param name="correlacion"></param>
        /// <param name="puntoCorte"></param>
        /// <param name="pendiente"></param>
        public static void RegresionLineal(List<decimal> xVals, List<decimal> yVals, out decimal correlacion, out decimal puntoCorte, out decimal pendiente)
        {
            decimal sumOfX = 0;
            decimal sumOfY = 0;
            decimal sumOfXSq = 0;
            decimal sumOfYSq = 0;
            decimal ssX = 0;
            decimal ssY = 0;
            decimal sumCodeviates = 0;
            decimal sCo = 0;
            decimal count = xVals.Count;

            for (int ctr = 0; ctr < xVals.Count; ctr++)
            {
                decimal x = xVals[ctr];
                decimal y = yVals[ctr];
                sumCodeviates += x * y;
                sumOfX += x;
                sumOfY += y;
                sumOfXSq += x * x;
                sumOfYSq += y * y;
            }
            ssX = sumOfXSq - ((sumOfX * sumOfX) / count);
            ssY = sumOfYSq - ((sumOfY * sumOfY) / count);
            decimal RNumerator = (count * sumCodeviates) - (sumOfX * sumOfY);
            decimal RDenom = (count * sumOfXSq - (sumOfX * sumOfX))
             * (count * sumOfYSq - (sumOfY * sumOfY));
            sCo = sumCodeviates - ((sumOfX * sumOfY) / count);

            decimal meanX = sumOfX / count;
            decimal meanY = sumOfY / count;
            decimal dblR = RNumerator / Convert.ToDecimal(Math.Sqrt(Convert.ToDouble(RDenom)));

            correlacion = dblR * dblR;
            puntoCorte = meanY - ((sCo / ssX) * meanX);
            pendiente = sCo / ssX;
        }

        #endregion

        #region Cuadro 7

        public int ProcesarCuadro7(string horizonte, DateTime fechaIni, DateTime fechaFin, string usuario)
        {
            #region Crear Periodo y Recalculo cuadro 7

            List<IndPeriodoDTO> listaPer = GetByCriteriaIndPeriodosCuadro(horizonte);
            IndPeriodoDTO regPeriodo = listaPer.Find(x => x.Iperianio == fechaIni.Year && x.Iperimes == fechaIni.Month && x.Iperianiofin == fechaFin.Year && x.Iperimesfin == fechaFin.Month);

            if (regPeriodo == null)
            {
                regPeriodo = new IndPeriodoDTO();
                regPeriodo.Iperihorizonte = horizonte;
                regPeriodo.Iperianio = fechaIni.Year;
                regPeriodo.Iperimes = fechaIni.Month;
                regPeriodo.Iperianiofin = fechaFin.Year;
                regPeriodo.Iperimesfin = fechaFin.Month;
                regPeriodo.Iperinombre = null;
                regPeriodo.Iperianiomes = 0;
                regPeriodo.Iperiestado = null;
                regPeriodo.Iperiusucreacion = "SISTEMA";
                regPeriodo.Iperifeccreacion = DateTime.Now;

                if (regPeriodo.Iperihorizonte == ConstantesIndisponibilidades.HorizonteVariableAnual)
                {
                    if (regPeriodo.Iperianio != regPeriodo.Iperianiofin)
                        regPeriodo.Iperinombre = regPeriodo.Iperianio + "-" + regPeriodo.Iperianiofin;
                    else
                        regPeriodo.Iperinombre = regPeriodo.Iperianio.ToString();
                }

                if (regPeriodo.Iperihorizonte == ConstantesIndisponibilidades.HorizonteVariableMensual)
                {
                    if (regPeriodo.Iperianio == regPeriodo.Iperianiofin && regPeriodo.Iperimes == regPeriodo.Iperimesfin)
                        regPeriodo.Iperinombre = regPeriodo.Iperianio + "." + EPDate.f_NombreMes(regPeriodo.Iperimes);
                    else
                        regPeriodo.Iperinombre = regPeriodo.Iperianio + "." + EPDate.f_NombreMes(regPeriodo.Iperimes) + "-" + regPeriodo.Iperianiofin + "." + EPDate.f_NombreMes(regPeriodo.Iperimesfin);
                }

                regPeriodo.Ipericodi = SaveIndPeriodo(regPeriodo);
            }
            var listaRecalculo = GetByCriteriaIndRecalculos(regPeriodo.Ipericodi);
            var regRecalculo = listaRecalculo.FirstOrDefault();

            //crear unico recalculo para ese periodo de rango variable
            if (regRecalculo == null)
            {
                regRecalculo = new IndRecalculoDTO();
                regRecalculo.Ipericodi = regPeriodo.Ipericodi;
                //regRecalculo.Irecatipo = "";
                //regRecalculo.Irecanombre = nombre;
                //regRecalculo.Irecadescripcion = descripcion;
                regRecalculo.Irecafechaini = fechaIni;
                regRecalculo.Irecafechafin = fechaFin;
                regRecalculo.Irecafechalimite = fechaFin;
                regRecalculo.Irecafechaobs = fechaFin;
                //regRecalculo.Irecainforme = informe;
                regRecalculo.Irecausucreacion = "SISTEMA";
                regRecalculo.Irecafeccreacion = DateTime.Now;

                regRecalculo.Irecacodi = SaveIndRecalculo(regRecalculo);

                listaRecalculo.Add(regRecalculo);
            }

            #endregion

            ProcesarCuadro7Mensual(fechaIni, fechaFin, "SISTEMA");

            ListarDataCuadro7(horizonte, fechaIni, fechaFin, out List<IndReporteTotalDTO> listaTotal, out List<IndReporteDetDTO> listaReporteDet, out List<IndRelacionRptDTO> listaRel);

            //Guardar
            int cuadro = ConstantesIndisponibilidades.ReportePR25Cuadro7;
            var regCuadro = GetByIdIndCuadro(cuadro);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = regRecalculo.Irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = ConstantesIndisponibilidades.TiempoTodoDia,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            if (EsVersionCreableCuadro(regCuadro, regRecalculo, regReporte, listaTotal, listaReporteDet))
            {
                CambiarAEstadoHistorico(cuadro, regRecalculo.Irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, regRecalculo.Irecacodi, regReporte);

                //
                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaTotal;
                regSaveBD.ListaRptDet = listaReporteDet;
                regSaveBD.ListaRelRpt = listaRel;

                //guardar en BD
                int irptcodi = this.GuardarReporteIndispBDTransaccional(regSaveBD);
                return irptcodi;
            }

            return 0;
        }

        private void ListarDataCuadro7(string horizonte, DateTime fechaIni, DateTime fechaFin
                                        , out List<IndReporteTotalDTO> listaTotal, out List<IndReporteDetDTO> listaReporteDet, out List<IndRelacionRptDTO> listaRel)
        {
            List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                    && x.Irecafechaini >= fechaIni && x.Irecafechaini <= fechaFin).ToList();
            //Obtener la lista de rptcodi
            List<IndReporteDTO> listaRptValidado = ListarIndReporteMensualValidado(ConstantesIndisponibilidades.ReportePR25Cuadro7, listaRecalculo);

            //generar la data
            listaTotal = new List<IndReporteTotalDTO>();
            listaReporteDet = new List<IndReporteDetDTO>();
            listaRel = new List<IndRelacionRptDTO>();

            List<int> listaRptcodi = listaRptValidado.Select(x => x.Irptcodi).ToList();
            if (listaRptcodi.Any())
            {
                List<IndReporteTotalDTO> listaRptTot = GetByCriteriaIndReporteTotals(string.Join(",", listaRptcodi))
                                                        .Where(x => x.Itotopcom == ConstantesAppServicio.SI).ToList();

                List<EqEquipoDTO> listaUnidad = listaRptTot.DistinctBy(x => x.Equicodi)
                                                                .Select(x => new EqEquipoDTO()
                                                                {
                                                                    Emprnomb = x.Emprnomb,
                                                                    Emprcodi = x.Emprcodi,
                                                                    Central = x.Central,
                                                                    Equipadre = x.Equipadre,
                                                                    UnidadnombPR25 = x.Itotunidadnomb,
                                                                    Equicodi = x.Equicodi.Value,
                                                                    Grupocodi = x.Grupocodi,
                                                                    Famcodi = x.Famcodi
                                                                }).
                                                                OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equiabrev).ToList();

                List<IndPeriodoDTO> listaPer = ListarPeriodoC7(horizonte, fechaIni, fechaFin);

                int idTotal = 1;
                foreach (var regUnidad in listaUnidad)
                {
                    if (regUnidad.Equicodi == 12664)
                    { }

                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = GetFamcodiPadre(regUnidad.Famcodi.Value),
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre.Value,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = regUnidad.UnidadnombPR25,
                        Itotopcom = ConstantesAppServicio.SI,
                    };

                    foreach (var regPer in listaPer)
                    {
                        var listaRecXPer = listaRecalculo.Where(x => x.Irecafechaini >= regPer.FechaIni && x.Irecafechafin <= regPer.FechaFin).ToList();
                        var listaRptXPer = listaRptValidado.Where(x => listaRecXPer.Select(y => y.Irecacodi).Contains(x.Irecacodi)).ToList();
                        List<IndReporteTotalDTO> listaRptTotXper = listaRptTot.Where(x => listaRptXPer.Select(y => y.Irptcodi).Contains(x.Irptcodi)).ToList();

                        List<IndReporteTotalDTO> listaRptXEq = listaRptTotXper.Where(x => x.Equicodi == regUnidad.Equicodi).ToList();

                        if (listaRptXEq.Any())
                        {
                            decimal idetminif = listaRptXEq.Sum(x => x.Itotminif ?? 0);
                            decimal idetminip = listaRptXEq.Sum(x => x.Itotminip ?? 0);
                            int idetnumarranq = listaRptXEq.Sum(x => x.Itotnumarranq ?? 0);
                            decimal idetnumho = listaRptXEq.Sum(x => x.Itotnumho ?? 0);

                            listaReporteDet.Add(new IndReporteDetDTO()
                            {
                                Itotcodi = objUnidad.Itotcodi,
                                Emprcodi = regUnidad.Emprcodi.Value,
                                Equipadre = regUnidad.Equipadre ?? 0,
                                Equicodi = regUnidad.Equicodi,
                                Grupocodi = regUnidad.Grupocodi,
                                Idethoraini = regPer.FechaIni,
                                Idethorafin = regPer.FechaFin,
                                Idetminif = idetminif,
                                Idetminip = idetminip,
                                Idetnumho = idetnumho,
                                Idetnumarranq = idetnumarranq,
                                Idetopcom = ConstantesAppServicio.SI,
                            });
                        }
                    }

                    listaTotal.Add(objUnidad);
                    idTotal++;
                }

                listaRel = new List<IndRelacionRptDTO>();
                foreach (var rptcodi in listaRptcodi)
                {
                    listaRel.Add(new IndRelacionRptDTO()
                    {
                        Irelpridsec = rptcodi
                    });
                }
            }
        }

        private void ProcesarCuadro7Mensual(DateTime fechaIni, DateTime fechaFin, string usuario)
        {
            //crear versiones HORIZONTE = M (mensual) del cuadro
            //luego se utilizará estos rptcodis para juntarlos en el HORIZONTE = VM

            int cuadro = ConstantesIndisponibilidades.ReportePR25Cuadro7;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);

            //DateTime fechaI = new DateTime(fechaIni.Year, fechaIni.Month, 1);
            //DateTime fechaF = new DateTime(fechaFin.Year, fechaFin.Month, 1);
            List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                    && x.Irecafechaini >= fechaIni && x.Irecafechaini <= fechaFin).ToList();

            string tiempo = ConstantesIndisponibilidades.TiempoTodoDia;
            List<int> listaFamcodi = new List<int>() { ConstantesHorasOperacion.IdTipoTermica, ConstantesHorasOperacion.IdTipoHidraulica };

            foreach (var regRecalculo in listaRecalculo)
            {
                List<IndReporteDetDTO> listaRptDet = new List<IndReporteDetDTO>();
                List<IndReporteTotalDTO> listaRptTot = new List<IndReporteTotalDTO>();

                foreach (var famcodi in listaFamcodi)
                {
                    int famcodiCentral = GetFamcodiPadre(famcodi);
                    int famcodiGen = GetFamcodiHijo(famcodi);

                    this.ListarDataInicialPR25(regCuadro.Icuacodi, regRecalculo.Irecafechaini.AddDays(-7), regRecalculo.Irecafechafin, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, famcodiCentral
                                                , out List<EqEquipoDTO> listaUnidadSiOpComercial, out List<EqEquipoDTO> listaUnidadNoOpComercial
                                                , out List<EqEquipoDTO> listaEqSiOpComercial, out List<EqEquipoDTO> listaEqNoOpComercial
                                                , out List<EveManttoDTO> listaManttoSiOpCom, out List<EveManttoDTO> listaManttoNoOpCom, out List<IndInsumoLogDTO> listaLogInsumo, out List<ResultadoValidacionAplicativo> listaMsj);


                    List<EveHoraoperacionDTO> listaHOPTotal = new List<EveHoraoperacionDTO>();
                    if (ConstantesHorasOperacion.IdTipoTermica == famcodiCentral)
                    {
                        listaHOPTotal = this.servHO.ListarHorasOperacionByCriteria(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin.AddDays(1), ConstantesHorasOperacion.ParamEmpresaTodos, ConstantesHorasOperacion.ParamCentralTodos, ConstantesHorasOperacion.TipoListadoTodo)
                                                        .Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica || x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
                        listaHOPTotal = this.servHO.CompletarListaHoraOperacionTermo(listaHOPTotal);
                        listaHOPTotal = listaHOPTotal.Where(x => x.FlagTipoHo == ConstantesHorasOperacion.FlagTipoHoUnidad).ToList();
                    }

                    //Hora punta segun fecha de vigencia
                    List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

                    //datos de entrada
                    this.ListarModoOperacionPe(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);

                    //Lista de grupos y Modos de operación con operación comercial
                    List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

                    var listaEqCentral = listaEqSiOpComercial.Where(x => x.Famcodi == famcodiCentral).ToList();
                    var listaEqGenerador = listaEqSiOpComercial.Where(x => x.Famcodi == famcodiGen).ToList();
                    listaGrupoModo = SetearEquiposToModoOperacion(listaGrupoModo, listaGrupo, listaEqCentral, listaEqGenerador);

                    for (int i = 0; i < 2; i++)
                    {
                        string enOpComercial = i == 0 ? ConstantesAppServicio.SI : ConstantesAppServicio.NO;
                        int tipoUnificar = ConstantesIndisponibilidades.TipoUnificarXGenerador;
                        List<EveManttoDTO> listaManttoBd = i == 0 ? listaManttoSiOpCom : listaManttoNoOpCom;
                        List<EqEquipoDTO> listaUnidad = i == 0 ? listaUnidadSiOpComercial : listaUnidadNoOpComercial;
                        List<EqEquipoDTO> listaEquipo = i == 0 ? listaEqSiOpComercial : listaEqNoOpComercial;

                        this.ListarManttoAppPR25(regCuadro.Icuacodi, tipoUnificar, famcodiCentral, listaEquipo, listaUnidad, listaGrupoModo, listaManttoBd, out List<EveManttoDTO> listmantto, out List<ReiniciarRegla7D> listaReinicio);

                        this.ListarManttoIndispPR25(regCuadro.Icuacodi, listaUnidad, listmantto, listaReinicio, tiempo, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaBloqueHorario, out List<EveManttoDTO> listaIndisp, out List<EveManttoDTO> listaRangoIndispRegla7Dias);

                        this.AsignarValorGrupoXCuadro(regCuadro.Icuacodi, ref listaIndisp, listaUnidad);

                        List<IndReporteDetDTO> listaRptDetXInt = this.GenerarDetalleCuadro(cuadro, listaIndisp, listaRangoIndispRegla7Dias, enOpComercial);
                        List<IndReporteTotalDTO> listaRptTotXInt = this.GenerarTotal7(listaRptTot.Count + 1, ref listaRptDetXInt, listaUnidad, listaHOPTotal, cuadro, famcodi, enOpComercial);

                        listaRptDet.AddRange(listaRptDetXInt);
                        listaRptTot.AddRange(listaRptTotXInt);
                    }
                }

                //Guardar
                IndReporteDTO regReporte = new IndReporteDTO()
                {
                    Icuacodi = cuadro,
                    Irecacodi = regRecalculo.Irecacodi,
                    Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                    Irpttiempo = tiempo,
                    Irptmedicionorigen = null,
                    Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado,
                    Irptusucreacion = usuario,
                    Irptfeccreacion = DateTime.Now,
                    Irptestado = "A"
                };

                if (EsVersionCreableMensualCuadro(regCuadro, regRecalculo, regReporte, listaRptTot, listaRptDet))
                {
                    CambiarAEstadoHistorico(cuadro, regRecalculo.Irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                    regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, regRecalculo.Irecacodi, regReporte);

                    //
                    ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                    regSaveBD.Reporte = regReporte;
                    regSaveBD.ListaRptTot = listaRptTot;
                    regSaveBD.ListaRptDet = listaRptDet;

                    //guardar en BD
                    int irptcodi = this.GuardarReporteIndispBDTransaccional(regSaveBD);
                }

            }
        }

        /// <summary>
        /// Generar total Ind. Reporte
        /// </summary>
        /// <param name="correlativo"></param>
        /// <param name="listaReporteDet"></param>
        /// <param name="listaUnidades"></param>
        /// <param name="famcodi"></param>
        /// <param name="tieneOpComercial"></param>
        /// <returns></returns>
        public List<IndReporteTotalDTO> GenerarTotal7(int correlativo, ref List<IndReporteDetDTO> listaReporteDet, List<EqEquipoDTO> listaUnidades, List<EveHoraoperacionDTO> listaHOPTotalxMes
                                                        , int cuadro, int famcodi, string tieneOpComercial)
        {
            List<IndReporteTotalDTO> listaTotal = new List<IndReporteTotalDTO>();

            List<EqEquipoDTO> listaUnidadInput = listaReporteDet.DistinctBy(x => new { x.Equicodi, x.Grupocodi })
                                        .Select(x => new EqEquipoDTO() { Equicodi = x.Equicodi.Value, Grupocodi = x.Grupocodi }).ToList();
            List<EqEquipoDTO> listaUnidadConData = new List<EqEquipoDTO>();

            int idTotal = correlativo;
            foreach (var regUnidadData in listaUnidadInput)
            {
                EqEquipoDTO regUnidad = listaUnidades.Find(x => x.Equicodi == regUnidadData.Equicodi && x.Grupocodi == regUnidadData.Grupocodi);
                if (regUnidad != null)
                {
                    //indisponibilidade
                    string flagIndispProg = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiProg);
                    string flagIndispEjec = GetFlagTipoIndisp(cuadro, ConstantesIndisponibilidades.EvenclasecodiEjec);

                    List<IndReporteDetDTO> lIF = listaReporteDet.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Idettipoindisp == flagIndispEjec).OrderBy(x => x.Idethoraini).ToList();
                    List<IndReporteDetDTO> lIP = listaReporteDet.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi && x.Idettipoindisp == flagIndispProg).OrderBy(x => x.Idethoraini).ToList();

                    foreach (var regi in lIF)
                    {
                        regi.Itotcodi = idTotal;
                        regi.Idetincremental = regUnidad.Grupoincremental;
                    }
                    foreach (var regi in lIP)
                    {
                        regi.Itotcodi = idTotal;
                        regi.Idetincremental = regUnidad.Grupoincremental;
                    }
                    int hIF = lIF.Sum(x => x.Idetmin).GetValueOrDefault(0);
                    int hIP = lIP.Sum(x => x.Idetmin).GetValueOrDefault(0);

                    //HOP
                    int numArranques = 0;
                    decimal numHoras = 0;

                    List<EveHoraoperacionDTO> listaHOP = listaHOPTotalxMes.Where(x => x.Equicodi == regUnidad.Equicodi).ToList();
                    if (listaHOP.Count > 0)
                    {
                        numArranques = listaHOP.Count(x => x.Hopcompordarrq == ConstantesHorasOperacion.CompOrdArrq);
                        //numArranques = listaHOP.Where(x => x.Hophorordarranq != null).Count();

                        double milisec = 0;
                        foreach (var hop in listaHOP)
                            milisec += (hop.Hophorfin.Value - hop.Hophorini.Value).TotalMilliseconds;

                        numHoras = Convert.ToDecimal(TimeSpan.FromMilliseconds(milisec).TotalHours);
                        numHoras = decimal.Round(numHoras, 5);
                    }

                    //total
                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = famcodi,
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre.Value,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = !string.IsNullOrEmpty(regUnidad.Equinomb) ? regUnidad.Equinomb.Trim() : string.Empty,
                        Itotminif = hIF,
                        Itotminip = hIP,
                        Itotnumho = numHoras,
                        Itotnumarranq = numArranques,
                        Itotopcom = tieneOpComercial,
                        Itotincremental = regUnidad.Grupoincremental
                    };

                    listaTotal.Add(objUnidad);
                    listaUnidadConData.Add(regUnidad);
                    idTotal++;
                }
            }

            //obtener unidades que no tuvieron Indisponibilidades pero si son unidades validas durante el periodo
            List<EqEquipoDTO> listaUnidadesSinIndisp = listaUnidades.Except(listaUnidadConData).ToList();

            foreach (var regEq in listaUnidadesSinIndisp)
            {
                //HOP
                int numArranques = 0;
                decimal numHoras = 0;

                List<EveHoraoperacionDTO> listaHOP = listaHOPTotalxMes.Where(x => x.Equicodi == regEq.Equicodi).ToList();
                if (listaHOP.Count > 0)
                {
                    numArranques = listaHOP.Count(x => x.Hopcompordarrq == ConstantesHorasOperacion.CompOrdArrq);
                    //numArranques = listaHOP.Where(x => x.Hophorordarranq != null).Count();

                    double milisec = 0;
                    foreach (var hop in listaHOP)
                        milisec += (hop.Hophorfin.Value - hop.Hophorini.Value).TotalMilliseconds;

                    numHoras = Convert.ToDecimal(TimeSpan.FromMilliseconds(milisec).TotalHours);
                    numHoras = decimal.Round(numHoras, 5);
                }

                if (regEq == null || regEq.Emprcodi == null || regEq.Equipadre == null)
                { }

                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = famcodi,
                    Emprcodi = regEq.Emprcodi ?? 0,
                    Equipadre = regEq.Equipadre ?? 0,
                    Grupocodi = regEq.Grupocodi,
                    Equicodi = regEq.Equicodi,
                    Itotunidadnomb = !string.IsNullOrEmpty(regEq.Equinomb) ? regEq.Equinomb.Trim() : string.Empty,
                    Itotminif = 0,
                    Itotminip = 0,
                    Itotnumho = numHoras,
                    Itotnumarranq = numArranques,
                    Itotopcom = tieneOpComercial,
                    Itotincremental = regEq.Grupoincremental
                };

                listaTotal.Add(objUnidad);
                idTotal++;
            }

            return listaTotal;
        }

        public List<IndPeriodoDTO> ListarPeriodoC7(string horizonte, DateTime fechaIni, DateTime fechaFin)
        {
            List<IndPeriodoDTO> l = new List<IndPeriodoDTO>();

            if (horizonte == ConstantesIndisponibilidades.HorizonteVariableAnual)
            {
                for (var year = fechaIni; year <= fechaFin; year = year.AddYears(1))
                {
                    IndPeriodoDTO reg = new IndPeriodoDTO();
                    reg.FechaIni = year;
                    reg.FechaFin = year.AddYears(1).AddDays(-1);
                    reg.Iperinombre = year.Year.ToString();

                    l.Add(reg);
                }
            }
            else
            {
                for (var mes = fechaIni; mes <= fechaFin; mes = mes.AddMonths(1))
                {
                    IndPeriodoDTO reg = new IndPeriodoDTO();
                    reg.FechaIni = mes;
                    reg.FechaFin = mes.AddMonths(1).AddDays(-1);
                    reg.Iperinombre = mes.ToString(ConstantesAppServicio.FormatoMes);

                    l.Add(reg);
                }

            }

            return l;
        }

        #region web Handson y excel

        /// <summary>
        /// Generar reporte excel web por versión de reporte
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="centralIntegrante"></param>
        /// <param name="empresa"></param>
        /// <param name="central"></param>
        /// <param name="famcodi"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="handsonProg"></param>
        /// <param name="handsonFort"></param>
        /// <param name="htmlReporteConsolidado"></param>
        public void GenerarWebXVersionReporte7(int irptcodi, string empresa, string central, int famcodi, out HandsonModel handson7)
        {

            IndReporteDTO regVersion = this.GetByIdIndReporte(irptcodi);
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            var regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            IndPeriodoDTO regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, new List<int>() { famcodi }, ConstantesAppServicio.SI, empresa, central
                , out List<IndReporteTotalDTO> listaReptotOut, out List<IndReporteDetDTO> listaRepdetOut
                , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral);

            string tgenernomb = ConstantesHorasOperacion.IdTipoTermica == famcodi ? "Térmica" : "Hidráulica";

            //Salidas 
            List<IndPeriodoDTO> listaPeriodoCuadro7 = ListarPeriodoC7(regPeriodo.Iperihorizonte, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin);

            handson7 = GetHandsonCuadro7(tgenernomb, listaPeriodoCuadro7, listaReptotOut, listaRepdetOut);
        }

        /// <summary>
        /// Generar reporte cuadro por version de reporte
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="centralIntegrante"></param>
        /// <param name="empresa"></param>
        /// <param name="central"></param>
        /// <param name="famcodi"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="handsonProg"></param>
        /// <param name="handsonFort"></param>
        /// <param name="htmlReporteConsolidado"></param>
        /// <param name="regVersion"></param>
        /// <param name="regPeriodo"></param>
        /// <param name="regCuadro"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHoja"></param>
        private void GenerarReporteCuadroXVersionReporte7(int irptcodi, string empresa, string central, int famcodi
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndRecalculoDTO regRecalculo, out IndCuadroDTO regCuadro, out List<IndPeriodoDTO> listaPeriodoCuadro7
                                                    , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaDetDiario)
        {
            regVersion = this.GetByIdIndReporte(irptcodi);
            regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, new List<int>() { famcodi }, ConstantesAppServicio.SI, empresa, central
                , out listaReptHoja, out listaRepdetHoja
                , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral);

            var listaRel = GetByCriteriaIndRelacionRpts(irptcodi);
            listaDetDiario = GetByCriteriaIndReporteDets(string.Join(",", listaRel.Select(x => x.Irelpridsec)));

            this.ListarInsumoEveMantto(regCuadro.Icuacodi, regVersion.Irecafechaini.AddDays(-7), regVersion.Irecafechafin, famcodi, out List<EveManttoDTO> listaManttoBD, out List<IndInsumoLogDTO> listaLogInsumo, out List<ResultadoValidacionAplicativo> listaMensaje);

            DateTime fechaIni = regRecalculo.Irecafechaini;
            DateTime fechaFin = regRecalculo.Irecafechafin;

            //cuadro 1,2,4,7
            this.SetDescripcionIndispMayor1DiaXEq(ref listaReptHoja, listaRepdetHoja);

            SetearDescripcionXIndisp(ConstantesIndisponibilidades.INDFortuitaTotal, true, listaReptHoja, ref listaDetDiario, fechaIni, fechaFin, listaManttoBD, new List<IndReporteDetDTO>());
            SetearDescripcionXIndisp(ConstantesIndisponibilidades.INDProgramadaTotal, true, listaReptHoja, ref listaDetDiario, fechaIni, fechaFin, listaManttoBD, new List<IndReporteDetDTO>());

            listaPeriodoCuadro7 = ListarPeriodoC7(regPeriodo.Iperihorizonte, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin);
        }

        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="tipoIndisp"></param>
        /// <param name="tgenernomb"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaAllDet"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaEquipo"></param>
        /// <param name="listaManttoBD"></param>
        /// <returns></returns>
        public HandsonModel GetHandsonCuadro7(string tgenernomb, List<IndPeriodoDTO> listaPeriodoCuadro7
                                                , List<IndReporteTotalDTO> listaTot, List<IndReporteDetDTO> listaDet)
        {
            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "EMPRESA", IsMerge = 1, Ancho = 340, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "TIPO DE GENERACIÓN", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "CENTRAL", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "UNIDAD", IsMerge = 1, Ancho = 220, AlineacionHorizontal = "Centro", });

            foreach (var reg in listaPeriodoCuadro7)
            {
                string desc = reg.Iperinombre + "<br/>";
                listaCabecera.Add(new CabeceraRow() { TituloRow = desc + "HOP", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });
                listaCabecera.Add(new CabeceraRow() { TituloRow = desc + "#ARRAN", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });
                listaCabecera.Add(new CabeceraRow() { TituloRow = desc + "HIP", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });
                listaCabecera.Add(new CabeceraRow() { TituloRow = desc + "HIF", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });
            }

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = true,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            int numColAntesdeFecha = 4;
            int numCol = numColAntesdeFecha + listaPeriodoCuadro7.Count() * 4;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();

            foreach (var regTotal in listaTot)
            {
                if (regTotal.Equicodi == 13418)
                { }
                string[] matriz = new string[numCol];

                matriz[0] = regTotal.Emprnomb; //EMPRESA
                matriz[1] = tgenernomb;
                matriz[2] = regTotal.Central; //CENTRAL
                matriz[3] = regTotal.Itotunidadnomb;

                List<IndReporteDetDTO> listaDetXEq = listaDet.Where(x => x.Equicodi == regTotal.Equicodi).ToList();

                int contTmp = 4;
                foreach (var regPer in listaPeriodoCuadro7)
                {
                    IndReporteDetDTO regDetPer = listaDetXEq.Find(x => x.Idethoraini == regPer.FechaIni);

                    if (regDetPer != null)
                    {
                        matriz[contTmp] = regDetPer.IdetnumhoDesc;
                        matriz[contTmp + 1] = regDetPer.IdetnumarranqDesc;
                        matriz[contTmp + 2] = regDetPer.NumHorasIpDesc;
                        matriz[contTmp + 3] = regDetPer.NumHorasIfDesc;
                    }

                    contTmp += 4;
                }

                listaDataHandson.Add(matriz);
                numFilaActual++;
            }

            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return handson;
        }

        public void GenerarRptExcelCuadro7(string ruta, int irptcodi, string empresa, string central, int famcodi, out string nameFile)
        {
            this.GenerarReporteCuadroXVersionReporte7(irptcodi, empresa, central, famcodi
                                                , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndRecalculoDTO regRecalculo, out IndCuadroDTO regCuadro, out List<IndPeriodoDTO> listaPeriodoCuadro7
                                                , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdetHoja, out List<IndReporteDetDTO> listaDetDiario);

            string tgenernomb = ConstantesHorasOperacion.IdTipoTermica == famcodi ? "Térmica" : "Hidráulica";
            string prefijoFile = regPeriodo.Iperihorizonte == ConstantesIndisponibilidades.HorizonteVariableAnual ? "RptCuadro7xAnio" : "RptCuadro7xMes";
            string nameResumen = regPeriodo.Iperihorizonte == ConstantesIndisponibilidades.HorizonteVariableAnual ? "HOxAño" : "HOxMes";

            DateTime fechaIni = regRecalculo.Irecafechaini;
            DateTime fechaFin = regRecalculo.Irecafechafin;

            //Nombre de archivo
            nameFile = string.Format("{0}.xlsx", prefijoFile);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCuadroReporteSoloCuadro7(xlPackage, nameResumen, 1, 1, "Horas de Operación, Número de Arranques y Horas de Indisponibilidad Programada y Fortuita por Mes"
                                                            , tgenernomb, regCuadro, regPeriodo, regVersion, listaPeriodoCuadro7, listaReptHoja, listaRepdetHoja);
                xlPackage.Save();

                GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "PROGRAMADO", 2, 1, tgenernomb, ConstantesIndisponibilidades.INDProgramadaTotal, true, fechaIni, fechaFin, listaReptHoja, listaDetDiario);
                xlPackage.Save();

                GenerarHojaExcelCuadroDetalleCuadro1(xlPackage, "FORTUITA", 2, 1, tgenernomb, ConstantesIndisponibilidades.INDFortuitaTotal, true, fechaIni, fechaFin, listaReptHoja, listaDetDiario);
                xlPackage.Save();

            }
        }

        /// <summary>
        /// Generar hoja excel cuadro 3
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="regCuadro"></param>
        /// <param name="regPeriodo"></param>
        /// <param name="regVersion"></param>
        /// <param name="listaReptHoja"></param>
        private void GenerarHojaExcelCuadroReporteSoloCuadro7(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni, string titulo
                                            , string tgenernomb, IndCuadroDTO regCuadro, IndPeriodoDTO regPeriodo, IndReporteDTO regVersion, List<IndPeriodoDTO> listaPeriodoCuadro7
                                            , List<IndReporteTotalDTO> listaReptHoja, List<IndReporteDetDTO> listaRepdetHoja)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            string font = "TradeGothic Bold";
            string colorCeldaFijo = "#4F81BD";
            string colorCeldaCuerpo = "#DCE6F1";
            string colorTextoFijo = "#FFFFFF";
            string colorTextoCuerpo = "#000000";
            string colorLinea = "#FFFFFF";

            #region  Filtros y Cabecera

            int colEmpresa = colIni;
            int colTipo = colEmpresa + 1;
            int colCentral = colTipo + 1;
            int colUnidad = colCentral + 1;

            ws.Cells[rowIni, colTipo].Value = regCuadro.Icuanombre + ": " + titulo; //CUADRO N° 7
            UtilExcel.SetFormatoCelda(ws, rowIni, colTipo, rowIni, colTipo, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 20, false);

            if (regPeriodo.Iperihorizonte == ConstantesIndisponibilidades.HorizonteVariableMensual)
            {
                ws.Cells[rowIni + 2, colTipo].Value = "Mes Inicio:";
                ws.Cells[rowIni + 3, colTipo].Value = "Mes Fin:";
            }
            else
            {
                ws.Cells[rowIni + 2, colTipo].Value = "Año Inicio:";
                ws.Cells[rowIni + 3, colTipo].Value = "Año Fin:";
            }
            ws.Cells[rowIni + 2, colCentral].Value = listaPeriodoCuadro7.First().Iperinombre;
            ws.Cells[rowIni + 3, colCentral].Value = listaPeriodoCuadro7.Last().Iperinombre;

            UtilExcel.SetFormatoCelda(ws, rowIni + 2, colTipo, rowIni + 3, colCentral, "Centro", "Izquierdo", "#4F81BD", "#FFFFFF", font, 8, false, true);

            int rowCab1 = rowIni + 5;
            int rowCab2 = rowCab1 + 1;
            ws.Cells[rowCab1, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowCab1, colTipo].Value = "TIPO DE GENERACIÓN";
            ws.Cells[rowCab1, colCentral].Value = "CENTRAL";
            ws.Cells[rowCab1, colUnidad].Value = "UNIDAD";

            UtilExcel.CeldasExcelAgrupar(ws, rowCab1, colEmpresa, rowCab2, colEmpresa);
            UtilExcel.CeldasExcelAgrupar(ws, rowCab1, colTipo, rowCab2, colTipo);
            UtilExcel.CeldasExcelAgrupar(ws, rowCab1, colCentral, rowCab2, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, rowCab1, colUnidad, rowCab2, colUnidad);

            UtilExcel.SetFormatoCelda(ws, rowCab1, colEmpresa, rowCab2, colUnidad, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 8, false, true);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowCab1, colEmpresa, rowCab2, colEmpresa, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowCab1, colTipo, rowCab2, colTipo, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowCab1, colCentral, rowCab2, colCentral, colorLinea);
            UtilExcel.BorderCeldasLineaGruesa(ws, rowCab1, colUnidad, rowCab2, colUnidad, colorLinea);

            double factorAncho = 0.85;
            //ws.Row(rowCab1).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = ConstantesIndisponibilidades.RptCuadro1AnchoEmpresa * factorAncho;
            ws.Column(colTipo).Width = 15 * factorAncho;
            ws.Column(colCentral).Width = ConstantesIndisponibilidades.RptCuadro1AnchoCentral * factorAncho;
            ws.Column(colUnidad).Width = 25 * factorAncho;

            int colIniTmp = colUnidad + 1;
            foreach (var reg in listaPeriodoCuadro7)
            {
                int colHop = colIniTmp;
                int colArran = colHop + 1;
                int colHip = colArran + 1;
                int colHif = colHip + 1;

                ws.Cells[rowCab1, colHop].Value = reg.Iperinombre;
                UtilExcel.CeldasExcelAgrupar(ws, rowCab1, colHop, rowCab1, colHif);
                UtilExcel.SetFormatoCelda(ws, rowCab1, colHop, rowCab1, colHif, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 8, false, true);

                ws.Cells[rowCab2, colHop].Value = "HOP";
                ws.Cells[rowCab2, colArran].Value = "#ARRAN";
                ws.Cells[rowCab2, colHip].Value = "HIP";
                ws.Cells[rowCab2, colHif].Value = "HIF";

                UtilExcel.BorderCeldasLineaGruesa(ws, rowCab2, colHop, rowCab2, colHop, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowCab2, colArran, rowCab2, colArran, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowCab2, colHip, rowCab2, colHip, colorLinea);
                UtilExcel.BorderCeldasLineaGruesa(ws, rowCab2, colHif, rowCab2, colHif, colorLinea);
                UtilExcel.SetFormatoCelda(ws, rowCab2, colHop, rowCab2, colHif, "Centro", "Centro", colorTextoFijo, colorCeldaFijo, font, 8, false, true);

                ws.Column(colHop).Width = 15 * factorAncho;
                ws.Column(colArran).Width = 15 * factorAncho;
                ws.Column(colHip).Width = 15 * factorAncho;
                ws.Column(colHif).Width = 15 * factorAncho;

                colIniTmp += 4;
            }

            #endregion

            #region Cuerpo

            int rowData = rowCab2;
            int rowIniRangoEmpresa = rowData + 1;
            int rowIniRangoCentral = rowData + 1;
            string empresaActual, empresaSiguiente;
            string centralActual, centralSiguiente;

            for (int i = 0; i < listaReptHoja.Count; i++)
            {
                var reg = listaReptHoja[i];

                rowData++;
                empresaActual = reg.Emprnomb;
                empresaSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Emprnomb : string.Empty;
                centralActual = reg.Central;
                centralSiguiente = i + 1 < listaReptHoja.Count ? listaReptHoja[i + 1].Central : string.Empty;

                ws.Cells[rowData, colEmpresa].Value = reg.Emprnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Izquierda", colorTextoFijo, colorCeldaFijo, font, 8, false, true);

                ws.Cells[rowData, colTipo].Value = tgenernomb;
                ws.Cells[rowData, colCentral].Value = reg.Central;
                ws.Cells[rowData, colUnidad].Value = reg.Itotunidadnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colTipo, rowData, colUnidad, "Centro", "Centro", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false, true);

                List<IndReporteDetDTO> listaDetXEq = listaRepdetHoja.Where(x => x.Equicodi == reg.Equicodi).ToList();

                colIniTmp = colUnidad + 1;
                foreach (var regPer in listaPeriodoCuadro7)
                {
                    int colHop = colIniTmp;
                    int colArran = colHop + 1;
                    int colHip = colArran + 1;
                    int colHif = colHip + 1;

                    IndReporteDetDTO regDetPer = listaDetXEq.Find(x => x.Idethoraini == regPer.FechaIni);

                    decimal? numho = regDetPer != null ? regDetPer.Idetnumho : null;
                    decimal? numarranq = regDetPer != null ? regDetPer.Idetnumarranq : null;
                    decimal? numHorasIp = regDetPer != null ? regDetPer.NumHorasIp : null;
                    decimal? numHorasIf = regDetPer != null ? regDetPer.NumHorasIf : null;

                    if (numho > 0) ws.Cells[rowData, colHop].Value = numho;
                    else ws.Cells[rowData, colHop].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colHop, rowData, colHop, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colHop, rowData, colHop, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colHop, rowData, colHop, 2);

                    if (numarranq > 0) ws.Cells[rowData, colArran].Value = numarranq;
                    else ws.Cells[rowData, colArran].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colArran, rowData, colArran, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colArran, rowData, colArran, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colArran, rowData, colArran, 0);

                    if (numHorasIp > 0) ws.Cells[rowData, colHip].Value = numHorasIp;
                    else ws.Cells[rowData, colHip].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colHip, rowData, colHip, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colHip, rowData, colHip, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colHip, rowData, colHip, 2);

                    if (numHorasIf > 0) ws.Cells[rowData, colHif].Value = numHorasIf;
                    else ws.Cells[rowData, colHif].Value = "-";
                    UtilExcel.SetFormatoCelda(ws, rowData, colHif, rowData, colHif, "Centro", "Derecha", colorTextoCuerpo, colorCeldaCuerpo, font, 8, false);
                    UtilExcel.CeldasExcelIndentar(ws, rowData, colHif, rowData, colHif, 1);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colHif, rowData, colHif, 2);

                    UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colHop, rowData, colHop, colorLinea);
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colArran, rowData, colArran, colorLinea);
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colHip, rowData, colHip, colorLinea);
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colHif, rowData, colHif, colorLinea);

                    colIniTmp += 4;
                }

                //border empresa

                if (empresaActual != empresaSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoEmpresa, colEmpresa, rowData, colTipo, colorLinea);
                    rowIniRangoEmpresa = rowData + 1;
                }

                //border central
                if (centralActual != centralSiguiente)
                {
                    UtilExcel.BorderCeldasLineaGruesa(ws, rowIniRangoCentral, colCentral, rowData, colCentral, colorLinea);
                    rowIniRangoCentral = rowData + 1;
                }

                //unidad
                UtilExcel.BorderCeldasLineaGruesa(ws, rowData, colUnidad, rowData, colUnidad, colorLinea);
            }

            #endregion

            HttpWebRequest request = (HttpWebRequest)System.Net.HttpWebRequest.Create(ConstantesAppServicio.EnlaceLogoCoes);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            System.Drawing.Image img = System.Drawing.Image.FromStream(response.GetResponseStream());

            UtilExcel.AddImage(ws, img, rowIni, colIni);

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowCab1, colEmpresa, rowCab2, colCentral].AutoFilter = true;

            ws.View.FreezePanes(rowCab2 + 1, colUnidad + 1);
            ws.View.ZoomScale = 85;

            //Todo el excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;

        }

        #endregion

        #endregion

        #region Factor 1: Fortuita mensual Térmicas

        public int ProcesarFactorFortuitaMensualTermica(int irecacodi, int idReporteCuadro1, int idReporteCuadro2, int idReporteCuadro14, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25FactorFortTermico;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            //Cuadro 1 y Cuadro 2 guardarlos como historico
            DateTime fechaFinHist = GetPeriodoMaxHistTermo();
            if (regRecalculo.Irecafechaini > fechaFinHist)
            {
                ProcesarCuadro1y2ParaHistorico(irecacodi, idReporteCuadro1, idReporteCuadro2, usuario);
            }

            ReporteInsumoPR25 regSaveBD = GenerarReporteFactorFortuitaMensualTermica(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, idReporteCuadro14);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = ConstantesAppServicio.Activo,
            };

            if (EsVersionCreableMensualCuadroRelacion(regCuadro, regRecalculo, regReporte, regSaveBD.ListaRptTot, regSaveBD.ListaRptDet, regSaveBD.ListaRelRpt))
            {
                CambiarAEstadoHistorico(cuadro, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                regSaveBD.Reporte = regReporte;

                return GuardarReporteIndispBDTransaccional(regSaveBD);
            }

            return 0;
        }

        #region Cálculo

        private ReporteInsumoPR25 GenerarReporteFactorFortuitaMensualTermica(DateTime fechaIni, DateTime fechaFin, int idReporteCuadro14)
        {
            //insumos unidades
            List<EqEquipoDTO> listaUnidad = ListarUnidadesOpComercialByMes(ConstantesIndisponibilidades.ReportePR25HistoricoTermo, fechaFin);

            //insumo indisponibilidades mensuales
            List<IndReporteTotalDTO> listaDetalleMensual = ListarDataIndisponibilidadHistoricoMensual(ConstantesIndisponibilidades.ReportePR25HistoricoTermo, fechaFin, out List<IndRelacionRptDTO> listaRel);

            //insumo Disponibilidad de Calor Util
            CalculoPotenciaFirmeCogeneracion(idReporteCuadro14, fechaIni, fechaFin, out List<PfReporteTotalDTO> listaPFcog);

            //parámetros
            ParametroAnexoB regAnexoB = GetParametroAnexoB(fechaFin);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            //realizar calculo
            GenerarTotalFactorFortuitaTermica(fechaIni, listaUnidad, regAnexoB, listaPFcog, listaDetalleMensual, listaBloqueHorario, out List<IndReporteTotalDTO> listaTotal, out List<IndReporteDetDTO> listaDet);

            //
            ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
            regSaveBD.ListaRptTot = listaTotal;
            regSaveBD.ListaRptDet = listaDet;
            regSaveBD.ListaRelRpt = listaRel;

            return regSaveBD;
        }

        private void GenerarTotalFactorFortuitaTermica(DateTime fechaPeriodo, List<EqEquipoDTO> listaUnidad
                                                        , ParametroAnexoB regAnexoB, List<PfReporteTotalDTO> listaPFcog, List<IndReporteTotalDTO> listaDetalleMensual, List<SiParametroValorDTO> listaBloqueHorario
                                                        , out List<IndReporteTotalDTO> listaTotal, out List<IndReporteDetDTO> listaDet)
        {
            listaTotal = new List<IndReporteTotalDTO>();
            listaDet = new List<IndReporteDetDTO>();

            ListarPeriodoFactorFortuitaTermica(fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes
                                                                            , out List<IndPeriodoDTO> listaAllMes, out IndPeriodoDTO regEstadistico36Meses);

            int idTotal = 1;
            foreach (var regUnidad in listaUnidad)
            {
                if (regUnidad.Equicodi == 136)
                { }

                var regTotal = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Emprcodi = regUnidad.Emprcodi.Value,
                    Equipadre = regUnidad.Equipadre.Value,
                    Equicodi = regUnidad.Equicodi,
                    Grupocodi = regUnidad.Grupocodi,
                    Famcodi = ConstantesHorasOperacion.IdTipoTermica,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotincremental = regUnidad.Grupoincremental,
                    Itotunidadnomb = regUnidad.UnidadnombPR25,
                };

                var listaDetXUnidad = listaDetalleMensual.Where(x => fechaPeriodo.AddMonths(-23) <= x.Irecafechaini && x.Irecafechaini <= fechaPeriodo
                                                                    && x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi).ToList();

                //obtener factor
                decimal valorMinFort = listaDetXUnidad.Sum(x => x.Itotminif ?? 0);
                decimal valorFactorFort = valorMinFort / (regEstadistico36Meses.TotalHP * 60.0m);

                regTotal.Itotminif = valorMinFort; //Información estadistica movil 24 meses HIFP(horas)
                regTotal.Itotfactorif = valorFactorFort;

                //tiene costo de racionamiento CR
                regTotal.Itotcr = string.Empty;
                if (regTotal.Itotfactoripm > regAnexoB.FIFmensualTermo)
                {
                    // (*) De tratarse de una Central de Cogeneración no Calificada, solo aplicable cuando la central no opere asociada a calor útil. 
                    if (regUnidad.Grupotipocogen == ConstantesAppServicio.SI)
                    {
                        var pFTermoCoGen = listaPFcog.Find(x => x.Equipadre == regUnidad.Equipadre);
                        if (pFTermoCoGen != null && pFTermoCoGen.TotalMinutosSinCalorUtil > 0)
                        {
                            regTotal.Itotcr = ConstantesIndisponibilidades.FlagCR;
                        }
                    }
                    else
                    {
                        regTotal.Itotcr = ConstantesIndisponibilidades.FlagCR;
                    }
                }

                //detalle por rango de 12 meses
                foreach (var anio in listaAnio)
                {
                    decimal valorMinFortXRango = listaDetXUnidad.Where(x => anio.FechaIni <= x.Irecafechaini && x.Irecafechaini <= anio.FechaFin).Sum(x => x.Itotminif ?? 0);
                    //decimal valorHorasFort = valorMinFort / 60.0m;

                    //Enero - Diciembre 2018
                    IndReporteDetDTO regDet = new IndReporteDetDTO()
                    {
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre.Value,
                        Equicodi = regUnidad.Equicodi,
                        Grupocodi = regUnidad.Grupocodi,
                        Idetincremental = regUnidad.Grupoincremental,
                        Idetminif = valorMinFortXRango,
                        Idethoraini = anio.FechaIni,
                        Idethorafin = anio.FechaFin,
                        Itotcodi = idTotal
                    };
                    listaDet.Add(regDet);
                }

                listaTotal.Add(regTotal);
                idTotal++;
            }
        }

        private void ListarPeriodoFactorFortuitaTermica(DateTime fechaPeriodo, List<SiParametroValorDTO> listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes
                                                                            , out List<IndPeriodoDTO> listaAllMeses, out IndPeriodoDTO regEstadistico36Meses)
        {
            //24 meses, separados por 12 meses
            int totalMesPeriodoEstadistico = 24;
            listaAnio = new List<IndPeriodoDTO>();

            DateTime fechaInicio36 = fechaPeriodo.AddMonths(-(totalMesPeriodoEstadistico - 1));
            DateTime fechaFin = fechaPeriodo;

            int totalMeses = 0;
            DateTime fecha1 = fechaInicio36;
            do
            {
                DateTime fecha2 = new DateTime(fecha1.Year, 12, 1);
                int numMeses = fecha2.Month - fecha1.Month + 1;
                totalMeses += numMeses;
                if (totalMeses > totalMesPeriodoEstadistico)
                {
                    fecha2 = new DateTime(fechaFin.Year, fechaFin.Month, 1);//primero del mes
                    numMeses = fecha2.Month - fecha1.Month + 1;
                }

                DateTime fechaMax = fecha2.AddMonths(1).AddDays(-1);
                string cabeceraPeriodo = $"{EPDate.f_NombreMes(fechaMax.Month)} {fechaMax.Year}";
                if ((fechaMax - fecha1).TotalDays > fechaMax.Day)
                    cabeceraPeriodo = $"{EPDate.f_NombreMes(fecha1.Month)} - {cabeceraPeriodo}";

                var reg = new IndPeriodoDTO()
                {
                    FechaIni = fecha1,
                    FechaFin = fechaMax,
                    FechaDesc = cabeceraPeriodo,
                };
                reg.TotalDias = (reg.FechaFin - reg.FechaIni).Days + 1;
                reg.TotalHP = MedidoresHelper.TotalHorasXRango(reg.FechaIni, reg.FechaFin, listaBloqueHorario);
                reg.TotalMes = numMeses;

                listaAnio.Add(reg);

                fecha1 = fecha2.AddMonths(1);
            } while (fecha1 <= fechaFin);

            //
            listaMes = new List<IndPeriodoDTO>();
            foreach (var anio in listaAnio)
            {
                for (DateTime fechaMes = anio.FechaIni; fechaMes <= anio.FechaFin; fechaMes = fechaMes.AddMonths(1))
                {
                    listaMes.Add(new IndPeriodoDTO()
                    {
                        FechaIni = fechaMes,
                        FechaFin = fechaMes.AddMonths(1).AddDays(-1),
                    });
                }
            }

            regEstadistico36Meses = new IndPeriodoDTO()
            {
                TotalMes = totalMesPeriodoEstadistico,
                TotalDias = listaAnio.Sum(x => x.TotalDias),
                TotalHP = listaAnio.Sum(x => x.TotalHP),
            };

            //lista de meses para mostrar en la parte derecha
            listaAllMeses = new List<IndPeriodoDTO>();
            var regCuadro = GetByIdIndCuadro(ConstantesIndisponibilidades.ReportePR25HistoricoHidro);
            for (DateTime fechaMes = regCuadro.PeriodoIniHistorico; fechaMes <= fechaPeriodo; fechaMes = fechaMes.AddMonths(1))
            {
                var regA = new IndPeriodoDTO()
                {
                    FechaIni = fechaMes,
                    FechaFin = fechaMes.AddMonths(1).AddDays(-1),
                    TotalMes = 1,
                };
                regA.TotalDias = (regA.FechaFin - regA.FechaIni).Days + 1;
                regA.TotalHP = MedidoresHelper.TotalHorasXRango(regA.FechaIni, regA.FechaFin, listaBloqueHorario);

                listaAllMeses.Add(regA);
            }
        }

        private void ProcesarCuadro1y2ParaHistorico(int irecacodi, int idReporteCuadro1, int idReporteCuadro2, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25HistoricoTermo;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);

            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            List<IndReporteTotalDTO> listaReptotC1 = GetByCriteriaIndReporteTotals(idReporteCuadro1);
            List<IndReporteTotalDTO> listaReptotC2 = GetByCriteriaIndReporteTotals(idReporteCuadro2);

            List<EqEquipoDTO> listaUnidad = ListarUnidadesOpComercialByMes(cuadro, regRecalculo.Irecafechafin);
            List<FactorINDTeorica> listaTeorica = ListarParametroAnexoC(regRecalculo.Irecafechafin);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            List<IndReporteTotalDTO> listaRptTot = GenerarTotalCuadro1y2ParaHistorico(cuadro, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaUnidad, listaTeorica
                                                                                    , listaReptotC1, listaReptotC2, listaBloqueHorario);

            List<IndReporteTotalDTO> listaNuevaUnidadConOpComercial = listaRptTot.Where(x => x.TieneIngresoOpCom).ToList();
            if (listaNuevaUnidadConOpComercial.Any())
            {
                //agregar su historico para el mes anterior hasta el inicio de historico
                ActualizarHistoricoFactorConNuevoIngreso(cuadro, regRecalculo.Irecafechaini.AddMonths(-1), listaNuevaUnidadConOpComercial, listaBloqueHorario, usuario);
            }

            string tiempo = ConstantesIndisponibilidades.TiempoTodoDia;

            //Para los factores se debe guardar el historico en los recalculos mensuales, no en otros (revision 1, etc)
            int irecacodiDelMes = irecacodi;

            var regRecalculoDelMes = GetByCriteriaIndRecalculos(regRecalculo.Ipericodi).Find(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual);
            if (regRecalculoDelMes != null) irecacodiDelMes = regRecalculoDelMes.Irecacodi;

            //Guardar
            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodiDelMes,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteHistorico,
                Irpttiempo = tiempo,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado, //los historicos se consideran validados
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            if (EsVersionCreableMensualCuadro(regCuadro, null, regReporte, listaRptTot, new List<IndReporteDetDTO>()))
            {
                CambiarAEstadoHistorico(cuadro, irecacodiDelMes, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodiDelMes, regReporte);

                //
                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaRptTot;
                regSaveBD.ListaRptDet = new List<IndReporteDetDTO>();

                //guardar en BD
                int irptcodi = this.GuardarReporteIndispBDTransaccional(regSaveBD);
            }
        }

        private List<IndReporteTotalDTO> GenerarTotalCuadro1y2ParaHistorico(int cuadro, DateTime fechaIniPeriodo, DateTime fechaFinPeriodo,
                                                    List<EqEquipoDTO> listaUnidades, List<FactorINDTeorica> listaTeorica,
                                                    List<IndReporteTotalDTO> listaReptotC1, List<IndReporteTotalDTO> listaReptotC2, List<SiParametroValorDTO> listaBloqueHorario)
        {
            List<IndReporteTotalDTO> listaTotal = new List<IndReporteTotalDTO>();

            #region Generar data del mes actual

            //Generar data para las unidades térmicas
            int idTotal = 1;
            foreach (var regUnidad in listaUnidades)
            {
                if (regUnidad.Equipadre == 12720)
                { }
                IndReporteTotalDTO regC1 = listaReptotC1.Find(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi);
                IndReporteTotalDTO regC2 = listaReptotC2.Find(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi);

                FactorINDTeorica regTeorico = listaTeorica.Find(x => x.Fenergcodi == regUnidad.Fenergcodi);

                // para térmicas se suman minutos fortuito (total y parcial)
                decimal? totminif = null, totminip = null;
                if (regC1 != null && regC1.Itotminif.GetValueOrDefault(0) > 0)
                    totminif = totminif.GetValueOrDefault(0) + regC1.Itotminif.GetValueOrDefault(0);
                if (regC2 != null && regC2.Itotminif.GetValueOrDefault(0) > 0)
                    totminif = totminif.GetValueOrDefault(0) + regC2.Itotminifparcial.GetValueOrDefault(0);

                // para térmicas se suman minutos programado (total y parcial)
                if (regC1 != null && regC1.Itotminip.GetValueOrDefault(0) > 0)
                    totminip = totminip.GetValueOrDefault(0) + regC1.Itotminip.GetValueOrDefault(0);
                if (regC2 != null && regC2.Itotminip.GetValueOrDefault(0) > 0)
                    totminip = totminip.GetValueOrDefault(0) + regC2.Itotminipparcial.GetValueOrDefault(0);

                if (regUnidad.Equifechiniopcom == null)
                { }
                DateTime fechaIniEjecutadoUnidad = regUnidad.Equifechiniopcom.Value.AddDays(ConstantesIndisponibilidades.NumMesesValidacionOC);

                //completar con teorico
                if (fechaIniPeriodo < fechaIniEjecutadoUnidad)
                {
                    if (fechaIniPeriodo.AddMonths(1).AddDays(-1) < fechaIniEjecutadoUnidad)
                    {
                        //antes del mes que comienza ejecutados se usará solo teórico
                        decimal totminProgTeorico = ObtenerValorTeoricoXMes(regTeorico.FactorTeoricoProg.GetValueOrDefault(0), fechaIniPeriodo, fechaFinPeriodo, listaBloqueHorario);
                        totminip = totminProgTeorico; //"Programada mensual y anual Térmicas" (IndProgramada) 

                        //antes del mes que comienza ejecutados se usará solo teórico
                        decimal totminFortTeorico = ObtenerValorTeoricoXMes(regTeorico.FactorTeoricoFort.GetValueOrDefault(0), fechaIniPeriodo, fechaFinPeriodo, listaBloqueHorario);
                        totminif = totminFortTeorico; //"Programada mensual y anual Térmicas" (IndProgramada) 
                    }
                    else
                    {
                        int numDiaMes = (fechaFinPeriodo - fechaIniPeriodo).Days + 1;
                        int numDiasTeoricos = fechaIniEjecutadoUnidad.Day - 1;
                        int numDiasEjec = numDiaMes - numDiasTeoricos;

                        //cuando existe teorico y real, el valor de minutos de indisponibilidad es un ponderado
                        decimal totminProgTeorico = MedidoresHelper.TotalHorasXRango(fechaIniPeriodo, fechaFinPeriodo, listaBloqueHorario) * 60 * regTeorico.FactorTeoricoProg.GetValueOrDefault(0);
                        decimal totminProgEjec = totminip.GetValueOrDefault(0);
                        totminip = (numDiasTeoricos * totminProgTeorico + numDiasEjec * totminProgEjec) / numDiaMes;

                        //cuando existe teorico y real, el valor de minutos de indisponibilidad es un ponderado
                        decimal totminFortTeorico = MedidoresHelper.TotalHorasXRango(fechaIniPeriodo, fechaFinPeriodo, listaBloqueHorario) * 60 * regTeorico.FactorTeoricoFort.GetValueOrDefault(0);
                        decimal totminFortEjec = totminif.GetValueOrDefault(0);
                        totminif = (numDiasTeoricos * totminFortTeorico + numDiasEjec * totminFortEjec) / numDiaMes;
                    }
                }
                else
                {
                    //meses donde solo existe ejecutado y no teoricos                
                }

                //total
                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = regUnidad.Famcodi ?? 0,
                    Emprcodi = regUnidad.Emprcodi.Value,
                    Equipadre = regUnidad.Equipadre.Value,
                    Grupocodi = regUnidad.Grupocodi,
                    Equicodi = regUnidad.Equicodi,
                    Itotunidadnomb = regUnidad.UnidadnombPR25,
                    Itotminif = totminif,
                    Itotminip = totminip,
                    Itotpe = regUnidad.Pe,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotincremental = regUnidad.Grupoincremental,
                    TieneIngresoOpCom = fechaIniPeriodo <= regUnidad.Equifechiniopcom && regUnidad.Equifechiniopcom <= fechaIniPeriodo.AddMonths(1).AddDays(-1),
                    FactorTeoricoProg = regTeorico.FactorTeoricoProg.GetValueOrDefault(0),
                    FactorTeoricoFort = regTeorico.FactorTeoricoFort.GetValueOrDefault(0),
                };

                listaTotal.Add(objUnidad);
                idTotal++;
            }

            #endregion

            #region Combinar la nueva data con el historico existente

            //Obtener el recalculo actual del historico
            List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                    && x.Irecafechaini == fechaIniPeriodo).ToList();
            //Obtener el unico rptcodi y luego su detalle. 
            List<IndReporteDTO> listaRptValidado = ListarIndReporteMensualValidado(cuadro, listaRecalculo);
            List<IndReporteTotalDTO> listaTotalHistorico = GetByCriteriaIndReporteTotals(string.Join(",", listaRptValidado.Select(x => x.Irptcodi)));

            List<IndReporteTotalDTO> listaMezcla = new List<IndReporteTotalDTO>();

            foreach (var reg in listaTotal)
            {
                listaTotalHistorico = listaTotalHistorico.Where(x => x.Equipadre != reg.Equipadre).ToList(); //quitamos las unidades termo
            }

            listaMezcla.AddRange(listaTotalHistorico); //historico menos los que se generaron del cuadro 
            listaMezcla.AddRange(listaTotal);

            #endregion

            return listaMezcla;
        }

        #endregion

        #region web Handson y excel

        public void GenerarWebReporteFortTermico(int irptcodi, string empresa, string central, out HandsonModel handson)
        {
            this.GenerarReporteFactorFortTermicoXVersionReporte(irptcodi, empresa, central
                                                    , out handson
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                       , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteDetDTO> listaRepdet, out List<IndReporteTotalDTO> listaReptotMes
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<FactorINDTeorica> listaTeorica, out List<SiParametroValorDTO> listaBloqueHorario);
        }

        public void GenerarReporteFactorFortTermicoXVersionReporte(int irptcodi, string empresa, string central
                                                    , out HandsonModel handsonFF
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                      , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteDetDTO> listaRepdet, out List<IndReporteTotalDTO> listaReptotMes
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<FactorINDTeorica> listaTeoricaExcel, out List<SiParametroValorDTO> listaBloqueHorario)
        {
            regVersion = this.GetByIdIndReporte(irptcodi);
            regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            var regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                                      , out listaReptot, out listaRepdet
                                        , out listaEmpresa, out listaCentral);

            List<IndRelacionRptDTO> listaRel = GetByCriteriaIndRelacionRpts(irptcodi);
            listaReptotMes = new List<IndReporteTotalDTO>();
            if (listaRel.Any())
            {
                listaReptotMes = GetByCriteriaIndReporteTotals(string.Join(",", listaRel.Select(x => x.Irelpridsec)));
            }

            ParametroAnexoB regAnexoB = GetParametroAnexoB(regPeriodo.FechaFin);
            List<FactorINDTeorica> listaTeorica = ListarParametroAnexoC(regPeriodo.FechaFin);
            SetValorTeoricoXUnidadTermico(listaReptot, regAnexoB, listaTeorica);

            listaTeoricaExcel = ListarParametroAnexoCExcel(listaTeorica);

            //Hora punta segun fecha de vigencia
            listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            foreach (var reg in listaCentral)
            {
                if (reg.Grupotipocogen == ConstantesAppServicio.SI)
                    reg.Central = reg.Central + " (*)";
            }

            //Salidas
            handsonFF = GetHandsonFactorFortuitaMensualTermica(regRecalculo.Irecafechaini, listaReptot, listaRepdet, listaEmpresa, listaCentral, listaBloqueHorario);
        }

        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaDet"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaBloqueHorario"></param>
        /// <returns></returns>
        public HandsonModel GetHandsonFactorFortuitaMensualTermica(DateTime fechaPeriodo
                                                                , List<IndReporteTotalDTO> listaTot, List<IndReporteDetDTO> listaDet
                                                                , List<SiEmpresaDTO> listaEmpresa, List<EqEquipoDTO> listaCentral, List<SiParametroValorDTO> listaBloqueHorario)
        {
            ListarPeriodoFactorFortuitaTermica(fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes
                                                                            , out List<IndPeriodoDTO> listaAllMes, out IndPeriodoDTO regEstadistico36Meses);

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Empresa", IsMerge = 1, Ancho = 340, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Central", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //equicodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //grupocodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Unidad", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Izquierda", });

            foreach (var item in listaAnio)
            {
                listaCabecera.Add(new CabeceraRow() { TituloRow = item.FechaDesc + "<br/>" + "HIFP (horas)", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Derecha", });
            }

            listaCabecera.Add(new CabeceraRow() { TituloRow = "   Información estadistica  <br/> movil 24 meses  <br/> HIFP(horas)", IsMerge = 1, Ancho = 220, AlineacionHorizontal = "Derecha", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Factor de Indisponibilidad <br/> Fortuita  <br/> (%)", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "CR", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = true,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            //int numColAntesdeFecha = 5;
            int numCol = listaCabecera.Count;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();
            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            foreach (var regEmp in listaEmpresa)
            {
                List<EqEquipoDTO> listaCentralXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int totalXEmp = listaTot.Where(x => x.Emprcodi == regEmp.Emprcodi).Count();

                CeldaMerge cel = new CeldaMerge();
                cel.col = 0;
                cel.row = numFilaActual;
                cel.colspan = 1;
                cel.rowspan = totalXEmp;
                listaMerge.Add(cel);

                foreach (var regCentral in listaCentralXEmp)
                {
                    if (regCentral.Equicodi == 13418)
                    { }
                    List<IndReporteTotalDTO> listaTotalX = listaTot.Where(x => x.Emprcodi == regCentral.Emprcodi && x.Equipadre == regCentral.Equipadre).ToList();

                    foreach (var regTotalX in listaTotalX)
                    {
                        List<IndReporteDetDTO> listaDetXTot = listaDet.Where(x => x.Equicodi == regTotalX.Equicodi && x.Grupocodi == regTotalX.Grupocodi).OrderBy(x => x.Idethoraini).ToList();

                        string[] matriz = new string[numCol];
                        matriz[0] = regTotalX.Emprnomb; //EMPRESA
                        matriz[1] = regTotalX.Central; //CENTRAL
                        matriz[2] = regTotalX.Equicodi.ToString();
                        matriz[3] = regTotalX.Grupocodi.ToString();
                        matriz[4] = regTotalX.Itotunidadnomb;

                        int correl = 4 + 1;
                        foreach (var item in listaAnio)
                        {
                            var regDetXRango = listaDetXTot.Find(x => x.Idethoraini == item.FechaIni && x.Idethorafin == item.FechaFin);
                            if (regDetXRango != null)
                                matriz[correl] = regDetXRango.NumHorasIf.GetValueOrDefault(0) != 0 ? regDetXRango.NumHorasIf.Value.ToString() : "-";
                            correl++;
                        }

                        matriz[correl] = regTotalX.NumHorasIf.GetValueOrDefault(0) != 0 ? regTotalX.NumHorasIf.Value.ToString() : "-";
                        matriz[correl + 1] = regTotalX.Itotfactorif != null ? (regTotalX.Itotfactorif.Value).ToString() : "";
                        matriz[correl + 2] = regTotalX.Crdesc;

                        listaDataHandson.Add(matriz);
                        numFilaActual++;
                    }
                }

            }

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return handson;
        }

        public void SetValorTeoricoXUnidadTermico(List<IndReporteTotalDTO> listaReptot, ParametroAnexoB regAnexoB, List<FactorINDTeorica> listaTeorica)
        {
            //agregar caracter a centrales de cogeneracion
            foreach (var reg in listaReptot)
            {
                bool tieneCicloComb = reg.Itotunidadnomb.Contains("COMB");
                var regTeorico = listaTeorica.Find(x => x.Fenergcodi == reg.Fenergcodi && x.TieneCicloComb == tieneCicloComb);
                if (regTeorico != null)
                {
                    reg.FactorTeoricoFort = regTeorico.FactorTeoricoFort;
                    reg.FactorTeoricoProg = regTeorico.FactorTeoricoProg;
                    reg.TipoCentral = regTeorico.TipoCentral;
                    reg.TipoCombustible = regTeorico.TipoCombustible;
                }

                reg.TieneFIF = reg.Itotfactorif > regAnexoB.FIFmensualTermo;

                reg.TieneFIPA = reg.Itotfactoripa > regAnexoB.FIPanualHidroYTermo;
                reg.TieneFIPM = reg.Itotfactoripm > regAnexoB.FIPmensualTermo;
            }
        }

        public void GenerarRptExcelFactorFortuitoTermico(string ruta, int irptcodi, string empresa, string central, out string nameFile)
        {
            this.GenerarReporteFactorFortTermicoXVersionReporte(irptcodi, empresa, central
                                                    , out HandsonModel handsonFF
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteDetDTO> listaRepdet, out List<IndReporteTotalDTO> listaReptotMes
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<FactorINDTeorica> listaTeorica, out List<SiParametroValorDTO> listaBloqueHorario);

            //Nombre de archivo
            nameFile = string.Format("PF_FIF_Térmico_{0}_Version_{1}.xlsx", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelFactorFortuitoTermico(xlPackage, "IndFortuita", 5, 4, 11, 1
                                                            , regVersion.Irecainforme, "CUADRO N° 1", regCuadro.Icuatitulo, regPeriodo.Iperianio, regPeriodo.Iperimes, regPeriodo.FechaIni
                                                            , listaReptot, listaRepdet, listaReptotMes
                                                            , listaEmpresa, listaCentral, listaTeorica, listaBloqueHorario);

                xlPackage.Save();
            }
        }

        public void GenerarHojaExcelFactorFortuitoTermico(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni, int rowIniTabla, int colIniTabla
                                                    , string informe, string nombreCuadro, string titulo, int anio, int mes, DateTime fechaPeriodo
                                                    , List<IndReporteTotalDTO> listaTot, List<IndReporteDetDTO> listaDetAnio, List<IndReporteTotalDTO> listaDetMensual
                                                    , List<SiEmpresaDTO> listaEmpresa, List<EqEquipoDTO> listaCentral, List<FactorINDTeorica> listaTeorica, List<SiParametroValorDTO> listaBloqueHorario)
        {
            //inicia C1

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            ws.TabColor = ColorTranslator.FromHtml("#FFC000");

            string font = "Arial";
            string colorCeldaTextoDefecto = "#000000";
            string colorCeldaTextoTotalMes = "#D9D9D9";
            string colorCeldaFondoDefecto = "#FFFFFF";
            string colorLineaDefecto = "#000000";

            ListarPeriodoFactorFortuitaTermica(fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes
                                                                            , out List<IndPeriodoDTO> listaAllMes, out IndPeriodoDTO regEstadistico24Meses);

            #region Titulo

            int colEmpresa = colIniTabla;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colEst = colUnidad + listaAnio.Count + 1;
            int colFort = colEst + 1;
            int colCr = colFort + 1;

            ws.Cells[rowIni, colFort].Value = informe;

            ws.Cells[rowIni + 1, colIni].Value = nombreCuadro;
            ws.Cells[rowIni + 2, colIni].Value = "PROCEDIMIENTO N° 25";
            ws.Cells[rowIni + 3, colIni].Value = titulo;
            ws.Cells[rowIni + 4, colIni].Value = $"{EPDate.f_NombreMes(mes)} {anio}";

            UtilExcel.SetFormatoCelda(ws, rowIni + 1, colIni, rowIni + 4, colIni, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);
            UtilExcel.SetFormatoCelda(ws, rowIni, colFort, rowIni, colFort, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);

            int rowTab1 = rowIniTabla;
            int rowTab2 = rowTab1 + 1;
            int rowTab3 = rowTab2 + 1;
            ws.Cells[rowTab1, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowTab1, colCentral].Value = "CENTRAL";
            ws.Cells[rowTab1, colUnidad].Value = "UNIDAD";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colEmpresa, rowTab3, colEmpresa);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colCentral, rowTab3, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colUnidad, rowTab3, colUnidad);

            UtilExcel.SetFormatoCelda(ws, rowTab1, colEmpresa, rowTab3, colUnidad, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colEmpresa, rowTab3, colEmpresa, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colCentral, rowTab3, colCentral, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colUnidad, rowTab3, colUnidad, colorLineaDefecto);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colUnidad]);

            ws.Column(colEmpresa).Width = 36;
            ws.Column(colCentral).Width = 35;
            ws.Column(colUnidad).Width = 20;

            ws.Column(colEst).Width = 21;
            ws.Column(colFort).Width = 23;

            int colDinamica = colUnidad;
            //60 meses, separados por años
            foreach (var item in listaAnio)
            {
                colDinamica++;
                ws.Cells[rowTab1 - 1, colDinamica].Value = item.TotalMes;
                ws.Cells[rowTab1, colDinamica].Value = item.FechaDesc;
                ws.Cells[rowTab3, colDinamica].Value = "HIFP (horas)";

                UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colDinamica, rowTab2, colDinamica);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colDinamica, rowTab2, colDinamica, colorLineaDefecto);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowTab3, colDinamica, rowTab3, colDinamica, colorLineaDefecto);

                //style                
                ws.Column(colDinamica).Width = 21;
            }
            UtilExcel.BorderAround(ws.Cells[rowTab1, colUnidad + 1, rowTab3, colFort - 1]);
            UtilExcel.SetFormatoCelda(ws, rowTab1 - 1, colUnidad + 1, rowTab1 - 1, colFort - 1, "Centro", "Centro", colorCeldaTextoTotalMes, colorCeldaFondoDefecto, font, 10, false, true);
            UtilExcel.SetFormatoCelda(ws, rowTab1, colUnidad + 1, rowTab3, colFort - 1, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);

            ws.Cells[rowTab1 - 1, colEst].Value = 24;
            ws.Cells[rowTab1, colEst].Value = "Información estadistica \n movil 24 meses";
            ws.Cells[rowTab3, colEst].Value = "HIFP (horas)";
            ws.Cells[rowTab1, colFort].Value = "Factor de Indisponibilidad \nFortuita \n(%)";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colEst, rowTab2, colEst);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colFort, rowTab3, colFort);

            UtilExcel.SetFormatoCelda(ws, rowTab1, colFort, rowTab3, colFort, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colFort], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colUnidad], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab1, colFort, rowTab3, colFort], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            /************************************************************************************/
            int colIniDetalle = colFort + 10;
            int colEmpresaDet = colIniDetalle;
            int colCentralDet = colEmpresaDet + 1;
            int colUnidadDet = colCentralDet + 1;
            int colFortDet = colUnidadDet + 1;
            int colProgDet = colFortDet + 1;
            int colFCentralDet = colProgDet + 1;
            int colFCombDet = colFCentralDet + 1;

            ws.Cells[rowTab1, colEmpresaDet].Value = "EMPRESA";
            ws.Cells[rowTab1, colCentralDet].Value = "CENTRAL";
            ws.Cells[rowTab1, colUnidadDet].Value = "UNIDAD";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colEmpresaDet, rowTab3, colEmpresaDet);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colCentralDet, rowTab3, colCentralDet);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colUnidadDet, rowTab3, colUnidadDet);

            UtilExcel.SetFormatoCelda(ws, rowTab1, colEmpresaDet, rowTab3, colUnidadDet, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colEmpresaDet, rowTab3, colEmpresaDet, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colCentralDet, rowTab3, colCentralDet, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colUnidadDet, rowTab3, colUnidadDet, colorLineaDefecto);

            ws.Cells[rowTab1, colFortDet].Value = "Factor de indisponibilidad teorica (1)";
            ws.Cells[rowTab2, colFortDet].Value = "Fortuita";
            ws.Cells[rowTab2, colProgDet].Value = "Programada";
            ws.Cells[rowTab3, colFortDet].Value = "%";
            ws.Cells[rowTab3, colProgDet].Value = "%";

            ws.Cells[rowTab2, colFCentralDet].Value = "Tipo de Central";
            ws.Cells[rowTab3, colFCentralDet].Value = "Central";
            ws.Cells[rowTab3, colFCombDet].Value = "Combustible";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colFortDet, rowTab1, colFCombDet);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab2, colFCentralDet, rowTab2, colFCombDet);
            UtilExcel.SetFormatoCelda(ws, rowTab1, colFortDet, rowTab3, colFCombDet, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colFortDet, rowTab1, colFCombDet, colorLineaDefecto, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab2, colFortDet, rowTab3, colProgDet, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab2, colFCentralDet, rowTab3, colFCombDet, colorLineaDefecto);

            ws.Column(colEmpresaDet).Width = 12;
            ws.Column(colCentralDet).Width = 17;
            ws.Column(colUnidadDet).Width = 20;
            ws.Column(colFortDet).Width = 18;
            ws.Column(colProgDet).Width = 18;
            ws.Column(colFCentralDet).Width = 13;
            ws.Column(colFCombDet).Width = 13;

            int colDetDinamico = colFCombDet + 1;
            foreach (var item in listaAllMes)
            {
                int colf = colDetDinamico;
                int colp = colDetDinamico + 1;

                ws.Cells[rowTab1, colf].Value = item.FechaIni;
                ws.Cells[rowTab1, colf].Style.Numberformat.Format = "mmm-yy";

                ws.Cells[rowTab2, colf].Value = "Fortuita.";
                ws.Cells[rowTab3, colf].Value = "(Horas)";

                ws.Cells[rowTab2, colp].Value = "Program.";
                ws.Cells[rowTab3, colp].Value = "(Horas)";

                UtilExcel.SetFormatoCelda(ws, rowTab1, colf, rowTab3, colp, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colf, rowTab3, colp, colorLineaDefecto);

                ws.Column(colf).Width = 8;
                ws.Column(colp).Width = 8;

                colDetDinamico += 2;
            }

            #endregion

            #region Cuerpo

            int rowIniCuerpo = rowTab3 + 1;

            foreach (var regEmp in listaEmpresa)
            {
                List<EqEquipoDTO> listaCentralXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int totalXEmp = listaTot.Where(x => x.Emprcodi == regEmp.Emprcodi).Count();

                ws.Cells[rowIniCuerpo, colEmpresa].Value = regEmp.Emprnomb;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colEmpresa, rowIniCuerpo + totalXEmp - 1, colEmpresa, colorLineaDefecto);

                //detalle
                ws.Cells[rowIniCuerpo, colEmpresaDet].Value = regEmp.Emprnomb;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colEmpresaDet, rowIniCuerpo + totalXEmp - 1, colEmpresaDet, colorLineaDefecto);

                foreach (var regCentral in listaCentralXEmp)
                {
                    if (regCentral.Equicodi == 13418)
                    { }
                    List<IndReporteTotalDTO> listaTotalX = listaTot.Where(x => x.Emprcodi == regCentral.Emprcodi && x.Equipadre == regCentral.Equipadre)
                                                                    .OrderBy(x => x.Itotincremental).ThenBy(x => x.Itotunidadnomb).ToList();
                    int totXCentral = listaTotalX.Count();

                    ws.Cells[rowIniCuerpo, colCentral].Value = regCentral.Central;
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentral, rowIniCuerpo + totXCentral - 1, colCentral, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentral, rowIniCuerpo + totXCentral - 1, colFort, colorLineaDefecto);

                    colDinamica = colUnidad;
                    foreach (var item in listaAnio)
                    {
                        colDinamica++;
                        UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colDinamica, rowIniCuerpo + totXCentral - 1, colDinamica, colorLineaDefecto);
                    }

                    //detalle
                    ws.Cells[rowIniCuerpo, colCentralDet].Value = regCentral.Central;
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentralDet, rowIniCuerpo + totXCentral - 1, colCentralDet, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentralDet, rowIniCuerpo + totXCentral - 1, colUnidadDet, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colFortDet, rowIniCuerpo + totXCentral - 1, colProgDet, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colFCentralDet, rowIniCuerpo + totXCentral - 1, colFCombDet, colorLineaDefecto);

                    colDinamica = colFCombDet + 1;
                    foreach (var item in listaAllMes)
                    {
                        UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colDinamica, rowIniCuerpo + totXCentral - 1, colDinamica + 1, colorLineaDefecto);
                        colDinamica += 2;
                    }

                    foreach (var regTotalX in listaTotalX)
                    {
                        List<IndReporteDetDTO> listaDetXTot = listaDetAnio.Where(x => x.Equicodi == regTotalX.Equicodi && x.Grupocodi == regTotalX.Grupocodi).OrderBy(x => x.Idethoraini).ToList();
                        List<IndReporteTotalDTO> listaTotxMes = listaDetMensual.Where(x => x.Equicodi == regTotalX.Equicodi && x.Grupocodi == regTotalX.Grupocodi).OrderBy(x => x.Irecafechaini).ToList();

                        //principal
                        ws.Cells[rowIniCuerpo, colUnidad].Value = regTotalX.Itotunidadnomb;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colEmpresa, rowIniCuerpo, colUnidad, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

                        //detalle
                        ws.Cells[rowIniCuerpo, colUnidadDet].Value = regTotalX.Itotunidadnomb;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colEmpresaDet, rowIniCuerpo, colUnidadDet, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

                        //principal por año
                        colDinamica = colUnidad;
                        foreach (var item in listaAnio)
                        {
                            colDinamica++;
                            var regDetXRango = listaDetXTot.Find(x => x.Idethoraini == item.FechaIni && x.Idethorafin == item.FechaFin);
                            if (regDetXRango != null && regDetXRango.NumHorasIf.GetValueOrDefault(0) != 0)
                            {
                                ws.Cells[rowIniCuerpo, colDinamica].Value = regDetXRango.NumHorasIf;
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, 2);
                            }
                            else
                            {
                                ws.Cells[rowIniCuerpo, colDinamica].Value = "-";
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                            }
                        }

                        ws.Cells[rowIniCuerpo, colEst].Value = regTotalX.NumHorasIf;
                        ws.Cells[rowIniCuerpo, colFort].Value = regTotalX.Itotfactorif;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colEst, rowIniCuerpo, colEst, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFort, rowIniCuerpo, colFort, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, regTotalX.TieneFIF);
                        UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colEst, rowIniCuerpo, colEst, 2);
                        UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowIniCuerpo, colFort, rowIniCuerpo, colFort, 2);

                        //CR
                        ws.Cells[rowIniCuerpo, colCr].Value = regTotalX.Crdesc;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colCr, rowIniCuerpo, colCr, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);

                        //detalle por año
                        ws.Cells[rowIniCuerpo, colFortDet].Value = regTotalX.FactorTeoricoFort;
                        ws.Cells[rowIniCuerpo, colProgDet].Value = regTotalX.FactorTeoricoProg;
                        ws.Cells[rowIniCuerpo, colFCentralDet].Value = regTotalX.TipoCentral;
                        ws.Cells[rowIniCuerpo, colFCombDet].Value = regTotalX.TipoCombustible;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFortDet, rowIniCuerpo, colProgDet, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                        UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowIniCuerpo, colFortDet, rowIniCuerpo, colProgDet, 2);
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFCentralDet, rowIniCuerpo, colFCombDet, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

                        colDinamica = colFCombDet + 1;
                        foreach (var item in listaAllMes)
                        {
                            int colf = colDinamica;
                            int colp = colDinamica + 1;

                            var regDetXRango = listaTotxMes.Find(x => x.Irecafechaini == item.FechaIni);

                            if (regDetXRango != null && regDetXRango.NumHorasIf.GetValueOrDefault(0) != 0)
                            {
                                ws.Cells[rowIniCuerpo, colf].Value = regDetXRango.NumHorasIf;
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colf, rowIniCuerpo, colf, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colf, rowIniCuerpo, colf, 2);
                            }
                            else
                            {
                                ws.Cells[rowIniCuerpo, colf].Value = "-";
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colf, rowIniCuerpo, colf, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                            }

                            if (regDetXRango != null && regDetXRango.NumHorasIp.GetValueOrDefault(0) != 0)
                            {
                                ws.Cells[rowIniCuerpo, colp].Value = regDetXRango.NumHorasIp;
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colp, rowIniCuerpo, colp, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colp, rowIniCuerpo, colp, 2);
                            }
                            else
                            {
                                ws.Cells[rowIniCuerpo, colp].Value = "-";
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colp, rowIniCuerpo, colp, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                            }

                            colDinamica += 2;
                        }

                        rowIniCuerpo++;
                    }
                }
            }

            //UtilExcel.AllBorders(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colFAnual]);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colFort], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colUnidad], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colFort, rowIniCuerpo - 1, colFort], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            #endregion

            #region Cuerpo Numero días y horas

            var rowIniCuerpo2 = rowIniCuerpo + 1;
            int colDinamica2 = colUnidad;

            ws.Cells[rowIniCuerpo2, colUnidad].Value = "Cantidad de días";
            ws.Cells[rowIniCuerpo2 + 1, colUnidad].Value = "Cantidad de horas";

            foreach (var item in listaAnio)
            {
                ws.Cells[rowIniCuerpo2, ++colDinamica2].Value = item.TotalDias;
                ws.Cells[rowIniCuerpo2 + 1, colDinamica2].Value = item.TotalHP;
            }
            ws.Cells[rowIniCuerpo2, ++colDinamica2].Value = regEstadistico24Meses.TotalDias;
            ws.Cells[rowIniCuerpo2 + 1, colDinamica2].Value = regEstadistico24Meses.TotalHP;

            UtilExcel.SetFormatoCelda(ws, rowIniCuerpo2, colUnidad, rowIniCuerpo2 + 1, colUnidad, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            UtilExcel.SetFormatoCelda(ws, rowIniCuerpo2, colUnidad + 1, rowIniCuerpo2 + 1, colEst, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            UtilExcel.AllBorders(ws.Cells[rowIniCuerpo2, colUnidad, rowIniCuerpo2 + 1, colEst]);
            UtilExcel.BorderAround(ws.Cells[rowIniCuerpo2, colUnidad, rowIniCuerpo2 + 1, colEst], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            #endregion

            #region Nota

            int rowIniNota = rowIniCuerpo2 + 3;

            ws.Cells[rowIniNota, colEmpresa].Value = "HIFP : Número de horas de indisponibilidad fortuita durante las horas punta del periodo estadístico";
            UtilExcel.SetFormatoCelda(ws, rowIniNota, colEmpresa, rowIniNota, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

            ws.Cells[rowIniNota + 2, colEmpresa].Value = "Notas:";
            UtilExcel.SetFormatoCelda(ws, rowIniNota + 2, colEmpresa, rowIniNota + 2, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 11, true);

            ws.Cells[rowIniNota + 3, colEmpresa].Value = " - En caso la unidad supere los límites de indisponibilidad fortuita, programada anual y/o mensual permitidos, será considerada para la evaluación del mes siguiente con un costo ";
            ws.Cells[rowIniNota + 4, colEmpresa].Value = "   variable igual al costo de racionamiento.";
            ws.Cells[rowIniNota + 5, colEmpresa].Value = " (*) De tratarse de una Central de Cogeneración no Calificada, solo aplicable cuando la central no opere asociada a calor útil. ";
            UtilExcel.SetFormatoCelda(ws, rowIniNota + 3, colEmpresa, rowIniNota + 5, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 9, false);

            #endregion

            #region Anexo C

            int rowIniAnexo = rowIniNota + 5;
            int colIniAnexo = colUnidadDet;

            ws.Cells[rowIniAnexo, colIniAnexo].Value = "(1)  Valores de acuerdo al procedimiento N°25, Anexo C.";
            UtilExcel.SetFormatoCelda(ws, rowIniAnexo, colIniAnexo, rowIniAnexo, colIniAnexo, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 11, false);

            rowIniAnexo += 2;
            ws.Cells[rowIniAnexo, colIniAnexo].Value = "TABLA APROBADA EN EL PR-25";
            ws.Cells[rowIniAnexo + 1, colIniAnexo].Value = "Resolución N° 055-2017-OS/CD del 29 de marzo de 2017";
            ws.Cells[rowIniAnexo + 2, colIniAnexo].Value = "ANEXO C";
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniAnexo, colIniAnexo, rowIniAnexo + 2, colIniAnexo + 3, colorLineaDefecto);
            UtilExcel.SetFormatoCelda(ws, rowIniAnexo, colIniAnexo, rowIniAnexo + 2, colIniAnexo + 3, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

            rowIniAnexo += 3;
            ws.Cells[rowIniAnexo, colIniAnexo].Value = "Central";
            ws.Cells[rowIniAnexo, colIniAnexo + 1].Value = "Combustible";
            ws.Cells[rowIniAnexo, colIniAnexo + 2].Value = "FORTUITA %";
            ws.Cells[rowIniAnexo, colIniAnexo + 3].Value = "PROGRAMADA %";
            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniAnexo, colIniAnexo, rowIniAnexo, colIniAnexo + 3, colorLineaDefecto);
            UtilExcel.SetFormatoCelda(ws, rowIniAnexo, colIniAnexo, rowIniAnexo, colIniAnexo + 3, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

            UtilExcel.BorderCeldasLineaDelgada(ws, rowIniAnexo + 1, colIniAnexo, rowIniAnexo + listaTeorica.Count, colIniAnexo + 3, colorLineaDefecto);
            UtilExcel.SetFormatoCelda(ws, rowIniAnexo + 1, colIniAnexo, rowIniAnexo + listaTeorica.Count, colIniAnexo + 1, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            UtilExcel.SetFormatoCelda(ws, rowIniAnexo + 1, colIniAnexo + 2, rowIniAnexo + listaTeorica.Count, colIniAnexo + 3, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            rowIniAnexo += 1;
            foreach (var reg in listaTeorica)
            {
                ws.Cells[rowIniAnexo, colIniAnexo].Value = reg.TipoCentral;
                ws.Cells[rowIniAnexo, colIniAnexo + 1].Value = reg.TipoCombustible;
                ws.Cells[rowIniAnexo, colIniAnexo + 2].Value = reg.FactorTeoricoFort;
                ws.Cells[rowIniAnexo, colIniAnexo + 3].Value = reg.FactorTeoricoProg;
                UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowIniAnexo, colIniAnexo + 2, rowIniAnexo, colIniAnexo + 3, 2);
                rowIniAnexo += 1;
            }

            #endregion

            ws.View.FreezePanes(rowTab3 + 1, colUnidad + 1);
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }


        #endregion

        /// <summary>
        /// Periodo maximo en que esta disponible la edición manual de valores de Factores de indisponibilidad
        /// </summary>
        /// <returns></returns>
        public DateTime GetPeriodoMaxHistTermo()
        {
            var reg = FactorySic.GetSiParametroValorRepository().GetById(ConstantesIndisponibilidades.SiparvcodiTermo);
            return DateTime.ParseExact(reg.Siparvnota, ConstantesAppServicio.FormatoMes, CultureInfo.InvariantCulture);
        }

        #endregion

        #region Factor 2: Programados Térmico

        public int ProcesarFactorProgramadoTermico(int irecacodi, int idReporteCuadro1, int idReporteCuadro2, int idReporteCuadro14, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25FactorProgTermico;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            //Cuadro 1 y Cuadro 2 guardarlos como historico
            DateTime fechaFinHist = GetPeriodoMaxHistTermo();
            if (regRecalculo.Irecafechaini > fechaFinHist)
            {
                ProcesarCuadro1y2ParaHistorico(irecacodi, idReporteCuadro1, idReporteCuadro2, usuario);
            }

            ReporteInsumoPR25 regSaveBD = GenerarReporteFactorProgramadoTermico(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, idReporteCuadro14);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = ConstantesAppServicio.Activo,
            };

            if (EsVersionCreableMensualCuadroRelacion(regCuadro, regRecalculo, regReporte, regSaveBD.ListaRptTot, regSaveBD.ListaRptDet, regSaveBD.ListaRelRpt))
            {
                CambiarAEstadoHistorico(cuadro, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                regSaveBD.Reporte = regReporte;

                return GuardarReporteIndispBDTransaccional(regSaveBD);
            }

            return 0;
        }

        #region Cálculo

        private ReporteInsumoPR25 GenerarReporteFactorProgramadoTermico(DateTime fechaIni, DateTime fechaFin, int idReporteCuadro14)
        {
            //insumos unidades
            List<EqEquipoDTO> listaUnidad = ListarUnidadesOpComercialByMes(ConstantesIndisponibilidades.ReportePR25HistoricoTermo, fechaFin);

            //insumo indisponibilidades mensuales
            List<IndReporteTotalDTO> listaDetalleMensual = ListarDataIndisponibilidadHistoricoMensual(ConstantesIndisponibilidades.ReportePR25HistoricoTermo, fechaFin, out List<IndRelacionRptDTO> listaRel);

            //insumo Disponibilidad de Calor Util
            CalculoPotenciaFirmeCogeneracion(idReporteCuadro14, fechaIni, fechaFin, out List<PfReporteTotalDTO> listaPFcog);

            //parámetros
            ParametroAnexoB regAnexoB = GetParametroAnexoB(fechaFin);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            //realizar calculo
            GenerarTotalFactorProgramadoTermico(fechaIni, listaUnidad, listaDetalleMensual, regAnexoB, listaPFcog, listaBloqueHorario, out List<IndReporteTotalDTO> listaTotal, out List<IndReporteDetDTO> listaDet);

            //
            ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
            regSaveBD.ListaRptTot = listaTotal;
            regSaveBD.ListaRptDet = listaDet;
            regSaveBD.ListaRelRpt = listaRel;

            return regSaveBD;
        }

        private void GenerarTotalFactorProgramadoTermico(DateTime fechaPeriodo, List<EqEquipoDTO> listaUnidad, List<IndReporteTotalDTO> listaDetalleMensual
                                                        , ParametroAnexoB regAnexoB, List<PfReporteTotalDTO> listaPFcog, List<SiParametroValorDTO> listaBloqueHorario
                                                        , out List<IndReporteTotalDTO> listaTotal, out List<IndReporteDetDTO> listaDet)
        {
            listaTotal = new List<IndReporteTotalDTO>();
            listaDet = new List<IndReporteDetDTO>();

            ListarPeriodoFactorProgramado(ConstantesIndisponibilidades.ReportePR25HistoricoTermo, fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes, out List<IndPeriodoDTO> listaAllMeses
                                                , out IndPeriodoDTO regEstadisticoAnual, out IndPeriodoDTO regEstadisticoMensual);

            int idTotal = 1;
            foreach (var regUnidad in listaUnidad)
            {
                if (regUnidad.Equicodi == 58)
                { }

                var regTotal = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Emprcodi = regUnidad.Emprcodi.Value,
                    Equipadre = regUnidad.Equipadre.Value,
                    Equicodi = regUnidad.Equicodi,
                    Grupocodi = regUnidad.Grupocodi,
                    Famcodi = ConstantesHorasOperacion.IdTipoTermica,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotunidadnomb = regUnidad.UnidadnombPR25,
                    Itotincremental = regUnidad.Grupoincremental,
                    Itotpe = regUnidad.Pe
                };

                //el detalle mensual solo debe tener la data con meses validos (junio a noviembre)
                List<IndReporteTotalDTO> listaDetXUnidad = new List<IndReporteTotalDTO>();
                foreach (var anio in listaAnio)
                {
                    var listaDetXUnidadTmp = listaDetalleMensual.Where(x => anio.FechaIni <= x.Irecafechaini && x.Irecafechaini <= anio.FechaFin
                                                                    && x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi).ToList();
                    listaDetXUnidad.AddRange(listaDetXUnidadTmp);
                }

                regTotal.Itotfactoripm = 0;
                regTotal.Itotfactoripa = 0;

                decimal valorMinProgMensual = listaDetXUnidad.Sum(x => x.Itotminip ?? 0);
                decimal valorFactorProgMensual = valorMinProgMensual / (regEstadisticoMensual.TotalHP * 60.0m);
                if (valorFactorProgMensual > 0) regTotal.Itotfactoripm = valorFactorProgMensual;

                //el detalle mensual solo debe tener la data con meses validos (junio a noviembre)
                List<IndReporteTotalDTO> listaDetXUltimoAnio = listaDetXUnidad.Where(x => regEstadisticoAnual.FechaIni <= x.Irecafechaini && x.Irecafechaini <= regEstadisticoAnual.FechaFin).ToList();

                //obtener factor
                decimal valorMinProgAnual = listaDetXUltimoAnio.Sum(x => x.Itotminip ?? 0);
                decimal valorFactorProgAnual = valorMinProgAnual / (regEstadisticoAnual.TotalHP * 60.0m);
                if (valorFactorProgAnual > 0) regTotal.Itotfactoripa = valorFactorProgAnual;

                //tiene costo de racionamiento CR
                regTotal.Itotcr = string.Empty;
                if (regTotal.Itotfactoripm > regAnexoB.FIPmensualTermo
                    || regTotal.Itotfactoripa > regAnexoB.FIPanualHidroYTermo)
                {
                    // (*) De tratarse de una Central de Cogeneración no Calificada, solo aplicable cuando la central no opere asociada a calor útil. 
                    if (regUnidad.Grupotipocogen == ConstantesAppServicio.SI)
                    {
                        var pFTermoCoGen = listaPFcog.Find(x => x.Equipadre == regUnidad.Equipadre);
                        if (pFTermoCoGen != null && pFTermoCoGen.TotalMinutosSinCalorUtil > 0)
                        {
                            regTotal.Itotcr = ConstantesIndisponibilidades.FlagCR;
                        }
                    }
                    else
                    {
                        regTotal.Itotcr = ConstantesIndisponibilidades.FlagCR;
                    }
                }

                //detalle por rango de 12 meses
                foreach (var anio in listaAnio)
                {
                    decimal valorMinXRango = listaDetXUnidad.Where(x => anio.FechaIni <= x.Irecafechaini && x.Irecafechaini <= anio.FechaFin).Sum(x => x.Itotminip ?? 0);
                    //decimal valorHorasFort = valorMinFort / 60.0m;

                    //Enero - Diciembre 2018
                    IndReporteDetDTO regDet = new IndReporteDetDTO()
                    {
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre.Value,
                        Equicodi = regUnidad.Equicodi,
                        Grupocodi = regUnidad.Grupocodi,
                        Idetincremental = regUnidad.Grupoincremental,
                        Idetminip = valorMinXRango,
                        Idethoraini = anio.FechaIni,
                        Idethorafin = anio.FechaFin,
                        Itotcodi = idTotal
                    };
                    listaDet.Add(regDet);
                }

                listaTotal.Add(regTotal);
                idTotal++;
            }
        }

        /// <summary>
        /// Permite realizar búsquedas en la tabla PfRecalculo
        /// </summary>
        public List<PfRecalculoDTO> ListarPfRecalculo(int anio, int mes)
        {
            var lista = FactorySic.GetPfRecalculoRepository().GetByCriteria(-1, anio, mes).OrderByDescending(x => x.Pfrecacodi).ToList();

            foreach (var reg in lista)
                PotenciaFirmeAppServicio.FormatearPfRecalculo(reg);

            return lista;
        }

        public PfRecalculoDTO GetByIdPfRecalculo(int pfrecacodi)
        {
            return (new PotenciaFirmeAppServicio()).GetByIdPfRecalculo(pfrecacodi);
        }

        #endregion

        #region web Handson y excel

        public void GenerarWebReporteProgramadoTermo(int irptcodi, string empresa, string central, out HandsonModel handson)
        {
            this.GenerarReporteFactorProgramadoTermoXVersionReporte(irptcodi, empresa, central
                                                    , out handson
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                      , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteDetDTO> listaRepdet
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<SiParametroValorDTO> listaBloqueHorario);
        }

        public void GenerarReporteFactorProgramadoTermoXVersionReporte(int irptcodi, string empresa, string central
                                                    , out HandsonModel handsonFP
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteDetDTO> listaRepdet
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<SiParametroValorDTO> listaBloqueHorario)
        {
            regVersion = this.GetByIdIndReporte(irptcodi);
            regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            var regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                                        , out listaReptot, out listaRepdet
                                        , out listaEmpresa, out listaCentral);

            ParametroAnexoB regAnexoB = GetParametroAnexoB(regPeriodo.FechaFin);
            List<FactorINDTeorica> listaTeorica = ListarParametroAnexoC(regPeriodo.FechaFin);
            SetValorTeoricoXUnidadTermico(listaReptot, regAnexoB, listaTeorica);

            //Hora punta segun fecha de vigencia
            listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            foreach (var reg in listaCentral)
            {
                if (reg.Grupotipocogen == ConstantesAppServicio.SI)
                    reg.Central = reg.Central + " (*)";
            }

            //Salidas
            handsonFP = GetHandsonFactorProgramadoTermo(regRecalculo.Irecafechaini, listaReptot, listaRepdet, listaEmpresa, listaCentral, listaBloqueHorario);
        }

        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaDet"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaBloqueHorario"></param>
        /// <returns></returns>
        public HandsonModel GetHandsonFactorProgramadoTermo(DateTime fechaPeriodo
                                                                , List<IndReporteTotalDTO> listaTot, List<IndReporteDetDTO> listaDet
                                                                , List<SiEmpresaDTO> listaEmpresa, List<EqEquipoDTO> listaCentral, List<SiParametroValorDTO> listaBloqueHorario)
        {

            ListarPeriodoFactorProgramado(ConstantesIndisponibilidades.ReportePR25HistoricoTermo, fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes, out List<IndPeriodoDTO> listaAllMeses
                                                , out IndPeriodoDTO regEstadisticoAnual, out IndPeriodoDTO regEstadisticoMensual);

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Empresa", IsMerge = 1, Ancho = 200, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Central", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //equicodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //grupocodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Unidad", IsMerge = 1, Ancho = 100, AlineacionHorizontal = "Izquierda", });

            foreach (var item in listaAnio)
            {
                listaCabecera.Add(new CabeceraRow() { TituloRow = item.FechaIni.Year + "<br/>" + item.FechaDesc, IsMerge = 1, Ancho = 50, AlineacionHorizontal = "Derecha", });
            }

            listaCabecera.Add(new CabeceraRow() { TituloRow = "FIP <br/> Mensual", IsMerge = 1, Ancho = 100, AlineacionHorizontal = "Derecha", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "FIP <br/> Anual", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Derecha", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "FIP <br/> CR", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = true,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            //int numColAntesdeFecha = 5;
            int numCol = listaCabecera.Count;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();
            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            foreach (var regEmp in listaEmpresa)
            {
                List<EqEquipoDTO> listaCentralXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int totalXEmp = listaTot.Where(x => x.Emprcodi == regEmp.Emprcodi).Count();

                CeldaMerge cel = new CeldaMerge();
                cel.col = 0;
                cel.row = numFilaActual;
                cel.colspan = 1;
                cel.rowspan = totalXEmp;
                listaMerge.Add(cel);

                foreach (var regCentral in listaCentralXEmp)
                {
                    if (regCentral.Equicodi == 13418)
                    { }
                    List<IndReporteTotalDTO> listaTotalX = listaTot.Where(x => x.Emprcodi == regCentral.Emprcodi && x.Equipadre == regCentral.Equipadre).ToList();

                    foreach (var regTotalX in listaTotalX)
                    {
                        List<IndReporteDetDTO> listaDetXTot = listaDet.Where(x => x.Equicodi == regTotalX.Equicodi && x.Grupocodi == regTotalX.Grupocodi).OrderBy(x => x.Idethoraini).ToList();

                        string[] matriz = new string[numCol];
                        matriz[0] = regTotalX.Emprnomb; //EMPRESA
                        matriz[1] = regTotalX.Central; //CENTRAL
                        matriz[2] = regTotalX.Equicodi.ToString();
                        matriz[3] = regTotalX.Grupocodi.ToString();
                        matriz[4] = regTotalX.Itotunidadnomb;

                        int correl = 4 + 1;
                        foreach (var item in listaAnio)
                        {
                            var regDetXRango = listaDetXTot.Find(x => x.Idethoraini == item.FechaIni && x.Idethorafin == item.FechaFin);
                            if (regDetXRango != null)
                                matriz[correl] = regDetXRango.NumHorasIp.GetValueOrDefault(0) != 0 ? regDetXRango.NumHorasIp.Value.ToString() : "-";
                            correl++;
                        }

                        matriz[correl + 0] = regTotalX.Itotfactoripm != null ? (regTotalX.Itotfactoripm.Value).ToString() : "";
                        matriz[correl + 1] = regTotalX.Itotfactoripa != null ? (regTotalX.Itotfactoripa.Value).ToString() : "";
                        matriz[correl + 2] = regTotalX.Crdesc;

                        listaDataHandson.Add(matriz);
                        numFilaActual++;
                    }
                }
            }

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return handson;
        }

        public void GenerarRptExcelFactorProgramadoTermo(string ruta, int irptcodi, string empresa, string central, out string nameFile)
        {
            this.GenerarReporteFactorProgramadoTermoXVersionReporte(irptcodi, empresa, central
                                                    , out HandsonModel handsonFP
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteDetDTO> listaRepdet
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<SiParametroValorDTO> listaBloqueHorario);

            //Nombre de archivo
            nameFile = string.Format("PF_FIP_Térmicas_{0}_Version_{1}.xlsx", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelFactorProgramadoTermo(xlPackage, "IndProgramada", 1, 7, 7, 2
                                                            , regVersion.Irecainforme, "CUADRO N°  2", regCuadro.Icuatitulo, regPeriodo.Iperianio, regPeriodo.Iperimes, regPeriodo.FechaIni
                                                            , listaReptot, listaRepdet
                                                            , listaEmpresa, listaCentral, listaBloqueHorario);

                xlPackage.Save();
            }
        }

        public void GenerarHojaExcelFactorProgramadoTermo(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni, int rowIniTabla, int colIniTabla
                                                    , string informe, string nombreCuadro, string titulo, int anio, int mes, DateTime fechaPeriodo
                                                    , List<IndReporteTotalDTO> listaTot, List<IndReporteDetDTO> listaDetAnio
                                                    , List<SiEmpresaDTO> listaEmpresa, List<EqEquipoDTO> listaCentral, List<SiParametroValorDTO> listaBloqueHorario)
        {
            //inicia C1

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            ws.TabColor = ColorTranslator.FromHtml("#FFC000");

            string font = "Arial";
            string colorCeldaTextoDefecto = "#000000";
            string colorCeldaTextoTotalMes = "#D9D9D9";
            string colorCeldaFondoDefecto = "#FFFFFF";
            string colorLineaDefecto = "#000000";

            ListarPeriodoFactorProgramado(ConstantesIndisponibilidades.ReportePR25HistoricoTermo, fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes, out List<IndPeriodoDTO> listaAllMeses
                                                , out IndPeriodoDTO regEstadisticoAnual, out IndPeriodoDTO regEstadisticoMensual);

            #region Titulo

            int colEmpresa = colIniTabla;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colFtpor = colUnidad + 1;
            int colFtcentral = colFtpor + 1;
            int colFtcomb = colFtcentral + 1;
            int colFMensual = colFtcomb + listaAnio.Count + 1;
            int colFAnual = colFMensual + 1;
            int colCr = colFAnual + 1;

            ws.Cells[rowIni, colFMensual].Value = informe;
            ws.Cells[rowIni + 1, colIni].Value = nombreCuadro;
            ws.Cells[rowIni + 2, colIni].Value = titulo;
            ws.Cells[rowIni + 3, colIni].Value = $"{EPDate.f_NombreMes(mes)} {anio}";

            UtilExcel.SetFormatoCelda(ws, rowIni + 1, colIni, rowIni + 3, colIni, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);
            UtilExcel.SetFormatoCelda(ws, rowIni, colFMensual, rowIni, colFMensual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);

            int rowTab1 = rowIniTabla;
            int rowTab2 = rowTab1 + 1;
            int rowTab3 = rowTab2 + 1;
            ws.Cells[rowTab1, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowTab1, colCentral].Value = "CENTRAL";
            ws.Cells[rowTab1, colUnidad].Value = "UNIDAD";
            ws.Cells[rowTab1, colFtpor].Value = "Fact. de indisp. teorica (1)";
            ws.Cells[rowTab2, colFtpor].Value = "%";
            ws.Cells[rowTab2, colFtcentral].Value = "Central";
            ws.Cells[rowTab2, colFtcomb].Value = "Comb.";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colEmpresa, rowTab3, colEmpresa);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colCentral, rowTab3, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colUnidad, rowTab3, colUnidad);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colFtpor, rowTab1, colFtcomb);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab2, colFtpor, rowTab3, colFtpor);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab2, colFtcentral, rowTab3, colFtcentral);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab2, colFtcomb, rowTab3, colFtcomb);

            UtilExcel.SetFormatoCelda(ws, rowTab1, colEmpresa, rowTab3, colFtcomb, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colFtcomb]);

            ws.Column(colEmpresa).Width = 30;
            ws.Column(colCentral).Width = 22;
            ws.Column(colUnidad).Width = 18;
            ws.Column(colFtpor).Width = 8;
            ws.Column(colFtcentral).Width = 12;
            ws.Column(colFtcomb).Width = 10;

            ws.Column(colFMensual).Width = 9;
            ws.Column(colFAnual).Width = 9;


            int colDinamica = colFtcomb;
            //60 meses, separados por años
            foreach (var item in listaAnio)
            {
                colDinamica++;
                ws.Cells[rowTab1 - 1, colDinamica].Value = item.TotalMes;
                ws.Cells[rowTab1, colDinamica].Value = item.FechaIni.Year;
                ws.Cells[rowTab2, colDinamica].Value = item.FechaDesc;

                //style                
                ws.Column(colDinamica).Width = 10;
            }
            UtilExcel.BorderAround(ws.Cells[rowTab1, colFtcomb + 1, rowTab3, colFMensual - 1]);
            UtilExcel.SetFormatoCelda(ws, rowTab1 - 1, colFtcomb + 1, rowTab1 - 1, colFMensual - 1, "Centro", "Centro", colorCeldaTextoTotalMes, colorCeldaFondoDefecto, font, 8, false, true);
            UtilExcel.SetFormatoCelda(ws, rowTab1, colFtcomb + 1, rowTab1, colFMensual - 1, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);

            ws.Cells[rowTab1, colFMensual].Value = "Factor de Indisponibilidad  Programada";
            ws.Cells[rowTab3, colFMensual].Value = "Mensual";
            ws.Cells[rowTab3, colFAnual].Value = "Anual";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colFMensual, rowTab2, colFAnual);

            UtilExcel.SetFormatoCelda(ws, rowTab1, colFMensual, rowTab3, colFAnual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colFMensual, rowTab2, colFAnual]);
            UtilExcel.BorderAround(ws.Cells[rowTab3, colFMensual, rowTab3, colFMensual]);
            UtilExcel.BorderAround(ws.Cells[rowTab3, colFAnual, rowTab3, colFAnual]);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colFAnual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colUnidad], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab1, colFMensual, rowTab3, colFAnual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            #endregion

            #region Cuerpo

            int rowIniCuerpo = rowTab3 + 1;

            foreach (var regEmp in listaEmpresa)
            {
                List<EqEquipoDTO> listaCentralXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int totalXEmp = listaTot.Where(x => x.Emprcodi == regEmp.Emprcodi).Count();

                ws.Cells[rowIniCuerpo, colEmpresa].Value = regEmp.Emprnomb;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colEmpresa, rowIniCuerpo + totalXEmp - 1, colEmpresa, colorLineaDefecto);

                foreach (var regCentral in listaCentralXEmp)
                {
                    if (regCentral.Equicodi == 13418)
                    { }
                    List<IndReporteTotalDTO> listaTotalX = listaTot.Where(x => x.Emprcodi == regCentral.Emprcodi && x.Equipadre == regCentral.Equipadre)
                                                                    .OrderBy(x => x.Itotincremental).ThenBy(x => x.Itotunidadnomb).ToList();
                    int totXCentral = listaTotalX.Count();

                    ws.Cells[rowIniCuerpo, colCentral].Value = regCentral.Central;
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentral, rowIniCuerpo + totXCentral - 1, colFAnual, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colFtpor, rowIniCuerpo + totXCentral - 1, colFtcomb, colorLineaDefecto);

                    foreach (var regTotalX in listaTotalX)
                    {
                        List<IndReporteDetDTO> listaDetXTot = listaDetAnio.Where(x => x.Equicodi == regTotalX.Equicodi && x.Grupocodi == regTotalX.Grupocodi).OrderBy(x => x.Idethoraini).ToList();

                        //principal
                        ws.Cells[rowIniCuerpo, colUnidad].Value = regTotalX.Itotunidadnomb;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colEmpresa, rowIniCuerpo, colUnidad, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

                        //detalle por año
                        ws.Cells[rowIniCuerpo, colFtpor].Value = regTotalX.FactorTeoricoProg;
                        ws.Cells[rowIniCuerpo, colFtcentral].Value = regTotalX.TipoCentral;
                        ws.Cells[rowIniCuerpo, colFtcomb].Value = regTotalX.TipoCombustible;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFtpor, rowIniCuerpo, colFtpor, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                        UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowIniCuerpo, colFtpor, rowIniCuerpo, colFtpor, 2);
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFtcentral, rowIniCuerpo, colFtcomb, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

                        //detalle principal por año
                        colDinamica = colFtcomb;
                        foreach (var item in listaAnio)
                        {
                            colDinamica++;
                            var regDetXRango = listaDetXTot.Find(x => x.Idethoraini == item.FechaIni && x.Idethorafin == item.FechaFin);
                            if (regDetXRango != null && regDetXRango.NumHorasIp.GetValueOrDefault(0) != 0)
                            {
                                ws.Cells[rowIniCuerpo, colDinamica].Value = regDetXRango.NumHorasIp;
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, 2);
                            }
                            else
                            {
                                ws.Cells[rowIniCuerpo, colDinamica].Value = "-";
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                            }
                        }

                        ws.Cells[rowIniCuerpo, colFMensual].Value = regTotalX.Itotfactoripm;
                        ws.Cells[rowIniCuerpo, colFAnual].Value = regTotalX.Itotfactoripa;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFMensual, rowIniCuerpo, colFMensual, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, regTotalX.TieneFIPM);
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFAnual, rowIniCuerpo, colFAnual, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, regTotalX.TieneFIPA);
                        UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowIniCuerpo, colFMensual, rowIniCuerpo, colFAnual, 2);

                        //CR
                        ws.Cells[rowIniCuerpo, colCr].Value = regTotalX.Crdesc;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colCr, rowIniCuerpo, colCr, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);

                        rowIniCuerpo++;
                    }
                }
            }

            //UtilExcel.AllBorders(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colFAnual]);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colFAnual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colUnidad], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colFMensual, rowIniCuerpo - 1, colFAnual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            #endregion

            #region Cuerpo Numero días y horas

            var rowIniCuerpo2 = rowIniCuerpo + 5;
            int colDinamica2 = colFtcentral;

            ws.Cells[rowIniCuerpo2, colFtcentral].Value = "Cantidad de días";
            ws.Cells[rowIniCuerpo2 + 1, colFtcentral].Value = "Cantidad de horas";

            ++colDinamica2;
            foreach (var item in listaAnio)
            {
                ws.Cells[rowIniCuerpo2, ++colDinamica2].Value = item.TotalDias;
                ws.Cells[rowIniCuerpo2 + 1, colDinamica2].Value = item.TotalHP;
            }
            ws.Cells[rowIniCuerpo2, ++colDinamica2].Value = regEstadisticoMensual.TotalDias;
            ws.Cells[rowIniCuerpo2 + 1, colDinamica2].Value = regEstadisticoMensual.TotalHP;

            UtilExcel.SetFormatoCelda(ws, rowIniCuerpo2, colFtcentral, rowIniCuerpo2 + 1, colFtcentral, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            UtilExcel.SetFormatoCelda(ws, rowIniCuerpo2, colFtcentral + 1, rowIniCuerpo2 + 1, colFMensual, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            UtilExcel.AllBorders(ws.Cells[rowIniCuerpo2, colFtcentral, rowIniCuerpo2 + 1, colFMensual]);
            UtilExcel.BorderAround(ws.Cells[rowIniCuerpo2, colFtcentral, rowIniCuerpo2 + 1, colFMensual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            #endregion

            #region Nota

            int rowIniNota = rowIniCuerpo2 + 3;

            ws.Cells[rowIniNota, colEmpresa].Value = "(1)  Valores de acuerdo al PR - N° 25, Anexo C.,  aplicados al periodo 2003 - 2012";
            UtilExcel.SetFormatoCelda(ws, rowIniNota, colEmpresa, rowIniNota, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 11, false);

            ws.Cells[rowIniNota + 1, colEmpresa].Value = "Notas:";
            UtilExcel.SetFormatoCelda(ws, rowIniNota + 1, colEmpresa, rowIniNota + 1, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 11, true);

            ws.Cells[rowIniNota + 2, colEmpresa].Value = " - En caso la unidad supere los límites de indisponibilidad anual y/o mensual permitidos, será considerada para la evaluación del mes siguiente con un costo variable igual al costo de racionamiento.";
            ws.Cells[rowIniNota + 3, colEmpresa].Value = " (*) De tratarse de una Central de Cogeneración no Calificada, solo aplicable cuando la central no opere asociada a calor útil. ";
            UtilExcel.SetFormatoCelda(ws, rowIniNota + 2, colEmpresa, rowIniNota + 3, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 11, false);

            #endregion

            ws.View.FreezePanes(rowTab3 + 1, colUnidad);
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }

        #endregion

        #endregion

        #region Factor 3: Programado Hidro 

        public int ProcesarFactorProgramadoHidro(int irecacodi, int idReporteCuadro4, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25FactorProgHidro;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            //Cuadro 4 guardarlos como historico y si existe nuevas unidades hidraulicas, agregar su historico para el mes anterior hasta el inicio de historico
            DateTime fechaFinHist = GetPeriodoMaxHistHidro();
            if (regRecalculo.Irecafechaini > fechaFinHist)
            {
                ProcesarCuadro4ParaHistorico(irecacodi, idReporteCuadro4, usuario);
            }

            //generar el reporte SOLO con las unidades que tienen operación comercial durante el mes
            ReporteInsumoPR25 regSaveBD = GenerarReporteFactorProgramadoHidro(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = ConstantesAppServicio.Activo,
            };

            if (EsVersionCreableMensualCuadroRelacion(regCuadro, regRecalculo, regReporte, regSaveBD.ListaRptTot, regSaveBD.ListaRptDet, regSaveBD.ListaRelRpt))
            {
                CambiarAEstadoHistorico(cuadro, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                regSaveBD.Reporte = regReporte;

                return GuardarReporteIndispBDTransaccional(regSaveBD);
            }

            return 0;
        }

        #region Cálculo mes actual

        private ReporteInsumoPR25 GenerarReporteFactorProgramadoHidro(DateTime fechaIni, DateTime fechaFin)
        {
            //insumos unidades

            // la lista de unidades comprende generadores y centrales que tienen operacion comercial durante el mes del recalculo       
            List<EqEquipoDTO> listaUnidad = ListarUnidadesOpComercialByMes(ConstantesIndisponibilidades.ReportePR25HistoricoHidro, fechaFin);

            //insumo indisponibilidades mensuales
            List<IndReporteTotalDTO> listaDetalleMensual = ListarDataIndisponibilidadHistoricoMensual(ConstantesIndisponibilidades.ReportePR25HistoricoHidro, fechaFin
                                                                                    , out List<IndRelacionRptDTO> listaRel);

            //parámetros
            ParametroAnexoB regAnexoB = GetParametroAnexoB(fechaFin);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            //realizar calculo
            GenerarTotalFactorProgramadoHidro(fechaIni, listaUnidad, listaDetalleMensual, regAnexoB, listaBloqueHorario, out List<IndReporteTotalDTO> listaTotal, out List<IndReporteDetDTO> listaDet);

            //
            ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
            regSaveBD.ListaRptTot = listaTotal;
            regSaveBD.ListaRptDet = listaDet;
            regSaveBD.ListaRelRpt = listaRel;

            return regSaveBD;
        }

        private void GenerarTotalFactorProgramadoHidro(DateTime fechaPeriodo, List<EqEquipoDTO> listaUnidad, List<IndReporteTotalDTO> listaDetalleMensual, ParametroAnexoB regAnexoB, List<SiParametroValorDTO> listaBloqueHorario
                                                        , out List<IndReporteTotalDTO> listaTotal, out List<IndReporteDetDTO> listaDet)
        {
            listaTotal = new List<IndReporteTotalDTO>();
            listaDet = new List<IndReporteDetDTO>();

            ListarPeriodoFactorProgramado(ConstantesIndisponibilidades.ReportePR25HistoricoHidro, fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes, out List<IndPeriodoDTO> listaAllMeses
                                                , out IndPeriodoDTO regEstadisticoAnual, out IndPeriodoDTO regEstadisticoMensual);

            int idTotal = 1;
            foreach (var regUnidad in listaUnidad)
            {
                if (regUnidad.Equicodi == 18966)
                { }

                var regTotal = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Emprcodi = regUnidad.Emprcodi.Value,
                    Equipadre = regUnidad.Equipadre.Value,
                    Equicodi = regUnidad.Equicodi,
                    Grupocodi = regUnidad.Grupocodi,
                    Famcodi = regUnidad.Famcodi ?? 0,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotunidadnomb = regUnidad.UnidadnombPR25,
                    Itotpe = regUnidad.Pe
                };

                //el detalle mensual solo debe tener la data con meses validos (junio a noviembre)
                List<IndReporteTotalDTO> listaDetXUnidad = new List<IndReporteTotalDTO>();
                foreach (var anio in listaAnio)
                {
                    var listaDetXUnidadTmp = listaDetalleMensual.Where(x => anio.FechaIni <= x.Irecafechaini && x.Irecafechaini <= anio.FechaFin
                                                                    && x.Equicodi == regUnidad.Equicodi).ToList();
                    listaDetXUnidad.AddRange(listaDetXUnidadTmp);
                }

                if (regTotal.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica)
                {
                    regTotal.Itotfactoripm = 0;
                    regTotal.Itotfactoripa = 0;

                    //obtener factor
                    decimal valorMinProgMensual = listaDetXUnidad.Sum(x => x.Itotminip ?? 0);
                    decimal valorFactorProgMensual = valorMinProgMensual / (regEstadisticoMensual.TotalHP * 60.0m);
                    if (valorFactorProgMensual > 0) regTotal.Itotfactoripm = valorFactorProgMensual;

                    //el detalle mensual solo debe tener la data con meses validos (junio a noviembre)
                    List<IndReporteTotalDTO> listaDetXUltimoAnio = listaDetXUnidad.Where(x => regEstadisticoAnual.FechaIni <= x.Irecafechaini && x.Irecafechaini <= regEstadisticoAnual.FechaFin).ToList();

                    decimal valorMinProgAnual = listaDetXUltimoAnio.Sum(x => x.Itotminip ?? 0);
                    decimal valorFactorProgAnual = valorMinProgAnual / (regEstadisticoAnual.TotalHP * 60.0m);
                    if (valorFactorProgAnual > 0) regTotal.Itotfactoripa = valorFactorProgAnual;

                    //tiene costo de racionamiento CR
                    regTotal.Itotcr = string.Empty;
                    if (regTotal.Itotfactoripm > regAnexoB.FIPmensualHidro
                        || regTotal.Itotfactoripa > regAnexoB.FIPanualHidroYTermo)
                        regTotal.Itotcr = ConstantesIndisponibilidades.FlagCR;
                }

                //detalle por rango de 12 meses
                foreach (var anio in listaAnio)
                {
                    decimal valorMinXRango = listaDetXUnidad.Where(x => anio.FechaIni <= x.Irecafechaini && x.Irecafechaini <= anio.FechaFin).Sum(x => x.Itotminip ?? 0);
                    //decimal valorHorasFort = valorMinFort / 60.0m;

                    //Enero - Diciembre 2018
                    IndReporteDetDTO regDet = new IndReporteDetDTO()
                    {
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre.Value,
                        Equicodi = regUnidad.Equicodi,
                        Grupocodi = regUnidad.Grupocodi,
                        Idetminip = valorMinXRango,
                        Idethoraini = anio.FechaIni,
                        Idethorafin = anio.FechaFin,
                        Itotcodi = idTotal
                    };
                    listaDet.Add(regDet);
                }

                listaTotal.Add(regTotal);
                idTotal++;
            }
        }

        private List<IndReporteTotalDTO> ListarDataIndisponibilidadHistoricoMensual(int cuadro, DateTime fechaFin, out List<IndRelacionRptDTO> listaRel)
        {
            var regCuadro = GetByIdIndCuadro(cuadro);

            DateTime fechaIni = regCuadro.PeriodoIniHistorico;

            //Obtener la lista de rptcodi
            List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                    && x.Irecafechaini >= fechaIni && x.Irecafechaini <= fechaFin).ToList();
            //Obtener la lista de rptcodi
            List<IndReporteDTO> listaRptValidado = ListarIndReporteMensualValidado(cuadro, listaRecalculo);


            listaRel = new List<IndRelacionRptDTO>();
            foreach (var reg in listaRptValidado)
            {
                listaRel.Add(new IndRelacionRptDTO()
                {
                    Irelpridsec = reg.Irptcodi
                });
            }

            List<IndReporteTotalDTO> listaDetDiarioHist = GetByCriteriaIndReporteTotals(string.Join(",", listaRel.Select(x => x.Irelpridsec)));

            return listaDetDiarioHist;
        }

        public List<IndReporteDTO> ListarIndReporteMensualValidado(int cuadro, List<IndRecalculoDTO> listaRecalculo)
        {
            List<IndReporteDTO> listaAllRpt = ListIndReportes().Where(x => x.Icuacodi == cuadro).ToList();

            List<IndReporteDTO> listaRptValidado = new List<IndReporteDTO>();
            foreach (var reg in listaRecalculo)
            {
                var regRpt = listaAllRpt.Where(x => x.Irecacodi == reg.Irecacodi && x.Irptesfinal == ConstantesIndisponibilidades.EsVersionValidado)
                                        .OrderByDescending(x => x.Irptcodi).FirstOrDefault();
                if (regRpt != null)
                {
                    listaRptValidado.Add(regRpt);
                }
            }

            return listaRptValidado;
        }

        /// <summary>
        /// Listar unidades de generación de cada cuadro
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="fechaPeriodo"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarUnidadesOpComercialByMes(int cuadro, DateTime fechaPeriodo)
        {
            //obtener unidades que tiene operación comercial solo el último mes
            DateTime fechaIni = new DateTime(fechaPeriodo.Year, fechaPeriodo.Month, 1);
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            List<EqEquipoDTO> listaUnidad = new List<EqEquipoDTO>();

            if (cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo)
            {
                //
                ListarUnidadTermicoOpComercial(ConstantesIndisponibilidades.AppPF, fechaIni, fechaFin,
                                    out listaUnidad, out List<EqEquipoDTO> listaEqSiOpComercial, out List<ResultadoValidacionAplicativo> listaMsj1);
            }

            if (cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoHidro)
            {
                // la lista de unidades comprende generadores y centrales
                ListarEqCentralHidraulicoOpComercial(fechaIni, fechaFin, out List<EqEquipoDTO> listaCentral, out listaUnidad, out List<ResultadoValidacionAplicativo> listaMsj2);
            }

            return listaUnidad;
        }

        private void ListarPeriodoFactorProgramado(int cuadro, DateTime fechaPeriodo, List<SiParametroValorDTO> listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes, out List<IndPeriodoDTO> listaAllMeses
                                                            , out IndPeriodoDTO regEstadisticoAnual, out IndPeriodoDTO regEstadisticoMensual)
        {
            //60 meses separados por 6 meses
            listaAnio = new List<IndPeriodoDTO>();

            //obtener fecha inicial ()
            DateTime fechaFin = DateTime.MinValue;
            int mesActual = fechaPeriodo.Month;
            if (mesActual >= 6 && mesActual <= 11)
            {
                //periodo de estiaje
                fechaFin = fechaPeriodo;
            }
            else
            {
                if (mesActual < 6)
                {
                    fechaFin = new DateTime(fechaPeriodo.Year - 1, 11, 1);
                }
                else
                {
                    //mesActual>11
                    fechaFin = new DateTime(fechaPeriodo.Year, 11, 1);
                }
            }

            int anioDividido = fechaFin.Month % 11 != 0 ? fechaFin.Year - 1 : 0;
            int anios = 9 + (anioDividido > 0 ? 1 : 0);

            DateTime fecha1, fecha2;
            IndPeriodoDTO reg;

            int resto = fechaFin.Month % 6;

            for (int i = 0; i <= anios; i++)
            {
                int anioActual = fechaFin.Year - anios + i;

                if (anioDividido == 0) //todos los años tienen 6 meses
                {
                    fecha1 = new DateTime(anioActual, 6, 1);
                    fecha2 = new DateTime(anioActual, 11, 1).AddMonths(1).AddDays(-1);

                    reg = new IndPeriodoDTO() { FechaIni = fecha1, FechaFin = fecha2, EsUltimoAnio = i == anios };
                    listaAnio.Add(reg);
                }
                else
                {
                    //anio dividido
                    if (i == 0)
                    {
                        fecha1 = new DateTime(anioActual, 6 + resto + 1, 1);
                        fecha2 = new DateTime(anioActual, 11, 1).AddMonths(1).AddDays(-1);

                        reg = new IndPeriodoDTO() { FechaIni = fecha1, FechaFin = fecha2 };
                        listaAnio.Add(reg);
                    }

                    if (i > 0) //el periodo inicia en junio el ultimo año
                    {
                        if (anioActual < anioDividido)
                        {
                            fecha1 = new DateTime(anioActual, 6, 1);
                            fecha2 = new DateTime(anioActual, 11, 1).AddMonths(1).AddDays(-1);

                            reg = new IndPeriodoDTO() { FechaIni = fecha1, FechaFin = fecha2 };
                            listaAnio.Add(reg);
                        }
                        else
                        {
                            if (anioDividido == anioActual)
                            {
                                fecha1 = new DateTime(anioActual, 6, 1);
                                fecha2 = new DateTime(anioActual, 6 + resto, 1).AddMonths(1).AddDays(-1);

                                reg = new IndPeriodoDTO() { FechaIni = fecha1, FechaFin = fecha2 };
                                listaAnio.Add(reg);

                                fecha1 = new DateTime(anioActual, 6 + resto + 1, 1);
                                fecha2 = new DateTime(anioActual, 11, 1).AddMonths(1).AddDays(-1);

                                reg = new IndPeriodoDTO() { FechaIni = fecha1, FechaFin = fecha2, EsUltimoAnio = true };
                                listaAnio.Add(reg);
                            }
                            else
                            {
                                fecha1 = new DateTime(anioActual, 6, 1);
                                fecha2 = new DateTime(anioActual, 6 + resto, 1).AddMonths(1).AddDays(-1);

                                reg = new IndPeriodoDTO() { FechaIni = fecha1, FechaFin = fecha2, EsUltimoAnio = true };
                                listaAnio.Add(reg);
                            }
                        }
                    }
                }
            }

            foreach (var regA in listaAnio)
            {
                string cabeceraPeriodo = regA.FechaIni.Month != regA.FechaFin.Month ? $"{EPDate.f_NombreMesCorto(regA.FechaIni.Month)} - {EPDate.f_NombreMesCorto(regA.FechaFin.Month)}" : $"{EPDate.f_NombreMesCorto(regA.FechaIni.Month)}";

                int numMeses = regA.FechaFin.Month - regA.FechaIni.Month + 1;

                regA.FechaDesc = cabeceraPeriodo;
                regA.TotalDias = (regA.FechaFin - regA.FechaIni).Days + 1;
                regA.TotalHP = MedidoresHelper.TotalHorasXRango(regA.FechaIni, regA.FechaFin, listaBloqueHorario);
                regA.TotalMes = numMeses;
            }

            //meses validos para los calculos
            listaMes = new List<IndPeriodoDTO>();
            foreach (var anio in listaAnio)
            {
                for (DateTime fechaMes = anio.FechaIni; fechaMes <= anio.FechaFin; fechaMes = fechaMes.AddMonths(1))
                {
                    var regA = new IndPeriodoDTO()
                    {
                        FechaIni = fechaMes,
                        FechaFin = fechaMes.AddMonths(1).AddDays(-1),
                        TotalMes = 1,
                    };
                    regA.TotalDias = (regA.FechaFin - regA.FechaIni).Days + 1;
                    regA.TotalHP = MedidoresHelper.TotalHorasXRango(regA.FechaIni, regA.FechaFin, listaBloqueHorario);
                    regA.EsUltimoAnio = anio.EsUltimoAnio;

                    listaMes.Add(regA);
                }
            }
            listaMes = listaMes.OrderBy(x => x.FechaIni).ToList();
            List<IndPeriodoDTO> listaMesUltimoAnio = listaMes.Where(x => x.EsUltimoAnio).ToList();

            //
            regEstadisticoMensual = new IndPeriodoDTO()
            {
                FechaIni = listaMes.First().FechaIni,
                FechaFin = listaMes.Last().FechaFin,
                TotalMes = listaMes.Count(),
                TotalDias = listaMes.Sum(x => x.TotalDias),
                TotalHP = listaMes.Sum(x => x.TotalHP),
            };

            regEstadisticoAnual = new IndPeriodoDTO()
            {
                FechaIni = listaMesUltimoAnio.First().FechaIni,
                FechaFin = listaMesUltimoAnio.Last().FechaFin,
                TotalMes = listaMesUltimoAnio.Count(),
                TotalDias = listaMesUltimoAnio.Sum(x => x.TotalDias),
                TotalHP = listaMesUltimoAnio.Sum(x => x.TotalHP),
            };

            //lista de meses para mostrar en la parte derecha
            listaAllMeses = new List<IndPeriodoDTO>();
            var regCuadro = GetByIdIndCuadro(cuadro);
            for (DateTime fechaMes = regCuadro.PeriodoIniHistorico; fechaMes <= fechaPeriodo; fechaMes = fechaMes.AddMonths(1))
            {
                var regA = new IndPeriodoDTO()
                {
                    FechaIni = fechaMes,
                    FechaFin = fechaMes.AddMonths(1).AddDays(-1),
                    TotalMes = 1,
                };
                regA.TotalDias = (regA.FechaFin - regA.FechaIni).Days + 1;
                regA.TotalHP = MedidoresHelper.TotalHorasXRango(regA.FechaIni, regA.FechaFin, listaBloqueHorario);

                listaAllMeses.Add(regA);
            }
        }

        #endregion

        #region Cálculo Generación de histórico (al primer historico se le agrega la nueva data de c1, c4)

        /// <summary>
        /// Guarda la información de Cuadro 4 para el histórico
        /// </summary>
        /// <param name="irecacodi"></param>
        /// <param name="idReporteCuadro4"></param>
        /// <param name="usuario"></param>
        private void ProcesarCuadro4ParaHistorico(int irecacodi, int idReporteCuadro4, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25HistoricoHidro;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);

            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi); //recalculo del mes seleccionado

            List<IndReporteTotalDTO> listaReptotC4 = GetByCriteriaIndReporteTotals(idReporteCuadro4);

            List<EqEquipoDTO> listaUnidad = ListarUnidadesOpComercialByMes(cuadro, regRecalculo.Irecafechafin);
            List<FactorINDTeorica> listaTeorica = ListarParametroAnexoC(regRecalculo.Irecafechafin);

            //Hora punta segun fecha de vigencia
            List<SiParametroValorDTO> listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            List<IndReporteTotalDTO> listaRptTot = GenerarTotalCuadro4ParaHistorico(cuadro, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, listaUnidad, listaTeorica
                                                                                    , listaReptotC4, listaBloqueHorario);

            List<IndReporteTotalDTO> listaNuevaUnidadConOpComercial = listaRptTot.Where(x => x.TieneIngresoOpCom).ToList();
            if (listaNuevaUnidadConOpComercial.Any())
            {
                //agregar su historico para el mes anterior hasta el inicio de historico
                ActualizarHistoricoFactorConNuevoIngreso(cuadro, regRecalculo.Irecafechaini.AddMonths(-1), listaNuevaUnidadConOpComercial, listaBloqueHorario, usuario);
            }

            string tiempo = ConstantesIndisponibilidades.TiempoTodoDia;

            //Para los factores se debe guardar el historico en los recalculos mensuales, no en otros (revision 1, etc)
            int irecacodiDelMes = irecacodi;

            var regRecalculoDelMes = GetByCriteriaIndRecalculos(regRecalculo.Ipericodi).Find(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual);
            if (regRecalculoDelMes != null) irecacodiDelMes = regRecalculoDelMes.Irecacodi;

            //Guardar
            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodiDelMes,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteHistorico,
                Irpttiempo = tiempo,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado, //los historicos se consideran validados
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            if (EsVersionCreableMensualCuadro(regCuadro, null, regReporte, listaRptTot, new List<IndReporteDetDTO>()))
            {
                CambiarAEstadoHistorico(cuadro, irecacodiDelMes, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodiDelMes, regReporte);

                //
                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaRptTot;
                regSaveBD.ListaRptDet = new List<IndReporteDetDTO>();

                //guardar en BD
                int irptcodi = this.GuardarReporteIndispBDTransaccional(regSaveBD);
            }
        }

        private void ActualizarHistoricoFactorConNuevoIngreso(int cuadro, DateTime fechaMesAnt, List<IndReporteTotalDTO> listaNuevaUnidad, List<SiParametroValorDTO> listaBloqueHorario, string usuario)
        {
            var regCuadro = GetByIdIndCuadro(cuadro);

            DateTime fechaPeriodo = fechaMesAnt;
            DateTime fechaIni = regCuadro.PeriodoIniHistorico;
            DateTime fechaFin = fechaPeriodo;

            //Obtener la lista de rptcodi
            List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                    && x.Irecafechaini >= fechaIni && x.Irecafechaini <= fechaFin).ToList();
            //Obtener la lista de rptcodi
            List<IndReporteDTO> listaRptValidado = ListarIndReporteMensualValidado(cuadro, listaRecalculo);
            List<IndReporteTotalDTO> listaDetDiario = GetByCriteriaIndReporteTotals(string.Join(",", listaRptValidado.Select(x => x.Irptcodi)));

            //
            List<EqEquipoDTO> listaAllUnidades = ListarAllEquiposHistoricos(cuadro, listaDetDiario, GetPeriodoMesIniAplicativo(), fechaFin.AddMonths(1));

            //
            foreach (var regUnidad in listaNuevaUnidad)
            {
                var listaDetXUnidad = cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo
                                                ? listaDetDiario.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi).ToList()
                                                : listaDetDiario.Where(x => x.Equicodi == regUnidad.Equicodi).ToList();

                for (var periodo = fechaIni; periodo <= fechaFin; periodo = periodo.AddMonths(1))
                {
                    var regxPer = listaDetXUnidad.Find(x => x.Irecafechaini == periodo);

                    if (regxPer == null)  //agregar nuevo elemento a la lista
                    {
                        var objUnidad = (IndReporteTotalDTO)regUnidad.Clone();
                        objUnidad.Irecafechaini = periodo;
                        objUnidad.Itotminif = ObtenerValorTeoricoXMes(regUnidad.FactorTeoricoFort ?? 0, periodo, periodo.AddMonths(1).AddDays(-1), listaBloqueHorario);
                        objUnidad.Itotminip = ObtenerValorTeoricoXMes(regUnidad.FactorTeoricoProg ?? 0, periodo, periodo.AddMonths(1).AddDays(-1), listaBloqueHorario);

                        listaDetDiario.Add(objUnidad);
                    }
                    else //actualizar
                    {
                        regxPer.Itotminif = ObtenerValorTeoricoXMes(regUnidad.FactorTeoricoFort ?? 0, periodo, periodo.AddMonths(1).AddDays(-1), listaBloqueHorario);
                        regxPer.Itotminip = ObtenerValorTeoricoXMes(regUnidad.FactorTeoricoProg ?? 0, periodo, periodo.AddMonths(1).AddDays(-1), listaBloqueHorario);
                    }
                }
            }

            //lista de unidades
            //var irptcodi = ListarVersionesHistorico(cuadro).FirstOrDefault().Irptcodi;
            //List<IndReporteTotalDTO> listaRepTotBD = GetByCriteriaIndReporteTotals(irptcodi); //cabecera del ultimo historico

            //guardar los cambios mes por mes
            ProcesarCuadroHist(cuadro, fechaIni, fechaFin, listaAllUnidades, listaDetDiario, regCuadro.Famcodi, usuario);

        }

        private List<IndReporteTotalDTO> GenerarTotalCuadro4ParaHistorico(int cuadro, DateTime fechaIniPeriodo, DateTime fechaFinPeriodo, List<EqEquipoDTO> listaUnidades, List<FactorINDTeorica> listaTeorica
                                                    , List<IndReporteTotalDTO> listaReptotC4, List<SiParametroValorDTO> listaBloqueHorario)
        {
            List<IndReporteTotalDTO> listaTotal = new List<IndReporteTotalDTO>();

            #region Generar data del mes actual

            //Generar data para los generadores
            int idTotal = 1;
            foreach (var regUnidad in listaUnidades.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList())
            {
                if (regUnidad.Equicodi == 18188)
                { }
                IndReporteTotalDTO regC1 = listaReptotC4.Find(x => x.Equicodi == regUnidad.Equicodi);
                FactorINDTeorica regTeorico = listaTeorica.Find(x => x.Fenergcodi == regUnidad.Fenergcodi);

                decimal? totminip = null;
                if (regC1 != null && regC1.Itotminip.GetValueOrDefault(0) > 0)
                    totminip = totminip.GetValueOrDefault(0) + regC1.Itotminip.GetValueOrDefault(0);

                DateTime fechaIniEjecutadoUnidad = regUnidad.Equifechiniopcom.Value.AddDays(ConstantesIndisponibilidades.NumMesesValidacionOC);

                //completar con teorico
                if (fechaIniPeriodo < fechaIniEjecutadoUnidad)
                {
                    if (fechaIniPeriodo.AddMonths(1).AddDays(-1) < fechaIniEjecutadoUnidad)
                    {
                        //antes del mes que comienza ejecutados se usará solo teórico
                        decimal totminProgTeorico = ObtenerValorTeoricoXMes(regTeorico.FactorTeoricoProg.GetValueOrDefault(0), fechaIniPeriodo, fechaFinPeriodo, listaBloqueHorario);
                        totminip = totminProgTeorico;
                    }
                    else
                    {
                        int numDiaMes = (fechaFinPeriodo - fechaIniPeriodo).Days + 1;
                        int numDiasTeoricos = fechaIniEjecutadoUnidad.Day - 1;
                        int numDiasEjec = numDiaMes - numDiasTeoricos;

                        //cuando existe teorico y real, el valor de minutos de indisponibilidad es un ponderado
                        decimal totminProgTeorico = MedidoresHelper.TotalHorasXRango(fechaIniPeriodo, fechaFinPeriodo, listaBloqueHorario) * 60 * regTeorico.FactorTeoricoProg.GetValueOrDefault(0);
                        decimal totminProgEjec = totminip.GetValueOrDefault(0);
                        totminip = (numDiasTeoricos * totminProgTeorico + numDiasEjec * totminProgEjec) / numDiaMes;
                    }
                }
                else
                {
                    //meses donde solo existe ejecutado y no teoricos                
                }

                //total
                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = regUnidad.Famcodi ?? 0,
                    Emprcodi = regUnidad.Emprcodi.Value,
                    Equipadre = regUnidad.Equipadre.Value,
                    Grupocodi = regUnidad.Grupocodi,
                    Equicodi = regUnidad.Equicodi,
                    Itotunidadnomb = regUnidad.UnidadnombPR25,
                    Itotminif = null,
                    Itotminip = totminip,
                    Itotpe = regUnidad.Pe,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotincremental = regUnidad.Grupoincremental,
                    TieneIngresoOpCom = fechaIniPeriodo <= regUnidad.Equifechiniopcom && regUnidad.Equifechiniopcom <= fechaIniPeriodo.AddMonths(1).AddDays(-1),
                    FactorTeoricoProg = regTeorico.FactorTeoricoProg.GetValueOrDefault(0),
                };

                listaTotal.Add(objUnidad);
                idTotal++;
            }

            //
            foreach (var regCentral in listaUnidades.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica).ToList())
            {
                List<IndReporteTotalDTO> listaXCentral = listaTotal.Where(x => x.Equipadre == regCentral.Equicodi).ToList();

                if (listaXCentral.Any())
                {
                    decimal? totminip = null;
                    decimal factorProg = listaXCentral.Find(x => x.TieneIngresoOpCom) != null ? listaXCentral.Find(x => x.TieneIngresoOpCom).FactorTeoricoProg.GetValueOrDefault(0) : 0.0m;

                    if (listaXCentral.Count == 1)
                        totminip = listaXCentral.First().Itotminip;
                    else
                    {
                        decimal sum = 0;
                        foreach (var regEq in listaXCentral)
                        {
                            sum += regEq.Itotpe.GetValueOrDefault(0) * regEq.Itotminip.GetValueOrDefault(0);
                        }

                        if (sum > 0)
                            totminip = sum / regCentral.Pe.GetValueOrDefault(0);
                    }

                    //total
                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = regCentral.Famcodi ?? 0,
                        Emprcodi = regCentral.Emprcodi.Value,
                        Equipadre = regCentral.Equipadre.Value,
                        Grupocodi = regCentral.Grupocodi,
                        Equicodi = regCentral.Equicodi,
                        Itotunidadnomb = regCentral.UnidadnombPR25,
                        Itotminif = null,
                        Itotminip = totminip,
                        Itotpe = regCentral.Pe,
                        Itotopcom = ConstantesAppServicio.SI,
                        Itotincremental = regCentral.Grupoincremental,
                        TieneIngresoOpCom = fechaIniPeriodo <= regCentral.Equifechiniopcom && regCentral.Equifechiniopcom <= fechaIniPeriodo.AddMonths(1).AddDays(-1),
                        FactorTeoricoProg = factorProg,
                    };

                    listaTotal.Add(objUnidad);
                    idTotal++;
                }
            }

            #endregion

            #region Combinar la nueva data con el historico existente

            //Obtener el recalculo actual del historico
            List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                    && x.Irecafechaini == fechaIniPeriodo).ToList();
            //Obtener el unico rptcodi y luego su detalle. 
            List<IndReporteDTO> listaRptValidado = ListarIndReporteMensualValidado(cuadro, listaRecalculo);
            List<IndReporteTotalDTO> listaTotalHistorico = GetByCriteriaIndReporteTotals(string.Join(",", listaRptValidado.Select(x => x.Irptcodi)));


            List<IndReporteTotalDTO> listaMezcla = new List<IndReporteTotalDTO>();

            foreach (var reg in listaTotal)
            {
                listaTotalHistorico = listaTotalHistorico.Where(x => x.Equicodi != reg.Equicodi).ToList(); //quitamos las unidades hidro
            }

            listaMezcla.AddRange(listaTotalHistorico); //historico menos los que se generaron del cuadro 
            listaMezcla.AddRange(listaTotal);

            #endregion

            return listaMezcla;
        }

        private decimal ObtenerValorTeoricoXMes(decimal factor, DateTime fechaIniPeriodo, DateTime fechaFinPeriodo, List<SiParametroValorDTO> listaBloqueHorario)
        {
            //horas del mes por 60 minutos
            decimal totminProgTeorico = MedidoresHelper.TotalHorasXRango(fechaIniPeriodo, fechaFinPeriodo, listaBloqueHorario) * 60 * factor;//se obtiene un porcentaje sobre el total de minutos disponibles en hora punta

            return totminProgTeorico;
        }

        #endregion

        #region web Handson y excel

        public void GenerarWebReporteProgramadoHidro(int irptcodi, string empresa, string central, out HandsonModel handson)
        {
            this.GenerarReporteFactorProgramadoHidroXVersionReporte(irptcodi, empresa, central
                                                    , out handson
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptHoja, out List<IndReporteDetDTO> listaRepdet, out List<IndReporteTotalDTO> listaReptotMes
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<SiParametroValorDTO> listaBloqueHorario);
        }

        public void GenerarReporteFactorProgramadoHidroXVersionReporte(int irptcodi, string empresa, string central
                                                    , out HandsonModel handsonFF
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteDetDTO> listaRepdet, out List<IndReporteTotalDTO> listaReptotMes
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<SiParametroValorDTO> listaBloqueHorario)
        {
            regVersion = this.GetByIdIndReporte(irptcodi);
            regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            var regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                                        , out listaReptot, out listaRepdet
                                        , out listaEmpresa, out listaCentral);

            List<IndRelacionRptDTO> listaRel = GetByCriteriaIndRelacionRpts(irptcodi);
            listaReptotMes = new List<IndReporteTotalDTO>();
            if (listaRel.Any())
            {
                listaReptotMes = GetByCriteriaIndReporteTotals(string.Join(",", listaRel.Select(x => x.Irelpridsec)));
            }

            // Operación comercial de las unidades
            List<EqEquipoDTO> listaUnidad = ListarUnidadesOpComercialByMes(ConstantesIndisponibilidades.ReportePR25HistoricoHidro, regRecalculo.Irecafechafin);

            ParametroAnexoB regAnexoB = GetParametroAnexoB(regPeriodo.FechaFin);
            List<FactorINDTeorica> listaTeorica = ListarParametroAnexoC(regPeriodo.FechaFin);

            //Hora punta segun fecha de vigencia
            listaBloqueHorario = (new ParametroAppServicio()).ListSiParametroValorByIdParametro(ConstantesParametro.IdParametroHPPotenciaActiva);

            foreach (var reg in listaReptot)
            {
                var regTeorico = listaTeorica.Find(x => x.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiAgua);
                if (regTeorico != null)
                {
                    reg.FactorTeoricoFort = regTeorico.FactorTeoricoFort;
                    reg.FactorTeoricoProg = regTeorico.FactorTeoricoProg;
                    reg.TipoCentral = regTeorico.TipoCentral;
                    reg.TipoCombustible = regTeorico.TipoCombustible;
                }

                reg.TieneFIPA = reg.Itotfactoripa > regAnexoB.FIPanualHidroYTermo;
                reg.TieneFIPM = reg.Itotfactoripm > regAnexoB.FIPmensualHidro;

                var regOC = listaUnidad.Find(x => x.Equicodi == reg.Equicodi);
                if (regOC != null)
                {
                    reg.Equifechiniopcom = regOC.Equifechiniopcom;
                }
            }

            //Salidas
            handsonFF = GetHandsonFactorProgramadoHidro(regRecalculo.Irecafechaini, listaReptot, listaRepdet, listaEmpresa, listaCentral, listaBloqueHorario);
        }

        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="fechaPeriodo"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaDet"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaBloqueHorario"></param>
        /// <returns></returns>
        public HandsonModel GetHandsonFactorProgramadoHidro(DateTime fechaPeriodo
                                                                , List<IndReporteTotalDTO> listaTot, List<IndReporteDetDTO> listaDet
                                                                , List<SiEmpresaDTO> listaEmpresa, List<EqEquipoDTO> listaCentral, List<SiParametroValorDTO> listaBloqueHorario)
        {

            ListarPeriodoFactorProgramado(ConstantesIndisponibilidades.ReportePR25HistoricoHidro, fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes, out List<IndPeriodoDTO> listaAllMeses
                                                , out IndPeriodoDTO regEstadisticoAnual, out IndPeriodoDTO regEstadisticoMensual);

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Empresa", IsMerge = 1, Ancho = 200, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Central", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //equicodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }); //grupocodi
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Unidad", IsMerge = 1, Ancho = 100, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Potencia <br/> Efectiva <br/> (MW)", IsMerge = 1, Ancho = 50, AlineacionHorizontal = "Derecha", });

            foreach (var item in listaAnio)
            {
                listaCabecera.Add(new CabeceraRow() { TituloRow = item.FechaIni.Year + "<br/>" + item.FechaDesc, IsMerge = 1, Ancho = 50, AlineacionHorizontal = "Derecha", });
            }

            listaCabecera.Add(new CabeceraRow() { TituloRow = "FIP <br/> Mensual", IsMerge = 1, Ancho = 100, AlineacionHorizontal = "Derecha", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "FIP <br/> Anual", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Derecha", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "FIP <br/> CR", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = true,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            //int numColAntesdeFecha = 5;
            int numCol = listaCabecera.Count;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();
            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            foreach (var regEmp in listaEmpresa)
            {
                List<EqEquipoDTO> listaCentralXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int totalXEmp = listaTot.Where(x => x.Emprcodi == regEmp.Emprcodi).Count();

                CeldaMerge cel = new CeldaMerge();
                cel.col = 0;
                cel.row = numFilaActual;
                cel.colspan = 1;
                cel.rowspan = totalXEmp;
                listaMerge.Add(cel);

                foreach (var regCentral in listaCentralXEmp)
                {
                    if (regCentral.Equicodi == 13418)
                    { }
                    List<IndReporteTotalDTO> listaTotalX = listaTot.Where(x => x.Emprcodi == regCentral.Emprcodi && x.Equipadre == regCentral.Equipadre)
                                                                    .OrderBy(x => x.Famcodi).ThenBy(x => x.Itotunidadnomb).ToList();

                    foreach (var regTotalX in listaTotalX)
                    {
                        List<IndReporteDetDTO> listaDetXTot = listaDet.Where(x => x.Equicodi == regTotalX.Equicodi).OrderBy(x => x.Idethoraini).ToList();

                        string[] matriz = new string[numCol];
                        matriz[0] = regTotalX.Emprnomb; //EMPRESA
                        matriz[1] = regTotalX.Central; //CENTRAL
                        matriz[2] = regTotalX.Equicodi.ToString();
                        matriz[3] = regTotalX.Grupocodi.ToString();
                        matriz[4] = regTotalX.Itotunidadnomb;
                        matriz[5] = regTotalX.Itotpe.GetValueOrDefault(0).ToString();

                        int correl = 5 + 1;
                        foreach (var item in listaAnio)
                        {
                            var regDetXRango = listaDetXTot.Find(x => x.Idethoraini == item.FechaIni && x.Idethorafin == item.FechaFin);
                            if (regDetXRango != null)
                                matriz[correl] = regDetXRango.NumHorasIp.GetValueOrDefault(0) != 0 ? regDetXRango.NumHorasIp.Value.ToString() : "-";
                            correl++;
                        }

                        matriz[correl + 0] = regTotalX.Itotfactoripm != null ? (regTotalX.Itotfactoripm.Value).ToString() : "";
                        matriz[correl + 1] = regTotalX.Itotfactoripa != null ? (regTotalX.Itotfactoripa.Value).ToString() : "";
                        matriz[correl + 2] = regTotalX.Crdesc;

                        listaDataHandson.Add(matriz);
                        numFilaActual++;
                    }
                }
            }

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return handson;
        }

        public void GenerarRptExcelFactorProgramadoHidro(string ruta, int irptcodi, string empresa, string central, out string nameFile)
        {
            this.GenerarReporteFactorProgramadoHidroXVersionReporte(irptcodi, empresa, central
                                                    , out HandsonModel handsonFF
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<IndReporteDetDTO> listaRepdet, out List<IndReporteTotalDTO> listaReptotMes
                                                    , out List<SiEmpresaDTO> listaEmpresa, out List<EqEquipoDTO> listaCentral, out List<SiParametroValorDTO> listaBloqueHorario);

            //Nombre de archivo
            nameFile = string.Format("PF_FIP_Hidráulicas_{0}_Version_{1}.xlsx", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelFactorProgramadoHidro(xlPackage, "IndProgHidro", 1, 7, 7, 2
                                                            , regVersion.Irecainforme, "CUADRO N°  3", regCuadro.Icuatitulo, regPeriodo.Iperianio, regPeriodo.Iperimes, regPeriodo.FechaIni
                                                            , listaReptot, listaRepdet, listaReptotMes
                                                            , listaEmpresa, listaCentral, listaBloqueHorario);

                xlPackage.Save();
            }
        }

        public void GenerarHojaExcelFactorProgramadoHidro(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni, int rowIniTabla, int colIniTabla
                                                    , string informe, string nombreCuadro, string titulo, int anio, int mes, DateTime fechaPeriodo
                                                    , List<IndReporteTotalDTO> listaTot, List<IndReporteDetDTO> listaDetAnio, List<IndReporteTotalDTO> listaDetMensual
                                                    , List<SiEmpresaDTO> listaEmpresa, List<EqEquipoDTO> listaCentral, List<SiParametroValorDTO> listaBloqueHorario)
        {
            //inicia C1

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            ws.TabColor = ColorTranslator.FromHtml("#FFC000");

            string font = "Arial";
            string colorCeldaTextoDefecto = "#000000";
            string colorCeldaTextoTotalMes = "#D9D9D9";
            string colorCeldaFondoDefecto = "#FFFFFF";
            string colorLineaDefecto = "#000000";
            string colorFondoTeorico = "#37CBFF";

            ListarPeriodoFactorProgramado(ConstantesIndisponibilidades.ReportePR25HistoricoHidro, fechaPeriodo, listaBloqueHorario, out List<IndPeriodoDTO> listaAnio, out List<IndPeriodoDTO> listaMes, out List<IndPeriodoDTO> listaAllMeses
                                                , out IndPeriodoDTO regEstadisticoAnual, out IndPeriodoDTO regEstadisticoMensual);

            #region Titulo

            int colEmpresa = colIniTabla;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colPe = colUnidad + 1;
            int colFMensual = colPe + listaAnio.Count + 1;
            int colFAnual = colFMensual + 1;
            int colCr = colFAnual + 1;

            ws.Cells[rowIni, colFMensual].Value = informe;
            ws.Cells[rowIni + 1, colIni].Value = nombreCuadro;
            ws.Cells[rowIni + 2, colIni].Value = titulo;
            ws.Cells[rowIni + 3, colIni].Value = $"{EPDate.f_NombreMes(mes)} {anio}";

            UtilExcel.SetFormatoCelda(ws, rowIni + 1, colIni, rowIni + 3, colIni, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);
            UtilExcel.SetFormatoCelda(ws, rowIni, colFMensual, rowIni, colFMensual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);

            int rowTab1 = rowIniTabla;
            int rowTab2 = rowTab1 + 1;
            int rowTab3 = rowTab2 + 1;
            ws.Cells[rowTab1, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowTab1, colCentral].Value = "CENTRAL";
            ws.Cells[rowTab1, colUnidad].Value = "UNIDAD";
            ws.Cells[rowTab1, colPe].Value = "Potencia Efectiva (MW)";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colEmpresa, rowTab3, colEmpresa);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colCentral, rowTab3, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colPe, rowTab3, colPe);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colUnidad, rowTab3, colUnidad);

            UtilExcel.SetFormatoCelda(ws, rowTab1, colEmpresa, rowTab3, colPe, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colPe]);

            ws.Column(colEmpresa).Width = 13;
            ws.Column(colCentral).Width = 20;
            ws.Column(colUnidad).Width = 9;
            ws.Column(colPe).Width = 9;

            ws.Column(colFMensual).Width = 10;
            ws.Column(colFAnual).Width = 10;


            int colDinamica = colPe;
            //60 meses, separados por años
            foreach (var item in listaAnio)
            {
                colDinamica++;
                ws.Cells[rowTab1 - 1, colDinamica].Value = item.TotalMes;
                ws.Cells[rowTab1, colDinamica].Value = item.FechaIni.Year;
                ws.Cells[rowTab2, colDinamica].Value = item.FechaDesc;

                //style                
                ws.Column(colDinamica).Width = 10;
            }
            UtilExcel.BorderAround(ws.Cells[rowTab1, colPe + 1, rowTab3, colFMensual - 1]);
            UtilExcel.SetFormatoCelda(ws, rowTab1 - 1, colPe + 1, rowTab1 - 1, colFMensual - 1, "Centro", "Centro", colorCeldaTextoTotalMes, colorCeldaFondoDefecto, font, 8, false, true);
            UtilExcel.SetFormatoCelda(ws, rowTab1, colPe + 1, rowTab1, colFMensual - 1, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);

            ws.Cells[rowTab1 - 1, colFMensual].Value = 60;
            ws.Cells[rowTab1 - 1, colFAnual].Value = 6;
            ws.Cells[rowTab1, colFMensual].Value = "Factor de Indisponibilidad  Programada";
            ws.Cells[rowTab3, colFMensual].Value = "Mensual";
            ws.Cells[rowTab3, colFAnual].Value = "Anual";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colFMensual, rowTab2, colFAnual);

            UtilExcel.SetFormatoCelda(ws, rowTab1 - 1, colFMensual, rowTab1 - 1, colFAnual, "Centro", "Centro", colorCeldaTextoTotalMes, colorCeldaFondoDefecto, font, 8, false, true);
            UtilExcel.SetFormatoCelda(ws, rowTab1, colFMensual, rowTab3, colFAnual, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colFMensual, rowTab2, colFAnual]);
            UtilExcel.BorderAround(ws.Cells[rowTab3, colFMensual, rowTab3, colFMensual]);
            UtilExcel.BorderAround(ws.Cells[rowTab3, colFAnual, rowTab3, colFAnual]);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colFAnual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colUnidad], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab1, colFMensual, rowTab3, colFAnual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            int colIniDetalle = colFAnual + 10;
            int colCentralDet = colIniDetalle;
            int colUnidadDet = colCentralDet + 1;
            int colPeDet = colUnidadDet + 1;
            int colFtDet = colPeDet + 1;

            ws.Cells[rowTab1, colCentralDet].Value = "CENTRAL";
            ws.Cells[rowTab1, colUnidadDet].Value = "UNIDAD";
            ws.Cells[rowTab1, colPeDet].Value = "Potencia Efectiva (MW)";
            ws.Cells[rowTab1, colFtDet].Value = "Factor de indisponibilidad teorica (1) \nProgramada \n(%)";

            UtilExcel.SetFormatoCelda(ws, rowTab1, colCentralDet, rowTab3, colFtDet, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colCentralDet, rowTab3, colCentralDet);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colUnidadDet, rowTab3, colUnidadDet);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colPeDet, rowTab3, colPeDet);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colFtDet, rowTab3, colFtDet);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colCentralDet, rowTab3, colCentralDet, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colUnidadDet, rowTab3, colUnidadDet, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colPeDet, rowTab3, colPeDet, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colFtDet, rowTab3, colFtDet, colorLineaDefecto);

            ws.Column(colCentralDet).Width = 9;
            ws.Column(colUnidadDet).Width = 9;
            ws.Column(colPeDet).Width = 9;
            ws.Column(colFtDet).Width = 9;

            int colDetDinamico = colFtDet + 1;
            foreach (var item in listaAllMeses)
            {
                ws.Cells[rowTab1, colDetDinamico].Value = item.FechaIni;
                ws.Cells[rowTab1, colDetDinamico].Style.Numberformat.Format = "mmm-yy";
                ws.Cells[rowTab2, colDetDinamico].Value = "Program.";
                ws.Cells[rowTab3, colDetDinamico].Value = "(Horas)";

                UtilExcel.SetFormatoCelda(ws, rowTab1, colDetDinamico, rowTab3, colDetDinamico, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colDetDinamico, rowTab3, colDetDinamico, colorLineaDefecto);

                ws.Column(colDetDinamico++).Width = 9;
            }

            #endregion

            #region Cuerpo

            int rowIniCuerpo = rowTab3 + 1;

            foreach (var regEmp in listaEmpresa)
            {
                List<EqEquipoDTO> listaCentralXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int totalXEmp = listaTot.Where(x => x.Emprcodi == regEmp.Emprcodi).Count();

                ws.Cells[rowIniCuerpo, colEmpresa].Value = regEmp.Emprnomb;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colEmpresa, rowIniCuerpo + totalXEmp - 1, colEmpresa, colorLineaDefecto);

                foreach (var regCentral in listaCentralXEmp)
                {
                    if (regCentral.Equicodi == 13418)
                    { }
                    List<IndReporteTotalDTO> listaTotalX = listaTot.Where(x => x.Emprcodi == regCentral.Emprcodi && x.Equipadre == regCentral.Equipadre)
                                                                    .OrderBy(x => x.Famcodi).ThenBy(x => x.Itotunidadnomb).ToList();
                    int totXCentral = listaTotalX.Count();

                    ws.Cells[rowIniCuerpo, colCentral].Value = regCentral.Central;
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentral, rowIniCuerpo + totXCentral - 1, colFAnual, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colPe, rowIniCuerpo + totXCentral - 1, colPe, colorLineaDefecto);

                    //detalle
                    ws.Cells[rowIniCuerpo, colCentralDet].Value = regCentral.Central;
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentralDet, rowIniCuerpo + totXCentral - 1, colCentralDet, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colUnidadDet, rowIniCuerpo + totXCentral - 1, colUnidadDet, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colPeDet, rowIniCuerpo + totXCentral - 1, colPeDet, colorLineaDefecto);
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colFtDet, rowIniCuerpo + totXCentral - 1, colFtDet, colorLineaDefecto);
                    colDinamica = colFtDet + 1;
                    foreach (var item in listaAllMeses)
                    {
                        UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colDinamica, rowIniCuerpo + totXCentral - 1, colDinamica, colorLineaDefecto);
                        colDinamica += 1;
                    }

                    foreach (var regTotalX in listaTotalX)
                    {
                        List<IndReporteDetDTO> listaDetXTot = listaDetAnio.Where(x => x.Equicodi == regTotalX.Equicodi).OrderBy(x => x.Idethoraini).ToList();
                        List<IndReporteTotalDTO> listaTotxMes = listaDetMensual.Where(x => x.Equicodi == regTotalX.Equicodi).OrderBy(x => x.Irecafechaini).ToList();

                        //principal
                        ws.Cells[rowIniCuerpo, colUnidad].Value = regTotalX.Itotunidadnomb;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colEmpresa, rowIniCuerpo, colUnidad, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

                        ws.Cells[rowIniCuerpo, colPe].Value = regTotalX.Itotpe;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colPe, rowIniCuerpo, colPe, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                        UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colPe, rowIniCuerpo, colPe, 3);

                        //detalle
                        ws.Cells[rowIniCuerpo, colUnidadDet].Value = regTotalX.Itotunidadnomb;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colCentralDet, rowIniCuerpo, colUnidadDet, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

                        ws.Cells[rowIniCuerpo, colPeDet].Value = regTotalX.Itotpe;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colPeDet, rowIniCuerpo, colPeDet, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                        UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colPeDet, rowIniCuerpo, colPeDet, 3);

                        ws.Cells[rowIniCuerpo, colFtDet].Value = regTotalX.FactorTeoricoProg;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFtDet, rowIniCuerpo, colFtDet, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                        UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowIniCuerpo, colFtDet, rowIniCuerpo, colFtDet, 1);

                        //detalle principal por año
                        colDinamica = colPe;
                        foreach (var item in listaAnio)
                        {
                            colDinamica++;
                            var regDetXRango = listaDetXTot.Find(x => x.Idethoraini == item.FechaIni && x.Idethorafin == item.FechaFin);
                            if (regDetXRango != null && regDetXRango.NumHorasIp.GetValueOrDefault(0) != 0)
                            {
                                ws.Cells[rowIniCuerpo, colDinamica].Value = regDetXRango.NumHorasIp;
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, 2);
                            }
                            else
                            {
                                ws.Cells[rowIniCuerpo, colDinamica].Value = "-";
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                            }

                            //verificar si el rango esta en teórico
                            DateTime fechaFinTeoricoUnidad = regTotalX.Equifechiniopcom.Value.AddDays(ConstantesIndisponibilidades.NumMesesValidacionOC);
                            if (item.FechaIni < fechaFinTeoricoUnidad && item.FechaIni.AddMonths(1).AddDays(-1) < fechaFinTeoricoUnidad)
                            {
                                UtilExcel.CeldasExcelColorFondo(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, colorFondoTeorico);
                            }
                        }

                        if (regTotalX.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica)
                        {
                            ws.Cells[rowIniCuerpo, colFMensual].Value = regTotalX.Itotfactoripm.GetValueOrDefault(0);
                            ws.Cells[rowIniCuerpo, colFAnual].Value = regTotalX.Itotfactoripa.GetValueOrDefault(0);
                        }
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFMensual, rowIniCuerpo, colFMensual, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, regTotalX.TieneFIPM);
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFAnual, rowIniCuerpo, colFAnual, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, regTotalX.TieneFIPA);
                        UtilExcel.CeldasExcelFormatoPorcentaje(ws, rowIniCuerpo, colFMensual, rowIniCuerpo, colFAnual, 2);

                        ws.Cells[rowIniCuerpo, colCr].Value = regTotalX.Crdesc;
                        UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colCr, rowIniCuerpo, colCr, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);

                        //Historico
                        //detalle principal por año
                        colDinamica = colFtDet + 1;
                        foreach (var item in listaAllMeses)
                        {
                            var regDetXRango = listaTotxMes.Find(x => x.Irecafechaini == item.FechaIni);
                            if (regDetXRango != null && regDetXRango.NumHorasIp.GetValueOrDefault(0) != 0)
                            {
                                ws.Cells[rowIniCuerpo, colDinamica].Value = regDetXRango.NumHorasIp;
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                                UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, 2);
                            }
                            else
                            {
                                ws.Cells[rowIniCuerpo, colDinamica].Value = "-";
                                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colDinamica, rowIniCuerpo, colDinamica, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
                            }
                            colDinamica++;
                        }

                        rowIniCuerpo++;
                    }
                }
            }

            //UtilExcel.AllBorders(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colFAnual]);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colFAnual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colEmpresa, rowIniCuerpo - 1, colUnidad], OfficeOpenXml.Style.ExcelBorderStyle.Medium);
            UtilExcel.BorderAround(ws.Cells[rowTab3 + 1, colFMensual, rowIniCuerpo - 1, colFAnual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            #endregion

            #region Cuerpo Numero días y horas

            var rowIniCuerpo2 = rowIniCuerpo + 2;
            int colDinamica2 = colPe;

            ws.Cells[rowIniCuerpo2, colUnidad].Value = "Cantidad de días";
            ws.Cells[rowIniCuerpo2 + 1, colUnidad].Value = "Cantidad de horas";

            foreach (var item in listaAnio)
            {
                ws.Cells[rowIniCuerpo2, ++colDinamica2].Value = item.TotalDias;
                ws.Cells[rowIniCuerpo2 + 1, colDinamica2].Value = item.TotalHP;
            }
            ws.Cells[rowIniCuerpo2, ++colDinamica2].Value = regEstadisticoAnual.TotalDias;
            ws.Cells[rowIniCuerpo2 + 1, colDinamica2].Value = regEstadisticoAnual.TotalHP;

            UtilExcel.SetFormatoCelda(ws, rowIniCuerpo2, colUnidad, rowIniCuerpo2 + 1, colUnidad, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            UtilExcel.SetFormatoCelda(ws, rowIniCuerpo2, colUnidad + 1, rowIniCuerpo2 + 1, colFMensual, "Centro", "Derecha", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            UtilExcel.AllBorders(ws.Cells[rowIniCuerpo2, colUnidad, rowIniCuerpo2 + 1, colFMensual]);
            UtilExcel.BorderAround(ws.Cells[rowIniCuerpo2, colUnidad, rowIniCuerpo2 + 1, colFMensual], OfficeOpenXml.Style.ExcelBorderStyle.Medium);

            #endregion

            //leyenda teorico
            UtilExcel.CeldasExcelColorFondo(ws, rowIniCuerpo2 + 3, colEmpresa, rowIniCuerpo2 + 3, colEmpresa, colorFondoTeorico);
            ws.Cells[rowIniCuerpo2 + 3, colCentral].Value = "Valores teóricos, de acuerdo al Anexo C del PR-25 vigente";
            UtilExcel.SetFormatoCelda(ws, rowIniCuerpo2 + 3, colCentral, rowIniCuerpo2 + 3, colCentral, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

            ws.View.FreezePanes(rowTab3 + 1, colPe);
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }

        #endregion

        /// <summary>
        /// Periodo maximo en que esta disponible la edición manual de valores de Factores de indisponibilidad
        /// </summary>
        /// <returns></returns>
        public DateTime GetPeriodoMaxHistHidro()
        {
            var reg = FactorySic.GetSiParametroValorRepository().GetById(ConstantesIndisponibilidades.SiparvcodiHidro);
            return DateTime.ParseExact(reg.Siparvnota, ConstantesAppServicio.FormatoMes, CultureInfo.InvariantCulture);
        }

        #endregion

        #region Factor 4: Factor de Presencia

        public int ProcesarFactorPresencia(int irecacodi, int idReporteCuadro5, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25FactorPresencia;
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(irecacodi);

            ReporteInsumoPR25 regSaveBD = GenerarReporteFactorPresencia(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, idReporteCuadro5);

            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionGenerado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = ConstantesAppServicio.Activo,
            };

            if (EsVersionCreableMensualCuadroRelacion(regCuadro, regRecalculo, regReporte, regSaveBD.ListaRptTot, new List<IndReporteDetDTO>(), regSaveBD.ListaRelRpt))
            {
                CambiarAEstadoHistorico(cuadro, regRecalculo.Irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

                regSaveBD.Reporte = regReporte;

                return GuardarReporteIndispBDTransaccional(regSaveBD);
            }

            return 0;
        }

        #region Cálculo

        private ReporteInsumoPR25 GenerarReporteFactorPresencia(DateTime fechaIni, DateTime fechaFin, int idReporteCuadro5)
        {
            List<IndReporteTotalDTO> listaFinal = new List<IndReporteTotalDTO>();

            //cuadro 5
            List<IndReporteTotalDTO> listaReptot = GetByCriteriaIndReporteTotals(idReporteCuadro5).OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ToList();
            List<IndReporteDetDTO> listaRepdet = GetByCriteriaIndReporteDets(idReporteCuadro5);

            int numDias = (fechaFin - fechaIni).Days + 1;

            //
            int idTotal = 1;
            foreach (var regTot in listaReptot)
            {
                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = ConstantesHorasOperacion.IdTipoHidraulica,
                    Emprcodi = regTot.Emprcodi,
                    Equipadre = regTot.Equipadre,
                    Grupocodi = regTot.Grupocodi,
                    Equicodi = regTot.Equicodi,
                    Itotunidadnomb = regTot.Itotunidadnomb,
                    Itotopcom = ConstantesAppServicio.SI,
                };

                var sublista = listaRepdet.Where(x => x.Itotcodi == regTot.Itotcodi).ToList();

                //Indisponibilidad consecutiva mayor a 15 dias
                int numDiaIndispConsecutivos = 0;
                int numTmp = 0;
                for (var day = fechaIni.Date; day <= fechaFin.Date; day = day.AddDays(1))
                {
                    var regDet = sublista.Find(x => x.Idethoraini.Value.Date == day);
                    if (regDet != null && regDet.Idettienedisp != null) //el valor null es cuando todavia no ingresa en op comercial o cuando ha terminado la op comercial
                    {
                        if (regDet.Idettienedisp != 1)
                        {
                            numTmp++;
                        }
                        else
                        {
                            if (numTmp > numDiaIndispConsecutivos) numDiaIndispConsecutivos = numTmp;
                            numTmp = 0;
                        }
                    }
                }
                if (numTmp > numDiaIndispConsecutivos) numDiaIndispConsecutivos = numTmp;

                objUnidad.Itotindmas15d = numDiaIndispConsecutivos > 15 ? "S" : "N";

                //
                objUnidad.Itotinddiasxmes = numDiaIndispConsecutivos > 15 ? sublista.Where(x => x.Idettienedisp != 1).Count() : 0;
                objUnidad.Itotfactorpresm = (numDias - objUnidad.Itotinddiasxmes) / (numDias * 1.0m);

                listaFinal.Add(objUnidad);
                idTotal++;
            }

            //
            List<IndRelacionRptDTO> lRel = new List<IndRelacionRptDTO>();
            lRel.Add(new IndRelacionRptDTO() { Irelpridsec = idReporteCuadro5 });

            //
            ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
            regSaveBD.ListaRptTot = listaFinal;
            regSaveBD.ListaRelRpt = lRel;

            return regSaveBD;
        }

        #endregion

        #region web Handson y excel

        public void GenerarWebReporteFP(int irptcodi, string empresa, string central, out HandsonModel handson)
        {
            this.GenerarReporteFactorPresenciaCuadroXVersionReporte(irptcodi, empresa, central
                                                    , out handson
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<SiEmpresaDTO> listaEmpresa);
        }

        public void GenerarReporteFactorPresenciaCuadroXVersionReporte(int irptcodi, string empresa, string central
                                                    , out HandsonModel handsonFP
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<SiEmpresaDTO> listaEmpresa)
        {
            regVersion = this.GetByIdIndReporte(irptcodi);
            regCuadro = this.GetByIdIndCuadro(regVersion.Icuacodi);
            var regRecalculo = this.GetByIdIndRecalculo(regVersion.Irecacodi);
            regPeriodo = this.GetByIdIndPeriodo(regRecalculo.Ipericodi);

            this.ListaDataXVersionReporte(irptcodi, regCuadro.ListaFamcodi, ConstantesAppServicio.SI, empresa, central
                , out listaReptot, out List<IndReporteDetDTO> listaRepdetOut
                , out listaEmpresa, out List<EqEquipoDTO> listaCentral);

            //Obtener detalle del cuadro 5
            List<IndRelacionRptDTO> listaRel = GetByCriteriaIndRelacionRpts(irptcodi);
            List<IndReporteDetDTO> listaRepdet = new List<IndReporteDetDTO>();
            if (listaRel.Any())
            {
                int rptcodi5 = listaRel.First().Irelpridsec;
                listaRepdet = GetByCriteriaIndReporteDets(rptcodi5);
            }

            //Salidas
            handsonFP = GetHandsonFactorPresenciaXVersionReporte(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin
                                                                , listaReptot, listaRepdet, listaEmpresa, listaCentral);
        }

        /// <summary>
        /// Generar excel web de cuadro por versión
        /// </summary>
        /// <param name="tipoIndisp"></param>
        /// <param name="tgenernomb"></param>
        /// <param name="listaTot"></param>
        /// <param name="listaAllDet"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaEquipo"></param>
        /// <param name="listaManttoBD"></param>
        /// <returns></returns>
        public HandsonModel GetHandsonFactorPresenciaXVersionReporte(DateTime fechaIni, DateTime fechaFin
                                                                , List<IndReporteTotalDTO> listaTot, List<IndReporteDetDTO> listaDet
                                                                , List<SiEmpresaDTO> listaEmpresa, List<EqEquipoDTO> listaCentral)
        {
            int numDias = (fechaFin - fechaIni).Days + 1;

            //Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>();
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Empresa", IsMerge = 1, Ancho = 340, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Central generadora", IsMerge = 1, Ancho = 190, AlineacionHorizontal = "Izquierda", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Indisponibilidad total en <br/> más de 15 dias  <br/> consecutivos en el mes", IsMerge = 1, Ancho = 220, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Suma de Indisponibilidades <br/> diarias en el mes  <br/> (*)", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });
            listaCabecera.Add(new CabeceraRow() { TituloRow = "Factor de presencia <br/> mensual", IsMerge = 0, Ancho = 100, AlineacionHorizontal = "Centro", });

            DateTime fechaXDia = fechaIni.AddDays(-1);
            for (int x = 1; x <= numDias; x++)
            {
                fechaXDia = fechaXDia.AddDays(1);
                listaCabecera.Add(new CabeceraRow() { TituloRow = fechaXDia.ToString("dd-MMM"), IsMerge = 0, Ancho = 50, AlineacionHorizontal = "Centro", });
            }

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = true,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }

            //Body
            int numColAntesdeFecha = 5;
            int numCol = numColAntesdeFecha + numDias;
            int numFilaActual = 0;

            List<string[]> listaDataHandson = new List<string[]>();
            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            foreach (var regEmp in listaEmpresa)
            {
                List<EqEquipoDTO> listaCentralXEmp = listaCentral.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();

                CeldaMerge cel = new CeldaMerge();
                cel.col = 0;
                cel.row = numFilaActual;
                cel.colspan = 1;
                cel.rowspan = listaCentralXEmp.Count();
                listaMerge.Add(cel);

                foreach (var regCentral in listaCentralXEmp)
                {
                    if (regCentral.Equicodi == 13418)
                    { }
                    IndReporteTotalDTO regTotalX = listaTot.Find(x => x.Emprcodi == regCentral.Emprcodi && x.Equipadre == regCentral.Equipadre);

                    string[] matriz = new string[numCol];
                    if (regTotalX != null)
                    {
                        matriz[0] = regEmp.Emprnomb; //EMPRESA
                        matriz[1] = regCentral.Central; //CENTRAL
                        matriz[2] = regTotalX.Itotindmas15dDesc;
                        matriz[3] = regTotalX.Itotinddiasxmes != null ? regTotalX.Itotinddiasxmes.Value.ToString() : "";
                        matriz[4] = regTotalX.Itotfactorpresm != null ? regTotalX.Itotfactorpresm.Value.ToString() : "";

                        List<IndReporteDetDTO> listaDetXTot = listaDet.Where(x => x.Equipadre == regTotalX.Equipadre).OrderBy(x => x.Idethoraini).ToList();
                        //foreach de dias del mes
                        fechaXDia = fechaIni.AddDays(-1);
                        for (int col = numColAntesdeFecha; col < numCol; col++)
                        {
                            fechaXDia = fechaXDia.AddDays(1);

                            IndReporteDetDTO regDetEqXDia = listaDetXTot.Find(x => x.Idethoraini.Value.Date == fechaXDia);
                            matriz[col] = (regDetEqXDia != null && regDetEqXDia.Idettienedisp != null) ? regDetEqXDia.Idettienedisp.Value.ToString() : "";
                        }
                    }

                    listaDataHandson.Add(matriz);
                    numFilaActual++;
                }

            }

            HandsonModel handson = new HandsonModel();
            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return handson;
        }

        public void GenerarRptExcelFactorPresencia(string ruta, int irptcodi, string empresa, string central, out string nameFile)
        {
            this.GenerarReporteFactorPresenciaCuadroXVersionReporte(irptcodi, empresa, central
                                                    , out HandsonModel FP
                                                    , out IndReporteDTO regVersion, out IndPeriodoDTO regPeriodo, out IndCuadroDTO regCuadro
                                                    , out List<IndReporteTotalDTO> listaReptot, out List<SiEmpresaDTO> listaEmpresa);

            //Nombre de archivo
            nameFile = string.Format("PF_FactorPresencia_{0}_Version_{1}.xlsx", regPeriodo.Iperinombre, regVersion.Irptnumversion);

            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelFactorPresencia(xlPackage, "Factorpresencia", 1, 4, 8, 1
                                                            , regVersion.Irecainforme, "CUADRO N° 4", regCuadro.Icuatitulo, regPeriodo.Iperianio, regPeriodo.Iperimes, regPeriodo.TotalDias, regPeriodo.FechaIni
                                                            , listaReptot, listaEmpresa);

                xlPackage.Save();
            }
        }

        public void GenerarHojaExcelFactorPresencia(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni, int rowIniTabla, int colIniTabla
                                                    , string informe, string nombreCuadro, string titulo, int anio, int mes, int numDias, DateTime fechaPeriodo
                                                    , List<IndReporteTotalDTO> listaTot, List<SiEmpresaDTO> listaEmpresa)
        {
            //inicia C1

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];
            ws.TabColor = ColorTranslator.FromHtml("#FFC000");

            string font = "Arial";
            string colorCeldaTextoDefecto = "#000000";
            //string colorCeldaTextoTotalMes = "#D9D9D9";
            string colorCeldaFondoDefecto = "#FFFFFF";
            string colorLineaDefecto = "#000000";

            #region Titulo

            int colEmpresa = colIniTabla;
            int colCentral = colEmpresa + 1;
            int col15 = colCentral + 1;
            int colSumaDia = col15 + 1;
            int colFp = colSumaDia + 1;

            ws.Cells[rowIni, colFp].Value = informe;
            ws.Cells[rowIni + 3, colIni].Value = nombreCuadro;
            ws.Cells[rowIni + 4, colIni].Value = titulo;
            ws.Cells[rowIni + 5, colIni].Value = $"{EPDate.f_NombreMes(mes)} {anio}";

            UtilExcel.SetFormatoCelda(ws, rowIni + 3, colIni, rowIni + 5, colIni, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);
            UtilExcel.SetFormatoCelda(ws, rowIni, colFp, rowIni, colFp, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, true);

            int rowTab1 = rowIniTabla;
            int rowTab2 = rowTab1 + 1;
            int rowTab3 = rowTab2 + 1;
            ws.Cells[rowTab1, colEmpresa].Value = "Empresa";
            ws.Cells[rowTab1, colCentral].Value = "Central generadora";
            ws.Cells[rowTab1, col15].Value = "Indisponibilidad total en \n más de 15 dias \n consecutivos en el mes";
            ws.Cells[rowTab1, colSumaDia].Value = "Suma de Indisponibilidades \n diarias en el mes \n (*)";
            ws.Cells[rowTab1, colFp].Value = "Factor de presencia \n mensual";

            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colEmpresa, rowTab3, colEmpresa);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colCentral, rowTab3, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, col15, rowTab3, col15);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colSumaDia, rowTab3, colSumaDia);
            UtilExcel.CeldasExcelAgrupar(ws, rowTab1, colFp, rowTab3, colFp);

            UtilExcel.SetFormatoCelda(ws, rowTab1, colEmpresa, rowTab3, colFp, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colEmpresa, rowTab3, colEmpresa, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colCentral, rowTab3, colCentral, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, col15, rowTab3, col15, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colSumaDia, rowTab3, colSumaDia, colorLineaDefecto);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowTab1, colFp, rowTab3, colFp, colorLineaDefecto);

            UtilExcel.BorderAround(ws.Cells[rowTab1, colEmpresa, rowTab3, colFp]);

            ws.Column(colEmpresa).Width = 38;
            ws.Column(colCentral).Width = 23;
            ws.Column(col15).Width = 21;
            ws.Column(colSumaDia).Width = 23;
            ws.Column(colFp).Width = 19;

            #endregion

            #region Cuerpo

            int rowIniCuerpo = rowTab3 + 1;

            foreach (var regEmp in listaEmpresa)
            {
                List<IndReporteTotalDTO> listaCentralXEmp = listaTot.Where(x => x.Emprcodi == regEmp.Emprcodi).ToList();
                int totalXEmp = listaTot.Where(x => x.Emprcodi == regEmp.Emprcodi).Count();

                ws.Cells[rowIniCuerpo, colEmpresa].Value = regEmp.Emprnomb;
                UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colEmpresa, rowIniCuerpo + totalXEmp - 1, colEmpresa, colorLineaDefecto);
                UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colEmpresa, rowIniCuerpo, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

                foreach (var regTotalX in listaCentralXEmp)
                {
                    string colorCelda = regTotalX.Itotindmas15d == ConstantesAppServicio.SI ? "#FF0000" : colorCeldaTextoDefecto;
                    bool negritaCelda = regTotalX.Itotindmas15d == ConstantesAppServicio.SI;
                    string colorNum = regTotalX.Itotindmas15d == ConstantesAppServicio.SI ? "#9C0006" : colorCeldaTextoDefecto;
                    string colorFondoNum = regTotalX.Itotindmas15d == ConstantesAppServicio.SI ? "#FFC7CE" : colorCeldaFondoDefecto;

                    ws.Cells[rowIniCuerpo, colCentral].Value = regTotalX.Central;
                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentral, rowIniCuerpo, colCentral, colorLineaDefecto);
                    UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colCentral, rowIniCuerpo, colCentral, "Centro", "Izquierda", colorCelda, colorCeldaFondoDefecto, font, 10, negritaCelda);

                    ws.Cells[rowIniCuerpo, col15].Value = regTotalX.Itotindmas15dDesc;
                    UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, col15, rowIniCuerpo, col15, "Centro", "Centro", colorNum, colorFondoNum, font, 10, false);

                    //principal
                    ws.Cells[rowIniCuerpo, colSumaDia].Value = regTotalX.Itotinddiasxmes;
                    UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colSumaDia, rowIniCuerpo, colSumaDia, "Centro", "Centro", colorNum, colorCeldaFondoDefecto, font, 10, false);

                    ws.Cells[rowIniCuerpo, colFp].Value = regTotalX.Itotfactorpresm;
                    UtilExcel.SetFormatoCelda(ws, rowIniCuerpo, colFp, rowIniCuerpo, colFp, "Centro", "Derecha", colorNum, colorFondoNum, font, 10, false);
                    UtilExcel.CeldasExcelFormatoNumero(ws, rowIniCuerpo, colFp, rowIniCuerpo, colFp, 2);

                    UtilExcel.BorderCeldasLineaDelgada(ws, rowIniCuerpo, colCentral, rowIniCuerpo, colFp, colorLineaDefecto, true);

                    rowIniCuerpo++;
                }
            }

            #endregion

            #region Nota

            int rowIniNota = rowIniCuerpo + 3;

            ws.Cells[rowIniNota, colEmpresa].Value = "Número de dias del mes (n) :";
            ws.Cells[rowIniNota, col15].Value = numDias;
            UtilExcel.SetFormatoCelda(ws, rowIniNota, colEmpresa, rowIniNota, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);
            UtilExcel.SetFormatoCelda(ws, rowIniNota, col15, rowIniNota, col15, "Centro", "Centro", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

            ws.Cells[rowIniNota + 2, colEmpresa].Value = "(*) Para centrales con indisponibilidad total con más de 15 dias consecutivos en el mes.";
            UtilExcel.SetFormatoCelda(ws, rowIniNota + 2, colEmpresa, rowIniNota + 2, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

            ws.Cells[rowIniNota + 3, colEmpresa].Value = "     Indisponibilidad diaria: si la central no despacho al menos en el 50% del período que corresponde a las horas de punta del sistema";
            ws.Cells[rowIniNota + 4, colEmpresa].Value = "     y con al menos el 15% de su potencia efectiva.";
            UtilExcel.SetFormatoCelda(ws, rowIniNota + 3, colEmpresa, rowIniNota + 4, colEmpresa, "Centro", "Izquierda", colorCeldaTextoDefecto, colorCeldaFondoDefecto, font, 10, false);

            #endregion

            ws.View.FreezePanes(rowTab3 + 1, colCentral + 1);
            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }

        #endregion

        #endregion

        #region Actualizar Reporte 

        /// <summary>
        /// Actualizar/crear reporte desde la interfaz de manttos
        /// </summary>
        /// <param name="irecacodi"></param>
        /// <param name="cuacodi"></param>
        /// <param name="usuario"></param>
        public void ActualizarReporte(int irecacodi, int cuacodi, string usuario)
        {
            IndRecalculoDTO regRecalculo = GetByIdIndRecalculo(irecacodi);

            if (ConstantesIndisponibilidades.EstadoPeriodoAbierto == regRecalculo.Estado)
            {
                if (cuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro1)
                    ActualizarReporteCuadro(cuacodi, irecacodi, ConstantesHorasOperacion.IdTipoTermica, usuario);

                if (cuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro2)
                    ProcesarCuadro2(irecacodi, ConstantesIndisponibilidades.TiempoHoraPunta, usuario);

                if (cuacodi == ConstantesIndisponibilidades.ReportePR25Cuadro4)
                    ActualizarReporteCuadro(cuacodi, irecacodi, ConstantesHorasOperacion.IdTipoHidraulica, usuario);
            }
        }

        private void ActualizarReporteCuadro(int idCuadro, int irecacodi, int famcodi, string usuario)
        {
            CambiarAEstadoHistorico(idCuadro, irecacodi, ConstantesIndisponibilidades.TipoReporteAplicativo, ConstantesIndisponibilidades.TiempoHoraPunta);

            ProcesarCuadro(idCuadro, irecacodi, ConstantesIndisponibilidades.TiempoHoraPunta, famcodi, usuario);
        }

        private void CambiarAEstadoHistorico(int idCuadro, int irecacodi, string rpttipo, string rpttiempo)
        {
            var regC = GetUltimaVersion(idCuadro, irecacodi, rpttipo, rpttiempo);
            if (regC != null && regC.Irptesfinal != ConstantesIndisponibilidades.EsVersionValidado)
            {
                DesactivarReporte(regC);
            }
        }

        private IndReporteDTO GetUltimaVersion(int idCuadro, int irecacodi, string rpttipo, string rpttiempo)
        {
            List<IndReporteDTO> lista = this.GetByCriteriaIndReportes(idCuadro, irecacodi);
            var listaXApp = lista.Where(x => x.Irpttipo == rpttipo).ToList();
            var listaXHp = listaXApp.Where(x => x.Irpttiempo == rpttiempo).OrderByDescending(x => x.Irptnumversion).ToList();

            return listaXHp.FirstOrDefault();
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_REPORTE
        /// </summary>
        public void AprobarIndReporte(IndReporteDTO entity)
        {
            try
            {
                FactorySic.GetIndReporteRepository().UpdateAprobar(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza un registro de la tabla IND_REPORTE
        /// </summary>
        public void DesactivarReporte(IndReporteDTO entity)
        {
            try
            {
                FactorySic.GetIndReporteRepository().UpdateHistorico(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        #endregion

        #region Funciones comunes

        public List<PrGrupoDTO> ListarGrupoValido(string catecodis = "-1")
        {
            List<PrGrupoDTO> listaGrupo = FactorySic.GetPrGrupoRepository().List(catecodis);
            listaGrupo = listaGrupo.Where(x => x.GrupoEstado != ConstantesAppServicio.Anulado).ToList();

            foreach (var reg in listaGrupo)
            {
                reg.Gruponomb = (reg.Gruponomb ?? "").Trim();
                reg.Grupoabrev = (reg.Grupoabrev ?? "").Trim();
            }

            return listaGrupo;
        }
        /// <summary>
        /// Obtener el valor decimal de PrGrupoEquipoVal
        /// </summary>
        /// <param name="conceptos"></param>
        /// <returns></returns>
        public static List<PrGrupoEquipoValDTO> ListarPrGrupoEquipoValHistoricoDecimalValido(string conceptos, DateTime? fechaVigencia = null, bool flagSoloDatVigente = false)
        {
            List<PrGrupoEquipoValDTO> listaEquipoValEsp = ListarPrGrupoEquipoValHistoricoVigente(conceptos, fechaVigencia, flagSoloDatVigente);

            foreach (var reg in listaEquipoValEsp)
            {
                decimal valor = 0;
                if (decimal.TryParse((reg.Greqvaformuladat != null ? reg.Greqvaformuladat.Trim() : string.Empty), out valor))
                    reg.ValorDecimal = decimal.Round(valor, ConstantesIndisponibilidades.NumeroDecimalesMaxApp);
            }

            return listaEquipoValEsp;
        }

        public static List<PrGrupoEquipoValDTO> ListarPrGrupoEquipoValHistoricoVigente(string conceptos, DateTime? fechaVigencia, bool flagSoloDatVigente)
        {
            if (flagSoloDatVigente)
            {
                return FactorySic.GetPrGrupoEquipoValRepository().ListarPrGrupoEquipoValVigente(fechaVigencia.Value, conceptos, "-1", "-1");
            }
            else
            {
                return FactorySic.GetPrGrupoEquipoValRepository().ListarHistoricoValores
                                                                 (conceptos, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto)
                                                                 .Where(x => x.Greqvadeleted == 0).OrderByDescending(x => x.Greqvafechadat).ToList();
            }
        }

        public static List<EqPropequiDTO> ListarEqPropequiHistoricoDecimalValido(string prop, DateTime? fechaVigencia = null, bool flagSoloDatVigente = false)
        {
            List<EqPropequiDTO> lista = ListarEqPropequiHistoricoVigente(prop, fechaVigencia, flagSoloDatVigente);

            foreach (var reg in lista)
            {
                decimal valor = 0;
                if (decimal.TryParse((reg.Valor != null ? reg.Valor.Trim() : string.Empty), out valor))
                    reg.ValorDecimal = valor;
            }

            return lista;
        }

        public static List<EqPropequiDTO> ListarEqPropequiHistoricoVigente(string prop, DateTime? fechaVigencia, bool flagSoloDatVigente)
        {
            if (flagSoloDatVigente)
            {
                return FactorySic.GetEqPropequiRepository().ListarValoresVigentesPropiedades(fechaVigencia.Value, "-1", "-1", "-1", prop, string.Empty, "-1");
            }
            else
            {
                return FactorySic.GetEqPropequiRepository().ListarValoresHistoricosPropiedadPorEquipo(-1, prop)
                                                                    .Where(x => x.Propequideleted == 0).OrderByDescending(x => x.Fechapropequi).ToList();
            }
        }

        public static List<PrGrupodatDTO> ListarPrGrupodatHistoricoEnteroValido(string conceptos, DateTime? fechaVigencia = null, bool flagSoloDatVigente = false)
        {
            List<PrGrupodatDTO> lista = ListarPrGrupodatHistoricoVigente(conceptos, fechaVigencia, flagSoloDatVigente);

            foreach (var reg in lista)
            {
                int valor = 0;
                if (int.TryParse((reg.Formuladat != null ? reg.Formuladat.Trim() : string.Empty), out valor))
                    reg.ValorEntero = valor;

                //a veces se guarda en base de datos valores como 5.0 y estos no son parseados en la linea anterior
                if (valor == 0)
                {
                    decimal valor1 = 0;
                    if (decimal.TryParse((reg.Formuladat != null ? reg.Formuladat.Trim() : string.Empty), out valor1))
                    {
                        decimal valorDecimal = decimal.Round(valor1, ConstantesIndisponibilidades.NumeroDecimalesMaxApp);
                        reg.ValorEntero = Convert.ToInt32(valorDecimal);
                    }
                }
            }

            return lista;
        }

        public static List<PrGrupodatDTO> ListarPrGrupodatHistoricoDecimalValido(string conceptos, DateTime? fechaVigencia = null, bool flagSoloDatVigente = false)
        {
            List<PrGrupodatDTO> lista = ListarPrGrupodatHistoricoVigente(conceptos, fechaVigencia, flagSoloDatVigente);

            foreach (var reg in lista)
            {
                decimal valor = 0;
                if (decimal.TryParse((reg.Formuladat != null ? reg.Formuladat.Trim() : string.Empty), out valor))
                    reg.ValorDecimal = decimal.Round(valor, ConstantesIndisponibilidades.NumeroDecimalesMaxApp);
            }

            return lista;
        }

        public static List<PrGrupodatDTO> ListarPrGrupodatHistoricoVigente(string conceptos, DateTime? fechaVigencia, bool flagSoloDatVigente)
        {
            if (flagSoloDatVigente)
            {
                return FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fechaVigencia.Value, "-1", conceptos);
            }
            else
            {
                return FactorySic.GetPrGrupodatRepository().ListarHistoricoValores(conceptos, -1)
                                   .Where(x => x.Deleted == 0).OrderByDescending(x => x.Fechadat).ToList();
            }
        }

        /// <summary>
        /// Obtiene potencia e y fecha vigencia desde Grupo dat
        /// </summary>
        /// <param name="fechaConsulta"></param>
        /// <param name="grupocodi"></param>
        /// <param name="listaPeModo"></param>
        /// <param name="valor"></param>
        /// <param name="fechaVigencia"></param>
        public void GetValorDecimalFromListaGrupoDat2(DateTime fechaConsulta, int grupocodi, int concepcodi, List<PrGrupodatDTO> listaDat, out decimal? valor, out DateTime? fechaVigencia)
        {
            var listaDatFiltrado = listaDat.Where(x => x.Grupocodi == grupocodi && x.Fechadat <= fechaConsulta).ToList();
            listaDatFiltrado = ListarDatosFormulaDat(listaDatFiltrado, concepcodi);

            GetValorDecimalFromListaGrupoDat(fechaConsulta, grupocodi, listaDatFiltrado, out valor, out fechaVigencia);
        }

        /// <summary>
        /// Obtiene potencia e y fecha vigencia desde Grupo dat
        /// </summary>
        /// <param name="fechaConsulta"></param>
        /// <param name="grupocodi"></param>
        /// <param name="listaPeModo"></param>
        /// <param name="valor"></param>
        /// <param name="fechaVigencia"></param>
        public static void GetValorDecimalFromListaGrupoDat(DateTime fechaConsulta, int grupocodi, List<PrGrupodatDTO> listaDat, out decimal? valor, out DateTime? fechaVigencia)
        {
            var reg = listaDat.OrderByDescending(x => x.Fechadat).ToList().Find(x => x.Grupocodi == grupocodi && x.Fechadat <= fechaConsulta);
            valor = reg != null ? reg.ValorDecimal : null;
            fechaVigencia = reg != null ? reg.Fechadat : null;
        }

        /// <summary>
        /// Obtiene potencia e y fecha vigencia desde Grupo dat
        /// </summary>
        /// <param name="fechaConsulta"></param>
        /// <param name="grupocodi"></param>
        /// <param name="listaPeModo"></param>
        /// <param name="valor"></param>
        /// <param name="fechaVigencia"></param>
        public static void GetEnteroFromListaGrupoDat(DateTime fechaConsulta, int grupocodi, List<PrGrupodatDTO> listaPeModo, out int valor, out DateTime? fechaVigencia)
        {
            var reg = listaPeModo.OrderByDescending(x => x.Fechadat).ToList().Find(x => x.Grupocodi == grupocodi && x.Fechadat <= fechaConsulta);
            valor = reg != null ? reg.ValorEntero : 0;
            fechaVigencia = reg != null ? reg.Fechadat : null;
        }

        /// <summary>
        /// Obtiene potencia e y fecha vigencia desde Grupo dat
        /// </summary>
        /// <param name="fechaConsulta"></param>
        /// <param name="grupocodi"></param>
        /// <param name="listaPeModo"></param>
        /// <param name="valor"></param>
        /// <param name="fechaVigencia"></param>
        private void GetFlagFromListaGrupoDat(DateTime fechaConsulta, int grupocodi, List<PrGrupodatDTO> listaDat, out string valor, out DateTime? fechaVigencia)
        {
            var reg = listaDat.Find(x => x.Grupocodi == grupocodi && x.Fechadat <= fechaConsulta);
            valor = reg != null ? reg.Formuladat : ConstantesAppServicio.NO;
            fechaVigencia = reg != null ? reg.Fechadat : null;
        }

        /// <summary>
        /// Obtiene potencia e y fecha vigencia desde Grupo dat
        /// </summary>
        /// <param name="fechaConsulta"></param>
        /// <param name="grupocodi"></param>
        /// <param name="listaPeModo"></param>
        /// <param name="valor"></param>
        /// <param name="fechaVigencia"></param>
        public static void GetValorStringFromListaGrupoDat(DateTime fechaConsulta, int grupocodi, List<PrGrupodatDTO> listaDat, out string valor, out DateTime? fechaVigencia)
        {
            var reg = listaDat.Find(x => x.Grupocodi == grupocodi && x.Fechadat <= fechaConsulta);
            valor = reg != null ? reg.Formuladat : "";
            fechaVigencia = reg != null ? reg.Fechadat : null;
        }

        public static void GetValorDecimalFromListaGrupoVal2(DateTime fechaConsulta, int grupocodi, int equicodi, int concepcodi, List<PrGrupoEquipoValDTO> listaVal, out decimal? valor, out DateTime? fechaVigencia)
        {
            var listaDatFiltrado = listaVal.Where(x => x.Grupocodi == grupocodi && x.Greqvafechadat <= fechaConsulta).ToList();
            listaDatFiltrado = ListarDatosFormulaDat(listaDatFiltrado, concepcodi);

            GetValorDecimalFromListaGrupoVal(fechaConsulta, grupocodi, equicodi, listaVal, out valor, out fechaVigencia);
        }

        /// <summary>
        /// Obtiene Potencia Efectiva y fecha de vigencia de un modo de operación
        /// </summary>
        /// <param name="fechaConsulta"></param>
        /// <param name="grupocodi"></param>
        /// <param name="equicodi"></param>
        /// <param name="listaPeModo"></param>
        /// <param name="valor"></param>
        /// <param name="fechaVigencia"></param>
        public static void GetValorDecimalFromListaGrupoVal(DateTime fechaConsulta, int grupocodi, int equicodi, List<PrGrupoEquipoValDTO> listaVal, out decimal? valor, out DateTime? fechaVigencia)
        {
            var reg = listaVal.Find(x => x.Grupocodi == grupocodi && x.Equicodi == equicodi && x.Greqvafechadat <= fechaConsulta);
            valor = reg != null ? reg.ValorDecimal : null;
            fechaVigencia = null;
            if (reg != null) fechaVigencia = reg.Greqvafechadat;
        }

        /// <summary>
        /// Obtiene Potencia Efectiva y fecha de vigencia de un equipo
        /// </summary>
        /// <param name="fechaConsulta"></param>
        /// <param name="equicodi"></param>
        /// <param name="listaPeProp"></param>
        /// <param name="valor"></param>
        /// <param name="fechaVigencia"></param>
        public static void GetPeFromListaPropequi(DateTime fechaConsulta, int equicodi, List<EqPropequiDTO> listaPeProp, out decimal? valor, out DateTime? fechaVigencia, out string comentario)
        {
            var reg = listaPeProp.Find(x => x.Equicodi == equicodi && x.Fechapropequi <= fechaConsulta);

            valor = reg != null ? reg.ValorDecimal : null;
            fechaVigencia = reg != null ? (DateTime?)reg.Fechapropequi : null;
            comentario = reg != null ? reg.Propequiobservacion : "";
        }

        public static void GetValorDecimalFromListaEqPropequi(DateTime fechaConsulta, int equicodi, List<EqPropequiDTO> listaPeProp, out decimal? valor, out DateTime? fechaVigencia, out string comentario)
        {
            GetPeFromListaPropequi(fechaConsulta, equicodi, listaPeProp, out valor, out fechaVigencia, out comentario);
        }

        private static List<PrGrupodatDTO> ListarDatosFormulaDat(List<PrGrupodatDTO> listaDatBD, int concepcodi = -1)
        {
            listaDatBD = listaDatBD.OrderByDescending(x => x.Fechadat).ToList();

            List<PrGrupodatDTO> listaDataGrupo = new List<PrGrupodatDTO>();

            Base.Tools.n_parameter l_param = new Base.Tools.n_parameter();

            List<PrConceptoDTO> listaConcepto = listaDatBD.DistinctBy(x => x.Concepcodi)
                                .Select(x => new PrConceptoDTO() { Concepcodi = x.Concepcodi, Conceppadre = x.Conceppadre, Concepabrev = (x.Concepabrev ?? "").Trim() }).ToList();

            //llenar data
            List<PrGrupodatDTO> listaDataFiltro = new List<PrGrupodatDTO>();
            foreach (var concepto in listaConcepto)
            {
                //la data previamente viene ordenada descendente
                var regDat = listaDatBD.First(x => x.Concepcodi == concepto.Concepcodi);

                if ((regDat.Formuladat ?? "".Trim()) != "")
                {
                    listaDataFiltro.Add(regDat);

                    l_param.SetData((concepto.Concepabrev ?? "").Trim(), regDat.Formuladat ?? "".Trim());
                }
            }

            //evaluar
            foreach (var concepto in listaConcepto)
            {
                decimal valorDecimal = decimal.Round(Convert.ToDecimal(l_param.GetEvaluate(concepto.Concepabrev)), ConstantesIndisponibilidades.NumeroDecimalesMaxApp);

                PrGrupodatDTO regDat = listaDataFiltro.Find(x => x.Concepcodi == concepto.Concepcodi);
                PrGrupodatDTO regDatSI = listaDataFiltro.Find(x => x.Conceppadre == concepto.Concepcodi);

                if ((regDat != null && regDatSI != null) || (regDat != null))
                {
                    DateTime? fechaDat = regDatSI != null ? regDatSI.Fechadat : regDat.Fechadat;
                    int grupocodi = regDatSI != null ? regDatSI.Grupocodi : regDat.Grupocodi;

                    if (valorDecimal > 0)
                    {
                        listaDataGrupo.Add(new PrGrupodatDTO()
                        {
                            Concepcodi = concepto.Concepcodi,
                            Concepabrev = concepto.Concepabrev,
                            Formuladat = valorDecimal.ToString(),
                            ValorDecimal = valorDecimal,
                            Fechadat = fechaDat,
                            Grupocodi = grupocodi
                        });
                    }
                }
            }

            if (concepcodi != -1)
                listaDataGrupo = listaDataGrupo.Where(x => x.Concepcodi == concepcodi).ToList();

            return listaDataGrupo;
        }

        private static List<PrGrupoEquipoValDTO> ListarDatosFormulaDat(List<PrGrupoEquipoValDTO> listaDatBD, int concepcodi = -1)
        {
            listaDatBD = listaDatBD.OrderByDescending(x => x.Greqvafechadat).ToList();

            List<PrGrupoEquipoValDTO> listaDataGrupo = new List<PrGrupoEquipoValDTO>();

            Base.Tools.n_parameter l_param = new Base.Tools.n_parameter();

            List<PrConceptoDTO> listaConcepto = listaDatBD.DistinctBy(x => x.Concepcodi)
                                .Select(x => new PrConceptoDTO() { Concepcodi = x.Concepcodi, Conceppadre = x.Conceppadre, Concepabrev = x.Concepabrev ?? "".Trim() }).ToList();

            //llenar data
            List<PrGrupoEquipoValDTO> listaDataFiltro = new List<PrGrupoEquipoValDTO>();
            foreach (var concepto in listaConcepto)
            {
                //la data previamente viene ordenada descendente
                var regDat = listaDatBD.First(x => x.Concepcodi == concepto.Concepcodi);

                if ((regDat.Greqvaformuladat ?? "".Trim()) != "")
                {
                    listaDataFiltro.Add(regDat);

                    l_param.SetData(concepto.Concepabrev, regDat.Greqvaformuladat ?? "".Trim());
                }
            }

            //evaluar
            foreach (var concepto in listaConcepto)
            {
                decimal valorDecimal = decimal.Round(Convert.ToDecimal(l_param.GetEvaluate(concepto.Concepabrev)), ConstantesIndisponibilidades.NumeroDecimalesMaxApp);

                PrGrupoEquipoValDTO regDat = listaDataFiltro.Find(x => x.Concepcodi == concepto.Concepcodi);
                PrGrupoEquipoValDTO regDatSI = listaDataFiltro.Find(x => x.Conceppadre == concepto.Concepcodi);

                if ((regDat != null && regDatSI != null) || (regDat != null))
                {
                    DateTime? fechaDat = regDatSI != null ? regDatSI.Greqvafechadat : regDat.Greqvafechadat;
                    int grupocodi = regDatSI != null ? regDatSI.Grupocodi : regDat.Grupocodi;

                    if (valorDecimal > 0)
                    {
                        listaDataGrupo.Add(new PrGrupoEquipoValDTO()
                        {
                            Concepcodi = concepto.Concepcodi,
                            Concepabrev = concepto.Concepabrev,
                            Greqvaformuladat = valorDecimal.ToString(),
                            ValorDecimal = valorDecimal,
                            Greqvafechadat = fechaDat ?? DateTime.MinValue,
                            Grupocodi = grupocodi
                        });
                    }
                }
            }

            if (concepcodi != -1)
                listaDataGrupo = listaDataGrupo.Where(x => x.Concepcodi == concepcodi).ToList();

            return listaDataGrupo;
        }

        /// <summary>
        /// Permite listar los tipos de empresas
        /// </summary>
        /// <returns></returns>
        public List<SiTipoempresaDTO> ListarTipoEmpresas()
        {
            return FactorySic.GetSiTipoempresaRepository().List();
        }

        /// <summary>
        /// Permite obtener las empresa por tipo
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresasPorTipo(string tiposEmpresa)
        {
            if (string.IsNullOrEmpty(tiposEmpresa)) tiposEmpresa = ConstantesAppServicio.ParametroDefecto;
            return (new IEODAppServicio()).ListarEmpresasTienenCentralGenxTipoEmpresa(tiposEmpresa).OrderBy(x => x.Emprnomb).ToList();
        }

        /// <summary>
        /// Permite listar las empresas
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresasxTipoEquipos(string tipoEquipos)
        {
            return FactorySic.GetSiEmpresaRepository().ListarEmpresasxTipoEquipos(tipoEquipos, ConstantesAppServicio.ParametroDefecto);
        }

        /// <summary>
        /// Lista Clase de eventos
        /// </summary>
        /// <returns></returns>
        public List<EveEvenclaseDTO> ListarClaseEventos()
        {
            var lista = FactorySic.GetEveEvenclaseRepository().List();
            lista = lista.Where(x => x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec || x.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg).ToList();
            return lista;
        }

        /// <summary>
        /// Obtener Lista de Familia por codigos de familia
        /// </summary>
        /// <param name="strFam"></param>
        /// <returns></returns>
        public List<EqFamiliaDTO> ListarFamilia(string strFam)
        {
            if (string.IsNullOrEmpty(strFam)) strFam = ConstantesAppServicio.ParametroDefecto;

            var lista = FactorySic.GetEqFamiliaRepository().List();
            lista = lista.Where(x => ListaTipoEquipoFiltro().Contains(x.Famcodi)).ToList();

            if (strFam != ConstantesAppServicio.ParametroDefecto)
            {
                int[] famcodis = strFam.Split(',').Select(x => int.Parse(x)).ToArray();
                lista = lista.Where(x => famcodis.Contains(x.Famcodi)).ToList();
            }

            return lista;
        }

        /// <summary>
        /// Lista de codigos de los tipos de equipos utilizados
        /// </summary>
        /// <returns></returns>
        public List<int> ListaTipoEquipoFiltro()
        {
            List<int> lista = new List<int>();
            lista.Add(ConstantesHorasOperacion.IdTipoHidraulica);
            lista.Add(ConstantesHorasOperacion.IdTipoTermica);
            lista.Add(ConstantesHorasOperacion.IdGeneradorHidroelectrico);
            lista.Add(ConstantesHorasOperacion.IdGeneradorTemoelectrico);

            return lista;
        }

        /// <summary>
        /// Permite listar las areas operativas por empresa
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<AreaDTO> ObtenerAreaPorEmpresa(int? idEmpresa, string idFamilia)
        {
            return FactorySic.ObtenerEventoDao().ObtenerAreaPorEmpresa(idEmpresa, idFamilia);
        }

        /// <summary>
        /// Permite buscar equipos segun los criterios especificados
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idArea"></param>
        /// <param name="idFamilia"></param>
        /// <param name="filtro"></param>
        /// <returns></returns>
        public List<EquipoDTO> BuscarEquipoEvento(int? idEmpresa, int? idArea, string idFamilia, string filtro, int nroPagina, int nroFilas)
        {
            return FactorySic.ObtenerEventoDao().BuscarEquipoEvento(idEmpresa.GetValueOrDefault(0).ToString(), idArea, idFamilia, filtro, nroPagina, nroFilas);
        }

        /// <summary>
        /// Permite obtener el nro de items del resultado de la busqueda de equipos
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <param name="idArea"></param>
        /// <param name="idFamilia"></param>
        /// <param name="filtro"></param>
        /// <returns></returns>
        public int ObtenerNroFilasBusquedaEquipo(int? idEmpresa, int? idArea, string idFamilia, string filtro)
        {
            return FactorySic.ObtenerEventoDao().ObtenerNroFilasBusquedaEquipo(idEmpresa.GetValueOrDefault(0).ToString(), idArea, idFamilia, filtro);
        }

        /// <summary>
        /// Permite listar los tipos de eventos
        /// </summary>
        /// <returns></returns>
        public List<TipoEventoDTO> ListarTipoEvento()
        {
            return FactorySic.ObtenerTipoEventoDao().ListarTipoEvento();
        }

        /// <summary>
        /// obtiene famcodi padre segun hijo
        /// </summary>
        /// <param name="famcodiHijo"></param>
        /// <returns></returns>
        public static int GetFamcodiPadre(int famcodiHijo)
        {
            switch (famcodiHijo)
            {
                case ConstantesHorasOperacion.IdGeneradorTemoelectrico:
                    return ConstantesHorasOperacion.IdTipoTermica;

                case ConstantesHorasOperacion.IdGeneradorHidroelectrico:
                    return ConstantesHorasOperacion.IdTipoHidraulica;

                case ConstantesHorasOperacion.IdGeneradorSolar:
                    return ConstantesHorasOperacion.IdTipoSolar;

                case ConstantesHorasOperacion.IdGeneradorEolica:
                    return ConstantesHorasOperacion.IdTipoEolica;
            }

            return famcodiHijo;
        }

        /// <summary>
        /// obtener famcodi hijo segun padre
        /// </summary>
        /// <param name="famcodiPadre"></param>
        /// <returns></returns>
        public static int GetFamcodiHijo(int famcodiPadre)
        {
            switch (famcodiPadre)
            {
                case ConstantesHorasOperacion.IdTipoTermica:
                    return ConstantesHorasOperacion.IdGeneradorTemoelectrico;
                case ConstantesHorasOperacion.IdTipoHidraulica:
                    return ConstantesHorasOperacion.IdGeneradorHidroelectrico;
                case ConstantesHorasOperacion.IdTipoSolar:
                    return ConstantesHorasOperacion.IdGeneradorSolar;
                case ConstantesHorasOperacion.IdTipoEolica:
                    return ConstantesHorasOperacion.IdGeneradorEolica;
            }

            return famcodiPadre;
        }

        /// <summary>
        /// Mapear EveMantto a un Objeto
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        public IndManttoDTO GetIndManttoFromEveMantto(EveManttoDTO x)
        {
            IndManttoDTO obj = new IndManttoDTO()
            {
                Equicodi = x.Equicodi.Value,
                Indmanfecini = x.Evenini.Value,
                Indmanfecfin = x.Evenfin.Value,
                Evenclasecodi = x.Evenclasecodi.Value,
                Tipoevencodi = x.Tipoevencodi.Value,
                Indmanindispo = x.Evenindispo,
                Indmaninterrup = x.Eveninterrup,
                Indmandescripcion = x.Evendescrip,
                Manttocodi = x.Manttocodi,
                Indmantipoindisp = x.Eventipoindisp,
                Indmanpr = x.Evenpr,
                Indmanasocproc = x.Evenasocproc,
                Grupotipocogen = x.Grupotipocogen,
                Indmancodi = x.Indmancodi,
                Emprcodi = x.Emprcodi,
                Central = x.Central,
                Equipadre = x.Equipadre,
                Grupocodi = x.Grupocodi,
                Equiabrev = x.Equiabrev,
                Tipoemprcodi = x.Tipoemprcodi,
                Tipoemprdesc = x.Tipoemprdesc,
                Emprnomb = x.Emprnomb,
                Emprabrev = x.Emprabrev,
                Evenclasedesc = x.Evenclasedesc,
                Evenclaseabrev = x.Evenclaseabrev,
                Tipoevenabrev = x.Tipoevenabrev,
                Tipoevendesc = x.Tipoevendesc,
                Areacodi = x.Areacodi,
                Areanomb = x.Areanomb,
                Famcodi = x.Famcodi,
                Famnomb = x.Famnomb,
                Famabrev = x.Famabrev,
                Equitension = x.Equitension,
                Osigrupocodi = x.Osigrupocodi,
            };

            return obj;
        }

        /// <summary>
        /// Obtener EveMantto desde un objeto IndMantto
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        public EveManttoDTO GetEveManttoFromIndMantto(IndManttoDTO x)
        {
            EveManttoDTO e = new EveManttoDTO()
            {
                Indmancodi = x.Indmancodi,
                Manttocodi = x.Manttocodi.GetValueOrDefault(0),
                Emprcodi = x.Emprcodi,
                Equipadre = x.Equipadre,
                Grupocodi = x.Grupocodi,
                Equiabrev = x.Equiabrev,
                Equicodi = x.Equicodi,
                Evenclasecodi = x.Evenclasecodi,
                Evenini = x.Indmanfecini,
                Evenfin = x.Indmanfecfin,
                Tipoemprcodi = x.Tipoemprcodi,
                Tipoemprdesc = x.Tipoemprdesc,
                Emprnomb = x.Emprnomb,
                Emprabrev = x.Emprabrev,
                Evenclasedesc = x.Evenclasedesc,
                Evenclaseabrev = x.Evenclaseabrev,
                Tipoevencodi = x.Tipoevencodi,
                Tipoevenabrev = x.Tipoevenabrev,
                Tipoevendesc = x.Tipoevendesc,
                Areacodi = x.Areacodi,
                Areanomb = x.Areanomb,
                Areadesc = x.Areadesc,
                Famcodi = x.Famcodi,
                Famnomb = x.Famnomb,
                Famabrev = x.Famabrev,
                Equitension = x.Equitension,
                Osigrupocodi = x.Osigrupocodi,
                Evendescrip = x.Indmandescripcion,
                Eveninterrup = x.Indmaninterrup,
                EveninterrupDesc = x.Indmaninterrup == ConstantesIndisponibilidades.InterrupcionSi ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc,
                Evenindispo = x.Indmanindispo,
                EvenindispoDesc = x.Indmanindispo,
                Eventipoprog = string.Empty,
                //Indmanflagcalculo = x.Indmanflagcalculo,
                Eventipoindisp = x.Indmantipoindisp,
                Evenpr = x.Indmanpr,
                Evenasocproc = x.Indmanasocproc,
                Indmanusarencalculo = x.Indmanusarencalculo,
                Indmantipoaccion = x.Indmantipoaccion,
                Indmanomitir7d = x.Indmanomitir7d,
                Indmanomitirexcesopr = x.Indmanomitirexcesopr,
                Grupotipocogen = x.Grupotipocogen,
                Lastuser = x.Indmanfecmodificacion == null ? x.Indmanusucreacion : x.Indmanusumodificacion,
                Lastdate = x.Indmanfecmodificacion == null ? x.Indmanfeccreacion : x.Indmanfecmodificacion,
                FuenteDatosDesc = ConstantesIndisponibilidades.FuenteIndManttoDesc,
                FuenteDatos = ConstantesIndisponibilidades.FuenteIndMantto,
            };

            return e;
        }

        /// <summary>
        /// Obtener EveMantto desde un objeto IndMantto
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        public EveManttoDTO GetEveManttoFromIndEvento(IndEventoDTO x)
        {
            EveManttoDTO e = new EveManttoDTO()
            {
                Ieventcodi = x.Ieventcodi,
                Evencodi = x.Evencodi,
                Emprcodi = x.Emprcodi,
                Equipadre = x.Equipadre,
                Grupocodi = x.Grupocodi,
                Equiabrev = x.Equiabrev,
                Equicodi = x.Equicodi,
                Evenclasecodi = x.Evenclasecodi,
                Evenini = x.Evenini,
                Evenfin = x.Evenfin,
                Emprnomb = x.Emprnomb,
                Emprabrev = x.Emprabrev,
                Evenclasedesc = x.Evenclasedesc,
                Evenclaseabrev = x.Evenclaseabrev,
                Areacodi = x.Areacodi,
                Areanomb = x.Areanomb,
                Areadesc = x.Areadesc,
                Famcodi = x.Famcodi,
                Famnomb = x.Famnomb,
                Famabrev = x.Famabrev,
                Evendescrip = x.Evenasunto,
                Eventipoprog = string.Empty,
                //Indmanflagcalculo = x.Indmanflagcalculo,
                Eventipoindisp = x.Ieventtipoindisp,
                Evenpr = x.Ieventpr,
                Evenasocproc = ConstantesAppServicio.SI,
                Indmanusarencalculo = x.Ieventusarencalculo,
                Grupotipocogen = x.Grupotipocogen,
                Lastuser = x.Ieventfecmodificacion == null ? x.Ieventusucreacion : x.Ieventusumodificacion,
                Lastdate = x.Ieventfecmodificacion == null ? x.Ieventfeccreacion : x.Ieventfecmodificacion,
                FuenteDatosDesc = ConstantesIndisponibilidades.FuenteEventoDesc,
                FuenteDatos = ConstantesIndisponibilidades.FuenteEvento,
            };

            return e;
        }

        /// <summary>
        /// Obtener EveMantto desde un objeto IndMantto
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        public EveManttoDTO GetEveManttoFromIndIeodcuadro(IndIeodcuadroDTO x)
        {
            EveManttoDTO e = new EveManttoDTO()
            {
                Iiccocodi = x.Iiccocodi,
                Iccodi = x.Iccodi,
                Emprcodi = x.Emprcodi,
                Equipadre = x.Equipadre,
                Grupocodi = x.Grupocodi,
                Equiabrev = x.Equiabrev,
                Equicodi = x.Equicodi,
                Evenclasecodi = x.Evenclasecodi,
                Evenini = x.Ichorini,
                Evenfin = x.Ichorfin,
                Emprnomb = x.Emprnomb,
                Emprabrev = x.Emprabrev,
                Evenclasedesc = x.Evenclasedesc,
                Evenclaseabrev = x.Evenclaseabrev,
                Areacodi = x.Areacodi,
                Areanomb = x.Areanomb,
                Areadesc = x.Areadesc,
                Famcodi = x.Famcodi,
                Famnomb = x.Famnomb,
                Famabrev = x.Famabrev,
                Evendescrip = GetDescripcionRestricOpe(x.Icdescrip1, x.Icdescrip2, x.Icdescrip3),
                Eventipoprog = string.Empty,
                //Indmanflagcalculo = x.Indmanflagcalculo,
                Eventipoindisp = x.Iiccotipoindisp,
                Evenpr = x.Iiccopr,
                Evenasocproc = ConstantesAppServicio.SI,
                Indmanusarencalculo = x.Iiccousarencalculo,
                Grupotipocogen = x.Grupotipocogen,
                Lastuser = x.Iiccofecmodificacion == null ? x.Iiccousucreacion : x.Iiccousumodificacion,
                Lastdate = x.Iiccofecmodificacion == null ? x.Iiccofeccreacion : x.Iiccofecmodificacion,
                FuenteDatosDesc = ConstantesIndisponibilidades.FuenteEventoDesc,
                FuenteDatos = ConstantesIndisponibilidades.FuenteEvento,
            };

            return e;
        }

        public List<GenericoDTO> ListarTipoIndispPr25()
        {
            List<GenericoDTO> l = new List<GenericoDTO>();
            l.Add(new GenericoDTO() { String1 = "PT", String2 = "Indisponibilidad Programada Total" });
            l.Add(new GenericoDTO() { String1 = "PP", String2 = "Indisponibilidad Programada Parcial" });
            l.Add(new GenericoDTO() { String1 = "FT", String2 = "Indisponibilidad Fortuita Total" });
            l.Add(new GenericoDTO() { String1 = "FP", String2 = "Indisponibilidad Fortuita Parcial" });
            return l;
        }

        #endregion

        #region Insumo: Unidades Solares

        /// <summary>
        /// Centrales solares
        /// </summary>
        /// <param name="fechaIni">Fecha de inicio del periodo</param>
        /// <param name="fechaFin">Fecha de fin del periodo</param>
        /// <returns></returns>
        public void ListarEqCentralSolarOpComercial(DateTime fechaIni, DateTime fechaFin, out List<EqEquipoDTO> listaCentrales, out List<EqEquipoDTO> listaAllEquipos, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            listaMsj = new List<ResultadoValidacionAplicativo>();

            listaAllEquipos = servEq.ListarEquiposTienenOpComercial(fechaIni, fechaFin, (ConstantesHorasOperacion.IdGeneradorSolar + "," + ConstantesHorasOperacion.IdTipoSolar), out List<ResultadoValidacionAplicativo> listaMsjEq);
            listaMsj.AddRange(listaMsjEq);

            //Potencia Efectiva de las centrales
            List<EqPropequiDTO> listaPe = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotEfectSolar.ToString());

            listaCentrales = listaAllEquipos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoSolar).ToList();

            foreach (var reg in listaCentrales)
            {
                reg.Equipadre = reg.Equicodi;
                reg.Central = reg.Equinomb;

                reg.Equinomb = "CENTRAL";

                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPe, out decimal? valor, out DateTime? fechaVigencia, out string comentario);
                reg.Pe = valor;
                reg.PotenciaInstalada = valor;
                reg.PotenciaNominal = valor;
                reg.FechaVigencia = fechaVigencia;
                reg.TieneModificacionPropiedad = fechaIni <= reg.FechaVigencia && reg.FechaVigencia <= fechaFin;

                if (valor.GetValueOrDefault(0) <= 0 || fechaVigencia == null)
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + reg.Equipadre + "," + reg.Central + "] no tiene datos de Potencia efectiva." });
            }
        }

        #endregion

        #region Insumo: Unidades Eólicas

        /// <summary>
        /// Centrales Eólicas
        /// </summary>
        /// <param name="fechaIni">Fecha de inicio del periodo</param>
        /// <param name="fechaFin">Fecha de fin del periodo</param>
        /// <returns></returns>
        public void ListarEqCentralEolicaOpComercial(DateTime fechaIni, DateTime fechaFin, out List<EqEquipoDTO> listaCentrales, out List<EqEquipoDTO> listaAllEquipos, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            listaMsj = new List<ResultadoValidacionAplicativo>();

            listaAllEquipos = servEq.ListarEquiposTienenOpComercial(fechaIni, fechaFin, (ConstantesHorasOperacion.IdGeneradorEolica + "," + ConstantesHorasOperacion.IdTipoEolica), out List<ResultadoValidacionAplicativo> listaMsjEq);
            listaMsj.AddRange(listaMsjEq);

            //Potencia Efectiva de las centrales
            List<EqPropequiDTO> listaPe = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotEfecEolica.ToString());

            listaCentrales = listaAllEquipos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoEolica).ToList();

            foreach (var reg in listaCentrales)
            {
                reg.Equipadre = reg.Equicodi;
                reg.Central = reg.Equinomb;

                reg.Equinomb = "CENTRAL";

                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPe, out decimal? valor, out DateTime? fechaVigencia, out string comentario);
                reg.Pe = valor;
                reg.PotenciaInstalada = valor;
                reg.PotenciaNominal = valor;
                reg.FechaVigencia = fechaVigencia;
                reg.TieneModificacionPropiedad = fechaIni <= reg.FechaVigencia && reg.FechaVigencia <= fechaFin;

                if (valor.GetValueOrDefault(0) <= 0 || fechaVigencia == null)
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + reg.Equipadre + "," + reg.Central + "] no tiene datos de Potencia efectiva." });
            }
        }

        #endregion

        #region Insumo: Unidades de Generación Hidraulicas

        /// <summary>
        /// Centrales hidraulicas utilizadas en el Cuadro 5, Factor de Presencia y Potencia Garantizada
        /// </summary>
        /// <param name="fechaIni">Fecha de inicio del periodo</param>
        /// <param name="fechaFin">Fecha de fin del periodo</param>
        /// <returns></returns>
        public void ListarEqCentralHidraulicoOpComercial(DateTime fechaIni, DateTime fechaFin, out List<EqEquipoDTO> listaCentrales, out List<EqEquipoDTO> listaEquiposHidro, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            listaMsj = new List<ResultadoValidacionAplicativo>();

            listaEquiposHidro = servEq.ListarEquiposTienenOpComercial(fechaIni, fechaFin, (ConstantesHorasOperacion.IdGeneradorHidroelectrico + "," + ConstantesHorasOperacion.IdTipoHidraulica), out List<ResultadoValidacionAplicativo> listaMsjEq);
            listaMsj.AddRange(listaMsjEq);

            //Lista de grupos
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

            //Potencia Efectiva de las centrales hidraulicas
            List<EqPropequiDTO> listaPe = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotEfecHidro.ToString() + "," + ConstantesPR5ReportesServicio.PropPotEfecHidroGen.ToString());

            //Potencia instalada de las centrales hidraulicas
            List<EqPropequiDTO> listaPinst = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotInstaladaHidro.ToString() + "," + ConstantesPR5ReportesServicio.PropPotInstaladaGenHidro.ToString());

            //Potencia nominal de las centrales hidraulicas
            List<EqPropequiDTO> listaPnominal = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotNominalHidro.ToString() + "," + ConstantesPR5ReportesServicio.PropPotNominalGenHidro.ToString());

            //Potencia Garantizada de las centrales hidraulicas
            List<EqPropequiDTO> listaPGarantizada = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotGarantizadaHidro.ToString());

            //Rendimiento (MW/m3/s) de las centrales hidraulicas
            List<EqPropequiDTO> listaRendimiento = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropRendimientoHidro.ToString());

            listaCentrales = listaEquiposHidro.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica).ToList();

            foreach (var reg in listaEquiposHidro)
            {
                reg.UnidadnombPR25 = reg.Equiabrev;

                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPe, out decimal? valor, out DateTime? fechaVigencia, out string comentario);
                reg.Pe = valor;
                reg.FechaVigencia = fechaVigencia;
                reg.Comentario = comentario;
                reg.TieneModificacionPropiedad = fechaIni <= reg.FechaVigencia && reg.FechaVigencia <= fechaFin;

                if (valor.GetValueOrDefault(0) <= 0 || fechaVigencia == null)
                {
                    if (reg.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica)
                        listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + reg.Equipadre + "," + reg.Central + "] no tiene datos de Potencia efectiva." });
                    else
                        listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + reg.Equicodi + "," + reg.Central + " " + reg.Equiabrev + "] no tiene datos de Potencia efectiva." });
                }

                //potencia instalada
                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPinst, out decimal? valorInst, out DateTime? fechaVigenciaInst, out string comentarioInst);
                reg.PotenciaInstalada = valorInst;

                //potencia nominal
                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPnominal, out decimal? valorNom, out DateTime? fechaVigenciaNom, out string comentarioNom);
                reg.PotenciaNominal = valorNom;

                if (reg.Famcodi == ConstantesHorasOperacion.IdTipoHidraulica)
                {
                    GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPGarantizada, out decimal? valorGarantizada, out DateTime? fechaVigenciaGarantizada, out string comentarioGarantizada);
                    reg.Potenciagarantizada = valorGarantizada;
                    reg.FechaVigenciaGarantizada = fechaVigenciaGarantizada;
                    reg.ComentarioGarantizada = comentarioGarantizada;
                    reg.TieneModificacionPropiedadGarantizada = fechaIni <= reg.FechaVigenciaGarantizada && reg.FechaVigenciaGarantizada <= fechaFin;

                    if (valorGarantizada.GetValueOrDefault(0) < 0 || fechaVigenciaGarantizada == null)
                        listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + reg.Equipadre + "," + reg.Central + "] no tiene datos de Potencia garantizada." });

                    GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaRendimiento, out decimal? valorRend, out DateTime? fechaVigenciaRend, out string comentarioRend);
                    reg.Rendimiento = valorRend;
                }
            }

            foreach (var reg in listaCentrales)
            {
                reg.Equipadre = reg.Equicodi;
                reg.Central = reg.Equinomb;
                reg.Grupocodidespacho = GetGrupocodiDespachoHidro(reg.Grupocodi, listaGrupo) ?? 0;

                if (reg.Equipadre == 12600)
                { }

                List<string> listaNombGen = listaEquiposHidro.Where(x => x.Equipadre == reg.Equicodi && x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).Select(x => x.Equiabrev.Trim()).OrderBy(x => x).ToList();
                reg.Equinomb = listaNombGen.Any() ? string.Join("+", listaNombGen) : "CENTRAL";
            }
        }

        /// <summary>
        /// obtener el grupocodi de despacho
        /// </summary>
        /// <param name="grupocodi"></param>
        /// <param name="listaGrupo"></param>
        /// <returns></returns>
        private int? GetGrupocodiDespachoHidro(int? grupocodi, List<PrGrupoDTO> listaGrupo)
        {
            if (grupocodi > 0)
            {
                var regGrupo = listaGrupo.Find(x => x.Grupocodi == grupocodi);

                if (regGrupo != null)
                {
                    if (regGrupo.Catecodi == ConstantesIndisponibilidades.CatecodiGrupoHidraulico)
                        return grupocodi;
                    if (regGrupo.Catecodi == ConstantesIndisponibilidades.CatecodiCentralHidraulico)
                    {
                        var listaGrupoDesp = listaGrupo.Where(x => x.Grupopadre == regGrupo.Grupocodi && x.Catecodi == ConstantesIndisponibilidades.CatecodiGrupoHidraulico).ToList();
                        if (listaGrupoDesp.Any())
                        {
                            var regDesp = listaGrupoDesp.First();
                            return regDesp.Grupocodi;
                        }
                    }
                }
            }

            return null;
        }

        #endregion

        #region Insumo: Unidades de Generación Térmicas

        public decimal ObtenerPotenciaEfectivaXFiltro(DateTime fechaConsulta, int emprcodi, int equipadre)
        {
            return 1000.0m;
        }

        /// <summary>
        /// Lista de modos de operación y sus datos relacionados (central, generadores, potencia efectiva)
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarGrupoModoOperacionComercial(DateTime fechaIni, DateTime fechaFin)
        {
            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = FactorySic.GetPrGrupoRepository().List();
            listaGrupo = listaGrupo.Where(x => x.GrupoEstado != ConstantesAppServicio.Anulado).ToList();

            //listar todos los equipos y centrales que tienen operación comercial
            var listaEquiposTermicos = this.ListarEquipoOpComercial(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica, out List<ResultadoValidacionAplicativo> listaMsjEq);
            List<EqEquipoDTO> listaEqGen = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            List<EqEquipoDTO> listaEqCentral = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();

            //
            this.ListarModoOperacionPe(fechaIni, fechaFin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);
            //
            listaGrupoModo = SetearEquiposToModoOperacion(listaGrupoModo, listaGrupo, listaEqCentral, listaEqGen);

            return listaGrupoModo;
        }

        /// <summary>
        /// Listado de unidades termicas Op. Comercial
        /// </summary>
        /// <param name="aplicativo"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaUnidadesTermo"></param>
        /// <param name="listaEquiposTermicos"></param>
        /// <param name="listaMsj"></param>
        public void ListarUnidadTermicoOpComercial(int aplicativo, DateTime fechaIni, DateTime fechaFin
                                             , out List<EqEquipoDTO> listaUnidadesTermo, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            //obtener unidades que tiene operación comercial solo el último mes
            listaUnidadesTermo = new List<EqEquipoDTO>();
            listaEquiposTermicos = new List<EqEquipoDTO>();
            listaMsj = new List<ResultadoValidacionAplicativo>();

            //obtener todos los cambios de operacion comercial
            DateTime fechaIniConsulta = fechaIni;
            DateTime fechaFinConsulta = fechaFin;
            List<EqEquipoDTO> listaAllEquipos = servEq.ListarEquiposTienenOpComercial(fechaIniConsulta, fechaFinConsulta
                                                                , ConstantesHorasOperacion.IdGeneradorTemoelectrico.ToString(), out List<ResultadoValidacionAplicativo> listaMsjEq);
            listaAllEquipos = listaAllEquipos.Where(x => (x.Equifechiniopcom > fechaIniConsulta && x.Equifechiniopcom <= fechaFinConsulta)
                                                    || (x.Equifechfinopcom > fechaIniConsulta && x.Equifechfinopcom <= fechaFinConsulta)).ToList();

            var escenariosEntrada = listaAllEquipos.Select(x => x.Equifechiniopcom).Distinct().OrderBy(x => x).ToList();
            var escenariosSalida = listaAllEquipos.Select(x => x.Equifechfinopcom).Distinct().OrderBy(x => x).ToList();
            escenariosEntrada.AddRange(escenariosSalida);
            escenariosEntrada.Add(fechaIniConsulta);
            escenariosEntrada.Add(fechaFinConsulta);

            //por cada fecha obtener las unidades
            escenariosEntrada = escenariosEntrada.Where(x => x != null && x >= fechaIniConsulta).Distinct().OrderBy(x => x).ToList();
            foreach (var fechaOpCom in escenariosEntrada)
            {
                ListarUnidadTermicoOpComercialXRango(aplicativo, fechaOpCom.Value, fechaOpCom.Value, out List<EqEquipoDTO> listaUnidadesTermoXDia,
                                                    out List<EqEquipoDTO> listaEquiposTermicosXDia, out listaMsj);
                listaUnidadesTermo.AddRange(listaUnidadesTermoXDia);
                listaEquiposTermicos.AddRange(listaEquiposTermicosXDia);
            }

            //obtener valores unicos segun cuadro
            listaUnidadesTermo = listaUnidadesTermo.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.Last()).ToList();
            listaEquiposTermicos = listaEquiposTermicos.GroupBy(x => new { x.Equicodi }).Select(x => x.Last()).ToList();
        }

        private void ListarUnidadTermicoOpComercialXRango(int aplicativo, DateTime fechaIni, DateTime fechaFin
                                                , out List<EqEquipoDTO> listaUnidadesTermo, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            listaUnidadesTermo = new List<EqEquipoDTO>();
            listaMsj = new List<ResultadoValidacionAplicativo>();

            List<SiFuenteenergiaDTO> listaFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().List();

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

            //listar todos los equipos y centrales que tienen operación comercial
            listaEquiposTermicos = this.ListarEquipoOpComercial(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica, out List<ResultadoValidacionAplicativo> listaMsjEq);
            List<EqEquipoDTO> listaEqGen = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            List<EqEquipoDTO> listaEqCentral = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            listaMsj.AddRange(listaMsjEq);

            //
            this.ListarModoOperacionPe(fechaIni, fechaFin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);
            listaMsj.AddRange(listaMsjModo);

            if (ConstantesIndisponibilidades.AppPR25 == aplicativo)
            {
                //caso especial CT Caña Brava y CT Talara
                var regModoCTCaniaBrava = listaGrupoModo.Find(x => x.Grupocodi == 575 || x.Grupocodi == 3449 || x.Grupocodi == 3424);
                if (regModoCTCaniaBrava != null && regModoCTCaniaBrava.FlagDividirModoEnEquipos == ConstantesAppServicio.SI)
                {
                    //quitar el modo de la central y quedarse con los de Ciclo Simple
                    listaGrupoModo.Remove(regModoCTCaniaBrava);
                }
            }

            //para Potencia Firme y Remunerable solo se considera a CT Caña Brava como central
            if (ConstantesIndisponibilidades.AppPF == aplicativo || ConstantesIndisponibilidades.AppPFR == aplicativo)
            {
                var regModoCTCaniaBrava = listaGrupoModo.Find(x => x.Grupocodi == 575);
                var regModoCTCaniaBravaG1 = listaGrupoModo.Find(x => x.Grupocodi == 573);
                var regModoCTCaniaBravaG2 = listaGrupoModo.Find(x => x.Grupocodi == 574);

                if (regModoCTCaniaBrava != null)
                {
                    regModoCTCaniaBrava.FlagDividirModoEnEquipos = ConstantesAppServicio.NO;
                }
                if (regModoCTCaniaBravaG1 != null)
                    listaGrupoModo.Remove(regModoCTCaniaBravaG1);
                if (regModoCTCaniaBravaG2 != null)
                    listaGrupoModo.Remove(regModoCTCaniaBravaG2);
            }

            //para Potencia Firme y Remunerable solo se considera a CT Refineria Talara como central
            if (ConstantesIndisponibilidades.AppPF == aplicativo || ConstantesIndisponibilidades.AppPFR == aplicativo)
            {
                var regModoCTTalara = listaGrupoModo.Find(x => x.Grupocodi == 3449);
                var regModoCTTalaraTV1 = listaGrupoModo.Find(x => x.Grupocodi == 3385);
                var regModoCTTalaraTV2 = listaGrupoModo.Find(x => x.Grupocodi == 3386);

                if (regModoCTTalara != null)
                {
                    regModoCTTalara.FlagDividirModoEnEquipos = ConstantesAppServicio.NO;
                }
                if (regModoCTTalaraTV1 != null)
                    listaGrupoModo.Remove(regModoCTTalaraTV1);
                if (regModoCTTalaraTV2 != null)
                    listaGrupoModo.Remove(regModoCTTalaraTV2);
            }

            //para Potencia Firme y Remunerable solo se considera a CT Oquendo como central
            if (ConstantesIndisponibilidades.AppPF == aplicativo || ConstantesIndisponibilidades.AppPFR == aplicativo)
            {
                var regModoCTOquendo = listaGrupoModo.Find(x => x.Grupocodi == 3424);
                var regModoCTOquendoTV1 = listaGrupoModo.Find(x => x.Grupocodi == 3418);
                var regModoCTOquendoTG1_Gas = listaGrupoModo.Find(x => x.Grupocodi == 298);
                var regModoCTOquendoTG1_D2 = listaGrupoModo.Find(x => x.Grupocodi == 352);

                if (regModoCTOquendo != null)
                {
                    regModoCTOquendo.FlagDividirModoEnEquipos = ConstantesAppServicio.NO;
                }
                if (regModoCTOquendoTV1 != null)
                    listaGrupoModo.Remove(regModoCTOquendoTV1);
                if (regModoCTOquendoTG1_Gas != null)
                    listaGrupoModo.Remove(regModoCTOquendoTG1_Gas);
                if (regModoCTOquendoTG1_D2 != null)
                    listaGrupoModo.Remove(regModoCTOquendoTG1_D2);
            }

            //
            listaGrupoModo = SetearEquiposToModoOperacion(listaGrupoModo, listaGrupo, listaEqCentral, listaEqGen);

            //Potencia Efectiva de las unidades del modo especial
            List<PrGrupoEquipoValDTO> listaEquipoValEsp = ListarPrGrupoEquipoValHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotEfectiva + "," + ConstantesIndisponibilidades.ConcepcodiRendimiento + "," + ConstantesIndisponibilidades.ConcepcodiRendimientoSI);
            var listaPeEsp = listaEquipoValEsp.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva).ToList();
            var listaRendEsp = listaEquipoValEsp.Where(x => ConstantesIndisponibilidades.ListaConcepcodiRend.Contains(x.Concepcodi)).ToList();

            //Potencia Efectiva de Equipo
            List<EqPropequiDTO> listaPEfect = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotEfecTermoGenSem.ToString());
            foreach (var reg in listaEquiposTermicos)
            {
                //potencia efectiva
                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPEfect, out decimal? valorInst, out DateTime? fechaVigenciaInst, out string comentarioInst);
                reg.Pe = valorInst;
            }

            //Potencia instalada 
            List<EqPropequiDTO> listaPinst = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotInstaladaTermo.ToString() + "," + ConstantesPR5ReportesServicio.PropPotInstaladaGenTermo.ToString());
            foreach (var reg in listaEquiposTermicos)
            {
                //potencia instalada
                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPinst, out decimal? valorInst, out DateTime? fechaVigenciaInst, out string comentarioInst);
                reg.PotenciaInstalada = valorInst;
            }

            //Potencia nominal 
            List<EqPropequiDTO> listaPnominal = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotNominalTermo.ToString() + "," + ConstantesPR5ReportesServicio.PropPotNominalGenTermo.ToString());
            foreach (var reg in listaEquiposTermicos)
            {
                //potencia nominal
                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPnominal, out decimal? valorInst, out DateTime? fechaVigenciaInst, out string comentarioInst);
                reg.PotenciaNominal = valorInst;
            }

            //setear 

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///1. Filtrar los modos de operación Ciclo Combinado válidos segun las unidades que tienen operacion comercial
            ///2. Filtrar los modos de operación Ciclo Simple y especiales
            foreach (var regCentral in listaEqCentral)
            {
                int equipadre = regCentral.Equipadre.Value;
                if (equipadre == 275)
                { }
                List<EqEquipoDTO> listaEqXCentral = listaEqGen.Where(x => x.Equipadre == equipadre).ToList();
                List<int> listaEquicodiXCentral = listaEqXCentral.Select(x => x.Equicodi).ToList();

                List<PrGrupoDTO> listaGrupoModoXCentral = listaGrupoModo.Where(x => x.Equipadre == equipadre).OrderByDescending(x => x.Potencia).ToList();
                List<SiFuenteenergiaDTO> listaFenerg = listaGrupoModoXCentral.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                            .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                regCentral.ListaFuenteEnergia = listaFenerg;
                regCentral.Grupocodicentral = GrupocodiCentralFromListaGrupo(regCentral.Grupocodi ?? 0, listaGrupo);

                if (listaGrupoModoXCentral.Any())
                {

                    foreach (var regModo in listaGrupoModoXCentral)
                    {
                        if (regModo.ListaEquicodi.All(x => listaEquicodiXCentral.Contains(x)))
                        {
                            if (regModo.TieneModoCicloCombinado)
                            {
                                EqEquipoDTO regUnidad = (EqEquipoDTO)regCentral.Clone();
                                regUnidad.Pe = regModo.Potencia;
                                regUnidad.FechaVigencia = regModo.FechaVigencia;
                                regUnidad.Pmin = regModo.PotenciaMinima;
                                regUnidad.FechaVigenciaPmin = regModo.FechaVigenciaPmin;
                                regUnidad.Rendimiento = regModo.Rendimiento;
                                regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                                regUnidad.Tminoperacion = regModo.Tminoperacion;
                                regUnidad.Grupocodi = regModo.Grupocodi;
                                regUnidad.Gruponomb = regModo.Gruponomb;
                                regUnidad.Grupopadre = regModo.Grupopadre ?? 0; //Código del grupo térmico TV del modo de operación
                                regUnidad.TieneCicloComb = true;
                                regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                regUnidad.Grupotipocogen = regModo.Grupotipocogen;
                                regUnidad.Equifechiniopcom = regModo.Fechiniopcom;
                                regUnidad.Equifechfinopcom = regModo.Fechfinopcom;

                                var regEqTv = listaEqGen.Find(x => x.Grupocodi == regUnidad.Grupopadre);
                                if (regEqTv != null && regModo.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas)
                                    regUnidad.EquicodiTVCicloComb = regEqTv.Equicodi;

                                AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regUnidad);

                                listaUnidadesTermo.Add(regUnidad);
                            }
                            else
                            {
                                if (regModo.TieneModoCicloSimple)
                                {
                                    EqEquipoDTO regEquipo = listaEqGen.Find(x => x.Equicodi == regModo.ListaEquicodi.First());

                                    EqEquipoDTO regUnidad = (EqEquipoDTO)regEquipo.Clone();
                                    regUnidad.Pe = regModo.Potencia;
                                    regUnidad.FechaVigencia = regModo.FechaVigencia;
                                    regUnidad.Pmin = regModo.PotenciaMinima;
                                    regUnidad.FechaVigenciaPmin = regModo.FechaVigenciaPmin;
                                    regUnidad.Pf = regModo.PotenciaFirme;
                                    regUnidad.FechaVigenciaFirme = regModo.FechaVigenciaFirme;
                                    regUnidad.Rendimiento = regModo.Rendimiento;
                                    regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                                    regUnidad.Tminoperacion = regModo.Tminoperacion;
                                    regUnidad.Grupocodi = regModo.Grupocodi;
                                    regUnidad.Gruponomb = regModo.Gruponomb;
                                    regUnidad.Grupopadre = regModo.Grupopadre ?? 0;
                                    regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                    regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                    regUnidad.Grupotipocogen = regModo.Grupotipocogen;
                                    regUnidad.Equifechiniopcom = regModo.Fechiniopcom;
                                    regUnidad.Equifechfinopcom = regModo.Fechfinopcom;

                                    List<PrGrupoDTO> listaGrupoModoXEq = listaGrupoModoXCentral.Where(x => x.ListaEquicodi.All(y => y == regEquipo.Equicodi)).OrderByDescending(x => x.Potencia).ToList();
                                    List<SiFuenteenergiaDTO> listaFenergEq = listaGrupoModoXEq.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                            .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                                    regUnidad.ListaFuenteEnergia = listaFenergEq;

                                    AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regUnidad);

                                    listaUnidadesTermo.Add(regUnidad);
                                }
                                else
                                {
                                    List<EqEquipoDTO> listaEqEspecial = listaEqXCentral.Where(x => regModo.ListaEquicodi.Contains(x.Equicodi)).ToList();

                                    if (regModo.FlagDividirModoEnEquipos == ConstantesAppServicio.SI)
                                    {
                                        foreach (var regEquipo in listaEqEspecial)
                                        {
                                            EqEquipoDTO regEspecial = (EqEquipoDTO)regEquipo.Clone();

                                            GetValorDecimalFromListaGrupoVal(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, listaPeEsp, out decimal? valor, out DateTime? fechaVigencia);
                                            GetValorDecimalFromListaGrupoVal2(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, ConstantesIndisponibilidades.ConcepcodiRendimiento, listaRendEsp, out decimal? valorRend, out DateTime? fechaVigenciaRend);

                                            regEspecial.Pe = valor;
                                            regEspecial.FechaVigencia = fechaVigencia;
                                            regEspecial.Rendimiento = valorRend;
                                            regEspecial.FechaVigenciaRendimiento = fechaVigenciaRend;
                                            regEspecial.Tminoperacion = regModo.Tminoperacion;
                                            regEspecial.Grupocodi = regModo.Grupocodi;
                                            regEspecial.Gruponomb = regModo.Gruponomb;
                                            regEspecial.Grupopadre = regModo.Grupopadre ?? 0;
                                            regEspecial.Gruporeservafria = regModo.Gruporeservafria;
                                            regEspecial.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                            regEspecial.Grupotipocogen = regModo.Grupotipocogen;
                                            regEspecial.EsUnidadModoEspecial = true;
                                            regEspecial.Equifechiniopcom = regModo.Fechiniopcom;
                                            regEspecial.Equifechfinopcom = regModo.Fechfinopcom;

                                            AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regEspecial);

                                            if (valor <= 0 || fechaVigencia == null)
                                                listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Potencia efectiva." });

                                            if (valorRend <= 0 || fechaVigenciaRend == null)
                                                listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Rendimiento." });

                                            listaUnidadesTermo.Add(regEspecial);
                                        }
                                    }
                                    else
                                    {
                                        EqEquipoDTO regUnidad = (EqEquipoDTO)regCentral.Clone();

                                        regUnidad.Pe = regModo.Potencia;
                                        regUnidad.FechaVigencia = regModo.FechaVigencia;
                                        regUnidad.Tminoperacion = regModo.Tminoperacion;
                                        regUnidad.Grupocodi = regModo.Grupocodi;
                                        regUnidad.Gruponomb = regModo.Gruponomb;
                                        regUnidad.Grupopadre = regModo.Grupopadre ?? 0;
                                        regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                        regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                        regUnidad.Grupotipocogen = regModo.Grupotipocogen;
                                        regUnidad.TieneCicloComb = true;
                                        //regUnidad.EsUnidadModoEspecial = true;
                                        regUnidad.Equifechiniopcom = regModo.Fechiniopcom;
                                        regUnidad.Equifechfinopcom = regModo.Fechfinopcom;

                                        AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regCentral);

                                        if (regCentral.Pe <= 0 || regCentral.FechaVigencia == null)
                                            listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regCentral.Equicodi + "," + regCentral.Equiabrev + "] del modo de operación " + regCentral.Gruponomb + "  no tiene datos de Potencia efectiva." });

                                        listaUnidadesTermo.Add(regUnidad);
                                    }
                                }
                            }

                            //quitar a las unidades de la lista general
                            //CASO OQUENDO
                            if (regModo.Grupocodi != 3424) listaEquicodiXCentral = listaEquicodiXCentral.Where(x => !regModo.ListaEquicodi.Contains(x)).ToList();
                        }
                    }
                }
                else
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La Central " + regCentral.Equinomb + " no tiene asociado un modo de operación, las unidades no serán tomadas en cuenta." });
                }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////


            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///4. Agregar modo de operación ficticio INCREMENTAL
            List<int> listaGrupocodiDespachoRsrvaNe = listaUnidadesTermo.Where(x => x.Gruporeservafria == 1 || x.Gruponodoenergetico == 1)
                                                    .Select(x => x.Grupopadre).Where(x => x > 0).ToList();
            List<PrGrupoDTO> listaGrupoDespachoRsrvNe = listaGrupo.Where(x => listaGrupocodiDespachoRsrvaNe.Contains(x.Grupocodi)).ToList();
            List<PrGrupoDTO> listaGrupoCentralRsrvNe = listaGrupo.Where(x => x.Catecodi == ConstantesIndisponibilidades.CatecodiCentralTermica
                                                                        && listaGrupoDespachoRsrvNe.Select(y => y.Grupopadre).Contains(x.Grupocodi)
                                                                        && x.Grupocodi > 0).ToList();

            List<EqEquipoDTO> listaUnidadesRsrvaFria = listaUnidadesTermo.Where(x => x.Gruporeservafria == 1 || x.Gruponodoenergetico == 1).ToList();

            if (listaGrupoCentralRsrvNe.Any())
            {
                List<PrGrupoDTO> listaGrupoAdicional = listaGrupo.Where(x => x.Catecodi == ConstantesIndisponibilidades.CatecodiIncremental).ToList();

                //Modo de operación con potencia adicional segun central
                List<PrGrupodatDTO> listaModoTienePAdic = ListarPrGrupodatHistoricoEnteroValido(ConstantesIndisponibilidades.ConcepcodiCodigoModoTienePAdic.ToString());

                //Relacion entre grupo Modo de operacion y grupo Adicional se guarda en PR_GRUPODAT
                //Codigo del modo de operacion del incremental (SOLO SE LLENA una vez en el PR_GRUPODAT, no tiene historico como las potencias)       
                List<PrGrupodatDTO> listaCodigoModoIncr = ListarPrGrupodatHistoricoEnteroValido(ConstantesIndisponibilidades.ConcepcodiCodigoModoOp.ToString());

                //Potencia Efectiva restante del adicional
                List<PrGrupodatDTO> listaPEfectivaRestanteAdicional = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotEfectivaRestanteAdic.ToString());

                //Potencia adicional            
                List<PrGrupodatDTO> listaPadicional = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotAdicional.ToString());

                //Potencia firme adicional
                List<PrGrupodatDTO> listaPFirmeAdicional = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotFirme.ToString());

                //
                foreach (PrGrupoDTO regCentral in listaGrupoCentralRsrvNe)
                {
                    if (regCentral.Grupocodi == 852)
                    { }

                    GetEnteroFromListaGrupoDat(fechaFin, regCentral.Grupocodi, listaModoTienePAdic, out int codigoModoVigenteConAdicional, out DateTime? fechaVige0);
                    PrGrupoDTO regModoRsrvNe = listaGrupoModo.Find(x => x.Grupocodi == codigoModoVigenteConAdicional);

                    //relacion entre modo y catecodi 14 es uno a uno
                    PrGrupodatDTO regDatCodigoGrupoAdic = listaCodigoModoIncr.Find(x => x.ValorEntero == codigoModoVigenteConAdicional);
                    int codigoModoAdicional = regDatCodigoGrupoAdic != null ? regDatCodigoGrupoAdic.Grupocodi : 0;
                    PrGrupoDTO regGrupoAdicional = listaGrupoAdicional.Find(x => x.Grupocodi == codigoModoAdicional);

                    if (regModoRsrvNe != null && regGrupoAdicional != null)
                    {
                        EqEquipoDTO regUnidadRsrvNe = listaUnidadesRsrvaFria.Find(x => x.Grupocodi == codigoModoVigenteConAdicional);

                        //agregar adicional
                        if (regUnidadRsrvNe != null && regGrupoAdicional != null)
                        {
                            string sufijo = "";
                            if (regUnidadRsrvNe.Gruporeservafria == 1) sufijo = " ADICIONAL";
                            if (regUnidadRsrvNe.Gruponodoenergetico == 1) sufijo = " INCREMENTAL";

                            EqEquipoDTO regIncr = new EqEquipoDTO();
                            regIncr.Emprcodi = regUnidadRsrvNe.Emprcodi;
                            regIncr.Emprnomb = regUnidadRsrvNe.Emprnomb;
                            regIncr.Equipadre = regUnidadRsrvNe.Equipadre;
                            regIncr.Central = regUnidadRsrvNe.Central;
                            regIncr.Famcodi = ConstantesHorasOperacion.IdGeneradorTemoelectrico;
                            regIncr.Equicodi = regUnidadRsrvNe.Equicodi;
                            regIncr.Equiabrev = regUnidadRsrvNe.Equiabrev + sufijo;
                            regIncr.Equinomb = regUnidadRsrvNe.Equinomb + sufijo;
                            regIncr.UnidadnombPR25 = string.Join(" + ", regModoRsrvNe.ListaEquiabrev.Select(x => x)) + " " + regModoRsrvNe.Grupocomb + sufijo;
                            regIncr.Grupocodi = regGrupoAdicional.Grupocodi;
                            regIncr.Gruponomb = regGrupoAdicional.Gruponomb;
                            //regIncr.Grupopadre = regGrupoAdicional.Grupopadre ?? 0;
                            regIncr.Gruporeservafria = regUnidadRsrvNe.Gruporeservafria;
                            regIncr.Gruponodoenergetico = regUnidadRsrvNe.Gruponodoenergetico;
                            regIncr.Grupotipocogen = regUnidadRsrvNe.Grupotipocogen;
                            regIncr.Grupopadre = regUnidadRsrvNe.Grupocodi ?? 0;
                            regIncr.Grupoincremental = 1;
                            regIncr.Equifechiniopcom = regUnidadRsrvNe.Equifechiniopcom;
                            regIncr.Equifechfinopcom = regUnidadRsrvNe.Equifechfinopcom;
                            regIncr.Fenergcodi = regUnidadRsrvNe.Fenergcodi;

                            //AsignarFuenteEnergia(listaFuenteEnergia, regGrupoAdicional, regIncr);

                            GetValorDecimalFromListaGrupoDat(fechaFin, regModoRsrvNe.Grupocodi, listaPadicional, out decimal? valor, out DateTime? fechaVigencia);
                            regIncr.Pe = valor;
                            regIncr.FechaVigencia = fechaVigencia;

                            //GetPeFromListaGrupoDat(fechaFin, regModoRsrvNe.Grupocodi, listaPFirmeAdicional, out decimal valorPfadic, out DateTime? fechaVigenciaFirmeadic);
                            //regIncr.Pf = valorPfadic;
                            //regIncr.FechaVigenciaFirme = fechaVigenciaFirmeadic;

                            listaUnidadesTermo.Add(regIncr);

                            //actualizar potencia efectiva restante de la adicional (para el aplicativo Potencia Firme)
                            if (ConstantesIndisponibilidades.AppPR25 != aplicativo)
                            {
                                GetValorDecimalFromListaGrupoDat(fechaFin, regUnidadRsrvNe.Grupocodi ?? 0, listaPEfectivaRestanteAdicional, out decimal? valorPer, out DateTime? fechaVigenciaPer);
                                regUnidadRsrvNe.Pe = valorPer;
                                regUnidadRsrvNe.FechaVigencia = fechaVigenciaPer;
                            }
                        }
                    }
                }
            }

            //Tiene cambios de potencia efectiva en el mes
            foreach (var reg in listaUnidadesTermo)
            {
                reg.TieneModificacionPropiedad = fechaIni <= reg.FechaVigencia && reg.FechaVigencia <= fechaFin;
                reg.TieneModificacionPropiedadRendimiento = fechaIni <= reg.FechaVigenciaRendimiento && reg.FechaVigenciaRendimiento <= fechaFin;
                reg.TieneModificacionPropiedadPfirme = fechaIni <= reg.FechaVigenciaFirme && reg.FechaVigenciaFirme <= fechaFin;
            }
        }

        /// <summary>
        /// Listado de unidades termicas Op. Comercial Cdispatch
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaUnidadesTermo"></param>
        /// <param name="listaEquiposTermicos"></param>
        /// <param name="listaGrupoModo"></param>
        /// <param name="listaGrupoDespacho"></param>
        /// <param name="listaMsj"></param>
        public void ListarUnidadTermicoOpComercialCDispatch(DateTime fechaIni, string catecodisData
                                                , out List<EqEquipoDTO> listaUnidadesTermo, out List<EqEquipoDTO> listaUnidadesTermoEspecial, out List<EqEquipoDTO> listaEquiposTermicos
                                                , out List<PrGrupoDTO> listaGrupoModo, out List<PrGrupoDTO> listaGrupoDespacho
                                                , out List<ResultadoValidacionAplicativo> listaMsj, bool aplicarTTIE = true, bool flagSoloDatVigente = false)
        {
            DateTime fechaFin = fechaIni;
            listaUnidadesTermo = new List<EqEquipoDTO>();
            listaUnidadesTermoEspecial = new List<EqEquipoDTO>();
            listaMsj = new List<ResultadoValidacionAplicativo>();
            bool incluirCTCaniaBrava = true;

            List<SiFuenteenergiaDTO> listaFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().List();

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido(catecodisData);

            //listar todos los equipos y centrales que tienen operación comercial
            listaEquiposTermicos = this.ListarEquipoOpComercial(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica, out List<ResultadoValidacionAplicativo> listaMsjEq, aplicarTTIE, flagSoloDatVigente);
            List<EqEquipoDTO> listaEqGen = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            List<EqEquipoDTO> listaEqCentral = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            listaMsj.AddRange(listaMsjEq);

            //Potencia Efectiva de las unidades del modo especial
            List<PrGrupoEquipoValDTO> listaEquipoValEsp = ListarPrGrupoEquipoValHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotEfectiva + "," + ConstantesIndisponibilidades.ConcepcodiPotMinima + "," + ConstantesIndisponibilidades.ConcepcodiRendimiento + "," + ConstantesIndisponibilidades.ConcepcodiRendimientoSI,
                                                                                    fechaIni, flagSoloDatVigente);
            var listaPeEsp = listaEquipoValEsp.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva).ToList();
            var listaPminEsp = listaEquipoValEsp.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotMinima).ToList();
            var listaRendEsp = listaEquipoValEsp.Where(x => ConstantesIndisponibilidades.ListaConcepcodiRend.Contains(x.Concepcodi)).ToList();

            //Modos de operación y potencia efectiva
            this.ListarModoOperacionPe(fechaIni, fechaFin, out listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo, flagSoloDatVigente);
            listaMsj.AddRange(listaMsjModo);

            //
            listaGrupo = listaGrupo.Where(x => x.Catecodi != (int)ConstantesMigraciones.Catecodi.ModoOperacionTermico).ToList();
            listaGrupo.AddRange(listaGrupoModo);

            //
            listaGrupoModo = SetearEquiposToModoOperacion(listaGrupoModo, listaGrupo, listaEqCentral, listaEqGen);
            listaGrupoDespacho = SetearEquiposToGrupoDespacho(listaGrupo, listaEqCentral, listaEqGen);

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///1. Filtrar los modos de operación Ciclo Combinado válidos segun las unidades que tienen operacion comercial
            ///2. Filtrar los modos de operación Ciclo Simple y especiales
            foreach (var regCentral in listaEqCentral)
            {
                int equipadre = regCentral.Equipadre.Value;
                if (equipadre == 11883) 
                { }
                List<EqEquipoDTO> listaEqXCentral = listaEqGen.Where(x => x.Equipadre == equipadre).ToList();
                List<int> listaEquicodiXCentral = listaEqXCentral.Select(x => x.Equicodi).ToList();

                List<PrGrupoDTO> listaGrupoModoXCentral = listaGrupoModo.Where(x => x.Equipadre == equipadre)
                                                                    .OrderByDescending(x => x.Potencia).ToList();
                regCentral.ListaFuenteEnergia = ListarFuenteEnergRepresentativo(listaGrupoModoXCentral);
                regCentral.Grupocodicentral = GrupocodiCentralFromListaGrupo(regCentral.Grupocodi ?? 0, listaGrupo);

                if (listaGrupoModoXCentral.Any())
                {
                    foreach (var regModo in listaGrupoModoXCentral)
                    {
                        #region Caso CT Caña Brava y CT Talara
                        if (incluirCTCaniaBrava)
                        {
                            if (regModo.Grupocodi == 575 || regModo.Grupocodi == 3449)
                            {
                                regModo.TieneModoCicloCombinado = false;
                            }
                        }
                        #endregion

                        if (regModo.ListaEquicodi.All(x => listaEquicodiXCentral.Contains(x)))
                        {
                            if (regModo.TieneModoCicloCombinado)
                            {
                                EqEquipoDTO regUnidad = (EqEquipoDTO)regCentral.Clone();
                                regUnidad.Pe = regModo.Potencia;
                                regUnidad.FechaVigencia = regModo.FechaVigencia;
                                regUnidad.Rendimiento = regModo.Rendimiento;
                                regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                                regUnidad.Grupocodi = regModo.Grupocodi;
                                regUnidad.Gruponomb = regModo.Gruponomb;
                                regUnidad.Grupopadre = regModo.Grupopadre ?? 0; //Código del grupo térmico TV del modo de operación
                                regUnidad.TieneCicloComb = true;
                                regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                regUnidad.Grupotipocogen = regModo.Grupotipocogen;

                                var regEqTv = listaEqGen.Find(x => x.Grupocodi == regUnidad.Grupopadre);
                                if (regEqTv != null && regModo.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas)
                                    regUnidad.EquicodiTVCicloComb = regEqTv.Equicodi;

                                regUnidad.ListaEquicodi = regModo.ListaEquicodi;
                                regUnidad.Fenergcodi = regModo.Fenergcodi ?? -1;

                                listaUnidadesTermo.Add(regUnidad);
                            }
                            else
                            {
                                if (regModo.TieneModoCicloSimple)
                                {
                                    EqEquipoDTO regEquipo = listaEqGen.Find(x => x.Equicodi == regModo.ListaEquicodi.First());

                                    EqEquipoDTO regUnidad = (EqEquipoDTO)regEquipo.Clone();
                                    regUnidad.Pe = regModo.Potencia;
                                    regUnidad.FechaVigencia = regModo.FechaVigencia;
                                    regUnidad.Pf = regModo.PotenciaFirme;
                                    regUnidad.FechaVigenciaFirme = regModo.FechaVigenciaFirme;
                                    regUnidad.Rendimiento = regModo.Rendimiento;
                                    regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                                    regUnidad.Grupocodi = regModo.Grupocodi;
                                    regUnidad.Gruponomb = regModo.Gruponomb;
                                    regUnidad.Grupopadre = regModo.Grupopadre ?? 0;
                                    regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                    regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                    regUnidad.Grupotipocogen = regModo.Grupotipocogen;

                                    List<PrGrupoDTO> listaGrupoModoXEq = listaGrupoModoXCentral.Where(x => x.ListaEquicodi.All(y => y == regEquipo.Equicodi))
                                                                            .OrderByDescending(x => x.Potencia).ToList();
                                    regUnidad.ListaFuenteEnergia = ListarFuenteEnergRepresentativo(listaGrupoModoXEq);

                                    regUnidad.ListaEquicodi = regModo.ListaEquicodi;
                                    regUnidad.Fenergcodi = regModo.Fenergcodi ?? -1;

                                    listaUnidadesTermo.Add(regUnidad);
                                }
                                else
                                {
                                    List<EqEquipoDTO> listaEqEspecial = listaEqXCentral.Where(x => regModo.ListaEquicodi.Contains(x.Equicodi)).ToList();

                                    //1. Unidad especial
                                    EqEquipoDTO regUnidad = (EqEquipoDTO)regCentral.Clone();

                                    regUnidad.Pe = regModo.Potencia;
                                    regUnidad.FechaVigencia = regModo.FechaVigencia;
                                    regUnidad.Grupocodi = regModo.Grupocodi;
                                    regUnidad.Gruponomb = regModo.Gruponomb;
                                    regUnidad.Grupopadre = regModo.Grupopadre ?? 0;
                                    regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                    regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                    regUnidad.Grupotipocogen = regModo.Grupotipocogen;
                                    regUnidad.TieneCicloComb = true;
                                    regUnidad.EsUnidadModoEspecial = true;

                                    regUnidad.ListaEquicodi = regModo.ListaEquicodi;
                                    regUnidad.Fenergcodi = regModo.Fenergcodi ?? -1;

                                    if (regCentral.Pe <= 0 || regCentral.FechaVigencia == null)
                                        listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regCentral.Equicodi + "," + regCentral.Equiabrev + "] del modo de operación " + regCentral.Gruponomb + "  no tiene datos de Potencia efectiva." });

                                    listaUnidadesTermo.Add(regUnidad);

                                    //2. Equipos especiales
                                    foreach (var regEquipo in listaEqEspecial)
                                    {
                                        EqEquipoDTO regEspecial = (EqEquipoDTO)regEquipo.Clone();

                                        GetValorDecimalFromListaGrupoVal(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, listaPeEsp, out decimal? valor, out DateTime? fechaVigencia);
                                        GetValorDecimalFromListaGrupoVal(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, listaPminEsp, out decimal? valor3, out DateTime? fechaVigencia3);
                                        GetValorDecimalFromListaGrupoVal2(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, ConstantesIndisponibilidades.ConcepcodiRendimiento, listaRendEsp, out decimal? valorRend, out DateTime? fechaVigenciaRend);

                                        #region Caso CT Caña Brava
                                        if (incluirCTCaniaBrava)
                                        {
                                            if (regModo.Grupocodi == 575)
                                            {
                                                if (regEquipo.Equicodi == 20524)
                                                {
                                                    var regModoCTCaniaBravaG1 = listaGrupoModo.Find(x => x.Grupocodi == 573);
                                                    valor = regModoCTCaniaBravaG1.Potencia;
                                                    fechaVigencia = regModoCTCaniaBravaG1.FechaVigencia;
                                                }
                                                if (regEquipo.Equicodi == 20523)
                                                {
                                                    var regModoCTCaniaBravaG2 = listaGrupoModo.Find(x => x.Grupocodi == 574);
                                                    valor = regModoCTCaniaBravaG2.Potencia;
                                                    fechaVigencia = regModoCTCaniaBravaG2.FechaVigencia;
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Caso CT Talara
                                        if (incluirCTCaniaBrava)
                                        {
                                            if (regModo.Grupocodi == 3449)
                                            {
                                                if (regEquipo.Equicodi == 22384)
                                                {
                                                    var regModoCTTalaraTV1 = listaGrupoModo.Find(x => x.Grupocodi == 3385);
                                                    valor = regModoCTTalaraTV1.Potencia;
                                                    fechaVigencia = regModoCTTalaraTV1.FechaVigencia;
                                                }
                                                if (regEquipo.Equicodi == 22385)
                                                {
                                                    var regModoCTTalaraTV2 = listaGrupoModo.Find(x => x.Grupocodi == 3386);
                                                    valor = regModoCTTalaraTV2.Potencia;
                                                    fechaVigencia = regModoCTTalaraTV2.FechaVigencia;
                                                }
                                            }
                                        }
                                        #endregion

                                        regEspecial.Pe = valor;
                                        regEspecial.FechaVigencia = fechaVigencia;
                                        regEspecial.Pmin = valor3;
                                        regEspecial.Rendimiento = valorRend;
                                        regEspecial.FechaVigenciaRendimiento = fechaVigenciaRend;
                                        regEspecial.Grupocodi = regModo.Grupocodi;
                                        regEspecial.Gruponomb = regModo.Gruponomb;
                                        regEspecial.Grupopadre = regModo.Grupopadre ?? 0;
                                        regEspecial.Gruporeservafria = regModo.Gruporeservafria;
                                        regEspecial.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                        regEspecial.Grupotipocogen = regModo.Grupotipocogen;
                                        regEspecial.EsUnidadModoEspecial = true;

                                        List<PrGrupoDTO> listaGrupoModoXEq = listaGrupoModoXCentral.Where(x => x.ListaEquicodi.Any(y => y == regEquipo.Equicodi))
                                                                                .OrderByDescending(x => x.Potencia).ToList();
                                        regEspecial.ListaFuenteEnergia = ListarFuenteEnergRepresentativo(listaGrupoModoXEq);

                                        AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regEspecial);

                                        if (valor <= 0 || fechaVigencia == null)
                                            listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Potencia efectiva." });

                                        if (valorRend <= 0 || fechaVigenciaRend == null)
                                            listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Rendimiento." });

                                        listaUnidadesTermoEspecial.Add(regEspecial);
                                    }
                                }
                            }

                            //quitar a las unidades de la lista general
                            listaEquicodiXCentral = listaEquicodiXCentral.Where(x => !regModo.ListaEquicodi.Contains(x)).ToList();
                        }
                    }
                }
                else
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La Central " + regCentral.Equinomb + " no tiene asociado un modo de operación, las unidades no serán tomadas en cuenta." });
                }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Tiene cambios de potencia efectiva en el mes
            foreach (var reg in listaUnidadesTermo)
            {
                reg.TieneModificacionPropiedad = fechaIni <= reg.FechaVigencia && reg.FechaVigencia <= fechaFin;
                reg.TieneModificacionPropiedadRendimiento = fechaIni <= reg.FechaVigenciaRendimiento && reg.FechaVigenciaRendimiento <= fechaFin;
                reg.TieneModificacionPropiedadPfirme = fechaIni <= reg.FechaVigenciaFirme && reg.FechaVigenciaFirme <= fechaFin;
            }
        }

        private List<SiFuenteenergiaDTO> ListarFuenteEnergRepresentativo(List<PrGrupoDTO> listaGrupoModoXEq)
        {
            List<SiFuenteenergiaDTO> listaFenergEq = listaGrupoModoXEq.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                                .Select(x => new SiFuenteenergiaDTO()
                                                                {
                                                                    Fenergcodi = x.Key.Value,
                                                                    Fenergnomb = x.First().Fenergnomb,
                                                                    ListaEquicodiXFenerg = x.Select(y => y.ListaEquicodi).SelectMany(y => y).Distinct().ToList(), //todos los equipos de ese combustible
                                                                    GrupocodiMaxPe = x.First().Grupocodi //previamente está ordenado por potencia
                                                                }).ToList();

            return listaFenergEq;
        }

        /// <summary>
        /// Listado de unidades termicas Op. Comercial
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaUnidadesTermo"></param>
        /// <param name="listaEquiposTermicos"></param>
        /// <param name="listaMsj"></param>
        public void ListarUnidadTermicoCCC(DateTime fechaIni, DateTime fechaFin, string emprcodis, string equipadres
                                                , out List<EqEquipoDTO> listaUnidadesTermo, out List<EqEquipoDTO> listaEquiposTermicos
                                                , out List<PrGrupoDTO> listaAllGrupoModo, out List<PrGrupoDTO> listaAllGrupo, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            listaUnidadesTermo = new List<EqEquipoDTO>();
            listaMsj = new List<ResultadoValidacionAplicativo>();

            List<SiFuenteenergiaDTO> listaFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().List();

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

            //listar todos los equipos y centrales que tienen operación comercial
            listaEquiposTermicos = this.ListarEquipoOpComercial(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica, out List<ResultadoValidacionAplicativo> listaMsjEq);
            List<EqEquipoDTO> listaEqGen = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            List<EqEquipoDTO> listaEqCentral = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            listaMsj.AddRange(listaMsjEq);

            //
            this.ListarModoOperacionActivosPe(fechaIni, fechaFin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);
            listaMsj.AddRange(listaMsjModo);

            //
            listaGrupo = listaGrupo.Where(x => x.Catecodi != (int)ConstantesMigraciones.Catecodi.ModoOperacionTermico).ToList();
            listaGrupo.AddRange(listaGrupoModo);

            listaGrupoModo = SetearEquiposToModoOperacionXApp(-1, listaGrupoModo, listaGrupo, listaEqCentral, listaEqGen);

            //Potencia Efectiva de las unidades del modo especial
            List<PrGrupoEquipoValDTO> listaEquipoValEsp = ListarPrGrupoEquipoValHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotEfectiva + "," + ConstantesIndisponibilidades.ConcepcodiPotMinima + "," + ConstantesIndisponibilidades.ConcepcodiRendimiento + "," + ConstantesIndisponibilidades.ConcepcodiRendimientoSI);
            var listaPeEsp = listaEquipoValEsp.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva).ToList();
            var listaPminEsp = listaEquipoValEsp.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotMinima).ToList();
            var listaRendEsp = listaEquipoValEsp.Where(x => ConstantesIndisponibilidades.ListaConcepcodiRend.Contains(x.Concepcodi)).ToList();

            //setear 

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///1. Filtrar los modos de operación Ciclo Combinado válidos segun las unidades que tienen operacion comercial
            ///2. Filtrar los modos de operación Ciclo Simple y especiales
            foreach (var regCentral in listaEqCentral)
            {
                int equipadre = regCentral.Equipadre.Value;
                if (equipadre == 12781)
                { }
                List<EqEquipoDTO> listaEqXCentral = listaEqGen.Where(x => x.Equipadre == equipadre).ToList();
                List<int> listaEquicodiXCentral = listaEqXCentral.Select(x => x.Equicodi).ToList();

                List<PrGrupoDTO> listaGrupoModoXCentral = listaGrupoModo.Where(x => x.Equipadre == equipadre).OrderByDescending(x => x.Potencia).ToList();
                List<SiFuenteenergiaDTO> listaFenerg = listaGrupoModoXCentral.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                            .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                regCentral.ListaFuenteEnergia = listaFenerg;
                regCentral.Grupocodicentral = GrupocodiCentralFromListaGrupo(regCentral.Grupocodi ?? 0, listaGrupo);

                if (listaGrupoModoXCentral.Any())
                {
                    foreach (var regModo in listaGrupoModoXCentral)
                    {
                        if (regModo.ListaEquicodi.All(x => listaEquicodiXCentral.Contains(x)))
                        {
                            if (regModo.TieneModoCicloCombinado)
                            {
                                EqEquipoDTO regUnidad = (EqEquipoDTO)regCentral.Clone();
                                regUnidad.Pe = regModo.Potencia;
                                regUnidad.Pmin = regModo.PotenciaMinima;
                                regUnidad.FechaVigencia = regModo.FechaVigencia;
                                regUnidad.Rendimiento = regModo.Rendimiento;
                                regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                                regUnidad.Grupocodi = regModo.Grupocodi;
                                regUnidad.Gruponomb = regModo.Gruponomb;
                                regUnidad.Grupopadre = regModo.Grupopadre ?? 0; //Código del grupo térmico TV del modo de operación
                                regUnidad.TieneCicloComb = true;
                                var regEqTv = listaEqGen.Find(x => x.Grupocodi == regUnidad.Grupopadre);
                                if (regEqTv != null && regUnidad.Equipadre != 20510 && regUnidad.Equipadre != 22187)
                                    regUnidad.EquicodiTVCicloComb = regEqTv.Equicodi;
                                regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                regUnidad.Grupotipocogen = regModo.Grupotipocogen;

                                AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regUnidad);

                                listaUnidadesTermo.Add(regUnidad);
                            }
                            else
                            {
                                if (regModo.TieneModoCicloSimple)
                                {
                                    EqEquipoDTO regEquipo = listaEqGen.Find(x => x.Equicodi == regModo.ListaEquicodi.First());

                                    EqEquipoDTO regUnidad = (EqEquipoDTO)regEquipo.Clone();
                                    regUnidad.Pe = regModo.Potencia;
                                    regUnidad.Pmin = regModo.PotenciaMinima;
                                    regUnidad.FechaVigencia = regModo.FechaVigencia;
                                    regUnidad.Rendimiento = regModo.Rendimiento;
                                    regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                                    regUnidad.Rsf = regModo.RsfDefecto;
                                    regUnidad.FechaVigenciaRsf = regModo.FechaVigenciaRsfDefecto;
                                    regUnidad.Grupocodi = regModo.Grupocodi;
                                    regUnidad.Gruponomb = regModo.Gruponomb;
                                    regUnidad.Grupopadre = regModo.Grupopadre ?? 0;
                                    regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                    regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                    regUnidad.Grupotipocogen = regModo.Grupotipocogen;

                                    List<PrGrupoDTO> listaGrupoModoXEq = listaGrupoModoXCentral.Where(x => x.ListaEquicodi.All(y => y == regEquipo.Equicodi)).OrderByDescending(x => x.Potencia).ToList();
                                    List<SiFuenteenergiaDTO> listaFenergEq = listaGrupoModoXEq.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                            .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                                    regUnidad.ListaFuenteEnergia = listaFenergEq;

                                    AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regUnidad);

                                    listaUnidadesTermo.Add(regUnidad);
                                }
                                else
                                {
                                    List<EqEquipoDTO> listaEqEspecial = listaEqXCentral.Where(x => regModo.ListaEquicodi.Contains(x.Equicodi)).ToList();

                                    foreach (var regEquipo in listaEqEspecial)
                                    {
                                        EqEquipoDTO regEspecial = (EqEquipoDTO)regEquipo.Clone();

                                        GetValorDecimalFromListaGrupoVal(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, listaPeEsp, out decimal? valor, out DateTime? fechaVigencia);
                                        GetValorDecimalFromListaGrupoVal(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, listaPminEsp, out decimal? valorMin, out DateTime? fechaVigenciaMin);
                                        GetValorDecimalFromListaGrupoVal2(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, ConstantesIndisponibilidades.ConcepcodiRendimiento, listaRendEsp, out decimal? valorRend, out DateTime? fechaVigenciaRend);

                                        regEspecial.Pe = valor;
                                        regEspecial.Pmin = valorMin;
                                        regEspecial.FechaVigencia = fechaVigencia;
                                        regEspecial.Rendimiento = valorRend;
                                        regEspecial.FechaVigenciaRendimiento = fechaVigenciaRend;
                                        regEspecial.Grupocodi = regModo.Grupocodi;
                                        regEspecial.Gruponomb = regModo.Gruponomb;
                                        regEspecial.Grupopadre = regModo.Grupopadre ?? 0;
                                        regEspecial.Gruporeservafria = regModo.Gruporeservafria;
                                        regEspecial.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                        regEspecial.Grupotipocogen = regModo.Grupotipocogen;
                                        regEspecial.EsUnidadModoEspecial = true;

                                        List<PrGrupoDTO> listaGrupoModoXEq = listaGrupoModoXCentral.Where(x => x.ListaEquicodi.Any(y => y == regEquipo.Equicodi)).OrderByDescending(x => x.Potencia).ToList();
                                        List<SiFuenteenergiaDTO> listaFenergEq = listaGrupoModoXEq.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                                .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                                        regEspecial.ListaFuenteEnergia = listaFenergEq;

                                        AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regEspecial);

                                        if (valor <= 0 || fechaVigencia == null)
                                            listaMsj.Add(new ResultadoValidacionAplicativo() { Equipadre = regCentral.Equipadre.Value, TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Potencia efectiva." });

                                        if (valorMin <= 0 || fechaVigenciaMin == null)
                                            listaMsj.Add(new ResultadoValidacionAplicativo() { Equipadre = regCentral.Equipadre.Value, TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Potencia mínima." });

                                        //if (valorRend <= 0 || fechaVigenciaRend == null)
                                        //    listaMsj.Add(new ResultadoValidacionAplicativo() { Equipadre = regCentral.Equipadre.Value, TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Rendimiento." });

                                        listaUnidadesTermo.Add(regEspecial);
                                    }

                                }
                            }

                            //quitar a las unidades de la lista general
                            if (regModo.Grupocodi != 3424) listaEquicodiXCentral = listaEquicodiXCentral.Where(x => !regModo.ListaEquicodi.Contains(x)).ToList();
                        }
                    }
                }
                else
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { Equipadre = regCentral.Equipadre.Value, TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La Central " + regCentral.Equinomb + " no tiene asociado un modo de operación, las unidades no serán tomadas en cuenta." });
                }
            }

            //Tiene cambios de potencia efectiva en el mes
            foreach (var reg in listaUnidadesTermo)
            {
                reg.EsUnaUnidadXCentral = listaEqGen.Where(x => x.Equipadre == reg.Equipadre).Count() == 1;
                reg.TieneModificacionPropiedad = fechaIni <= reg.FechaVigencia && reg.FechaVigencia <= fechaFin;
                reg.TieneModificacionPropiedadRendimiento = fechaIni <= reg.FechaVigenciaRendimiento && reg.FechaVigenciaRendimiento <= fechaFin;
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// 2. Establecer valor de número de generadores de la Central de Reserva fría

            //Número de generadores de centrales de reserva fria
            List<PrGrupodatDTO> listaDatNumGenRF = ListarPrGrupodatHistoricoEnteroValido(ConstantesIndisponibilidades.ConcepcodiNumGenRf.ToString());

            List<PrGrupodatDTO> listaCombAlt = ListarPrGrupodatHistoricoVigente(ConstantesIndisponibilidades.ConcepcodiCombAlt.ToString(), null, false);

            List<PrGrupodatDTO> listaConsumoCombAltResidual = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiCombArSinAltResidual + "," + ConstantesIndisponibilidades.ConcepcodiCombArSinAltResidualSI);
            List<PrGrupodatDTO> listaConsumoCombAltCarbon = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiCombArSinAltCarbon + "," + ConstantesIndisponibilidades.ConcepcodiCombArSinAltCarbonSI);

            foreach (var reg in listaUnidadesTermo)
            {
                //Evaluar reserva fría
                if (reg.Equipadre == 16291)
                { }
                if (reg.Gruporeservafria == 1 && reg.EsUnaUnidadXCentral)
                {
                    reg.Grupocodicentral = GrupocodiCentralFromListaGrupo(reg.Grupocodi ?? 0, listaGrupo);

                    PrGrupodatDTO regDat = listaDatNumGenRF.Find(x => x.Grupocodi == reg.Grupocodicentral);
                    if (regDat != null && regDat.ValorEntero > 0)
                        reg.NumeroGen = regDat.ValorEntero;
                }


                if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR500
                    || reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiR6
                    || reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiResidual
                    || reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiCarbon)
                {
                    PrGrupodatDTO regDat = listaCombAlt.Find(x => x.Grupocodi == reg.Grupocodi);
                    if (regDat != null && !string.IsNullOrEmpty(regDat.Formuladat))
                    {
                        string combAlt = regDat.Formuladat.ToUpper().Replace("-", "");
                        if (combAlt == "DB5")
                        {
                            reg.FenergcodiCombAlt = ConstantesPR5ReportesServicio.FenergcodiDiesel;

                            if (reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiCarbon)
                            {
                                //validar con usuarios SGI cual concepto utilizar
                                GetValorDecimalFromListaGrupoDat2(fechaFin, reg.Grupocodi.Value, ConstantesIndisponibilidades.ConcepcodiCombArSinAltCarbon, listaConsumoCombAltCarbon, out decimal? valorConsC, out DateTime? fechaVigencia2);
                                reg.ConsumoCombAlt = valorConsC;
                                reg.FechaVigenciaCombAlt = fechaVigencia2;
                            }
                            else
                            {
                                GetValorDecimalFromListaGrupoDat2(fechaFin, reg.Grupocodi.Value, ConstantesIndisponibilidades.ConcepcodiCombArSinAltResidual, listaConsumoCombAltResidual, out decimal? valorConsR, out DateTime? fechaVigencia2);
                                reg.ConsumoCombAlt = valorConsR;
                                reg.FechaVigenciaCombAlt = fechaVigencia2;
                            }
                        }
                    }
                }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //incluir el combustible secundario que tiene operación comercial
            listaUnidadesTermo = AgregarUnidadesCombustibleSecundario(listaUnidadesTermo, listaGrupoModo, listaEqGen);

            //incluir unidades de ciclo simple (para ciclos combinados)
            listaUnidadesTermo = AgregarUnidadesModoCicloSimple(listaUnidadesTermo, listaGrupoModo, listaEqGen);

            if (ConstantesAppServicio.ParametroDefecto != emprcodis)
            {
                int[] listaemprcodis = emprcodis.Split(',').Select(x => int.Parse(x)).ToArray();

                listaUnidadesTermo = listaUnidadesTermo.Where(x => listaemprcodis.Contains(x.Emprcodi ?? 0)).ToList();
                listaEquiposTermicos = listaEquiposTermicos.Where(x => listaemprcodis.Contains(x.Emprcodi ?? 0)).ToList();
                //listaGrupoModo = listaGrupoModo.Where(x => listaemprcodis.Contains(x.Emprcodi ?? 0)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != equipadres)
            {
                int[] listaequipadres = equipadres.Split(',').Select(x => int.Parse(x)).ToArray();

                listaUnidadesTermo = listaUnidadesTermo.Where(x => listaequipadres.Contains(x.Equipadre ?? 0)).ToList();
                listaEquiposTermicos = listaEquiposTermicos.Where(x => listaequipadres.Contains(x.Equipadre ?? 0)).ToList();
                //listaGrupoModo = listaGrupoModo.Where(x => listaequipadres.Contains(x.Equipadre)).ToList();
                listaMsj = listaMsj.Where(x => listaequipadres.Contains(x.Equipadre)).ToList();
            }

            //setear nombre de la unidad para CCC
            foreach (var reg in listaUnidadesTermo)
            {
                reg.UnidadnombCCC = (reg.Equiabrev ?? "").Trim() + "-" + (reg.Fenergnomb ?? "").Trim();
            }

            listaUnidadesTermo = listaUnidadesTermo.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ToList();
            listaAllGrupo = listaGrupo;
            listaAllGrupoModo = listaGrupoModo;
        }

        /// <summary>
        /// Lista de potencias de equipos termicos
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarUnidadTermicaPotencia(DateTime fechaIni, DateTime fechaFin)
        {
            ListarUnidadTermicoCCC(fechaIni, fechaFin, "-1", "-1", out List<EqEquipoDTO> listaUnidad
                                             , out List<EqEquipoDTO> listaEquiposTermicos
                                             , out List<PrGrupoDTO> listaGrupoModo, out List<PrGrupoDTO> listaAllGrupo
                                             , out List<ResultadoValidacionAplicativo> listaMsj3);

            //completar informacion para centrales de ciclo simple / especiales
            foreach (var reg in listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica))
            {
                var regUnidadXReg = listaUnidad.Find(x => x.Equicodi == reg.Equicodi);
                var listaUnidadesXReg = listaUnidad.Where(x => x.Equipadre == reg.Equicodi).ToList();

                if (regUnidadXReg == null)
                {
                    //unica unidad por central (paramonga, mapple)
                    var regUnico = listaUnidadesXReg.Find(x => x.EsUnaUnidadXCentral);
                    if (regUnico != null)
                    {
                        EqEquipoDTO regClone = (EqEquipoDTO)regUnico.Clone();
                        regClone.Equicodi = reg.Equicodi;
                        regClone.Famcodi = reg.Famcodi;

                        listaUnidad.Add(regClone);
                    }
                    else
                    {
                        //centrales especiales (huaycoloro, la gringa)
                        if (listaUnidadesXReg.Any())
                        {
                            EqEquipoDTO regClone = (EqEquipoDTO)listaUnidadesXReg.First().Clone();
                            regClone.Equicodi = reg.Equicodi;
                            regClone.Famcodi = reg.Famcodi;
                            regClone.Pe = listaUnidadesXReg.Sum(x => x.Pe ?? 0);
                            regClone.Pmin = listaUnidadesXReg.Sum(x => x.Pmin ?? 0);

                            listaUnidad.Add(regClone);
                        }
                    }
                }
            }

            return listaUnidad;
        }

        /// <summary>
        /// Listar empresas, centrales y modos por filtro
        /// </summary>
        /// <param name="emprcodis"></param>
        /// <param name="equipadres"></param>
        /// <param name="listaEmpresa"></param>
        /// <param name="listaCentral"></param>
        /// <param name="listaModo"></param>
        public void ListarUnidadTermicoXEmpresaXCentral(DateTime fechaIni, string emprcodis, string equipadres, out List<SiEmpresaDTO> listaEmpresa
                                                        , out List<EqEquipoDTO> listaCentral, out List<EqEquipoDTO> listaGenerador, out List<PrGrupoDTO> listaGrupoModo, out List<PrGrupoDTO> listaGrupoDespacho)
        {
            DateTime fechaFin = fechaIni;

            var listaMsj = new List<ResultadoValidacionAplicativo>();

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

            //listar todos los equipos y centrales que tienen operación comercial
            var listaEquiposTermicos = this.ListarEquipoOpComercial(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica, out List<ResultadoValidacionAplicativo> listaMsjEq);
            List<EqEquipoDTO> listaEqGen = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            List<EqEquipoDTO> listaEqCentral = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            listaMsj.AddRange(listaMsjEq);

            //
            this.ListarModoOperacionActivosPe(fechaIni, fechaFin, out listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);
            listaMsj.AddRange(listaMsjModo);

            //
            listaGrupo = listaGrupo.Where(x => x.Catecodi != (int)ConstantesMigraciones.Catecodi.ModoOperacionTermico).ToList();
            listaGrupo.AddRange(listaGrupoModo);

            //Salidas
            listaEmpresa = listaEqCentral.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Value, Emprnomb = x.First().Emprnomb }).OrderBy(x => x.Emprnomb).ToList();
            listaCentral = listaEqCentral;
            listaGenerador = listaEqGen;
            listaGrupoModo = SetearEquiposToModoOperacionXApp(-1, listaGrupoModo, listaGrupo, listaEqCentral, listaEqGen);
            listaGrupoDespacho = SetearEquiposToGrupoDespacho(listaGrupo, listaEqCentral, listaEqGen);

            //filtros
            if (ConstantesAppServicio.ParametroDefecto != emprcodis)
            {
                int[] listaemprcodis = emprcodis.Split(',').Select(x => int.Parse(x)).ToArray();

                listaEmpresa = listaEmpresa.Where(x => listaemprcodis.Contains(x.Emprcodi)).ToList();
                listaCentral = listaCentral.Where(x => listaemprcodis.Contains(x.Emprcodi ?? 0)).ToList();
                listaGenerador = listaGenerador.Where(x => listaemprcodis.Contains(x.Emprcodi ?? 0)).ToList();
                listaGrupoModo = listaGrupoModo.Where(x => listaemprcodis.Contains(x.Emprcodi ?? 0)).ToList();
                listaGrupoDespacho = listaGrupoDespacho.Where(x => listaemprcodis.Contains(x.Emprcodi ?? 0)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != equipadres)
            {
                int[] listaequipadres = equipadres.Split(',').Select(x => int.Parse(x)).ToArray();

                listaCentral = listaCentral.Where(x => listaequipadres.Contains(x.Equipadre ?? 0)).ToList();
                listaGenerador = listaGenerador.Where(x => listaequipadres.Contains(x.Equipadre ?? 0)).ToList();
                listaGrupoModo = listaGrupoModo.Where(x => listaequipadres.Contains(x.Equipadre)).ToList();
                listaGrupoDespacho = listaGrupoDespacho.Where(x => listaequipadres.Contains(x.Equipadre)).ToList();
            }

            listaEmpresa = listaEmpresa.OrderBy(x => x.Emprnomb).ToList();
            listaCentral = listaCentral.OrderBy(x => x.Equinomb).ToList();
        }

        /// <summary>
        /// Listado de unidades especiales
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="listaUnidadesTermoOut"></param>
        /// <param name="listaCentralTermoOut"></param>
        public void ListarUnidadTermicoEspecial(DateTime fechaIni, DateTime fechaFin, string catecodisData, bool incluirCTCaniaBrava, out List<EqEquipoDTO> listaUnidadesTermoOut, out List<EqEquipoDTO> listaCentralTermoOut,
                                                     bool aplicarTTIE = true, bool flagSoloDatVigente = false)
        {
            List<EqEquipoDTO> listaUnidadesTermo = new List<EqEquipoDTO>();
            List<ResultadoValidacionAplicativo> listaMsj = new List<ResultadoValidacionAplicativo>();

            List<SiFuenteenergiaDTO> listaFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().List();

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido(catecodisData);

            //listar todos los equipos y centrales que tienen operación comercial
            List<EqEquipoDTO> listaEquiposTermicos = this.ListarEquipoOpComercial(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica, out List<ResultadoValidacionAplicativo> listaMsjEq, aplicarTTIE, flagSoloDatVigente);
            List<EqEquipoDTO> listaEqGen = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            List<EqEquipoDTO> listaEqCentral = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            listaMsj.AddRange(listaMsjEq);

            //
            this.ListarModoOperacionActivosPe(fechaIni, fechaFin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo, flagSoloDatVigente);
            listaMsj.AddRange(listaMsjModo);

            //
            listaGrupo = listaGrupo.Where(x => x.Catecodi != (int)ConstantesMigraciones.Catecodi.ModoOperacionTermico).ToList();
            listaGrupo.AddRange(listaGrupoModo);

            listaGrupoModo = SetearEquiposToModoOperacionXApp(-1, listaGrupoModo, listaGrupo, listaEqCentral, listaEqGen);

            //Potencia Efectiva de las unidades del modo especial
            List<PrGrupoEquipoValDTO> listaEquipoValEsp = ListarPrGrupoEquipoValHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotEfectiva + "," + ConstantesIndisponibilidades.ConcepcodiPotMinima + "," + ConstantesIndisponibilidades.ConcepcodiRendimiento + "," + ConstantesIndisponibilidades.ConcepcodiRendimientoSI);
            var listaPeEsp = listaEquipoValEsp.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva).ToList();
            var listaPminEsp = listaEquipoValEsp.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotMinima).ToList();
            var listaRendEsp = listaEquipoValEsp.Where(x => ConstantesIndisponibilidades.ListaConcepcodiRend.Contains(x.Concepcodi)).ToList();

            //Potencia efectiva de equipo 
            List<EqPropequiDTO> listaPEfect = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotEfecTermoGenSem.ToString(), fechaIni, flagSoloDatVigente);
            foreach (var reg in listaEquiposTermicos)
            {
                //potencia efectiva
                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPEfect, out decimal? valorInst, out DateTime? fechaVigenciaInst, out string comentarioInst);
                reg.Pe = valorInst;
            }

            //Potencia instalada 
            List<EqPropequiDTO> listaPinst = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotInstaladaTermo.ToString() + "," + ConstantesPR5ReportesServicio.PropPotInstaladaGenTermo.ToString(), fechaIni, flagSoloDatVigente);
            foreach (var reg in listaEquiposTermicos)
            {
                //potencia instalada
                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPinst, out decimal? valorInst, out DateTime? fechaVigenciaInst, out string comentarioInst);
                reg.PotenciaInstalada = valorInst;
            }

            //Potencia nominal 
            List<EqPropequiDTO> listaPnominal = ListarEqPropequiHistoricoDecimalValido(ConstantesPR5ReportesServicio.PropPotNominalTermo.ToString() + "," + ConstantesPR5ReportesServicio.PropPotNominalGenTermo.ToString(), fechaIni, flagSoloDatVigente);
            foreach (var reg in listaEquiposTermicos)
            {
                //potencia nominal
                GetPeFromListaPropequi(fechaFin, reg.Equicodi, listaPnominal, out decimal? valorInst, out DateTime? fechaVigenciaInst, out string comentarioInst);
                reg.PotenciaNominal = valorInst;
            }

            //setear 

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///1. Filtrar los modos de operación Ciclo Combinado válidos segun las unidades que tienen operacion comercial
            ///2. Filtrar los modos de operación Ciclo Simple y especiales
            foreach (var regCentral in listaEqCentral)
            {
                int equipadre = regCentral.Equipadre.Value;
                if (equipadre == 11883)
                { }
                List<EqEquipoDTO> listaEqXCentral = listaEqGen.Where(x => x.Equipadre == equipadre).ToList();
                List<int> listaEquicodiXCentral = listaEqXCentral.Select(x => x.Equicodi).ToList();

                List<PrGrupoDTO> listaGrupoModoXCentral = listaGrupoModo.Where(x => x.Equipadre == equipadre).OrderByDescending(x => x.Potencia).ToList();
                List<SiFuenteenergiaDTO> listaFenerg = listaGrupoModoXCentral.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                            .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                regCentral.ListaFuenteEnergia = listaFenerg;
                regCentral.Grupocodicentral = GrupocodiCentralFromListaGrupo(regCentral.Grupocodi ?? 0, listaGrupo);

                if (listaGrupoModoXCentral.Any())
                {
                    foreach (var regModo in listaGrupoModoXCentral)
                    {
                        #region Caso CT Caña Brava y CT Talara
                        if (incluirCTCaniaBrava)
                        {
                            if (regModo.Grupocodi == 575 || regModo.Grupocodi == 3449 || regModo.Grupocodi == 3424)
                            {
                                regModo.TieneModoCicloCombinado = false;
                            }
                        }
                        #endregion

                        if (regModo.ListaEquicodi.All(x => listaEquicodiXCentral.Contains(x)))
                        {
                            if (regModo.TieneModoCicloCombinado)
                            {
                                EqEquipoDTO regUnidad = (EqEquipoDTO)regCentral.Clone();
                                regUnidad.Pe = regModo.Potencia;
                                regUnidad.FechaVigencia = regModo.FechaVigencia;
                                regUnidad.Rendimiento = regModo.Rendimiento;
                                regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                                regUnidad.Grupocodi = regModo.Grupocodi;
                                regUnidad.Gruponomb = regModo.Gruponomb;
                                regUnidad.Grupopadre = regModo.Grupopadre ?? 0; //Código del grupo térmico TV del modo de operación
                                regUnidad.TieneCicloComb = true;
                                regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                regUnidad.Grupotipocogen = regModo.Grupotipocogen;

                                AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regUnidad);

                                listaUnidadesTermo.Add(regUnidad);
                            }
                            else
                            {
                                if (regModo.TieneModoCicloSimple)
                                {
                                    EqEquipoDTO regEquipo = listaEqGen.Find(x => x.Equicodi == regModo.ListaEquicodi.First());

                                    EqEquipoDTO regUnidad = (EqEquipoDTO)regEquipo.Clone();
                                    regUnidad.Pe = regModo.Potencia;
                                    regUnidad.FechaVigencia = regModo.FechaVigencia;
                                    regUnidad.Rendimiento = regModo.Rendimiento;
                                    regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                                    regUnidad.Grupocodi = regModo.Grupocodi;
                                    regUnidad.Gruponomb = regModo.Gruponomb;
                                    regUnidad.Grupopadre = regModo.Grupopadre ?? 0;
                                    regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                                    regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                    regUnidad.Grupotipocogen = regModo.Grupotipocogen;

                                    List<PrGrupoDTO> listaGrupoModoXEq = listaGrupoModoXCentral.Where(x => x.ListaEquicodi.All(y => y == regEquipo.Equicodi)).OrderByDescending(x => x.Potencia).ToList();
                                    List<SiFuenteenergiaDTO> listaFenergEq = listaGrupoModoXEq.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                            .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                                    regUnidad.ListaFuenteEnergia = listaFenergEq;

                                    AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regUnidad);

                                    listaUnidadesTermo.Add(regUnidad);
                                }
                                else
                                {
                                    List<EqEquipoDTO> listaEqEspecial = listaEqXCentral.Where(x => regModo.ListaEquicodi.Contains(x.Equicodi)).ToList();

                                    foreach (var regEquipo in listaEqEspecial)
                                    {
                                        EqEquipoDTO regEspecial = (EqEquipoDTO)regEquipo.Clone();

                                        GetValorDecimalFromListaGrupoVal(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, listaPeEsp, out decimal? valor, out DateTime? fechaVigencia);
                                        GetValorDecimalFromListaGrupoVal(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, listaPminEsp, out decimal? valor3, out DateTime? fechaVigencia3);
                                        GetValorDecimalFromListaGrupoVal2(fechaFin, regModo.Grupocodi, regEspecial.Equicodi, ConstantesIndisponibilidades.ConcepcodiRendimiento, listaRendEsp, out decimal? valorRend, out DateTime? fechaVigenciaRend);

                                        #region Caso CT Caña Brava
                                        if (incluirCTCaniaBrava)
                                        {
                                            if (regModo.Grupocodi == 575)
                                            {
                                                if (regEquipo.Equicodi == 20524)
                                                {
                                                    var regModoCTCaniaBravaG1 = listaGrupoModo.Find(x => x.Grupocodi == 573);
                                                    valor = regModoCTCaniaBravaG1.Potencia;
                                                    fechaVigencia = regModoCTCaniaBravaG1.FechaVigencia;
                                                }
                                                if (regEquipo.Equicodi == 20523)
                                                {
                                                    var regModoCTCaniaBravaG2 = listaGrupoModo.Find(x => x.Grupocodi == 574);
                                                    valor = regModoCTCaniaBravaG2.Potencia;
                                                    fechaVigencia = regModoCTCaniaBravaG2.FechaVigencia;
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Caso CT Talara
                                        if (incluirCTCaniaBrava)
                                        {
                                            if (regModo.Grupocodi == 3449)
                                            {
                                                if (regEquipo.Equicodi == 22384)
                                                {
                                                    var regModoCTTalaraTV1 = listaGrupoModo.Find(x => x.Grupocodi == 3385);
                                                    valor = regModoCTTalaraTV1.Potencia;
                                                    fechaVigencia = regModoCTTalaraTV1.FechaVigencia;
                                                }
                                                if (regEquipo.Equicodi == 22385)
                                                {
                                                    var regModoCTTalaraTV2 = listaGrupoModo.Find(x => x.Grupocodi == 3386);
                                                    valor = regModoCTTalaraTV2.Potencia;
                                                    fechaVigencia = regModoCTTalaraTV2.FechaVigencia;
                                                }
                                            }
                                        }
                                        #endregion

                                        #region Caso CT Oquendo
                                        if (incluirCTCaniaBrava)
                                        {
                                            if (regModo.Grupocodi == 3424)
                                            {
                                                if (regEquipo.Equicodi == 22510)
                                                {
                                                    var regModoCTOquendoTV1 = listaGrupoModo.Find(x => x.Grupocodi == 3418);
                                                    valor = regModoCTOquendoTV1.Potencia;
                                                    fechaVigencia = regModoCTOquendoTV1.FechaVigencia;
                                                }
                                                if (regEquipo.Equicodi == 11897)
                                                {
                                                    var regModoCTOquendoTG1 = listaGrupoModo.Find(x => x.Grupocodi == 298);
                                                    valor = regModoCTOquendoTG1.Potencia;
                                                    fechaVigencia = regModoCTOquendoTG1.FechaVigencia;
                                                }
                                            }
                                        }
                                        #endregion

                                        regEspecial.Pe = valor;
                                        regEspecial.FechaVigencia = fechaVigencia;
                                        regEspecial.Pmin = valor3;
                                        regEspecial.Rendimiento = valorRend;
                                        regEspecial.FechaVigenciaRendimiento = fechaVigenciaRend;
                                        regEspecial.Grupocodi = regModo.Grupocodi;
                                        regEspecial.Gruponomb = regModo.Gruponomb;
                                        regEspecial.Grupopadre = regModo.Grupopadre ?? 0;
                                        regEspecial.Gruporeservafria = regModo.Gruporeservafria;
                                        regEspecial.Gruponodoenergetico = regModo.Gruponodoenergetico;
                                        regEspecial.Grupotipocogen = regModo.Grupotipocogen;
                                        regEspecial.EsUnidadModoEspecial = true;

                                        List<PrGrupoDTO> listaGrupoModoXEq = listaGrupoModoXCentral.Where(x => x.ListaEquicodi.Any(y => y == regEquipo.Equicodi)).OrderByDescending(x => x.Potencia).ToList();
                                        List<SiFuenteenergiaDTO> listaFenergEq = listaGrupoModoXEq.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                                .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                                        regEspecial.ListaFuenteEnergia = listaFenergEq;

                                        AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regEspecial);

                                        if (valor <= 0 || fechaVigencia == null)
                                            listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Potencia efectiva." });

                                        if (valorRend <= 0 || fechaVigenciaRend == null)
                                            listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La unidad [" + regEspecial.Equicodi + "," + regEspecial.Equiabrev + "] del modo de operación " + regEspecial.Gruponomb + "  no tiene datos de Rendimiento." });

                                        listaUnidadesTermo.Add(regEspecial);
                                    }

                                }
                            }

                            //quitar a las unidades de la lista general
                            if (regModo.Grupocodi != 3424) listaEquicodiXCentral = listaEquicodiXCentral.Where(x => !regModo.ListaEquicodi.Contains(x)).ToList();
                        }
                    }
                }
                else
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Unidad de Generación", Descripcion = "La Central " + regCentral.Equinomb + " no tiene asociado un modo de operación, las unidades no serán tomadas en cuenta." });
                }
            }

            //quedarse con las especiales
            listaUnidadesTermo = listaUnidadesTermo.Where(x => x.EsUnidadModoEspecial).ToList();

            listaCentralTermoOut = listaEqCentral.Where(y => listaUnidadesTermo.Select(x => x.Equipadre).Contains(y.Equipadre)).ToList();
            listaUnidadesTermoOut = listaUnidadesTermo.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ToList();
        }

        /// <summary>
        /// Equipos termicos utilizados en el pr31
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaEquiposTermicos"></param>
        /// <param name="listaAllGrupoModo"></param>
        /// <param name="listaAllGrupo"></param>
        public void ListarUnidadTermicoPR31(DateTime fechaIni, DateTime fechaFin, out List<EqEquipoDTO> listaEquiposTermicos
                                                , out List<PrGrupoDTO> listaAllGrupoModo, out List<PrGrupoDTO> listaAllGrupo)
        {
            var listaMsj = new List<ResultadoValidacionAplicativo>();

            //Lista de grupos y Modos de operación con operación comercial
            List<PrGrupoDTO> listaGrupo = ListarGrupoValido();

            //listar todos los equipos y centrales que tienen operación comercial
            listaEquiposTermicos = this.ListarEquipoOpComercial(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica, out List<ResultadoValidacionAplicativo> listaMsjEq);
            List<EqEquipoDTO> listaEqGen = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico).ToList();
            List<EqEquipoDTO> listaEqCentral = listaEquiposTermicos.Where(x => x.Famcodi == ConstantesHorasOperacion.IdTipoTermica).ToList();
            listaMsj.AddRange(listaMsjEq);

            //
            this.ListarModoOperacionActivosPe(fechaIni, fechaFin, out List<PrGrupoDTO> listaGrupoModo, out List<ResultadoValidacionAplicativo> listaMsjModo);
            listaMsj.AddRange(listaMsjModo);

            //
            listaGrupo = listaGrupo.Where(x => x.Catecodi != (int)ConstantesMigraciones.Catecodi.ModoOperacionTermico).ToList();
            listaGrupo.AddRange(listaGrupoModo);

            listaGrupoModo = SetearEquiposToModoOperacionXApp(-1, listaGrupoModo, listaGrupo, listaEqCentral, listaEqGen);

            //outputs
            listaAllGrupoModo = listaGrupoModo;
            listaAllGrupo = listaGrupo;
        }

        private List<EqEquipoDTO> AgregarUnidadesModoCicloSimple(List<EqEquipoDTO> listaUnidadPrincipal, List<PrGrupoDTO> listaModo, List<EqEquipoDTO> listaEqGen)
        {
            List<EqEquipoDTO> listaCSAdicional = new List<EqEquipoDTO>();

            List<SiFuenteenergiaDTO> listaFuenteEnergia = FactorySic.GetSiFuenteenergiaRepository().List();

            foreach (var reg in listaUnidadPrincipal)
            {
                if (reg.TieneCicloComb
                    && reg.ListaEquicodi.Count > 1
                    //&& ((reg.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas && reg.ListaEquicodi.Count > 2)
                    //|| (reg.Fenergcodi != ConstantesPR5ReportesServicio.FenergcodiGas && reg.ListaEquicodi.Count > 1))
                    //&& reg.Equipadre != 290
                    )
                {
                    int fenergcodi = reg.Fenergcodi;
                    List<PrGrupoDTO> listaGrupoModoXCentral = listaModo.Where(x => x.Equipadre == reg.Equipadre && x.TieneModoCicloSimple && x.Fenergcodi == fenergcodi).OrderByDescending(x => x.Potencia).ToList();

                    foreach (var equicodi in reg.ListaEquicodi)
                    {
                        PrGrupoDTO regModo = listaGrupoModoXCentral.FirstOrDefault(x => x.ListaEquicodi.Contains(equicodi));

                        if (listaUnidadPrincipal.Find(x => x.Equicodi == equicodi && x.Fenergcodi == fenergcodi) == null && regModo != null)
                        {
                            EqEquipoDTO regEquipo = listaEqGen.Find(x => x.Equicodi == regModo.ListaEquicodi.First());

                            EqEquipoDTO regUnidad = (EqEquipoDTO)regEquipo.Clone();
                            regUnidad.TieneCalculoCS = true;
                            regUnidad.Pe = regModo.Potencia;
                            regUnidad.Pmin = regModo.PotenciaMinima;
                            regUnidad.FechaVigencia = regModo.FechaVigencia;
                            regUnidad.Rendimiento = regModo.Rendimiento;
                            regUnidad.FechaVigenciaRendimiento = regModo.FechaVigenciaRendimiento;
                            regUnidad.Rsf = regModo.RsfDefecto;
                            regUnidad.FechaVigenciaRsf = regModo.FechaVigenciaRsfDefecto;
                            regUnidad.Grupocodi = regModo.Grupocodi;
                            regUnidad.Gruponomb = regModo.Gruponomb;
                            regUnidad.Grupopadre = regModo.Grupopadre ?? 0;
                            regUnidad.Gruporeservafria = regModo.Gruporeservafria;
                            regUnidad.Gruponodoenergetico = regModo.Gruponodoenergetico;
                            regUnidad.Grupotipocogen = regModo.Grupotipocogen;

                            List<PrGrupoDTO> listaGrupoModoXEq = listaGrupoModoXCentral.Where(x => x.ListaEquicodi.All(y => y == regEquipo.Equicodi)).OrderByDescending(x => x.Potencia).ToList();
                            List<SiFuenteenergiaDTO> listaFenergEq = listaGrupoModoXEq.Where(x => x.Fenergcodi > 0).GroupBy(x => x.Fenergcodi)
                                                    .Select(x => new SiFuenteenergiaDTO() { Fenergcodi = x.Key.Value, Fenergnomb = x.First().Fenergnomb }).ToList();
                            regUnidad.ListaFuenteEnergia = listaFenergEq;

                            AsignarNombreYequicodiYFuenteEnergia(listaFuenteEnergia, regModo, regUnidad);

                            listaCSAdicional.Add(regUnidad);

                        }
                    }
                }
            }
            listaUnidadPrincipal.AddRange(listaCSAdicional);

            return listaUnidadPrincipal;
        }

        private List<EqEquipoDTO> AgregarUnidadesCombustibleSecundario(List<EqEquipoDTO> listaUnidad, List<PrGrupoDTO> listaModo, List<EqEquipoDTO> listaEqGen)
        {
            List<EqEquipoDTO> listaSec = new List<EqEquipoDTO>();

            foreach (var reg in listaUnidad)
            {
                if (reg.Equipadre == 1214)
                { }
                var listaSecTmp = INDAppServicio.ListarUnidadSecundaria(reg, listaModo, listaEqGen);
                listaSec.AddRange(listaSecTmp);
            }

            listaUnidad.AddRange(listaSec);

            return listaUnidad;
        }

        /// <summary>
        /// Setear la lista de Equipos que tienen cada modo de operación
        /// </summary>
        /// <param name="listaGrupoModo"></param>
        /// <param name="listaAllGrupo"></param>
        /// <param name="listaEqCentral"></param>
        /// <param name="listaEqGen"></param>
        /// <returns></returns>
        public static List<PrGrupoDTO> SetearEquiposToModoOperacion(List<PrGrupoDTO> listaGrupoModo, List<PrGrupoDTO> listaAllGrupo, List<EqEquipoDTO> listaEqCentral, List<EqEquipoDTO> listaEqGen)
        {
            return SetearEquiposToModoOperacionXApp(ConstantesIndisponibilidades.AppPR25, listaGrupoModo, listaAllGrupo, listaEqCentral, listaEqGen);
        }

        /// <summary>
        /// Setear la lista de Equipos que tienen cada modo de operación
        /// </summary>
        /// <param name="listaGrupoModo"></param>
        /// <param name="listaAllGrupo"></param>
        /// <param name="listaEqCentral"></param>
        /// <param name="listaEqGen"></param>
        /// <returns></returns>
        public static List<PrGrupoDTO> SetearEquiposToModoOperacionXApp(int app, List<PrGrupoDTO> listaGrupoModo, List<PrGrupoDTO> listaAllGrupo, List<EqEquipoDTO> listaEqCentral, List<EqEquipoDTO> listaEqGen)
        {
            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///1. Filtrar los modos de operación Ciclo Combinado válidos segun las unidades que tienen operacion comercial
            List<PrGrupoDTO> listaGrupoValidos = new List<PrGrupoDTO>();

            //la tabla guarda la relación entre modo cc y grupo de despacho
            List<PrGrupoDTO> listaRelacionGrupoCC = FactorySic.GetPrGrupoRepository().ListaPrGrupoCC();

            List<int> listaGrupocodisCC = listaRelacionGrupoCC.Select(x => x.Grupocodicc).Distinct().ToList();
            List<PrGrupoDTO> listaGrupoCC = listaGrupoModo.Where(x => listaGrupocodisCC.Contains(x.Grupocodi)).ToList();
            List<PrGrupoDTO> listaGrupoNoCCAdicional = new List<PrGrupoDTO>();

            foreach (var regCC in listaGrupoCC)
            {
                if (regCC.Grupocodi == 605)
                { }

                List<int> grupocodisDespachoXcc = listaRelacionGrupoCC.Where(x => x.Grupocodicc == regCC.Grupocodi).Select(x => x.Grupocodidet).ToList();

                var listaGrupoDespachoXModo = listaAllGrupo.Where(x => grupocodisDespachoXcc.Contains(x.Grupocodi)).ToList();
                var listaEqGenXModo = listaEqGen.Where(x => grupocodisDespachoXcc.Contains(x.Grupocodi ?? 0)).OrderBy(x => x.Equiabrev).ToList();

                //1. solo considerar a los modos de operación ciclo combinados que tienen operación comercial
                //2. La tabla pr_grupocc antes guardaba por cada GRUPOCODICC un mínimos de dos GRUPOCODIDET (regla del módulo Horas de operación)
                //   Se identificó que select * from pr_grupocc where GRUPOCODICC = 304;--LFLORES TG1 GAS tiene un solo registro en esa tabla, esto omite la regla 
                if (grupocodisDespachoXcc.Count > 1 && grupocodisDespachoXcc.Count == listaEqGenXModo.Count)
                {
                    int equipadre = listaEqGenXModo.First().Equipadre ?? 0;
                    if (equipadre > 0)
                    {
                        EqEquipoDTO regCentral = listaEqCentral.Find(x => x.Equicodi == equipadre);
                        List<EqEquipoDTO> listaEqXCentral = listaEqGen.Where(x => x.Equipadre == equipadre).ToList();

                        regCC.Equipadre = equipadre;
                        regCC.Central = regCentral.Central;
                        regCC.CentralOsi = regCentral.Osinergcodi;

                        regCC.ListaGrupocodiDespacho = grupocodisDespachoXcc;
                        regCC.ListaGruponombDespacho = listaGrupoDespachoXModo.Select(x => x.Grupoabrev).OrderBy(x => x).ToList();

                        regCC.ListaEquicodi = listaEqGenXModo.Select(x => x.Equicodi).ToList();
                        regCC.ListaEquiabrev = listaEqGenXModo.Select(x => x.Equiabrev).ToList();

                        regCC.TieneModoCicloCombinado = true;

                        listaGrupoValidos.Add(regCC);
                    }
                }
                else
                {
                    //agregar a los no CC los que estan en CC pero no cumplen la regla de tener minimo dos unidades para cada ciclo combinado
                    listaGrupoNoCCAdicional.Add(regCC);
                }
            }

            //quitar modos
            var listaGrupoModoSinCC = listaGrupoModo.Where(x => !listaGrupocodisCC.Contains(x.Grupocodi)).ToList();

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///2. Filtrar los modos de operación Ciclo Simple y especiales

            List<int> grupocodisDespachoCandidatoCS = listaEqGen.Where(x => x.Grupocodi > 0).Select(x => x.Grupocodi.Value).Distinct().ToList();
            List<PrGrupoDTO> listaGrupoNoCC = listaGrupoModoSinCC.Where(x => grupocodisDespachoCandidatoCS.Contains(x.Grupopadre ?? 0)).ToList();
            listaGrupoNoCC.AddRange(listaGrupoNoCCAdicional);

            //
            foreach (var regNoCC in listaGrupoNoCC)
            {
                if (regNoCC.Grupocodi == 705)
                { }

                int grupocodidespacho = regNoCC.Grupopadre ?? 0;
                List<EqEquipoDTO> listaEqXGrupoDespacho = listaEqGen.Where(x => x.Grupocodi == grupocodidespacho).ToList();

                #region Caso Especial CT Caña Brava

                if (regNoCC.Grupocodi == 573)  //CANA BRAVA TV1 - BAGAZO	
                {
                    listaEqXGrupoDespacho = listaEqGen.Where(x => x.Equicodi == 20524).ToList();
                }

                if (regNoCC.Grupocodi == 574)  //CANA BRAVA TV2 - BAGAZO	
                {
                    listaEqXGrupoDespacho = listaEqGen.Where(x => x.Equicodi == 20523).ToList();
                }

                #endregion

                #region Caso Especial REFINERIA TALARA

                if (regNoCC.Grupocodi == 3385)
                {
                    listaEqXGrupoDespacho = listaEqGen.Where(x => x.Equicodi == 22384).ToList();
                }

                if (regNoCC.Grupocodi == 3386)
                {
                    listaEqXGrupoDespacho = listaEqGen.Where(x => x.Equicodi == 22385).ToList();
                }

                #endregion

                #region Caso Especial OQUENDO

                if (regNoCC.Grupocodi == 3418)
                {
                    listaEqXGrupoDespacho = listaEqGen.Where(x => x.Equicodi == 22510).ToList();
                }

                if (regNoCC.Grupocodi == 298 || regNoCC.Grupocodi == 352)
                {
                    listaEqXGrupoDespacho = listaEqGen.Where(x => x.Equicodi == 11897).ToList();
                }

                #endregion

                PrGrupoDTO regGrupoDespacho = listaAllGrupo.Find(x => x.Grupocodi == grupocodidespacho);

                int equipadre = 0;

                if (listaEqXGrupoDespacho.Count > 0)
                {
                    equipadre = listaEqXGrupoDespacho.First().Equipadre ?? 0;
                }

                if (equipadre > 0)
                {
                    EqEquipoDTO regCentral = listaEqCentral.Find(x => x.Equicodi == equipadre);

                    regNoCC.Equipadre = equipadre;
                    regNoCC.Central = regCentral.Central;
                    regNoCC.CentralOsi = regCentral.Osinergcodi;

                    regNoCC.ListaGrupocodiDespacho = new List<int>() { grupocodidespacho };
                    regNoCC.ListaGruponombDespacho = new List<string>() { regGrupoDespacho.Grupoabrev };

                    regNoCC.ListaEquicodi = listaEqXGrupoDespacho.Select(x => x.Equicodi).ToList();
                    regNoCC.ListaEquiabrev = listaEqXGrupoDespacho.Select(x => x.Equiabrev).ToList();

                    //Ciclo simple
                    if (listaEqXGrupoDespacho.Count == 1)
                    {
                        regNoCC.TieneModoCicloSimple = true;
                    }


                    //Modo de operación Especial
                    if (listaEqXGrupoDespacho.Count > 1)
                    {
                        regNoCC.FlagModoEspecial = ConstantesAppServicio.SI;
                        regNoCC.TieneModoEspecial = true;

                        if (ConstantesIndisponibilidades.AppPR25 == app)
                        {
                            if (regNoCC.FlagDividirModoEnEquipos == ConstantesAppServicio.SI)
                            {
                                regNoCC.TieneModoEspecial = true;
                            }
                            else
                            {
                                regNoCC.TieneModoCicloCombinado = true;
                            }
                        }
                        else
                        {
                            if (regNoCC.Grupocodi == 575 || regNoCC.Grupocodi == 3449 || regNoCC.Grupocodi == 3424)
                            {
                                regNoCC.TieneModoCicloCombinado = true;
                            }
                        }
                    }

                    listaGrupoValidos.Add(regNoCC);
                }
            }

            //formatear data
            foreach (var reg in listaGrupoValidos)
            {
                reg.Grupoabrev = !string.IsNullOrEmpty(reg.Grupoabrev) ? reg.Grupoabrev.Trim() : string.Empty;
                reg.Gruponomb = !string.IsNullOrEmpty(reg.Gruponomb) ? reg.Gruponomb.Trim() : string.Empty;
                reg.Grupocomb = !string.IsNullOrEmpty(reg.Grupocomb) ? reg.Grupocomb.Trim() : string.Empty;
                reg.EsUnModoXCentral = listaEqGen.Where(x => x.Equipadre == reg.Equipadre).Count() == 1;

                if (ConstantesPR5ReportesServicio.FenergcodiResidual == reg.Fenergcodi)
                {
                    if (reg.Grupocomb == "R500")
                    {
                        reg.Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiR500;
                        reg.Fenergnomb = "RESIDUAL R500";
                    }
                    if (reg.Grupocomb == "R6")
                    {
                        reg.Fenergcodi = ConstantesPR5ReportesServicio.FenergcodiR6;
                        reg.Fenergnomb = "RESIDUAL R6";
                    }
                }

                if (ConstantesPR5ReportesServicio.FenergcodiBagazo == reg.Fenergcodi
                    || ConstantesPR5ReportesServicio.FenergcodiBiogas == reg.Fenergcodi)
                    reg.Grupocomb = reg.Fenergnomb;
            }

            return listaGrupoValidos;
        }

        public static List<PrGrupoDTO> SetearEquiposToGrupoDespacho(List<PrGrupoDTO> listaAllGrupo, List<EqEquipoDTO> listaEqCentral, List<EqEquipoDTO> listaEqGen)
        {
            List<PrGrupoDTO> listaGrupoDespacho = listaAllGrupo.Where(x => x.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoTermico).ToList();
            List<PrGrupoDTO> listaGrupoModo = listaAllGrupo.Where(x => x.Catecodi == (int)ConstantesMigraciones.Catecodi.ModoOperacionTermico).ToList();

            //obtener grupos de despacho utilizados en los modos de operación válidos
            List<int> listaGrupocodi = new List<int>();
            foreach (var reg in listaGrupoModo)
            { listaGrupocodi.AddRange(reg.ListaGrupocodiDespacho); }
            listaGrupocodi = listaGrupocodi.Distinct().ToList();
            listaGrupoDespacho = listaGrupoDespacho.Where(x => listaGrupocodi.Contains(x.Grupocodi)).ToList();

            //asignar central al grupo de despacho
            foreach (var regGrupo in listaGrupoDespacho)
            {
                regGrupo.ListaEquicodi = listaEqGen.Where(x => x.Grupocodi == regGrupo.Grupocodi).Select(x => x.Equicodi).Distinct().ToList();

                var regCentral = listaEqCentral.Find(x => x.Grupocodi == regGrupo.Grupocodi);
                if (regCentral != null)
                {
                    regGrupo.Equipadre = regCentral.Equicodi;
                    regGrupo.Central = regCentral.Equinomb;
                }
                else
                {
                    var regEq = listaEqGen.Find(x => x.Grupocodi == regGrupo.Grupocodi);
                    if (regEq != null)
                    {

                        regGrupo.Equipadre = regEq.Equipadre ?? 0;
                        regGrupo.Central = (listaEqCentral.Find(x => x.Equicodi == regEq.Equipadre)).Equinomb;
                    }
                    else
                    { }
                }
            }

            return listaGrupoDespacho;
        }

        public List<PrGrupoDTO> ListarModoOperacionFicticio(List<PrGrupoDTO> listaGrupoModo, DateTime fechaFin)
        {
            //Potencia Efectiva de las unidades del modo especial
            List<PrGrupoEquipoValDTO> listaEquipoValEsp = ListarPrGrupoEquipoValHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotEfectiva + "," + ConstantesIndisponibilidades.ConcepcodiRendimiento + "," + ConstantesIndisponibilidades.ConcepcodiRendimientoSI);
            var listaPeEsp = listaEquipoValEsp.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva).ToList();
            var listaRendEsp = listaEquipoValEsp.Where(x => ConstantesIndisponibilidades.ListaConcepcodiRend.Contains(x.Concepcodi)).ToList();

            //incluir modos de operación FICTICIOS para Callao
            int icorrGrupo = ConstantesIndisponibilidades.CorrelativoInicial;

            List<PrGrupoDTO> listaFict = new List<PrGrupoDTO>();
            foreach (var regNoCC in listaGrupoModo)
            {
                //callao o caña brava
                if (regNoCC.TieneModoEspecial && regNoCC.TieneModoCicloCombinado)
                {
                    var listaModoXCentral = listaGrupoModo.Where(x => x.Equipadre == regNoCC.Equipadre).ToList();
                    if (regNoCC.ListaEquicodi.Count > 0 && listaModoXCentral.Count <= 1)
                    {
                        for (int i = 0; i < regNoCC.ListaEquicodi.Count; i++)
                        {
                            PrGrupoDTO regGrupoEspFict = (PrGrupoDTO)regNoCC.Clone();
                            regGrupoEspFict.Grupocodi = icorrGrupo;
                            regGrupoEspFict.ListaEquicodi = new List<int>() { regNoCC.ListaEquicodi[i] };
                            regGrupoEspFict.ListaEquiabrev = new List<string>() { regNoCC.ListaEquiabrev[i] };

                            GetValorDecimalFromListaGrupoVal(fechaFin, regNoCC.Grupocodi, regNoCC.ListaEquicodi[i], listaPeEsp, out decimal? valor, out DateTime? fechaVigencia);
                            GetValorDecimalFromListaGrupoVal2(fechaFin, regNoCC.Grupocodi, regNoCC.ListaEquicodi[i], ConstantesIndisponibilidades.ConcepcodiRendimiento, listaRendEsp, out decimal? valorRend, out DateTime? fechaVigenciaRend);
                            regGrupoEspFict.Potencia = valor;
                            regGrupoEspFict.FechaVigencia = fechaVigencia;
                            regGrupoEspFict.Rendimiento = valorRend;
                            regGrupoEspFict.FechaVigenciaRendimiento = fechaVigenciaRend;

                            listaFict.Add(regGrupoEspFict);
                            icorrGrupo++;
                        }
                    }
                }
            }

            return listaFict;
        }

        /// <summary>
        /// Lista de unidades de generación (par equipo , modo de operación) que pertenecen al Nodo Energetica y Reserva Fria
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListaUnidadNodoEnergORsrvFria(DateTime fechaIni, DateTime fechaFin)
        {
            int aplicativo = ConstantesIndisponibilidades.AppPF;
            ListarUnidadTermicoOpComercial(aplicativo, fechaIni, fechaFin, out List<EqEquipoDTO> listaUnidadSiOpComercial, out List<EqEquipoDTO> listaEqSiOpComercial, out List<ResultadoValidacionAplicativo> listaMsj);

            //para diferenciar si es incremental utilizar la propiedad Grupoincremental == 1

            ////las unidades del Nodo energetico que generan el incremental deben tener potencia efectiva igual a cero
            //List<int> listaGrupocodiNodoEnergSinPe = listaUnidadSiOpComercial.Where(x => x.Gruponodoenergetico == 1 && x.Grupoincremental == 1 && x.Grupopadre > 0).Select(x => x.Grupopadre).Distinct().ToList();

            //foreach (var grupocodi in listaGrupocodiNodoEnergSinPe)
            //{
            //    EqEquipoDTO regEq = listaUnidadSiOpComercial.Find(x => x.Grupocodi == grupocodi);
            //    regEq.Pe = null;
            //}

            return listaUnidadSiOpComercial.Where(x => x.Gruponodoenergetico == 1 || x.Gruporeservafria == 1).ToList();
        }

        /// <summary>
        /// Listado historico de empresa termico
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaTermicoHistorico()
        {
            List<SiEmpresaDTO> empresas = this.servIEOD.ListarEmpresasxTipoEquipos(ConstantesHorasOperacion.IdTipoTermica.ToString())
                                            .OrderBy(x => x.Emprnomb).ToList();

            return empresas;
        }

        public static int GrupocodiCentralFromListaGrupoPRIE(int grupocodi, List<PrGrupoDTO> listaGrupo)
        {
            int grupocentral = 0;

            PrGrupoDTO gr = listaGrupo.Find(x => x.Grupocodi == grupocodi);
            if (gr != null)
            {
                if (gr.Catecodi == (int)ConstantesMigraciones.Catecodi.ModoOperacionTermico)
                {
                    PrGrupoDTO grp = listaGrupo.Find(x => x.Grupocodi == gr.Grupopadre);

                    if (grp != null && grp.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoTermico)
                    {
                        grupocentral = grp.Grupopadre ?? 0;
                    }
                }

                if (gr.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoTermico || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoHidraulico || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoEolico || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoSolar)
                {
                    grupocentral = gr.Grupopadre ?? 0;
                }

                if (gr.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralTermico || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralHidro || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralEolica || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralSolar)
                {
                    grupocentral = gr.Grupocodi;
                }

                /*if (gr.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralEolica || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoEolico || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralSolar || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoSolar)
                {
                    grupocentral = gr.Grupocodi;
                }*/
            }

            return grupocentral > 0 ? grupocentral : -1000;
        }

        public static int GrupocodiCentralFromListaGrupo(int grupocodi, List<PrGrupoDTO> listaGrupo)
        {
            int grupocentral = 0;

            PrGrupoDTO gr = listaGrupo.Find(x => x.Grupocodi == grupocodi);
            if (gr != null)
            {
                if (gr.Catecodi == (int)ConstantesMigraciones.Catecodi.ModoOperacionTermico)
                {
                    PrGrupoDTO grp = listaGrupo.Find(x => x.Grupocodi == gr.Grupopadre);

                    if (grp != null && grp.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoTermico)
                    {
                        grupocentral = grp.Grupopadre ?? 0;
                    }
                }

                if (gr.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoTermico || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.GrupoHidraulico)
                {
                    grupocentral = gr.Grupopadre ?? 0;
                }

                if (gr.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralTermico || gr.Catecodi == (int)ConstantesMigraciones.Catecodi.CentralHidro)
                {
                    grupocentral = gr.Grupocodi;
                }
            }

            return grupocentral > 0 ? grupocentral : -1000;
        }

        /// <summary>
        /// Asigna estado de combustible a un equipo
        /// </summary>
        /// <param name="listaFuenteEnergia"></param>
        /// <param name="prGrupo"></param>
        /// <param name="equipo"></param>
        private void AsignarNombreYequicodiYFuenteEnergia(List<SiFuenteenergiaDTO> listaFuenteEnergia, PrGrupoDTO prGrupo, EqEquipoDTO regUnidad)
        {
            var fuenteEner = listaFuenteEnergia.Find(x => x.Fenergcodi == (prGrupo.Fenergcodi ?? -1));

            regUnidad.Fenergcodi = prGrupo.Fenergcodi ?? -1;
            regUnidad.Fenergnomb = fuenteEner?.Fenergnomb;
            regUnidad.Estcomcodi = fuenteEner?.Estcomcodi;
            regUnidad.Grupocomb = prGrupo.Grupocomb.Replace(@" ", @" + "); ;

            var nombreUnidad = string.Empty;
            List<int> listaEquicodi = new List<int>();

            if (prGrupo.TieneModoCicloCombinado && prGrupo.Fenergcodi == ConstantesPR5ReportesServicio.FenergcodiGas) //es ciclo combinado
            {
                //int posComb = prGrupo.Gruponomb.IndexOf("CCOMB");

                //string nombre = prGrupo.Gruponomb.Substring(posComb + 5, prGrupo.Gruponomb.Length - (posComb + 5));
                //nombre = nombre.Replace(@" - GAS", @" & TV");
                //nombre = nombre.Replace(@"&", @"+");
                //nombre = nombre.Replace(@" ", @"");
                //nombre = nombre.Replace(@"F.DIRECTO", @" CCOMB F.DIREC.");

                nombreUnidad = string.Join("+", prGrupo.ListaEquiabrev.Select(x => x));

                if (prGrupo.Gruponomb.IndexOf("DIREC") >= 0)
                    nombreUnidad += " CCOMB GAS F.DIREC.";
                else
                    nombreUnidad += " CCOMB GAS";

                listaEquicodi = prGrupo.ListaEquicodi;
            }
            else
            {
                if (regUnidad.EsUnidadModoEspecial)
                {
                    nombreUnidad = regUnidad.Equiabrev + " " + regUnidad.Grupocomb;
                    listaEquicodi = new List<int>() { regUnidad.Equicodi };
                }
                else
                {
                    nombreUnidad = string.Join(" + ", prGrupo.ListaEquiabrev.Select(x => x)) + " " + regUnidad.Grupocomb;
                    listaEquicodi = prGrupo.ListaEquicodi;
                }
            }

            regUnidad.ListaEquicodi = listaEquicodi;
            regUnidad.UnidadnombPR25 = nombreUnidad;
        }

        #endregion

        #region Insumo: Modos de Operación Térmicos

        /// <summary>
        /// Lista de modos de operación con potencia efectiva
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public void ListarModoOperacionPe(DateTime fechaIni, DateTime fechaFin, out List<PrGrupoDTO> listaFinal, out List<ResultadoValidacionAplicativo> listaMsj, bool flagSoloDatVigente = false)
        {
            listaFinal = servMigr.ListarModoOperacionTienenOpComercial(fechaIni, fechaFin, flagSoloDatVigente);
            listaMsj = new List<ResultadoValidacionAplicativo>();

            //Potencia Efectiva de los modos de operación            
            List<PrGrupodatDTO> listaDatModo = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotEfectiva + "," + ConstantesIndisponibilidades.ConcepcodiPotMinima
                                                                                    + "," + ConstantesIndisponibilidades.ConcepcodiRendimiento + "," + ConstantesIndisponibilidades.ConcepcodiRendimientoSI
                                                                                    + "," + ConstantesIndisponibilidades.ConcepcodiPotFirme, fechaIni, flagSoloDatVigente);

            var listaPeModo = listaDatModo.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva).ToList();
            var listaPminModo = listaDatModo.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotMinima).ToList();
            var listaRendModo = listaDatModo.Where(x => ConstantesIndisponibilidades.ListaConcepcodiRend.Contains(x.Concepcodi)).ToList();
            List<PrGrupodatDTO> listaPfModo = listaDatModo.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotFirme).ToList();

            //Tiempo mínimo de operación
            List<PrGrupodatDTO> listaTminop = ListarPrGrupodatHistoricoEnteroValido(ConstantesIndisponibilidades.ConcepcodiTminop.ToString(), fechaIni, flagSoloDatVigente);

            //tiempo minimo de arranque 
            List<PrGrupodatDTO> listaTminModo = ListarPrGrupodatHistoricoEnteroValido(ConstantesIndisponibilidades.ConcepcodiTminarranque.ToString(), fechaIni, flagSoloDatVigente);

            //flag de modo especial, se desagrega el modo en unidades o no       
            List<PrGrupodatDTO> listaDividirUnidadModoEsp = ListarPrGrupodatHistoricoVigente(ConstantesIndisponibilidades.ConcepcodiDividirUnidadModoEsp.ToString(), fechaIni, flagSoloDatVigente);

            foreach (var regGrupo in listaFinal)
            {
                if (regGrupo.Grupocodi == 271)
                { }

                //setear potencia efectiva
                GetValorDecimalFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaPeModo, out decimal? valor, out DateTime? fechaVigencia);
                regGrupo.Potencia = valor;
                regGrupo.FechaVigencia = fechaVigencia;
                regGrupo.TieneModificacionPropiedad = fechaIni <= fechaVigencia && fechaVigencia <= fechaFin;

                if (valor.GetValueOrDefault(0) <= 0 || fechaVigencia == null)
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Modos de Operación", Descripcion = "[" + regGrupo.Grupocodi + "," + regGrupo.Gruponomb + "] no tiene datos de Potencia efectiva." });
                }

                //setear potencia minima
                GetValorDecimalFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaPminModo, out decimal? valorPmin, out DateTime? fechaVigenciaPmin);
                regGrupo.PotenciaMinima = valorPmin;
                regGrupo.FechaVigenciaPmin = fechaVigenciaPmin;

                if (valorPmin.GetValueOrDefault(0) <= 0 || fechaVigenciaPmin == null)
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Modos de Operación", Descripcion = "[" + regGrupo.Grupocodi + "," + regGrupo.Gruponomb + "] no tiene datos de Potencia mínima." });
                }

                //setear si el modo se divide en unidades
                GetFlagFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaDividirUnidadModoEsp, out string valorFlag, out DateTime? fechaVigenciaFlag);
                regGrupo.FlagDividirModoEnEquipos = valorFlag;

                //setear potencia firme
                GetValorDecimalFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaPfModo, out decimal? valorPf, out DateTime? fechaVigenciaFirme);
                regGrupo.PotenciaFirme = valorPf;
                regGrupo.FechaVigenciaFirme = fechaVigenciaFirme;

                //rendimiento
                GetValorDecimalFromListaGrupoDat2(fechaFin, regGrupo.Grupocodi, ConstantesIndisponibilidades.ConcepcodiRendimiento, listaRendModo, out decimal? valorRend, out DateTime? fechaVigenciaRend);
                regGrupo.Rendimiento = valorRend;
                regGrupo.FechaVigenciaRendimiento = fechaVigenciaRend;
                regGrupo.TieneModificacionPropiedadRendimiento = fechaIni <= fechaVigenciaRend && fechaVigenciaRend <= fechaFin;

                if (valorRend.GetValueOrDefault(0) <= 0 || fechaVigenciaRend == null)
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Modos de Operación", Descripcion = "[" + regGrupo.Grupocodi + "," + regGrupo.Gruponomb + "] no tiene datos de Rendimiento." });
                }

                //tiempo minimo de operación
                GetEnteroFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaTminop, out int tminop, out DateTime? fechaVigTmin);
                regGrupo.Tminoperacion = tminop;
                if (tminop <= 0)
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Modos de Operación", Descripcion = "[" + regGrupo.Grupocodi + "," + regGrupo.Gruponomb + "] no tiene datos de Tiempo mínimo de operación." });
                }

                //tiempo minimo de arranque
                GetEnteroFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaTminModo, out int valorTmin, out DateTime? fechaVigenciaTmin);
                regGrupo.TminArranque = valorTmin;

                if (valorTmin <= 0)
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Modos de Operación", Descripcion = "[" + regGrupo.Grupocodi + "," + regGrupo.Gruponomb + "] no tiene datos de Tiempo mínimo de arranque." });
                }
            }

            listaFinal = listaFinal.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenByDescending(x => x.Potencia).ThenBy(x => x.Gruponomb).ToList();
        }

        /// <summary>
        /// Lista de modos de operación activos y en proyecto con potencia efectiva
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public void ListarModoOperacionActivosPe(DateTime fechaIni, DateTime fechaFin, out List<PrGrupoDTO> listaFinal, out List<ResultadoValidacionAplicativo> listaMsj, bool flagSoloDatVigente = false)
        {
            listaFinal = servMigr.ListarModoOperacionTienenOpComercial(fechaIni, fechaFin, flagSoloDatVigente);

            listaMsj = new List<ResultadoValidacionAplicativo>();

            //Potencia Efectiva de los modos de operación            
            List<PrGrupodatDTO> listaDatModo = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiPotEfectiva + "," + ConstantesIndisponibilidades.ConcepcodiPotMinima
                                                                        + "," + ConstantesIndisponibilidades.ConcepcodiRendimiento + "," + ConstantesIndisponibilidades.ConcepcodiRendimientoSI + "," + ConstantesIndisponibilidades.ConcepcodiValorRsfDefecto);

            var listaPeModo = listaDatModo.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotEfectiva).ToList();
            var listaPminModo = listaDatModo.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiPotMinima).ToList();
            var listaRendModo = listaDatModo.Where(x => ConstantesIndisponibilidades.ListaConcepcodiRend.Contains(x.Concepcodi)).ToList();
            var listaRsf = listaDatModo.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiValorRsfDefecto).ToList();

            //flag de modo especial, se desagrega el modo en unidades o no       
            List<PrGrupodatDTO> listaDividirUnidadModoEsp = ListarPrGrupodatHistoricoVigente(ConstantesIndisponibilidades.ConcepcodiDividirUnidadModoEsp.ToString(), fechaIni, flagSoloDatVigente);

            foreach (var regGrupo in listaFinal)
            {
                //setear potencia efectiva
                GetValorDecimalFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaPeModo, out decimal? valor, out DateTime? fechaVigencia);
                regGrupo.Potencia = valor;
                regGrupo.FechaVigencia = fechaVigencia;
                regGrupo.TieneModificacionPropiedad = fechaIni <= fechaVigencia && fechaVigencia <= fechaFin;

                if (valor.GetValueOrDefault(0) <= 0 || fechaVigencia == null)
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Modos de Operación", Descripcion = "[" + regGrupo.Grupocodi + "," + regGrupo.Gruponomb + "] no tiene datos de Potencia efectiva." });
                }

                //potencia minima
                GetValorDecimalFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaPminModo, out decimal? valorMin, out DateTime? fechaVigenciaMin);
                regGrupo.PotenciaMinima = valorMin;

                if (valorMin.GetValueOrDefault(0) <= 0 || fechaVigenciaMin == null)
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Modos de Operación", Descripcion = "[" + regGrupo.Grupocodi + "," + regGrupo.Gruponomb + "] no tiene datos de Potencia mínima." });
                }

                //rendimiento
                GetValorDecimalFromListaGrupoDat2(fechaFin, regGrupo.Grupocodi, ConstantesIndisponibilidades.ConcepcodiRendimiento, listaRendModo, out decimal? valorRend, out DateTime? fechaVigenciaRend);
                regGrupo.Rendimiento = valorRend;
                regGrupo.FechaVigenciaRendimiento = fechaVigenciaRend;
                regGrupo.TieneModificacionPropiedadRendimiento = fechaIni <= fechaVigenciaRend && fechaVigenciaRend <= fechaFin;

                //Valor Rsf por defecto
                GetValorDecimalFromListaGrupoDat(fechaFin, regGrupo.Grupocodi, listaRsf, out decimal? valorRsf, out DateTime? fechaVigenciaRsf);
                regGrupo.RsfDefecto = valorRsf;
                regGrupo.FechaVigenciaRsfDefecto = fechaVigenciaRsf;

                //if (valorRend.GetValueOrDefault(0) <= 0 || fechaVigenciaRend == null)
                //{
                //    listaMsj.Add(new ResultadoValidacionAplicativo() { TipoFuenteDatoDesc = "Modos de Operación", Descripcion = "[" + regGrupo.Grupocodi + "," + regGrupo.Gruponomb + "] no tiene datos de Rendimiento." });
                //}
            }

            listaFinal = listaFinal.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenByDescending(x => x.Potencia).ThenBy(x => x.Gruponomb).ToList();
        }

        #endregion

        #region Insumo: TTIE

        /// <summary>
        /// Lista de empresas 
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresasCuadroXTipogeneracion(int tgenercodi, DateTime fechaIni, DateTime fechaFin, string centralIntregrante)
        {
            List<SiEmpresaDTO> listaEmpresas = new List<SiEmpresaDTO>();
            switch (tgenercodi)
            {
                case ConstantesIndisponibilidades.TgenercodiTermoelectrica:
                    this.servIEOD.ListarEquiposVigentes(fechaIni, fechaFin, ConstantesHorasOperacion.IdGeneradorTemoelectrico.ToString(), centralIntregrante, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, new List<int>()
                  , out listaEmpresas, out List<EqEquipoDTO> listaEquipo1, out List<EqEquipoDTO> listaEquipoTTIE1);
                    break;
                case ConstantesIndisponibilidades.TgenercodiHidroelectrica:
                    this.servIEOD.ListarEquiposVigentes(fechaIni, fechaFin, ConstantesHorasOperacion.IdGeneradorHidroelectrico.ToString(), centralIntregrante, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, new List<int>()
                  , out listaEmpresas, out List<EqEquipoDTO> listaEquipo2, out List<EqEquipoDTO> listaEquipoTTIE2);
                    break;
            }

            return listaEmpresas;
        }

        /// <summary>
        /// Lista de centrales
        /// </summary>
        /// <param name="idEmpresa"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarCentralesXTipogeneracion(int tgenercodi, DateTime fechaIni, DateTime fechaFin, string centralIntregrante, string empresa, string central)
        {
            List<EqEquipoDTO> listaCentrales = new List<EqEquipoDTO>();
            List<EqEquipoDTO> listaUnidades = new List<EqEquipoDTO>();
            switch (tgenercodi)
            {
                case ConstantesIndisponibilidades.TgenercodiTermoelectrica:
                    this.servIEOD.ListarEquiposVigentes(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica.ToString(), centralIntregrante, empresa, central, new List<int>()
                  , out List<SiEmpresaDTO> listaEmpresas1, out listaCentrales, out List<EqEquipoDTO> listaEquipoTTIE1);

                    this.servIEOD.ListarEquiposVigentes(fechaIni, fechaFin, ConstantesHorasOperacion.IdGeneradorTemoelectrico.ToString(), centralIntregrante, empresa, central, new List<int>()
                  , out List<SiEmpresaDTO> listaEmpresas11, out listaUnidades, out List<EqEquipoDTO> listaEquipoTTIE11);
                    break;
                case ConstantesIndisponibilidades.TgenercodiHidroelectrica:
                    this.servIEOD.ListarEquiposVigentes(fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoHidraulica.ToString(), centralIntregrante, empresa, central, new List<int>()
                  , out List<SiEmpresaDTO> listaEmpresas2, out listaCentrales, out List<EqEquipoDTO> listaEquipoTTIE2);

                    this.servIEOD.ListarEquiposVigentes(fechaIni, fechaFin, ConstantesHorasOperacion.IdGeneradorHidroelectrico.ToString(), centralIntregrante, empresa, central, new List<int>()
                  , out List<SiEmpresaDTO> listaEmpresas21, out listaUnidades, out List<EqEquipoDTO> listaEquipoTTIE21);
                    break;
            }

            List<int> listaEquipadre = listaUnidades.Select(x => x.Equipadre.Value).Distinct().ToList();
            listaCentrales = listaCentrales.Where(x => listaEquipadre.Contains(x.Equicodi)).ToList(); //solo centrales que tengan unidades

            foreach (var reg in listaCentrales)
            {
                reg.Tgenernomb = reg.Tgenercodi == ConstantesIndisponibilidades.TgenercodiTermoelectrica ? "Térmico" : "Hidráulico";
            }

            return listaCentrales;
        }

        /// <summary>
        /// Trae las unidades de generacion
        /// </summary>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarUnidadesGenXTipogeneracion(int tgenercodi, DateTime fechaIni, DateTime fechaFin, string centralIntregrante, string empresa, string central)
        {
            List<EqEquipoDTO> listaEquipo = new List<EqEquipoDTO>();
            switch (tgenercodi)
            {
                case ConstantesIndisponibilidades.TgenercodiTermoelectrica:
                    this.servIEOD.ListarEquiposVigentes(fechaIni, fechaFin, ConstantesHorasOperacion.IdGeneradorTemoelectrico.ToString(), centralIntregrante, empresa, central, new List<int>()
                  , out List<SiEmpresaDTO> listaEmpresas1, out listaEquipo, out List<EqEquipoDTO> listaEquipoTTIE1);
                    break;
                case ConstantesIndisponibilidades.TgenercodiHidroelectrica:
                    this.servIEOD.ListarEquiposVigentes(fechaIni, fechaFin, ConstantesHorasOperacion.IdGeneradorHidroelectrico.ToString(), centralIntregrante, empresa, central, new List<int>()
                  , out List<SiEmpresaDTO> listaEmpresas2, out listaEquipo, out List<EqEquipoDTO> listaEquipoTTIE2);
                    break;
            }

            foreach (var reg in listaEquipo)
            {
                reg.Tgenernomb = reg.Tgenercodi == ConstantesIndisponibilidades.TgenercodiTermoelectrica ? "Térmico" : "Hidráulico";
            }

            return listaEquipo.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Gruponomb).ToList();
        }

        #endregion

        #region Insumo: Mantenimientos

        /// <summary>
        /// Listar los mantenimientos de la tabla IND_MANTTO
        /// </summary>
        /// <param name="idsTipoMantenimiento"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="indispo"></param>
        /// <param name="tiposEmpresa"></param>
        /// <param name="empresas"></param>
        /// <param name="idsTipoEquipo"></param>
        /// <param name="indInterrupcion"></param>
        /// <param name="idstipoMantto"></param>
        /// <param name="nroPagina"></param>
        /// <param name="nroFilas"></param>
        /// <param name="tipoFuenteDato"></param>
        /// <returns></returns>
        public List<EveManttoDTO> BuscarMantenimientos(string idsTipoMantenimiento, DateTime fechaInicio, DateTime fechaFin, string indispo
            , string tiposEmpresa, string empresas, string idsTipoEquipo, string indInterrupcion, string idstipoMantto, string flagFiltro, int cuadro, out List<ResultadoValidacionAplicativo> listaVal)

        {
            listaVal = new List<ResultadoValidacionAplicativo>();

            if (tiposEmpresa != ConstantesAppServicio.ParametroDefecto && empresas == ConstantesAppServicio.ParametroDefecto)
            {
                List<int> idsEmpresas = this.ListarEmpresasPorTipo(tiposEmpresa).Select(x => x.Emprcodi).ToList();
                empresas = string.Join<int>(ConstantesAppServicio.CaracterComa.ToString(), idsEmpresas);
            }

            if (string.IsNullOrEmpty(idsTipoMantenimiento)) idsTipoMantenimiento = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(tiposEmpresa)) tiposEmpresa = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(empresas)) empresas = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idsTipoEquipo)) idsTipoEquipo = ConstantesAppServicio.ParametroNulo;
            if (string.IsNullOrEmpty(idstipoMantto)) idstipoMantto = ConstantesAppServicio.ParametroNulo;

            bool filtrarEveMantto = flagFiltro == "1" || flagFiltro == "2" || flagFiltro == "3";
            bool filtrarIndMantto = flagFiltro == "1" || flagFiltro == "2" || flagFiltro == "4";
            bool filtrarEvento = flagFiltro == "1" || flagFiltro == "2" || flagFiltro == "5";
            bool filtrarRestricOp = flagFiltro == "1" || flagFiltro == "2" || flagFiltro == "6";

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            ///FUENTE 01: EVE_MANTTO. Base de datos Manttos del COES
            List<EveManttoDTO> listaEveMantto = filtrarEveMantto ? FactorySic.GetEveManttoRepository().ObtenerReporteMantenimientos(idsTipoMantenimiento, fechaInicio, fechaFin.AddDays(1),
                            indispo, tiposEmpresa, empresas, idsTipoEquipo, indInterrupcion, idstipoMantto) : new List<EveManttoDTO>();

            foreach (var reg in listaEveMantto)
            {
                reg.FuenteDatosDesc = ConstantesIndisponibilidades.FuenteEveManttoDesc;
                reg.FuenteDatos = ConstantesIndisponibilidades.FuenteEveMantto;

                reg.Indmanusarencalculo = ConstantesAppServicio.SI;

                if ((cuadro != -1 && cuadro != ConstantesIndisponibilidades.ReportePR25Cuadro2)
                    && (reg.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial || reg.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial))
                {
                    reg.Indmanusarencalculo = ConstantesAppServicio.NO;
                }

                //centrales de cogeneracion
                if (reg.Grupotipocogen == ConstantesAppServicio.SI)
                {
                    reg.Indmanusarencalculo = reg.Evenasocproc;
                }

                //validar si el registro no excede más de un día
                if (reg.Evenfin > reg.Evenini.Value.Date.AddDays(1))
                {
                    reg.Indmanusarencalculo = ConstantesAppServicio.NO;
                    listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, TipoFuenteDatoDesc = "Mantenimiento", Descripcion = GetDescripcionMantto(reg, true), Accion = "No será tomado en cuenta" });
                }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// FUENTE 02: IND_MANTTO. Modificaciones de las Manttos que solo aplican para el aplicativo PR25
            List<IndManttoDTO> listaIndMantto = filtrarIndMantto ? FactorySic.GetIndManttoRepository().ObtenerReporteMantenimientos(idsTipoMantenimiento, fechaInicio, fechaFin,
                        indispo, tiposEmpresa, empresas, idsTipoEquipo, indInterrupcion, idstipoMantto) : new List<IndManttoDTO>();

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// FUENTE 03: IND_EVENTO. Modificaciones de las Manttos que solo aplican para el aplicativo PR25
            List<IndEventoDTO> listaIndEvento = filtrarEvento ? FactorySic.GetIndEventoRepository().GetByCriteria(fechaInicio, fechaFin.AddDays(1)
                            , empresas, idsTipoEquipo, idstipoMantto) : new List<IndEventoDTO>();

            foreach (var reg in listaIndEvento)
            {
                reg.FuenteDatosDesc = ConstantesIndisponibilidades.FuenteEventoDesc;
                reg.FuenteDatos = ConstantesIndisponibilidades.FuenteEvento;

                reg.Ieventusarencalculo = ConstantesAppServicio.NO;

                if (reg.Ieventtipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal || reg.Ieventtipoindisp == ConstantesIndisponibilidades.INDProgramadaTotal)
                    reg.Ieventusarencalculo = ConstantesAppServicio.SI;

                if ((cuadro == -1 || cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
                    && (reg.Ieventtipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial || reg.Ieventtipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial))
                {
                    reg.Ieventusarencalculo = ConstantesAppServicio.SI;
                }

                //validar si el registro no excede más de un día
                if (reg.Evenfin > reg.Evenini.Date.AddDays(1))
                {
                    reg.Ieventusarencalculo = ConstantesAppServicio.NO;
                    listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, TipoFuenteDatoDesc = "Evento", Descripcion = GetDescripcionMantto(GetEveManttoFromIndEvento(reg), true), Accion = "No será tomado en cuenta" });
                }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// FUENTE 04: IND_IEODCUADRO. Modificaciones de las Manttos que solo aplican para el aplicativo PR25
            List<IndIeodcuadroDTO> listaIndIeodcuadro = filtrarRestricOp ? FactorySic.GetIndIeodcuadroRepository().GetByCriteria(fechaInicio, fechaFin.AddDays(1)
                            , empresas, idsTipoEquipo, idstipoMantto) : new List<IndIeodcuadroDTO>();

            foreach (var reg in listaIndIeodcuadro)
            {
                reg.FuenteDatosDesc = ConstantesIndisponibilidades.FuenteRestricDesc;
                reg.FuenteDatos = ConstantesIndisponibilidades.FuenteRestric;

                reg.Iiccousarencalculo = ConstantesAppServicio.NO;

                if (reg.Iiccotipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal || reg.Iiccotipoindisp == ConstantesIndisponibilidades.INDProgramadaTotal)
                    reg.Iiccousarencalculo = ConstantesAppServicio.SI;

                if ((cuadro == -1 || cuadro == ConstantesIndisponibilidades.ReportePR25Cuadro2)
                    && (reg.Iiccotipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial || reg.Iiccotipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial))
                {
                    reg.Iiccousarencalculo = ConstantesAppServicio.SI;
                }

                //validar si el registro no excede más de un día
                if (reg.Ichorfin > reg.Ichorini.Date.AddDays(1))
                {
                    reg.Iiccousarencalculo = ConstantesAppServicio.NO;
                    listaVal.Add(new ResultadoValidacionAplicativo() { TipoResultado = 2, TipoFuenteDatoDesc = "Restricción Operativa", Descripcion = GetDescripcionMantto(GetEveManttoFromIndIeodcuadro(reg), true), Accion = "No será tomado en cuenta" });
                }
            }

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            /// Aplicar filtros

            List<EveManttoDTO> listaEveManttoPR25 = new List<EveManttoDTO>();

            if (flagFiltro == "1")//Todo
            {
                //IND_MANTTO solo mostrar Registros con estado Activo
                listaIndMantto = listaIndMantto.Where(x => x.Indmanestado == ConstantesAppServicio.Activo).ToList();

                //EVE_MANTTO 1ero quitar a los mantenimientos que fueron modificados/eliminados y cuyos cambios se guardan en el PR25 y no en la BD Mantto del COES
                List<int> listaManttocodiAQuitar = listaIndMantto.Where(x => x.Manttocodi.GetValueOrDefault(0) != 0).Select(x => x.Manttocodi.Value).Distinct().ToList();
                listaEveMantto = listaEveMantto.Where(x => !listaManttocodiAQuitar.Contains(x.Manttocodi)).ToList();

                listaEveManttoPR25.AddRange(listaIndMantto.Select(x => this.GetEveManttoFromIndMantto(x)).ToList());

                //IND_EVENTO
                listaIndEvento = listaIndEvento.Where(x => x.Ieventestado == ConstantesAppServicio.Activo).ToList();
                listaEveManttoPR25.AddRange(listaIndEvento.Select(x => this.GetEveManttoFromIndEvento(x)).ToList());

                //IND_IEODCUADRO
                listaIndIeodcuadro = listaIndIeodcuadro.Where(x => x.Iiccoestado == ConstantesAppServicio.Activo).ToList();
                listaEveManttoPR25.AddRange(listaIndIeodcuadro.Select(x => this.GetEveManttoFromIndIeodcuadro(x)).ToList());
            }

            if (flagFiltro == "2") //Utilizados en PR25
            {
                //IND_MANTTO solo mostrar Registros con estado Activo
                listaIndMantto = listaIndMantto.Where(x => x.Indmanestado == ConstantesAppServicio.Activo).ToList();

                //EVE_MANTTO 1ero quitar a los mantenimientos que fueron modificados/eliminados y cuyos cambios se guardan en el PR25 y no en la BD Mantto del COES
                List<int> listaManttocodiAQuitar = listaIndMantto.Where(x => x.Manttocodi.GetValueOrDefault(0) != 0).Select(x => x.Manttocodi.Value).Distinct().ToList();
                listaEveMantto = listaEveMantto.Where(x => !listaManttocodiAQuitar.Contains(x.Manttocodi)).ToList();

                //EVE_MANTTO Omitir a los mantenimientos que no serán parte de los calculos del PR25
                listaIndMantto = listaIndMantto.Where(x => x.Indmantipoaccion != ConstantesIndisponibilidades.TipoAccionIXM).ToList();

                //EVE_MANTTO quedarse con los registros que son usados en los calculos del PR25
                listaEveMantto = listaEveMantto.Where(x => x.Indmanusarencalculo == ConstantesAppServicio.SI).ToList();
                listaIndMantto = listaIndMantto.Where(x => x.Indmanusarencalculo == ConstantesAppServicio.SI).ToList();

                listaEveManttoPR25.AddRange(listaIndMantto.Select(x => this.GetEveManttoFromIndMantto(x)).ToList());

                //IND_EVENTO
                listaIndEvento = listaIndEvento.Where(x => x.Ieventestado == ConstantesAppServicio.Activo && x.Ieventestado == ConstantesAppServicio.SI).ToList();
                listaEveManttoPR25.AddRange(listaIndEvento.Select(x => this.GetEveManttoFromIndEvento(x)).ToList());

                //IND_IEODCUADRO
                listaIndIeodcuadro = listaIndIeodcuadro.Where(x => x.Iiccoestado == ConstantesAppServicio.Activo && x.Iiccousarencalculo == ConstantesAppServicio.SI).ToList();
                listaEveManttoPR25.AddRange(listaIndIeodcuadro.Select(x => this.GetEveManttoFromIndIeodcuadro(x)).ToList());
            }

            if (flagFiltro == "4")
            {
                listaEveManttoPR25 = listaIndMantto.Select(x => this.GetEveManttoFromIndMantto(x)).ToList();
            }
            if (flagFiltro == "5")
            {
                listaEveManttoPR25 = listaIndEvento.Select(x => this.GetEveManttoFromIndEvento(x)).ToList();
            }
            if (flagFiltro == "6")
            {
                listaEveManttoPR25 = listaIndIeodcuadro.Select(x => this.GetEveManttoFromIndIeodcuadro(x)).ToList();
            }

            List<EveManttoDTO> lista = new List<EveManttoDTO>();
            lista.AddRange(listaEveMantto);
            lista.AddRange(listaEveManttoPR25);
            lista = lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areadesc).ThenBy(x => x.Evenini).ThenBy(x => x.Evenclasecodi).ThenBy(x => x.Equiabrev).ToList();

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

            //Formatear campos html
            foreach (var reg in lista)
            {
                reg.Eventipoindisp = !string.IsNullOrEmpty(reg.Eventipoindisp) ? reg.Eventipoindisp : "-1";
                reg.LastdateDesc = reg.Lastdate != null ? reg.Lastdate.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
                reg.EvenindispoDesc = reg.Evenindispo == ConstantesIndisponibilidades.ES ? "E/S" : (reg.Evenindispo == ConstantesIndisponibilidades.FS ? "F/S" : string.Empty);
                reg.Tipoevenabrev = reg.Tipoevencodi > 0 ? reg.Tipoevenabrev : string.Empty;
                reg.IndmanusarencalculoDesc = reg.Indmanusarencalculo == ConstantesAppServicio.SI ? ConstantesAppServicio.SIDesc : ConstantesAppServicio.NODesc;
            }

            return lista;
        }

        /// <summary>
        /// Genera reporte formato Html de Listado de Manttos
        /// </summary>
        /// <param name="tienePermisoEditar"></param>
        /// <param name="tiposMantenimiento"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tiposEmpresa"></param>
        /// <param name="empresas"></param>
        /// <param name="tiposEquipo"></param>
        /// <param name="flagFiltro"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        public string GenerarReporteManttosHtml(bool tienePermisoEditar, string flagFiltro, string url, List<EveManttoDTO> listaManttos)
        {
            string html = string.Empty;
            int tipoHtml = 0;
            if (flagFiltro == "1" && tienePermisoEditar)
            {
                tipoHtml = 1;
                html = GetHtmlTodoMantto(listaManttos, url);
            }
            else
                html = GetHtmlFiltro(listaManttos);

            html += string.Format("<div> <input type='hidden' id='tipoRptHtml' value='{0}' /> </div>", tipoHtml);

            return html;
        }

        public List<EveManttoDTO> ObtenerListaManttos(string tiposMantenimiento, DateTime fechaInicio, DateTime fechaFin, string tiposEmpresa, string empresas, string tiposEquipo, string flagFiltro)
        {
            return this.BuscarMantenimientos(tiposMantenimiento, fechaInicio, fechaFin, ConstantesAppServicio.ParametroDefecto
                 , tiposEmpresa, empresas, tiposEquipo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto, flagFiltro, -1, out List<ResultadoValidacionAplicativo> listaMensaje);
        }

        /// <summary>
        /// Obtiene tabla Html de todo Mantto
        /// </summary>
        /// <param name="listaManttos"></param>
        /// <param name="url"></param>
        /// <returns></returns>
        private string GetHtmlTodoMantto(List<EveManttoDTO> listaManttos, string url)
        {
            StringBuilder strHtml = new StringBuilder();
            string strHtmlDivHidden = string.Empty;

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_mantto_todo'>
                            <thead>
                                <tr>
                                    <th></th>
                                    <th>Omitir</th>
                                    <th>Incluir</th>

                                    <th>PR25</th>
                                    <th>Mantto</th>
                                    <th>Disp.</th>
                                    <th>Tipo</th>

                                    <th>N.d.</th>
                                    <th>P.T.</th>
                                    <th>P.P.</th>
                                    <th>F.T.</th>
                                    <th>F.P.</th>
                                    <th>Pr (MW)</th>
                                    <th>Indust.</th>

                                    <th>Omitir <br/>7 Días</th>
                                    <th>Omitir <br/>Ex. Pr</th>

                                    <th>Empresa</th>
                                    <th>Ubicación</th>
                                    <th>Equipo</th>

                                    <th>Inicio</th>
                                    <th>Final</th>
                                    <th>Descripción</th>
                                    <th>PROG</th>
                                </tr>
                            </thead>
                            <tbody>
            ";
            strHtml.Append(head);

            int i = 0;
            foreach (var item in listaManttos)
            {
                string idFila = item.Manttocodi != 0 || item.Indmancodi > 0 ? "eve_" + i : "_";
                string claseReg = ConstantesIndisponibilidades.EvenclasecodiEjec == item.Evenclasecodi ? "item_ejec" : "item_prog";
                string claseFila = item.Indmanusarencalculo == ConstantesAppServicio.SI ? "cumple_pr25" : "no_cumple_pr25";

                string claseNoEve = string.Empty;
                switch (item.Indmantipoaccion)
                {
                    case ConstantesIndisponibilidades.TipoAccionIXM: claseNoEve = "eve_delete"; break;
                    case ConstantesIndisponibilidades.TipoAccionIN: claseNoEve = "ind_reg"; break;
                    case ConstantesIndisponibilidades.TipoAccionIUM: claseNoEve = "eve_update"; break;
                }
                claseReg = item.Indmantipoaccion == ConstantesIndisponibilidades.TipoAccionIXM ? string.Empty : claseReg;

                string tdCogeneracion = "";
                string tdAccion = string.Empty;
                string tdOmitir = string.Empty;
                string tdIncluir = string.Empty;

                if (!(item.Evencodi > 0 || item.Iccodi > 0))
                {
                    tdAccion = string.Format(@"
                            <a class='edt_mantto' href='JavaScript:editarMantto({1}, {2}, {3})'>
                                <img src='{0}Content/Images/btn-edit.png' alt='Editar registro' title='Editar registro'>
                            </a>
                            <input type='hidden' id='id_eve_{4}' value='{3}' />
                            <input type='hidden' id='id_ind_{4}' value='{2}' />
                            ", url, item.FuenteDatos, item.Indmancodi, item.Manttocodi, idFila);
                    if (item.Indmantipoaccion == ConstantesIndisponibilidades.TipoAccionIXM)
                    {
                        tdIncluir = string.Format(@"
                            <input type='checkbox' id='check_incluir_{0}' />
                            ", idFila);
                    }
                    else
                    {
                        tdOmitir = string.Format(@"
                            <input type='checkbox' id='check_excluir_{0}' />
                            ", idFila);
                    }

                    tdAccion += string.Format(@"
                            <a href='JavaScript:verHistorialMantto({1}, {2})' title='Historial Manttos'> 
                                <img src='{0}Content/Images/envios.png' /> 
                            </a>
                            <input type='hidden' id='id_eve_{3}' value='{2}' />
                            <input type='hidden' id='id_ind_{3}' value='{1}' />
                            ", url, item.Indmancodi, item.Manttocodi, idFila);
                }

                if (item.Evencodi > 0) item.Evenclaseabrev = "EVENTO";
                if (item.Iccodi > 0) item.Evenclaseabrev = "R.OP.";

                if (item.Grupotipocogen == ConstantesAppServicio.SI)
                {
                    tdCogeneracion = string.Format(@"
                            <input type='checkbox' id='check_asocproc_{0}' {1} />
                            ", idFila, item.Evenasocproc == ConstantesAppServicio.SI ? "checked" : string.Empty);
                }

                string tdOmitir7d = string.Empty;
                if (item.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg)
                {
                    tdOmitir7d = string.Format(@"
                            <input type='checkbox' id='check_omitir7d_{0}' {1} />
                            ", idFila, item.Indmanomitir7d == ConstantesAppServicio.SI ? "checked" : string.Empty);
                }
                string tdOmitirExcesoPr = string.Empty;
                if (item.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiProg
                    && (item.Famcodi == ConstantesHorasOperacion.IdTipoTermica || item.Famcodi == ConstantesHorasOperacion.IdGeneradorTemoelectrico))
                {
                    tdOmitirExcesoPr = string.Format(@"
                            <input type='checkbox' id='check_omitirexcesopr_{0}' {1} />
                            ", idFila, item.Indmanomitirexcesopr == ConstantesAppServicio.SI ? "checked" : string.Empty);
                }

                string filaTr1 = item.Evencodi > 0 || item.Iccodi > 0 ?
                                string.Format(@"
                                    <tr class='{0}'>
                                        <td class='btnFilaAcciones'>{1}</td>
                                        <td class='btnFilaAcciones'>{12}</td>
                                        <td class='btnFilaAcciones'>{13}</td>

                                        <td style='text-align: center;'>{2}</td>
                                        <td style='text-align: center;'>{3}</td>
                                        <td style='{14}'>{4}</td>
                                        <td style='{14}'>{5}</td>

                                        <td></td>
                                        <td>{6}</td>
                                        <td>{7}</td>
                                        <td>{8}</td>
                                        <td>{9}</td>
                                        <td>{10}</td>
                                        <td>{11}</td>
                                "
                                , claseFila + " " + claseReg + " " + claseNoEve, tdAccion, item.IndmanusarencalculoDesc, item.Evenclaseabrev, item.EvenindispoDesc, item.Tipoevenabrev

                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaTotal ? "<input type='radio' checked='checked' disabled /> " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial ? "<input type='radio' checked='checked' disabled /> " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal ? "<input type='radio' checked='checked' disabled /> " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial ? "<input type='radio' checked='checked' disabled /> " : string.Empty
                                , item.Evenpr
                                , item.Grupotipocogen == ConstantesAppServicio.SI ? "<input type='checkbox' checked='checked' disabled /> " : string.Empty
                                , string.Empty
                                , string.Empty
                                , item.Evenindispo == ConstantesIndisponibilidades.ES ? "color: #08d1ff" : "")

                                //editable EVE_mantto
                                : (tdIncluir == "" ?
                                string.Format(@"
                                    <tr class='{0} fila_dato' id='tr_{6}'>
                                        <td class='btnFilaAcciones'>{1}</td>
                                        <td class='btnFilaAcciones'>{15}</td>
                                        <td class='btnFilaAcciones'>{16}</td>

                                        <td style='text-align: center;'>{2}</td>
                                        <td style='text-align: center;'>{3}</td>
                                        <td style='{17}'>{4}</td>
                                        <td style='{17}'>{5}</td>

                                        <td><input type='radio' name='rbtnIndisponibilidad_{6}' value='-1' {7}  /></td>
                                        <td><input type='radio' name='rbtnIndisponibilidad_{6}' value='PT' {8}  /></td>
                                        <td><input type='radio' name='rbtnIndisponibilidad_{6}' value='PP' {9}  /></td>
                                        <td><input type='radio' name='rbtnIndisponibilidad_{6}' value='FT' {10} /></td>
                                        <td><input type='radio' name='rbtnIndisponibilidad_{6}' value='FP' {11} /></td>
                                        <td><input type='text' id='txt_prmw_{6}' value='{12}' style='width: 46px; {13}' /></td>
                                        <td>{14}</td>
                                        <td>{18}</td>
                                        <td>{19}</td>
                                "
                                , claseFila + " " + claseReg + " " + claseNoEve, tdAccion, item.IndmanusarencalculoDesc, item.Evenclaseabrev, item.EvenindispoDesc, item.Tipoevenabrev

                                , idFila
                                , item.Eventipoindisp == ConstantesAppServicio.ParametroDefecto || item.Eventipoindisp == null ? " checked='checked' " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaTotal ? " checked='checked' " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial ? " checked='checked' " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal ? " checked='checked' " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial ? " checked='checked' " : string.Empty
                                , item.Evenpr
                                , (item.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial || item.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial) ? string.Empty : "display: none"
                                , tdCogeneracion
                                , tdOmitir
                                , tdIncluir
                                , item.Evenindispo == ConstantesIndisponibilidades.ES ? "color: #08d1ff" : "" //17
                                , tdOmitir7d
                                , tdOmitirExcesoPr
                                )

                                ://editable EVE_mantto (incluir) DISABLED
                                    string.Format(@"
                                    <tr class='{0} fila_dato' id='tr_{14}'>
                                        <td class='btnFilaAcciones'>{1}</td>
                                        <td class='btnFilaAcciones'>{12}</td>
                                        <td class='btnFilaAcciones'>{13}</td>

                                        <td style='text-align: center;'>{2}</td>
                                        <td style='text-align: center;'>{3}</td>
                                        <td style='{15}'>{4}</td>
                                        <td style='{15}'>{5}</td>

                                        <td> </td>
                                        <td>{6}</td>
                                        <td>{7}</td>
                                        <td>{8}</td>
                                        <td>{9}</td>
                                        <td>{10}</td>
                                        <td>{11}</td>
                                        <td>{16}</td>
                                        <td>{17}</td>
                                "
                                , claseFila + " " + claseReg + " " + claseNoEve, tdAccion, item.IndmanusarencalculoDesc, item.Evenclaseabrev, item.EvenindispoDesc, item.Tipoevenabrev

                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaTotal ? "<input type='radio' checked='checked' disabled /> " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial ? "<input type='radio' checked='checked' disabled /> " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaTotal ? "<input type='radio' checked='checked' disabled /> " : string.Empty
                                , item.Eventipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial ? "<input type='radio' checked='checked' disabled /> " : string.Empty
                                , item.Evenpr
                                , item.Evenasocproc == ConstantesAppServicio.SI ? "<input type='checkbox' checked='checked' disabled /> " : string.Empty
                                , tdOmitir
                                , tdIncluir
                                , idFila
                                , item.Evenindispo == ConstantesIndisponibilidades.ES ? "color: #08d1ff" : "" //15
                                , tdOmitir7d
                                , tdOmitirExcesoPr)
                                );

                string filaTr2 = string.Format(@"
                                        <td>{0}</td>
                                        <td>{1}</td>
                                        <td>{2}</td>

                                        <td>{3}</td>
                                        <td>{4}</td>
                                        <td>{5}</td>
                                        <td>{6}</td>
                                    </tr>"
                                , item.Emprnomb.ToString(), item.Areadesc, item.Equiabrev
                                , item.Evenini.Value.ToString(ConstantesAppServicio.FormatoFechaFull), item.Evenfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull), item.Evendescrip, item.Eventipoprog
                                //, item.Lastuser, item.LastdateDesc
                                );

                strHtml.Append(filaTr1);
                strHtml.Append(filaTr2);
                if (i == 0)
                    strHtmlDivHidden = string.Format("<div> <input type='hidden' id='hdFirstRowRadio' value='{0},{1}'> </div>", idFila, item.Eventipoindisp);
                i++;
            }

            string foot = @"
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <th id='foot_mantto_1'>Ubicación</th>
                                    <th id='foot_mantto_2'>Equipo</th>

                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
            ";
            strHtml.Append(foot);

            strHtml.Append(strHtmlDivHidden);

            return strHtml.ToString();
        }

        /// <summary>
        /// Obtiene tabla Html de Filtro Mantto
        /// </summary>
        /// <param name="listaManttos"></param>
        /// <returns></returns>
        private string GetHtmlFiltro(List<EveManttoDTO> listaManttos)
        {
            StringBuilder strHtml = new StringBuilder();

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_mantto_todo'>
                            <thead>
                                <tr>
                                    <th>PR25</th>
                                    <th>Mantto</th>
                                    <th>Disp.</th>
                                    <th>Tipo</th>

                                    <th>Indisponibilidad</th>
                                    <th>Pr (MW)</th>
                                    <th>Indust.</th>

                                    <th>Empresa</th>
                                    <th>Ubicación</th>
                                    <th>Equipo</th>

                                    <th>Inicio</th>
                                    <th>Final</th>
                                    <th>Descripción</th>
                                    <th>PROG</th>
                                </tr>
                            </thead>
                            <tbody>
            ";
            strHtml.Append(head);

            foreach (var item in listaManttos)
            {
                string idFila = item.Manttocodi > 0 ? "eve_" + item.Manttocodi : "ind_" + item.Indmancodi;
                string claseReg = ConstantesIndisponibilidades.EvenclasecodiEjec == item.Evenclasecodi ? "item_ejec" : "item_prog";
                string claseFila = item.Indmanusarencalculo == ConstantesAppServicio.SI ? "cumple_pr25" : "no_cumple_pr25";

                string claseNoEve = string.Empty;
                switch (item.Indmantipoaccion)
                {
                    case ConstantesIndisponibilidades.TipoAccionIXM: claseNoEve = "eve_delete"; break;
                    case ConstantesIndisponibilidades.TipoAccionIN: claseNoEve = "ind_reg"; break;
                    case ConstantesIndisponibilidades.TipoAccionIUM: claseNoEve = "eve_update"; break;
                }
                claseReg = item.Indmantipoaccion == ConstantesIndisponibilidades.TipoAccionIXM ? string.Empty : claseReg;

                string tdCogeneracion = "";
                if (item.Grupotipocogen == ConstantesAppServicio.SI)
                {
                    tdCogeneracion = item.Evenasocproc == ConstantesAppServicio.SI ? "SÍ" : "NO";
                }

                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;'>{1}</td>
                                        <td style='text-align: center;'>{2}</td>
                                        <td>{3}</td>
                                        <td>{4}</td>

                                        <td>{5}</td>
                                        <td>{6}</td>
                                        <td>{7}</td>

                                        <td>{8}</td>
                                        <td>{9}</td>
                                        <td>{10}</td>

                                        <td>{11}</td>
                                        <td>{12}</td>
                                        <td>{13}</td>
                                        <td>{14}</td>
                                    </tr>
                                    "
                                , claseFila + " " + claseReg + " " + claseNoEve, item.IndmanusarencalculoDesc, item.Evenclaseabrev, item.EvenindispoDesc, item.Tipoevenabrev

                                , GetTipoindispDesc(item.Eventipoindisp)
                                , item.Evenpr
                                , tdCogeneracion

                                , item.Emprnomb.ToString(), item.Areadesc, item.Equiabrev
                                , item.Evenini.Value.ToString(ConstantesAppServicio.FormatoFechaFull), item.Evenfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull), item.Evendescrip, item.Eventipoprog
                                //, item.Lastuser, item.LastdateDesc
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <th id='foot_mantto_1'>Ubicación</th>
                                    <th id='foot_mantto_2'>Equipo</th>

                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
            ";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        /// <summary>
        /// Listar las fuentes de datos de Manttos
        /// </summary>
        /// <returns></returns>
        public List<FuenteDatosMantto> ListarFuenteDatosMantto()
        {
            List<FuenteDatosMantto> l = new List<FuenteDatosMantto>();
            l.Add(new FuenteDatosMantto() { Codigo = ConstantesIndisponibilidades.FuenteIndMantto, Descripcion = ConstantesIndisponibilidades.FuenteIndManttoDesc });
            l.Add(new FuenteDatosMantto() { Codigo = ConstantesIndisponibilidades.FuenteEveMantto, Descripcion = ConstantesIndisponibilidades.FuenteEveManttoDesc });

            return l;
        }
        /// <summary>
        /// Permite Guardar Ind. Mantto 
        /// </summary>
        /// <param name="idsTipoMantenimiento"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tiposEmpresa"></param>
        /// <param name="empresas"></param>
        /// <param name="idsTipoEquipo"></param>
        /// <param name="listaUpdate"></param>
        /// <param name="listaDelete"></param>
        /// <param name="observacion"></param>
        /// <param name="username"></param>
        public void GuardarCheckListaManttos(string idsTipoMantenimiento, DateTime fechaInicio, DateTime fechaFin
            , string tiposEmpresa, string empresas, string idsTipoEquipo, List<IndManttoDTO> listaUpdate, List<IndManttoDTO> listaDelete, string observacion, string username)
        {
            DateTime fechaRegistro = DateTime.Now;

            List<IndManttoDTO> listBD = FactorySic.GetIndManttoRepository().ObtenerReporteMantenimientos(idsTipoMantenimiento, fechaInicio, fechaFin,
                        ConstantesAppServicio.ParametroDefecto, tiposEmpresa, empresas, idsTipoEquipo, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);
            //listBD = listBD.Where(x => x.Indmanestado == ConstantesAppServicio.Activo).ToList();

            foreach (var item in listaUpdate)
            {
                item.Indmancomentario = observacion;

                var itemExiste = listBD.FirstOrDefault(x => x.Manttocodi == item.Manttocodi);
                if (itemExiste == null)
                {
                    //si hace un check de tipo de indisponibilidad, o check de omitir
                    if (item.Indmantipoindisp != "-1" || item.Indmanomitir7d == ConstantesAppServicio.SI || item.Indmanomitirexcesopr == ConstantesAppServicio.SI)
                    {
                        var mantto = GetIndManttoFromEveMantto(this.GetByIdEveMantto2(item.Manttocodi.Value));

                        mantto.Indmantipoindisp = item.Indmantipoindisp;
                        mantto.Indmanpr = item.Indmanpr;
                        mantto.Indmanasocproc = item.Indmanasocproc;
                        mantto.Indmanomitir7d = item.Indmanomitir7d;
                        mantto.Indmanomitirexcesopr = item.Indmanomitirexcesopr;
                        mantto.Indmancomentario = item.Indmancomentario;
                        mantto.Indmanestado = ConstantesAppServicio.Activo;
                        mantto.Indmanusarencalculo = this.EsUsadoEnCalculo(ConstantesIndisponibilidades.FuenteEveMantto, mantto.Indmantipoindisp, mantto.Grupotipocogen, mantto.Indmanasocproc, mantto.Indmanomitir7d, mantto.Indmanomitirexcesopr);
                        mantto.Indmantipoaccion = ConstantesIndisponibilidades.TipoAccionIUM;

                        mantto.Indmanusucreacion = username;
                        mantto.Indmanfeccreacion = fechaRegistro;

                        this.SaveIndMantto(mantto);
                    }
                }
                else
                {
                    itemExiste = listBD.FirstOrDefault(x => x.Manttocodi == item.Manttocodi && x.Indmanestado == ConstantesAppServicio.Activo);

                    if (itemExiste != null)
                    {
                        if ((itemExiste.Indmantipoindisp != item.Indmantipoindisp)
                            || (itemExiste.Indmanpr != item.Indmanpr)
                            || (itemExiste.Indmanasocproc != item.Indmanasocproc)
                            || (itemExiste.Indmanomitir7d != item.Indmanomitir7d)
                            || (itemExiste.Indmanomitirexcesopr != item.Indmanomitirexcesopr))
                        {
                            var obj1 = this.GetByIdIndMantto2(item.Indmancodi);

                            IndManttoDTO obj3 = (IndManttoDTO)obj1.Clone();
                            obj3.Indmantipoindisp = item.Indmantipoindisp;
                            obj3.Indmanpr = item.Indmanpr;
                            obj3.Indmanasocproc = item.Indmanasocproc;
                            obj3.Indmanomitir7d = item.Indmanomitir7d;
                            obj3.Indmanomitirexcesopr = item.Indmanomitirexcesopr;
                            obj3.Indmancomentario = item.Indmancomentario;
                            obj3.Indmanusarencalculo = ConstantesAppServicio.SI;
                            obj3.Indmanestado = ConstantesAppServicio.Activo;
                            obj3.Indmantipoaccion = ConstantesIndisponibilidades.TipoAccionIN;

                            obj3.Indmanusumodificacion = username;
                            obj3.Indmanfecmodificacion = fechaRegistro;

                            GuardarIndMantto(ConstantesIndisponibilidades.TipoAccionEditar, ConstantesIndisponibilidades.FuenteIndMantto, 1, obj3, username);
                        }
                    }
                }
            }

            foreach (var item in listaDelete)
            {
                item.Indmancomentario = observacion;

                var itemExiste = listBD.FirstOrDefault(x => x.Manttocodi == item.Manttocodi && x.Indmancodi == item.Indmancodi);
                int idFuente = itemExiste != null ? ConstantesIndisponibilidades.FuenteIndMantto : ConstantesIndisponibilidades.FuenteEveMantto;

                EliminarIndMantto(idFuente, observacion, item.TipoDelete, username, item.Indmancodi, item.Manttocodi);
            }
        }

        /// <summary>
        /// Guardar Ind. Mantto
        /// </summary>
        /// <param name="tipoAccion"></param>
        /// <param name="idFuente"></param>
        /// <param name="nroDiaReplicar"></param>
        /// <param name="objForm"></param>
        /// <param name="usuario"></param>
        public void GuardarIndMantto(int tipoAccion, int idFuente, int nroDiaReplicar, IndManttoDTO objForm, string usuario)
        {
            DateTime fechaRegistro = DateTime.Now;

            switch (tipoAccion)
            {
                case ConstantesIndisponibilidades.TipoAccionNuevo:
                    switch (idFuente)
                    {
                        case ConstantesIndisponibilidades.FuenteIndMantto:
                            List<IndManttoDTO> listamantto = new List<IndManttoDTO>();
                            EqEquipoDTO regEq = FactorySic.GetEqEquipoRepository().GetById(objForm.Equicodi);
                            //generar objeto y validaciones
                            for (int i = 0; i <= nroDiaReplicar; i++)
                            {
                                IndManttoDTO obj = new IndManttoDTO();
                                obj.Emprcodi = regEq.Emprcodi.Value;
                                obj.Manttocodi = null;
                                obj.Equicodi = regEq.Equicodi;
                                obj.Evenclasecodi = objForm.Evenclasecodi;
                                obj.Indmanfecini = objForm.Indmanfecini.AddDays(i);
                                obj.Indmanfecfin = objForm.Indmanfecfin.AddDays(i);
                                obj.Indmandescripcion = objForm.Indmandescripcion;

                                obj.Indmantipoindisp = objForm.Indmantipoindisp;
                                obj.Indmanpr = objForm.Indmanpr;
                                obj.Indmanasocproc = objForm.Indmanasocproc;
                                obj.Indmanomitir7d = objForm.Indmanomitir7d;
                                obj.Indmanomitirexcesopr = objForm.Indmanomitirexcesopr;
                                obj.Indmancomentario = objForm.Indmancomentario;
                                obj.Indmanusarencalculo = ConstantesAppServicio.SI;
                                obj.Indmanestado = ConstantesAppServicio.Activo;
                                obj.Indmantipoaccion = ConstantesIndisponibilidades.TipoAccionIN;

                                obj.Indmanusucreacion = usuario;
                                obj.Indmanfeccreacion = DateTime.Now;

                                this.ValidacionMantto(obj);
                                listamantto.Add(obj);
                            }

                            //guardar
                            foreach (var reg in listamantto)
                                this.SaveIndMantto(reg);

                            break;
                    }
                    break;
                case ConstantesIndisponibilidades.TipoAccionEditar:

                    int manttocodiEdit = objForm.Manttocodi ?? 0;
                    int indmancodiEdit = objForm.Indmancodi;

                    switch (idFuente)
                    {
                        case ConstantesIndisponibilidades.FuenteIndMantto:
                            break;
                        case ConstantesIndisponibilidades.FuenteEveMantto:

                            //Validar si la eve_mantto a editar ya existe
                            List<IndManttoDTO> listaIndByEve = this.ListarIndManttoByEveMantto(objForm.Manttocodi.ToString());
                            indmancodiEdit = listaIndByEve.Any() ? listaIndByEve.First().Indmancodi : -1;
                            break;
                    }

                    if (indmancodiEdit > 0)
                    {
                        var obj1 = this.GetByIdIndMantto2(indmancodiEdit);

                        //el registro que está en bd se cambiará a histórico
                        IndManttoDTO obj2 = (IndManttoDTO)obj1.Clone();
                        obj2.Indmanusucreacion = obj2.Indmanfecmodificacion != null ? obj2.Indmanusumodificacion : obj2.Indmanusucreacion;
                        obj2.Indmanfeccreacion = obj2.Indmanfecmodificacion != null ? obj2.Indmanfecmodificacion : obj2.Indmanfeccreacion;
                        obj2.Indmanestado = ConstantesAppServicio.Historico; //H
                        obj2.Indmancodiold = objForm.Indmancodi;
                        this.SaveIndMantto(obj2);

                        IndManttoDTO obj3 = (IndManttoDTO)obj1.Clone();
                        obj3.Indmanfecini = objForm.Indmanfecini;
                        obj3.Indmanfecfin = objForm.Indmanfecfin;
                        obj3.Indmandescripcion = objForm.Indmandescripcion;

                        obj3.Indmantipoindisp = objForm.Indmantipoindisp;
                        obj3.Indmanpr = objForm.Indmanpr;
                        obj3.Indmanasocproc = objForm.Indmanasocproc;
                        obj3.Indmanomitir7d = objForm.Indmanomitir7d;
                        obj3.Indmanomitirexcesopr = objForm.Indmanomitirexcesopr;
                        obj3.Indmancomentario = objForm.Indmancomentario;
                        obj3.Indmanusarencalculo = ConstantesAppServicio.SI;
                        obj3.Indmanestado = ConstantesAppServicio.Activo;
                        //obj3.Indmantipoaccion = ConstantesIndisponibilidades.TipoAccionIN;

                        obj3.Indmanusumodificacion = usuario;
                        obj3.Indmanfecmodificacion = fechaRegistro;

                        this.ValidacionMantto(obj3);
                        this.UpdateIndMantto(obj3);
                    }
                    else
                    {
                        EveManttoDTO evemantto = this.GetByIdEveMantto2(manttocodiEdit);
                        //Las modificaciones del EveMantto se guardan como nuevo IndMantto
                        IndManttoDTO mantto = this.GetIndManttoFromEveMantto(evemantto);
                        mantto.Indmanfecini = objForm.Indmanfecini;
                        mantto.Indmanfecfin = objForm.Indmanfecfin;
                        mantto.Indmandescripcion = objForm.Indmandescripcion;

                        mantto.Indmantipoindisp = objForm.Indmantipoindisp;
                        mantto.Indmanpr = objForm.Indmanpr;
                        mantto.Indmanasocproc = objForm.Indmanasocproc;
                        mantto.Indmanomitir7d = objForm.Indmanomitir7d;
                        mantto.Indmanomitirexcesopr = objForm.Indmanomitirexcesopr;
                        mantto.Indmancomentario = objForm.Indmancomentario;
                        mantto.Indmanestado = ConstantesAppServicio.Activo;
                        mantto.Indmanusarencalculo = this.EsUsadoEnCalculo(ConstantesIndisponibilidades.FuenteEveMantto, mantto.Indmantipoindisp, mantto.Grupotipocogen, objForm.Indmanasocproc, mantto.Indmanomitir7d, mantto.Indmanomitirexcesopr);
                        mantto.Indmantipoaccion = ConstantesIndisponibilidades.TipoAccionIUM;

                        mantto.Indmanusucreacion = usuario;
                        mantto.Indmanfeccreacion = fechaRegistro;

                        this.ValidacionMantto(mantto);
                        this.SaveIndMantto(mantto);
                    }
                    break;
            }
        }

        /// <summary>
        /// Elimina Ind. Mantto
        /// </summary>
        /// <param name="idFuente"></param>
        /// <param name="motivo"></param>
        /// <param name="tipo"></param>
        /// <param name="usuario"></param>
        /// <param name="indmancodi"></param>
        /// <param name="manttocodi"></param>
        private void EliminarIndMantto(int idFuente, string motivo, string tipo, string usuario, int? indmancodi = 0, int? manttocodi = 0)
        {
            DateTime fechaRegistro = DateTime.Now;

            switch (idFuente)
            {
                case ConstantesIndisponibilidades.FuenteIndMantto:
                    var obj1 = this.GetByIdIndMantto2(indmancodi.Value);

                    //el registro que está en bd se cambiará a histórico
                    IndManttoDTO obj2 = (IndManttoDTO)obj1.Clone();
                    obj2.Indmanusucreacion = obj2.Indmanfecmodificacion != null ? obj2.Indmanusumodificacion : obj2.Indmanusucreacion;
                    obj2.Indmanfeccreacion = obj2.Indmanfecmodificacion != null ? obj2.Indmanfecmodificacion : obj2.Indmanfeccreacion;
                    obj2.Indmanestado = ConstantesAppServicio.Historico; //H
                    obj2.Indmancodiold = obj1.Indmancodi;
                    this.SaveIndMantto(obj2);

                    IndManttoDTO obj3 = (IndManttoDTO)obj1.Clone();
                    obj3.Indmanusumodificacion = usuario;
                    obj3.Indmanfecmodificacion = fechaRegistro;
                    if (tipo == "I")
                    {
                        obj3.Indmantipoaccion = manttocodi > 0 ? ConstantesIndisponibilidades.TipoAccionIUM : ConstantesIndisponibilidades.TipoAccionIN;
                        obj3.Indmanusarencalculo = this.EsUsadoEnCalculo(ConstantesIndisponibilidades.FuenteEveMantto, obj1.Indmantipoindisp, obj1.Grupotipocogen, obj1.Indmanasocproc, obj1.Indmanomitir7d, obj1.Indmanomitirexcesopr);
                    }
                    else
                    {
                        obj3.Indmantipoaccion = ConstantesIndisponibilidades.TipoAccionIXM;
                        obj3.Indmanusarencalculo = ConstantesAppServicio.NO;
                    }
                    obj3.Indmancomentario = motivo;
                    this.UpdateIndMantto(obj3);

                    break;
                case ConstantesIndisponibilidades.FuenteEveMantto:

                    //Validar si la eve_mantto a eliminar ya existe
                    List<IndManttoDTO> listaIndByEve = this.ListarIndManttoByEveMantto(manttocodi.Value.ToString()).Where(x => x.Indmanestado == ConstantesAppServicio.Activo).ToList();
                    int indmancodiEdit = listaIndByEve.Any() ? listaIndByEve.First().Indmancodi : -1;

                    if (indmancodiEdit > 0)
                    {
                        var obj5 = listaIndByEve.First();

                        //el registro que está en bd se cambiará a histórico
                        IndManttoDTO obj6 = (IndManttoDTO)obj5.Clone();
                        obj6.Indmanusucreacion = obj6.Indmanfecmodificacion != null ? obj6.Indmanusumodificacion : obj6.Indmanusucreacion;
                        obj6.Indmanfeccreacion = obj6.Indmanfecmodificacion != null ? obj6.Indmanfecmodificacion : obj6.Indmanfeccreacion;
                        obj6.Indmanestado = ConstantesAppServicio.Historico; //H
                        obj6.Indmancodiold = obj5.Indmancodi;
                        this.SaveIndMantto(obj6);

                        IndManttoDTO obj4 = (IndManttoDTO)obj5.Clone();
                        obj4.Indmanusumodificacion = usuario;
                        obj4.Indmanfecmodificacion = fechaRegistro;
                        obj4.Indmantipoaccion = ConstantesIndisponibilidades.TipoAccionIXM;
                        obj4.Indmanusarencalculo = ConstantesAppServicio.NO;
                        obj4.Indmancomentario = motivo;
                        this.UpdateIndMantto(obj4);
                    }
                    else
                    {
                        EveManttoDTO evemantto = this.GetByIdEveMantto2(manttocodi.Value);
                        //Las modificaciones del EveMantto se guardan como nuevo IndMantto
                        IndManttoDTO mantto = this.GetIndManttoFromEveMantto(evemantto);

                        mantto.Indmanusucreacion = usuario;
                        mantto.Indmanfeccreacion = fechaRegistro;
                        mantto.Indmanusarencalculo = ConstantesAppServicio.NO;
                        mantto.Indmantipoaccion = ConstantesIndisponibilidades.TipoAccionIXM;
                        mantto.Indmanestado = ConstantesAppServicio.Activo;
                        mantto.Indmancomentario = motivo;

                        this.ValidacionMantto(mantto);
                        this.SaveIndMantto(mantto);
                    }
                    break;
            }
        }

        /// <summary>
        /// Validacion de un objeto de mantenimiento
        /// </summary>
        /// <param name="mantto"></param>
        /// <returns></returns>
        private void ValidacionMantto(IndManttoDTO mantto)
        {
            string msj = string.Empty;
            if (mantto.Indmanfecini >= mantto.Indmanfecfin)
            {
                msj += "La fecha de Inicio no puede ser igual o mayor a la Fecha Fin." + "\n";
            }

            if (mantto.Indmancodi == 0 && mantto.Manttocodi.GetValueOrDefault(0) == 0
                && mantto.Evenclasecodi == ConstantesIndisponibilidades.EvenclasecodiEjec)
            {
                //si es un nuevo ejecutado, verificar que la fecha de inicio sea igual o menor a hoy
                DateTime f = DateTime.Now;
                if (mantto.Indmanfecini.Date > f)
                {
                    msj += "La fecha del mantenimiento ejecutado " + mantto.Indmanfecini.Date.ToString(ConstantesAppServicio.FormatoFecha) + " no puede ser mayor al día de hoy." + "\n";
                }
            }

            if (msj != string.Empty)
            {
                throw new Exception(msj);
            }
        }

        /// <summary>
        /// Listar historial de modificaciones
        /// </summary>
        /// <param name="indmancodi"></param>
        /// <param name="manttocodi"></param>
        /// <returns></returns>
        public List<IndManttoDTO> ListarHistorialCambioMantto(int? indmancodi = 0, int? manttocodi = 0)
        {
            List<IndManttoDTO> listahist = new List<IndManttoDTO>();

            if (indmancodi > 0)
            {
                listahist = this.ListIndManttoHistoricoByIndmancodi(indmancodi.ToString()).OrderBy(x => x.Indmancodiold ?? 0).ThenByDescending(x => x.Indmancodi).ToList();
            }

            if (manttocodi != 0)
            {
                if (!listahist.Any())
                    listahist = ListarIndManttoByEveMantto(manttocodi.ToString()).OrderBy(x => x.Indmancodiold ?? 0).ThenByDescending(x => x.Indmancodi).ToList();
                EveManttoDTO evemantto = this.GetByIdEveMantto2(manttocodi.Value);
                listahist.Add(new IndManttoDTO() { Indmanfecmodificacion = evemantto.Lastdate, Indmanusumodificacion = evemantto.Lastuser, IndmanestadoDesc = "Base de datos Mantto" });
            }

            foreach (var reg in listahist)
            {
                if (reg.IndmanestadoDesc == null)
                {
                    if (reg.Indmanestado == ConstantesIndisponibilidades.TipoReporteAplicativo) reg.IndmanestadoDesc = "Activo";
                    if (reg.Indmanestado == ConstantesIndisponibilidades.TipoReporteHistorico) reg.IndmanestadoDesc = "Histórico";
                    if (reg.Indmanestado == ConstantesAppServicio.Anulado) reg.IndmanestadoDesc = "Anulado";
                }
                reg.Indmantipoindisp = GetTipoindispDesc(reg.Indmantipoindisp);
                reg.Indmanomitir7d = reg.Indmanomitir7d == ConstantesAppServicio.SI ? "Sí" : string.Empty;
                reg.Indmanomitirexcesopr = reg.Indmanomitirexcesopr == ConstantesAppServicio.SI ? "Sí" : string.Empty;
                reg.UltimaModificacionFechaDesc = reg.Indmanfecmodificacion != null ? reg.Indmanfecmodificacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : (reg.Indmanfeccreacion != null ? reg.Indmanfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty);
                reg.UltimaModificacionUsuarioDesc = reg.Indmanfecmodificacion != null ? reg.Indmanusumodificacion : reg.Indmanusucreacion;
            }

            return listahist;
        }

        /// <summary>
        /// Verificar si Ind. Mantto es usado en Calculo
        /// </summary>
        /// <param name="fuente"></param>
        /// <param name="tipoindisp"></param>
        /// <param name="evenindispo"></param>
        /// <param name="tipoevencodi"></param>
        /// <returns></returns>
        private string EsUsadoEnCalculo(int fuente, string tipoindisp, string cogeneracion, string asocProcesoInd, string omitir7d, string omitirExceso)
        {
            string usarEnCalculo = ConstantesAppServicio.NO;

            if (fuente == ConstantesIndisponibilidades.FuenteEveMantto)
            {
                if (tipoindisp != ConstantesAppServicio.ParametroDefecto)
                {
                    usarEnCalculo = ConstantesAppServicio.SI;
                }
                if (omitir7d == ConstantesAppServicio.SI || omitirExceso == ConstantesAppServicio.SI)
                {
                    usarEnCalculo = ConstantesAppServicio.SI;
                }
            }

            if (cogeneracion == ConstantesAppServicio.SI)
            {
                usarEnCalculo = asocProcesoInd;
            }

            return usarEnCalculo;
        }

        /// <summary>
        /// Obtener descripción tipo de indisponibilidad
        /// </summary>
        /// <param name="tipoindisp"></param>
        /// <returns></returns>
        private string GetTipoindispDesc(string tipoindisp)
        {
            switch (tipoindisp)
            {
                case ConstantesIndisponibilidades.INDProgramadaTotal: return "Prog Total ";
                case ConstantesIndisponibilidades.INDProgramadaParcial: return "Prog Parcial";
                case ConstantesIndisponibilidades.INDFortuitaTotal: return "Fort Total ";
                case ConstantesIndisponibilidades.INDFortuitaParcial: return " Fort Parcial ";
            }

            return "No definido";
        }

        #endregion

        #region Insumo: Operación Comercial

        /// <summary>
        /// Lista equipos en Operación Comercial
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="famcodi"></param>
        /// <param name="listaMsj"></param>
        /// <param name="esAplicarTTIE"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarEquipoOpComercial(DateTime fechaIni, DateTime fechaFin, int famcodi, out List<ResultadoValidacionAplicativo> listaMsj,
                                bool esAplicarTTIE = true, bool flagSoloDatVigente = false)
        {
            return servEq.ListarEquiposTienenOpComercial(fechaIni, fechaFin, GetFamcodiPadre(famcodi) + "," + GetFamcodiHijo(famcodi), out listaMsj, esAplicarTTIE, flagSoloDatVigente)
                .OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Famabrev).ThenBy(x => x.Equiabrev).ToList();
        }

        /// <summary>
        /// Listar modos de operación con operación comercial
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarModoOpComercial(DateTime fechaIni, DateTime fechaFin)
        {
            return servMigr.ListarModoOperacionTienenOpComercial(fechaIni, fechaFin)
                .OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Gruponomb).ToList();
        }

        /// <summary>
        /// Reporte html de la operación comercial
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        public string GenerarReporteHtmlOperacionComercial(DateTime fechaIni, DateTime fechaFin, int tipo)
        {
            if (tipo == 4 || tipo == 5 || tipo == 37 || tipo == 39)
            {
                return GenerarReporteHtmlOperacionComercialXEquipo(fechaIni, fechaFin, tipo);
            }

            if (tipo == 2)
                return GenerarReporteHtmlOperacionComercialXModo(fechaIni, fechaFin);

            return string.Empty;
        }

        /// <summary>
        /// Genera reporte Html de Lista Operación Comercial
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        private string GenerarReporteHtmlOperacionComercialXEquipo(DateTime fechaIni, DateTime fechaFin, int famcodi)
        {
            StringBuilder strHtml = new StringBuilder();

            List<EqEquipoDTO> listaData = this.ListarEquipoOpComercial(fechaIni, fechaFin, famcodi, out List<ResultadoValidacionAplicativo> listaMsjEq);
            var listaNuevoIngreso = listaData.Where(x => x.TieneNuevoIngresoOpComercial).ToList();
            var listaNuevoRetiro = listaData.Where(x => x.TieneNuevoRetiroOpComercial).ToList();

            if (listaMsjEq.Any())
            {
                strHtml.Append("<div>");
                strHtml.Append("<b>Observaciones</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaMsjEq)
                    strHtml.AppendFormat("<li>{0}: {1}</li>", reg.TipoFuenteDatoDesc, reg.Descripcion);
                strHtml.Append("</ul>");
                strHtml.Append("</div>");
            }

            strHtml.Append("<div>");
            if (listaNuevoIngreso.Any())
            {
                strHtml.Append("<b>Ingreso de operación comercial</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaNuevoIngreso)
                    strHtml.AppendFormat("<li>{0} <b>{1}</b> ubicado en {2}</li>", reg.Famnomb, reg.Equiabrev, reg.Areanomb);
                strHtml.Append("</ul>");
            }

            if (listaNuevoRetiro.Any())
            {
                strHtml.Append("<b>Retiro de operación comercial</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaNuevoRetiro)
                    strHtml.AppendFormat("<li>{0} <b>{1}</b> ubicado en {2}</li>", reg.Famnomb, reg.Equiabrev, reg.Areanomb);
                strHtml.Append("</ul>");
            }
            strHtml.Append("</div>");

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Central</th>
                                <th>Código <br/> Unidad</th>
                                <th>Tipo <br/> Unidad</th>
                                <th>Nombre <br/> Unidad</th>
                                <th>RER</th>
                                <th>Cog.</th>
                                <th style='background-color: #00bb00' >Fecha de Vigencia <br/> Ingreso</th>
                                <th style='background-color: red' >Fecha de Vigencia <br/> Retiro</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            int filaPar = 0;
            string centralActual = listaData.Any() ? listaData.First().Central : string.Empty;
            foreach (var reg in listaData)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>

                                        <td style='text-align: center;'>{2}</td>

                                        <td style='text-align: right;'>{3}</td>
                                        <td style='text-align: center;'>{9}</td>
                                        <td style='text-align: center;'>{4}</td>

                                        <td style='text-align: center;'>{10}</td>
                                        <td style='text-align: center;'>{11}</td>

                                        <td style='text-align: center;{7}' >{5}</td>
                                        <td style='text-align: center;{8}' >{6}</td>
                                    </tr>
                                    "
                                , filaClase
                                , reg.Emprnomb
                                , reg.Central
                                , reg.Equicodi
                                , reg.Equiabrev
                                , reg.Equifechiniopcom != null ? reg.Equifechiniopcom.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Equifechfinopcom != null ? reg.Equifechfinopcom.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.TieneNuevoIngresoOpComercial ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty
                                , reg.TieneNuevoRetiroOpComercial ? "background-color: red !important; color: white; font-weight: bold;" : string.Empty
                                , reg.Famabrev
                                , reg.TipogenerrerDesc
                                , reg.GrupotipocogenDesc
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera reporte Html de Lista Operación Comercial
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        private string GenerarReporteHtmlOperacionComercialXModo(DateTime fechaIni, DateTime fechaFin)
        {
            StringBuilder strHtml = new StringBuilder();

            List<PrGrupoDTO> listaData = this.ListarModoOpComercial(fechaIni, fechaFin);
            var listaNuevoIngreso = listaData.Where(x => x.TieneNuevoIngresoOpComercial).ToList();
            var listaNuevoRetiro = listaData.Where(x => x.TieneNuevoRetiroOpComercial).ToList();

            strHtml.Append("<div>");
            if (listaNuevoIngreso.Any())
            {
                strHtml.Append("<b>Ingreso de operación comercial</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaNuevoIngreso)
                    strHtml.AppendFormat("<li><b>{0}</b> ubicado en {1}</li>", reg.Gruponomb, reg.Central);
                strHtml.Append("</ul>");
            }

            if (listaNuevoRetiro.Any())
            {
                strHtml.Append("<b>Retiro de operación comercial</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaNuevoRetiro)
                    strHtml.AppendFormat("<li><b>{0}</b> ubicado en {1}</li>", reg.Gruponomb, reg.Central);
                strHtml.Append("</ul>");
            }
            strHtml.Append("</div>");

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Central</th>
                                <th>Código <br/> Modo</th>
                                <th>Modo de Operación</th>
                                <th>RER</th>
                                <th>Cog.</th>
                                <th style='background-color: #00bb00' >Fecha de Vigencia <br/>Ingreso</th>
                                <th style='background-color: red' >Fecha de Vigencia <br/>Retiro</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            int filaPar = 0;
            string centralActual = listaData.Any() ? listaData.First().Central : string.Empty;
            foreach (var reg in listaData)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>

                                        <td style='text-align: center;'>{2}</td>

                                        <td style='text-align: right;'>{3}</td>
                                        <td style='text-align: center;'>{4}</td>

                                        <td style='text-align: right;'>{9}</td>
                                        <td style='text-align: center;'>{10}</td>

                                        <td style='text-align: center;{7}' >{5}</td>
                                        <td style='text-align: center;{8}' >{6}</td>
                                    </tr>
                                    "
                                , filaClase
                                , reg.Emprnomb
                                , reg.Central
                                , reg.Grupocodi
                                , reg.Gruponomb
                                , reg.Fechiniopcom != null ? reg.Fechiniopcom.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Fechfinopcom != null ? reg.Fechfinopcom.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.TieneNuevoIngresoOpComercial ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty
                                , reg.TieneNuevoRetiroOpComercial ? "background-color: red !important; color: white; font-weight: bold;" : string.Empty
                                , reg.TipogenerrerDesc
                                , reg.GrupotipocogenDesc
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera archivo de exportacion para la operación comercial
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pericodi"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelOP(string ruta, int pericodi, out string nameFile)
        {
            IndPeriodoDTO regPeriodo = GetByIdIndPeriodo(pericodi);
            DateTime fechaIni = new DateTime(regPeriodo.Iperianio, regPeriodo.Iperimes, 1);
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            nameFile = "Operación comercial.xlsx";
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            var listaTipo = new List<int> {
                ConstantesSiosein2.FamcodiCentralTermoelectrico,
                ConstantesSiosein2.FamcodiCentralHidroelectrico,
                ConstantesSiosein2.FamcodiCentralSolar,
                ConstantesSiosein2.FamcodiCentralEolico
            };

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                var rowIni = 2;
                var colIni = 2;

                foreach (var tipo in listaTipo)
                {
                    var familia = FactorySic.GetEqFamiliaRepository().GetById(tipo);
                    GenerarReporteExcelOCxEquipo(xlPackage, $"Ingreso y Retiro de Operación comercial de las Unidades de Generación - {familia.Famnomb}", familia.Famnomb, rowIni, colIni, fechaIni, fechaFin, tipo);
                }

                GenerarReporteExcelOCxModo(xlPackage, $"Ingreso y Retiro de Operación comercial de las Unidades de Generación - Modos de Operación Térmico", "Modos de Ope. Térmico", rowIni, colIni, fechaIni, fechaFin);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera Reporte Excel de Operación Comercial por Equipo
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="titulo"></param>
        /// <param name="hoja"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipo"></param>
        private void GenerarReporteExcelOCxEquipo(ExcelPackage xlPackage, string titulo, string hoja, int rowIni, int colIni, DateTime fechaIni, DateTime fechaFin, int tipo)
        {
            List<EqEquipoDTO> listaData = this.ListarEquipoOpComercial(fechaIni, fechaFin, tipo, out List<ResultadoValidacionAplicativo> listaMsjEq);
            var listaNuevoIngreso = listaData.Where(x => x.TieneNuevoIngresoOpComercial).ToList();
            var listaNuevoRetiro = listaData.Where(x => x.TieneNuevoRetiroOpComercial).ToList();

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(hoja);
            ws = xlPackage.Workbook.Worksheets[hoja];

            string fontFamily = "Arial";
            var fuenteTitulo = new Font(fontFamily, 12, FontStyle.Bold);
            var fuenteCuerpo = new Font(fontFamily, 10);
            var colorBorder = ColorTranslator.FromHtml("#dddddd");
            var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");

            var colEmpresa = colIni + 1;
            var colCentral = colEmpresa + 1;
            var colCodigo = colCentral + 1;
            var colUnidad = colCodigo + 1;
            var colNombre = colUnidad + 1;
            int colRer = colNombre + 1;
            int colCog = colRer + 1;
            var colIngreso = colCog + 1;
            var colRetiro = colIngreso + 1;

            ws.Cells[rowIni, colEmpresa].Value = titulo;
            ws.Cells[rowIni, colEmpresa, rowIni, colRetiro].Merge = true;
            ws.Cells[rowIni, colEmpresa].SetFont(fuenteTitulo);
            ws.Cells[rowIni, colEmpresa].SetAlignment();
            var rowIniC = rowIni + 3;

            ws.Cells[++rowIniC, colEmpresa - 1].Value = "dd/mm/yyyy";
            ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
            ws.Cells[rowIniC, colEmpresa].Value = "Fecha de Vigencia del Nuevo Ingreso de Operación comercial.";

            var rowIniObser = rowIniC;

            ws.Cells[++rowIniC, colEmpresa - 1].Value = "dd/mm/yyyy";
            ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#ff0000"));
            ws.Cells[rowIniC, colEmpresa].Value = "Fecha de Vigencia del Nuevo Retiro de Operación comercial.";

            ws.Column(colEmpresa - 1).Style.Font.SetFromFont(fuenteCuerpo);

            if (listaMsjEq.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Observaciones :";
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaMsjEq)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.TipoFuenteDatoDesc}: {reg.Descripcion}";
            }

            if (listaNuevoIngreso.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Ingreso de operación comercial :";
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaNuevoIngreso)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.Famnomb} {reg.Equiabrev} ubicado en {reg.Areanomb}";
            }

            if (listaNuevoRetiro.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Retiro de operación comercial :";
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaNuevoRetiro)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.Famnomb} {reg.Equiabrev} ubicado en {reg.Areanomb}";
            }


            rowIniC += 2;

            ws.View.FreezePanes(rowIniC + 1, 1);

            ws.Cells[rowIniC, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniC, colCentral].Value = "Central";
            ws.Cells[rowIniC, colCodigo].Value = "Código Unidad";
            ws.Cells[rowIniC, colUnidad].Value = "Tipo Unidad";
            ws.Cells[rowIniC, colNombre].Value = "Nombre Unidad";
            ws.Cells[rowIniC, colRer].Value = "RER";
            ws.Cells[rowIniC, colCog].Value = "Cog.";
            ws.Cells[rowIniC, colIngreso].Value = "Fecha de Vigencia \r\n Ingreso";
            ws.Cells[rowIniC, colRetiro].Value = "Fecha de Vigencia \r\n Retiro";

            ws.Column(colEmpresa - 1).SetTrueColumnWidth(12);
            ws.Column(colEmpresa).SetTrueColumnWidth(75);
            ws.Column(colCentral).SetTrueColumnWidth(35);
            ws.Column(colCodigo).SetTrueColumnWidth(14);
            ws.Column(colUnidad).SetTrueColumnWidth(13);
            ws.Column(colNombre).SetTrueColumnWidth(15);
            ws.Column(colRer).SetTrueColumnWidth(8);
            ws.Column(colCog).SetTrueColumnWidth(8);
            ws.Column(colIngreso).SetTrueColumnWidth(19);
            ws.Column(colRetiro).SetTrueColumnWidth(19);
            ws.Row(rowIniC).Style.WrapText = true;
            ws.Row(rowIniC).Height = 30;

            var rangoCabecera = ws.Cells[rowIniC, colEmpresa, rowIniC, colRetiro];
            rangoCabecera.SetFontBold();
            rangoCabecera.SetFontColor(Color.White);
            rangoCabecera.AutoFilter = true;

            ws.Cells[rowIniC, colEmpresa, rowIniC, colCog].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));
            ws.Cells[rowIniC, colIngreso].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
            ws.Cells[rowIniC, colRetiro].SetBackgroundColor(ColorTranslator.FromHtml("#ff0000"));
            UtilExcel.AllBorders(ws.Cells[rowIniC, colEmpresa, rowIniC, colRetiro], ExcelBorderStyle.Thin, colorBorder);
            UtilExcel.BorderAround(ws.Cells[rowIniC, colEmpresa, rowIniC, colRetiro], ExcelBorderStyle.Medium, colorBorderG);

            var rowIniTabla = rowIniC;

            foreach (var grpreg in listaData.GroupBy(x => x.Equipadre))
            {
                var rowIniG = rowIniC + 1;
                foreach (var reg in grpreg)
                {
                    rowIniC++;
                    ws.Cells[rowIniC, colEmpresa].Value = reg.Emprnomb;
                    ws.Cells[rowIniC, colCentral].Value = reg.Central;
                    ws.Cells[rowIniC, colCodigo].Value = reg.Equicodi;
                    ws.Cells[rowIniC, colUnidad].Value = reg.Famabrev;
                    ws.Cells[rowIniC, colNombre].Value = reg.Equiabrev;
                    ws.Cells[rowIniC, colRer].Value = reg.TipogenerrerDesc;
                    ws.Cells[rowIniC, colCog].Value = reg.GrupotipocogenDesc;
                    ws.Cells[rowIniC, colIngreso].Value = reg.Equifechiniopcom?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colRetiro].Value = reg.Equifechfinopcom?.ToString(ConstantesAppServicio.FormatoFechaYMD);

                    if (reg.TieneNuevoIngresoOpComercial)
                    {
                        ws.Cells[rowIniC, colIngreso].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                        ws.Cells[rowIniC, colIngreso].SetFontColor(Color.White);
                    }

                    if (reg.TieneNuevoRetiroOpComercial)
                    {
                        ws.Cells[rowIniC, colRetiro].SetBackgroundColor(ColorTranslator.FromHtml("#ff0000"));
                        ws.Cells[rowIniC, colRetiro].SetFontColor(Color.White);
                    }

                }
                UtilExcel.AllBorders(ws.Cells[rowIniG, colEmpresa, rowIniC, colRetiro], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowIniG, colEmpresa, rowIniC, colRetiro], ExcelBorderStyle.Medium, colorBorderG);
            }

            var rangoTabla = ws.Cells[rowIniTabla, colEmpresa, rowIniC, colRetiro];
            rangoTabla.SetAlignment();
            ws.Cells[rowIniObser, colEmpresa, rowIniC, colRetiro].SetFont(fuenteCuerpo);

            ws.View.ShowGridLines = false;
        }

        /// <summary>
        /// Genera Reporte Excel de Operación Comercial por Modo
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="titulo"></param>
        /// <param name="hoja"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        private void GenerarReporteExcelOCxModo(ExcelPackage xlPackage, string titulo, string hoja, int rowIni, int colIni, DateTime fechaIni, DateTime fechaFin)
        {

            List<PrGrupoDTO> listaData = this.ListarModoOpComercial(fechaIni, fechaFin);
            var listaNuevoIngreso = listaData.Where(x => x.TieneNuevoIngresoOpComercial).ToList();
            var listaNuevoRetiro = listaData.Where(x => x.TieneNuevoRetiroOpComercial).ToList();

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(hoja);
            ws = xlPackage.Workbook.Worksheets[hoja];

            string fontFamily = "Arial";
            var fuenteTitulo = new Font(fontFamily, 12, FontStyle.Bold);
            var fuenteCuerpo = new Font(fontFamily, 10);
            var colorBorder = ColorTranslator.FromHtml("#dddddd");
            var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");
            var colorIngreso = ColorTranslator.FromHtml("#00bb00");
            var colorRetiro = ColorTranslator.FromHtml("#ff0000");

            var colEmpresa = colIni + 1;
            var colCentral = colEmpresa + 1;
            var colCodigo = colCentral + 1;
            var colNombre = colCodigo + 1;
            int colRer = colNombre + 1;
            int colCog = colRer + 1;
            var colIngreso = colCog + 1;
            var colRetiro = colIngreso + 1;

            ws.Cells[rowIni, colEmpresa].Value = titulo;
            ws.Cells[rowIni, colEmpresa, rowIni, colRetiro].Merge = true;
            ws.Cells[rowIni, colEmpresa].SetFont(fuenteTitulo);
            ws.Cells[rowIni, colEmpresa].SetAlignment();

            var rowIniC = rowIni + 3;

            ws.Cells[++rowIniC, colEmpresa - 1].Value = "dd/mm/yyyy";
            ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(colorIngreso);
            ws.Cells[rowIniC, colEmpresa].Value = "Fecha de Vigencia del Nuevo Ingreso de Operación comercial.";

            var rowIniObser = rowIniC;

            ws.Cells[++rowIniC, colEmpresa - 1].Value = "dd/mm/yyyy";
            ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(colorRetiro);
            ws.Cells[rowIniC, colEmpresa].Value = "Fecha de Vigencia del Nuevo Retiro de Operación comercial.";

            ws.Column(colEmpresa - 1).Style.Font.SetFromFont(fuenteCuerpo);

            if (listaNuevoIngreso.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Ingreso de operación comercial :";
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaNuevoIngreso)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.Gruponomb} ubicado en {reg.Central}";
            }

            if (listaNuevoRetiro.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Retiro de operación comercial :";
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaNuevoRetiro)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.Gruponomb} ubicado en {reg.Central}";
            }


            rowIniC += 2;

            ws.View.FreezePanes(rowIniC + 1, 1);

            ws.Cells[rowIniC, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniC, colCentral].Value = "Central";
            ws.Cells[rowIniC, colCodigo].Value = "Código \r\n Modo";
            ws.Cells[rowIniC, colNombre].Value = "Modo Operación";
            ws.Cells[rowIniC, colRer].Value = "RER";
            ws.Cells[rowIniC, colCog].Value = "Cog.";
            ws.Cells[rowIniC, colIngreso].Value = "Fecha de Vigencia \r\n Ingreso";
            ws.Cells[rowIniC, colRetiro].Value = "Fecha de Vigencia \r\n Retiro";

            ws.Column(colEmpresa - 1).SetTrueColumnWidth(12);
            ws.Column(colEmpresa).SetTrueColumnWidth(75);
            ws.Column(colCentral).SetTrueColumnWidth(35);
            ws.Column(colCodigo).SetTrueColumnWidth(14);
            ws.Column(colNombre).SetTrueColumnWidth(50);
            ws.Column(colRer).SetTrueColumnWidth(8);
            ws.Column(colCog).SetTrueColumnWidth(8);
            ws.Column(colIngreso).SetTrueColumnWidth(19);
            ws.Column(colRetiro).SetTrueColumnWidth(19);
            ws.Row(rowIniC).Style.WrapText = true;
            ws.Row(rowIniC).Height = 30;

            var rangoCabecera = ws.Cells[rowIniC, colEmpresa, rowIniC, colRetiro];
            rangoCabecera.SetFontBold();
            rangoCabecera.SetFontColor(Color.White);
            rangoCabecera.AutoFilter = true;

            ws.Cells[rowIniC, colEmpresa, rowIniC, colCog].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));
            ws.Cells[rowIniC, colIngreso].SetBackgroundColor(colorIngreso);
            ws.Cells[rowIniC, colRetiro].SetBackgroundColor(colorRetiro);
            UtilExcel.AllBorders(ws.Cells[rowIniC, colEmpresa, rowIniC, colRetiro], ExcelBorderStyle.Thin, colorBorder);
            UtilExcel.BorderAround(ws.Cells[rowIniC, colEmpresa, rowIniC, colRetiro], ExcelBorderStyle.Medium, colorBorderG);

            var rowIniTabla = rowIniC;

            foreach (var grpreg in listaData.GroupBy(x => x.Equipadre))
            {
                var rowIniG = rowIniC + 1;
                foreach (var reg in grpreg)
                {
                    rowIniC++;
                    ws.Cells[rowIniC, colEmpresa].Value = reg.Emprnomb;
                    ws.Cells[rowIniC, colCentral].Value = reg.Central?.Trim();
                    ws.Cells[rowIniC, colCodigo].Value = reg.Grupocodi;
                    ws.Cells[rowIniC, colNombre].Value = reg.Gruponomb?.Trim();
                    ws.Cells[rowIniC, colRer].Value = reg.TipogenerrerDesc;
                    ws.Cells[rowIniC, colCog].Value = reg.GrupotipocogenDesc;
                    ws.Cells[rowIniC, colIngreso].Value = reg.Fechiniopcom?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colRetiro].Value = reg.Fechfinopcom?.ToString(ConstantesAppServicio.FormatoFechaYMD);

                    if (reg.TieneNuevoIngresoOpComercial)
                    {
                        ws.Cells[rowIniC, colIngreso].SetBackgroundColor(colorIngreso);
                        ws.Cells[rowIniC, colIngreso].SetFontColor(Color.White);
                    }

                    if (reg.TieneNuevoRetiroOpComercial)
                    {
                        ws.Cells[rowIniC, colRetiro].SetBackgroundColor(colorRetiro);
                        ws.Cells[rowIniC, colRetiro].SetFontColor(Color.White);
                    }

                }
                UtilExcel.AllBorders(ws.Cells[rowIniG, colEmpresa, rowIniC, colRetiro], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowIniG, colEmpresa, rowIniC, colRetiro], ExcelBorderStyle.Medium, colorBorderG);
            }

            var rangoTabla = ws.Cells[rowIniTabla, colEmpresa, rowIniC, colRetiro];
            rangoTabla.SetAlignment();
            ws.Cells[rowIniObser, colEmpresa, rowIniC, colRetiro].SetFont(fuenteCuerpo);

            ws.View.ShowGridLines = false;
        }

        #endregion

        #region Insumo: Potencia Efectiva, Rendimiento y Potencia Garantizada

        /// <summary>
        /// Listar equipo potencia efectiva
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="famcodi"></param>
        /// <param name="lista"></param>
        /// <param name="listaMsj"></param>
        public void ListarEquipoPotenciaEfectiva(int aplicativo, DateTime fechaIni, DateTime fechaFin, int famcodi, out List<EqEquipoDTO> lista, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            lista = new List<EqEquipoDTO>();
            listaMsj = new List<ResultadoValidacionAplicativo>();

            if (famcodi == ConstantesHorasOperacion.IdTipoTermica)
            {
                ListarUnidadTermicoOpComercial(aplicativo, fechaIni, fechaFin, out lista, out List<EqEquipoDTO> listaEquiposTermicos, out listaMsj);
            }

            if (famcodi == ConstantesHorasOperacion.IdTipoHidraulica)
            {
                ListarEqCentralHidraulicoOpComercial(fechaIni, fechaFin, out lista, out List<EqEquipoDTO> lista2, out listaMsj);
            }

            if (famcodi == 1002)
            {
                ListarEqCentralHidraulicoOpComercial(fechaIni, fechaFin, out List<EqEquipoDTO> lista1, out lista, out listaMsj);
            }

            if (famcodi == ConstantesHorasOperacion.IdTipoSolar)
            {
                ListarEqCentralSolarOpComercial(fechaIni, fechaFin, out lista, out List<EqEquipoDTO> listaEquiposSolar, out listaMsj);
            }

            if (famcodi == ConstantesHorasOperacion.IdTipoEolica)
            {
                ListarEqCentralEolicaOpComercial(fechaIni, fechaFin, out lista, out List<EqEquipoDTO> listaEquiposEolica, out listaMsj);
            }

            lista = lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenByDescending(x => x.Grupoincremental).ThenBy(x => x.Famcodi).ThenBy(x => x.Equinomb).ToList();
        }

        /// <summary>
        /// Genera reporte formato Html de Lista Potencia Efectiva
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        public string GenerarReporteHtmlPotenciaEfectiva(int aplicativo, DateTime fechaIni, DateTime fechaFin, int tipo)
        {
            if (tipo == 4 || tipo == 5 || tipo == 37 || tipo == 39 || tipo == 1001 || tipo == 1002)
            {
                int famcodi = tipo == 1001 ? 5 : tipo;

                this.ListarEquipoPotenciaEfectiva(aplicativo, fechaIni, fechaFin, famcodi, out List<EqEquipoDTO> lista, out List<ResultadoValidacionAplicativo> listaMsj);

                if (tipo == 1001)
                {
                    return GenerarHtmlPeYPfUnidadesTermo(lista, listaMsj);
                }

                if (tipo == 1002)
                {
                    return GenerarHtmlPeGeneradoresHidro(lista, listaMsj);
                }

                if (tipo == ConstantesHorasOperacion.IdTipoTermica)
                {
                    return GenerarHtmlPeUnidadesTermo(lista, listaMsj);
                }

                if (tipo == ConstantesHorasOperacion.IdTipoHidraulica)
                {
                    return GenerarHtmlPeUnidadesHidro(lista, listaMsj);
                }

                if (tipo == ConstantesHorasOperacion.IdTipoSolar || famcodi == ConstantesHorasOperacion.IdTipoEolica)
                {
                    return GenerarHtmlPeUnidadesSolarEolica(lista, listaMsj);
                }
            }

            if (tipo == 2)
            {
                ListarModoOperacionPe(fechaIni, fechaFin, out List<PrGrupoDTO> listaModo, out List<ResultadoValidacionAplicativo> listaMsj);
                return GenerarHtmlPeModosOperacion(listaModo, listaMsj);
            }
            return string.Empty;
        }

        /// <summary>
        /// Generación de archivo de potencia efectiva
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="pericodi"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelPotenciaEfectiva(string ruta, int pericodi, int aplicativo, out string nameFile)
        {
            IndPeriodoDTO regPeriodo = GetByIdIndPeriodo(pericodi);
            DateTime fechaIni = new DateTime(regPeriodo.Iperianio, regPeriodo.Iperimes, 1);
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);

            nameFile = string.Format("Reporte_Potencia_Efectiva_{0}.xlsx", regPeriodo.Iperianiomes);
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);
            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                var rowIni = 2;
                var colIni = 2;

                GenerarHojaPeUnidadesTermo(xlPackage, $"Potencia Efectiva y Rendimiento - Unidades Térmicas", "Unidades Térmicas", rowIni, colIni, aplicativo, fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoTermica);
                GenerarHojaPeUnidadesHidro(xlPackage, $"Potencia Efectiva y Potencia Garantizada - Unidades Hidráulica", "Unidades Hidráulica", rowIni, colIni, aplicativo, fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoHidraulica);
                GenerarHojaPeUnidadesSolarEolica(xlPackage, $"Potencia Efectiva - Unidades Solares", "Unidades Solares", rowIni, colIni, aplicativo, fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoSolar);
                GenerarHojaPeUnidadesSolarEolica(xlPackage, $"Potencia Efectiva - Unidades Eólicos", "Unidades Eólicos", rowIni, colIni, aplicativo, fechaIni, fechaFin, ConstantesHorasOperacion.IdTipoEolica);
                GenerarHojaPeGeneradoresHidro(xlPackage, $"Potencia Efectiva y Potencia Garantizada - Generadores Hidráulicos", "Generadores Hidráulicos", rowIni, colIni, aplicativo, fechaIni, fechaFin, 1002);
                GenerarHojaPeModosOperacion(xlPackage, $"Potencia Efectiva y Rendimiento - Modos de Operación Térmico", "Modos de Operación Térmico", rowIni, colIni, fechaIni, fechaFin);

                xlPackage.Save();
            }
        }

        /// <summary>
        /// Genera Hoja de Pe Modos Operacion
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="titulo"></param>
        /// <param name="hoja"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        private void GenerarHojaPeModosOperacion(ExcelPackage xlPackage, string titulo, string hoja, int rowIni, int colIni, DateTime fechaIni, DateTime fechaFin)
        {
            ListarModoOperacionPe(fechaIni, fechaFin, out List<PrGrupoDTO> lista, out List<ResultadoValidacionAplicativo> listaMsj);

            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosRend = lista.Count(x => x.TieneModificacionPropiedadRendimiento);

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(hoja);
            ws = xlPackage.Workbook.Worksheets[hoja];

            string fontFamily = "Arial";
            var fuenteTitulo = new Font(fontFamily, 12, FontStyle.Bold);
            var fuenteCuerpo = new Font(fontFamily, 10);
            var colorBorder = ColorTranslator.FromHtml("#dddddd");
            var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");

            var colorPe = ColorTranslator.FromHtml("#4dce4d");
            var colorPMin = ColorTranslator.FromHtml("#ffa040");
            var colorPr = ColorTranslator.FromHtml("#9093f3");

            var colEmpresa = colIni + 1;
            var colCentral = colEmpresa + 1;
            var colCodigoModo = colCentral + 1;
            var colModo = colCodigoModo + 1;
            var colFecVig = colModo + 1;
            var colPe = colFecVig + 1;

            var colFecVigMin = colPe + 1;
            var colPMin = colFecVigMin + 1;

            var colFecVig2 = colPMin + 1;
            var colRendimiento = colFecVig2 + 1;
            int colTminop = colRendimiento + 1;

            ws.Cells[rowIni, colEmpresa].Value = titulo;
            ws.Cells[rowIni, colEmpresa, rowIni, colRendimiento].Merge = true;
            ws.Cells[rowIni, colEmpresa].SetFont(fuenteTitulo);
            ws.Cells[rowIni, colEmpresa].SetAlignment();

            var rowIniC = rowIni + 3;

            var rowIniObser = rowIniC;

            if (numCambios > 0)
            {
                ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambios} actualizacion(es) de potencia efectiva.";
            }

            if (numCambiosRend > 0)
            {
                ws.Cells[++rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#595dd4"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambiosRend} actualizacion(es) de rendimiento.";
            }

            if (listaMsj.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Observaciones :";
                ws.Cells[rowIniC, colEmpresa - 1].Style.Font.Color.SetColor(Color.Red);
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaMsj)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.TipoFuenteDatoDesc}: {reg.Descripcion}";
            }

            rowIniC += 2;

            ws.View.FreezePanes(rowIniC + 1, 1);

            ws.Cells[rowIniC, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniC, colCentral].Value = "Central";
            ws.Cells[rowIniC, colCodigoModo].Value = "Código\r\nModo";
            ws.Cells[rowIniC, colModo].Value = "Modo de Operación";


            ws.Cells[rowIniC, colFecVig].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPe].Value = "Potencia Efectiva\r\n(MW)";

            ws.Cells[rowIniC, colFecVigMin].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPMin].Value = "Potencia Mínima\r\n(MW)";

            ws.Cells[rowIniC, colFecVig2].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colRendimiento].Value = "Rendimiento\r\n(gal, kg, m3)";
            ws.Cells[rowIniC, colTminop].Value = "Tmin_op\r\n(h)";

            ws.Column(colEmpresa).SetTrueColumnWidth(58);
            ws.Column(colCentral).SetTrueColumnWidth(25);
            ws.Column(colModo).SetTrueColumnWidth(50);

            ws.Column(colFecVig).SetTrueColumnWidth(21);
            ws.Column(colPe).SetTrueColumnWidth(19);

            ws.Column(colFecVigMin).SetTrueColumnWidth(21);
            ws.Column(colPMin).SetTrueColumnWidth(19);

            ws.Column(colFecVig2).SetTrueColumnWidth(21);
            ws.Column(colRendimiento).SetTrueColumnWidth(19);
            ws.Column(colTminop).SetTrueColumnWidth(19);

            ws.Row(rowIniC).Style.WrapText = true;
            ws.Row(rowIniC).Height = 30;

            var rangoCabecera = ws.Cells[rowIniC, colEmpresa, rowIniC, colTminop];
            rangoCabecera.SetFontBold();
            rangoCabecera.SetFontColor(Color.White);
            rangoCabecera.AutoFilter = true;

            ws.Cells[rowIniC, colEmpresa, rowIniC, colModo].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));
            ws.Cells[rowIniC, colFecVig, rowIniC, colPe].SetBackgroundColor(colorPe);
            ws.Cells[rowIniC, colFecVigMin, rowIniC, colPMin].SetBackgroundColor(colorPMin);
            ws.Cells[rowIniC, colFecVig2, rowIniC, colRendimiento].SetBackgroundColor(colorPr);
            ws.Cells[rowIniC, colTminop, rowIniC, colTminop].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));

            UtilExcel.AllBorders(ws.Cells[rowIniC, colEmpresa, rowIniC, colTminop], ExcelBorderStyle.Thin, colorBorder);
            UtilExcel.BorderAround(ws.Cells[rowIniC, colEmpresa, rowIniC, colTminop], ExcelBorderStyle.Medium, colorBorderG);

            var rowIniTabla = rowIniC;

            foreach (var grpreg in lista.GroupBy(x => x.Central))
            {
                var rowIniG = rowIniC + 1;
                foreach (var reg in grpreg)
                {
                    rowIniC++;
                    ws.Cells[rowIniC, colEmpresa].Value = reg.Emprnomb;
                    ws.Cells[rowIniC, colCentral].Value = reg.Central?.Trim();

                    ws.Cells[rowIniC, colCodigoModo].Value = reg.Grupocodi;
                    ws.Cells[rowIniC, colModo].Value = reg.Gruponomb?.Trim();


                    ws.Cells[rowIniC, colFecVig].Value = reg.FechaVigencia?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPe].Value = reg.Potencia;
                    ws.Cells[rowIniC, colPe].Style.Numberformat.Format = "#,##0.00000";

                    ws.Cells[rowIniC, colFecVigMin].Value = reg.FechaVigenciaPmin?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPMin].Value = reg.PotenciaMinima;
                    ws.Cells[rowIniC, colPMin].Style.Numberformat.Format = "#,##0.00000";

                    ws.Cells[rowIniC, colFecVig2].Value = reg.FechaVigenciaRendimiento?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colRendimiento].Value = reg.Rendimiento;
                    ws.Cells[rowIniC, colRendimiento].Style.Numberformat.Format = "#,##0.00000";

                    if (reg.TieneModificacionPropiedad)
                    {
                        ws.Cells[rowIniC, colFecVig, rowIniC, colPe].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                        ws.Cells[rowIniC, colFecVig, rowIniC, colPe].SetFontColor(Color.White);
                    }

                    if (reg.TieneModificacionPropiedadRendimiento)
                    {
                        ws.Cells[rowIniC, colFecVig2, rowIniC, colRendimiento].SetBackgroundColor(ColorTranslator.FromHtml("#595dd4"));
                        ws.Cells[rowIniC, colFecVig2, rowIniC, colRendimiento].SetFontColor(Color.White);
                    }

                    if (reg.Tminoperacion > 0)
                        ws.Cells[rowIniC, colTminop].Value = reg.Tminoperacion;
                }
                UtilExcel.AllBorders(ws.Cells[rowIniG, colEmpresa, rowIniC, colTminop], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowIniG, colEmpresa, rowIniC, colTminop], ExcelBorderStyle.Medium, colorBorderG);
            }

            var rangoTabla = ws.Cells[rowIniTabla, colEmpresa, rowIniC, colTminop];
            rangoTabla.SetAlignment();
            ws.Cells[rowIniObser, colEmpresa, rowIniC, colTminop].SetFont(fuenteCuerpo);

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }

        /// <summary>
        /// Genera Hoja de Pe Unidades Solar y Eolica
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="titulo"></param>
        /// <param name="hoja"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="aplicativo"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipo"></param>
        private void GenerarHojaPeUnidadesSolarEolica(ExcelPackage xlPackage, string titulo, string hoja, int rowIni, int colIni, int aplicativo, DateTime fechaIni, DateTime fechaFin, int tipo)
        {
            this.ListarEquipoPotenciaEfectiva(aplicativo, fechaIni, fechaFin, tipo, out List<EqEquipoDTO> lista, out List<ResultadoValidacionAplicativo> listaMsj);
            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(hoja);
            ws = xlPackage.Workbook.Worksheets[hoja];

            string fontFamily = "Arial";
            var fuenteTitulo = new Font(fontFamily, 12, FontStyle.Bold);
            var fuenteCuerpo = new Font(fontFamily, 10);
            var colorBorder = ColorTranslator.FromHtml("#dddddd");
            var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");

            var colorPe = ColorTranslator.FromHtml("#4dce4d");

            var colEmpresa = colIni + 1;
            var colCodigo = colEmpresa + 1;
            var colCentral = colCodigo + 1;
            var colTipo = colCentral + 1;
            var colUnidad = colTipo + 1;
            var colFecVig = colUnidad + 1;
            var colPi = colFecVig + 1;


            ws.Cells[rowIni, colEmpresa].Value = titulo;
            ws.Cells[rowIni, colEmpresa, rowIni, colPi].Merge = true;
            ws.Cells[rowIni, colEmpresa].SetFont(fuenteTitulo);
            ws.Cells[rowIni, colEmpresa].SetAlignment();

            var rowIniC = rowIni + 3;

            var rowIniObser = rowIniC;

            if (numCambios > 0)
            {
                ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambios} actualizacion(es) de potencia instalada.";
            }

            if (listaMsj.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Observaciones :";
                ws.Cells[rowIniC, colEmpresa - 1].Style.Font.Color.SetColor(Color.Red);
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaMsj)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.TipoFuenteDatoDesc}: {reg.Descripcion}";
            }
            rowIniC += 2;

            ws.View.FreezePanes(rowIniC + 1, 1);

            ws.Cells[rowIniC, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniC, colCodigo].Value = "Código\r\nCentral";
            ws.Cells[rowIniC, colCentral].Value = "Central";
            ws.Cells[rowIniC, colTipo].Value = "Tipo";
            ws.Cells[rowIniC, colUnidad].Value = "Unidad";

            ws.Cells[rowIniC, colFecVig].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPi].Value = "Potencia Instalada\r\n(MW)";

            ws.Column(colEmpresa).SetTrueColumnWidth(58);
            ws.Column(colCodigo).SetTrueColumnWidth(11);
            ws.Column(colCentral).SetTrueColumnWidth(25);
            ws.Column(colTipo).SetTrueColumnWidth(15);
            ws.Column(colUnidad).SetTrueColumnWidth(54);

            ws.Column(colFecVig).SetTrueColumnWidth(21);
            ws.Column(colPi).SetTrueColumnWidth(19);

            ws.Row(rowIniC).Style.WrapText = true;
            ws.Row(rowIniC).Height = 30;

            var rangoCabecera = ws.Cells[rowIniC, colEmpresa, rowIniC, colPi];
            rangoCabecera.SetFontBold();
            rangoCabecera.SetFontColor(Color.White);
            rangoCabecera.AutoFilter = true;

            ws.Cells[rowIniC, colEmpresa, rowIniC, colUnidad].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));
            ws.Cells[rowIniC, colFecVig, rowIniC, colPi].SetBackgroundColor(colorPe);

            UtilExcel.AllBorders(ws.Cells[rowIniC, colEmpresa, rowIniC, colPi], ExcelBorderStyle.Thin, colorBorder);
            UtilExcel.BorderAround(ws.Cells[rowIniC, colEmpresa, rowIniC, colPi], ExcelBorderStyle.Medium, colorBorderG);

            var rowIniTabla = rowIniC;

            foreach (var grpreg in lista.GroupBy(x => x.Equipadre))
            {
                var rowIniG = rowIniC + 1;
                foreach (var reg in grpreg)
                {
                    rowIniC++;
                    ws.Cells[rowIniC, colEmpresa].Value = reg.Emprnomb;
                    ws.Cells[rowIniC, colCodigo].Value = reg.Equipadre;
                    ws.Cells[rowIniC, colCentral].Value = reg.Central;
                    ws.Cells[rowIniC, colTipo].Value = reg.Famabrev;
                    ws.Cells[rowIniC, colUnidad].Value = reg.Equinomb;

                    ws.Cells[rowIniC, colFecVig].Value = reg.FechaVigencia?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPi].Value = reg.Pe;
                    ws.Cells[rowIniC, colPi].Style.Numberformat.Format = "#,##0.00000";

                    if (reg.TieneModificacionPropiedad)
                    {
                        ws.Cells[rowIniC, colFecVig, rowIniC, colPi].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                        ws.Cells[rowIniC, colFecVig, rowIniC, colPi].SetFontColor(Color.White);
                    }

                }
                UtilExcel.AllBorders(ws.Cells[rowIniG, colEmpresa, rowIniC, colPi], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowIniG, colEmpresa, rowIniC, colPi], ExcelBorderStyle.Medium, colorBorderG);
            }

            var rangoTabla = ws.Cells[rowIniTabla, colEmpresa, rowIniC, colPi];
            rangoTabla.SetAlignment();
            ws.Cells[rowIniObser, colEmpresa, rowIniC, colPi].SetFont(fuenteCuerpo);

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }

        /// <summary>
        /// Genera Hoja Pe de Unidades Hidro
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="titulo"></param>
        /// <param name="hoja"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="aplicativo"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipo"></param>
        private void GenerarHojaPeUnidadesHidro(ExcelPackage xlPackage, string titulo, string hoja, int rowIni, int colIni, int aplicativo, DateTime fechaIni, DateTime fechaFin, int tipo)
        {
            this.ListarEquipoPotenciaEfectiva(aplicativo, fechaIni, fechaFin, tipo, out List<EqEquipoDTO> lista, out List<ResultadoValidacionAplicativo> listaMsj);
            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosGarantizada = lista.Count(x => x.TieneModificacionPropiedadGarantizada);

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(hoja);
            ws = xlPackage.Workbook.Worksheets[hoja];

            string fontFamily = "Arial";
            var fuenteTitulo = new Font(fontFamily, 12, FontStyle.Bold);
            var fuenteCuerpo = new Font(fontFamily, 10);
            var colorBorder = ColorTranslator.FromHtml("#dddddd");
            var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");

            var colorPe = ColorTranslator.FromHtml("#4dce4d");
            var colorPg = ColorTranslator.FromHtml("#9093f3");

            var colEmpresa = colIni + 1;
            var colCodigo = colEmpresa + 1;
            var colCentral = colCodigo + 1;
            var colUnidad = colCentral + 1;
            var colFecVig = colUnidad + 1;
            var colPe = colFecVig + 1;
            var colObserv = colPe + 1;
            var colFecVig2 = colObserv + 1;
            var colPotenciaG = colFecVig2 + 1;
            var colObserv2 = colPotenciaG + 1;


            ws.Cells[rowIni, colEmpresa].Value = titulo;
            ws.Cells[rowIni, colEmpresa, rowIni, colObserv2].Merge = true;
            ws.Cells[rowIni, colEmpresa].SetFont(fuenteTitulo);
            ws.Cells[rowIni, colEmpresa].SetAlignment();

            var rowIniC = rowIni + 3;

            var rowIniObser = rowIniC;

            if (numCambios > 0)
            {
                ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambios} actualizacion(es) de potencia efectiva.";
            }

            if (numCambiosGarantizada > 0)
            {
                ws.Cells[++rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#595dd4"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambiosGarantizada} actualizacion(es) de potencia garantizada.";
            }

            if (listaMsj.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Observaciones :";
                ws.Cells[rowIniC, colEmpresa - 1].Style.Font.Color.SetColor(Color.Red);
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaMsj)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.TipoFuenteDatoDesc}: {reg.Descripcion}";
            }
            rowIniC += 2;

            ws.View.FreezePanes(rowIniC + 1, 1);

            ws.Cells[rowIniC, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniC, colCodigo].Value = "Código\r\nCentral";
            ws.Cells[rowIniC, colCentral].Value = "Central";
            ws.Cells[rowIniC, colUnidad].Value = "Unidad";

            ws.Cells[rowIniC, colFecVig].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPe].Value = "Potencia Efectiva\r\n(MW)";
            ws.Cells[rowIniC, colObserv].Value = "Observación";

            ws.Cells[rowIniC, colFecVig2].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPotenciaG].Value = "Potencia Garantizada\r\n(MW)";
            ws.Cells[rowIniC, colObserv2].Value = "Observación";

            ws.Column(colEmpresa).SetTrueColumnWidth(58);
            ws.Column(colCodigo).SetTrueColumnWidth(11);
            ws.Column(colCentral).SetTrueColumnWidth(25);
            ws.Column(colUnidad).SetTrueColumnWidth(54);

            ws.Column(colFecVig).SetTrueColumnWidth(21);
            ws.Column(colPe).SetTrueColumnWidth(19);
            ws.Column(colObserv).SetTrueColumnWidth(54);

            ws.Column(colFecVig2).SetTrueColumnWidth(21);
            ws.Column(colPotenciaG).SetTrueColumnWidth(19);
            ws.Column(colObserv2).SetTrueColumnWidth(54);

            ws.Row(rowIniC).Style.WrapText = true;
            ws.Row(rowIniC).Height = 30;

            var rangoCabecera = ws.Cells[rowIniC, colEmpresa, rowIniC, colObserv2];
            rangoCabecera.SetFontBold();
            rangoCabecera.SetFontColor(Color.White);
            rangoCabecera.AutoFilter = true;

            ws.Cells[rowIniC, colEmpresa, rowIniC, colUnidad].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));
            ws.Cells[rowIniC, colFecVig, rowIniC, colObserv].SetBackgroundColor(colorPe);
            ws.Cells[rowIniC, colFecVig2, rowIniC, colObserv2].SetBackgroundColor(colorPg);

            UtilExcel.AllBorders(ws.Cells[rowIniC, colEmpresa, rowIniC, colObserv2], ExcelBorderStyle.Thin, colorBorder);
            UtilExcel.BorderAround(ws.Cells[rowIniC, colEmpresa, rowIniC, colObserv2], ExcelBorderStyle.Medium, colorBorderG);

            var rowIniTabla = rowIniC;

            foreach (var grpreg in lista.GroupBy(x => x.Equipadre))
            {
                var rowIniG = rowIniC + 1;
                foreach (var reg in grpreg)
                {
                    rowIniC++;
                    ws.Cells[rowIniC, colEmpresa].Value = reg.Emprnomb;
                    ws.Cells[rowIniC, colCodigo].Value = reg.Equipadre;
                    ws.Cells[rowIniC, colCentral].Value = reg.Central;
                    ws.Cells[rowIniC, colUnidad].Value = reg.Equinomb;

                    ws.Cells[rowIniC, colFecVig].Value = reg.FechaVigencia?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPe].Value = reg.Pe;
                    ws.Cells[rowIniC, colPe].Style.Numberformat.Format = "#,##0.00000";
                    ws.Cells[rowIniC, colObserv].Value = reg.Comentario;

                    ws.Cells[rowIniC, colFecVig2].Value = reg.FechaVigenciaGarantizada?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPotenciaG].Value = reg.Potenciagarantizada;
                    ws.Cells[rowIniC, colPotenciaG].Style.Numberformat.Format = "#,##0.00000";
                    ws.Cells[rowIniC, colObserv2].Value = reg.ComentarioGarantizada;

                    if (reg.TieneModificacionPropiedad)
                    {
                        ws.Cells[rowIniC, colFecVig, rowIniC, colObserv].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                        ws.Cells[rowIniC, colFecVig, rowIniC, colObserv].SetFontColor(Color.White);
                    }

                    if (reg.TieneModificacionPropiedadGarantizada)
                    {
                        ws.Cells[rowIniC, colFecVig2, rowIniC, colObserv2].SetBackgroundColor(ColorTranslator.FromHtml("#595dd4"));
                        ws.Cells[rowIniC, colFecVig2, rowIniC, colObserv2].SetFontColor(Color.White);
                    }

                }
                UtilExcel.AllBorders(ws.Cells[rowIniG, colEmpresa, rowIniC, colObserv2], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowIniG, colEmpresa, rowIniC, colObserv2], ExcelBorderStyle.Medium, colorBorderG);
            }

            var rangoTabla = ws.Cells[rowIniTabla, colEmpresa, rowIniC, colObserv2];
            rangoTabla.SetAlignment();
            ws.Cells[rowIniTabla + 1, colEmpresa, rowIniC, colEmpresa].SetAlignment(ExcelHorizontalAlignment.Left);
            ws.Cells[rowIniTabla + 1, colCentral, rowIniC, colCentral].SetAlignment(ExcelHorizontalAlignment.Left);
            ws.Cells[rowIniTabla + 1, colObserv, rowIniC, colObserv].SetAlignment(ExcelHorizontalAlignment.Left);
            ws.Cells[rowIniTabla + 1, colObserv2, rowIniC, colObserv2].SetAlignment(ExcelHorizontalAlignment.Left);
            ws.Cells[rowIniObser, colEmpresa, rowIniC, colObserv2].SetFont(fuenteCuerpo);

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }

        /// <summary>
        /// Genera Hoja Pe de Unidades Hidro
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="titulo"></param>
        /// <param name="hoja"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="aplicativo"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipo"></param>
        private void GenerarHojaPeGeneradoresHidro(ExcelPackage xlPackage, string titulo, string hoja, int rowIni, int colIni, int aplicativo, DateTime fechaIni, DateTime fechaFin, int tipo)
        {
            this.ListarEquipoPotenciaEfectiva(aplicativo, fechaIni, fechaFin, tipo, out List<EqEquipoDTO> lista, out List<ResultadoValidacionAplicativo> listaMsj);
            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosGarantizada = lista.Count(x => x.TieneModificacionPropiedadGarantizada);

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(hoja);
            ws = xlPackage.Workbook.Worksheets[hoja];

            string fontFamily = "Arial";
            var fuenteTitulo = new Font(fontFamily, 12, FontStyle.Bold);
            var fuenteCuerpo = new Font(fontFamily, 10);
            var colorBorder = ColorTranslator.FromHtml("#dddddd");
            var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");

            var colorPe = ColorTranslator.FromHtml("#4dce4d");
            var colorPg = ColorTranslator.FromHtml("#9093f3");

            var colEmpresa = colIni + 1;
            var colCentral = colEmpresa + 1;
            var colCodigo = colCentral + 1;
            var colUnidad = colCodigo + 1;
            var colFecVig = colUnidad + 1;
            var colPe = colFecVig + 1;
            var colObserv = colPe + 1;
            var colFecVig2 = colObserv + 1;
            var colPotenciaG = colFecVig2 + 1;
            var colObserv2 = colPotenciaG + 1;


            ws.Cells[rowIni, colEmpresa].Value = titulo;
            ws.Cells[rowIni, colEmpresa, rowIni, colObserv2].Merge = true;
            ws.Cells[rowIni, colEmpresa].SetFont(fuenteTitulo);
            ws.Cells[rowIni, colEmpresa].SetAlignment();

            var rowIniC = rowIni + 3;

            var rowIniObser = rowIniC;

            if (numCambios > 0)
            {
                ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambios} actualizacion(es) de potencia efectiva.";
            }

            if (numCambiosGarantizada > 0)
            {
                ws.Cells[++rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#595dd4"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambiosGarantizada} actualizacion(es) de potencia garantizada.";
            }

            if (listaMsj.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Observaciones :";
                ws.Cells[rowIniC, colEmpresa - 1].Style.Font.Color.SetColor(Color.Red);
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaMsj)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.TipoFuenteDatoDesc}: {reg.Descripcion}";
            }
            rowIniC += 2;

            ws.View.FreezePanes(rowIniC + 1, 1);

            ws.Cells[rowIniC, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniC, colCentral].Value = "Central";
            ws.Cells[rowIniC, colCodigo].Value = "Código\r\nEquipo";
            ws.Cells[rowIniC, colUnidad].Value = "Equipo";

            ws.Cells[rowIniC, colFecVig].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPe].Value = "Potencia Efectiva\r\n(MW)";
            ws.Cells[rowIniC, colObserv].Value = "Observación";

            ws.Cells[rowIniC, colFecVig2].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPotenciaG].Value = "Potencia Garantizada\r\n(MW)";
            ws.Cells[rowIniC, colObserv2].Value = "Observación";

            ws.Column(colEmpresa).SetTrueColumnWidth(58);
            ws.Column(colCentral).SetTrueColumnWidth(25);
            ws.Column(colCodigo).SetTrueColumnWidth(11);
            ws.Column(colUnidad).SetTrueColumnWidth(54);

            ws.Column(colFecVig).SetTrueColumnWidth(21);
            ws.Column(colPe).SetTrueColumnWidth(19);
            ws.Column(colObserv).SetTrueColumnWidth(54);

            ws.Column(colFecVig2).SetTrueColumnWidth(21);
            ws.Column(colPotenciaG).SetTrueColumnWidth(19);
            ws.Column(colObserv2).SetTrueColumnWidth(54);

            ws.Row(rowIniC).Style.WrapText = true;
            ws.Row(rowIniC).Height = 30;

            var rangoCabecera = ws.Cells[rowIniC, colEmpresa, rowIniC, colObserv2];
            rangoCabecera.SetFontBold();
            rangoCabecera.SetFontColor(Color.White);
            rangoCabecera.AutoFilter = true;

            ws.Cells[rowIniC, colEmpresa, rowIniC, colUnidad].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));
            ws.Cells[rowIniC, colFecVig, rowIniC, colObserv].SetBackgroundColor(colorPe);
            ws.Cells[rowIniC, colFecVig2, rowIniC, colObserv2].SetBackgroundColor(colorPg);

            UtilExcel.AllBorders(ws.Cells[rowIniC, colEmpresa, rowIniC, colObserv2], ExcelBorderStyle.Thin, colorBorder);
            UtilExcel.BorderAround(ws.Cells[rowIniC, colEmpresa, rowIniC, colObserv2], ExcelBorderStyle.Medium, colorBorderG);

            var rowIniTabla = rowIniC;

            foreach (var grpreg in lista.GroupBy(x => x.Equipadre))
            {
                var rowIniG = rowIniC + 1;
                foreach (var reg in grpreg)
                {
                    rowIniC++;
                    ws.Cells[rowIniC, colEmpresa].Value = reg.Emprnomb;
                    ws.Cells[rowIniC, colCentral].Value = reg.Central;
                    ws.Cells[rowIniC, colCodigo].Value = reg.Equicodi;
                    ws.Cells[rowIniC, colUnidad].Value = reg.UnidadnombPR25;

                    ws.Cells[rowIniC, colFecVig].Value = reg.FechaVigencia?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPe].Value = reg.Pe;
                    ws.Cells[rowIniC, colPe].Style.Numberformat.Format = "#,##0.00000";
                    ws.Cells[rowIniC, colObserv].Value = reg.Comentario;

                    ws.Cells[rowIniC, colFecVig2].Value = reg.FechaVigenciaGarantizada?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPotenciaG].Value = reg.Potenciagarantizada;
                    ws.Cells[rowIniC, colPotenciaG].Style.Numberformat.Format = "#,##0.00000";
                    ws.Cells[rowIniC, colObserv2].Value = reg.ComentarioGarantizada;

                    if (reg.TieneModificacionPropiedad)
                    {
                        ws.Cells[rowIniC, colFecVig, rowIniC, colObserv].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                        ws.Cells[rowIniC, colFecVig, rowIniC, colObserv].SetFontColor(Color.White);
                    }

                    if (reg.TieneModificacionPropiedadGarantizada)
                    {
                        ws.Cells[rowIniC, colFecVig2, rowIniC, colObserv2].SetBackgroundColor(ColorTranslator.FromHtml("#595dd4"));
                        ws.Cells[rowIniC, colFecVig2, rowIniC, colObserv2].SetFontColor(Color.White);
                    }

                }
                UtilExcel.AllBorders(ws.Cells[rowIniG, colEmpresa, rowIniC, colObserv2], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowIniG, colEmpresa, rowIniC, colObserv2], ExcelBorderStyle.Medium, colorBorderG);
            }

            var rangoTabla = ws.Cells[rowIniTabla, colEmpresa, rowIniC, colObserv2];
            rangoTabla.SetAlignment();
            ws.Cells[rowIniTabla + 1, colEmpresa, rowIniC, colEmpresa].SetAlignment(ExcelHorizontalAlignment.Left);
            ws.Cells[rowIniTabla + 1, colCentral, rowIniC, colCentral].SetAlignment(ExcelHorizontalAlignment.Left);
            ws.Cells[rowIniTabla + 1, colObserv, rowIniC, colObserv].SetAlignment(ExcelHorizontalAlignment.Left);
            ws.Cells[rowIniTabla + 1, colObserv2, rowIniC, colObserv2].SetAlignment(ExcelHorizontalAlignment.Left);
            ws.Cells[rowIniObser, colEmpresa, rowIniC, colObserv2].SetFont(fuenteCuerpo);

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }

        /// <summary>
        /// Genera Hoja de Pe Unidades Termo
        /// </summary>
        /// <param name="xlPackage"></param>
        /// <param name="titulo"></param>
        /// <param name="hoja"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="aplicativo"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipo"></param>
        private void GenerarHojaPeUnidadesTermo(ExcelPackage xlPackage, string titulo, string hoja, int rowIni, int colIni, int aplicativo, DateTime fechaIni, DateTime fechaFin, int tipo)
        {
            this.ListarEquipoPotenciaEfectiva(aplicativo, fechaIni, fechaFin, tipo, out List<EqEquipoDTO> lista, out List<ResultadoValidacionAplicativo> listaMsj);
            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosRend = lista.Count(x => x.TieneModificacionPropiedadRendimiento);

            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(hoja);
            ws = xlPackage.Workbook.Worksheets[hoja];

            string fontFamily = "Arial";
            var fuenteTitulo = new Font(fontFamily, 12, FontStyle.Bold);
            var fuenteCuerpo = new Font(fontFamily, 10);
            var colorBorder = ColorTranslator.FromHtml("#dddddd");
            var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");

            var colorPe = ColorTranslator.FromHtml("#4dce4d");
            var colorPMin = ColorTranslator.FromHtml("#ffa040");
            var colorRend = ColorTranslator.FromHtml("#9093f3");

            var colEmpresa = colIni + 1;
            var colCentral = colEmpresa + 1;
            var colCodigo = colCentral + 1;
            var colEquipo = colCodigo + 1;
            var colCodigoModo = colEquipo + 1;
            var colModo = colCodigoModo + 1;
            var colUnidad = colModo + 1;
            var colFecVig = colUnidad + 1;
            var colPe = colFecVig + 1;

            var colFecVigMin = colPe + 1;
            var colPMin = colFecVigMin + 1;

            var colFecVig2 = colPMin + 1;
            var colRendimiento = colFecVig2 + 1;
            int colTminop = colRendimiento + 1;

            ws.Cells[rowIni, colEmpresa].Value = titulo;
            ws.Cells[rowIni, colEmpresa, rowIni, colRendimiento].Merge = true;
            ws.Cells[rowIni, colEmpresa].SetFont(fuenteTitulo);
            ws.Cells[rowIni, colEmpresa].SetAlignment();

            var rowIniC = rowIni + 3;

            var rowIniObser = rowIniC;

            if (numCambios > 0)
            {
                ws.Cells[rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambios} actualizacion(es) de potencia efectiva.";
            }

            if (numCambiosRend > 0)
            {
                ws.Cells[++rowIniC, colEmpresa - 1].SetBackgroundColor(ColorTranslator.FromHtml("#595dd4"));
                ws.Cells[rowIniC, colEmpresa].Value = $"Existe(n) {numCambiosRend} actualizacion(es) de rendimiento.";
            }

            if (listaMsj.Any())
            {
                rowIniC++;
                ws.Cells[++rowIniC, colEmpresa - 1].Value = "Observaciones :";
                ws.Cells[rowIniC, colEmpresa - 1].Style.Font.Color.SetColor(Color.Red);
                ws.Cells[rowIniC, colEmpresa - 1].SetFontBold();

                foreach (var reg in listaMsj)
                    ws.Cells[++rowIniC, colEmpresa].Value = $"{reg.TipoFuenteDatoDesc}: {reg.Descripcion}";
            }

            ws.Cells[++rowIniC, colEmpresa - 1].Value = "Nota :";
            ws.Cells[++rowIniC, colEmpresa].Value = "(*): Equipo de un modo de operación especial.";
            ws.Cells[rowIniC, colEmpresa].SetFontColor(Color.Blue);

            rowIniC += 2;

            ws.View.FreezePanes(rowIniC + 1, 1);

            ws.Cells[rowIniC, colEmpresa].Value = "Empresa";
            ws.Cells[rowIniC, colCentral].Value = "Central";
            ws.Cells[rowIniC, colCodigo].Value = "Código\r\nEquipo";
            ws.Cells[rowIniC, colEquipo].Value = "Equipo";
            ws.Cells[rowIniC, colCodigoModo].Value = "Código\r\nModo";
            ws.Cells[rowIniC, colModo].Value = "Modo de Operación";
            ws.Cells[rowIniC, colUnidad].Value = "Nombre Unidad";

            ws.Cells[rowIniC, colFecVig].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPe].Value = "Potencia Efectiva\r\n(MW)";

            ws.Cells[rowIniC, colFecVigMin].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colPMin].Value = "Potencia Mínima\r\n(MW)";

            ws.Cells[rowIniC, colFecVig2].Value = "Fecha de Vigencia";
            ws.Cells[rowIniC, colRendimiento].Value = "Rendimiento\r\n(gal, kg, m3)";
            ws.Cells[rowIniC, colTminop].Value = "Tmin_op\r\n(h)";

            ws.Column(colEmpresa).SetTrueColumnWidth(58);
            ws.Column(colCodigo).SetTrueColumnWidth(11);
            ws.Column(colEquipo).SetTrueColumnWidth(23);
            ws.Column(colCentral).SetTrueColumnWidth(25);
            ws.Column(colModo).SetTrueColumnWidth(50);
            ws.Column(colUnidad).SetTrueColumnWidth(36);

            ws.Column(colFecVig).SetTrueColumnWidth(21);
            ws.Column(colPe).SetTrueColumnWidth(19);

            ws.Column(colFecVigMin).SetTrueColumnWidth(21);
            ws.Column(colPMin).SetTrueColumnWidth(19);

            ws.Column(colFecVig2).SetTrueColumnWidth(21);
            ws.Column(colRendimiento).SetTrueColumnWidth(19);
            ws.Column(colTminop).SetTrueColumnWidth(19);

            ws.Row(rowIniC).Style.WrapText = true;
            ws.Row(rowIniC).Height = 30;

            var rangoCabecera = ws.Cells[rowIniC, colEmpresa, rowIniC, colTminop];
            rangoCabecera.SetFontBold();
            rangoCabecera.SetFontColor(Color.White);
            rangoCabecera.AutoFilter = true;

            ws.Cells[rowIniC, colEmpresa, rowIniC, colModo].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));
            ws.Cells[rowIniC, colFecVig, rowIniC, colPe].SetBackgroundColor(colorPe);
            ws.Cells[rowIniC, colFecVigMin, rowIniC, colPMin].SetBackgroundColor(colorPMin);
            ws.Cells[rowIniC, colFecVig2, rowIniC, colRendimiento].SetBackgroundColor(colorRend);
            ws.Cells[rowIniC, colUnidad].SetBackgroundColor(ColorTranslator.FromHtml("#9370db"));
            ws.Cells[rowIniC, colTminop, rowIniC, colTminop].SetBackgroundColor(ColorTranslator.FromHtml("#2980b9"));

            UtilExcel.AllBorders(ws.Cells[rowIniC, colEmpresa, rowIniC, colTminop], ExcelBorderStyle.Thin, colorBorder);
            UtilExcel.BorderAround(ws.Cells[rowIniC, colEmpresa, rowIniC, colTminop], ExcelBorderStyle.Medium, colorBorderG);

            var rowIniTabla = rowIniC;

            foreach (var grpreg in lista.GroupBy(x => x.Equipadre))
            {
                var rowIniG = rowIniC + 1;
                foreach (var reg in grpreg)
                {
                    rowIniC++;
                    ws.Cells[rowIniC, colEmpresa].Value = reg.Emprnomb;
                    ws.Cells[rowIniC, colCentral].Value = reg.Central;

                    if (reg.Grupoincremental != 1) ws.Cells[rowIniC, colCodigo].Value = reg.Equicodi;
                    ws.Cells[rowIniC, colEquipo].Value = reg.Equiabrev;

                    if (reg.EsUnidadModoEspecial)
                    {
                        var rich = ws.Cells[rowIniC, colEquipo].RichText.Add("(*)");
                        rich.Color = Color.Blue;
                    }

                    if (reg.Grupoincremental == 1) ws.Cells[rowIniC, colEquipo].SetBackgroundColor(ColorTranslator.FromHtml("#FFFF00"));


                    ws.Cells[rowIniC, colCodigoModo].Value = reg.Grupocodi;
                    ws.Cells[rowIniC, colModo].Value = reg.Gruponomb;
                    ws.Cells[rowIniC, colUnidad].Value = reg.UnidadnombPR25;


                    ws.Cells[rowIniC, colFecVig].Value = reg.FechaVigencia?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPe].Value = reg.Pe;
                    ws.Cells[rowIniC, colPe].Style.Numberformat.Format = "#,##0.00000";

                    ws.Cells[rowIniC, colFecVigMin].Value = reg.FechaVigenciaPmin?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colPMin].Value = reg.Pmin;
                    ws.Cells[rowIniC, colPMin].Style.Numberformat.Format = "#,##0.00000";

                    ws.Cells[rowIniC, colFecVig2].Value = reg.FechaVigenciaRendimiento?.ToString(ConstantesAppServicio.FormatoFechaYMD);
                    ws.Cells[rowIniC, colRendimiento].Value = reg.Rendimiento;
                    ws.Cells[rowIniC, colRendimiento].Style.Numberformat.Format = "#,##0.00000";

                    if (reg.TieneModificacionPropiedad)
                    {
                        ws.Cells[rowIniC, colFecVig, rowIniC, colPe].SetBackgroundColor(ColorTranslator.FromHtml("#00bb00"));
                        ws.Cells[rowIniC, colFecVig, rowIniC, colPe].SetFontColor(Color.White);
                    }

                    if (reg.TieneModificacionPropiedadRendimiento)
                    {
                        ws.Cells[rowIniC, colFecVig2, rowIniC, colRendimiento].SetBackgroundColor(ColorTranslator.FromHtml("#595dd4"));
                        ws.Cells[rowIniC, colFecVig2, rowIniC, colRendimiento].SetFontColor(Color.White);
                    }
                    if (reg.Tminoperacion > 0)
                        ws.Cells[rowIniC, colTminop].Value = reg.Tminoperacion;
                }
                UtilExcel.AllBorders(ws.Cells[rowIniG, colEmpresa, rowIniC, colTminop], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowIniG, colEmpresa, rowIniC, colTminop], ExcelBorderStyle.Medium, colorBorderG);
            }

            var rangoTabla = ws.Cells[rowIniTabla, colEmpresa, rowIniC, colTminop];
            rangoTabla.SetAlignment();
            ws.Cells[rowIniObser, colEmpresa, rowIniC, colTminop].SetFont(fuenteCuerpo);

            ws.View.ShowGridLines = false;
            ws.View.ZoomScale = 85;
        }

        /// <summary>
        /// Genera reporte formato Html de PE Unidades Hidro
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="listaMsj"></param>
        /// <returns></returns>
        private string GenerarHtmlPeUnidadesHidro(List<EqEquipoDTO> lista, List<ResultadoValidacionAplicativo> listaMsj)
        {
            StringBuilder strHtml = new StringBuilder();

            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosGarantizada = lista.Count(x => x.TieneModificacionPropiedadGarantizada);

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 5;
            nfi.NumberDecimalSeparator = ",";

            strHtml.Append("<div>");
            if (numCambios > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: 95%;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #00bb00 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia efectiva.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambios);
            }
            if (numCambiosGarantizada > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #595dd4 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia garantizada.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambiosGarantizada);
            }
            if (listaMsj.Any())
            {
                strHtml.Append("<b style='color: red;'>Observaciones</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaMsj)
                    strHtml.AppendFormat("<li>{0}: {1}</li>", reg.TipoFuenteDatoDesc, reg.Descripcion);
                strHtml.Append("</ul>");
            }
            strHtml.Append("</div>");

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Código<br/>Central</th>
                                <th>Central</th>

                                <th>Unidad</th>

                                <th style='background-color: #4dce4d'> Fecha de Vigencia</th>
                                <th style='background-color: #4dce4d'>Potencia Efectiva <br/>(MW)</th>
                                <th style='background-color: #4dce4d'>Observación</th>

                                <th style='background-color: #9093f3'> Fecha de Vigencia</th>
                                <th style='background-color: #9093f3'>Potencia Garantizada <br/>(MW)</th>
                                <th style='background-color: #9093f3'>Observación</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            int filaPar = 0;
            string centralActual = lista.Any() ? lista.First().Central : string.Empty;
            foreach (var reg in lista)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";

                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: left;padding: 3px;'>{1}</td>
                                        <td style='text-align: right;padding-right: 10px;'>{2}</td>
                                        <td style='text-align: left;padding-left: 10px;'>{3}</td>

                                        <td style='text-align: center;'>{4}</td>

                                        <td style='text-align: center;{9}'>{6}</td>
                                        <td style='text-align: center;padding-right: 10px;{9}'>{5}</td>
                                        <td style='text-align: left;{9}'>{11}</td>

                                        <td style='text-align: center;{10}'>{8}</td>
                                        <td style='text-align: center;padding-right: 10px;{10}'>{7}</td>
                                        <td style='text-align: left;{10}'>{12}</td>
                                    </tr>
                                    "
                                , filaClase
                                , reg.Emprnomb
                                , reg.Equipadre
                                , reg.Central

                                , reg.Equinomb

                                , reg.Pe != null ? reg.Pe.Value.ToString("N", nfi) : string.Empty
                                , reg.FechaVigencia != null ? reg.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty

                                , reg.Potenciagarantizada != null ? reg.Potenciagarantizada.Value.ToString("N", nfi) : string.Empty
                                , reg.FechaVigenciaGarantizada != null ? reg.FechaVigenciaGarantizada.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty

                                , reg.TieneModificacionPropiedad ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty
                                , reg.TieneModificacionPropiedadGarantizada ? "background-color: #595dd4 !important; color: white; font-weight: bold;" : string.Empty

                                , reg.Comentario
                                , reg.ComentarioGarantizada

                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera reporte formato Html de PE Unidades Hidro
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="listaMsj"></param>
        /// <returns></returns>
        private string GenerarHtmlPeGeneradoresHidro(List<EqEquipoDTO> lista, List<ResultadoValidacionAplicativo> listaMsj)
        {
            StringBuilder strHtml = new StringBuilder();

            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosGarantizada = lista.Count(x => x.TieneModificacionPropiedadGarantizada);

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 5;
            nfi.NumberDecimalSeparator = ",";

            strHtml.Append("<div>");
            if (numCambios > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: 95%;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #00bb00 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia efectiva.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambios);
            }
            if (numCambiosGarantizada > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #595dd4 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia garantizada.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambiosGarantizada);
            }
            if (listaMsj.Any())
            {
                strHtml.Append("<b style='color: red;'>Observaciones</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaMsj)
                    strHtml.AppendFormat("<li>{0}: {1}</li>", reg.TipoFuenteDatoDesc, reg.Descripcion);
                strHtml.Append("</ul>");
            }
            strHtml.Append("</div>");

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Central</th>

                                <th>Código<br/>Equipo</th>
                                <th>Equipo</th>

                                <th style='background-color: #4dce4d'>Fecha de Vigencia</th>
                                <th style='background-color: #4dce4d'>Potencia Efectiva <br/>(MW)</th>
                                <th style='background-color: #4dce4d'>Observación</th>

                                <th style='background-color: #9093f3'> Fecha de Vigencia</th>
                                <th style='background-color: #9093f3'>Potencia Garantizada <br/>(MW)</th>
                                <th style='background-color: #9093f3'>Observación</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            int filaPar = 0;
            string centralActual = lista.Any() ? lista.First().Central : string.Empty;
            foreach (var reg in lista)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";

                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: left;padding: 3px;'>{1}</td>
                                        <td style='text-align: left;padding-left: 10px;'>{2}</td>

                                        <td style='text-align: right;padding-right: 10px;'>{3}</td>
                                        <td style='text-align: center;'>{4}</td>

                                        <td style='text-align: center;{9}'>{6}</td>
                                        <td style='text-align: center;padding-right: 10px;{9}'>{5}</td>
                                        <td style='text-align: left;{9}'>{11}</td>

                                        <td style='text-align: center;{10}'>{8}</td>
                                        <td style='text-align: center;padding-right: 10px;{10}'>{7}</td>
                                        <td style='text-align: left;{10}'>{12}</td>
                                    </tr>
                                    "
                                , filaClase
                                , reg.Emprnomb
                                , reg.Central

                                , reg.Equicodi
                                , reg.UnidadnombPR25

                                , reg.Pe != null ? reg.Pe.Value.ToString("N", nfi) : string.Empty
                                , reg.FechaVigencia != null ? reg.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty

                                , reg.Potenciagarantizada != null ? reg.Potenciagarantizada.Value.ToString("N", nfi) : string.Empty
                                , reg.FechaVigenciaGarantizada != null ? reg.FechaVigenciaGarantizada.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty

                                , reg.TieneModificacionPropiedad ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty
                                , reg.TieneModificacionPropiedadGarantizada ? "background-color: #595dd4 !important; color: white; font-weight: bold;" : string.Empty

                                , reg.Comentario
                                , reg.ComentarioGarantizada

                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera reporte formato Html de PE Unidades Hidro
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="listaMsj"></param>
        /// <returns></returns>
        private string GenerarHtmlPeUnidadesSolarEolica(List<EqEquipoDTO> lista, List<ResultadoValidacionAplicativo> listaMsj)
        {
            StringBuilder strHtml = new StringBuilder();

            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 5;
            nfi.NumberDecimalSeparator = ",";

            strHtml.Append("<div>");
            if (numCambios > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #00bb00 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia instalada.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambios);
            }
            if (listaMsj.Any())
            {
                strHtml.Append("<b style='color: red;'>Observaciones</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaMsj)
                    strHtml.AppendFormat("<li>{0}: {1}</li>", reg.TipoFuenteDatoDesc, reg.Descripcion);
                strHtml.Append("</ul>");
            }
            strHtml.Append("</div>");

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Código<br/>Central</th>
                                <th>Central</th>

                                <th>Tipo</th>
                                <th>Unidad</th>

                                <th style='background-color: #4dce4d'> Fecha de Vigencia</th>
                                <th style='background-color: #4dce4d'>Potencia Instalada <br/>(MW)</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            int filaPar = 0;
            string centralActual = lista.Any() ? lista.First().Central : string.Empty;
            foreach (var reg in lista)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";
                string styleIncremental = reg.Grupoincremental == 1 ? "background-color: #FFFF00;" : "";
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: left;padding: 3px;'>{1}</td>
                                        <td style='text-align: right;padding-right: 10px;'>{2}</td>
                                        <td style='text-align: left;padding-left: 10px;'>{3}</td>

                                        <td style='text-align: center;'>{8}</td>
                                        <td style='text-align: center;'>{4}</td>

                                        <td style='text-align: center;{7}'>{6}</td>
                                        <td style='text-align: center;padding-right: 10px;{7}'>{5}</td>
                                    </tr>
                                    "
                                , filaClase
                                , reg.Emprnomb
                                , reg.Equipadre
                                , reg.Central

                                , reg.Equinomb

                                , reg.Pe != null ? reg.Pe.Value.ToString("N", nfi) : string.Empty
                                , reg.FechaVigencia != null ? reg.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.TieneModificacionPropiedad ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty
                                , reg.Famabrev
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera reporte formato Html de PE Unidades Termo
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="listaMsj"></param>
        /// <returns></returns>
        private string GenerarHtmlPeUnidadesTermo(List<EqEquipoDTO> lista, List<ResultadoValidacionAplicativo> listaMsj)
        {
            StringBuilder strHtml = new StringBuilder();

            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosRend = lista.Count(x => x.TieneModificacionPropiedadRendimiento);

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 5;
            nfi.NumberDecimalSeparator = ",";

            strHtml.Append("<div>");
            if (numCambios > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #00bb00 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia efectiva.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambios);
            }
            if (numCambiosRend > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #595dd4 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de rendimiento.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambiosRend);
            }
            if (listaMsj.Any())
            {
                strHtml.Append("<b style='color: red;'>Observaciones</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaMsj)
                    strHtml.AppendFormat("<li>{0}: {1}</li>", reg.TipoFuenteDatoDesc, reg.Descripcion);
                strHtml.Append("</ul>");
            }

            strHtml.Append("</div>");

            strHtml.Append(@"
                <div>
                    <b>Nota</b>: <br/>
                    <ul>
                        <li><span style='color: blue; '>(*)</span>: Equipo de un modo de operación especial.</li>
                    </ul>
                </div>
            ");

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Central</th>

                                <th>Código<br/>Equipo</th>
                                <th>Equipo</th>
                                <th>Código<br/>Modo</th>
                                <th>Modo de operación</th>

                                <th style='background-color: #9370db'>Nombre Unidad</th>

                                <th style='background-color: #4dce4d'> Fecha de Vigencia</th>
                                <th style='background-color: #4dce4d'>Potencia Efectiva <br/>(MW)</th>

                                <th style='background-color: #ffa040'> Fecha de Vigencia</th>
                                <th style='background-color: #ffa040'>Potencia Mínima <br/>(MW)</th>

                                <th style='background-color: #9093f3'>Fecha de Vigencia</th>
                                <th style='background-color: #9093f3'>Rendimiento <br/>(gal, kg, m3)</th>

                                <th>Tmin_op <br/> (h)</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            int filaPar = 0;
            string centralActual = lista.Any() ? lista.First().Central : string.Empty;
            foreach (var reg in lista)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";
                string styleIncremental = reg.Grupoincremental == 1 ? "background-color: #FFFF00;" : "";
                string styleEspecial = reg.EsUnidadModoEspecial ? " <span style='color: blue; '>(*)</span> " : "";
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>
                                        <td style='text-align: center;'>{2}</td>

                                        <td style='text-align: right; '>{3}</td>
                                        <td style='text-align: center;{5}'>{4}</td>

                                        <td style='text-align: center;'>{7}</td>
                                        <td style='text-align: center;'>{8}</td>

                                        <td style='text-align: center;'>{6}</td>

                                        <td style='text-align: center;{11}'>{9}</td>
                                        <td style='text-align: center;{11}'>{10}</td>

                                        <td style='text-align: center;'>{12}</td>
                                        <td style='text-align: center;'>{13}</td>

                                        <td style='text-align: center;{16}'>{14}</td>
                                        <td style='text-align: center;{16}'>{15}</td>
                                        <td style='text-align: center;'>{17}</td>
                                    </tr>
                                    "
                                , filaClase
                                , reg.Emprnomb
                                , reg.Central

                                , reg.Grupoincremental == 1 ? "" : reg.Equicodi.ToString()
                                , reg.Equiabrev + styleEspecial
                                , styleIncremental
                                , reg.UnidadnombPR25

                                , reg.Grupocodi
                                , reg.Gruponomb
                                , reg.FechaVigencia != null ? reg.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Pe != null ? reg.Pe.Value.ToString("N", nfi) : string.Empty

                                , reg.TieneModificacionPropiedad ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty

                                , reg.FechaVigenciaPmin != null ? reg.FechaVigenciaPmin.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Pmin != null ? reg.Pmin.Value.ToString("N", nfi) : string.Empty

                                , reg.FechaVigenciaRendimiento != null ? reg.FechaVigenciaRendimiento.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Rendimiento != null ? reg.Rendimiento.Value.ToString("N", nfi) : string.Empty

                                , reg.TieneModificacionPropiedadRendimiento ? "background-color: #595dd4 !important; color: white; font-weight: bold;" : string.Empty
                                , (reg.Tminoperacion > 0 ? reg.Tminoperacion.ToString() : string.Empty)
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera reporte formato Html de PE Unidades Termo
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="listaMsj"></param>
        /// <returns></returns>
        private string GenerarHtmlPeYPfUnidadesTermo(List<EqEquipoDTO> lista, List<ResultadoValidacionAplicativo> listaMsj)
        {
            StringBuilder strHtml = new StringBuilder();

            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosPf = lista.Count(x => x.TieneModificacionPropiedadPfirme);

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 5;
            nfi.NumberDecimalSeparator = ",";

            strHtml.Append("<div>");
            if (numCambios > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #00bb00 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia efectiva.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambios);
            }
            if (numCambiosPf > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #00bb00 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia firme.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambiosPf);
            }
            if (listaMsj.Any())
            {
                strHtml.Append("<b style='color: red;'>Observaciones</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaMsj)
                    strHtml.AppendFormat("<li>{0}: {1}</li>", reg.TipoFuenteDatoDesc, reg.Descripcion);
                strHtml.Append("</ul>");
            }

            strHtml.Append("</div>");



            strHtml.Append(@"
                <div>
                    <b>Nota</b>: <br/>
                    <ul>
                        <li><span style='color: blue; '>(*)</span>: Equipo de un modo de operación especial.</li>
                    </ul>
                </div>
            ");

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Central</th>

                                <th>Código<br/>Equipo</th>
                                <th>Equipo</th>
                                <th style='background-color: #9370db'>Nombre Unidad</th>

                                <th>Código<br/>Modo</th>
                                <th>Modo de operación</th>

                                <th style='background-color: #4dce4d'> Fecha de Vigencia</th>
                                <th style='background-color: #4dce4d'>Potencia Efectiva <br/>(MW)</th>

                                <th style='background-color: #4dce4d'> Fecha de Vigencia</th>
                                <th style='background-color: #4dce4d'>Potencia Firme <br/>(MW)</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            int filaPar = 0;
            string centralActual = lista.Any() ? lista.First().Central : string.Empty;
            foreach (var reg in lista)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";
                string styleIncremental = reg.Grupoincremental == 1 ? "background-color: #FFFF00;" : "";
                string styleEspecial = reg.EsUnidadModoEspecial ? " <span style='color: blue; '>(*)</span> " : "";
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>
                                        <td style='text-align: center;'>{2}</td>

                                        <td style='text-align: right; '>{3}</td>
                                        <td style='text-align: center;{5}'>{4}</td>
                                        <td style='text-align: center;'>{6}</td>

                                        <td style='text-align: center;'>{7}</td>
                                        <td style='text-align: center;'>{8}</td>

                                        <td style='text-align: center;{11}'>{9}</td>
                                        <td style='text-align: center;{11}'>{10}</td>

                                        <td style='text-align: center;{14}'>{12}</td>
                                        <td style='text-align: center;{14}'>{13}</td>
                                    </tr>
                                    "
                                , filaClase
                                , reg.Emprnomb
                                , reg.Central

                                , reg.Grupoincremental == 1 ? "" : reg.Equicodi.ToString()
                                , reg.Equiabrev + styleEspecial
                                , styleIncremental
                                , reg.UnidadnombPR25

                                , reg.Grupocodi
                                , reg.Gruponomb
                                , reg.FechaVigencia != null ? reg.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Pe != null ? reg.Pe.Value.ToString("N", nfi) : string.Empty

                                , reg.TieneModificacionPropiedad ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty

                                , reg.FechaVigenciaFirme != null ? reg.FechaVigenciaFirme.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Pf != null && reg.Pf > 0 ? reg.Pf.Value.ToString("N", nfi) : string.Empty

                                , reg.TieneModificacionPropiedadPfirme ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera reporte formato Html de PE Unidades Termo
        /// </summary>
        /// <param name="lista"></param>
        /// <param name="listaMsj"></param>
        /// <returns></returns>
        private string GenerarHtmlPeModosOperacion(List<PrGrupoDTO> lista, List<ResultadoValidacionAplicativo> listaMsj)
        {
            StringBuilder strHtml = new StringBuilder();

            int numCambios = lista.Count(x => x.TieneModificacionPropiedad);
            int numCambiosRend = lista.Count(x => x.TieneModificacionPropiedadRendimiento);

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 5;
            nfi.NumberDecimalSeparator = ",";

            strHtml.Append("<div>");
            if (numCambios > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #00bb00 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de potencia efectiva.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambios);
            }
            if (numCambiosRend > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #595dd4 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de rendimiento.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambiosRend);
            }
            if (listaMsj.Any())
            {
                strHtml.Append("<b style='color: red;'>Observaciones</b>: <br/>");
                strHtml.Append("<ul>");
                foreach (var reg in listaMsj)
                    strHtml.AppendFormat("<li>{0}: {1}</li>", reg.TipoFuenteDatoDesc, reg.Descripcion);
                strHtml.Append("</ul>");
            }
            strHtml.Append("</div>");

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_data'>
                        <thead>
                            <tr>
                                <th>Empresa</th>
                                <th>Central</th>

                                <th>Código<br/>Modo</th>
                                <th>Modo de operación</th>

                                <th style='background-color: #4dce4d'> Fecha de Vigencia</th>
                                <th style='background-color: #4dce4d'>Potencia Efectiva <br/>(MW)</th>

                                <th style='background-color: #ffa040'> Fecha de Vigencia</th>
                                <th style='background-color: #ffa040'>Potencia Mínima <br/>(MW)</th>

                                <th style='background-color: #9093f3'>Fecha de Vigencia</th>
                                <th style='background-color: #9093f3'>Rendimiento <br/>(gal, kg, m3)</th>

                                <th>Tmin_op <br/> (h)</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            strHtml.Append(head);

            int filaPar = 0;
            string centralActual = lista.Any() ? lista.First().Central : string.Empty;
            foreach (var reg in lista)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>
                                        <td style='text-align: center;'>{2}</td>

                                        <td style='text-align: center;'>{3}</td>
                                        <td style='text-align: center;'>{4}</td>

                                        <td style='text-align: center;{7}'>{5}</td>
                                        <td style='text-align: center;{7}'>{6}</td>

                                        <td style='text-align: center;'>{8}</td>
                                        <td style='text-align: center;'>{9}</td>

                                        <td style='text-align: center;{12}'>{10}</td>
                                        <td style='text-align: center;{12}'>{11}</td>
                                        <td style='text-align: center;'>{13}</td>
                                    </tr>
                                    "
                                , filaClase
                                , reg.Emprnomb
                                , reg.Central

                                , reg.Grupocodi
                                , reg.Gruponomb

                                , reg.FechaVigencia != null ? reg.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Potencia != null ? reg.Potencia.Value.ToString("N", nfi) : string.Empty
                                , reg.TieneModificacionPropiedad ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty

                                , reg.FechaVigenciaPmin != null ? reg.FechaVigenciaPmin.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.PotenciaMinima != null ? reg.PotenciaMinima.Value.ToString("N", nfi) : string.Empty

                                , reg.FechaVigenciaRendimiento != null ? reg.FechaVigenciaRendimiento.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty
                                , reg.Rendimiento != null ? reg.Rendimiento.Value.ToString("N", nfi) : string.Empty
                                , reg.TieneModificacionPropiedadRendimiento ? "background-color: #595dd4 !important; color: white; font-weight: bold;" : string.Empty
                                , (reg.Tminoperacion > 0 ? reg.Tminoperacion.ToString() : string.Empty)
                                );

                strHtml.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            strHtml.Append(foot);

            return strHtml.ToString();
        }

        #endregion

        #region Insumo: Relación Gasoducto y Central térmica

        public List<SiEmpresaDTO> ListarEmpresaConGasoducto()
        {
            var listaGasoducto = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesAppServicio.Famcodigaseoducto.ToString());

            return listaGasoducto.GroupBy(x => x.Emprcodi)
                                .Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Value, Emprnomb = x.First().Emprnomb })
                                .OrderBy(x => x.Emprnomb).ToList();
        }

        /// <summary>
        /// Obtiene lista de Gaseoductos
        /// </summary>
        /// <returns></returns>
        public void ObtenerFiltroListaGaseoductos(int emprcodi, out List<EqEquipoDTO> listaGasoducto, out List<EqEquipoDTO> listaCentral)
        {
            listaGasoducto = FactorySic.GetEqEquipoRepository().ListarEquiposPorFamilia(ConstantesAppServicio.Famcodigaseoducto.ToString());
            listaGasoducto = listaGasoducto.Where(x => x.Emprcodi == emprcodi).OrderBy(x => x.Equinomb).ToList();

            listaCentral = this.ListarCentralesXTipogeneracion(ConstantesIndisponibilidades.TgenercodiTermoelectrica, new DateTime(2000, 1, 1), DateTime.Now.Date
                  , ConstantesAppServicio.ParametroDefecto, emprcodi.ToString(), ConstantesAppServicio.ParametroDefecto);
        }

        /// <summary>
        /// Genera reporte en formato Html de Relación Gasoducto y Central térmica
        /// </summary>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarReporteHtmlGaseoducto(DateTime fechaIni, DateTime fechaFin)
        {
            List<EqEquipoDTO> listaUnidadesRendxCentralG = ListaReporteGaseoductoUnidadesRendimiento(fechaIni, fechaFin)
                                                            .OrderBy(x => x.Emprnomb).ThenBy(x => x.Gaseoducto).ThenByDescending(x => x.Rendimiento).ThenBy(x => x.Central).ThenBy(x => x.UnidadnombPR25).ToList();

            StringBuilder strHtml = new StringBuilder();

            int numCambios = listaUnidadesRendxCentralG.Count(x => x.TieneModificacionPropiedadRendimiento);

            strHtml.Append("<div>");
            if (numCambios > 0)
            {
                strHtml.AppendFormat(@"
                        <table border='0' style='width: auto;margin-bottom: 10px;' id='leyenda_op'>
                                    <tbody>
                                        <tr>
                                            <td style='color: #335873; background-color: #00bb00 !important; border: 1px solid #dddddd; width: 50px'></td>
                                            <td style=''>Existe(n) <b>{0}</b> actualizacion(es) de rendimiento.</td>
                                        </tr>
                                    </tbody>
                                </table>
                        ", numCambios);
            }
            strHtml.Append("</div>");

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='miTabla' style='width: 100%'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style='width:65px;'>Empresa</th>");
            strHtml.Append("<th style='width:65px;'>Gaseoducto</th>");
            strHtml.Append("<th style='width:65px;'>Central</th>");
            strHtml.Append("<th style='width:65px;'>Unidad de Generación</th>");
            strHtml.Append("<th style='width:65px;background-color: #00bb00;'>Fecha de Vigencia</th>");
            strHtml.Append("<th style='width:65px;background-color: #00bb00;'>Rendimiento <br/>kWh/(gal, kg, m3)</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var ite in listaUnidadesRendxCentralG)
            {
                strHtml.Append("<tr>");
                strHtml.AppendFormat("<td style='height: 19px'>{0}</td>", ite.Emprnomb);
                strHtml.AppendFormat("<td>{0}</td>", ite.Gaseoducto);
                strHtml.AppendFormat("<td>{0}</td>", ite.Central);
                strHtml.AppendFormat("<td>{0}</td>", ite.UnidadnombPR25);
                strHtml.AppendFormat("<td style='{1}'>{0}</td>", ite.FechaVigenciaRendimiento != null ? ite.FechaVigenciaRendimiento.Value.ToString(ConstantesAppServicio.FormatoFechaYMD) : string.Empty, ite.TieneModificacionPropiedadRendimiento ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty);
                strHtml.AppendFormat("<td style='{1}'>{0}</td>", ite.Rendimiento, ite.TieneModificacionPropiedadRendimiento ? "background-color: #00bb00 !important; color: white; font-weight: bold;" : string.Empty);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Lista gaseoducto unidades con rendimiento
        /// </summary>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        private List<EqEquipoDTO> ListaReporteGaseoductoUnidadesRendimiento(DateTime fechaIni, DateTime fechaFin)
        {
            int aplicativo = ConstantesIndisponibilidades.AppPR25;
            ListarUnidadTermicoOpComercial(aplicativo, fechaIni, fechaFin, out List<EqEquipoDTO> listaUnidades, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj);

            List<IndGaseoductoxcentralDTO> listaGaseoductos = ListIndGaseoductoxcentrals();
            var listaGDsUnicos = listaGaseoductos.DistinctBy(x => new { x.Gaseoductoequicodi, x.Equicodi }).ToList();

            var listaUnidadesxCentralGD = new List<EqEquipoDTO>();

            foreach (var item in listaUnidades)
            {
                var central = listaGDsUnicos.FirstOrDefault(x => x.Equicodi == item.Equipadre);

                if (central != null)
                {
                    item.Gaseoducto = central.Gaseoducto;
                    listaUnidadesxCentralGD.Add(item);
                }
            }

            return listaUnidadesxCentralGD;
        }

        #endregion

        #region Insumo: Límite de Potencia Eléctrica

        /// <summary>
        /// Realiza el guardado de la potencia limite junto a su unidad
        /// </summary>
        /// <param name="indPotlim"></param>
        public void LimPotGuardar(IndPotlimDTO indPotlim)
        {
            var UoW = FactorySic.UnitOfWork();
            using (var connection = UoW.BeginConnection())
            {
                using (var transaction = UoW.StartTransaction(connection))
                {

                    try
                    {
                        indPotlim.Potlimestado = (int)ConstantesAppServicio.Estado.Activo;

                        var potlimcodi = FactorySic.GetIndPotlimRepository().Save(indPotlim, connection, transaction);

                        foreach (IndPotlimUnidadDTO indPotlimUnidad in indPotlim.IndPotlimUnidades)
                        {
                            indPotlimUnidad.Potlimcodi = potlimcodi;
                            indPotlimUnidad.Equlimusumodificacion = indPotlim.Potlimusucreacion;
                            indPotlimUnidad.Equlimfecmodificacion = DateTime.Now;

                            FactorySic.GetIndPotlimUnidadRepository().Save(indPotlimUnidad, connection, transaction);
                        }

                        transaction.Commit();
                    }
                    catch (Exception ex)
                    {
                        Logger.Error(ConstantesAppServicio.LogError, ex);
                        transaction.Rollback();
                        throw ex;
                    }
                    finally
                    {
                        connection.Close();
                    }
                }
            }
        }

        /// <summary>
        /// Permite dar de baja la potencia limite
        /// </summary>
        /// <param name="id"></param>
        public void LimPotDarBaja(int id)
        {
            try
            {
                var entity = new IndPotlimDTO()
                {
                    Potlimcodi = id,
                    Potlimestado = (int)ConstantesAppServicio.Estado.Inactivo
                };

                FactorySic.GetIndPotlimRepository().UpdateEstado(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Genera reporte en formato Html del Listado de Limite de potencia eléctrica
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoLimPotencia(DateTime fechaIni, DateTime fechaFin, bool tienePermisoEditar, string url)
        {
            var lists = GetByCriteriaIndPotlims(fechaIni, fechaFin);

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 2;
            nfi.NumberDecimalSeparator = ",";

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='miTabla'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            if (tienePermisoEditar) strHtml.Append("<th style='width:20px;'>Acciones</th>");
            strHtml.Append("<th style='width:65px;'>Fecha Inicio</th>");
            strHtml.Append("<th style='width:65px;'>Fecha Fin</th>");
            strHtml.Append("<th style='width:65px;'>Nombre</th>");
            strHtml.Append("<th style='width:65px;'>Capacidad (MW)</th>");
            strHtml.Append("<th style='width:260px;'>Unidades de generación</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var lstGroup in lists.GroupBy(x => x.Potlimcodi))
            {
                var item = lstGroup.First();

                string clase = item.Potlimestado != 1 ? "eve_delete" : "";

                strHtml.AppendFormat("<tr class='{0}'>", clase);
                if (tienePermisoEditar)
                {
                    strHtml.Append("<td>");
                    if (item.Potlimestado == 1)
                    {
                        //strHtml.AppendFormat("<a class='' href='JavaScript:editarRegistro({0});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-edit.png' alt='Editar registro' title='Editar registro' /></a>", item.Potlimcodi, url);
                        strHtml.AppendFormat("<a class='' href='JavaScript:eliminarRegistro({0});' style='margin-right: 4px;'><img style='margin-top: 4px; margin-bottom: 4px;' src='{1}Content/Images/btn-cancel.png' alt='Eliminar registro' title='Eliminar registro' /></a>", item.Potlimcodi, url);
                    }
                    strHtml.Append("</td>");
                }
                strHtml.AppendFormat("<td>{0}</td>", item.Potlimfechaini.Value.ToString(ConstantesAppServicio.FormatoFecha));
                strHtml.AppendFormat("<td>{0}</td>", item.Potlimfechafin.Value.ToString(ConstantesAppServicio.FormatoFecha));
                strHtml.AppendFormat("<td>{0}</td>", item.Potlimnombre);
                strHtml.AppendFormat("<td>{0}</td>", item.Potlimmw.Value.ToString("N", nfi));

                #region Tabla unidad

                StringBuilder strHtml2 = new StringBuilder();

                strHtml2.Append("<table class='pretty tabla-icono' style='margin: 5px;'>");
                strHtml2.Append("<thead>");
                strHtml2.Append("<tr>");
                strHtml2.Append("<th style='width:65px;'>Central</th>");
                //strHtml2.Append("<th style='width:65px;'>Equipo</th>");
                strHtml2.Append("<th style='width:65px;'>Modo</th>");
                strHtml2.Append("<th style='width:65px;'>P. Efectiva</th>");
                strHtml2.Append("</tr>");
                strHtml2.Append("</thead>");
                strHtml2.Append("<tbody>");

                foreach (var item2 in lstGroup)
                {
                    strHtml2.Append("<tr>");
                    strHtml2.AppendFormat("<td>{0}</td>", item2.Equinomb2);
                    //strHtml2.AppendFormat("<td>{0}</td>", item2.Equinomb);
                    strHtml2.AppendFormat("<td>{0}</td>", item2.Gruponomb);
                    strHtml2.AppendFormat("<td>{0}</td>", item2.Equlimpotefectiva.ToString("N", nfi));
                    strHtml2.Append("</tr>");
                }
                strHtml2.Append("</tbody>");
                strHtml2.Append("</table>");

                #endregion

                strHtml.AppendFormat("<td style='padding-right: 10px;'>{0}</td>", strHtml2.ToString());
                strHtml.Append("</tr>");

            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        #endregion

        #region Insumo: Clasificación de Indisponibilidad de Eventos

        /// <summary>
        /// Genera reporte en formato Html del Listado de Eventos
        /// </summary>
        /// <param name="url"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoevento"></param>
        /// <param name="emprcodi"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoEventos(string url, DateTime fechaIni, DateTime fechaFin, string tipoevento, string emprcodi, string famcodi)
        {
            List<EventoDTO> listaData = ListaEventos(fechaIni, fechaFin, tipoevento, emprcodi, famcodi);
            listaData = listaData.OrderBy(x => x.EMPRNOMB).ThenBy(x => x.AREADESC).ThenBy(x => x.EVENINI).ThenBy(x => x.EQUIABREV).ToList();

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='miTabla'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>Accion</th>");
            strHtml.Append("<th>N.d</th>");
            strHtml.Append("<th>P.T.</th>");
            strHtml.Append("<th>P.P.</th>");
            strHtml.Append("<th>F.T.</th>");
            strHtml.Append("<th>F.P.</th>");
            strHtml.Append("<th>Pr (MW)</th>");
            strHtml.Append("<th>Tipo</th>");
            strHtml.Append("<th>CIER</th>");
            strHtml.Append("<th>Causa</th>");
            strHtml.Append("<th>Empresa</th>");
            strHtml.Append("<th>Ubicación</th>");
            strHtml.Append("<th>Equipo</th>");
            strHtml.Append("<th>Inicio</th>");
            strHtml.Append("<th>Final</th>");
            strHtml.Append("<th></th>");
            strHtml.Append("<th>Descripción</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            int i = 0;
            int filaPar = 0;
            string centralActual = listaData.Any() ? listaData.First().AREADESC : string.Empty;

            string strHtmlDivHidden = string.Empty;
            foreach (var item in listaData)
            {
                if (centralActual != item.AREADESC)
                {
                    filaPar++;
                    centralActual = item.AREADESC;
                }
                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";
                bool esRegistroValido = !(item.EVENINI == item.EVENFIN || item.EVENFIN > item.EVENINI.Value.Date.AddDays(1));
                filaClase += (!esRegistroValido ? " eve_delete" : "");
                filaClase += (item.Ieventtipoindisp != "-1" ? " ind_reg" : "");

                strHtml.AppendFormat("<tr class='{0} fila_dato' id='tr_{1}'>", filaClase, item.EVENCODI);
                strHtml.Append("<td>");
                strHtml.AppendFormat("<input type='hidden' name='txtEvencodi_{1}' value='{1}'/><a href='JavaScript:consultarEvento({1})' title='Consultar'> <img src='{0}Content/Images/btn-open.png' /> </a>", url, item.EVENCODI);
                strHtml.AppendFormat("<a href='JavaScript:verHistorialEvento({1})' title='Consultar'> <img src='{0}Content/Images/envios.png' /> </a>", url, item.EVENCODI);
                strHtml.Append("</td>");

                if (esRegistroValido)
                {
                    strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='-1' {1}'></td>", item.EVENCODI, (item.Ieventtipoindisp == "-1") ? " checked='checked' " : string.Empty);
                    strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='PT' {1}></td>", item.EVENCODI, (item.Ieventtipoindisp == "PT") ? " checked='checked' " : string.Empty);
                    strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='PP' {1}></td>", item.EVENCODI, (item.Ieventtipoindisp == "PP") ? " checked='checked' " : string.Empty);
                    strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='FT' {1}></td>", item.EVENCODI, (item.Ieventtipoindisp == "FT") ? " checked='checked' " : string.Empty);
                    strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='FP' {1}></td>", item.EVENCODI, (item.Ieventtipoindisp == "FP") ? " checked='checked' " : string.Empty);
                    strHtml.AppendFormat("<td><input type='text' id='txt_prmw_{0}' value='{1}' style='width: 46px; {2}' /></td>", item.EVENCODI, item.Ieventpr, (item.Ieventtipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial || item.Ieventtipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial) ? string.Empty : "display: none");
                }
                else
                {
                    strHtml.Append("<td></td>");
                    strHtml.Append("<td></td>");
                    strHtml.Append("<td></td>");
                    strHtml.Append("<td></td>");
                    strHtml.Append("<td></td>");
                    strHtml.Append("<td></td>");
                }

                strHtml.AppendFormat("<td>{0}</td>", item.TIPOEVENABREV);
                strHtml.AppendFormat("<td>{0}</td>", item.CAUSAEVENABREV);
                strHtml.AppendFormat("<td>{0}</td>", item.SUBCAUSAABREV);

                strHtml.AppendFormat("<td>{0}</td>", item.EMPRNOMB);
                strHtml.AppendFormat("<td>{0}</td>", item.AREADESC);
                strHtml.AppendFormat("<td>{0}</td>", item.EQUIABREV);

                strHtml.AppendFormat("<td>{0}</td>", item.EVENINI?.ToString(ConstantesAppServicio.FormatoFechaFull2));
                strHtml.AppendFormat("<td>{0}</td>", item.EVENFIN?.ToString(ConstantesAppServicio.FormatoFechaFull2));

                strHtml.AppendFormat("<td>{0}</td>", !string.IsNullOrEmpty(item.EVENCOMENTARIOS) ? "<div style='background-color:#ff6a00; width:10px; height:10px' title='Tiene comentarios internos'>&nbsp;</div>" : "");
                strHtml.AppendFormat("<td style='text - align:left'>{0}</td>", item.EVENASUNTO);
                strHtml.Append("</tr>");

                if (i == 0)
                    strHtmlDivHidden = string.Format("<div> <input type='hidden' id='hdFirstRowRadio' value='{0},{1}'> </div>", item.EVENCODI, item.Ieventtipoindisp);
                i++;
            }

            string foot = @"
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <th id='foot_1'>Ubicación</th>
                                    <th id='foot_2'>Equipo</th>

                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
            ";
            strHtml.Append(foot);

            strHtml.Append(strHtmlDivHidden);

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Obtien Lista de eventos actualizando el campo tipo indisponibilidad con listado Ind. Evento
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoevento"></param>
        /// <param name="emprcodi"></param>
        /// <param name="famcodi"></param>
        /// <returns></returns>
        public List<EventoDTO> ListaEventos(DateTime fechaIni, DateTime fechaFin, string tipoevento, string emprcodi, string famcodi)
        {
            List<EventoDTO> listaData = FactorySic.ObtenerEventoDao()
                 .ExportarEventos(tipoevento, fechaIni, fechaFin.AddDays(1), ConstantesAppServicio.ParametroDefecto, string.Empty, 0,
                     emprcodi, famcodi, ConstantesAppServicio.ParametroDefecto, ConstantesAppServicio.ParametroDefecto);

            var listIndEvento = new List<IndEventoDTO>();
            if (listaData.Any()) listIndEvento = GetByCriteriaIndEventos(fechaIni, fechaFin.AddDays(1), emprcodi, famcodi, ConstantesIndisponibilidades.EvenclasecodiEjec.ToString());

            foreach (var item in listaData)
            {
                item.Ieventtipoindisp = "-1";
                var evento = listIndEvento.FirstOrDefault(x => x.Evencodi == item.EVENCODI);
                if (evento != null)
                {
                    item.Ieventtipoindisp = string.IsNullOrEmpty(evento.Ieventtipoindisp) ? "-1" : evento.Ieventtipoindisp;
                    item.Ieventpr = evento.Ieventpr;
                }
            }

            return listaData;
        }

        /// <summary>
        /// Permite Guardar Ind. Eventos 
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoevento"></param>
        /// <param name="emprcodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="lstInput"></param>
        /// <param name="username"></param>
        public void GuardarCheckListaEventos(DateTime fechaIni, DateTime fechaFin, string tipoevento, string emprcodi, string famcodi, List<IndEventoDTO> lstInput, string username)
        {
            DateTime fechaRegistro = DateTime.Now;

            var listIndEvento = GetByCriteriaIndEventos(fechaIni, fechaFin.AddDays(1), emprcodi, famcodi, ConstantesIndisponibilidades.EvenclasecodiEjec.ToString());

            foreach (var item in lstInput)
            {
                var itemExiste = listIndEvento.FirstOrDefault(x => x.Evencodi == item.Evencodi);
                if (itemExiste == null)
                {
                    if (item.Ieventtipoindisp != "-1")
                    {
                        item.Ieventfeccreacion = fechaRegistro;
                        item.Ieventusucreacion = username;
                        item.Ieventestado = ConstantesAppServicio.Activo;
                        FactorySic.GetIndEventoRepository().Save(item);
                    }
                }
                else
                {
                    if (itemExiste.Ieventtipoindisp != item.Ieventtipoindisp || itemExiste.Ieventpr.GetValueOrDefault(0) != item.Ieventpr.GetValueOrDefault(0))
                    {
                        itemExiste.Ieventfecmodificacion = fechaRegistro;
                        itemExiste.Ieventusumodificacion = username;
                        itemExiste.Ieventestado = ConstantesAppServicio.Historico;
                        FactorySic.GetIndEventoRepository().Update(itemExiste);

                        item.Ieventfeccreacion = fechaRegistro;
                        item.Ieventusucreacion = username;
                        item.Ieventestado = ConstantesAppServicio.Activo;
                        FactorySic.GetIndEventoRepository().Save(item);
                    }
                }
            }
        }

        /// <summary>
        /// Permite obtener los datos de un evento en particular
        /// </summary>
        /// <param name="idEvento"></param>
        /// <returns></returns>
        public EventoDTO ObtenerEvento(int idEvento)
        {
            return FactorySic.ObtenerEventoDao().ObtenerEvento(idEvento);
        }

        /// <summary>
        /// Listar historial de modificaciones
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        public List<IndEventoDTO> ListarHistorialCambioEvento(int evencodi)
        {
            EventoDTO regEventoBD = ObtenerEvento(evencodi);

            List<IndEventoDTO> listahist = ListIndEventosHistoricoByEvencodi(evencodi).OrderByDescending(x => x.Ieventfeccreacion).ToList();
            listahist.Add(new IndEventoDTO() { Ieventfeccreacion = regEventoBD.LASTDATE, Ieventusucreacion = regEventoBD.LASTUSER, IeventestadoDesc = "Base de datos Evento" });

            foreach (var reg in listahist)
            {
                reg.IeventestadoDesc = reg.IeventestadoDesc == null ? reg.Ieventestado == ConstantesIndisponibilidades.TipoReporteAplicativo ? "Activo" : "Histórico" : reg.IeventestadoDesc;
                reg.Ieventtipoindisp = GetTipoindispDesc(reg.Ieventtipoindisp);
                reg.UltimaModificacionFechaDesc = reg.Ieventfeccreacion != null ? reg.Ieventfeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;
                reg.UltimaModificacionUsuarioDesc = reg.Ieventusucreacion;
            }

            return listahist;
        }

        #endregion

        #region Insumo: Clasificación de Indisponibilidad de Restricciones Operativas

        /// <summary>
        /// Guarda la restriccion operativa, si existen cambios, el anterior queda como historico
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="emprcodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="lstIndIeod"></param>
        /// <param name="username"></param>
        public void GuardarRestriccionOperativa(DateTime fechaIni, DateTime fechaFin, string emprcodi, string famcodi, List<IndIeodcuadroDTO> lstIndIeod, string username)
        {
            try
            {
                var listIccodis = lstIndIeod.Select(x => x.Iccodi).Distinct().ToList();
                var listIndIeod = GetByCriteriaIndIeodcuadros(fechaIni, fechaFin.AddDays(1), emprcodi, famcodi, ConstantesIndisponibilidades.EvenclasecodiEjec.ToString());

                foreach (var item in lstIndIeod)
                {
                    var itemExiste = listIndIeod.FirstOrDefault(x => x.Iccodi == item.Iccodi);
                    if (itemExiste == null)
                    {
                        if (item.Iiccotipoindisp != "-1")
                        {
                            item.Iiccofeccreacion = DateTime.Now;
                            item.Iiccousucreacion = username;
                            item.Iiccoestado = ConstantesAppServicio.Activo;
                            FactorySic.GetIndIeodcuadroRepository().Save(item);
                        }
                    }
                    else
                    {
                        if (itemExiste.Iiccotipoindisp != item.Iiccotipoindisp || itemExiste.Iiccopr.GetValueOrDefault(0) != item.Iiccopr.GetValueOrDefault(0))
                        {
                            itemExiste.Iiccofecmodificacion = DateTime.Now;
                            itemExiste.Iiccousumodificacion = username;
                            itemExiste.Iiccoestado = ConstantesAppServicio.Historico;
                            FactorySic.GetIndIeodcuadroRepository().Update(itemExiste);

                            item.Iiccofeccreacion = DateTime.Now;
                            item.Iiccousucreacion = username;
                            item.Iiccoestado = ConstantesAppServicio.Activo;
                            FactorySic.GetIndIeodcuadroRepository().Save(item);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Genera reporte formato html de restricciones operativas
        /// </summary>
        /// <param name="url"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="idsEmprcodi"></param>
        /// <param name="idsTipoEquipo"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoResticcionesOperativas(string url, DateTime fechaIni, DateTime fechaFin, string idsEmprcodi, string idsTipoEquipo)
        {
            StringBuilder strHtml = new StringBuilder();

            List<EveIeodcuadroDTO> listaData = BuscarOperacionesEjecutadosTipoResticOperativas(fechaIni, fechaFin, idsEmprcodi, idsTipoEquipo);
            listaData = listaData.OrderBy(x => x.Emprnomb).ThenBy(x => x.Areadesc).ThenBy(x => x.Ichorini).ThenBy(x => x.Equiabrev).ToList();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='miTabla'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            strHtml.Append("<th>Accion</th>");
            strHtml.Append("<th>N.d.</th>");
            strHtml.Append("<th>PT</th>");
            strHtml.Append("<th>PP</th>");
            strHtml.Append("<th>FT</th>");
            strHtml.Append("<th>FP</th>");
            strHtml.Append("<th>Pr (MW)</th>");

            strHtml.Append("<th>Empresa</th>");
            strHtml.Append("<th>Ubicación</th>");
            strHtml.Append("<th>Equipo</th>");
            strHtml.Append("<th>Inicio</th>");
            strHtml.Append("<th>Final</th>");

            strHtml.Append("<th>Descripción</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            int i = 0;
            int filaPar = 0;
            string centralActual = listaData.Any() ? listaData.First().Areadesc : string.Empty;

            string strHtmlDivHidden = string.Empty;
            foreach (var item in listaData)
            {
                if (centralActual != item.Areadesc)
                {
                    filaPar++;
                    centralActual = item.Areadesc;
                }
                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";
                filaClase += (item.Iiccotipoindisp != "-1" ? " ind_reg" : "");

                strHtml.AppendFormat("<tr class='{0} fila_dato' id='tr_{1}'>", filaClase, item.Iccodi);
                strHtml.Append("<td>");
                strHtml.AppendFormat("<input type='hidden' name='txtEvencodi_{1}' value='{1}'/><a href='JavaScript:consultarRestriccion({1})' title='Consultar'> <img src='{0}Content/Images/btn-open.png' /> </a>", url, item.Iccodi);
                strHtml.AppendFormat("<a href='JavaScript:verHistorialRestriccion({1})' title='Consultar'> <img src='{0}Content/Images/envios.png' /> </a>", url, item.Iccodi);
                strHtml.Append("</td>");
                strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='-1' {1}'></td>", item.Iccodi, (item.Iiccotipoindisp == "-1") ? " checked='checked' " : string.Empty);
                strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='PT' {1}></td>", item.Iccodi, (item.Iiccotipoindisp == "PT") ? " checked='checked' " : string.Empty);
                strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='PP' {1}></td>", item.Iccodi, (item.Iiccotipoindisp == "PP") ? " checked='checked' " : string.Empty);
                strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='FT' {1}></td>", item.Iccodi, (item.Iiccotipoindisp == "FT") ? " checked='checked' " : string.Empty);
                strHtml.AppendFormat("<td><input type='radio' name='rbtnIndisponibilidad_{0}' value='FP' {1}></td>", item.Iccodi, (item.Iiccotipoindisp == "FP") ? " checked='checked' " : string.Empty);
                strHtml.AppendFormat("<td><input type='text' id='txt_prmw_{0}' value='{1}' style='width: 46px; {2}' /></td>", item.Iccodi, item.Iiccopr, (item.Iiccotipoindisp == ConstantesIndisponibilidades.INDProgramadaParcial || item.Iiccotipoindisp == ConstantesIndisponibilidades.INDFortuitaParcial) ? string.Empty : "display: none");
                strHtml.AppendFormat("<td>{0}</td>", item.Emprnomb);
                strHtml.AppendFormat("<td>{0}</td>", item.Areadesc);
                strHtml.AppendFormat("<td>{0}</td>", item.Equiabrev);
                strHtml.AppendFormat("<td>{0}</td>", item.Ichorini.Value.ToString(ConstantesAppServicio.FormatoFechaFull));
                strHtml.AppendFormat("<td>{0}</td>", item.Ichorfin.Value.ToString(ConstantesAppServicio.FormatoFechaFull));
                strHtml.AppendFormat("<td style='text-align:left'>{0}</td>", item.Descripcion);
                strHtml.Append("</tr>");

                if (i == 0)
                    strHtmlDivHidden = string.Format("<div> <input type='hidden' id='hdFirstRowRadio' value='{0},{1}'> </div>", item.Iccodi, item.Iiccotipoindisp);
                i++;
            }

            string foot = @"
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                    <th id='foot_1'>Ubicación</th>
                                    <th id='foot_2'>Equipo</th>
                                    <td></td>
                                    <td></td>

                                    <td></td>
                                </tr>
                            </tfoot>
                        </table>
            ";
            strHtml.Append(foot);

            strHtml.Append(strHtmlDivHidden);

            #endregion

            return strHtml.ToString();
        }

        /// <summary>
        /// Obtener Descripción
        /// </summary>
        /// <param name="eve"></param>
        /// <returns></returns>
        private string ObtenerDescripcionResticOpe(EveIeodcuadroDTO eve)
        {
            if (!string.IsNullOrEmpty(eve.Icdescrip1))
                return eve.Icdescrip1;

            if (!string.IsNullOrEmpty(eve.Icdescrip2))
                return eve.Icdescrip2;

            return eve.Icdescrip3;
        }

        /// <summary>
        /// Obtiene la Descripción de Restriccion Op.
        /// </summary>
        /// <param name="icdescrip1"></param>
        /// <param name="icdescrip2"></param>
        /// <param name="icdescrip3"></param>
        /// <returns></returns>
        private string GetDescripcionRestricOpe(string icdescrip1, string icdescrip2, string icdescrip3)
        {
            if (!string.IsNullOrEmpty(icdescrip1))
                return icdescrip1;

            if (!string.IsNullOrEmpty(icdescrip2))
                return icdescrip2;

            return icdescrip3;
        }

        /// <summary>
        /// Permite realizar la busqueda de Operaciones varias ejucatos de tipo Restricciones Operativas
        /// </summary>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFinal"></param>
        /// <returns></returns>
        public List<EveIeodcuadroDTO> BuscarOperacionesEjecutadosTipoResticOperativas(DateTime fechaInicio, DateTime fechaFinal, string idsEmpresa, string idsTipoEquipo)
        {
            var listaData = FactorySic.GetEveIeodcuadroRepository()
                 .BuscarOperacionesSinPaginado(ConstantesIndisponibilidades.EvenclasecodiEjec, ConstantesIndisponibilidades.SubcausacodiRestric, fechaInicio, fechaFinal, idsEmpresa, idsTipoEquipo);

            var listIccodis = listaData.Select(x => x.Iccodi).ToList();

            var listIndIeod = new List<IndIeodcuadroDTO>();
            if (listaData.Any()) listIndIeod = GetByCriteriaIndIeodcuadros(fechaInicio, fechaFinal.AddDays(1), idsEmpresa, idsTipoEquipo, ConstantesIndisponibilidades.EvenclasecodiEjec.ToString());

            foreach (var item in listaData)
            {
                item.Iiccotipoindisp = "-1";
                var indIeod = listIndIeod.FirstOrDefault(x => x.Iccodi == item.Iccodi);
                if (indIeod != null)
                {
                    item.Iiccotipoindisp = string.IsNullOrEmpty(indIeod.Iiccotipoindisp) ? "-1" : indIeod.Iiccotipoindisp;
                    item.Iiccopr = indIeod.Iiccopr;
                }
                item.Descripcion = ObtenerDescripcionResticOpe(item);
            }

            return listaData;
        }

        /// <summary>
        /// obtener los datos de un registro
        /// </summary>
        /// <param name="iccodi"></param>
        /// <returns></returns>
        public EveIeodcuadroDTO ObtenerIeodcuadro(int iccodi)
        {
            var reg = FactorySic.GetEveIeodcuadroRepository().ObtenerIeodcuadro(iccodi);
            reg.Descripcion = ObtenerDescripcionResticOpe(reg);

            return reg;
        }

        /// <summary>
        /// Listar historial de modificaciones
        /// </summary>
        /// <param name="evencodi"></param>
        /// <returns></returns>
        public List<IndIeodcuadroDTO> ListarHistorialCambioRestriccion(int iccodi)
        {
            EveIeodcuadroDTO regEventoBD = ObtenerIeodcuadro(iccodi);

            List<IndIeodcuadroDTO> listahist = ListIndEventosHistoricoByIccodi(iccodi).OrderByDescending(x => x.Iiccofeccreacion).ToList();
            listahist.Add(new IndIeodcuadroDTO() { Iiccofeccreacion = regEventoBD.Lastdate, Iiccousucreacion = regEventoBD.Lastuser, IiccoestadoDesc = "Base de datos Evento" });

            foreach (var reg in listahist)
            {
                reg.IiccoestadoDesc = reg.IiccoestadoDesc == null ? reg.Iiccoestado == ConstantesIndisponibilidades.TipoReporteAplicativo ? "Activo" : "Histórico" : reg.IiccoestadoDesc;
                reg.Iiccotipoindisp = GetTipoindispDesc(reg.Iiccotipoindisp);
                reg.UltimaModificacionFechaDesc = reg.Iiccofeccreacion != null ? reg.Iiccofeccreacion.Value.ToString(ConstantesAppServicio.FormatoFechaFull) : string.Empty;
                reg.UltimaModificacionUsuarioDesc = reg.Iiccousucreacion;
            }

            return listahist;
        }

        #endregion,

        #region Insumo: Reporte de Cumplimiento

        /// <summary>
        /// Agentes que reportan combustibles
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaRptCumplimientoCombustible()
        {
            DateTime fechaFin = GetPeriodoActual().AddMonths(1).AddDays(-1);

            List<EqEquipoDTO> listaCentral = ObtenerListaCentralXEstadoCombustible(GetPeriodoActual().AddMonths(-35), fechaFin, "-1");

            List<SiEmpresaDTO> listaEmp = listaCentral.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Value, Emprnomb = x.First().Emprnomb }).ToList();

            return listaEmp;
        }

        /// <summary>
        /// Obtiene listade unidades por estado de combustible
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        private List<EqEquipoDTO> ObtenerListaCentralXEstadoCombustible(DateTime fechaIni, DateTime fechaFin, string empresa)
        {
            int aplicativo = ConstantesIndisponibilidades.AppPR25;
            ListarUnidadTermicoOpComercial(aplicativo, fechaIni, fechaFin, out List<EqEquipoDTO> listaUnidades, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj);

            //var listaEstadoCombu = new List<int>
            //{
            //    ConstantesPR5ReportesServicio.EstcomcodiLiquido,
            //    ConstantesPR5ReportesServicio.EstcomcodiGaseoso,
            //};

            //List<int> listaEquipadre = listaUnidades.Where(x => listaEstadoCombu.Contains(x.Estcomcodi ?? 0)).Where(x => x.Equipadre > 0).Select(x => x.Equipadre.Value).ToList();

            //Considerar que las centrales térmicas que se encuentren influenciados por el factor k, 
            //son las de tipo de combustible a Diesel, carbón, residual o gas y no las que son de tipo combustible Bagazo y Biogás
            List<int> listaFenergcodi = ConstantesIndisponibilidades.ListaFenergcodiCumplimiento;

            listaEquiposTermicos = listaEquiposTermicos.Where(x => x.ListaFuenteEnergia.Select(y => y.Fenergcodi).All(z => listaFenergcodi.Contains(z))).ToList();

            if (ConstantesAppServicio.ParametroDefecto != empresa)
            {
                int[] emprcodis = empresa.Split(',').Select(x => int.Parse(x)).ToArray();
                listaEquiposTermicos = listaEquiposTermicos.Where(x => emprcodis.Contains(x.Emprcodi ?? 0)).ToList();
            }

            return listaEquiposTermicos;
        }

        /// <summary>
        /// lista datos de la tabla Ind_CombustibleContrato
        /// </summary>
        /// <param name="FechaInicio"></param>
        /// <param name="FechaFin"></param>
        /// <returns></returns>
        public void ListarContratoCombustiblePorRangoFecha(DateTime fechaIni, DateTime fechaFin, string empresa
                                                , out List<CombustibleContrato> listaUnidadGasLiquido, out List<CombustibleContrato> listaData
                                                , out List<ResultadoValidacionAplicativo> listaMsj)
        {
            //Toda la información es programado
            List<CombustibleContrato> lista = new List<CombustibleContrato>();

            //unidades gas o liquidos
            List<EqEquipoDTO> listaCentralGasLiquido = ObtenerListaCentralXEstadoCombustible(fechaIni, fechaFin, empresa);
            List<SiTipoinformacionDTO> listaTipoinformacion = FactorySic.GetSiTipoinformacionRepository().List();

            //gaseoductos
            List<IndGaseoductoxcentralDTO> listaGaseoductos = ListIndGaseoductoxcentrals();

            //stock programado extranet webform
            List<MeMedicion1DTO> listaSucad = _servStockComb.ObtenerConsultaStock(fechaIni, fechaFin, -1, -1, -1);
            List<int> listaEquicodiGasoducto = listaGaseoductos.Select(x => x.Gaseoductoequicodi).Distinct().ToList();

            //SUCAD
            foreach (var regCentral in listaCentralGasLiquido)
            {
                var regGaseoducto = listaGaseoductos.Find(x => x.Equicodi == regCentral.Equicodi);
                var listaFenerg = regCentral.ListaFuenteEnergia; //.Where(x=> ConstantesPR5ReportesServicio.FenergcodiGas != x.Fenergcodi).ToList();

                for (DateTime day = fechaIni.Date; day <= fechaFin; day = day.AddDays(1))
                {

                    foreach (var regFenerg in listaFenerg)
                    {

                        //esta información está en la tabla PR_DISPONIBILIDAD
                        int tipoinfocodi = -1;
                        switch (regFenerg.Fenergcodi)
                        {
                            case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                                tipoinfocodi = 42; //Carbón (kg)
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiBiogas:
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiR6:
                                tipoinfocodi = 44; //R6 (Galones)
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiR500:
                                tipoinfocodi = 45; //R500 (Galones)
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiGas:
                                tipoinfocodi = 46; //Gas natural (Mm3) millones de metros cubicos
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                                //tipoinfocodi = 47; //Diesel (Galones)
                                tipoinfocodi = 43; //Biodiesel (Galones)
                                break;
                        }
                        if (regCentral.Equicodi == 15107) //Caso especial CT RECKA 
                        { tipoinfocodi = 47; }

                        string tipoinfoabrev = listaTipoinformacion.Find(x => x.Tipoinfocodi == tipoinfocodi)?.Tipoinfodesc ?? "";

                        var regStockCombustible = listaSucad.Find(x => x.Medifecha == day && x.Equicodi == regCentral.Equicodi && x.Tipoinfocodi == tipoinfocodi);

                        CombustibleContrato c = new CombustibleContrato();
                        c.CbctrtFechaDia = day;
                        c.Gaseoducto = regGaseoducto != null ? regGaseoducto.Gaseoducto : string.Empty;
                        c.Gaseoductoequicodi = regGaseoducto != null ? (int?)regGaseoducto.Gaseoductoequicodi : null;
                        c.Equinomb = "CENTRAL";
                        c.Equicodi = regCentral.Equipadre ?? 0;
                        c.Equipadre = regCentral.Equipadre ?? 0;
                        c.Central = regCentral.Central;
                        c.Emprcodi = regCentral.Emprcodi ?? 0;
                        c.Emprnomb = regCentral.Emprnomb;
                        c.Fenergcodi = regFenerg.Fenergcodi;

                        c.Tipoinfocodi = tipoinfocodi;
                        c.Tipoinfodesc = tipoinfoabrev;
                        c.Tptomedicodi = ConstantesIndisponibilidades.TipoSucad;
                        c.Tptomedinomb = "SUCAD";
                        c.Valor = regStockCombustible != null ? regStockCombustible.H1 : null;
                        //Assetec [IND.PR252022]
                        c.Ptomedicodi = regStockCombustible != null ? regStockCombustible.Ptomedicodi : 0;
                        //Assetec [IND.PR252022]
                        lista.Add(c);
                    }
                }
            }

            listaData = lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.Gaseoducto).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ToList();

            listaUnidadGasLiquido = listaData.GroupBy(x => new { x.Emprcodi, x.Gaseoductoequicodi, x.Equipadre, x.Equicodi, x.Tipoinfocodi, x.Tptomedicodi }).Select(x => new CombustibleContrato()
            {
                Emprcodi = x.Key.Emprcodi,
                Emprnomb = (x.First().Emprnomb ?? "").Trim(),
                Gaseoductoequicodi = x.Key.Gaseoductoequicodi,
                Gaseoducto = (x.First().Gaseoducto ?? "").Trim(),
                Equipadre = x.Key.Equipadre,
                Central = (x.First().Central ?? "").Trim(),
                Equicodi = x.Key.Equicodi,
                Equinomb = (x.First().Equinomb ?? "").Trim(),
                Tipoinfocodi = x.Key.Tipoinfocodi,
                Tipoinfodesc = (x.First().Tipoinfodesc ?? "").Trim(),
                Tptomedicodi = x.Key.Tptomedicodi,
                Tptomedinomb = (x.First().Tptomedinomb ?? "").Trim()
            }).ToList();

            //validación
            listaMsj = new List<ResultadoValidacionAplicativo>();
            foreach (var reg in listaUnidadGasLiquido)
            {
                var sublista = listaData.Where(x => x.Gaseoductoequicodi == reg.Gaseoductoequicodi
                                                                      && x.Equipadre == reg.Equipadre && x.Equicodi == reg.Equicodi
                                                                      && x.Tipoinfocodi == reg.Tipoinfocodi && x.Tptomedicodi == reg.Tptomedicodi).ToList();

                for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    var entity2 = sublista.Find(x => x.CbctrtFechaDia == fecha.Date);

                    bool tienestyle = entity2 != null ? entity2.Valor == null : true;
                    if (entity2 != null && ConstantesIndisponibilidades.TptomediSUGAD == entity2.Tptomedicodi) tienestyle = false;

                    entity2.TieneDeclaracionAgente = !tienestyle;

                    if (!entity2.TieneDeclaracionAgente)
                    {
                        listaMsj.Add(new ResultadoValidacionAplicativo()
                        {
                            TipoResultado = 2,
                            TipoFuenteDatoDesc = "Reporte de Cumplimiento",
                            Descripcion = string.Format("No existe declaración para el día {0} {1} {2}. {3} {4}", fecha.ToString(ConstantesAppServicio.FormatoFecha), entity2.Central, entity2.Equinomb, entity2.Tptomedinomb, entity2.Tipoinfodesc),
                            Accion = ""
                        });
                    }
                }
            }
        }

        private List<GenericoDTO> ListarCabeceraSemana(DateTime fechaIni, DateTime fechaFin)
        {
            List<GenericoDTO> listaSem = new List<GenericoDTO>();

            for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                Tuple<int, int> tupla = EPDate.f_numerosemana_y_anho(fecha); //item1

                var regSem = listaSem.Find(x => x.Entero1 == tupla.Item1);
                if (regSem != null)
                {
                    regSem.Entero2 += 1;
                }
                else
                {
                    listaSem.Add(new GenericoDTO() { Entero1 = tupla.Item1, Entero2 = 1, String1 = "SEM" + tupla.Item1 });
                }
            }

            return listaSem;
        }

        /// <summary>
        /// Genera reporte de cumplimiento en HTML
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoReporteCumplimiento(DateTime fechaIni, DateTime fechaFin, string empresa)
        {
            ListarContratoCombustiblePorRangoFecha(fechaIni, fechaFin, empresa, out List<CombustibleContrato> listaCombXUnidad, out List<CombustibleContrato> listaCombustibleContrato, out List<ResultadoValidacionAplicativo> listaMsj);

            StringBuilder strHtml = new StringBuilder();

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 5;
            nfi.NumberDecimalSeparator = ",";

            #region Cabecera

            strHtml.Append("<table class='pretty tabla-icono' id='tabla_data' style='table-layout: fixed; width: 4000px;' >");
            strHtml.Append("<thead>");
            strHtml.Append("<tr>");
            strHtml.Append("<th rowspan='2' class='th-empresa' style='width: 290px'>EMPRESA</th>");
            strHtml.Append("<th rowspan='2' class='th-unidad' style='width: 200px'>CENTRAL</th>");
            strHtml.Append("<th rowspan='2' class='th-unidad' style='width: 80px'>UNIDAD</th>");
            strHtml.Append("<th class='th-semanaoper' style='width: 110px'>SEMANA OPERATIVA</th>");

            #region Semanas operativas

            List<GenericoDTO> listaSem = ListarCabeceraSemana(fechaIni, fechaFin);

            foreach (var reg in listaSem)
            {
                strHtml.Append(string.Format("<th colspan='{1}' style='width: {2}px'>{0}</th>", reg.String1, reg.Entero2, reg.Entero2 * 100));
            }

            #endregion

            strHtml.Append("</tr>");

            #region Dias operativos
            //imprime dias operativos
            strHtml.Append("<tr>");
            strHtml.Append("<th>UNIDAD / DIA</th>");
            for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                var nombMes = EPDate.f_NombreMesCorto(fecha.Month);
                strHtml.AppendFormat("<th style='width: 90px'>{0}-{1}</th>", nombMes, fecha.Day);
            }

            #endregion

            strHtml.Append("</tr>");

            strHtml.Append("</thead>");
            #endregion

            strHtml.Append("<tbody>");

            int filaPar = 0;
            string centralActual = listaCombXUnidad.Any() ? listaCombXUnidad.First().Central : string.Empty;
            foreach (var reg in listaCombXUnidad)
            {
                if (centralActual != reg.Central)
                {
                    filaPar++;
                    centralActual = reg.Central;
                }

                string filaClase = filaPar % 2 == 1 ? "fila_impar" : "fila_par";

                strHtml.AppendFormat("<tr class='{0}'>", filaClase);
                strHtml.AppendFormat("<td>{0}</td>", reg.Emprnomb);
                strHtml.AppendFormat("<td>{0}</td>", reg.Central);
                strHtml.AppendFormat("<td>{0}</td>", reg.Equinomb);
                strHtml.AppendFormat("<td>{0}</td>", reg.Tipoinfodesc);

                if (reg.Equipadre == 290)
                { }

                var sublista = listaCombustibleContrato.Where(x => x.Gaseoductoequicodi == reg.Gaseoductoequicodi
                                                                    && x.Equipadre == reg.Equipadre && x.Equicodi == reg.Equicodi
                                                                    && x.Tipoinfocodi == reg.Tipoinfocodi && x.Tptomedicodi == reg.Tptomedicodi).ToList();

                for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    var entity2 = sublista.Find(x => x.CbctrtFechaDia == fecha.Date);

                    string valor = entity2.Valor != null ? entity2.Valor.Value.ToString("N", nfi) : "";
                    string style = "";

                    if (!entity2.TieneDeclaracionAgente)
                    {
                        valor = "No informó";
                        style = "background-color: #ff0000 !important; color: white;";
                    }

                    strHtml.AppendFormat("<td style='{1};'>{0}</td>", valor, style);
                }

                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            return strHtml.ToString();
        }

        /// <summary>
        /// Generar archivo excel de Reporte de cumplimiento
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="fileName"></param>
        /// <returns></returns>
        public void GenerarExcelListadoReporteCumplimiento(DateTime fechaIni, DateTime fechaFin, string empresa, string ruta, out string nameFile)
        {
            ListarContratoCombustiblePorRangoFecha(fechaIni, fechaFin, empresa, out List<CombustibleContrato> listaCombXUnidad, out List<CombustibleContrato> listaCombustibleContrato, out List<ResultadoValidacionAplicativo> listaMsj);

            //Nombre de archivo
            nameFile = string.Format("Rpt_Cumplimiento_{0}.xlsx", EPDate.f_NombreMes(fechaIni.Month).ToUpper());
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (ExcelPackage xlPackage = new ExcelPackage(newFile))
            {
                GenerarHojaExcelCumplimiento(xlPackage, "Reporte", 1, 1, 8, 2, "Reporte de cumplimiento {0} {1}", fechaIni, fechaFin, listaCombXUnidad, listaCombustibleContrato);
                xlPackage.Save();
            }

        }

        /// <summary>
        /// Generar hoja excel cuadro detalle Fotuito y Programado
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="xlPackage"></param>
        /// <param name="nameWS"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="tipoGeneracion"></param>
        /// <param name="tipoIndisp"></param>
        /// <param name="incluirDescripcion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHojaInput"></param>
        private void GenerarHojaExcelCumplimiento(ExcelPackage xlPackage, string nameWS, int rowIni, int colIni, int rowFila1Tabla, int colIniTabla, string titulo
                                                    , DateTime fechaIni, DateTime fechaFin
                                                    , List<CombustibleContrato> listaCombXUnidad, List<CombustibleContrato> listaCombustibleContrato)
        {
            ExcelWorksheet ws = xlPackage.Workbook.Worksheets.Add(nameWS);
            ws = xlPackage.Workbook.Worksheets[nameWS];

            string font = "TradeGothic Bold";
            string colorCeldaFondoCabecera = "#FFFFFF";
            string colorCeldaTextoCabecera = "#000000";

            string colorCeldaFondoEmpresa = "#4F81BD";
            string colorCeldaTextoEmpresa = "#FFFFFF";
            string colorCeldaFondoUnidad = "#DCE6F1";
            string colorCeldaTextoUnidad = "#000000";
            string colorLineaDefecto = "#FFFFFF";
            string colorLineaTabla = "#4F81BD";

            #region  Filtros y Cabecera

            int colTitulo = colIni + 8;
            int colEmpresa = colIniTabla;
            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colTipo = colUnidad + 1;
            int colMedida = colTipo + 1;

            ws.Cells[rowIni + 2, colUnidad + 6].Value = string.Format(titulo, EPDate.f_NombreMes(fechaIni.Month).ToUpper(), fechaIni.Year);
            UtilExcel.SetFormatoCelda(ws, rowIni + 2, colUnidad + 6, rowIni + 2, colUnidad + 6, "Centro", "Izquierda", "#4E81C8", "#FFFFFF", font, 18, false);

            int rowFila2Tabla = rowFila1Tabla + 1;

            ws.Cells[rowFila1Tabla, colEmpresa].Value = "EMPRESA";
            ws.Cells[rowFila1Tabla, colCentral].Value = "CENTRAL";
            ws.Cells[rowFila1Tabla, colUnidad].Value = "UNIDAD";
            ws.Cells[rowFila1Tabla, colTipo].Value = "TIPO";
            ws.Cells[rowFila1Tabla, colMedida].Value = "SEMANA OPERATIVA";
            ws.Cells[rowFila2Tabla, colMedida].Value = "UNIDAD / DIA";

            UtilExcel.CeldasExcelAgrupar(ws, rowFila1Tabla, colEmpresa, rowFila2Tabla, colEmpresa);
            UtilExcel.CeldasExcelAgrupar(ws, rowFila1Tabla, colCentral, rowFila2Tabla, colCentral);
            UtilExcel.CeldasExcelAgrupar(ws, rowFila1Tabla, colUnidad, rowFila2Tabla, colUnidad);
            UtilExcel.CeldasExcelAgrupar(ws, rowFila1Tabla, colTipo, rowFila2Tabla, colTipo);
            //            UtilExcel.CeldasExcelAgrupar(ws, rowFila1Tabla, colMedida,  rowFila2Tabla , colMedida);

            UtilExcel.SetFormatoCelda(ws, rowFila1Tabla, colEmpresa, rowFila2Tabla, colMedida, "Centro", "Centro", colorCeldaTextoCabecera, colorCeldaFondoCabecera, font, 8, false, true);
            UtilExcel.BorderCeldasLineaDelgada(ws, rowFila1Tabla, colEmpresa, rowFila2Tabla, colMedida, colorLineaTabla, true);

            UtilExcel.BorderCeldasLineaGruesa(ws, rowFila1Tabla, colEmpresa, rowFila2Tabla, colMedida, colorLineaTabla);

            double factorAncho = 0.85;
            //ws.Row(rowEmpresa).Height = 36;
            ws.Column(1).Width = 5 * factorAncho;
            ws.Column(colEmpresa).Width = 50 * factorAncho;
            ws.Column(colCentral).Width = 27 * factorAncho;
            ws.Column(colUnidad).Width = 10 * factorAncho;
            ws.Column(colTipo).Width = 10 * factorAncho;
            ws.Column(colMedida).Width = 17 * factorAncho;

            #endregion

            #region Cuerpo

            int rowData = rowFila2Tabla + 1;

            for (int u = 0; u < listaCombXUnidad.Count; u++)
            {
                var regTot = listaCombXUnidad[u];

                ws.Cells[rowData, colEmpresa].Value = regTot.Emprnomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colEmpresa, rowData, colEmpresa, "Centro", "Izquierda", colorCeldaTextoEmpresa, colorCeldaFondoEmpresa, font, 8, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colEmpresa, rowData, colEmpresa, colorLineaDefecto);

                ws.Cells[rowData, colCentral].Value = regTot.Central;
                UtilExcel.SetFormatoCelda(ws, rowData, colCentral, rowData, colCentral, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colCentral, rowData, colCentral, colorLineaDefecto);

                ws.Cells[rowData, colUnidad].Value = regTot.Equinomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colUnidad, rowData, colUnidad, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colUnidad, rowData, colUnidad, colorLineaDefecto);

                ws.Cells[rowData, colTipo].Value = regTot.Tptomedinomb;
                UtilExcel.SetFormatoCelda(ws, rowData, colTipo, rowData, colTipo, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colTipo, rowData, colTipo, colorLineaDefecto);

                ws.Cells[rowData, colMedida].Value = regTot.Tipoinfodesc;
                UtilExcel.SetFormatoCelda(ws, rowData, colMedida, rowData, colMedida, "Centro", "Centro", colorCeldaTextoUnidad, colorCeldaFondoUnidad, font, 8, false);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowData, colMedida, rowData, colMedida, colorLineaDefecto);

                rowData++;
            }

            UtilExcel.BorderCeldasLineaGruesa(ws, rowFila1Tabla, colEmpresa, rowData - 1, colMedida, colorLineaTabla);

            //dia por dia
            int colIniDetalle = colMedida + 1;
            this.GenerarSubHojXDiaCumplimiento(ws, rowFila1Tabla, colIniDetalle, font, fechaIni, fechaFin, listaCombXUnidad, listaCombustibleContrato);

            #endregion

            //No mostrar lineas
            ws.View.ShowGridLines = false;

            //filter
            ws.Cells[rowFila2Tabla, colEmpresa, rowFila2Tabla, colMedida].AutoFilter = true;

            ws.View.FreezePanes(rowFila2Tabla + 1, colMedida + 1);
            ws.View.ZoomScale = 100;

            //Todo el excel con Font Arial
            var allCells = ws.Cells[1, 1, ws.Dimension.End.Row, ws.Dimension.End.Column];
            var cellFont = allCells.Style.Font;
            cellFont.Name = font;
        }

        /// <summary>
        /// Generar sub hoja excel por unidad y dia
        /// </summary>
        /// <param name="ws"></param>
        /// <param name="rowIni"></param>
        /// <param name="colIni"></param>
        /// <param name="font"></param>
        /// <param name="eje"></param>
        /// <param name="incluirDescripcion"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="tipoIndisp"></param>
        /// <param name="listaReptHoja"></param>
        /// <param name="listaRepdetHoja"></param>
        private void GenerarSubHojXDiaCumplimiento(ExcelWorksheet ws, int rowIni, int colIni, string font
                                                , DateTime fechaIni, DateTime fechaFin
                                                 , List<CombustibleContrato> listaCombXUnidad, List<CombustibleContrato> listaCombustibleContrato)
        {
            string colorCeldaTextoDia = "#FFFFFF";
            string colorCeldaFondoDia = "#538DD5";

            string colorLineaDia = "#FFFFFF";
            string colorLineaTieneDisp = "#F81BD";

            int numDia = (fechaFin.Date - fechaIni.Date).Days + 1;

            #region  Filtros y Cabecera

            double factorAncho = 0.85;

            List<GenericoDTO> listaSem = ListarCabeceraSemana(fechaIni, fechaFin);

            int rowSem = rowIni;
            int colTmp = colIni;
            foreach (var reg in listaSem)
            {
                ws.Cells[rowSem, colTmp].Value = reg.String1;
                int colFinTmp = colTmp + reg.Entero2.Value - 1;
                UtilExcel.CeldasExcelAgrupar(ws, rowSem, colTmp, rowSem, colFinTmp);

                UtilExcel.SetFormatoCelda(ws, rowSem, colTmp, rowSem, colFinTmp, "Centro", "Centro", colorCeldaTextoDia, colorCeldaFondoDia, font, 8, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowSem, colTmp, rowSem, colFinTmp, colorLineaDia);

                colTmp += reg.Entero2.Value;
            }

            int rowDia = rowIni + 1;
            int colDia1 = colIni;

            for (var i = 0; i < numDia; i++)
            {
                ws.Cells[rowDia, colDia1 + i].Value = fechaIni.AddDays(i);
                ws.Cells[rowDia, colDia1 + i].Style.Numberformat.Format = "dd/mm";
                ws.Column(colDia1 + i).Width = 17 * factorAncho;

                UtilExcel.SetFormatoCelda(ws, rowDia, colDia1 + i, rowDia, colDia1 + i, "Centro", "Centro", colorCeldaTextoDia, colorCeldaFondoDia, font, 8, false, true);
                UtilExcel.BorderCeldasLineaDelgada(ws, rowDia, colDia1 + i, rowDia, colDia1 + i, colorLineaDia);
            }

            #endregion

            #region Cuerpo

            int rowData = rowDia + 1;
            for (int u = 0; u < listaCombXUnidad.Count; u++)
            {
                var reg = listaCombXUnidad[u];
                var sublista = listaCombustibleContrato.Where(x => x.Gaseoductoequicodi == reg.Gaseoductoequicodi
                                                                   && x.Equipadre == reg.Equipadre && x.Equicodi == reg.Equicodi
                                                                   && x.Tipoinfocodi == reg.Tipoinfocodi && x.Tptomedicodi == reg.Tptomedicodi).ToList();

                int colDiaActual;
                for (var m = 0; m < numDia; m++)
                {
                    colDiaActual = colDia1 + m;

                    DateTime fecha = fechaIni.AddDays(m);
                    var entity2 = sublista.Find(x => x.CbctrtFechaDia == fecha.Date);

                    if (entity2.TieneDeclaracionAgente)
                    {
                        if (entity2 != null)
                            ws.Cells[rowData, colDiaActual].Value = entity2.Valor;
                        UtilExcel.CeldasExcelFormatoNumero(ws, rowData, colDiaActual, rowData, colDiaActual, 5);
                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Derecha", "#000000", "#FFFFFF", font, 8, false, false);
                        UtilExcel.BorderCeldasLineaDiscontinua(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaTieneDisp);
                    }
                    else
                    {
                        ws.Cells[rowData, colDiaActual].Value = "No informó";
                        UtilExcel.SetFormatoCelda(ws, rowData, colDiaActual, rowData, colDiaActual, "Centro", "Centro", "#FFFFFF", "#ff0000", font, 8, false, false);
                        UtilExcel.BorderCeldasLineaDiscontinua(ws, rowData, colDiaActual, rowData, colDiaActual, colorLineaTieneDisp);
                    }
                }
                rowData++;
            }

            #endregion

            //border a toda la tabla
            //UtilExcel.BorderCeldasLineaGruesa(ws, rowDia + 1, colDia1, rowData - 1, colDia1 + numDia - 1, colorLineaTabla);
        }

        #endregion

        #region Insumo: Carga histórica Indisponibilidades Térmicas

        /// <summary>
        /// Genera handson Carga Historico Termo
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <returns></returns>
        public HandsonModel GenerarHandsonCargarHistoricaTermica(int irptcodi)
        {
            List<ExpandoObject> lsta = ListarHistoricoToHandsonPorMes(irptcodi, ConstantesIndisponibilidades.ReportePR25HistoricoTermo, out DateTime periodoIni, out DateTime periodoFin);

            #region Cabecera

            var nestedHeader = new NestedHeaders();

            var headerRow1 = new List<CellNestedHeader>()
            {
                new CellNestedHeader(){ Label = "EMPRESA" }, new CellNestedHeader(){ Label = "CENTRAL" }, new CellNestedHeader(){ Label = "UNIDAD" },
                new CellNestedHeader(){ Label = "EMPRCODI" }, new CellNestedHeader(){ Label = "EQUIPADRE" }, new CellNestedHeader(){ Label = "EQUICODI" }, new CellNestedHeader(){ Label = "GRUPOCODI" }
            };

            var headerRow2 = new List<CellNestedHeader>()
            {
                new CellNestedHeader() { Label = "" }, new CellNestedHeader() { Label = "" }, new CellNestedHeader() { Label = "" },
                new CellNestedHeader() { Label = "" }, new CellNestedHeader() { Label = "" }, new CellNestedHeader() { Label = "" }, new CellNestedHeader() { Label = "" }
            };

            #endregion

            #region Columna

            var lstColumn = new List<object>()
            {
                new { data = "Emprnomb", className = "htLeft" }, new { data = "Central", className = "htLeft" }, new { data = "Equinomb", className = "htLeft" },
                new { data = "Emprcodi" }, new { data = "Equipadre" }, new { data = "Equicodi" }, new { data = "Grupocodi" }
            };

            var lstColumnWidth = new List<int> { 370, 240, 220 };

            #endregion

            for (DateTime periodo = periodoIni; periodo <= periodoFin; periodo = periodo.AddMonths(1))
            {
                headerRow1.Add(new CellNestedHeader() { Label = periodo.NombreMesAbrevAnho(), Colspan = 2 });
                headerRow2.Add(new CellNestedHeader() { Label = "Fortuita<br>(Horas)" });
                headerRow2.Add(new CellNestedHeader() { Label = "Program.<br>(Horas)" });

                lstColumn.Add(new { data = $"{periodo:yyyyMM}.Fortuito", className = "htRight", numericFormat = new { pattern = "0.00" }, type = "numeric", validator = "validatorDecimal" });
                lstColumn.Add(new { data = $"{periodo:yyyyMM}.Program", className = "htRight", numericFormat = new { pattern = "0.00" }, type = "numeric", validator = "validatorDecimal" });
            }

            nestedHeader.ListCellNestedHeaders.Add(headerRow1);
            nestedHeader.ListCellNestedHeaders.Add(headerRow2);

            #region Cuerpo

            List<dynamic> listaData = new List<dynamic>();
            listaData.AddRange(lsta);

            #endregion

            HandsonModel handson = new HandsonModel();
            handson.NestedHeader = nestedHeader;
            handson.ListaExcelData2 = JsonConvert.SerializeObject(listaData);
            handson.ListaColWidth = lstColumnWidth;
            handson.Columnas = lstColumn.ToArray();

            return handson;
        }

        /// <summary>
        /// Generar listado de versiones historicos
        /// </summary>
        /// <param name="url"></param>
        /// <param name="ListaReporte"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoVerHistorico(string url, List<IndReporteDTO> ListaReporte)
        {

            StringBuilder str = new StringBuilder();
            str.Append("<table width='818px' class='pretty tabla-adicional tabla_version_x_recalculo' border='0' cellspacing='0' >");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 80px;'>Acciones</th>");
            str.Append("<th style='width: 80px;'>N° Versión</th>");
            str.Append("<th style='width: 200px;'>Usuario creación</th>");
            str.Append("<th style='width: 250px;'>Fecha creación</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var reg in ListaReporte.OrderByDescending(x => x.Irptnumversion))
            {
                str.Append("<tr>");

                str.Append("<td style='width: 80px;'>");
                str.Append($"<a href='JavaScript:verPorVersion({reg.Irptcodi});' style='margin-right: 4px;'><img style='margin-left: 20px; margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='{url}Content/Images/btn-open.png' alt='Ver versión' title='Ver versión' /></a>");
                str.Append("</td>");

                str.Append($"<td style='width: 80px; text-align: center'>{reg.Irptnumversion}</td>");
                str.Append($"<td style='width: 200px; text-align: center'>{reg.Irptusucreacion}</td>");
                str.Append($"<td style='width: 250px; text-align: center'>{reg.Irptfeccreacion:dd/MM/yyyy HH:mm}</td>");

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();

        }

        /// <summary>
        /// Guarda handson Carga Historico Termo
        /// </summary>
        /// <param name="lstDataFinal"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarCargaHistoricoTermico(List<CargaHistorica> lstDataFinal, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25HistoricoTermo;

            //convertir handson a reporte total
            List<IndReporteTotalDTO> listaDetalleMensual = FormatearIndTotalFromHandson(cuadro, lstDataFinal);

            return GuardarReporteHistoricoToFactores(cuadro, listaDetalleMensual, usuario);
        }

        /// <summary>
        /// Genera archivo excel de Carga Historico Termo
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="lstDataFinal"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelCargaHistoricoTermico(string ruta, List<CargaHistorica> lstDataFinal)
        {
            string nameFile = "Carga_Historica_Termica.xlsx";
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (var xlPackage = new ExcelPackage(newFile))
            {
                var ws = xlPackage.Workbook.Worksheets.Add("IndTermico");
                ws = xlPackage.Workbook.Worksheets["IndTermico"];

                #region Cabecera

                string fontFamily = "Arial";
                var fontHeader = new Font(fontFamily, 8, FontStyle.Bold);
                var fuenteCuerpo = new Font(fontFamily, 8);

                var colorHeader = ColorTranslator.FromHtml("#3d8ab8");
                var colorBorder = ColorTranslator.FromHtml("#dddddd");
                var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");

                int colIni = 2, rowIni = 5;

                var colEmpresa = colIni;
                var colCentral = colEmpresa + 1;
                var colUnidad = colCentral + 1;
                var colEmprcodi = colUnidad + 1;
                var colEquipadre = colEmprcodi + 1;
                var colEquicodi = colEquipadre + 1;
                var colGrupocodi = colEquicodi + 1;
                var colPeriodo = colGrupocodi + 1;

                var rowHeader = rowIni;

                ws.Cells[rowHeader - 3, colUnidad].Value = "HISTÓRICO DE INDISPONIBILIDADES TÉRMICAS";
                ws.Cells[rowHeader - 3, colUnidad].SetFont(new Font(fontFamily, 13.5F, FontStyle.Bold));

                ws.Cells[rowHeader, colEmpresa].Value = "EMPRESA";
                ws.Cells[rowHeader, colCentral].Value = "CENTRAL";
                ws.Cells[rowHeader, colUnidad].Value = "UNIDAD";

                ws.Column(colEmpresa).SetTrueColumnWidth(35);
                ws.Column(colCentral).SetTrueColumnWidth(34);
                ws.Column(colUnidad).SetTrueColumnWidth(35);

                ws.Column(colEmprcodi).Hidden = true;
                ws.Column(colEquipadre).Hidden = true;
                ws.Column(colEquicodi).Hidden = true;
                ws.Column(colGrupocodi).Hidden = true;
                ws.Row(rowHeader - 1).Hidden = true;

                var periodos = lstDataFinal.Select(x => x.Periodo).Distinct().OrderBy(x => x);

                foreach (var periodo in periodos)
                {
                    var _periodo = DateTime.ParseExact($"{periodo}", "yyyyMM", CultureInfo.InvariantCulture);
                    ws.Cells[rowHeader - 1, colPeriodo].Value = periodo;
                    ws.Cells[rowHeader, colPeriodo].Value = _periodo.NombreMesAbrevAnho();
                    ws.Cells[rowHeader, colPeriodo, rowHeader, colPeriodo + 1].Merge = true;

                    ws.Cells[rowHeader + 1, colPeriodo].Value = "Fortuita\n(Horas)";
                    ws.Cells[rowHeader + 1, colPeriodo + 1].Value = "Program.\n(Horas)";
                    ws.Column(colPeriodo).SetTrueColumnWidth(11);
                    ws.Column(colPeriodo + 1).SetTrueColumnWidth(11);

                    colPeriodo += 2;
                }

                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colEmpresa].Merge = true;
                ws.Cells[rowHeader, colCentral, rowHeader + 1, colCentral].Merge = true;
                ws.Cells[rowHeader, colUnidad, rowHeader + 1, colUnidad].Merge = true;

                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo - 1].SetBackgroundColor(colorHeader);
                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo].Style.WrapText = true;
                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo].SetAlignment();
                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo].SetFont(fontHeader);
                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo].SetFontColor(Color.White);

                #endregion

                #region Cuerpo

                var listaData = lstDataFinal.Select(x => new { Emprcodi = x.Emprcodi, Equipadre = x.Equipadre, Equicodi = x.Equicodi, Grupocodi = x.Grupocodi }).Distinct();

                int rowIniC = rowHeader + 2;
                foreach (var item in listaData)
                {
                    var lstUnidad = lstDataFinal.Where(x => x.Emprcodi == item.Emprcodi && x.Equipadre == item.Equipadre && x.Equicodi == item.Equicodi && x.Grupocodi == item.Grupocodi);
                    var unidad = lstUnidad.First();

                    ws.Cells[rowIniC, colEmpresa].Value = unidad.Emprnomb;
                    ws.Cells[rowIniC, colCentral].Value = unidad.Central;
                    ws.Cells[rowIniC, colUnidad].Value = unidad.Equinomb;

                    ws.Cells[rowIniC, colEmprcodi].Value = unidad.Emprcodi;
                    ws.Cells[rowIniC, colEquipadre].Value = unidad.Equipadre;
                    ws.Cells[rowIniC, colEquicodi].Value = unidad.Equicodi;
                    ws.Cells[rowIniC, colGrupocodi].Value = unidad.Grupocodi;

                    var colPer = colGrupocodi + 1;

                    foreach (var periodo in periodos)
                    {
                        var data = lstUnidad.FirstOrDefault(x => x.Periodo == periodo);
                        ws.Cells[rowIniC, colPer++].Value = data.Tothorasf;
                        ws.Cells[rowIniC, colPer++].Value = data.Tothorasp;
                    }

                    rowIniC++;
                }

                UtilExcel.AllBorders(ws.Cells[rowHeader, colEmpresa, rowIniC - 1, colPeriodo - 1], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowHeader, colEmpresa, rowIniC - 1, colPeriodo - 1], ExcelBorderStyle.Medium, colorBorderG);
                ws.Cells[rowHeader, colEmpresa, rowIniC, colPeriodo].SetFont(fuenteCuerpo);
                ws.Cells[rowHeader, colGrupocodi + 1, rowIniC, colPeriodo].Style.Numberformat.Format = "_ * #,##0.00_ ;_ * -#,##0.00_ ;_ * \"-\"??_ ;_ @_ ";

                #endregion

                ws.View.FreezePanes(rowHeader + 2, colUnidad + 1);

                ws.View.ShowGridLines = false;

                xlPackage.Save();

            }

            return nameFile;
        }

        /// <summary>
        /// Importa datos de excel de Carga Historico Termo
        /// </summary>
        /// <param name="stremExcel"></param>
        /// <returns></returns>
        public string ImportarCargaHistoricoTermo(Stream stremExcel)
        {
            using (var xlPackage = new ExcelPackage(stremExcel))
            {
                var ws = xlPackage.Workbook.Worksheets[1];

                var dim = ws.Dimension;
                int rowIni = 4, colIni = 2;
                ExcelRange excelRange = ws.Cells[rowIni, colIni, dim.End.Row, dim.End.Column];
                var dataExcel = (object[,])excelRange.Value;

                var rowLast = dim.End.Row - rowIni;


                var dataPeriodoExcel = Enumerable.Range(0, dataExcel.GetLength(1)).Select(x => dataExcel[0, x]).ToArray();


                List<ExpandoObject> listaJson = new List<ExpandoObject>();

                for (int i = 3; i < rowLast; i++)
                {
                    dynamic data = new ExpandoObject();
                    data.Emprnomb = dataExcel[i, 0]?.ToString();
                    data.Central = dataExcel[i, 1]?.ToString();
                    data.Equinomb = dataExcel[i, 2]?.ToString();

                    data.Emprcodi = dataExcel[i, 3];
                    data.Equipadre = dataExcel[i, 4];
                    data.Equicodi = dataExcel[i, 5];
                    data.Grupocodi = dataExcel[i, 6];


                    for (int p = 7; p < dataPeriodoExcel.Length - 2; p += 2)
                    {
                        AddProperty(data, $"{dataPeriodoExcel[p]}", new { Fortuito = ((dataExcel[i, p]?.ToString()) ?? "").Trim(), Program = ((dataExcel[i, p + 1]?.ToString()) ?? "").Trim() });
                    }
                    listaJson.Add(data);
                }

                return JsonConvert.SerializeObject(listaJson);
            }
        }

        #endregion

        #region Insumo: Carga histórica Indisponibilidades - Métodos comunes

        /// <summary>
        /// generar periodos para los cuadros
        /// </summary>
        public void CrearPeriodoRecalculoPorDefectoHistorico()
        {
            CrearPeriodoRecalculoPorDefectoHistorico(ConstantesIndisponibilidades.ReportePR25HistoricoTermo);
            CrearPeriodoRecalculoPorDefectoHistorico(ConstantesIndisponibilidades.ReportePR25HistoricoHidro);
        }

        /// <summary>
        /// Crear el periodo y el recalculos  de rango variable
        /// </summary>
        /// <param name="cuadro"></param>
        private void CrearPeriodoRecalculoPorDefectoHistorico(int cuadro)
        {
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);

            string horizonte = ConstantesIndisponibilidades.HorizonteVariableMensual;
            DateTime fechaIni = regCuadro.PeriodoIniHistorico;
            DateTime fechaFin = regCuadro.PeriodoFinHistorico;

            #region Crear Periodo y Recalculo cuadro

            List<IndPeriodoDTO> listaPer = GetByCriteriaIndPeriodosCuadro(horizonte);
            IndPeriodoDTO regPeriodo = listaPer.Find(x => x.Iperianio == fechaIni.Year && x.Iperimes == fechaIni.Month && x.Iperianiofin == fechaFin.Year && x.Iperimesfin == fechaFin.Month);

            if (regPeriodo == null)
            {
                regPeriodo = new IndPeriodoDTO();
                regPeriodo.Iperihorizonte = horizonte;
                regPeriodo.Iperianio = fechaIni.Year; //estas fechas son referenciales
                regPeriodo.Iperimes = fechaIni.Month;
                regPeriodo.Iperianiofin = fechaFin.Year;
                regPeriodo.Iperimesfin = fechaFin.Month;
                regPeriodo.Iperinombre = null;
                regPeriodo.Iperianiomes = 0;
                regPeriodo.Iperiestado = null;
                regPeriodo.Iperiusucreacion = "SISTEMA";
                regPeriodo.Iperifeccreacion = DateTime.Now;

                if (regPeriodo.Iperianio == regPeriodo.Iperianiofin && regPeriodo.Iperimes == regPeriodo.Iperimesfin)
                    regPeriodo.Iperinombre = regPeriodo.Iperianio + "." + EPDate.f_NombreMes(regPeriodo.Iperimes);
                else
                    regPeriodo.Iperinombre = regPeriodo.Iperianio + "." + EPDate.f_NombreMes(regPeriodo.Iperimes) + "-" + regPeriodo.Iperianiofin + "." + EPDate.f_NombreMes(regPeriodo.Iperimesfin);

                regPeriodo.Ipericodi = SaveIndPeriodo(regPeriodo); //este periodo estará oculto
            }
            var listaRecalculo = GetByCriteriaIndRecalculos(regPeriodo.Ipericodi);
            var regRecalculo = listaRecalculo.FirstOrDefault();

            if (regRecalculo == null)
            {
                regRecalculo = new IndRecalculoDTO();
                regRecalculo.Ipericodi = regPeriodo.Ipericodi;
                regRecalculo.Irecafechaini = fechaIni;
                regRecalculo.Irecafechafin = fechaFin;
                regRecalculo.Irecafechalimite = fechaFin;
                regRecalculo.Irecafechaobs = fechaFin;
                regRecalculo.Irecausucreacion = "SISTEMA";
                regRecalculo.Irecafeccreacion = DateTime.Now;

                regRecalculo.Irecacodi = SaveIndRecalculo(regRecalculo); //este recalculo estará oculto

                listaRecalculo.Add(regRecalculo);
            }

            #endregion
        }

        /// <summary>
        /// Convertir INDREPORTETOTAL a ExpandoObject
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="cuadro"></param>
        /// <returns></returns>
        public List<ExpandoObject> ListarHistoricoToHandsonPorMes(int irptcodi, int cuadro, out DateTime periodoIni, out DateTime periodoFin)
        {
            var regCuadro = GetByIdIndCuadro(cuadro);

            List<IndReporteTotalDTO> listaRepTotBD = new List<IndReporteTotalDTO>();
            List<IndReporteTotalDTO> listaDetDiario = new List<IndReporteTotalDTO>();

            if (irptcodi > 0)//consultar informacion cargado en Carga histórica Indisponibilidades Hidráulica
            {
                periodoIni = regCuadro.PeriodoIniHistorico;
                periodoFin = regCuadro.PeriodoFinHistorico;

                IndReporteDTO regReporte = GetByIdIndReporte(irptcodi);
                listaRepTotBD = GetByCriteriaIndReporteTotals(irptcodi); //cabecera
                List<IndRelacionRptDTO> listaRel = GetByCriteriaIndRelacionRpts(irptcodi); //detalle
                listaDetDiario = GetByCriteriaIndReporteTotals(string.Join(",", listaRel.Select(x => x.Irelpridsec)));
            }
            else
            {
                //ultima informacion de bd, esta informacion se genera a partir del primer historico y de los cuadros 1 y 4 cuando se realiza el factor programado
                periodoIni = regCuadro.PeriodoIniHistorico;
                periodoFin = GetPeriodoActualHistorico();

                DateTime fechaIni = periodoIni;
                DateTime fechaFin = periodoFin;

                //Obtener la lista de rptcodi
                List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                        && x.Irecafechaini >= fechaIni && x.Irecafechaini <= fechaFin).ToList();
                //Obtener la lista de rptcodi
                List<IndReporteDTO> listaRptValidado = ListarIndReporteMensualValidado(cuadro, listaRecalculo);
                listaDetDiario = GetByCriteriaIndReporteTotals(string.Join(",", listaRptValidado.Select(x => x.Irptcodi)));
            }

            List<EqEquipoDTO> listaAllUnidades = ListarAllEquiposHistoricos(cuadro, listaRepTotBD, GetPeriodoMesIniAplicativo(), periodoFin);

            //obtener detalle mensual
            List<ExpandoObject> listaJson = new List<ExpandoObject>();

            foreach (var regUnidad in listaAllUnidades)
            {
                dynamic data = new ExpandoObject();
                data.Emprnomb = regUnidad.Emprnomb;
                data.Central = regUnidad.Central;
                data.Equinomb = regUnidad.UnidadnombPR25;
                data.Emprcodi = regUnidad.Emprcodi;
                data.Equipadre = regUnidad.Equipadre;
                data.Equicodi = regUnidad.Equicodi;
                data.Grupocodi = regUnidad.Grupocodi;

                var listaDetXUnidad = cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo ? listaDetDiario.Where(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi).ToList()
                                                : listaDetDiario.Where(x => x.Equicodi == regUnidad.Equicodi).ToList();

                for (var periodo = periodoIni; periodo <= periodoFin; periodo = periodo.AddMonths(1))
                {
                    var regxPer = listaDetXUnidad.Find(x => x.Irecafechaini == periodo);

                    decimal? valorProg = regxPer?.NumHorasIp > 0 ? regxPer?.NumHorasIp : null;
                    decimal? valorFort = regxPer?.NumHorasIf > 0 ? regxPer?.NumHorasIf : null;

                    if (cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo)
                        AddProperty(data, $"{periodo:yyyyMM}", new { Fortuito = valorFort, Program = valorProg });
                    else
                        AddProperty(data, $"{periodo:yyyyMM}", valorProg);
                }

                listaJson.Add(data);
            }

            return listaJson;
        }

        /// <summary>
        /// Combina las unidades que ya existen en el historico y agrega las nuevas
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="listaRepTotBD"></param>
        /// <param name="periodoFin"></param>
        /// <returns></returns>
        private List<EqEquipoDTO> ListarAllEquiposHistoricos(int cuadro, List<IndReporteTotalDTO> listaRepTotBD, DateTime periodoIni, DateTime periodoFin)
        {

            //lista de unidades guardados en bd
            var listaFiltroBD = cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo ? listaRepTotBD.DistinctBy(x => new { x.Equicodi, x.Grupocodi }) : listaRepTotBD.DistinctBy(x => new { x.Equicodi });
            List<EqEquipoDTO> listaUnidadesBD = listaFiltroBD
                                                        .Select(z => new EqEquipoDTO()
                                                        {
                                                            Equicodi = z.Equicodi.Value,
                                                            Equinomb = z.Equinomb,
                                                            Grupocodi = z.Grupocodi,
                                                            Emprcodi = z.Emprcodi,
                                                            Emprnomb = z.Emprnomb,
                                                            Equipadre = z.Equipadre,
                                                            Central = z.Central,
                                                            Famcodi = z.Famcodi,
                                                            Grupoincremental = z.Itotincremental,
                                                            UnidadnombPR25 = z.Itotunidadnomb
                                                        }).ToList();

            //obtener unidades que tiene operación comercial solo el último mes
            List<EqEquipoDTO> listaUnidadSiOpComercial = new List<EqEquipoDTO>();

            #region obtener todas las unidades desde el inicio del aplicativo hasta la actualidad

            //generadores segun cuadro
            List<int> listaFamcodi = new List<int>();
            if (cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo) listaFamcodi = new List<int>() { ConstantesHorasOperacion.IdGeneradorTemoelectrico };
            else listaFamcodi = new List<int>() { ConstantesHorasOperacion.IdTipoHidraulica };

            //obtener todos los cambios de operacion comercial
            DateTime fechaIniConsulta = periodoIni;
            DateTime fechaFinConsulta = DateTime.Today;
            List<EqEquipoDTO> listaAllEquipos = servEq.ListarEquiposTienenOpComercial(fechaIniConsulta, fechaFinConsulta
                                                                , string.Join(",", listaFamcodi), out List<ResultadoValidacionAplicativo> listaMsjEq);
            listaAllEquipos = listaAllEquipos.Where(x => (x.Equifechiniopcom > fechaIniConsulta && x.Equifechiniopcom <= fechaFinConsulta)
                                                    || (x.Equifechfinopcom > fechaIniConsulta && x.Equifechfinopcom <= fechaFinConsulta)).ToList();

            var escenariosEntrada = listaAllEquipos.Select(x => x.Equifechiniopcom).Distinct().OrderBy(x => x).ToList();
            var escenariosSalida = listaAllEquipos.Select(x => x.Equifechfinopcom).Distinct().OrderBy(x => x).ToList();
            escenariosEntrada.AddRange(escenariosSalida);
            escenariosEntrada.Add(fechaIniConsulta);
            escenariosEntrada.Add(fechaFinConsulta);

            //por cada fecha obtener las unidades
            escenariosEntrada = escenariosEntrada.Where(x => x != null && x >= fechaIniConsulta).Distinct().OrderBy(x => x).ToList();
            foreach (var fechaOpCom in escenariosEntrada)
            {
                listaUnidadSiOpComercial.AddRange(ListarUnidadesOpComercialByMes(cuadro, fechaOpCom.Value));
            }

            //obtener valores unicos segun cuadro
            if (cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo)
                listaUnidadSiOpComercial = listaUnidadSiOpComercial.GroupBy(x => new { x.Equicodi, x.Grupocodi }).Select(x => x.Last()).ToList();
            else
                listaUnidadSiOpComercial = listaUnidadSiOpComercial.GroupBy(x => new { x.Equicodi }).Select(x => x.Last()).ToList();

            #endregion

            listaUnidadesBD.AddRange(listaUnidadSiOpComercial);

            //combinar ambas listas
            var listaFiltro = cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo ? listaUnidadesBD.DistinctBy(x => new { x.Equicodi, x.Grupocodi }) : listaUnidadesBD.DistinctBy(x => new { x.Equicodi });
            List<EqEquipoDTO> listaAllUnidades = listaFiltro
                                                        .Select(z => new EqEquipoDTO()
                                                        {
                                                            Equicodi = z.Equicodi,
                                                            Equinomb = z.Equinomb,
                                                            Grupocodi = z.Grupocodi,
                                                            Emprcodi = z.Emprcodi,
                                                            Emprnomb = z.Emprnomb,
                                                            Equipadre = z.Equipadre,
                                                            Central = z.Central,
                                                            Grupoincremental = z.Grupoincremental,
                                                            Famcodi = z.Famcodi,
                                                            UnidadnombPR25 = z.UnidadnombPR25
                                                        }).ToList();

            //ordenamiento
            if (cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo)
                listaAllUnidades = listaAllUnidades.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.UnidadnombPR25).ToList();
            else
                listaAllUnidades = listaAllUnidades.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Famcodi).ThenBy(x => x.UnidadnombPR25).ToList();

            return listaAllUnidades;
        }

        /// <summary>
        /// Lógica para guardar la data en cada mes y tener también el historial de envios
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="listaDetalleMensual"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        private int GuardarReporteHistoricoToFactores(int cuadro, List<IndReporteTotalDTO> listaDetalleMensual, string usuario)
        {
            string horizonte = ConstantesIndisponibilidades.HorizonteVariableMensual;

            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            DateTime fechaIni = regCuadro.PeriodoIniHistorico;
            DateTime fechaFin = regCuadro.PeriodoFinHistorico;

            var listaPer = GetByCriteriaIndPeriodosCuadro(horizonte);
            IndPeriodoDTO regPeriodo = listaPer.Find(x => x.Iperianio == fechaIni.Year && x.Iperimes == fechaIni.Month && x.Iperianiofin == fechaFin.Year && x.Iperimesfin == fechaFin.Month);
            var listaRecalculo = GetByCriteriaIndRecalculos(regPeriodo.Ipericodi);
            IndRecalculoDTO regRecalculo = listaRecalculo.FirstOrDefault(); //recalculo del rango de varios meses

            //lista de unidades historicas
            List<EqEquipoDTO> listaUnidadSiOpComercial = ListarAllEquiposHistoricos(cuadro, new List<IndReporteTotalDTO>(), GetPeriodoMesIniAplicativo(), fechaFin.AddMonths(1));

            //guardar los cambios mes por mes
            ProcesarCuadroHist(cuadro, fechaIni, fechaFin, listaUnidadSiOpComercial, listaDetalleMensual, regCuadro.Famcodi, usuario);

            //obtener la lista de reportes mensuales para crear la versión
            ListarDataCuadroHistAGuardarBD(cuadro, regCuadro.Famcodi, fechaIni, fechaFin, out List<IndReporteTotalDTO> listaTotal, out List<IndRelacionRptDTO> listaRel);

            //Guardar
            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = regRecalculo.Irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = ConstantesIndisponibilidades.TiempoHoraPunta,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            if (EsVersionCreableMensualCuadroRelacion(regCuadro, regRecalculo, regReporte, listaTotal, new List<IndReporteDetDTO>(), listaRel))
            {
                CambiarAEstadoHistorico(cuadro, regRecalculo.Irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, regRecalculo.Irecacodi, regReporte);

                //
                ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                regSaveBD.Reporte = regReporte;
                regSaveBD.ListaRptTot = listaTotal;
                regSaveBD.ListaRptDet = new List<IndReporteDetDTO>();
                regSaveBD.ListaRelRpt = listaRel;

                //guardar en BD
                int irptcodi = this.GuardarReporteIndispBDTransaccional(regSaveBD);

                return irptcodi;
            }

            return 0;
        }

        /// <summary>
        /// Guardar la información de todos los meses, previamente se ha convertido las horas a minutos
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaDetalleMensual"></param>
        /// <param name="usuario"></param>
        private void ProcesarCuadroHist(int cuadro, DateTime fechaIni, DateTime fechaFin, List<EqEquipoDTO> listaUnidad, List<IndReporteTotalDTO> listaDetalleMensual, int famcodi, string usuario)
        {
            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);

            //listar los recalculos de periodos normales
            List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                    && x.Irecafechaini >= fechaIni && x.Irecafechaini <= fechaFin).ToList();

            string tiempo = ConstantesIndisponibilidades.TiempoTodoDia;

            foreach (var regRecalculo in listaRecalculo)
            {
                if (regRecalculo.Irecafechaini.Year == 2013 && regRecalculo.Irecafechaini.Month == 2)
                { }

                var listaXRec = listaDetalleMensual.Where(x => x.Irecafechaini == regRecalculo.Irecafechaini).ToList();

                List<IndReporteTotalDTO> listaRptTot = GenerarTotalCuadroHist(cuadro, famcodi, listaUnidad, listaXRec);

                //Guardar
                IndReporteDTO regReporte = new IndReporteDTO()
                {
                    Icuacodi = cuadro,
                    Irecacodi = regRecalculo.Irecacodi,
                    Irpttipo = ConstantesIndisponibilidades.TipoReporteHistorico,
                    Irpttiempo = tiempo,
                    Irptmedicionorigen = null,
                    Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado, //los historicos se consideran validados
                    Irptusucreacion = usuario,
                    Irptfeccreacion = DateTime.Now,
                    Irptestado = "A"
                };

                if (EsVersionCreableMensualCuadro(regCuadro, regRecalculo, regReporte, listaRptTot, new List<IndReporteDetDTO>()))
                {
                    CambiarAEstadoHistorico(cuadro, regRecalculo.Irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
                    regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, regRecalculo.Irecacodi, regReporte);

                    //
                    ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
                    regSaveBD.Reporte = regReporte;
                    regSaveBD.ListaRptTot = listaRptTot;
                    regSaveBD.ListaRptDet = new List<IndReporteDetDTO>();

                    //guardar en BD
                    int irptcodi = this.GuardarReporteIndispBDTransaccional(regSaveBD);
                }
            }
        }

        /// <summary>
        /// Generar el total por cada mes
        /// </summary>
        /// <param name="famcodi"></param>
        /// <param name="listaUnidades"></param>
        /// <param name="listaTotXMesInput"></param>
        /// <returns></returns>
        public List<IndReporteTotalDTO> GenerarTotalCuadroHist(int cuadro, int famcodi, List<EqEquipoDTO> listaUnidades, List<IndReporteTotalDTO> listaTotXMesInput)
        {
            List<IndReporteTotalDTO> listaTotal = new List<IndReporteTotalDTO>();

            int idTotal = 1;
            foreach (var regUnidad in listaUnidades)
            {
                IndReporteTotalDTO regHandson = cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo ? listaTotXMesInput.Find(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi)
                                                                    : listaTotXMesInput.Find(x => x.Equicodi == regUnidad.Equicodi);

                //total
                var objUnidad = new IndReporteTotalDTO()
                {
                    Itotcodi = idTotal,
                    Famcodi = regUnidad.Famcodi ?? 0,
                    Emprcodi = regUnidad.Emprcodi.Value,
                    Equipadre = regUnidad.Equipadre.Value,
                    Grupocodi = regUnidad.Grupocodi,
                    Equicodi = regUnidad.Equicodi,
                    Itotunidadnomb = regUnidad.UnidadnombPR25,
                    Itotminif = regHandson?.Itotminif,
                    Itotminip = regHandson?.Itotminip,
                    Itotopcom = ConstantesAppServicio.SI,
                    Itotincremental = regUnidad.Grupoincremental
                };

                listaTotal.Add(objUnidad);
                idTotal++;
            }

            return listaTotal;
        }

        /// <summary>
        /// Generar la cabecera del reporte
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="famcodi"></param>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="listaTotal"></param>
        /// <param name="listaRel"></param>
        private void ListarDataCuadroHistAGuardarBD(int cuadro, int famcodi, DateTime fechaIni, DateTime fechaFin
                                        , out List<IndReporteTotalDTO> listaTotal, out List<IndRelacionRptDTO> listaRel)
        {
            //Obtener la lista de rptcodi
            List<IndRecalculoDTO> listaRecalculo = this.ListIndRecalculos().Where(x => x.Irecatipo == ConstantesIndisponibilidades.TipoRecalculoMensual
                                                    && x.Irecafechaini >= fechaIni && x.Irecafechaini <= fechaFin).ToList();
            //Obtener la lista de rptcodi
            List<IndReporteDTO> listaRptValidado = ListarIndReporteMensualValidado(cuadro, listaRecalculo);

            //generar la data
            listaTotal = new List<IndReporteTotalDTO>();
            listaRel = new List<IndRelacionRptDTO>();

            List<int> listaRptcodi = listaRptValidado.Select(x => x.Irptcodi).ToList();
            if (listaRptcodi.Any())
            {
                List<IndReporteTotalDTO> listaRptTot = GetByCriteriaIndReporteTotals(string.Join(",", listaRptcodi))
                                                        .Where(x => x.Itotopcom == ConstantesAppServicio.SI).ToList();

                var listaFiltro = cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo ? listaRptTot.DistinctBy(x => new { x.Equicodi, x.Grupocodi }) : listaRptTot.DistinctBy(x => new { x.Equicodi });

                List<EqEquipoDTO> listaUnidad = listaFiltro
                                                                .Select(x => new EqEquipoDTO()
                                                                {
                                                                    Emprnomb = x.Emprnomb,
                                                                    Emprcodi = x.Emprcodi,
                                                                    Central = x.Central,
                                                                    Equipadre = x.Equipadre,
                                                                    UnidadnombPR25 = x.Itotunidadnomb,
                                                                    Equicodi = x.Equicodi.Value,
                                                                    Grupocodi = x.Grupocodi,
                                                                    Famcodi = x.Famcodi,
                                                                    Grupoincremental = x.Itotincremental
                                                                }).
                                                                OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.UnidadnombPR25).ToList();

                int idTotal = 1;
                foreach (var regUnidad in listaUnidad)
                {
                    if (regUnidad.Equicodi == 12664)
                    { }

                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = regUnidad.Famcodi ?? 0,
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Equipadre = regUnidad.Equipadre.Value,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = regUnidad.UnidadnombPR25,
                        Itotincremental = regUnidad.Grupoincremental,
                        Itotopcom = ConstantesAppServicio.SI,
                    };

                    listaTotal.Add(objUnidad);
                    idTotal++;
                }

                listaRel = new List<IndRelacionRptDTO>();
                foreach (var rptcodi in listaRptcodi)
                {
                    listaRel.Add(new IndRelacionRptDTO()
                    {
                        Irelpridsec = rptcodi
                    });
                }
            }
        }

        /// <summary>
        /// validar la informacion del handson
        /// </summary>
        /// <param name="lstDataFinal"></param>
        /// <returns></returns>
        private List<IndReporteTotalDTO> FormatearIndTotalFromHandson(int cuadro, List<CargaHistorica> lstDataFinal)
        {
            List<IndReporteTotalDTO> l = new List<IndReporteTotalDTO>();

            if (cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoTermo)
            {
                foreach (var reg in lstDataFinal)
                {
                    if (reg != null && reg.Equicodi > 0 && reg.Grupocodi > 0 && reg.Periodo > 0
                        && (reg.Tothorasp > 0 || reg.Tothorasf > 0))
                    {
                        int anio = Convert.ToInt32(reg.Periodo.ToString().Substring(0, 4));
                        int mes = Convert.ToInt32(reg.Periodo.ToString().Substring(4, 2));

                        DateTime fechaPeriodo = new DateTime(anio, mes, 1);
                        decimal minProg = reg.Tothorasp.GetValueOrDefault(0) * 60;
                        decimal minFort = reg.Tothorasf.GetValueOrDefault(0) * 60;

                        l.Add(new IndReporteTotalDTO()
                        {
                            Equicodi = reg.Equicodi,
                            Grupocodi = reg.Grupocodi,
                            Itotminif = minFort,
                            Itotminip = minProg,
                            Irecafechaini = fechaPeriodo
                        });
                    }
                }
            }

            if (cuadro == ConstantesIndisponibilidades.ReportePR25HistoricoHidro)
            {
                foreach (var reg in lstDataFinal)
                {
                    if (reg != null && reg.Equicodi > 0 && reg.Periodo > 0
                        && (reg.Tothorasp > 0))
                    {
                        int anio = Convert.ToInt32(reg.Periodo.ToString().Substring(0, 4));
                        int mes = Convert.ToInt32(reg.Periodo.ToString().Substring(4, 2));

                        DateTime fechaPeriodo = new DateTime(anio, mes, 1);
                        decimal minProg = reg.Tothorasp.GetValueOrDefault(0) * 60;

                        l.Add(new IndReporteTotalDTO()
                        {
                            Equicodi = reg.Equicodi,
                            Grupocodi = reg.Grupocodi,
                            Itotminip = minProg,
                            Irecafechaini = fechaPeriodo
                        });
                    }
                }
            }

            return l;
        }

        /// <summary>
        /// agregar propiedad
        /// </summary>
        /// <param name="expando"></param>
        /// <param name="propertyName"></param>
        /// <param name="propertyValue"></param>
        private void AddProperty(ExpandoObject expando, string propertyName, object propertyValue)
        {
            // ExpandoObject supports IDictionary so we can extend it like this
            var expandoDict = expando as IDictionary<string, object>;
            if (expandoDict.ContainsKey(propertyName))
                expandoDict[propertyName] = propertyValue;
            else
                expandoDict.Add(propertyName, propertyValue);
        }

        /// <summary>
        /// Listar versiones de cada envío del usuario
        /// </summary>
        /// <param name="cuadro"></param>
        /// <returns></returns>
        public List<IndReporteDTO> ListarVersionesHistorico(int cuadro)
        {
            string horizonte = ConstantesIndisponibilidades.HorizonteVariableMensual;

            IndCuadroDTO regCuadro = this.GetByIdIndCuadro(cuadro);
            DateTime fechaIni = regCuadro.PeriodoIniHistorico;
            DateTime fechaFin = regCuadro.PeriodoFinHistorico;

            List<IndPeriodoDTO> listaPer = GetByCriteriaIndPeriodosCuadro(horizonte);
            IndPeriodoDTO regPeriodo = listaPer.Find(x => x.Iperianio == fechaIni.Year && x.Iperimes == fechaIni.Month && x.Iperianiofin == fechaFin.Year && x.Iperimesfin == fechaFin.Month);

            if (regPeriodo != null)
            {
                var listaRecalculo = GetByCriteriaIndRecalculos(regPeriodo.Ipericodi);
                var regRecalculo = listaRecalculo.FirstOrDefault(); //recalculo del rango de varios meses

                return GetByCriteriaIndReportes(cuadro, regRecalculo.Irecacodi).OrderByDescending(x => x.Irptnumversion).ToList();
            }

            return new List<IndReporteDTO>();
        }

        /// <summary>
        /// Actualiza un registro de la tabla SI_PARAMETRO_VALOR
        /// </summary>
        public void UpdateSiParametroValor(int siparvcodi, string usuario, string mes)
        {
            try
            {
                var reg = FactorySic.GetSiParametroValorRepository().GetById(siparvcodi);
                reg.Siparvfecmodificacion = DateTime.Now;
                reg.Siparvusumodificacion = usuario;
                reg.Siparvnota = (mes ?? "").Trim();
                FactorySic.GetSiParametroValorRepository().Update(reg);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw new Exception(ex.Message, ex);
            }
        }

        /// <summary>
        /// Periodo en el cual se comenzó a registrar los ingresos / retiros de operación comercial
        /// </summary>
        /// <returns></returns>
        public DateTime GetPeriodoMesIniAplicativo()
        {
            return DateTime.ParseExact(ConstantesIndisponibilidades.MesIniAplicativo, ConstantesAppServicio.FormatoMes, CultureInfo.InvariantCulture);
        }

        #endregion

        #region Insumo: Carga histórica Indisponibilidades Hidro

        /// <summary>
        /// Genera handson Carga Historico Hidro
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <returns></returns>
        public HandsonModel GenerarHandsonCargarHistoricaHidro(int irptcodi)
        {
            List<ExpandoObject> lsta = ListarHistoricoToHandsonPorMes(irptcodi, ConstantesIndisponibilidades.ReportePR25HistoricoHidro, out DateTime periodoIni, out DateTime periodoFin);

            #region Cabecera

            var headers = new List<string>() { "EMPRESA", "CENTRAL", "UNIDAD", "Emprcodi", "Equipadre", "Equicodi", "Grupocodi" };


            var lstColumn = new List<object>()
            {
                new { data = "Emprnomb", className = "htLeft" }, new { data = "Central", className = "htLeft" }, new { data = "Equinomb", className = "htLeft" },
                new { data = "Emprcodi" }, new { data = "Equipadre" }, new { data = "Equicodi" }, new { data = "Grupocodi" }
            };

            var lstColumnWidth = new List<int> { 370, 180, 120, 0, 0, 0, 0 };

            for (DateTime periodo = periodoIni; periodo <= periodoFin; periodo = periodo.AddMonths(1))
            {
                lstColumn.Add(new { data = $"{periodo:yyyyMM}", className = "htRight", numericFormat = new { pattern = "0.00" }, type = "numeric", validator = "validatorDecimal" });
                headers.Add($"<b>{periodo.NombreMesAbrevAnho()}</b><br>Program.<br>(Horas)");
                lstColumnWidth.Add(100);
            }

            #endregion

            #region Cuerpo

            List<dynamic> listaData = new List<dynamic>();
            listaData.AddRange(lsta);

            #endregion

            HandsonModel handson = new HandsonModel();
            handson.Headers = headers.ToArray();
            handson.ListaExcelData2 = JsonConvert.SerializeObject(listaData);
            handson.ListaColWidth = lstColumnWidth;
            handson.Columnas = lstColumn.ToArray();

            return handson;
        }

        /// <summary>
        /// Guarda handson Carga Historico Hidro
        /// </summary>
        /// <param name="lstDataFinal"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public int GuardarCargaHistoricoHidro(List<CargaHistorica> lstDataFinal, string usuario)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25HistoricoHidro;

            //convertir handson a reporte total
            List<IndReporteTotalDTO> listaDetalleMensual = FormatearIndTotalFromHandson(cuadro, lstDataFinal);

            return GuardarReporteHistoricoToFactores(cuadro, listaDetalleMensual, usuario);
        }

        /// <summary>
        /// Genera archivo excel de Carga Historico Hidro
        /// </summary>
        /// <param name="ruta"></param>
        /// <param name="lstDataFinal"></param>
        /// <returns></returns>
        public string GenerarArchivoExcelCargaHistoricoHidro(string ruta, List<CargaHistorica> lstDataFinal)
        {
            string nameFile = "Carga_Historica_Hidro.xlsx";
            string rutaFile = ruta + nameFile;

            FileInfo newFile = new FileInfo(rutaFile);

            if (newFile.Exists)
            {
                newFile.Delete();
                newFile = new FileInfo(rutaFile);
            }

            using (var xlPackage = new ExcelPackage(newFile))
            {
                var ws = xlPackage.Workbook.Worksheets.Add("IndTermico");
                ws = xlPackage.Workbook.Worksheets["IndTermico"];

                #region Cabecera

                string fontFamily = "Arial";
                var fontHeader = new Font(fontFamily, 8, FontStyle.Bold);
                var fuenteCuerpo = new Font(fontFamily, 8);

                var colorHeader = ColorTranslator.FromHtml("#3d8ab8");
                var colorBorder = ColorTranslator.FromHtml("#dddddd");
                var colorBorderG = ColorTranslator.FromHtml("#d2d2d2");

                int colIni = 2, rowIni = 5;

                var colEmpresa = colIni;
                var colCentral = colEmpresa + 1;
                var colUnidad = colCentral + 1;
                var colEmprcodi = colUnidad + 1;
                var colEquipadre = colEmprcodi + 1;
                var colEquicodi = colEquipadre + 1;
                var colGrupocodi = colEquicodi + 1;
                var colPeriodo = colGrupocodi + 1;

                var rowHeader = rowIni;

                ws.Cells[rowHeader - 3, colUnidad].Value = "HISTÓRICO DE INDISPONIBILIDADES HÍDRICOS";
                ws.Cells[rowHeader - 3, colUnidad].SetFont(new Font(fontFamily, 13.5F, FontStyle.Bold));

                ws.Cells[rowHeader, colEmpresa].Value = "EMPRESA";
                ws.Cells[rowHeader, colCentral].Value = "CENTRAL";
                ws.Cells[rowHeader, colUnidad].Value = "UNIDAD";

                ws.Column(colEmpresa).SetTrueColumnWidth(35);
                ws.Column(colCentral).SetTrueColumnWidth(34);
                ws.Column(colUnidad).SetTrueColumnWidth(18);

                ws.Column(colEmprcodi).Hidden = true;
                ws.Column(colEquipadre).Hidden = true;
                ws.Column(colEquicodi).Hidden = true;
                ws.Column(colGrupocodi).Hidden = true;

                ws.Row(rowHeader - 1).Hidden = true;

                var periodos = lstDataFinal.Select(x => x.Periodo).Distinct().OrderBy(x => x);

                foreach (var periodo in periodos)
                {
                    var _periodo = DateTime.ParseExact($"{periodo}", "yyyyMM", CultureInfo.InvariantCulture);
                    ws.Cells[rowHeader - 1, colPeriodo].Value = periodo;
                    ws.Cells[rowHeader, colPeriodo].Value = _periodo.NombreMesAbrevAnho();

                    ws.Cells[rowHeader + 1, colPeriodo].Value = "Program.\n(Horas)";
                    ws.Column(colPeriodo).SetTrueColumnWidth(11);

                    colPeriodo++;
                }

                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colEmpresa].Merge = true;
                ws.Cells[rowHeader, colCentral, rowHeader + 1, colCentral].Merge = true;
                ws.Cells[rowHeader, colUnidad, rowHeader + 1, colUnidad].Merge = true;

                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo - 1].SetBackgroundColor(colorHeader);
                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo].Style.WrapText = true;
                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo].SetAlignment();
                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo].SetFont(fontHeader);
                ws.Cells[rowHeader, colEmpresa, rowHeader + 1, colPeriodo].SetFontColor(Color.White);

                #endregion

                #region Cuerpo

                var listaData = lstDataFinal.Select(x => new { Emprcodi = x.Emprcodi, Equipadre = x.Equipadre, Equicodi = x.Equicodi, Grupocodi = x.Grupocodi }).Distinct();

                int rowIniC = rowHeader + 2;
                foreach (var item in listaData)
                {
                    var lstUnidad = lstDataFinal.Where(x => x.Emprcodi == item.Emprcodi && x.Equipadre == item.Equipadre && x.Equicodi == item.Equicodi && x.Grupocodi == item.Grupocodi);
                    var unidad = lstUnidad.First();

                    ws.Cells[rowIniC, colEmpresa].Value = unidad.Emprnomb;
                    ws.Cells[rowIniC, colCentral].Value = unidad.Central;
                    ws.Cells[rowIniC, colUnidad].Value = unidad.Equinomb;

                    ws.Cells[rowIniC, colEmprcodi].Value = unidad.Emprcodi;
                    ws.Cells[rowIniC, colEquipadre].Value = unidad.Equipadre;
                    ws.Cells[rowIniC, colEquicodi].Value = unidad.Equicodi;
                    ws.Cells[rowIniC, colGrupocodi].Value = unidad.Grupocodi;

                    var colPer = colGrupocodi + 1;

                    foreach (var periodo in periodos)
                    {
                        var data = lstUnidad.FirstOrDefault(x => x.Periodo == periodo);
                        ws.Cells[rowIniC, colPer++].Value = data.Tothorasp;
                    }

                    rowIniC++;
                }

                UtilExcel.AllBorders(ws.Cells[rowHeader, colEmpresa, rowIniC - 1, colPeriodo - 1], ExcelBorderStyle.Thin, colorBorder);
                UtilExcel.BorderAround(ws.Cells[rowHeader, colEmpresa, rowIniC - 1, colPeriodo - 1], ExcelBorderStyle.Medium, colorBorderG);
                ws.Cells[rowHeader, colEmpresa, rowIniC, colPeriodo].SetFont(fuenteCuerpo);
                ws.Cells[rowHeader, colGrupocodi + 1, rowIniC, colPeriodo].Style.Numberformat.Format = "_ * #,##0.00_ ;_ * -#,##0.00_ ;_ * \"-\"??_ ;_ @_ ";

                #endregion

                ws.View.FreezePanes(rowHeader + 2, colUnidad + 1);

                ws.View.ShowGridLines = false;

                xlPackage.Save();

            }

            return nameFile;
        }

        /// <summary>
        /// Importa datos de excel de Carga Historico Hidro
        /// </summary>
        /// <param name="stremExcel"></param>
        /// <returns></returns>
        public string ImportarCargaHistoricoHidro(Stream stremExcel)
        {
            using (var xlPackage = new ExcelPackage(stremExcel))
            {
                var ws = xlPackage.Workbook.Worksheets[1];

                var dim = ws.Dimension;
                int rowIni = 4, colIni = 2;
                ExcelRange excelRange = ws.Cells[rowIni, colIni, dim.End.Row, dim.End.Column];
                var dataExcel = (object[,])excelRange.Value;

                var rowLast = dim.End.Row - rowIni;


                var dataPeriodoExcel = Enumerable.Range(0, dataExcel.GetLength(1)).Select(x => dataExcel[0, x]).ToArray();


                List<ExpandoObject> listaJson = new List<ExpandoObject>();

                for (int i = 3; i < rowLast; i++)
                {
                    dynamic data = new ExpandoObject();
                    data.Emprnomb = dataExcel[i, 0]?.ToString();
                    data.Central = dataExcel[i, 1]?.ToString();
                    data.Equinomb = dataExcel[i, 2]?.ToString();

                    data.Emprcodi = dataExcel[i, 3];
                    data.Equipadre = dataExcel[i, 4];
                    data.Equicodi = dataExcel[i, 5];
                    data.Grupocodi = dataExcel[i, 6];


                    for (int p = 7; p < dataPeriodoExcel.Length; p++)
                    {
                        AddProperty(data, $"{dataPeriodoExcel[p]}", ((dataExcel[i, p]?.ToString()) ?? "").Trim());
                    }
                    listaJson.Add(data);
                }

                return JsonConvert.SerializeObject(listaJson);
            }
        }

        #endregion

        #region Insumo: Disponibilidad de Calor Util

        public void CalculoPotenciaFirmeCogeneracion(int irptcodi, DateTime fechaIni, DateTime fechaFin, out List<PfReporteTotalDTO> listaPF)
        {
            TimeSpan ts = fechaFin.Date - fechaIni.Date;
            int diasPeriodo = ts.Days + 1;

            List<PfDispcalorutilDTO> listaBD = GetByCriteriaPfDispcalorutils(irptcodi);

            string empresas = string.Join(", ", ListarEmpresaCoGeneracion(fechaIni, fechaFin).Select(x => x.Emprcodi));
            List<MeMedicion96DTO> listaMedicion = (new ReporteMedidoresAppServicio()).ListaDataMDGeneracionConsolidado(fechaIni, fechaFin, ConstantesMedicion.IdTipogrupoCOES, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), empresas
                , ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false);
            listaMedicion = listaMedicion.Where(x => x.Grupotipocogen == ConstantesAppServicio.SI).ToList();

            //lista de centrales
            List<EqEquipoDTO> listaUnidadCog = listaMedicion.GroupBy(x => x.Equipadre)
                .Select(x => new EqEquipoDTO() { Equipadre = x.Key, Central = x.First().Central, Emprnomb = x.Last().Emprnomb, Emprcodi = x.Last().Emprcodi, Equicodi = x.Key, Grupocodi = x.First().Grupocodi })
                .OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ToList();

            //minutos sin calor util
            List<PrGrupodatDTO> listaDatSinCU = ListarPrGrupodatHistoricoEnteroValido(ConstantesIndisponibilidades.ConcepcodiMinSinCalorUtil.ToString());

            //
            listaPF = new List<PfReporteTotalDTO>();

            foreach (var reg in listaUnidadCog)
            {
                PfReporteTotalDTO regUnidad = new PfReporteTotalDTO();
                regUnidad.Emprcodi = reg.Emprcodi.Value;
                regUnidad.Equipadre = reg.Equipadre.Value;
                regUnidad.Equicodi = reg.Equicodi;
                regUnidad.Emprnomb = reg.Emprnomb;
                regUnidad.Central = reg.Central;

                int totalHCu = 0;//Cantidad de cuartos de hora que tienen disponibilidad
                int minCu = 0;
                decimal sumPotPeriodo = 0;

                List<PfDispcalorutilDTO> listaXCentralSinCU = listaBD.Where(x => x.Equipadre == reg.Equipadre).ToList();

                for (DateTime day = fechaIni.Date; day <= fechaFin.Date; day = day.AddDays(1))
                {
                    //agrupar el detalle por generador o central
                    List<MeMedicion96DTO> listaDay;
                    if (reg.Equipadre != reg.Equicodi)
                        listaDay = listaMedicion.Where(x => x.Equicodi == reg.Equicodi && x.Medifecha.Value.Date == day).ToList(); //equipo
                    else
                        listaDay = listaMedicion.Where(x => x.Equipadre == reg.Equipadre && x.Medifecha.Value.Date == day).ToList(); //central

                    for (int i = 1; i <= 96; i++)
                    {
                        var cu = listaXCentralSinCU.Find(x => x.Pfcufecha == day && x.Pfcuh == i);
                        bool tienedisp = cu == null || (cu != null && cu.Pfcutienedisp == 1);
                        totalHCu += tienedisp ? 1 : 0;

                        if (cu == null)
                            minCu += 15;
                        else if (cu != null && cu.Pfcutienedisp == 1)
                            minCu += cu.Pfcumin.GetValueOrDefault(0);

                        decimal valH = 0;
                        foreach (var regH in listaDay)
                            valH += ((decimal?)regH.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(regH, null)).GetValueOrDefault(0);

                        //PMEcc: Potencia media de cogeneracion ejecutada
                        if (tienedisp)
                            sumPotPeriodo += valH;
                    }
                }

                #region Obtener dato de minutos sin calor util de PR_GRUPODAT

                PrGrupoDTO grupo = FactorySic.GetPrGrupoRepository().GetById(reg.Grupocodi ?? 0);
                int grupocentral = 0;
                if (grupo.Catecodi == 3 || grupo.Catecodi == 5) //grupos despacho
                {
                    grupocentral = grupo.Grupopadre.GetValueOrDefault(-1);
                }
                if (grupo.Catecodi == 4 || grupo.Catecodi == 6) //centrales
                {
                    grupocentral = grupo.Grupocodi;
                }

                GetEnteroFromListaGrupoDat(fechaFin, grupocentral, listaDatSinCU, out int mincuDat, out DateTime? fechaVige0);
                if (fechaVige0 != fechaIni)
                {
                    mincuDat = 0;
                }

                if (mincuDat > 0)
                {
                    regUnidad.TotalMinutosPeriodo = diasPeriodo * 96 * 15;
                    regUnidad.TotalMinutosSinCalorUtil = mincuDat;
                    regUnidad.TotalMinutosCalorUtil = regUnidad.TotalMinutosPeriodo - regUnidad.TotalMinutosSinCalorUtil;
                    regUnidad.PotenciaPromedio = totalHCu > 0 ? sumPotPeriodo / (totalHCu) : 0;
                }
                else
                {
                    regUnidad.TotalMinutosPeriodo = diasPeriodo * 96 * 15;
                    regUnidad.TotalMinutosCalorUtil = minCu;
                    regUnidad.TotalMinutosSinCalorUtil = regUnidad.TotalMinutosPeriodo - regUnidad.TotalMinutosCalorUtil;
                    regUnidad.PotenciaPromedio = totalHCu > 0 ? sumPotPeriodo / (totalHCu) : 0;
                }

                #endregion

                listaPF.Add(regUnidad);
            }
        }

        public string GenerarHtmlDisponibilidadCalorUtil(int irptcodi, int irecacodi, DateTime fechaIni, int horaIni, DateTime fechaFin, int horaFin, int empresas, out int versionMostrada, out List<EqEquipoDTO> listaCentrall)
        {
            this.ListarDataDisponibilidadCalorUtilXPeriodo(irptcodi, irecacodi, fechaIni, horaIni, fechaFin, horaFin, empresas, out List<PfDispcalorutilDTO> listaData, out List<EqEquipoDTO> listaCentral, out List<SiEmpresaDTO> listaEmpresa, out versionMostrada);
            listaCentrall = listaCentral;

            if (!listaData.Any())
            {
                return string.Empty;
            }

            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = " ";
            nfi.NumberDecimalDigits = 2;
            nfi.NumberDecimalSeparator = ",";

            StringBuilder strHtml = new StringBuilder();
            strHtml.Append(@"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_cu'>
                            <thead>
                                <tr>
                                    <th style='background:#16365D;' rowspan=3>HORA</th>
             ");


            foreach (var reg in listaEmpresa)
            {
                int numCentral = listaCentral.Count(x => x.Emprcodi == reg.Emprcodi);
                strHtml.AppendFormat(@"<th style='background:#16365D;' colspan='{1}'>{0}</th>", reg.Emprnomb, numCentral * 3);
            }
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var reg in listaCentral)
            {
                strHtml.AppendFormat(@"<th style='background:#16365D;' colspan='{1}'>{0}</th>", reg.Central, 3);
            }
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            foreach (var reg in listaCentral)
            {
                strHtml.AppendFormat("<th style='background:#16365D;'> <input type='checkbox' name='checkd_todo_{0}_{1}' checked=''>  Disponibilidad</th>", reg.Equipadre, reg.Emprcodi);
                strHtml.Append("<th style='background:#16365D;'>Minutos</th>");
                strHtml.Append("<th style='background:#16365D;'>Potencia Activa</th>");
            }
            strHtml.Append(@"
                                </tr>
                            </thead>
                            <tbody>
            ");

            int posFila = 1;
            for (DateTime day = fechaIni.AddMinutes(15 * horaIni); day <= fechaFin.AddMinutes(horaFin * 15); day = day.AddMinutes(15))
            {
                int minutos = day.Hour * 60 + day.Minute;
                int h = minutos > 0 ? (minutos / 15) : 96;

                strHtml.AppendFormat("<tr class='fila_dato' id='tr_{0}'>", posFila);
                strHtml.AppendFormat(@"<td style='background:#4F81BD; color:white; font-weight:bold; text-align: center; font-size:13px;'>{3} <input type='hidden' id='hfTdFecha_{0}' value='{1}' /> <input type='hidden' id='hfTdh_{0}' value='{2}' /> </td>"
                                , posFila, day.AddMinutes(-1).ToString(ConstantesAppServicio.FormatoFecha), h, day.ToString(ConstantesAppServicio.FormatoFechaHora));

                foreach (var reg in listaCentral)
                {
                    PfDispcalorutilDTO regH = listaData.Find(x => x.FechaHora == day && x.Equicodi == reg.Equipadre);
                    var isCkecked = (regH != null && regH.Pfcutienedisp == 1) || regH.Pfcutienedisp == 1;

                    int? pfcumin = null;
                    var minDisabled = "display: none;";
                    if (isCkecked)
                    {
                        minDisabled = string.Empty;
                        pfcumin = 15;
                        if (regH.Pfcumin.HasValue) pfcumin = regH.Pfcumin.Value;
                    }

                    strHtml.AppendFormat(@"<td style='text-align: center;'><input type='checkbox' onchange='cambioDisponibilidad(this)' id='checkdispcu_{0}_{2}_{3}' {1} /></td>", posFila, isCkecked ? "checked" : string.Empty, reg.Equipadre, reg.Emprcodi);
                    strHtml.AppendFormat(@"<td style='text-align: center;'><input type='number' step='1' min='1' max='15' id='txtMin_{0}_{2}_{3}' value='{1}' style='width:40px;{4};' onkeypress='return validarNumeroEntero(this,event)' /></td>", posFila, pfcumin, reg.Equipadre, reg.Emprcodi, minDisabled);
                    strHtml.AppendFormat(@"<td style='text-align: center; background:#D2EFF7;'>{0}</td>", regH != null && regH.Mw.GetValueOrDefault(0) != 0 ? regH.Mw.Value.ToString(nfi) : string.Empty);
                }

                strHtml.Append("</tr>");
                posFila++;
            }

            strHtml.Append(@"
                            </tbody>
                        </table>
            ");

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera el listado de las versiones de los insumos (potencia garantizada, adicional y contratos de compra y venta)
        /// </summary>
        /// <param name="url"></param>
        /// <param name="tienePermisoEditar"></param>
        /// <param name="recursocodi"></param>
        /// <param name="recacodi"></param>
        /// <returns></returns>
        public string GenerarHtmlListadoVersionCu(string url, bool tienePermisoEditar, int recacodi)
        {
            List<IndReporteDTO> listaVersiones = GetByCriteriaIndReportes(ConstantesIndisponibilidades.ReportePR25DisponibilidadCalorUtil, recacodi);

            string colorFondo = "";
            var colorAprobado = "#C6E0B4";
            //var colorGenerado = "##F2F5F7";

            StringBuilder str = new StringBuilder();
            str.Append("<table width='818px' class='pretty tabla-adicional tabla_version_x_recalculo' border='0' cellspacing='0' >");

            str.Append("<thead>");
            #region cabecera
            str.Append("<tr>");
            str.Append("<th style='width: 80px;'>Acciones</th>");
            str.Append("<th style='width: 80px;'>N° Versión</th>");
            str.Append("<th style='width: 150px;'>Estado</th>");
            str.Append("<th style='width: 200px;'>Usuario creación</th>");
            str.Append("<th style='width: 250px;'>Fecha creación</th>");
            str.Append("</tr>");
            #endregion
            str.Append("</thead>");

            str.Append("<tbody>");
            #region cuerpo

            foreach (var reg in listaVersiones.OrderByDescending(x => x.Irptnumversion).ToList())
            {
                if (reg.Irptesfinal == ConstantesIndisponibilidades.EsVersionValidado)
                    colorFondo = colorAprobado;

                str.AppendFormat("<tr style='background-color: {0};'>", colorFondo);
                str.AppendFormat("<td style='width: 80px; background-color: {0};'>", colorFondo);
                str.AppendFormat("<a class='' href='JavaScript:verPorVersion(" + reg.Irptcodi + ");' style='margin-right: 4px;'><img style='margin-left: 20px; margin-top: 4px; margin-bottom: 4px; cursor:pointer;' src='" + url + "Content/Images/btn-open.png' alt='Ver versión' title='Ver versión' /></a>");
                str.Append("</td>");
                str.AppendFormat("<td class='' style='width: 80px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.Irptnumversion);
                str.AppendFormat("<td class='' style='width: 150px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.IrptesfinalDesc);
                str.AppendFormat("<td class='' style='width: 200px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.Irptusucreacion);
                str.AppendFormat("<td class='' style='width: 250px; text-align: center; background-color: {0};'>{1}</td>", colorFondo, reg.Irptfeccreacion.ToString(ConstantesAppServicio.FormatoFechaFull));

                str.Append("</tr>");
            }

            #endregion
            str.Append("</tbody>");

            str.Append("</table>");

            return str.ToString();

        }

        public void ListarDataDisponibilidadCalorUtilXPeriodo(int irptcodi, int irecacodi, DateTime fechaIni, int horaIni, DateTime fechaFin, int horaFin, int emprcodi
                                        , out List<PfDispcalorutilDTO> listaData, out List<EqEquipoDTO> listaCentral, out List<SiEmpresaDTO> listaEmpresa, out int versionMostrada)
        {
            listaData = new List<PfDispcalorutilDTO>();
            listaCentral = new List<EqEquipoDTO>();
            listaEmpresa = new List<SiEmpresaDTO>();
            versionMostrada = 0;

            if (irecacodi <= 0)
                return;

            string empresas = emprcodi.ToString();
            if (emprcodi == -1)
            {
                empresas = string.Join(", ", ListarEmpresaCoGeneracion(fechaIni, fechaFin).Select(x => x.Emprcodi));
            }

            List<MeMedicion96DTO> listaMedicion = (new ReporteMedidoresAppServicio()).ListaDataMDGeneracionConsolidado(fechaIni, fechaFin, ConstantesMedicion.IdTipogrupoCOES, ConstantesMedicion.IdTipoGeneracionTodos.ToString(), empresas
                , ConstanteValidacion.EstadoTodos, ConstantesMedicion.IdTipoRecursoTodos.ToString(), false);
            listaMedicion = listaMedicion.Where(x => x.Grupotipocogen == ConstantesAppServicio.SI).ToList();

            //lista de centrales
            listaCentral = listaMedicion.GroupBy(x => x.Equipadre)
                .Select(x => new EqEquipoDTO() { Equipadre = x.Key, Central = x.First().Central, Emprnomb = x.Last().Emprnomb, Emprcodi = x.Last().Emprcodi })
                .OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ToList();

            listaEmpresa = listaCentral.GroupBy(x => x.Emprcodi).Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Value, Emprnomb = x.First().Emprnomb, })
                .OrderBy(x => x.Emprnomb).ToList();

            //última versión
            IndReporteDTO regRpt = GetUltimaVersion(ConstantesIndisponibilidades.ReportePR25DisponibilidadCalorUtil, irecacodi, ConstantesIndisponibilidades.TipoReporteAplicativo, null);
            int ultVerscodi = irptcodi <= 0 ? (regRpt != null ? regRpt.Irptcodi : 0) : irptcodi;
            versionMostrada = ultVerscodi;

            List<PfDispcalorutilDTO> listaBD = GetByCriteriaPfDispcalorutils(ultVerscodi);

            listaData = new List<PfDispcalorutilDTO>();
            foreach (var regCentral in listaCentral)
            {
                for (DateTime day = fechaIni.Date; day <= fechaFin.Date; day = day.AddDays(1))
                {
                    var listaDay = listaMedicion.Where(x => x.Equipadre == regCentral.Equipadre && x.Medifecha.Value.Date == day).ToList();

                    for (int i = 1; i <= 96; i++)
                    {
                        DateTime fechaHoraH = day.AddMinutes(i * 15);
                        decimal valH = 0;

                        foreach (var regH in listaDay)
                            valH += ((decimal?)regH.GetType().GetProperty(ConstantesAppServicio.CaracterH + i).GetValue(regH, null)).GetValueOrDefault(0);

                        var dispCalorUtilDB = listaBD.Find(x => x.Pfcufecha == day && x.Pfcuh == i && x.Equipadre == regCentral.Equipadre);

                        int tienedisp = dispCalorUtilDB != null ? dispCalorUtilDB.Pfcutienedisp : 1;
                        var minutos = dispCalorUtilDB?.Pfcumin;

                        listaData.Add(new PfDispcalorutilDTO()
                        {
                            Emprcodi = regCentral.Emprcodi.Value,
                            Emprnomb = regCentral.Emprnomb,
                            Equicodi = regCentral.Equipadre.Value,
                            Equinomb = regCentral.Central,
                            Pfcufecha = day,
                            FechaHora = fechaHoraH,
                            Pfcuh = i,
                            Mw = valH,
                            Pfcumin = minutos,
                            Pfcutienedisp = tienedisp
                        });

                    }
                }
            }

            //filtrar
            listaData = listaData.Where(x => fechaIni.AddMinutes(15 * horaIni) <= x.FechaHora && x.FechaHora <= fechaFin.AddMinutes(15 * horaFin)).ToList();
        }

        /// <summary>
        /// Guarda registros de potencia garantizada, previamente genera registros de versiones
        /// </summary>
        /// <param name="usuario"></param>
        /// <param name="lstPGarantizada"></param>
        /// <param name="pericodi"></param>
        /// <param name="recacodi"></param>
        /// <param name="versionAnterior"></param>
        /// <param name="fechaPeriodoIni"></param>
        public int GuardarDisponibilidadCalorUtil(List<PfDispcalorutilDTO> listaFinal, string usuario, int irecacodi)
        {
            int cuadro = ConstantesIndisponibilidades.ReportePR25DisponibilidadCalorUtil;
            IndCuadroDTO regCuadro = GetByIdIndCuadro(cuadro);

            //
            IndReporteDTO regReporte = new IndReporteDTO()
            {
                Icuacodi = cuadro,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteAplicativo,
                Irpttiempo = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado,
                Irptusucreacion = usuario,
                Irptfeccreacion = DateTime.Now,
                Irptestado = "A"
            };

            CambiarAEstadoHistorico(cuadro, irecacodi, regReporte.Irpttipo, regReporte.Irpttiempo);
            regReporte.Irptnumversion = GetNumeroVersionActual(regCuadro, irecacodi, regReporte);

            ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
            regSaveBD.Reporte = regReporte;
            regSaveBD.ListaCalorUtil = listaFinal;

            return GuardarReporteIndispBDTransaccional(regSaveBD);
        }

        /// <summary>
        /// Guardar copia de calor ultil en el nuevo recálculo
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="codRecaAnterior"></param>
        /// <param name="usuario"></param>
        public void GuardarCopiaCalorUtil(int ipericodi, int codRecaAnterior, string usuario)
        {
            int resultado = 0;

            List<IndRecalculoDTO> listaDataRecalculo = this.GetByCriteriaIndRecalculos(ipericodi).OrderByDescending(x => x.Orden).ToList();
            var ultimoRecalculo = listaDataRecalculo.First();

            //lista de versiones de calor útil del recálculo anterior
            List<IndReporteDTO> listaVersiones = GetByCriteriaIndReportes(ConstantesIndisponibilidades.ReportePR25DisponibilidadCalorUtil, codRecaAnterior).OrderByDescending(x => x.Irptnumversion).ToList();

            IndReporteDTO ultimaversion = listaVersiones.Any() ? listaVersiones.First() : listaVersiones.FirstOrDefault();
            int ultVerscodi = ultimaversion != null ? ultimaversion.Irptcodi : 0;

            //traer data de la última version del recálculo anterior
            List<PfDispcalorutilDTO> listaFinal = GetByCriteriaPfDispcalorutils(ultVerscodi);

            if (ultimoRecalculo.Orden >= 3)
            {
                if (listaFinal.Any())
                {
                    resultado = GuardarDisponibilidadCalorUtil(listaFinal, usuario, ultimoRecalculo.Irecacodi);
                }
            }
        }

        public void EditarDisponibilidadCalorUtil(int irecacodi, List<PfDispcalorutilDTO> lstCuInput, DateTime fechaIni, DateTime fechaFin, int emprcodi, string usuario)
        {
            //Obtener data
            FormatearListaPfDispcalorutil(lstCuInput);
            List<PfDispcalorutilDTO> listaFinal = GenerarDataDispCalorUtilXVersion(lstCuInput, irecacodi, fechaIni, fechaFin, emprcodi);

            GuardarDisponibilidadCalorUtil(listaFinal, usuario, irecacodi);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="lstCuInput"></param>
        /// <param name="recacodi"></param>
        /// <returns></returns>
        public List<PfDispcalorutilDTO> GenerarDataDispCalorUtilXVersion(List<PfDispcalorutilDTO> lstCuInput, int irecacodi, DateTime fechaIni, DateTime fechaFin, int emprcodi)
        {
            //última versión
            IndReporteDTO regRpt = GetUltimaVersion(ConstantesIndisponibilidades.ReportePR25DisponibilidadCalorUtil, irecacodi, ConstantesIndisponibilidades.TipoReporteAplicativo, null);
            int ultVerscodi = regRpt != null ? regRpt.Irptcodi : 0;

            //lstCuInput = lstCuInput.Where(x => x.Pfcutienedisp == 0).ToList();

            List<PfDispcalorutilDTO> lstCuFinal = new List<PfDispcalorutilDTO>();
            List<PfDispcalorutilDTO> lstCuInputBD = GetByCriteriaPfDispcalorutils(ultVerscodi);

            //agregar nuevos registros
            foreach (var regInput in lstCuInput)
            {
                var regBD = lstCuInputBD.Find(x => x.Pfcufecha == regInput.Pfcufecha && x.Pfcuh == regInput.Pfcuh && x.Equipadre == regInput.Equipadre);
                if (regBD == null)
                    lstCuFinal.Add(regInput);//solo incluir los nuevos
                else
                {
                    regBD.Pfcumin = regInput.Pfcumin;
                    regBD.Pfcutienedisp = regInput.Pfcutienedisp;
                }
            }


            //verificar si han quitado el check para omitirlos
            List<PfDispcalorutilDTO> lstCuFiltro = lstCuInputBD.Where(x => fechaIni <= x.FechaHora && x.FechaHora <= fechaFin).ToList();
            if (emprcodi != -1)
                lstCuFiltro = lstCuFiltro.Where(x => x.Emprcodi == emprcodi).ToList();

            foreach (var regBD in lstCuFiltro)
            {
                var regInput = lstCuInput.Find(x => x.Pfcufecha == regBD.Pfcufecha && x.Pfcuh == regBD.Pfcuh && x.Equipadre == regBD.Equipadre);
                if (regInput == null) //quitar 
                {
                    lstCuInputBD.Remove(regBD);
                }
            }

            //agregar los elementos de bd validos
            lstCuFinal.AddRange(lstCuInputBD);

            return lstCuFinal;
        }

        private void FormatearListaPfDispcalorutil(List<PfDispcalorutilDTO> lista)
        {
            foreach (var reg in lista)
            {
                reg.Pfcufecha = DateTime.ParseExact(reg.PfcufechaDesc, ConstantesAppServicio.FormatoFecha, CultureInfo.InvariantCulture);
                reg.FechaHora = reg.Pfcufecha.AddMinutes(15 * reg.Pfcuh);
            }
        }

        public string ObtenerCentralesCalorUtilNoDisponibles(List<PfDispcalorutilDTO> lstCu)
        {
            if (!lstCu.Any())
                return string.Empty;

            FormatearListaPfDispcalorutil(lstCu);

            StringBuilder st = new StringBuilder();

            var equicodis = lstCu.Select(x => x.Equipadre).Distinct().ToList();

            var centrale = FactorySic.GetEqEquipoRepository().ListarEquiposXIds(string.Join(",", equicodis));

            st.Append("<table class='pretty tabla-sin-calor-util' border='0' cellspacing='0' width='100%' id='tabla_recalculo'>");

            st.Append("<thead>");
            st.Append("</thead>");

            st.Append("<tbody>");
            st.Append("<tr>");
            st.Append("<td class='' style='width: 150px; text-align: center; font-size:17px; font-weight:bold;'>CENTRALES SIN CALOR ÚTIL</td>");

            st.Append("</tr>");

            st.Append("<tr>");
            st.Append("<td class='' style='width: 150px; text-align: center'></td>");
            st.Append("</tr>");
            foreach (var item in lstCu.GroupBy(x => x.Equipadre))
            {
                var listaPeriodo = item.Where(x => x.Pfcutienedisp == ConstantesIndisponibilidades.FlagCalculoNo)
                    .Select(x => new Periodo() { FechaInicio = x.FechaHora, FechaFin = x.FechaHora.AddMinutes(15) }).ToList();

                listaPeriodo.AddRange(item.Where(x => x.Pfcutienedisp == ConstantesIndisponibilidades.FlagCalculoSi)
                    .Select(x => new Periodo() { FechaInicio = x.FechaHora.AddMinutes(-15 + x.Pfcumin ?? 0), FechaFin = x.FechaHora }).ToList());

                var lstPeriodoConsec = EPDate.GetPeriodosCombinadosConsecutivos(listaPeriodo.OrderBy(x => x.FechaInicio));

                st.Append("<tr>");
                st.AppendFormat("<td class='' style='width: 150px; text-align: center; font-size:14px; font-weight:bold;'>{0}  -Total Sin Calor Útil : {1}min</td>", centrale.Find(x => x.Equicodi == item.Key).Equinomb, lstPeriodoConsec.Sum(x => x.Duracion.TotalMinutes));
                st.Append("</tr>");
                foreach (var periodo in lstPeriodoConsec)
                {
                    st.Append("<tr>");
                    st.AppendFormat("<td class='' style='width: 150px; text-align: center; font-size:13px;'>{0} - {1}</td>", periodo.FechaInicio.ToString(ConstantesAppServicio.FormatoFechaFull), periodo.FechaFin.ToString(ConstantesAppServicio.FormatoFechaFull));
                    st.Append("</tr>");
                }

                st.Append("<tr>");
                st.Append("<td class='' style='width: 150px; text-align: center'></td>");
                st.Append("</tr>");
            }
            st.Append("</tbody>");
            st.Append("</table>");
            return st.ToString();

        }

        /// <summary>
        /// Listar empresas para cogeneracion
        /// </summary>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresaCoGeneracion(DateTime fechaIni, DateTime fechaFin)
        {
            var listaEmp1 = this.ListarAllGrupoCoGeneracion(fechaIni);
            var listaEmp2 = this.ListarAllGrupoCoGeneracion(fechaFin);

            var listaEmp = listaEmp1;
            listaEmp.AddRange(listaEmp2);

            return listaEmp.GroupBy(x => new { x.Emprcodi, x.Emprnomb })
                            .Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Emprcodi.Value, Emprnomb = x.Key.Emprnomb })
                            .OrderBy(x => x.Emprnomb).ToList();
        }

        /// <summary>
        /// Listar todos los grupos de generacion RER
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarAllGrupoCoGeneracion(DateTime fechaPeriodo)
        {
            var lista = FactorySic.GetPrGrupoRepository().ListarAllGrupoCoGeneracion(fechaPeriodo);
            foreach (var grupo in lista)
            {
                grupo.Emprnomb = grupo.Emprnomb != null ? grupo.Emprnomb.Trim() : string.Empty;
            }
            return lista;
        }

        /// <summary>
        /// Listar cuarto de hora
        /// </summary>
        /// <returns></returns>
        public List<GenericoDTO> ListarCuartoHora(int hselected)
        {
            List<GenericoDTO> l = new List<GenericoDTO>();

            DateTime fecha = DateTime.Today;
            for (var i = 1; i <= 95; i++)
            {
                l.Add(new GenericoDTO() { Entero1 = i, String1 = fecha.AddMinutes(i * 15).ToString(ConstantesAppServicio.FormatoHora) });
            }
            l.Add(new GenericoDTO() { Entero1 = 96, String1 = "24:00" });

            var regSelected = l.Find(x => x.Entero1 == hselected);
            regSelected.String2 = "selected";

            return l;
        }

        #endregion

        #region Insumo: Anexo B y Anexo C

        #region Ingresos
        public List<PrGrupodatDTO> ListarParametrosConfiguracionPorFecha(DateTime fecha, string conceptos, string grupos = "0")
        {
            List<PrGrupodatDTO> lista = FactorySic.GetPrGrupodatRepository().ParametrosConfiguracionPorFecha(fecha, grupos, conceptos);

            foreach (var reg in lista)
            {
                reg.FechadatDesc = reg.Fechadat != null ? reg.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFecha) : string.Empty;
                reg.Lastuser = reg.Lastuser != null ? reg.Lastuser.Trim() : "SISTEMA";
                reg.FechaactDesc = reg.Fechaact != null ? reg.Fechaact.Value.ToString(ConstantesAppServicio.FormatoFechaHora) : string.Empty;
            }

            return lista;
        }

        /// <summary>
        /// Listar historico de prgrupodat
        /// </summary>
        /// <param name="concepcodi"></param>
        /// <param name="grupocodi"></param>
        /// <returns></returns>
        public List<PrGrupodatDTO> ListarGrupodatHistoricoValores(int concepcodi, int grupocodi)
        {
            List<PrGrupodatDTO> lista = FactorySic.GetPrGrupodatRepository().ListarHistoricoValores(concepcodi.ToString(), grupocodi);

            foreach (var reg in lista)
            {
                reg.FechadatDesc = reg.Fechadat != null ? reg.Fechadat.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
                reg.FechaactDesc = reg.Fechaact != null ? reg.Fechaact.Value.ToString(ConstantesAppServicio.FormatoFechaFull2) : string.Empty;
                reg.EstadoDesc = reg.Deleted == ConstantesMigraciones.GrupodatActivo ? ConstantesAppServicio.ActivoDesc : ConstantesAppServicio.BajaDesc;
                reg.Lastuser = reg.Lastuser != null ? reg.Lastuser.Trim() : "SISTEMA";
            }

            return lista;
        }

        #endregion

        public ParametroAnexoB GetParametroAnexoB(DateTime fechaPeriodo)
        {
            var reg = new ParametroAnexoB();

            var listaParametros = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiAnexoB);

            GetValorDecimalFromListaGrupoDat(fechaPeriodo, 0, listaParametros.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiFIFmensualTermo).ToList()
                                        , out decimal? valor1, out DateTime? fechaVigencia1);
            reg.FIFmensualTermo = valor1 ?? 0;

            GetValorDecimalFromListaGrupoDat(fechaPeriodo, 0, listaParametros.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiFIPanualHidroYTermo).ToList()
                                        , out decimal? valor2, out DateTime? fechaVigencia2);
            reg.FIPanualHidroYTermo = valor2 ?? 0;

            GetValorDecimalFromListaGrupoDat(fechaPeriodo, 0, listaParametros.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiFIPmensualHidro).ToList()
                                        , out decimal? valor3, out DateTime? fechaVigencia3);
            reg.FIPmensualHidro = valor3 ?? 0;

            GetValorDecimalFromListaGrupoDat(fechaPeriodo, 0, listaParametros.Where(x => x.Concepcodi == ConstantesIndisponibilidades.ConcepcodiFIPmensualTermo).ToList()
                                        , out decimal? valor4, out DateTime? fechaVigencia4);
            reg.FIPmensualTermo = valor4 ?? 0;

            return reg;
        }

        public List<FactorINDTeorica> ListarParametroAnexoC(DateTime fechaPeriodo)
        {
            List<FactorINDTeorica> l = new List<FactorINDTeorica>();

            var listaParametros = ListarPrGrupodatHistoricoDecimalValido(ConstantesIndisponibilidades.ConcepcodiAnexoC);

            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiAgua, 639, 640, "AGUA", "AGUA", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiGas, 637, 638, "C.COMBINADO", "TODOS", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiDiesel, 635, 636, "DIESEL", "TODOS", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiBiogas, 635, 636, "DIESEL", "TODOS", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiBagazo, 623, 624, "VAPOR", "CARBÓN", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiCarbon, 623, 624, "VAPOR", "CARBÓN", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiGas, 631, 627, "GAS", "GAS", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiResidual, 625, 626, "VAPOR", "PETROLEO", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiR500, 625, 626, "VAPOR", "PETROLEO", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiR6, 625, 626, "VAPOR", "PETROLEO", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiNR, 625, 626, "VAPOR", "PETROLEO", fechaPeriodo, listaParametros));
            l.Add(ObtenerFactorteorico(ConstantesPR5ReportesServicio.FenergcodiFG, 625, 626, "VAPOR", "FLEXI GAS", fechaPeriodo, listaParametros));

            return l;
        }

        public List<FactorINDTeorica> ListarParametroAnexoCExcel(List<FactorINDTeorica> lista)
        {
            List<FactorINDTeorica> lExcel = lista.GroupBy(x => new { x.TipoCentral, x.TipoCombustible })
                .Select(x => new FactorINDTeorica() { TipoCentral = x.Key.TipoCentral, TipoCombustible = x.Key.TipoCombustible, FactorTeoricoFort = x.First().FactorTeoricoFort, FactorTeoricoProg = x.First().FactorTeoricoProg })
                .OrderBy(x => x.TipoCentral).ThenBy(x => x.TipoCombustible).ToList();

            return lExcel;
        }

        private FactorINDTeorica ObtenerFactorteorico(int fenergcodi, int conceptoFort, int conceptoProg, string central, string comb, DateTime fechaPeriodo, List<PrGrupodatDTO> listaParametros)
        {
            var reg = new FactorINDTeorica();
            reg.Fenergcodi = fenergcodi;
            reg.TipoCentral = central;
            reg.TipoCombustible = comb;

            GetValorDecimalFromListaGrupoDat(fechaPeriodo, 0, listaParametros.Where(x => x.Concepcodi == conceptoFort).ToList()
                                        , out decimal? valor1, out DateTime? fechaVigencia1);
            reg.FactorTeoricoFort = valor1 ?? 0;

            GetValorDecimalFromListaGrupoDat(fechaPeriodo, 0, listaParametros.Where(x => x.Concepcodi == conceptoProg).ToList()
                                        , out decimal? valor2, out DateTime? fechaVigencia2);
            reg.FactorTeoricoProg = valor2 ?? 0;

            if (central.Contains("COMB"))
                reg.TieneCicloComb = true;

            return reg;
        }

        #endregion

        #region Histórico: Equivalencia de unidades Termoeléctricas e Hidroeléctricas

        public string GenerarReporteEquivalenciaHtml(bool tienePermisoEditar, string url)
        {
            List<IndUnidadDTO> listaUnidad = GetByCriteriaIndUnidads();

            StringBuilder strHtml = new StringBuilder();

            #region cabecera
            //***************************      CABECERA DE LA TABLA         ***********************************//

            strHtml.Append("<table class='pretty tabla-icono' id='miTabla' style='width: 100%'>");

            strHtml.Append("<thead>");

            strHtml.Append("<tr>");
            if (tienePermisoEditar)
                strHtml.Append("<th colspan='1' rowspan='2'>Acción</th>");
            strHtml.Append("<th colspan='3'>Base de datos del COES</th>");
            strHtml.Append("<th colspan='2' style='background-color: #00bb00;'>Archivo Excel histórico</th>");
            strHtml.Append("<th colspan='1' rowspan='2'>Usuario modificación</th>");
            strHtml.Append("<th colspan='1' rowspan='2'>Fecha modificación</th>");
            strHtml.Append("</tr>");

            strHtml.Append("<tr>");
            strHtml.Append("<th style=''>Empresa actual</th>");
            strHtml.Append("<th style=''>Central</th>");
            strHtml.Append("<th style=''>Unidad de Generación</th>");
            strHtml.Append("<th style='background-color: #00bb00;'>Nombre central en Excel</th>");
            strHtml.Append("<th style='background-color: #00bb00;'>Nombre unidad en Excel</th>");
            strHtml.Append("</tr>");

            strHtml.Append("</thead>");

            #endregion

            #region cuerpo

            //***************************      CUERPO DE LA TABLA         ***********************************//
            strHtml.Append("<tbody>");

            foreach (var ite in listaUnidad)
            {
                strHtml.AppendFormat("<tr class='{0}'>", ite.Iuniactivo == 0 ? "fila_eliminado" : "");
                if (tienePermisoEditar)
                {
                    if (ite.Iuniactivo == 1)
                    {
                        string tdAccion = string.Format(@"
                            <a class='' href=""JavaScript:editarEquiv({1},'{2}','{3}','{4}','{5}')"">
                                <img src='{0}Content/Images/btn-edit.png' alt='Editar registro' title='Editar registro'>
                            </a>                            ", url, ite.Iunicodi, ite.Central, ite.Iuniunidadnomb, ite.Iuninombcentral, ite.Iuninombunidad);

                        tdAccion += string.Format(@"
                            <a class='' href='JavaScript:eliminarEquiv({1})'>
                                <img src='{0}Content/Images/btn-cancel.png' alt='Dar de baja registro' title='Dar de baja registro'>
                            </a>
                            ", url, ite.Iunicodi);

                        strHtml.AppendFormat("<td>{0}</td>", tdAccion);
                    }
                    else
                        strHtml.AppendFormat("<td>Eliminado</td>");
                }
                strHtml.AppendFormat("<td>{0}</td>", ite.Emprnomb);
                strHtml.AppendFormat("<td>{0}</td>", ite.Central);
                strHtml.AppendFormat("<td>{0}</td>", ite.Iuniunidadnomb);
                strHtml.AppendFormat("<td>{0}</td>", ite.Iuninombcentral);
                strHtml.AppendFormat("<td>{0}</td>", ite.Iuninombunidad);
                strHtml.AppendFormat("<td>{0}</td>", ite.UltimaModificacionUsuarioDesc);
                strHtml.AppendFormat("<td>{0}</td>", ite.UltimaModificacionFechaDesc);
                strHtml.Append("</tr>");
            }

            strHtml.Append("</tbody>");
            strHtml.Append("</table>");

            #endregion

            return strHtml.ToString();
        }

        public void ListarFiltroUnidad(int famcodi, DateTime fechaIni, DateTime fechaFin, int emprcodi, int equipadre
                                        , out List<SiEmpresaDTO> listaEmp, out List<EqEquipoDTO> listaCentral, out List<EqEquipoDTO> listaUnidad)
        {
            List<EqEquipoDTO> listaUnidadData = new List<EqEquipoDTO>();

            if (famcodi == ConstantesHorasOperacion.IdTipoTermica)
            {
                int aplicativo = ConstantesIndisponibilidades.AppPR25;
                ListarUnidadTermicoOpComercial(aplicativo, fechaIni, fechaFin, out listaUnidadData, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj);
            }
            if (famcodi == ConstantesHorasOperacion.IdTipoHidraulica)
            {
                ListarEqCentralHidraulicoOpComercial(fechaIni, fechaFin, out List<EqEquipoDTO> listaCentralOp, out listaUnidadData, out List<ResultadoValidacionAplicativo> listaMsj);
                listaUnidadData = listaUnidadData.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList();
            }

            listaEmp = listaUnidadData
                .GroupBy(x => new { x.Emprcodi, x.Emprnomb })
                .Select(x => new SiEmpresaDTO() { Emprcodi = x.Key.Emprcodi ?? 0, Emprnomb = x.Key.Emprnomb })
                .OrderBy(x => x.Emprnomb)
                .ToList();

            listaCentral = new List<EqEquipoDTO>();
            if (emprcodi > 0)
            {
                listaCentral = listaUnidadData
                    .Where(x => x.Emprcodi == emprcodi)
                    .GroupBy(x => new { x.Equipadre, x.Central })
                    .Select(x => new EqEquipoDTO() { Equipadre = x.Key.Equipadre, Central = x.Key.Central })
                    .OrderBy(x => x.Central)
                    .ToList();
            }

            listaUnidad = new List<EqEquipoDTO>();
            if (equipadre > 0)
            {
                listaUnidad = listaUnidadData.Where(x => x.Emprcodi == emprcodi && x.Equipadre == equipadre).OrderBy(x => x.UnidadnombPR25).ToList();
            }
        }

        public bool ExisteEquivalencia(IndUnidadDTO reg)
        {
            List<IndUnidadDTO> listaBD = GetByCriteriaIndUnidads().Where(x => x.Iuniactivo == 1).ToList();

            var regExist = listaBD.Find(x => x.Iuninombcentral == reg.Iuninombcentral && x.Iuninombunidad == reg.Iuninombunidad && x.Iunicodi != reg.Iunicodi);

            return regExist != null;
        }

        #endregion

        #region Histórico: Carga de Archivo Excel

        /// <summary>
        /// Guardar
        /// </summary>
        /// <param name="cuadro"></param>
        /// <param name="irecacodi"></param>
        /// <param name="tiempo"></param>
        /// <param name="medicionorigen"></param>
        /// <param name="famcodi"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        public void ProcesarHistorico(int irecacodi, List<IndReporteTotalDTO> listaTotTermo, List<IndReporteTotalDTO> listaTotHidro, string usuario)
        {
            DateTime fechaRegistro = DateTime.Now;

            IndCuadroDTO regCuadroC1 = this.GetByIdIndCuadro(ConstantesIndisponibilidades.ReportePR25Cuadro1);
            IndCuadroDTO regCuadroC4 = this.GetByIdIndCuadro(ConstantesIndisponibilidades.ReportePR25Cuadro4);

            //Cuadro 1
            IndReporteDTO regReporteC1 = new IndReporteDTO()
            {
                Icuacodi = ConstantesIndisponibilidades.ReportePR25Cuadro1,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteHistorico,
                Irpttiempo = ConstantesIndisponibilidades.TiempoHoraPunta,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado,
                Irptusucreacion = usuario,
                Irptfeccreacion = fechaRegistro,
                Irptestado = "A"
            };
            regReporteC1.Irptnumversion = GetNumeroVersionActual(regCuadroC1, irecacodi, regReporteC1);

            ReporteInsumoPR25 regSaveBD = new ReporteInsumoPR25();
            regSaveBD.Reporte = regReporteC1;
            regSaveBD.ListaRptTot = listaTotTermo;

            int irptcodiC1 = this.GuardarReporteIndispBDTransaccional(regSaveBD);

            //Cuadro 4
            IndReporteDTO regReporteC4 = new IndReporteDTO()
            {
                Icuacodi = ConstantesIndisponibilidades.ReportePR25Cuadro4,
                Irecacodi = irecacodi,
                Irpttipo = ConstantesIndisponibilidades.TipoReporteHistorico,
                Irpttiempo = ConstantesIndisponibilidades.TiempoHoraPunta,
                Irptmedicionorigen = null,
                Irptesfinal = ConstantesIndisponibilidades.EsVersionValidado,
                Irptusucreacion = usuario,
                Irptfeccreacion = fechaRegistro,
                Irptestado = "A"
            };
            regReporteC4.Irptnumversion = GetNumeroVersionActual(regCuadroC4, irecacodi, regReporteC4);

            ReporteInsumoPR25 regSaveBD4 = new ReporteInsumoPR25();
            regSaveBD4.Reporte = regReporteC4;
            regSaveBD4.ListaRptTot = listaTotHidro;

            int irptcodiC4 = this.GuardarReporteIndispBDTransaccional(regSaveBD4);
        }

        /// <summary>
        /// Obtener Potencia Garantizada Data Excel
        /// </summary>
        /// <param name="stremExcel"></param>
        /// <param name="fdatcodi"></param>
        /// <returns></returns>
        public void ListarDatoExcel(string filename, int recacodi, out string htmlVal
                                    , out List<IndReporteTotalDTO> listaTotTermo, out string rptTermo
                                    , out List<IndReporteTotalDTO> listaTotHidro, out string rptHidro)
        {
            IndRecalculoDTO regRecalculo = this.GetByIdIndRecalculo(recacodi);
            List<ResultadoValidacionAplicativo> listaVal = new List<ResultadoValidacionAplicativo>();

            listaTotTermo = new List<IndReporteTotalDTO>();
            listaTotHidro = new List<IndReporteTotalDTO>();

            int aplicativo = ConstantesIndisponibilidades.AppPR25;
            this.ListarUnidadTermicoOpComercial(aplicativo, regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out List<EqEquipoDTO> listaUnidaTermo, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj1);
            this.ListarEqCentralHidraulicoOpComercial(regRecalculo.Irecafechaini, regRecalculo.Irecafechafin, out List<EqEquipoDTO> listaCentrales, out List<EqEquipoDTO> listaEquiposHidro, out List<ResultadoValidacionAplicativo> listaMsj2);
            listaEquiposHidro = listaEquiposHidro.Where(x => x.Famcodi == ConstantesHorasOperacion.IdGeneradorHidroelectrico).ToList();

            List<IndUnidadDTO> listaEquiv = GetByCriteriaIndUnidads().Where(x => x.Iuniactivo == 1).ToList();

            FileInfo fileInfo = new FileInfo(filename);

            using (var xlPackage = new ExcelPackage(fileInfo))
            {
                var ws1 = xlPackage.Workbook.Worksheets["REPORTE 1"];
                if (ws1 != null)
                {
                    ListarExcelIndispReporte1(ws1, listaUnidaTermo, listaEquiv, out listaTotTermo, out List<ResultadoValidacionAplicativo> listaValT);
                    listaVal.AddRange(listaValT);
                }
                else
                {
                    listaVal.Add(new ResultadoValidacionAplicativo()
                    {
                        TipoResultado = 2,
                        TipoFuenteDatoDesc = "Excel",
                        Descripcion = "No existe la hoja REPORTE 1",
                        Accion = "Debe seleccionar archivo excel válido."
                    });
                }

                var ws3 = xlPackage.Workbook.Worksheets["REPORTE 3"];
                if (ws3 != null)
                {
                    ListarExcelIndispReporte3(ws3, listaEquiposHidro, listaEquiv, out listaTotHidro, out List<ResultadoValidacionAplicativo> listaValH);
                    listaVal.AddRange(listaValH);
                }
                else
                {
                    listaVal.Add(new ResultadoValidacionAplicativo()
                    {
                        TipoResultado = 2,
                        TipoFuenteDatoDesc = "Excel",
                        Descripcion = "No existe la hoja REPORTE 3",
                        Accion = "Debe seleccionar archivo excel válido."
                    });
                }

            }

            htmlVal = this.GenerarHtmlVerificacion(listaVal);
            rptTermo = GenerarTablaHtmlListadoReporteConsolidado(ConstantesIndisponibilidades.ReportePR25Cuadro1, listaTotTermo);
            rptHidro = GenerarTablaHtmlListadoReporteConsolidado(ConstantesIndisponibilidades.ReportePR25Cuadro4, listaTotHidro);
        }

        private void ListarExcelIndispReporte1(ExcelWorksheet ws, List<EqEquipoDTO> listaUnidaTermo, List<IndUnidadDTO> listaEquiv
                                                , out List<IndReporteTotalDTO> listaTotTermo, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            listaTotTermo = new List<IndReporteTotalDTO>();
            listaMsj = new List<ResultadoValidacionAplicativo>();

            var dim = ws.Dimension;
            ExcelRange excelRange = ws.Cells[7, 1, dim.End.Row, 11];
            var dataExcel = (object[,])excelRange.Value;

            int rowEmpresa = 1;
            int colEmpresa = 1;
            bool sigueBusqueda = true;
            for (int i = 1; i <= 10 && sigueBusqueda; i++)
            {
                var descEmp = dataExcel[i, 1]?.ToString();
                var descEmp2 = dataExcel[i, 2]?.ToString();
                var descEmp3 = dataExcel[i, 3]?.ToString();

                if (descEmp == "EMPRESA")
                {
                    rowEmpresa = i;
                    colEmpresa = 1;
                    sigueBusqueda = false;
                }
                if (descEmp2 == "EMPRESA")
                {
                    rowEmpresa = i;
                    colEmpresa = 2;
                    sigueBusqueda = false;
                }
                if (descEmp3 == "EMPRESA")
                {
                    rowEmpresa = i;
                    colEmpresa = 3;
                    sigueBusqueda = false;
                }
            }

            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 1;
            int colFort = colUnidad + 1;
            int colProg = colFort + 1;
            int colParcialFort = colProg + 1;
            int colParcialProg = colParcialFort + 1;

            var listaTemp = new List<IndReporteTotalDTO>();

            //llenar data de excel
            var rowLast = dim.End.Row - 7;
            for (int i = rowEmpresa + 1; i <= rowLast; i++)
            {
                var exEmprnomb = dataExcel[i, colEmpresa]?.ToString();
                var exCentral = dataExcel[i, colCentral]?.ToString();
                var exUnidad = dataExcel[i, colUnidad]?.ToString();
                var exFort = dataExcel[i, colFort];
                var exProg = dataExcel[i, colProg];
                var exParcialFort = dataExcel[i, colParcialFort];
                var exParcialProg = dataExcel[i, colParcialProg];

                int? valFort = null, valProg = null;
                decimal? valParcialFort = null, valParcialProg = null;

                if (exFort != null && exFort.IsNumericType()) valFort = Convert.ToInt32(exFort);
                if (exProg != null && exProg.IsNumericType()) valProg = Convert.ToInt32(exProg);
                if (exParcialFort != null && exParcialFort.IsNumericType()) valParcialFort = Convert.ToDecimal(exParcialFort);
                if (exParcialProg != null && exParcialProg.IsNumericType()) valParcialProg = Convert.ToDecimal(exParcialProg);

                exEmprnomb = !string.IsNullOrEmpty(exEmprnomb) ? exEmprnomb.Trim().ToUpper() : string.Empty;
                exCentral = !string.IsNullOrEmpty(exCentral) ? exCentral.Trim().ToUpper() : string.Empty;
                exUnidad = !string.IsNullOrEmpty(exUnidad) ? exUnidad.Trim().ToUpper() : string.Empty;

                if (!string.IsNullOrEmpty(exUnidad))
                {
                    listaTemp.Add(new IndReporteTotalDTO()
                    {
                        Emprnomb = exEmprnomb,
                        Central = exCentral,
                        Itotunidadnomb = exUnidad,
                        Itotminif = valFort,
                        Itotminip = valProg,
                        Itotminifparcial = valParcialFort,
                        Itotminipparcial = valParcialProg
                    });
                }
            }

            //setear central cuando esté vacío y buscar equivalencia
            for (int i = 0; i < listaTemp.Count; i++)
            {
                string nombUnidad = listaTemp[i].Itotunidadnomb;
                string nombCentral = listaTemp[i].Central;
                if (i > 0 && string.IsNullOrEmpty(nombCentral))
                {
                    string centralAnt = listaTemp[i - 1].Central;
                    listaTemp[i].Central = centralAnt;
                }

                //verificar equivalencia
                var regEq = listaEquiv.Find(x => x.Iuninombcentral == nombCentral && x.Iuninombunidad == nombUnidad);
                if (regEq != null)
                {
                    listaTemp[i].Equicodi = regEq.Equicodi;
                    listaTemp[i].Grupocodi = regEq.Grupocodi;

                    var regUnidad = listaUnidaTermo.Find(x => x.Equicodi == listaTemp[i].Equicodi && x.Grupocodi == listaTemp[i].Grupocodi);

                    if (regUnidad == null)
                    {
                        listaMsj.Add(new ResultadoValidacionAplicativo()
                        {
                            TipoResultado = 2,
                            TipoFuenteDatoDesc = "Excel",
                            Descripcion = string.Format("[{0}, {1}] no tiene operación comercial durante el periodo.", nombCentral, nombUnidad),
                            Accion = "No será tomado en cuenta"
                        });
                    }
                }
                else
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo()
                    {
                        TipoResultado = 2,
                        TipoFuenteDatoDesc = "Excel",
                        Descripcion = string.Format("[{0}, {1}] no tiene asociado una equivalencia en la Base de datos del COES.", nombCentral, nombUnidad),
                        Accion = "Debe crear equivalencia"
                    });
                }
            }

            //Generar lista Final
            int idTotal = 1;
            foreach (var regUnidad in listaUnidaTermo)
            {
                var regTmp = listaTemp.Find(x => x.Equicodi == regUnidad.Equicodi && x.Grupocodi == regUnidad.Grupocodi);

                if (regTmp != null)
                {
                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = ConstantesHorasOperacion.IdTipoTermica,
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Emprnomb = regUnidad.Emprnomb,
                        Equipadre = regUnidad.Equipadre.Value,
                        Central = regUnidad.Central,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = regUnidad.UnidadnombPR25,
                        Itotminif = regTmp.Itotminif,
                        Itotminip = regTmp.Itotminip,
                        Itotminifparcial = regTmp.Itotminifparcial,
                        Itotminipparcial = regTmp.Itotminipparcial,
                        Itotopcom = ConstantesAppServicio.SI,
                        Itotincremental = regUnidad.Grupoincremental
                    };
                    FormatearIndReporteTotal(objUnidad);

                    listaTotTermo.Add(objUnidad);
                    idTotal++;
                }
                else
                {
                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = ConstantesHorasOperacion.IdTipoTermica,
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Emprnomb = regUnidad.Emprnomb,
                        Equipadre = regUnidad.Equipadre.Value,
                        Central = regUnidad.Central,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = regUnidad.UnidadnombPR25,
                        Itotminif = 0,
                        Itotminip = 0,
                        Itotminifparcial = 0,
                        Itotminipparcial = 0,
                        Itotopcom = ConstantesAppServicio.SI,
                        Itotincremental = regUnidad.Grupoincremental
                    };

                    FormatearIndReporteTotal(objUnidad);
                    listaTotTermo.Add(objUnidad);
                    idTotal++;
                }
            }

            //
            listaTotTermo = listaTotTermo.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Itotunidadnomb).ToList();
        }

        private void ListarExcelIndispReporte3(ExcelWorksheet ws, List<EqEquipoDTO> listaUnidaHidro, List<IndUnidadDTO> listaEquiv
                                              , out List<IndReporteTotalDTO> listaTotHidro, out List<ResultadoValidacionAplicativo> listaMsj)
        {
            listaTotHidro = new List<IndReporteTotalDTO>();
            listaMsj = new List<ResultadoValidacionAplicativo>();

            var dim = ws.Dimension;
            ExcelRange excelRange = ws.Cells[7, 1, dim.End.Row, 11];
            var dataExcel = (object[,])excelRange.Value;

            int rowEmpresa = 1;
            int colEmpresa = 0;
            int colFort = 0;
            int colProg = 0;
            bool sigueBusqueda = true;
            for (int i = 1; i <= 10 && sigueBusqueda; i++)
            {
                var descEmp = dataExcel[i, 1]?.ToString();
                var descEmp2 = dataExcel[i, 2]?.ToString();
                var descEmp3 = dataExcel[i, 3]?.ToString();

                if (descEmp == "EMPRESA")
                {
                    rowEmpresa = i;
                    colEmpresa = 1;
                    sigueBusqueda = false;
                }
                if (descEmp2 == "EMPRESA")
                {
                    rowEmpresa = i;
                    colEmpresa = 2;
                    sigueBusqueda = false;
                }
                if (descEmp3 == "EMPRESA")
                {
                    rowEmpresa = i;
                    colEmpresa = 3;
                    sigueBusqueda = false;
                }
            }

            sigueBusqueda = true;
            for (int i = 1; i <= 10 && sigueBusqueda; i++)
            {
                var desc = dataExcel[i, 8]?.ToString();
                var desc2 = dataExcel[i, 7]?.ToString();
                var desc3 = dataExcel[i, 9]?.ToString();

                desc = !string.IsNullOrEmpty(desc) ? desc.ToUpper() : "";
                desc2 = !string.IsNullOrEmpty(desc2) ? desc2.ToUpper() : "";
                desc3 = !string.IsNullOrEmpty(desc3) ? desc3.ToUpper() : "";

                if (desc.Contains("FORT"))
                {
                    rowEmpresa = i;
                    colFort = 8;
                    sigueBusqueda = false;
                }
                if (desc2.Contains("FORT"))
                {
                    rowEmpresa = i;
                    colFort = 7;
                    sigueBusqueda = false;
                }
                if (desc3.Contains("FORT"))
                {
                    rowEmpresa = i;
                    colFort = 9;
                    sigueBusqueda = false;
                }
            }

            sigueBusqueda = true;
            for (int i = 1; i <= 10 && sigueBusqueda; i++)
            {
                var desc = dataExcel[i, 8]?.ToString();
                var desc2 = dataExcel[i, 7]?.ToString();
                var desc3 = dataExcel[i, 9]?.ToString();

                desc = !string.IsNullOrEmpty(desc) ? desc.ToUpper() : "";
                desc2 = !string.IsNullOrEmpty(desc2) ? desc2.ToUpper() : "";
                desc3 = !string.IsNullOrEmpty(desc3) ? desc3.ToUpper() : "";

                if (desc.Contains("PROGR"))
                {
                    rowEmpresa = i;
                    colProg = 8;
                    sigueBusqueda = false;
                }
                if (desc2.Contains("PROGR"))
                {
                    rowEmpresa = i;
                    colProg = 7;
                    sigueBusqueda = false;
                }
                if (desc3.Contains("PROGR"))
                {
                    rowEmpresa = i;
                    colProg = 9;
                    sigueBusqueda = false;
                }
            }

            int colCentral = colEmpresa + 1;
            int colUnidad = colCentral + 2;

            var listaTemp = new List<IndReporteTotalDTO>();

            //llenar data de excel
            var rowLast = dim.End.Row - 7;
            for (int i = rowEmpresa + 1; i <= rowLast; i++)
            {
                var exEmprnomb = dataExcel[i, colEmpresa]?.ToString();
                var exCentral = dataExcel[i, colCentral]?.ToString();
                var exUnidad = dataExcel[i, colUnidad]?.ToString();
                var exFort = colFort > 0 ? dataExcel[i, colFort] : null;
                var exProg = dataExcel[i, colProg];

                int? valFort = null, valProg = null;

                if (colFort > 0 && exFort != null && exFort.IsNumericType()) valFort = Convert.ToInt32(exFort);
                if (exProg != null && exProg.IsNumericType()) valProg = Convert.ToInt32(exProg);

                exEmprnomb = !string.IsNullOrEmpty(exEmprnomb) ? exEmprnomb.Trim().ToUpper() : string.Empty;
                exCentral = !string.IsNullOrEmpty(exCentral) ? exCentral.Trim().ToUpper() : string.Empty;
                exUnidad = !string.IsNullOrEmpty(exUnidad) ? exUnidad.Trim().ToUpper() : string.Empty;

                if (!string.IsNullOrEmpty(exUnidad))
                {
                    listaTemp.Add(new IndReporteTotalDTO()
                    {
                        Emprnomb = exEmprnomb,
                        Central = exCentral,
                        Itotunidadnomb = exUnidad,
                        Itotminif = valFort,
                        Itotminip = valProg,
                    });
                }
            }

            //setear central cuando esté vacío y buscar equivalencia
            for (int i = 0; i < listaTemp.Count; i++)
            {
                string nombUnidad = listaTemp[i].Itotunidadnomb;
                string nombCentral = listaTemp[i].Central;
                if (i > 0 && string.IsNullOrEmpty(nombCentral))
                {
                    string centralAnt = listaTemp[i - 1].Central;
                    listaTemp[i].Central = centralAnt;
                }

                //verificar equivalencia
                var regEq = listaEquiv.Find(x => x.Iuninombcentral == nombCentral && x.Iuninombunidad == nombUnidad);
                if (regEq != null)
                {
                    listaTemp[i].Equicodi = regEq.Equicodi;
                    listaTemp[i].Grupocodi = regEq.Grupocodi;

                    var regUnidad = listaUnidaHidro.Find(x => x.Equicodi == listaTemp[i].Equicodi);

                    if (regUnidad == null)
                    {
                        listaMsj.Add(new ResultadoValidacionAplicativo()
                        {
                            TipoResultado = 2,
                            TipoFuenteDatoDesc = "Excel",
                            Descripcion = string.Format("[{0}, {1}] no tiene operación comercial durante el periodo.", nombCentral, nombUnidad),
                            Accion = "No será tomado en cuenta"
                        });
                    }
                }
                else
                {
                    listaMsj.Add(new ResultadoValidacionAplicativo()
                    {
                        TipoResultado = 2,
                        TipoFuenteDatoDesc = "Excel",
                        Descripcion = string.Format("[{0}, {1}] no tiene asociado una equivalencia en la Base de datos del COES.", nombCentral, nombUnidad),
                        Accion = "Debe crear equivalencia"
                    });
                }
            }

            //Generar lista Final
            int idTotal = 1;
            foreach (var regUnidad in listaUnidaHidro)
            {
                var regTmp = listaTemp.Find(x => x.Equicodi == regUnidad.Equicodi);

                if (regTmp != null)
                {
                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = ConstantesHorasOperacion.IdTipoHidraulica,
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Emprnomb = regUnidad.Emprnomb,
                        Equipadre = regUnidad.Equipadre.Value,
                        Central = regUnidad.Central,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = regUnidad.UnidadnombPR25,
                        Itotminif = regTmp.Itotminif,
                        Itotminip = regTmp.Itotminip,
                        Itotopcom = ConstantesAppServicio.SI,
                    };
                    FormatearIndReporteTotal(objUnidad);

                    listaTotHidro.Add(objUnidad);
                    idTotal++;
                }
                else
                {
                    var objUnidad = new IndReporteTotalDTO()
                    {
                        Itotcodi = idTotal,
                        Famcodi = ConstantesHorasOperacion.IdTipoHidraulica,
                        Emprcodi = regUnidad.Emprcodi.Value,
                        Emprnomb = regUnidad.Emprnomb,
                        Equipadre = regUnidad.Equipadre.Value,
                        Central = regUnidad.Central,
                        Grupocodi = regUnidad.Grupocodi,
                        Equicodi = regUnidad.Equicodi,
                        Itotunidadnomb = regUnidad.UnidadnombPR25,
                        Itotminif = 0,
                        Itotminip = 0,
                        Itotopcom = ConstantesAppServicio.SI,
                    };

                    FormatearIndReporteTotal(objUnidad);
                    listaTotHidro.Add(objUnidad);
                    idTotal++;
                }
            }

            //
            listaTotHidro = listaTotHidro.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Itotunidadnomb).ToList();
        }

        #endregion

        #region PR25 Extranet

        public List<EqEquipoDTO> GetByIdEquipo(string idEquipo)
        {
            return FactorySic.GetEqEquipoRepository().ListByIdEquipo(idEquipo);
        }

        #endregion

        #region IND.PR25.2022

        #region CuadroA1 y CuadroA2
        /// <summary>
        /// Valida si es el periodo actual, posterior o anterior
        /// </summary>
        /// <param name="ipericodi">Identificador del periodo</param>
        /// <returns></returns>
        public object ValidaPeriodo(int ipericodi)
        {
            object obj = new object();
            string typeMsg = String.Empty;
            string dataMsg = String.Empty;
            IndPeriodoDTO periodo = FactorySic.GetIndPeriodoRepository().GetById(ipericodi);
            DateTime periodoEnviado = new DateTime(periodo.Iperianio, periodo.Iperimes, 1);
            DateTime periodoSistema = DateTime.ParseExact(DateTime.Now.ToString(ConstantesIndisponibilidades.FormatoFecha),
                                                          ConstantesIndisponibilidades.FormatoFecha,
                                                          CultureInfo.InvariantCulture);
            periodoSistema = new DateTime(periodoSistema.Year, periodoSistema.Month, 1);
            if (periodoEnviado < periodoSistema)
            {
                typeMsg = "msg-warning";
                dataMsg = "No se puede descargar, importar ni enviar datos para un periodo anterior al periodo en curso";
                obj = new { typeMsg, dataMsg };
            }
            else
            {
                typeMsg = "msg-success";
                dataMsg = "Periodo habilitado";
                obj = new { typeMsg, dataMsg };
            }

            return obj;
        }

        /// <summary>
        /// Lista la informacion de los cuadros CDU, CRD, CCD y A2
        /// </summary>
        /// <param name="idEmpresa">Dirección del archivo importado</param>
        /// <param name="idPeriodo">Dirección del archivo importado</param>
        /// <returns></returns>
        public object ListaCuadros(int idEmpresa, int idPeriodo)
        {
            //Trae todos los registros de la cabecera CDU, CDR y CCD para
            //una empresa en un periodo
            List<IndCabeceraDTO> listaCuadroA1 = this.ListCabecera(idEmpresa, idPeriodo);
            List<IndRelacionEmpresaDTO> listaRelacion = this.ListIndRelacionEmpresaByIdEmpresa(idEmpresa)
                                                            .Where(x => x.Relempcuadro1 == "S").ToList();

            //Consulto CDU del cuadro A1
            List<object> dataCDU = this.ListCuadroA1CDU(idEmpresa, idPeriodo, listaCuadroA1,
                                                        listaRelacion, out string inicioVigenciaCDU,
                                                        out string finVigenciaCDU);

            //Consulto CRD del cuadro A1
            List<object> dataCRD = this.ListCuadroA1CRD(idEmpresa, idPeriodo, listaCuadroA1, listaRelacion);


            //Consulto CCD del cuadro A1
            List<object> dataCCD = this.ListCuadroA1CCD(idEmpresa, idPeriodo, listaCuadroA1,
                                                        listaRelacion, out string inicioVigenciaCCD,
                                                       out string finVigenciaCCD);


            #region Cuadro A2
            IndCapacidadTransporteDTO capacidadTransporte = this.ListCapacidadTransporte(idEmpresa, idPeriodo)
                                                                    .FirstOrDefault(); ;
            List<object> dataA2 = new List<object>();
            if (capacidadTransporte != null)
            {
                List<IndTransporteDetalleDTO> listaTransportes =
                                            this.ListTransporteDetalle(capacidadTransporte.Cpctnscodi);
                List<object> tempA2 = new List<object>();
                string[] a2Tipos = listaTransportes.Select(x => x.Tnsdetdescripcion).ToArray();
                string[] a2Fechas = listaTransportes.Select(x => x.Tnsdetfecha
                                        .ToString(ConstantesIndisponibilidades.FormatoFecha)).ToArray();
                string[] a2Empresas = listaTransportes.Select(x => x.Emprnombalter).ToArray();
                string[] a2Suministros = listaTransportes.Select(x => x.Tnsdetptosuministro).ToArray();
                string[] a2Cantidad = listaTransportes.Select(x => x.Tnsdetcntadquirida.ToString()).ToArray();
                string[] a2Precio = listaTransportes.Select(x => x.Tnsdetprctransferencia.ToString()).ToArray();
                tempA2.Add(a2Tipos);
                tempA2.Add(a2Fechas);
                tempA2.Add(a2Empresas);
                tempA2.Add(a2Suministros);
                tempA2.Add(a2Cantidad);
                tempA2.Add(a2Precio);
                object entityA2;
                int c = 0;
                foreach (var item in tempA2)
                {
                    entityA2 = new
                    {
                        id = "a2" + c,
                        label = "",
                        label2 = "",
                        data = item,
                        htrender = "normal",
                        hcrender = "no"
                    };
                    dataA2.Add(entityA2);
                    c++;
                }
            }
            else
            {
                object entityA2;
                for (int i = 0; i < 6; i++)
                {
                    entityA2 = new
                    {
                        id = "a2" + i,
                        label = "",
                        label2 = "",
                        data = Enumerable.Repeat("0", 1).ToArray(),
                        htrender = "normal",
                        hcrender = "no"
                    };
                    dataA2.Add(entityA2);
                }
            }
            #endregion

            #region Modelo para las fechas de vigencia
            object fechasVigencia;
            fechasVigencia = new
            {
                inicioCDU = inicioVigenciaCDU,
                finCDU = finVigenciaCDU,
                inicioCCD = inicioVigenciaCCD,
                finCCD = finVigenciaCCD,
            };
            #endregion

            return new { dataCDU, dataCRD, dataCCD, dataA2, fechasVigencia };
        }

        /// <summary>
        /// Método para listar los datos del cuadro A1 - CDU
        /// <param name="idEmpresa"> Identificador de empresa</param>
        /// <param name="idPeriodo"> Identificador de periodo</param>
        /// <param name="lista"> Informacion CDU, CDR y CCD</param>
        /// <param name="listaRegistros"> Lista de registros habilitados</param>
        /// <param name="inicioVigenciaCDU"> Salida para el inicio de vigencia - cdu</param>
        /// <param name="finVigenciaCDU"> Salada para el fin de vigenca - cdu</param>
        /// </summary>
        public List<object> ListCuadroA1CDU(int idEmpresa, int idPeriodo, List<IndCabeceraDTO> lista,
                                            List<IndRelacionEmpresaDTO> listaRegistros,
                                            out string inicioVigenciaCDU, out string finVigenciaCDU)
        {
            List<object> dataCDU = new List<object>();
            List<string[]> cduPeriodo = new List<string[]>();
            SiEmpresaDTO empresa = FactorySic.GetSiEmpresaRepository().GetById(idEmpresa);
            IndPeriodoDTO periodo = FactorySic.GetIndPeriodoRepository().GetById(idPeriodo);
            List<string> headersCDU = this.ObtenerDiasxPeriodo(idPeriodo);
            DateTime firstDay = new DateTime(periodo.Iperianio, periodo.Iperimes, 1);
            DateTime lastDay = firstDay.GetLastDateOfMonth();
            inicioVigenciaCDU = firstDay.ToString(ConstantesIndisponibilidades.FormatoFecha);
            finVigenciaCDU = lastDay.ToString(ConstantesIndisponibilidades.FormatoFecha);
            int dias = headersCDU.Count();
            //Armar lista de headers, se agrega
            headersCDU.Insert(0, "");
            headersCDU.Insert(0, "");
            headersCDU.Insert(0, "");
            headersCDU.Insert(0, "");
            headersCDU.Insert(0, "");
            //SubHeaders
            List<string> sHeadersCDU = new List<string>();
            for (int i = 0; i < dias; i++)
            {
                sHeadersCDU.Add(ConstantesIndisponibilidades.EtiquetaCDU3);
            }
            sHeadersCDU.Insert(0, ConstantesIndisponibilidades.EtiquetaCDU2);
            sHeadersCDU.Insert(0, "");
            sHeadersCDU.Insert(0, "");
            sHeadersCDU.Insert(0, "");
            sHeadersCDU.Insert(0, "");
            //Lista con la informacion de CDU
            IndCabeceraDTO cabeceraCDU = lista.Where(x => x.Indcbrtipo == ConstantesIndisponibilidades.TipoCDU)
                                                .FirstOrDefault();

            if (cabeceraCDU != null)
            {
                List<IndCapacidadDiaDTO> cduCapacidadDia = this.ListCapacidadDiaJoinCabecera(cabeceraCDU.Indcbrcodi);
                List<IndCapacidadDTO> capacidadCDU = this.ListCapacidadByCabecera(cabeceraCDU.Indcbrcodi)
                                                            .OrderBy(x => x.Equicodicentral).ToList();
                inicioVigenciaCDU = (capacidadCDU[0].Indcpcfecinicio)
                                                .ToString(ConstantesIndisponibilidades.FormatoFecha);
                finVigenciaCDU = (capacidadCDU[0].Indcpcfecfin)
                                                .ToString(ConstantesIndisponibilidades.FormatoFecha); ;
                for (int i = 0; i < dias; i++)
                {
                    DateTime dt = DateTime.ParseExact(headersCDU[i + 5],
                                                       ConstantesIndisponibilidades.FormatoFecha,
                                                       CultureInfo.InvariantCulture);
                    string[] cduDia = new string[listaRegistros.Count() + 1];
                    IndCapacidadDiaDTO filaCero = cduCapacidadDia.Where(x => x.Equicodicentral == 0
                                                                        && x.Equicodiunidad == 0
                                                                        && x.Grupocodi == 0
                                                                        && x.Famcodi == 0
                                                                        && x.Cpcdiafecha == dt)
                                                               .FirstOrDefault();//.Cpcdiavalor.ToString();
                    cduDia[0] = (filaCero == null) ? "0" : filaCero.Cpcdiavalor.ToString();
                    int n = 1;
                    foreach (var item in listaRegistros)
                    {
                        IndCapacidadDiaDTO d = cduCapacidadDia.Where(x => x.Equicodicentral == item.Equicodicentral
                                                           && x.Equicodiunidad == item.Equicodiunidad
                                                           && x.Grupocodi == item.Grupocodi
                                                           && x.Famcodi == item.Famcodi
                                                           && x.Cpcdiafecha == dt)
                                                  .FirstOrDefault();//.Cpcdiavalor.ToString();
                        cduDia[n] = (d == null) ? "0" : d.Cpcdiavalor.ToString();
                        n++;
                    }
                    cduPeriodo.Add(cduDia);
                }
                //2da columna, tiene las descripciones
                string[] descripcionCDU = new string[listaRegistros.Count + 1];
                descripcionCDU[0] = ConstantesIndisponibilidades.DescripcionCDU1;
                string[] idCentrales = new string[listaRegistros.Count + 1];
                string[] idUnidades = new string[listaRegistros.Count + 1];
                string[] idGrupos = new string[listaRegistros.Count + 1];
                string[] idFamilias = new string[listaRegistros.Count + 1];
                int contadorCDU = 1;
                foreach (var item in listaRegistros)
                {
                    string nombEquipo = (item.Equinombcentral == item.Equinombunidad) ? item.Equinombcentral
                                                     : item.Equinombcentral + "[" + item.Equinombunidad + "]";
                    //consulto por item.equicodi y traigo el nombre de la central
                    descripcionCDU[contadorCDU] = ConstantesIndisponibilidades.DescripcionCDU2
                                                  + nombEquipo;
                    idCentrales[contadorCDU] = item.Equicodicentral.ToString();
                    idUnidades[contadorCDU] = item.Equicodiunidad.ToString();
                    idGrupos[contadorCDU] = item.Grupocodi.ToString();
                    idFamilias[contadorCDU] = item.Famcodi.ToString();
                    contadorCDU++;
                }
                cduPeriodo.Insert(0, descripcionCDU);
                //4ta columna, tiene los ids de equicodicentral
                cduPeriodo.Insert(0, idCentrales);
                //3era columna, tiene los ids de equicodiunidad
                cduPeriodo.Insert(0, idUnidades);
                //2da columna, tiene los ids de grupocodi
                cduPeriodo.Insert(0, idGrupos);
                //1er columna, tiene los ids de famcodi.
                cduPeriodo.Insert(0, idFamilias);
            }
            else
            {
                for (int i = 0; i < dias; i++)
                {
                    string[] cduDia = Enumerable.Repeat("0", listaRegistros.Count + 1).ToArray();
                    cduPeriodo.Add(cduDia);
                }
                string[] descripcionCDU = new string[listaRegistros.Count + 1];
                string[] listaTipos = { ConstantesIndisponibilidades.DescripcionCDU1 };
                for (int i = 0; i < listaRegistros.Count + 1; i++)
                {
                    if (i > 0)
                    {
                        string nombCentral = listaRegistros[i - 1].Equinombcentral;
                        string nombUnidad = listaRegistros[i - 1].Equinombunidad;
                        string nombEquipo = (nombCentral == nombUnidad) ? nombCentral
                                                     : nombCentral + "[" + nombUnidad + "]";
                        descripcionCDU[i] = ConstantesIndisponibilidades.DescripcionCDU2
                                                        + nombEquipo;
                    }
                    else
                    {
                        descripcionCDU[i] = listaTipos[i];
                    }
                }
                cduPeriodo.Insert(0, descripcionCDU);
                cduPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count + 1).ToArray());
                cduPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count + 1).ToArray());
                cduPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count + 1).ToArray());
                cduPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count + 1).ToArray());
            }
            object entityCDU;
            for (int a = 0; a < dias + 5; a++)
            {
                entityCDU = new
                {
                    id = "cdu" + a,
                    label = headersCDU[a],
                    label2 = sHeadersCDU[a],
                    data = cduPeriodo[a],
                    htrender = "normal",
                    hcrender = "no"
                };
                dataCDU.Add(entityCDU);
            }

            return dataCDU;
        }


        /// <summary>
        /// Método para listar los datos del cuadro A1 - CDU
        /// <param name="idEmpresa"> Identificador de empresa</param>
        /// <param name="idPeriodo"> Identificador de periodo</param>
        /// <param name="lista"> Informacion CDU, CDR y CCD</param>
        /// <param name="listaRegistros"> Lista de registros habilitados para el cuadro A1</param>
        /// </summary>
        public List<object> ListCuadroA1CRD(int idEmpresa, int idPeriodo, List<IndCabeceraDTO> lista,
                                            List<IndRelacionEmpresaDTO> listaRegistros)
        {
            List<object> dataCRD = new List<object>();
            List<string[]> crdPeriodo = new List<string[]>();
            SiEmpresaDTO empresa = FactorySic.GetSiEmpresaRepository().GetById(idEmpresa);
            IndPeriodoDTO periodo = FactorySic.GetIndPeriodoRepository().GetById(idPeriodo);
            List<string> headersCRD = this.ObtenerDiasxPeriodo(idPeriodo);
            int dias = headersCRD.Count();
            //Armar lista de headers, se agrega
            headersCRD.Insert(0, "");
            headersCRD.Insert(0, "");
            headersCRD.Insert(0, "");
            headersCRD.Insert(0, "");
            headersCRD.Insert(0, "");
            //SubHeaders
            List<string> sHeadersCRD = new List<string>();
            for (int i = 0; i < dias; i++)
            {
                sHeadersCRD.Add(ConstantesIndisponibilidades.EtiquetaCRD4);
            }
            sHeadersCRD.Insert(0, ConstantesIndisponibilidades.EtiquetaCRD3);
            sHeadersCRD.Insert(0, "");
            sHeadersCRD.Insert(0, "");
            sHeadersCRD.Insert(0, "");
            sHeadersCRD.Insert(0, "");
            //Lista con la informacion de CRD
            IndCabeceraDTO cabeceraCRD = lista.Where(x => x.Indcbrtipo == ConstantesIndisponibilidades.TipoCRD)
                                                .FirstOrDefault();
            if (cabeceraCRD != null)
            {
                List<IndCrdSugadDTO> crdSugad = new List<IndCrdSugadDTO>();
                //Agrego los tipos ordenados
                crdSugad.AddRange(this.ListCrdSugadByCabecera(cabeceraCRD.Indcbrcodi)
                    .Where(x => x.Equicodicentral == 0).OrderBy(x => x.Crdsgdtipo).ToList());
                foreach (var item in listaRegistros)
                {
                    IndCrdSugadDTO crd = this.ListCrdSugadByCabecera(cabeceraCRD.Indcbrcodi)
                                        .Where(x => x.Crdsgdtipo == ConstantesIndisponibilidades.Central
                                                 && x.Equicodicentral == item.Equicodicentral
                                                 && x.Equicodiunidad == item.Equicodiunidad
                                                 && x.Grupocodi == item.Grupocodi
                                                 && x.Famcodi == item.Famcodi)
                                              .FirstOrDefault();
                    if (crd == null)
                    {
                        IndCrdSugadDTO crdVacia = new IndCrdSugadDTO();
                        crdVacia.Equicodicentral = item.Equicodicentral;
                        crdVacia.Equicodiunidad = item.Equicodiunidad;
                        crdVacia.Grupocodi = item.Grupocodi;
                        crdVacia.Famcodi = item.Famcodi;
                        for (int i = 0; i < dias; i++)
                        {
                            crdVacia.GetType().GetProperty("D" + (i + 1).ToString()).SetValue(crdVacia, decimal.Parse(0.ToString()));
                        }
                        crdSugad.Add(crdVacia);
                    }
                    else
                    {
                        crdSugad.Add(crd);
                    }
                }
                for (int i = 0; i < dias; i++)
                {
                    string[] col = new string[crdSugad.Count];
                    int fila = 0;
                    foreach (var item in crdSugad)
                    {
                        var d = item.GetType().GetProperty("D" + (i + 1).ToString())
                                                        .GetValue(item, null);
                        string valueDia = (d == null) ? "" : d.ToString();
                        col[fila] = valueDia;
                        fila++;
                    }
                    crdPeriodo.Add(col);
                }
                //1era y 2da columna, tiene las descripciones
                string[] descripcionCRD = new string[crdSugad.Count()];
                string[] idCentrales = new string[crdSugad.Count()];
                string[] idUnidades = new string[crdSugad.Count()];
                string[] idGrupos = new string[crdSugad.Count()];
                string[] idFamilias = new string[crdSugad.Count()];
                string[] listaTipos = { ConstantesIndisponibilidades.CrdContratada,
                                            ConstantesIndisponibilidades.CrdAdquirida,
                                            ConstantesIndisponibilidades.CrdVendida,
                                            ConstantesIndisponibilidades.CrdTotal};
                int contadorCRD = 0;
                foreach (var item in crdSugad)
                {
                    //consulto por item.equicodi y traigo el nombre de la central
                    if (contadorCRD > 3)
                    {
                        string nombCentral = listaRegistros[contadorCRD - 4].Equinombcentral;
                        string nombUnidad = listaRegistros[contadorCRD - 4].Equinombunidad;
                        string nombEquipo = (nombCentral == nombUnidad) ? nombCentral : nombCentral + "[" + nombUnidad + "]";
                        descripcionCRD[contadorCRD] = ConstantesIndisponibilidades.DescripcionCRD1
                                                        + nombEquipo;
                    }
                    else
                    {
                        descripcionCRD[contadorCRD] = listaTipos[contadorCRD];
                    }
                    idCentrales[contadorCRD] = item.Equicodicentral.ToString();
                    idUnidades[contadorCRD] = item.Equicodiunidad.ToString();
                    idGrupos[contadorCRD] = item.Grupocodi.ToString();
                    idFamilias[contadorCRD] = item.Famcodi.ToString();
                    contadorCRD++;
                }
                //Agrego las columna con las descripciones y las que tienen los ids.
                crdPeriodo.Insert(0, descripcionCRD);
                crdPeriodo.Insert(0, idCentrales);
                crdPeriodo.Insert(0, idUnidades);
                crdPeriodo.Insert(0, idGrupos);
                crdPeriodo.Insert(0, idFamilias);
            }
            else
            {
                for (int i = 0; i < dias; i++)
                {
                    string[] crdDia = Enumerable.Repeat("0", listaRegistros.Count() + 4).ToArray();
                    crdPeriodo.Add(crdDia);
                }
                //2da columna, tiene las descripciones
                string[] descripcionCRD = new string[listaRegistros.Count + 4];
                string[] listaTipos = { ConstantesIndisponibilidades.CrdContratada,
                                            ConstantesIndisponibilidades.CrdAdquirida,
                                            ConstantesIndisponibilidades.CrdVendida,
                                            ConstantesIndisponibilidades.CrdTotal};
                for (int i = 0; i < listaRegistros.Count + 4; i++)
                {
                    if (i > 3)
                    {
                        string nombCentral = listaRegistros[i - 4].Equinombcentral;
                        string nombUnidad = listaRegistros[i - 4].Equinombunidad;
                        string nombEquipo = (nombCentral == nombUnidad) ? nombCentral
                                                     : nombCentral + "[" + nombUnidad + "]";
                        descripcionCRD[i] = ConstantesIndisponibilidades.DescripcionCRD1
                                                        + nombEquipo;
                    }
                    else
                    {
                        descripcionCRD[i] = listaTipos[i];
                    }
                }
                crdPeriodo.Insert(0, descripcionCRD);
                crdPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count() + 4).ToArray());
                crdPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count() + 4).ToArray());
                crdPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count() + 4).ToArray());
                crdPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count() + 4).ToArray());
            }
            object entityCRD;
            for (int a = 0; a < dias + 5; a++)
            {
                entityCRD = new
                {
                    id = "crd" + a,
                    label = headersCRD[a],
                    label2 = sHeadersCRD[a],
                    data = crdPeriodo[a],
                    htrender = "normal",
                    hcrender = "no"
                };
                dataCRD.Add(entityCRD);
            }

            return dataCRD;
        }

        /// <summary>
        /// Método para listar los datos del cuadro A1 - CCD
        /// <param name="idEmpresa"> Identificador de empresa</param>
        /// <param name="idPeriodo"> Identificador de periodo</param>
        /// <param name="lista"> Informacion CDU, CDR y CCD</param>
        /// <param name="listaRegistros"> Lista de registros habilitados</param>
        /// <param name="inicioVigenciaCCD"> Salida para el inicio de vigencia - ccd</param>
        /// <param name="finVigenciaCCD"> Salada para el fin de vigenca - ccd</param>
        /// </summary>
        public List<object> ListCuadroA1CCD(int idEmpresa, int idPeriodo, List<IndCabeceraDTO> lista,
                                            List<IndRelacionEmpresaDTO> listaRegistros,
                                            out string inicioVigenciaCCD, out string finVigenciaCCD)
        {
            List<object> dataCCD = new List<object>();
            List<string[]> ccdPeriodo = new List<string[]>();
            SiEmpresaDTO empresa = FactorySic.GetSiEmpresaRepository().GetById(idEmpresa);
            IndPeriodoDTO periodo = FactorySic.GetIndPeriodoRepository().GetById(idPeriodo);
            List<string> headersCCD = this.ObtenerDiasxPeriodo(idPeriodo);
            DateTime firstDay = new DateTime(periodo.Iperianio, periodo.Iperimes, 1);
            DateTime lastDay = firstDay.GetLastDateOfMonth();
            inicioVigenciaCCD = firstDay.ToString(ConstantesIndisponibilidades.FormatoFecha);
            finVigenciaCCD = lastDay.ToString(ConstantesIndisponibilidades.FormatoFecha);
            int dias = headersCCD.Count();
            //Armar lista de headers, se agrega
            headersCCD.Insert(0, "");
            headersCCD.Insert(0, "");
            headersCCD.Insert(0, "");
            headersCCD.Insert(0, "");
            headersCCD.Insert(0, "");
            //SubHeaders
            List<string> sHeadersCCD = new List<string>();
            for (int i = 0; i < dias; i++)
            {
                sHeadersCCD.Add(ConstantesIndisponibilidades.EtiquetaCCD3);
            }
            sHeadersCCD.Insert(0, ConstantesIndisponibilidades.EtiquetaCCD2);
            sHeadersCCD.Insert(0, "");
            sHeadersCCD.Insert(0, "");
            sHeadersCCD.Insert(0, "");
            sHeadersCCD.Insert(0, "");
            //Lista con la informacion de CCD
            IndCabeceraDTO cabeceraCCD = lista.Where(x => x.Indcbrtipo == ConstantesIndisponibilidades.TipoCCD)
                                                .FirstOrDefault();
            if (cabeceraCCD != null)
            {
                List<IndCapacidadDiaDTO> ccdCapacidadDia = this.ListCapacidadDiaJoinCabecera(cabeceraCCD.Indcbrcodi);
                List<IndCapacidadDTO> capacidadCCD = this.ListCapacidadByCabecera(cabeceraCCD.Indcbrcodi)
                                            .OrderBy(x => x.Equicodicentral).ToList();
                inicioVigenciaCCD = (capacidadCCD[0].Indcpcfecinicio)
                                                .ToString(ConstantesIndisponibilidades.FormatoFecha);
                finVigenciaCCD = (capacidadCCD[0].Indcpcfecfin)
                                                .ToString(ConstantesIndisponibilidades.FormatoFecha);
                for (int i = 0; i < dias; i++)
                {
                    DateTime dt = DateTime.ParseExact(headersCCD[i + 5],
                                                       ConstantesIndisponibilidades.FormatoFecha,
                                                       CultureInfo.InvariantCulture);
                    string[] ccdDia = new string[listaRegistros.Count() + 1];
                    IndCapacidadDiaDTO filaCero = ccdCapacidadDia.Where(x => x.Equicodicentral == 0
                                                                          && x.Equicodiunidad == 0
                                                                          && x.Grupocodi == 0
                                                                          && x.Famcodi == 0
                                                                          && x.Cpcdiafecha == dt)
                                                                 .FirstOrDefault();
                    ccdDia[0] = (filaCero == null) ? "0" : filaCero.Cpcdiavalor.ToString();
                    int n = 1;
                    foreach (var item in listaRegistros)
                    {
                        IndCapacidadDiaDTO d = ccdCapacidadDia.Where(x => x.Equicodicentral == item.Equicodicentral
                                                                          && x.Equicodiunidad == item.Equicodiunidad
                                                                          && x.Grupocodi == item.Grupocodi
                                                                          && x.Famcodi == item.Famcodi
                                                                          && x.Cpcdiafecha == dt)
                                                                 .FirstOrDefault();
                        ccdDia[n] = (d == null) ? "0" : d.Cpcdiavalor.ToString();
                        n++;
                    }
                    ccdPeriodo.Add(ccdDia);
                }
                //2da columna, tiene las descripciones
                string[] descripcionCCD = new string[listaRegistros.Count + 1];
                descripcionCCD[0] = ConstantesIndisponibilidades.DescripcionCCD1;
                string[] idCentrales = new string[listaRegistros.Count + 1];
                string[] idUnidades = new string[listaRegistros.Count + 1];
                string[] idGrupos = new string[listaRegistros.Count + 1];
                string[] idFamilias = new string[listaRegistros.Count + 1];
                int contadorCCD = 1;
                foreach (var item in listaRegistros)
                {
                    string nombEquipo = (item.Equinombcentral == item.Equinombunidad) ? item.Equinombcentral
                                                     : item.Equinombcentral + "[" + item.Equinombunidad + "]";
                    //consulto por item.equicodi y traigo el nombre de la central
                    descripcionCCD[contadorCCD] = ConstantesIndisponibilidades.DescripcionCCD2
                                                        + nombEquipo;
                    idCentrales[contadorCCD] = item.Equicodicentral.ToString();
                    idUnidades[contadorCCD] = item.Equicodiunidad.ToString();
                    idGrupos[contadorCCD] = item.Grupocodi.ToString();
                    idFamilias[contadorCCD] = item.Famcodi.ToString();
                    contadorCCD++;
                }
                ccdPeriodo.Insert(0, descripcionCCD);
                //4ta columna, tiene los ids de eqquicodicentral.
                ccdPeriodo.Insert(0, idCentrales);
                //3era columna, tiene los ids de equicodiunidad.
                ccdPeriodo.Insert(0, idUnidades);
                //2da columna, tiene los ids de grupocodi.
                ccdPeriodo.Insert(0, idGrupos);
                //1er columna, tiene los ids de famcodi.
                ccdPeriodo.Insert(0, idFamilias);
            }
            else
            {
                for (int i = 0; i < dias; i++)
                {
                    string[] ccdDia = Enumerable.Repeat("0", listaRegistros.Count + 1).ToArray();
                    ccdPeriodo.Add(ccdDia);
                }
                ////2da columna, tiene las descripciones
                string[] descripcionCCD = new string[listaRegistros.Count + 1];
                string[] listaTipos = { ConstantesIndisponibilidades.DescripcionCCD1 };
                for (int i = 0; i < listaRegistros.Count + 1; i++)
                {
                    if (i > 0)
                    {
                        string nombCentral = listaRegistros[i - 1].Equinombcentral;
                        string nombUnidad = listaRegistros[i - 1].Equinombunidad;
                        string nombEquipo = (nombCentral == nombUnidad) ? nombCentral
                                                     : nombCentral + "[" + nombUnidad + "]";
                        descripcionCCD[i] = ConstantesIndisponibilidades.DescripcionCCD2
                                                        + nombEquipo;
                    }
                    else
                    {
                        descripcionCCD[i] = listaTipos[i];
                    }
                }
                ccdPeriodo.Insert(0, descripcionCCD);
                ccdPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count() + 1).ToArray());
                ccdPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count() + 1).ToArray());
                ccdPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count() + 1).ToArray());
                ccdPeriodo.Insert(0, Enumerable.Repeat("0", listaRegistros.Count() + 1).ToArray());
            }
            object entityCCD;
            for (int a = 0; a < dias + 5; a++)
            {
                entityCCD = new
                {
                    id = "ccd" + a,
                    label = headersCCD[a],
                    label2 = sHeadersCCD[a],
                    data = ccdPeriodo[a],
                    htrender = "normal",
                    hcrender = "no"
                };
                dataCCD.Add(entityCCD);
            }

            return dataCCD;
        }


        /// <summary>
        /// Método que genera un reporte excel del cuadro A1 y A2
        /// <param name="modelo"> Estructura con los datos del archivo excel</param>
        /// <param name="pathFile"> Ruta donde se descarga el excel</param>
        /// <param name="filename"> Nombre del archivo</param>
        /// </summary>
        public string ExportarReporteCuadroA1A2(IndFormatoExcel modelo, string pathFile, string filename)
        {
            string Reporte = filename + ".xlsx";
            ExcelDocument.GenerarCuadroA1A2Excel(modelo, pathFile + Reporte);

            return Reporte;
        }

        /// <summary>
        /// Método que genera un reporte excel del cuadro A1 y A2
        /// <param name="empresa"> Identificador de la empresa</param>
        /// <param name="periodo"> Identificador del periodo</param>
        /// </summary>
        public IndFormatoExcel ModeloCuadroA1A2Excel(int empresa, int periodo)
        {
            IndFormatoExcel modelo = new IndFormatoExcel();
            //Consulta a la tabla IND_PERIODO y SI_EMPRESA
            IndPeriodoDTO dPeriodo = this.GetByIdIndPeriodo(periodo);
            SiEmpresaDTO datoEmpresa = FactorySic.GetSiEmpresaRepository().GetById(empresa);

            //Preguntar si la empresa esta habilitada para importar
            //el cuadro A1 y A2
            List<IndRelacionEmpresaDTO> listaRelacionEmpresas = this.ListIndRelacionEmpresaByIdEmpresa(empresa);
            modelo.HabilitadoCuadro1 = (listaRelacionEmpresas.Where(x => x.Relempcuadro1 == "S")
                                        .ToList().Count() > 0) ? true : false;
            modelo.HabilitadoCuadro2 = (listaRelacionEmpresas.Where(x => x.Relempcuadro2 == "S")
                                        .ToList().Count() > 0) ? true : false;

            //Datos generales
            DateTime firstDay = new DateTime(dPeriodo.Iperianio, dPeriodo.Iperimes, 1);
            DateTime lastDay = firstDay.GetLastDateOfMonth();
            modelo.DiasPerido = lastDay.Day;
            modelo.EmpresaNombre = datoEmpresa.Emprnomb;

            if (modelo.HabilitadoCuadro1)
            {
                modelo.NombreLibroCuadroA1 = ConstantesIndisponibilidades.LibroCuadroA1;
                modelo.TituloCuadroA1 = ConstantesIndisponibilidades.TituloCuadroA1;
                modelo.HabilitadasCuadro1 = listaRelacionEmpresas.Where(x => x.Relempcuadro1 == "S").ToList();
                modelo.NumeroRegistros = modelo.HabilitadasCuadro1.Count();

                //Datos que se ocultaran, estos datos se usaran para validar el excel
                #region Datos Generales
                string[][] datosGenerales = new string[7][];
                string[] datosEmpresa = { empresa.ToString(), "Empresa", modelo.EmpresaNombre };
                string[] datosPeriodo = { periodo.ToString(), "Periodo", dPeriodo.Iperinombre };
                string[] datosDiasMes = { "", "Dias", modelo.DiasPerido.ToString() };
                //Centrales
                string centralNombre = string.Join(",", modelo.HabilitadasCuadro1.Select(x => x.Equinombcentral).ToList());
                string centralCodigo = string.Join(",", modelo.HabilitadasCuadro1.Select(x => x.Equicodicentral).ToList());
                string[] datosCentrales = { centralCodigo, "Centrales", centralNombre };
                //Unidades
                string unidadNombre = string.Join(",", modelo.HabilitadasCuadro1.Select(x => x.Equinombunidad).ToList());
                string unidadCodigo = string.Join(",", modelo.HabilitadasCuadro1.Select(x => x.Equicodiunidad).ToList());
                string[] datosUnidades = { unidadCodigo, "Unidades", unidadNombre };
                //Grupos
                string grupoNombre = string.Join(",", modelo.HabilitadasCuadro1.Select(x => x.Gruponomb).ToList());
                string grupoCodigo = string.Join(",", modelo.HabilitadasCuadro1.Select(x => x.Grupocodi).ToList());
                string[] datosGrupos = { grupoCodigo, "Grupos", grupoNombre };
                //Familias
                string familiaNombre = string.Join(",", modelo.HabilitadasCuadro1.Select(x => x.Famnomb).ToList());
                string familiaCodigo = string.Join(",", modelo.HabilitadasCuadro1.Select(x => x.Famcodi).ToList());
                string[] datosFamilias = { familiaCodigo, "Familias", familiaNombre };
                datosGenerales[0] = datosEmpresa;
                datosGenerales[1] = datosPeriodo;
                datosGenerales[2] = datosDiasMes;
                datosGenerales[3] = datosCentrales;
                datosGenerales[4] = datosUnidades;
                datosGenerales[5] = datosGrupos;
                datosGenerales[6] = datosFamilias;
                modelo.DatosGenerales = datosGenerales;
                #endregion

                #region Datos registrados para el periodo y empresa en la BD
                //Trae la cabecera con los 3 tipos CDU = 1, CDR = 2 y CCD = 3
                List<IndCabeceraDTO> cabecera = this.ListCabecera(empresa, periodo);
                //Extrae registros de CDU = 1
                IndCabeceraDTO cduCabecera = cabecera.Where(x =>
                                                x.Indcbrtipo == ConstantesIndisponibilidades.TipoCDU)
                                                .FirstOrDefault();

                //Extrae registros de CRD = 2
                IndCabeceraDTO crdCabecera = cabecera.Where(x =>
                                                x.Indcbrtipo == ConstantesIndisponibilidades.TipoCRD)
                                                .FirstOrDefault();

                //Extrae registros de CCD = 3
                IndCabeceraDTO ccdCabecera = cabecera.Where(x =>
                                                x.Indcbrtipo == ConstantesIndisponibilidades.TipoCCD)
                                                .FirstOrDefault();
                #endregion

                //Datos para CDU del cuadro A1
                #region Datos CDU
                string cduInicio = firstDay.ToString(ConstantesIndisponibilidades.FormatoFecha);
                string cduFin = lastDay.ToString(ConstantesIndisponibilidades.FormatoFecha);
                //string[] valoresCDU = Enumerable.Repeat("0", modelo.NumeroRegistros + 1).ToArray();
                string[] valoresCDU = Enumerable.Repeat("", modelo.NumeroRegistros + 1).ToArray();
                //Preguntando si hay registros CDU para una empresa x en un periodo y
                if (cduCabecera != null)
                {
                    List<IndCapacidadDiaDTO> cduCapacidadDia = this.ListCapacidadDiaJoinCabecera(cduCabecera.Indcbrcodi);
                    //Lista la capacidad de CDU
                    List<IndCapacidadDTO> cduCapacidad = this.ListCapacidadByCabecera(cduCabecera.Indcbrcodi);
                    cduInicio = cduCapacidad.FirstOrDefault().Indcpcfecinicio
                                            .ToString(ConstantesIndisponibilidades.FormatoFecha);
                    cduFin = cduCapacidad.FirstOrDefault().Indcpcfecfin
                                            .ToString(ConstantesIndisponibilidades.FormatoFecha);
                    DateTime regFecha = DateTime.ParseExact(DateTime.Now
                                                            .ToString(ConstantesIndisponibilidades.FormatoFecha),
                                                            ConstantesIndisponibilidades.FormatoFecha,
                                                            CultureInfo.InvariantCulture);
                    //Validando fecha que se usara
                    regFecha = ((firstDay.Month == regFecha.Month) && (firstDay.Year == regFecha.Year)) ? regFecha : firstDay;

                    valoresCDU[0] = cduCapacidadDia.Where(x => x.Equicodicentral == 0
                                                        && x.Equicodiunidad == 0
                                                        && x.Grupocodi == 0
                                                        && x.Famcodi == 0
                                                        && x.Cpcdiafecha == regFecha)
                                                     .FirstOrDefault().Cpcdiavalor.ToString();
                    int cdu = 1;
                    foreach (var item in modelo.HabilitadasCuadro1)
                    {

                        string val = cduCapacidadDia.Where(x => x.Equicodicentral == item.Equicodicentral
                                                        && x.Equicodiunidad == item.Equicodiunidad
                                                        && x.Grupocodi == item.Grupocodi
                                                        && x.Famcodi == item.Famcodi
                                                        && x.Cpcdiafecha == regFecha)
                                                     .FirstOrDefault().Cpcdiavalor.ToString();
                        //valoresCDU[cdu] = (string.IsNullOrEmpty(val)) ? "0" : val;
                        valoresCDU[cdu] = (string.IsNullOrEmpty(val)) ? "" : val;
                        cdu++;
                    }
                }

                IndFormatoExcel modeloCDU = this.CuadroA1CDU(modelo.EmpresaNombre, modelo.NumeroRegistros,
                                                modelo.HabilitadasCuadro1, cduInicio, cduFin, valoresCDU);
                modelo.NestedHeader1 = modeloCDU.NestedHeader1;
                modelo.NestedHeader2 = modeloCDU.NestedHeader2;
                modelo.Transportada = modeloCDU.Transportada;
                #endregion

                //Datos para CRD del cuadro A1
                #region Datos CRD
                List<string[]> valoresCRD = new List<string[]>();
                if (crdCabecera != null)
                {
                    //Todas los registros
                    List<IndCrdSugadDTO> crdTodos = this.ListCrdSugadByCabecera(crdCabecera.Indcbrcodi);
                    //Lista los registros de tipo 1,2,3,4 ordenados, luego se agregara las centrales
                    //previo ordenado en base a la lista de centrales.
                    List<IndCrdSugadDTO> crdTipos = crdTodos.Where(x => x.Equicodicentral == 0)//Uso 0 pq los tipos 1,2,3,4 no tienen centrales asignadas
                                                        .OrderBy(x => x.Crdsgdtipo).ToList();
                    //Listo solo las centrales
                    List<IndCrdSugadDTO> crdCentrales = crdTodos
                                                        .Where(x => x.Crdsgdtipo == ConstantesIndisponibilidades.Central)
                                                        .ToList();
                    int[] tipos = {ConstantesIndisponibilidades.Contratada, ConstantesIndisponibilidades.Adquirida,
                                   ConstantesIndisponibilidades.Vendida, ConstantesIndisponibilidades.Total};
                    //Estructurando la data por columnas.                   
                    for (int i = 0; i < modelo.DiasPerido; i++)//Dias de los D1, D2, D3 .......
                    {
                        int crd = 4;
                        string[] valorDia = new string[modelo.NumeroRegistros + 4];
                        foreach (var item in modelo.HabilitadasCuadro1)
                        {
                            string val = "";
                            IndCrdSugadDTO reg = crdCentrales.Where(x => x.Equicodicentral == item.Equicodicentral
                                                                && x.Equicodiunidad == item.Equicodiunidad
                                                                && x.Grupocodi == item.Grupocodi
                                                                && x.Famcodi == item.Famcodi)
                                                             .FirstOrDefault();
                            if (reg != null)
                            {
                                var d = reg.GetType().GetProperty("D" + (i + 1).ToString())
                                                     .GetValue(reg, null);
                                string valueDia = (d == null) ? "" : d.ToString();
                                //val = reg.GetType().GetProperty("D" + (i + 1).ToString())
                                //         .GetValue(reg, null).ToString();
                                val = valueDia;
                            }
                            //val = reg.GetType().GetProperty("D" + (i + 1).ToString()).GetValue(reg, null).ToString();
                            //valorDia[crd] = (string.IsNullOrEmpty(val)) ? "0" : val;
                            valorDia[crd] = (string.IsNullOrEmpty(val)) ? "" : val;
                            crd++;
                        }
                        valoresCRD.Add(valorDia);
                    }

                    int c = 0;
                    foreach (string[] item in valoresCRD)
                    {
                        for (int i = 0; i < tipos.Count(); i++)
                        {
                            IndCrdSugadDTO reg = crdTipos.Where(x => x.Crdsgdtipo == tipos[i])
                                                         .FirstOrDefault();
                            var d = reg.GetType().GetProperty("D" + (c + 1).ToString())
                                                     .GetValue(reg, null);
                            //string val = reg.GetType().GetProperty("D" + (c + 1).ToString())
                            //                .GetValue(reg, null).ToString();
                            string val = (d == null) ? "" : d.ToString();
                            item[i] = val;
                        }
                        c++;
                    }
                }

                IndFormatoExcel modeloCRD = this.CuadroA1CRD(modelo.EmpresaNombre, modelo.NumeroRegistros,
                                                                modelo.HabilitadasCuadro1, modelo.DiasPerido,
                                                                firstDay, lastDay, valoresCRD);
                modelo.NestedHeader3 = modeloCRD.NestedHeader3;
                modelo.NestedHeader4 = modeloCRD.NestedHeader4;
                modelo.NestedHeader5 = modeloCRD.NestedHeader5;
                modelo.Reservada = modeloCRD.Reservada;
                #endregion

                //Datos para CCD del cuadro A1
                #region Datos CCD
                string ccdInicio = firstDay.ToString(ConstantesIndisponibilidades.FormatoFecha);
                string ccdFin = lastDay.ToString(ConstantesIndisponibilidades.FormatoFecha);
                //string[] valoresCCD = Enumerable.Repeat("0", modelo.NumeroRegistros + 1).ToArray();
                string[] valoresCCD = Enumerable.Repeat("", modelo.NumeroRegistros + 1).ToArray();
                //Preguntando si hay registros CCD para una empresa x en un periodo y
                if (ccdCabecera != null)
                {
                    List<IndCapacidadDiaDTO> ccdCapacidadDia = this.ListCapacidadDiaJoinCabecera(ccdCabecera.Indcbrcodi);
                    //Lista la capacidad de CCD
                    List<IndCapacidadDTO> ccdCapacidad = this.ListCapacidadByCabecera(ccdCabecera.Indcbrcodi);
                    ccdInicio = ccdCapacidad.FirstOrDefault().Indcpcfecinicio
                                            .ToString(ConstantesIndisponibilidades.FormatoFecha);
                    ccdFin = ccdCapacidad.FirstOrDefault().Indcpcfecfin
                                            .ToString(ConstantesIndisponibilidades.FormatoFecha);
                    DateTime regFecha = DateTime.ParseExact(DateTime.Now.ToString(ConstantesIndisponibilidades.FormatoFecha),
                                                    ConstantesIndisponibilidades.FormatoFecha,
                                                    CultureInfo.InvariantCulture);
                    //Validando fecha que se usara
                    regFecha = ((firstDay.Month == regFecha.Month) && (firstDay.Year == regFecha.Year)) ? regFecha : firstDay;

                    valoresCCD[0] = ccdCapacidadDia.Where(x => x.Equicodicentral == 0
                                                        && x.Equicodiunidad == 0
                                                        && x.Grupocodi == 0
                                                        && x.Famcodi == 0
                                                        && x.Cpcdiafecha == regFecha)
                                                     .FirstOrDefault().Cpcdiavalor.ToString();
                    int ccd = 1;
                    foreach (var item in modelo.HabilitadasCuadro1)
                    {
                        string val = ccdCapacidadDia.Where(x => x.Equicodicentral == item.Equicodicentral
                                                        && x.Equicodiunidad == item.Equicodiunidad
                                                        && x.Grupocodi == item.Grupocodi
                                                        && x.Famcodi == item.Famcodi
                                                        && x.Cpcdiafecha == regFecha)
                                                     .FirstOrDefault().Cpcdiavalor.ToString();
                        //valoresCCD[ccd] = (string.IsNullOrEmpty(val)) ? "0" : val;
                        valoresCCD[ccd] = (string.IsNullOrEmpty(val)) ? "" : val;
                        ccd++;
                    }
                }

                IndFormatoExcel modeloCCD = this.CuadroA1CCD(modelo.EmpresaNombre, modelo.NumeroRegistros,
                                                        modelo.HabilitadasCuadro1, cduInicio, cduFin, valoresCCD);
                modelo.NestedHeader6 = modeloCCD.NestedHeader6;
                modelo.NestedHeader7 = modeloCCD.NestedHeader7;
                modelo.Contratada = modeloCCD.Contratada;
                #endregion
            }

            if (modelo.HabilitadoCuadro2)
            {
                modelo.NombreLibroCuadroA2 = ConstantesIndisponibilidades.LibroCuadroA2;
                modelo.TituloCuadroA2 = ConstantesIndisponibilidades.TituloCuadroA2;

                #region Datos cuadro A2
                IndCapacidadTransporteDTO capacidadTransporte = this.ListCapacidadTransporte(empresa, periodo)
                                                                                    .FirstOrDefault(); ;
                List<string[]> valoresA2 = new List<string[]>();
                if (capacidadTransporte != null)
                {
                    List<IndTransporteDetalleDTO> listaTransportes =
                                                this.ListTransporteDetalle(capacidadTransporte.Cpctnscodi);

                    string[] a2Tipos = listaTransportes.Select(x => x.Tnsdetdescripcion).ToArray();
                    string[] a2Fechas = listaTransportes.Select(x => x.Tnsdetfecha
                                            .ToString(ConstantesIndisponibilidades.FormatoFecha)).ToArray();
                    string[] a2Empresas = listaTransportes.Select(x => x.Emprnombalter).ToArray();
                    string[] a2Suministros = listaTransportes.Select(x => x.Tnsdetptosuministro).ToArray();
                    string[] a2Cantidad = listaTransportes.Select(x => x.Tnsdetcntadquirida.ToString()).ToArray();
                    string[] a2Precio = listaTransportes.Select(x => x.Tnsdetprctransferencia.ToString()).ToArray();
                    valoresA2.Add(a2Tipos);
                    valoresA2.Add(a2Fechas);
                    valoresA2.Add(a2Empresas);
                    valoresA2.Add(a2Suministros);
                    valoresA2.Add(a2Cantidad);
                    valoresA2.Add(a2Precio);
                }

                IndFormatoExcel modeloCuadro2CTG = this.CuadroA2CapacidadTransporte(modelo.EmpresaNombre, firstDay,
                                                                                    lastDay, modelo.DiasPerido, valoresA2);
                modelo.NestedHeader8 = modeloCuadro2CTG.NestedHeader8;
                modelo.NestedHeader9 = modeloCuadro2CTG.NestedHeader9;
                modelo.NestedHeader10 = modeloCuadro2CTG.NestedHeader10;
                modelo.Cuadro2CTG = modeloCuadro2CTG.Cuadro2CTG;
                #endregion
            }

            return modelo;
        }

        /// <summary>
        /// Método que genera la estructura para el cuadro CDU
        /// <param name="nombreEmpresa"> Nombre de la empresa</param>
        /// <param name="numeroRegistros"> Cantidad de registros</param>
        /// <param name="habilitadasCuadro1"> Lista de informacion habilitada para el cuadro 1</param>
        /// <param name="inicio"> Fecha de inicio</param>
        /// <param name="fin"> Fecha de fin</param>
        /// <param name="valores"> Array de valores</param>
        /// </summary>
        public IndFormatoExcel CuadroA1CDU(string nombreEmpresa, int numeroRegistros,
                                            List<IndRelacionEmpresaDTO> habilitadasCuadro1, string inicio,
                                            string fin, string[] valores)
        {
            IndFormatoExcel modelo = new IndFormatoExcel();

            //1era fila de la cabecera del CDU
            modelo.NestedHeader1 = new List<IndExcelHeader>();
            IndExcelHeader headerCDU1 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCDU1 + nombreEmpresa,
                Columnas = 4
            };
            modelo.NestedHeader1.Add(headerCDU1);
            //2da fila de la cabecera del CDU
            modelo.NestedHeader2 = new List<IndExcelHeader>();
            IndExcelHeader headerCDU2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCDU2,
                Columnas = 1
            };
            modelo.NestedHeader2.Add(headerCDU2);
            headerCDU2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCDU3,
                Columnas = 1
            };
            modelo.NestedHeader2.Add(headerCDU2);
            headerCDU2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCDU4,
                Columnas = 1
            };
            modelo.NestedHeader2.Add(headerCDU2);
            headerCDU2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCDU5,
                Columnas = 1
            };
            modelo.NestedHeader2.Add(headerCDU2);

            //Contenido de las tablas
            int filas = 1 + numeroRegistros;
            List<string[]> transportes = new List<string[]>();
            string[] centrales = new string[filas];
            string[] unidades = new string[filas];
            string[] grupos = new string[filas];
            string[] familias = new string[filas];
            int c = 0;
            foreach (var item in habilitadasCuadro1)
            {
                c++;
                centrales[c] = item.Equicodicentral.ToString();
                unidades[c] = item.Equicodiunidad.ToString();
                grupos[c] = item.Grupocodi.ToString();
                familias[c] = item.Famcodi.ToString();
            }
            transportes.Add(familias);
            transportes.Add(grupos);
            transportes.Add(unidades);
            transportes.Add(centrales);
            string[] filaDescripcion = new string[filas];
            filaDescripcion[0] = ConstantesIndisponibilidades.DescripcionCDU1;
            for (int i = 1; i < filas; i++)
            {
                string nombCentral = habilitadasCuadro1[i - 1].Equinombcentral;
                string nombUnidad = habilitadasCuadro1[i - 1].Equinombunidad;
                string nombEquipo = (nombCentral == nombUnidad) ? nombCentral
                                    : nombCentral + "[" + nombUnidad + "]";
                //Asigna los nombres centrales debajo de las constantes
                filaDescripcion[i] = ConstantesIndisponibilidades.DescripcionCDU2
                                    + nombEquipo;
            }
            transportes.Add(filaDescripcion);
            transportes.Add(valores);
            //Fecha de inicio
            string[] filaInicio = new string[filas];
            filaInicio[0] = inicio;
            transportes.Add(filaInicio);
            //Fecha de fin
            string[] filaFin = new string[filas];
            filaFin[0] = fin;
            transportes.Add(filaFin);

            modelo.Transportada = transportes;

            return modelo;
        }

        /// <summary>
        /// Método que genera la estructura para el cuadro CRD
        /// <param name="nombreEmpresa"> Nombre de la empresa</param>
        /// <param name="numeroRegistros"> Cantidad de registros</param>
        /// <param name="habilitadasCuadro1"> Lista de informacion habilitada para el cuadro 1</param>
        /// <param name="dias"> Numero de dias que tiene el periodo</param>
        /// <param name="inicio"> Fecha de inicio de periodo</param>
        /// <param name="fin"> Fecha de fin del periodo</param>
        /// <param name="valores"> Lista de valores, donde la cantidad de registros es la cantidad de dias del periodo</param>
        /// </summary>
        public IndFormatoExcel CuadroA1CRD(string nombreEmpresa, int numeroRegistros,
                                         List<IndRelacionEmpresaDTO> habilitadasCuadro1, int dias,
                                         DateTime inicio, DateTime fin, List<string[]> valores)
        {
            IndFormatoExcel modelo = new IndFormatoExcel();

            //1era fila de la cabecera del CRD
            modelo.NestedHeader3 = new List<IndExcelHeader>();
            IndExcelHeader headerCRD1 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCRD1 + nombreEmpresa,
                Columnas = 1
            };
            modelo.NestedHeader3.Add(headerCRD1);
            headerCRD1 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCRD2,
                Columnas = dias
            };
            modelo.NestedHeader3.Add(headerCRD1);

            //2da fila de la cabecera del CRD, solo la 1era columna
            modelo.NestedHeader4 = new List<IndExcelHeader>();
            IndExcelHeader headerCRD2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCRD3,
                Columnas = 1
            };
            modelo.NestedHeader4.Add(headerCRD2);

            //3era fila de la cabecera del CRD
            modelo.NestedHeader5 = new List<IndExcelHeader>();
            IndExcelHeader headerCRD3 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCRD3,
                Columnas = 1
            };
            modelo.NestedHeader5.Add(headerCRD3);

            while (inicio <= fin)
            {
                //2da fila columnas con las fechas
                headerCRD2 = new IndExcelHeader()
                {
                    Etiqueta =
                    inicio.ToString(ConstantesIndisponibilidades.FormatoFecha),
                    Columnas = 1
                };
                modelo.NestedHeader4.Add(headerCRD2);

                //3era fila con las Capacidades
                headerCRD3 = new IndExcelHeader()
                {
                    Etiqueta = ConstantesIndisponibilidades.EtiquetaCRD4,
                    Columnas = 1
                };
                modelo.NestedHeader5.Add(headerCRD3);

                inicio = inicio.AddDays(+1);
            }

            int filas = 4 + numeroRegistros;
            List<string[]> reservas = new List<string[]>();
            string[] centrales = new string[filas];
            string[] unidades = new string[filas];
            string[] grupos = new string[filas];
            string[] familias = new string[filas];
            int c = 3;
            foreach (var item in habilitadasCuadro1)
            {
                c++;
                centrales[c] = item.Equicodicentral.ToString();
                unidades[c] = item.Equicodiunidad.ToString();
                grupos[c] = item.Grupocodi.ToString();
                familias[c] = item.Famcodi.ToString();
            }
            reservas.Add(familias);
            reservas.Add(grupos);
            reservas.Add(unidades);
            reservas.Add(centrales);
            //Agrega la columna con las descripciones
            string[] filaDescripcion = new string[filas];
            filaDescripcion[0] = ConstantesIndisponibilidades.CrdContratada;
            filaDescripcion[1] = ConstantesIndisponibilidades.CrdAdquirida;
            filaDescripcion[2] = ConstantesIndisponibilidades.CrdVendida;
            filaDescripcion[3] = ConstantesIndisponibilidades.CrdTotal;
            for (int i = 4; i < filas; i++)
            {
                string nombCentral = habilitadasCuadro1[i - 4].Equinombcentral;
                string nombUnidad = habilitadasCuadro1[i - 4].Equinombunidad;
                string nombEquipo = (nombCentral == nombUnidad) ? nombCentral
                                    : nombCentral + "[" + nombUnidad + "]";
                //Asigna los nombres centrales debajo de las constantes
                filaDescripcion[i] = ConstantesIndisponibilidades.DescripcionCRD1
                                    + nombEquipo;
            }
            reservas.Add(filaDescripcion);

            if (valores.Count > 0)
            {
                for (int i = 0; i < dias; i++)
                {
                    reservas.Add(valores[i]);
                }
            }
            else
            {
                for (int i = 0; i < dias; i++)
                {
                    //reservas.Add(Enumerable.Repeat("0", filas).ToArray());
                    reservas.Add(Enumerable.Repeat("", filas).ToArray());
                }
            }

            modelo.Reservada = reservas;

            return modelo;
        }

        /// <summary>
        /// Método que genera la estructura para el cuadro CRD
        /// <param name="nombreEmpresa"> Nombre de la empresa</param>
        /// <param name="numeroRegistros"> Cantidad de registros</param>
        /// <param name="habilitadasCuadro1"> Lista de informacion habilitada para el cuadro 1</param>
        /// <param name="inicio"> Fecha de inicio</param>
        /// <param name="fin"> Fecha de fin</param>
        /// <param name="valores"> Array de valores</param>
        /// </summary>
        public IndFormatoExcel CuadroA1CCD(string nombreEmpresa, int numeroRegistros,
                                            List<IndRelacionEmpresaDTO> habilitadasCuadro1, string inicio,
                                            string fin, string[] valores)
        {
            IndFormatoExcel modelo = new IndFormatoExcel();

            //1era fila de la cabecera del CCD
            modelo.NestedHeader6 = new List<IndExcelHeader>();
            IndExcelHeader headerCCD1 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCCD1 + nombreEmpresa,
                Columnas = 4
            };
            modelo.NestedHeader6.Add(headerCCD1);

            //2da fila de la cabecera del CCD
            modelo.NestedHeader7 = new List<IndExcelHeader>();
            IndExcelHeader headerCCD2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCCD2,
                Columnas = 1
            };
            modelo.NestedHeader7.Add(headerCCD2);
            headerCCD2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCCD3,
                Columnas = 1
            };
            modelo.NestedHeader7.Add(headerCCD2);
            headerCCD2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCCD4,
                Columnas = 1
            };
            modelo.NestedHeader7.Add(headerCCD2);
            headerCCD2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaCCD5,
                Columnas = 1
            };
            modelo.NestedHeader7.Add(headerCCD2);

            //Contenido de las tablas
            int filas = 1 + numeroRegistros;
            List<string[]> contratos = new List<string[]>();
            string[] centrales = new string[filas];
            string[] unidades = new string[filas];
            string[] grupos = new string[filas];
            string[] familias = new string[filas];
            //centrales[0] = ""; unidades[0] = ""; familias[0] = "";
            int c = 0;
            foreach (var item in habilitadasCuadro1)
            {
                c++;
                centrales[c] = item.Equicodicentral.ToString();
                unidades[c] = item.Equicodiunidad.ToString();
                grupos[c] = item.Grupocodi.ToString();
                familias[c] = item.Famcodi.ToString();
            }
            contratos.Add(familias);
            contratos.Add(grupos);
            contratos.Add(unidades);
            contratos.Add(centrales);
            string[] filaDescripcion = new string[filas];
            filaDescripcion[0] = ConstantesIndisponibilidades.DescripcionCCD1;
            for (int i = 1; i < filas; i++)
            {
                string nombCentral = habilitadasCuadro1[i - 1].Equinombcentral;
                string nombUnidad = habilitadasCuadro1[i - 1].Equinombunidad;
                string nombEquipo = (nombCentral == nombUnidad) ? nombCentral
                                    : nombCentral + "[" + nombUnidad + "]";
                //Asigna los nombres centrales debajo de las constantes
                filaDescripcion[i] = ConstantesIndisponibilidades.DescripcionCDU2
                                    + nombEquipo;
            }
            contratos.Add(filaDescripcion);
            contratos.Add(valores);
            //Fecha de inicio
            string[] filaInicio = new string[filas];
            filaInicio[0] = inicio;
            contratos.Add(filaInicio);
            //Fecha de fin
            string[] filaFin = new string[filas];
            filaFin[0] = fin;
            contratos.Add(filaFin);

            modelo.Contratada = contratos;

            return modelo;
        }

        /// <summary>
        /// Método que genera la estructura para el cuadro CRD
        /// <param name="nombreEmpresa"> Nombre de la empresa</param>
        /// <param name="inicio"> Fecha de inicio de periodo</param>
        /// <param name="fin"> Fecha de fin del periodo</param>
        /// <param name="dias"> Dias del periodo</param>
        /// <param name="valores"> Datos que forman parte del contenido de la tabla del cuadro A2</param>
        /// </summary>
        public IndFormatoExcel CuadroA2CapacidadTransporte(string nombreEmpresa, DateTime inicio,
                                                            DateTime fin, int dias, List<string[]> valores)
        {
            IndFormatoExcel modelo = new IndFormatoExcel();

            //1era fila de la cabecera del CRD
            modelo.NestedHeader8 = new List<IndExcelHeader>();
            IndExcelHeader headerA2CTG1 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG1 + nombreEmpresa,
                Columnas = 2
            };
            modelo.NestedHeader8.Add(headerA2CTG1);
            headerA2CTG1 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG2 +
                            inicio.ToString(ConstantesIndisponibilidades.FormatoFecha) + " Y " +
                            fin.ToString(ConstantesIndisponibilidades.FormatoFecha),
                Columnas = 4
            };
            modelo.NestedHeader8.Add(headerA2CTG1);

            //2da fila de la cabecera del CCD
            modelo.NestedHeader9 = new List<IndExcelHeader>();
            IndExcelHeader headerA2CTG2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG3,
                Columnas = 2
            };
            modelo.NestedHeader9.Add(headerA2CTG2);
            headerA2CTG2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG4,
                Columnas = 1
            };
            modelo.NestedHeader9.Add(headerA2CTG2);
            headerA2CTG2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG5,
                Columnas = 1
            };
            modelo.NestedHeader9.Add(headerA2CTG2);
            headerA2CTG2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG6,
                Columnas = 1
            };
            modelo.NestedHeader9.Add(headerA2CTG2);
            headerA2CTG2 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG7,
                Columnas = 1
            };
            modelo.NestedHeader9.Add(headerA2CTG2);

            //3era fila de la cabecera del CCD
            modelo.NestedHeader10 = new List<IndExcelHeader>();
            IndExcelHeader headerA2CTG3 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG8,
                Columnas = 1
            };
            modelo.NestedHeader10.Add(headerA2CTG3);
            headerA2CTG3 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG9,
                Columnas = 1
            };
            modelo.NestedHeader10.Add(headerA2CTG3);
            headerA2CTG3 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG4,
                Columnas = 1
            };
            modelo.NestedHeader10.Add(headerA2CTG3);
            headerA2CTG3 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG5,
                Columnas = 1
            };
            modelo.NestedHeader10.Add(headerA2CTG3);
            headerA2CTG3 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG6,
                Columnas = 1
            };
            modelo.NestedHeader10.Add(headerA2CTG3);
            headerA2CTG3 = new IndExcelHeader()
            {
                Etiqueta = ConstantesIndisponibilidades.EtiquetaA2CTG7,
                Columnas = 1
            };
            modelo.NestedHeader10.Add(headerA2CTG3);
            modelo.Cuadro2CTG = valores;
            return modelo;
        }


        /// <summary>
        /// Arma la lista para validar los datos
        /// </summary>
        /// <param name="res">Objeto con los datos de todos los cuadros</param>
        /// <param name="idPeriodo">Objeto con los datos de todos los cuadros</param>
        /// <returns></returns>
        public List<IndValidacionFormato> ValidarDatos(object res, int idPeriodo)
        {
            IndPeriodoDTO periodo = FactorySic.GetIndPeriodoRepository().GetById(idPeriodo);
            DateTime lastDay = new DateTime(periodo.Iperianio, periodo.Iperimes, DateTime.DaysInMonth(periodo.Iperianio, periodo.Iperimes));
            DateTime firstDay = new DateTime(periodo.Iperianio, periodo.Iperimes, 1);
            DateTime dayCurrent = DateTime.ParseExact(DateTime.Now.ToString(ConstantesIndisponibilidades.FormatoFecha),
                                                          ConstantesIndisponibilidades.FormatoFecha,
                                                          CultureInfo.InvariantCulture);
            //Habilitar para funcionamiento normal
            dayCurrent = ((periodo.Iperianio >= dayCurrent.Year) && (periodo.Iperimes > dayCurrent.Month)) ? firstDay : dayCurrent;
            //Habilitar para reportar meses pasados
            //dayCurrent = firstDay;

            //Lista donde se alamcenan las validaciones
            List<IndValidacionFormato> lista = new List<IndValidacionFormato>();

            #region Cuadro CRD validacion de totales por dia
            List<object> crdLista = (List<object>)(res.GetType().GetProperty("dataCRD").GetValue(res, null));
            lista.AddRange(this.ValidarTotalCRD(crdLista));
            #endregion

            #region Cuadro CDU validacion de total
            string inicioCDU = (string)(res.GetType().GetProperty("fechasVigencia")
                                           .GetValue(res, null))
                                           .GetType().GetProperty("inicioCDU")
                                           .GetValue((res.GetType().GetProperty("fechasVigencia").GetValue(res, null)), null);
            DateTime fechaCDU = DateTime.ParseExact(inicioCDU,
                                                    ConstantesIndisponibilidades.FormatoFecha,
                                                    CultureInfo.InvariantCulture);
            fechaCDU = (fechaCDU > lastDay) ? dayCurrent : fechaCDU;
            List<object> cduLista = (List<object>)(res.GetType().GetProperty("dataCDU").GetValue(res, null));
            //object cduItem = cduLista.Find(x => x.GetType().GetProperty("label").GetValue(x, null).ToString()
            //                            == dayCurrent.ToString(ConstantesIndisponibilidades.FormatoFecha));
            object cduItem = cduLista.Find(x => x.GetType().GetProperty("label").GetValue(x, null).ToString()
                                        == fechaCDU.ToString(ConstantesIndisponibilidades.FormatoFecha));
            lista.AddRange(this.ValidarTotalCDUCCD(cduItem, ConstantesIndisponibilidades.NombreCDU));
            //Validando que no se suba espacios vacios
            lista.AddRange(this.ValidarEspacioVacio(cduItem, ConstantesIndisponibilidades.NombreCDU));
            #endregion

            #region Cuadro CCD calidacion de total
            string inicioCCD = (string)(res.GetType().GetProperty("fechasVigencia")
                               .GetValue(res, null))
                               .GetType().GetProperty("inicioCCD")
                               .GetValue((res.GetType().GetProperty("fechasVigencia").GetValue(res, null)), null);
            DateTime fechaCCD = DateTime.ParseExact(inicioCCD,
                                        ConstantesIndisponibilidades.FormatoFecha,
                                        CultureInfo.InvariantCulture);
            fechaCCD = (fechaCCD > lastDay) ? dayCurrent : fechaCCD;
            List<object> ccdLista = (List<object>)(res.GetType().GetProperty("dataCCD").GetValue(res, null));
            //object ccdItem = ccdLista.Find(x => x.GetType().GetProperty("label").GetValue(x, null).ToString()
            //                            == dayCurrent.ToString(ConstantesIndisponibilidades.FormatoFecha));
            object ccdItem = ccdLista.Find(x => x.GetType().GetProperty("label").GetValue(x, null).ToString()
                            == fechaCCD.ToString(ConstantesIndisponibilidades.FormatoFecha));
            lista.AddRange(this.ValidarTotalCDUCCD(cduItem, ConstantesIndisponibilidades.NombreCCD));
            //Validando que no se suba espacios vacios
            lista.AddRange(this.ValidarEspacioVacio(ccdItem, ConstantesIndisponibilidades.NombreCCD));
            #endregion

            #region Obteniendo lista A2
            List<object> a2Lista = (List<object>)(res.GetType().GetProperty("dataA2").GetValue(res, null));
            List<IndTransporteDetalleDTO> dataA2 = new List<IndTransporteDetalleDTO>();
            //Calculando la longitud de data de A2
            if (a2Lista.Count > 0)
            {
                string[] a2Descripcion = (string[])(a2Lista[0].GetType().GetProperty("data").GetValue(a2Lista[0], null));
                string[] a2Fechas = (string[])(a2Lista[1].GetType().GetProperty("data").GetValue(a2Lista[1], null));
                string[] a2Empresas = (string[])(a2Lista[2].GetType().GetProperty("data").GetValue(a2Lista[2], null));
                string[] a2Suministros = (string[])(a2Lista[3].GetType().GetProperty("data").GetValue(a2Lista[3], null));
                string[] a2Cantidad = (string[])(a2Lista[4].GetType().GetProperty("data").GetValue(a2Lista[4], null));
                string[] a2Precio = (string[])(a2Lista[5].GetType().GetProperty("data").GetValue(a2Lista[5], null));
                int longitudA2 = a2Descripcion.Length;
                for (int i = 0; i < longitudA2; i++)
                {
                    IndTransporteDetalleDTO entity = new IndTransporteDetalleDTO
                    {
                        Tnsdetdescripcion = a2Descripcion[i].ToString(),
                        Tnsdetfecha = DateTime.ParseExact(a2Fechas[i].ToString(),
                                                              ConstantesIndisponibilidades.FormatoFecha,
                                                              CultureInfo.InvariantCulture),
                        Emprnomb = a2Empresas[i].ToString(),
                        Tnsdetptosuministro = a2Suministros[i].ToString(),
                        Tnsdetcntadquirida = decimal.Parse(a2Cantidad[i].ToString()),
                        Tnsdetprctransferencia = decimal.Parse(a2Precio[i].ToString())
                    };
                    dataA2.Add(entity);
                }


                #region Cuadro CRD y A2 validacion para verificar que la capacidad vendida
                lista.AddRange(this.ValidarVentaCRDA2(crdLista, dataA2));
                #endregion

                #region Cuadro CRD y A2 validacion para verificar que la capacidad adquirida
                lista.AddRange(this.ValidarAdquiridaCRDA2(crdLista, dataA2));
                #endregion

                #region Cuadro A2 validacion para verificar la existencia de la empresa
                //List<SiEmpresaDTO> listaRelacionEmpresas = FactorySic.GetSiEmpresaRepository().ListGeneral();
                //int contador = 0;
                //foreach (var item in a2Empresas)
                //{
                //    string nomEmpresa = a2Descripcion[contador].Trim().ToLower();
                //    if (nomEmpresa == ConstantesIndisponibilidades.A2AdquiridaGenerador || 
                //        nomEmpresa == ConstantesIndisponibilidades.A2VentaGenerador) 
                //    {
                //        int emprcodi = listaRelacionEmpresas.Where(x => string.Equals(x.Emprnomb.Trim(), item.Trim()
                //                        , StringComparison.OrdinalIgnoreCase))
                //                        .Select(x => x.Emprcodi)
                //                        .FirstOrDefault();
                //        if (emprcodi == 0)
                //        {
                //            IndValidacionFormato entity = new IndValidacionFormato
                //            {
                //                Cuadro = "Cuadro A2",
                //                TipoCuadro = "-",
                //                Descripcion = "Error, la empresa " + item.Trim() + " no existe o no esta habilitada",
                //            };
                //            lista.Add(entity);
                //        }
                //    }
                //    contador++;
                //}
                #endregion
            }
            #endregion

            return lista;
        }

        /// <summary>
        /// Valida las adquisiciones ingresadas en el cuadro CRD y A2
        /// </summary>
        /// <param name="crd">Lista con los datos del cuadro crd</param>
        /// <param name="a2">Lista con los datos del cuadro A2</param>
        /// <returns></returns>
        public List<IndValidacionFormato> ValidarAdquiridaCRDA2(List<object> crd, List<IndTransporteDetalleDTO> a2)
        {
            //Lista que se devuelve con las validaciones
            List<IndValidacionFormato> lista = new List<IndValidacionFormato>();
            List<IndTransporteDetalleDTO> a2Adquiridas = a2.Where(x => string.Equals(x.Tnsdetdescripcion,
                                                                ConstantesIndisponibilidades.A2AdquiridaBase,
                                                                StringComparison.OrdinalIgnoreCase) ||
                                                                string.Equals(x.Tnsdetdescripcion,
                                                                ConstantesIndisponibilidades.A2AdquiridaGenerador,
                                                                StringComparison.OrdinalIgnoreCase))
                                                            .ToList();

            for (int i = 5; i < crd.Count; i++)
            {
                string fecha = crd[i].GetType().GetProperty("label").GetValue(crd[i], null).ToString();
                DateTime regFecha = DateTime.ParseExact(fecha,
                                                          ConstantesIndisponibilidades.FormatoFecha,
                                                          CultureInfo.InvariantCulture);
                string[] crdItem = (string[])(crd[i].GetType().GetProperty("data").GetValue(crd[i], null));
                string crdValue = crdItem[1].ToString();
                decimal crdAdquirida = (string.IsNullOrEmpty(crdValue)) ? 0 : decimal.Parse(crdValue);
                //decimal crdAdquirida = decimal.Parse(crdItem[1].ToString());// la posicion 1 siempre sera el adquirido
                decimal a2Adquirida = 0;
                foreach (var item in a2Adquiridas.Where(x => x.Tnsdetfecha == regFecha))
                {
                    a2Adquirida += item.Tnsdetcntadquirida;
                }
                bool diferentes = (Math.Abs(a2Adquirida - crdAdquirida) > ConstantesIndisponibilidades.DiferenciaPermitida) ? true : false;
                if (diferentes)
                {
                    //Para el cuadro CRD
                    IndValidacionFormato entity = new IndValidacionFormato
                    {
                        Cuadro = "Cuadro A1",
                        TipoCuadro = "Cuadro " + "CRD",
                        Descripcion = "Error, el valor adquirido en el cuadro CRD no es igual " +
                                      "a las partes adquiridas en el cuadro A2 para la fecha " + fecha,
                    };
                    lista.Add(entity);
                    //Para el cuadro A2
                    entity = new IndValidacionFormato
                    {
                        Cuadro = "Cuadro A2",
                        TipoCuadro = "-",
                        Descripcion = "Error, la suma de las partes adquiridas en el cuadro A2 no es igual " +
                                      "al valor adquirido en el cuadro CRD para la fecha " + fecha,
                    };
                    lista.Add(entity);
                }
            }

            return lista;
        }

        /// <summary>
        /// Valida las ventas ingresadas en el cuadro CRD y A2
        /// </summary>
        /// <param name="crd">Lista con los datos del cuadro crd</param>
        /// <param name="a2">Lista con los datos del cuadro A2</param>
        /// <returns></returns>
        public List<IndValidacionFormato> ValidarVentaCRDA2(List<object> crd, List<IndTransporteDetalleDTO> a2)
        {
            //Lista que se devuelve con las validaciones
            List<IndValidacionFormato> lista = new List<IndValidacionFormato>();
            List<IndTransporteDetalleDTO> a2Ventas = a2.Where(x => string.Equals(x.Tnsdetdescripcion,
                                                                ConstantesIndisponibilidades.A2VentaBase,
                                                                StringComparison.OrdinalIgnoreCase) ||
                                                                string.Equals(x.Tnsdetdescripcion,
                                                                ConstantesIndisponibilidades.A2VentaGenerador,
                                                                StringComparison.OrdinalIgnoreCase)).ToList();

            for (int i = 5; i < crd.Count; i++)
            {
                string fecha = crd[i].GetType().GetProperty("label").GetValue(crd[i], null).ToString();
                DateTime regFecha = DateTime.ParseExact(fecha,
                                                          ConstantesIndisponibilidades.FormatoFecha,
                                                          CultureInfo.InvariantCulture);
                string[] crdItem = (string[])(crd[i].GetType().GetProperty("data").GetValue(crd[i], null));
                string crdValue = crdItem[2].ToString();
                decimal crdVendida = (string.IsNullOrEmpty(crdValue)) ? 0 : decimal.Parse(crdValue);// la posicion 2 siempre sera el vendido
                decimal a2Vendida = 0;
                foreach (var item in a2Ventas.Where(x => x.Tnsdetfecha == regFecha))
                {
                    a2Vendida += item.Tnsdetcntadquirida;
                }
                bool diferentes = (a2Vendida != crdVendida) ? true : false;
                if (diferentes)
                {
                    //Para el cuadro CRD
                    IndValidacionFormato entity = new IndValidacionFormato
                    {
                        Cuadro = "Cuadro A1",
                        TipoCuadro = "Cuadro " + "CRD",
                        Descripcion = "Error, el valor vendido en el cuadro CRD no es igual " +
                                      "a las partes vendidas en el cuadro A2 para la fecha " + fecha,
                    };
                    lista.Add(entity);
                    //Para el cuadro A2
                    entity = new IndValidacionFormato
                    {
                        Cuadro = "Cuadro A2",
                        TipoCuadro = "-",
                        Descripcion = "Error, la suma de las partes vendidas en el cuadro A2 no es igual " +
                                      "al valor vendido en el cuadro CRD para la fecha " + fecha,
                    };
                    lista.Add(entity);
                }
            }

            return lista;
        }


        /// <summary>
        /// Valida los totales de CDU o CCD
        /// </summary>
        /// <param name="obj">Objeto con los datos del cuadro A1 - cdu o ccd</param>
        /// <param name="tipo">Indica el tipo CDU o CCD</param>
        /// <returns></returns>
        public List<IndValidacionFormato> ValidarEspacioVacio(object obj, string tipo)
        {
            //Lista que se devuelve con las validaciones
            //decimal number;
            List<IndValidacionFormato> lista = new List<IndValidacionFormato>();
            string[] array = (string[])(obj.GetType().GetProperty("data").GetValue(obj, null));
            for (int i = 1; i < array.Length; i++)
            {
                decimal number = 0;
                string cadena = array[i].ToString();
                int largo = cadena.Length;
                if (string.IsNullOrEmpty(cadena) && cadena.Length == 0) { }
                else
                {
                    if (decimal.TryParse(cadena, out number))
                    {

                    }
                    else
                    {
                        IndValidacionFormato entity = new IndValidacionFormato
                        {
                            Cuadro = "Cuadro A1",
                            TipoCuadro = "Cuadro " + tipo,
                            Descripcion = "Error, se estan ingresando datos vacios",
                        };
                        lista.Add(entity);
                    }
                }
            }

            return lista;
        }


        /// <summary>
        /// Valida los totales de CDU o CCD
        /// </summary>
        /// <param name="obj">Objeto con los datos del cuadro A1 - cdu o ccd</param>
        /// <param name="tipo">Indica el tipo CDU o CCD</param>
        /// <returns></returns>
        public List<IndValidacionFormato> ValidarTotalCDUCCD(object obj, string tipo)
        {
            //Lista que se devuelve con las validaciones
            List<IndValidacionFormato> lista = new List<IndValidacionFormato>();
            string[] array = (string[])(obj.GetType().GetProperty("data").GetValue(obj, null));
            if (!string.IsNullOrEmpty(array[0].ToString()))
            {
                decimal total = decimal.Parse(array[0].ToString());
                decimal centrales = 0;
                for (int i = 1; i < array.Length; i++)
                {
                    if (!string.IsNullOrEmpty(array[i].ToString()))
                    {
                        centrales += decimal.Parse(array[i].ToString());
                    }
                    //centrales += decimal.Parse(array[i].ToString());
                }
                bool diferentes = (total != centrales) ? true : false;
                if (diferentes)
                {
                    IndValidacionFormato entity = new IndValidacionFormato
                    {
                        Cuadro = "Cuadro A1",
                        TipoCuadro = "Cuadro " + tipo,
                        Descripcion = "Error, el total no es igual a la suma de las centrales",
                    };
                    lista.Add(entity);
                }
            }
            else
            {
                for (int i = 1; i < array.Length; i++)
                {
                    if (!string.IsNullOrEmpty(array[i].ToString()))
                    {
                        IndValidacionFormato entity = new IndValidacionFormato
                        {
                            Cuadro = "Cuadro A1",
                            TipoCuadro = "Cuadro " + tipo,
                            Descripcion = "Error, no se ingreso el total",
                        };
                        lista.Add(entity);
                        break;
                    }
                }
            }
            return lista;
        }

        /// <summary>
        /// Valida los totales de CRD
        /// </summary>
        /// <param name="obj">Objeto con los datos del cuadro A1 - crd</param>
        /// <returns></returns>
        public List<IndValidacionFormato> ValidarTotalCRD(List<object> obj)
        {
            //Lista que se devuelve con las validaciones
            List<IndValidacionFormato> lista = new List<IndValidacionFormato>();
            for (int i = 5; i < obj.Count; i++)
            {
                string fecha = obj[i].GetType().GetProperty("label").GetValue(obj[i], null).ToString();
                string[] crdItem = (string[])(obj[i].GetType().GetProperty("data").GetValue(obj[i], null));
                decimal sumConceptos = 0;
                decimal sumCentrales = 0;
                //Valdacion, 
                //Si error lo agrego a la lista, sino sigo
                decimal total = 0;
                //int flag = 0;
                //string errorConcepto = "";
                //string errorCentral = "";
                if (!string.IsNullOrEmpty(crdItem[3].ToString()))
                {
                    if (decimal.TryParse(crdItem[3].ToString(), out total))
                    {
                        for (int j = 0; j < crdItem.Length; j++)
                        {
                            decimal value = 0;
                            if (j < 2)//Para las 02 Primera posiciones concepto 1 y 2
                            {
                                //Validacion Si error lo agrego a la lista, sino continue                     
                                if (decimal.TryParse(crdItem[j].ToString(), out value))
                                {
                                    sumConceptos += decimal.Parse(crdItem[j].ToString());//sumando contratada +adquirida
                                }
                            }
                            if (j == 2)//Para el concepto 2
                            {
                                //Validacion Si error lo agrego a la lista, sino continue                     
                                if (decimal.TryParse(crdItem[j].ToString(), out value))
                                {
                                    sumConceptos -= decimal.Parse(crdItem[j].ToString());//restando vendida
                                }
                            }
                            if (j > 3)
                            {
                                //Validacion Si error lo agrego a la lista, sino continue                     
                                if (decimal.TryParse(crdItem[j].ToString(), out value))
                                {
                                    sumCentrales += decimal.Parse(crdItem[j].ToString());//sumando centrales
                                }
                            }
                        }

                        //Preguntamos si las sumas son diferentes del total
                        bool sumDiferentes = (Math.Abs(sumConceptos - total) < ConstantesIndisponibilidades.DiferenciaPermitida &&
                                              Math.Abs(sumCentrales - total) < ConstantesIndisponibilidades.DiferenciaPermitida) ?
                                              false : true;
                        if (sumDiferentes)
                        {
                            IndValidacionFormato entity = new IndValidacionFormato
                            {
                                Cuadro = "Cuadro A1",
                                TipoCuadro = "Cuadro " + ConstantesIndisponibilidades.NombreCRD,
                                Descripcion = "Error en la sumatoria en la capacidad total disponible para la fecha " + fecha,
                            };
                            lista.Add(entity);
                        }
                    }
                    else
                    {
                        IndValidacionFormato entity = new IndValidacionFormato
                        {
                            Cuadro = "Cuadro A1",
                            TipoCuadro = "Cuadro " + ConstantesIndisponibilidades.NombreCRD,
                            Descripcion = "Error en el formato de capacidad total disponible para la fecha " + fecha,
                        };
                        lista.Add(entity);
                    }
                }
            }

            return lista;
        }

        // <summary>
        /// Procesa el archivo excel importado
        /// </summary>
        /// <param name="empresa">Identificador de la empresa</param>
        /// <param name="rutaArchivo">Dirección del archivo importado</param>
        /// <param name="ipericodi">Periodo para el que se desea importar el archivo excel</param>
        /// <returns></returns>
        public object ImportarExcelPR25(int empresa, string rutaArchivo, int ipericodi)
        {
            FileInfo fileInfo = new FileInfo(rutaArchivo);
            ExcelPackage package = new ExcelPackage(fileInfo);

            //Preguntar si la empresa esta habilitada para importar
            //el cuadro A1 y A2
            List<IndRelacionEmpresaDTO> listaRelacionEmpresas = this.ListIndRelacionEmpresaByIdEmpresa(empresa);
            bool habilitadaCuadro1 = (listaRelacionEmpresas.Where(x => x.Relempcuadro1 == "S")
                                        .ToList().Count() > 0) ? true : false;
            bool habilitadaCuadro2 = (listaRelacionEmpresas.Where(x => x.Relempcuadro2 == "S")
                                        .ToList().Count() > 0) ? true : false;

            //Objetos a llenar con la data de los cuadros
            List<object> dataCDU = new List<object>();
            List<object> dataCRD = new List<object>();
            List<object> dataCCD = new List<object>();
            List<object> dataA2 = new List<object>();
            List<object> oldCRD = new List<object>();
            List<object> valPlazo = new List<object>();
            int flag = 1;// 0;//indica si es el excel correcto
            object fechasVigencia;
            string inicioVigenciaCDU = "", finVigenciaCDU = "", inicioVigenciaCCD = "", finVigenciaCCD = "";
            //////////////////////////////////////////////

            if (habilitadaCuadro1)
            {
                //Cuadro A1 del archivo excel importado
                ExcelWorksheet wsCuadroA1 = package.Workbook.Worksheets[1];

                #region Datos Generales
                int idEmpresa = int.Parse(wsCuadroA1.Cells[6, 4].Value.ToString());
                string nomEmpresa = wsCuadroA1.Cells[6, 6].Value.ToString();
                int idPeriodo = int.Parse(wsCuadroA1.Cells[7, 4].Value.ToString());
                int dias = int.Parse(wsCuadroA1.Cells[8, 6].Value.ToString());
                string[] centrales = wsCuadroA1.Cells[9, 4].Value.ToString().Split(',');
                string[] unidades = wsCuadroA1.Cells[10, 4].Value.ToString().Split(',');
                string[] grupos = wsCuadroA1.Cells[11, 4].Value.ToString().Split(',');
                string[] familias = wsCuadroA1.Cells[12, 4].Value.ToString().Split(',');
                List<string> headersCDU = this.ObtenerDiasxPeriodo(idPeriodo);
                IndPeriodoDTO periodo = FactorySic.GetIndPeriodoRepository().GetById(idPeriodo);
                DateTime firstDay = new DateTime(periodo.Iperianio, periodo.Iperimes, 1);
                DateTime lastDay = new DateTime(periodo.Iperianio, periodo.Iperimes, DateTime.DaysInMonth(periodo.Iperianio, periodo.Iperimes));
                DateTime dayCurrent = DateTime.ParseExact(DateTime.Now.ToString(ConstantesIndisponibilidades.FormatoFecha),
                                                              ConstantesIndisponibilidades.FormatoFecha,
                                                              CultureInfo.InvariantCulture);
                //Habilitar para funcionamiento normal
                dayCurrent = ((periodo.Iperianio >= dayCurrent.Year) && (periodo.Iperimes > dayCurrent.Month)) ? firstDay : dayCurrent;
                //Habilitar para reportar meses pasados
                //dayCurrent = firstDay;
                List<IndCabeceraDTO> cabecera = this.ListCabecera(idEmpresa, idPeriodo);

                //Validando Cuadro
                List<IndRelacionEmpresaDTO> listaEmpresas = listaRelacionEmpresas.Where(x => x.Relempcuadro1 == "S").ToList();
                //Centrales
                string[] centralCodigo = listaEmpresas.Select(x => x.Equicodicentral.ToString()).ToArray();
                ////Unidades
                string[] unidadCodigo = listaEmpresas.Select(x => x.Equicodiunidad.ToString()).ToArray();
                ////Grupos
                string[] grupoCodigo = listaEmpresas.Select(x => x.Grupocodi.ToString()).ToArray();
                ////Familias
                string[] familiaCodigo = listaEmpresas.Select(x => x.Famcodi.ToString()).ToArray();

                if (idEmpresa == empresa && idPeriodo == ipericodi && centrales.SequenceEqual(centralCodigo)
                    && unidades.SequenceEqual(unidadCodigo) && grupos.SequenceEqual(grupoCodigo)
                    && familias.SequenceEqual(familiaCodigo))
                {
                    flag = 0;
                }
                else
                {
                    fechasVigencia = new
                    {
                        inicioCDU = inicioVigenciaCDU,
                        finCDU = finVigenciaCDU,
                        inicioCCD = inicioVigenciaCCD,
                        finCCD = finVigenciaCCD
                    };
                    return new { dataCDU, dataCRD, dataCCD, dataA2, fechasVigencia, valPlazo, flag };
                }
                #endregion

                #region Cuadro CDU
                int inicioCDU = 17;
                int registrosCDU = 1 + centrales.Count();

                //Validando la fecha
                int esNumeroCDU = 0;
                if (int.TryParse(wsCuadroA1.Cells[inicioCDU, 8].Value.ToString(), out esNumeroCDU))
                {
                    inicioVigenciaCDU = DateTime.FromOADate(esNumeroCDU).ToString(ConstantesIndisponibilidades.FormatoFecha);
                }
                else
                {
                    inicioVigenciaCDU = wsCuadroA1.Cells[inicioCDU, 8].Value.ToString();
                }

                if (int.TryParse(wsCuadroA1.Cells[inicioCDU, 9].Value.ToString(), out esNumeroCDU))
                {
                    finVigenciaCDU = DateTime.FromOADate(esNumeroCDU).ToString(ConstantesIndisponibilidades.FormatoFecha);
                }
                else
                {
                    finVigenciaCDU = wsCuadroA1.Cells[inicioCDU, 9].Value.ToString();
                }
                //inicioVigenciaCDU = wsCuadroA1.Cells[inicioCDU, 8].Value.ToString();
                //finVigenciaCDU = wsCuadroA1.Cells[inicioCDU, 9].Value.ToString();
                //Validando la fecha

                //Armar lista de headers, se agrega
                headersCDU.Insert(0, "");//ConstantesIndisponibilidades.EtiquetaCDU2
                headersCDU.Insert(0, "");//cabecera con los equicodicentral
                headersCDU.Insert(0, "");//cabecera con los equicodiunidad 
                headersCDU.Insert(0, "");//cabecera con los grupocodi 
                headersCDU.Insert(0, "");//cabecera con los famcodi
                //Lista de subHeaders
                List<string> sHeadersCDU = new List<string>();
                for (int i = 0; i < dias; i++)
                {
                    sHeadersCDU.Add(ConstantesIndisponibilidades.EtiquetaCDU3);
                }
                sHeadersCDU.Insert(0, ConstantesIndisponibilidades.EtiquetaCDU2);
                sHeadersCDU.Insert(0, "");//cabecera con los equicodicentral
                sHeadersCDU.Insert(0, "");//cabecera con los equicodiunidad
                sHeadersCDU.Insert(0, "");//cabecera con los grupocodi
                sHeadersCDU.Insert(0, "");//cabecera con los famcodi

                //Preguntado si hay info ya registrada para esa empresa en ese periodo
                IndCabeceraDTO cduCabecera = cabecera.Where(x =>
                                                x.Indcbrtipo == ConstantesIndisponibilidades.TipoCDU)
                                                .FirstOrDefault();
                List<IndCapacidadDiaDTO> cduCapacidadDia = (cduCabecera == null) ? new List<IndCapacidadDiaDTO>()
                                                                        : this.ListCapacidadDiaJoinCabecera(cduCabecera.Indcbrcodi);
                DateTime dayCurrentCDU = DateTime.ParseExact(inicioVigenciaCDU,
                                                              ConstantesIndisponibilidades.FormatoFecha,
                                                              CultureInfo.InvariantCulture);
                dayCurrentCDU = (dayCurrentCDU > lastDay) ? dayCurrent : dayCurrentCDU;
                object entityCDU;
                for (int a = 2; a < dias + 7; a++)
                {
                    string[] datosCDU = new string[registrosCDU];
                    for (int b = inicioCDU; b < inicioCDU + registrosCDU; b++)
                    {
                        if (a > 6)//Empiezan los header con fecha
                        {
                            DateTime dt = DateTime.ParseExact(headersCDU[a - 2],
                                                              ConstantesIndisponibilidades.FormatoFecha,
                                                              CultureInfo.InvariantCulture);
                            if (dt >= dayCurrentCDU)//dayCurrent
                            {
                                var d = wsCuadroA1.Cells[b, 7].Value;
                                string val = (d == null) ? "" : wsCuadroA1.Cells[b, 7].Value.ToString();
                                datosCDU[b - inicioCDU] = val;
                            }
                            else
                            {
                                int central = (wsCuadroA1.Cells[b, 5].Value == null) ? 0 : int.Parse(wsCuadroA1.Cells[b, 5].Value.ToString());
                                int unidad = (wsCuadroA1.Cells[b, 4].Value == null) ? 0 : int.Parse(wsCuadroA1.Cells[b, 4].Value.ToString());
                                int grupo = (wsCuadroA1.Cells[b, 3].Value == null) ? 0 : int.Parse(wsCuadroA1.Cells[b, 3].Value.ToString());
                                int familia = (wsCuadroA1.Cells[b, 2].Value == null) ? 0 : int.Parse(wsCuadroA1.Cells[b, 2].Value.ToString());
                                IndCapacidadDiaDTO ind = cduCapacidadDia.Where(x => x.Equicodicentral == central
                                                                                 && x.Equicodiunidad == unidad
                                                                                 && x.Grupocodi == grupo
                                                                                 && x.Famcodi == familia
                                                                                 && x.Cpcdiafecha == dt)
                                                                        .FirstOrDefault();
                                datosCDU[b - inicioCDU] = (ind == null) ? "" : ind.Cpcdiavalor.ToString();
                            }
                        }
                        else
                        {
                            if (wsCuadroA1.Cells[b, a].Value == null)
                            {
                                datosCDU[b - inicioCDU] = "";
                            }
                            else
                            {
                                datosCDU[b - inicioCDU] = wsCuadroA1.Cells[b, a].Value.ToString();
                            }
                        }
                    }
                    entityCDU = new
                    {
                        id = "cdu" + a,
                        label = headersCDU[a - 2],
                        label2 = sHeadersCDU[a - 2],
                        data = datosCDU,
                        htrender = "normal",
                        hcrender = "no"
                    };
                    dataCDU.Add(entityCDU);
                }

                #endregion

                #region Cuadro CRD
                //inicio del cuadro
                int inicioCRD = inicioCDU + registrosCDU + 7;//se pone 7 por los 3espacios de su cabecera mas 4espacios entre tablas
                int registrosCRD = 4 + centrales.Count();
                object entityCRD;
                for (int a = 2; a < dias + 7; a++)
                {
                    string[] datosCRD = new string[registrosCRD];
                    for (int b = inicioCRD; b < inicioCRD + registrosCRD; b++)
                    {
                        if (wsCuadroA1.Cells[b, a].Value == null)
                        {
                            datosCRD[b - inicioCRD] = "";
                        }
                        else
                        {
                            if (a > 6)
                            {
                                string val = wsCuadroA1.Cells[b, a].Value.ToString();
                                datosCRD[b - inicioCRD] = val;
                            }
                            else
                            {
                                datosCRD[b - inicioCRD] = wsCuadroA1.Cells[b, a].Value.ToString();
                            }
                        }
                    };
                    string h1 = "";
                    string h2 = "";
                    if (wsCuadroA1.Cells[inicioCRD - 2, a].Value != null)
                    {
                        h2 = wsCuadroA1.Cells[inicioCRD - 1, a].Value.ToString();
                        h1 = wsCuadroA1.Cells[inicioCRD - 2, a].Value.ToString();
                    }

                    entityCRD = new
                    {
                        id = "crd" + a,
                        label = (h1 == h2) ? "" : h1,
                        label2 = h2,
                        data = datosCRD,
                        htrender = "normal",
                        hcrender = "no"
                    };
                    dataCRD.Add(entityCRD);
                }

                List<IndCrdSugadDTO> crdLista = this.ListCrdSugadJoinCabecera(empresa, ipericodi, ConstantesIndisponibilidades.TipoCRD)
                                                .Where(x => x.Crdsgdtipo == ConstantesIndisponibilidades.Central)
                                                .ToList();
                //Comparando listas
                List<object> nRegistros = new List<object>();
                nRegistros.AddRange(dataCRD);
                nRegistros.RemoveRange(0, 5);
                if (crdLista.Count != 0)
                {
                    object entityOCRD;
                    List<IndCrdSugadDTO> oRegistros = new List<IndCrdSugadDTO>();
                    for (int i = 0; i < centrales.Length; i++)
                    {
                        IndCrdSugadDTO entity = crdLista.Where(x => x.Equicodicentral == int.Parse(centrales[i])
                                                                 && x.Equicodiunidad == int.Parse(unidades[i])
                                                                 && x.Grupocodi == int.Parse(grupos[i])
                                                                 && x.Famcodi == int.Parse(familias[i]))
                                                        .FirstOrDefault();
                        oRegistros.Add(entity);
                    }
                    for (int i = 0; i < dias; i++)
                    {
                        string[] columna = new string[oRegistros.Count];
                        int c = 0;
                        foreach (var item in oRegistros)
                        {
                            var d = item.GetType().GetProperty(String.Concat("D", (i + 1).ToString()))
                                                  .GetValue(item, null);
                            string valueDia = (d == null) ? "" : d.ToString();
                            columna[c] = valueDia;
                            c++;
                        }
                        entityOCRD = new
                        {
                            id = "ocrd" + i,
                            label = "",
                            label2 = "",
                            data = columna,
                            htrender = "normal",
                            hcrender = "no"
                        };
                        oldCRD.Add(entityOCRD);
                    }
                    for (int i = 0; i < dias; i++)
                    {
                        string[] excelDatos = (string[])(nRegistros[i].GetType().GetProperty("data").GetValue(nRegistros[i], null));
                        string[] bdDatos = (string[])(oldCRD[i].GetType().GetProperty("data").GetValue(oldCRD[i], null));
                        string fecha = nRegistros[i].GetType().GetProperty("label").GetValue(nRegistros[i], null).ToString();
                        DateTime vFecha = DateTime.ParseExact(fecha, ConstantesIndisponibilidades.FormatoFecha,
                                                                  CultureInfo.InvariantCulture);
                        string[] enPlazo = new string[oRegistros.Count];
                        for (int j = 0; j < bdDatos.Count(); j++)
                        {
                            string vBD = (string.IsNullOrEmpty(bdDatos[j])) ? "" : bdDatos[j];
                            string vExcel = (string.IsNullOrEmpty(excelDatos[j + 4])) ? "" : excelDatos[j + 4];
                            if (dayCurrent <= vFecha)
                            {
                                enPlazo[j] = "S";
                            }
                            else
                            {
                                enPlazo[j] = (vBD == vExcel) ? "S" : "N";
                            }
                        }
                        object datosPlazo;
                        datosPlazo = new
                        {
                            id = "plz" + i,
                            label = "",
                            label2 = "",
                            data = enPlazo,
                            htrender = "normal",
                            hcrender = "no"
                        };
                        valPlazo.Add(datosPlazo);
                    }
                }
                else
                {
                    for (int i = 0; i < dias; i++)
                    {
                        string[] enPlazo = new string[centrales.Count()];
                        string fecha = nRegistros[i].GetType().GetProperty("label").GetValue(nRegistros[i], null).ToString();
                        DateTime vFecha = DateTime.ParseExact(fecha, ConstantesIndisponibilidades.FormatoFecha,
                                                                  CultureInfo.InvariantCulture);
                        for (int j = 0; j < centrales.Count(); j++)
                        {
                            if (dayCurrent <= vFecha)
                            {
                                enPlazo[j] = "S";
                            }
                            else
                            {
                                enPlazo[j] = "N";
                            }
                        }
                        object datosPlazo;
                        datosPlazo = new
                        {
                            id = "plz" + i,
                            label = "",
                            label2 = "",
                            data = enPlazo,
                            htrender = "normal",
                            hcrender = "no"
                        };
                        valPlazo.Add(datosPlazo);
                    }
                }

                #endregion

                #region Cuadro CCD
                //inicio del cuadro
                List<string> headersCCD = this.ObtenerDiasxPeriodo(idPeriodo);
                int inicioCCD = inicioCRD + registrosCRD + 6;//se pone 6 por los 2espacios de su cabecera mas 4espacios entre tablas
                int registrosCCD = 1 + centrales.Count();
                //Validando Fecha
                int esNumeroCCD = 0;
                if (int.TryParse(wsCuadroA1.Cells[inicioCCD, 8].Value.ToString(), out esNumeroCCD))
                {
                    inicioVigenciaCCD = DateTime.FromOADate(esNumeroCCD).ToString(ConstantesIndisponibilidades.FormatoFecha);
                }
                else
                {
                    inicioVigenciaCCD = wsCuadroA1.Cells[inicioCCD, 8].Value.ToString();
                }

                if (int.TryParse(wsCuadroA1.Cells[inicioCCD, 9].Value.ToString(), out esNumeroCCD))
                {
                    finVigenciaCCD = DateTime.FromOADate(esNumeroCCD).ToString(ConstantesIndisponibilidades.FormatoFecha);
                }
                else
                {
                    finVigenciaCCD = wsCuadroA1.Cells[inicioCCD, 9].Value.ToString();
                }

                //Armar lista de headers, se agrega
                headersCCD.Insert(0, "");//ConstantesIndisponibilidades.EtiquetaCCD2
                headersCCD.Insert(0, "");//cabecera con los equicodicentral
                headersCCD.Insert(0, "");//cabecera con los equicodiunidad
                headersCCD.Insert(0, "");//cabecera con los grupocodi 
                headersCCD.Insert(0, "");//cabecera con los famcodi
                //Lista de subHeaders
                List<string> sHeadersCCD = new List<string>();
                for (int i = 0; i < dias; i++)
                {
                    sHeadersCCD.Add(ConstantesIndisponibilidades.EtiquetaCCD3);
                }
                sHeadersCCD.Insert(0, ConstantesIndisponibilidades.EtiquetaCCD2);
                sHeadersCCD.Insert(0, "");//cabecera con los equicodicentral
                sHeadersCCD.Insert(0, "");//cabecera con los equicodiunidad
                sHeadersCCD.Insert(0, "");//cabecera con los grupocodi 
                sHeadersCCD.Insert(0, "");//cabecera con los famcodi

                //Preguntado si hay info ya registrada para esa empresa en ese periodo
                IndCabeceraDTO ccdCabecera = cabecera.Where(x =>
                                                x.Indcbrtipo == ConstantesIndisponibilidades.TipoCCD)
                                                .FirstOrDefault();
                List<IndCapacidadDiaDTO> ccdCapacidadDia = (ccdCabecera == null) ? new List<IndCapacidadDiaDTO>()
                                                                        : this.ListCapacidadDiaJoinCabecera(ccdCabecera.Indcbrcodi);
                DateTime dayCurrentCCD = DateTime.ParseExact(inicioVigenciaCCD,
                                              ConstantesIndisponibilidades.FormatoFecha,
                                              CultureInfo.InvariantCulture);
                dayCurrentCCD = (dayCurrentCCD > lastDay) ? dayCurrent : dayCurrentCCD;
                object entityCCD;
                for (int a = 2; a < dias + 7; a++)
                {
                    string[] datosCCD = new string[registrosCCD];
                    for (int b = inicioCCD; b < inicioCCD + registrosCCD; b++)
                    {
                        if (a > 6)
                        {
                            DateTime dt = DateTime.ParseExact(headersCCD[a - 2],
                                      ConstantesIndisponibilidades.FormatoFecha,
                                      CultureInfo.InvariantCulture);
                            if (dt >= dayCurrentCCD)//dayCurrent
                            {
                                var d = wsCuadroA1.Cells[b, 7].Value;
                                string val = (d == null) ? "" : wsCuadroA1.Cells[b, 7].Value.ToString();
                                datosCCD[b - inicioCCD] = val;
                            }
                            else
                            {
                                int central = (wsCuadroA1.Cells[b, 5].Value == null) ? 0 : int.Parse(wsCuadroA1.Cells[b, 5].Value.ToString());
                                int unidad = (wsCuadroA1.Cells[b, 4].Value == null) ? 0 : int.Parse(wsCuadroA1.Cells[b, 4].Value.ToString());
                                int grupo = (wsCuadroA1.Cells[b, 3].Value == null) ? 0 : int.Parse(wsCuadroA1.Cells[b, 3].Value.ToString());
                                int familia = (wsCuadroA1.Cells[b, 2].Value == null) ? 0 : int.Parse(wsCuadroA1.Cells[b, 2].Value.ToString());
                                IndCapacidadDiaDTO ind = ccdCapacidadDia.Where(x => x.Equicodicentral == central
                                                                                 && x.Equicodiunidad == unidad
                                                                                 && x.Grupocodi == grupo
                                                                                 && x.Famcodi == familia
                                                                                 && x.Cpcdiafecha == dt)
                                                                        .FirstOrDefault();
                                datosCCD[b - inicioCCD] = (ind == null) ? "" : ind.Cpcdiavalor.ToString();
                            }
                        }
                        else
                        {
                            if (wsCuadroA1.Cells[b, a].Value == null)
                            {
                                datosCCD[b - inicioCCD] = "";
                            }
                            else
                            {
                                datosCCD[b - inicioCCD] = wsCuadroA1.Cells[b, a].Value.ToString();
                            }
                        }
                    }
                    entityCCD = new
                    {
                        id = "ccd" + a,
                        label = headersCCD[a - 2],
                        label2 = sHeadersCCD[a - 2],
                        data = datosCCD,
                        htrender = "normal",
                        hcrender = "no"
                    };
                    dataCCD.Add(entityCCD);
                }
                #endregion
            }

            if (habilitadaCuadro2)
            {
                //Cuadro A2 del archivo excel importado
                ExcelWorksheet wsCuadroA2 = package.Workbook.Worksheets[2];

                #region Cuadro A2
                int f = 0;
                while (wsCuadroA2.Cells[f + 9, 3].Value != null)
                {
                    f++;
                }

                if (f > 0)
                {
                    int registrosA2 = f;//numero de filas llenadas
                    object entityA2;
                    for (int a = 3; a < 9; a++)
                    {
                        string[] datosA2 = new string[registrosA2];
                        for (int b = 9; b < registrosA2 + 9; b++)
                        {
                            string val = wsCuadroA2.Cells[b, a].Value.ToString();
                            //datosA2[b - 9] = (a == 4) ? DateTime.FromOADate(int.Parse(val)).ToString(ConstantesIndisponibilidades.FormatoFecha) 
                            //                            : val;
                            if (a == 4)
                            {
                                int esNumero = 0;
                                if (int.TryParse(val, out esNumero))
                                {
                                    datosA2[b - 9] = DateTime.FromOADate(esNumero)
                                                                .ToString(ConstantesIndisponibilidades.FormatoFecha);
                                }
                                else
                                {
                                    datosA2[b - 9] = val;
                                }
                            }
                            else
                            {
                                datosA2[b - 9] = val;
                            }
                        };
                        entityA2 = new
                        {
                            id = "a2" + a,
                            label = "",
                            label2 = "",
                            data = datosA2,
                            htrender = "normal",
                            hcrender = "no"
                        };
                        dataA2.Add(entityA2);
                    }
                }
                #endregion
            }

            #region Modelo para las fechas de vigencia
            fechasVigencia = new
            {
                inicioCDU = inicioVigenciaCDU,
                finCDU = finVigenciaCDU,
                inicioCCD = inicioVigenciaCCD,
                finCCD = finVigenciaCCD
            };
            #endregion
            //flag = (dataA2.Count == 0) ? 2 : 0;
            return new { dataCDU, dataCRD, dataCCD, dataA2, fechasVigencia, valPlazo, flag };
        }

        // <summary>
        /// Procesa el archivo excel importado
        /// </summary>
        /// <param name="htCRD">juego de datos de CRD</param>
        /// <param name="idEmpresa">Dirección del archivo importado</param>
        /// <param name="idPeriodo">Periodo para el que se desea importar el archivo excel</param>
        /// <param name="enPlazo">Periodo para el que se desea importar el archivo excel</param>
        /// <returns></returns>
        public object PopupPlazo(string[][] htCRD, int idEmpresa, int idPeriodo, List<string[]> enPlazo)
        {
            List<object> dataPlazo = new List<object>();
            List<string> headers = this.ObtenerDiasxPeriodo(idPeriodo);
            List<string[]> crd = new List<string[]>();
            foreach (var item in htCRD)
            {
                crd.Add(item);
            }
            crd.RemoveRange(0, 4);
            int columnas = headers.Count + 1;//se le suma uno por la columna que tendra los nombrs de las centrales
            int nroCentrales = crd.Count;

            // string[] reg = new string[nroCentrales];
            for (int i = 0; i < columnas; i++)
            {
                string[] reg = new string[nroCentrales];
                int c = 0;
                if (i == 0)
                {
                    foreach (var item in crd)
                    {
                        int descripcionLength = ConstantesIndisponibilidades.DescripcionCRD1.Length;
                        reg[c] = item[4].ToString().Substring(descripcionLength);
                        c++;
                    }
                }
                else
                {
                    foreach (var item in enPlazo)
                    {
                        reg[c] = (item[i - 1].ToString() == "S") ? "Plazo" : "Fuera Plazo";
                        c++;
                    }
                }
                object entity;
                entity = new
                {
                    id = "pval" + i,
                    label = (i == 0) ? "" : headers[i - 1],
                    label2 = (i == 0) ? "" : headers[i - 1],
                    data = reg,
                    htrender = "normal",
                    hcrender = "no"
                };
                dataPlazo.Add(entity);
            }

            return new { dataPlazo };
        }

        /// <summary>
        /// Estructura la data para grabarla en las tablas correspondientes a los
        /// cuadros A1 y cuadro A2
        /// <param name="idEmpresa">Identificador de la empresa</param>
        /// <param name="idPeriodo">Identificador del periodo</param>
        /// <param name="htCDU"> Juego de datos de la tabla CDU</param>
        /// <param name="htCRD"> Juego de datos de la tabla CRD</param>
        /// <param name="htCCD"> Juego de datos de la tabla CCD</param>
        /// <param name="htA2"> Juego de datos de la tabla del cuadro A2</param>
        /// <param name="inicioCDU"> Fecha de inicio de vigencia CDU</param>
        /// <param name="finCDU"> Fecha de fin de vigencia CDU</param>
        /// <param name="inicioCCD"> Fecha de inicio de vigencia CCD</param>
        /// <param name="finCCD"> Fecha de fin de vigencia CCD</param>
        /// <param name="userName"> Nombre de usuario</param>
        /// <param name="plz"> Lista de array que indica si se esta en plazo o fuera de plazo</param>
        /// </summary>
        public void SaveCuadroPR25(int idEmpresa, int idPeriodo, string[][] htCDU, string[][] htCRD,
                                    string[][] htCCD, string[][] htA2, string inicioCDU,
                                    string finCDU, string inicioCCD, string finCCD, string userName, List<string[]> plz)
        {
            try
            {
                #region Calculando la fecha dependiendo si el periodo es el actual o uno a futuro
                IndPeriodoDTO periodo = FactorySic.GetIndPeriodoRepository().GetById(idPeriodo);
                DateTime firstDay = new DateTime(periodo.Iperianio, periodo.Iperimes, 1);
                DateTime lastDay = new DateTime(periodo.Iperianio, periodo.Iperimes, DateTime.DaysInMonth(periodo.Iperianio, periodo.Iperimes));
                DateTime dayCurrent = DateTime.ParseExact(DateTime.Now.ToString(ConstantesIndisponibilidades.FormatoFecha),
                                                              ConstantesIndisponibilidades.FormatoFecha,
                                                              CultureInfo.InvariantCulture);
                //Habilitar para funcionamiento normal
                dayCurrent = ((periodo.Iperianio >= dayCurrent.Year) && (periodo.Iperimes > dayCurrent.Month)) ? firstDay : dayCurrent;
                //Habilitar para reportar meses pasados
                //dayCurrent = firstDay;
                #endregion

                #region Save or Update CDU
                List<IndCapacidadDTO> temporalCDU = this.ListCapacidadJoinCabecera(idEmpresa,
                                                                                   idPeriodo,
                                                                                   ConstantesIndisponibilidades.TipoCDU);
                DateTime dayCurrentCDU = DateTime.ParseExact(inicioCDU,
                                                             ConstantesIndisponibilidades.FormatoFecha,
                                                             CultureInfo.InvariantCulture);
                dayCurrentCDU = (dayCurrentCDU > lastDay) ? dayCurrent : dayCurrentCDU;

                for (int i = 0; i < htCDU.Length; i++)
                {
                    int central = (string.IsNullOrEmpty(htCDU[i][3])) ? 0 : int.Parse(htCDU[i][3]);
                    int unidad = (string.IsNullOrEmpty(htCDU[i][2])) ? 0 : int.Parse(htCDU[i][2]);
                    int grupo = (string.IsNullOrEmpty(htCDU[i][1])) ? 0 : int.Parse(htCDU[i][1]);
                    int familia = (string.IsNullOrEmpty(htCDU[i][0])) ? 0 : int.Parse(htCDU[i][0]);
                    IndCapacidadDTO entity = temporalCDU.Where(x => x.Equicodicentral == central
                                                               && x.Equicodiunidad == unidad
                                                               && x.Grupocodi == grupo
                                                               && x.Famcodi == familia).FirstOrDefault();

                    string[] array = htCDU[i];
                    int tipoCapacidad = (central == 0) ? ConstantesIndisponibilidades.CapacidadTotal
                                                           : ConstantesIndisponibilidades.CapacidadAsignada;
                    if (entity == null)
                    {
                        IndCapacidadDTO temp = this.ListCapacidadJoinCabecera(idEmpresa,
                                                                              idPeriodo,
                                                                              ConstantesIndisponibilidades.TipoCDU)
                                                   .FirstOrDefault();
                        if (temp == null)
                        {
                            this.SaveCDUCCD(idEmpresa, idPeriodo, array, inicioCDU,
                                    finCDU, ConstantesIndisponibilidades.TipoCDU, tipoCapacidad, dayCurrentCDU, userName);
                        }
                        else
                        {
                            this.SaveCapacidadCDUCCD(idEmpresa, idPeriodo, array, inicioCDU,
                                                    finCDU, ConstantesIndisponibilidades.TipoCDU, tipoCapacidad,
                                                    temp.Indcbrcodi, dayCurrentCDU, userName);
                        }
                    }
                    else
                    {
                        this.UpdateCDUCCD(entity.Indcpccodi, array, inicioCDU, finCDU, dayCurrentCDU, userName);
                    }
                }
                #endregion

                #region Save or Update CRD
                List<IndCrdSugadDTO> temporalCRD = this.ListCrdSugadJoinCabecera(idEmpresa,
                                                                idPeriodo,
                                                                ConstantesIndisponibilidades.TipoCRD);
                int[] tipos = { ConstantesIndisponibilidades.Contratada, ConstantesIndisponibilidades.Adquirida,
                                ConstantesIndisponibilidades.Vendida, ConstantesIndisponibilidades.Total };
                for (int i = 0; i < htCRD.Length; i++)
                {
                    string[] enPlazo = new string[htCRD[i].Length - 5];//tendra los estados que indican en plazo o fuera de plazo
                    int central = (string.IsNullOrEmpty(htCRD[i][3])) ? 0 : int.Parse(htCRD[i][3]);
                    int unidad = (string.IsNullOrEmpty(htCRD[i][2])) ? 0 : int.Parse(htCRD[i][2]);
                    int grupo = (string.IsNullOrEmpty(htCRD[i][1])) ? 0 : int.Parse(htCRD[i][1]);
                    int familia = (string.IsNullOrEmpty(htCRD[i][0])) ? 0 : int.Parse(htCRD[i][0]);
                    IndCrdSugadDTO entity = new IndCrdSugadDTO();
                    int tipoCapacidad = 0;
                    if (i < 4)
                    {
                        entity = temporalCRD.Where(x => x.Equicodicentral == central
                                                               && x.Equicodiunidad == unidad
                                                               && x.Grupocodi == grupo
                                                               && x.Famcodi == familia
                                                               && x.Crdsgdtipo == tipos[i]).FirstOrDefault();
                        tipoCapacidad = tipos[i];
                        enPlazo = Enumerable.Repeat("S", htCRD[i].Length - 5).ToArray();
                    }
                    else
                    {
                        entity = temporalCRD.Where(x => x.Equicodicentral == central
                                                                   && x.Equicodiunidad == unidad
                                                                   && x.Grupocodi == grupo
                                                                   && x.Famcodi == familia
                                                                   && x.Crdsgdtipo == ConstantesIndisponibilidades.Central)
                                                         .FirstOrDefault();
                        tipoCapacidad = ConstantesIndisponibilidades.Central;
                        enPlazo = plz[i - 4];
                    }
                    string[] array = htCRD[i];
                    if (entity == null)
                    {
                        IndCrdSugadDTO temp = this.ListCrdSugadJoinCabecera(idEmpresa,
                                                                idPeriodo,
                                                                ConstantesIndisponibilidades.TipoCRD)
                                                            .FirstOrDefault();
                        if (temp == null)
                        {
                            this.SaveCRD(idEmpresa, idPeriodo, array, tipoCapacidad, userName);
                        }
                        else
                        {
                            this.SaveCrdSugadCRD(array, tipoCapacidad, temp.Indcbrcodi, enPlazo);
                        }
                    }
                    else
                    {
                        string[] arrayEntidad = new string[array.Length - 5];//dias max del mes
                        this.UpdateCRD(entity.Crdsgdcodi, array, enPlazo);
                    }
                }
                #endregion

                #region Save or Update CCD
                List<IndCapacidadDTO> temporalCCD = this.ListCapacidadJoinCabecera(idEmpresa,
                                                                                    idPeriodo,
                                                                                    ConstantesIndisponibilidades.TipoCCD);
                DateTime dayCurrentCCD = DateTime.ParseExact(inicioCCD,
                                                  ConstantesIndisponibilidades.FormatoFecha,
                                                  CultureInfo.InvariantCulture);
                dayCurrentCCD = (dayCurrentCCD > lastDay) ? dayCurrent : dayCurrentCCD;
                for (int i = 0; i < htCCD.Length; i++)
                {
                    int central = (string.IsNullOrEmpty(htCCD[i][3])) ? 0 : int.Parse(htCCD[i][3]);
                    int unidad = (string.IsNullOrEmpty(htCCD[i][2])) ? 0 : int.Parse(htCCD[i][2]);
                    int grupo = (string.IsNullOrEmpty(htCCD[i][1])) ? 0 : int.Parse(htCCD[i][1]);
                    int familia = (string.IsNullOrEmpty(htCCD[i][0])) ? 0 : int.Parse(htCCD[i][0]);
                    IndCapacidadDTO entity = temporalCCD.Where(x => x.Equicodicentral == central
                                                               && x.Equicodiunidad == unidad
                                                               && x.Grupocodi == grupo
                                                               && x.Famcodi == familia).FirstOrDefault();

                    string[] array = htCCD[i];
                    int tipoCapacidad = (central == 0) ? ConstantesIndisponibilidades.CapacidadTotal
                                                           : ConstantesIndisponibilidades.CapacidadAsignada;
                    if (entity == null)
                    {
                        IndCapacidadDTO temp = this.ListCapacidadJoinCabecera(idEmpresa,
                                                                    idPeriodo,
                                                                    ConstantesIndisponibilidades.TipoCCD).FirstOrDefault();
                        if (temp == null)
                        {
                            this.SaveCDUCCD(idEmpresa, idPeriodo, array, inicioCCD,
                                            finCCD, ConstantesIndisponibilidades.TipoCCD,
                                            tipoCapacidad, dayCurrentCCD, userName);
                        }
                        else
                        {
                            this.SaveCapacidadCDUCCD(idEmpresa, idPeriodo, array, inicioCCD,
                                                     finCCD, ConstantesIndisponibilidades.TipoCCD, tipoCapacidad,
                                                     temp.Indcbrcodi, dayCurrentCCD, userName);
                        }
                    }
                    else
                    {
                        this.UpdateCDUCCD(entity.Indcpccodi, array, inicioCCD, finCCD, dayCurrentCCD, userName);
                    }
                }
                #endregion

                string tipoTrans = htA2[0][0].ToString().Trim();

                if (string.Equals(tipoTrans, ConstantesIndisponibilidades.A2AdquiridaBase,
                                              StringComparison.OrdinalIgnoreCase) ||
                    string.Equals(tipoTrans, ConstantesIndisponibilidades.A2VentaBase,
                                              StringComparison.OrdinalIgnoreCase) ||
                    string.Equals(tipoTrans, ConstantesIndisponibilidades.A2VentaGenerador,
                                              StringComparison.OrdinalIgnoreCase) ||
                    string.Equals(tipoTrans, ConstantesIndisponibilidades.A2AdquiridaGenerador,
                                              StringComparison.OrdinalIgnoreCase))
                {
                    IndCapacidadTransporteDTO capacidadTransporte = this.ListCapacidadTransporte(idEmpresa, idPeriodo)
                                                                                 .FirstOrDefault();
                    if (capacidadTransporte == null)
                    {
                        this.SaveCuadroA2(idEmpresa, idPeriodo, htA2, userName);
                    }
                    else
                    {
                        this.DeleteByCapacidadTransporte(capacidadTransporte.Cpctnscodi);
                        this.UpdateCuadroA2(htA2, capacidadTransporte.Cpctnscodi, userName);
                    }

                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Estructura la data para grabarla en las tablas correspondientes a los
        /// cuadros A1 y cuadro A2
        /// <param name="idEmpresa">Identificador de la empresa</param>
        /// <param name="idPeriodo">Identificador del periodo</param>
        /// <param name="data"> Juego de datos de la tabla Cuadro A2</param>
        /// <param name="user"> Juego de datos de la tabla Cuadro A2</param>
        /// </summary>
        public void SaveCuadroA2(int idEmpresa, int idPeriodo, string[][] data, string user)
        {
            try
            {
                //List<SiEmpresaDTO> empresas = FactorySic.GetSiEmpresaRepository().List(3);
                List<SiEmpresaDTO> empresas = FactorySic.GetSiEmpresaRepository().ListGeneral();
                //Metodo para grabar en cabecera con retorno del id
                IndCapacidadTransporteDTO entity = new IndCapacidadTransporteDTO
                {
                    Emprcodi = idEmpresa,
                    Ipericodi = idPeriodo,
                    Cpctnsusucreacion = user,
                    Cpctnsfeccreacion = DateTime.Now
                };
                //SaveCabecera
                int id = this.SaveIndCapacidadTransporte(entity);
                int registros = data.Count();
                foreach (string[] item in data)
                {
                    int tipo = 0;
                    //Seteando el tipo
                    switch (item[0].Trim().ToLower())
                    {
                        case ConstantesIndisponibilidades.A2AdquiridaBase:
                            tipo = 1;
                            break;
                        case ConstantesIndisponibilidades.A2VentaBase:
                            tipo = 2;
                            break;
                        case ConstantesIndisponibilidades.A2AdquiridaGenerador:
                            tipo = 3;
                            break;
                        default://ConstantesIndisponibilidades.A2VentaGenerador
                            tipo = 4;
                            break;
                    }
                    //Seteando el tipo
                    IndTransporteDetalleDTO detalle = new IndTransporteDetalleDTO()
                    {
                        Cpctnscodi = id,
                        Emprcodi = (tipo == 3 || tipo == 4) ? empresas.Where(x => x.Emprnomb.Trim() == item[2].Trim().ToUpper())
                                    .Select(x => x.Emprcodi).FirstOrDefault() : -1, //empresa hija                       
                        Emprnombalter = item[2].Trim(),
                        TnsdetCompraventa = tipo,
                        Tnsdetfecha = DateTime.ParseExact(item[1],
                                                           ConstantesIndisponibilidades.FormatoFecha,
                                                           CultureInfo.InvariantCulture),
                        Tnsdetptosuministro = item[3].ToString(),
                        Tnsdetcntadquirida = decimal.Parse(item[4]),
                        Tnsdetprctransferencia = decimal.Parse(item[5]),
                        Tnsdetusucreacion = user,
                        Tnsdetfeccreacion = DateTime.Now
                    };
                    this.SaveIndTransporteDetalle(detalle);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Estructura la data para grabarla en las tablas correspondientes a los
        /// cuadros A1 y cuadro A2
        /// <param name="data"> Juego de datos de la tabla Cuadro A2</param>
        /// <param name="cpctnscodi"> Id de la tabla IND_CAPACIDAD_TRANSPORTE</param>
        /// <param name="user"> Nombre de usuario</param>
        /// </summary>
        public void UpdateCuadroA2(string[][] data, int cpctnscodi, string user)
        {
            try
            {
                //List<SiEmpresaDTO> empresas = FactorySic.GetSiEmpresaRepository().List(3);
                List<SiEmpresaDTO> empresas = FactorySic.GetSiEmpresaRepository().ListGeneral();
                foreach (string[] item in data)
                {
                    int tipo = 0;
                    //Seteando el tipo
                    switch (item[0].Trim().ToLower())
                    {
                        case ConstantesIndisponibilidades.A2AdquiridaBase:
                            tipo = 1;
                            break;
                        case ConstantesIndisponibilidades.A2VentaBase:
                            tipo = 2;
                            break;
                        case ConstantesIndisponibilidades.A2AdquiridaGenerador:
                            tipo = 3;
                            break;
                        default://ConstantesIndisponibilidades.A2VentaGenerador
                            tipo = 4;
                            break;
                    }
                    IndTransporteDetalleDTO detalle = new IndTransporteDetalleDTO()
                    {
                        Cpctnscodi = cpctnscodi,
                        Emprcodi = (tipo == 3 || tipo == 4) ? empresas.Where(x => x.Emprnomb.Trim() == item[2].Trim().ToUpper())
                                    .Select(x => x.Emprcodi).FirstOrDefault() : -1, //empresa hija                       
                        Emprnombalter = item[2].Trim(),
                        TnsdetCompraventa = tipo,
                        Tnsdetfecha = DateTime.ParseExact(item[1],
                                                           ConstantesIndisponibilidades.FormatoFecha,
                                                           CultureInfo.InvariantCulture),
                        Tnsdetptosuministro = item[3].ToString(),
                        Tnsdetcntadquirida = decimal.Parse(item[4]),
                        Tnsdetprctransferencia = decimal.Parse(item[5]),
                        Tnsdetusucreacion = user,
                        Tnsdetfeccreacion = DateTime.Now
                    };
                    this.SaveIndTransporteDetalle(detalle);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Estructura la data para grabarla en las tablas correspondientes a los
        /// cuadros A1 y cuadro A2
        /// <param name="idEmpresa">Identificador de la empresa</param>
        /// <param name="idPeriodo">Identificador del periodo</param>
        /// <param name="data"> Juego de datos de la tabla CDU o CCD</param>
        /// <param name="inicio"> Fecha de inicio de vigencia</param>
        /// <param name="fin"> Fecha de fin de vigencia</param>
        /// <param name="tipoCuadro"> Tipo de registro CDU o CCD</param>
        /// <param name="tipoCapacidad"> Tipo de capacidad, Total o Asignada</param>
        /// <param name="dayCurrent"> Fecha utilizada como el dia de hoy</param>
        /// <param name="user"> Nombre de usuario</param>
        /// </summary>
        public void SaveCDUCCD(int idEmpresa, int idPeriodo, string[] data,
                            string inicio, string fin, int tipoCuadro, int tipoCapacidad, DateTime dayCurrent, string user)
        {
            //DateTime hoy;
            DateTime fecInicio = DateTime.ParseExact(inicio, ConstantesIndisponibilidades.FormatoFecha
                                                        , CultureInfo.InvariantCulture);
            DateTime fecFin = DateTime.ParseExact(fin, ConstantesIndisponibilidades.FormatoFecha
                                            , CultureInfo.InvariantCulture);
            try
            {
                IndCabeceraDTO cabecera = new IndCabeceraDTO()
                {
                    Emprcodi = idEmpresa,
                    Ipericodi = idPeriodo,
                    Indcbrtipo = tipoCuadro,
                    Indcbrusucreacion = user,
                    Indcbrfeccreacion = DateTime.Now
                };
                //Metodo para grabar en cabecera con retorno del id
                int idCabecera = this.SaveIndCabecera(cabecera);
                #region Capacidad Total
                //Insertando la capacidad total
                IndCapacidadDTO capacidad = new IndCapacidadDTO()
                {
                    Indcbrcodi = idCabecera,
                    Equicodicentral = (string.IsNullOrEmpty(data[3])) ? 0 : int.Parse(data[3]),
                    Equicodiunidad = (string.IsNullOrEmpty(data[2])) ? 0 : int.Parse(data[2]),
                    Grupocodi = (string.IsNullOrEmpty(data[1])) ? 0 : int.Parse(data[1]),
                    Famcodi = (string.IsNullOrEmpty(data[0])) ? 0 : int.Parse(data[0]),
                    Indcpcfecinicio = fecInicio,
                    Indcpcfecfin = fecFin,
                    Indcpctipo = tipoCapacidad,
                    Indcpcusucreacion = user,
                    Indcpcfeccreacion = DateTime.Now
                };
                //Metodo para grabar la capacidad con retorno del id
                int idCapacidadTotal = this.SaveIndCapacidad(capacidad);
                int mes = dayCurrent.Month;

                while (mes == dayCurrent.Month)
                {
                    int columna = dayCurrent.Day;
                    string val = data[columna + 4];
                    decimal? valorDia = null;
                    valorDia = (string.IsNullOrEmpty(val)) ? valorDia : decimal.Parse(val);
                    //Totales
                    IndCapacidadDiaDTO capacidadDia = new IndCapacidadDiaDTO()
                    {
                        Indcpccodi = idCapacidadTotal,
                        Cpcdiafecha = dayCurrent,
                        Cpcdiavalor = valorDia,//decimal.Parse(data[columna + 4]),
                        Cpcdiausucreacion = user,
                        Cpcdiafeccreacion = DateTime.Now
                    };
                    //Save capacidad dia con retorno del id
                    int idCapacidadDiaTotal = this.SaveIndCapacidadDia(capacidadDia);
                    dayCurrent = dayCurrent.AddDays(1);
                }
                #endregion
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Estructura la data para grabarla en las tablas correspondientes a los
        /// cuadros A1 y cuadro A2
        /// <param name="idEmpresa">Identificador de la empresa</param>
        /// <param name="idPeriodo">Identificador del periodo</param>
        /// <param name="data"> Juego de datos de la tabla CDU o CCD</param>
        /// <param name="inicio"> Fecha de inicio de vigencia</param>
        /// <param name="fin"> Fecha de fin de vigencia</param>
        /// <param name="tipoCuadro"> Tipo de registro CDU o CCD</param>
        /// <param name="tipoCapacidad"> Tipo de capacidad, Total o Asignada</param>
        /// <param name="indcbrcodi"> Identificador de la cabecera</param>
        /// <param name="dayCurrent"> Fecha utilizada como el dia de hoy</param>
        /// <param name="user"> Nombre de usuario</param>
        /// </summary>
        public void SaveCapacidadCDUCCD(int idEmpresa, int idPeriodo, string[] data,
                            string inicio, string fin, int tipoCuadro, int tipoCapacidad,
                            int indcbrcodi, DateTime dayCurrent, string user)
        {
            //DateTime hoy;
            DateTime fecInicio = DateTime.ParseExact(inicio, ConstantesIndisponibilidades.FormatoFecha
                                                        , CultureInfo.InvariantCulture);
            DateTime fecFin = DateTime.ParseExact(fin, ConstantesIndisponibilidades.FormatoFecha
                                            , CultureInfo.InvariantCulture);
            try
            {
                IndCapacidadDTO capacidad = new IndCapacidadDTO()
                {
                    Indcbrcodi = indcbrcodi,
                    Equicodicentral = (string.IsNullOrEmpty(data[3])) ? 0 : int.Parse(data[3]),
                    Equicodiunidad = (string.IsNullOrEmpty(data[2])) ? 0 : int.Parse(data[2]),
                    Grupocodi = (string.IsNullOrEmpty(data[1])) ? 0 : int.Parse(data[1]),
                    Famcodi = (string.IsNullOrEmpty(data[0])) ? 0 : int.Parse(data[0]),
                    Indcpcfecinicio = fecInicio,
                    Indcpcfecfin = fecFin,
                    Indcpctipo = tipoCapacidad,
                    Indcpcusucreacion = user,
                    Indcpcfeccreacion = DateTime.Now
                };
                //Metodo para grabar la capacidad con retorno del id
                int idCapacidadTotal = this.SaveIndCapacidad(capacidad);
                int mes = dayCurrent.Month;

                while (mes == dayCurrent.Month)
                {
                    int columna = dayCurrent.Day;
                    string val = data[columna + 4];
                    decimal? valorDia = null;
                    valorDia = (string.IsNullOrEmpty(val)) ? valorDia : decimal.Parse(val);
                    //Totales
                    IndCapacidadDiaDTO capacidadDia = new IndCapacidadDiaDTO()
                    {
                        Indcpccodi = idCapacidadTotal,
                        Cpcdiafecha = dayCurrent,
                        Cpcdiavalor = valorDia,//decimal.Parse(data[columna + 4]),
                        Cpcdiausucreacion = user,
                        Cpcdiafeccreacion = DateTime.Now
                    };
                    //Save capacidad dia con retorno del id
                    this.SaveIndCapacidadDia(capacidadDia);
                    dayCurrent = dayCurrent.AddDays(1);
                }
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Estructura la data para grabarla en las tablas correspondientes a los
        /// cuadros A1 y cuadro A2
        /// <param name="idCapacidad">Identificador de la tabla IND_CAPACIDAD</param>
        /// <param name="data"> Juego de datos de la tabla CDU o CCD</param>
        /// <param name="inicio"> Fecha de inicio de vigencia</param>
        /// <param name="fin"> Fecha de fin de vigencia</param>
        /// <param name="dayCurrent"> Fecha utilizada como el dia de hoy</param>
        /// <param name="user"> Nombre de usuario</param>
        /// </summary>
        public void UpdateCDUCCD(int idCapacidad, string[] data,
                            string inicio, string fin, DateTime dayCurrent, string user)
        {
            //DateTime hoy;
            DateTime fecInicio = DateTime.ParseExact(inicio, ConstantesIndisponibilidades.FormatoFecha
                                                        , CultureInfo.InvariantCulture);
            DateTime fecFin = DateTime.ParseExact(fin, ConstantesIndisponibilidades.FormatoFecha
                                            , CultureInfo.InvariantCulture);
            try
            {
                //Insertando la capacidad total
                IndCapacidadDTO capacidad = new IndCapacidadDTO()
                {
                    Indcpccodi = idCapacidad,
                    Indcpcfecinicio = fecInicio,
                    Indcpcfecfin = fecFin,
                    Indcpctipo = ConstantesIndisponibilidades.CapacidadTotal,
                    Indcpcusumodificacion = user,
                    Indcpcfecmodificacion = DateTime.Now
                };
                //Update Capacidad, metodo para actualizar la fecha
                //de inicio y fin en la tabla capacidad
                this.UpdateDateById(capacidad);
                int mes = dayCurrent.Month;

                while (mes == dayCurrent.Month)
                {
                    int columna = dayCurrent.Day;
                    string val = data[columna + 4];
                    decimal? valorDia = null;
                    valorDia = (string.IsNullOrEmpty(val)) ? valorDia : decimal.Parse(val);
                    //Totales
                    IndCapacidadDiaDTO capacidadDia = new IndCapacidadDiaDTO()
                    {
                        Indcpccodi = idCapacidad,
                        Cpcdiafecha = dayCurrent,
                        Cpcdiavalor = valorDia,//decimal.Parse(data[columna + 4])
                        //Se deberia agregar campos de modificacion
                    };
                    //Update Capacidad dia, metodo para actualizar los registros 
                    //desde hoy hacia adelante
                    List<IndCapacidadDiaDTO> cpcDia = this.ListCapacidadDiaByCapacidad(capacidadDia.Indcpccodi)
                                                          .Where(x => x.Cpcdiafecha == capacidadDia.Cpcdiafecha).ToList();
                    if (cpcDia.Count == 0)
                    {
                        capacidadDia.Cpcdiausucreacion = user;
                        capacidadDia.Cpcdiafeccreacion = DateTime.Now;
                        this.SaveIndCapacidadDia(capacidadDia);
                    }
                    else
                    {
                        this.UpdateValueByIdByDate(capacidadDia);
                    }
                    dayCurrent = dayCurrent.AddDays(1);
                }

            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Estructura la data para grabarla en las tablas IND_CABCERA y
        /// IND_CRDSUGAD
        /// <param name="idEmpresa">Identificador de la empresa</param>
        /// <param name="idPeriodo">Identificador del periodo</param>
        /// <param name="data"> Juego de datos de la tabla CRD</param>
        /// <param name="tipo"> Tipo de datos que se registran CRD 1,2,3,4,5 </param>
        /// <param name="user"> Nombre de usuario </param>
        /// </summary>
        public void SaveCRD(int idEmpresa, int idPeriodo, string[] data, int tipo, string user)
        {
            try
            {
                IndCabeceraDTO cabecera = new IndCabeceraDTO()
                {
                    Emprcodi = idEmpresa,
                    Ipericodi = idPeriodo,
                    Indcbrtipo = ConstantesIndisponibilidades.TipoCRD,
                    Indcbrusucreacion = user,
                    Indcbrfeccreacion = DateTime.Now
                };
                ////Metodo para grabar en cabecera con retorno del id
                int idCabecera = this.SaveIndCabecera(cabecera);

                IndCrdSugadDTO crdSugad = new IndCrdSugadDTO();
                crdSugad.Equicodicentral = (string.IsNullOrEmpty(data[3])) ? 0 : int.Parse(data[3]);
                crdSugad.Equicodiunidad = (string.IsNullOrEmpty(data[2])) ? 0 : int.Parse(data[2]);
                crdSugad.Grupocodi = (string.IsNullOrEmpty(data[1])) ? 0 : int.Parse(data[1]);
                crdSugad.Famcodi = (string.IsNullOrEmpty(data[0])) ? 0 : int.Parse(data[0]);
                crdSugad.Crdsgdtipo = tipo;
                crdSugad.Indcbrcodi = idCabecera;
                int diasContar = data.Count() - 5;
                for (int i = 0; i < 31; i++)//dias D1,D2, .... , D31
                {
                    decimal? valor = null;
                    if (i < diasContar)
                    {
                        string d = data[i + 5];
                        valor = (string.IsNullOrEmpty(d)) ? valor : decimal.Parse(data[i + 5]);
                    }
                    else
                    {
                        valor = null;
                    }
                    //crdSugad.GetType().GetProperty("D" + (i + 1)).SetValue(crdSugad, Math.Round(valor, ConstantesIndisponibilidades.NumeroDecimales));
                    crdSugad.GetType().GetProperty("D" + (i + 1)).SetValue(crdSugad, valor);
                    crdSugad.GetType().GetProperty("E" + (i + 1)).SetValue(crdSugad, "S");
                }
                this.SaveIndCrdSugad(crdSugad);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Estructura la data para grabarla en las tablas IND_CABCERA y
        /// IND_CRDSUGAD
        /// <param name="data"> Juego de datos de la tabla CRD</param>
        /// <param name="tipo"> Tipo de datos que se registran CRD 1,2,3,4,5 </param>
        /// <param name="indcbrcodi"> Tipo de datos que se registran CRD 1,2,3,4,5 </param>
        /// <param name="enPlazo"> Array que indica si esta en palzo o fuera </param>
        /// </summary>
        public void SaveCrdSugadCRD(string[] data, int tipo, int indcbrcodi, string[] enPlazo)
        {
            try
            {
                IndCrdSugadDTO crdSugad = new IndCrdSugadDTO();
                crdSugad.Equicodicentral = (string.IsNullOrEmpty(data[3])) ? 0 : int.Parse(data[3]);
                crdSugad.Equicodiunidad = (string.IsNullOrEmpty(data[2])) ? 0 : int.Parse(data[2]);
                crdSugad.Grupocodi = (string.IsNullOrEmpty(data[1])) ? 0 : int.Parse(data[1]);
                crdSugad.Famcodi = (string.IsNullOrEmpty(data[0])) ? 0 : int.Parse(data[0]);
                crdSugad.Crdsgdtipo = tipo;
                crdSugad.Indcbrcodi = indcbrcodi;
                int diasContar = data.Count() - 5;
                for (int i = 0; i < 31; i++)//dias D1,D2, .... , D31
                {
                    decimal? valor = null;
                    string e;
                    if (i < diasContar)
                    {
                        string d = data[i + 5];
                        valor = (string.IsNullOrEmpty(d)) ? valor : decimal.Parse(data[i + 5]);
                        e = enPlazo[i];
                    }
                    else
                    {
                        valor = null;
                        e = "S";
                    }
                    crdSugad.GetType().GetProperty("D" + (i + 1)).SetValue(crdSugad, valor);
                    crdSugad.GetType().GetProperty("E" + (i + 1)).SetValue(crdSugad, e);
                }
                this.SaveIndCrdSugad(crdSugad);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Estructura la data para actualizar los registros en la tabla
        /// IND_CRDSUGAD
        /// <param name="crdsgdcodi">Identificador de la tabla IND_CABECERA</param>
        /// <param name="data"> Juego de datos que se actualizaran en la tabla IND_CRDSUGAD</param>
        /// <param name="enPlazo"> Array que indica si se esta en plazo o fuera</param>
        /// </summary>
        public void UpdateCRD(int crdsgdcodi, string[] data, string[] enPlazo)
        {
            try
            {
                IndCrdSugadDTO crdSugad = new IndCrdSugadDTO();
                crdSugad.Crdsgdcodi = crdsgdcodi;
                int diasContar = data.Count() - 5;
                for (int i = 0; i < 31; i++)//dias D1,D2, .... , D31
                {
                    decimal? valor = null;
                    string e;
                    if (i < diasContar)
                    {
                        string d = data[i + 5];
                        valor = (string.IsNullOrEmpty(d)) ? valor : decimal.Parse(data[i + 5]);
                        e = enPlazo[i];
                    }
                    else
                    {
                        valor = null;
                        e = "S";
                    }
                    crdSugad.GetType().GetProperty("D" + (i + 1)).SetValue(crdSugad, valor);
                    crdSugad.GetType().GetProperty("E" + (i + 1)).SetValue(crdSugad, e);
                }
                this.UpdateIndCrdSugad(crdSugad);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Método que genera una lista con los dias que tiene un mes dd/mm/yyyy
        /// <param name="idPeriodo"> Identificador del periodo en la tabla IND_PERIODO</param>
        /// </summary>
        public List<string> ObtenerDiasxPeriodo(int idPeriodo)
        {

            IndPeriodoDTO entity = this.GetByIdIndPeriodo(idPeriodo);

            int mes = entity.Iperimes;
            int anio = entity.Iperianio;
            List<string> res = new List<string>();
            DateTime fecha = new DateTime(anio, mes, 1);
            while (mes == fecha.Month)
            {
                res.Add(fecha.ToString("dd/MM/yyyy"));
                fecha = fecha.AddDays(1);
            }

            return res;
        }

        /// <summary>
        /// Método para listar las cabecera para una empresa y periodo
        /// <param name="emprcodi"> Identificador de la empresa</param>
        /// <param name="ipericodi"> Identificador del periodo</param>
        /// </summary>
        public List<IndCabeceraDTO> ListCabecera(int emprcodi, int ipericodi)
        {
            return FactorySic.GetIndCabeceraRepository().ListCabecera(emprcodi, ipericodi);
        }

        /// <summary>
        /// Método para listar la capacidad por segun el id de cabecera
        /// <param name="indcbrcodi"> Identificador de la tabla IND_CABECERA</param>
        /// </summary>
        public List<IndCapacidadDTO> ListCapacidadByCabecera(int indcbrcodi)
        {
            return FactorySic.GetIndCapacidadRepository().ListCapacidadByCabecera(indcbrcodi);
        }

        /// <summary>
        /// Método para listar la capacidad por segun el id de cabecera
        /// <param name="emprcodi"> Identificador de la tabla SI_EMPRESA</param>
        /// <param name="ipericodi"> Identificador de la tabla IND_PERIODO</param>
        /// <param name="indcbrtipo"> Atributo que indica si el tipo es CDU, CRD o CCD</param>
        /// </summary>
        public List<IndCapacidadDTO> ListCapacidadJoinCabecera(int emprcodi, int ipericodi, int indcbrtipo)
        {
            return FactorySic.GetIndCapacidadRepository().ListCapacidadJoinCabecera(emprcodi, ipericodi, indcbrtipo);
        }

        /// <summary>
        /// Método para listar la capacidad dia unida a capacidad por id de cabecera
        /// <param name="indcbrcodi"> Identificador de la tabla IND_CABECERA</param>
        /// </summary>
        public List<IndCapacidadDiaDTO> ListCapacidadDiaJoinCabecera(int indcbrcodi)
        {
            return FactorySic.GetIndCapacidadDiaRepository().ListCapacidadDiaJoinCapacidad(indcbrcodi);
        }

        /// <summary>
        /// Método para listar la capacidad dia por segun el id de capacidad
        /// <param name="indcpccodi"> Identificador de la tabla IND_CAPACIDAD</param>
        /// </summary>
        public List<IndCapacidadDiaDTO> ListCapacidadDiaByCapacidad(int indcpccodi)
        {
            return FactorySic.GetIndCapacidadDiaRepository().ListCapacidadDiaByCapacidad(indcpccodi);
        }

        /// <summary>
        /// Método para listar el CRD o SUGAD segun el id de cabecera
        /// <param name="indcbrcodi"> Identificador de la tabla IND_CABECERA</param>
        /// </summary>
        public List<IndCrdSugadDTO> ListCrdSugadByCabecera(int indcbrcodi)
        {
            return FactorySic.GetIndCrdSugadRepository().ListCrdSugadByCabecera(indcbrcodi);
        }

        /// <summary>
        /// Método para la tabla IND_CABECERA join con IND_CRDSUGAD por id de empresa
        /// id de periodo y tipo(CDU, CRD y CCD)
        /// <param name="emprcodi"> Identificador de la tabla IND_CABECERA</param>
        /// <param name="ipericodi"> Identificador de la tabla IND_CABECERA</param>
        /// <param name="indcbrtipo"> Identificador de la tabla IND_CABECERA</param>
        /// </summary>
        public List<IndCrdSugadDTO> ListCrdSugadJoinCabecera(int emprcodi, int ipericodi, int indcbrtipo)
        {
            return FactorySic.GetIndCrdSugadRepository().ListCrdSugadJoinCabecera(emprcodi, ipericodi, indcbrtipo);
        }

        /// <summary>
        /// Método para listar la capacidad de transporte del cuadro A2
        /// segun el id de la empresa y del periodo
        /// <param name="emprcodi"> Identificador de la empresa</param>
        /// <param name="ipericodi"> Identificador del periodo</param>
        /// </summary>
        public List<IndCapacidadTransporteDTO> ListCapacidadTransporte(int emprcodi, int ipericodi)
        {
            return FactorySic.GetIndCapacidadTransporteRepository().ListCapacidadTransporte(emprcodi, ipericodi);
        }

        /// <summary>
        /// Método para listar el detalle de la capacidad de transporte del cuadro A2
        /// segun el id de la tabla principal IND_CAPACIDAD_TRANSPORTE
        /// <param name="cpctnscodi"> Identificador de la tabla IND_CAPACIDAD_TRANSPORTE</param>
        /// </summary>
        public List<IndTransporteDetalleDTO> ListTransporteDetalle(int cpctnscodi)
        {
            return FactorySic.GetIndTransporteDetalleRepository().ListTransporteDetalle(cpctnscodi);
        }
        #endregion

        #region Tablas IND.PR25.2022
        /// <summary>
        /// Actualiza, fecha de inicio y fin de un registro de la tabla IND_CAPACIDAD por id 
        /// </summary>
        public void UpdateDateById(IndCapacidadDTO entity)
        {
            try
            {
                FactorySic.GetIndCapacidadRepository().UpdateDateById(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza, los registros D1...D31 y E1....E31 
        /// </summary>
        public void UpdateIndCrdSugad(IndCrdSugadDTO entity)
        {
            try
            {
                FactorySic.GetIndCrdSugadRepository().UpdateIndCrdSugad(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Actualiza, el campos cpcdiavalor de la tabla IND_CAPACIDAD_DIA 
        /// por id y fecha
        /// </summary>
        public void UpdateValueByIdByDate(IndCapacidadDiaDTO entity)
        {
            try
            {
                FactorySic.GetIndCapacidadDiaRepository().UpdateValueByIdByDate(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Elimina registros de la tabla IND_TRANSPORTE_DETALLE
        /// por el id de la tabla IND_CAPCIDAD_TRANSPORTE
        /// </summary>
        public void DeleteByCapacidadTransporte(int cpctnscodi)
        {
            try
            {
                FactorySic.GetIndTransporteDetalleRepository().DeleteByCapacidadTransporte(cpctnscodi);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla IND_CABECERA
        /// </summary>
        public int SaveIndCabecera(IndCabeceraDTO entity)
        {
            try
            {
                return FactorySic.GetIndCabeceraRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla IND_CAPACIDAD
        /// </summary>
        public int SaveIndCapacidad(IndCapacidadDTO entity)
        {
            try
            {
                return FactorySic.GetIndCapacidadRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla IND_CAPACIDAD_DIA
        /// </summary>
        public int SaveIndCapacidadDia(IndCapacidadDiaDTO entity)
        {
            try
            {
                return FactorySic.GetIndCapacidadDiaRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla IND_CRD_SUGAD
        /// </summary>
        public int SaveIndCrdSugad(IndCrdSugadDTO entity)
        {
            try
            {
                return FactorySic.GetIndCrdSugadRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla IND_CAPACIDAD_TRANSPORTE
        /// </summary>
        public int SaveIndCapacidadTransporte(IndCapacidadTransporteDTO entity)
        {
            try
            {
                return FactorySic.GetIndCapacidadTransporteRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Inserta un registro de la tabla IND_TRANSPORTE_DETALLE
        /// </summary>
        public int SaveIndTransporteDetalle(IndTransporteDetalleDTO entity)
        {
            try
            {
                return FactorySic.GetIndTransporteDetalleRepository().Save(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }
        #endregion

        #region Stock de Combustible

        /// <summary>
        /// Importar Stock de Combustible
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="empresa"></param>
        /// <param name="usuario"></param>
        /// <param name="mensaje"></param>
        /// <returns></returns>
        public string ImportarStockCombustible(int ipericodi, string fechaInicio, string fechaFin, string empresa, bool historico, string usuario, out string mensaje)
        {
            #region Definiendo variables globales
            mensaje = "";
            IDbConnection conn = null;
            DbTransaction tran = null;
            #endregion

            #region Importar Stock de Combustible (Programado) de la Extranet a la Intranet
            try
            {
                #region Validar datos
                IndPeriodoDTO regPeriodo = this.GetByIdIndPeriodo(ipericodi);
                DateTime dtPeriodoInicio = new DateTime(regPeriodo.Iperianio, regPeriodo.Iperimes, 1);
                DateTime dtPeriodoFin = dtPeriodoInicio.AddMonths(1).AddDays(-1);

                DateTime dtFechaInicio = (string.IsNullOrEmpty(fechaInicio)) ? dtPeriodoInicio : DateTime.ParseExact(fechaInicio, ConstantesIndisponibilidades.FormatoFechaDDMMYYYY, CultureInfo.InvariantCulture); //Convert.ToDateTime(fechainicio);
                DateTime dtFechaFin = (string.IsNullOrEmpty(fechaFin)) ? dtPeriodoFin : DateTime.ParseExact(fechaFin, ConstantesIndisponibilidades.FormatoFechaDDMMYYYY, CultureInfo.InvariantCulture); //Convert.ToDateTime(fechafin);

                if (dtFechaInicio < dtPeriodoInicio || dtFechaInicio > dtPeriodoFin ||
                    dtFechaFin < dtPeriodoInicio || dtFechaFin > dtPeriodoFin)
                {
                    mensaje = "Las fechas no corresponden al periodo seleccionado.";
                    return "-1";
                }

                if (string.IsNullOrEmpty(empresa))
                {
                    mensaje = "La empresa es requerida.";
                    return "-1";
                }
                #endregion

                #region Importar Stock de Combustible

                #region Definiendo variables
                int count_insert_stkdet = 0;
                int count_update_stkdet = 0;
                int new_stkcmtcodi = 0;
                int new_stkdetcodi = 0;
                int numDia = (dtFechaFin.Date - dtFechaInicio.Date).Days + 1;
                conn = FactorySic.GetIndStockCombustibleRepository().BeginConnection();
                tran = FactorySic.GetIndStockCombustibleRepository().StartTransaction(conn);
                List<string> listStkdettipo = new List<string>() { ConstantesIndisponibilidades.StkdettipoOriginal, ConstantesIndisponibilidades.StkdettipoModificado };
                StringBuilder sbStkdettipo = new StringBuilder();
                foreach (string stkdettipo in listStkdettipo)
                {
                    if (!string.IsNullOrEmpty(sbStkdettipo.ToString())) { sbStkdettipo.Append(","); }
                    sbStkdettipo.AppendFormat("'{0}'", stkdettipo);
                }
                Hashtable htSantaRosa = new Hashtable
                {
                    { "emprcodi" , ConstantesIndisponibilidades.SCSantaRosaEmprcodi }, //12906 ENEL GENERACION PERU S.A.A.
                    { "equicodicentral", ConstantesIndisponibilidades.SCSantaRosaEquicodicentral }, //289 SantaRosa
                    { "tipoinfocodi", ConstantesIndisponibilidades.SCSantaRosaTipoinfocodi }, //43 Biodiesel (Galones)
                    { "equicodiunidad", ConstantesIndisponibilidades.SCSantaRosaEquicodiunidad }, //33, "TG7 WEST", 34, "UTI5", 35, "UTI6"
                };
                NumberFormatInfo nfi = this.GetNFI();
                #endregion

                #region Recorriendo listaCombXUnidad (empresa/central)
                ListarContratoCombustiblePorRangoFecha(dtFechaInicio, dtFechaFin, empresa, out List<CombustibleContrato> listaCombXUnidad, out List<CombustibleContrato> listaCombustibleContrato, out List<ResultadoValidacionAplicativo> listaMsj);
                for (int u = 0; u < listaCombXUnidad.Count; u++)
                {
                    #region Obtener un registro listaCombXUnidad y sus listaCombustibleContrato
                    var reg = listaCombXUnidad[u];
                    var sublista = listaCombustibleContrato.Where(
                                    x => x.Gaseoductoequicodi == reg.Gaseoductoequicodi &&
                                    x.Equipadre == reg.Equipadre && x.Equicodi == reg.Equicodi &&
                                    x.Tipoinfocodi == reg.Tipoinfocodi && x.Tptomedicodi == reg.Tptomedicodi
                                    ).ToList();
                    int iPtomedicodi = (sublista != null) ? sublista[0].Ptomedicodi : 0;
                    #endregion

                    #region Verificar si es Central "Santa Rosa" y Tipo de Información "Biodiesel Galones"
                    bool isSantaRosa = (reg.Emprcodi == Convert.ToInt32(htSantaRosa["emprcodi"]) &&
                                        reg.Equicodi == Convert.ToInt32(htSantaRosa["equicodicentral"]) &&
                                        reg.Tipoinfocodi == Convert.ToInt32(htSantaRosa["tipoinfocodi"]));
                    List<string> listEquicodiunidad = isSantaRosa ? Convert.ToString(htSantaRosa["equicodiunidad"]).Split(',').ToList() : new List<string> { "0" };
                    #endregion

                    #region Obtener Stock del registro listaCombXUnidad correspondiente
                    Dictionary<int, string> dStock = new Dictionary<int, string>();
                    for (int i = dtFechaInicio.Day; i <= dtFechaFin.Day; i++)
                    {
                        dStock.Add(i, ConstantesIndisponibilidades.ValorPorDefaultStock);
                    }

                    for (var m = 0; m < numDia; m++)
                    {
                        DateTime fecha = dtFechaInicio.AddDays(m);
                        var reg2 = sublista.Find(x => x.CbctrtFechaDia == fecha.Date);

                        string stock = ConstantesIndisponibilidades.ValorPorDefaultStock;
                        if (isSantaRosa)
                        {
                            stock = "0";
                        }
                        else if (reg2 != null && reg2.TieneDeclaracionAgente && reg2.Valor != null)
                        {
                            stock = reg2.Valor.Value.ToString("N", nfi);
                        }
                        dStock[fecha.Date.Day] = stock;
                    }
                    #endregion

                    #region Obtener o Crear Stock Combustible
                    List<int> listStkcmtcod = new List<int>();
                    List<IndStockCombustibleDTO> list1 = FactorySic.GetIndStockCombustibleRepository().GetByCriteria(ipericodi, reg.Emprcodi, reg.Equicodi, string.Join(" ,", listEquicodiunidad), reg.Tipoinfocodi);
                    bool existList1 = (list1 != null && list1.Count > 0);

                    if (existList1)
                    {
                        //Si existe
                        foreach (string s in listEquicodiunidad)
                        {
                            int Equicodiunidad = Convert.ToInt32(s);
                            int stkcmtcodi = list1.Find(x => x.Equicodiunidad == Equicodiunidad).Stkcmtcodi;
                            listStkcmtcod.Add(stkcmtcodi);
                        }
                    }
                    else
                    {
                        //No existe: por lo tanto crearlo
                        foreach (string s in listEquicodiunidad)
                        {
                            int Equicodiunidad = Convert.ToInt32(s);
                            new_stkcmtcodi = (new_stkcmtcodi == 0) ? FactorySic.GetIndStockCombustibleRepository().GetMaxId() : (new_stkcmtcodi + 1);
                            IndStockCombustibleDTO entity = new IndStockCombustibleDTO
                            {
                                Stkcmtcodi = new_stkcmtcodi,
                                Ipericodi = ipericodi,
                                Emprcodi = reg.Emprcodi,
                                Equicodicentral = reg.Equicodi,
                                Equicodiunidad = Equicodiunidad,
                                Tipoinfocodi = reg.Tipoinfocodi,
                                Ptomedicodi = iPtomedicodi,
                                Stkcmtusucreacion = usuario,
                                Stkcmtfeccreacion = DateTime.Now,
                                Stkcmtusumodificacion = usuario,
                                Stkcmtfecmodificacion = DateTime.Now
                            };
                            FactorySic.GetIndStockCombustibleRepository().Save(entity, conn, tran);
                            listStkcmtcod.Add(new_stkcmtcodi);
                        }
                    }
                    #endregion

                    #region Insertar o Actualiar Stock de Combustible Detalle
                    foreach (int stkcmtcodi in listStkcmtcod)
                    {
                        List<IndStkCombustibleDetalleDTO> list2 = FactorySic.GetIndStkCombustibleDetalleRepository().GetByCriteria(stkcmtcodi, sbStkdettipo.ToString());

                        bool existList2 = (list2 != null && list2.Count > 0);
                        if (existList2)
                        {
                            //Si existe
                            string setupdates = SetStkCmtDetalleByUpdates(dStock);
                            foreach (string stkdettipo in listStkdettipo)
                            {
                                IndStkCombustibleDetalleDTO entity = list2.Find(x => x.Stkdettipo == stkdettipo);
                                if (entity == null)
                                {
                                    tran.Rollback();
                                    mensaje = SetMensajeErrorStkCmtDetalle(stkcmtcodi, stkdettipo);
                                    return "-1";
                                }
                                FactorySic.GetIndStkCombustibleDetalleRepository().UpdateDays(entity.Stkdetcodi, setupdates, usuario, DateTime.Now, conn, tran);
                                count_update_stkdet++;
                            }
                        }
                        else
                        {
                            //No existe: por lo tanto crearlo
                            foreach (string stkdettipo in listStkdettipo)
                            {
                                new_stkdetcodi = (new_stkdetcodi == 0) ? FactorySic.GetIndStkCombustibleDetalleRepository().GetMaxId() : (new_stkdetcodi + 1);
                                IndStkCombustibleDetalleDTO entity = new IndStkCombustibleDetalleDTO
                                {
                                    Stkdetcodi = new_stkdetcodi,
                                    Stkcmtcodi = stkcmtcodi,
                                    Stkdettipo = stkdettipo
                                };
                                SetStkCmtDetalleBySave(dStock, entity, usuario);
                                FactorySic.GetIndStkCombustibleDetalleRepository().Save(entity, conn, tran);
                                count_insert_stkdet++;
                            }
                        }
                    }
                    #endregion en Stock Combustible Detalle
                }
                #endregion

                #region Mensaje final
                if (count_insert_stkdet == 0 && count_update_stkdet == 0)
                {
                    mensaje = "No existen datos de stock de combustible para el rango de fechas especificado en la Extranet para importar.";
                }
                else
                {
                    mensaje = "Se importaron los datos satisfactoriamente.";
                }
                #endregion

                tran.Commit();

                #region Preservar historico de cambios
                if (historico)
                {
                    List<IndHistoricoStockCombustDTO> listIndHistoricoStockCombust = FactorySic.GetIndHistoricoStockCombustRepository().GetByCriteria(ipericodi);
                    bool existListIndHistoricoStockCombust = (listIndHistoricoStockCombust != null && listIndHistoricoStockCombust.Count > 0);
                    if (existListIndHistoricoStockCombust)
                    {
                        conn = FactorySic.GetIndStockCombustibleRepository().BeginConnection();
                        tran = FactorySic.GetIndStockCombustibleRepository().StartTransaction(conn);
                        listIndHistoricoStockCombust = listIndHistoricoStockCombust.OrderBy(x => x.Hststkfeccreacion).ToList();

                        foreach (IndHistoricoStockCombustDTO reg in listIndHistoricoStockCombust)
                        {
                            bool isValid = (reg.Stkcmtcodi != null && reg.Stkcmtcodi > 0 && reg.Hststkfecha != null && reg.Hststkmodificado != null);
                            if (isValid)
                            {
                                StringBuilder sbTipo = new StringBuilder();
                                sbTipo.AppendFormat("'{0}'", ConstantesIndisponibilidades.StkdettipoModificado);
                                List<IndStkCombustibleDetalleDTO> listIndStkCombustibleDetalle = FactorySic.GetIndStkCombustibleDetalleRepository().GetByCriteria(reg.Stkcmtcodi.Value, sbTipo.ToString());
                                bool existListIndStkCombustibleDetalle = (listIndStkCombustibleDetalle != null && listIndStkCombustibleDetalle.Count > 0);
                                if (existListIndStkCombustibleDetalle)
                                {
                                    int stkdetcodi = listIndStkCombustibleDetalle.FirstOrDefault().Stkdetcodi;
                                    StringBuilder sbSetUpdates = new StringBuilder();
                                    sbSetUpdates.AppendFormat(" D{0} = '{1}', ", reg.Hststkfecha.Value.Day, reg.Hststkmodificado);
                                    FactorySic.GetIndStkCombustibleDetalleRepository().UpdateDays(stkdetcodi, sbSetUpdates.ToString(), usuario, DateTime.Now, conn, tran);
                                }
                            }
                        }

                        tran.Commit();
                    }
                }
                #endregion

                #endregion
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                    {
                        conn.Close();
                    }
                }
            }

            return "1";
            #endregion
        }

        /// <summary>
        /// Setea el Stock de Combustible Detalle, para entity especificada
        /// Nota: Adicionalmente, realiza el ajuste para los datos faltantes. Esto es sólo por ser Save (crear)
        /// </summary>
        /// <param name="dict">Diccionario de Stock</param>
        /// <param name="entity">IndStkCombustibleDetalleDTO de tipo Original</param>
        /// <param name="usuario">Usuario que realiza la creación</param>
        /// <returns></returns>
        private void SetStkCmtDetalleBySave(Dictionary<int, string> dict, IndStkCombustibleDetalleDTO entity, string usuario)
        {
            for (int i = 1; i <= 31; i++)
            {
                if (!dict.ContainsKey(i))
                {
                    dict.Add(i, ConstantesIndisponibilidades.ValorPorDefaultStock);
                }
            }

            foreach (KeyValuePair<int, string> e in dict)
            {
                for (int i = 1; i <= 31; i++)
                {
                    if (e.Key == i)
                    {
                        entity.GetType().GetProperty("D" + i).SetValue(entity, e.Value);
                        break;
                    }
                }
            }

            entity.Stkdetusucreacion = usuario;
            entity.Stkdetfeccreacion = DateTime.Now;
            entity.Stkdetusumodificacion = usuario;
            entity.Stkdetfecmodificacion = DateTime.Now;
        }

        /// <summary>
        /// Construye las variables a actualizar para Stock de Combustible Detalle
        /// </summary>
        /// <param name="dict">Diccionario de Stock</param>
        /// <returns>Las variables a actualizar</returns>
        private string SetStkCmtDetalleByUpdates(Dictionary<int, string> dict)
        {
            StringBuilder sb = new StringBuilder();
            foreach (KeyValuePair<int, string> e in dict)
            {
                for (int i = 1; i <= 31; i++)
                {
                    if (e.Key == i)
                    {
                        if (!string.IsNullOrEmpty(sb.ToString())) { sb.Append(" , "); }
                        sb.AppendFormat(" D{0} = '{1}'", i, e.Value); //si e.Value == null, devolverá vacío, pero no hay problema pq está entre ''
                        break;
                    }
                }
            }

            if (!string.IsNullOrEmpty(sb.ToString())) { sb.Append(" , "); }
            return sb.ToString();
        }

        /// <summary>
        /// Construye mensaje de error para el tipo de registro de Stock de Combustible Detalle
        /// </summary>
        /// <param name="stkcmtcodi"></param>
        /// <param name="stkdettipo"></param>
        /// <returns>Mensaje de error</returns>
        private string SetMensajeErrorStkCmtDetalle(int stkcmtcodi, string stkdettipo)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("No se encontró el registro con stkdettipo = '");
            sb.Append(stkdettipo);
            sb.Append("' para stkcmbcodi = ");
            sb.Append(stkcmtcodi);
            sb.Append(" en la tabla ind_stkcombustible_detalle. Revisar");
            return sb.ToString();
        }

        /// <summary>
        /// Genera reporte HTML de Stock Combustible Detalle para un periodo específico
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="numerodias"></param>
        /// <param name="handson"></param>
        /// <param name="historial"></param>
        /// <param name="mensaje"></param> 
        /// <returns></returns>
        public string GenerarHtmlStockCombustibleDetalle(int ipericodi, string emprcodi, out int numerodias, out HandsonModel handson, out string historial, out string mensaje)
        {
            mensaje = "";
            numerodias = 0;
            historial = "";
            handson = new HandsonModel();

            try
            {
                if (string.IsNullOrEmpty(emprcodi))
                {
                    mensaje = "La empresa es requerida.";
                    return "-1";
                }

                IndPeriodoDTO regPeriodo = this.GetByIdIndPeriodo(ipericodi);
                DateTime fechaIni = new DateTime(regPeriodo.Iperianio, regPeriodo.Iperimes, 1);
                DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);
                numerodias = (fechaFin.Date - fechaIni.Date).Days + 1;

                StringBuilder sbStkdettipo = new StringBuilder();
                sbStkdettipo.AppendFormat("'{0}','{1}'", ConstantesIndisponibilidades.StkdettipoOriginal, ConstantesIndisponibilidades.StkdettipoModificado);

                string returnHandson = GenerartHandsonIndStockCombustibleDetalle(ipericodi, emprcodi, sbStkdettipo.ToString(), out handson, out mensaje);
                historial = GenerarHtmlIndHistoricoStockCombust(ipericodi);

                return returnHandson;
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Genera un objeto Handson con los datos de la tabla ind_stkcombustible_detalle
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="stkdettipo"></param>
        /// <param name="handson"></param>
        /// <param name="mensaje"></param>
        /// <returns></returns>
        private string GenerartHandsonIndStockCombustibleDetalle(int ipericodi, string emprcodi, string stkdettipo, out HandsonModel handson, out string mensaje)
        {
            #region Validation
            mensaje = "";
            handson = new HandsonModel();

            List<IndStkCombustibleDetalleDTO> list = FactorySic.GetIndStkCombustibleDetalleRepository().GetByPeriod(ipericodi, emprcodi, stkdettipo);
            bool existeList = (list != null && list.Count > 0);
            if (!existeList)
            {
                mensaje = "No existen registros para el periodo especificado";
                return "-2";
            }

            List<IndStkCombustibleDetalleDTO> listOrig = list.Where(x => x.Stkdettipo == ConstantesIndisponibilidades.StkdettipoOriginal).ToList();
            List<IndStkCombustibleDetalleDTO> listModi = list.Where(x => x.Stkdettipo == ConstantesIndisponibilidades.StkdettipoModificado).ToList();
            bool existeListOrig = (listOrig != null && listOrig.Count > 0);
            bool existeListModi = (listModi != null && listModi.Count > 0);
            if (!existeListOrig || !existeListModi)
            {
                mensaje = "No existen registros para un tipo de detalle dentro del periodo especificado. Revisar";
                return "-1";
            }

            bool igualCount = (listOrig.Count == listModi.Count);
            if (!igualCount)
            {
                mensaje = "No tienen la misma cantidad de registros los tipos de detalle dentro del periodo especificado. Revisar";
                return "-1";
            }

            IndPeriodoDTO regPeriodo = this.GetByIdIndPeriodo(ipericodi);
            DateTime fechaIni = new DateTime(regPeriodo.Iperianio, regPeriodo.Iperimes, 1);
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);
            #endregion

            #region Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>
            {
                new CabeceraRow() { TituloRow = "EMPRESA", IsMerge = 1, Ancho = 180, AlineacionHorizontal = "Izquierda", }, //340
                new CabeceraRow() { TituloRow = "CENTRAL", IsMerge = 1, Ancho = 100, AlineacionHorizontal = "Izquierda", }, //190
                new CabeceraRow() { TituloRow = "UNIDAD", IsMerge = 1, Ancho = 50, AlineacionHorizontal = "Centro", }, //90
                new CabeceraRow() { TituloRow = "TIPO<br />COMBUSTIBLE", IsMerge = 1, Ancho = 100, AlineacionHorizontal = "Centro", }, //150
                new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }, //oculto StkDetCodi
                new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", } //oculto NumDias
            };

            for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendFormat("{0}-{1}", EPDate.f_NombreMesCorto(fecha.Month), fecha.Day);
                listaCabecera.Add(new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Derecha", }); //oculto - cabecera regOriginal
                listaCabecera.Add(new CabeceraRow() { TituloRow = sb.ToString(), IsMerge = 1, Ancho = 120, AlineacionHorizontal = "Derecha", }); //cabecera regModificado
            }

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = false,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }
            #endregion

            #region Body
            int numDias = (fechaFin.Date - fechaIni.Date).Days + 1;
            int numColAntesdeFecha = 6;
            int maxIndexCAF = numColAntesdeFecha - 1;
            int numCol = numColAntesdeFecha + (numDias * 2);
            int numFilaActual = 0;
            List<string[]> listaDataHandson = new List<string[]>();

            foreach (var regModi in listModi)
            {
                string[] data = new string[numCol];
                var regOrig = listOrig.Find(x => x.Stkcmtcodi == regModi.Stkcmtcodi);
                bool isNullRegOrig = (regOrig == null);

                if (isNullRegOrig)
                {
                    data[0] = "No existe su registro de tipo Original. Revisar";
                    data[1] = "";
                    data[2] = "";
                    data[3] = "";
                    data[4] = ""; //oculto
                    data[5] = ""; //oculto

                    for (int j = 1; j <= (numDias * 2); j++)
                    {
                        data[maxIndexCAF + j] = "";
                    }
                    continue;
                }

                data[0] = regModi.Emprnomb;
                data[1] = regModi.Equinombcentral;
                data[2] = ((object.Equals(regModi.Equinombunidad, "_TODOS")) ? "Central" : regModi.Equinombunidad);
                data[3] = regModi.Tipoinfodesc;
                data[4] = regModi.Stkdetcodi.ToString(); //oculto
                data[5] = numDias.ToString(); //oculto

                int index = maxIndexCAF;
                for (int n = 1; n <= numDias; n++)
                {
                    index++;
                    string valueOrigDayX = (string)regOrig.GetType().GetProperty("D" + n).GetValue(regOrig);
                    data[index] = valueOrigDayX ?? ""; //oculto

                    index++;
                    string valueModiDayX = (string)regModi.GetType().GetProperty("D" + n).GetValue(regModi);
                    data[index] = valueModiDayX ?? "";
                }

                listaDataHandson.Add(data);
                numFilaActual++;
            }
            #endregion

            #region Return
            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return "1";
            #endregion
        }

        /// <summary>
        /// Genera un html con el contenido del historial de cambios del Stock Combustible Detalle
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <returns></returns>
        public string GenerarHtmlIndHistoricoStockCombust(int ipericodi)
        {
            List<IndHistoricoStockCombustDTO> list = FactorySic.GetIndHistoricoStockCombustRepository().GetByCriteria(ipericodi);
            bool existList = (list != null && list.Count > 0);
            if (!existList) return string.Empty;

            StringBuilder sb = new StringBuilder();

            string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' width='100%' id='tabla_cambios'>
                        <thead>
                            <tr>
                                <th>Tipo Cambio</th>
                                <th>Empresa</th>
                                <th>Central</th>
                                <th>Unidad</th>
                                <th>Tipo Combustible</th>
                                <th>Stock Fecha</th>
                                <th>Stock Original</th>
                                <th>Stock Modificado</th>
                                <th>Fecha Última Modif.</th>
                            </tr>
                        </thead>
                        <tbody>
            ";
            sb.Append(head);

            foreach (var reg in list)
            {
                string filaTr = string.Format(@"
                                    <tr class='{0}'>
                                        <td style='text-align: center;padding: 3px;'>{1}</td>
                                        <td style='text-align: left;padding: 3px;'>{2}</td>
                                        <td style='text-align: left;padding: 3px;'>{3}</td>
                                        <td style='text-align: center;padding: 3px;'>{4}</td>
                                        <td style='text-align: center;padding: 3px;'>{5}</td>
                                        <td style='text-align: center;padding: 3px;'>{6}</td>
                                        <td style='text-align: right;padding: 3px;'>{7}</td>
                                        <td style='text-align: right;padding: 3px;'>{8}</td>
                                        <td style='text-align: right;padding: 3px;'>{9}</td>
                                    </tr>
                                    "
                                , ""
                                , reg.Hststktipaccion
                                , reg.Hststkempresa
                                , reg.Hststkcentral
                                , reg.Hststkunidad
                                , reg.Hststktipoinfo
                                , ((reg.Hststkfecha != null) ? reg.Hststkfecha.Value.ToString("dd/MM/yyyy") : "")
                                , reg.Hststkoriginal
                                , reg.Hststkmodificado
                                , reg.Hststkfecmodificacion
                                );
                sb.Append(filaTr);
            }

            string foot = @"
                            </tbody>";
            sb.Append(foot);

            return sb.ToString();
        }

        /// <summary>
        /// Compara las fechas. En caso de no ser iguales, coloca un fondo amarillo.
        /// </summary>
        /// <param name="valueOrig"></param>
        /// <param name="valueModi"></param>
        /// <returns></returns>
        private string EqualDays(string valueOrig, string valueModi)
        {
            StringBuilder sb = new StringBuilder();
            if (object.Equals(valueOrig, valueModi))
            {
                sb.AppendFormat("<td style='text-align: right;'>{0}</td>", valueModi);
            }
            else
            {
                sb.AppendFormat("<td style='background: #eaff05; text-align: right;'>{0}</td>", valueModi);
            }
            return sb.ToString();
        }

        /// <summary>
        /// Actualiza el valor de stock para un día específico dentro de la tabla ind_stkcombustible_detalle, 
        /// y guarda su historial de cambio en la tabla ind_historico_stockcombust
        /// </summary>
        /// <param name="stkdetcodiModi"></param>
        /// <param name="dia"></param>
        /// <param name="stockOrig"></param>
        /// <param name="stockModi"></param>
        /// <param name="userName"></param>
        /// <param name="mensaje"></param>
        /// <returns></returns>
        public string ActualizarStkCombustibleDetalle(int stkdetcodiModi, int dia, string stockOrig, decimal? stockModi, string userName, out string mensaje)
        {
            #region Definiendo variables globales
            mensaje = "";
            IDbConnection conn = null;
            DbTransaction tran = null;
            #endregion

            #region Guardar Stock Combustible
            try
            {
                #region Validación
                bool esDiaValido = (dia > 0 && dia < 32);
                if (!esDiaValido)
                {
                    mensaje = "El día no es un día válido.";
                    return "-1";
                }

                if (string.IsNullOrEmpty(userName))
                {
                    mensaje = "El usuario es requerido.";
                    return "-1";
                }

                IndStkCombustibleDetalleDTO stkCmtDetModi = FactorySic.GetIndStkCombustibleDetalleRepository().GetById(stkdetcodiModi);
                if (stkCmtDetModi == null)
                {
                    mensaje = "No existe un registro de Stock de Combustible Detalle para realizar la actualización.";
                    return "-1";
                }

                IndStockCombustibleDTO stkCmt = FactorySic.GetIndStockCombustibleRepository().GetById(stkCmtDetModi.Stkcmtcodi);
                if (stkCmt == null)
                {
                    mensaje = "No existe un registro de Stock de Combustible.";
                    return "-1";
                }

                IndPeriodoDTO periodo = FactorySic.GetIndPeriodoRepository().GetById(stkCmt.Ipericodi);
                if (periodo == null)
                {
                    mensaje = "No existe un registro de Periodo.";
                    return "-1";
                }
                #endregion

                #region Actualización Stock e Historial
                string stock = "";
                DateTime fecha = new DateTime(periodo.Iperianio, periodo.Iperimes, dia);
                NumberFormatInfo nfi = GetNFI();
                StringBuilder sbSetupdates = new StringBuilder();

                if (stockModi == null)
                {
                    sbSetupdates.AppendFormat("D{0} = null , ", dia);
                }
                else
                {
                    stock = stockModi.Value.ToString("N", nfi);
                    sbSetupdates.AppendFormat("D{0} = '{1}' , ", dia, stock);
                }

                int hstcmtcodi = FactorySic.GetIndHistoricoStockCombustRepository().GetMaxId();
                IndHistoricoStockCombustDTO historicoStkCmt = new IndHistoricoStockCombustDTO()
                {
                    Hststkcodi = hstcmtcodi,
                    Stkcmtcodi = stkCmt.Stkcmtcodi,
                    Ipericodi = stkCmt.Ipericodi,
                    Emprcodi = stkCmt.Emprcodi,
                    Equicodicentral = stkCmt.Equicodicentral,
                    Equicodiunidad = stkCmt.Equicodiunidad,
                    Tipoinfocodi = stkCmt.Tipoinfocodi,
                    Hststkperiodo = stkCmt.Iperinombre,
                    Hststkempresa = stkCmt.Emprnomb,
                    Hststkcentral = stkCmt.Equinombcentral,
                    Hststkunidad = ((stkCmt.Equinombunidad != null && stkCmt.Equinombunidad.ToUpper() == "_TODOS") ? "Central" : stkCmt.Equinombunidad),
                    Hststktipoinfo = stkCmt.Tipoinfodesc,
                    Hststkfecha = fecha,
                    Hststkoriginal = stockOrig,
                    Hststkmodificado = stock,
                    Hststktipaccion = ConstantesIndisponibilidades.HststktipaccionModificado,
                    Hststkusucreacion = userName,
                    Hststkfeccreacion = DateTime.Now,
                    Hststkusumodificacion = userName,
                    Hststkfecmodificacion = DateTime.Now
                };

                conn = FactorySic.GetIndStkCombustibleDetalleRepository().BeginConnection();
                tran = FactorySic.GetIndStkCombustibleDetalleRepository().StartTransaction(conn);

                FactorySic.GetIndStkCombustibleDetalleRepository().UpdateDays(stkdetcodiModi, sbSetupdates.ToString(), userName, DateTime.Now, conn, tran);
                FactorySic.GetIndHistoricoStockCombustRepository().Save(historicoStkCmt, conn, tran);

                tran.Commit();
                #endregion
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                    {
                        conn.Close();
                    }
                }
            }

            mensaje = "La actualización del stock de combustible fue satisfactoria.";
            return "1";
            #endregion
        }

        /// <summary>
        /// Retorna la información del formato numérico
        /// </summary>
        /// <returns></returns>
        private NumberFormatInfo GetNFI()
        {
            NumberFormatInfo nfi = new CultureInfo("en-US", false).NumberFormat;
            nfi.NumberGroupSeparator = ",";//se requiere la "," para que C# pueda realizar la conversión a decimal
            nfi.NumberDecimalDigits = 5;
            nfi.NumberDecimalSeparator = ".";//se requiere el "."  para que C# pueda realizar la conversión a decimal
            return nfi;
        }

        #endregion

        #region Insumos de Factor K

        /// <summary>
        /// Retorna las empresas registradas en identificación de empresas correspondientes a un tipo de empresa y 
        /// que su gaseoducto sea mayor a 0. 
        /// Si tipoemprcodi = 0, devolverá todas las empresas
        /// </summary>
        /// <param name="tipoemprcodi"></param>
        /// <returns></returns>
        public List<SiEmpresaDTO> ListarEmpresasConGaseoductoDeRelacionEmpresas(string tipoemprcodi)
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().ListEmpresasConGaseoducto(tipoemprcodi);
        }

        /// <summary>
        /// Retorna las centrales registradas en identificación de empresas correspondientes a un código de empresa y 
        /// que su gaseoducto sea mayor a 0. 
        /// Si emprcodi = 0, devolverá todas las centrales
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <returns></returns>
        public List<EqEquipoDTO> ListarCentralesConGaseoductoDeRelacionEmpresas(string emprcodi)
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().ListCentralesConGaseoducto(emprcodi);
        }

        /// <summary>
        /// Retorna las unidadnombres registradas en identificación de empresas correspondientes a un código de empresa y un código de central, y 
        /// que su gaseoducto sea mayor a 0. 
        /// Si emprcodi = 0, equicodicentral = 0 devolverá todas las unidadnombres
        /// </summary>
        /// <param name="emprcodi"></param>
        /// <param name="equicodicentral"></param>
        /// <returns></returns>
        public List<IndRelacionEmpresaDTO> ListarUnidadNombresConGaseoductoDeRelacionEmpresas(string emprcodi, string equicodicentral)
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().ListUnidadNombresConGaseoducto(emprcodi, equicodicentral);
        }

        /// <summary>
        /// Importar insumos de factor K de la Extranet hacia la Intranet, 
        /// para las empresas que están registradas en Identificación de Empresas
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="fechaInicio"></param>
        /// <param name="fechaFin"></param>
        /// <param name="emprcodi"></param>
        /// <param name="equicodicentral"></param>
        /// <param name="relempcodi"></param>
        /// <param name="usuario"></param>
        /// <param name="mensaje"></param>
        /// <returns></returns>
        public string ImportarInsumosFactorK(int ipericodi, string fechaInicio, string fechaFin, string emprcodi, string equicodicentral, string relempcodi, string usuario, out string mensaje)
        {
            #region Definiendo variables globales
            mensaje = "";
            IDbConnection conn = null;
            DbTransaction tran = null;
            #endregion

            #region Importar Insumos de Factor K
            try
            {
                #region Validación
                IndPeriodoDTO regPeriodo = this.GetByIdIndPeriodo(ipericodi);
                DateTime dtPeriodoInicio = new DateTime(regPeriodo.Iperianio, regPeriodo.Iperimes, 1);
                DateTime dtPeriodoFin = dtPeriodoInicio.AddMonths(1).AddDays(-1);

                DateTime dtFechaInicio = (string.IsNullOrEmpty(fechaInicio)) ? dtPeriodoInicio : DateTime.ParseExact(fechaInicio, ConstantesIndisponibilidades.FormatoFechaDDMMYYYY, CultureInfo.InvariantCulture); //Convert.ToDateTime(fechainicio);
                DateTime dtFechaFin = (string.IsNullOrEmpty(fechaFin)) ? dtPeriodoFin : DateTime.ParseExact(fechaFin, ConstantesIndisponibilidades.FormatoFechaDDMMYYYY, CultureInfo.InvariantCulture); //Convert.ToDateTime(fechafin);

                if (dtFechaInicio < dtPeriodoInicio || dtFechaInicio > dtPeriodoFin ||
                    dtFechaFin < dtPeriodoInicio || dtFechaFin > dtPeriodoFin)
                {
                    mensaje = "Las fechas no corresponden al periodo seleccionado.";
                    return "-1";
                }

                if (string.IsNullOrEmpty(emprcodi))
                {
                    mensaje = "La empresa es requerida.";
                    return "-1";
                }

                if (string.IsNullOrEmpty(equicodicentral))
                {
                    mensaje = "La central es requerida.";
                    return "-1";
                }

                if (string.IsNullOrEmpty(relempcodi))
                {
                    mensaje = "La unidad es requerida.";
                    return "-1";
                }
                #endregion

                #region Importación de los Insumos del Factor K

                #region Definiendo variables
                int count_insert_infkdt = 0;
                int count_update_infkdt = 0;
                int new_insfckcodi = 0;
                int new_infkdtcodi = 0;
                int numDia = (dtFechaFin.Date - dtFechaInicio.Date).Days + 1;
                conn = FactorySic.GetIndInsumosFactorKRepository().BeginConnection();
                tran = FactorySic.GetIndInsumosFactorKRepository().StartTransaction(conn);
                #endregion

                #region Recorriendo Identificación de Empresas
                List<IndRelacionEmpresaDTO> list = FactorySic.GetIIndRelacionEmpresaRepository().GetByCriteria(relempcodi, emprcodi, equicodicentral);
                bool existList = (list != null && list.Count > 0);

                if (existList)
                {
                    Dictionary<string, decimal> dFRC = LoadFRC();
                    Dictionary<int, decimal?> dFGTE = GetDiaValorFGTE(dtFechaInicio, dtFechaFin);

                    foreach (IndRelacionEmpresaDTO reg in list)
                    {
                        if (reg.Gaseoductoequicodi > 0)
                        {   //Si es gas natural
                            #region Obtener CDU, CCD, CRD, SUGAD, FGTE
                            Dictionary<int, decimal?> dCDU = null;
                            Dictionary<int, decimal?> dCRD = null;
                            Dictionary<int, decimal?> dCCD = null;
                            Dictionary<int, decimal?> dSUGAD = null;

                            if (reg.Relempcuadro1 == "S")
                            {
                                dCDU = GetDiaValorFromCapacidad(ipericodi, dtFechaInicio, dtFechaFin, reg.Emprcodi, reg.Equicodicentral, reg.Equicodiunidad, reg.Grupocodi, reg.Famcodi, ConstantesIndisponibilidades.TipoCDU);
                                dCRD = GetDiaValorFromCrdsugad(ipericodi, dtFechaInicio, dtFechaFin, reg.Emprcodi, reg.Equicodicentral, reg.Equicodiunidad, reg.Grupocodi, reg.Famcodi, ConstantesIndisponibilidades.TipoCRD);
                                dCCD = GetDiaValorFromCapacidad(ipericodi, dtFechaInicio, dtFechaFin, reg.Emprcodi, reg.Equicodicentral, reg.Equicodiunidad, reg.Grupocodi, reg.Famcodi, ConstantesIndisponibilidades.TipoCCD);
                            }

                            if (reg.Relempsugad == "S")
                            {
                                dSUGAD = GetDiaValorFromCrdsugad(ipericodi, dtFechaInicio, dtFechaFin, reg.Emprcodi, reg.Equicodicentral, reg.Equicodiunidad, reg.Grupocodi, reg.Famcodi, ConstantesIndisponibilidades.TipoSUGAD);
                            }
                            #endregion

                            #region Insertar o Actualizar Insumo Factor K
                            IndInsumosFactorKDTO insumosFactorK = FactorySic.GetIndInsumosFactorKRepository().GetByCriteria(ipericodi, reg.Emprcodi, reg.Equicodicentral, reg.Equicodiunidad, reg.Grupocodi, reg.Famcodi);
                            bool existInsumosFactorK = (insumosFactorK != null);
                            decimal insfckfrc = GetFRC(reg.Relemptecnologia, dFRC);
                            string insfckranfecultimp = (dtFechaInicio.Date.ToString(ConstantesIndisponibilidades.FormatoFechaDDMMYYYY) + " - " + dtFechaFin.Date.ToString(ConstantesIndisponibilidades.FormatoFechaDDMMYYYY));

                            if (existInsumosFactorK)
                            {
                                //Si existe: Por lo tanto actualizar insfckfrc
                                FactorySic.GetIndInsumosFactorKRepository().UpdateFRCByImport(insumosFactorK.Insfckcodi, insfckfrc, usuario, DateTime.Now, insfckranfecultimp, conn, tran);
                            }
                            else
                            {
                                //No existe: por lo tanto crearlo
                                new_insfckcodi = (new_insfckcodi == 0) ? FactorySic.GetIndInsumosFactorKRepository().GetMaxId() : (new_insfckcodi + 1);
                                DateTime dateTimeNow = DateTime.Now;

                                insumosFactorK = new IndInsumosFactorKDTO
                                {
                                    Insfckcodi = new_insfckcodi,
                                    Ipericodi = ipericodi,
                                    Emprcodi = reg.Emprcodi,
                                    Equicodicentral = reg.Equicodicentral,
                                    Equicodiunidad = reg.Equicodiunidad,
                                    Grupocodi = reg.Grupocodi,
                                    Famcodi = reg.Famcodi,
                                    Insfckfrc = insfckfrc,
                                    Insfckusucreacion = usuario,
                                    Insfckfeccreacion = dateTimeNow,
                                    Insfckusumodificacion = usuario,
                                    Insfckfecmodificacion = dateTimeNow,
                                    Insfckusuultimp = usuario,
                                    Insfckfecultimp = dateTimeNow,
                                    Insfckranfecultimp = insfckranfecultimp
                                };
                                FactorySic.GetIndInsumosFactorKRepository().Save(insumosFactorK, conn, tran);
                            }
                            #endregion

                            #region Insertar, actualiar o eliminar Insumo Factor K Detalle
                            if (reg.Relempcuadro1 == "S")
                            {
                                //Insertar o Actualizar CDU, CCD, CRD
                                SetearInsumosFactorKDetalle(conn, tran, insumosFactorK.Insfckcodi, ConstantesIndisponibilidades.TipoCDU, dCDU, usuario, ref new_infkdtcodi, ref count_insert_infkdt, ref count_update_infkdt);
                                SetearInsumosFactorKDetalle(conn, tran, insumosFactorK.Insfckcodi, ConstantesIndisponibilidades.TipoCRD, dCRD, usuario, ref new_infkdtcodi, ref count_insert_infkdt, ref count_update_infkdt);
                                SetearInsumosFactorKDetalle(conn, tran, insumosFactorK.Insfckcodi, ConstantesIndisponibilidades.TipoCCD, dCCD, usuario, ref new_infkdtcodi, ref count_insert_infkdt, ref count_update_infkdt);
                            }
                            else
                            {
                                //Eliminar CDU, CCD, CRD
                                string infkdttipo = string.Format("{0},{1},{2}", ConstantesIndisponibilidades.TipoCDU, ConstantesIndisponibilidades.TipoCRD, ConstantesIndisponibilidades.TipoCCD);
                                FactorySic.GetIndInsumosFactorKDetalleRepository().DeleteByCriteria(insumosFactorK.Insfckcodi.ToString(), infkdttipo, conn, tran);
                            }

                            if (reg.Relempsugad == "S")
                            {
                                //Insertar o Actualizar Sugad
                                SetearInsumosFactorKDetalle(conn, tran, insumosFactorK.Insfckcodi, ConstantesIndisponibilidades.TipoSUGAD, dSUGAD, usuario, ref new_infkdtcodi, ref count_insert_infkdt, ref count_update_infkdt);
                            }
                            else
                            {
                                //Eliminar Sugad
                                FactorySic.GetIndInsumosFactorKDetalleRepository().DeleteByCriteria(insumosFactorK.Insfckcodi.ToString(), ConstantesIndisponibilidades.TipoSUGAD.ToString(), conn, tran);
                            }

                            SetearInsumosFactorKDetalle(conn, tran, insumosFactorK.Insfckcodi, ConstantesIndisponibilidades.TipoFGTE, dFGTE, usuario, ref new_infkdtcodi, ref count_insert_infkdt, ref count_update_infkdt);
                            #endregion
                        }
                        else
                        {   //Si no es gas natural

                        }
                    }
                }
                #endregion

                #region Mensaje final
                if (count_insert_infkdt == 0 && count_update_infkdt == 0)
                {
                    mensaje = "No existen datos de insumos del factor K para el filtro de datos especificado en la Extranet para importar.";
                }
                else
                {
                    mensaje = "Se importaron los datos satisfactoriamente.";
                }
                #endregion

                tran.Commit();

                #endregion 
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                    {
                        conn.Close();
                    }
                }
            }

            return "1";
            #endregion
        }

        /// <summary>
        /// Obtiene o genera los datos de CDU o CCD  para un rango específico de fechas
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="dtFechaInicio"></param>
        /// <param name="dtFechaFin"></param>
        /// <param name="emprcodi"></param>
        /// <param name="equicodicentral"></param>
        /// <param name="equicodiunidad"></param>
        /// <param name="grupocodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="indcbrtipo"></param>
        /// <returns></returns>
        private Dictionary<int, decimal?> GetDiaValorFromCapacidad(int ipericodi, DateTime dtFechaInicio, DateTime dtFechaFin, int emprcodi, int equicodicentral, int equicodiunidad, int grupocodi, int famcodi, int indcbrtipo)
        {
            decimal? valorPorDefault;
            if (indcbrtipo == ConstantesIndisponibilidades.TipoCDU)
            {
                valorPorDefault = null;
            }
            else if (indcbrtipo == ConstantesIndisponibilidades.TipoCCD)
            {
                valorPorDefault = null;
            }
            else
            {
                throw new Exception(string.Format("El valor de indcbrtipo ({0}) no es válido para el método GetDiaValorFromCapacidad.", indcbrtipo));
            }

            Dictionary<int, decimal?> dDiaValor = new Dictionary<int, decimal?>();
            for (int i = dtFechaInicio.Day; i <= dtFechaFin.Day; i++)
            {
                dDiaValor.Add(i, valorPorDefault);
            }

            int numDia = (dtFechaFin.Date - dtFechaInicio.Date).Days + 1;
            string indcpctipo = ConstantesIndisponibilidades.CapacidadAsignada.ToString();
            List<IndCapacidadDTO> list = FactorySic.GetIndCapacidadRepository().ListByCriteria(ipericodi, emprcodi.ToString(), indcbrtipo.ToString(), equicodicentral.ToString(), equicodiunidad.ToString(), grupocodi.ToString(), famcodi.ToString(), indcpctipo);
            bool existList = (list != null && list.Count > 0);

            if (existList)
            {
                foreach (IndCapacidadDTO capacidad in list) //debe ser 1 registro
                {
                    List<IndCapacidadDiaDTO> listCapDia = FactorySic.GetIndCapacidadDiaRepository().ListCapacidadDiaByCapacidad(capacidad.Indcpccodi);

                    for (var m = 0; m < numDia; m++)
                    {
                        DateTime fecha = dtFechaInicio.AddDays(m);
                        var reg = listCapDia.Find(x => x.Cpcdiafecha == fecha.Date);
                        if (reg != null)
                        {
                            dDiaValor[fecha.Date.Day] = reg.Cpcdiavalor;
                        }
                    }

                }
            }

            return dDiaValor;
        }

        /// <summary>
        /// Obtiene o genera los datos de CRD o SUGAD para un rango específico de fechas
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="dtFechaInicio"></param>
        /// <param name="dtFechaFin"></param>
        /// <param name="emprcodi"></param>
        /// <param name="equicodicentral"></param>
        /// <param name="equicodiunidad"></param>
        /// <param name="grupocodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="indcbrtipo"></param>
        /// <returns></returns>
        private Dictionary<int, decimal?> GetDiaValorFromCrdsugad(int ipericodi, DateTime dtFechaInicio, DateTime dtFechaFin, int emprcodi, int equicodicentral, int equicodiunidad, int grupocodi, int famcodi, int indcbrtipo)
        {
            decimal? valorPorDefault;
            if (indcbrtipo == ConstantesIndisponibilidades.TipoCRD)
            {
                valorPorDefault = null; // ConstantesIndisponibilidades.ValorPorDefaultCRD
            }
            else if (indcbrtipo == ConstantesIndisponibilidades.TipoSUGAD)
            {
                valorPorDefault = null; // ConstantesIndisponibilidades.ValorPorDefaultSUGAD
            }
            else
            {
                throw new Exception(string.Format("El valor de indcbrtipo ({0}) no es válido para el método GetDiaValorFromCrdsugad", indcbrtipo));
            }

            Dictionary<int, decimal?> dDiaValor = new Dictionary<int, decimal?>();
            for (int i = dtFechaInicio.Day; i <= dtFechaFin.Day; i++)
            {
                dDiaValor.Add(i, valorPorDefault);
            }

            int numDia = (dtFechaFin.Date - dtFechaInicio.Date).Days + 1;
            string crdsgdtipo = ConstantesIndisponibilidades.Central.ToString();
            List<IndCrdSugadDTO> list = FactorySic.GetIndCrdSugadRepository().ListByCriteria(ipericodi, emprcodi.ToString(), indcbrtipo.ToString(), equicodicentral.ToString(), equicodiunidad.ToString(), grupocodi.ToString(), famcodi.ToString(), crdsgdtipo);
            bool existList = (list != null && list.Count > 0);

            if (existList)
            {
                foreach (IndCrdSugadDTO crdsugad in list) //Debe ser 1 registro
                {
                    for (var m = 0; m < numDia; m++)
                    {
                        DateTime fecha = dtFechaInicio.AddDays(m);
                        int i = fecha.Date.Day;
                        object value = crdsugad.GetType().GetProperty("D" + i).GetValue(crdsugad);
                        if (value != null)
                        {
                            dDiaValor[i] = (decimal)value;
                        }
                    }
                }
            }

            return dDiaValor;
        }

        /// <summary>
        /// Obtiene o genera los datos de FGTE
        /// </summary>
        /// <param name="dtFechaInicio"></param>
        /// <param name="dtFechaFin"></param>
        /// <returns></returns>
        private Dictionary<int, decimal?> GetDiaValorFGTE(DateTime dtFechaInicio, DateTime dtFechaFin)
        {
            decimal valorPorDefault = ConstantesIndisponibilidades.ValorPorDefaultFGTE;
            Dictionary<int, decimal?> dDiaValor = new Dictionary<int, decimal?>();
            for (int i = dtFechaInicio.Day; i <= dtFechaFin.Day; i++)
            {
                dDiaValor.Add(i, valorPorDefault);
            }

            return dDiaValor;
        }

        /// <summary>
        /// Carga los datos del FRC(CS, CC y MR) correspondientes al día de hoy 
        /// </summary>
        /// <returns></returns>
        private Dictionary<string, decimal> LoadFRC()
        {
            Dictionary<string, decimal> dict = new Dictionary<string, decimal>();

            Object FRCCS = FactorySic.GetSiParametroValorRepository().ObtenerValorParametro(Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["FRCCSSiparcodi"]), DateTime.Now);
            Object FRCCC = FactorySic.GetSiParametroValorRepository().ObtenerValorParametro(Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["FRCCCSiparcodi"]), DateTime.Now);
            Object FRCMR = FactorySic.GetSiParametroValorRepository().ObtenerValorParametro(Convert.ToInt32(System.Configuration.ConfigurationManager.AppSettings["FRCMRSiparcodi"]), DateTime.Now);

            dict.Add("FRCNA", 0);
            dict.Add("FRCCS", (FRCCS != null ? (decimal)FRCCS : 0));
            dict.Add("FRCCC", (FRCCC != null ? (decimal)FRCCC : 0));
            dict.Add("FRCMR", (FRCMR != null ? (decimal)FRCMR : 0));

            return dict;
        }

        /// <summary>
        /// Retorna el valor del FRC para el tipo de tecnología respectivo
        /// </summary>
        /// <param name="tipotecnologia"></param>
        /// <param name="dFRC"></param>
        /// <returns></returns>
        private decimal GetFRC(int tipotecnologia, Dictionary<string, decimal> dFRC)
        {
            decimal frc;
            switch (tipotecnologia)
            {
                case ConstantesIndisponibilidades.TipoTecnologiaFRCNA:
                    frc = dFRC["FRCNA"];
                    break;
                case ConstantesIndisponibilidades.TipoTecnologiaFRCCS:
                    frc = dFRC["FRCCS"];
                    break;
                case ConstantesIndisponibilidades.TipoTecnologiaFRCCC:
                    frc = dFRC["FRCCC"];
                    break;
                case ConstantesIndisponibilidades.TipoTecnologiaFRCMR:
                    frc = dFRC["FRCMR"];
                    break;
                default:
                    throw new Exception("El tipo de tecnología no existe en el método GetFRC");
            }

            return frc;
        }

        /// <summary>
        /// Inserta o Actualiza el registro del insumos del factor K detalle según el valor de infkdttipo
        /// </summary>
        /// <param name="conn"></param>
        /// <param name="tran"></param>
        /// <param name="insfckcodi"></param>
        /// <param name="infkdttipo"></param>
        /// <param name="dict"></param>
        /// <param name="usuario"></param>
        /// <param name="new_infkdtcodi"></param>
        /// <param name="count_insert_infkdt"></param>
        /// <param name="count_update_infkdt"></param>
        private void SetearInsumosFactorKDetalle(IDbConnection conn, DbTransaction tran, int insfckcodi, int infkdttipo, Dictionary<int, decimal?> dict, string usuario, ref int new_infkdtcodi, ref int count_insert_infkdt, ref int count_update_infkdt)
        {
            int[] aInfkdttipo = { ConstantesIndisponibilidades.TipoCDU, ConstantesIndisponibilidades.TipoCRD, ConstantesIndisponibilidades.TipoCCD, ConstantesIndisponibilidades.TipoSUGAD, ConstantesIndisponibilidades.TipoFGTE };
            if (!aInfkdttipo.Contains(infkdttipo))
            {
                throw new Exception(string.Format("El valor de infkdttipo ({0}) no es válido para el método SetearInsumosFactorKDetalle.", infkdttipo));
            }

            IndInsumosFactorKDetalleDTO insumosFactorKDetalle = FactorySic.GetIndInsumosFactorKDetalleRepository().GetByCriteria(insfckcodi, infkdttipo);
            bool existInsumosFactorKDetalle = (insumosFactorKDetalle != null);

            if (existInsumosFactorKDetalle)
            {
                //Actualizar
                string setupdates = SetInsumosFactorKDetalleByUpdates(dict);
                FactorySic.GetIndInsumosFactorKDetalleRepository().UpdateDays(insumosFactorKDetalle.Infkdtcodi, setupdates, usuario, DateTime.Now, conn, tran);
                count_update_infkdt++;
            }
            else
            {
                //Crearlo
                new_infkdtcodi = (new_infkdtcodi == 0) ? FactorySic.GetIndInsumosFactorKDetalleRepository().GetMaxId() : (new_infkdtcodi + 1);
                insumosFactorKDetalle = new IndInsumosFactorKDetalleDTO
                {
                    Infkdtcodi = new_infkdtcodi,
                    Insfckcodi = insfckcodi,
                    Infkdttipo = infkdttipo
                };
                SetInsumosFactorKDetalleBySave(infkdttipo, dict, insumosFactorKDetalle, usuario);
                FactorySic.GetIndInsumosFactorKDetalleRepository().Save(insumosFactorKDetalle, conn, tran);
                count_insert_infkdt++;
            }
        }

        /// <summary>
        /// Construye las variables a actualizar para Insumos Factor K Detalle
        /// </summary>
        /// <param name="dict">Diccionario de Día Valor</param>
        /// <returns>Las variables a actualizar</returns>
        private string SetInsumosFactorKDetalleByUpdates(Dictionary<int, decimal?> dict)
        {
            StringBuilder sb = new StringBuilder();
            foreach (KeyValuePair<int, decimal?> e in dict)
            {
                for (int i = 1; i <= 31; i++)
                {
                    if (e.Key == i)
                    {
                        if (!string.IsNullOrEmpty(sb.ToString())) { sb.Append(" , "); }
                        string value = (e.Value == null) ? "null" : e.Value.ToString();
                        sb.AppendFormat(" D{0} = {1}", i, value);
                        break;
                    }
                }
            }

            if (!string.IsNullOrEmpty(sb.ToString())) { sb.Append(" , "); }
            return sb.ToString();
        }

        /// <summary>
        /// Setea el Insumo Factor K Detalle, para entity especificada
        /// Nota: Adicionalmente, realiza el ajuste para los datos faltantes. Esto es sólo por ser Save (crear)
        /// </summary>
        /// <param name="infkdttipo"></param>
        /// <param name="dict"></param>
        /// <param name="entity"></param>
        /// <param name="usuario"></param>
        /// <returns></returns>
        private void SetInsumosFactorKDetalleBySave(int infkdttipo, Dictionary<int, decimal?> dict, IndInsumosFactorKDetalleDTO entity, string usuario)
        {
            decimal? valorPorDefault;
            if (infkdttipo == ConstantesIndisponibilidades.TipoCDU)
            {
                valorPorDefault = null; // ConstantesIndisponibilidades.ValorPorDefaultCDU;
            }
            else if (infkdttipo == ConstantesIndisponibilidades.TipoCRD)
            {
                valorPorDefault = null; // ConstantesIndisponibilidades.ValorPorDefaultCRD;
            }
            else if (infkdttipo == ConstantesIndisponibilidades.TipoCCD)
            {
                valorPorDefault = null; // ConstantesIndisponibilidades.ValorPorDefaultCCD;
            }
            else if (infkdttipo == ConstantesIndisponibilidades.TipoSUGAD)
            {
                valorPorDefault = null; // ConstantesIndisponibilidades.ValorPorDefaultCCD;
            }
            else if (infkdttipo == ConstantesIndisponibilidades.TipoFGTE)
            {
                valorPorDefault = ConstantesIndisponibilidades.ValorPorDefaultFGTE;
            }
            else
            {
                throw new Exception(string.Format("El valor de infkdttipo ({0}) no es válido para el método SetInsumosFactorKDetalleBySave.", infkdttipo));
            }

            for (int i = 1; i <= 31; i++)
            {
                if (!dict.ContainsKey(i))
                {
                    dict.Add(i, valorPorDefault);
                }
            }

            foreach (KeyValuePair<int, decimal?> e in dict)
            {
                for (int i = 1; i <= 31; i++)
                {
                    if (e.Key == i)
                    {
                        entity.GetType().GetProperty("D" + i).SetValue(entity, e.Value);
                        break;
                    }
                }
            }

            DateTime dateTimeNow = DateTime.Now;
            entity.Infkdtusucreacion = usuario;
            entity.Infkdtfeccreacion = dateTimeNow;
            entity.Infkdtusumodificacion = usuario;
            entity.Infkdtfecmodificacion = dateTimeNow;
        }

        /// <summary>
        /// Consulta los insumos del factor K para un registro de la tabla ind_insumo_factork
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="relempcodi"></param>
        /// <param name="relacionEmpresa"></param>
        /// <param name="insumosFactorK"></param>
        /// <param name="handson"></param>
        /// <param name="mensaje"></param>
        /// <returns></returns>
        public string ConsultarInsumosFactorK(int ipericodi, int relempcodi, out IndRelacionEmpresaDTO relacionEmpresa, out IndInsumosFactorKDTO insumosFactorK, out HandsonModel handson, out string mensaje)
        {
            #region Definiendo variables globales
            mensaje = "";
            relacionEmpresa = new IndRelacionEmpresaDTO();
            insumosFactorK = new IndInsumosFactorKDTO();
            handson = new HandsonModel();
            #endregion

            #region Consultar Insumos de Factor K
            try
            {
                #region Validaciones
                if (ipericodi < 1)
                {
                    mensaje = "El periodo es requerido.";
                    return "-1";
                }

                if (relempcodi < 1)
                {
                    mensaje = "Una empresa, una central y una unidad es requerida.";
                    return "-1";
                }

                relacionEmpresa = FactorySic.GetIIndRelacionEmpresaRepository().GetById(relempcodi);
                bool isNullRelacionEmpresa = (relacionEmpresa == null);
                if (isNullRelacionEmpresa)
                {
                    mensaje = "La identificación de empresa no existe.";
                    return "-1";
                }
                #endregion

                #region Obtener Insumos del Factor K y sus detalles
                insumosFactorK = FactorySic.GetIndInsumosFactorKRepository().GetByCriteria(ipericodi, relacionEmpresa.Emprcodi, relacionEmpresa.Equicodicentral, relacionEmpresa.Equicodiunidad, relacionEmpresa.Grupocodi, relacionEmpresa.Famcodi);
                bool existInsfckfecultimp = (insumosFactorK != null && insumosFactorK.Insfckfecultimp != null);
                if (existInsfckfecultimp)
                {
                    insumosFactorK.InsfckfecultimpDesc = insumosFactorK.Insfckfecultimp.ToString(ConstantesAppServicio.FormatoFecha);
                }
                string returnHandson = GenerartHandsonIndInsumosFactorKDetalle(ipericodi, relacionEmpresa, out handson, out mensaje);

                return returnHandson;
                #endregion
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            #endregion
        }

        /// <summary>
        /// Consulta los insumos del factor K para un registro de la tabla ind_insumo_factork
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="emprcodi"></param>
        /// <param name="equicodicentral"></param>
        /// <param name="equicodiunidad"></param>
        /// <param name="grupocodi"></param>
        /// <param name="famcodi"></param>
        /// <param name="relacionEmpresa"></param>
        /// <param name="insumosFactorK"></param>
        /// <param name="handson"></param>
        /// <param name="mensaje"></param>
        /// <returns></returns>
        public string ConsultarInsumosFactorK(int ipericodi, int emprcodi, int equicodicentral, int equicodiunidad, int grupocodi, int famcodi, out IndRelacionEmpresaDTO relacionEmpresa, out IndInsumosFactorKDTO insumosFactorK, out HandsonModel handson, out string mensaje)
        {
            #region Definiendo variables globales
            mensaje = "";
            relacionEmpresa = new IndRelacionEmpresaDTO();
            insumosFactorK = new IndInsumosFactorKDTO();
            handson = new HandsonModel();
            #endregion

            #region Consultar Insumos de Factor K
            try
            {
                #region Validaciones
                if (ipericodi < 1)
                {
                    mensaje = "El periodo es requerido.";
                    return "-1";
                }

                if (emprcodi < 1)
                {
                    mensaje = "Una empresa es requerida.";
                    return "-1";
                }

                if (equicodicentral < 1)
                {
                    mensaje = "Una central es requerida.";
                    return "-1";
                }

                if (equicodiunidad < 1)
                {
                    mensaje = "Una unidad es requerida.";
                    return "-1";
                }

                if (grupocodi < 1)
                {
                    mensaje = "Un grupo es requerido.";
                    return "-1";
                }

                if (famcodi < 1)
                {
                    mensaje = "Una familia es requerida.";
                    return "-1";
                }

                List<IndRelacionEmpresaDTO> list = FactorySic.GetIIndRelacionEmpresaRepository().GetByCriteria2(emprcodi.ToString(), equicodicentral.ToString(), equicodiunidad.ToString(), grupocodi.ToString(), famcodi.ToString());
                bool existList = (list != null && list.Count > 0);
                if (!existList)
                {
                    mensaje = "La identificación de empresa no existe.";
                    return "-1";
                }

                bool greaterthanone = (list.Count > 1);
                if (greaterthanone)
                {
                    mensaje = "Existe más de un registro de identificación de empresa. Revisar";
                    return "-1";
                }

                relacionEmpresa = list.FirstOrDefault();
                #endregion

                #region Obtener Insumos del Factor K y sus detalles
                insumosFactorK = FactorySic.GetIndInsumosFactorKRepository().GetByCriteria(ipericodi, relacionEmpresa.Emprcodi, relacionEmpresa.Equicodicentral, relacionEmpresa.Equicodiunidad, relacionEmpresa.Grupocodi, relacionEmpresa.Famcodi);
                bool existInsfckfecultimp = (insumosFactorK != null && insumosFactorK.Insfckfecultimp != null);
                if (existInsfckfecultimp)
                {
                    insumosFactorK.InsfckfecultimpDesc = insumosFactorK.Insfckfecultimp.ToString(ConstantesAppServicio.FormatoFecha);
                }
                string returnHandson = GenerartHandsonIndInsumosFactorKDetalle(ipericodi, relacionEmpresa, out handson, out mensaje);

                return returnHandson;
                #endregion
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            #endregion
        }

        /// <summary>
        /// Genera un objeto handson de los datos de la tabla de ind_insumos_factork_detalle
        /// </summary>
        /// <param name="ipericodi"></param>
        /// <param name="relacionEmpresa"></param>
        /// <param name="handson"></param>
        /// <param name="mensaje"></param>
        /// <returns></returns>
        private string GenerartHandsonIndInsumosFactorKDetalle(int ipericodi, IndRelacionEmpresaDTO relacionEmpresa, out HandsonModel handson, out string mensaje)
        {
            #region Validation
            mensaje = "";
            handson = new HandsonModel();

            IndPeriodoDTO regPeriodo = this.GetByIdIndPeriodo(ipericodi);
            bool existRegPeriod = (regPeriodo != null);
            if (!existRegPeriod)
            {
                mensaje = "No existe el periodo especificado.";
                return "-2";
            }

            DateTime fechaIni = new DateTime(regPeriodo.Iperianio, regPeriodo.Iperimes, 1);
            DateTime fechaFin = fechaIni.AddMonths(1).AddDays(-1);
            int numDia = (fechaFin.Date - fechaIni.Date).Days + 1;

            List<IndInsumosFactorKDetalleDTO> list = FactorySic.GetIndInsumosFactorKDetalleRepository().GetByInsumosFactorK(ipericodi, relacionEmpresa.Emprcodi, relacionEmpresa.Equicodicentral, relacionEmpresa.Equicodiunidad, relacionEmpresa.Grupocodi, relacionEmpresa.Famcodi);
            bool existList = (list != null && list.Count > 0);
            if (!existList)
            {
                mensaje = "No existen registros importados para la consulta especificada.";
                return "-2";
            }

            if (relacionEmpresa.Relempsucad == "S")
            {
                //TODO: se ha quedado que no se va agregar por ahora, puesto que no se tiene como relacionar.  
                //Leer stock combustible detalle 
                //Si existe, agregarlo a list antes de FGTE
            }
            #endregion

            #region Header
            List<CabeceraRow> listaCabecera = new List<CabeceraRow>
            {
                new CabeceraRow() { TituloRow = "", IsMerge = 1, Ancho = 1, AlineacionHorizontal = "Centro", }, //oculto
                new CabeceraRow() { TituloRow = "TIPO", IsMerge = 1, Ancho = 50, AlineacionHorizontal = "Centro", },

            };

            for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
            {
                StringBuilder sb = new StringBuilder();
                sb.AppendFormat("{0}-{1}", EPDate.f_NombreMesCorto(fecha.Month), fecha.Day);
                listaCabecera.Add(new CabeceraRow() { TituloRow = sb.ToString(), IsMerge = 1, Ancho = 120, AlineacionHorizontal = "Derecha", });
            }

            string[] headers = listaCabecera.Select(x => x.TituloRow).ToArray();
            List<int> widths = listaCabecera.Select(x => x.Ancho).ToList();
            object[] columnas = new object[headers.Length];

            for (int m = 0; m < headers.Length; m++)
            {
                var cabecera = listaCabecera[m];

                columnas[m] = new
                {
                    type = GridExcel.TipoTexto,
                    source = (new List<String>()).ToArray(),
                    strict = false,
                    dateFormat = string.Empty,
                    correctFormat = false,
                    defaultDate = string.Empty,
                    format = string.Empty,
                    className = cabecera.AlineacionHorizontal == "Derecha" ? "htRight" : (cabecera.AlineacionHorizontal == "Izquierda" ? "htLeft" : "htCenter"),
                };
            }
            #endregion

            #region Body
            int numDias = (fechaFin.Date - fechaIni.Date).Days + 1;
            int numColAntesdeFecha = 2;
            int indexAntesdeFecha = numColAntesdeFecha - 1;
            int numCol = numColAntesdeFecha + (numDias);
            int numFilaActual = 0;
            List<string[]> listaDataHandson = new List<string[]>();

            foreach (var reg in list)
            {
                string[] data = new string[numCol];

                data[0] = reg.Infkdtcodi.ToString();//oculto
                switch (reg.Infkdttipo)
                {
                    case ConstantesIndisponibilidades.TipoCDU:
                        data[1] = ConstantesIndisponibilidades.TextoCDU;
                        break;
                    case ConstantesIndisponibilidades.TipoCCD:
                        data[1] = ConstantesIndisponibilidades.TextoCCD;
                        break;
                    case ConstantesIndisponibilidades.TipoCRD:
                        data[1] = ConstantesIndisponibilidades.TextoCRD;
                        break;
                    case ConstantesIndisponibilidades.TipoSUGAD:
                        data[1] = ConstantesIndisponibilidades.TextoSUGAD;
                        break;
                    case ConstantesIndisponibilidades.TipoSUCAD:
                        data[1] = ConstantesIndisponibilidades.TextoSUCAD;
                        break;
                    case ConstantesIndisponibilidades.TipoFGTE:
                        data[1] = ConstantesIndisponibilidades.TextoFGTE;
                        break;
                }

                for (int n = 1; n <= numDias; n++)
                {
                    object valueDayX = reg.GetType().GetProperty("D" + n).GetValue(reg);
                    data[indexAntesdeFecha + n] = (valueDayX != null) ? valueDayX.ToString() : "";
                }

                listaDataHandson.Add(data);
                numFilaActual++;
            }
            #endregion

            #region Return
            List<CeldaMerge> listaMerge = new List<CeldaMerge>();

            handson.ListaExcelData = listaDataHandson.ToArray();
            handson.Headers = headers;
            handson.ListaColWidth = widths;
            handson.MaxCols = numCol;
            handson.MaxRows = listaDataHandson.Count;
            handson.Columnas = columnas;
            handson.ListaMerge = listaMerge;
            handson.ListaCambios = new List<CeldaCambios>(); //arrCambioCells;

            return "1";
            #endregion
        }

        /// <summary>
        /// Actualiza los insumos del factor k y sus detalles
        /// </summary>
        /// <param name="insfckcodi"></param>
        /// <param name="insfckfrc"></param>
        /// <param name="dataht"></param>
        /// <param name="usuario"></param>
        /// <param name="mensaje"></param>
        /// <returns></returns>
        public string ActualizarInsumosFactorK(int insfckcodi, decimal insfckfrc, string[][] dataht, string usuario, out string mensaje)
        {
            #region Definiendo variables globales
            mensaje = "";
            IDbConnection conn = null;
            DbTransaction tran = null;
            #endregion

            #region Actualizar Insumos Factor K
            try
            {
                #region Validación
                if (insfckcodi < 1)
                {
                    mensaje = "El código de insumo de factor K es requerido.";
                    return "-1";
                }

                if (dataht == null)
                {
                    mensaje = "Los datos del handsontable es requerido.";
                    return "-1";
                }
                #endregion

                #region Actualizar FRC en Insumos de Factor K
                conn = FactorySic.GetIndInsumosFactorKRepository().BeginConnection();
                tran = FactorySic.GetIndInsumosFactorKRepository().StartTransaction(conn);
                FactorySic.GetIndInsumosFactorKRepository().UpdateFRC(insfckcodi, insfckfrc, usuario, DateTime.Now, conn, tran);
                #endregion

                #region Actualizar datos del handsontable en Insumos Factor K Detalle
                foreach (string[] data in dataht)
                {
                    int infkdtcodi = Convert.ToInt32(data[0]);
                    if (string.IsNullOrEmpty(data[1]))
                    {
                        throw new Exception("El tipo de insumo de factor K detalle es requerido.");
                    }

                    int infkdttipo = 0;
                    switch (data[1])
                    {
                        case ConstantesIndisponibilidades.TextoCDU:
                            infkdttipo = ConstantesIndisponibilidades.TipoCDU;
                            break;
                        case ConstantesIndisponibilidades.TextoCCD:
                            infkdttipo = ConstantesIndisponibilidades.TipoCCD;
                            break;
                        case ConstantesIndisponibilidades.TextoCRD:
                            infkdttipo = ConstantesIndisponibilidades.TipoCRD;
                            break;
                        case ConstantesIndisponibilidades.TextoSUGAD:
                            infkdttipo = ConstantesIndisponibilidades.TipoSUGAD;
                            break;
                        case ConstantesIndisponibilidades.TextoSUCAD:
                            infkdttipo = ConstantesIndisponibilidades.TipoSUCAD;
                            break;
                        case ConstantesIndisponibilidades.TextoFGTE:
                            infkdttipo = ConstantesIndisponibilidades.TipoFGTE;
                            break;
                    }

                    if (infkdttipo == 0)
                    {
                        throw new Exception("El tipo de insumo de factor K detalle no es válido.");
                    }

                    string setupdates = SetInsumosFactorkDetalleByUpdates(2, data);
                    FactorySic.GetIndInsumosFactorKDetalleRepository().UpdateDays(infkdtcodi, setupdates, usuario, DateTime.Now, conn, tran);
                }
                #endregion

                tran.Commit();
            }
            catch (Exception ex)
            {
                if (tran != null)
                {
                    tran.Rollback();
                }
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            finally
            {
                if (conn != null)
                {
                    if (conn.State == ConnectionState.Open)
                    {
                        conn.Close();
                    }
                }
            }

            mensaje = "Se guardaron los datos satisfactoriamente.";
            return "1";
            #endregion
        }

        /// <summary>
        /// Construye las variables a actualizar para Insumos Factor K Detalle
        /// </summary>
        /// <param name="startIndex"></param>
        /// <param name="aData"></param>
        /// <returns></returns>
        private string SetInsumosFactorkDetalleByUpdates(int startIndex, string[] aData)
        {
            string[] aCopyData = new string[aData.Length - startIndex];
            Array.Copy(aData, startIndex, aCopyData, 0, aData.Length - startIndex);

            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < aCopyData.Length; i++)
            {
                if (!string.IsNullOrEmpty(sb.ToString())) { sb.Append(" , "); }
                string value = string.IsNullOrEmpty(aCopyData[i]) ? "null" : aCopyData[i];
                sb.AppendFormat(" D{0} = {1}", i + 1, value);
            }

            if (!string.IsNullOrEmpty(sb.ToString())) { sb.Append(" , "); }
            return sb.ToString();
        }

        /// <summary>
        /// Genera un archivo excel con el reporte del nuevo cálculo del factor K
        /// para las empresas/centrales que están registradas en Identificación de Empresas y
        /// que su gaseoducto sea mayor a 0.
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="empresa"></param>
        /// <param name="central"></param>
        /// <param name="nameFile"></param>
        public void GenerarArchivoExcelReporteCalculoFactorK(int irptcodi, string empresa, string central, out string nameFile)
        {
            nameFile = "0";

            try
            {
                this.ObtenerDatosReporteCalculoFactorK(irptcodi, empresa, central, ConstantesAppServicio.SI
                                                            , out IndReporteDTO indReporte
                                                            , out IndPeriodoDTO indPeriodo
                                                            , out IndRecalculoDTO indRecalculo
                                                            , out IndCuadroDTO indCuadro
                                                            , out List<IndReporteTotalDTO> listIndReporteTotal
                                                            , out List<IndReporteInsumosDTO> listIndReporteInsumos
                                                            , out List<IndReporteCalculosDTO> listIndReporteCalculos
                                                            , out List<IndReporteFCDTO> listIndReporteFC
                                                            );

                bool existData = (listIndReporteInsumos.Count > 0 && listIndReporteCalculos.Count > 0 && listIndReporteFC.Count > 0);
                if (!existData)
                {
                    return;
                }

                //Nombre de archivo
                string ruta = AppDomain.CurrentDomain.BaseDirectory + ConstantesAppServicio.PathArchivoExcel;
                nameFile = string.Format("PR25_CalculoFactorK_{0}_Version_{1}.xlsm", indPeriodo.Iperinombre, indReporte.Irptnumversion);
                string rutaFile = ruta + nameFile;

                FileInfo newFile = new FileInfo(rutaFile);
                if (newFile.Exists)
                {
                    newFile.Delete();
                    newFile = new FileInfo(rutaFile);
                }

                using (ExcelPackage excelPackage = new ExcelPackage(newFile))
                {
                    CrearArchivoExcelReporteCalculoFactorK(excelPackage, indReporte, indPeriodo, indRecalculo, indCuadro
                                                                        , listIndReporteTotal, listIndReporteInsumos
                                                                        , listIndReporteCalculos, listIndReporteFC);

                    excelPackage.Save();
                }

            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        /// <summary>
        /// Obtiene los datos de las tablas: Reporte, Periodo, Cuadro, IndReporte, IndPeriodo, IndCuadro, IndReporteTotal, IndReporteInsumos, IndReporteCalculos, IndReporteFC
        /// </summary>
        /// <param name="irptcodi"></param>
        /// <param name="empresa"></param>
        /// <param name="central"></param>
        /// <param name="opCom"></param>
        /// <param name="indReporte"></param>
        /// <param name="indPeriodo"></param>
        /// <param name="indRecalculo"></param>
        /// <param name="indCuadro"></param>
        /// <param name="listIndReporteTotal"></param>
        /// <param name="listIndReporteInsumos"></param>
        /// <param name="listIndReporteCalculos"></param>
        /// <param name="listIndReporteFC"></param>
        private void ObtenerDatosReporteCalculoFactorK(int irptcodi, string empresa, string central, string opCom
                                                    , out IndReporteDTO indReporte, out IndPeriodoDTO indPeriodo, out IndRecalculoDTO indRecalculo, out IndCuadroDTO indCuadro
                                                    , out List<IndReporteTotalDTO> listIndReporteTotal, out List<IndReporteInsumosDTO> listIndReporteInsumos
                                                    , out List<IndReporteCalculosDTO> listIndReporteCalculos, out List<IndReporteFCDTO> listIndReporteFC)
        {
            #region indReporte, indPeriodo, indRecalculo, indCuadro
            indReporte = this.GetByIdIndReporte(irptcodi);
            indCuadro = this.GetByIdIndCuadro(indReporte.Icuacodi);
            indRecalculo = this.GetByIdIndRecalculo(indReporte.Irecacodi);
            indPeriodo = this.GetByIdIndPeriodo(indRecalculo.Ipericodi);
            #endregion

            #region listIndReporteTotal
            listIndReporteTotal = GetByCriteriaIndReporteTotals(irptcodi).OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Itotincremental).ThenBy(x => x.Equinomb).ToList();

            opCom = !string.IsNullOrEmpty(opCom) ? opCom : ConstantesAppServicio.ParametroDefecto; //NO DEBER SER PARAMETRO POR DEFECTO = -1. REVISAR
            empresa = !string.IsNullOrEmpty(empresa) ? empresa : ConstantesAppServicio.ParametroDefecto;
            central = !string.IsNullOrEmpty(central) ? central : ConstantesAppServicio.ParametroDefecto;
            if (empresa == "-2") empresa = ConstantesAppServicio.ParametroDefecto;
            if (central == "-2") central = ConstantesAppServicio.ParametroDefecto;

            //filtrar por tipo de equipo, en cuadro 7 se guardar termo e hidro en la misma version
            List<int> listFamcodi = indCuadro.ListaFamcodi;
            listIndReporteTotal = listIndReporteTotal.Where(x => listFamcodi.Contains(x.Famcodi)).ToList();

            if (ConstantesAppServicio.ParametroDefecto != opCom)
            {
                listIndReporteTotal = listIndReporteTotal.Where(x => x.Itotopcom == opCom).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != empresa)
            {
                int[] emprcodis = empresa.Split(',').Select(x => int.Parse(x)).ToArray();
                listIndReporteTotal = listIndReporteTotal.Where(x => emprcodis.Contains(x.Emprcodi)).ToList();
            }

            if (ConstantesAppServicio.ParametroDefecto != central)
            {
                int[] equipadres = central.Split(',').Select(x => int.Parse(x)).ToArray();
                listIndReporteTotal = listIndReporteTotal.Where(x => equipadres.Contains(x.Equipadre)).ToList();
            }

            foreach (var reg in listIndReporteTotal)
            {
                reg.EsUnaUnidadXCentral = (listIndReporteTotal.Where(x => x.Equipadre == reg.Equipadre).Count() == 1);
            }
            #endregion

            #region listIndReporteInsumos, listIndReporteCalculos, listIndReporteFC
            List<int> listItotcodi = listIndReporteTotal.Select(x => x.Itotcodi).ToList();
            StringBuilder sbItotcodi = new StringBuilder();
            foreach (int itotcodi in listItotcodi)
            {
                if (!string.IsNullOrEmpty(sbItotcodi.ToString())) { sbItotcodi.Append(","); }
                sbItotcodi.Append(itotcodi);
            }

            listIndReporteInsumos = FactorySic.GetIndReporteInsumosRepository().GetByCriteria(sbItotcodi.ToString());
            listIndReporteCalculos = FactorySic.GetIndReporteCalculosRepository().GetByCriteria(sbItotcodi.ToString());
            listIndReporteFC = FactorySic.GetIndReporteFCRepository().GetByCriteria(sbItotcodi.ToString());
            #endregion
        }

        /// <summary>
        /// Crea un archivo excel para el reporte del cálculo del factor K
        /// </summary>
        /// <param name="excelPackage"></param>
        /// <param name="indReporte"></param>
        /// <param name="indPeriodo"></param>
        /// <param name="indRecalculo"></param>
        /// <param name="indCuadro"></param>
        /// <param name="listIndReporteTotal"></param>
        /// <param name="listIndReporteInsumos"></param>
        /// <param name="listIndReporteCalculos"></param>
        /// <param name="listIndReporteFC"></param>
        private void CrearArchivoExcelReporteCalculoFactorK(ExcelPackage excelPackage, IndReporteDTO indReporte, IndPeriodoDTO indPeriodo, IndRecalculoDTO indRecalculo, IndCuadroDTO indCuadro
                                                    , List<IndReporteTotalDTO> listIndReporteTotal, List<IndReporteInsumosDTO> listIndReporteInsumos
                                                    , List<IndReporteCalculosDTO> listIndReporteCalculos, List<IndReporteFCDTO> listIndReporteFC)
        {
            #region Crear archivo Excel
            try
            {
                #region Validaciones
                bool existIndPeriod = (indPeriodo != null);
                if (!existIndPeriod)
                {
                    throw new Exception("El periodo es requerido.");
                }

                bool existListIndReporteTotal = (listIndReporteTotal != null && listIndReporteTotal.Count > 0);
                if (!existListIndReporteTotal)
                {
                    return;
                }
                #endregion

                #region Variables globales
                int row = 1;
                int col = 1;
                int[] tipos = {
                        ConstantesIndisponibilidades.TipoCDU,
                        ConstantesIndisponibilidades.TipoCRD,
                        ConstantesIndisponibilidades.TipoCCD,
                        ConstantesIndisponibilidades.TipoSUGAD,
                        ConstantesIndisponibilidades.TipoSUCAD,
                        ConstantesIndisponibilidades.TipoFGTC1,
                        ConstantesIndisponibilidades.TipoFGTC2,
                        ConstantesIndisponibilidades.TipoFGTC3,
                        ConstantesIndisponibilidades.TipoFGTCMIN,
                        ConstantesIndisponibilidades.TipoSUGAD_CMTR,
                        ConstantesIndisponibilidades.TipoSUCAD_CN2GX24,
                        ConstantesIndisponibilidades.TipoFGTC,
                        ConstantesIndisponibilidades.TipoFGTE,
                        ConstantesIndisponibilidades.TipoFG
                    };
                string colorNegro = "#000000";
                string Emprnomb = null;
                string Central = null;
                bool showPeriodo = true;
                string namePeriodo = EPDate.f_NombreMes(indPeriodo.Iperimes).ToUpper();
                int diaInicio = indRecalculo.Irecafechaini.Date.Day;
                int diaFin = indRecalculo.Irecafechafin.Date.Day;
                int numDias = (indRecalculo.Irecafechafin.Date - indRecalculo.Irecafechaini.Date).Days + 1;
                listIndReporteTotal = listIndReporteTotal.OrderBy(x => x.Emprnomb).ThenBy(x => x.Central).ThenBy(x => x.Itotincremental).ThenBy(x => x.Equinomb).ToList();

                excelPackage.Workbook.CreateVBAProject();
                ExcelWorksheet ews = null;
                #endregion

                #region Recorriendo listIndReporteTotal
                foreach (IndReporteTotalDTO indReporteTotal in listIndReporteTotal)
                {
                    #region Obtener indReporteFC, indReporteInsumos, indReporteCalculos
                    List<IndReporteFCDTO> listFC = null;
                    bool existListIndReporteFC = (listIndReporteFC != null && listIndReporteFC.Count > 0);
                    if (existListIndReporteFC)
                    {
                        listFC = listIndReporteFC.Where(x => x.Itotcodi == indReporteTotal.Itotcodi).ToList();
                    }

                    List<IndReporteInsumosDTO> listInsumos = null;
                    bool existListIndReporteInsumos = (listIndReporteInsumos != null && listIndReporteInsumos.Count > 0);
                    if (existListIndReporteInsumos)
                    {
                        listInsumos = listIndReporteInsumos.Where(x => x.Itotcodi == indReporteTotal.Itotcodi).ToList();
                    }

                    List<IndReporteCalculosDTO> listCalculos = null;
                    bool existListIndReporteCalculos = (listIndReporteCalculos != null && listIndReporteCalculos.Count > 0);
                    if (existListIndReporteCalculos)
                    {
                        listCalculos = listIndReporteCalculos.Where(x => x.Itotcodi == indReporteTotal.Itotcodi).ToList();
                    }

                    bool noTieneDatos = ((listFC == null || listFC.Count == 0) &&
                                         (listInsumos == null || listInsumos.Count == 0) &&
                                         (listCalculos == null || listCalculos.Count == 0));
                    if (noTieneDatos)
                    {
                        continue;
                    }
                    #endregion

                    #region Identificando cambio de empresa
                    bool equalEmprnomb = indReporteTotal.Emprnomb.Equals(Emprnomb);
                    if (!equalEmprnomb)
                    {
                        row = 1;
                        col = 1;
                        showPeriodo = true;
                        Emprnomb = indReporteTotal.Emprnomb;
                        int longuitud = (Emprnomb.Length > 30) ? 30 : Emprnomb.Length;
                        ews = excelPackage.Workbook.Worksheets.Add(Emprnomb.Substring(0, longuitud));
                        ews = excelPackage.Workbook.Worksheets[Emprnomb.Substring(0, longuitud)];
                    }
                    #endregion

                    #region Identificando cambio de central
                    bool equalCentral = indReporteTotal.Central.Equals(Central);
                    if (!equalCentral)
                    {
                        Central = indReporteTotal.Central;
                    }
                    StringBuilder sbCentral;
                    #endregion

                    #region Cabecera
                    if (showPeriodo)
                    {
                        ews.Cells[row, col].Value = namePeriodo;
                        UtilExcel.FontBold(ews.Cells[row, col]);
                        row += 2;
                        showPeriodo = false;
                    }

                    ews.Cells[row, col].Value = "FC"; row++;
                    ews.Cells[row, col].Value = "PC/m3"; col++;
                    ews.Cells[row, col].Value = indReporteTotal.Itotpcm3; row++; col = 1;
                    ews.Cells[row, col].Value = "Litro"; col++;
                    ews.Cells[row, col].Value = indReporteTotal.Itot1ltvalor; col++;
                    ews.Cells[row, col].Value = indReporteTotal.Itot1ltunidad; row += 2; col = 2;

                    bool existListFC = (listFC != null && listFC.Count > 0);
                    if (existListFC)
                    {
                        int countTipoCombustible = 0;
                        listFC = listFC.OrderBy(x => x.Itotcodi).ThenBy(x => x.Irptfcsec).ToList();
                        foreach (IndReporteFCDTO indReporteFC in listFC)
                        {
                            countTipoCombustible++;
                            if (countTipoCombustible > 1)
                            {
                                row -= 2;
                                col += 2;
                            }

                            sbCentral = new StringBuilder();
                            sbCentral.Append(indReporteTotal.Central);
                            if (!string.IsNullOrEmpty(indReporteTotal.Itotunidadnomb))
                            {
                                sbCentral.Append(" - ");
                                sbCentral.Append(indReporteTotal.Itotunidadnomb);
                            }
                            if (!string.IsNullOrEmpty(indReporteFC.Irptfcnomcombustible))
                            {
                                sbCentral.Append(" - ");
                                sbCentral.Append(indReporteFC.Irptfcnomcombustible);
                            }
                            if (!string.IsNullOrEmpty(indReporteFC.Irptfcrngdias))
                            {
                                sbCentral.Append(" - Rango de días: ");
                                sbCentral.Append(indReporteFC.Irptfcrngdias);
                            }

                            ews.Cells[row, col].Value = sbCentral.ToString();
                            UtilExcel.SetFontColor(ews.Cells[row, col], Color.Blue);
                            row++;

                            if (indReporteFC.Irptfctipcombustible == ConstantesIndisponibilidades.TipoCombustibleGasNatural)
                            {
                                ews.Cells[row, col].Value = "MW";
                                UtilExcel.FontBold(ews.Cells[row, col]);
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = "m3/h";
                                UtilExcel.FontBold(ews.Cells[row, col]);
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = "1000m3/h";
                                UtilExcel.FontBold(ews.Cells[row, col]);
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = "KPC/h";
                                UtilExcel.FontBold(ews.Cells[row, col]);
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = "MMPC/h";
                                UtilExcel.FontBold(ews.Cells[row, col]);
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col - 4, row, col, "Centro");
                                row++; col -= 4;

                                ews.Cells[row, col].Value = indReporteFC.Irptfcmw;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfcm3h;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfc1000m3h;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfckpch;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfcmmpch;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col - 4, row, col, "Derecha");
                            }
                            else if (indReporteFC.Irptfctipcombustible == ConstantesIndisponibilidades.TipoCombustibleDiferenteGasNatural)
                            {
                                ews.Cells[row, col].Value = "MW";
                                UtilExcel.FontBold(ews.Cells[row, col]);
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = "l/h";
                                UtilExcel.FontBold(ews.Cells[row, col]);
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = "gal/h";
                                UtilExcel.FontBold(ews.Cells[row, col]);
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col - 2, row, col, "Centro");
                                row++; col -= 2;

                                ews.Cells[row, col].Value = indReporteFC.Irptfcmw;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfclh;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfcgalh;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col - 2, row, col, "Derecha");
                            }
                        }
                    }
                    row += 2; col = 2;

                    sbCentral = new StringBuilder();
                    sbCentral.Append(indReporteTotal.Central);
                    if (!string.IsNullOrEmpty(indReporteTotal.Itotunidadnomb))
                    {
                        sbCentral.Append(" - ");
                        sbCentral.Append(indReporteTotal.Itotunidadnomb);
                    }
                    ews.Cells[row, col].Value = sbCentral.ToString();
                    UtilExcel.SetFontColor(ews.Cells[row, col], Color.Blue);
                    int rowLast = row;
                    row++;

                    if (existListFC)
                    {
                        int rowFirst = 0;
                        int countTipoCombustible = 0;

                        listFC = listFC.OrderBy(x => x.Itotcodi).ThenBy(x => x.Irptfcsec).ToList();
                        foreach (IndReporteFCDTO indReporteFC in listFC)
                        {
                            countTipoCombustible++;
                            if (countTipoCombustible > 1)
                            {
                                row = rowFirst;
                                col += 5;
                            }

                            if (indReporteFC.Irptfctipcombustible == ConstantesIndisponibilidades.TipoCombustibleGasNatural)
                            {
                                ews.Cells[row, col].Value = "CN (MMPC/h)"; rowFirst = row; col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfcmmpch; row++; col--;
                                ews.Cells[row, col].Value = "CMTR"; col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfccmtr; row++; col--;
                                ews.Cells[row, col].Value = "FGTE"; col++;
                                ews.Cells[row, col].Value = indReporteTotal.Itotfgte; row++; col--;
                                ews.Cells[row, col].Value = "Días"; col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfcnumdias; row++; col--;
                                ews.Cells[row, col].Value = "FRC"; col++;
                                ews.Cells[row, col].Value = indReporteTotal.Itotfrc; rowLast = row;
                            }
                            else if (indReporteFC.Irptfctipcombustible == ConstantesIndisponibilidades.TipoCombustibleDiferenteGasNatural)
                            {
                                ews.Cells[row, col].Value = "CN2 (gal/h)"; col++;
                                ews.Cells[row, col].Value = indReporteFC.Irptfcgalh;
                            }
                        }
                    }
                    row = rowLast + 2; col = 2;
                    #endregion

                    #region Cuerpo
                    ews.Cells[row, col].Value = "Capacidad Día i(MMPCD) - " + sbCentral.ToString();
                    UtilExcel.FontBold(ews.Cells[row, col]);
                    UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col + numDias, colorNegro);
                    UtilExcel.CeldasExcelAgrupar(ews, row, col, row, col + numDias);
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col, row, col + numDias, "Centro");
                    UtilExcel.SetBackgroundColor(ews.Cells[row, col, row, col + numDias], Color.DarkGray);
                    row++;

                    ews.Cells[row, col].Value = "Día i";
                    UtilExcel.FontBold(ews.Cells[row, col]);
                    UtilExcel.SetBackgroundColor(ews.Cells[row, col], Color.DarkGray);
                    UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col, row, col, "Centro");
                    for (int i = diaInicio; i <= diaFin; i++)
                    {
                        col++;
                        ews.Cells[row, col].Value = i;
                        UtilExcel.FontBold(ews.Cells[row, col]);
                        UtilExcel.SetBackgroundColor(ews.Cells[row, col], Color.DarkGray);
                        UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                        UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col, row, col, "Centro");
                    }
                    row++;
                    col = 2;

                    foreach (int tipo in tipos)
                    {
                        #region Inicializando variables
                        IndReporteInsumosDTO insumo = null;
                        IndReporteCalculosDTO calculo = null;
                        if (tipo < ConstantesIndisponibilidades.TipoFGTC1)
                        {
                            bool existListInsumos = (listInsumos != null && listInsumos.Count > 0);
                            if (existListInsumos)
                            {
                                List<IndReporteInsumosDTO> list = listInsumos.Where(x => x.Irpinstipo == tipo).ToList();
                                insumo = (list != null && list.Count > 0) ? list.FirstOrDefault() : null;
                            }
                        }
                        else
                        {
                            bool existListCalculos = (listCalculos != null && listCalculos.Count > 0);
                            if (existListCalculos)
                            {
                                List<IndReporteCalculosDTO> list = listCalculos.Where(x => x.Irpcaltipo == tipo).ToList();
                                calculo = (list != null && list.Count > 0) ? list.FirstOrDefault() : null;
                            }
                        }

                        string texto = "";
                        switch (tipo)
                        {
                            case ConstantesIndisponibilidades.TipoCDU:
                                texto = ConstantesIndisponibilidades.TextoCDU;
                                break;
                            case ConstantesIndisponibilidades.TipoCRD:
                                texto = ConstantesIndisponibilidades.TextoCRD;
                                break;
                            case ConstantesIndisponibilidades.TipoCCD:
                                texto = ConstantesIndisponibilidades.TextoCCD;
                                break;
                            case ConstantesIndisponibilidades.TipoSUGAD:
                                texto = ConstantesIndisponibilidades.TextoSUGAD;
                                break;
                            case ConstantesIndisponibilidades.TipoSUCAD:
                                texto = ConstantesIndisponibilidades.TextoSUCAD;
                                break;
                            case ConstantesIndisponibilidades.TipoFGTC1:
                                texto = ConstantesIndisponibilidades.TextoFGTC1Bi;
                                break;
                            case ConstantesIndisponibilidades.TipoFGTC2:
                                texto = ConstantesIndisponibilidades.TextoFGTC2Bi;
                                break;
                            case ConstantesIndisponibilidades.TipoFGTC3:
                                texto = ConstantesIndisponibilidades.TextoFGTC3Bi;
                                break;
                            case ConstantesIndisponibilidades.TipoFGTCMIN:
                                texto = ConstantesIndisponibilidades.TextoFGTCiMIN;
                                break;
                            case ConstantesIndisponibilidades.TipoSUGAD_CMTR:
                                texto = ConstantesIndisponibilidades.TextoSUGADBi_CMTRB;
                                break;
                            case ConstantesIndisponibilidades.TipoSUCAD_CN2GX24:
                                texto = ConstantesIndisponibilidades.TextoSUCADCi_CN2GX24;
                                break;
                            case ConstantesIndisponibilidades.TipoFGTC:
                                texto = ConstantesIndisponibilidades.TextoFGTCBi;
                                break;
                            case ConstantesIndisponibilidades.TipoFGTE:
                                texto = ConstantesIndisponibilidades.TextoFGTEB;
                                break;
                            case ConstantesIndisponibilidades.TipoFG:
                                texto = ConstantesIndisponibilidades.TextoFGi;
                                break;
                        }
                        #endregion

                        #region Escribir registro según el tipo
                        ews.Cells[row, col].Value = texto;
                        UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                        switch (tipo)
                        {
                            case ConstantesIndisponibilidades.TipoFGTC:
                            case ConstantesIndisponibilidades.TipoFGTE:
                            case ConstantesIndisponibilidades.TipoFG:
                                UtilExcel.SetBackgroundColor(ews.Cells[row, col], Color.LightSteelBlue);
                                break;
                        }

                        for (int i = diaInicio; i <= diaFin; i++)
                        {
                            col++;
                            if (tipo < ConstantesIndisponibilidades.TipoFGTC1)
                            {
                                var value = (insumo != null) ? insumo.GetType().GetProperty("D" + i).GetValue(insumo) : "-";
                                ews.Cells[row, col].Value = value;
                            }
                            else
                            {
                                var value = (calculo != null) ? calculo.GetType().GetProperty("D" + i).GetValue(calculo) : "-";
                                ews.Cells[row, col].Value = value;
                            }
                            UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                            UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col, row, col, "Derecha");
                            switch (tipo)
                            {
                                case ConstantesIndisponibilidades.TipoFGTC:
                                case ConstantesIndisponibilidades.TipoFGTE:
                                case ConstantesIndisponibilidades.TipoFG:
                                    UtilExcel.SetBackgroundColor(ews.Cells[row, col], Color.LightSteelBlue);
                                    break;
                            }
                        }
                        #endregion

                        #region Instrucciones post escribir registro
                        switch (tipo)
                        {
                            case ConstantesIndisponibilidades.TipoSUCAD:
                                col = 2;
                                row += 2;
                                ews.Cells[row, col].Value = ConstantesIndisponibilidades.TextoCalculos; row++;
                                break;
                            case ConstantesIndisponibilidades.TipoFGTCMIN:
                                col = 2;
                                row += 4;
                                ews.Cells[row, col].Value = texto;
                                UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                for (int i = diaInicio; i <= diaFin; i++)
                                {
                                    col++;
                                    var value = (calculo != null) ? calculo.GetType().GetProperty("D" + i).GetValue(calculo) : "-";
                                    ews.Cells[row, col].Value = value;
                                    UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                                    UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col, row, col, "Derecha");
                                }
                                break;
                            case ConstantesIndisponibilidades.TipoFGTC:
                            case ConstantesIndisponibilidades.TipoFGTE:
                            case ConstantesIndisponibilidades.TipoFG:
                                row += 3;
                                break;
                        }

                        row++;
                        col = 2;
                        #endregion
                    }

                    #region Escribir registro K
                    ews.Cells[row, col].Value = ConstantesIndisponibilidades.TextoK;
                    UtilExcel.SetBackgroundColor(ews.Cells[row, col], Color.DarkGray);
                    UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                    col++;

                    bool existItotfactork = (indReporteTotal.Itotfactork != null);
                    if (existItotfactork)
                    {
                        ews.Cells[row, col].Value = indReporteTotal.Itotfactork;
                    }
                    else
                    {
                        ews.Cells[row, col].Value = "---";
                    }
                    UtilExcel.SetBackgroundColor(ews.Cells[row, col], Color.DarkGray);
                    UtilExcel.BorderCeldasLineaDelgada(ews, row, col, row, col, colorNegro);
                    UtilExcel.CeldasExcelAlinearHorizontalmente(ews, row, col, row, col, "Derecha");
                    row += 2; col = 1;
                    UtilExcel.SetBackgroundColor(ews.Cells[row, col, row, col + numDias + 2], Color.DodgerBlue);
                    row += 3;
                    #endregion
                    #endregion
                }
                #endregion
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            #endregion
        }
        #endregion

        #region Cálculo del Factor K

        /// <summary>
        /// Valida los datos del nuevo cálculo del factor K para el Cuadro 3 con respecto a un recalculo específico 
        /// </summary>
        /// <param name="indRecalculo"></param>
        /// <param name="listRVA"></param>
        /// <returns></returns>
        public List<ResultadoValidacionAplicativo> ValidarDatosNuevoCalculoFactorK(IndRecalculoDTO indRecalculo, out List<ResultadoValidacionAplicativo> listRVA)
        {
            listRVA = new List<ResultadoValidacionAplicativo>();

            try
            {
                #region Vallidaciones
                if (indRecalculo == null)
                {
                    throw new Exception("El recálculo es requerido.");
                }

                if (indRecalculo.Irecafechaini == null)
                {
                    throw new Exception("La fecha inicio del recálculo es requerida.");
                }

                if (indRecalculo.Irecafechafin == null)
                {
                    throw new Exception("La fecha fin del recálculo es requerida.");
                }

                IndPeriodoDTO indPeriodo = FactorySic.GetIndPeriodoRepository().GetById(indRecalculo.Ipericodi);
                if (indPeriodo == null)
                {
                    throw new Exception("El periodo es requerido.");
                }
                #endregion

                #region Obteniendo variables globales
                int diaInicio = indRecalculo.Irecafechaini.Date.Day;
                int diaFin = indRecalculo.Irecafechafin.Date.Day;

                List<IndRelacionEmpresaDTO> listIndRelacionEmpresa = FactorySic.GetIIndRelacionEmpresaRepository().List();
                bool existListIndRelacionEmpresa = (listIndRelacionEmpresa != null && listIndRelacionEmpresa.Count > 0);
                if (!existListIndRelacionEmpresa)
                {
                    listRVA.Add(CreateRVA(1, "No existen registros en el módulo de 'Identificación de empresas y sus centrales o unidades de generación asociados'"));
                    return listRVA;
                }
                listIndRelacionEmpresa = listIndRelacionEmpresa.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ThenBy(x => x.Relempunidadnomb).ToList();

                List<IndInsumosFactorKDTO> listIndInsumosFactorK = FactorySic.GetIndInsumosFactorKRepository().GetByPeriodo(indRecalculo.Ipericodi);
                bool existListIndInsumosFactorK = (listIndInsumosFactorK != null && listIndInsumosFactorK.Count() > 0);
                if (!existListIndInsumosFactorK)
                {
                    listRVA.Add(CreateRVA(1, string.Format("No existen registros de Insumos del Factor K para el periodo {0}", indPeriodo.Iperinombre)));
                    return listRVA;
                }

                List<IndInsumosFactorKDetalleDTO> listIndInsumosFactorKDetalle = FactorySic.GetIndInsumosFactorKDetalleRepository().GetByPeriodo(indRecalculo.Ipericodi);
                bool existListIndInsumosFactorKDetalle = (listIndInsumosFactorKDetalle != null && listIndInsumosFactorKDetalle.Count > 0);
                if (!existListIndInsumosFactorKDetalle)
                {
                    listRVA.Add(CreateRVA(1, string.Format("No existen registros de detalle de Insumos del Factor K para el periodo {0}", indPeriodo.Iperinombre)));
                    return listRVA;
                }
                #endregion

                #region Recorriendo Lista de Relacion de Empresas
                foreach (IndRelacionEmpresaDTO indRelacionEmpresa in listIndRelacionEmpresa)
                {
                    if (indRelacionEmpresa.Gaseoductoequicodi > 0)
                    {
                        StringBuilder validFRC = new StringBuilder();
                        StringBuilder validFGTE = new StringBuilder();
                        string whoRelacionEmpresa = string.Format("<b>Empresa:</b> {0}; <b>Central:</b> {1}; <b>Unidad:</b> {2}", indRelacionEmpresa.Emprnomb, indRelacionEmpresa.Equinomb, indRelacionEmpresa.Relempunidadnomb);

                        List<IndInsumosFactorKDTO> list1 = listIndInsumosFactorK.Where(x =>
                                                            x.Ipericodi == indRecalculo.Ipericodi &&
                                                            //x.Emprcodi == indRelacionEmpresa.Emprcodi &&
                                                            x.Equicodicentral == indRelacionEmpresa.Equicodicentral &&
                                                            x.Equicodiunidad == indRelacionEmpresa.Equicodiunidad &&
                                                            x.Grupocodi == indRelacionEmpresa.Grupocodi &&
                                                            x.Famcodi == indRelacionEmpresa.Famcodi
                                                            ).ToList();
                        bool existList1 = (list1 != null && list1.Count > 0);
                        if (!existList1)
                        {
                            listRVA.Add(CreateRVA(1, string.Format("{0} <b>=></b> <b>FRC</b> no existe; <b>FGTE</b> no existe", whoRelacionEmpresa)));
                            continue;
                        }
                        IndInsumosFactorKDTO indInsumosFactorK = list1.FirstOrDefault();

                        if (indInsumosFactorK.Insfckfrc == null)
                        {
                            validFRC.Append(" <b>FRC</b> no existe;");
                        }
                        else if (indInsumosFactorK.Insfckfrc.Value <= 0)
                        {
                            validFRC.Append(" <b>FRC</b> es menor ó igual a 0;");
                        }

                        List<IndInsumosFactorKDetalleDTO> list2 = listIndInsumosFactorKDetalle.Where(x =>
                                                                        x.Insfckcodi == indInsumosFactorK.Insfckcodi &&
                                                                        x.Infkdttipo == ConstantesIndisponibilidades.TipoFGTE
                                                                        ).ToList();
                        bool existList2 = (list2 != null && list2.Count > 0);
                        if (!existList2)
                        {
                            listRVA.Add(CreateRVA(1, string.Format("{0} <b>=></b>{1} <b>FGTE</b> no existe", whoRelacionEmpresa, validFRC.ToString())));
                            continue;
                        }
                        IndInsumosFactorKDetalleDTO indInsumosFactorKDetalle = list2.FirstOrDefault();

                        for (int i = diaInicio; i <= diaFin; i++)
                        {
                            bool isValid = true;
                            object value = indInsumosFactorKDetalle.GetType().GetProperty("D" + i).GetValue(indInsumosFactorKDetalle);
                            bool isNullOrEmptyValue = (value == null || string.IsNullOrEmpty(value.ToString().Trim()));

                            if (isNullOrEmptyValue)
                            {
                                isValid = false;
                            }
                            else
                            {
                                bool isLowerOrEqualThanZero = (((decimal)value) <= 0);
                                if (isLowerOrEqualThanZero)
                                {
                                    isValid = false;
                                }
                            }

                            if (!isValid)
                            {
                                bool isLowerThanOne = (validFGTE.ToString().Length < 1);
                                if (isLowerThanOne)
                                {
                                    validFGTE.Append("<b>FGTE</b> es vacío, o es menor ó igual a 0 para los días: ");
                                }

                                validFGTE.Append(i);
                                validFGTE.Append(",");
                            }
                        }

                        bool isGreaterThanZero = (validFGTE.ToString().Length > 0);
                        if (isGreaterThanZero)
                        {
                            validFGTE.Remove(validFGTE.ToString().Length - 1, 1);
                        }

                        bool isLengthGreaterThanZero = (validFRC.ToString().Length > 0 || validFGTE.ToString().Length > 0);
                        if (isLengthGreaterThanZero)
                        {
                            listRVA.Add(CreateRVA(1, string.Format("{0} <b>=></b>{1} {2}", whoRelacionEmpresa, validFRC.ToString(), validFGTE.ToString())));
                        }
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                throw ex;
            }

            return listRVA;
        }

        /// <summary>
        /// Crea e instancia un objeto ResultadoValidacionAplicativo 
        /// </summary>
        /// <param name="tipo"></param>
        /// <param name="desc"></param>
        /// <returns></returns>
        private ResultadoValidacionAplicativo CreateRVA(int tipo, string desc)
        {
            ResultadoValidacionAplicativo rva = new ResultadoValidacionAplicativo()
            {
                TipoResultado = tipo,
                Descripcion = desc
            };

            return rva;
        }

        /// <summary>
        /// Generar html de verificación para Cuadro N°3 Factor K 
        /// </summary>
        /// <param name="lista"></param>
        /// <returns></returns>
        public string GenerarHtmlVerificacionCuadro3FactorK(List<ResultadoValidacionAplicativo> lista)
        {
            StringBuilder strHtml = new StringBuilder();

            if (lista.Any())
            {
                strHtml.Append(@"<strong>Existen observaciones</strong>: <br/>");

                string head = @"
                    <table border='0' class='pretty tabla-adicional' cellspacing='0' id='tabla_verif'>
                        <thead>
                            <tr>
                                <th>Tipo </th>
                                <th>Descripción</th>
                            </tr>
                        </thead>
                        <tbody>
                ";
                strHtml.Append(head);

                foreach (var regVerif in lista)
                {
                    var tipo = regVerif.TipoResultado == 0 ? "Informativo" : "Alerta";
                    var stylecss = regVerif.TipoResultado == 0 ? "blue" : "#ff8100";
                    var descrip = regVerif.Descripcion;

                    string filaTr = string.Format(@"
                                    <tr>
                                        <td style='color: {0};'>{1}</td>
                                        <td style='text-align: left; '>{2}</td>
                                    </tr>
                                    "
                                    , stylecss
                                    , tipo
                                    , descrip
                                    );

                    strHtml.Append(filaTr);
                }

                string foot = @"
                            </tbody>
                    </table>";
                strHtml.Append(foot);
            }
            else
            {
                strHtml.Append("No existen mensajes, puede continuar con el proceso.");
            }

            return strHtml.ToString();
        }

        /// <summary>
        /// Genera los datos (para sus tablas respectivas) del nuevo cálculo del factor K para las empresas registradas
        /// en el módulo de Identificación de Empresas y sus centrales o unidades generadoras
        /// </summary>
        /// <param name="indRecalculo"></param>
        /// <returns></returns>
        private List<IndReporteTotalDTO> GenerarReporteTotalConNuevoCalculoFactorK(IndRecalculoDTO indRecalculo)
        {
            #region Generar Reporte Total con el nuevo cálculo del factor K
            String whoIndRelacionEmpresa = null;

            try
            {
                #region Vallidaciones
                if (indRecalculo == null)
                {
                    throw new Exception("El recálculo es requerido.");
                }

                if (indRecalculo.Irecafechaini == null)
                {
                    throw new Exception("La fecha inicio del recálculo es requerida.");
                }

                if (indRecalculo.Irecafechafin == null)
                {
                    throw new Exception("La fecha fin del recálculo es requerida.");
                }

                IndPeriodoDTO indPeriodo = FactorySic.GetIndPeriodoRepository().GetById(indRecalculo.Ipericodi);
                if (indPeriodo == null)
                {
                    throw new Exception("El periodo es requerido.");
                }
                #endregion

                #region Obteniendo variables globales
                decimal fcPcm3 = ConstantesIndisponibilidades.FcPcm3;
                decimal fcGal = ConstantesIndisponibilidades.FcGal;

                List<IndRelacionEmpresaDTO> listIndRelacionEmpresa = FactorySic.GetIIndRelacionEmpresaRepository().List();
                bool existListIndRelacionEmpresa = (listIndRelacionEmpresa != null && listIndRelacionEmpresa.Count > 0);
                if (!existListIndRelacionEmpresa)
                {
                    throw new Exception("No existen registros en el módulo de 'Identificación de empresas y sus centrales o unidades de generación asociados'");
                }
                listIndRelacionEmpresa = listIndRelacionEmpresa.OrderBy(x => x.Emprnomb).ThenBy(x => x.Equinomb).ThenBy(x => x.Relempunidadnomb).ToList();

                List<IndInsumosFactorKDTO> listIndInsumosFactorK = FactorySic.GetIndInsumosFactorKRepository().GetByPeriodo(indRecalculo.Ipericodi);
                bool existListIndInsumosFactorK = (listIndInsumosFactorK != null && listIndInsumosFactorK.Count() > 0);
                if (!existListIndInsumosFactorK)
                {
                    throw new Exception(string.Format("No existen registros de Insumos del Factor K para el periodo {0}", indPeriodo.Iperinombre));
                }

                List<IndInsumosFactorKDetalleDTO> listIndInsumosFactorKDetalle = FactorySic.GetIndInsumosFactorKDetalleRepository().GetByPeriodo(indRecalculo.Ipericodi);
                bool existListIndInsumosFactorKDetalle = (listIndInsumosFactorKDetalle != null && listIndInsumosFactorKDetalle.Count > 0);
                if (!existListIndInsumosFactorKDetalle)
                {
                    throw new Exception(string.Format("No existen registros de detalle de Insumos del Factor K para el periodo {0}", indPeriodo.Iperinombre));
                }

                String stkdettipo = string.Format("'{0}'", ConstantesIndisponibilidades.StkdettipoModificado);
                List<IndStkCombustibleDetalleDTO> listIndStkCombustibleDetalle = FactorySic.GetIndStkCombustibleDetalleRepository().GetByPeriod(indRecalculo.Ipericodi, "-1", stkdettipo);
                bool existListIndStkCombustibleDetalle = (listIndStkCombustibleDetalle != null && listIndStkCombustibleDetalle.Count > 0);
                if (!existListIndStkCombustibleDetalle)
                {
                    throw new Exception(string.Format("No existen registros de detalle de Stock de Combustible para el periodo {0}", indPeriodo.Iperinombre));
                }

                ListarUnidadTermicoOpComercial(ConstantesIndisponibilidades.AppPR25, indRecalculo.Irecafechaini, indRecalculo.Irecafechafin, out List<EqEquipoDTO> listaUnidades, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj);
                #endregion

                #region Recorriendo Lista de Relación de Empresas
                List<IndReporteTotalDTO> listIndReporteTotal = new List<IndReporteTotalDTO>();
                foreach (IndRelacionEmpresaDTO indRelacionEmpresa in listIndRelacionEmpresa)
                {
                    #region Verifica si continúa con el siguiente registro
                    whoIndRelacionEmpresa = string.Format("La empresa: {0} ({1}), con central: {2} ({3}), unidad: {4} ({5}) y grupocodi: {6}.", indRelacionEmpresa.Emprnomb, indRelacionEmpresa.Emprcodi, indRelacionEmpresa.Equinomb, indRelacionEmpresa.Equicodicentral, indRelacionEmpresa.Relempunidadnomb, indRelacionEmpresa.Equicodiunidad, indRelacionEmpresa.Grupocodi);

                    bool enabled = (indRelacionEmpresa.Relempestado != null && indRelacionEmpresa.Relempestado.ToUpper() == "S");
                    if (!enabled)
                    {
                        continue;
                    }

                    int grupoincremental = 0;
                    decimal? pe = null;
                    EqEquipoDTO unidad = null;
                    List<EqEquipoDTO> list1 = listaUnidades.Where(x =>
                                        //x.Emprcodi == indRelacionEmpresa.Emprcodi &&
                                        x.Equipadre == indRelacionEmpresa.Equicodicentral &&
                                        x.Equicodi == indRelacionEmpresa.Equicodiunidad &&
                                        x.Grupocodi == indRelacionEmpresa.Grupocodi //&& 
                                                                                    //x.Famcodi == indRelacionEmpresa.Famcodi 
                                        ).ToList();
                    bool existList1 = (list1 != null && list1.Count > 0);
                    if (!existList1)
                    {
                        DatosModoOperacion(indRecalculo.Irecafechaini, indRecalculo.Irecafechafin, indRelacionEmpresa.Grupocodi.ToString(),
                                    out ModoOperacion mo1, out ModoOperacion mo2, out ModoOperacion mo3);

                        bool existMo1 = (mo1 != null && mo2 == null && mo3 == null);
                        bool existMo2 = (mo1 != null && mo2 != null && mo3 == null);
                        bool existMo3 = (mo1 != null && mo2 != null && mo3 != null);

                        if (existMo3) { pe = mo3.Pe; }
                        else if (existMo2) { pe = mo2.Pe; }
                        else if (existMo1) { pe = mo1.Pe; }
                    }
                    else
                    {
                        unidad = list1.FirstOrDefault();
                        grupoincremental = unidad.Grupoincremental;
                        pe = unidad.Pe;
                    }
                    #endregion

                    #region Obtener datos para el cálculo del factor k
                    IndInsumosFactorKDTO indInsumosFactorK = null;
                    List<IndInsumosFactorKDetalleDTO> listIFKDetalle = null;

                    List<IndInsumosFactorKDTO> list2 = listIndInsumosFactorK.Where(x =>
                                                        x.Ipericodi == indRecalculo.Ipericodi &&
                                                        //x.Emprcodi == indRelacionEmpresa.Emprcodi &&
                                                        x.Equicodicentral == indRelacionEmpresa.Equicodicentral &&
                                                        x.Equicodiunidad == indRelacionEmpresa.Equicodiunidad &&
                                                        x.Grupocodi == indRelacionEmpresa.Grupocodi &&
                                                        x.Famcodi == indRelacionEmpresa.Famcodi
                                                        ).ToList();
                    bool existList2 = (list2 != null && list2.Count > 0);
                    if (existList2)
                    {
                        indInsumosFactorK = list2.FirstOrDefault();
                        listIFKDetalle = listIndInsumosFactorKDetalle.Where(x => x.Insfckcodi == indInsumosFactorK.Insfckcodi).ToList();
                    }

                    List<IndStkCombustibleDetalleDTO> listISCDetalle = listIndStkCombustibleDetalle.Where(x =>
                                        x.Ipericodi == indRecalculo.Ipericodi &&
                                        //x.Emprcodi == indRelacionEmpresa.Emprcodi &&
                                        x.Equicodicentral == indRelacionEmpresa.Equicodicentral
                                        ).ToList();
                    #endregion

                    #region Calculando el nuevo factor k
                    decimal? valorFactorK = CalcularNuevoFactorK(indRecalculo, fcPcm3, fcGal, indRelacionEmpresa,
                                                                indInsumosFactorK, listIFKDetalle, listISCDetalle,
                                                                out List<IndReporteFCDTO> listIndReporteFC,
                                                                out List<IndReporteInsumosDTO> listIndReporteInsumos,
                                                                out List<IndReporteCalculosDTO> listIndReporteCalculos);
                    #endregion

                    #region Creando IndReporteTotal
                    IndReporteTotalDTO indReporteTotal = new IndReporteTotalDTO()
                    {
                        Emprcodi = indRelacionEmpresa.Emprcodi, //unidad.Emprcodi.Value,
                        Equipadre = indRelacionEmpresa.Equicodicentral,  //unidad.Equipadre.Value,
                        Grupocodi = indRelacionEmpresa.Grupocodi, //unidad.Grupocodi,
                        Famcodi = indRelacionEmpresa.Famcodi, //ConstantesHorasOperacion.IdTipoTermica,
                        Equicodi = indRelacionEmpresa.Equicodiunidad, //unidad.Equicodi,
                        Itotopcom = ConstantesAppServicio.SI,
                        Itotincremental = grupoincremental, // unidad.Grupoincremental, //Esta línea se deja como está
                        Itotunidadnomb = indRelacionEmpresa.Relempunidadnomb, //unidad.UnidadnombPR25,
                        Itotpe = pe, // unidad.Pe,
                        Itotfactork = valorFactorK,

                        Itotpcm3 = fcPcm3,
                        Itot1ltvalor = fcGal,
                        Itot1ltunidad = "galones",
                        Itotfgte = 1,
                        Itotfrc = indInsumosFactorK?.Insfckfrc,

                        ListIndReporteFC = listIndReporteFC,
                        ListIndReporteInsumos = listIndReporteInsumos,
                        ListIndReporteCalculos = listIndReporteCalculos
                    };

                    bool existDescadic = (unidad != null && unidad.TieneModificacionPropiedad && unidad.Grupoincremental != 1);
                    if (existDescadic)
                    {
                        indReporteTotal.Itotdescadic = string.Format("Potencia efectiva vigente a partir del {0}.", unidad.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFecha));
                    }

                    listIndReporteTotal.Add(indReporteTotal);
                    #endregion
                }

                return listIndReporteTotal;
                #endregion
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                bool existWhoIndRelacionEmpresa = (whoIndRelacionEmpresa != null);
                if (existWhoIndRelacionEmpresa)
                {
                    throw new Exception(string.Format("{0} Tiene el siguiente error: {1}", whoIndRelacionEmpresa, ex.Message), ex);
                }
                throw;
            }
            #endregion
        }

        /// <summary>
        /// Calcula el nuevo valor del factor K
        /// </summary>
        /// <param name="indRecalculo"></param>
        /// <param name="fcPcm3"></param>
        /// <param name="fcGal"></param>
        /// <param name="indRelacionEmpresa">Registro de Relación Empresa</param>
        /// <param name="indInsumosFactorK">Registro de Insumo de Factor K con respecto al registro de Relación de Empresa</param>
        /// <param name="listIndInsumosFactorKDetalle">Registros de Insumo de Factor K Detalle con respecto al registro de Insumo de Factor K</param>
        /// <param name="listIndStkCombustibleDetalle">Registros de Stock de Combustible Detalle con respecto al registro de Relación Empresa (empresa/central)</param>
        /// <param name="listIndReporteFC"></param>
        /// <param name="listIndReporteInsumos"></param>
        /// <param name="listIndReporteCalculos"></param>
        /// <returns></returns>
        public decimal? CalcularNuevoFactorK(IndRecalculoDTO indRecalculo, decimal fcPcm3, decimal fcGal,
            IndRelacionEmpresaDTO indRelacionEmpresa,
            IndInsumosFactorKDTO indInsumosFactorK, List<IndInsumosFactorKDetalleDTO> listIndInsumosFactorKDetalle,
            List<IndStkCombustibleDetalleDTO> listIndStkCombustibleDetalle,
            out List<IndReporteFCDTO> listIndReporteFC, out List<IndReporteInsumosDTO> listIndReporteInsumos, out List<IndReporteCalculosDTO> listIndReporteCalculos)
        {
            #region Calcular nuevo factor K
            #region Inicializando variables
            decimal? factorK = null;
            IndReporteFCDTO indReporteFC1_1 = null;
            IndReporteFCDTO indReporteFC1_2 = null;
            IndReporteFCDTO indReporteFC1_3 = null;
            IndReporteFCDTO indReporteFC2_1 = null;
            IndReporteFCDTO indReporteFC2_2 = null;
            IndReporteFCDTO indReporteFC2_3 = null;
            #endregion

            try
            {
                #region Validaciones básicas
                if (indRecalculo == null)
                {
                    throw new Exception("Recálculo no debe ser nulo.");
                }

                int ipericodi = indRecalculo.Ipericodi;
                int diaInicio = indRecalculo.Irecafechaini.Date.Day;
                int diaFin = indRecalculo.Irecafechafin.Date.Day;

                if (ipericodi < 1)
                {
                    throw new Exception("Periodo debe ser mayor a cero.");
                }

                if (diaInicio < 1)
                {
                    throw new Exception("Día de inicio debe ser mayor a cero.");
                }

                if (diaFin < 1)
                {
                    throw new Exception("Día de fin debe ser mayor a cero.");
                }

                if (diaFin < diaInicio)
                {
                    throw new Exception("Día de fin debe ser mayor o igual al día de inicio.");
                }

                if (indRelacionEmpresa == null)
                {
                    throw new Exception("Relación de Empresa no debe ser nulo.");
                }
                #endregion

                #region Variables globales
                int numDias = diaFin - diaInicio + 1;
                bool isGasNatural = (indRelacionEmpresa.Gaseoductoequicodi > 0);
                bool isCentralReservaFria = (indRelacionEmpresa.Gruporeservafria != null && indRelacionEmpresa.Gruporeservafria == 1);
                bool isDual = (indRelacionEmpresa.Grupocodicn2 != null && indRelacionEmpresa.Grupocodicn2 > 0);
                IndStkCombustibleDetalleDTO indStkCombustibleDetalle = null;

                Dictionary<int, decimal> dCmtr = new Dictionary<int, decimal>();
                Dictionary<int, decimal> dCn2 = new Dictionary<int, decimal>();

                Dictionary<int, decimal?> dCDU = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dCRD = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dCCD = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dSUGAD = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dSUCAD = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dFGTE = new Dictionary<int, decimal?>();

                Dictionary<int, decimal?> dFGTC1 = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dFGTC2 = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dFGTC3 = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dFGTCMin = new Dictionary<int, decimal?>();//
                Dictionary<int, decimal?> dSUGAD_CMTR = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dSUCAD_CN2Cx24 = new Dictionary<int, decimal?>();
                Dictionary<int, decimal?> dFGTC = new Dictionary<int, decimal?>();//
                Dictionary<int, decimal?> dFG = new Dictionary<int, decimal?>();//
                #endregion

                #region Obtener el factor K
                if (isGasNatural)
                {
                    #region Validacion de FRC y FGTE
                    if (indInsumosFactorK.Insfckfrc == null)
                    {
                        throw new Exception("Su FRC no debe ser nulo.");
                    }

                    if (indInsumosFactorK.Insfckfrc <= 0)
                    {
                        throw new Exception("Su FRC no debe ser menor o igual a 0.");
                    }

                    bool existListIndInsumosFactorKDetalle = (listIndInsumosFactorKDetalle != null && listIndInsumosFactorKDetalle.Count > 0);
                    if (!existListIndInsumosFactorKDetalle)
                    {
                        throw new Exception("No hay registros de detalle de Insumos de Factor K.");
                    }
                    #endregion

                    #region Validación Stock de Combustible Detalle
                    bool notValidSucad = (string.IsNullOrEmpty(indRelacionEmpresa.Relempsucad));
                    if (notValidSucad)
                    {
                        throw new Exception("Su SUCAD no puede ser nulo o vacío.");
                    }

                    bool isValidSucad = (isDual) ? (indRelacionEmpresa.Relempsucad.ToUpper() == "S") : (indRelacionEmpresa.Relempsucad.ToUpper() == "N");
                    if (!isValidSucad)
                    {
                        string textoDual = (isDual) ? "dual" : "no dual";
                        string textoSucad = (indRelacionEmpresa.Relempsucad.ToUpper() == "S") ? "si" : ((indRelacionEmpresa.Relempsucad.ToUpper() == "N") ? "no" : "no identificado");
                        throw new Exception(string.Format("Es '{0}', y su SUCAD no puede ser '{1}'.", textoDual, textoSucad));
                    }

                    bool getIndStkCombustibleDetalle = (isDual && indRelacionEmpresa.Relempsucad.ToUpper() == "S");
                    if (getIndStkCombustibleDetalle)
                    {
                        bool existListIndStkCombustibleDetalle = (listIndStkCombustibleDetalle != null && listIndStkCombustibleDetalle.Count > 0);
                        if (!existListIndStkCombustibleDetalle)
                        {
                            throw new Exception("No tiene detalle de Stock de Combustible.");
                        }

                        List<IndStkCombustibleDetalleDTO> listSCDetalle = listIndStkCombustibleDetalle.Where(x =>
                                                            x.Ipericodi == ipericodi &&
                                                            //x.Emprcodi == indRelacionEmpresa.Emprcodi &&
                                                            x.Equicodicentral == indRelacionEmpresa.Equicodicentral &&
                                                            x.Equicodiunidad == indRelacionEmpresa.Equicodiunidad &&
                                                            x.Tipoinfocodi != ConstantesIndisponibilidades.TipoinfocodiGasNatural
                                                            ).ToList();

                        bool existListSCDetalle = (listSCDetalle != null && listSCDetalle.Count > 0);
                        if (!existListSCDetalle)
                        {
                            listSCDetalle = listIndStkCombustibleDetalle.Where(x =>
                                                x.Ipericodi == ipericodi &&
                                                //x.Emprcodi == indRelacionEmpresa.Emprcodi &&
                                                x.Equicodicentral == indRelacionEmpresa.Equicodicentral &&
                                                x.Tipoinfocodi != ConstantesIndisponibilidades.TipoinfocodiGasNatural
                                                ).ToList();
                        }

                        existListSCDetalle = (listSCDetalle != null && listSCDetalle.Count > 0);
                        if (!existListSCDetalle)
                        {
                            throw new Exception("No tiene un registro de detalle en Stock de Combustible.");
                        }

                        bool isValidListSCDetalle = (listSCDetalle != null && listSCDetalle.Count == 1);
                        if (!isValidListSCDetalle)
                        {
                            throw new Exception("Tiene más de un registro de detalle en Stock de Combustible.");
                        }

                        indStkCombustibleDetalle = listSCDetalle.FirstOrDefault();
                    }
                    #endregion

                    #region Modo de Operación / PrGrupoEquipoVal / indReporteFCx 
                    ModoOperacion mo1;
                    ModoOperacion mo2;
                    ModoOperacion mo3;

                    decimal cn_1 = 0;
                    decimal cmtr_1 = 0;
                    int cn_numdias_1 = 0;
                    decimal? cn2_1 = null;
                    int cn2_numdias_1 = 0;

                    decimal? cn_2 = null;
                    decimal? cmtr_2 = null;
                    int cn_numdias_2 = 0;
                    decimal? cn2_2 = null;
                    int cn2_numdias_2 = 0;

                    decimal? cn_3 = null;
                    decimal? cmtr_3 = null;
                    int cn_numdias_3 = 0;
                    decimal? cn2_3 = null;
                    int cn2_numdias_3 = 0;

                    int irptfcsec = 0;

                    string filtro = "";
                    bool isCaseIndependencia = (indRelacionEmpresa.Grupocodi == ConstantesIndisponibilidades.IndependenciaGrupocodi && indRelacionEmpresa.Equicodicentral == ConstantesIndisponibilidades.IndependenciaEquicodicentral);
                    if (!isCaseIndependencia)
                    {
                        #region No es un registro de Independencia
                        filtro = string.Format("Grupocodi = {0}", indRelacionEmpresa.Grupocodi);

                        DatosModoOperacion(indRecalculo.Irecafechaini, indRecalculo.Irecafechafin, indRelacionEmpresa.Grupocodi.ToString(),
                                    out mo1, out mo2, out mo3);
                        #endregion
                    }
                    else
                    {
                        #region Es un registro de Independencia
                        string grupocodi = ConstantesIndisponibilidades.IndependenciaGrupocodi.ToString();
                        string equicodi = indRelacionEmpresa.Equicodiunidad.ToString();
                        filtro = string.Format("Grupocodi = {0} y Equicodi = {1}", grupocodi, equicodi);

                        DatosModoOperacion(indRecalculo.Irecafechaini, indRecalculo.Irecafechafin, grupocodi, equicodi,
                                    out mo1, out mo2, out mo3);
                        #endregion
                    }

                    #region Bloque1
                    bool existMo1 = (mo1 != null);
                    if (!existMo1)
                    {
                        throw new Exception(string.Format("No existe alguno de los datos del Modo de Operación para {0}.", filtro));
                    }

                    decimal valMW_1 = mo1.Pe; //Potencia Efectiva
                    decimal valM3h_1 = mo1.Combpe; //Consumo de Combustible
                    decimal val1Km3h_1 = (valM3h_1 / 1000);
                    decimal valKPCh_1 = (val1Km3h_1 * fcPcm3);
                    decimal valMMPCh_1 = (valKPCh_1 / 1000);
                    cn_1 = valMMPCh_1;
                    cmtr_1 = cn_1 * 24;
                    cn_numdias_1 = mo1.ListDias.Count;
                    irptfcsec++;

                    indReporteFC1_1 = new IndReporteFCDTO()
                    {
                        Irptfctipcombustible = ConstantesIndisponibilidades.TipoCombustibleGasNatural,
                        Irptfcnomcombustible = mo1.TipComb,
                        Irptfcmw = valMW_1,
                        Irptfcm3h = valM3h_1,
                        Irptfc1000m3h = val1Km3h_1,
                        Irptfckpch = valKPCh_1,
                        Irptfcmmpch = valMMPCh_1,
                        Irptfccmtr = cmtr_1,
                        Irptfcnumdias = cn_numdias_1,
                        Irptfcrngdias = mo1.RngDias,
                        Irptfcsec = irptfcsec
                    };
                    #endregion

                    #region Bloque2
                    bool existMo2 = (mo2 != null);
                    if (existMo2)
                    {
                        decimal valMW_2 = mo2.Pe;           //Potencia Efectiva
                        decimal valM3h_2 = mo2.Combpe;      //Consumo de Combustible
                        decimal val1Km3h_2 = (valM3h_2 / 1000);
                        decimal valKPCh_2 = (val1Km3h_2 * fcPcm3);
                        decimal valMMPCh_2 = (valKPCh_2 / 1000);
                        cn_2 = valMMPCh_2;
                        cmtr_2 = cn_2 * 24;
                        cn_numdias_2 = mo2.ListDias.Count;
                        irptfcsec++;

                        indReporteFC1_2 = new IndReporteFCDTO()
                        {
                            Irptfctipcombustible = ConstantesIndisponibilidades.TipoCombustibleGasNatural,
                            Irptfcnomcombustible = mo2.TipComb,
                            Irptfcmw = valMW_2,
                            Irptfcm3h = valM3h_2,
                            Irptfc1000m3h = val1Km3h_2,
                            Irptfckpch = valKPCh_2,
                            Irptfcmmpch = valMMPCh_2,
                            Irptfccmtr = Convert.ToDecimal(cmtr_2),
                            Irptfcnumdias = cn_numdias_2,
                            Irptfcrngdias = mo2.RngDias,
                            Irptfcsec = irptfcsec
                        };
                    }
                    #endregion

                    #region Bloque3
                    bool existMo3 = (mo3 != null);
                    if (existMo3)
                    {
                        decimal valMW_3 = mo3.Pe;           //Potencia Efectiva
                        decimal valM3h_3 = mo3.Combpe;      //Consumo de Combustible
                        decimal val1Km3h_3 = (valM3h_3 / 1000);
                        decimal valKPCh_3 = (val1Km3h_3 * fcPcm3);
                        decimal valMMPCh_3 = (valKPCh_3 / 1000);
                        cn_3 = valMMPCh_3;
                        cmtr_3 = cn_3 * 24;
                        cn_numdias_3 = mo3.ListDias.Count;
                        irptfcsec++;

                        indReporteFC1_3 = new IndReporteFCDTO()
                        {
                            Irptfctipcombustible = ConstantesIndisponibilidades.TipoCombustibleGasNatural,
                            Irptfcnomcombustible = mo3.TipComb,
                            Irptfcmw = valMW_3,
                            Irptfcm3h = valM3h_3,
                            Irptfc1000m3h = val1Km3h_3,
                            Irptfckpch = valKPCh_3,
                            Irptfcmmpch = valMMPCh_3,
                            Irptfccmtr = Convert.ToDecimal(cmtr_3),
                            Irptfcnumdias = cn_numdias_3,
                            Irptfcrngdias = mo3.RngDias,
                            Irptfcsec = irptfcsec
                        };
                    }
                    #endregion

                    dCmtr = LoadValuesNumDias(diaInicio, diaFin, cmtr_1, cn_numdias_1, cmtr_2, cn_numdias_2, cmtr_3, cn_numdias_3);
                    dCn2 = LoadValuesNumDias(diaInicio, diaFin, 0, numDias, null, 0, null, 0);

                    if (isDual)
                    {
                        #region Es Dual
                        DatosModoOperacion(indRecalculo.Irecafechaini, indRecalculo.Irecafechafin, indRelacionEmpresa.Grupocodicn2.ToString(),
                                    out mo1, out mo2, out mo3);

                        #region Bloque1
                        existMo1 = (mo1 != null);
                        if (!existMo1)
                        {
                            throw new Exception(string.Format("No existe alguno de los datos del Modo de Operación para Grupocodi = {0}.", indRelacionEmpresa.Grupocodicn2));
                        }

                        valMW_1 = mo1.Pe;            //Potencia Efectiva
                        decimal valLh_1 = mo1.Combpe;       //Consumo de Combustible
                        decimal valGalh_1 = valLh_1 * fcGal;
                        cn2_1 = valGalh_1;
                        cn2_numdias_1 = mo1.ListDias.Count;
                        irptfcsec++;

                        indReporteFC2_1 = new IndReporteFCDTO()
                        {
                            Irptfctipcombustible = ConstantesIndisponibilidades.TipoCombustibleDiferenteGasNatural,
                            Irptfcnomcombustible = mo1.TipComb,
                            Irptfcmw = valMW_1,
                            Irptfclh = valLh_1,
                            Irptfcgalh = valGalh_1,
                            Irptfcnumdias = cn2_numdias_1,
                            Irptfcrngdias = mo1.RngDias,
                            Irptfcsec = irptfcsec
                        };
                        #endregion

                        #region Bloque2
                        existMo2 = (mo2 != null);
                        if (existMo2)
                        {
                            decimal valMW_2 = mo2.Pe;            //Potencia Efectiva
                            decimal valLh_2 = mo2.Combpe;       //Consumo de Combustible
                            decimal valGalh_2 = valLh_2 * fcGal;
                            cn2_2 = valGalh_2;
                            cn2_numdias_2 = mo2.ListDias.Count;
                            irptfcsec++;

                            indReporteFC2_2 = new IndReporteFCDTO()
                            {
                                Irptfctipcombustible = ConstantesIndisponibilidades.TipoCombustibleDiferenteGasNatural,
                                Irptfcnomcombustible = mo2.TipComb,
                                Irptfcmw = valMW_2,
                                Irptfclh = valLh_2,
                                Irptfcgalh = valGalh_2,
                                Irptfcnumdias = cn2_numdias_2,
                                Irptfcrngdias = mo2.RngDias,
                                Irptfcsec = irptfcsec
                            };
                        }
                        #endregion

                        #region Bloque3
                        existMo3 = (mo3 != null);
                        if (existMo3)
                        {
                            decimal valMW_3 = mo3.Pe;            //Potencia Efectiva
                            decimal valLh_3 = mo3.Combpe;       //Consumo de Combustible
                            decimal valGalh_3 = valLh_3 * fcGal;
                            cn2_3 = valGalh_3;
                            cn2_numdias_3 = mo3.ListDias.Count;
                            irptfcsec++;

                            indReporteFC2_3 = new IndReporteFCDTO()
                            {
                                Irptfctipcombustible = ConstantesIndisponibilidades.TipoCombustibleDiferenteGasNatural,
                                Irptfcnomcombustible = mo3.TipComb,
                                Irptfcmw = valMW_3,
                                Irptfclh = valLh_3,
                                Irptfcgalh = valGalh_3,
                                Irptfcnumdias = cn2_numdias_3,
                                Irptfcrngdias = mo3.RngDias,
                                Irptfcsec = irptfcsec
                            };
                        }
                        #endregion

                        dCn2 = LoadValuesNumDias(diaInicio, diaFin, cn2_1, cn2_numdias_1, cn2_2, cn2_numdias_2, cn2_3, cn2_numdias_3);
                        #endregion
                    }
                    #endregion

                    #region Calculando el factor K
                    #region Variables para el cálculo
                    decimal valFRC = indInsumosFactorK.Insfckfrc.Value;
                    dCDU = GetDiaValorFromInsumosFactorKDetalle(diaInicio, diaFin, indInsumosFactorK.Insfckcodi, listIndInsumosFactorKDetalle, ConstantesIndisponibilidades.TipoCDU);
                    dCRD = GetDiaValorFromInsumosFactorKDetalle(diaInicio, diaFin, indInsumosFactorK.Insfckcodi, listIndInsumosFactorKDetalle, ConstantesIndisponibilidades.TipoCRD);
                    dCCD = GetDiaValorFromInsumosFactorKDetalle(diaInicio, diaFin, indInsumosFactorK.Insfckcodi, listIndInsumosFactorKDetalle, ConstantesIndisponibilidades.TipoCCD);
                    dSUGAD = GetDiaValorFromInsumosFactorKDetalle(diaInicio, diaFin, indInsumosFactorK.Insfckcodi, listIndInsumosFactorKDetalle, ConstantesIndisponibilidades.TipoSUGAD);
                    dSUCAD = GetDiaValorFromStockCombustibleKDetalle(diaInicio, diaFin, indStkCombustibleDetalle);
                    dFGTE = GetDiaValorFromInsumosFactorKDetalle(diaInicio, diaFin, indInsumosFactorK.Insfckcodi, listIndInsumosFactorKDetalle, ConstantesIndisponibilidades.TipoFGTE);
                    #endregion

                    for (int d = diaInicio; d <= diaFin; d++)
                    {
                        #region FGTC1, FGTC2 y FGTC3
                        var FGTC1 = (dCDU[d] != null && dCmtr[d] != 0) ? (dCDU[d] / dCmtr[d]) : null; //*
                        dFGTC1.Add(d, FGTC1);

                        var FGTC2 = (dCRD[d] != null && (valFRC * dCmtr[d]) != 0) ? (dCRD[d] / (valFRC * dCmtr[d])) : null; //*
                        dFGTC2.Add(d, FGTC2);

                        var FGTC3 = (dCCD[d] != null && dCmtr[d] != 0) ? (dCCD[d] / dCmtr[d]) : null; //*
                        dFGTC3.Add(d, FGTC3);
                        #endregion

                        #region FGTCmin
                        List<decimal> listFGTCMin = new List<decimal>();
                        if (FGTC1 != null) { listFGTCMin.Add(FGTC1.Value); }
                        if (FGTC2 != null) { listFGTCMin.Add(FGTC2.Value); }
                        if (FGTC3 != null) { listFGTCMin.Add(FGTC3.Value); }

                        bool existListFGTCMin = (listFGTCMin != null && listFGTCMin.Count > 0);
                        if (!existListFGTCMin)
                        {
                            listFGTCMin.Add(0);
                        }

                        decimal dMin = listFGTCMin.Min();
                        decimal minimo = (dMin >= 1) ? 1 : Math.Round(dMin, 20); //Se limita a máximo 1
                        dFGTCMin.Add(d, minimo);
                        #endregion

                        #region SUGAD_CMTR y SUCAD_CN2Cx24
                        var sugad_cmtr = (dSUGAD[d] != null && dCmtr[d] != 0) ? (dSUGAD[d] / dCmtr[d]) : null; //*
                        dSUGAD_CMTR.Add(d, sugad_cmtr);

                        var sucad_cn2cx24 = (dSUCAD[d] != null && dCn2[d] != 0) ? (dSUCAD[d] / (dCn2[d] * 24)) : null; //*
                        dSUCAD_CN2Cx24.Add(d, sucad_cn2cx24);
                        #endregion

                        #region FGTC
                        List<decimal> listFGTC = new List<decimal>();
                        if (dFGTCMin[d] != null) { listFGTC.Add(dFGTCMin[d].Value); }
                        if (sugad_cmtr != null) { listFGTC.Add(sugad_cmtr.Value); }
                        if (sucad_cn2cx24 != null) { listFGTC.Add(sucad_cn2cx24.Value); }

                        bool existListFGTC = (listFGTC != null && listFGTC.Count > 0);
                        if (!existListFGTC) { throw new Exception(string.Format("No hay valores en la lista de los FGTC. Revisar el FGTCMin, SUGAD/CMTR y SUCAD/CN2Cx24 para el día {0}.", d)); }

                        decimal dSuma = listFGTC.Sum();
                        decimal suma = (dSuma >= 1) ? 1 : Math.Round(dSuma, 20); //Se pone el control, puesto que FGTC no puede ser mayor a 1
                        dFGTC.Add(d, suma);
                        #endregion

                        #region FG
                        if (dFGTE[d] == null) { throw new Exception(string.Format("FGTE es nulo para el día {0}.", d)); }
                        if (dFGTE[d].Value > 1) { throw new Exception(string.Format("FGTE es mayor a 1 para el día {0}.", d)); }
                        if (dFGTE[d].Value <= 0) { throw new Exception(string.Format("FGTE es menor o igual a 0 para el día {0}.", d)); }

                        List<decimal> listFG = new List<decimal>();
                        if (dFGTC[d] != null) { listFG.Add(dFGTC[d].Value); }
                        if (dFGTE[d] != null) { listFG.Add(dFGTE[d].Value); }

                        bool existListFG = (listFG != null && listFG.Count > 0);
                        if (!existListFG) { throw new Exception(string.Format("No hay valores en la lista del FG. Revisar FGTCB y FGTE para el día {0}.", d)); }

                        decimal dMin2 = listFG.Min();
                        decimal minimo2 = (dMin2 >= 1) ? 1 : Math.Round(dMin2, 20);
                        dFG.Add(d, minimo2);
                        #endregion
                    }

                    #region Obteniendo factor K
                    bool isCase1 = (cn_numdias_1 > 0 && cn_numdias_2 == 0 && cn_numdias_3 == 0 && cn_numdias_1 == numDias);
                    bool isCase2 = (cn_numdias_1 > 0 && cn_numdias_2 > 0 && cn_numdias_3 == 0 && ((cn_numdias_1 + cn_numdias_2) == numDias));
                    bool isCase3 = (cn_numdias_1 > 0 && cn_numdias_2 > 0 && cn_numdias_3 > 0 && ((cn_numdias_1 + cn_numdias_2 + cn_numdias_3) == numDias));

                    if (isCase1)
                    {
                        List<decimal> list1 = new List<decimal>();
                        for (int d = diaInicio; d <= diaFin; d++)
                        {
                            if (dFG[d] != null) { list1.Add(dFG[d].Value); }
                        }

                        factorK = list1.Sum() / numDias;
                    }
                    else if (isCase2)
                    {
                        List<decimal> list1 = new List<decimal>();
                        List<decimal> list2 = new List<decimal>();
                        int dl1 = (diaInicio + cn_numdias_1 - 1);

                        for (int d = diaInicio; d <= diaFin; d++)
                        {
                            if (d <= dl1 && dFG[d] != null) { list1.Add(dFG[d].Value); }
                            if (dl1 < d && dFG[d] != null) { list2.Add(dFG[d].Value); }
                        }

                        factorK = ((list1.Average() * cn_numdias_1) + (list2.Average() * cn_numdias_2)) / numDias;
                    }
                    else if (isCase3)
                    {
                        List<decimal> list1 = new List<decimal>();
                        List<decimal> list2 = new List<decimal>();
                        List<decimal> list3 = new List<decimal>();
                        int dl1 = (diaInicio + cn_numdias_1 - 1);
                        int dl2 = (diaInicio + cn_numdias_1 + cn_numdias_2 - 1);

                        for (int d = diaInicio; d <= diaFin; d++)
                        {
                            if (d <= dl1 && dFG[d] != null) { list1.Add(dFG[d].Value); }
                            if (dl1 < d && d <= dl2 && dFG[d] != null) { list2.Add(dFG[d].Value); }
                            if (dl2 < d && dFG[d] != null) { list3.Add(dFG[d].Value); }
                        }

                        factorK = ((list1.Average() * cn_numdias_1) + (list2.Average() * cn_numdias_2) + (list3.Average() * cn_numdias_3)) / numDias;
                    }
                    else
                    {
                        throw new Exception("Existe un error para calcular el valor del factor K.");
                    }

                    bool esFactorKMayorAUno = (factorK != null && factorK > 1);
                    if (esFactorKMayorAUno)
                    {
                        throw new Exception("El valor del factor K no puede ser mayor a 1.");
                    }
                    #endregion
                    #endregion
                }
                else if (isCentralReservaFria)
                {
                    factorK = null; //"---";
                }
                else //Entonces debe ser central térmica.
                {
                    factorK = 1;
                }

                #region Seteando listIndReporteFC, listIndReporteInsumos, listIndReporteCalculos
                listIndReporteFC = new List<IndReporteFCDTO>();
                SetReporteFC(listIndReporteFC, indReporteFC1_1);
                SetReporteFC(listIndReporteFC, indReporteFC1_2);
                SetReporteFC(listIndReporteFC, indReporteFC1_3);
                SetReporteFC(listIndReporteFC, indReporteFC2_1);
                SetReporteFC(listIndReporteFC, indReporteFC2_2);
                SetReporteFC(listIndReporteFC, indReporteFC2_3);

                listIndReporteInsumos = new List<IndReporteInsumosDTO>();
                SetReporteInsumos(listIndReporteInsumos, dCDU, ConstantesIndisponibilidades.TipoCDU);
                SetReporteInsumos(listIndReporteInsumos, dCRD, ConstantesIndisponibilidades.TipoCRD);
                SetReporteInsumos(listIndReporteInsumos, dCCD, ConstantesIndisponibilidades.TipoCCD);
                SetReporteInsumos(listIndReporteInsumos, dSUGAD, ConstantesIndisponibilidades.TipoSUGAD);
                SetReporteInsumos(listIndReporteInsumos, dSUCAD, ConstantesIndisponibilidades.TipoSUCAD);

                listIndReporteCalculos = new List<IndReporteCalculosDTO>();
                SetReporteCalculos(listIndReporteCalculos, dFGTC1, ConstantesIndisponibilidades.TipoFGTC1);
                SetReporteCalculos(listIndReporteCalculos, dFGTC2, ConstantesIndisponibilidades.TipoFGTC2);
                SetReporteCalculos(listIndReporteCalculos, dFGTC3, ConstantesIndisponibilidades.TipoFGTC3);
                SetReporteCalculos(listIndReporteCalculos, dFGTCMin, ConstantesIndisponibilidades.TipoFGTCMIN);
                SetReporteCalculos(listIndReporteCalculos, dSUGAD_CMTR, ConstantesIndisponibilidades.TipoSUGAD_CMTR);
                SetReporteCalculos(listIndReporteCalculos, dSUCAD_CN2Cx24, ConstantesIndisponibilidades.TipoSUCAD_CN2GX24);
                SetReporteCalculos(listIndReporteCalculos, dFGTC, ConstantesIndisponibilidades.TipoFGTC);
                SetReporteCalculos(listIndReporteCalculos, dFGTE, ConstantesIndisponibilidades.TipoFGTE);
                SetReporteCalculos(listIndReporteCalculos, dFG, ConstantesIndisponibilidades.TipoFG);
                #endregion

                return factorK;
                #endregion
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
            #endregion
        }

        /// <summary>
        /// Retorna un diccionario con sus valores cargados según el número de días del recálculo
        /// Nota: El número de días indica la cantidad en donde se ubicará el valor especificado.
        /// Por lo tanto, se debe respectar el orden de izquierda a derecha según el número de días del recálculo
        /// </summary>
        /// <param name="diaini"></param>
        /// <param name="diafin"></param>
        /// <param name="value1"></param>
        /// <param name="numdias1"></param>
        /// <param name="value2"></param>
        /// <param name="numdias2"></param>
        /// <param name="value3"></param>
        /// <param name="numdias3"></param>
        /// <returns></returns>
        private Dictionary<int, decimal> LoadValuesNumDias(int diaini, int diafin, decimal? value1, int numdias1, decimal? value2, int numdias2, decimal? value3, int numdias3)
        {
            Dictionary<int, decimal> dict = new Dictionary<int, decimal>();

            int numdias = diafin - diaini + 1;
            int numdiasvalue = numdias1 + numdias2 + numdias3;

            bool isEqualNumDias = (numdias == numdiasvalue);
            if (!isEqualNumDias)
            {
                throw new Exception("El número de días de los valores no es igual al número de días del recálculo");
            }

            int i = 0;
            while (value1 != null && numdias1 > 0 && i < numdias1)
            {
                dict[diaini] = Convert.ToDecimal(value1);
                diaini++;
                i++;
            }

            i = 0;
            while (value2 != null && numdias2 > 0 && i < numdias2)
            {
                dict[diaini] = Convert.ToDecimal(value2);
                diaini++;
                i++;
            }

            i = 0;
            while (value3 != null && numdias3 > 0 && i < numdias3)
            {
                dict[diaini] = Convert.ToDecimal(value3);
                diaini++;
                i++;
            }

            return dict;
        }

        /// <summary>
        ///  Retorna los valores de los días especificados (diaInicio, diaFin) correspondientes al detalle de Insumos de Factor K para su filtro especificado (insfckcodi, tipo)
        /// </summary>
        /// <param name="diaInicio"></param>
        /// <param name="diaFin"></param>
        /// <param name="insfckcodi"></param>
        /// <param name="listIndInsumosFactorKDetalle"></param>
        /// <param name="tipo"></param>
        /// <returns></returns>
        private Dictionary<int, decimal?> GetDiaValorFromInsumosFactorKDetalle(int diaInicio, int diaFin, int insfckcodi, List<IndInsumosFactorKDetalleDTO> listIndInsumosFactorKDetalle, int tipo)
        {
            Dictionary<int, decimal?> dict = new Dictionary<int, decimal?>();

            List<IndInsumosFactorKDetalleDTO> list = listIndInsumosFactorKDetalle.Where(x =>
                                                        x.Insfckcodi == insfckcodi &&
                                                        x.Infkdttipo == tipo
                                                        ).ToList();
            bool existList = (list != null && list.Count > 0);
            if (existList)
            {
                IndInsumosFactorKDetalleDTO item = list.FirstOrDefault();
                for (int d = diaInicio; d <= diaFin; d++)
                {
                    object value = item.GetType().GetProperty("D" + d).GetValue(item);
                    decimal? decimalValue = (value != null) ? (decimal?)value : null;
                    dict.Add(d, decimalValue);
                }
            }
            else
            {
                for (int d = diaInicio; d <= diaFin; d++)
                {
                    dict.Add(d, null);
                }
            }

            return dict;
        }

        /// <summary>
        ///  Retorna los valores de los días especificados (diaInicio, diaFin) correspondientes al detalle de Stock de Combustible
        /// </summary>
        /// <param name="diaInicio"></param>
        /// <param name="diaFin"></param>
        /// <param name="indStkCombustibleDetalle"></param>
        /// <returns></returns>
        private Dictionary<int, decimal?> GetDiaValorFromStockCombustibleKDetalle(int diaInicio, int diaFin, IndStkCombustibleDetalleDTO indStkCombustibleDetalle)
        {
            Dictionary<int, decimal?> dict = new Dictionary<int, decimal?>();

            bool isNull = (indStkCombustibleDetalle == null);
            if (isNull)
            {
                for (int d = diaInicio; d <= diaFin; d++)
                {
                    dict.Add(d, null);
                }
                return dict;
            }

            for (int d = diaInicio; d <= diaFin; d++)
            {
                string data = (string)indStkCombustibleDetalle.GetType().GetProperty("D" + d).GetValue(indStkCombustibleDetalle);
                bool isValid = (!string.IsNullOrEmpty(data) && !data.Equals(ConstantesIndisponibilidades.ValorPorDefaultStock));
                if (isValid)
                {
                    dict.Add(d, Convert.ToDecimal(data));
                }
                else
                {
                    dict.Add(d, null);
                }
            }

            return dict;
        }

        /// <summary>
        /// Agrega un item al listado de reporte de fc, siempre y cuando el item no sea nulo
        /// </summary>
        /// <param name="listIndReporteFC"></param>
        /// <param name="indReporteFC"></param>
        private void SetReporteFC(List<IndReporteFCDTO> listIndReporteFC, IndReporteFCDTO indReporteFC)
        {
            bool existIndReporteFC = (indReporteFC != null);
            if (existIndReporteFC)
            {
                listIndReporteFC.Add(indReporteFC);
            }
        }

        /// <summary>
        /// Agrega un item al listado de reporte de insumos, siempre y cuando todos los valores del diccionario no sean igual a nulo
        /// </summary>
        /// <param name="listIndReporteInsumos"></param>
        /// <param name="dict"></param>
        /// <param name="tipo"></param>
        private void SetReporteInsumos(List<IndReporteInsumosDTO> listIndReporteInsumos, Dictionary<int, decimal?> dict, int tipo)
        {
            int count = dict.Count();
            int countNull = dict.Where(x => x.Value == null).ToList().Count();
            if (count == countNull)
            {
                return;
            }

            IndReporteInsumosDTO IndReporteInsumos = new IndReporteInsumosDTO
            {
                Irpinstipo = tipo
            };

            foreach (KeyValuePair<int, decimal?> e in dict)
            {
                IndReporteInsumos.GetType().GetProperty("D" + e.Key).SetValue(IndReporteInsumos, e.Value);
            }

            listIndReporteInsumos.Add(IndReporteInsumos);
        }

        /// <summary>
        /// Agrega un item al listado de reporte de calculos, siempre y cuando todos los valores del diccionario no sean igual a nulo
        /// </summary>
        /// <param name="listIndReporteCalculos"></param>
        /// <param name="dict"></param>
        /// <param name="tipo"></param>
        private void SetReporteCalculos(List<IndReporteCalculosDTO> listIndReporteCalculos, Dictionary<int, decimal?> dict, int tipo)
        {
            int count = dict.Count();
            int countNull = dict.Where(x => x.Value == null).ToList().Count();
            if (count == countNull)
            {
                return;
            }

            IndReporteCalculosDTO IndReporteCalculos = new IndReporteCalculosDTO
            {
                Irpcaltipo = tipo
            };

            foreach (KeyValuePair<int, decimal?> e in dict)
            {
                IndReporteCalculos.GetType().GetProperty("D" + e.Key).SetValue(IndReporteCalculos, e.Value);
            }

            listIndReporteCalculos.Add(IndReporteCalculos);
        }

        /// <summary>
        /// Obtiene los datos del modo de operación, en base al filtro especificado. 
        /// Nota: Este código es copia del proyecto publico
        /// </summary>
        /// <param name="equicodi"></param>
        /// <param name="grupocodi"></param>
        /// <param name="central"></param>
        /// <returns></returns>
        private DetalleModoOperacion DatosModoOperacion(string equicodi, string grupocodi, string central)
        {
            DespachoAppServicio appDespacho = new DespachoAppServicio();
            EquipamientoAppServicio appEquipamiento = new EquipamientoAppServicio();

            var oCentral = appEquipamiento.GetByIdEqEquipo(int.Parse(central));
            string sCombustible = string.Empty;
            //int iEquiCodiGen = 0;
            //var oGenerador= new EquipoDTO();
            //if (equicodi.Trim() == "-1")
            //{
            //    var oGeneradorHijo = appEquipo.ListarEquipoPorPadre(oCentral.EQUICODI).First();
            //    oGenerador = appEquipo.TraerEquipo(oGeneradorHijo.EQUICODI);
            //}
            //else
            //{
            //    oGenerador = appEquipo.TraerEquipo(int.Parse(equicodi));
            //}


            //var iGrupoCodiGenerador = oGenerador.GRUPOCODI;
            var oModoOperacion = appDespacho.GetByIdPrGrupo(int.Parse(grupocodi));//Modo de Operación

            var iGrupoCodi = appDespacho.ObtenerCodigoModoOperacionPadre(int.Parse(grupocodi));//Obtenemos Código de generador o grupo
            var lsValoresMOGrupo = appDespacho.ListadoValoresModoOperacion(int.Parse(central), iGrupoCodi);//Datos de Grupo logico o Generador

            var iGrupoCodiCentral = appDespacho.ObtenerCodigoModoOperacionPadre(iGrupoCodi);//Obtenemos Código de central
            var lsValoresMOCentral = appDespacho.ListadoValoresModoOperacion(int.Parse(central), iGrupoCodiCentral); //Valores de MO de las central


            var NombreCentral = oCentral.Equinomb;
            var NombreEmpresa = oCentral.EMPRNOMB;

            var ValoresMO = appDespacho.ListadoValoresModoOperacion(int.Parse(equicodi), int.Parse(grupocodi));//Datos de Modo de Operación
            var Modelo = new DetalleModoOperacion();
            Modelo.TextoCostoTransporte = "Costo de transporte";
            Modelo.TextoCostoTratamientoMecanico = "Costo de tratamiento mecánico de combustibles";
            Modelo.TextoCostoTratamientoQuimico = "Costo de tratamiento químico de combustibles ";

            Modelo.CodCentral = oCentral.Equicodi.ToString();//oCentral.EQUINOMB;

            Modelo.NombreCentral = NombreCentral;
            Modelo.NombreEmpresa = NombreEmpresa;

            #region Caso Modo Operacion ILO2CARB
            Modelo.EsIlo2 = false;
            if (grupocodi == "257")
            {
                Modelo.EsIlo2 = true;
                Modelo.UnidadIlo2 = "[kg]";
                Modelo.CombustibleIlo2 = "";
            }

            #endregion

            PrConceptoDTO conceptoDto = new PrConceptoDTO();

            //conceptoDto = appDespacho.GetByIdPrConcepto(98);
            //Modelo.CombATM_uni = "["+conceptoDto.CONCEPUNID+"]";
            //conceptoDto = appConcepto.TraerConcepto(149);
            //Modelo.Comb_arr_sinc_uni = conceptoDto.CONCEPUNID;
            //conceptoDto = appConcepto.TraerConcepto(150);
            //Modelo.Comb_arr_sinc_F1_uni = conceptoDto.CONCEPUNID;
            //conceptoDto = appConcepto.TraerConcepto(152);
            //Modelo.Comb_arr_sinc_int_uni = conceptoDto.CONCEPUNID;
            //conceptoDto = appConcepto.TraerConcepto(153);
            //Modelo.Comb_arr_sinc_cal_uni = conceptoDto.CONCEPUNID;
            //conceptoDto = appConcepto.TraerConcepto(154);
            //Modelo.Comb_sinc_PC_uni = conceptoDto.CONCEPUNID;
            //conceptoDto = appConcepto.TraerConcepto(155);
            //Modelo.Comb_sinc_PC_F1_uni = conceptoDto.CONCEPUNID;
            //conceptoDto = appConcepto.TraerConcepto(157);
            //Modelo.Comb_sinc_PC_int_uni = conceptoDto.CONCEPUNID;
            //conceptoDto = appConcepto.TraerConcepto(158);
            //Modelo.Comb_sinc_PC_cal_uni = conceptoDto.CONCEPUNID;
            //conceptoDto = appConcepto.TraerConcepto(79);
            //Modelo.CombPRD_uni = "[" + conceptoDto.CONCEPUNID.Trim() + "]";
            //conceptoDto = appConcepto.TraerConcepto(159);
            //Modelo.Comb_PC_sinc_uni = "[" + conceptoDto.CONCEPUNID + "]";
            //conceptoDto = appConcepto.TraerConcepto(160);
            //Modelo.Comb_sinc_par_uni = "[" + conceptoDto.CONCEPUNID + "]";
            //conceptoDto = appConcepto.TraerConcepto(17);
            //Modelo.EficTerm_uni = conceptoDto.CONCEPUNID;
            conceptoDto = appDespacho.GetByIdPrConcepto(193);
            Modelo.EficBTUKWh_uni = "[" + conceptoDto.Concepunid + "]";

            //var CMarr = lsValoresMOGrupo.SingleOrDefault(mo => mo.CONCEPCODI == 80);
            var CMarr = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 186);
            Modelo.CMarr = CMarr == null ? "" : CMarr.VALOR;
            foreach (var Valor in ValoresMO)
            {

                switch ((int)Valor.CONCEPCODI)
                {
                    case -99:
                        Modelo.CodModo = Valor.VALOR;
                        break;
                    case 14:
                        Modelo.Pe = Valor.VALOR;
                        break;
                    case 16:
                        Modelo.Pmin = Valor.VALOR;
                        break;
                    case 15:
                        Modelo.Pmax = Valor.VALOR;
                        break;
                    case 115:
                        Modelo.V_tomacarga = Valor.VALOR;
                        break;
                    case 116:
                        Modelo.V_TC_frio1 = Valor.VALOR;
                        break;
                    case 117:
                        Modelo.V_TC_frio2 = Valor.VALOR;
                        break;
                    case 118:
                        Modelo.V_TC_intca = Valor.VALOR;
                        break;
                    case 119:
                        Modelo.V_TC_calie = Valor.VALOR;
                        break;
                    case 120:
                        Modelo.V_descarga = Valor.VALOR;
                        break;
                    case 121:
                        Modelo.T_sinc = Valor.VALOR;
                        break;
                    case 122:
                        Modelo.T_sincronizacionFrio1 = Valor.VALOR;
                        break;
                    case 123:
                        Modelo.T_sinc_F2 = Valor.VALOR;
                        break;
                    case 124:
                        Modelo.T_sincronizaciónintermedio = Valor.VALOR;
                        break;
                    case 125:
                        Modelo.T_sincronizacióncaliente = Valor.VALOR;
                        break;
                    case 126:
                        Modelo.T_PC_Sinc = Valor.VALOR;
                        break;
                    case 127:
                        Modelo.T_PC_F1 = Valor.VALOR;
                        break;
                    case 128:
                        Modelo.T_PC_F2 = Valor.VALOR;
                        break;
                    case 129:
                        Modelo.T_CargaIntermedio = Valor.VALOR;
                        break;
                    case 130:
                        Modelo.T_PC_Cal = Valor.VALOR;
                        break;
                    case 131:
                        Modelo.T_SFSP = Valor.VALOR;
                        break;
                    case 132:
                        Modelo.T_PC_pm = Valor.VALOR;
                        break;
                    case 133:
                        Modelo.T_ArrNegr = Valor.VALOR;
                        break;
                    case 134:
                        Modelo.T_fuera_sinc = Valor.VALOR;
                        break;
                    case 135:
                        Modelo.T_sinc_par = Valor.VALOR;
                        break;
                    case 136:
                        Modelo.T_min_Arr = Valor.VALOR;
                        break;
                    case 137:
                        Modelo.T_min_Arr_eme = Valor.VALOR;
                        break;
                    case 138:
                        Modelo.MaxPotMin = Valor.VALOR;
                        break;
                    case 139:
                        Modelo.Tmin_op = Valor.VALOR;
                        break;
                    case 140:
                        Modelo.Ene_sinc = Valor.VALOR;
                        break;
                    case 141:
                        Modelo.Ene_sinc_F1 = Valor.VALOR;
                        break;
                    case 142:
                        Modelo.Ene_sinc_F2 = Valor.VALOR;
                        break;
                    case 143:
                        Modelo.Ene_sinc_int = Valor.VALOR;
                        break;
                    case 144:
                        Modelo.Ene_sinc_cal = Valor.VALOR;
                        break;
                    case 145:
                        Modelo.Ene_PC_sinc = Valor.VALOR;
                        break;
                    case 146:
                        sCombustible = Modelo.TipComb = Valor.VALOR;
                        ConceptoDatoDTO DatoComb;
                        ConceptoDatoDTO conDato = new ConceptoDatoDTO();
                        switch (Valor.VALOR.Trim().ToUpperInvariant())
                        {

                            case "GAS":
                            case "GAS NATURAL":
                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 77);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 194);
                                Modelo.HHV = DatoComb == null ? "" : DatoComb.VALOR;
                                //Modelo.HHV_uni = "[Btu/pc]";
                                //Modelo.LHV_uni = "[Btu/pc]";
                                Modelo.HHV_uni = "[KJ/m3]";
                                Modelo.LHV_uni = "[KJ/m3]";

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 72);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 192);
                                Modelo.LHV = DatoComb == null ? "" : DatoComb.VALOR;
                                //conceptoDto = appConcepto.TraerConcepto(72);


                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 61);
                                //if (oModoOperacion.Grupocodi == 280)
                                //    DatoComb = lsValoresMOGrupo.SingleOrDefault(mo => mo.CONCEPCODI == 540);
                                //else


                                ////if (int.Parse(grupocodi) != 281)
                                ////{
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 191);
                                Modelo.PrecioCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                //conceptoDto = appDespacho.GetByIdPrConcepto(61);
                                conceptoDto = appDespacho.GetByIdPrConcepto(191);
                                Modelo.PrecioCComb_uni = conceptoDto.Concepunid;
                                ////}
                                ////else
                                ////{
                                ////    DatoComb = lsValoresMOGrupo.SingleOrDefault(mo => mo.CONCEPCODI == 540);
                                ////    Modelo.PrecioCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                ////    conceptoDto = appDespacho.GetByIdPrConcepto(540);
                                ////    Modelo.PrecioCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                ////}


                                Modelo.Comb_arr_sinc_uni = "[m3]";
                                Modelo.Comb_arr_sinc_F1_uni = "[m3]";
                                Modelo.Comb_arr_sinc_int_uni = "[m3]";
                                Modelo.Comb_arr_sinc_cal_uni = "[m3]";
                                Modelo.Comb_sinc_PC_uni = "[m3]";
                                Modelo.Comb_sinc_PC_F1_uni = "[m3]";
                                Modelo.Comb_sinc_PC_int_uni = "[m3]";
                                Modelo.Comb_sinc_PC_cal_uni = "[m3]";
                                Modelo.CombPRD_uni = "[m3]";
                                Modelo.Comb_PC_sinc_uni = "[m3]";
                                Modelo.Comb_sinc_par_uni = "[m3]";
                                Modelo.CombATM_uni = "[m3]";
                                Modelo.Consumo_uni = "[m3/h]";

                                Modelo.EficTerm_uni = "[kWh/m3]";// "[kWh/pc]";

                                //Modelo.PrecioCComb_uni = "[S/./MMBtu]";
                                Modelo.CostoTransCComb_uni = "[S/./GJ]";
                                Modelo.CostoTratMecCComb_uni = "[S/./GJ]";
                                Modelo.CostoTratQuiCComb_uni = "[S/./GJ]";

                                Modelo.HHV_abrev = "(HHVg)";
                                Modelo.LHV_abrev = "(LHVg)";

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 191);//En caso Gas se usa Total Costo Combustible GAS 61
                                //Modelo.PrecioCComb = DatoComb == null ? "" : DatoComb.VALOR;

                                break;
                            case "DIESEL B5 S-50":
                            case "DIESEL B5":
                            case "DIESEL":
                            case "D2":

                                #region GENERAL PARA COMBUSTIBLES LIQUIDOS
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 187);
                                //Modelo.a = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 188);
                                //Modelo.b = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 189);
                                //Modelo.c = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 190);
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 539);
                                Modelo.EficTerm = conDato.VALOR;
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 193);
                                Modelo.EficBTUKWh = conDato.VALOR;
                                #endregion

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 69);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 215);
                                Modelo.LHV = DatoComb == null ? "" : DatoComb.VALOR;
                                //conceptoDto = appDespacho.GetByIdPrConcepto(69);
                                Modelo.HHV_uni = "[kJ/kg]";
                                Modelo.LHV_uni = "[kJ/kg]";
                                //Costo Combustible
                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 207);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 531);
                                Modelo.CostoTotalComb = DatoComb == null ? "" : DatoComb.VALOR;
                                Modelo.CostoTotalComb_uni = "[S/./l]";
                                ///
                                /// 
                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 42);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 521);
                                Modelo.PrecioCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(521);

                                try
                                {
                                    Modelo.PrecioCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.PrecioCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }


                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 44);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 522);
                                Modelo.CostoTransCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(522);
                                try
                                {
                                    Modelo.CostoTransCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.CostoTransCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 45);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 523);
                                Modelo.CostoTratMecCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(523);

                                try
                                {
                                    Modelo.CostoTratMecCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.CostoTratMecCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 46);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 524);
                                Modelo.CostoTratQuiCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(524);

                                try
                                {
                                    Modelo.CostoTratQuiCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.CostoTratQuiCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 47);
                                Modelo.CostoFinCComb = DatoComb == null ? "" : DatoComb.VALOR;

                                Modelo.Comb_arr_sinc_uni = "[l]";
                                Modelo.Comb_arr_sinc_F1_uni = "[l]";
                                Modelo.Comb_arr_sinc_int_uni = "[l]";
                                Modelo.Comb_arr_sinc_cal_uni = "[l]";
                                Modelo.Comb_sinc_PC_uni = "[l]";
                                Modelo.Comb_sinc_PC_F1_uni = "[l]";
                                Modelo.Comb_sinc_PC_int_uni = "[l]";
                                Modelo.Comb_sinc_PC_cal_uni = "[l]";
                                Modelo.CombPRD_uni = "[l]";
                                Modelo.Comb_PC_sinc_uni = "[l]";
                                Modelo.Comb_sinc_par_uni = "[l]";
                                Modelo.CombATM_uni = "[l]";
                                Modelo.Consumo_uni = "[l/h]";

                                Modelo.EficTerm_uni = "[kWh/l]";

                                //Modelo.PrecioCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTransCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTratMecCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTratQuiCComb_uni = "[S/./Bbl]";

                                Modelo.LHV_abrev = "(PCalD2)";

                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 507);
                                Modelo.Densidad = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(507);
                                try
                                {
                                    Modelo.Densidad_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.Densidad_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                break;

                            case "R500":
                            case "RESIDUAL 500":

                                #region GENERAL PARA COMBUSTIBLES LIQUIDOS
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 187);
                                //Modelo.a = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 188);
                                //Modelo.b = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 189);
                                //Modelo.c = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 190);
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 539);
                                Modelo.EficTerm = conDato.VALOR;
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 193);
                                Modelo.EficBTUKWh = conDato.VALOR;
                                #endregion

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 71);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 217);
                                Modelo.LHV = DatoComb == null ? "" : DatoComb.VALOR;
                                //conceptoDto = appDespacho.GetByIdPrConcepto(71);
                                Modelo.HHV_uni = "[kJ/kg]";
                                Modelo.LHV_uni = "[kJ/kg]";

                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 509);
                                Modelo.Densidad = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(509);
                                Modelo.Densidad_uni = "[" + conceptoDto.Concepunid + "]";

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 55);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 533);
                                Modelo.PrecioCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(533);

                                try
                                {
                                    Modelo.PrecioCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.PrecioCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                //Costo Combustible
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 538);
                                Modelo.CostoTotalComb = DatoComb == null ? "" : DatoComb.VALOR;
                                Modelo.CostoTotalComb_uni = "[S/./l]";

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 56);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 534);
                                Modelo.CostoTransCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(534);

                                try
                                {
                                    Modelo.CostoTransCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.CostoTransCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }


                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 57);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 535);
                                Modelo.CostoTratMecCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(535);

                                try
                                {
                                    Modelo.CostoTratMecCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.CostoTratMecCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 58);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 536);
                                Modelo.CostoTratQuiCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(536);
                                Modelo.CostoTratQuiCComb_uni = "[" + conceptoDto.Concepunid + "]";

                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 59);
                                Modelo.CostoFinCComb = DatoComb == null ? "" : DatoComb.VALOR;

                                Modelo.Comb_arr_sinc_uni = "[l]";
                                Modelo.Comb_arr_sinc_F1_uni = "[l]";
                                Modelo.Comb_arr_sinc_int_uni = "[l]";
                                Modelo.Comb_arr_sinc_cal_uni = "[l]";
                                Modelo.Comb_sinc_PC_uni = "[l]";
                                Modelo.Comb_sinc_PC_F1_uni = "[l]";
                                Modelo.Comb_sinc_PC_int_uni = "[l]";
                                Modelo.Comb_sinc_PC_cal_uni = "[l]";
                                Modelo.CombPRD_uni = "[l]";
                                Modelo.Comb_PC_sinc_uni = "[l]";
                                Modelo.Comb_sinc_par_uni = "[l]";
                                Modelo.CombATM_uni = "[l]";
                                Modelo.Consumo_uni = "[l/h]";

                                Modelo.EficTerm_uni = "[kWh/gal]";

                                //Modelo.PrecioCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTransCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTratMecCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTratQuiCComb_uni = "[S/./Bbl]";

                                Modelo.LHV_abrev = "(PCalR500)";
                                break;
                            //case "GAS NATURAL":
                            //    Modelo.Comb_arr_sinc_uni = "[m3]";
                            //    Modelo.Comb_arr_sinc_F1_uni = "[m3]";
                            //    Modelo.Comb_arr_sinc_int_uni = "[m3]";
                            //    Modelo.Comb_arr_sinc_cal_uni = "[m3]";
                            //    Modelo.Comb_sinc_PC_uni = "[m3]";
                            //    Modelo.Comb_sinc_PC_F1_uni = "[m3]";
                            //    Modelo.Comb_sinc_PC_int_uni = "[m3]";
                            //    Modelo.Comb_sinc_PC_cal_uni = "[m3]";
                            //    Modelo.CombPRD_uni = "[m3]";
                            //    Modelo.Comb_PC_sinc_uni = "[m3]";
                            //    Modelo.Comb_sinc_par_uni = "[m3]";
                            //    Modelo.CombATM_uni = "[m3]";



                            //    Modelo.HHV_uni = "[Btu/pc]";
                            //    Modelo.LHV_uni = "[Btu/pc]";

                            //    Modelo.EficTerm_uni = "[kWh/pc]";

                            //    Modelo.PrecioCComb_uni = "[S/./MMBtu]";
                            //    Modelo.CostoTransCComb_uni = "[S/./MMBtu]";
                            //    Modelo.CostoTratMecCComb_uni = "[S/./MMBtu]";
                            //    Modelo.CostoTratQuiCComb_uni = "[S/./MMBtu]";

                            //    Modelo.HHV_abrev = "(HHVg)";
                            //    Modelo.LHV_abrev = "(LHVg)";

                            //    DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 61);//En caso Gas se usa Total Costo Combustible GAS
                            //    Modelo.PrecioCComb = DatoComb == null ? "" : DatoComb.VALOR;


                            //    break;
                            case "BAGAZO":
                                Modelo.HHV_uni = "[kJ/kg]";
                                Modelo.LHV_uni = "[kJ/kg]";
                                Modelo.EficTerm_uni = "[kWh/kg]";
                                Modelo.EficBTUKWh_uni = "[kJ/kWh]";

                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 539);
                                Modelo.EficTerm = conDato.VALOR;
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 193);
                                Modelo.EficBTUKWh = conDato.VALOR;

                                Modelo.CostoTotalComb_uni = "[S/./kg]";
                                Modelo.PrecioCComb_uni = "[S/./kg]";
                                Modelo.CostoTransCComb_uni = "[S/./kg]";
                                Modelo.CostoTratMecCComb_uni = "[S/./kg]";
                                Modelo.CostoTratQuiCComb_uni = "[S/./kg]";

                                Modelo.CombPRD_uni = "[kg]";
                                Modelo.CombATM_uni = "[kg]";

                                break;
                            case "BIOGAS":
                                Modelo.HHV_uni = "[kJ/m3]";
                                Modelo.LHV_uni = "[kJ/m3]";

                                Modelo.Comb_arr_sinc_uni = "[m3]";
                                Modelo.Comb_arr_sinc_F1_uni = "[m3]";
                                Modelo.Comb_arr_sinc_int_uni = "[m3]";
                                Modelo.Comb_arr_sinc_cal_uni = "[m3]";
                                Modelo.Comb_sinc_PC_uni = "[m3]";
                                Modelo.Comb_sinc_PC_F1_uni = "[m3]";
                                Modelo.Comb_sinc_PC_int_uni = "[m3]";
                                Modelo.Comb_sinc_PC_cal_uni = "[m3]";
                                Modelo.CombPRD_uni = "[m3]";
                                Modelo.Comb_PC_sinc_uni = "[m3]";
                                Modelo.Comb_sinc_par_uni = "[m3]";
                                Modelo.CombATM_uni = "[m3]";
                                Modelo.Consumo_uni = "[m3/h]";

                                Modelo.EficTerm_uni = "[kWh/m3]";// "[kWh/pc]";
                                Modelo.CostoTotalComb_uni = "[S/./m3]";
                                Modelo.PrecioCComb_uni = "[S/./m3]";
                                Modelo.CostoTransCComb_uni = "[S/./m3]";
                                Modelo.CostoTratMecCComb_uni = "[S/./m3]";
                                Modelo.CostoTratQuiCComb_uni = "[S/./m3]";

                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 539);
                                Modelo.EficTerm = conDato.VALOR;
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 193);
                                Modelo.EficBTUKWh = conDato.VALOR;
                                break;

                            case "R6":
                            case "RESIDUAL 6":

                                #region GENERAL PARA COMBUSTIBLES LIQUIDOS
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 187);
                                //Modelo.a = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 188);
                                //Modelo.b = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 189);
                                //Modelo.c = conDato.VALOR;
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 539);
                                Modelo.EficTerm = conDato.VALOR;
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 193);
                                Modelo.EficBTUKWh = conDato.VALOR;
                                #endregion

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 70);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 216);
                                Modelo.LHV = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(216);
                                Modelo.HHV_uni = "[" + conceptoDto.Concepunid + "]";
                                Modelo.LHV_uni = "[kJ/kg]";

                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 508);
                                Modelo.Densidad = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(508);
                                Modelo.Densidad_uni = "[" + conceptoDto.Concepunid + "]";

                                //Costo Combustible
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 532);
                                Modelo.CostoTotalComb = DatoComb == null ? "" : DatoComb.VALOR;
                                Modelo.CostoTotalComb_uni = "[S/./l]";

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 48);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 526);
                                Modelo.PrecioCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(526);

                                try
                                {
                                    Modelo.PrecioCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.PrecioCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 49);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 527);
                                Modelo.CostoTransCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(527);
                                Modelo.CostoTransCComb_uni = "[" + conceptoDto.Concepunid + "]";

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 50);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 528);
                                Modelo.CostoTratMecCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(528);

                                try
                                {
                                    Modelo.CostoTratMecCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.CostoTratMecCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 51);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 529);
                                Modelo.CostoTratQuiCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(529);

                                try
                                {
                                    Modelo.CostoTratQuiCComb_uni = "[" + conceptoDto.Concepunid.Trim() + "]";
                                }
                                catch
                                {
                                    Modelo.CostoTratQuiCComb_uni = "[" + conceptoDto.Concepunid + "]";
                                }

                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 52);
                                Modelo.CostoFinCComb = DatoComb == null ? "" : DatoComb.VALOR;

                                Modelo.Comb_arr_sinc_uni = "[l]";
                                Modelo.Comb_arr_sinc_F1_uni = "[l]";
                                Modelo.Comb_arr_sinc_int_uni = "[l]";
                                Modelo.Comb_arr_sinc_cal_uni = "[l]";
                                Modelo.Comb_sinc_PC_uni = "[l]";
                                Modelo.Comb_sinc_PC_F1_uni = "[l]";
                                Modelo.Comb_sinc_PC_int_uni = "[l]";
                                Modelo.Comb_sinc_PC_cal_uni = "[l]";
                                Modelo.CombPRD_uni = "[l]";
                                Modelo.Comb_PC_sinc_uni = "[l]";
                                Modelo.Comb_sinc_par_uni = "[l]";
                                Modelo.CombATM_uni = "[l]";
                                Modelo.Consumo_uni = "[l/h]";

                                //Modelo.EficTerm_uni = "[kWh/gal]";
                                //Modelo.PrecioCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTransCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTratMecCComb_uni = "[S/./Bbl]";
                                //Modelo.CostoTratQuiCComb_uni = "[S/./Bbl]";

                                Modelo.LHV_abrev = "(PCalR6)";
                                break;
                            case "CARBON":
                            case "CARBÓN":

                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 187);
                                //Modelo.a = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 188);
                                //Modelo.b = conDato.VALOR;
                                //conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 189);
                                //Modelo.c = conDato.VALOR;
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 539);
                                Modelo.EficTerm = conDato.VALOR;
                                conDato = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 193);
                                Modelo.EficBTUKWh = conDato.VALOR;


                                //DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 73);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 222);
                                Modelo.LHV = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(222);
                                Modelo.HHV_uni = "[" + conceptoDto.Concepunid + "]";
                                Modelo.LHV_uni = "[kJ/kg]";

                                //Costo Combustible
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 221);
                                Modelo.CostoTotalComb = DatoComb == null ? "" : DatoComb.VALOR;
                                Modelo.CostoTotalComb_uni = "[S/./kg]";

                                //DatoComb = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 63);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 218);
                                Modelo.PrecioCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(218);
                                Modelo.PrecioCComb_uni = "[" + conceptoDto.Concepunid + "]";

                                //DatoComb = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 64);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 219);
                                Modelo.CostoTransCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(219);
                                Modelo.CostoTransCComb_uni = "[" + conceptoDto.Concepunid + "]";

                                //DatoComb = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 65);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 223);
                                Modelo.CostoTratMecCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(223);
                                Modelo.CostoTratMecCComb_uni = "[" + conceptoDto.Concepunid + "]";

                                //DatoComb = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 66);
                                DatoComb = lsValoresMOCentral.SingleOrDefault(mo => mo.CONCEPCODI == 224);
                                Modelo.CostoTratQuiCComb = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(224);
                                Modelo.CostoTratQuiCComb_uni = "[" + conceptoDto.Concepunid + "]";


                                DatoComb = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 67);
                                Modelo.CostoFinCComb = DatoComb == null ? "" : DatoComb.VALOR;


                                Modelo.Comb_arr_sinc_uni = "[kg]";
                                Modelo.Comb_arr_sinc_F1_uni = "[kg]";
                                Modelo.Comb_arr_sinc_int_uni = "[kg]";
                                Modelo.Comb_arr_sinc_cal_uni = "[kg]";
                                Modelo.Comb_sinc_PC_uni = "[kg]";
                                Modelo.Comb_sinc_PC_F1_uni = "[kg]";
                                Modelo.Comb_sinc_PC_int_uni = "[kg]";
                                Modelo.Comb_sinc_PC_cal_uni = "[kg]";
                                Modelo.CombPRD_uni = "[kg]";
                                Modelo.Comb_PC_sinc_uni = "[kg]";
                                Modelo.Comb_sinc_par_uni = "[kg]";
                                Modelo.CombATM_uni = "[kg]";
                                Modelo.Consumo_uni = "[kg/h]";


                                Modelo.EficTerm_uni = "[kWh/kg]";

                                //Modelo.PrecioCComb_uni = "[S/./kg]";
                                //Modelo.CostoTransCComb_uni = "[S/./kg]";
                                //Modelo.CostoTratMecCComb_uni = "[S/./kg]";
                                //Modelo.CostoTratQuiCComb_uni = "[S/./kg]";

                                Modelo.LHV_abrev = "(PCalCarb)";

                                Modelo.TextoCostoTransporte = "Costo de Seguros y Fletes Marítimos Carbón";
                                Modelo.TextoCostoTratamientoMecanico = "Costo Aduanas y Desaduanaje Carbón";
                                Modelo.TextoCostoTratamientoQuimico = "Costo Embarques y Fletes Terrestres Carbón";

                                break;
                            default:
                                DatoComb = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 97);
                                Modelo.HHV = DatoComb == null ? "" : DatoComb.VALOR;
                                conceptoDto = appDespacho.GetByIdPrConcepto(97);
                                Modelo.HHV_uni = "[" + conceptoDto.Concepunid + "]";
                                break;

                        }
                        break;
                    //case 147:
                    //    Modelo.ge = Valor.VALOR;
                    //    break;
                    case 148:
                        Modelo.TempComb = Valor.VALOR;
                        break;
                    case 187:
                        Modelo.a = Valor.VALOR;
                        break;
                    case 188:
                        Modelo.b = Valor.VALOR;
                        break;
                    case 189:
                        Modelo.c = Valor.VALOR;
                        break;
                    case 78:
                        Modelo.CombATM = Valor.VALOR;

                        break;
                    /*
                case 149:
                    Modelo.Comb_arr_sinc = Valor.VALOR;

                    break;
                    */
                    /*
                    case 150:
                        Modelo.Comb_arr_sinc_F1 = Valor.VALOR;

                        break;*/
                    /*
                case 151:
                    Modelo.Comb_arr_sinc_F2 = Valor.VALOR;
                    break;*/
                    /*
                case 152:
                    Modelo.Comb_arr_sinc_int = Valor.VALOR;

                    break;
                case 153:
                    Modelo.Comb_arr_sinc_cal = Valor.VALOR;

                    break;*/
                    /*
                case 154:
                    Modelo.Comb_sinc_PC = Valor.VALOR;

                    break;
                    */
                    /*
                    case 155:
                        Modelo.Comb_sinc_PC_F1 = Valor.VALOR;

                        break;
                        */
                    /*
                case 156:
                    Modelo.Comb_sinc_PC_F2 = Valor.VALOR;
                    break;
                case 157:
                    Modelo.Comb_sinc_PC_int = Valor.VALOR;

                    break;
                case 158:
                    Modelo.Comb_sinc_PC_cal = Valor.VALOR;

                    break;*/
                    case 79:
                        Modelo.CombPRD = Valor.VALOR;

                        break;
                    /*
                case 159:
                    Modelo.Comb_PC_sinc = Valor.VALOR;

                    break;
                    */
                    /*
                    case 154:
                        Modelo.Comb_sinc_PC = Valor.VALOR;

                        break; */
                    /*
                case 160:
                    Modelo.Comb_sinc_par = Valor.VALOR;

                    break;
                    */
                    //case 17:
                    //    Modelo.EficTerm = Valor.VALOR;
                    //    break;
                    //case 74:
                    //    Modelo.EficBTUKWh = Valor.VALOR;
                    //    break;
                    case 27:
                        Modelo.CVC = Valor.VALOR;
                        break;
                    case 62:
                        Modelo.CVNC = Valor.VALOR;
                        break;
                    case 161:
                        Modelo.CVONC = Valor.VALOR;
                        break;
                    case 162:
                        Modelo.CVM = Valor.VALOR;
                        break;
                    //case 80:
                    //    Modelo.CMarr = Valor.VALOR;
                    //    break;
                    case 163:
                        Modelo.SSAA = Valor.VALOR;
                        break;
                    case 164:
                        Modelo.FDP = Valor.VALOR;
                        break;
                    case 167:
                        Modelo.C_Arr_Par_f1 = Valor.VALOR;
                        break;
                    case 168:
                        Modelo.C_Arr_Par_f2 = Valor.VALOR;
                        break;
                    case 169:
                        Modelo.C_Arr_Par_int = Valor.VALOR;
                        break;
                    case 170:
                        Modelo.C_Arr_Par_cal = Valor.VALOR;
                        break;
                    case 184:
                        Modelo.Ccbef = Valor.VALOR;
                        break;
                    case 171:
                        Modelo.Ccbef_f1 = Valor.VALOR;
                        break;
                    case 172:
                        Modelo.Ccbef_f2 = Valor.VALOR;
                        break;
                    case 173:
                        Modelo.Ccbef_int = Valor.VALOR;
                        break;
                    case 174:
                        Modelo.Ccbef_cal = Valor.VALOR;
                        break;
                    /*
                case 175:
                    Modelo.CombPE = Valor.VALOR;
                    break;
                    */
                    case 176:
                        Modelo.Pot_punto1 = Valor.VALOR;
                        break;
                    /*
                case 177:
                    Modelo.Comb_punto1 = Valor.VALOR;
                    break;
                    */
                    case 178:
                        Modelo.Pot_punto2 = Valor.VALOR;
                        break;
                    /*
                case 179:
                    Modelo.Comb_punto2 = Valor.VALOR;
                    break;
                    */
                    case 180:
                        Modelo.Pot_punto3 = Valor.VALOR;
                        break;
                    /*
                case 181:
                    Modelo.Comb_punto3 = Valor.VALOR;
                    break;
                    */
                    case 182:
                        Modelo.Pot_punto4 = Valor.VALOR;
                        break;
                    /*
                case 183:
                    Modelo.Comb_punto4 = Valor.VALOR;
                    break;
                    */
                    case 516:
                        Modelo.CombPE = Valor.VALOR;
                        break;
                    case 517:
                        Modelo.Comb_punto1 = Valor.VALOR;
                        break;
                    case 518:
                        Modelo.Comb_punto2 = Valor.VALOR;
                        break;
                    case 519:
                        Modelo.Comb_punto3 = Valor.VALOR;
                        break;
                    case 520:
                        Modelo.Comb_punto4 = Valor.VALOR;
                        break;
                    case 373:
                        Modelo.Comb_arr_sinc = Valor.VALOR;
                        break;
                    case 378:
                        Modelo.Comb_sinc_PC = Valor.VALOR;
                        break;
                    case 383:
                        Modelo.Comb_PC_sinc = Valor.VALOR;
                        break;
                    case 384:
                        Modelo.Comb_sinc_par = Valor.VALOR;
                        break;
                    case 374:
                        Modelo.Comb_arr_sinc_F1 = Valor.VALOR;
                        break;
                    case 375:
                        Modelo.Comb_arr_sinc_F2 = Valor.VALOR;
                        break;
                    case 376:
                        Modelo.Comb_arr_sinc_int = Valor.VALOR;
                        break;
                    case 377:
                        Modelo.Comb_arr_sinc_cal = Valor.VALOR;
                        break;
                    case 379:
                        Modelo.Comb_sinc_PC_F1 = Valor.VALOR;
                        break;
                    case 380:
                        Modelo.Comb_sinc_PC_F2 = Valor.VALOR;
                        break;
                    case 381:
                        Modelo.Comb_sinc_PC_int = Valor.VALOR;
                        break;
                    case 382:
                        Modelo.Comb_sinc_PC_cal = Valor.VALOR;
                        break;
                }
            }

            //foreach (var Valor in lsValoresMOGrupo)
            //{
            //}

            //var lstModosEspeciales = ConfigurationManager.AppSettings["ModosOperacionEspeciales"].Split(',');
            var lstModosEspeciales = ConstantesIndisponibilidades.ModosOperacionEspeciales.Split(',');
            Modelo.bEsCasoIlo = false;
            string sAbrevModo = oModoOperacion.Grupoabrev.Trim().ToUpperInvariant();
            Modelo.CodModo = sAbrevModo;
            foreach (var sModoEspecial in lstModosEspeciales)
            {
                if (sAbrevModo == sModoEspecial.ToUpperInvariant().Trim())
                {
                    Modelo.bEsCasoIlo = true;
                    break;
                }
            }
            if (Modelo.bEsCasoIlo)
            {
                Modelo.sRowSpanVelocidad = "6";
                Modelo.sRowSpanTiempo = "19";
                Modelo.sRowSpanEnergia = "6";
                Modelo.sRowSpanCombustible = "19";// "21";
                Modelo.sRowSpanArranque = "11";
                Modelo.sRowSpanCCBEF = "5";
                Modelo.sNumeral1 = "1.9.5";
                Modelo.sNumeral2 = "1.9.6";
            }
            else
            {
                Modelo.sRowSpanVelocidad = "2";
                Modelo.sRowSpanTiempo = "11";
                Modelo.sRowSpanEnergia = "2";
                Modelo.sRowSpanCombustible = "11";// "13";
                Modelo.sRowSpanArranque = "3";
                Modelo.sRowSpanCCBEF = "1";
                Modelo.sNumeral1 = "1.9.1";
                Modelo.sNumeral2 = "1.9.2";
            }

            //if (Modelo.CodCentral == "11571")

            if (grupocodi == "318")
            {
                Modelo.sRowSpanTiempo = "15";
            }

            #region "Calculo Costo Total Combustible"

            //try
            //{
            //    decimal dPrecioCComb = string.IsNullOrEmpty(Modelo.PrecioCComb) ? 0 : Convert.ToDecimal(Modelo.PrecioCComb);
            //    decimal dCostoTransCComb = string.IsNullOrEmpty(Modelo.CostoTransCComb) ? 0 : Convert.ToDecimal(Modelo.CostoTransCComb);
            //    decimal dCostoTratMecCComb = string.IsNullOrEmpty(Modelo.CostoTratMecCComb) ? 0 : Convert.ToDecimal(Modelo.CostoTratMecCComb);
            //    decimal dCostoTratQuiCComb = string.IsNullOrEmpty(Modelo.CostoTratQuiCComb) ? 0 : Convert.ToDecimal(Modelo.CostoTratQuiCComb);
            //    decimal dCostoFinCComb = string.IsNullOrEmpty(Modelo.CostoFinCComb) ? 0 : Convert.ToDecimal(Modelo.CostoFinCComb);
            //    var dCostoTotalComb = dPrecioCComb + dCostoTransCComb + dCostoTratMecCComb + dCostoTratQuiCComb +
            //                          dCostoFinCComb;
            //    Modelo.CostoTotalComb = dCostoTotalComb.ToString();
            //}
            //catch (Exception)
            //{ }

            #endregion
            #region "Cálculo de CCbef"

            string sTipoCombustible = "";
            if (Modelo.TipComb != null)
                sTipoCombustible = Modelo.TipComb;
            try
            {
                if (!string.IsNullOrEmpty(Modelo.TipComb))
                {
                    double dComb_arr_sinc = string.IsNullOrEmpty(Modelo.Comb_arr_sinc) ? 0 : Convert.ToDouble(Modelo.Comb_arr_sinc);
                    double dComb_sinc_PC = string.IsNullOrEmpty(Modelo.Comb_sinc_PC) ? 0 : Convert.ToDouble(Modelo.Comb_sinc_PC);
                    double dComb_PC_sinc = string.IsNullOrEmpty(Modelo.Comb_PC_sinc) ? 0 : Convert.ToDouble(Modelo.Comb_PC_sinc);
                    double dComb_sinc_par = string.IsNullOrEmpty(Modelo.Comb_sinc_par) ? 0 : Convert.ToDouble(Modelo.Comb_sinc_par);

                    double dLHV = string.IsNullOrEmpty(Modelo.CostoTotalComb) ? 0 : Convert.ToDouble(Modelo.CostoTotalComb);
                    double dCostoTotalComb = string.IsNullOrEmpty(Modelo.Comb_sinc_par) ? 0 : Convert.ToDouble(Modelo.Comb_sinc_par);

                    var SumaTotal = dComb_arr_sinc + dComb_sinc_PC + dComb_PC_sinc + dComb_sinc_par;
                    double dCCbef = 0;
                    switch (sTipoCombustible.ToUpperInvariant())
                    {
                        case "GAS"://GAS
                        case "GAS NATURAL":
                        case "BIOGAS":
                            dCCbef = (SumaTotal * dLHV / 28316.846592) * dCostoTotalComb;
                            break;
                        case "CARBON"://SOLIDOS
                        case "CARBÓN":
                            dCCbef = SumaTotal * dCostoTotalComb;
                            break;
                        case "DIESEL"://LIQUIDOS
                        case "D2":
                        case "R500":
                        case "RESIDUAL 500":
                        case "R6":
                        case "RESIDUAL 6":
                            dCCbef = (SumaTotal / 42) * dCostoTotalComb;
                            break;

                    }
                    Modelo.Ccbef = dCCbef.ToString();
                }
            }
            catch (Exception)
            { }
            #endregion
            #region "Costo Total Arranque Parada"

            try
            {
                decimal dCcbef = string.IsNullOrEmpty(Modelo.Ccbef) ? 0 : Convert.ToDecimal(Modelo.Ccbef);
                decimal dCMarr = string.IsNullOrEmpty(Modelo.CMarr) ? 0 : Convert.ToDecimal(Modelo.CMarr);

                decimal dC_Arr_Par = dCcbef + dCMarr;//Costo Total de Arranque Parada
                Modelo.C_Arr_Par = dC_Arr_Par.ToString();
            }
            catch (Exception)
            { }
            #endregion

            #region "En caso el MO Opere a GAS"
            if (sCombustible.ToUpperInvariant().StartsWith("GAS"))
            {
                var oAux = new ConceptoDatoDTO();
                //ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 187);//A
                //Modelo.a = oAux.VALOR;
                //oAux = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 188);//B
                //Modelo.b = oAux.VALOR;
                //oAux = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 189);//C
                //Modelo.c = oAux.VALOR;
                oAux = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 539);//Rendimiento:
                Modelo.EficTerm = oAux.VALOR;
                oAux = ValoresMO.SingleOrDefault(mo => mo.CONCEPCODI == 193);//Consumo especifico de Calor:
                Modelo.EficBTUKWh = oAux.VALOR;
                conceptoDto = appDespacho.GetByIdPrConcepto(193);
                Modelo.EficBTUKWh_uni = "[" + conceptoDto.Concepunid + "]";
            }
            #endregion
            return Modelo;
        }

        /// <summary>
        /// Obtiene los datos del modo de operación, es decir: potencia efectiva, consumo de combustible, lista de número de días, tipo de combustible
        /// en base al filtro especificado. Incluyendo los casos de bifurcación 
        /// </summary>
        /// <param name="fechaini"></param>
        /// <param name="fechafin"></param>
        /// <param name="grupocodi"></param>
        /// <param name="mo1"></param>
        /// <param name="mo2"></param>
        /// <param name="mo3"></param>
        private void DatosModoOperacion(DateTime fechaini, DateTime fechafin, string grupocodi,
            out ModoOperacion mo1, out ModoOperacion mo2, out ModoOperacion mo3)
        {
            mo1 = null;
            mo2 = null;
            mo3 = null;

            try
            {
                string filtro = string.Format("grupocodi = {0}, concepcodi = {1} y fechadat = {2}", grupocodi, ConstantesIndisponibilidades.ConcepcodiMo, fechafin.ToString(ConstantesBase.FormatoFecha));
                List<PrGrupodatDTO> listPrGrupodat = FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupodatByCriteria(grupocodi, ConstantesIndisponibilidades.ConcepcodiMo, fechafin);
                bool existListPrGrupodat = (listPrGrupodat != null && listPrGrupodat.Count > 0);
                if (!existListPrGrupodat)
                {
                    throw new Exception(string.Format("No existe registros en PrGrupodata para el filtro: {0}.", filtro));
                }

                GetValuesFromListPrGrupodat(listPrGrupodat,
                    fechaini, fechafin, grupocodi, ConstantesIndisponibilidades.Concepcodi_14,
                    out DatoOperacion doPe1, out DatoOperacion doPe2);

                GetValuesFromListPrGrupodat(listPrGrupodat,
                    fechaini, fechafin, grupocodi, ConstantesIndisponibilidades.Concepcodi_516, ConstantesIndisponibilidades.Concepcodi_175,
                    out DatoOperacion doCombpe1, out DatoOperacion doCombpe2);

                SetModoOperacion(filtro, doPe1, doPe2, doCombpe1, doCombpe2, out mo1, out mo2, out mo3);

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Obtiene formuladat y sus días, y tipo de combustible que aplica para el listPrGrupodat enviado.
        /// En caso exista bifurcación: 
        /// Entonces, obtiene formuladat y sus días, y tipo de combustible en base a los filtros enviados
        /// y de manera ordenada, es decir: fechadat1 es primero, y fechadat2 es segundo
        /// </summary>
        /// <param name="listPrGrupodat"></param>
        /// <param name="fechaini"></param>
        /// <param name="fechafin"></param>
        /// <param name="grupocodi"></param>
        /// <param name="concepcodi"></param>
        /// <param name="datoOperacion1"></param>
        /// <param name="datoOperacion2"></param>
        private void GetValuesFromListPrGrupodat(List<PrGrupodatDTO> listPrGrupodat,
            DateTime fechaini, DateTime fechafin, string grupocodi, int concepcodi,
            out DatoOperacion datoOperacion1, out DatoOperacion datoOperacion2)
        {
            datoOperacion1 = null;
            datoOperacion2 = null;

            decimal formuladat1 = 0m;
            DateTime fechadat1;
            List<int> listDias1 = new List<int>();
            string tipocomb1 = null;

            decimal formuladat2 = 0m;
            DateTime fechadat2;
            List<int> listDias2 = new List<int>();
            string tipocomb2 = null;

            string filtro = string.Format("grupocodi = {0}, concepcodi = {1} y fechadat = {2}", grupocodi, concepcodi, fechafin.ToString(ConstantesBase.FormatoFecha));
            List<PrGrupodatDTO> listPrGrupodat_n = listPrGrupodat.Where(x => x.Concepcodi == concepcodi).ToList();
            bool existListPrGrupodat_n = (listPrGrupodat_n != null && listPrGrupodat_n.Count > 0);
            if (!existListPrGrupodat_n)
            {
                throw new Exception(string.Format("No existe registros en PrGrupodata para el filtro: {0}.", filtro));
            }

            PrGrupodatDTO prGrupodat_n = listPrGrupodat_n.FirstOrDefault();
            bool isNuloFechadat = (prGrupodat_n.Fechadat == null);
            if (isNuloFechadat)
            {
                throw new Exception(string.Format("Fechadat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro));
            }

            DateTime fechadat = Convert.ToDateTime(prGrupodat_n.Fechadat);
            bool isMenorOIgualFechadat = (fechadat.Date <= fechaini.Date);
            if (isMenorOIgualFechadat)
            {
                #region formuladat1
                bool isNullOrEmpty = string.IsNullOrEmpty(prGrupodat_n.Formuladat);
                if (isNullOrEmpty)
                {
                    throw new Exception(string.Format("Formuladat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro));
                }

                try
                {
                    formuladat1 = Convert.ToDecimal(prGrupodat_n.Formuladat);
                }
                catch
                {
                    throw new Exception(string.Format("Formuladat no tiene un valor decimal en PrGrupodata para el filtro: {0}.", filtro));
                }

                fechadat1 = Convert.ToDateTime(prGrupodat_n.Fechadat);
                for (int d = fechaini.Date.Day; d <= fechafin.Date.Day; d++)
                {
                    listDias1.Add(d);
                }

                tipocomb1 = prGrupodat_n.Tipocombustible;

                datoOperacion1 = new DatoOperacion
                {
                    Formuladat = formuladat1,
                    Fechadat = fechadat1,
                    ListDias = listDias1,
                    TipComb = tipocomb1
                };
                #endregion
            }
            else
            {
                DateTime fechafin_new = fechadat.AddDays(-1);
                string filtro_new = string.Format("grupocodi = {0}, concepcodi = {1} y fechadat = {2}", grupocodi, concepcodi, fechafin_new.ToString(ConstantesBase.FormatoFecha));

                #region formuladat1
                List<PrGrupodatDTO> listPrGrupodat_n_new = FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupodatByCriteria(grupocodi, concepcodi.ToString(), fechafin_new);
                bool existListPrGrupodat_n_new = (listPrGrupodat_n_new != null && listPrGrupodat_n_new.Count > 0);
                if (!existListPrGrupodat_n_new)
                {
                    throw new Exception(string.Format("No existe registros en PrGrupodata para el filtro: {0}.", filtro_new));
                }

                PrGrupodatDTO prGrupodat_n_new = listPrGrupodat_n_new.FirstOrDefault();
                bool isNullOrEmpty = string.IsNullOrEmpty(prGrupodat_n_new.Formuladat);
                if (isNullOrEmpty)
                {
                    throw new Exception(string.Format("Formuladat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro_new));
                }

                try
                {
                    formuladat1 = Convert.ToDecimal(prGrupodat_n_new.Formuladat);
                }
                catch
                {
                    throw new Exception(string.Format("Formuladat no tiene un valor decimal en PrGrupodata para el filtro: {0}.", filtro_new));
                }

                fechadat1 = Convert.ToDateTime(prGrupodat_n_new.Fechadat);
                for (int d = fechaini.Date.Day; d <= fechafin_new.Date.Day; d++)
                {
                    listDias1.Add(d);
                }

                tipocomb1 = prGrupodat_n_new.Tipocombustible;

                datoOperacion1 = new DatoOperacion
                {
                    Formuladat = formuladat1,
                    Fechadat = fechadat1,
                    ListDias = listDias1,
                    TipComb = tipocomb1
                };
                #endregion

                #region formuladat2
                isNullOrEmpty = string.IsNullOrEmpty(prGrupodat_n.Formuladat);
                if (isNullOrEmpty)
                {
                    throw new Exception(string.Format("Formuladat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro));
                }

                try
                {
                    formuladat2 = Convert.ToDecimal(prGrupodat_n.Formuladat);
                }
                catch
                {
                    throw new Exception(string.Format("Formuladat no tiene un valor decimal en PrGrupodata para el filtro: {0}.", filtro));
                }

                fechadat2 = Convert.ToDateTime(prGrupodat_n.Fechadat);
                for (int d = fechafin_new.AddDays(1).Date.Day; d <= fechafin.Date.Day; d++)
                {
                    listDias2.Add(d);
                }

                tipocomb2 = prGrupodat_n.Tipocombustible;

                datoOperacion2 = new DatoOperacion
                {
                    Formuladat = formuladat2,
                    Fechadat = fechadat2,
                    ListDias = listDias2,
                    TipComb = tipocomb2
                };
                #endregion
            }
        }

        /// <summary>
        /// Obtiene formuladat y sus días, y tipo de combustible que aplica para el listPrGrupodat enviado.
        /// En caso exista bifurcación: 
        /// Entonces, obtiene formuladat y sus días, y tipo de combustible en base a los filtros enviados
        /// y de manera ordenada, es decir: fechadat1 es primero, y fechadat2 es segundo.
        /// Incluyendo en caso no exista registro para concepcodi, utilizará concepcodi_reemplazo
        /// En caso no existan registros para el concepcodi en la primera consulta, obtendrá formuladat y sus días, y tipo de combustible en base a concepcodi_reemplazo
        /// </summary>
        /// <param name="listPrGrupodat"></param>
        /// <param name="fechaini"></param>
        /// <param name="fechafin"></param>
        /// <param name="grupocodi"></param>
        /// <param name="concepcodi"></param>
        /// <param name="concepcodi_reemplazo"></param>
        /// <param name="datoOperacion1"></param>
        /// <param name="datoOperacion2"></param>
        private void GetValuesFromListPrGrupodat(List<PrGrupodatDTO> listPrGrupodat,
            DateTime fechaini, DateTime fechafin, string grupocodi, int concepcodi, int concepcodi_reemplazo,
            out DatoOperacion datoOperacion1, out DatoOperacion datoOperacion2)
        {
            datoOperacion1 = null;
            datoOperacion2 = null;

            decimal formuladat1 = 0m;
            DateTime fechadat1;
            List<int> listDias1 = new List<int>();
            string tipocomb1 = null;

            decimal formuladat2 = 0m;
            DateTime fechadat2;
            List<int> listDias2 = new List<int>();
            string tipocomb2 = null;

            List<PrGrupodatDTO> listPrGrupodat_n = listPrGrupodat.Where(x => x.Concepcodi == concepcodi).ToList();
            bool existListPrGrupodat_n = (listPrGrupodat_n != null && listPrGrupodat_n.Count > 0);
            if (!existListPrGrupodat_n)
            {
                GetValuesFromListPrGrupodat(listPrGrupodat,
                    fechaini, fechafin, grupocodi, concepcodi_reemplazo,
                    out datoOperacion1, out datoOperacion2);
            }
            else
            {
                string filtro = string.Format("grupocodi = {0}, concepcodi = {1} y fechadat = {2}", grupocodi, concepcodi, fechafin.ToString(ConstantesBase.FormatoFecha));
                PrGrupodatDTO prGrupodat_n = listPrGrupodat_n.FirstOrDefault();
                bool isNuloFechadat = (prGrupodat_n.Fechadat == null);
                if (isNuloFechadat)
                {
                    throw new Exception(string.Format("Fechadat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro));
                }

                DateTime fechadat = Convert.ToDateTime(prGrupodat_n.Fechadat);
                bool isMenorOIgualFechadat = (fechadat.Date <= fechaini.Date);
                if (isMenorOIgualFechadat)
                {
                    #region formuladat1
                    bool isNullOrEmpty = string.IsNullOrEmpty(prGrupodat_n.Formuladat);
                    if (isNullOrEmpty)
                    {
                        throw new Exception(string.Format("Formuladat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro));
                    }

                    try
                    {
                        formuladat1 = Convert.ToDecimal(prGrupodat_n.Formuladat);
                    }
                    catch
                    {
                        throw new Exception(string.Format("Formuladat no tiene un valor decimal en PrGrupodata para el filtro: {0}.", filtro));
                    }

                    fechadat1 = Convert.ToDateTime(prGrupodat_n.Fechadat);
                    for (int d = fechaini.Date.Day; d <= fechafin.Date.Day; d++)
                    {
                        listDias1.Add(d);
                    }

                    tipocomb1 = prGrupodat_n.Tipocombustible;

                    datoOperacion1 = new DatoOperacion
                    {
                        Formuladat = formuladat1,
                        Fechadat = fechadat1,
                        ListDias = listDias1,
                        TipComb = tipocomb1
                    };
                    #endregion
                }
                else
                {
                    #region formuladat1
                    DateTime fechafin_new = fechadat.AddDays(-1);
                    string filtro_new = string.Format("grupocodi = {0}, concepcodi = {1} y fechadat = {2}", grupocodi, concepcodi, fechafin_new.ToString(ConstantesBase.FormatoFecha));

                    List<PrGrupodatDTO> listPrGrupodat_n_new = FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupodatByCriteria(grupocodi, concepcodi.ToString(), fechafin_new);
                    bool existListPrGrupodat_n_new = (listPrGrupodat_n_new != null && listPrGrupodat_n_new.Count > 0);
                    if (existListPrGrupodat_n_new)
                    {
                        PrGrupodatDTO prGrupodat_n_new = listPrGrupodat_n_new.FirstOrDefault();
                        bool isNullOrEmpty2 = string.IsNullOrEmpty(prGrupodat_n_new.Formuladat);
                        if (isNullOrEmpty2)
                        {
                            throw new Exception(string.Format("Formuladat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro_new));
                        }

                        try
                        {
                            formuladat1 = Convert.ToDecimal(prGrupodat_n_new.Formuladat);
                        }
                        catch
                        {
                            throw new Exception(string.Format("Formuladat no tiene un valor decimal en PrGrupodata para el filtro: {0}.", filtro_new));
                        }

                        fechadat1 = Convert.ToDateTime(prGrupodat_n_new.Fechadat);
                        for (int d = fechaini.Date.Day; d <= fechafin_new.Date.Day; d++)
                        {
                            listDias1.Add(d);
                        }

                        tipocomb1 = prGrupodat_n_new.Tipocombustible;

                        datoOperacion1 = new DatoOperacion
                        {
                            Formuladat = formuladat1,
                            Fechadat = fechadat1,
                            ListDias = listDias1,
                            TipComb = tipocomb1
                        };
                    }
                    else
                    {
                        string filtro_reemplazo_new = string.Format("grupocodi = {0}, concepcodi = {1} y fechadat = {2}", grupocodi, concepcodi_reemplazo, fechafin_new.ToString(ConstantesBase.FormatoFecha));
                        List<PrGrupodatDTO> listPrGrupodat_m_new = FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupodatByCriteria(grupocodi, concepcodi_reemplazo.ToString(), fechafin_new);
                        bool existListPrGrupodat_m_new = (listPrGrupodat_m_new != null && listPrGrupodat_m_new.Count > 0);
                        if (!existListPrGrupodat_m_new)
                        {
                            throw new Exception(string.Format("No existe registros en PrGrupodata para el filtro: {0}.", filtro_reemplazo_new));
                        }

                        PrGrupodatDTO prGrupodat_m_new = listPrGrupodat_m_new.FirstOrDefault();
                        bool isNullOrEmpty3 = string.IsNullOrEmpty(prGrupodat_m_new.Formuladat);
                        if (isNullOrEmpty3)
                        {
                            throw new Exception(string.Format("Formuladat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro_reemplazo_new));
                        }

                        try
                        {
                            formuladat1 = Convert.ToDecimal(prGrupodat_m_new.Formuladat);
                        }
                        catch
                        {
                            throw new Exception(string.Format("Formuladat no tiene un valor decimal en PrGrupodata para el filtro: {0}.", filtro_reemplazo_new));
                        }

                        fechadat1 = Convert.ToDateTime(prGrupodat_m_new.Fechadat);
                        for (int d = fechaini.Date.Day; d <= fechafin_new.Date.Day; d++)
                        {
                            listDias1.Add(d);
                        }

                        tipocomb1 = prGrupodat_m_new.Tipocombustible;

                        datoOperacion1 = new DatoOperacion
                        {
                            Formuladat = formuladat1,
                            Fechadat = fechadat1,
                            ListDias = listDias1,
                            TipComb = tipocomb1
                        };
                    }
                    #endregion

                    #region formuladat2
                    bool isNullOrEmpty = string.IsNullOrEmpty(prGrupodat_n.Formuladat);
                    if (isNullOrEmpty)
                    {
                        throw new Exception(string.Format("Formuladat no tiene un valor para en PrGrupodata para el filtro: {0}.", filtro));
                    }

                    try
                    {
                        formuladat2 = Convert.ToDecimal(prGrupodat_n.Formuladat);
                    }
                    catch
                    {
                        throw new Exception(string.Format("Formuladat no tiene un valor decimal en PrGrupodata para el filtro: {0}.", filtro));
                    }

                    fechadat2 = Convert.ToDateTime(prGrupodat_n.Fechadat);
                    for (int d = fechafin_new.AddDays(1).Date.Day; d <= fechafin.Date.Day; d++)
                    {
                        listDias2.Add(d);
                    }

                    tipocomb2 = prGrupodat_n.Tipocombustible;

                    datoOperacion2 = new DatoOperacion
                    {
                        Formuladat = formuladat2,
                        Fechadat = fechadat2,
                        ListDias = listDias2,
                        TipComb = tipocomb2
                    };
                    #endregion
                }
            }
        }

        /// <summary>
        /// Setea los valores para los Modos de Operacion (mo1, mo2, mo3) en base a las entradas de datos (doPe1, doPe2, doCombpe1, doCombpe2)
        /// Nota: Es importante conservar el orden de las entradas de datos.
        /// </summary>
        /// <param name="filtro"></param>
        /// <param name="doPe1"></param>
        /// <param name="doPe2"></param>
        /// <param name="doCombpe1"></param>
        /// <param name="doCombpe2"></param>
        /// <param name="mo1"></param>
        /// <param name="mo2"></param>
        /// <param name="mo3"></param>
        private void SetModoOperacion(string filtro,
            DatoOperacion doPe1, DatoOperacion doPe2, DatoOperacion doCombpe1, DatoOperacion doCombpe2,
            out ModoOperacion mo1, out ModoOperacion mo2, out ModoOperacion mo3)
        {
            mo1 = null;
            mo2 = null;
            mo3 = null;

            bool existPe1 = (doPe1 != null);
            bool existPe2 = (doPe2 != null);
            bool existCombpe1 = (doCombpe1 != null);
            bool existCombpe2 = (doCombpe2 != null);

            if (!existPe1)
            {
                throw new Exception(string.Format("No hay registro para la Potencia Efectiva para el filtro: {0}.", filtro));
            }

            if (!existCombpe1)
            {
                throw new Exception(string.Format("No hay registro para el Consumo de Combustible para el filtro: {0}.", filtro));
            }

            bool isBlock1 = (!existPe2 && !existCombpe2);
            bool isBlock2 = (existPe2 && existCombpe2 && doPe1.ListDias.Count == doCombpe1.ListDias.Count);
            bool isBlock3_Case1 = (existPe2 && existCombpe2 && doCombpe1.ListDias.Count < doPe1.ListDias.Count); //pe1-combpe1 / pe1-combpe2 / pe2-combpe2
            bool isBlock3_Case2 = (existPe2 && existCombpe2 && doPe1.ListDias.Count < doCombpe1.ListDias.Count); //pe1-combpe1 / pe2-combpe1 / pe2-combpe2 

            if (isBlock1)
            {
                mo1 = new ModoOperacion
                {
                    Pe = doPe1.Formuladat, // Convert.ToDecimal(pe1),
                    Combpe = doCombpe1.Formuladat, //Convert.ToDecimal(combpe1),
                    TipComb = doPe1.TipComb, //tcpe1,
                    ListDias = doPe1.ListDias, //listDiaspe1,
                    RngDias = string.Format("{0}-{1}", doPe1.ListDias[0], doPe1.ListDias[doPe1.ListDias.Count - 1])
                };
            }
            else if (isBlock2)
            {
                mo1 = new ModoOperacion
                {
                    Pe = doPe1.Formuladat, // Convert.ToDecimal(pe1),
                    Combpe = doCombpe1.Formuladat, //Convert.ToDecimal(combpe1),
                    TipComb = doPe1.TipComb, //tcpe1,
                    ListDias = doPe1.ListDias, //listDiaspe1,
                    RngDias = string.Format("{0}-{1}", doPe1.ListDias[0], doPe1.ListDias[doPe1.ListDias.Count - 1])
                };

                mo2 = new ModoOperacion
                {
                    Pe = doPe2.Formuladat, //Convert.ToDecimal(pe2),
                    Combpe = doCombpe2.Formuladat, //Convert.ToDecimal(combpe2),
                    TipComb = doPe2.TipComb, //tcpe2,
                    ListDias = doPe2.ListDias, //listDiaspe2,
                    RngDias = string.Format("{0}-{1}", doPe2.ListDias[0], doPe2.ListDias[doPe2.ListDias.Count - 1])
                };
            }
            else if (isBlock3_Case1) //pe1-combpe1 / pe1-combpe2 / pe2-combpe2
            {
                mo1 = new ModoOperacion
                {
                    Pe = doPe1.Formuladat, //Convert.ToDecimal(pe1),
                    Combpe = doCombpe1.Formuladat, //Convert.ToDecimal(combpe1),
                    TipComb = doPe1.TipComb, //tcpe1,
                    ListDias = doCombpe1.ListDias, //listDiascombpe1,
                    RngDias = string.Format("{0}-{1}", doCombpe1.ListDias[0], doCombpe1.ListDias[doCombpe1.ListDias.Count - 1])
                };

                List<int> listDiasMo2 = new List<int>();
                for (int i = doCombpe2.ListDias[0]; i <= doPe1.ListDias[doPe1.ListDias.Count - 1]; i++)
                {
                    listDiasMo2.Add(i);
                }

                mo2 = new ModoOperacion
                {
                    Pe = doPe1.Formuladat, //Convert.ToDecimal(pe1),
                    Combpe = doCombpe2.Formuladat, //Convert.ToDecimal(combpe2),
                    TipComb = doPe1.TipComb, //tcpe1,
                    ListDias = listDiasMo2,
                    RngDias = string.Format("{0}-{1}", listDiasMo2[0], listDiasMo2[listDiasMo2.Count - 1])
                };

                List<int> listDiasMo3 = new List<int>();
                for (int i = doPe1.ListDias[doPe1.ListDias.Count - 1] + 1; i <= doCombpe2.ListDias[doCombpe2.ListDias.Count - 1]; i++)
                {
                    listDiasMo3.Add(i);
                }

                mo3 = new ModoOperacion
                {
                    Pe = doPe2.Formuladat, // Convert.ToDecimal(pe2),
                    Combpe = doCombpe2.Formuladat, //Convert.ToDecimal(combpe2),
                    TipComb = doPe2.TipComb, //tcpe2,
                    ListDias = listDiasMo3,
                    RngDias = string.Format("{0}-{1}", listDiasMo3[0], listDiasMo3[listDiasMo3.Count - 1])
                };
            }
            else if (isBlock3_Case2) //pe1-combpe1 / pe2-combpe1 / pe2-combpe2 
            {
                mo1 = new ModoOperacion
                {
                    Pe = doPe1.Formuladat, //Convert.ToDecimal(pe1),
                    Combpe = doCombpe1.Formuladat, //Convert.ToDecimal(combpe1),
                    TipComb = doPe1.TipComb, // tcpe1,
                    ListDias = doPe1.ListDias, //listDiaspe1,
                    RngDias = string.Format("{0}-{1}", doPe1.ListDias[0], doPe1.ListDias[doPe1.ListDias.Count - 1])
                };

                List<int> listDiasMo2 = new List<int>();
                for (int i = doPe1.ListDias[doPe1.ListDias.Count - 1] + 1; i <= doCombpe1.ListDias[doCombpe1.ListDias.Count - 1]; i++)
                {
                    listDiasMo2.Add(i);
                }

                mo2 = new ModoOperacion
                {
                    Pe = doPe2.Formuladat, //Convert.ToDecimal(pe2),
                    Combpe = doCombpe1.Formuladat, //Convert.ToDecimal(combpe1),
                    TipComb = doPe2.TipComb, //tcpe2,
                    ListDias = listDiasMo2,
                    RngDias = string.Format("{0}-{1}", listDiasMo2[0], listDiasMo2[listDiasMo2.Count - 1])
                };

                List<int> listDiasMo3 = new List<int>();
                for (int i = doCombpe1.ListDias[doCombpe1.ListDias.Count - 1] + 1; i <= doCombpe2.ListDias[doCombpe2.ListDias.Count - 1]; i++)
                {
                    listDiasMo3.Add(i);
                }

                mo3 = new ModoOperacion
                {
                    Pe = doPe2.Formuladat, //Convert.ToDecimal(pe2),
                    Combpe = doCombpe2.Formuladat, //Convert.ToDecimal(combpe2),
                    TipComb = doPe2.TipComb, //tcpe2,
                    ListDias = listDiasMo3,
                    RngDias = string.Format("{0}-{1}", listDiasMo3[0], listDiasMo3[listDiasMo3.Count - 1])
                };
            }
        }

        /// <summary>
        /// Obtiene los datos del modo de operación, es decir: potencia efectiva, consumo de combustible, lista de número de días, tipo de combustible
        /// en base al filtro especificado. Incluyendo los casos de bifurcación
        /// Este método es exclusivo para el caso de Independencia
        /// </summary>
        /// <param name="fechaini"></param>
        /// <param name="fechafin"></param>
        /// <param name="grupocodi"></param>
        /// <param name="equicodi"></param>
        /// <param name="mo1"></param>
        /// <param name="mo2"></param>
        /// <param name="mo3"></param>
        private void DatosModoOperacion(DateTime fechaini, DateTime fechafin, string grupocodi, string equicodi,
            out ModoOperacion mo1, out ModoOperacion mo2, out ModoOperacion mo3)
        {
            mo1 = null;
            mo2 = null;
            mo3 = null;

            try
            {
                string filtro = string.Format("grupocodi = {0}, equicodi = {1}, concepcodi = {2} y greqvafechadat = {3}", grupocodi, equicodi, ConstantesIndisponibilidades.ConcepcodiMo, fechafin.ToString(ConstantesBase.FormatoFecha));
                List<PrGrupoEquipoValDTO> listPrGrupoEquipoVal = FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupoEquipoValByCriteria(ConstantesIndisponibilidades.ConcepcodiMo, equicodi, grupocodi, fechafin);
                bool existListPrGrupoEquipoVal = (listPrGrupoEquipoVal != null && listPrGrupoEquipoVal.Count > 0);
                if (!existListPrGrupoEquipoVal)
                {
                    throw new Exception(string.Format("No existe registros en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                }

                GetValuesFromListPrGrupoEquipoVal(listPrGrupoEquipoVal,
                    fechaini, fechafin, grupocodi, equicodi, ConstantesIndisponibilidades.Concepcodi_14,
                    out DatoOperacion doPe1, out DatoOperacion doPe2);

                GetValuesFromListPrGrupoEquipoVal(listPrGrupoEquipoVal,
                    fechaini, fechafin, grupocodi, equicodi, ConstantesIndisponibilidades.Concepcodi_516, ConstantesIndisponibilidades.Concepcodi_175,
                    out DatoOperacion doCombpe1, out DatoOperacion doCombpe2);

                SetModoOperacion(filtro, doPe1, doPe2, doCombpe1, doCombpe2, out mo1, out mo2, out mo3);

            }
            catch
            {
                throw;
            }
        }

        /// <summary>
        /// Obtiene formuladat, fechadat y sus días, y tipo de combustible que aplica para el listPrGrupoEquipoVal enviado.
        /// En caso exista bifurcación: 
        /// Entonces, obtiene formuladat y sus días en base a los filtros enviados
        /// y de manera ordenada, es decir: fechadat1 es primero, y fechadat2 es segundo
        /// </summary>
        /// <param name="listPrGrupoEquipoVal"></param>
        /// <param name="fechaini"></param>
        /// <param name="fechafin"></param>
        /// <param name="grupocodi"></param>
        /// <param name="equicodi"></param>
        /// <param name="concepcodi"></param>
        /// <param name="datoOperacion1"></param>
        /// <param name="datoOperacion2"></param>
        private void GetValuesFromListPrGrupoEquipoVal(List<PrGrupoEquipoValDTO> listPrGrupoEquipoVal,
            DateTime fechaini, DateTime fechafin, string grupocodi, string equicodi, int concepcodi,
            out DatoOperacion datoOperacion1, out DatoOperacion datoOperacion2)
        {
            datoOperacion1 = null;
            datoOperacion2 = null;

            decimal formuladat1 = 0m;
            DateTime fechadat1;
            List<int> listDias1 = new List<int>();
            string tipocomb1 = null;

            decimal formuladat2 = 0m;
            DateTime fechadat2;
            List<int> listDias2 = new List<int>();
            string tipocomb2 = null;

            string filtro = string.Format("grupocodi = {0}, equicodi = {1}, concepcodi = {2} y greqvafechadat = {3}", grupocodi, equicodi, concepcodi, fechafin.ToString(ConstantesBase.FormatoFecha));
            List<PrGrupoEquipoValDTO> listPrGrupoEquipoVal_n = listPrGrupoEquipoVal.Where(x => x.Concepcodi == concepcodi).OrderByDescending(x => x.Greqvafechadat).ToList();
            bool existListPrGrupoEquipoVal_n = (listPrGrupoEquipoVal_n != null && listPrGrupoEquipoVal_n.Count > 0);
            if (!existListPrGrupoEquipoVal_n)
            {
                throw new Exception(string.Format("No existe registros en PrGrupoEquipoVal para el filtro: {0}.", filtro));
            }

            PrGrupoEquipoValDTO prGrupoEquipoVal_n = listPrGrupoEquipoVal_n.FirstOrDefault();
            bool isNuloFechadat = (prGrupoEquipoVal_n.Greqvafechadat == null);
            if (isNuloFechadat)
            {
                throw new Exception(string.Format("Greqvafechadat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro));
            }

            DateTime fechadat = prGrupoEquipoVal_n.Greqvafechadat;
            bool isMenorOIgualFechadat = (fechadat.Date <= fechaini.Date);
            if (isMenorOIgualFechadat)
            {
                #region formuladat1
                bool isNullOrEmpty = string.IsNullOrEmpty(prGrupoEquipoVal_n.Greqvaformuladat);
                if (isNullOrEmpty)
                {
                    throw new Exception(string.Format("Greqvaformuladat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                }

                try
                {
                    formuladat1 = Convert.ToDecimal(prGrupoEquipoVal_n.Greqvaformuladat);
                }
                catch
                {
                    throw new Exception(string.Format("Greqvaformuladat no tiene un valor decimal en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                }

                fechadat1 = prGrupoEquipoVal_n.Greqvafechadat;
                for (int d = fechaini.Date.Day; d <= fechafin.Date.Day; d++)
                {
                    listDias1.Add(d);
                }

                tipocomb1 = prGrupoEquipoVal_n.Tipocombustible;

                datoOperacion1 = new DatoOperacion
                {
                    Formuladat = formuladat1,
                    Fechadat = fechadat1,
                    ListDias = listDias1,
                    TipComb = tipocomb1
                };
                #endregion
            }
            else
            {
                DateTime fechafin_new = fechadat.AddDays(-1);
                string filtro_new = string.Format("grupocodi = {0}, equicodi = {1}, concepcodi = {2} y fechadat = {3}", grupocodi, equicodi, concepcodi, fechafin_new.ToString(ConstantesBase.FormatoFecha));

                #region formuladat1
                List<PrGrupoEquipoValDTO> listPrGrupoEquipoVal_n_new = FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupoEquipoValByCriteria(concepcodi.ToString(), equicodi, grupocodi, fechafin_new);
                bool existListPrGrupoEquipoVal_n_new = (listPrGrupoEquipoVal_n_new != null && listPrGrupoEquipoVal_n_new.Count > 0);
                if (!existListPrGrupoEquipoVal_n_new)
                {
                    throw new Exception(string.Format("No existe registros en PrGrupoEquipoVal para el filtro: {0}.", filtro_new));
                }

                PrGrupoEquipoValDTO prGrupoEquipoVal_n_new = listPrGrupoEquipoVal_n_new.FirstOrDefault();
                bool isNullOrEmpty = string.IsNullOrEmpty(prGrupoEquipoVal_n_new.Greqvaformuladat);
                if (isNullOrEmpty)
                {
                    throw new Exception(string.Format("Greqvaformuladat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro_new));
                }

                try
                {
                    formuladat1 = Convert.ToDecimal(prGrupoEquipoVal_n_new.Greqvaformuladat);
                }
                catch
                {
                    throw new Exception(string.Format("Greqvaformuladat no tiene un valor decimal en PrGrupoEquipoVal para el filtro: {0}.", filtro_new));
                }

                fechadat1 = prGrupoEquipoVal_n_new.Greqvafechadat;
                for (int d = fechaini.Date.Day; d <= fechafin_new.Date.Day; d++)
                {
                    listDias1.Add(d);
                }

                tipocomb1 = prGrupoEquipoVal_n_new.Tipocombustible;

                datoOperacion1 = new DatoOperacion
                {
                    Formuladat = formuladat1,
                    Fechadat = fechadat1,
                    ListDias = listDias1,
                    TipComb = tipocomb1
                };
                #endregion

                #region formuladat2
                isNullOrEmpty = string.IsNullOrEmpty(prGrupoEquipoVal_n.Greqvaformuladat);
                if (isNullOrEmpty)
                {
                    throw new Exception(string.Format("Greqvaformuladat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                }

                try
                {
                    formuladat2 = Convert.ToDecimal(prGrupoEquipoVal_n.Greqvaformuladat);
                }
                catch
                {
                    throw new Exception(string.Format("Greqvaformuladat no tiene un valor decimal en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                }

                fechadat2 = prGrupoEquipoVal_n.Greqvafechadat;
                for (int d = fechafin_new.AddDays(1).Date.Day; d <= fechafin.Date.Day; d++)
                {
                    listDias2.Add(d);
                }

                tipocomb2 = prGrupoEquipoVal_n.Tipocombustible;

                datoOperacion2 = new DatoOperacion
                {
                    Formuladat = formuladat2,
                    Fechadat = fechadat2,
                    ListDias = listDias2,
                    TipComb = tipocomb2
                };
                #endregion
            }
        }

        /// <summary>
        /// Obtiene formuladat, fechadat y sus días, y tipo de combustible que aplica para el listPrGrupoEquipoVal enviado.
        /// En caso exista bifurcación: 
        /// Entonces, obtiene formuladat y sus días, y tipo de combustible en base a los filtros enviados
        /// y de manera ordenada, es decir: fechadat1 es primero, y fechadat2 es segundo.
        /// Incluyendo en caso no exista registro para concepcodi, utilizará concepcodi_reemplazo
        /// En caso no existan registros para el concepcodi en la primera consulta, obtendrá formuladat y sus días, y tipo de combustible en base a concepcodi_reemplazo
        /// </summary>
        /// <param name="listPrGrupoEquipoVal"></param>
        /// <param name="fechaini"></param>
        /// <param name="fechafin"></param>
        /// <param name="grupocodi"></param>
        /// <param name="equicodi"></param>
        /// <param name="concepcodi"></param>
        /// <param name="concepcodi_reemplazo"></param>
        /// <param name="datoOperacion1"></param>
        /// <param name="datoOperacion2"></param>
        private void GetValuesFromListPrGrupoEquipoVal(List<PrGrupoEquipoValDTO> listPrGrupoEquipoVal,
            DateTime fechaini, DateTime fechafin, string grupocodi, string equicodi, int concepcodi, int concepcodi_reemplazo,
            out DatoOperacion datoOperacion1, out DatoOperacion datoOperacion2)
        {
            datoOperacion1 = null;
            datoOperacion2 = null;

            decimal formuladat1 = 0m;
            DateTime fechadat1;
            List<int> listDias1 = new List<int>();
            string tipocomb1 = null;

            decimal formuladat2 = 0m;
            DateTime fechadat2;
            List<int> listDias2 = new List<int>();
            string tipocomb2 = null;

            List<PrGrupoEquipoValDTO> listPrGrupoEquipoVal_n = listPrGrupoEquipoVal.Where(x => x.Concepcodi == concepcodi).OrderByDescending(x => x.Greqvafechadat).ToList();
            bool existListPrGrupoEquipoVal_n = (listPrGrupoEquipoVal_n != null && listPrGrupoEquipoVal_n.Count > 0);
            if (!existListPrGrupoEquipoVal_n)
            {
                GetValuesFromListPrGrupoEquipoVal(listPrGrupoEquipoVal,
                    fechaini, fechafin, grupocodi, equicodi, concepcodi_reemplazo,
                    out datoOperacion1, out datoOperacion2);
            }
            else
            {
                string filtro = string.Format("grupocodi = {0}, equicodi = {1}, concepcodi = {2} y fechadat = {3}", grupocodi, equicodi, concepcodi, fechafin.ToString(ConstantesBase.FormatoFecha));
                PrGrupoEquipoValDTO prGrupoEquipoVal_n = listPrGrupoEquipoVal_n.FirstOrDefault();
                bool isNuloFechadat = (prGrupoEquipoVal_n.Greqvafechadat == null);
                if (isNuloFechadat)
                {
                    throw new Exception(string.Format("Greqvafechadat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                }

                DateTime fechadat = Convert.ToDateTime(prGrupoEquipoVal_n.Greqvafechadat);
                bool isMenorOIgualFechadat = (fechadat.Date <= fechaini.Date);
                if (isMenorOIgualFechadat)
                {
                    #region formuladat1
                    bool isNullOrEmpty = string.IsNullOrEmpty(prGrupoEquipoVal_n.Greqvaformuladat);
                    if (isNullOrEmpty)
                    {
                        throw new Exception(string.Format("Greqvaformuladat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                    }

                    try
                    {
                        formuladat1 = Convert.ToDecimal(prGrupoEquipoVal_n.Greqvaformuladat);
                    }
                    catch
                    {
                        throw new Exception(string.Format("Greqvaformuladat no tiene un valor decimal en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                    }

                    fechadat1 = prGrupoEquipoVal_n.Greqvafechadat;
                    for (int d = fechaini.Date.Day; d <= fechafin.Date.Day; d++)
                    {
                        listDias1.Add(d);
                    }

                    tipocomb1 = prGrupoEquipoVal_n.Tipocombustible;

                    datoOperacion1 = new DatoOperacion
                    {
                        Formuladat = formuladat1,
                        Fechadat = fechadat1,
                        ListDias = listDias1,
                        TipComb = tipocomb1
                    };
                    #endregion
                }
                else
                {
                    #region formuladat1
                    DateTime fechafin_new = fechadat.AddDays(-1);
                    string filtro_new = string.Format("grupocodi = {0}, equicodi = {1}, concepcodi = {2} y fechadat = {3}", grupocodi, equicodi, concepcodi, fechafin_new.ToString(ConstantesBase.FormatoFecha));

                    List<PrGrupoEquipoValDTO> listPrGrupoEquipoVal_n_new = FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupoEquipoValByCriteria(concepcodi.ToString(), equicodi, grupocodi, fechafin_new);
                    bool existListPrGrupoEquipoVal_n_new = (listPrGrupoEquipoVal_n_new != null && listPrGrupoEquipoVal_n_new.Count > 0);
                    if (existListPrGrupoEquipoVal_n_new)
                    {
                        PrGrupoEquipoValDTO prGrupoEquipoVal_n_new = listPrGrupoEquipoVal_n_new.FirstOrDefault();
                        bool isNullOrEmpty2 = string.IsNullOrEmpty(prGrupoEquipoVal_n_new.Greqvaformuladat);
                        if (isNullOrEmpty2)
                        {
                            throw new Exception(string.Format("Greqvaformuladat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro_new));
                        }

                        try
                        {
                            formuladat1 = Convert.ToDecimal(prGrupoEquipoVal_n_new.Greqvaformuladat);
                        }
                        catch
                        {
                            throw new Exception(string.Format("Greqvaformuladat no tiene un valor decimal en PrGrupoEquipoVal para el filtro: {0}.", filtro_new));
                        }

                        fechadat1 = prGrupoEquipoVal_n_new.Greqvafechadat;
                        for (int d = fechaini.Date.Day; d <= fechafin_new.Date.Day; d++)
                        {
                            listDias1.Add(d);
                        }

                        tipocomb1 = prGrupoEquipoVal_n_new.Tipocombustible;

                        datoOperacion1 = new DatoOperacion
                        {
                            Formuladat = formuladat1,
                            Fechadat = fechadat1,
                            ListDias = listDias1,
                            TipComb = tipocomb1
                        };
                    }
                    else
                    {
                        string filtro_reemplazo_new = string.Format("grupocodi = {0}, equicodi = {1}, concepcodi = {2} y fechadat = {3}", grupocodi, equicodi, concepcodi_reemplazo, fechafin_new.ToString(ConstantesBase.FormatoFecha));
                        List<PrGrupoEquipoValDTO> listPrGrupoEquipoVal_m_new = FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupoEquipoValByCriteria(concepcodi_reemplazo.ToString(), equicodi, grupocodi, fechafin_new);
                        bool existListPrGrupoEquipoVal_m_new = (listPrGrupoEquipoVal_m_new != null && listPrGrupoEquipoVal_m_new.Count > 0);
                        if (!existListPrGrupoEquipoVal_m_new)
                        {
                            throw new Exception(string.Format("No existe registros en PrGrupoEquipoVal para el filtro: {0}.", filtro_reemplazo_new));
                        }

                        PrGrupoEquipoValDTO prGrupoEquipoVal_m_new = listPrGrupoEquipoVal_m_new.FirstOrDefault();
                        bool isNullOrEmpty3 = string.IsNullOrEmpty(prGrupoEquipoVal_m_new.Greqvaformuladat);
                        if (isNullOrEmpty3)
                        {
                            throw new Exception(string.Format("Greqvaformuladat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro_reemplazo_new));
                        }

                        try
                        {
                            formuladat1 = Convert.ToDecimal(prGrupoEquipoVal_m_new.Greqvaformuladat);
                        }
                        catch
                        {
                            throw new Exception(string.Format("Greqvaformuladat no tiene un valor decimal en PrGrupoEquipoVal para el filtro: {0}.", filtro_reemplazo_new));
                        }

                        fechadat1 = prGrupoEquipoVal_m_new.Greqvafechadat;
                        for (int d = fechaini.Date.Day; d <= fechafin_new.Date.Day; d++)
                        {
                            listDias1.Add(d);
                        }

                        tipocomb1 = prGrupoEquipoVal_m_new.Tipocombustible;

                        datoOperacion1 = new DatoOperacion
                        {
                            Formuladat = formuladat1,
                            Fechadat = fechadat1,
                            ListDias = listDias1,
                            TipComb = tipocomb1
                        };
                    }
                    #endregion

                    #region formuladat2
                    bool isNullOrEmpty = string.IsNullOrEmpty(prGrupoEquipoVal_n.Greqvaformuladat);
                    if (isNullOrEmpty)
                    {
                        throw new Exception(string.Format("Greqvaformuladat no tiene un valor para en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                    }

                    try
                    {
                        formuladat2 = Convert.ToDecimal(prGrupoEquipoVal_n.Greqvaformuladat);
                    }
                    catch
                    {
                        throw new Exception(string.Format("Greqvaformuladat no tiene un valor decimal en PrGrupoEquipoVal para el filtro: {0}.", filtro));
                    }

                    fechadat2 = prGrupoEquipoVal_n.Greqvafechadat;
                    for (int d = fechafin_new.AddDays(1).Date.Day; d <= fechafin.Date.Day; d++)
                    {
                        listDias2.Add(d);
                    }

                    tipocomb2 = prGrupoEquipoVal_n.Tipocombustible;

                    datoOperacion2 = new DatoOperacion
                    {
                        Formuladat = formuladat2,
                        Fechadat = fechadat2,
                        ListDias = listDias2,
                        TipComb = tipocomb2
                    };
                    #endregion
                }
            }
        }

        #endregion

        #region IND_PERIODO
        /// <summary>
        /// Listar los periodos de indisponibilidad
        /// </summary>
        /// <returns>List<IndPeriodoDTO></returns>
        public List<IndPeriodoDTO> ListPeriodo()
        {
            return FactorySic.GetIndPeriodoRepository().List();
        }

        #endregion

        #region Relación Empresa

        /// <summary>
        /// Retorna la lista de Centrales/Unidades Termicas
        /// </summary>
        /// <returns></returns>
        public List<IndReporteTotalDTO> ListarUnidadTermicoOpComercialToRelacionEmpresa()
        {
            int aplicativo = ConstantesIndisponibilidades.AppPR25;
            DateTime fechaInicio = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1); ;
            DateTime fechaFin = DateTime.Now.GetLastDateOfMonth();

            ListarUnidadTermicoOpComercial(aplicativo, fechaInicio, fechaFin, out List<EqEquipoDTO> listaUnidades, out List<EqEquipoDTO> listaEquiposTermicos, out List<ResultadoValidacionAplicativo> listaMsj);

            List<IndReporteTotalDTO> lista = new List<IndReporteTotalDTO>();

            foreach (var unidad in listaUnidades)
            {
                IndReporteTotalDTO objUnidad = new IndReporteTotalDTO()
                {
                    Emprcodi = unidad.Emprcodi.Value,
                    Equipadre = unidad.Equipadre.Value,
                    Grupocodi = unidad.Grupocodi,
                    Famcodi = ConstantesHorasOperacion.IdTipoTermica,
                    Equicodi = unidad.Equicodi,
                    Itotunidadnomb = unidad.UnidadnombPR25,

                };

                if (unidad.TieneModificacionPropiedad && unidad.Grupoincremental != 1)
                {
                    objUnidad.Itotdescadic = string.Format("Potencia efectiva vigente a partir del {0}.", unidad.FechaVigencia.Value.ToString(ConstantesAppServicio.FormatoFecha));
                }

                lista.Add(objUnidad);
            }

            return lista;
        }

        /// <summary>
        /// Realiza el proceso de actualizar la lista de empresas en IND_RELACION_EMPRESA
        /// </summary>
        /// <returns></returns>
        public void ActualizarRelacionEmpresa(string user)
        {
            List<IndRelacionEmpresaDTO> listaRelaciónEmpresa = this.ListIndRelacionEmpresa();
            List<IndReporteTotalDTO> listaUnidadTermico = ListarUnidadTermicoOpComercialToRelacionEmpresa();
            foreach (IndReporteTotalDTO dtoUnidTerm in listaUnidadTermico)
            {
                string sPkUnidTerm = dtoUnidTerm.Emprcodi.ToString() + "." + dtoUnidTerm.Equipadre.ToString() + "." + dtoUnidTerm.Grupocodi.ToString() + "." + dtoUnidTerm.Equicodi.ToString();
                bool bPresente = false; //No esta presente en la lista
                //Consultamos si el dtoUnidadTermico esta la listaRelaciónEmpresa
                foreach (IndRelacionEmpresaDTO dtoRelEmp in listaRelaciónEmpresa)
                {
                    string sPkdtoRelEmp = dtoRelEmp.Emprcodi.ToString() + "." + dtoRelEmp.Equicodicentral.ToString() + "." + dtoRelEmp.Grupocodi.ToString() + "." + dtoRelEmp.Equicodiunidad.ToString();

                    if (sPkUnidTerm == sPkdtoRelEmp)
                    {
                        bPresente = true; //Si esta en la lista
                        break; //Salismo del bucle
                    }
                }
                if (!bPresente)
                {
                    //Si no esta en toda la lista, Insertamos la nueva empresa en IND_RELACION_EMPRESA
                    IndRelacionEmpresaDTO dto = new IndRelacionEmpresaDTO();
                    dto.Emprcodi = dtoUnidTerm.Emprcodi;
                    dto.Equicodicentral = dtoUnidTerm.Equipadre;
                    dto.Equicodiunidad = (int)dtoUnidTerm.Equicodi;
                    dto.Grupocodi = (int)dtoUnidTerm.Grupocodi;
                    dto.Famcodi = dtoUnidTerm.Famcodi;
                    dto.Relempunidadnomb = dtoUnidTerm.Itotunidadnomb;
                    dto.Gaseoductoequicodi = -1;
                    dto.Relempcuadro1 = "N";
                    dto.Relempcuadro2 = "N";
                    dto.Relempsucad = "N";
                    dto.Relempsugad = "N";
                    dto.Relempestado = "N";
                    dto.Relemptecnologia = 0;
                    dto.Relempusucreacion = user;
                    dto.Relempfeccreacion = DateTime.Now;
                    dto.Relempusumodificacion = user;
                    dto.Relempfecmodificacion = DateTime.Now;
                    this.SaveOrUpdateIndRelacionEmpresa(dto);
                }

            }

        }

        /// <summary>
        /// Retorna una lista de registros de la tabla PR_GRUPO con los filtros respectivos, 
        /// para ser utilizado en el listado/obtención del grupocodi para CN2
        /// </summary>
        /// <returns></returns>
        public List<PrGrupoDTO> ListarPrGrupoForCN2()
        {
            return FactorySic.GetIIndRelacionEmpresaRepository().ListPrGrupoForCN2();
        }

        #endregion

        #region Cumplimiento Diario
        /// <summary>
        /// Actualiza, los registros D1...D31 y E1....E31 
        /// </summary>
        public void UpdateIndCrdEstado(IndCrdSugadDTO entity)
        {
            try
            {
                FactorySic.GetIndCrdSugadRepository().UpdateIndCrdEstado(entity);
            }
            catch (Exception ex)
            {
                Logger.Error(ConstantesAppServicio.LogError, ex);
                throw;
            }
        }

        /// <summary>
        /// Permite obtener un registro de la tabla IND_CRDSUGAD  mediante su PK
        /// </summary>
        public IndCrdSugadDTO GetByIdIndCrdSugad(int crdsgdcodi)
        {
            return FactorySic.GetIndCrdSugadRepository().GetById(crdsgdcodi); ;
        }

        /// <summary>
        /// Consulta a la tabla IND_CRDSUGAD por el estado (Plazo o fuera Plazo) de la informacion
        /// reportada.
        /// </summary>
        /// <param name="emprcodi">Identificador de la empresa</param>
        /// <param name="ipericodi">Identificador del periodo</param>
        /// <param name="tipo">Identificador del Tipo CRD, CDU op CCD</param>
        /// <returns></returns>
        public List<IndCrdSugadDTO> ListCumplimientoDiario(int emprcodi, int ipericodi, int tipo)
        {
            return FactorySic.GetIndCrdSugadRepository().ListCumplimientoDiario(emprcodi, ipericodi, tipo);
        }

        /// <summary>
        /// Consulta a la tabla IND_CRDSUGAD para ver si lsa empresas reportaron dentro o fuera de Plazo
        /// </summary>
        /// <param name="periodo">Identificador del periodo</param>
        /// <param name="empresa">Identificador de la empresa</param>
        /// <param name="estado">Estado Todos(0), Plazo(1) y Fuera Plazo(2)</param>
        /// <returns></returns>
        public List<IndCrdSugadDTO> IndisponibilidadCumplimientoDiario(int periodo, int empresa, int estado)
        {
            List<string> dias = this.ObtenerDiasxPeriodo(periodo);
            decimal numDias = dias.Count;//La cantidad de dias a examinar, tb es el 100%
            List<IndCrdSugadDTO> lista = this.ListCumplimientoDiario(empresa, periodo, ConstantesIndisponibilidades.TipoCRD)
                                                    .Where(x => x.Crdsgdtipo == ConstantesIndisponibilidades.Central).ToList();
            if (lista.Count == 0)
            {
                return lista;
            }

            foreach (var item in lista)
            {
                decimal fueraPlazo = 0;
                for (int i = 0; i < numDias; i++)
                {
                    string plazo = item.GetType().GetProperty("E" + (i + 1)).GetValue(item, null).ToString();
                    if (plazo == "N")
                    {
                        fueraPlazo++;//Cuento los fuera de plazo
                    }
                }
                item.Cumplimiento = (fueraPlazo == 0) ? "EN PLAZO" : "FUERA PLAZO";
                item.Porcentaje = Math.Round(((numDias - fueraPlazo) / numDias) * 100, 2);
            }

            if (estado == 0)
            {
                return lista;
            }
            else
            {
                return (estado == 1) ? lista.Where(x => x.Cumplimiento == "EN PLAZO").ToList()
                                     : lista.Where(x => x.Cumplimiento == "FUERA PLAZO").ToList();
            }
        }

        /// <summary>
        /// Consulta a la tabla IND_CRDSUGAD para ver si lsa empresas reportaron dentro o fuera de Plazo,
        /// la consulta se realiza mediante la pk de la tabla.
        /// </summary>
        /// <param name="periodo">Identificador del periodo</param>
        /// <param name="codigo">Identificador de la empresa</param>
        /// <param name="tipo">Indica si la data se visualiza o edita</param>
        /// <returns></returns>
        public object IndisponibilidadEstadoPlazo(int periodo, int codigo, string tipo)
        {
            List<object> data = new List<object>();
            List<string> dias = this.ObtenerDiasxPeriodo(periodo);
            decimal numDias = dias.Count;//La cantidad de dias a examinar, tb es el 100%
            IndCrdSugadDTO crd = this.GetByIdIndCrdSugad(codigo);

            for (int i = 0; i < numDias; i++)
            {
                object entity;
                string[] val = { crd.GetType().GetProperty("E" + (i + 1)).GetValue(crd, null).ToString() };
                entity = new
                {
                    id = "d" + (i + 1),
                    label = dias[i],
                    data = val,
                    htrender = tipo
                };
                data.Add(entity);
            }

            return new { data, codigo };
        }

        /// <summary>
        /// Actualiza los estados de envio de informacion, en Plazo o fuera de Plazo.
        /// </summary>
        /// <param name="datos">Datos enviados por el usuario</param>
        /// <param name="codigo">Identificador de la tabla IND_CRDSUGAD</param>
        /// <returns></returns>
        public object GrabaCumplimiento(string[] datos, int codigo)
        {
            object res = new object();
            string msjData = String.Empty;
            int msjTipo = 0;
            int numDatos = datos.Length;
            IndCrdSugadDTO entity = new IndCrdSugadDTO();
            entity.Crdsgdcodi = codigo;
            for (int i = 0; i < 31; i++)//31 por el maximo de dias al mes
            {
                if (i > numDatos - 1)
                {
                    entity.GetType().GetProperty("E" + (i + 1).ToString()).SetValue(entity, "S");
                }
                else
                {
                    if (datos[i].ToString().Trim().Equals("S") || datos[i].ToString().Trim().Equals("N"))
                    {
                        entity.GetType().GetProperty("E" + (i + 1).ToString()).SetValue(entity, datos[i]);
                    }
                    else
                    {
                        msjTipo = -1;
                        msjData = "Solo se permite ingresar S o N...";
                        res = new { msjData, msjTipo };
                        return res;
                    }
                }
            }
            this.UpdateIndCrdEstado(entity);
            msjData = "Registro actualizado...";
            res = new { msjData, msjTipo };

            return res;
        }

        /// <summary>
        /// Método que genera el reporte excel para el cumplimiento
        /// </summary>
        public string ExportarReporteCumplimiento(IndFormatoExcel formato, string pathFile, string filename)
        {
            //string Reporte = filename + "_" + DateTime.Now.ToString("ddMMyyyy") + ".xlsx";
            string Reporte = filename + ".xlsx";
            ExcelDocument.GenerarArchivoCumplimientoExcel(formato, pathFile + Reporte);

            return Reporte;
        }

        /// <summary>
        /// Método que genera el reporte de cumplimiento entre las empresas, se consulta
        /// a la tabla IND_TRANSPORTEDETALLE
        /// </summary>
        public List<IndTransporteDetalleDTO> ReporteIncumplimientoByPeriodo(int ipericodi)
        {
            return FactorySic.GetIndTransporteDetalleRepository().ReporteIncumplimientoByPeriodo(ipericodi);
        }

        /// <summary>
        /// Proceso para identificar a quienes se les enviara las notificaciones
        /// por diferncias entre los cuadroa A2 y CRD
        /// </summary>
        public void EnvioNotificacion()
        {
            //Al final del dia almacenar la fecha
            DateTime hoy = DateTime.Now;
            int anio = hoy.Year, mes = hoy.Month;
            IndPeriodoDTO periodo = this.ListPeriodo().Where(x => x.Iperianio == anio && x.Iperimes == mes)
                                                      .FirstOrDefault();
            //Preguntar por los registros //periodo.Ipericodi
            List<IndTransporteDetalleDTO> reporte = this.ReporteIncumplimientoByPeriodo(periodo.Ipericodi);//180 para als pruebas

            if (reporte.Count != 0)
            {
                //Armando tabla
                StringBuilder sb = new StringBuilder();
                sb.Append("<br>");
                sb.Append("<br>");
                sb.Append("<table border='1px' cellspacing='5' cellspacing='0' ");
                sb.Append("style='border: solid 1px Silver; font-size: x-small;'>");
                sb.Append("<tr align='left' valign='top'>");
                sb.Append("<thead>");
                sb.Append("<tr>");
                sb.Append("<th style=''>Fecha Cumplimiento</th>");
                sb.Append("<th style=''>Empresa Compra</th>");
                sb.Append("<th style=''>Cantidad Compra</th>");
                sb.Append("<th style=''>Empresa Venta</th>");
                sb.Append("<th style=''>Cantidad Venta</th>");
                sb.Append("</tr>");
                sb.Append("</thead>");
                sb.Append("<tbody>");
                foreach (var item in reporte)
                {
                    sb.Append("<tr>");
                    sb.Append("<td>");
                    sb.Append(item.FechaCumplimiento);
                    sb.Append("</td>");
                    sb.Append("<td>");
                    sb.Append(item.EmpresaCompra);
                    sb.Append("</td>");
                    sb.Append("<td>");
                    sb.Append(item.CantidadCompra.ToString());
                    sb.Append("</td>");
                    sb.Append("<td>");
                    sb.Append(item.EmpresaVenta);
                    sb.Append("</td>");
                    sb.Append("<td>");
                    sb.Append(item.CantidadVenta);
                    sb.Append("</td>");
                    sb.Append("</tr>");
                }
                sb.Append("</tbody>");
                sb.Append("</table>");

                string email = ConstantesIndisponibilidades.UsuarioNotificacion;
                string asunto = "Reporte de cumplimiento " + periodo.Iperinombre;
                string descripcion = "Reporte generado por las diferencias entre lo comprado y vendido para el periodo "
                                     + periodo.Iperinombre;
                string mensaje = descripcion + sb.ToString();
                //Correo
                COES.Base.Tools.Util.SendEmail(email, asunto, mensaje);
            }
        }

        /// <summary>
        /// lista datos de la tabla Ind_CombustibleContrato
        /// </summary>
        /// <param name="fechaIni"></param>
        /// <param name="fechaFin"></param>
        /// <param name="empresa"></param>
        /// <param name="listaUnidadGasLiquido"></param>
        /// <param name="listaData"></param>
        /// <param name="listaMsj"></param>
        public void ListarContratoCombustiblePorRangoFechaIndisponibilidad(DateTime fechaIni, DateTime fechaFin, string empresa
                                                , out List<CombustibleContrato> listaUnidadGasLiquido, out List<CombustibleContrato> listaData
                                                , out List<ResultadoValidacionAplicativo> listaMsj)
        {
            //Toda la información es programado
            List<CombustibleContrato> lista = new List<CombustibleContrato>();

            //unidades gas o liquidos
            List<EqEquipoDTO> listaCentralGasLiquido = ObtenerListaCentralXEstadoCombustible(fechaIni, fechaFin, empresa);
            List<SiTipoinformacionDTO> listaTipoinformacion = FactorySic.GetSiTipoinformacionRepository().List();

            //gaseoductos
            List<IndGaseoductoxcentralDTO> listaGaseoductos = ListIndGaseoductoxcentrals();

            //stock programado extranet webform
            //List<MeMedicion1DTO> listaSucad = _servStockComb.ObtenerConsultaStock(fechaIni, fechaFin, -1, -1, -1);
            //ASSETEC [IND.PR25.2022]
            List<MeMedicion1DTO> listaSucad = _servStockComb.ObtenerConsultaStockIndisponibilidades(fechaIni, fechaFin, -1, -1, -1);
            //ASSETEC [IND.PR25.2022]

            List<int> listaEquicodiGasoducto = listaGaseoductos.Select(x => x.Gaseoductoequicodi).Distinct().ToList();

            //SUCAD
            foreach (var regCentral in listaCentralGasLiquido)
            {
                var regGaseoducto = listaGaseoductos.Find(x => x.Equicodi == regCentral.Equicodi);
                var listaFenerg = regCentral.ListaFuenteEnergia; //.Where(x=> ConstantesPR5ReportesServicio.FenergcodiGas != x.Fenergcodi).ToList();

                for (DateTime day = fechaIni.Date; day <= fechaFin; day = day.AddDays(1))
                {

                    foreach (var regFenerg in listaFenerg)
                    {

                        //esta información está en la tabla PR_DISPONIBILIDAD
                        int tipoinfocodi = -1;
                        switch (regFenerg.Fenergcodi)
                        {
                            case ConstantesPR5ReportesServicio.FenergcodiCarbon:
                                tipoinfocodi = 42; //Carbón (kg)
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiBiogas:
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiR6:
                                tipoinfocodi = 44; //R6 (Galones)
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiR500:
                                tipoinfocodi = 45; //R500 (Galones)
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiGas:
                                tipoinfocodi = 46; //Gas natural (Mm3) millones de metros cubicos
                                break;
                            case ConstantesPR5ReportesServicio.FenergcodiDiesel:
                                //tipoinfocodi = 47; //Diesel (Galones)
                                tipoinfocodi = 43; //Biodiesel (Galones)
                                break;
                        }
                        if (regCentral.Equicodi == 15107) //Caso especial CT RECKA 
                        { tipoinfocodi = 47; }

                        string tipoinfoabrev = listaTipoinformacion.Find(x => x.Tipoinfocodi == tipoinfocodi)?.Tipoinfodesc ?? "";

                        var regStockCombustible = listaSucad.Find(x => x.Medifecha == day && x.Equicodi == regCentral.Equicodi && x.Tipoinfocodi == tipoinfocodi);

                        CombustibleContrato c = new CombustibleContrato();
                        c.CbctrtFechaDia = day;
                        c.Gaseoducto = regGaseoducto != null ? regGaseoducto.Gaseoducto : string.Empty;
                        c.Gaseoductoequicodi = regGaseoducto != null ? (int?)regGaseoducto.Gaseoductoequicodi : null;
                        c.Equinomb = "CENTRAL";
                        c.Equicodi = regCentral.Equipadre ?? 0;
                        c.Equipadre = regCentral.Equipadre ?? 0;
                        c.Central = regCentral.Central;
                        c.Emprcodi = regCentral.Emprcodi ?? 0;
                        c.Emprnomb = regCentral.Emprnomb;
                        c.Fenergcodi = regFenerg.Fenergcodi;

                        c.Tipoinfocodi = tipoinfocodi;
                        c.Tipoinfodesc = tipoinfoabrev;
                        c.Tptomedicodi = ConstantesIndisponibilidades.TipoSucad;
                        c.Tptomedinomb = "SUCAD";
                        c.Valor = regStockCombustible != null ? regStockCombustible.H1 : null;
                        //Assetec [IND.PR252022]
                        c.Ptomedicodi = regStockCombustible != null ? regStockCombustible.Ptomedicodi : 0;
                        //Assetec [IND.PR252022]
                        lista.Add(c);
                    }
                }
            }

            listaData = lista.OrderBy(x => x.Emprnomb).ThenBy(x => x.Gaseoducto).ThenBy(x => x.Central).ThenBy(x => x.Equinomb).ToList();

            listaUnidadGasLiquido = listaData.GroupBy(x => new { x.Emprcodi, x.Gaseoductoequicodi, x.Equipadre, x.Equicodi, x.Tipoinfocodi, x.Tptomedicodi }).Select(x => new CombustibleContrato()
            {
                Emprcodi = x.Key.Emprcodi,
                Emprnomb = (x.First().Emprnomb ?? "").Trim(),
                Gaseoductoequicodi = x.Key.Gaseoductoequicodi,
                Gaseoducto = (x.First().Gaseoducto ?? "").Trim(),
                Equipadre = x.Key.Equipadre,
                Central = (x.First().Central ?? "").Trim(),
                Equicodi = x.Key.Equicodi,
                Equinomb = (x.First().Equinomb ?? "").Trim(),
                Tipoinfocodi = x.Key.Tipoinfocodi,
                Tipoinfodesc = (x.First().Tipoinfodesc ?? "").Trim(),
                Tptomedicodi = x.Key.Tptomedicodi,
                Tptomedinomb = (x.First().Tptomedinomb ?? "").Trim()
            }).ToList();

            //validación
            listaMsj = new List<ResultadoValidacionAplicativo>();
            foreach (var reg in listaUnidadGasLiquido)
            {
                var sublista = listaData.Where(x => x.Gaseoductoequicodi == reg.Gaseoductoequicodi
                                                                      && x.Equipadre == reg.Equipadre && x.Equicodi == reg.Equicodi
                                                                      && x.Tipoinfocodi == reg.Tipoinfocodi && x.Tptomedicodi == reg.Tptomedicodi).ToList();

                for (DateTime fecha = fechaIni; fecha <= fechaFin; fecha = fecha.AddDays(1))
                {
                    var entity2 = sublista.Find(x => x.CbctrtFechaDia == fecha.Date);

                    bool tienestyle = entity2 != null ? entity2.Valor == null : true;
                    if (entity2 != null && ConstantesIndisponibilidades.TptomediSUGAD == entity2.Tptomedicodi) tienestyle = false;

                    entity2.TieneDeclaracionAgente = !tienestyle;

                    if (!entity2.TieneDeclaracionAgente)
                    {
                        listaMsj.Add(new ResultadoValidacionAplicativo()
                        {
                            TipoResultado = 2,
                            TipoFuenteDatoDesc = "Reporte de Cumplimiento",
                            Descripcion = string.Format("No existe declaración para el día {0} {1} {2}. {3} {4}", fecha.ToString(ConstantesAppServicio.FormatoFecha), entity2.Central, entity2.Equinomb, entity2.Tptomedinomb, entity2.Tipoinfodesc),
                            Accion = ""
                        });
                    }
                }
            }
        }

        #endregion

        #endregion
    }
}